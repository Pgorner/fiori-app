{"!name":"sap.ui.integration","!version":"1.21.1","!define":{"sap.ui.integration.designtime.editor":{"settings":{"!description":"settings : Object","!category":"enum","!type":"Object"},"parentWidth":{"!description":"parentWidth : sap.ui.core.CSSSize","!category":"enum","!type":"sap.ui.core.CSSSize"},"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"parentHeight":{"!description":"parentHeight : sap.ui.core.CSSSize","!category":"enum","!type":"sap.ui.core.CSSSize"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"CardPreview":"sap.ui.integration.designtime.editor.CardPreview_obj","busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","card":{"!description":"card : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.designtime.baseEditor.PropertyEditors":{"attachPropertyEditorsChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:propertyEditorsChange propertyEditorsChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself.\n\nFires when the internal <code>propertyEditors<\/code> aggregation changes, e.g. called after the initial initialization or after changing <code>tag<\/code> or <code>config<\/code> properties.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"fireLayoutChange":{"!description":"Fires event {@link #event:layoutChange layoutChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"detachInit":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:init init} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"fireEditorChange":{"!description":"Fires event {@link #event:editorChange editorChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"fireInit":{"!description":"Fires event {@link #event:init init} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"detachReady":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:ready ready} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"detachTagsChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:tagsChange tagsChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"getTags":{"!description":"Gets current value of property {@link #getTags tags}.\n\nList of tags to render, e.g. <code>\"header,content\"<\/code>. Only the properties that contain both tags will be rendered.","!static":false,"!category":"function","!type":"fn() -> String"},"setLayout":{"!description":"Sets a new value for property {@link #getLayout layout}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>\"list\"<\/code>.","!static":false,"!category":"function","!type":"fn(sLayout?: String) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"sLayout":"type: string, description: New value for property <code>layout<\/code>"}},"getRenderLabels":{"!description":"Gets current value of property {@link #getRenderLabels renderLabels}.\n\nIndicates whether the embedded <code>BasePropertyEditor<\/code> instances should render their labels.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"fireValidationErrorChange":{"!description":"Fires event {@link #event:validationErrorChange validationErrorChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"attachInit":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:init init} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself.\n\nFires when the wrapper is initialized.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"setLayoutConfig":{"!description":"Sets a new value for property {@link #getLayoutConfig layoutConfig}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oLayoutConfig: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oLayoutConfig":"type: object, description: New value for property <code>layoutConfig<\/code>"}},"attachLayoutConfigChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:layoutConfigChange layoutConfigChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself.\n\nFires when <code>layoutConfig<\/code> changes.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"destroyContent":{"!description":"Destroys the content in the aggregation {@link #getContent content}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.integration.designtime.baseEditor.PropertyEditors"},"!description":"Renders a group of {@link sap.ui.integration.designtime.baseEditor.propertyEditor property editors} based on specified <code>tags<\/code> or custom <code>config<\/code>.","attachValidationErrorChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:validationErrorChange validationErrorChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself.\n\nFires when the error state of one of the nested property editors changes","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.PropertyEditors.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"attachReady":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:ready ready} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself.\n\nFires when the nested editors are ready","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"fireConfigChange":{"!description":"Fires event {@link #event:configChange configChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.PropertyEditors with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"fireLayoutConfigChange":{"!description":"Fires event {@link #event:layoutConfigChange layoutConfigChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"!module":"sap/ui/integration/designtime/baseEditor/PropertyEditors","!helpDescription":"Renders a group of {@link sap.ui.integration.designtime.baseEditor.propertyEditor property editors} based on specified <code>tags<\/code> or custom <code>config<\/code>.","detachConfigChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:configChange configChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"setEditor":{"!description":"Sets the associated {@link #getEditor editor}.","!static":false,"!category":"function","!type":"fn(oEditor: sap.ui.core.ID | sap.ui.integration.designtime.baseEditor.BaseEditor) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oEditor":"type: sap.ui.core.ID|sap.ui.integration.designtime.baseEditor.BaseEditor, description: ID of an element which becomes the new target of this editor association; alternatively, an element instance may be given"}},"fireReady":{"!description":"Fires event {@link #event:ready ready} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"getEditor":{"!description":"ID of the element which is the current target of the association {@link #getEditor editor}, or <code>null<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.ID | null"},"setContent":{"!description":"Sets the aggregated {@link #getContent content}.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oContent":"type: sap.ui.core.Control, description: The content to set"}},"fireTagsChange":{"!description":"Fires event {@link #event:tagsChange tagsChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"getContent":{"!description":"Gets content of aggregation {@link #getContent content}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Control"},"!proto":"sap.ui.core.Control","!category":"class","detachEditorChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:editorChange editorChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"setTags":{"!description":"Sets a new value for property {@link #getTags tags}.\n\nList of tags to render, e.g. <code>\"header,content\"<\/code>. Only the properties that contain both tags will be rendered.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sTags: String) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"sTags":"type: string, description: New value for property <code>tags<\/code>"}},"getLayoutConfig":{"!description":"Gets current value of property {@link #getLayoutConfig layoutConfig}.","!static":false,"!category":"function","!type":"fn() -> Object"},"setConfig":{"!description":"Sets a new value for property {@link #getConfig config}.\n\nAn array of custom configuration objects. If set, it has priority over <code>tags<\/code>. Example: <pre>\n[\n    {\n        \"label\": \"My property 1\",\n        \"type\": \"string\",\n        \"path\": \"path/to/my/property1\"\n    },\n    {\n        \"label\": \"My property 2\",\n        \"type\": \"string\",\n        \"path\": \"path/to/my/property2\"\n    }\n]\n<\/pre> Where: <ul> <li><b>label<\/b> = text string for the property editor label<\/li> <li><b>type<\/b> = one of the registered property editors types in {@link sap.ui.integration.designtime.baseEditor.BaseEditor BaseEditor configuration} (see <code>propertyEditors<\/code> section)<\/li> <li><b>path<\/b> = a binding path to get data from<\/li> <\/ul>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sConfig: Array) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"sConfig":"type: array, description: New value for property <code>config<\/code>"}},"detachLayoutChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:layoutChange layoutChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"getLayout":{"!description":"Gets current value of property {@link #getLayout layout}.\n\nDefault value is <code>\"list\"<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getTags tags} : string<\/li>\n<li>{@link #getRenderLabels renderLabels} : boolean<\/li>\n<li>{@link #getConfig config} : array<\/li>\n<li>{@link #getLayout layout} : string (default: \"list\")<\/li>\n<li>{@link #getLayoutConfig layoutConfig} : object<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Control<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getEditor editor} : (sap.ui.core.ID | sap.ui.integration.designtime.baseEditor.BaseEditor)<\/li>\n<li>{@link #getPropertyEditors propertyEditors} : (sap.ui.core.ID | sap.ui.integration.designtime.baseEditor.PropertyEditor)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:editorChange editorChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:propertyEditorsChange propertyEditorsChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:init init} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:configChange configChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:tagsChange tagsChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:ready ready} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:validationErrorChange validationErrorChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:layoutChange layoutChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:layoutConfigChange layoutConfigChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","attachConfigChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:configChange configChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself.\n\nFires when <code>config<\/code> changes.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"setRenderLabels":{"!description":"Sets a new value for property {@link #getRenderLabels renderLabels}.\n\nIndicates whether the embedded <code>BasePropertyEditor<\/code> instances should render their labels.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(bRenderLabels: Boolean) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"bRenderLabels":"type: boolean, description: New value for property <code>renderLabels<\/code>"}},"attachEditorChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:editorChange editorChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself.\n\nFires when the new editor changes.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachPropertyEditorsChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:propertyEditorsChange propertyEditorsChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"firePropertyEditorsChange":{"!description":"Fires event {@link #event:propertyEditorsChange propertyEditorsChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"detachValidationErrorChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:validationErrorChange validationErrorChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"attachLayoutChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:layoutChange layoutChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself.\n\nFires when <code>layout<\/code> changes.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getConfig":{"!description":"Gets current value of property {@link #getConfig config}.\n\nAn array of custom configuration objects. If set, it has priority over <code>tags<\/code>. Example: <pre>\n[\n    {\n        \"label\": \"My property 1\",\n        \"type\": \"string\",\n        \"path\": \"path/to/my/property1\"\n    },\n    {\n        \"label\": \"My property 2\",\n        \"type\": \"string\",\n        \"path\": \"path/to/my/property2\"\n    }\n]\n<\/pre> Where: <ul> <li><b>label<\/b> = text string for the property editor label<\/li> <li><b>type<\/b> = one of the registered property editors types in {@link sap.ui.integration.designtime.baseEditor.BaseEditor BaseEditor configuration} (see <code>propertyEditors<\/code> section)<\/li> <li><b>path<\/b> = a binding path to get data from<\/li> <\/ul>","!static":false,"!category":"function","!type":"fn() -> Array"},"attachTagsChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:tagsChange tagsChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself.\n\nFires when <code>tags<\/code> changes.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachLayoutConfigChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:layoutConfigChange layoutConfigChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}}},"sap.ui.integration.editor.fields.viz.IconSelect_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.viz.IconSelect with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.viz.VizBase.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.editor.fields.viz.IconSelect"},"sap.ui.integration.editor.Settings_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.Settings with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.editor.Settings"},"sap.ui.integration.designtime.baseEditor.propertyEditor.enumStringEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","EnumStringEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.enumStringEditor.EnumStringEditor_obj","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.groupEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"},"GroupEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.groupEditor.GroupEditor_obj"},"sap.ui.integration.editor.fields.ObjectField_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.ObjectField with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.BaseField.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.editor.fields.ObjectField"},"sap.ui.integration.editor.fields.BaseField_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.BaseField with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.editor.fields.BaseField"},"sap.ui.integration.editor.fields.StringListField":{"!description":"String List Field with string list value, such as [\"value1\", \"value2\"]","extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.StringListField with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.BaseField.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.editor.fields.StringListField.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.editor.fields.BaseField#constructor sap.ui.integration.editor.fields.BaseField} can be used.","!module":"sap/ui/integration/editor/fields/StringListField","!helpDescription":"String List Field with string list value, such as [\"value1\", \"value2\"]","!proto":"sap.ui.integration.editor.fields.BaseField","!category":"class"},"sap.ui.integration.designtime.baseEditor.propertyEditor.separatorEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","SeparatorEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.separatorEditor.SeparatorEditor_obj","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.designtime.cardEditor.propertyEditor.parametersEditor.ParametersEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.cardEditor.propertyEditor.parametersEditor.ParametersEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.mapEditor.MapEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.cardEditor.propertyEditor.parametersEditor.ParametersEditor"},"sap.ui.integration.editor.fields.viz.ShapeSelect_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.viz.ShapeSelect with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.viz.VizBase.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.editor.fields.viz.ShapeSelect"},"sap.ui.integration.designtime.baseEditor.propertyEditor.mapEditor.MapEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.mapEditor.MapEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.mapEditor.MapEditor"},"sap.ui.integration.editor.fields.BaseField":{"fireSettingsPanelOpened":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.editor.fields.BaseField","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"attachAfterInit":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:afterInit afterInit} event of this <code>sap.ui.integration.editor.fields.BaseField<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.editor.fields.BaseField<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.editor.fields.BaseField","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.editor.fields.BaseField<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"!proto":"sap.ui.core.Control","!category":"class","setAllowPopover":{"!description":"Sets a new value for property {@link #getAllowPopover allowPopover}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bAllowPopover?: Boolean) -> sap.ui.integration.editor.fields.BaseField","parameters":{"bAllowPopover":"type: boolean, description: New value for property <code>allowPopover<\/code>"}},"getParameterKey":{"!description":"Gets current value of property {@link #getParameterKey parameterKey}.","!static":false,"!category":"function","!type":"fn() -> String"},"detachSettingsPanelOpened":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.editor.fields.BaseField","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"setParameterKey":{"!description":"Sets a new value for property {@link #getParameterKey parameterKey}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sParameterKey: String) -> sap.ui.integration.editor.fields.BaseField","parameters":{"sParameterKey":"type: string, description: New value for property <code>parameterKey<\/code>"}},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getConfiguration configuration} : object<\/li>\n<li>{@link #getSpecialButton specialButton} : object<\/li>\n<li>{@link #getMode mode} : string<\/li>\n<li>{@link #getHost host} : object<\/li>\n<li>{@link #getVisible visible} : boolean (default: true)<\/li>\n<li>{@link #getParameterKey parameterKey} : string<\/li>\n<li>{@link #getAllowPopover allowPopover} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #get_messageIcon _messageIcon} : (sap.ui.core.ID | sap.ui.core.Icon)<\/li>\n<li>{@link #get_messageStrip _messageStrip} : (sap.ui.core.ID | sap.m.MessageStrip)<\/li>\n<li>{@link #get_editor _editor} : (sap.ui.core.ID | sap.ui.core.Control)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:afterInit afterInit} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:validateFailed validateFailed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:settingsPanelOpened settingsPanelOpened} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","getConfiguration":{"!description":"Gets current value of property {@link #getConfiguration configuration}.","!static":false,"!category":"function","!type":"fn() -> Object"},"getMode":{"!description":"Gets current value of property {@link #getMode mode}.","!static":false,"!category":"function","!type":"fn() -> String"},"setConfiguration":{"!description":"Sets a new value for property {@link #getConfiguration configuration}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oConfiguration: Object) -> sap.ui.integration.editor.fields.BaseField","parameters":{"oConfiguration":"type: object, description: New value for property <code>configuration<\/code>"}},"getAllowPopover":{"!description":"Gets current value of property {@link #getAllowPopover allowPopover}.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getHost":{"!description":"Gets current value of property {@link #getHost host}.","!static":false,"!category":"function","!type":"fn() -> Object"},"detachAfterInit":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:afterInit afterInit} event of this <code>sap.ui.integration.editor.fields.BaseField<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.editor.fields.BaseField","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"setVisible":{"!description":"Sets a new value for property {@link #getVisible visible}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bVisible?: Boolean) -> sap.ui.integration.editor.fields.BaseField","parameters":{"bVisible":"type: boolean, description: New value for property <code>visible<\/code>"}},"setHost":{"!description":"Sets a new value for property {@link #getHost host}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oHost: Object) -> sap.ui.integration.editor.fields.BaseField","parameters":{"oHost":"type: object, description: New value for property <code>host<\/code>"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.editor.fields.BaseField.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getVisible":{"!description":"Gets current value of property {@link #getVisible visible}.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"fireAfterInit":{"!description":"Fires event {@link #event:afterInit afterInit} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.editor.fields.BaseField","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"fireValidateFailed":{"!description":"Fires event {@link #event:validateFailed validateFailed} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.editor.fields.BaseField","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"setMode":{"!description":"Sets a new value for property {@link #getMode mode}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sMode: String) -> sap.ui.integration.editor.fields.BaseField","parameters":{"sMode":"type: string, description: New value for property <code>mode<\/code>"}},"attachSettingsPanelOpened":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.editor.fields.BaseField","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.editor.fields.BaseField<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.BaseField with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!module":"sap/ui/integration/editor/fields/BaseField","getSpecialButton":{"!description":"Gets current value of property {@link #getSpecialButton specialButton}.","!static":false,"!category":"function","!type":"fn() -> Object"},"detachValidateFailed":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:validateFailed validateFailed} event of this <code>sap.ui.integration.editor.fields.BaseField<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.editor.fields.BaseField","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"setSpecialButton":{"!description":"Sets a new value for property {@link #getSpecialButton specialButton}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oSpecialButton: Object) -> sap.ui.integration.editor.fields.BaseField","parameters":{"oSpecialButton":"type: object, description: New value for property <code>specialButton<\/code>"}},"attachValidateFailed":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:validateFailed validateFailed} event of this <code>sap.ui.integration.editor.fields.BaseField<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.editor.fields.BaseField<\/code> itself.\n\nFired when validation failed.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.editor.fields.BaseField","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.editor.fields.BaseField<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}}},"sap.ui.integration.widgets.Card":{"resetPaginator":{"!static":false,"!category":"function","!type":"fn()"},"hideBlockingMessage":{"!description":"Hide the blocking message that is shown in the card by <code>showBlockingMessage<\/code> call.","!static":false,"!category":"function","!type":"fn()"},"fireStateChanged":{"!description":"Fires event {@link #event:stateChanged stateChanged} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.widgets.Card","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"getManifest":{"!description":"Overwrites getter for card manifest.","!static":false,"!category":"function","!type":"fn() -> String | Object"},"fireAction":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> Boolean","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"getPreviewMode":{"!description":"Gets current value of property {@link #getPreviewMode previewMode}.\n\nPreview mode of the <code>Card<\/code>. Helpful in scenarios when the end user is choosing or configuring a card. <ul> <li>When set to \"MockData\", the card data is loaded, using a data request, as configured in the \"data/mockData\" in the manifest. If such configuration is missing, then the Abstract mode will be used instead.<\/li> <li>When set to \"Abstract\", the card shows abstract placeholder without loading data.<\/li> <li>When set to \"Off\", the card displays real data.<\/li> <\/ul>\n\nDefault value is <code>Off<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.integration.CardPreviewMode"},"refreshAllData":{"!static":false,"!category":"function","!type":"fn()"},"setPreviewMode":{"!description":"Sets a new value for property {@link #getPreviewMode previewMode}.\n\nPreview mode of the <code>Card<\/code>. Helpful in scenarios when the end user is choosing or configuring a card. <ul> <li>When set to \"MockData\", the card data is loaded, using a data request, as configured in the \"data/mockData\" in the manifest. If such configuration is missing, then the Abstract mode will be used instead.<\/li> <li>When set to \"Abstract\", the card shows abstract placeholder without loading data.<\/li> <li>When set to \"Off\", the card displays real data.<\/li> <\/ul>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Off<\/code>.","!static":false,"!category":"function","!type":"fn(sPreviewMode?: sap.ui.integration.CardPreviewMode) -> sap.ui.integration.widgets.Card","parameters":{"sPreviewMode":"type: sap.ui.integration.CardPreviewMode, description: New value for property <code>previewMode<\/code>"}},"attachAction":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.widgets.Card","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.widgets.Card<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getBindingNamespaces":{"!static":false,"!category":"function","!type":"fn() -> Object"},"sizeQuery":{"!description":"Returns the matching value from the query.\n\nsize('standard') => true\n\nsize({small:2, standard:5, large: 10}) => 5","!static":false,"!category":"function","!type":"fn(vQuery: String | Object) -> *","parameters":{"vQuery":"type: string|object, description: The query."}},"getTranslatedText":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(sKey: String, aArgs?: [String], bIgnoreKeyFallback?: Boolean) -> String","parameters":{"aArgs":"type: string[], description: List of parameter values which should replace the placeholders \"{<i>n<\/i>}\" (<i>n<\/i> is the index) in the found locale-specific string value. Note that the replacement is done whenever <code>aArgs<\/code> is given, no matter whether the text contains placeholders or not and no matter whether <code>aArgs<\/code> contains a value for <i>n<\/i> or not.","sKey":"type: string, description: Key to retrieve the text for","bIgnoreKeyFallback":"type: boolean, description: If set, <code>undefined<\/code> is returned instead of the key string, when the key is not found in any bundle or fallback bundle."}},"getBlockingMessage":{"!description":"Get information about the blocking message in the card.","!static":false,"!category":"function","!type":"fn() -> sap.ui.integration.BlockingMessageSettings | null"},"showBlockingMessage":{"!description":"Show blocking message in the card's content area. Should be used after the <code>manifestApplied<\/code> event or after the <code>cardReady<\/code> lifecycle hook in Component cards and Extensions.","!static":false,"!category":"function","!type":"fn(oSettings: sap.ui.integration.BlockingMessageSettings)","parameters":{"oSettings":"type: sap.ui.integration.BlockingMessageSettings, description: Blocking message settings"}},"getDataMode":{"!description":"Gets current value of property {@link #getDataMode dataMode}.\n\nDefines the state of the <code>Card<\/code>. When set to <code>Inactive<\/code>, the <code>Card<\/code> doesn't make requests.\n\nDefault value is <code>Auto<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.integration.CardDataMode"},"getManifestEntry":{"!description":"Returns a value from the Manifest based on the specified path.\n\n<b>Note<\/b> Use this method when the manifest is ready. Check <code>manifestReady<\/code> event.","!static":false,"!category":"function","!type":"fn(sPath: String) -> Object","parameters":{"sPath":"type: string, description: The path to return a value for."}},"getHost":{"!description":"ID of the element which is the current target of the association {@link #getHost host}, or <code>null<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.ID | null"},"getManifestRawJson":{"!description":"Returns a clone of the initial manifest without any processing and without any changes applied to it.","!static":false,"!category":"function","!type":"fn() -> Object"},"destroyActionDefinitions":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn() -> sap.ui.integration.widgets.Card"},"fireManifestReady":{"!description":"Fires event {@link #event:manifestReady manifestReady} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.widgets.Card","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"!description":"A control that represents a container with a header and content.\n\n<h3>Overview<\/h3> Cards are small user interface elements which provide the most important information from an app, related to a specific role or task. The information is represented in a compact manner, allowing for actions to be executed. Cards can be described as small representations of an app which can be integrated in different systems.\n\nThe integration card is defined in a declarative way, using a manifest.json to be: <ul> <li>Easily integrated into apps<\/li> <li>Easily reused across apps<\/li> <li>Understandable by other technologies<\/li> <li>Self-contained (has a built-in functionality and doesn't need external configuration)<\/li> <li>Dynamic parameter handling<\/li> <li>Clear separation of the roles of the card and app developers<\/li> <\/ul>\n\nThe role of the card developer is to describe the card in a manifest.json file and define: <ul> <li>Header<\/li> <li>Content<\/li> <li>Data source<\/li> <li>Possible actions<\/li> <\/ul>\n\nThe role of the app developer is to integrate the card into the app and define: <ul> <li>The dimensions of the card inside a layout of choice, using the <code>width<\/code> and <code>height<\/code> properties<\/li> <li>The behavior for the actions described in the manifest.json file, using the action event<\/li> <\/ul>\n\n<strong>You can learn more about integration cards in the {@link demo:sap/ui/integration/demokit/cardExplorer/index.html Card Explorer}<\/strong>\n\n<i>When to use<\/i> <ul> <li>When you want to reuse the card across apps.<\/li> <li>When you need easy integration and configuration.<\/li> <\/ul>\n\n<i>When not to use<\/i> <ul> <li>When you need more header and content flexibility.<\/li> <li>When you have to achieve simple card visualization. For such cases, use: {@link sap.f.Card sap.f.Card}.<\/li> <li>When you have to use an application model. For such cases, use: {@link sap.f.Card sap.f.Card}.<\/li> <li>When you need complex behavior. For such cases, use: {@link sap.f.Card sap.f.Card}.<\/li> <\/ul>","getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.widgets.Card.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getCombinedParameters":{"!description":"Gets values of manifest parameters combined with the parameters from <code>parameters<\/code> property.\n\n<b>Notes<\/b>\n\n- Use this method when the manifest is ready. Check <code>manifestReady<\/code> event.\n\n- Use when developing a Component card.","!static":false,"!category":"function","!type":"fn() -> map"},"setManifestChanges":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(sManifestChanges?: [Object]) -> sap.ui.integration.widgets.Card","parameters":{"sManifestChanges":"type: object[], description: New value for property <code>manifestChanges<\/code>"}},"getDataProviderFactory":{"!description":"Returns the <code>DataProviderFactory<\/code> instance configured for the card.","!static":false,"!category":"function","!type":"fn() -> sap.ui.integration.util.DataProviderFactory"},"detachAction":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.widgets.Card","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"indexOfActionDefinition":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(oActionDefinition: sap.ui.integration.ActionDefinition) -> Number","parameters":{"oActionDefinition":"type: sap.ui.integration.ActionDefinition, description: The actionDefinition whose index is looked for"}},"extend":{"!description":"Creates a new subclass of class sap.ui.integration.widgets.Card with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.f.CardBase.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"detachManifestApplied":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:manifestApplied manifestApplied} event of this <code>sap.ui.integration.widgets.Card<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.widgets.Card","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"!module":"sap/ui/integration/widgets/Card","getDesign":{"!description":"Gets current value of property {@link #getDesign design}.\n\nDefines the design of the <code>Card<\/code>.\n\nDefault value is <code>Solid<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.integration.CardDesign"},"loadDesigntime":{"!description":"Loads the module designtime/Card.designtime or the module given in \"sap.card\": { \"designtime\": \"designtime/Own.designtime\" } This file should contain the designtime configuration for the card.\n\nReturns a promise that resolves with an object { designtime: the designtime modules response manifest: the complete manifest json } The promise is rejected if the module cannot be loaded with an object: { error: \"Card.designtime not found\" }","!static":false,"!category":"function","!type":"fn() -> Promise<object>"},"!helpDescription":"A control that represents a container with a header and content.\n\n<h3>Overview<\/h3> Cards are small user interface elements which provide the most important information from an app, related to a specific role or task. The information is represented in a compact manner, allowing for actions to be executed. Cards can be described as small representations of an app which can be integrated in different systems.\n\nThe integration card is defined in a declarative way, using a manifest.json to be: <ul> <li>Easily integrated into apps<\/li> <li>Easily reused across apps<\/li> <li>Understandable by other technologies<\/li> <li>Self-contained (has a built-in functionality and doesn't need external configuration)<\/li> <li>Dynamic parameter handling<\/li> <li>Clear separation of the roles of the card and app developers<\/li> <\/ul>\n\nThe role of the card developer is to describe the card in a manifest.json file and define: <ul> <li>Header<\/li> <li>Content<\/li> <li>Data source<\/li> <li>Possible actions<\/li> <\/ul>\n\nThe role of the app developer is to integrate the card into the app and define: <ul> <li>The dimensions of the card inside a layout of choice, using the <code>width<\/code> and <code>height<\/code> properties<\/li> <li>The behavior for the actions described in the manifest.json file, using the action event<\/li> <\/ul>\n\n<strong>You can learn more about integration cards in the {@link demo:sap/ui/integration/demokit/cardExplorer/index.html Card Explorer}<\/strong>\n\n<i>When to use<\/i> <ul> <li>When you want to reuse the card across apps.<\/li> <li>When you need easy integration and configuration.<\/li> <\/ul>\n\n<i>When not to use<\/i> <ul> <li>When you need more header and content flexibility.<\/li> <li>When you have to achieve simple card visualization. For such cases, use: {@link sap.f.Card sap.f.Card}.<\/li> <li>When you have to use an application model. For such cases, use: {@link sap.f.Card sap.f.Card}.<\/li> <li>When you need complex behavior. For such cases, use: {@link sap.f.Card sap.f.Card}.<\/li> <\/ul>","getOpener":{"!description":"Gets the card which has opened this one if any.","!static":false,"!category":"function","!type":"fn() -> sap.ui.integration.widgets.Card"},"insertActionDefinition":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(oActionDefinition: sap.ui.integration.ActionDefinition, iIndex: Number) -> sap.ui.integration.widgets.Card","parameters":{"oActionDefinition":"type: sap.ui.integration.ActionDefinition, description: The actionDefinition to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the actionDefinition should be inserted at; for a negative value of <code>iIndex<\/code>, the actionDefinition is inserted at position 0; for a value greater than the current size of the aggregation, the actionDefinition is inserted at the last position"}},"setUseProgressiveDisclosure":{"!description":"Sets a new value for property {@link #getUseProgressiveDisclosure useProgressiveDisclosure}.\n\nIf the card should change depending on its size. This property is temporary. Should be used to enable the feature for cards where it is needed.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bUseProgressiveDisclosure?: Boolean) -> sap.ui.integration.widgets.Card","parameters":{"bUseProgressiveDisclosure":"type: boolean, description: New value for property <code>useProgressiveDisclosure<\/code>"}},"fireConfigurationChange":{"!description":"Fires event {@link #event:configurationChange configurationChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.widgets.Card","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"getActionDefinitions":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn() -> [sap.ui.integration.ActionDefinition]"},"setFilterValue":{"!description":"Sets the value of a filter in the card.","!static":false,"!category":"function","!type":"fn(sFilterKey: String, vValue: *)","parameters":{"sFilterKey":"type: string, description: the key of the filter as defined in the manifest","vValue":"type: *, description: value to set"}},"getFocusDomRef":{"!description":"Returns the DOM Element that should get the focus.","!static":false,"!category":"function","!type":"fn() -> Element"},"setReferenceId":{"!description":"Sets a new value for property {@link #getReferenceId referenceId}.\n\nOptional property which can be used by the host to reference the card. It will be forwarded to any children cards. Does not affect the card behavior.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>empty string<\/code>.","!static":false,"!category":"function","!type":"fn(sReferenceId?: String) -> sap.ui.integration.widgets.Card","parameters":{"sReferenceId":"type: string, description: New value for property <code>referenceId<\/code>"}},"triggerAction":{"!description":"Triggers an action inside the card.\n\nUse this method if you need to trigger an action programmatically from inside an <code>Extension<\/code> or from a Component card.\n\nFor other use cases use the manifest to define the actions. See {@link https://ui5.sap.com/test-resources/sap/ui/integration/demokit/cardExplorer/webapp/index.html#/learn/features/cardActions}\n\n<h3>Example<\/h3> <pre>\noCard.triggerAction({\n    type: \"Navigation\",\n    parameters: {\n        url: \"...\",\n        target: \"_blank\"\n    }\n});\n<\/pre>","!static":false,"!category":"function","!type":"fn(oAction: Object)","parameters":{"oAction":"type: object, description: The settings of the action."}},"getRuntimeUrl":{"!description":"Resolves the given URL relatively to the manifest base path. Absolute paths are not changed.","!static":false,"!category":"function","!type":"fn(sUrl: String) -> String","parameters":{"sUrl":"type: string, description: The URL to resolve."}},"request":{"!description":"Performs an HTTP request using the given configuration.","!static":false,"!category":"function","!type":"fn(oConfiguration: Object) -> Promise<any>","parameters":{"oConfiguration":"type: object, description: The configuration of the request."}},"isTileDisplayVariant":{"!static":false,"!category":"function","!type":"fn() -> Boolean"},"scheduleFireStateChanged":{"!description":"Schedules to fire the stateChanged event. If called multiple times in the same tick, only one stateChanged will be fired.","!static":false,"!category":"function","!type":"fn()"},"addActionDefinition":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(oActionDefinition: sap.ui.integration.ActionDefinition) -> sap.ui.integration.widgets.Card","parameters":{"oActionDefinition":"type: sap.ui.integration.ActionDefinition, description: The actionDefinition to add; if empty, nothing is inserted"}},"attachConfigurationChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:configurationChange configurationChange} event of this <code>sap.ui.integration.widgets.Card<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.widgets.Card<\/code> itself.\n\nFired when some configuration settings are changed as a result of user interaction. For example - filter value is changed.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.widgets.Card","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.widgets.Card<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"isReady":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn() -> Boolean"},"showMessage":{"!description":"Displays a message strip above the content with the given text. There can be only 1 message displayed. If there is a previous message, it is removed. Can be used only after the <code>manifestApplied<\/code> event is fired.","!static":false,"!category":"function","!type":"fn(sMessage: String, sType: sap.ui.integration.CardMessageType, bAutoClose: Boolean)","parameters":{"sType":"type: sap.ui.integration.CardMessageType, description: Type of the message.","bAutoClose":"type: boolean, description: Close the message automatically. Default is <code>false<\/code> for most message types. It is <code>true<\/code> for message type <code>Toast<\/code>. <b>Note<\/b> This property has no effect for message type <code>Loading<\/code>.","sMessage":"type: string, description: The message."}},"!proto":"sap.f.CardBase","!category":"class","attachManifestReady":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:manifestReady manifestReady} event of this <code>sap.ui.integration.widgets.Card<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.widgets.Card<\/code> itself.\n\nFired when the manifest is loaded.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.widgets.Card","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.widgets.Card<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachConfigurationChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:configurationChange configurationChange} event of this <code>sap.ui.integration.widgets.Card<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.widgets.Card","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"getReferenceId":{"!description":"Gets current value of property {@link #getReferenceId referenceId}.\n\nOptional property which can be used by the host to reference the card. It will be forwarded to any children cards. Does not affect the card behavior.\n\nDefault value is <code>empty string<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"setParameters":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.integration.widgets.Card","parameters":{"oParameters":"type: object, description: New value for property <code>parameters<\/code>"}},"getBaseUrl":{"!description":"Gets current value of property {@link #getBaseUrl baseUrl}.\n\nDefines the base URL of the card manifest. It should be used when manifest property is an object instead of a URL. If both manifest URL and base URL are defined - the base URL will be used for loading dependencies. If both manifest URL and base URL are not defined - relative resources might not be loaded correctly.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.URI"},"!constructorDescription":"Constructor for a new <code>Card<\/code>.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getReferenceId referenceId} : string (default: \"\")<\/li>\n<li>{@link #getManifest manifest} : any (default: \"\")<\/li>\n<li>{@link #getParameters parameters} : object<\/li>\n<li>{@link #getDataMode dataMode} : sap.ui.integration.CardDataMode (default: Auto)<\/li>\n<li>{@link #getBaseUrl baseUrl} : sap.ui.core.URI<\/li>\n<li>{@link #getManifestChanges manifestChanges} : object[] (default: [])<\/li>\n<li>{@link #getUseMockData useMockData} : boolean (default: false)<\/li>\n<li>{@link #getDesign design} : sap.ui.integration.CardDesign (default: Solid)<\/li>\n<li>{@link #getDisplayVariant displayVariant} : sap.ui.integration.CardDisplayVariant (default: Standard)<\/li>\n<li>{@link #getPreviewMode previewMode} : sap.ui.integration.CardPreviewMode (default: Off)<\/li>\n<li>{@link #getUseProgressiveDisclosure useProgressiveDisclosure} : boolean (default: false)<\/li>\n<li>{@link #getShowCloseButton showCloseButton} : boolean (default: false)<\/li>\n<li>{@link #getInteractive interactive} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getActionDefinitions actionDefinitions} : sap.ui.integration.ActionDefinition[]<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getHost host} : (sap.ui.core.ID | sap.ui.core.Control)<\/li>\n<li>{@link #getOpenerReference openerReference} : (sap.ui.core.ID | sap.ui.core.Control)<\/li>\n<li>{@link #getDialogHeader dialogHeader} : (sap.ui.core.ID | sap.ui.core.Control)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:action action} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:configurationChange configurationChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:manifestReady manifestReady} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:manifestApplied manifestApplied} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:stateChanged stateChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.f.CardBase#constructor sap.f.CardBase}\ncan be used as well.","fireManifestApplied":{"!description":"Fires event {@link #event:manifestApplied manifestApplied} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.widgets.Card","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"getDisplayVariant":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn() -> sap.ui.integration.CardDisplayVariant"},"hideMessage":{"!description":"Hides the message previously shown by showMessage.","!static":false,"!category":"function","!type":"fn()"},"isDataReady":{"!static":false,"!category":"function","!type":"fn() -> Boolean"},"processDestinations":{"!description":"Resolves the destinations and returns a Promise with the resolved configuration.","!static":false,"!category":"function","!type":"fn(oConfig: Object) -> Promise","parameters":{"oConfig":"type: object, description: The configuration."}},"getUseProgressiveDisclosure":{"!description":"Gets current value of property {@link #getUseProgressiveDisclosure useProgressiveDisclosure}.\n\nIf the card should change depending on its size. This property is temporary. Should be used to enable the feature for cards where it is needed.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getManifestWithMergedChanges":{"!description":"Returns a clone of the original manifest with all changes from the manifestChanges property applied on top.\n\nUse during designtime.","!static":false,"!category":"function","!type":"fn() -> Object"},"startManifestProcessing":{"!description":"Starts the card's manifest processing. It will load the manifest and apply the settings written in it. This method can be called if the card needs to be used without rendering. When card is rendered it starts automatically.","!static":false,"!category":"function","!type":"fn()"},"setDataMode":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(sMode: sap.ui.integration.CardDataMode) -> sap.ui.integration.widgets.Card","parameters":{"sMode":"type: sap.ui.integration.CardDataMode, description: The mode to set to the Card."}},"getSevereErrors":{"!description":"Retrieves a list of severe errors that appeared during card initialization.","!static":false,"!category":"function","!type":"fn() -> Array"},"setHost":{"!description":"Sets the associated {@link #getHost host}.","!static":false,"!category":"function","!type":"fn(oHost: sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.integration.widgets.Card","parameters":{"oHost":"type: sap.ui.core.ID|sap.ui.core.Control, description: ID of an element which becomes the new target of this host association; alternatively, an element instance may be given"}},"resolveDestination":{"!description":"Resolves the destination and returns its URL.","!static":false,"!category":"function","!type":"fn(sKey: String) -> Promise<string>","parameters":{"sKey":"type: string, description: The destination's key used in the configuration."}},"setFormValues":{"!description":"Sets the values of form fields in the Object card. Each value in the aFormValues array must have a key and the respective value for ObjectGroupItems as defined in the card's manifest: <code>[ { \"id\": \"textAreaItemId\", \"value\": \"New value\" }, { \"id\": \"textAreaItemId\", \"value\": \"New value\" }, { \"id\": \"comboBoxItemId\", \"selectedKey\": \"key\" } ]<\/code>","!static":false,"!category":"function","!type":"fn(aFormValues: [Object])","parameters":{"aFormValues":"type: object[], description: Array key and value"}},"isCompactHeader":{"!static":false,"!category":"function","!type":"fn() -> Boolean"},"hideLoadingPlaceholders":{"!description":"Hides the loading placeholders on the whole card, or a particular section of the card.","!static":false,"!category":"function","!type":"fn(eCardArea?: sap.ui.integration.CardArea)","parameters":{"eCardArea":"type: sap.ui.integration.CardArea, description: Area of the card to show the loading placeholders on. Possible options are 'Header', 'Content', 'Filters'. Leave empty to hide loading placeholders on all areas of the card."}},"_createChildCard":{"!description":"Creates the child card.","!static":false,"!category":"function","!type":"fn(oParameters: Object) -> sap.ui.integration.widgets.Card","parameters":{"oParameters":"type: Object, description: The parameters for the card."}},"refresh":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn()"},"setManifest":{"!description":"Sets a new value for property {@link #getManifest manifest}.\n\nThe URL of the manifest or an object.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>empty string<\/code>.","!static":false,"!category":"function","!type":"fn(oManifest?: Object) -> sap.ui.integration.widgets.Card","parameters":{"oManifest":"type: any, description: New value for property <code>manifest<\/code>"}},"getHostInstance":{"!description":"Gets the instance of the <code>host<\/code> association.","!static":false,"!category":"function","!type":"fn() -> sap.ui.integration.Host"},"showCard":{"!description":"Shows a child card. By default opens in a dialog.","!static":false,"!category":"function","!type":"fn(oParameters: Object) -> Promise","parameters":{"oParameters":"type: Object, description: The settings for showing the card."}},"attachStateChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:stateChanged stateChanged} event of this <code>sap.ui.integration.widgets.Card<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.widgets.Card<\/code> itself.\n\nFired when the state of the card is changed. For example - the card is ready, new page is selected, a filter is changed or data is refreshed.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.widgets.Card","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.widgets.Card<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"refreshData":{"!description":"Refreshes the card data by triggering all data requests.","!static":false,"!category":"function","!type":"fn()"},"attachManifestApplied":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:manifestApplied manifestApplied} event of this <code>sap.ui.integration.widgets.Card<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.widgets.Card<\/code> itself.\n\nFired when card utilities (like <code>DataProviderFactory<\/code>) and the card elements (like header) are created and initialized.\n\nNote: The card's content may not be available yet because it may depend on other resources to load.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.widgets.Card","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.widgets.Card<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachStateChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:stateChanged stateChanged} event of this <code>sap.ui.integration.widgets.Card<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.widgets.Card","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"hide":{"!description":"Hides the card.","!static":false,"!category":"function","!type":"fn()"},"showLoadingPlaceholders":{"!description":"Displays the loading placeholders on the whole card, or a particular area of the card. <b>Note:<\/b> Only areas that contain binding will receive a loading placeholder.","!static":false,"!category":"function","!type":"fn(eCardArea?: sap.ui.integration.CardArea)","parameters":{"eCardArea":"type: sap.ui.integration.CardArea, description: Area of the card to show the loading placeholders on. Possible options are 'Header', 'Content', 'Filters'. Leave empty to show loading placeholders on all areas of the card."}},"extendStaticConfiguration":{"!static":false,"!category":"function","!type":"fn()"},"removeActionDefinition":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(vActionDefinition: Number | String | sap.ui.integration.ActionDefinition) -> sap.ui.integration.ActionDefinition | null","parameters":{"vActionDefinition":"type: int|string|sap.ui.integration.ActionDefinition, description: The actionDefinition to remove or its index or id"}},"detachManifestReady":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:manifestReady manifestReady} event of this <code>sap.ui.integration.widgets.Card<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.widgets.Card","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"removeAllActionDefinitions":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn() -> [sap.ui.integration.ActionDefinition]"},"setDesign":{"!description":"Sets a new value for property {@link #getDesign design}.\n\nDefines the design of the <code>Card<\/code>.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Solid<\/code>.","!static":false,"!category":"function","!type":"fn(sDesign?: sap.ui.integration.CardDesign) -> sap.ui.integration.widgets.Card","parameters":{"sDesign":"type: sap.ui.integration.CardDesign, description: New value for property <code>design<\/code>"}},"isSmallHeader":{"!static":false,"!category":"function","!type":"fn() -> Boolean"},"setBaseUrl":{"!description":"Sets a new value for property {@link #getBaseUrl baseUrl}.\n\nDefines the base URL of the card manifest. It should be used when manifest property is an object instead of a URL. If both manifest URL and base URL are defined - the base URL will be used for loading dependencies. If both manifest URL and base URL are not defined - relative resources might not be loaded correctly.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sBaseUrl?: sap.ui.core.URI) -> sap.ui.integration.widgets.Card","parameters":{"sBaseUrl":"type: sap.ui.core.URI, description: New value for property <code>baseUrl<\/code>"}},"getParameters":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn() -> Object"},"getManifestChanges":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn() -> [Object]"},"isHeaderDisplayVariant":{"!static":false,"!category":"function","!type":"fn() -> Boolean"},"validateControls":{"!description":"Causes all of the controls within the Card that support validation to validate their data.","!static":false,"!category":"function","!type":"fn() -> Boolean"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.multiSelectEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"MultiSelectEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.multiSelectEditor.MultiSelectEditor_obj","blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration":{"AttributesLayoutType":"sap.ui.integration.AttributesLayoutType","CardMessageType":"sap.ui.integration.CardMessageType","designtime":"sap.ui.integration.designtime","icon":{"!description":"The icon of the action button.","!category":"enum","!type":"sap.ui.core.URI"},"CardArea":"sap.ui.integration.CardArea","!category":"namespace","CardBlockingMessageType":"sap.ui.integration.CardBlockingMessageType","widgets":"sap.ui.integration.widgets","type":{"!description":"The type of the action.","!category":"enum","!type":"sap.ui.integration.CardActionType"},"ActionDefinition":"sap.ui.integration.ActionDefinition_obj","enabled":{"!description":"Indicates whether the user can interact with the action button or not. <b>Note<\/b>: Disabled controls cannot be focused and they are out of the navigation tab-chain.","!category":"enum","!type":"Boolean"},"buttonType":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.130 All <code>ActionDefinitions<\/code> are now rendered as menu items and don't have <code>buttonType<\/code>.<br>The type of the action button.","!category":"enum","!type":"sap.m.ButtonType"},"CardDisplayVariant":"sap.ui.integration.CardDisplayVariant","CardPreviewMode":"sap.ui.integration.CardPreviewMode","text":{"!description":"The text of the action button.","!category":"enum","!type":"String"},"startsSection":{"!description":"Defines whether a visual separator should be rendered before the item. <b>Note<\/b>: If an item is invisible its separator is also not displayed.","!category":"enum","!type":"Boolean"},"!description":"SAPUI5 library with controls specialized for SAP Fiori apps.","editor":"sap.ui.integration.editor","visible":{"!description":"Whether the action button should be visible on the screen.","!category":"enum","!type":"Boolean"},"resolveDestination":{"!description":"A function that resolves the given destination name to a URL.\n\nThe Card calls this function when it needs to send a request to a destination. Function returns the URL to which the request is sent.\n\nIf a card depends on a destination, but this callback is not implemented, an error will be logged.\n\nThe callback receives <code>destinationName<\/code> as parameter and returns a string with the URL. Or alternatively the callback may return a <code>Promise<\/code> with the URL as an argument.","!category":"enum","!type":"fn()"},"CardDesign":"sap.ui.integration.CardDesign","Host":"sap.ui.integration.Host_obj","services":"sap.ui.integration.services","Extension":"sap.ui.integration.Extension_obj","CardDataMode":"sap.ui.integration.CardDataMode","formatters":{"!description":"The formatters that can be used in the manifest.","!category":"enum","!type":"Object"},"util":"sap.ui.integration.util","!module":"sap/ui/integration/library","Designtime":"sap.ui.integration.Designtime_obj","!helpDescription":"SAPUI5 library with controls specialized for SAP Fiori apps.","CardActionType":"sap.ui.integration.CardActionType","parameters":{"!description":"The parameters of the action.","!category":"enum","!type":"Object"},"actions":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"enum","!type":"[sap.ui.integration.CardMenuAction]"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.groupEditor.GroupEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.groupEditor.GroupEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.groupEditor.GroupEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor#constructor sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor} can be used.","!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/groupEditor/GroupEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.editor.fields.DateTimeField_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.DateTimeField with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.BaseField.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.editor.fields.DateTimeField"},"sap.ui.integration.designtime.baseEditor.propertyEditor.iconEditor.IconEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.iconEditor.IconEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.iconEditor.IconEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor#constructor sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor} can be used.","!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/iconEditor/IconEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.editor.fields.NumberField_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.NumberField with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.BaseField.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.editor.fields.NumberField"},"sap.ui.integration.designtime.baseEditor.validator.IsInteger":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!module":"sap/ui/integration/designtime/baseEditor/validator/IsInteger","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"namespace","validate":{"!description":"Validator function","!static":"true","!category":"function","!type":"fn(vValue: Number | String) -> Boolean"}},"sap.ui.integration.designtime.baseEditor.PropertyEditors_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.PropertyEditors with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.PropertyEditors"},"sap.ui.integration.CardArea":{"!description":"Defines the areas in a card.","Filters":{"!description":"The filters area.","!category":"enum","!type":"String"},"!module":"sap/ui/integration/library","Header":{"!description":"The header.","!category":"enum","!type":"String"},"Content":{"!description":"The content area.","!category":"enum","!type":"String"},"!category":"static class"},"sap.ui.integration.editor.fields.DateField":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.DateField with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.BaseField.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.editor.fields.DateField.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.editor.fields.BaseField#constructor sap.ui.integration.editor.fields.BaseField} can be used.","!module":"sap/ui/integration/editor/fields/DateField","!proto":"sap.ui.integration.editor.fields.BaseField","!category":"class"},"sap.ui.integration.designtime.baseEditor.validator.ValidatorRegistry":{"!description":"Registry for property editor validators.","!module":"sap/ui/integration/designtime/baseEditor/validator/ValidatorRegistry","!helpDescription":"Registry for property editor validators.","registerValidators":{"!description":"Registers the given validator types. If a validator type is already registered, it will be skipped and must first be deregistered using the <code>ValidatorRegistry.deregisterValidator<\/code> function.","!static":"true","!category":"function","!type":"fn(mNames: Object<string,string>)"},"ready":{"!description":"Ready check to make sure that all registered validators were loaded.","!static":"true","!category":"function","!type":"fn() -> Promise"},"deregisterValidators":{"!description":"Deregisters the given validator type and cancels the loading.","!static":"true","!category":"function","!type":"fn(sName: String)"},"!category":"namespace","isRegistered":{"!description":"Checks whether the given validator type was registered but not loaded yet.","!static":"true","!category":"function","!type":"fn(sName: String) -> Boolean"},"getValidator":{"!description":"Returns the validator for the given type if it was loaded.","!static":"true","!category":"function","!type":"fn(sName: String) -> Object"},"deregisterAllValidators":{"!description":"Deregisters all validators.","!static":"true","!category":"function","!type":"fn()"}},"sap.ui.integration.editor.fields.viz.VizBase_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.viz.VizBase with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.editor.fields.viz.VizBase"},"sap.ui.integration.designtime.baseEditor.propertyEditor.selectEditor.SelectEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.selectEditor.SelectEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.selectEditor.SelectEditor"},"sap.ui.integration.designtime.baseEditor.propertyEditor.selectEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"},"SelectEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.selectEditor.SelectEditor_obj"},"sap.ui.integration.editor.Extension":{"!description":"Brings JavaScript capabilities for an {@link sap.ui.integration.editor.Editor} where custom logic can be implemented.","getEditor":{"!description":"Returns an interface to the editor, which uses this extension.","!static":false,"!category":"function","!type":"fn() -> sap.ui.integration.widgets.CardFacade"},"!constructorDescription":"Constructor for a new <code>Extension<\/code>.","!module":"sap/ui/integration/editor/Extension","!helpDescription":"Brings JavaScript capabilities for an {@link sap.ui.integration.editor.Editor} where custom logic can be implemented.","onEditorReady":{"!description":"Called when the editor is ready.","!static":false,"!category":"function","!type":"fn()"},"!proto":"sap.ui.integration.Extension","!category":"class"},"sap.ui.integration.util.RequestDataProvider":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.util.RequestDataProvider with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.util.DataProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setHost":{"!description":"Sets the associated {@link #getHost host}.","!static":false,"!category":"function","!type":"fn(oHost: sap.ui.core.ID | sap.ui.integration.Host) -> sap.ui.integration.util.RequestDataProvider","parameters":{"oHost":"type: sap.ui.core.ID|sap.ui.integration.Host, description: ID of an element which becomes the new target of this host association; alternatively, an element instance may be given"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.util.RequestDataProvider.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new <code>RequestDataProvider<\/code>.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getAllowCustomDataType allowCustomDataType} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getHost host} : (sap.ui.core.ID | sap.ui.integration.Host)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.integration.util.DataProvider#constructor sap.ui.integration.util.DataProvider}\ncan be used as well.","!module":"sap/ui/integration/util/RequestDataProvider","setAllowCustomDataType":{"!description":"Sets a new value for property {@link #getAllowCustomDataType allowCustomDataType}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bAllowCustomDataType?: Boolean) -> sap.ui.integration.util.RequestDataProvider","parameters":{"bAllowCustomDataType":"type: boolean, description: New value for property <code>allowCustomDataType<\/code>"}},"!proto":"sap.ui.integration.util.DataProvider","!category":"class","getAllowCustomDataType":{"!description":"Gets current value of property {@link #getAllowCustomDataType allowCustomDataType}.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getHost":{"!description":"ID of the element which is the current target of the association {@link #getHost host}, or <code>null<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.ID | null"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.arrayEditor.ArrayEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.arrayEditor.ArrayEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.arrayEditor.ArrayEditor"},"sap.ui.integration.CardBlockingMessageType":{"!description":"Card blocking message types.","!module":"sap/ui/integration/library","Error":{"!description":"An error occurred in the card.","!category":"enum","!type":"String"},"!category":"static class","Information":{"!description":"Information message.","!category":"enum","!type":"String"},"NoData":{"!description":"There is no data to be displayed.","!category":"enum","!type":"String"}},"sap.ui.integration.Designtime":{"!description":"Brings JavaScript capabilities for an {@link sap.ui.integration.widgets.Card} where custom logic can be implemented.","extend":{"!description":"Creates a new subclass of class sap.ui.integration.Designtime with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.Designtime.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new <code>Designtime<\/code>.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject} can be used.","!module":"sap/ui/integration/Designtime","!helpDescription":"Brings JavaScript capabilities for an {@link sap.ui.integration.widgets.Card} where custom logic can be implemented.","!proto":"sap.ui.base.ManagedObject","!category":"class","getCard":{"!description":"Returns an interface to the card, which uses this extension.","!static":false,"!category":"function","!type":"fn() -> sap.ui.integration.widgets.CardFacade"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.separatorEditor.SeparatorEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.separatorEditor.SeparatorEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.separatorEditor.SeparatorEditor"},"sap.ui.integration.designtime.baseEditor.propertyEditor.stringEditor.StringEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.stringEditor.StringEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.stringEditor.StringEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor#constructor sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor} can be used.","!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/stringEditor/StringEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"ComplexMapEditor":"sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor.ComplexMapEditor_obj","blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.editor.fields.viz":{"ColorSelect":"sap.ui.integration.editor.fields.viz.ColorSelect_obj","VizBase":"sap.ui.integration.editor.fields.viz.VizBase_obj","visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"allowFile":{"!description":"allowFile : Boolean","!category":"enum","!type":"Boolean"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"editable":{"!description":"editable : Boolean","!category":"enum","!type":"Boolean"},"allowNone":{"!description":"allowNone : Boolean","!category":"enum","!type":"Boolean"},"IconSelect":"sap.ui.integration.editor.fields.viz.IconSelect_obj","!category":"namespace","ImageSelect":"sap.ui.integration.editor.fields.viz.ImageSelect_obj","colorEnum":{"!description":"colorEnum : String","!category":"enum","!type":"String"},"allowCustomColors":{"!description":"allowCustomColors : Boolean","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"enumValue":{"!description":"enumValue : String","!category":"enum","!type":"String"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"background":{"!description":"background : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"allowDefaultIcons":{"!description":"allowDefaultIcons : Boolean","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"colorValue":{"!description":"colorValue : String","!category":"enum","!type":"String"},"ShapeSelect":"sap.ui.integration.editor.fields.viz.ShapeSelect_obj","value":{"!description":"value : String","!category":"enum","!type":"String"}},"sap.ui.integration.editor.fields.DateField_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.DateField with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.BaseField.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.editor.fields.DateField"},"sap.ui.integration.designtime.baseEditor.propertyEditor.enumStringEditor.EnumStringEditor":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.81 Use the {@link sap.ui.integration.designtime.baseEditor.propertyEditor.selectEditor.SelectEditor} instead<br>Constructor for a new <code>EnumStringEditor<\/code>. This allows to select from predefined string values or to provide binding strings for a specified property of a JSON object. The editor is rendered as a {@link sap.m.ComboBox}. To get notified about changes made with the editor, you can use the <code>attachValueChange<\/code> method, which passes the current property state as a string representing a valid option value or as a binding string to the provided callback function when the user selects a value or edits the input.\n\n<h3>Configuration<\/h3>\n\n<table style=\"width:100%;\"> <tr style=\"text-align:left\"> <th>Option<\/th> <th>Type<\/th> <th>Default<\/th> <th>Description<\/th> <\/tr> <tr> <td><code>allowCustomValues<\/code><\/td> <td><code>boolean<\/code><\/td> <td><code>false<\/code><\/td> <td>Whether custom values can be set instead of selecting items<\/td> <\/tr> <tr> <td><code>allowBindings<\/code><\/td> <td><code>boolean<\/code><\/td> <td><code>true<\/code><\/td> <td>Whether binding strings can be set instead of selecting items<\/td> <\/tr> <\/table>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.enumStringEditor.EnumStringEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.enumStringEditor.EnumStringEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor#constructor sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor} can be used.","!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/enumStringEditor/EnumStringEditor","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.81 Use the {@link sap.ui.integration.designtime.baseEditor.propertyEditor.selectEditor.SelectEditor} instead<br>Constructor for a new <code>EnumStringEditor<\/code>. This allows to select from predefined string values or to provide binding strings for a specified property of a JSON object. The editor is rendered as a {@link sap.m.ComboBox}. To get notified about changes made with the editor, you can use the <code>attachValueChange<\/code> method, which passes the current property state as a string representing a valid option value or as a binding string to the provided callback function when the user selects a value or edits the input.\n\n<h3>Configuration<\/h3>\n\n<table style=\"width:100%;\"> <tr style=\"text-align:left\"> <th>Option<\/th> <th>Type<\/th> <th>Default<\/th> <th>Description<\/th> <\/tr> <tr> <td><code>allowCustomValues<\/code><\/td> <td><code>boolean<\/code><\/td> <td><code>false<\/code><\/td> <td>Whether custom values can be set instead of selecting items<\/td> <\/tr> <tr> <td><code>allowBindings<\/code><\/td> <td><code>boolean<\/code><\/td> <td><code>true<\/code><\/td> <td>Whether binding strings can be set instead of selecting items<\/td> <\/tr> <\/table>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.designtime.baseEditor.layout":{"Form":"sap.ui.integration.designtime.baseEditor.layout.Form","!category":"namespace"},"sap.ui.integration.designtime.baseEditor.validator.IsSelectedKey":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!module":"sap/ui/integration/designtime/baseEditor/validator/IsSelectedKey","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"namespace","validate":{"!description":"Validator function","!static":"true","!category":"function","!type":"fn(vValue: Number | String, sValue: String, oConfig: Object) -> Boolean"}},"sap.ui.integration.editor.fields.GroupField":{"!description":"Group Field which will contains multi parameters via Panel/Tab","extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.GroupField with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.BaseField.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.editor.fields.GroupField.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.editor.fields.BaseField#constructor sap.ui.integration.editor.fields.BaseField} can be used.","!module":"sap/ui/integration/editor/fields/GroupField","!helpDescription":"Group Field which will contains multi parameters via Panel/Tab","!proto":"sap.ui.integration.editor.fields.BaseField","!category":"class"},"sap.ui.integration.designtime.baseEditor.propertyEditor.numberEditor.NumberEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.numberEditor.NumberEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.numberEditor.NumberEditor"},"sap.ui.integration.CardDisplayVariant":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","TileStandard":{"!description":"Card renders and behaves like a tile of size 2x2.","!category":"enum","!type":"String"},"StandardHeader":{"!description":"The SmallHeader card variant.","!category":"enum","!type":"String"},"TileFlatWide":{"!description":"Card renders and behaves like a tile of size 4x1.","!category":"enum","!type":"String"},"Small":{"!description":"The small card variant.","!category":"enum","!type":"String"},"SmallHeader":{"!description":"The SmallHeader card variant.","!category":"enum","!type":"String"},"Large":{"!description":"The large card variant.","!category":"enum","!type":"String"},"TileStandardWide":{"!description":"Card renders and behaves like a tile of size 4x2.","!category":"enum","!type":"String"},"!category":"static class","Standard":{"!description":"The standard card variant.","!category":"enum","!type":"String"},"TileFlat":{"!description":"Card renders and behaves like a tile of size 2x1.","!category":"enum","!type":"String"},"CompactHeader":{"!description":"The CompactHeader card variant.","!category":"enum","!type":"String"},"!module":"sap/ui/integration/library"},"sap.ui.integration.designtime.baseEditor.PropertyEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.PropertyEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.PropertyEditor"},"sap.ui.integration.designtime.baseEditor.propertyEditor.arrayEditor.ArrayEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.arrayEditor.ArrayEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getValue":{"!description":"Gets current value of property {@link #getValue value}.","!static":false,"!category":"function","!type":"fn() -> Object"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.arrayEditor.ArrayEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getValue value} : any<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor#constructor sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor}\ncan be used as well.","!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/arrayEditor/ArrayEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","setValue":{"!description":"Sets a new value for property {@link #getValue value}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oValue: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.arrayEditor.ArrayEditor","parameters":{"oValue":"type: any, description: New value for property <code>value<\/code>"}},"!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.CardDesign":{"!description":"Possible designs for <code>{@link sap.ui.integration.widgets.Card}<\/code>.","!module":"sap/ui/integration/library","Transparent":{"!description":"When in this mode, the card background is transparent.","!category":"enum","!type":"String"},"!category":"static class","Solid":{"!description":"When in this mode, the card has a solid background.","!category":"enum","!type":"String"}},"sap.ui.integration.designtime.cardEditor.propertyEditor.filtersEditor.FiltersEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.cardEditor.propertyEditor.filtersEditor.FiltersEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor.ComplexMapEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.cardEditor.propertyEditor.filtersEditor.FiltersEditor"},"sap.ui.integration.designtime.baseEditor.propertyEditor.integerEditor.IntegerEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.integerEditor.IntegerEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.numberEditor.NumberEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.integerEditor.IntegerEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.designtime.baseEditor.propertyEditor.numberEditor.NumberEditor#constructor sap.ui.integration.designtime.baseEditor.propertyEditor.numberEditor.NumberEditor} can be used.","!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/integerEditor/IntegerEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.numberEditor.NumberEditor","!category":"class"},"sap.ui.integration.editor.fields.NumberField":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.NumberField with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.BaseField.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.editor.fields.NumberField.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.editor.fields.BaseField#constructor sap.ui.integration.editor.fields.BaseField} can be used.","!module":"sap/ui/integration/editor/fields/NumberField","!proto":"sap.ui.integration.editor.fields.BaseField","!category":"class"},"sap.ui.integration.Designtime_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.Designtime with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.integration.Designtime"},"sap.ui.integration.ActionDefinition":{"addActionDefinition":{"!description":"Adds some actionDefinition to the aggregation {@link #getActionDefinitions actionDefinitions}.","!static":false,"!category":"function","!type":"fn(oActionDefinition: sap.ui.integration.ActionDefinition) -> sap.ui.integration.ActionDefinition","parameters":{"oActionDefinition":"type: sap.ui.integration.ActionDefinition, description: The actionDefinition to add; if empty, nothing is inserted"}},"!proto":"sap.ui.core.Element","!category":"class","setButtonType":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.130 All <code>ActionDefinitions<\/code> are now rendered as menu items and don't have <code>buttonType<\/code>.<br>Sets a new value for property {@link #getButtonType buttonType}.\n\nThe type of the action button.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Transparent<\/code>.","!static":false,"!category":"function","!type":"fn(sButtonType?: sap.m.ButtonType) -> sap.ui.integration.ActionDefinition","parameters":{"sButtonType":"type: sap.m.ButtonType, description: New value for property <code>buttonType<\/code>"}},"setParameters":{"!description":"Sets a new value for property {@link #getParameters parameters}.\n\nThe parameters of the action.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oParameters: Object) -> sap.ui.integration.ActionDefinition","parameters":{"oParameters":"type: object, description: New value for property <code>parameters<\/code>"}},"!constructorDescription":"Constructor for a new <code>ActionDefinition<\/code>.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getType type} : sap.ui.integration.CardActionType<\/li>\n<li>{@link #getText text} : string (default: \"\")<\/li>\n<li>{@link #getIcon icon} : sap.ui.core.URI<\/li>\n<li>{@link #getButtonType buttonType} : sap.m.ButtonType (default: Transparent)<\/li>\n<li>{@link #getEnabled enabled} : boolean (default: true)<\/li>\n<li>{@link #getVisible visible} : boolean (default: true)<\/li>\n<li>{@link #getParameters parameters} : object<\/li>\n<li>{@link #getStartsSection startsSection} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getActionDefinitions actionDefinitions} : sap.ui.integration.ActionDefinition[]<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #get_menuItem _menuItem} : (sap.ui.core.ID | sap.m.MenuItem)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","getEnabled":{"!description":"Gets current value of property {@link #getEnabled enabled}.\n\nIndicates whether the user can interact with the action button or not. <b>Note<\/b>: Disabled controls cannot be focused and they are out of the navigation tab-chain.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getButtonType":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.130 All <code>ActionDefinitions<\/code> are now rendered as menu items and don't have <code>buttonType<\/code>.<br>Gets current value of property {@link #getButtonType buttonType}.\n\nThe type of the action button.\n\nDefault value is <code>Transparent<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.m.ButtonType"},"attachPress":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:press press} event of this <code>sap.ui.integration.ActionDefinition<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.ActionDefinition<\/code> itself.\n\nFired when the action button is pressed.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.ActionDefinition","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.ActionDefinition<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"destroyActionDefinitions":{"!description":"Destroys all the actionDefinitions in the aggregation {@link #getActionDefinitions actionDefinitions}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.integration.ActionDefinition"},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","setVisible":{"!description":"Sets a new value for property {@link #getVisible visible}.\n\nWhether the action button should be visible on the screen.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bVisible?: Boolean) -> sap.ui.integration.ActionDefinition","parameters":{"bVisible":"type: boolean, description: New value for property <code>visible<\/code>"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.ActionDefinition.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getVisible":{"!description":"Gets current value of property {@link #getVisible visible}.\n\nWhether the action button should be visible on the screen.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getText":{"!description":"Gets current value of property {@link #getText text}.\n\nThe text of the action button.\n\nDefault value is <code>empty string<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"setStartsSection":{"!description":"Sets a new value for property {@link #getStartsSection startsSection}.\n\nDefines whether a visual separator should be rendered before the item. <b>Note<\/b>: If an item is invisible its separator is also not displayed.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bStartsSection?: Boolean) -> sap.ui.integration.ActionDefinition","parameters":{"bStartsSection":"type: boolean, description: New value for property <code>startsSection<\/code>"}},"setType":{"!description":"Sets a new value for property {@link #getType type}.\n\nThe type of the action.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sType: sap.ui.integration.CardActionType) -> sap.ui.integration.ActionDefinition","parameters":{"sType":"type: sap.ui.integration.CardActionType, description: New value for property <code>type<\/code>"}},"indexOfActionDefinition":{"!description":"Checks for the provided <code>sap.ui.integration.ActionDefinition<\/code> in the aggregation {@link #getActionDefinitions actionDefinitions}. and returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oActionDefinition: sap.ui.integration.ActionDefinition) -> Number","parameters":{"oActionDefinition":"type: sap.ui.integration.ActionDefinition, description: The actionDefinition whose index is looked for"}},"getIcon":{"!description":"Gets current value of property {@link #getIcon icon}.\n\nThe icon of the action button.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.URI"},"extend":{"!description":"Creates a new subclass of class sap.ui.integration.ActionDefinition with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setIcon":{"!description":"Sets a new value for property {@link #getIcon icon}.\n\nThe icon of the action button.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sIcon: sap.ui.core.URI) -> sap.ui.integration.ActionDefinition","parameters":{"sIcon":"type: sap.ui.core.URI, description: New value for property <code>icon<\/code>"}},"detachPress":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:press press} event of this <code>sap.ui.integration.ActionDefinition<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.ActionDefinition","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"firePress":{"!description":"Fires event {@link #event:press press} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.ActionDefinition","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"setEnabled":{"!description":"Sets a new value for property {@link #getEnabled enabled}.\n\nIndicates whether the user can interact with the action button or not. <b>Note<\/b>: Disabled controls cannot be focused and they are out of the navigation tab-chain.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bEnabled?: Boolean) -> sap.ui.integration.ActionDefinition","parameters":{"bEnabled":"type: boolean, description: New value for property <code>enabled<\/code>"}},"!module":"sap/ui/integration/ActionDefinition","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","getType":{"!description":"Gets current value of property {@link #getType type}.\n\nThe type of the action.","!static":false,"!category":"function","!type":"fn() -> sap.ui.integration.CardActionType"},"removeActionDefinition":{"!description":"Removes a actionDefinition from the aggregation {@link #getActionDefinitions actionDefinitions}.","!static":false,"!category":"function","!type":"fn(vActionDefinition: Number | String | sap.ui.integration.ActionDefinition) -> sap.ui.integration.ActionDefinition | null","parameters":{"vActionDefinition":"type: int|string|sap.ui.integration.ActionDefinition, description: The actionDefinition to remove or its index or id"}},"getStartsSection":{"!description":"Gets current value of property {@link #getStartsSection startsSection}.\n\nDefines whether a visual separator should be rendered before the item. <b>Note<\/b>: If an item is invisible its separator is also not displayed.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"removeAllActionDefinitions":{"!description":"Removes all the controls from the aggregation {@link #getActionDefinitions actionDefinitions}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.integration.ActionDefinition]"},"insertActionDefinition":{"!description":"Inserts a actionDefinition into the aggregation {@link #getActionDefinitions actionDefinitions}.","!static":false,"!category":"function","!type":"fn(oActionDefinition: sap.ui.integration.ActionDefinition, iIndex: Number) -> sap.ui.integration.ActionDefinition","parameters":{"oActionDefinition":"type: sap.ui.integration.ActionDefinition, description: The actionDefinition to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the actionDefinition should be inserted at; for a negative value of <code>iIndex<\/code>, the actionDefinition is inserted at position 0; for a value greater than the current size of the aggregation, the actionDefinition is inserted at the last position"}},"getParameters":{"!description":"Gets current value of property {@link #getParameters parameters}.\n\nThe parameters of the action.","!static":false,"!category":"function","!type":"fn() -> Object"},"getActionDefinitions":{"!description":"Gets content of aggregation {@link #getActionDefinitions actionDefinitions}.\n\nAction Definitions which will appear as nested items in the menu. <b>Note<\/b>: The parent action definition will not fire a press anymore, it will only be used to hold the subitem.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.integration.ActionDefinition]"},"setText":{"!description":"Sets a new value for property {@link #getText text}.\n\nThe text of the action button.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>empty string<\/code>.","!static":false,"!category":"function","!type":"fn(sText?: String) -> sap.ui.integration.ActionDefinition","parameters":{"sText":"type: string, description: New value for property <code>text<\/code>"}}},"sap.ui.integration.editor.EditorFacade":{"!description":"Facade of the {@link sap.ui.integration.editor.Editor} control.","!module":"sap/ui/integration/editor/Editor","!category":"static class"},"sap.ui.integration.designtime.baseEditor.propertyEditor.numberEditor.NumberEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.numberEditor.NumberEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.numberEditor.NumberEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor#constructor sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor} can be used.","!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/numberEditor/NumberEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.designtime.cardEditor.propertyEditor.iconEditor.IconEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.cardEditor.propertyEditor.iconEditor.IconEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.cardEditor.propertyEditor.iconEditor.IconEditor"},"sap.ui.integration.designtime.baseEditor.validator.IsValidBinding":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!module":"sap/ui/integration/designtime/baseEditor/validator/IsValidBinding","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"namespace","validate":{"!description":"Validator function","!static":"true","!category":"function","!type":"fn(sValue: String, oConfig: Object) -> Boolean"}},"sap.ui.integration.ActionDefinition_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.ActionDefinition with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.integration.ActionDefinition"},"sap.ui.integration.editor.fields.viz.ColorSelect":{"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.editor.fields.viz.ColorSelect.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!proto":"sap.ui.integration.editor.fields.viz.VizBase","!category":"class","getEnumValue":{"!description":"Gets current value of property {@link #getEnumValue enumValue}.\n\nDefault value is <code>empty string<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"setEnumValue":{"!description":"Sets a new value for property {@link #getEnumValue enumValue}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>empty string<\/code>.","!static":false,"!category":"function","!type":"fn(sEnumValue?: String) -> sap.ui.integration.editor.fields.viz.ColorSelect","parameters":{"sEnumValue":"type: string, description: New value for property <code>enumValue<\/code>"}},"setColorValue":{"!description":"Sets a new value for property {@link #getColorValue colorValue}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>empty string<\/code>.","!static":false,"!category":"function","!type":"fn(sColorValue?: String) -> sap.ui.integration.editor.fields.viz.ColorSelect","parameters":{"sColorValue":"type: string, description: New value for property <code>colorValue<\/code>"}},"setBackground":{"!description":"Sets a new value for property {@link #getBackground background}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bBackground?: Boolean) -> sap.ui.integration.editor.fields.viz.ColorSelect","parameters":{"bBackground":"type: boolean, description: New value for property <code>background<\/code>"}},"setAllowCustomColors":{"!description":"Sets a new value for property {@link #getAllowCustomColors allowCustomColors}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bAllowCustomColors?: Boolean) -> sap.ui.integration.editor.fields.viz.ColorSelect","parameters":{"bAllowCustomColors":"type: boolean, description: New value for property <code>allowCustomColors<\/code>"}},"setColorEnum":{"!description":"Sets a new value for property {@link #getColorEnum colorEnum}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>\"sap.m.AvatarColor\"<\/code>.","!static":false,"!category":"function","!type":"fn(sColorEnum?: String) -> sap.ui.integration.editor.fields.viz.ColorSelect","parameters":{"sColorEnum":"type: string, description: New value for property <code>colorEnum<\/code>"}},"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.viz.ColorSelect with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.viz.VizBase.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getEnumValue enumValue} : string (default: \"\")<\/li>\n<li>{@link #getColorValue colorValue} : string (default: \"\")<\/li>\n<li>{@link #getColorEnum colorEnum} : string (default: \"sap.m.AvatarColor\")<\/li>\n<li>{@link #getBackground background} : boolean (default: true)<\/li>\n<li>{@link #getAllowCustomColors allowCustomColors} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.integration.editor.fields.viz.VizBase#constructor sap.ui.integration.editor.fields.viz.VizBase}\ncan be used as well.","!module":"sap/ui/integration/editor/fields/viz/ColorSelect","getColorEnum":{"!description":"Gets current value of property {@link #getColorEnum colorEnum}.\n\nDefault value is <code>\"sap.m.AvatarColor\"<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"getAllowCustomColors":{"!description":"Gets current value of property {@link #getAllowCustomColors allowCustomColors}.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getColorValue":{"!description":"Gets current value of property {@link #getColorValue colorValue}.\n\nDefault value is <code>empty string<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"getBackground":{"!description":"Gets current value of property {@link #getBackground background}.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"}},"sap.ui.integration.designtime.cardEditor.propertyEditor.destinationsEditor.DestinationsEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.cardEditor.propertyEditor.destinationsEditor.DestinationsEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor.ComplexMapEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.cardEditor.propertyEditor.destinationsEditor.DestinationsEditor"},"sap.ui.integration.designtime.baseEditor.propertyEditor.codeEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"CodeEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.codeEditor.CodeEditor_obj","!category":"namespace","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.util.CsrfTokenHandler_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.util.CsrfTokenHandler with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(mSettings: Object)","prototype":"sap.ui.integration.util.CsrfTokenHandler"},"sap.ui.integration.CardPreviewMode":{"!description":"Preview modes for <code>{@link sap.ui.integration.widgets.Card}<\/code>. Helpful in scenarios when the end user is choosing or configuring a card.","!module":"sap/ui/integration/library","Abstract":{"!description":"Card displays abstract preview. No data requests are made.","!category":"enum","!type":"String"},"MockData":{"!description":"Card displays mocked data, loaded using a data request as configured in the manifest.","!category":"enum","!type":"String"},"!category":"static class","Off":{"!description":"Card displays real data.","!category":"enum","!type":"String"}},"sap.ui.integration.editor.fields.BooleanField_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.BooleanField with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.BaseField.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.editor.fields.BooleanField"},"sap.ui.integration.widgets.CardFacade":{"!description":"Facade of the {@link sap.ui.integration.widgets.Card} control.","!module":"sap/ui/integration/widgets/Card","!category":"static class"},"sap.ui.integration.designtime.baseEditor.propertyEditor.separatorEditor.SeparatorEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.separatorEditor.SeparatorEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.separatorEditor.SeparatorEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor#constructor sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor} can be used.","!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/separatorEditor/SeparatorEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.designtime.baseEditor.propertyEditor.codeEditor.CodeEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.codeEditor.CodeEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.codeEditor.CodeEditor"},"sap.ui.integration.editor.fields":{"BaseField":"sap.ui.integration.editor.fields.BaseField_obj","configuration":{"!description":"configuration : Object","!category":"enum","!type":"Object"},"allowPopover":{"!description":"allowPopover : Boolean","!category":"enum","!type":"Boolean"},"GroupField":"sap.ui.integration.editor.fields.GroupField_obj","busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"IntegerField":"sap.ui.integration.editor.fields.IntegerField_obj","!category":"namespace","specialButton":{"!description":"specialButton : Object","!category":"enum","!type":"Object"},"DateTimeField":"sap.ui.integration.editor.fields.DateTimeField_obj","StringListField":"sap.ui.integration.editor.fields.StringListField_obj","mode":{"!description":"mode : String","!category":"enum","!type":"String"},"BooleanField":"sap.ui.integration.editor.fields.BooleanField_obj","DestinationField":"sap.ui.integration.editor.fields.DestinationField_obj","blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"host":{"!description":"host : Object","!category":"enum","!type":"Object"},"parameterKey":{"!description":"parameterKey : String","!category":"enum","!type":"String"},"ObjectListField":"sap.ui.integration.editor.fields.ObjectListField_obj","visible":{"!description":"visible : Boolean","!category":"enum","!type":"Boolean"},"viz":"sap.ui.integration.editor.fields.viz","NumberField":"sap.ui.integration.editor.fields.NumberField_obj","fragment":"sap.ui.integration.editor.fields.fragment","StringField":"sap.ui.integration.editor.fields.StringField_obj","ObjectField":"sap.ui.integration.editor.fields.ObjectField_obj","DateField":"sap.ui.integration.editor.fields.DateField_obj"},"sap.ui.integration.AttributesLayoutType":{"!description":"Defines the layout type of the List card attributes.","!module":"sap/ui/integration/library","OneColumn":{"!description":"One column.","!category":"enum","!type":"String"},"!category":"static class","TwoColumns":{"!description":"Two columns.","!category":"enum","!type":"String"}},"sap.ui.integration.util.SkeletonCard_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.util.SkeletonCard with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.widgets.Card.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.util.SkeletonCard"},"sap.ui.integration.designtime.baseEditor.validator.IsUniqueKey":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!module":"sap/ui/integration/designtime/baseEditor/validator/IsUniqueKey","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"namespace","validate":{"!description":"Validator function","!static":"true","!category":"function","!type":"fn(sValue: String, oConfig: Object) -> Boolean"}},"sap.ui.integration.designtime.baseEditor.validator.IsStringList":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!module":"sap/ui/integration/designtime/baseEditor/validator/IsStringList","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"namespace","validate":{"!description":"Validator function","!static":"true","!category":"function","!type":"fn(vValue: Number | String, sValue: String, oConfig: Object, aValue: [String]) -> Boolean"}},"sap.ui.integration.editor.fields.IntegerField":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.IntegerField with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.BaseField.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.editor.fields.IntegerField.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.editor.fields.BaseField#constructor sap.ui.integration.editor.fields.BaseField} can be used.","!module":"sap/ui/integration/editor/fields/IntegerField","!proto":"sap.ui.integration.editor.fields.BaseField","!category":"class"},"sap.ui.integration.designtime.baseEditor.PropertyEditor":{"getEditor":{"!description":"ID of the element which is the current target of the association {@link #getEditor editor}, or <code>null<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.ID | null"},"detachInit":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:init init} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"fireEditorChange":{"!description":"Fires event {@link #event:editorChange editorChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"fireInit":{"!description":"Fires event {@link #event:init init} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"firePropertyEditorChange":{"!description":"Fires event {@link #event:propertyEditorChange propertyEditorChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"detachReady":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:ready ready} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"!proto":"sap.ui.core.Control","!category":"class","detachEditorChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:editorChange editorChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"fireValidationErrorChange":{"!description":"Fires event {@link #event:validationErrorChange validationErrorChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"setConfig":{"!description":"Sets a new value for property {@link #getConfig config}.\n\nCustom configuration object. If set, it has priority over <code>propertyName<\/code>. Example: <pre>\n{\n    \"label\": \"My property\",\n    \"type\": \"string\",\n    \"path\": \"header/status/text\"\n}\n<\/pre> Where: <ul> <li><b>label<\/b> = text string for the property editor label<\/li> <li><b>type<\/b> = one of the registered property editor types in {@link sap.ui.integration.designtime.baseEditor.BaseEditor BaseEditor configuration} (see <code>propertyEditors<\/code> section)<\/li> <li><b>path<\/b> = a binding path to get data from<\/li> <\/ul>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oConfig: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oConfig":"type: object, description: New value for property <code>config<\/code>"}},"attachInit":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:init init} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself.\n\nFires when the wrapper is initialized.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachDesigntimeMetadataChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:designtimeMetadataChange designtimeMetadataChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getPropertyName propertyName} : string<\/li>\n<li>{@link #getRenderLabel renderLabel} : boolean<\/li>\n<li>{@link #getValue value} : any<\/li>\n<li>{@link #getConfig config} : object<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getEditor editor} : (sap.ui.core.ID | sap.ui.integration.designtime.baseEditor.BaseEditor)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:editorChange editorChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:propertyEditorChange propertyEditorChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:configChange configChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:propertyNameChange propertyNameChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:ready ready} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:validationErrorChange validationErrorChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:beforeValueChange beforeValueChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:valueChange valueChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:designtimeMetadataChange designtimeMetadataChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:init init} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","setRenderLabel":{"!description":"Sets a new value for property {@link #getRenderLabel renderLabel}.\n\nIndicates whether the embedded <code>BasePropertyEditor<\/code> should render its label.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(bRenderLabel: Boolean) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"bRenderLabel":"type: boolean, description: New value for property <code>renderLabel<\/code>"}},"attachConfigChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:configChange configChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself.\n\nFires when <code>config<\/code> changes.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"attachEditorChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:editorChange editorChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself.\n\nFires when the new editor changes.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachPropertyEditorChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:propertyEditorChange propertyEditorChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"detachValueChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:valueChange valueChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"fireDesigntimeMetadataChange":{"!description":"Fires event {@link #event:designtimeMetadataChange designtimeMetadataChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"getPropertyName":{"!description":"Gets current value of property {@link #getPropertyName propertyName}.\n\nProperty name for which the configuration should be retrieved. The configuration for a specified name will be taken from the {@link sap.ui.integration.designtime.baseEditor.BaseEditor BaseEditor} directly.","!static":false,"!category":"function","!type":"fn() -> String"},"attachPropertyEditorChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:propertyEditorChange propertyEditorChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself.\n\nFires when the internal property editor changes, e.g. called after the initial initialization or after changing the <code>propertyName<\/code> or <code>config<\/code> properties.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"firePropertyNameChange":{"!description":"Fires event {@link #event:propertyNameChange propertyNameChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"!description":"Renders one of the {@link sap.ui.integration.designtime.baseEditor.propertyEditor property editors} based on a specified <code>propertyName<\/code> or custom <code>config<\/code>.","attachPropertyNameChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:propertyNameChange propertyNameChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself.\n\nFires when <code>propertyName<\/code> changes.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"attachValidationErrorChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:validationErrorChange validationErrorChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself.\n\nFires when the error state of the nested property editor changes","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.PropertyEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"detachValidationErrorChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:validationErrorChange validationErrorChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"detachBeforeValueChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:beforeValueChange beforeValueChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"attachReady":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:ready ready} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself.\n\nFires when nested property editor is ready.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"fireConfigChange":{"!description":"Fires event {@link #event:configChange configChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"getConfig":{"!description":"Gets current value of property {@link #getConfig config}.\n\nCustom configuration object. If set, it has priority over <code>propertyName<\/code>. Example: <pre>\n{\n    \"label\": \"My property\",\n    \"type\": \"string\",\n    \"path\": \"header/status/text\"\n}\n<\/pre> Where: <ul> <li><b>label<\/b> = text string for the property editor label<\/li> <li><b>type<\/b> = one of the registered property editor types in {@link sap.ui.integration.designtime.baseEditor.BaseEditor BaseEditor configuration} (see <code>propertyEditors<\/code> section)<\/li> <li><b>path<\/b> = a binding path to get data from<\/li> <\/ul>","!static":false,"!category":"function","!type":"fn() -> Object"},"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.PropertyEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"attachBeforeValueChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:beforeValueChange beforeValueChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself.\n\nFires before the value of the nested property editor changes","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachPropertyNameChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:propertyNameChange propertyNameChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"getValue":{"!description":"Gets current value of property {@link #getValue value}.\n\nNested editor value","!static":false,"!category":"function","!type":"fn() -> Object"},"fireBeforeValueChange":{"!description":"Fires event {@link #event:beforeValueChange beforeValueChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"setPropertyName":{"!description":"Sets a new value for property {@link #getPropertyName propertyName}.\n\nProperty name for which the configuration should be retrieved. The configuration for a specified name will be taken from the {@link sap.ui.integration.designtime.baseEditor.BaseEditor BaseEditor} directly.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sPropertyName: String) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"sPropertyName":"type: string, description: New value for property <code>propertyName<\/code>"}},"!module":"sap/ui/integration/designtime/baseEditor/PropertyEditor","!helpDescription":"Renders one of the {@link sap.ui.integration.designtime.baseEditor.propertyEditor property editors} based on a specified <code>propertyName<\/code> or custom <code>config<\/code>.","detachConfigChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:configChange configChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"getRenderLabel":{"!description":"Gets current value of property {@link #getRenderLabel renderLabel}.\n\nIndicates whether the embedded <code>BasePropertyEditor<\/code> should render its label.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setEditor":{"!description":"Sets the associated {@link #getEditor editor}.","!static":false,"!category":"function","!type":"fn(oEditor: sap.ui.core.ID | sap.ui.integration.designtime.baseEditor.BaseEditor) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oEditor":"type: sap.ui.core.ID|sap.ui.integration.designtime.baseEditor.BaseEditor, description: ID of an element which becomes the new target of this editor association; alternatively, an element instance may be given"}},"setValue":{"!description":"Sets a new value for property {@link #getValue value}.\n\nNested editor value\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oValue: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oValue":"type: any, description: New value for property <code>value<\/code>"}},"attachDesigntimeMetadataChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:designtimeMetadataChange designtimeMetadataChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself.\n\nFires when the designtime metadata of the nested property editor changes","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"attachValueChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:valueChange valueChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself.\n\nFires when the value of the nested property editor changes","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"fireReady":{"!description":"Fires event {@link #event:ready ready} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"fireValueChange":{"!description":"Fires event {@link #event:valueChange valueChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}}},"sap.ui.integration.designtime.baseEditor.propertyEditor.mapEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","MapEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.mapEditor.MapEditor_obj","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.booleanEditor.BooleanEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.booleanEditor.BooleanEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.booleanEditor.BooleanEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor#constructor sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor} can be used.","!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/booleanEditor/BooleanEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.designtime.cardEditor.propertyEditor":{"complexMapEditor":"sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor","destinationsEditor":"sap.ui.integration.designtime.cardEditor.propertyEditor.destinationsEditor","iconEditor":"sap.ui.integration.designtime.cardEditor.propertyEditor.iconEditor","parametersEditor":"sap.ui.integration.designtime.cardEditor.propertyEditor.parametersEditor","!category":"namespace","filtersEditor":"sap.ui.integration.designtime.cardEditor.propertyEditor.filtersEditor"},"sap.ui.integration.editor.fields.viz.ImageSelect":{"!description":"Image Select","extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.viz.ImageSelect with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.viz.IconSelect.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setAllowDefaultIcons":{"!description":"Sets a new value for property {@link #getAllowDefaultIcons allowDefaultIcons}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bAllowDefaultIcons?: Boolean) -> sap.ui.integration.editor.fields.viz.ImageSelect","parameters":{"bAllowDefaultIcons":"type: boolean, description: New value for property <code>allowDefaultIcons<\/code>"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.editor.fields.viz.ImageSelect.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getAllowDefaultIcons allowDefaultIcons} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.integration.editor.fields.viz.IconSelect#constructor sap.ui.integration.editor.fields.viz.IconSelect}\ncan be used as well.","!module":"sap/ui/integration/editor/fields/viz/ImageSelect","!helpDescription":"Image Select","getAllowDefaultIcons":{"!description":"Gets current value of property {@link #getAllowDefaultIcons allowDefaultIcons}.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!proto":"sap.ui.integration.editor.fields.viz.IconSelect","!category":"class"},"sap.ui.integration.designtime.editor.CardPreview_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.editor.CardPreview with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.editor.CardPreview"},"sap.ui.integration.designtime.baseEditor.propertyEditor.numberEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","NumberEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.numberEditor.NumberEditor_obj","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.designtime.cardEditor.propertyEditor.destinationsEditor.DestinationsEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.cardEditor.propertyEditor.destinationsEditor.DestinationsEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor.ComplexMapEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.cardEditor.propertyEditor.destinationsEditor.DestinationsEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor.ComplexMapEditor#constructor sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor.ComplexMapEditor} can be used.","!module":"sap/ui/integration/designtime/cardEditor/propertyEditor/destinationsEditor/DestinationsEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor.ComplexMapEditor","!category":"class"},"sap.ui.integration.editor.fields.StringField":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.StringField with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.BaseField.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.editor.fields.StringField.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Events\n<ul>\n<li>{@link #event:translationPopoverOpened translationPopoverOpened} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.integration.editor.fields.BaseField#constructor sap.ui.integration.editor.fields.BaseField}\ncan be used as well.","!module":"sap/ui/integration/editor/fields/StringField","detachTranslationPopoverOpened":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.editor.fields.StringField","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"fireTranslationPopoverOpened":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.editor.fields.StringField","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"!proto":"sap.ui.integration.editor.fields.BaseField","!category":"class","attachTranslationPopoverOpened":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.editor.fields.StringField","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.editor.fields.StringField<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}}},"sap.ui.integration.designtime.baseEditor.propertyEditor.textAreaEditor.TextAreaEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.textAreaEditor.TextAreaEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.textAreaEditor.TextAreaEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor#constructor sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor} can be used.","!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/textAreaEditor/TextAreaEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.designtime.cardEditor.propertyEditor.filtersEditor.FiltersEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.cardEditor.propertyEditor.filtersEditor.FiltersEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor.ComplexMapEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.cardEditor.propertyEditor.filtersEditor.FiltersEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor.ComplexMapEditor#constructor sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor.ComplexMapEditor} can be used.","!module":"sap/ui/integration/designtime/cardEditor/propertyEditor/filtersEditor/FiltersEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor.ComplexMapEditor","!category":"class"},"sap.ui.integration.editor.fields.viz.ImageSelect_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.viz.ImageSelect with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.viz.IconSelect.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.editor.fields.viz.ImageSelect"},"sap.ui.integration.designtime.baseEditor.validator.IsUniqueList":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!module":"sap/ui/integration/designtime/baseEditor/validator/IsUniqueList","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"namespace","validate":{"!description":"Validator function","!static":"true","!category":"function","!type":"fn(sValue: String, oConfig: Object, aValue: String) -> Boolean"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.arrayEditor":{"ArrayEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.arrayEditor.ArrayEditor_obj","visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.Host_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.Host with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.integration.Host"},"sap.ui.integration.designtime.baseEditor.validator.MaxLength":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!module":"sap/ui/integration/designtime/baseEditor/validator/MaxLength","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"namespace","validate":{"!description":"Validator function","!static":"true","!category":"function","!type":"fn(sValue: String, oConfig: Object, vValue: Boolean | String) -> Boolean"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.iconEditor.IconEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.iconEditor.IconEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.iconEditor.IconEditor"},"sap.ui.integration.util.CsrfTokenHandler":{"!description":"Fetches and provides CSRF tokens for data requests. Tokens are shared between cards per user session.","extend":{"!description":"Creates a new subclass of class sap.ui.integration.util.CsrfTokenHandler with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.util.CsrfTokenHandler.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new <code>CsrfTokenHandler<\/code>.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.base.Object#constructor sap.ui.base.Object} can be used.","!module":"sap/ui/integration/util/CsrfTokenHandler","!helpDescription":"Fetches and provides CSRF tokens for data requests. Tokens are shared between cards per user session.","!proto":"sap.ui.base.Object","!category":"class"},"sap.ui.integration.designtime.baseEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabels":{"!description":"Indicates whether the embedded <code>BasePropertyEditor<\/code> instances should render their labels.","!category":"enum","!type":"Boolean"},"validator":"sap.ui.integration.designtime.baseEditor.validator","!category":"namespace","tags":{"!description":"List of tags to render, e.g. <code>\"header,content\"<\/code>. Only the properties that contain both tags will be rendered.","!category":"enum","!type":"String"},"layout":{"!description":"layout : String","!category":"enum","!type":"String"},"layoutConfig":{"!description":"layoutConfig : Object","!category":"enum","!type":"Object"},"designtimeMetadata":{"!description":"Designtime-specific metadata to be changed in the editor. Note: If an object is passed as a parameter, it won't be mutated. <code>.getDesigntimeMetadata()<\/code> or <code>.attachDesigntimeMetadataChange()<\/code> should be used instead to get the changed object.","!category":"enum","!type":"Object"},"BaseEditor":"sap.ui.integration.designtime.baseEditor.BaseEditor_obj","blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"propertyName":{"!description":"Property name for which the configuration should be retrieved. The configuration for a specified name will be taken from the {@link sap.ui.integration.designtime.baseEditor.BaseEditor BaseEditor} directly.","!category":"enum","!type":"String"},"propertyEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor","busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"renderLabel":{"!description":"Indicates whether the embedded <code>BasePropertyEditor<\/code> should render its label.","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"PropertyEditor":"sap.ui.integration.designtime.baseEditor.PropertyEditor_obj","json":{"!description":"JSON to be changed in the editor. Note: If an object is passed as a parameter, it won't be mutated. <code>.getJson()<\/code> or <code>.attachJsonChange()<\/code> should be used instead to get the changed object.","!category":"enum","!type":"Object"},"PropertyEditors":"sap.ui.integration.designtime.baseEditor.PropertyEditors_obj","config":{"!description":"An array of custom configuration objects. If set, it has priority over <code>tags<\/code>. Example: <pre>\n[\n    {\n        \"label\": \"My property 1\",\n        \"type\": \"string\",\n        \"path\": \"path/to/my/property1\"\n    },\n    {\n        \"label\": \"My property 2\",\n        \"type\": \"string\",\n        \"path\": \"path/to/my/property2\"\n    }\n]\n<\/pre> Where: <ul> <li><b>label<\/b> = text string for the property editor label<\/li> <li><b>type<\/b> = one of the registered property editors types in {@link sap.ui.integration.designtime.baseEditor.BaseEditor BaseEditor configuration} (see <code>propertyEditors<\/code> section)<\/li> <li><b>path<\/b> = a binding path to get data from<\/li> <\/ul>","!category":"enum","!type":"Array"},"value":{"!description":"Nested editor value","!category":"enum","!type":"Object"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.jsonEditor.JsonEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.jsonEditor.JsonEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.jsonEditor.JsonEditor"},"sap.ui.integration.designtime.cardEditor.propertyEditor.filtersEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"},"FiltersEditor":"sap.ui.integration.designtime.cardEditor.propertyEditor.filtersEditor.FiltersEditor_obj"},"sap.ui.integration.widgets.Card_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.widgets.Card with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.f.CardBase.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.integration.widgets.Card"},"sap.ui.integration.designtime.baseEditor.propertyEditor.booleanEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"BooleanEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.booleanEditor.BooleanEditor_obj","busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.Host":{"attachCardStateChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:cardStateChanged cardStateChanged} event of this <code>sap.ui.integration.Host<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.Host<\/code> itself.\n\nFired when the state of a card is changed. For example - the card is ready, new page is selected inside the card, a filter is changed or data is refreshed.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.Host","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.Host<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"modifyRequestHeaders":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.113 Use Host.prototype.fetch instead.<br>Modifies the card HTTP data request headers before sending. Override if you need to change the default headers behavior, including cache headers.","!static":false,"!category":"function","!type":"fn(mHeaders: Object, mSettings: Object, oCard?: sap.ui.integration.widgets.Card) -> Object","parameters":{"mSettings":"type: object, description: The map of request settings defined in the card manifest.","oCard":"type: sap.ui.integration.widgets.Card, description: Optional. The card for which the request is made.","mHeaders":"type: object, description: The current map of headers."}},"fireMessage":{"!description":"Fires event {@link #event:message message} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.Host","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"attachCardConfigurationChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:cardConfigurationChange cardConfigurationChange} event of this <code>sap.ui.integration.Host<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.Host<\/code> itself.\n\nFired when some card configuration settings are changed as a result of user interaction. For example - filter value is changed.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.Host","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.Host<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"fireCardConfigurationChange":{"!description":"Fires event {@link #event:cardConfigurationChange cardConfigurationChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.Host","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"getDestination":{"!description":"Resolves the destination and returns its URL.","!static":false,"!category":"function","!type":"fn(sDestinationName: String, oCard: sap.ui.integration.widgets.Card) -> Promise<string>","parameters":{"sDestinationName":"type: string, description: The name of the destination.","oCard":"type: sap.ui.integration.widgets.Card, description: The card that depends on the destination."}},"detachCardConfigurationChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:cardConfigurationChange cardConfigurationChange} event of this <code>sap.ui.integration.Host<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.Host","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"getResolveDestination":{"!description":"Gets current value of property {@link #getResolveDestination resolveDestination}.\n\nA function that resolves the given destination name to a URL.\n\nThe Card calls this function when it needs to send a request to a destination. Function returns the URL to which the request is sent.\n\nIf a card depends on a destination, but this callback is not implemented, an error will be logged.\n\nThe callback receives <code>destinationName<\/code> as parameter and returns a string with the URL. Or alternatively the callback may return a <code>Promise<\/code> with the URL as an argument.","!static":false,"!category":"function","!type":"fn() -> function(string,sap.ui.integration.widgets.Card) : (string | Promise<string>) | undefined"},"setActions":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(sActions: [sap.ui.integration.CardMenuAction]) -> sap.ui.integration.Host","parameters":{"sActions":"type: sap.ui.integration.CardMenuAction[], description: New value for property <code>actions<\/code>"}},"getContextValue":{"!description":"Resolves the value for a given path in the context of the host Contexts can be used to configure Cards with information available in the host environment.\n\nExample Context Structure: { \"sap.workzone\": { \"currentUser: { \"id\": { \"label\": \"Id of the Work Zone user\", \"placeholder\": \"Work Zone user id\", \"description\": \"The value will change based on the logged on user\" } } } ... }\n\nExample path to the current user id of the context sPath = \"sap.workzone/currentUser/id\" parameter: { userId: { value: \"{context>sap.workzone/currentUser/id}\" resolves to UserId } }","!static":false,"!category":"function","!type":"fn(sPath: String) -> Promise<null>","parameters":{"sPath":"type: string, description: The path to a context"}},"!proto":"sap.ui.core.Element","fireAction":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> Boolean","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"!category":"class","getActions":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn() -> [sap.ui.integration.CardMenuAction]"},"modifyRequest":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.113 Use Host.prototype.fetch instead.<br>Modifies the card HTTP data request before sending. Override if you need to change the default data request behavior.","!static":false,"!category":"function","!type":"fn(mRequest: Object, mSettings: Object, oCard?: sap.ui.integration.widgets.Card) -> Object","parameters":{"mSettings":"type: object, description: The map of request settings defined in the card manifest.","oCard":"type: sap.ui.integration.widgets.Card, description: Optional. The card for which the request is made.","mRequest":"type: object, description: The current request."}},"getCsrfToken":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.120.0 the concept has been discarded.<br>Resolves the value of a CSRF token. Subclasses of Host can override this method to take over the default CSRF token resolving. Applications must not call this method directly, it is called by the framework.","!static":false,"!category":"function","!type":"fn(csrfTokenConfig: {data:object}) -> Promise<string>","parameters":{"csrfTokenConfig":"type: {data:object}, description: The CSRF token configuration."}},"attachAction":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.Host","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.Host<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getAnalyticsCloudWidgetSrc":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn()"},"!constructorDescription":"Constructor for a new <code>Host<\/code>.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getActions actions} : sap.ui.integration.CardMenuAction[]<\/li>\n<li>{@link #getResolveDestination resolveDestination} : function<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:action action} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:cardConfigurationChange cardConfigurationChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:cardStateChanged cardStateChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:cardInitialized cardInitialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:message message} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","csrfTokenFetched":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.120.0 the concept has been discarded.<br>This function is called when a CSRF token is fetched.","!static":false,"!category":"function","!type":"fn(mCSRFTokenConfig: {data:object}, pCSRFTokenValuePromise: Promise<string>)","parameters":{"mCSRFTokenConfig":"type: {data:object}, description: The CSRF token configuration.","pCSRFTokenValuePromise":"type: Promise<string>, description: A promise which resolves the CSRF token to its value."}},"getContexts":{"!description":"Returns the context object for the Card Editor design-time environment Contexts can be used to configure Cards with information available in the host environment. Each entry in the list should contain design-time information. A label, placeholder, and description should be provided.\n\nExample Context Structure: { \"sap.workzone\": { \"currentUser: { \"id\": { \"label\": \"Id of the Work Zone user\", \"placeholder\": \"Work Zone user id\", \"description\": \"The value will change based on the logged on user\" } } } ... }\n\nThe context information and texts should be translated as they appear in the design-time UI of the Card Editor.","!static":false,"!category":"function","!type":"fn() -> Promise<object>"},"detachCardStateChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:cardStateChanged cardStateChanged} event of this <code>sap.ui.integration.Host<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.Host","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"fireCardInitialized":{"!description":"Fires event {@link #event:cardInitialized cardInitialized} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.Host","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"!description":"Provides application-level functions and services to an integration card.\n\nExamples may include, but are not limited to options like: share a card, remove a card.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.Host.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"detachCardInitialized":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:cardInitialized cardInitialized} event of this <code>sap.ui.integration.Host<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.Host","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"unsubscribeForMessages":{"!description":"Unsubscribes from navigator.serviceWorker messages.","!static":false,"!category":"function","!type":"fn()"},"attachMessage":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:message message} event of this <code>sap.ui.integration.Host<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.Host<\/code> itself.\n\nFired when a message from channels like navigator.serviceWorker is received.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.Host","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.Host<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachAction":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.Host","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"fireCardStateChanged":{"!description":"Fires event {@link #event:cardStateChanged cardStateChanged} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.Host","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"setResolveDestination":{"!description":"Sets a new value for property {@link #setResolveDestination resolveDestination}.\n\nA function that resolves the given destination name to a URL. The Card calls this function when it needs to send a request to a destination. Function returns the URL to which the request is sent. If a card depends on a destination, but this callback is not implemented, an error will be logged. The callback receives <code>destinationName<\/code> as parameter and returns a string with the URL. Or alternatively the callback may return a <code>Promise<\/code> with the URL as an argument.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(fnResolveDestination?: function(string,sap.ui.integration.widgets.Card) : (string | Promise<string>)) -> sap.ui.integration.Host","parameters":{"fnResolveDestination":"type: function(string,sap.ui.integration.widgets.Card) : (string|Promise<string>), description: New value for property <code>resolveDestination<\/code>"}},"stopUsingExperimentalCaching":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn()"},"getDestinations":{"!description":"Returns the list of destinations for the Card Editor design-time environment List entries are objects that contain at least the name. { \"name\": \"DestinationName\" }","!static":false,"!category":"function","!type":"fn() -> [Promise<object]"},"extend":{"!description":"Creates a new subclass of class sap.ui.integration.Host with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!module":"sap/ui/integration/Host","!helpDescription":"Provides application-level functions and services to an integration card.\n\nExamples may include, but are not limited to options like: share a card, remove a card.","fetch":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(sResource: String, mOptions: Object, mRequestSettings: Object, oCard: sap.ui.integration.widgets.Card) -> Promise<Response>","parameters":{"oCard":"type: sap.ui.integration.widgets.Card, description: The card which initiated the request.","sResource":"type: string, description: This defines the resource that you wish to fetch.","mRequestSettings":"type: object, description: The map of request settings defined in the card manifest. Use this only for reading, they can not be modified.","mOptions":"type: object, description: An object containing any custom settings that you want to apply to the request."}},"csrfTokenExpired":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.120.0 the concept has been discarded.<br>This function is called when a CSRF token has expired.","!static":false,"!category":"function","!type":"fn(mCSRFTokenConfig: {data:object})","parameters":{"mCSRFTokenConfig":"type: {data:object}, description: The CSRF token configuration."}},"detachMessage":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:message message} event of this <code>sap.ui.integration.Host<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.Host","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"useExperimentalCaching":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn()"},"attachCardInitialized":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:cardInitialized cardInitialized} event of this <code>sap.ui.integration.Host<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.Host<\/code> itself.\n\nFired when the card is initially ready for the first time. Will not be fired for consecutive refreshes or data changes.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.Host","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.Host<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"subscribeForMessages":{"!description":"By default subscribes to navigator.serviceWorker messages. Override to subscribe to different channels.","!static":false,"!category":"function","!type":"fn()"}},"sap.ui.integration.services":{"Service":"sap.ui.integration.services.Service_obj","!category":"namespace"},"sap.ui.integration.designtime.baseEditor.propertyEditor.listEditor":{"ListEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.listEditor.ListEditor_obj","visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.iconEditor.IsInIconPool":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/iconEditor/IsInIconPool.validator","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"namespace","validate":{"!description":"Validator function","!static":"true","!category":"function","!type":"fn(vValue: Boolean | String) -> Boolean"}},"sap.ui.integration.editor.fields.fragment.Controller_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.fragment.Controller with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.mvc.Controller.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.editor.fields.fragment.Controller"},"sap.ui.integration.editor.fields.StringField_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.StringField with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.BaseField.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.editor.fields.StringField"},"sap.ui.integration.util.ManifestResolver":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","resolveCard":{"!description":"Resolves a card and returns its resolved manifest.","!static":"true","!category":"function","!type":"fn(oCard: sap.ui.integration.widgets.Card) -> Promise<object>"},"!module":"sap/ui/integration/util/ManifestResolver","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"namespace"},"sap.ui.integration.designtime.baseEditor.validator":{"IsBoolean":"sap.ui.integration.designtime.baseEditor.validator.IsBoolean","IsSelectedKey":"sap.ui.integration.designtime.baseEditor.validator.IsSelectedKey","IsValidBinding":"sap.ui.integration.designtime.baseEditor.validator.IsValidBinding","ValidatorRegistry":"sap.ui.integration.designtime.baseEditor.validator.ValidatorRegistry","!category":"namespace","IsInteger":"sap.ui.integration.designtime.baseEditor.validator.IsInteger","MaxLength":"sap.ui.integration.designtime.baseEditor.validator.MaxLength","NotABinding":"sap.ui.integration.designtime.baseEditor.validator.NotABinding","IsNumber":"sap.ui.integration.designtime.baseEditor.validator.IsNumber","IsUniqueKey":"sap.ui.integration.designtime.baseEditor.validator.IsUniqueKey","IsStringList":"sap.ui.integration.designtime.baseEditor.validator.IsStringList","IsUniqueList":"sap.ui.integration.designtime.baseEditor.validator.IsUniqueList","IsDate":"sap.ui.integration.designtime.baseEditor.validator.IsDate"},"sap.ui.integration.designtime.cardEditor.propertyEditor.destinationsEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"DestinationsEditor":"sap.ui.integration.designtime.cardEditor.propertyEditor.destinationsEditor.DestinationsEditor_obj","busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.editor.fields.DestinationField":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.DestinationField with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.BaseField.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.editor.fields.DestinationField.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.editor.fields.BaseField#constructor sap.ui.integration.editor.fields.BaseField} can be used.","!module":"sap/ui/integration/editor/fields/DestinationField","!proto":"sap.ui.integration.editor.fields.BaseField","!category":"class"},"sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor.ComplexMapEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor.ComplexMapEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor.ComplexMapEditor"},"sap.ui.integration.editor.fields.viz.VizBase":{"!description":"Visualization Base Control","extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.viz.VizBase with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getValue":{"!description":"Gets current value of property {@link #getValue value}.\n\nDefault value is <code>empty string<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.editor.fields.viz.VizBase.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getValue value} : string (default: \"\")<\/li>\n<li>{@link #getEditable editable} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","setEditable":{"!description":"Sets a new value for property {@link #getEditable editable}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bEditable?: Boolean) -> sap.ui.integration.editor.fields.viz.VizBase","parameters":{"bEditable":"type: boolean, description: New value for property <code>editable<\/code>"}},"!module":"sap/ui/integration/editor/fields/viz/VizBase","!helpDescription":"Visualization Base Control","getEditable":{"!description":"Gets current value of property {@link #getEditable editable}.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setValue":{"!description":"Sets a new value for property {@link #getValue value}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>empty string<\/code>.","!static":false,"!category":"function","!type":"fn(sValue?: String) -> sap.ui.integration.editor.fields.viz.VizBase","parameters":{"sValue":"type: string, description: New value for property <code>value<\/code>"}},"!proto":"sap.ui.core.Control","!category":"class"},"sap.ui.integration.designtime.baseEditor.propertyEditor.mapEditor.MapEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.mapEditor.MapEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.mapEditor.MapEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor#constructor sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor} can be used.","!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/mapEditor/MapEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.services.Service":{"!constructorDescription":"Base class for all services.\nTo inherit use the extend method <code>Service.extend<\/code>","!module":"sap/ui/integration/services/Service","!proto":"sap.ui.base.Object","!category":"class"},"sap.ui.integration.designtime.baseEditor.validator.NotABinding":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!module":"sap/ui/integration/designtime/baseEditor/validator/NotABinding","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"namespace","validate":{"!description":"Validator function","!static":"true","!category":"function","!type":"fn(sValue: String) -> Boolean"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.integerEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"IntegerEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.integerEditor.IntegerEditor_obj","fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.util.DataProviderFactory":{"!description":"A factory class which creates a data provider based on data settings and stores the created instance. When destroyed, all data providers created by this class are also destroyed.","extend":{"!description":"Creates a new subclass of class sap.ui.integration.util.DataProviderFactory with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.util.DataProviderFactory.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!module":"sap/ui/integration/util/DataProviderFactory","!helpDescription":"A factory class which creates a data provider based on data settings and stores the created instance. When destroyed, all data providers created by this class are also destroyed.","isDestroyed":{"!description":"Returns if this factory is destroyed.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!proto":"sap.ui.base.EventProvider","create":{"!description":"Factory function which returns an instance of <code>DataProvider<\/code>.","!static":false,"!category":"function","!type":"fn(oDataConfiguration: Object, oServiceManager?: sap.ui.integration.util.ServiceManager, bIsFilter?: Boolean, bConfigurationResolved?: Boolean, bApiCardRequest?: Boolean) -> sap.ui.integration.util.DataProvider | null","parameters":{"oDataConfiguration":"type: object, description: The data configuration.","bApiCardRequest":"type: boolean, description: Whether the request is coming from a card API.","oServiceManager":"type: sap.ui.integration.util.ServiceManager, description: A reference to the service manager.","bIsFilter":"type: boolean, description: Whether the caller of this method is Filter.","bConfigurationResolved":"type: boolean, description: Whether parsing and resolving of the configuration is done."}},"destroy":{"!static":false,"!category":"function","!type":"fn()"},"!category":"class","remove":{"!description":"Removes a DataProvider from Factory's registry.","!static":false,"!category":"function","!type":"fn(oDataProvider: sap.ui.integration.util.DataProvider)","parameters":{"oDataProvider":"type: sap.ui.integration.util.DataProvider, description: The data provider to be removed"}}},"sap.ui.integration.designtime":{"editor":"sap.ui.integration.designtime.editor","baseEditor":"sap.ui.integration.designtime.baseEditor","cardEditor":"sap.ui.integration.designtime.cardEditor","!category":"namespace"},"sap.ui.integration.designtime.cardEditor.propertyEditor.iconEditor.IconEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.cardEditor.propertyEditor.iconEditor.IconEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.cardEditor.propertyEditor.iconEditor.IconEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor#constructor sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor} can be used.","!module":"sap/ui/integration/designtime/cardEditor/propertyEditor/iconEditor/IconEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.Extension_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.Extension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.integration.Extension"},"sap.ui.integration.editor.fields.DateTimeField":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.DateTimeField with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.BaseField.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.editor.fields.DateTimeField.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.editor.fields.BaseField#constructor sap.ui.integration.editor.fields.BaseField} can be used.","!module":"sap/ui/integration/editor/fields/DateTimeField","!proto":"sap.ui.integration.editor.fields.BaseField","!category":"class"},"sap.ui.integration.designtime.baseEditor.propertyEditor.multiSelectEditor.MultiSelectEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.multiSelectEditor.MultiSelectEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.multiSelectEditor.MultiSelectEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor#constructor sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor} can be used.","!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/multiSelectEditor/MultiSelectEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.designtime.baseEditor.propertyEditor.dateTimeEditor.DateTimeEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.dateTimeEditor.DateTimeEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.dateEditor.DateEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.dateTimeEditor.DateTimeEditor"},"sap.ui.integration.designtime.baseEditor.propertyEditor.booleanEditor.BooleanEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.booleanEditor.BooleanEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.booleanEditor.BooleanEditor"},"sap.ui.integration.designtime.baseEditor.BaseEditor":{"getContent":{"!description":"Gets content of aggregation {@link #getContent content}.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"!proto":"sap.ui.core.Control","!category":"class","attachPropertyEditorsReady":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:propertyEditorsReady propertyEditorsReady} event of this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code> itself.\n\nFired when all property editors for the given JSON and configuration are created. TODO: remove this public event.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"setLayout":{"!description":"Sets a new value for property {@link #getLayout layout}.\n\nLayout name. Standard layout types: list | form\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>\"list\"<\/code>.","!static":false,"!category":"function","!type":"fn(sLayout?: String) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"sLayout":"type: string, description: New value for property <code>layout<\/code>"}},"fireValidationErrorChange":{"!description":"Fires event {@link #event:validationErrorChange validationErrorChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"setConfig":{"!description":"Sets a new value for property {@link #getConfig config}.\n\nConfiguration Map config.context {string} Path in the JSON that will be edited e.g. <code>\"path/subpath\"<\/code> for <code>json.path.subpath<\/code> config.properties {Object<string,object>} Defines which fields in the context are editable config.properties.<key>.label {string} of the property to show on the UI config.properties.<key>.type {string} of the property (property editor for this type will be shown) config.properties.<key>.path {string} that will be changed, relative to the context. Example: If the context is <code>root<\/code> and the path is <code>header/name<\/code>, the <code>json.root.header.name<\/code> field is to be changed config.properties.<key>.value {string|boolean} (Optional) value of the property. A binding relative to the context (model name) should be used. Example: <code>{context>header/name}<\/code> will create a binding <code>json.root.header.name<\/code> config.properties.<key>.tags {array} Strings to categorize the property config.properties.<key>.visible {string|boolean} Should be used as a binding relative to the context to define the conditions under which the editor for this property should be visible, e.g. <code>{= ${context>anotherProperty} === 'someValue'}<\/code>. Invisible editors won't receive value updates until they are activated again. config.properties.<key>.<other configurations> {any} It is possible to define additional configurations in this namespace. These configurations will be passed to the dedicated property editor. Binding strings relative to context model are supported as well, e.g. <code>{= ${context>someProperty} + ${context>anotherProperty}}<\/code> config.propertyEditors {Object<string,string>} Defines which property editors should be loaded. Key is the property type and value is the editor module path. Example: <code>propertyEditors: {\"string\": \"sap/ui/integration/designtime/controls/propertyEditors/StringEditor\"}<\/code> defines the module responsible for all properties with the type <code>string<\/code> config.i18n {string|array} Module path or array of paths for i18n property files. i18n binding, for example, <code>{i18n>key}<\/code> is available in the <code>/properties<code> section, e.g. for <code>label<\/code>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>...see text or source<\/code>.","!static":false,"!category":"function","!type":"fn(oConfig?: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"oConfig":"type: object, description: New value for property <code>config<\/code>"}},"detachDesigntimeMetadataChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:designtimeMetadataChange designtimeMetadataChange} event of this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"getLayout":{"!description":"Gets current value of property {@link #getLayout layout}.\n\nLayout name. Standard layout types: list | form\n\nDefault value is <code>\"list\"<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getJson json} : object<\/li>\n<li>{@link #getConfig config} : object (default: ...see text or source)<\/li>\n<li>{@link #getDesigntimeMetadata designtimeMetadata} : object<\/li>\n<li>{@link #getLayout layout} : string (default: \"list\")<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:jsonChange jsonChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:designtimeMetadataChange designtimeMetadataChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:configChange configChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:propertyEditorsReady propertyEditorsReady} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:validationErrorChange validationErrorChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","getDesigntimeMetadata":{"!description":"Gets current value of property {@link #getDesigntimeMetadata designtimeMetadata}.\n\nDesigntime-specific metadata to be changed in the editor. Note: If an object is passed as a parameter, it won't be mutated. <code>.getDesigntimeMetadata()<\/code> or <code>.attachDesigntimeMetadataChange()<\/code> should be used instead to get the changed object.","!static":false,"!category":"function","!type":"fn() -> Object"},"attachConfigChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:configChange configChange} event of this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code> itself.\n\nFired when config has been changed.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"fireDesigntimeMetadataChange":{"!description":"Fires event {@link #event:designtimeMetadataChange designtimeMetadataChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"destroyContent":{"!description":"Destroys all the content in the aggregation {@link #getContent content}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.integration.designtime.baseEditor.BaseEditor"},"getJson":{"!description":"Gets current value of property {@link #getJson json}.\n\nJSON to be changed in the editor. Note: If an object is passed as a parameter, it won't be mutated. <code>.getJson()<\/code> or <code>.attachJsonChange()<\/code> should be used instead to get the changed object.","!static":false,"!category":"function","!type":"fn() -> Object"},"!description":"<h3>Overview<\/h3> Configurable JSON editor <h4>Example<\/h4> <pre>\nsap.ui.require([\"sap/ui/integration/designtime/baseEditor/BaseEditor\"], function (Editor) {\n    var oJson = {\n        root: {\n            context: {\n                id: \"404\",\n                name: \"Kate\",\n                role: \"End User\"\n            },\n            foo: {\n                bar: true\n            }\n        }\n    };\n    var oEditor = new Editor();\n    oEditor.setJson(oJson);\n    oEditor.setConfig({\n        \"context\": \"root/context\",\n        \"properties\" : {\n            \"name\": {\n                \"label\": \"Name\",\n                \"path\": \"name\",\n                \"type\": \"string\"\n            },\n            \"role\": {\n                \"label\": \"Role\",\n                \"path\": \"role\",\n                \"type\": \"select\",\n                \"items\": [\n                    { \"key\": \"Developer\" },\n                    { \"key\": \"Key User\" },\n                    { \"key\": \"End User\" }\n                ]\n            },\n            \"department\": {\n                \"label\": \"Department\",\n                \"path\": \"department\",\n                \"type\": \"select\",\n                \"items\": [\n                    { \"key\": \"Sales\" },\n                    { \"key\": \"HR\" },\n                    { \"key\": \"Development\" }\n                ]\n                \"visible\": \"{= ${context>/role} === 'Key User'}\"\n            }\n        },\n        \"propertyEditors\": {\n            \"select\": \"sap/ui/integration/designtime/baseEditor/propertyEditor/selectEditor/SelectEditor\",\n            \"string\" : \"sap/ui/integration/designtime/baseEditor/propertyEditors/stringEditor/StringEditor\"\n        }\n    });\n    oEditor.attachJsonChange(function(oEvent) {\n        var oJson = oEvent.getParameter(\"json\");\n        // live change\n    })\n    oEditor.placeAt(\"content\");\n})\n<\/pre>","attachValidationErrorChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:validationErrorChange validationErrorChange} event of this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code> itself.\n\nFires when the error state of one of the nested property editors changes","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.BaseEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"detachValidationErrorChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:validationErrorChange validationErrorChange} event of this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"indexOfContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation {@link #getContent content}. and returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control) -> Number","parameters":{"oContent":"type: sap.ui.core.Control, description: The content whose index is looked for"}},"setJson":{"!description":"Sets a new value for property {@link #getJson json}.\n\nJSON to be changed in the editor. Note: If an object is passed as a parameter, it won't be mutated. <code>.getJson()<\/code> or <code>.attachJsonChange()<\/code> should be used instead to get the changed object.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oJson: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"oJson":"type: object, description: New value for property <code>json<\/code>"}},"removeAllContent":{"!description":"Removes all the controls from the aggregation {@link #getContent content}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"firePropertyEditorsReady":{"!description":"Fires event {@link #event:propertyEditorsReady propertyEditorsReady} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"attachJsonChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:jsonChange jsonChange} event of this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code> itself.\n\nFired when any property has been changed by the <code>propertyEditor<\/code>.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"addContent":{"!description":"Adds some content to the aggregation {@link #getContent content}.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"oContent":"type: sap.ui.core.Control, description: The content to add; if empty, nothing is inserted"}},"setDesigntimeMetadata":{"!description":"Sets a new value for property {@link #getDesigntimeMetadata designtimeMetadata}.\n\nDesigntime-specific metadata to be changed in the editor. Note: If an object is passed as a parameter, it won't be mutated. <code>.getDesigntimeMetadata()<\/code> or <code>.attachDesigntimeMetadataChange()<\/code> should be used instead to get the changed object.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oDesigntimeMetadata: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"oDesigntimeMetadata":"type: object, description: New value for property <code>designtimeMetadata<\/code>"}},"removeContent":{"!description":"Removes a content from the aggregation {@link #getContent content}.","!static":false,"!category":"function","!type":"fn(vContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control | null","parameters":{"vContent":"type: int|string|sap.ui.core.Control, description: The content to remove or its index or id"}},"fireConfigChange":{"!description":"Fires event {@link #event:configChange configChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"getConfig":{"!description":"Gets current value of property {@link #getConfig config}.\n\nConfiguration Map config.context {string} Path in the JSON that will be edited e.g. <code>\"path/subpath\"<\/code> for <code>json.path.subpath<\/code> config.properties {Object<string,object>} Defines which fields in the context are editable config.properties.<key>.label {string} of the property to show on the UI config.properties.<key>.type {string} of the property (property editor for this type will be shown) config.properties.<key>.path {string} that will be changed, relative to the context. Example: If the context is <code>root<\/code> and the path is <code>header/name<\/code>, the <code>json.root.header.name<\/code> field is to be changed config.properties.<key>.value {string|boolean} (Optional) value of the property. A binding relative to the context (model name) should be used. Example: <code>{context>header/name}<\/code> will create a binding <code>json.root.header.name<\/code> config.properties.<key>.tags {array} Strings to categorize the property config.properties.<key>.visible {string|boolean} Should be used as a binding relative to the context to define the conditions under which the editor for this property should be visible, e.g. <code>{= ${context>anotherProperty} === 'someValue'}<\/code>. Invisible editors won't receive value updates until they are activated again. config.properties.<key>.<other configurations> {any} It is possible to define additional configurations in this namespace. These configurations will be passed to the dedicated property editor. Binding strings relative to context model are supported as well, e.g. <code>{= ${context>someProperty} + ${context>anotherProperty}}<\/code> config.propertyEditors {Object<string,string>} Defines which property editors should be loaded. Key is the property type and value is the editor module path. Example: <code>propertyEditors: {\"string\": \"sap/ui/integration/designtime/controls/propertyEditors/StringEditor\"}<\/code> defines the module responsible for all properties with the type <code>string<\/code> config.i18n {string|array} Module path or array of paths for i18n property files. i18n binding, for example, <code>{i18n>key}<\/code> is available in the <code>/properties<code> section, e.g. for <code>label<\/code>\n\nDefault value is <code>...see text or source<\/code>.","!static":false,"!category":"function","!type":"fn() -> Object"},"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.BaseEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!module":"sap/ui/integration/designtime/baseEditor/BaseEditor","!helpDescription":"<h3>Overview<\/h3> Configurable JSON editor <h4>Example<\/h4> <pre>\nsap.ui.require([\"sap/ui/integration/designtime/baseEditor/BaseEditor\"], function (Editor) {\n    var oJson = {\n        root: {\n            context: {\n                id: \"404\",\n                name: \"Kate\",\n                role: \"End User\"\n            },\n            foo: {\n                bar: true\n            }\n        }\n    };\n    var oEditor = new Editor();\n    oEditor.setJson(oJson);\n    oEditor.setConfig({\n        \"context\": \"root/context\",\n        \"properties\" : {\n            \"name\": {\n                \"label\": \"Name\",\n                \"path\": \"name\",\n                \"type\": \"string\"\n            },\n            \"role\": {\n                \"label\": \"Role\",\n                \"path\": \"role\",\n                \"type\": \"select\",\n                \"items\": [\n                    { \"key\": \"Developer\" },\n                    { \"key\": \"Key User\" },\n                    { \"key\": \"End User\" }\n                ]\n            },\n            \"department\": {\n                \"label\": \"Department\",\n                \"path\": \"department\",\n                \"type\": \"select\",\n                \"items\": [\n                    { \"key\": \"Sales\" },\n                    { \"key\": \"HR\" },\n                    { \"key\": \"Development\" }\n                ]\n                \"visible\": \"{= ${context>/role} === 'Key User'}\"\n            }\n        },\n        \"propertyEditors\": {\n            \"select\": \"sap/ui/integration/designtime/baseEditor/propertyEditor/selectEditor/SelectEditor\",\n            \"string\" : \"sap/ui/integration/designtime/baseEditor/propertyEditors/stringEditor/StringEditor\"\n        }\n    });\n    oEditor.attachJsonChange(function(oEvent) {\n        var oJson = oEvent.getParameter(\"json\");\n        // live change\n    })\n    oEditor.placeAt(\"content\");\n})\n<\/pre>","detachConfigChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:configChange configChange} event of this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"detachPropertyEditorsReady":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:propertyEditorsReady propertyEditorsReady} event of this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"attachDesigntimeMetadataChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:designtimeMetadataChange designtimeMetadataChange} event of this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code> itself.\n\nFired when designtime metadata has been changed by a <code>propertyEditor<\/code>.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"fireJsonChange":{"!description":"Fires event {@link #event:jsonChange jsonChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"insertContent":{"!description":"Inserts a content into the aggregation {@link #getContent content}.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control, iIndex: Number) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"oContent":"type: sap.ui.core.Control, description: The content to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the content should be inserted at; for a negative value of <code>iIndex<\/code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position"}},"detachJsonChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:jsonChange jsonChange} event of this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}}},"sap.ui.integration.designtime.cardEditor.propertyEditor.parametersEditor.ParametersEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.cardEditor.propertyEditor.parametersEditor.ParametersEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.mapEditor.MapEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.cardEditor.propertyEditor.parametersEditor.ParametersEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.designtime.baseEditor.propertyEditor.mapEditor.MapEditor#constructor sap.ui.integration.designtime.baseEditor.propertyEditor.mapEditor.MapEditor} can be used.","!module":"sap/ui/integration/designtime/cardEditor/propertyEditor/parametersEditor/ParametersEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.mapEditor.MapEditor","!category":"class"},"sap.ui.integration.CardMessageType":{"!description":"Card message strip types.","Warning":{"!description":"Message is a warning","!category":"enum","!type":"String"},"!module":"sap/ui/integration/library","Toast":{"!description":"Message is an informative brief toast message. For this type the default behavior is to auto close.","!category":"enum","!type":"String"},"Loading":{"!description":"Informs the user that the content is busy at that moment with a loading operation. Blocks the content from interaction.","!category":"enum","!type":"String"},"Error":{"!description":"Message is an error","!category":"enum","!type":"String"},"!category":"static class","Information":{"!description":"Message should be just an information","!category":"enum","!type":"String"},"None":{"!description":"Message has no specific level","!category":"enum","!type":"String"},"Success":{"!description":"Message is a success message","!category":"enum","!type":"String"}},"sap.ui.integration.CardActionType":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","Navigation":{"!description":"Used for navigation actions.","!category":"enum","!type":"String"},"!module":"sap/ui/integration/library","HideCard":{"!description":"Used for hiding the appeared details about the card.","!category":"enum","!type":"String"},"MonthChange":{"!description":"Month selection. Available only for Calendar cards.","!category":"enum","!type":"String"},"DateChange":{"!description":"Date selection. Available only for Calendar cards.","!category":"enum","!type":"String"},"Submit":{"!description":"Used for submit actions.","!category":"enum","!type":"String"},"!category":"static class","Custom":{"!description":"Used for custom actions.","!category":"enum","!type":"String"},"ShowCard":{"!description":"Used for showing more details about the card.","!category":"enum","!type":"String"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.listEditor.ListEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.listEditor.ListEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.listEditor.ListEditor"},"sap.ui.integration.designtime.baseEditor.layout.Form":{"!category":"namespace"},"sap.ui.integration.designtime.baseEditor.propertyEditor.enumStringEditor.EnumStringEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.enumStringEditor.EnumStringEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.enumStringEditor.EnumStringEditor"},"sap.ui.integration.editor.fields.ObjectListField":{"!description":"Object List Field with object list value, such as [{\"key\": \"key1\"}, {\"key\": \"key2\"}]","extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.ObjectListField with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.ObjectField.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.editor.fields.ObjectListField.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.editor.fields.ObjectField#constructor sap.ui.integration.editor.fields.ObjectField} can be used.","!module":"sap/ui/integration/editor/fields/ObjectListField","!helpDescription":"Object List Field with object list value, such as [{\"key\": \"key1\"}, {\"key\": \"key2\"}]","!proto":"sap.ui.integration.editor.fields.ObjectField","!category":"class"},"sap.ui.integration.util.DataProvider_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.util.DataProvider with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.integration.util.DataProvider"},"sap.ui.integration.designtime.baseEditor.propertyEditor.selectEditor.SelectEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.selectEditor.SelectEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.selectEditor.SelectEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor#constructor sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor} can be used.","!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/selectEditor/SelectEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.designtime.baseEditor.validator.IsBoolean":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!module":"sap/ui/integration/designtime/baseEditor/validator/IsBoolean","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"namespace","validate":{"!description":"Validator function","!static":"true","!category":"function","!type":"fn(vValue: Boolean | String) -> Boolean"}},"sap.ui.integration.Extension":{"!description":"Brings JavaScript capabilities for an {@link sap.ui.integration.widgets.Card} where custom logic can be implemented.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.Extension.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getFormatters":{"!description":"Gets current value of property {@link #getFormatters formatters}.\n\nThe formatters that can be used in the manifest.","!static":false,"!category":"function","!type":"fn() -> Object<string,function()> | undefined"},"onCardReady":{"!description":"Called after the card is initialized.","!static":false,"!category":"function","!type":"fn()"},"setActions":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.85 This property is replaced by the <code>actions<\/code> aggregation of the card;<br>Sets a new value for property {@link #getActions actions}.\n\nThe actions configuration.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sActions: [sap.ui.integration.CardMenuAction]) -> sap.ui.integration.Extension","parameters":{"sActions":"type: sap.ui.integration.CardMenuAction[], description: New value for property <code>actions<\/code>"}},"!proto":"sap.ui.base.ManagedObject","fireAction":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> Boolean","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"!category":"class","getActions":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.85 This property is replaced by the <code>actions<\/code> aggregation of the card;<br>Gets current value of property {@link #getActions actions}.\n\nThe actions configuration.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.integration.CardMenuAction]"},"overrideBlockingMessage":{"!description":"Override this method to provide a custom blocking message in case of an automatic blocking message shown by the card. It will be called when there is a <code>NoData<\/code> or an <code>Error<\/code> message.","!static":false,"!category":"function","!type":"fn() -> sap.ui.integration.BlockingMessageSettings"},"setFormatters":{"!description":"Sets current value of property {@link #setFormatters formatters}.\n\nThe formatters that can be used in the manifest. When called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(aFormatters?: Object<string,function()>) -> sap.ui.integration.Extension","parameters":{"aFormatters":"type: Object<string,function>, description: New value of property <code>formatters<\/code>"}},"detachAction":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.Extension","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"attachAction":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.Extension","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.Extension<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"extend":{"!description":"Creates a new subclass of class sap.ui.integration.Extension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Constructor for a new <code>Extension<\/code>.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getActions actions} : sap.ui.integration.CardMenuAction[]<\/li>\n<li>{@link #getFormatters formatters} : object<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:action action} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}\ncan be used as well.","!module":"sap/ui/integration/Extension","!helpDescription":"Brings JavaScript capabilities for an {@link sap.ui.integration.widgets.Card} where custom logic can be implemented.","fetch":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(sResource: String, mOptions: Object, mRequestSettings: Object) -> Promise<Response>","parameters":{"sResource":"type: string, description: This defines the resource that you wish to fetch.","mRequestSettings":"type: object, description: The map of request settings defined in the card manifest. Use this only for reading, they can not be modified.","mOptions":"type: object, description: An object containing any custom settings that you want to apply to the request."}},"loadDependencies":{"!description":"Override this method to lazy load dependencies for the extension.","!static":false,"!category":"function","!type":"fn() -> Promise"},"getCard":{"!description":"Returns an interface to the card, which uses this extension.","!static":false,"!category":"function","!type":"fn() -> sap.ui.integration.widgets.CardFacade"}},"sap.ui.integration.editor.Extension_obj":{"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.integration.editor.Extension"},"sap.ui.integration.util.RequestDataProvider_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.util.RequestDataProvider with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.util.DataProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.integration.util.RequestDataProvider"},"sap.ui.integration.util":{"useProgressiveDisclosure":{"!description":"If the card should change depending on its size. This property is temporary. Should be used to enable the feature for cards where it is needed.","!category":"enum","!type":"Boolean"},"Form":{"!description":"Utility class for handling forms in the cards.\n\nAccepts an object literal <code>mSettings<\/code> that defines initial property values, aggregated and associated objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject} can be used.","!module":"sap/ui/integration/util/Form","!category":"enum","!type":"String"},"configuration":{"!description":"Data provider configuration in manifest format. May contain FormData.","!category":"enum","!type":"Object"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"interactive":{"!description":"Defines if the card is interactive.","!category":"enum","!type":"Boolean"},"!category":"namespace","semanticRole":{"!description":"Defines the role of the Card Header.","!category":"enum","!type":"sap.f.cards.SemanticRole"},"displayVariant":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"enum","!type":"sap.ui.integration.CardDisplayVariant"},"previewMode":{"!description":"Preview mode of the <code>Card<\/code>. Helpful in scenarios when the end user is choosing or configuring a card. <ul> <li>When set to \"MockData\", the card data is loaded, using a data request, as configured in the \"data/mockData\" in the manifest. If such configuration is missing, then the Abstract mode will be used instead.<\/li> <li>When set to \"Abstract\", the card shows abstract placeholder without loading data.<\/li> <li>When set to \"Off\", the card displays real data.<\/li> <\/ul>","!category":"enum","!type":"sap.ui.integration.CardPreviewMode"},"referenceId":{"!description":"Optional property which can be used by the host to reference the card. It will be forwarded to any children cards. Does not affect the card behavior.","!category":"enum","!type":"String"},"DataProvider":"sap.ui.integration.util.DataProvider_obj","JSONBindingHelper":{"!description":"Helper class for working with bindings for json objects.","!module":"sap/ui/integration/util/JSONBindingHelper","!category":"enum","!type":"String"},"CsrfTokenHandler":"sap.ui.integration.util.CsrfTokenHandler_obj","SkeletonCard":"sap.ui.integration.util.SkeletonCard_obj","blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"manifestChanges":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"enum","!type":"[Object]"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"design":{"!description":"Defines the design of the <code>Card<\/code>.","!category":"enum","!type":"sap.ui.integration.CardDesign"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"showCloseButton":{"!description":"showCloseButton : Boolean","!category":"enum","!type":"Boolean"},"DataProviderFactory":"sap.ui.integration.util.DataProviderFactory_obj","height":{"!description":"Defines the height of the card.","!category":"enum","!type":"sap.ui.core.CSSSize"},"ErrorHandler":{"!description":"Utility class for handling errors in the cards.","!module":"sap/ui/integration/util/ErrorHandler","!category":"enum","!type":"String"},"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"ManifestResolver":"sap.ui.integration.util.ManifestResolver","manifest":{"!description":"The URL of the manifest or an object.","!category":"enum","!type":"Object"},"allowCustomDataType":{"!description":"allowCustomDataType : Boolean","!category":"enum","!type":"Boolean"},"RequestDataProvider":"sap.ui.integration.util.RequestDataProvider_obj","BindingResolver":{"!description":"Resolves a binding syntax based on a provided model and path.","!module":"sap/ui/integration/util/BindingResolver","!category":"enum","!type":"String"},"CacheAndRequestDataProvider":{"!description":"Executes data requests with enabled caching based on the given settings.","!module":"sap/ui/integration/util/CacheAndRequestDataProvider","!category":"enum","!type":"String"},"dataMode":{"!description":"Defines the state of the <code>Card<\/code>. When set to <code>Inactive<\/code>, the <code>Card<\/code> doesn't make requests.","!category":"enum","!type":"sap.ui.integration.CardDataMode"},"baseUrl":{"!description":"Defines the base URL of the card manifest. It should be used when manifest property is an object instead of a URL. If both manifest URL and base URL are defined - the base URL will be used for loading dependencies. If both manifest URL and base URL are not defined - relative resources might not be loaded correctly.","!category":"enum","!type":"sap.ui.core.URI"},"width":{"!description":"Defines the width of the card.","!category":"enum","!type":"sap.ui.core.CSSSize"},"configurationJson":{"!description":"Configuration in stringified JSON format. Should be used when binding resolving is wanted. Anytime this value is changed, a new data update is triggered.","!category":"enum","!type":"String"},"baseRuntimeUrl":{"!description":"The base url where resources for card or editor are located.","!category":"enum","!type":"String"},"parameters":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"enum","!type":"Object"},"useMockData":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.112 Use <code>previewMode<\/code> instead.<br>Defines if the card should be displayed with mock data. To be used with component cards.","!category":"enum","!type":"Boolean"}},"sap.ui.integration.editor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"!category":"namespace","Extension":"sap.ui.integration.editor.Extension_obj","formatters":{"!description":"The formatters that can be used in the manifest.","!category":"enum","!type":"Object"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"fields":"sap.ui.integration.editor.fields","actions":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.85 This property is replaced by the <code>actions<\/code> aggregation of the card;<br>The actions configuration.","!category":"enum","!type":"[sap.ui.integration.CardMenuAction]"},"EditorFacade":"sap.ui.integration.editor.EditorFacade","Settings":"sap.ui.integration.editor.Settings_obj"},"sap.ui.integration.designtime.baseEditor.propertyEditor.dateEditor.DateEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.dateEditor.DateEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.dateEditor.DateEditor"},"sap.ui.integration.editor.fields.ObjectListField_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.ObjectListField with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.ObjectField.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.editor.fields.ObjectListField"},"sap.ui.integration.designtime.baseEditor.propertyEditor.integerEditor.IntegerEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.integerEditor.IntegerEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.numberEditor.NumberEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.integerEditor.IntegerEditor"},"sap.ui.integration.designtime.cardEditor.propertyEditor.iconEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"},"IconEditor":"sap.ui.integration.designtime.cardEditor.propertyEditor.iconEditor.IconEditor_obj"},"sap.ui.integration.editor.fields.viz.ShapeSelect":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.viz.ShapeSelect with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.viz.VizBase.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getValue":{"!description":"Gets current value of property {@link #getValue value}.\n\nDefault value is <code>\"Circle\"<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.editor.fields.viz.ShapeSelect.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getValue value} : string (default: \"Circle\")<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.integration.editor.fields.viz.VizBase#constructor sap.ui.integration.editor.fields.viz.VizBase}\ncan be used as well.","!module":"sap/ui/integration/editor/fields/viz/ShapeSelect","setValue":{"!description":"Sets a new value for property {@link #getValue value}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>\"Circle\"<\/code>.","!static":false,"!category":"function","!type":"fn(sValue?: String) -> sap.ui.integration.editor.fields.viz.ShapeSelect","parameters":{"sValue":"type: string, description: New value for property <code>value<\/code>"}},"!proto":"sap.ui.integration.editor.fields.viz.VizBase","!category":"class"},"sap.ui.integration.services.Service_obj":{"!type":"fn()","prototype":"sap.ui.integration.services.Service"},"sap.ui.integration.designtime.baseEditor.propertyEditor.objectArrayEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","ObjectArrayEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.objectArrayEditor.ObjectArrayEditor_obj","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.objectArrayEditor.ObjectArrayEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.objectArrayEditor.ObjectArrayEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.codeEditor.CodeEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.objectArrayEditor.ObjectArrayEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.designtime.baseEditor.propertyEditor.codeEditor.CodeEditor#constructor sap.ui.integration.designtime.baseEditor.propertyEditor.codeEditor.CodeEditor} can be used.","!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/objectArrayEditor/ObjectArrayEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.codeEditor.CodeEditor","!category":"class"},"sap.ui.integration.designtime.cardEditor.propertyEditor.parametersEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","ParametersEditor":"sap.ui.integration.designtime.cardEditor.propertyEditor.parametersEditor.ParametersEditor_obj","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.dateEditor.DateEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.dateEditor.DateEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.dateEditor.DateEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor#constructor sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor} can be used.","!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/dateEditor/DateEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.editor.fields.BooleanField":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.BooleanField with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.BaseField.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.editor.fields.BooleanField.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.editor.fields.BaseField#constructor sap.ui.integration.editor.fields.BaseField} can be used.","!module":"sap/ui/integration/editor/fields/BooleanField","!proto":"sap.ui.integration.editor.fields.BaseField","!category":"class"},"sap.ui.integration.designtime.baseEditor.propertyEditor.iconEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"},"IsInIconPool":"sap.ui.integration.designtime.baseEditor.propertyEditor.iconEditor.IsInIconPool","IconEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.iconEditor.IconEditor_obj"},"sap.ui.integration.editor.fields.GroupField_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.GroupField with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.BaseField.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.editor.fields.GroupField"},"sap.ui.integration.designtime.baseEditor.propertyEditor.stringEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","StringEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.stringEditor.StringEditor_obj","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor"},"sap.ui.integration.util.DataProviderFactory_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.util.DataProviderFactory with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.util.DataProviderFactory"},"sap.ui.integration.designtime.baseEditor.propertyEditor.groupEditor.GroupEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.groupEditor.GroupEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.groupEditor.GroupEditor"},"sap.ui.integration.editor.fields.ObjectField":{"!description":"Object Field with object value such as {\"key\": \"key1\"}","detachTableUpdated":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:tableUpdated tableUpdated} event of this <code>sap.ui.integration.editor.fields.ObjectField<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.editor.fields.ObjectField","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.editor.fields.ObjectField.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"detachTranslationPopoverOpened":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.editor.fields.ObjectField","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"!proto":"sap.ui.integration.editor.fields.BaseField","!category":"class","attachTableUpdated":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:tableUpdated tableUpdated} event of this <code>sap.ui.integration.editor.fields.ObjectField<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.editor.fields.ObjectField<\/code> itself.\n\nFired when table is updated.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.editor.fields.ObjectField","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.editor.fields.ObjectField<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.ObjectField with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.BaseField.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Events\n<ul>\n<li>{@link #event:tableUpdated tableUpdated} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:translationPopoverOpened translationPopoverOpened} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.integration.editor.fields.BaseField#constructor sap.ui.integration.editor.fields.BaseField}\ncan be used as well.","!module":"sap/ui/integration/editor/fields/ObjectField","!helpDescription":"Object Field with object value such as {\"key\": \"key1\"}","fireTableUpdated":{"!description":"Fires event {@link #event:tableUpdated tableUpdated} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.editor.fields.ObjectField","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"fireTranslationPopoverOpened":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.editor.fields.ObjectField","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"attachTranslationPopoverOpened":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.editor.fields.ObjectField","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.editor.fields.ObjectField<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}}},"sap.ui.integration.designtime.baseEditor.propertyEditor.textAreaEditor.TextAreaEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.textAreaEditor.TextAreaEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.textAreaEditor.TextAreaEditor"},"sap.ui.integration.editor.Settings":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.Settings with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.editor.Settings.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.core.Control#constructor sap.ui.core.Control} can be used.","!module":"sap/ui/integration/editor/Settings","!proto":"sap.ui.core.Control","!category":"class"},"sap.ui.integration.editor.fields.StringListField_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.StringListField with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.BaseField.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.editor.fields.StringListField"},"sap.ui.integration.designtime.baseEditor.propertyEditor.codeEditor.CodeEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.codeEditor.CodeEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.codeEditor.CodeEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor#constructor sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor} can be used.","!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/codeEditor/CodeEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.designtime.baseEditor.propertyEditor.dateTimeEditor":{"DateTimeEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.dateTimeEditor.DateTimeEditor_obj","visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.objectArrayEditor.ObjectArrayEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.objectArrayEditor.ObjectArrayEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.codeEditor.CodeEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.objectArrayEditor.ObjectArrayEditor"},"sap.ui.integration.designtime.editor.CardPreview":{"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.editor.CardPreview.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getParentWidth":{"!description":"Gets current value of property {@link #getParentWidth parentWidth}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"getSettings":{"!description":"Gets current value of property {@link #getSettings settings}.","!static":false,"!category":"function","!type":"fn() -> Object"},"!proto":"sap.ui.core.Control","!category":"class","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.editor.CardPreview with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setSettings":{"!description":"Sets a new value for property {@link #getSettings settings}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oSettings: Object) -> sap.ui.integration.designtime.editor.CardPreview","parameters":{"oSettings":"type: any, description: New value for property <code>settings<\/code>"}},"setParentHeight":{"!description":"Sets a new value for property {@link #getParentHeight parentHeight}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sParentHeight: sap.ui.core.CSSSize) -> sap.ui.integration.designtime.editor.CardPreview","parameters":{"sParentHeight":"type: sap.ui.core.CSSSize, description: New value for property <code>parentHeight<\/code>"}},"setParentWidth":{"!description":"Sets a new value for property {@link #getParentWidth parentWidth}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sParentWidth: sap.ui.core.CSSSize) -> sap.ui.integration.designtime.editor.CardPreview","parameters":{"sParentWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>parentWidth<\/code>"}},"!constructorDescription":"Constructor for a new <code>Preview<\/code> that show a image, abstract live preview\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getSettings settings} : any<\/li>\n<li>{@link #getCard card} : object<\/li>\n<li>{@link #getParentWidth parentWidth} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getParentHeight parentHeight} : sap.ui.core.CSSSize<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #get_editor _editor} : (sap.ui.core.ID | sap.ui.core.Control)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","!module":"sap/ui/integration/designtime/editor/CardPreview","setCard":{"!description":"Sets a new value for property {@link #getCard card}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oCard: Object) -> sap.ui.integration.designtime.editor.CardPreview","parameters":{"oCard":"type: object, description: New value for property <code>card<\/code>"}},"getCard":{"!description":"Gets current value of property {@link #getCard card}.","!static":false,"!category":"function","!type":"fn() -> Object"},"getParentHeight":{"!description":"Gets current value of property {@link #getParentHeight parentHeight}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"}},"sap.ui.integration.editor.fields.viz.ColorSelect_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.viz.ColorSelect with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.viz.VizBase.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.editor.fields.viz.ColorSelect"},"sap.ui.integration.designtime.baseEditor.validator.IsNumber":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!module":"sap/ui/integration/designtime/baseEditor/validator/IsNumber","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"namespace","validate":{"!description":"Validator function","!static":"true","!category":"function","!type":"fn(vValue: Number | String) -> Boolean"}},"sap.ui.integration.util.DataProvider":{"attachError":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:error error} event of this <code>sap.ui.integration.util.DataProvider<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.util.DataProvider<\/code> itself.\n\nEvent fired when an error is thrown.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.util.DataProvider","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.util.DataProvider<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"!proto":"sap.ui.base.ManagedObject","attachDataChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:dataChanged dataChanged} event of this <code>sap.ui.integration.util.DataProvider<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.util.DataProvider<\/code> itself.\n\nEvent fired when new data is available.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.util.DataProvider","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.util.DataProvider<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachDataChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:dataChanged dataChanged} event of this <code>sap.ui.integration.util.DataProvider<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.util.DataProvider","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"!category":"class","triggerDataUpdate":{"!description":"Triggers a data update which results in either \"dataChanged\" event or an \"error\" event.","!static":false,"!category":"function","!type":"fn() -> Promise"},"!constructorDescription":"Constructor for a new <code>DataProvider<\/code>.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getConfiguration configuration} : object<\/li>\n<li>{@link #getConfigurationJson configurationJson} : string<\/li>\n<li>{@link #getBaseRuntimeUrl baseRuntimeUrl} : string<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getCard card} : (sap.ui.core.ID | sap.ui.integration.widgets.Card)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:dataRequested dataRequested} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:dataChanged dataChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:error error} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}\ncan be used as well.","detachError":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:error error} event of this <code>sap.ui.integration.util.DataProvider<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.util.DataProvider","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"getConfiguration":{"!description":"Gets current value of property {@link #getConfiguration configuration}.\n\nData provider configuration in manifest format. May contain FormData.","!static":false,"!category":"function","!type":"fn() -> Object"},"fireDataRequested":{"!description":"Fires event {@link #event:dataRequested dataRequested} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.util.DataProvider","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"setCard":{"!description":"Sets the associated {@link #getCard card}.","!static":false,"!category":"function","!type":"fn(oCard: sap.ui.core.ID | sap.ui.integration.widgets.Card) -> sap.ui.integration.util.DataProvider","parameters":{"oCard":"type: sap.ui.core.ID|sap.ui.integration.widgets.Card, description: ID of an element which becomes the new target of this card association; alternatively, an element instance may be given"}},"setConfiguration":{"!description":"Sets a new value for property {@link #getConfiguration configuration}.\n\nData provider configuration in manifest format. May contain FormData.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oConfiguration: Object) -> sap.ui.integration.util.DataProvider","parameters":{"oConfiguration":"type: object, description: New value for property <code>configuration<\/code>"}},"getData":{"!description":"Triggers a data update and returns the result data.","!static":false,"!category":"function","!type":"fn() -> Promise"},"!description":"Provides data for the card, card header and card content by reading the \"data\" part of the card manifest. Hides the complexity of working with different data providers like: - static JSON data - data services which implements the interface <code>sap.ui.integration.services.Data<\/code> class - AJAX calls like <code>sap.ui.integration.cards.Data<\/code> class Allows for an extensible way to add more data providers.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.util.DataProvider.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"attachDataRequested":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:dataRequested dataRequested} event of this <code>sap.ui.integration.util.DataProvider<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.util.DataProvider<\/code> itself.\n\nEvent fired when new data is requested.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.util.DataProvider","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.util.DataProvider<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"fireDataChanged":{"!description":"Fires event {@link #event:dataChanged dataChanged} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.util.DataProvider","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"getDetails":{"!static":false,"!category":"function","!type":"fn() -> String"},"extend":{"!description":"Creates a new subclass of class sap.ui.integration.util.DataProvider with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getResolvedConfiguration":{"!static":false,"!category":"function","!type":"fn() -> Object"},"fireError":{"!description":"Fires event {@link #event:error error} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.util.DataProvider","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"getConfigurationJson":{"!description":"Gets current value of property {@link #getConfigurationJson configurationJson}.\n\nConfiguration in stringified JSON format. Should be used when binding resolving is wanted. Anytime this value is changed, a new data update is triggered.","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/integration/util/DataProvider","!helpDescription":"Provides data for the card, card header and card content by reading the \"data\" part of the card manifest. Hides the complexity of working with different data providers like: - static JSON data - data services which implements the interface <code>sap.ui.integration.services.Data<\/code> class - AJAX calls like <code>sap.ui.integration.cards.Data<\/code> class Allows for an extensible way to add more data providers.","setBaseRuntimeUrl":{"!description":"Sets a new value for property {@link #getBaseRuntimeUrl baseRuntimeUrl}.\n\nThe base url where resources for card or editor are located.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sBaseRuntimeUrl: String) -> sap.ui.integration.util.DataProvider","parameters":{"sBaseRuntimeUrl":"type: string, description: New value for property <code>baseRuntimeUrl<\/code>"}},"getBaseRuntimeUrl":{"!description":"Gets current value of property {@link #getBaseRuntimeUrl baseRuntimeUrl}.\n\nThe base url where resources for card or editor are located.","!static":false,"!category":"function","!type":"fn() -> String"},"getCard":{"!description":"ID of the element which is the current target of the association {@link #getCard card}, or <code>null<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.ID | null"},"detachDataRequested":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:dataRequested dataRequested} event of this <code>sap.ui.integration.util.DataProvider<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.util.DataProvider","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}}},"sap.ui.integration.editor.fields.DestinationField_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.DestinationField with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.BaseField.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.editor.fields.DestinationField"},"sap.ui.integration.designtime.baseEditor.propertyEditor.multiSelectEditor.MultiSelectEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.multiSelectEditor.MultiSelectEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.multiSelectEditor.MultiSelectEditor"},"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor":{"setContent":{"!description":"Sets the aggregated {@link #getContent content}.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oContent":"type: sap.ui.core.Control, description: The content to set"}},"detachInit":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:init init} event of this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"fireInit":{"!description":"Fires event {@link #event:init init} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"detachReady":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:ready ready} event of this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"getContent":{"!description":"Gets content of aggregation {@link #getContent content}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Control"},"!proto":"sap.ui.core.Control","detachFragmentChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:fragmentChange fragmentChange} event of this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"!category":"class","fireFragmentChange":{"!description":"Fires event {@link #event:fragmentChange fragmentChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"fireValidationErrorChange":{"!description":"Fires event {@link #event:validationErrorChange validationErrorChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"setConfig":{"!description":"Sets a new value for property {@link #getConfig config}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oConfig: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oConfig":"type: object, description: New value for property <code>config<\/code>"}},"attachInit":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:init init} event of this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code> itself.\n\nFires when init is finished","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachDesigntimeMetadataChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:designtimeMetadataChange designtimeMetadataChange} event of this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getRenderLabel renderLabel} : boolean (default: true)<\/li>\n<li>{@link #getValue value} : any<\/li>\n<li>{@link #getConfig config} : object<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Control<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:beforeValueChange beforeValueChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:valueChange valueChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:designtimeMetadataChange designtimeMetadataChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:configChange configChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:fragmentChange fragmentChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:ready ready} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:init init} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:validationErrorChange validationErrorChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","setRenderLabel":{"!description":"Sets a new value for property {@link #getRenderLabel renderLabel}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bRenderLabel?: Boolean) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"bRenderLabel":"type: boolean, description: New value for property <code>renderLabel<\/code>"}},"attachConfigChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:configChange configChange} event of this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code> itself.\n\nFires when config is changed","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachValueChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:valueChange valueChange} event of this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"fireDesigntimeMetadataChange":{"!description":"Fires event {@link #event:designtimeMetadataChange designtimeMetadataChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"destroyContent":{"!description":"Destroys the content in the aggregation {@link #getContent content}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor"},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","attachValidationErrorChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:validationErrorChange validationErrorChange} event of this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code> itself.\n\nFires when the error state of the editor changes","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"detachValidationErrorChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:validationErrorChange validationErrorChange} event of this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"detachBeforeValueChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:beforeValueChange beforeValueChange} event of this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"attachReady":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:ready ready} event of this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code> itself.\n\nFired when the editor fragment was loaded and the <code>asyncInit<\/code> method was executed","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"fireConfigChange":{"!description":"Fires event {@link #event:configChange configChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"getConfig":{"!description":"Gets current value of property {@link #getConfig config}.","!static":false,"!category":"function","!type":"fn() -> Object"},"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"attachBeforeValueChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:beforeValueChange beforeValueChange} event of this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code> itself.\n\nFires before value is changed","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getValue":{"!description":"Gets current value of property {@link #getValue value}.","!static":false,"!category":"function","!type":"fn() -> Object"},"fireBeforeValueChange":{"!description":"Fires event {@link #event:beforeValueChange beforeValueChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/BasePropertyEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","attachFragmentChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:fragmentChange fragmentChange} event of this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code> itself.\n\nFires when fragment is changed","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachConfigChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:configChange configChange} event of this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called, when the event occurs"}},"getRenderLabel":{"!description":"Gets current value of property {@link #getRenderLabel renderLabel}.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setValue":{"!description":"Sets the editor value. If no value is provided, the default value provided in the config will be used instead. This method triggers the ready check, therefore it should also be called when overridden in complex editors.","!static":false,"!category":"function","!type":"fn(vValue: *, bSuppressValidation: Boolean)","parameters":{"vValue":"type: *, description: Editor value that was already processed by a custom setValue implementation","bSuppressValidation":"type: boolean, description: Whether to set the value regardless of the validation result, false by default"}},"attachDesigntimeMetadataChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:designtimeMetadataChange designtimeMetadataChange} event of this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code> itself.\n\nFires when designtime metadata is changed","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"attachValueChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:valueChange valueChange} event of this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code> itself.\n\nFires when value is changed","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: function(sap.ui.base.Event) : void, oListener?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code> itself","fnFunction":"type: function(sap.ui.base.Event) : void, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"fireReady":{"!description":"Fires event {@link #event:ready ready} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"fireValueChange":{"!description":"Fires event {@link #event:valueChange valueChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}}},"sap.ui.integration.editor.fields.viz.IconSelect":{"setAllowDefaultIcons":{"!description":"Sets a new value for property {@link #getAllowDefaultIcons allowDefaultIcons}.\n\nSpecifies whether or not to allow Default Icons (SAP Icons).\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bAllowDefaultIcons?: Boolean) -> sap.ui.integration.editor.fields.viz.IconSelect","parameters":{"bAllowDefaultIcons":"type: boolean, description: New value for property <code>allowDefaultIcons<\/code>"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.editor.fields.viz.IconSelect.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"setAllowFile":{"!description":"Sets a new value for property {@link #getAllowFile allowFile}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bAllowFile?: Boolean) -> sap.ui.integration.editor.fields.viz.IconSelect","parameters":{"bAllowFile":"type: boolean, description: New value for property <code>allowFile<\/code>"}},"getAllowDefaultIcons":{"!description":"Gets current value of property {@link #getAllowDefaultIcons allowDefaultIcons}.\n\nSpecifies whether or not to allow Default Icons (SAP Icons).\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!proto":"sap.ui.integration.editor.fields.viz.VizBase","!category":"class","extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.viz.IconSelect with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.viz.VizBase.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getValue":{"!description":"Gets current value of property {@link #getValue value}.\n\nDefault value is <code>\"sap-icon://accept\"<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getValue value} : string (default: \"sap-icon://accept\")<\/li>\n<li>{@link #getAllowFile allowFile} : boolean (default: true)<\/li>\n<li>{@link #getAllowNone allowNone} : boolean (default: true)<\/li>\n<li>{@link #getAllowDefaultIcons allowDefaultIcons} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.integration.editor.fields.viz.VizBase#constructor sap.ui.integration.editor.fields.viz.VizBase}\ncan be used as well.","!module":"sap/ui/integration/editor/fields/viz/IconSelect","setAllowNone":{"!description":"Sets a new value for property {@link #getAllowNone allowNone}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bAllowNone?: Boolean) -> sap.ui.integration.editor.fields.viz.IconSelect","parameters":{"bAllowNone":"type: boolean, description: New value for property <code>allowNone<\/code>"}},"setValue":{"!description":"Sets a new value for property {@link #getValue value}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>\"sap-icon://accept\"<\/code>.","!static":false,"!category":"function","!type":"fn(sValue?: String) -> sap.ui.integration.editor.fields.viz.IconSelect","parameters":{"sValue":"type: string, description: New value for property <code>value<\/code>"}},"getAllowFile":{"!description":"Gets current value of property {@link #getAllowFile allowFile}.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getAllowNone":{"!description":"Gets current value of property {@link #getAllowNone allowNone}.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"}},"sap":{"sap":"sap","ui":"sap.ui","!category":"namespace"},"sap.ui.integration.widgets":{"useProgressiveDisclosure":{"!description":"If the card should change depending on its size. This property is temporary. Should be used to enable the feature for cards where it is needed.","!category":"enum","!type":"Boolean"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"interactive":{"!description":"Defines if the card is interactive.","!category":"enum","!type":"Boolean"},"!category":"namespace","semanticRole":{"!description":"Defines the role of the Card Header.","!category":"enum","!type":"sap.f.cards.SemanticRole"},"displayVariant":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"enum","!type":"sap.ui.integration.CardDisplayVariant"},"previewMode":{"!description":"Preview mode of the <code>Card<\/code>. Helpful in scenarios when the end user is choosing or configuring a card. <ul> <li>When set to \"MockData\", the card data is loaded, using a data request, as configured in the \"data/mockData\" in the manifest. If such configuration is missing, then the Abstract mode will be used instead.<\/li> <li>When set to \"Abstract\", the card shows abstract placeholder without loading data.<\/li> <li>When set to \"Off\", the card displays real data.<\/li> <\/ul>","!category":"enum","!type":"sap.ui.integration.CardPreviewMode"},"referenceId":{"!description":"Optional property which can be used by the host to reference the card. It will be forwarded to any children cards. Does not affect the card behavior.","!category":"enum","!type":"String"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"manifestChanges":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"enum","!type":"[Object]"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"design":{"!description":"Defines the design of the <code>Card<\/code>.","!category":"enum","!type":"sap.ui.integration.CardDesign"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"showCloseButton":{"!description":"showCloseButton : Boolean","!category":"enum","!type":"Boolean"},"height":{"!description":"Defines the height of the card.","!category":"enum","!type":"sap.ui.core.CSSSize"},"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"manifest":{"!description":"The URL of the manifest or an object.","!category":"enum","!type":"Object"},"Card":"sap.ui.integration.widgets.Card_obj","dataMode":{"!description":"Defines the state of the <code>Card<\/code>. When set to <code>Inactive<\/code>, the <code>Card<\/code> doesn't make requests.","!category":"enum","!type":"sap.ui.integration.CardDataMode"},"baseUrl":{"!description":"Defines the base URL of the card manifest. It should be used when manifest property is an object instead of a URL. If both manifest URL and base URL are defined - the base URL will be used for loading dependencies. If both manifest URL and base URL are not defined - relative resources might not be loaded correctly.","!category":"enum","!type":"sap.ui.core.URI"},"width":{"!description":"Defines the width of the card.","!category":"enum","!type":"sap.ui.core.CSSSize"},"parameters":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"enum","!type":"Object"},"useMockData":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.112 Use <code>previewMode<\/code> instead.<br>Defines if the card should be displayed with mock data. To be used with component cards.","!category":"enum","!type":"Boolean"},"CardFacade":"sap.ui.integration.widgets.CardFacade"},"sap.ui.integration.util.SkeletonCard":{"!description":"Represents a card which can work without being rendered.","extend":{"!description":"Creates a new subclass of class sap.ui.integration.util.SkeletonCard with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.widgets.Card.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.util.SkeletonCard.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new <code>SkeletonCard<\/code>.\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.widgets.Card#constructor sap.ui.integration.widgets.Card} can be used.","!module":"sap/ui/integration/util/SkeletonCard","!helpDescription":"Represents a card which can work without being rendered.","!proto":"sap.ui.integration.widgets.Card","!category":"class"},"sap.ui":{"integration":"sap.ui.integration","!category":"namespace"},"sap.ui.integration.designtime.baseEditor.propertyEditor.dateEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"DateEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.dateEditor.DateEditor_obj","busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.textAreaEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"TextAreaEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.textAreaEditor.TextAreaEditor_obj","busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.PropertyEditorFactory":{"!description":"Factory for the creation of <code>BasePropertyEditor<\/code> instances.","!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/PropertyEditorFactory","deregisterType":{"!description":"Deregisters a type and removes the loaded property editor class.","!static":"true","!category":"function","!type":"fn(sType: String)"},"!helpDescription":"Factory for the creation of <code>BasePropertyEditor<\/code> instances.","registerTypes":{"!description":"Registers classes for the given editor types. If an editor type is already registered, it will be skipped and must first be deregistered using the <code>PropertyEditorFactory.deregisterType<\/code> function.","!static":"true","!category":"function","!type":"fn(mTypes: Object<string,string>) -> Promise<object>"},"create":{"!description":"Creates a new <code>BasePropertyEditor<\/code> instance of the given editor type.","!static":"true","!category":"function","!type":"fn(sPropertyType: String) -> Promise<sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor>"},"!category":"namespace","deregisterAllTypes":{"!description":"Deregisters all editor types and removes the loaded classes.","!static":"true","!category":"function","!type":"fn()"}},"sap.ui.integration.designtime.baseEditor.BaseEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.BaseEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.BaseEditor"},"sap.ui.integration.designtime.baseEditor.propertyEditor":{"PropertyEditorFactory":"sap.ui.integration.designtime.baseEditor.propertyEditor.PropertyEditorFactory","busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"mapEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.mapEditor","separatorEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.separatorEditor","!category":"namespace","arrayEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.arrayEditor","integerEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.integerEditor","multiSelectEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.multiSelectEditor","iconEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.iconEditor","jsonEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.jsonEditor","selectEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.selectEditor","listEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.listEditor","blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"dateEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.dateEditor","stringEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.stringEditor","busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"textAreaEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.textAreaEditor","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"objectArrayEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.objectArrayEditor","booleanEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.booleanEditor","enumStringEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.enumStringEditor","codeEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.codeEditor","groupEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.groupEditor","numberEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.numberEditor","dateTimeEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.dateTimeEditor","config":{"!description":"config : Object","!category":"enum","!type":"Object"},"BasePropertyEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor_obj"},"sap.ui.integration.designtime.baseEditor.validator.IsDate":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!module":"sap/ui/integration/designtime/baseEditor/validator/IsDate","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"namespace","validate":{"!description":"Validator function","!static":"true","!category":"function","!type":"fn(vValue: Boolean | String, sDateString: String) -> Boolean"}},"sap.ui.integration.editor.fields.IntegerField_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.IntegerField with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.editor.fields.BaseField.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.editor.fields.IntegerField"},"sap.ui.integration.designtime.baseEditor.propertyEditor.dateTimeEditor.DateTimeEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.dateTimeEditor.DateTimeEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.dateEditor.DateEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.dateTimeEditor.DateTimeEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.designtime.baseEditor.propertyEditor.dateEditor.DateEditor#constructor sap.ui.integration.designtime.baseEditor.propertyEditor.dateEditor.DateEditor} can be used.","!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/dateTimeEditor/DateTimeEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.dateEditor.DateEditor","!category":"class"},"sap.ui.integration.editor.fields.fragment":{"!category":"namespace","Controller":"sap.ui.integration.editor.fields.fragment.Controller_obj"},"sap.ui.integration.designtime.baseEditor.propertyEditor.listEditor.ListEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.listEditor.ListEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.listEditor.ListEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor#constructor sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor} can be used.","!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/listEditor/ListEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.designtime.baseEditor.propertyEditor.stringEditor.StringEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.stringEditor.StringEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.stringEditor.StringEditor"},"sap.ui.integration.CardDataMode":{"!description":"Possible data modes for <code>{@link sap.ui.integration.widgets.Card}<\/code>.","Auto":{"!description":"When in this mode, the card starts processing the manifest when the card is in the viewport.","!category":"enum","!type":"String"},"Active":{"!description":"When in this mode, the card can make requests.","!category":"enum","!type":"String"},"!module":"sap/ui/integration/library","Inactive":{"!description":"When in this mode, the card cannot make requests.","!category":"enum","!type":"String"},"!category":"static class"},"sap.ui.integration.designtime.cardEditor":{"propertyEditor":"sap.ui.integration.designtime.cardEditor.propertyEditor","!category":"namespace"},"sap.ui.integration.editor.fields.fragment.Controller":{"!description":"Visualization Fragment Control","extend":{"!description":"Creates a new subclass of class sap.ui.integration.editor.fields.fragment.Controller with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.mvc.Controller.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.editor.fields.fragment.Controller.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!module":"sap/ui/integration/editor/fields/fragment/Controller","!helpDescription":"Visualization Fragment Control","!proto":"sap.ui.core.mvc.Controller","!category":"class"},"sap.ui.integration.designtime.baseEditor.propertyEditor.jsonEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","JsonEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.jsonEditor.JsonEditor_obj","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.jsonEditor.JsonEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.jsonEditor.JsonEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.jsonEditor.JsonEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor#constructor sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor} can be used.","!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/jsonEditor/JsonEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor.ComplexMapEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor.ComplexMapEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor.ComplexMapEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor#constructor sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor} can be used.","!module":"sap/ui/integration/designtime/cardEditor/propertyEditor/complexMapEditor/ComplexMapEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"}}}