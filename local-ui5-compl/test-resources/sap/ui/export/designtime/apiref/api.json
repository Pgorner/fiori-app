{"$schema-ref":"http://schemas.sap.com/sapui5/designtime/api.json/1.0","version":"1.132.1","library":"sap.ui.export","symbols":[{"kind":"namespace","name":"sap.ui.export","basename":"export","resource":"sap/ui/export/library.js","module":"sap/ui/export/library","export":"","static":true,"visibility":"public","description":"<p><p>UI5 library: sap.ui.export - document export utilities</p></p>","displayName":"sap.ui.export","nodes":[{"name":"sap.ui.export.EdmType","description":"<p>EDM data types for document export.\n</p>","href":"api/sap.ui.export.EdmType"},{"name":"sap.ui.export.ExportBase","description":"<p>The <code>sap.ui.export.ExportBase</code> class allows you to export table data from a UI5 application to certain formats. </p>","href":"api/sap.ui.export.ExportBase"},{"name":"sap.ui.export.ExportHandler","description":"<p>The <code>sap.ui.export.ExportHandler</code> class allows you to export table data from an SAPUI5 application.</p>","href":"api/sap.ui.export.ExportHandler"},{"name":"sap.ui.export.ExportUtils","description":"<p>Utilities related to export to enable reuse in integration scenarios (e.g. </p>","href":"api/sap.ui.export.ExportUtils"},{"name":"sap.ui.export.FileType","description":"<p>File types for document export.\n</p>","href":"api/sap.ui.export.FileType"},{"name":"sap.ui.export.Spreadsheet","description":"<p>The <code>sap.ui.export.Spreadsheet</code> class allows you to export table data from a UI5 application to a spreadsheet file.</p>","href":"api/sap.ui.export.Spreadsheet"},{"name":"sap.ui.export.util","description":"","href":"api/sap.ui.export.util"}],"component":"CA-UI5-TBL","hasSample":false,"title":"namespace sap.ui.export","subTitle":""},{"kind":"enum","name":"sap.ui.export.EdmType","basename":"EdmType","resource":"sap/ui/export/library.js","module":"sap/ui/export/library","export":"EdmType","static":true,"visibility":"public","since":"1.50.0","description":"<p><p>EDM data types for document export.</p><p>This enum is part of the 'sap/ui/export/library' module export and must be accessed by the property 'EdmType'.</p></p>","ui5-metadata":{"stereotype":"enum"},"properties":[{"name":"sap.ui.export.EdmType.BigNumber","visibility":"public","since":"1.60","description":"<p>Property of type BigNumber.</p>"},{"name":"sap.ui.export.EdmType.Boolean","visibility":"public","description":"<p>Property of type Boolean.</p>"},{"name":"sap.ui.export.EdmType.Currency","visibility":"public","description":"<p>Property of type Currency</p>"},{"name":"sap.ui.export.EdmType.Date","visibility":"public","description":"<p>Property of type Date.</p>"},{"name":"sap.ui.export.EdmType.DateTime","visibility":"public","description":"<p>Property of type DateTime.</p>"},{"name":"sap.ui.export.EdmType.Enumeration","visibility":"public","since":"1.58","description":"<p>Property of type Enumeration.</p>"},{"name":"sap.ui.export.EdmType.Number","visibility":"public","description":"<p>Property of type Number.</p>"},{"name":"sap.ui.export.EdmType.Percentage","visibility":"public","since":"1.87","description":"<p>Property of type Percentage.</p>"},{"name":"sap.ui.export.EdmType.String","visibility":"public","description":"<p>Property of type string.</p>"},{"name":"sap.ui.export.EdmType.Time","visibility":"public","description":"<p>Property of type Time.</p>"},{"name":"sap.ui.export.EdmType.Timezone","visibility":"public","since":"1.118","description":"<p>Property of type Timezone</p>"}],"displayName":"sap.ui.export.EdmType","component":"CA-UI5-TBL","hasSample":false,"title":"enum sap.ui.export.EdmType","subTitle":""},{"kind":"class","name":"sap.ui.export.ExportBase","basename":"ExportBase","resource":"sap/ui/export/ExportBase.js","module":"sap/ui/export/ExportBase","export":"","static":true,"visibility":"public","since":"1.96","extends":"sap.ui.base.EventProvider","description":"<p>The <code>sap.ui.export.ExportBase</code> class allows you to export table data from a UI5 application to certain formats. This class is an abstract class that requires specific implementations for each file format.</p>","ui5-metadata":{"stereotype":"object"},"constructor":{"visibility":"public","parameters":[{"name":"mSettings","optional":false,"description":"<p>Export settings</p>","phoneName":"mSettings","depth":0,"types":[],"typeInfo":{"template":"object"},"defaultValue":""},{"name":"workbook","optional":false,"description":"<p>Data and formatting related export settings</p>","phoneName":"mSettings.workbook","depth":1,"types":[],"typeInfo":{"template":"object"},"defaultValue":""},{"name":"dataSource","optional":false,"description":"<p>Source of export data. A data source properties map or <code>sap.ui.model.ListBinding</code> can be provided. An instance of <code>sap.ui.model.ListBinding</code> has to implement a <code>#getDownloadUrl</code> function.</p>","phoneName":"mSettings.dataSource","depth":1,"types":[],"typeInfo":{"template":"object | ${0}","UI5Types":["sap.ui.model.ListBinding"]},"defaultValue":""},{"name":"count","optional":true,"description":"<p>The maximal number of records to export</p>","phoneName":"mSettings.count","depth":1,"types":[],"typeInfo":{"template":"int"},"defaultValue":""},{"name":"fileName","optional":true,"description":"<p>Optional file name for the exported file</p>","phoneName":"mSettings.fileName","depth":1,"types":[],"typeInfo":{"template":"string"},"defaultValue":""},{"name":"fileType","optional":true,"description":"<p><code>FileType</code> that is used to identify the file-ending and MIME-type of the file</p>","phoneName":"mSettings.fileType","depth":1,"types":[],"typeInfo":{"UI5Types":["sap.ui.export.FileType"]},"defaultValue":""}],"description":"<p>Base class for specific SAPUI5 export implementations. This class contains abstract functions that need to be implemented.</p>","references":[],"codeExample":"<pre>new sap.ui.export.ExportBase(mSettings)</pre>"},"events":[{"name":"beforeExport","visibility":"public","since":"1.96","parameters":[{"name":"oEvent","typeInfo":{"UI5Types":["sap.ui.base.Event"]}},{"name":"getSource","optional":false,"depth":1,"phoneName":"oEvent.getSource","typeInfo":{"UI5Types":["sap.ui.base.EventProvider"]}},{"name":"getParameters","optional":false,"depth":1,"phoneName":"oEvent.getParameters","typeInfo":{"template":"object"}}],"description":"<p>The <code>beforeExport</code> event is fired just before the export process is started. Listeners may prevent the default action of this event by calling the <code>preventDefault</code> method on the event object.<br><br><i>Since: 1.96.</i></p>"}],"methods":[{"name":"attachBeforeExport","visibility":"public","since":"1.96","returnValue":{"type":"this","description":"<p>Reference to <code>this</code> in order to allow method chaining</p>","typeInfo":{"template":"this"}},"parameters":[{"name":"oData","optional":true,"description":"<p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>","typeInfo":{"template":"object"},"defaultValue":""},{"name":"fnHandler","optional":false,"description":"<p>The function to be called when the event occurs</p>","typeInfo":{"template":"function"},"defaultValue":""},{"name":"oListener","optional":true,"description":"<p>Context object to call the event handler with. Defaults to the <code>sap.ui.export.ExportBase</code> instance itself</p>","typeInfo":{"template":"object"},"defaultValue":""}],"description":"<p>Attaches event handler <code>fnFunction</code> to the <a target=\"_self\" href=\"api/sap.ui.export.ExportBase#events/beforeExport\">sap.ui.export.ExportBase#event:beforeExport</a> event of this <code>sap.ui.export.ExportBase</code>.</br> When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.export.ExportBase</code> itself.</br> This event is fired just before the export process is started.</p>","href":"api/sap.ui.export.ExportBase#methods/attachBeforeExport","code":"<pre>attachBeforeExport(oData?, fnHandler, oListener?) : this</pre>"},{"name":"build","visibility":"public","returnValue":{"type":"Promise","description":"<p>Promise that gets resolved once the data has been exported</p>","typeInfo":{"template":"Promise"}},"description":"<p>Triggers the export process of the specific format.</p>","href":"api/sap.ui.export.ExportBase#methods/build","code":"<pre>build() : Promise</pre>"},{"name":"cancel","visibility":"public","description":"<p>Cancels the current export process.</p>","href":"api/sap.ui.export.ExportBase#methods/cancel","code":"<pre>cancel() : void</pre>"},{"name":"destroy","visibility":"public","description":"<p>Cleans up the internal structures and removes all event handlers.</p><p>The object must not be used anymore after destroy was called.<br><br>References: <ul><li><a target=\"_self\" href=\"api/sap.ui.base.Object#methods/destroy\">sap.ui.base.Object#destroy</a></li></ul></p>","references":["<li>{@link sap.ui.base.Object#destroy}</li>"],"href":"api/sap.ui.export.ExportBase#methods/destroy","code":"<pre>destroy() : void</pre>"},{"name":"detachBeforeExport","visibility":"public","since":"1.96","returnValue":{"type":"this","description":"<p>Reference to <code>this</code> in order to allow method chaining</p>","typeInfo":{"template":"this"}},"parameters":[{"name":"fnHandler","optional":false,"description":"<p>The function to be called when the event occurs</p>","typeInfo":{"template":"function"},"defaultValue":""},{"name":"oListener","optional":true,"description":"<p>Context object on which the given function had to be called</p>","typeInfo":{"template":"object"},"defaultValue":""}],"description":"<p>Detaches event handler <code>fnFunction</code> from the <a target=\"_self\" href=\"api/sap.ui.export.ExportBase#events/beforeExport\">sap.ui.export.ExportBase#event:beforeExport</a> event of this <code>sap.ui.export.ExportBase</code>.</br> The passed function and listener object must match the ones used for event registration.</p>","href":"api/sap.ui.export.ExportBase#methods/detachBeforeExport","code":"<pre>detachBeforeExport(fnHandler, oListener?) : this</pre>"},{"name":"sap.ui.export.ExportBase.extend","visibility":"public","static":true,"returnValue":{"type":"function","description":"<p>Created class / constructor function</p>","typeInfo":{"template":"function"}},"parameters":[{"name":"sClassName","optional":false,"description":"<p>Name of the class being created</p>","typeInfo":{"template":"string"},"defaultValue":""},{"name":"oClassInfo","optional":true,"description":"<p>Object literal with information about the class</p>","typeInfo":{"template":"object"},"defaultValue":""},{"name":"FNMetaImpl","optional":true,"description":"<p>Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class</p>","typeInfo":{"template":"function"},"defaultValue":""}],"description":"<p>Creates a new subclass of class sap.ui.export.ExportBase with name <code>sClassName</code> and enriches it with the information contained in <code>oClassInfo</code>.</p><p><code>oClassInfo</code> might contain the same kind of information as described in <a target=\"_self\" href=\"api/sap.ui.base.EventProvider#methods/sap.ui.base.EventProvider.extend\">sap.ui.base.EventProvider.extend</a>.</p>","href":"api/sap.ui.export.ExportBase#methods/sap.ui.export.ExportBase.extend","code":"<pre>sap.ui.export.ExportBase.extend(sClassName, oClassInfo?, FNMetaImpl?) : function</pre>"},{"name":"sap.ui.export.ExportBase.getMetadata","visibility":"public","static":true,"returnValue":{"type":"sap.ui.base.Metadata","description":"<p>Metadata object describing this class</p>","typeInfo":{"UI5Types":["sap.ui.base.Metadata"]}},"description":"<p>Returns a metadata object for class sap.ui.export.ExportBase.</p>","href":"api/sap.ui.export.ExportBase#methods/sap.ui.export.ExportBase.getMetadata","code":"<pre>sap.ui.export.ExportBase.getMetadata() : sap.ui.base.Metadata</pre>"},{"name":"getMimeType","visibility":"public","since":"1.112","description":"<p>Returns the specific MIME type</p>","href":"api/sap.ui.export.ExportBase#methods/getMimeType","code":"<pre>getMimeType() : void</pre>"},{"name":"processDataSource","visibility":"public","returnValue":{"type":"object|null","description":"<p>- Valid dataSource object or null in case the dataSource configuration is not supported</p>","typeInfo":{"template":"object | null"}},"parameters":[{"name":"oDataSource","optional":false,"description":"<p>Possible types are a data source configuration, a <code>sap.ui.model.ListBinding</code> or <code>sap.ui.model.TreeBinding</code></p>","typeInfo":{"template":"object | ${0} | ${1}","UI5Types":["sap.ui.model.ListBinding","sap.ui.model.TreeBinding"]},"defaultValue":""}],"description":"<p>Sets the data source configuration that will be used for exporting the data. If the passed parameter is null, the call will be ignored.</p>","href":"api/sap.ui.export.ExportBase#methods/processDataSource","code":"<pre>processDataSource(oDataSource) : object|null</pre>"}],"displayName":"sap.ui.export.ExportBase","component":"CA-UI5-TBL","hasSample":false,"title":"class sap.ui.export.ExportBase","subTitle":""},{"kind":"class","name":"sap.ui.export.ExportHandler","basename":"ExportHandler","resource":"sap/ui/export/ExportHandler.js","module":"sap/ui/export/ExportHandler","export":"","static":true,"visibility":"public","since":"1.102","extends":"sap.ui.base.EventProvider","description":"<p>The <code>sap.ui.export.ExportHandler</code> class allows you to export table data from an SAPUI5 application.</p>","ui5-metadata":{"stereotype":"object"},"constructor":{"visibility":"public","parameters":[{"name":"mCapabilities","optional":true,"defaultValue":"{XLSX: {}}","description":"<p>Capabilities that define supported file types and features</p>","phoneName":"mCapabilities","depth":0,"types":[],"typeInfo":{"template":"object"}},{"name":"XLSX","optional":true,"description":"<p>XLSX file type features; object that enables XLSX export without any feature settings</p>","phoneName":"mCapabilities.XLSX","depth":1,"types":[],"typeInfo":{"template":"object"},"defaultValue":""},{"name":"PDF","optional":true,"description":"<p>PDF file type features; see com.sap.vocabularies.PDF.v1.Features annotation for the concrete specification</p>","phoneName":"mCapabilities.PDF","depth":1,"types":[],"typeInfo":{"template":"object"},"defaultValue":""}],"description":"<p>Any export-related functionality is encapsulated in the <code>ExportHandler</code> that also stores user settings throughout the session.</p>","references":[],"codeExample":"<pre>new sap.ui.export.ExportHandler(mCapabilities?)</pre>"},"events":[{"name":"beforeExport","visibility":"public","since":"1.102","parameters":[{"name":"oEvent","typeInfo":{"UI5Types":["sap.ui.base.Event"]}},{"name":"getSource","optional":false,"depth":1,"phoneName":"oEvent.getSource","typeInfo":{"UI5Types":["sap.ui.base.EventProvider"]}},{"name":"getParameters","optional":false,"depth":1,"phoneName":"oEvent.getParameters","typeInfo":{"template":"object"}},{"name":"exportSettings","optional":false,"description":"<p>Contains export-related configuration</p>","depth":2,"phoneName":"oEvent.getParameters.exportSettings","typeInfo":{"template":"object"}},{"name":"userExportSettings","optional":false,"description":"<p>User-specific settings from the Export As dialog</p>","depth":2,"phoneName":"oEvent.getParameters.userExportSettings","typeInfo":{"template":"object"}},{"name":"filterSettings","optional":false,"description":"<p>Array of filter settings for the exported data</p>","depth":2,"phoneName":"oEvent.getParameters.filterSettings","typeInfo":{"template":"Array<${0}>","UI5Types":["sap.ui.export.util.Filter"]}}],"description":"<p>The <code>beforeExport</code> event is fired just before the export process is started. Listeners may prevent the default action of this event by calling the <code>preventDefault</code> method on the event object.<br><br><i>Since: 1.102.</i></p>"}],"methods":[{"name":"attachBeforeExport","visibility":"public","since":"1.102","returnValue":{"type":"this","description":"<p>Reference to <code>this</code> in order to allow method chaining</p>","typeInfo":{"template":"this"}},"parameters":[{"name":"oData","optional":true,"description":"<p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>","typeInfo":{"template":"object"},"defaultValue":""},{"name":"fnHandler","optional":false,"description":"<p>The function to be called when the event occurs</p>","typeInfo":{"template":"function"},"defaultValue":""},{"name":"oListener","optional":true,"description":"<p>Context object to call the event handler with; defaults to this <code>sap.ui.export.ExportHandler</code> instance itself</p>","typeInfo":{"template":"object"},"defaultValue":""}],"description":"<p>Attaches event handler <code>fnFunction</code> to the <a target=\"_self\" href=\"api/sap.ui.export.ExportHandler#events/beforeExport\">sap.ui.export.ExportHandler#event:beforeExport</a> event of this <code>sap.ui.export.ExportHandler</code>.</br> When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.export.ExportHandler</code> itself.</br> This event is fired just before the export process is started.</p>","href":"api/sap.ui.export.ExportHandler#methods/attachBeforeExport","code":"<pre>attachBeforeExport(oData?, fnHandler, oListener?) : this</pre>"},{"name":"destroy","visibility":"public","description":"<p>Cleans up the internal structures and removes all event handlers.</p><p>The object must not be used anymore after destroy was called.<br><br>References: <ul><li><a target=\"_self\" href=\"api/sap.ui.base.Object#methods/destroy\">sap.ui.base.Object#destroy</a></li></ul></p>","references":["<li>{@link sap.ui.base.Object#destroy}</li>"],"href":"api/sap.ui.export.ExportHandler#methods/destroy","code":"<pre>destroy() : void</pre>"},{"name":"detachBeforeExport","visibility":"public","since":"1.102","returnValue":{"type":"this","description":"<p>Reference to <code>this</code> in order to allow method chaining</p>","typeInfo":{"template":"this"}},"parameters":[{"name":"fnHandler","optional":false,"description":"<p>The function to be called when the event occurs</p>","typeInfo":{"template":"function"},"defaultValue":""},{"name":"oListener","optional":true,"description":"<p>Context object on which the given function had to be called</p>","typeInfo":{"template":"object"},"defaultValue":""}],"description":"<p>Detaches event handler <code>fnFunction</code> from the <a target=\"_self\" href=\"api/sap.ui.export.ExportHandler#events/beforeExport\">sap.ui.export.ExportHandler#event:beforeExport</a> event of this <code>sap.ui.export.ExportHandler</code>.</br> The passed function and listener object must match the ones used for event registration.</p>","href":"api/sap.ui.export.ExportHandler#methods/detachBeforeExport","code":"<pre>detachBeforeExport(fnHandler, oListener?) : this</pre>"},{"name":"export","visibility":"public","since":"1.102","returnValue":{"type":"Promise","description":"<p>A <code>Promise</code> that gets resolved after the export process has been finished</p>","typeInfo":{"template":"Promise"}},"parameters":[{"name":"mExportSettings","optional":false,"description":"<p>Export settings that are used for the export</p>","typeInfo":{"template":"object"},"defaultValue":""}],"description":"<p>Exports the data as defined via parameter. The function returns a <code>Promise</code> that will be resolved after the export process has been finished. In case of an error, its message will be shown in a <code>Dialog</code>, and the <code>Promise</code> will be rejected.</p>","href":"api/sap.ui.export.ExportHandler#methods/export","code":"<pre>export(mExportSettings) : Promise</pre>"},{"name":"exportAs","visibility":"public","since":"1.102","returnValue":{"type":"Promise","description":"<p>A <code>Promise</code> that resolves once the data has been exported</p>","typeInfo":{"template":"Promise"}},"parameters":[{"name":"oSettings","optional":false,"description":"<p>General export settings containing <code>workbook</code> and <code>dataSource</code> information</p>","typeInfo":{"template":"object"},"defaultValue":""},{"name":"fnResolveColumnLabel","optional":true,"description":"<p>Resolves the label for a particular column that is not directly contained in the export settings</p>","typeInfo":{"template":"function"},"defaultValue":""}],"description":"<p>Exports the data as defined by the user. This function will show an export settings dialog where the user can define certain settings that influence the output of the export functionality.</p>","href":"api/sap.ui.export.ExportHandler#methods/exportAs","code":"<pre>exportAs(oSettings, fnResolveColumnLabel?) : Promise</pre>"},{"name":"sap.ui.export.ExportHandler.extend","visibility":"public","static":true,"returnValue":{"type":"function","description":"<p>Created class / constructor function</p>","typeInfo":{"template":"function"}},"parameters":[{"name":"sClassName","optional":false,"description":"<p>Name of the class being created</p>","typeInfo":{"template":"string"},"defaultValue":""},{"name":"oClassInfo","optional":true,"description":"<p>Object literal with information about the class</p>","typeInfo":{"template":"object"},"defaultValue":""},{"name":"FNMetaImpl","optional":true,"description":"<p>Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class</p>","typeInfo":{"template":"function"},"defaultValue":""}],"description":"<p>Creates a new subclass of class sap.ui.export.ExportHandler with name <code>sClassName</code> and enriches it with the information contained in <code>oClassInfo</code>.</p><p><code>oClassInfo</code> might contain the same kind of information as described in <a target=\"_self\" href=\"api/sap.ui.base.EventProvider#methods/sap.ui.base.EventProvider.extend\">sap.ui.base.EventProvider.extend</a>.</p>","href":"api/sap.ui.export.ExportHandler#methods/sap.ui.export.ExportHandler.extend","code":"<pre>sap.ui.export.ExportHandler.extend(sClassName, oClassInfo?, FNMetaImpl?) : function</pre>"},{"name":"sap.ui.export.ExportHandler.getMetadata","visibility":"public","static":true,"returnValue":{"type":"sap.ui.base.Metadata","description":"<p>Metadata object describing this class</p>","typeInfo":{"UI5Types":["sap.ui.base.Metadata"]}},"description":"<p>Returns a metadata object for class sap.ui.export.ExportHandler.</p>","href":"api/sap.ui.export.ExportHandler#methods/sap.ui.export.ExportHandler.getMetadata","code":"<pre>sap.ui.export.ExportHandler.getMetadata() : sap.ui.base.Metadata</pre>"}],"displayName":"sap.ui.export.ExportHandler","component":"CA-UI5-TBL","hasSample":false,"title":"class sap.ui.export.ExportHandler","subTitle":"","hasFAQ":true},{"kind":"class","name":"sap.ui.export.ExportUtils","basename":"ExportUtils","resource":"sap/ui/export/ExportUtils.js","module":"sap/ui/export/ExportUtils","export":"","static":true,"visibility":"restricted","allowedFor":["sap.ui.comp.smarttable.SmartTable"],"since":"1.59","description":"<p>Utilities related to export to enable reuse in integration scenarios (e.g. tables).</p>","constructor":{"visibility":"restricted","allowedFor":["sap.ui.comp.smarttable.SmartTable"],"references":[],"codeExample":"<pre>new sap.ui.export.ExportUtils()</pre>"},"methods":[{"name":"sap.ui.export.ExportUtils.fetchDataSource","visibility":"public","static":true,"since":"1.108","returnValue":{"type":"Promise","description":"<p>A <code>Promise</code> that gets resolved with a data source obtained from the <code>FileShareSupport</code> module or undefined if there is none</p>","typeInfo":{"template":"Promise"}},"description":"<p>Loads the <code>FileShareSupport</code> module and requests available data sources. If no <code>FileShareSupport</code> module is registered or the module does not provide a data source, the <code>Promise</code> resolves without any result.</p>","href":"api/sap.ui.export.ExportUtils#methods/sap.ui.export.ExportUtils.fetchDataSource","code":"<pre>sap.ui.export.ExportUtils.fetchDataSource() : Promise</pre>"},{"name":"sap.ui.export.ExportUtils.getExportInstance","visibility":"public","static":true,"since":"1.112","returnValue":{"type":"Promise<sap.ui.export.ExportBase>","description":"<p>A Promise that gets resolved with the requested instance</p>","typeInfo":{"template":"Promise<${0}>","UI5Types":["sap.ui.export.ExportBase"]}},"parameters":[{"name":"mSettings","optional":false,"description":"<p>Export configuration with optional FileType</p>","typeInfo":{"template":"object"},"defaultValue":""},{"name":"mCapabilities","optional":true,"description":"<p>Export capabilities for all supported types</p>","typeInfo":{"template":"object"},"defaultValue":""},{"name":"mCloudFileInfo","optional":true,"description":"<p>Information about the file that is stored in the remote FileShare</p>","typeInfo":{"template":"object"},"defaultValue":""}],"description":"<p>Returns an instance of the specific export class that is evaluated by FileType. The default class is sap/ui/export/Spreadsheet when no specific FileType is defined in the export settings.</p>","href":"api/sap.ui.export.ExportUtils#methods/sap.ui.export.ExportUtils.getExportInstance","code":"<pre>sap.ui.export.ExportUtils.getExportInstance(mSettings, mCapabilities?, mCloudFileInfo?) : Promise<sap.ui.export.ExportBase></pre>"},{"name":"sap.ui.export.ExportUtils.interceptUrl","visibility":"public","static":true,"since":"1.112","returnValue":{"type":"string","description":"<p>The intercepted URL</p>","typeInfo":{"template":"string"}},"parameters":[{"name":"sUrl","optional":false,"description":"<p>The URL to intercept</p>","typeInfo":{"template":"string"},"defaultValue":""}],"description":"<p>Uses the Launchpad Cloud Service to intercept a given URL.</p>","href":"api/sap.ui.export.ExportUtils#methods/sap.ui.export.ExportUtils.interceptUrl","code":"<pre>sap.ui.export.ExportUtils.interceptUrl(sUrl) : string</pre>"},{"name":"sap.ui.export.ExportUtils.parseFilterConfiguration","visibility":"restricted","allowedFor":["sap.ui.comp.smarttable.SmartTable"],"static":true,"returnValue":{"type":"Promise","description":"<p>Promise, which resolves with an object containing a name property and items array with key value pairs which can be attached to the metainfo in the sap.ui.export.Spreadsheet configuration</p>","typeInfo":{"template":"Promise"}},"description":"<p>This function has been deprecated and might be removed in future releases.</p>","deprecated":{},"href":"api/sap.ui.export.ExportUtils#methods/sap.ui.export.ExportUtils.parseFilterConfiguration","deprecatedText":"Deprecated","code":"<pre>sap.ui.export.ExportUtils.parseFilterConfiguration() : Promise</pre>"},{"name":"sap.ui.export.ExportUtils.saveAsFile","visibility":"public","static":true,"since":"1.112","parameters":[{"name":"oBlob","optional":false,"description":"<p>Binary large object of the file that should be saved to the filesystem</p>","typeInfo":{"template":"Blob"},"defaultValue":""},{"name":"sFilename","optional":true,"description":"<p>Filename of the file including the file extension</p>","typeInfo":{"template":"string"},"defaultValue":""}],"description":"<p>This function saves the provided Blob to the local file system. The parameter name is optional and depending on the browser it is not ensured that the filename can be applied. Google Chrome, Mozilla Firefox, Internet Explorer and Microsoft Edge will apply the filename correctly.</p>","href":"api/sap.ui.export.ExportUtils#methods/sap.ui.export.ExportUtils.saveAsFile","code":"<pre>sap.ui.export.ExportUtils.saveAsFile(oBlob, sFilename?) : void</pre>"}],"displayName":"sap.ui.export.ExportUtils","component":"CA-UI5-TBL","hasSample":false,"title":"class sap.ui.export.ExportUtils","subTitle":""},{"kind":"enum","name":"sap.ui.export.FileType","basename":"FileType","resource":"sap/ui/export/library.js","module":"sap/ui/export/library","export":"FileType","static":true,"visibility":"public","since":"1.78","description":"<p><p>File types for document export.</p><p>This enum is part of the 'sap/ui/export/library' module export and must be accessed by the property 'FileType'.</p></p>","ui5-metadata":{"stereotype":"enum"},"properties":[{"name":"sap.ui.export.FileType.PDF","visibility":"public","since":"1.117","description":"<p>Portable Document Format (PDF) file type.</p>"},{"name":"sap.ui.export.FileType.XLSX","visibility":"public","description":"<p>Office Open XML - SpreadsheetML file type.</p>"}],"displayName":"sap.ui.export.FileType","component":"CA-UI5-TBL","hasSample":false,"title":"enum sap.ui.export.FileType","subTitle":""},{"kind":"class","name":"sap.ui.export.Spreadsheet","basename":"Spreadsheet","resource":"sap/ui/export/Spreadsheet.js","module":"sap/ui/export/Spreadsheet","export":"","static":true,"visibility":"public","since":"1.50","extends":"sap.ui.export.ExportBase","description":"<p>The <code>sap.ui.export.Spreadsheet</code> class allows you to export table data from a UI5 application to a spreadsheet file.</p>","ui5-metadata":{"stereotype":"object"},"constructor":{"visibility":"public","parameters":[{"name":"mSettings","optional":false,"description":"<p>Export settings</p>","phoneName":"mSettings","depth":0,"types":[],"typeInfo":{"template":"object"},"defaultValue":""},{"name":"workbook","optional":false,"description":"<p>Spreadsheet properties</p>","phoneName":"mSettings.workbook","depth":1,"types":[],"typeInfo":{"template":"object"},"defaultValue":""},{"name":"columns","optional":false,"description":"<p>Column configuration</p>","phoneName":"mSettings.workbook.columns","depth":2,"types":[],"typeInfo":{"template":"Array"},"defaultValue":""},{"name":"context","optional":true,"description":"<p>Export context that will be applied to the exported file</p>","phoneName":"mSettings.workbook.context","depth":2,"types":[],"typeInfo":{"template":"object"},"defaultValue":""},{"name":"application","optional":true,"description":"<p>Application that created this XLSX</p>","phoneName":"mSettings.workbook.context.application","depth":3,"types":[],"typeInfo":{"template":"string"},"defaultValue":""},{"name":"version","optional":true,"description":"<p>Application version that was used to create this XLSX</p>","phoneName":"mSettings.workbook.context.version","depth":3,"types":[],"typeInfo":{"template":"string"},"defaultValue":""},{"name":"title","optional":true,"description":"<p>Title of the XLSX document (NOT the file name)</p>","phoneName":"mSettings.workbook.context.title","depth":3,"types":[],"typeInfo":{"template":"string"},"defaultValue":""},{"name":"modifiedBy","optional":true,"description":"<p>User context for the exported document</p>","phoneName":"mSettings.workbook.context.modifiedBy","depth":3,"types":[],"typeInfo":{"template":"string"},"defaultValue":""},{"name":"sheetName","optional":true,"description":"<p>The name of the data sheet that will be shown in Excel</p>","phoneName":"mSettings.workbook.context.sheetName","depth":3,"types":[],"typeInfo":{"template":"string"},"defaultValue":""},{"name":"metaSheetName","optional":true,"description":"<p>The name of the metadata sheet that will be shown in Excel</p>","phoneName":"mSettings.workbook.context.metaSheetName","depth":3,"types":[],"typeInfo":{"template":"string"},"defaultValue":""},{"name":"metainfo","optional":true,"description":"<p>Optional Metadata that will be displayed in the additional Metadata Sheet</p>","phoneName":"mSettings.workbook.context.metainfo","depth":3,"types":[],"typeInfo":{"template":"Array"},"defaultValue":""},{"name":"hierarchyLevel","optional":true,"description":"<p>Optional name of the property that contains hierarchy level information</p>","phoneName":"mSettings.workbook.hierarchyLevel","depth":2,"types":[],"typeInfo":{"template":"string"},"defaultValue":""},{"name":"dataSource","optional":false,"description":"<p>Source of spreadsheet data. A JSON array, data source properties map, <code>sap.ui.model.ListBinding</code>, <code>sap.ui.model.TreeBinding</code> or URL to an OData source can be provided. For example, <code>\"someUrl\"</code> is an equivalent to <code>{dataUrl:\"someUrl\", type:\"OData\"}</code>. An instance of <code>sap.ui.model.ListBinding</code> or <code>sap.ui.model.TreeBinding</code> either has to implement a <code>#getDownloadUrl</code> function or needs to be a ClientListBinding. <b>Note:</b> <code>sap.ui.model.ClientTreeBinding</code> is not supported.</p>","phoneName":"mSettings.dataSource","depth":1,"types":[],"typeInfo":{"template":"string | Object | Array | ${0} | ${1}","UI5Types":["sap.ui.model.ListBinding","sap.ui.model.TreeBinding"]},"defaultValue":""},{"name":"sizeLimit","optional":false,"description":"<p>Maximal allowed number of records that can be obtained from the service in a single request</p>","phoneName":"mSettings.dataSource.sizeLimit","depth":2,"types":[],"typeInfo":{"template":"int"},"defaultValue":""},{"name":"count","optional":true,"description":"<p>The maximal number of records to export</p>","phoneName":"mSettings.count","depth":1,"types":[],"typeInfo":{"template":"int"},"defaultValue":""},{"name":"worker","optional":true,"defaultValue":true,"description":"<p>Run export process in a worker thread. Set to <code>false</code> to disable worker and run export in a main thread. This is needed, for example, if a mock server is used to provide spreadsheet data.<br> <b>Note:</b> In case of a strict content security policy, it is not always possible to create an export worker. In this case, export runs in a main thread disregarding the <code>worker</code> value.</p>","phoneName":"mSettings.worker","depth":1,"types":[],"typeInfo":{"template":"boolean"}},{"name":"fileName","optional":true,"defaultValue":"\"export.xlsx\"","description":"<p>Optional file name for the exported file</p>","phoneName":"mSettings.fileName","depth":1,"types":[],"typeInfo":{"template":"string"}},{"name":"showProgress","optional":true,"defaultValue":true,"description":"<p>Set to <code>false</code> to suppress the progress dialog</p>","phoneName":"mSettings.showProgress","depth":1,"types":[],"typeInfo":{"template":"boolean"}}],"description":"<p>Creates a new spreadsheet export object. Use this object to build and download a spreadsheet file in Office Open XML Spreadsheet format from tabular data. This functionality is normally used together with UI5 tables.</p><h3>Overview</h3><p> The class builds a spreadsheet in an Office Open XML Spreadsheet format using tabular data from a specified data source. Data is retrieved and the document is built asynchronously in a worker thread of the browser. The status of the process is visually presented to the user in a progress dialog that can be suppressed. The user can cancel the process with the Cancel button of the dialog.</p><p>This class provides a low level API for spreadsheet export. The <a target=\"_self\" href=\"api/sap.ui.comp.smarttable.SmartTable\">sap.ui.comp.smarttable.SmartTable</a> control implements it internally and provides the export functionality out of the box. For special cases, please refer to details below.</p><p>Optional features: <ul> <li>Suppress the progress dialog.</li> <li>Suppress worker and run the document generation process in a main thread.</li> <li>Configure the exported file name.</li> </ul></p><h3>Export settings object</h3><p> Export settings should be provided in the constructor as an <code>mSettings</code> property map with the following fields: <ul> <li><code>workbook</code> - Spreadsheet properties object <ul> <li><code>workbook.columns</code> - Array of column configurations. Each column configuration is an object with the following fields: <ul> <li><code>label</code> (string) - Column header text</li> <li><code>property</code> (string) - Field name or Array of field names in the data source feed</li> <li><code>type</code> (string) - Optional data type of the field. See <a target=\"_self\" href=\"api/sap.ui.export.EdmType\">sap.ui.export.EdmType</a> for the list of supported types. If this property is omitted, the property is processed as a string field.</li> <li><code>width</code> (number) - Optional width of the column in characters. There is no 1:1 correspondence between character widths in the exported spreadsheet and CSS units.The width of one character is approximately 0.5em in CSS units, depending on the fonts that are used in the table and in the resulting spreadsheet. The default value is 10 characters.</li> <li><code>textAlign</code> (string) - Horizontal alignment of cell contents. The following values of the CSS <code>text-align</code> property are accepted: <code>[left, right, center, begin, end]</code>. If not specified, the columns are horizontally aligned based on the property type.</li> <li><code>scale</code> (number) - Number of digits after decimal point for numeric values</li> <li><code>autoScale</code> (boolean) - Allows automatic scale assignment based on unit of measure</li> <li><code>delimiter</code> (boolean) - Set to <code>true</code> to display thousands separators in numeric values. The default value is <code>false</code>.</li> <li><code>unit</code> (string) - Text to display as the unit of measurement or currency next to the numeric value. It is treated as a string and has no influence on the value itself. For example, a value of 150 with the unit \"%\" is still 150 and not 1.5, as a user may expect.</li> <li><code>unitProperty</code> (string) - Name of the data source field that contains the unit/currency text</li> <li><code>displayUnit</code> (boolean) - The property applies to currency values only and defines if the currency is shown in the column. The default value is <code>true</code>.</li> <li><code>trueValue</code> (string) - Textual representation of a boolean type that has the value <code>true</code></li> <li><code>falseValue</code> (string) - Textual representation of a boolean type that has the value <code>false</code></li> <li><code>template</code> (string) - Formatting template that supports indexed placeholders within curly brackets</li> <li><code>format</code> (string) - Output format for columns of type Date/DateTime/Time</li> <li><code>inputFormat</code> (string) - Formatting template for string formatted dates</li> <li><code>utc</code> (boolean) - Defines whether the <code>DateTime</code> is displayed as UTC or local time</li> <li><code>timezone</code> (string) - Defines a fixed IANA time zone</li> <li><code>timezoneProperty</code> (string) - References an OData property that contains the specific IANA time zone</li> <li><code>displayTimezone</code> (boolean) - Defines whether the IANA time zone is displayed within a cell</li> <li><code>valueMap</code> (string) - Mapping object or Map containing the values that should be mapped to a particular key</li> <li><code>wrap</code> (boolean) - Indicates if wrapping is enabled for this particular column</li> </ul> </li> <li><code>workbook.context</code> - Context object that will be applied to the generated file. It may contain the following fields:</li> <ul> <li><code>application</code> (string) - The application that creates the XLSX document (default: \"SAP UI5\")</li> <li><code>version</code> (string) - Application version that creates the XLSX document (default: \"${version}\")</li> <li><code>title</code> (string) - Title of the XLSX document (NOT the filename)</li> <li><code>modifiedBy</code> (string) - User context for the XLSX document</li> <li><code>sheetName</code> (string) - The label of the data sheet</li> <li><code>metaSheetName</code> (string) - The label of the metadata sheet. The sheet will not be shown unless metadata entries are provided</li> <li><code>metainfo</code> (Array) - An Array of metadata groups. Each group has a name property and an items Array which contains key/value pairs</li> </ul> <li><code>workbook.hierarchyLevel</code> - Name of the property that contains the hierarchy level information of each line item</li> </ul> <li><code>dataSource</code> - Source of spreadsheet data. It can be a JSON array with row data, an URL or an OData properties object with the following fields: <ul> <li><code>type</code> (string) - Type of the data source. Currently, only OData is supported and the value have to be set to <code>\"odata\"</code>.</li> <li><code>dataUrl</code> (string) - URL to table data on the server, including all select, filter, and search query parameters</li> <li><code>serviceUrl</code> (string) - URL to the OData service. The parameter is required for OData batch requests.</li> <li><code>count</code> (number) - Count of available records on the server</li> <li><code>useBatch</code> (boolean) - Set to <code>true</code> if OData batch requests are used to fetch the spreadsheet data. In this case, <code>serviceUrl</code> and <code>headers</code> have to be specified, too.</li> <li><code>headers</code> (object) - Map of HTTP request header properties. They should correspond to the HTTP request headers that are used to obtain table data for display in the browser.</li> <li><code>sizeLimit</code> (number) - Maximum allowed number of records that can be obtained from the service in a single request</li> <li><code>downloadLimit</code> (number) - Maximum allowed number of rows that can be exported. If not specified, all rows are exported.</li> </ul> </li> <li><code>count</code> (number) - The maximal number of records to export. If not specified, all data from the data source is fetched.</li> <li><code>worker</code> (boolean) - Run export process in a worker thread. Set to <code>false</code> to disable worker and run export in a main thread. This is needed, for example, if a mock server is used to provide spreadsheet data.<br> <b>Note:</b> In case of a strict content security policy, it is not always possible to create an export worker. In this case, export runs in a main thread disregarding the <code>worker</code> value.</li> <li><code>fileName</code> (string) - Optional file name for the exported file. If not specified, the spreadsheet is exported as <code>export.xlsx</code>.</li> <li><code>showProgress</code> (boolean) - Set to <code>false</code> to suppress the progress dialog</li> </ul></p><h3>Usage</h3><p> To start export, create a new <code>sap.ui.export.Spreadsheet</code> object and call the <code>build</code> method. Column configuration, data source, and export settings must be provided in the constructor. The <code>build</code> method opens a progress dialog and starts an asynchronous export process. The export process fetches data rows from the data source, builds a spreadsheet in-browser in a worker thread, and finally downloads the document to the client.</p><p>Example: <pre>\n  const oSpreadsheet = new sap.ui.export.Spreadsheet(mSettings);\n  oSpreadsheet.build();\n</pre></p><p>Optionally, you can attach <code>onprogress</code> event listeners to be notified about the export progress and follow the completion status of the returned <code>Promise</code>.</p><p>Example: <pre>\n  const oSpreadsheet = new sap.ui.export.Spreadsheet(mSettings);\n  oSpreadsheet.onprogress = function(iValue) {\n  \t{@link sap.base.Log#debug Log.debug}(\"Export: %\" + iValue + \" completed\");\n  };\n  oSpreadsheet.build()\n    .then( function() { {@link sap.base.Log#debug Log.debug}(\"Export is finished\"); })\n    .catch( function(sMessage) { {@link sap.base.Log#error Log.error}(\"Export error: \" + sMessage); });\n</pre></p><p>Example of column configuration: <pre>\n  const aColumns = [];\n  aColumns.push({\n  \tlabel: \"Name\",\n  \tproperty: \"name\"\n  });\n  aColumns.push({\n    label: \"Salary\",\n    property: \"salary\",\n    type: \"number\",\n    scale: 2\n  });\n\n  const mSettings = {\n    workbook: {\n      columns: aColumns,\n      context: {\n        application: 'Debug Test Application',\n        version: '${version}',\n        title: 'Some random title',\n        modifiedBy: 'John Doe',\n        metaSheetName: 'Custom metadata',\n        metainfo: [\n          {\n            name: 'Grouped Properties',\n            items: [\n              { key: 'administrator', value: 'Foo Bar' },\n              { key: 'user', value: 'John Doe' },\n              { key: 'server', value: 'server.domain.local' }\n            ]\n          },\n          {\n            name: 'Another Group',\n            items: [\n              { key: 'property', value: 'value' },\n              { key: 'some', value: 'text' },\n              { key: 'fu', value: 'bar' }\n            ]\n          }\n        ]\n      },\n      hierarchyLevel: 'level'\n    },\n    dataSource: mDataSource,\n    fileName: \"salary.xlsx\"\n  };\n  const oSpreadsheet = new sap.ui.export.Spreadsheet(mSettings);\n  oSpreadsheet.build();\n</pre></p><h3>Restrictions</h3><p> For a complete list of restrictions, see: <a target=\"_self\" href=\"topic/2c641481649f44de9c1c22c9c3c49d13\">Spreadsheet Export Restrictions</a></p><p>You can export only the primitive cell data types that are listed in <a target=\"_self\" href=\"api/sap.ui.export.EdmType\">sap.ui.export.EdmType</a>. Icons, images, check boxes, and complex controls in UI5 table cells are not supported.</p><p>Custom formatter functions in data binding are not supported.</p><p>The size of an exported table is limited by available browser memory. Export of large data sets can lead to memory overflow errors. Therefore, do not use <code>sap.ui.export.Spreadsheet</code> with data tables containing more than 2,000,000 table cells on desktop computers and more than 100,000 cells on mobile devices. Consider a specialized export solution in such cases. For example, MS Excel® can import spreadsheets from an OData services directly, without any UI.</p><p>The export process runs in a worker thread whenever possible. However, code injection to native XMLHttpRequest events is not available in the worker environment. Therefore, the <code>worker</code> parameter in export settings should be set to <code>false</code> if the application uses a mock server to fetch table data.</p><p>For exporting hierarchy level information, the maximum hierarchy depth is 8. This restriction results from the Office Open XML standard and the programs that can open such files. The sap.ui.export.Spreadsheet allows you to export more hierarchy levels although they might not be displayed correctly when opening the generated file if the hierarchy depth exceeds the value of 8.</p><p>The column configuration must contain at least one column to execute the export process. If there is no column configured, the export will be canceled.</p><p>If the export is used within a table, any row that is showing aggregated data (i.E. sum row) will not be exported.</p><p>The properties sheetName and metaSheetName on the workbook.context object are limited to 31 characters each. If their value exceeds this maximum length, the value will be truncated.</p>","references":[],"codeExample":"<pre>new sap.ui.export.Spreadsheet(mSettings)</pre>"},"events":[{"name":"beforeSave","visibility":"public","since":"1.61","parameters":[{"name":"oEvent","typeInfo":{"UI5Types":["sap.ui.base.Event"]}},{"name":"getSource","optional":false,"depth":1,"phoneName":"oEvent.getSource","typeInfo":{"UI5Types":["sap.ui.base.EventProvider"]}},{"name":"getParameters","optional":false,"depth":1,"phoneName":"oEvent.getParameters","typeInfo":{"template":"object"}}],"description":"<p>The <code>beforeSave</code> event is fired just before the generated file is saved to the file system. This event allows you to prevent the default action that closes the <code>ExportDialog</code> and saves the file to your local device. If the default is prevented, the event handler is responsible for closing and destroying the <code>Dialog</code>.<br><br><i>Since: 1.61.</i></p>"}],"methods":[{"name":"attachBeforeSave","visibility":"public","since":"1.61","returnValue":{"type":"this","description":"<p>Reference to <code>this</code> in order to allow method chaining</p>","typeInfo":{"template":"this"}},"parameters":[{"name":"oData","optional":true,"description":"<p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>","typeInfo":{"template":"object"},"defaultValue":""},{"name":"fnHandler","optional":false,"description":"<p>The function to be called when the event occurs</p>","typeInfo":{"template":"function"},"defaultValue":""},{"name":"oListener","optional":true,"description":"<p>Context object to call the event handler with. Defaults to this <code>sap.ui.export.Spreadsheet</code> itself</p>","typeInfo":{"template":"object"},"defaultValue":""}],"description":"<p>Attaches event handler <code>fnFunction</code> to the <a target=\"_self\" href=\"api/sap.ui.export.Spreadsheet#events/beforeSave\">sap.ui.export.Spreadsheet#event:beforeSave</a> event of this <code>sap.ui.export.Spreadsheet</code>.</br> When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.export.Spreadsheet</code> itself.</br> This event is fired just before the generated file is saved to the file system.</p>","href":"api/sap.ui.export.Spreadsheet#methods/attachBeforeSave","code":"<pre>attachBeforeSave(oData?, fnHandler, oListener?) : this</pre>"},{"name":"cancel","visibility":"public","since":"1.52","returnValue":{"type":"this","description":"<p>- Reference to <code>this</code> in order to allow method chaining</p>","typeInfo":{"template":"this"}},"description":"<p>Cancels a running export process. This method does nothing if no export is running.</p>","href":"api/sap.ui.export.Spreadsheet#methods/cancel","code":"<pre>cancel() : this</pre>"},{"name":"detachBeforeSave","visibility":"public","since":"1.61","returnValue":{"type":"this","description":"<p>Reference to <code>this</code> in order to allow method chaining</p>","typeInfo":{"template":"this"}},"parameters":[{"name":"fnHandler","optional":false,"description":"<p>The function to be called, when the event occurs</p>","typeInfo":{"template":"function"},"defaultValue":""},{"name":"oListener","optional":true,"description":"<p>Context object on which the given function had to be called</p>","typeInfo":{"template":"object"},"defaultValue":""}],"description":"<p>Detaches event handler <code>fnFunction</code> from the <a target=\"_self\" href=\"api/sap.ui.export.Spreadsheet\">beforeSave</a> event of this <code>sap.ui.export.Spreadsheet</code>.</br> The passed function and listener object must match the ones used for event registration.</p>","href":"api/sap.ui.export.Spreadsheet#methods/detachBeforeSave","code":"<pre>detachBeforeSave(fnHandler, oListener?) : this</pre>"},{"name":"getMimeType","visibility":"public","since":"1.112","returnValue":{"type":"string","description":"<p>MIME type for Office Open XML Spreadsheet</p>","typeInfo":{"template":"string"}},"description":"<p>Returns the specific MIME type</p>","href":"api/sap.ui.export.Spreadsheet#methods/getMimeType","code":"<pre>getMimeType() : string</pre>"},{"name":"processDataSource","visibility":"public","since":"1.73","returnValue":{"type":"object|null","description":"<p>- Valid dataSource object or null in case the dataSource configuration is not supported</p>","typeInfo":{"template":"object | null"}},"parameters":[{"name":"oDataSource","optional":false,"description":"<p>Possible types are a plain string that contains an URL of an OData service, an array of JSON objects, a data source configuration, a <code>sap.ui.model.ListBinding</code> or <code>sap.ui.model.TreeBinding</code></p>","typeInfo":{"template":"string | Array | Object | ${0} | ${1}","UI5Types":["sap.ui.model.ListBinding","sap.ui.model.TreeBinding"]},"defaultValue":""}],"description":"<p>Sets the data source configuration that will be used for exporting the data. If the passed parameter is null, the call will be ignored.</p>","href":"api/sap.ui.export.Spreadsheet#methods/processDataSource","code":"<pre>processDataSource(oDataSource) : object|null</pre>"}],"displayName":"sap.ui.export.Spreadsheet","component":"CA-UI5-TBL","hasSample":true,"title":"class sap.ui.export.Spreadsheet","subTitle":"","docuLink":"2691788a08fc43f7bf269ea7c6336caf","docuLinkText":" Spreadsheet"},{"kind":"class","name":"sap.ui.export.util.Filter","basename":"Filter","resource":"sap/ui/export/util/Filter.js","module":"sap/ui/export/util/Filter","export":"","static":true,"visibility":"public","since":"1.110","extends":"sap.ui.base.Object","description":"<p>The <code>sap.ui.export.util.Filter</code> class represents filter settings that are used for the export. It provides the capability to have a visual representation of the filters in the exported document and offers convenience functions like <code>sap.ui.export.util.Filter#setType</code> to improve the result.</p>","ui5-metadata":{"stereotype":"object"},"constructor":{"visibility":"public","parameters":[{"name":"sProperty","optional":false,"description":"<p>Name of the technical filter property</p>","phoneName":"sProperty","depth":0,"types":[],"typeInfo":{"template":"string"},"defaultValue":""},{"name":"vRawFilter","optional":false,"description":"<p>Raw filter object</p>","phoneName":"vRawFilter","depth":0,"types":[],"typeInfo":{"template":"object | Array<object>"},"defaultValue":""},{"name":"operator","optional":false,"description":"<p>Filter operator</p>","phoneName":"vRawFilter.operator","depth":1,"types":[],"typeInfo":{"template":"string"},"defaultValue":""},{"name":"value","optional":false,"description":"<p>Filter value(s)</p>","phoneName":"vRawFilter.value","depth":1,"types":[],"typeInfo":{"template":"string | Array<string>"},"defaultValue":""},{"name":"exclude","optional":true,"description":"<p>Defines whether it is an exclude filter</p>","phoneName":"vRawFilter.exclude","depth":1,"types":[],"typeInfo":{"template":"boolean"},"defaultValue":""},{"name":"sLabel","optional":true,"description":"<p>Optional label for the filter property</p>","phoneName":"sLabel","depth":0,"types":[],"typeInfo":{"template":"string"},"defaultValue":""}],"description":"<p>Representation of filter settings that are used for exporting.</p>","references":[],"codeExample":"<pre>new sap.ui.export.util.Filter(sProperty, vRawFilter, sLabel?)</pre>"},"methods":[{"name":"sap.ui.export.util.Filter.extend","visibility":"public","static":true,"returnValue":{"type":"function","description":"<p>Created class / constructor function</p>","typeInfo":{"template":"function"}},"parameters":[{"name":"sClassName","optional":false,"description":"<p>Name of the class being created</p>","typeInfo":{"template":"string"},"defaultValue":""},{"name":"oClassInfo","optional":true,"description":"<p>Object literal with information about the class</p>","typeInfo":{"template":"object"},"defaultValue":""},{"name":"FNMetaImpl","optional":true,"description":"<p>Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class</p>","typeInfo":{"template":"function"},"defaultValue":""}],"description":"<p>Creates a new subclass of class sap.ui.export.util.Filter with name <code>sClassName</code> and enriches it with the information contained in <code>oClassInfo</code>.</p><p><code>oClassInfo</code> might contain the same kind of information as described in <a target=\"_self\" href=\"api/sap.ui.base.Object#methods/sap.ui.base.Object.extend\">sap.ui.base.Object.extend</a>.</p>","href":"api/sap.ui.export.util.Filter#methods/sap.ui.export.util.Filter.extend","code":"<pre>sap.ui.export.util.Filter.extend(sClassName, oClassInfo?, FNMetaImpl?) : function</pre>"},{"name":"getLabel","visibility":"public","since":"1.110","returnValue":{"type":"string","description":"<p>Filter label</p>","typeInfo":{"template":"string"}},"description":"<p>Returns the filter label if available. Otherwise the name of the filter property will be returned.</p>","href":"api/sap.ui.export.util.Filter#methods/getLabel","code":"<pre>getLabel() : string</pre>"},{"name":"sap.ui.export.util.Filter.getMetadata","visibility":"public","static":true,"returnValue":{"type":"sap.ui.base.Metadata","description":"<p>Metadata object describing this class</p>","typeInfo":{"UI5Types":["sap.ui.base.Metadata"]}},"description":"<p>Returns a metadata object for class sap.ui.export.util.Filter.</p>","href":"api/sap.ui.export.util.Filter#methods/sap.ui.export.util.Filter.getMetadata","code":"<pre>sap.ui.export.util.Filter.getMetadata() : sap.ui.base.Metadata</pre>"},{"name":"getProperty","visibility":"public","since":"1.110","returnValue":{"type":"string","description":"<p>Name of the property</p>","typeInfo":{"template":"string"}},"description":"<p>Returns the technical name of the property on which the filter is applied.</p>","href":"api/sap.ui.export.util.Filter#methods/getProperty","code":"<pre>getProperty() : string</pre>"},{"name":"getValue","visibility":"public","since":"1.110","returnValue":{"type":"string","description":"<p>Formatted and semicolon-separated filter settings</p>","typeInfo":{"template":"string"}},"description":"<p>Returns the formatted filter value(s) as string. If there are multiple filters for the same property, which are combined via <code>OR</code>, it will return a semicolon-separated list of the filter values including their operators.</p>","href":"api/sap.ui.export.util.Filter#methods/getValue","code":"<pre>getValue() : string</pre>"},{"name":"setFormat","visibility":"public","since":"1.110","parameters":[{"name":"fnFormat","optional":false,"description":"<p>Format function that will be applied to the raw values</p>","typeInfo":{"template":"function"},"defaultValue":""}],"description":"<p>Uses the given format function to format all filter values. The function has to accept a single parameter of type <code>string</code> and needs to return a string value. The function will be called for every single raw value without the corresponding filter operator.</p><p>If there is a \"between\" filter, the function will be called twice. In case of an error, the function call will be skipped, and the raw value will be taken instead.</p><p>The format function has priority over the type-dependent format. To reset the format function and return to type-dependent formatting, the format function needs to be set to <code>null</code>.</p>","href":"api/sap.ui.export.util.Filter#methods/setFormat","code":"<pre>setFormat(fnFormat) : void</pre>"},{"name":"setLabel","visibility":"public","since":"1.110","parameters":[{"name":"sLabel","optional":false,"description":"<p>Filter label</p>","typeInfo":{"template":"string"},"defaultValue":""}],"description":"<p>Takes the given string as label of the filter.</p>","href":"api/sap.ui.export.util.Filter#methods/setLabel","code":"<pre>setLabel(sLabel) : void</pre>"},{"name":"setType","visibility":"public","since":"1.110","parameters":[{"name":"oType","optional":false,"description":"<p>Type instance that is used for formatting</p>","typeInfo":{"UI5Types":["sap.ui.model.SimpleType"]},"defaultValue":""}],"description":"<p>Uses the given <code>sap.ui.model.SimpleType</code> instance to format the filter values accordingly.</p>","href":"api/sap.ui.export.util.Filter#methods/setType","code":"<pre>setType(oType) : void</pre>"}],"displayName":"sap.ui.export.util.Filter","component":"CA-UI5-TBL","hasSample":false,"title":"class sap.ui.export.util.Filter","subTitle":""},{"name":"sap","displayName":"sap","kind":"namespace","nodes":[{"name":"sap.ui","description":"","href":"api/sap.ui"}],"hasSample":false,"title":"namespace sap","subTitle":""},{"name":"sap.ui","displayName":"sap.ui","kind":"namespace","nodes":[{"name":"sap.ui.export","description":"<p>UI5 library: sap.ui.export - document export utilities</p>","href":"api/sap.ui.export"}],"hasSample":false,"title":"namespace sap.ui","subTitle":""},{"name":"sap.ui.export.util","displayName":"sap.ui.export.util","kind":"namespace","nodes":[{"name":"sap.ui.export.util.Filter","description":"<p>The <code>sap.ui.export.util.Filter</code> class represents filter settings that are used for the export. </p>","href":"api/sap.ui.export.util.Filter"}],"component":"CA-UI5-TBL","hasSample":false,"title":"namespace sap.ui.export.util","subTitle":""}],"defaultComponent":"CA-UI5-TBL"}