// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Card Action Handlers okPressed : Test the handler when OK button is clicked to save the card 1`] = `
{
  "fileName": "manifest.json",
  "floorplan": "ObjectPage",
  "localPath": "cards/op/entitySetName",
  "manifests": [
    {
      "default": true,
      "entitySet": "entitySetName",
      "manifest": {
        "sap.app": {
          "applicationVersion": {
            "version": "1.0.0",
          },
          "id": "objectCard",
          "title": "Card Title",
          "type": "card",
        },
        "sap.card": {
          "configuration": {
            "parameters": {
              "_entitySet": {
                "type": "string",
                "value": "SalesOrderManage",
              },
            },
          },
          "header": {
            "title": "{sales_order_id}",
          },
          "type": "Object",
        },
        "sap.insights": {
          "cardType": "LEAN_DT",
          "parentAppId": "sales.order.wd20",
          "templateName": "ObjectPage",
          "versions": {
            "ui5": "1.120.1-202405021611",
          },
        },
        "sap.ui": {},
      },
      "type": "integration",
    },
    {
      "default": true,
      "entitySet": "entitySetName",
      "manifest": {
        "$schema": "https://adaptivecards.io/schemas/adaptive-card.json",
        "body": [
          {
            "color": "Default",
            "maxLines": 1,
            "size": "default",
            "spacing": "none",
            "text": "[ \${sales_order_id} ](https://my313815.s4hana.ondemand.com/ui#SalesQuotation-manageV2&/)",
            "type": "TextBlock",
            "weight": "bolder",
            "wrap": false,
          },
          {
            "columns": [
              {
                "items": [
                  {
                    "$when": "\${ (false) ? true: false}",
                    "color": "Default",
                    "isSubtle": true,
                    "maxLines": 1,
                    "size": "default",
                    "spacing": "none",
                    "text": "",
                    "type": "TextBlock",
                    "weight": "default",
                    "wrap": false,
                  },
                ],
                "type": "Column",
                "width": "auto",
              },
              {
                "items": [
                  {
                    "$when": "\${ ( false) ? true: false}",
                    "color": "Default",
                    "horizontalAlignment": "Center",
                    "isSubtle": true,
                    "maxLines": 1,
                    "size": "default",
                    "spacing": "none",
                    "text": "|",
                    "type": "TextBlock",
                    "weight": "default",
                    "wrap": false,
                  },
                ],
                "type": "Column",
                "width": "auto",
              },
              {
                "items": [
                  {
                    "$when": "\${ (false) ? true: false}",
                    "color": "Default",
                    "isSubtle": true,
                    "maxLines": 1,
                    "size": "default",
                    "spacing": "none",
                    "text": "",
                    "type": "TextBlock",
                    "weight": "default",
                    "wrap": false,
                  },
                ],
                "type": "Column",
                "width": "auto",
              },
            ],
            "spacing": "none",
            "type": "ColumnSet",
          },
          {
            "color": "Default",
            "maxLines": 1,
            "size": "extraLarge",
            "spacing": "none",
            "text": "",
            "type": "TextBlock",
            "weight": "default",
            "wrap": false,
          },
          {
            "items": [
              {
                "items": [
                  {
                    "color": "Default",
                    "maxLines": 2,
                    "size": "small",
                    "spacing": "medium",
                    "text": "",
                    "type": "TextBlock",
                    "weight": "bolder",
                    "wrap": true,
                  },
                  {
                    "items": [
                      {
                        "columns": [
                          {
                            "items": [
                              {
                                "color": "Default",
                                "isSubtle": true,
                                "maxLines": 1,
                                "size": "small",
                                "spacing": "default",
                                "text": "",
                                "type": "TextBlock",
                                "weight": "default",
                                "wrap": false,
                              },
                              {
                                "color": "Default",
                                "maxLines": 2,
                                "size": "small",
                                "spacing": "none",
                                "text": "",
                                "type": "TextBlock",
                                "weight": "default",
                                "wrap": true,
                              },
                              {
                                "isVisible": false,
                                "text": "",
                                "type": "TextBlock",
                              },
                            ],
                            "type": "Column",
                            "width": "stretch",
                          },
                        ],
                        "items": [],
                        "type": "ColumnSet",
                      },
                    ],
                    "spacing": "small",
                    "type": "Container",
                  },
                ],
                "spacing": "medium",
                "type": "Container",
              },
            ],
            "spacing": "large",
            "type": "Container",
          },
        ],
        "metadata": {
          "sap.cards.ap": {
            "cardType": "LEAN_DT",
            "parentAppId": "sales.order.wd20",
            "templateName": "ObjectPage",
            "versions": {
              "ui5": "1.120.1-202405021611",
            },
          },
        },
        "msteams": {
          "width": "full",
        },
        "type": "AdaptiveCard",
        "version": "1.6",
      },
      "type": "adaptive",
    },
  ],
}
`;

exports[`Card Action Handlers onActionAddClick : Test the handler when add action button is being clicked on UI 1`] = `[]`;

exports[`Card Action Handlers onActionAddClick : Test the handler when add action button is being clicked on UI 2`] = `
[
  {
    "enablePathKey": "",
    "isConfirmationRequired": false,
    "isStyleControlEnabled": false,
    "style": "Default",
    "title": "",
    "titleKey": "",
  },
]
`;

exports[`Card Action Handlers onAddedActionDelete : Test the handler when Delete action is being clicked on UI and there exists two action on UI 1`] = `
[
  {
    "enablePathKey": "IsActiveEntity",
    "isStyleControlEnabled": true,
    "style": "Positive",
    "title": "Reopen",
    "titleKey": "C_SalesPlanTPReopen",
  },
  {
    "enablePathKey": "Update_mc",
    "isStyleControlEnabled": true,
    "style": "Negative",
    "title": "Release",
    "titleKey": "C_SalesPlanTPRelease",
  },
]
`;

exports[`Card Action Handlers onAddedActionDelete : Test the handler when Delete action is being clicked on UI and there exists two action on UI 2`] = `
[
  {
    "action": "C_SalesPlanTPRelease",
    "label": "Release",
  },
  {
    "action": "C_SalesPlanTPReopen",
    "label": "Reopen",
  },
]
`;

exports[`Card Action Handlers onAddedActionDelete : Test the handler when Delete action is being clicked on UI and there exists two action on UI 3`] = `
[
  {
    "enablePathKey": "Update_mc",
    "isStyleControlEnabled": true,
    "style": "Negative",
    "title": "Release",
    "titleKey": "C_SalesPlanTPRelease",
  },
]
`;

exports[`Card Action Handlers onAddedActionDelete : Test the handler when Delete action is being clicked on UI and there exists two action on UI 4`] = `
[
  {
    "action": "C_SalesPlanTPRelease",
    "label": "Release",
  },
  {
    "action": "C_SalesPlanTPReopen",
    "label": "Reopen",
  },
]
`;

exports[`Card Action Handlers onAddedActionDelete : Test the handler when Delete action is being clicked on UI and there exists two action on UI 5`] = `[]`;

exports[`Card Action Handlers onAddedActionDelete : Test the handler when Delete action is being clicked on UI and there exists two action on UI 6`] = `
[
  {
    "action": "C_SalesPlanTPRelease",
    "label": "Release",
  },
  {
    "action": "C_SalesPlanTPReopen",
    "label": "Reopen",
  },
]
`;

exports[`Card Action Handlers onAddedActionStyleChange : Test the handler when added actions style property is changed 1`] = `
[
  {
    "enablePathKey": "IsActiveEntity",
    "isStyleControlEnabled": true,
    "style": "Negative",
    "title": "Reopen",
    "titleKey": "C_SalesPlanTPReopen",
  },
]
`;

exports[`Card Action Handlers onAddedActionTitleChange : Test the handler when added actions title property is changed to a Invalid action value 1`] = `
[
  {
    "enablePathKey": "IsActiveEntity",
    "isStyleControlEnabled": true,
    "style": "Positive",
    "title": "Reopen1",
    "titleKey": "C_SalesPlanTPReopen1",
  },
]
`;

exports[`Card Action Handlers onAddedActionTitleChange : Test the handler when added actions title property is changed to a Invalid action value 2`] = `
[
  {
    "enablePathKey": "IsActiveEntity",
    "isStyleControlEnabled": true,
    "style": "Positive",
    "title": "Reopen1",
    "titleKey": "C_SalesPlanTPReopen1",
  },
]
`;

exports[`Card Action Handlers onAddedActionTitleChange : Test the handler when added actions title property is changed to a valid action value 1`] = `
[
  {
    "enablePathKey": "IsActiveEntity",
    "isStyleControlEnabled": true,
    "style": "Positive",
    "title": "Reopen",
    "titleKey": "C_SalesPlanTPReopen",
  },
]
`;

exports[`Update header for selected values - trend, side indicator updateSideIndicatorsForHeader - for selected side indicator  1`] = `
[
  {
    "deviationUnit": "K",
    "deviationValue": "300",
    "sourceProperty": "net_amount",
    "targetUnit": "K",
    "targetValue": "200",
  },
]
`;

exports[`Validate criticality and UoM, delete trend applyCriticality - Validate hostCriticality from sourceCriticalityProperty gets deleted, mainIndicatorCriticality gets updated with updated sourceCriticalityProperty 1`] = `
[
  {
    "activeCalculation": false,
    "criticality": "Good",
    "name": "net_amount",
  },
]
`;

exports[`Validate criticality and UoM, delete trend applyUoMFormatting - Validate if UoM array gets updated with source property object, when target (UoM) is applied and source is not a part of the UoM array 1`] = `
[
  {
    "arrangementKey": "currency_code",
    "name": "gross_amount",
    "propKey": "gross_amount",
    "value": "currency_code",
  },
  {
    "arrangementKey": "currency_code",
    "name": "net_amount",
    "propKey": "net_amount",
    "value": "currency_code",
  },
  {
    "arrangementKey": "currency_code",
    "name": "tax_amount",
    "propKey": "tax_amount",
    "value": "currency_code",
  },
  {
    "name": "so_id",
    "propertyKeyForDescription": "currency_code",
    "propertyKeyForId": "so_id",
    "value": "currency_code",
  },
]
`;

exports[`Validate criticality and UoM, delete trend onTrendDelete 1`] = `{}`;

exports[`Validate header with arrangements - updateHeaderArrangements, when header has a navigational property of date type. Validate to check if text arrangement and formatting both are getting applied correctly 1`] = `"{gross_amount} ({= format.dateTime(\${DraftAdministrativeData/CreationDateTime}, {"relative":false,"UTC":true})})"`;

exports[`Validate header with arrangements -updateArrangements when group is having the matching content(group) value updateArrangements - Validate card header with arrangements 1`] = `"{Language} ({to_BillingStatus/Status_Text})"`;

exports[`Validate updateArrangements - when group items are having navigational properties of date type, arrangement is a navigational property of date type. Validate to check if formatting and text arrangement both are getting applied correctly 1`] = `"{= format.dateTime(\${to_BusinessPartner/CreatedAt}, {"relative":false,"UTC":true})} ({= format.dateTime(\${DraftAdministrativeData/ProcessingStartDateTime}, {"relative":false,"UTC":true})})"`;

exports[`addLabelsForProperties function should add labels with (<empty>) for properties with undefined or null data 1`] = `
{
  "name": "name1",
  "value": [
    {
      "label": "Value 1",
      "labelWithValue": "Value 1 (<empty>)",
      "name": "Value1",
      "type": "Edm.String",
    },
    {
      "label": "Value 2",
      "labelWithValue": "Value 2 (<empty>)",
      "name": "Value2",
      "type": "Edm.String",
    },
    {
      "label": "Value 3",
      "labelWithValue": "Value 3 (<empty>)",
      "name": "Value3",
      "type": "Edm.Byte",
    },
  ],
}
`;

exports[`addLabelsForProperties function should add labels with values for properties 1`] = `
{
  "name": "to_Currency",
  "value": [
    {
      "label": "Currency Code",
      "labelWithValue": "Currency Code (USD)",
      "name": "Currency_Code",
      "type": "Edm.String",
    },
    {
      "label": "Long Text",
      "labelWithValue": "Long Text (United States Dollar)",
      "name": "Currency_Code_Text",
      "type": "Edm.String",
    },
    {
      "label": "Decimal Places",
      "labelWithValue": "Decimal Places (2)",
      "name": "Decimals",
      "type": "Edm.Byte",
    },
  ],
}
`;

exports[`onAddClick should add a new item and set enableAddMoreGroupItems to true if the total items in the group is less than the limit set 1`] = `
[
  {
    "isEnabled": true,
    "label": "Gross Amount",
    "name": "gross_amount",
    "value": "{gross_amount} {currency_code}",
  },
  {
    "isEnabled": true,
    "label": "Net Amount",
    "name": "net_amount",
    "value": "{net_amount} {currency_code}",
  },
  {
    "isEnabled": false,
    "isNavigationEnabled": false,
    "label": null,
    "navigationalProperties": [],
    "value": "{/items/2}",
  },
]
`;

exports[`onDeleteClick should delete item & set enableAddMoreGroupItems to true if total items is less than the limit set. onAddClick should add a new item & set enableAddMoreGroupItems to false if total items is equal to limit set 1`] = `
[
  {
    "isEnabled": true,
    "label": "Net Amount",
    "name": "net_amount",
    "value": "{net_amount} {currency_code}",
  },
  {
    "isEnabled": true,
    "label": "Tax Amount",
    "name": "tax_amount",
    "value": "{tax_amount} {currency_code}",
  },
  {
    "isEnabled": true,
    "label": "Business Partner ID",
    "name": "bp_amount",
    "value": "{bp_id}",
  },
  {
    "isEnabled": true,
    "label": "Sales Order ID",
    "name": "so_id",
    "value": "{so_id}",
  },
]
`;

exports[`onDeleteClick should delete item & set enableAddMoreGroupItems to true if total items is less than the limit set. onAddClick should add a new item & set enableAddMoreGroupItems to false if total items is equal to limit set 2`] = `
[
  {
    "isEnabled": true,
    "label": "Net Amount",
    "name": "net_amount",
    "value": "{net_amount} {currency_code}",
  },
  {
    "isEnabled": true,
    "label": "Tax Amount",
    "name": "tax_amount",
    "value": "{tax_amount} {currency_code}",
  },
  {
    "isEnabled": true,
    "label": "Business Partner ID",
    "name": "bp_amount",
    "value": "{bp_id}",
  },
  {
    "isEnabled": true,
    "label": "Sales Order ID",
    "name": "so_id",
    "value": "{so_id}",
  },
  {
    "isEnabled": false,
    "isNavigationEnabled": false,
    "label": null,
    "navigationalProperties": [],
    "value": "{/items/4}",
  },
]
`;

exports[`onDrop when source and target group has 5 items each  validate item is not added 1`] = `
[
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus}",
  },
]
`;

exports[`onDrop when source and target group has 5 items each  validate item is not added 2`] = `
[
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus}",
  },
]
`;

exports[`onDrop when source group has 3 items and target group has 5 items validate if item is not added to the target group 1`] = `
[
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus}",
  },
]
`;

exports[`onDrop when source group has 3 items and target group has 5 items validate if item is not added to the target group 2`] = `
[
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus}",
  },
]
`;

exports[`onDrop when source has 4 items and target group has 4 items  validate if item is added from the source group to the target group, when dropPosition is After 1`] = `
[
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus_1}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus_2}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus_3}",
  },
]
`;

exports[`onDrop when source has 4 items and target group has 4 items  validate if item is added from the source group to the target group, when dropPosition is After 2`] = `
[
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus_0}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus_1}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus_2}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus_3}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus_0}",
  },
]
`;

exports[`onDrop when source has 5 items and target group has 4 items  validate if item is added from the source group to the target group, when dropPosition is Before 1`] = `
[
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus_1}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus_2}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus_3}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus_4}",
  },
]
`;

exports[`onDrop when source has 5 items and target group has 4 items  validate if item is added from the source group to the target group, when dropPosition is Before 2`] = `
[
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus_0}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus_1}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus_2}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus_0}",
  },
  {
    "name": "to_BillingStatus",
    "value": "{to_BillingStatus_3}",
  },
]
`;

exports[`onGroupAddClick validate if transpileIntegrationCardToAdaptive function is called when adding groups 1`] = `
[
  {
    "items": [
      {
        "isEnabled": true,
        "label": "Gross Amount",
        "name": "gross_amount",
        "value": "{gross_amount} {currency_code}",
      },
    ],
    "title": "Group 1",
  },
  {
    "items": [
      {
        "isEnabled": false,
        "isNavigationEnabled": false,
        "label": null,
        "navigationalProperties": [],
        "value": "{/items/0}",
      },
    ],
    "newItem": {
      "isEnabled": false,
      "isNavigationEnabled": false,
      "label": null,
      "navigationalProperties": [],
      "value": null,
    },
    "title": "Group 2",
  },
]
`;

exports[`onPropertySelection it should update model properties correctly when selectedKey is empty 1`] = `
[
  {
    "isEnabled": false,
    "isNavigationEnabled": false,
    "label": "",
    "name": "net_amount",
    "value": "",
  },
]
`;

exports[`onPropertySelection it should update model properties correctly when selectedKey is not empty 1`] = `
[
  {
    "isEnabled": true,
    "isNavigationEnabled": false,
    "label": "Net Amount",
    "name": "net_amount",
    "value": "{= format.unit(\${net_amount}, \${currency_code})}",
  },
]
`;

exports[`onPropertySelection with navigation it should update model properties correctly when selectedKey is not empty 1`] = `
[
  {
    "isEnabled": false,
    "isNavigationEnabled": true,
    "label": "",
    "name": "net_amount",
    "navigationProperty": "",
    "navigationalProperties": [
      {
        "label": "Lower Value",
        "name": "Status",
        "type": "Edm.String",
      },
      {
        "label": "Confirmation",
        "name": "Status_Text",
        "type": "Edm.String",
      },
    ],
    "value": "",
  },
]
`;

exports[`textArrangement- checkForNavigationProperty checkForNavigationProperty with matching arrangement property having textArrangementChanged as false 1`] = `true`;

exports[`textArrangement- checkForNavigationProperty checkForNavigationProperty with matching arrangement property having textArrangementChanged as false 2`] = `
[
  {
    "label": "Lower Value",
    "labelWithValue": "Lower Value (<empty>)",
    "name": "Status",
    "type": "Edm.String",
  },
  {
    "label": "Confirmation",
    "labelWithValue": "Confirmation (Initial)",
    "name": "Status_Text",
    "type": "Edm.String",
  },
]
`;

exports[`textArrangement- checkForNavigationProperty checkForNavigationProperty with matching arrangement property having textArrangementChanged as true 1`] = `true`;

exports[`textArrangement- checkForNavigationProperty checkForNavigationProperty with matching arrangement property having textArrangementChanged as true 2`] = `
[
  {
    "label": "Lower Value",
    "labelWithValue": "Lower Value (<empty>)",
    "name": "Status",
    "type": "Edm.String",
  },
  {
    "label": "Confirmation",
    "labelWithValue": "Confirmation (Initial)",
    "name": "Status_Text",
    "type": "Edm.String",
  },
]
`;

exports[`textArrangement- checkForNavigationProperty checkForNavigationProperty with no mathing arrangement property textArrangementChanged as false 1`] = `false`;

exports[`textArrangement- checkForNavigationProperty checkForNavigationProperty with no mathing arrangement property textArrangementChanged as true 1`] = `false`;

exports[`updateContentNavigationSelection - when selectedContentNavigation is present and is of type date. Validate group item to check formatting is applied correctly 1`] = `
[
  {
    "isEnabled": false,
    "isNavigationEnabled": true,
    "label": "Confirmation",
    "name": "DraftAdministrativeData",
    "navigationProperty": "ProcessingStartDateTime",
    "value": "{= format.dateTime(\${DraftAdministrativeData/ProcessingStartDateTime}, {"relative":false,"UTC":true})}",
  },
]
`;

exports[`updateContentNavigationSelection for V2 if selectedContentNavigation is present it should update model properties correctly when selectedKey is not empty 1`] = `
[
  {
    "isEnabled": false,
    "isNavigationEnabled": true,
    "label": "Confirmation",
    "name": "to_BillingStatus",
    "navigationProperty": "Status_Text",
    "value": "{to_BillingStatus/Status_Text}",
  },
]
`;

exports[`updateContentNavigationSelection for V2 it should update model properties correctly when selectedKey is not empty 1`] = `
[
  {
    "isEnabled": false,
    "isNavigationEnabled": true,
    "label": "Confirmation",
    "name": "to_BillingStatus",
    "navigationProperty": "Status_Text",
    "value": "{to_BillingStatus/Status_Text}",
  },
]
`;

exports[`updateContentNavigationSelection for V4 it should update model properties correctly when selectedKey is not empty 1`] = `
[
  {
    "isEnabled": false,
    "isNavigationEnabled": true,
    "label": "Confirmation",
    "name": "to_BillingStatus",
    "navigationProperty": "Status_Text",
    "value": "{to_BillingStatus/Status_Text}",
  },
]
`;

exports[`updateHeaderNavigationSelection - when navigationValue is of date type. Validate card header to check formatting is applied correctly 1`] = `"{= format.dateTime(\${DraftAdministrativeData/ProcessingStartDateTime}, {"relative":false,"UTC":true})}"`;
