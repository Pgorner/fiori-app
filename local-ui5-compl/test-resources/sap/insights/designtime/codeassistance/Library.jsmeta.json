{"!name":"sap.insights","!version":"1.21.1","!define":{"sap.insights.channels.ContextChannel_obj":{"extend":{"!description":"Creates a new subclass of class sap.insights.channels.ContextChannel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.insights.channels.ContextChannel"},"sap.insights.CardHelperService":{"!description":"Public (experimental) interface of the sap.insights.CardHelperService","!module":"sap/insights/CardHelper","!category":"static class"},"sap":{"sap":"sap","insights":"sap.insights","!category":"namespace"},"sap.insights.CardsChannel_obj":{"extend":{"!description":"Creates a new subclass of class sap.insights.CardsChannel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.insights.CardsChannel"},"sap.insights.ManageCards":{"!description":"This control shows list of all user cards and allows perform actions like change visibility, change order. It also allows user to get preview of particular card, delete or copy.","clearPage":{"!description":"Function to Clear Activities like navigation, filters","!static":false,"!category":"function","!type":"fn()"},"getEnableResetAllCards":{"!description":"Gets current value of property {@link #getEnableResetAllCards enableResetAllCards}.\n\nSets enableResetAllCards property\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getMetadata":{"!description":"Returns a metadata object for class sap.insights.ManageCards.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"setCardId":{"!description":"Sets a new value for property {@link #getCardId cardId}.\n\nSets the cardId property which decides whether to render the details page or cardlist page, if cardId is provided , cardDetails page is rendered\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sCardId?: String) -> sap.insights.ManageCards","parameters":{"sCardId":"type: string, description: New value for property <code>cardId<\/code>"}},"!proto":"sap.ui.core.Control","navigateTo":{"!description":"Function to navigate to the specified page, if no sPageId provided navigate to CardList by default","!static":false,"!category":"function","!type":"fn(oEvent: Object, sPageId: String)","parameters":{"oEvent":"type: Object, description: oEvent object","sPageId":"type: String, description: page id to which to navigate to"}},"!category":"class","extend":{"!description":"Creates a new subclass of class sap.insights.ManageCards with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getCardId":{"!description":"Gets current value of property {@link #getCardId cardId}.\n\nSets the cardId property which decides whether to render the details page or cardlist page, if cardId is provided , cardDetails page is rendered","!static":false,"!category":"function","!type":"fn() -> String"},"!constructorDescription":"Constructor for  ManageCards.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getEnableResetAllCards enableResetAllCards} : boolean (default: false)<\/li>\n<li>{@link #getCardId cardId} : string<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","setEnableResetAllCards":{"!description":"Sets a new value for property {@link #getEnableResetAllCards enableResetAllCards}.\n\nSets enableResetAllCards property\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bEnableResetAllCards?: Boolean) -> sap.insights.ManageCards","parameters":{"bEnableResetAllCards":"type: boolean, description: New value for property <code>enableResetAllCards<\/code>"}},"!module":"sap/insights/ManageCards","!helpDescription":"This control shows list of all user cards and allows perform actions like change visibility, change order. It also allows user to get preview of particular card, delete or copy."},"sap.insights":{"!description":"SAP UI library: sap.insights","CardsChannel":"sap.insights.CardsChannel_obj","visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"CardHelper":"sap.insights.CardHelper","enableResetAllCards":{"!description":"Sets enableResetAllCards property","!category":"enum","!type":"Boolean"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"!category":"namespace","ManageCards":"sap.insights.ManageCards_obj","channels":"sap.insights.channels","!module":"sap/insights/library","blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"!helpDescription":"SAP UI library: sap.insights","busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"CardHelperService":"sap.insights.CardHelperService","busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"cardId":{"!description":"Sets the cardId property which decides whether to render the details page or cardlist page, if cardId is provided , cardDetails page is rendered","!category":"enum","!type":"String"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"ICardConsumer":"sap.insights.ICardConsumer","ICardProvider":"sap.insights.ICardProvider"},"sap.insights.channels.ContextChannel":{"extend":{"!description":"Creates a new subclass of class sap.insights.channels.ContextChannel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"init":{"!description":"Initialize the ContextChannel either with the FLP message broker or an internal implementation for iframes.","!static":false,"!category":"function","!type":"fn() -> Promise<void>"},"getMetadata":{"!description":"Returns a metadata object for class sap.insights.channels.ContextChannel.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Provides a communication between card providers and consumers in FLP and included iframes.","!module":"sap/insights/channels/ContextChannel","unregisterProvider":{"!description":"Unregister a previously registered consumer or provider.","!static":false,"!category":"function","!type":"fn(provider: sap.insights.channels.IContextProvider) -> Promise<void>","parameters":{"provider":"type: sap.insights.channels.IContextProvider, description: Object implementing the TBD interface"}},"!proto":"sap.ui.base.Object","!category":"class","registerProvider":{"!description":"Register a card provider with a unique id. The provider will be notified if new consumers get registered.","!static":false,"!category":"function","!type":"fn(provider: sap.insights.channels.IContextProvider) -> Promise<void>","parameters":{"provider":"type: sap.insights.channels.IContextProvider, description: Object implementing the TBD interface"}},"getContext":{"!description":"Get the context from the active provider.","!static":false,"!category":"function","!type":"fn() -> Promise<object>"}},"sap.insights.channels":{"IContextProvider":"sap.insights.channels.IContextProvider","!category":"namespace","ContextChannel":"sap.insights.channels.ContextChannel_obj"},"sap.insights.CardHelper":{"!description":"Provides functionality for Insight cards CRUD operations.","!module":"sap/insights/CardHelper","!helpDescription":"Provides functionality for Insight cards CRUD operations.","!category":"namespace"},"sap.insights.channels.IContextProvider":{"!description":"Interface required for classes that would like to provide cards using the <code>sap.insights.CardsChannel<\/code>.","!module":"sap/insights/channels/ContextChannel","!category":"static class"},"sap.insights.ManageCards_obj":{"extend":{"!description":"Creates a new subclass of class sap.insights.ManageCards with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.insights.ManageCards"},"sap.insights.ICardConsumer":{"!description":"Interface required for classes that would like to consume cards using the <code>sap.insights.CardsChannel<\/code>.","!module":"sap/insights/CardsChannel","!category":"static class"},"sap.insights.ICardProvider":{"!description":"Interface required for classes that would like to provide cards using the <code>sap.insights.CardsChannel<\/code>.","!module":"sap/insights/CardsChannel","!category":"static class"},"sap.insights.CardsChannel":{"init":{"!description":"Initialize the CardsChannel either with the FLP message broker or an internal implementation for iframes.","!static":false,"!category":"function","!type":"fn() -> Promise<void>"},"getMetadata":{"!description":"Returns a metadata object for class sap.insights.CardsChannel.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!proto":"sap.ui.base.Object","requestCardCreation":{"!description":"Request card creation to a given provider.","!static":false,"!category":"function","!type":"fn(consumerId: String, card: sap.insights.CardsChannel.Card, providerId: String) -> Promise<void>","parameters":{"consumerId":"type: string, description: .","providerId":"type: string, description: .","card":"type: sap.insights.CardsChannel.Card, description: ."}},"unregister":{"!description":"Unregister a previously registered consumer or provider.","!static":false,"!category":"function","!type":"fn(id: String) -> Promise<void>","parameters":{"id":"type: string, description: ."}},"!category":"class","publishCard":{"!description":"Send a card to a given consumer or broadcast it to all consumers.","!static":false,"!category":"function","!type":"fn(providerId: String, card: sap.insights.CardsChannel.Card, consumerId?: String) -> Promise<void>","parameters":{"providerId":"type: string, description: .","consumerId":"type: string, description: .","card":"type: sap.insights.CardsChannel.Card, description: ."}},"registerProvider":{"!description":"Register a card provider with a unique id. The provider will be notified if new consumers get registered.","!static":false,"!category":"function","!type":"fn(id: String, provider: sap.insights.ICardProvider) -> Promise<void>","parameters":{"provider":"type: sap.insights.ICardProvider, description: Object implementing the ICardProvider interface","id":"type: string, description: Unique id of the provider"}},"publishAvailableCards":{"!description":"Send a list of all available cards to a given consumer or broadcast it to all consumers.","!static":false,"!category":"function","!type":"fn(providerId: String, cardInfos: [sap.insights.CardsChannel.CardInfo], consumerId: String) -> Promise<void>","parameters":{"providerId":"type: string, description: .","consumerId":"type: string, description: .","cardInfos":"type: sap.insights.CardsChannel.CardInfo[], description: ."}},"extend":{"!description":"Creates a new subclass of class sap.insights.CardsChannel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Provides a communication between card providers and consumers in FLP and included iframes.","!module":"sap/insights/CardsChannel","isEnabled":{"!description":"Checks if the broker is enabled.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"registerConsumer":{"!description":"Register a card consumer with a unique id. The consumer will be notified through its callback when corresponding messages are received.","!static":false,"!category":"function","!type":"fn(id: String, consumer: sap.insights.ICardConsumer) -> Promise<void>","parameters":{"id":"type: string, description: Unique id of the consumer","consumer":"type: sap.insights.ICardConsumer, description: Implementation of the consumer"}},"requestCard":{"!description":"Request a card from a given provider.","!static":false,"!category":"function","!type":"fn(consumerId: String, cardId: String, providerId: String) -> Promise<void>","parameters":{"consumerId":"type: string, description: .","providerId":"type: string, description: .","cardId":"type: string, description: ."}}}}}