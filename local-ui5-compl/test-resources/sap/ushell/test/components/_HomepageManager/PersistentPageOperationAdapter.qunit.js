// Copyright (c) 2009-2023 SAP SE, All Rights Reserved

/**
 * @fileOverview QUnit tests for sap.ushell.components._HomepageManager.PersistentPageOperationAdapter
 * @deprecated since 1.120
 */
sap.ui.define([
    "sap/ushell/components/_HomepageManager/PersistentPageOperationAdapter",
    "sap/ushell/Config",
    "sap/ui/thirdparty/jquery",
    "sap/ui/performance/Measurement"
], function (
    PersistentPageOperationAdapter,
    Config,
    jQuery,
    Measurement
) {
    "use strict";

    /* global QUnit, sinon */

    var sandbox = sinon.createSandbox({});

    QUnit.module("getPreparedTileModel", {
        beforeEach: function () {
            this.oLaunchPageService = {
                getTileSize: sandbox.stub().returns("1x1"),
                getTileId: sandbox.stub().returns("someTileId"),
                getCatalogTileId: sandbox.stub(),
                getStableCatalogTileId: sandbox.stub().returns("someStableCatalogTileId"),
                getTileTarget: sandbox.stub().returns("someTarget"),
                getTileDebugInfo: sandbox.stub().returns("someTileDebugInfo"),
                isTileIntentSupported: sandbox.stub().returns(true),
                getCardManifest: sandbox.stub(),
                isLinkPersonalizationSupported: sandbox.stub().returns(true)
            };
        },
        /**
         * This method is called after each test. Add every restoration code here.
         */
        afterEach: function () {
            PersistentPageOperationAdapter.destroy();
            sandbox.restore();
        }
    });

    QUnit.test("getPreparedTileModel - returns the correct model when a tile is provided", function (assert) {
        var oEncodeURIComponentStub,
            oGetIsAppBoxStub,
            oDummyTile = {
                controlId: "someId",
                object: "someObject",
                manifest: "someManifest",
                _getIsAppBox: function () {
                    return true;
                }
            },
            bIsGroupLocked = false,
            sTileType = "tile",
            oReturnValue,
            oExpectedReturnValue = {
                isCustomTile: false,
                object: oDummyTile,
                isLinkPersonalizationSupported: true,
                originalTileId: "someTileId",
                uuid: "someUID",
                tileCatalogId: "someCatalogTileId",
                tileCatalogIdStable: "someStableCatalogTileId",
                content: [],
                long: false,
                target: "someTarget",
                debugInfo: "someTileDebugInfo",
                isTileIntentSupported: true,
                rgba: "",
                isLocked: bIsGroupLocked,
                showActionsIcon: false,
                navigationMode: undefined
            };

        // Arrange
        oEncodeURIComponentStub = sinon.stub(window, "encodeURIComponent").returns("someCatalogTileId");

        var oPersistentPageOperationAdapter = PersistentPageOperationAdapter.getInstance(this.oLaunchPageService);
        oGetIsAppBoxStub = sinon.stub(oPersistentPageOperationAdapter, "_getIsAppBox").returns(true);

        // Act
        oReturnValue = oPersistentPageOperationAdapter.getPreparedTileModel(oDummyTile, bIsGroupLocked, sTileType);

        // Assert
        oReturnValue.uuid = "someUID";//uid generated by sap/base/util/uid
        assert.deepEqual(oReturnValue, oExpectedReturnValue, "The tile model contains the expected data");

        // Cleanup
        oEncodeURIComponentStub.restore();
        oGetIsAppBoxStub.restore();
    });

    QUnit.module("The method loadGroupsFromArray", {
        beforeEach: function () {
            this.oDefaultGroupMock = {
                id: "defaultGroup"
            };
            this.aGroupsMock = [
                this.oDefaultGroupMock,
                { id: "group1" }
            ];

            this.oMeasurementStartStub = sandbox.stub(Measurement, "start");
            this.oMeasurementEndStub = sandbox.stub(Measurement, "end");

            this.oDefaultGroupDeferred = new jQuery.Deferred();
            this.oLaunchPageStub = {
                getDefaultGroup: sandbox.stub().returns(this.oDefaultGroupDeferred)
            };

            this.oAdapter = PersistentPageOperationAdapter.getInstance(this.oLaunchPageStub);

            this.oGetPreparedGroupModelStub = sandbox.stub(this.oAdapter, "getPreparedGroupModel");
            this.oGetPreparedGroupModelStub.callsFake(function (oGroup, bDefault, bLast, oData) {
                if (bDefault) {
                    oGroup.default = true;
                }
                oGroup.prepared = true;
                return oGroup;
            });
            this.oSortGroupsStub = sandbox.stub(this.oAdapter, "_sortGroups");
            this.oSortGroupsStub.withArgs(this.oDefaultGroupMock, this.aGroupsMock).callsFake(function (oDefaultGroup, aGroups) {
                return aGroups;
            });
        },
        afterEach: function () {
            PersistentPageOperationAdapter.destroy();
            sandbox.restore();
        }
    });

    QUnit.test("Resolves with the correct groups array.", function (assert) {
        // Arrange
        this.oDefaultGroupDeferred.resolve(this.oDefaultGroupMock);
        var aExpectedGroups = [
            { default: true, id: "defaultGroup", index: 0, prepared: true },
            { id: "group1", index: 1, prepared: true }
        ];
        // Act
        return this.oAdapter.loadGroupsFromArray(this.aGroupsMock).then(function (aGroups) {
            // Assert
            assert.deepEqual(aGroups, aExpectedGroups, "loadGroupsFromArray returned the correct groups");

            assert.strictEqual(this.oSortGroupsStub.callCount, 1, "_sortGroups was called once");
        }.bind(this));
    });

    QUnit.test("Resolves with the correct groups array when default group is a different object.", function (assert) {
        // Arrange
        this.oDefaultGroupDeferred.resolve({
            id: "defaultGroup"
        });
        var aExpectedGroups = [
            { default: true, id: "defaultGroup", index: 0, prepared: true },
            { id: "group1", index: 1, prepared: true }
        ];
        // Act
        return this.oAdapter.loadGroupsFromArray(this.aGroupsMock).then(function (aGroups) {
            // Assert
            assert.deepEqual(aGroups, aExpectedGroups, "loadGroupsFromArray returned the correct groups");

            assert.strictEqual(this.oSortGroupsStub.callCount, 1, "_sortGroups was called once");
        }.bind(this));
    });

    QUnit.module("The method _sortGroups", {
        beforeEach: function () {
            this.aGroupsMock = [
                { id: "group1" },
                { id: "defaultGroup" },
                { id: "group2" }
            ];

            this.oLaunchPageStub = {
                isGroupLocked: sandbox.stub().returns(false)
            };

            this.oAdapter = PersistentPageOperationAdapter.getInstance(this.oLaunchPageStub);
        },
        afterEach: function () {
            PersistentPageOperationAdapter.destroy();
            sandbox.restore();
        }
    });

    QUnit.test("Returns the sorted groups array.", function (assert) {
        // Arrange
        var aExpectedGroups = [
            { id: "defaultGroup" },
            { id: "group1" },
            { id: "group2" }
        ];
        // Act
        var aResult = this.oAdapter._sortGroups(this.aGroupsMock[1], this.aGroupsMock);
        // Assert
        assert.deepEqual(aResult, aExpectedGroups, "_sortgroups returned the correct groups array.");
    });

    QUnit.test("Returns the sorted groups array when default group is a different object.", function (assert) {
        // Arrange
        var oDefaultGroupMock = {
            id: "defaultGroup"
        };
        var aExpectedGroups = [
            { id: "defaultGroup" },
            { id: "group1" },
            { id: "group2" }
        ];
        // Act
        var aResult = this.oAdapter._sortGroups(oDefaultGroupMock, this.aGroupsMock);
        // Assert
        assert.deepEqual(aResult, aExpectedGroups, "_sortgroups returned the correct groups array.");
    });

    QUnit.module("The method getPreparedGroupModel", {
        beforeEach: function () {
            this.oGetServiceStub = sandbox.stub();

            this.oLaunchPageStub = {
                getGroupTiles: sandbox.stub().returns([]),
                isGroupLocked: sandbox.stub().returns(false),
                isGroupFeatured: sandbox.stub().returns(false),
                getGroupTitle: sandbox.stub().returns("Test"),
                isGroupRemovable: sandbox.stub().returns(true),
                isGroupVisible: sandbox.stub().returns(true),
                getGroupId: sandbox.stub()
            };

            this.oConfigStub = sandbox.stub(Config, "last");
            this.oConfigStub.withArgs("/core/shell/model/personalization").returns(true);

            this.oAdapter = PersistentPageOperationAdapter.getInstance(this.oLaunchPageStub);
        },
        afterEach: function () {
            PersistentPageOperationAdapter.destroy();
            sandbox.restore();
        }
    });

    QUnit.test("Don't set helpId if enableHelp is false", function (assert) {
        // Arrange
        this.oConfigStub.withArgs("/core/extension/enableHelp").returns(false);
        this.oLaunchPageStub.getGroupId.returns("test_id");

        // Act
        var oResult = this.oAdapter.getPreparedGroupModel({}, false, false);
        // Assert
        assert.strictEqual(oResult.helpId, null, "helpId was not set");
        assert.strictEqual(this.oLaunchPageStub.getGroupId.callCount, 0, "getGroupId was not called");
    });

    QUnit.test("Set helpId as group Id if enableHelp is true", function (assert) {
        // Arrange
        this.oConfigStub.withArgs("/core/extension/enableHelp").returns(true);
        this.oLaunchPageStub.getGroupId.returns("test_id");

        // Act
        var oResult = this.oAdapter.getPreparedGroupModel({}, false, false);
        // Assert
        assert.strictEqual(oResult.helpId, "test_id", "helpId was set");
        assert.strictEqual(this.oLaunchPageStub.getGroupId.callCount, 1, "getGroupId was called");
    });

    QUnit.test("Set null helpId if enableHelp is true and groupId is null", function (assert) {
        // Arrange
        this.oConfigStub.withArgs("/core/extension/enableHelp").returns(true);
        this.oLaunchPageStub.getGroupId.returns(null);

        // Act
        var oResult = this.oAdapter.getPreparedGroupModel({}, false, false);
        // Assert
        assert.strictEqual(oResult.helpId, null, "null helpId was set");
        assert.strictEqual(this.oLaunchPageStub.getGroupId.callCount, 1, "getGroupId was called");
    });
});
