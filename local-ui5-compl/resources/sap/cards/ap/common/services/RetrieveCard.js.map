{"version":3,"file":"RetrieveCard.js","names":["sap","ui","define","sap_cards_ap_transpiler_cardTranspiler_Transpile","SelectionVariant","___helpers_ApplicationInfo","___helpers_I18nHelper","___odata_ODataUtils","_catch","body","recover","result","e","then","convertIntegrationCardToAdaptive","ODataModelVersion","fetchApplicationInfo","resolvei18nTextsForIntegrationCard","createContextParameter","CardTypes","getCardPath","type","entitySet","applicationManifest","manifest","INTEGRATION","sapCardsAP","undefined","Object","keys","length","cardsConfig","defaultCard","default","localUri","endsWith","cleanupVariantInformation","selectionVariant","hasOwnProperty","SelectionVariantID","PresentationVariantID","Text","ODataFilterExpression","Version","FilterContextUrl","ParameterContextUrl","fetchManifest","url","Promise","resolve","fetch","response","json","_getObjectPageCardManifest","appComponent","hostOptions","isDesignMode","arguments","_temp2","cardsPath","cardType","reject","cardUrl","applicationUrlOnAbap","substring","getManifest","sapPlatformAbap","uri","_temp","_fetchManifest","addActionsToCardHeader","cardManifest","applicationInfo","semanticObject","action","entitySetWithObjectContext","appModel","odataModel","header","ibnParams","isODataV4","V4","context","split","forEach","param","key","value","addSelectOption","JSON","stringify","toJSONObject","actions","parameters","ibnTarget","checkIfCardExists","mApplicationManifest","handleHideActions","mManifest","appManifest","embeds","ObjectPage","defaultEntitySet","hideActions","mParameters","configuration","_adaptiveFooterActionParameters","footerActionParameters","footer","getKeyParameters","bODataV4","objectPath","map","parameter","formattedValue","replace","replaceAll","updateHeaderDataPath","headerData","data","path","getObjectPageCardManifestForPreview","fetchOptions","componentName","resourceBundle","keyParameters","_temp4","contentUrl","includes","_temp3","includeActions","cardManifestWithResolvedI18nTexts","__exports","__esModule"],"sources":["RetrieveCard.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport { convertIntegrationCardToAdaptive } from \"sap/cards/ap/transpiler/cardTranspiler/Transpile\";\nimport SelectionVariant from \"sap/fe/navigation/SelectionVariant\";\nimport Component from \"sap/ui/core/Component\";\nimport type { CardManifest } from \"sap/ui/integration/widgets/Card\";\nimport { AppManifest, ApplicationInfo, ODataModelVersion, fetchApplicationInfo } from \"../helpers/ApplicationInfo\";\nimport { resolvei18nTextsForIntegrationCard } from \"../helpers/I18nHelper\";\nimport { createContextParameter } from \"../odata/ODataUtils\";\n/**\n * The card types\n *\n * @alias sap.cards.ap.common.services.RetrieveCard.CardTypes\n * @private\n * @restricted sap.fe, sap.ui.generic.app\n */\nexport enum CardTypes {\n\t/**\n\t * Integration card\n\t * @restricted sap.fe, sap.ui.generic.app\n\t */\n\tINTEGRATION = \"integration\",\n\t/**\n\t * Adaptive card\n\t * @restricted sap.fe, sap.ui.generic.app\n\t */\n\tADAPTIVE = \"adaptive\"\n}\ntype CardHostParam = {\n\tcomponentName: string;\n\tentitySet: string;\n\tcardType?: CardTypes;\n};\ntype SelectionVariantJSON = {\n\tSelectionVariantID?: string;\n\tPresentationVariantID?: string;\n\tText?: string;\n\tODataFilterExpression?: string;\n\tVersion?: string;\n\tFilterContextUrl?: string;\n\tParameterContextUrl?: string;\n};\n/**\n * The options for fetching the card manifest\n *\n * @alias sap.cards.ap.common.services.RetrieveCard.CardManifestFetchOptions\n * @private\n * @restricted sap.fe, sap.ui.generic.app\n */\ntype CardManifestFetchOptions = {\n\t/**\n\t * Defines the card type\n\t * @restricted sap.fe, sap.ui.generic.app\n\t */\n\tcardType?: CardTypes;\n\t/**\n\t * Defines include actions\n\t * @restricted sap.fe, sap.ui.generic.app\n\t */\n\tincludeActions?: boolean;\n\t/**\n\t * Defines the hide Actions\n\t */\n\thideActions?: boolean;\n\t/**\n\t * Checks whether the app is running in design mode or not will be used to invalidate resource bundle cache and for other design time specific operations\n\t */\n\tisDesignMode?: boolean;\n};\n\ntype KeyParameter = {\n\tkey: string;\n\tformattedValue: string;\n};\n\n/**\n * Fetches the card path from the application manifest\n *\n * @param {CardType} type - The type of card\n * @param {string} entitySet - The entity set\n * @param {AppManifest} applicationManifest - The application manifest\n * @returns The card path\n */\nexport const getCardPath = (type: CardTypes, entitySet: string, applicationManifest: AppManifest) => {\n\tconst manifest = type === CardTypes.INTEGRATION ? \"manifest.json\" : \"adaptive-manifest.json\";\n\tconst sapCardsAP = applicationManifest[\"sap.cards.ap\"];\n\n\tif (sapCardsAP === undefined || Object.keys(sapCardsAP).length === 0) {\n\t\treturn \"\";\n\t}\n\n\tconst cardsConfig = sapCardsAP[\"embeds\"][\"ObjectPage\"];\n\tif (cardsConfig === undefined || Object.keys(cardsConfig[\"manifests\"]).length === 0) {\n\t\treturn \"\";\n\t}\n\n\tconst defaultCard = cardsConfig[\"manifests\"][entitySet || cardsConfig.default][0];\n\tconst localUri = defaultCard.localUri.endsWith(\"/\") ? defaultCard.localUri : defaultCard.localUri + \"/\";\n\treturn \"/\" + localUri + manifest;\n};\n\n/**\n * clean up the unnecessary variant information\n *\n * @param selectionVariant\n * @returns\n */\nconst cleanupVariantInformation = (selectionVariant: SelectionVariantJSON) => {\n\tif (selectionVariant.hasOwnProperty(\"SelectionVariantID\")) {\n\t\tdelete selectionVariant.SelectionVariantID;\n\t} else if (selectionVariant.hasOwnProperty(\"PresentationVariantID\")) {\n\t\tdelete selectionVariant.PresentationVariantID;\n\t}\n\tdelete selectionVariant.Text;\n\tdelete selectionVariant.ODataFilterExpression;\n\tdelete selectionVariant.Version;\n\tdelete selectionVariant.FilterContextUrl;\n\tdelete selectionVariant.ParameterContextUrl;\n\n\treturn selectionVariant;\n};\n\n/**\n * Fetches the manifest from the given url\n *\n * @param {string} url - The url of the manifest\n * @returns The manifest\n */\nexport const fetchManifest = async (url: string) => {\n\ttry {\n\t\tconst response = await fetch(url);\n\t\treturn await response.json();\n\t} catch (error) {\n\t\treturn null;\n\t}\n};\n/**\n * Fetches the card manifest for the object page\n *\n * @param {Component} appComponent\n * @param {CardHostParam} hostOptions\n * @param {Boolean} isDesignMode\n * @returns The card manifest\n * @private\n */\nexport const _getObjectPageCardManifest = async function (\n\tappComponent: Component,\n\thostOptions: CardHostParam,\n\tisDesignMode: boolean = false\n) {\n\tconst { entitySet, cardType } = hostOptions;\n\tlet applicationManifest = appComponent.getManifest() as AppManifest;\n\tconst sapPlatformAbap = applicationManifest[\"sap.platform.abap\"];\n\tconst applicationUrlOnAbap = sapPlatformAbap?.uri || \"\";\n\n\tif (isDesignMode) {\n\t\tapplicationManifest = await fetchManifest(applicationUrlOnAbap + \"/manifest.json\");\n\t}\n\tconst cardsPath = getCardPath(cardType || CardTypes.INTEGRATION, entitySet, applicationManifest);\n\n\tif (cardsPath.length === 0) {\n\t\treturn Promise.reject(\"No cards available for this application\");\n\t}\n\n\tconst cardUrl = applicationUrlOnAbap.endsWith(\"/\")\n\t\t? applicationUrlOnAbap.substring(0, applicationUrlOnAbap.length - 1) + cardsPath\n\t\t: applicationUrlOnAbap + cardsPath;\n\n\treturn fetchManifest(cardUrl);\n};\n\n/**\n * Add actions to the card header\n *  - ibnTarget contains the semantic object and action\n *  - ibnParams contains the context parameters and sap-xapp-state-data - which is the stringified selection variant of the context parameters\n *\n * @param cardManifest\n * @param applicationInfo\n */\nconst addActionsToCardHeader = async function (cardManifest: CardManifest, applicationInfo: ApplicationInfo) {\n\tconst { semanticObject, action, entitySetWithObjectContext, appModel, odataModel } = applicationInfo;\n\tconst header = cardManifest[\"sap.card\"][\"header\"];\n\tconst ibnParams: Record<string, string> = {};\n\tconst selectionVariant = new SelectionVariant();\n\tconst isODataV4 = odataModel === ODataModelVersion.V4;\n\tconst context = await createContextParameter(entitySetWithObjectContext, appModel, isODataV4);\n\n\tcontext.split(\",\").forEach(function (param) {\n\t\tconst [key, value] = param.split(\"=\");\n\t\tibnParams[key] = value;\n\t\tselectionVariant.addSelectOption(key, \"I\", \"EQ\", value);\n\t});\n\tibnParams[\"sap-xapp-state-data\"] = JSON.stringify({\n\t\tselectionVariant: cleanupVariantInformation(selectionVariant.toJSONObject())\n\t});\n\theader.actions = [\n\t\t{\n\t\t\ttype: \"Navigation\",\n\t\t\tparameters: {\n\t\t\t\tibnTarget: { semanticObject, action },\n\t\t\t\tibnParams\n\t\t\t}\n\t\t}\n\t];\n};\n/**\n * Checks if the leanDT card exists in the application at runtime or not\n *\n * @param appComponent\n * @param isDesignMode\n * @returns boolean\n */\nconst checkIfCardExists = (appComponent: Component, isDesignMode: boolean = false): boolean => {\n\tconst mApplicationManifest = appComponent.getManifest() as AppManifest;\n\treturn !(!mApplicationManifest[\"sap.cards.ap\"] && !isDesignMode);\n};\n\n/**\n * Function to handle the hide actions for the card\n *\n * @param appComponent\n * @param mManifest\n */\nconst handleHideActions = function (appComponent: Component, mManifest: CardManifest) {\n\tconst appManifest = appComponent.getManifest() as AppManifest;\n\tconst cardsConfig = appManifest[\"sap.cards.ap\"]?.embeds.ObjectPage;\n\n\tif (cardsConfig && Object.keys(cardsConfig[\"manifests\"]).length > 0) {\n\t\tconst defaultEntitySet = cardsConfig?.[\"default\"];\n\t\tconst hideActions = (defaultEntitySet && cardsConfig[\"manifests\"][defaultEntitySet]?.[0]?.hideActions) || false;\n\t\tconst mParameters = mManifest?.[\"sap.card\"]?.configuration?.parameters;\n\n\t\tif (hideActions && mParameters?._adaptiveFooterActionParameters) {\n\t\t\tdelete mParameters[\"_adaptiveFooterActionParameters\"];\n\t\t}\n\t\tif (hideActions && mParameters?.footerActionParameters) {\n\t\t\tdelete mParameters[\"footerActionParameters\"];\n\t\t}\n\t\tif (hideActions && mManifest?.[\"sap.card\"]?.footer) {\n\t\t\tdelete mManifest[\"sap.card\"][\"footer\"];\n\t\t}\n\t}\n};\n\n/**\n * Fetches key parameters for the given application component.\n *\n * @param {Component} appComponent - The application component.\n * @returns {Promise<KeyParameter[]>} - A promise that resolves to an array of key parameters.\n */\nexport const getKeyParameters = async (appComponent: Component): Promise<KeyParameter[]> => {\n\tconst applicationInfo = await fetchApplicationInfo(appComponent);\n\tconst { entitySetWithObjectContext, appModel, odataModel } = applicationInfo;\n\tconst bODataV4 = odataModel === ODataModelVersion.V4;\n\tconst objectPath = await createContextParameter(entitySetWithObjectContext, appModel, bODataV4);\n\n\treturn objectPath.split(\",\").map((parameter) => {\n\t\tconst [key, value] = parameter.split(\"=\");\n\t\tconst formattedValue = value.replace(\"guid\", \"\").replaceAll(\"'\", \"\");\n\n\t\treturn { key, formattedValue };\n\t});\n};\n\n/**\n * Updates the data path of the card header in the provided card manifest by reference.\n *\n * @param {CardManifest} cardManifest - The card manifest object that contains the header data.\n */\nfunction updateHeaderDataPath(cardManifest: CardManifest) {\n\tconst headerData = cardManifest[\"sap.card\"].header.data;\n\n\tif (headerData?.path && headerData.path !== \"/header/d/\") {\n\t\theaderData.path = \"/header/d/\";\n\t}\n}\n\n/**\n * Fetches the card manifest for the object page\n *\n * @param {Component} appComponent The root component of the application\n * @param {CardManifestFetchOptions} fetchOptions The options\n * @returns {Promise<any>} The card manifest\n * @private\n * @since 1.124.0\n * @restricted sap.fe, sap.ui.generic.app\n */\nexport const getObjectPageCardManifestForPreview = async function (appComponent: Component, fetchOptions?: CardManifestFetchOptions) {\n\tconst isDesignMode = fetchOptions?.isDesignMode;\n\n\tif (!checkIfCardExists(appComponent, isDesignMode ?? false)) {\n\t\treturn Promise.reject(\"No cards available for this application\");\n\t}\n\n\tconst applicationInfo = await fetchApplicationInfo(appComponent, { isDesignMode });\n\tconst { componentName, entitySet, context, resourceBundle, semanticObject, action } = applicationInfo;\n\tconst hostOptions = {\n\t\tcardType: CardTypes.INTEGRATION,\n\t\tcomponentName: componentName,\n\t\tentitySet: entitySet,\n\t\tcontext\n\t};\n\n\tconst cardManifest = await _getObjectPageCardManifest(appComponent, hostOptions, fetchOptions?.isDesignMode ?? false);\n\n\tif (!cardManifest || Object.keys(cardManifest).length === 0) {\n\t\treturn Promise.reject(\"No cards available for this application\");\n\t}\n\n\tconst keyParameters = await getKeyParameters(appComponent);\n\n\tif (fetchOptions?.hideActions ?? true) {\n\t\thandleHideActions(appComponent, cardManifest);\n\t}\n\n\tconst cardType = fetchOptions?.cardType || CardTypes.INTEGRATION;\n\tif (cardType === CardTypes.INTEGRATION) {\n\t\tcardManifest[\"sap.card\"][\"data\"][\"request\"][\"headers\"][\"Accept-Language\"] ??= \"{{parameters.LOCALE}}\";\n\t\tconst parameters = cardManifest[\"sap.card\"].configuration.parameters;\n\t\tconst data = cardManifest[\"sap.card\"][\"data\"];\n\t\tconst contentUrl = data[\"request\"][\"batch\"][\"content\"][\"url\"];\n\t\tif (contentUrl.includes(\"{{parameters.contextParameters}}\")) {\n\t\t\t/**\n\t\t\t * Replace the contextParameters with the object context\n\t\t\t * This is required for the integration card to fetch the data until all the manifests are regenerated.\n\t\t\t */\n\t\t\tcardManifest[\"sap.card\"][\"configuration\"][\"parameters\"][\"contextParameters\"] = {\n\t\t\t\ttype: \"string\",\n\t\t\t\tvalue: hostOptions.context\n\t\t\t};\n\t\t}\n\t\tkeyParameters.forEach((parameter) => {\n\t\t\tif (parameters[parameter.key] !== undefined) {\n\t\t\t\tparameters[parameter.key][\"value\"] = parameter.formattedValue;\n\t\t\t}\n\t\t});\n\n\t\tif (fetchOptions?.includeActions ?? true) {\n\t\t\tawait addActionsToCardHeader(cardManifest, applicationInfo);\n\t\t}\n\n\t\tupdateHeaderDataPath(cardManifest);\n\t\treturn resolvei18nTextsForIntegrationCard(cardManifest, resourceBundle);\n\t} else {\n\t\tconst cardManifestWithResolvedI18nTexts = resolvei18nTextsForIntegrationCard(cardManifest, resourceBundle);\n\t\treturn convertIntegrationCardToAdaptive(cardManifestWithResolvedI18nTexts, `${semanticObject}-${action}`, keyParameters);\n\t}\n};\n"],"mappings":"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","ignoreList":[]}