{"version":3,"file":"CompactFormatterSelection-dbg.js","names":["sap","ui","define","deepClone","Button","CheckBox","ComboBox","CustomListItem","FlexBox","HBox","Input","List","Select","StepInput","Text","VBox","Control","Item","ListItem","JSONModel","____config_FormatterOptions","ODataUtils","getFormatterConfiguration","CompactFormatterSelection","extend","renderer","apiVersion","render","rm","control","getType","_deleteButton","setVisible","_applyButton","openStart","openEnd","renderControl","_selectorControl","_List","close","metadata","properties","type","formatters","aggregations","_list","multiple","visibility","events","change","parameters","value","constructor","_constructor","settings","Control.prototype.constructor.call","this","init","_init","Control.prototype.init.call","setFormatters","_setFormatters","setAggregation","setProperty","model","getModel","selectedProperty","getProperty","emptyObj","selectedFormatter","find","formatter","property","getData","configuration","name","createControl","formatterName","i18nModel","displayName","getObject","splice","_refreshControl","setSelectedKey","listModel","listItems","bindItems","path","template","content","justifyContent","bindAggregation","factory","_createParametersControl","bind","setModel","_createControl","formatterConfigList","isDateType","isPropertyTypeDate","isNumberType","filter","formatterConfig","visible","formatterListModel","formattersList","width","items","key","text","onFormatterSelected","addStyleClass","icon","press","deleteFormatter","applyFormatter","id","context","propertyType","inputControl","hBoxItems","selected","_createSelectControl","options","flexBoxItems","i","length","currentProperty","rowItem","setDefaultStepInputValue","bindingInfo","min","max","push","hBox","direction","_setDefaultStepInputValue","prop","defaultValue","selectedKey","propertyOptions","item","addItem","_onFormatterSelected","event","targetProperty","source","getSource","getSelectedKey","isSelectedKey","Object","assign","_applyFormatter","listItemsData","_updatePropertyValueFormatters","propertyValueFormatters","fireEvent","_deleteFormatter","getFormatters","index","forEach","propertyValueFormatter","parameterLength"],"sources":["CompactFormatterSelection.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport deepClone from \"sap/base/util/deepClone\";\nimport Button from \"sap/m/Button\";\nimport CheckBox from \"sap/m/CheckBox\";\nimport ComboBox from \"sap/m/ComboBox\";\nimport CustomListItem from \"sap/m/CustomListItem\";\nimport FlexBox from \"sap/m/FlexBox\";\nimport HBox from \"sap/m/HBox\";\nimport Input from \"sap/m/Input\";\nimport List from \"sap/m/List\";\nimport Select from \"sap/m/Select\";\nimport StepInput from \"sap/m/StepInput\";\nimport Text from \"sap/m/Text\";\nimport VBox from \"sap/m/VBox\";\nimport Event from \"sap/ui/base/Event\";\nimport { PropertyBindingInfo } from \"sap/ui/base/ManagedObject\";\nimport Control, { $ControlSettings } from \"sap/ui/core/Control\";\nimport type { MetadataOptions } from \"sap/ui/core/Element\";\nimport Item from \"sap/ui/core/Item\";\nimport ListItem from \"sap/ui/core/ListItem\";\nimport RenderManager from \"sap/ui/core/RenderManager\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport ResourceModel from \"sap/ui/model/resource/ResourceModel\";\nimport { getFormatterConfiguration } from \"../../config/FormatterOptions\";\nimport type { FormatterConfiguration, FormatterConfigurationMap } from \"../../helpers/Formatter\";\nimport type { PropertyInfoMap } from \"../../odata/ODataTypes\";\nimport * as ODataUtils from \"../../odata/ODataUtils\";\n\nexport default interface FormatterSelection {\n\tgetType(): string;\n\tgetFormatters(): FormatterConfigurationMap;\n}\ninterface PropertyType {\n\tvalue: number;\n\tdefaultValue: number;\n}\n\ntype PropertyOptions = {\n\tname: string;\n\tvalue: string;\n};\n\ninterface CompactFormatterSelectionSettings extends $ControlSettings {\n\ttype: string;\n\tformatters: FormatterConfiguration;\n\tchange?: (event: CompactFormatterSelection$ChangeEvent) => void;\n}\n\ninterface CompactFormatterSelectionChangeEventParameters {\n\tvalue?: object;\n}\n\ntype CompactFormatterSelection$ChangeEvent = Event<CompactFormatterSelectionChangeEventParameters>;\n\n/**\n * @namespace sap.cards.ap.generator.app.controls\n */\nexport default class CompactFormatterSelection extends Control {\n\t_selectorControl!: ComboBox;\n\t_deleteButton!: Button;\n\t_applyButton!: Button;\n\t_List!: List;\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\tproperties: {\n\t\t\ttype: \"string\",\n\t\t\tformatters: \"object\"\n\t\t},\n\t\taggregations: {\n\t\t\t_list: { type: \"sap.m.List\", multiple: false, visibility: \"hidden\" }\n\t\t},\n\t\tevents: {\n\t\t\tchange: {\n\t\t\t\tparameters: {\n\t\t\t\t\tvalue: { type: \"object\" }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconstructor(settings: CompactFormatterSelectionSettings) {\n\t\tsuper(settings);\n\t}\n\n\trenderer = {\n\t\tapiVersion: 2,\n\t\trender: function (rm: RenderManager, control: FormatterSelection): void {\n\t\t\tif (control.getType() === \"COMPACT\") {\n\t\t\t\tcontrol._deleteButton.setVisible(false);\n\t\t\t\tcontrol._applyButton.setVisible(false);\n\t\t\t}\n\t\t\trm.openStart(\"div\", control);\n\t\t\trm.openEnd();\n\t\t\trm.renderControl(control._selectorControl);\n\t\t\trm.renderControl(control._deleteButton);\n\t\t\trm.renderControl(control._List);\n\t\t\trm.renderControl(control._applyButton);\n\t\t\trm.close(\"div\");\n\t\t}\n\t};\n\n\t/**\n\t * Initializes the component\n\t * This method creates a new List control (_List) and calls the superclass's init method\n\t *\n\t * @returns {void}\n\t */\n\n\tinit(): void {\n\t\tthis._List = new List();\n\t\tsuper.init();\n\t}\n\n\t/**\n\t * Sets the formatters for the control\n\t *\n\t * @param {FormatterConfigurationMap} formatters - An array of Formatter objects representing the formatters to be set.\n\t * @returns {void}\n\t */\n\n\tsetFormatters(formatters: FormatterConfigurationMap): void {\n\t\tthis.setAggregation(\"_list\", this._List);\n\t\tthis.setProperty(\"formatters\", formatters, true);\n\t\tconst model = this.getModel() as JSONModel;\n\t\tconst selectedProperty = model.getProperty(\"/configuration/advancedFormattingOptions/targetFormatterProperty\");\n\t\tconst emptyObj = {} as FormatterConfiguration;\n\t\tlet selectedFormatter: FormatterConfiguration = formatters.find((formatter) => formatter.property === selectedProperty) || emptyObj;\n\t\tconst properties: PropertyInfoMap = model.getData().configuration.properties;\n\t\tconst type = properties.find((property) => property.name === selectedProperty)?.type || \"\";\n\t\tthis.createControl(type);\n\t\tif (\n\t\t\tselectedFormatter.formatterName === \"format.unit\" &&\n\t\t\ttypeof selectedFormatter.parameters?.[1].properties?.[0].value === \"number\"\n\t\t) {\n\t\t\tconst i18nModel = this.getModel(\"i18n\") as ResourceModel;\n\t\t\tselectedFormatter.formatterName = \"format.float\";\n\t\t\tselectedFormatter.displayName = i18nModel.getObject(\"FORMAT_FLOAT\");\n\t\t\tif (selectedFormatter.parameters) {\n\t\t\t\tselectedFormatter.parameters[0] = selectedFormatter.parameters[1];\n\t\t\t}\n\t\t\tselectedFormatter.parameters?.splice(1, 1);\n\t\t} else if (selectedFormatter.formatterName === \"format.unit\") {\n\t\t\tselectedFormatter = emptyObj;\n\t\t}\n\t\tthis._refreshControl(selectedFormatter);\n\t\tif (selectedFormatter.formatterName) {\n\t\t\tthis._selectorControl.setSelectedKey(selectedFormatter.formatterName);\n\t\t}\n\t}\n\n\t/**\n\t * Refreshes the control with the provided formatter\n\t * @param {FormatterConfiguration} formatter - The formatter to be used for refreshing the control\n\t * @returns {void}\n\t * @private\n\t */\n\n\t_refreshControl(formatter: FormatterConfiguration): void {\n\t\tconst listModel = new JSONModel({\n\t\t\tlistItems: [formatter]\n\t\t});\n\t\tthis._List\n\t\t\t.bindItems({\n\t\t\t\tpath: \"/listItems\",\n\t\t\t\ttemplate: new CustomListItem({\n\t\t\t\t\tcontent: [\n\t\t\t\t\t\tnew VBox({\n\t\t\t\t\t\t\tjustifyContent: \"SpaceAround\"\n\t\t\t\t\t\t}).bindAggregation(\"items\", {\n\t\t\t\t\t\t\tpath: \"parameters\",\n\t\t\t\t\t\t\tfactory: this._createParametersControl.bind(this)\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t})\n\t\t\t})\n\t\t\t.setModel(listModel);\n\t}\n\n\t/**\n\t * Creates a select control with the formatter list based on the provided type\n\t *\n\t * @param {string} type - The type of the control to be created\n\t * @returns {void}\n\t */\n\n\tcreateControl(type: string): void {\n\t\tconst i18nModel = this.getModel(\"i18n\") as ResourceModel;\n\t\tlet formatterConfigList: FormatterConfigurationMap = deepClone(getFormatterConfiguration());\n\t\tconst isDateType = ODataUtils.isPropertyTypeDate(type);\n\t\tconst isNumberType = type === \"Edm.Decimal\" || type === \"Edm.Int16\" || type === \"Edm.Int32\" || type === \"Edm.Double\";\n\t\tformatterConfigList = formatterConfigList.filter((formatterConfig) => formatterConfig.visible === true);\n\t\tif (isDateType) {\n\t\t\tformatterConfigList = formatterConfigList.filter((formatterConfig) => formatterConfig.type === \"Date\");\n\t\t} else if (isNumberType) {\n\t\t\tformatterConfigList = formatterConfigList.filter(\n\t\t\t\t(formatterConfig) => formatterConfig.type === \"numeric\" || formatterConfig.type === \"string | numeric\"\n\t\t\t);\n\t\t} else {\n\t\t\tformatterConfigList = formatterConfigList.filter(\n\t\t\t\t(formatterConfig) => formatterConfig.type === \"string\" || formatterConfig.type === \"string | numeric\"\n\t\t\t);\n\t\t}\n\t\tconst formatterListModel = new JSONModel({\n\t\t\tformattersList: formatterConfigList\n\t\t});\n\t\tthis._selectorControl = new ComboBox({\n\t\t\twidth: \"80%\",\n\t\t\titems: {\n\t\t\t\tpath: \"/formattersList\",\n\t\t\t\ttemplate: new ListItem({\n\t\t\t\t\tkey: \"{formatterName}\",\n\t\t\t\t\ttext: \"{displayName}\"\n\t\t\t\t})\n\t\t\t},\n\t\t\tchange: this.onFormatterSelected.bind(this)\n\t\t})\n\t\t\t.addStyleClass(\"sapUiTinyMarginBegin\")\n\t\t\t.setModel(formatterListModel);\n\t\tthis._deleteButton = new Button({\n\t\t\ticon: \"sap-icon://delete\",\n\t\t\ttype: \"Transparent\",\n\t\t\tpress: this.deleteFormatter.bind(this)\n\t\t});\n\t\tthis._applyButton = new Button({\n\t\t\ttext: i18nModel.getObject(\"FORMATTER_CONTROL_APPLY\"),\n\t\t\ttype: \"Ghost\",\n\t\t\tpress: this.applyFormatter.bind(this)\n\t\t});\n\t}\n\n\t/**\n\t * Creates a control for displaying and editing parameters based on the provided property type\n\t *\n\t * @param {string} id - ID of the control\n\t * @param {*} context - context object containing information about the property\n\t * @returns {sap.ui.core.Control} A control for displaying and editing parameters\n\t * @private\n\t */\n\n\t_createParametersControl(id: string, context: any): Control {\n\t\tconst property = context.getProperty();\n\t\tconst propertyType = property.type;\n\t\tlet inputControl: CheckBox | Select | Input | StepInput,\n\t\t\thBoxItems: (Text | CheckBox | Select | Input)[] = [];\n\t\tif (propertyType !== \"object\") {\n\t\t\thBoxItems = [\n\t\t\t\tnew Text({\n\t\t\t\t\twidth: \"200px\",\n\t\t\t\t\ttext: \"{displayName} : \"\n\t\t\t\t}).addStyleClass(\"sapUiTinyMarginTop sapUiTinyMarginBegin\")\n\t\t\t];\n\t\t}\n\t\tswitch (propertyType) {\n\t\t\tcase \"boolean\":\n\t\t\t\tinputControl = new CheckBox({ width: \"116px\", selected: \"{selected}\" });\n\t\t\t\tbreak;\n\t\t\tcase \"enum\":\n\t\t\t\tinputControl = this._createSelectControl(\"{selectedKey}\", property.options);\n\t\t\t\tbreak;\n\t\t\tcase \"object\": {\n\t\t\t\tconst flexBoxItems = [];\n\t\t\t\tfor (let i = 0; i < property.properties.length; i++) {\n\t\t\t\t\tconst currentProperty = property.properties[i];\n\t\t\t\t\tif (currentProperty && typeof currentProperty.value !== \"object\") {\n\t\t\t\t\t\tconst rowItem = [];\n\t\t\t\t\t\tconst displayName = currentProperty.displayName;\n\t\t\t\t\t\tconst propertyType = currentProperty.type;\n\t\t\t\t\t\tswitch (propertyType) {\n\t\t\t\t\t\t\tcase \"boolean\":\n\t\t\t\t\t\t\t\tinputControl = new CheckBox({\n\t\t\t\t\t\t\t\t\twidth: \"116px\",\n\t\t\t\t\t\t\t\t\tselected: { path: \"properties/\" + i + \"/selected/\" }\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"enum\":\n\t\t\t\t\t\t\t\tinputControl = this._createSelectControl(\"{properties/\" + i + \"/selectedKey}\", currentProperty.options);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"number\":\n\t\t\t\t\t\t\t\tthis.setDefaultStepInputValue(currentProperty);\n\t\t\t\t\t\t\t\tconst bindingInfo: PropertyBindingInfo = { path: `properties/${i}/value` };\n\t\t\t\t\t\t\t\tinputControl = new StepInput({ width: \"116px\", min: 0, max: 2, value: bindingInfo });\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tinputControl = new Input({ width: \"176px\", value: \"{properties/\" + i + \"/value}\" });\n\t\t\t\t\t\t}\n\t\t\t\t\t\trowItem.push(\n\t\t\t\t\t\t\tnew Text({\n\t\t\t\t\t\t\t\twidth: \"200px\",\n\t\t\t\t\t\t\t\ttext: displayName + \" : \"\n\t\t\t\t\t\t\t}).addStyleClass(\"sapUiTinyMarginTop sapUiTinyMarginBegin\")\n\t\t\t\t\t\t);\n\t\t\t\t\t\trowItem.push(inputControl);\n\t\t\t\t\t\tconst hBox = new HBox({ justifyContent: \"Start\", items: rowItem });\n\t\t\t\t\t\tflexBoxItems.push(hBox);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn new FlexBox({ items: flexBoxItems, direction: \"Column\" });\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tinputControl = new Input({ width: \"108px\", value: \"{value}\" });\n\t\t\t\tbreak;\n\t\t}\n\t\thBoxItems.push(inputControl);\n\t\treturn new HBox({ justifyContent: \"Start\", items: hBoxItems });\n\t}\n\n\tsetDefaultStepInputValue(prop: PropertyType) {\n\t\tprop.value = prop.value >= 0 ? prop.value : prop.defaultValue;\n\t\treturn prop;\n\t}\n\t/**\n\t * Creates a select control based on the provided selected key and property options\n\t *\n\t * @param {string} selectedKey - The selected key for the select control\n\t * @param {Array<PropertyOptions>} propertyOptions - An array of propertyOptions representing the options for the select control\n\t * @returns {sap.m.Select} Select control populated with the provided property options\n\t * @private\n\t */\n\n\t_createSelectControl(selectedKey: string, propertyOptions: Array<PropertyOptions>) {\n\t\tconst inputControl = new Select({\n\t\t\twidth: \"108px\",\n\t\t\tselectedKey: selectedKey\n\t\t});\n\t\tfor (const item of propertyOptions) {\n\t\t\tinputControl.addItem(\n\t\t\t\tnew Item({\n\t\t\t\t\ttext: item.name,\n\t\t\t\t\tkey: item.value\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\treturn inputControl;\n\t}\n\n\t/**\n\t * Handles the event when a formatter is selected\n\t *\n\t * @param {Event} event - The event object representing the selection event\n\t * @returns {void}\n\t */\n\n\tonFormatterSelected(event: Event): void {\n\t\tconst model = this.getModel() as JSONModel;\n\t\tconst targetProperty = model.getProperty(\"/configuration/advancedFormattingOptions/targetFormatterProperty\");\n\t\tconst source = event.getSource() as ComboBox;\n\t\tconst selectedKey = source.getSelectedKey();\n\t\tconst formatterConfig = getFormatterConfiguration().find((formatter) => {\n\t\t\treturn formatter.formatterName === selectedKey;\n\t\t}) as FormatterConfiguration;\n\n\t\tconst isSelectedKey = selectedKey && formatterConfig ? true : false;\n\t\tmodel.setProperty(\"/configuration/advancedFormattingOptions/isFormatterApplied\", isSelectedKey);\n\n\t\tthis._refreshControl(Object.assign({ property: targetProperty }, deepClone(formatterConfig)));\n\t}\n\n\t/**\n\t * Applies the selected formatter to the control, fires the change event with the updated propertyValueFormatters\n\t *\n\t * @returns {void}\n\t */\n\n\tapplyFormatter(): void {\n\t\tconst listItemsData = (this._List.getModel() as JSONModel).getProperty(\"/listItems\");\n\t\tthis._updatePropertyValueFormatters(listItemsData[0]);\n\t\tconst propertyValueFormatters = (this.getModel() as JSONModel).getProperty(\n\t\t\t\"/configuration/advancedFormattingOptions/propertyValueFormatters\"\n\t\t);\n\t\tthis.fireEvent(\"change\", {\n\t\t\tvalue: propertyValueFormatters\n\t\t});\n\t}\n\n\t/**\n\t * Deletes the selected formatter from the control, fires the change event with the updated propertyValueFormatters\n\t *\n\t * @returns {void}\n\t */\n\n\tdeleteFormatter(): void {\n\t\tconst model = this.getModel() as JSONModel;\n\t\tconst targetProperty = model.getProperty(\"/configuration/advancedFormattingOptions/targetFormatterProperty\");\n\t\tconst propertyValueFormatters = this.getFormatters() as FormatterConfigurationMap;\n\t\tlet index = -1;\n\t\tpropertyValueFormatters.forEach((propertyValueFormatter, i) => {\n\t\t\tif (propertyValueFormatter.property === targetProperty) {\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t});\n\t\tif (index !== -1) {\n\t\t\tpropertyValueFormatters.splice(index, 1);\n\t\t}\n\t\tmodel.setProperty(\"/configuration/advancedFormattingOptions/propertyValueFormatters\", propertyValueFormatters);\n\t\tconst emptyObj = {} as FormatterConfiguration;\n\t\tthis._refreshControl(emptyObj);\n\t\tthis.fireEvent(\"change\", {\n\t\t\tvalue: propertyValueFormatters\n\t\t});\n\t\tthis._selectorControl.setSelectedKey(\"\");\n\t}\n\n\t/**\n\t * Updates the propertyValueFormatters model with the provided formatter configuration\n\t *\n\t * @param formatterConfig - The formatter configuration to be updated\n\t * @returns {void}\n\t * @private\n\t */\n\t_updatePropertyValueFormatters(formatterConfig: FormatterConfiguration): void {\n\t\tif (formatterConfig.parameters) {\n\t\t\tconst parameterLength = formatterConfig.parameters.length;\n\n\t\t\tfor (let i = 0; i < parameterLength; i++) {\n\t\t\t\tif (formatterConfig.parameters[i].type === \"string\") {\n\t\t\t\t\t// If a parameter is of type string, set the value to an empty string if it is undefined\n\t\t\t\t\tformatterConfig.parameters[i].value = formatterConfig.parameters[i].value || formatterConfig.parameters[i].defaultValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst targetProperty = formatterConfig.property;\n\t\tconst propertyValueFormatters = this.getFormatters() as FormatterConfigurationMap;\n\t\tlet index = -1;\n\t\tpropertyValueFormatters.forEach((propertyValueFormatter, i) => {\n\t\t\tif (propertyValueFormatter.property === targetProperty) {\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t});\n\t\tif (index !== -1) {\n\t\t\tpropertyValueFormatters[index] = formatterConfig;\n\t\t} else {\n\t\t\tpropertyValueFormatters.push(formatterConfig);\n\t\t}\n\t\t(this.getModel() as JSONModel).setProperty(\n\t\t\t\"/configuration/advancedFormattingOptions/propertyValueFormatters\",\n\t\t\tpropertyValueFormatters\n\t\t);\n\t}\n}\n"],"mappings":"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","ignoreList":[]}