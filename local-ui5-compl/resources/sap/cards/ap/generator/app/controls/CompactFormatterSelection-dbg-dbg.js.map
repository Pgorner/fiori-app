{"version":3,"file":"CompactFormatterSelection-dbg-dbg.js","names":["sap","ui","define","deepClone","Button","CheckBox","ComboBox","CustomListItem","FlexBox","HBox","Input","List","Select","StepInput","Text","VBox","Control","Item","ListItem","JSONModel","____config_FormatterOptions","ODataUtils","getFormatterConfiguration","CompactFormatterSelection","extend","renderer","apiVersion","render","rm","control","getType","_deleteButton","setVisible","_applyButton","openStart","openEnd","renderControl","_selectorControl","_List","close","metadata","properties","type","formatters","aggregations","_list","multiple","visibility","events","change","parameters","value","constructor","_constructor","settings","Control.prototype.constructor.call","init","_init","Control.prototype.init.call","setFormatters","_setFormatters","setAggregation","setProperty","model","getModel","selectedProperty","getProperty","emptyObj","selectedFormatter","find","formatter","property","getData","configuration","name","createControl","formatterName","i18nModel","displayName","getObject","splice","_refreshControl","setSelectedKey","listModel","listItems","bindItems","path","template","content","justifyContent","bindAggregation","factory","_createParametersControl","bind","setModel","_createControl","formatterConfigList","isDateType","isPropertyTypeDate","isNumberType","filter","formatterConfig","visible","formatterListModel","formattersList","width","items","key","text","onFormatterSelected","addStyleClass","icon","press","deleteFormatter","applyFormatter","id","context","propertyType","inputControl","hBoxItems","selected","_createSelectControl","options","flexBoxItems","i","length","currentProperty","rowItem","setDefaultStepInputValue","bindingInfo","min","max","push","hBox","direction","_setDefaultStepInputValue","prop","defaultValue","selectedKey","propertyOptions","item","addItem","_onFormatterSelected","event","targetProperty","source","getSource","getSelectedKey","isSelectedKey","Object","assign","_applyFormatter","listItemsData","_updatePropertyValueFormatters","propertyValueFormatters","fireEvent","_deleteFormatter","getFormatters","index","forEach","propertyValueFormatter","parameterLength"],"sources":["CompactFormatterSelection.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport deepClone from \"sap/base/util/deepClone\";\nimport Button from \"sap/m/Button\";\nimport CheckBox from \"sap/m/CheckBox\";\nimport ComboBox from \"sap/m/ComboBox\";\nimport CustomListItem from \"sap/m/CustomListItem\";\nimport FlexBox from \"sap/m/FlexBox\";\nimport HBox from \"sap/m/HBox\";\nimport Input from \"sap/m/Input\";\nimport List from \"sap/m/List\";\nimport Select from \"sap/m/Select\";\nimport StepInput from \"sap/m/StepInput\";\nimport Text from \"sap/m/Text\";\nimport VBox from \"sap/m/VBox\";\nimport Event from \"sap/ui/base/Event\";\nimport { PropertyBindingInfo } from \"sap/ui/base/ManagedObject\";\nimport Control, { $ControlSettings } from \"sap/ui/core/Control\";\nimport type { MetadataOptions } from \"sap/ui/core/Element\";\nimport Item from \"sap/ui/core/Item\";\nimport ListItem from \"sap/ui/core/ListItem\";\nimport RenderManager from \"sap/ui/core/RenderManager\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport ResourceModel from \"sap/ui/model/resource/ResourceModel\";\nimport { getFormatterConfiguration } from \"../../config/FormatterOptions\";\nimport type { FormatterConfiguration, FormatterConfigurationMap } from \"../../helpers/Formatter\";\nimport type { PropertyInfoMap } from \"../../odata/ODataTypes\";\nimport * as ODataUtils from \"../../odata/ODataUtils\";\n\nexport default interface FormatterSelection {\n\tgetType(): string;\n\tgetFormatters(): FormatterConfigurationMap;\n}\ninterface PropertyType {\n\tvalue: number;\n\tdefaultValue: number;\n}\n\ntype PropertyOptions = {\n\tname: string;\n\tvalue: string;\n};\n\ninterface CompactFormatterSelectionSettings extends $ControlSettings {\n\ttype: string;\n\tformatters: FormatterConfiguration;\n\tchange?: (event: CompactFormatterSelection$ChangeEvent) => void;\n}\n\ninterface CompactFormatterSelectionChangeEventParameters {\n\tvalue?: object;\n}\n\ntype CompactFormatterSelection$ChangeEvent = Event<CompactFormatterSelectionChangeEventParameters>;\n\n/**\n * @namespace sap.cards.ap.generator.app.controls\n */\nexport default class CompactFormatterSelection extends Control {\n\t_selectorControl!: ComboBox;\n\t_deleteButton!: Button;\n\t_applyButton!: Button;\n\t_List!: List;\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\tproperties: {\n\t\t\ttype: \"string\",\n\t\t\tformatters: \"object\"\n\t\t},\n\t\taggregations: {\n\t\t\t_list: { type: \"sap.m.List\", multiple: false, visibility: \"hidden\" }\n\t\t},\n\t\tevents: {\n\t\t\tchange: {\n\t\t\t\tparameters: {\n\t\t\t\t\tvalue: { type: \"object\" }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconstructor(settings: CompactFormatterSelectionSettings) {\n\t\tsuper(settings);\n\t}\n\n\trenderer = {\n\t\tapiVersion: 2,\n\t\trender: function (rm: RenderManager, control: FormatterSelection): void {\n\t\t\tif (control.getType() === \"COMPACT\") {\n\t\t\t\tcontrol._deleteButton.setVisible(false);\n\t\t\t\tcontrol._applyButton.setVisible(false);\n\t\t\t}\n\t\t\trm.openStart(\"div\", control);\n\t\t\trm.openEnd();\n\t\t\trm.renderControl(control._selectorControl);\n\t\t\trm.renderControl(control._deleteButton);\n\t\t\trm.renderControl(control._List);\n\t\t\trm.renderControl(control._applyButton);\n\t\t\trm.close(\"div\");\n\t\t}\n\t};\n\n\t/**\n\t * Initializes the component\n\t * This method creates a new List control (_List) and calls the superclass's init method\n\t *\n\t * @returns {void}\n\t */\n\n\tinit(): void {\n\t\tthis._List = new List();\n\t\tsuper.init();\n\t}\n\n\t/**\n\t * Sets the formatters for the control\n\t *\n\t * @param {FormatterConfigurationMap} formatters - An array of Formatter objects representing the formatters to be set.\n\t * @returns {void}\n\t */\n\n\tsetFormatters(formatters: FormatterConfigurationMap): void {\n\t\tthis.setAggregation(\"_list\", this._List);\n\t\tthis.setProperty(\"formatters\", formatters, true);\n\t\tconst model = this.getModel() as JSONModel;\n\t\tconst selectedProperty = model.getProperty(\"/configuration/advancedFormattingOptions/targetFormatterProperty\");\n\t\tconst emptyObj = {} as FormatterConfiguration;\n\t\tlet selectedFormatter: FormatterConfiguration = formatters.find((formatter) => formatter.property === selectedProperty) || emptyObj;\n\t\tconst properties: PropertyInfoMap = model.getData().configuration.properties;\n\t\tconst type = properties.find((property) => property.name === selectedProperty)?.type || \"\";\n\t\tthis.createControl(type);\n\t\tif (\n\t\t\tselectedFormatter.formatterName === \"format.unit\" &&\n\t\t\ttypeof selectedFormatter.parameters?.[1].properties?.[0].value === \"number\"\n\t\t) {\n\t\t\tconst i18nModel = this.getModel(\"i18n\") as ResourceModel;\n\t\t\tselectedFormatter.formatterName = \"format.float\";\n\t\t\tselectedFormatter.displayName = i18nModel.getObject(\"FORMAT_FLOAT\");\n\t\t\tif (selectedFormatter.parameters) {\n\t\t\t\tselectedFormatter.parameters[0] = selectedFormatter.parameters[1];\n\t\t\t}\n\t\t\tselectedFormatter.parameters?.splice(1, 1);\n\t\t} else if (selectedFormatter.formatterName === \"format.unit\") {\n\t\t\tselectedFormatter = emptyObj;\n\t\t}\n\t\tthis._refreshControl(selectedFormatter);\n\t\tif (selectedFormatter.formatterName) {\n\t\t\tthis._selectorControl.setSelectedKey(selectedFormatter.formatterName);\n\t\t}\n\t}\n\n\t/**\n\t * Refreshes the control with the provided formatter\n\t * @param {FormatterConfiguration} formatter - The formatter to be used for refreshing the control\n\t * @returns {void}\n\t * @private\n\t */\n\n\t_refreshControl(formatter: FormatterConfiguration): void {\n\t\tconst listModel = new JSONModel({\n\t\t\tlistItems: [formatter]\n\t\t});\n\t\tthis._List\n\t\t\t.bindItems({\n\t\t\t\tpath: \"/listItems\",\n\t\t\t\ttemplate: new CustomListItem({\n\t\t\t\t\tcontent: [\n\t\t\t\t\t\tnew VBox({\n\t\t\t\t\t\t\tjustifyContent: \"SpaceAround\"\n\t\t\t\t\t\t}).bindAggregation(\"items\", {\n\t\t\t\t\t\t\tpath: \"parameters\",\n\t\t\t\t\t\t\tfactory: this._createParametersControl.bind(this)\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t})\n\t\t\t})\n\t\t\t.setModel(listModel);\n\t}\n\n\t/**\n\t * Creates a select control with the formatter list based on the provided type\n\t *\n\t * @param {string} type - The type of the control to be created\n\t * @returns {void}\n\t */\n\n\tcreateControl(type: string): void {\n\t\tconst i18nModel = this.getModel(\"i18n\") as ResourceModel;\n\t\tlet formatterConfigList: FormatterConfigurationMap = deepClone(getFormatterConfiguration());\n\t\tconst isDateType = ODataUtils.isPropertyTypeDate(type);\n\t\tconst isNumberType = type === \"Edm.Decimal\" || type === \"Edm.Int16\" || type === \"Edm.Int32\" || type === \"Edm.Double\";\n\t\tformatterConfigList = formatterConfigList.filter((formatterConfig) => formatterConfig.visible === true);\n\t\tif (isDateType) {\n\t\t\tformatterConfigList = formatterConfigList.filter((formatterConfig) => formatterConfig.type === \"Date\");\n\t\t} else if (isNumberType) {\n\t\t\tformatterConfigList = formatterConfigList.filter(\n\t\t\t\t(formatterConfig) => formatterConfig.type === \"numeric\" || formatterConfig.type === \"string | numeric\"\n\t\t\t);\n\t\t} else {\n\t\t\tformatterConfigList = formatterConfigList.filter(\n\t\t\t\t(formatterConfig) => formatterConfig.type === \"string\" || formatterConfig.type === \"string | numeric\"\n\t\t\t);\n\t\t}\n\t\tconst formatterListModel = new JSONModel({\n\t\t\tformattersList: formatterConfigList\n\t\t});\n\t\tthis._selectorControl = new ComboBox({\n\t\t\twidth: \"80%\",\n\t\t\titems: {\n\t\t\t\tpath: \"/formattersList\",\n\t\t\t\ttemplate: new ListItem({\n\t\t\t\t\tkey: \"{formatterName}\",\n\t\t\t\t\ttext: \"{displayName}\"\n\t\t\t\t})\n\t\t\t},\n\t\t\tchange: this.onFormatterSelected.bind(this)\n\t\t})\n\t\t\t.addStyleClass(\"sapUiTinyMarginBegin\")\n\t\t\t.setModel(formatterListModel);\n\t\tthis._deleteButton = new Button({\n\t\t\ticon: \"sap-icon://delete\",\n\t\t\ttype: \"Transparent\",\n\t\t\tpress: this.deleteFormatter.bind(this)\n\t\t});\n\t\tthis._applyButton = new Button({\n\t\t\ttext: i18nModel.getObject(\"FORMATTER_CONTROL_APPLY\"),\n\t\t\ttype: \"Ghost\",\n\t\t\tpress: this.applyFormatter.bind(this)\n\t\t});\n\t}\n\n\t/**\n\t * Creates a control for displaying and editing parameters based on the provided property type\n\t *\n\t * @param {string} id - ID of the control\n\t * @param {*} context - context object containing information about the property\n\t * @returns {sap.ui.core.Control} A control for displaying and editing parameters\n\t * @private\n\t */\n\n\t_createParametersControl(id: string, context: any): Control {\n\t\tconst property = context.getProperty();\n\t\tconst propertyType = property.type;\n\t\tlet inputControl: CheckBox | Select | Input | StepInput,\n\t\t\thBoxItems: (Text | CheckBox | Select | Input)[] = [];\n\t\tif (propertyType !== \"object\") {\n\t\t\thBoxItems = [\n\t\t\t\tnew Text({\n\t\t\t\t\twidth: \"200px\",\n\t\t\t\t\ttext: \"{displayName} : \"\n\t\t\t\t}).addStyleClass(\"sapUiTinyMarginTop sapUiTinyMarginBegin\")\n\t\t\t];\n\t\t}\n\t\tswitch (propertyType) {\n\t\t\tcase \"boolean\":\n\t\t\t\tinputControl = new CheckBox({ width: \"116px\", selected: \"{selected}\" });\n\t\t\t\tbreak;\n\t\t\tcase \"enum\":\n\t\t\t\tinputControl = this._createSelectControl(\"{selectedKey}\", property.options);\n\t\t\t\tbreak;\n\t\t\tcase \"object\": {\n\t\t\t\tconst flexBoxItems = [];\n\t\t\t\tfor (let i = 0; i < property.properties.length; i++) {\n\t\t\t\t\tconst currentProperty = property.properties[i];\n\t\t\t\t\tif (currentProperty && typeof currentProperty.value !== \"object\") {\n\t\t\t\t\t\tconst rowItem = [];\n\t\t\t\t\t\tconst displayName = currentProperty.displayName;\n\t\t\t\t\t\tconst propertyType = currentProperty.type;\n\t\t\t\t\t\tswitch (propertyType) {\n\t\t\t\t\t\t\tcase \"boolean\":\n\t\t\t\t\t\t\t\tinputControl = new CheckBox({\n\t\t\t\t\t\t\t\t\twidth: \"116px\",\n\t\t\t\t\t\t\t\t\tselected: { path: \"properties/\" + i + \"/selected/\" }\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"enum\":\n\t\t\t\t\t\t\t\tinputControl = this._createSelectControl(\"{properties/\" + i + \"/selectedKey}\", currentProperty.options);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"number\":\n\t\t\t\t\t\t\t\tthis.setDefaultStepInputValue(currentProperty);\n\t\t\t\t\t\t\t\tconst bindingInfo: PropertyBindingInfo = { path: `properties/${i}/value` };\n\t\t\t\t\t\t\t\tinputControl = new StepInput({ width: \"116px\", min: 0, max: 2, value: bindingInfo });\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tinputControl = new Input({ width: \"176px\", value: \"{properties/\" + i + \"/value}\" });\n\t\t\t\t\t\t}\n\t\t\t\t\t\trowItem.push(\n\t\t\t\t\t\t\tnew Text({\n\t\t\t\t\t\t\t\twidth: \"200px\",\n\t\t\t\t\t\t\t\ttext: displayName + \" : \"\n\t\t\t\t\t\t\t}).addStyleClass(\"sapUiTinyMarginTop sapUiTinyMarginBegin\")\n\t\t\t\t\t\t);\n\t\t\t\t\t\trowItem.push(inputControl);\n\t\t\t\t\t\tconst hBox = new HBox({ justifyContent: \"Start\", items: rowItem });\n\t\t\t\t\t\tflexBoxItems.push(hBox);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn new FlexBox({ items: flexBoxItems, direction: \"Column\" });\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tinputControl = new Input({ width: \"108px\", value: \"{value}\" });\n\t\t\t\tbreak;\n\t\t}\n\t\thBoxItems.push(inputControl);\n\t\treturn new HBox({ justifyContent: \"Start\", items: hBoxItems });\n\t}\n\n\tsetDefaultStepInputValue(prop: PropertyType) {\n\t\tprop.value = prop.value >= 0 ? prop.value : prop.defaultValue;\n\t\treturn prop;\n\t}\n\t/**\n\t * Creates a select control based on the provided selected key and property options\n\t *\n\t * @param {string} selectedKey - The selected key for the select control\n\t * @param {Array<PropertyOptions>} propertyOptions - An array of propertyOptions representing the options for the select control\n\t * @returns {sap.m.Select} Select control populated with the provided property options\n\t * @private\n\t */\n\n\t_createSelectControl(selectedKey: string, propertyOptions: Array<PropertyOptions>) {\n\t\tconst inputControl = new Select({\n\t\t\twidth: \"108px\",\n\t\t\tselectedKey: selectedKey\n\t\t});\n\t\tfor (const item of propertyOptions) {\n\t\t\tinputControl.addItem(\n\t\t\t\tnew Item({\n\t\t\t\t\ttext: item.name,\n\t\t\t\t\tkey: item.value\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\treturn inputControl;\n\t}\n\n\t/**\n\t * Handles the event when a formatter is selected\n\t *\n\t * @param {Event} event - The event object representing the selection event\n\t * @returns {void}\n\t */\n\n\tonFormatterSelected(event: Event): void {\n\t\tconst model = this.getModel() as JSONModel;\n\t\tconst targetProperty = model.getProperty(\"/configuration/advancedFormattingOptions/targetFormatterProperty\");\n\t\tconst source = event.getSource() as ComboBox;\n\t\tconst selectedKey = source.getSelectedKey();\n\t\tconst formatterConfig = getFormatterConfiguration().find((formatter) => {\n\t\t\treturn formatter.formatterName === selectedKey;\n\t\t}) as FormatterConfiguration;\n\n\t\tconst isSelectedKey = selectedKey && formatterConfig ? true : false;\n\t\tmodel.setProperty(\"/configuration/advancedFormattingOptions/isFormatterApplied\", isSelectedKey);\n\n\t\tthis._refreshControl(Object.assign({ property: targetProperty }, deepClone(formatterConfig)));\n\t}\n\n\t/**\n\t * Applies the selected formatter to the control, fires the change event with the updated propertyValueFormatters\n\t *\n\t * @returns {void}\n\t */\n\n\tapplyFormatter(): void {\n\t\tconst listItemsData = (this._List.getModel() as JSONModel).getProperty(\"/listItems\");\n\t\tthis._updatePropertyValueFormatters(listItemsData[0]);\n\t\tconst propertyValueFormatters = (this.getModel() as JSONModel).getProperty(\n\t\t\t\"/configuration/advancedFormattingOptions/propertyValueFormatters\"\n\t\t);\n\t\tthis.fireEvent(\"change\", {\n\t\t\tvalue: propertyValueFormatters\n\t\t});\n\t}\n\n\t/**\n\t * Deletes the selected formatter from the control, fires the change event with the updated propertyValueFormatters\n\t *\n\t * @returns {void}\n\t */\n\n\tdeleteFormatter(): void {\n\t\tconst model = this.getModel() as JSONModel;\n\t\tconst targetProperty = model.getProperty(\"/configuration/advancedFormattingOptions/targetFormatterProperty\");\n\t\tconst propertyValueFormatters = this.getFormatters() as FormatterConfigurationMap;\n\t\tlet index = -1;\n\t\tpropertyValueFormatters.forEach((propertyValueFormatter, i) => {\n\t\t\tif (propertyValueFormatter.property === targetProperty) {\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t});\n\t\tif (index !== -1) {\n\t\t\tpropertyValueFormatters.splice(index, 1);\n\t\t}\n\t\tmodel.setProperty(\"/configuration/advancedFormattingOptions/propertyValueFormatters\", propertyValueFormatters);\n\t\tconst emptyObj = {} as FormatterConfiguration;\n\t\tthis._refreshControl(emptyObj);\n\t\tthis.fireEvent(\"change\", {\n\t\t\tvalue: propertyValueFormatters\n\t\t});\n\t\tthis._selectorControl.setSelectedKey(\"\");\n\t}\n\n\t/**\n\t * Updates the propertyValueFormatters model with the provided formatter configuration\n\t *\n\t * @param formatterConfig - The formatter configuration to be updated\n\t * @returns {void}\n\t * @private\n\t */\n\t_updatePropertyValueFormatters(formatterConfig: FormatterConfiguration): void {\n\t\tif (formatterConfig.parameters) {\n\t\t\tconst parameterLength = formatterConfig.parameters.length;\n\n\t\t\tfor (let i = 0; i < parameterLength; i++) {\n\t\t\t\tif (formatterConfig.parameters[i].type === \"string\") {\n\t\t\t\t\t// If a parameter is of type string, set the value to an empty string if it is undefined\n\t\t\t\t\tformatterConfig.parameters[i].value = formatterConfig.parameters[i].value || formatterConfig.parameters[i].defaultValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst targetProperty = formatterConfig.property;\n\t\tconst propertyValueFormatters = this.getFormatters() as FormatterConfigurationMap;\n\t\tlet index = -1;\n\t\tpropertyValueFormatters.forEach((propertyValueFormatter, i) => {\n\t\t\tif (propertyValueFormatter.property === targetProperty) {\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t});\n\t\tif (index !== -1) {\n\t\t\tpropertyValueFormatters[index] = formatterConfig;\n\t\t} else {\n\t\t\tpropertyValueFormatters.push(formatterConfig);\n\t\t}\n\t\t(this.getModel() as JSONModel).setProperty(\n\t\t\t\"/configuration/advancedFormattingOptions/propertyValueFormatters\",\n\t\t\tpropertyValueFormatters\n\t\t);\n\t}\n}\n"],"mappings":"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","ignoreList":[]}