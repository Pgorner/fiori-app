{"version":3,"file":"Formatter-dbg.js","names":["sap","ui","define","sap_ui_integration_formatters_DateTimeFormatter","ODataUtils","date","dateTime","formatPropertyDropdownValues","property","value","type","UTC","length","label","createFormatterExpression","oFormatterDetail","aFormatterArguments","push","content","formatterName","mOptions","parameters","forEach","mParameters","properties","oProperties","selected","name","parseFloat","selectedKey","JSON","stringify","concat","i","aFormatter","bindingOrFormatterArray","hasBindingOrFormatter","some","item","startsWith","getDefaultPropertyFormatterConfig","i18nModel","dateFormatterConfig","isPropertyTypeDate","configData","getDateFormatterConfiguration","getDefaultPropertyFormatterConfigForNavProperties","navProperties","navProperty","propertyName","propertyType","displayName","getText","defaultValue","visible","__exports","__esModule"],"sources":["Formatter.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport { date, dateTime } from \"sap/ui/integration/formatters/DateTimeFormatter\";\nimport type { PropertyInfo, PropertyInfoMap } from \"../odata/ODataTypes\";\nimport * as ODataUtils from \"../odata/ODataUtils\";\n\nexport const formatPropertyDropdownValues = function (property: PropertyInfo, value: string) {\n\tconst type = property.type;\n\tswitch (type) {\n\t\tcase \"Edm.Boolean\":\n\t\t\tbreak;\n\t\tcase \"Edm.Date\":\n\t\tcase \"Edm.DateTime\":\n\t\t\tvalue = date(value, { UTC: true });\n\t\t\tbreak;\n\t\tcase \"Edm.DateTimeOffset\":\n\t\t\tvalue = dateTime(value, { UTC: true });\n\t\t\tbreak;\n\t\tcase \"Edm.DateTimeInterval\":\n\t\tcase \"Edm.Time\":\n\t\t\tbreak;\n\t\tcase \"Edm.String\":\n\t\t\tif (value?.length === 0) {\n\t\t\t\tvalue = \"<empty>\";\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"Edm.Integer\":\n\t\tcase \"Edm.Float\":\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\treturn `${property.label} (${value})`;\n};\n\nexport const createFormatterExpression = function (oFormatterDetail: FormatterConfiguration) {\n\tconst aFormatterArguments = [];\n\taFormatterArguments.push(\"${\" + oFormatterDetail.property + \"}\");\n\tlet content = oFormatterDetail.formatterName + \"(\"; // dont close brackets here\n\n\tconst mOptions: Record<string, string | boolean | number> = {};\n\toFormatterDetail.parameters?.forEach(function (mParameters) {\n\t\tif (mParameters.properties && mParameters.properties.length > 0) {\n\t\t\tmParameters.properties.forEach(function (oProperties: SingleFormatterProperty) {\n\t\t\t\tswitch (oProperties.type) {\n\t\t\t\t\tcase \"boolean\":\n\t\t\t\t\t\tif (!oProperties.selected) {\n\t\t\t\t\t\t\toProperties.selected = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmOptions[oProperties.name] = oProperties.selected;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"number\":\n\t\t\t\t\t\tif (typeof oProperties.value === \"number\") {\n\t\t\t\t\t\t\tmOptions[oProperties.name] = parseFloat(oProperties.value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"enum\":\n\t\t\t\t\t\tif (oProperties.selectedKey) {\n\t\t\t\t\t\t\tmOptions[oProperties.name] = oProperties.selectedKey;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmOptions[oProperties.name] = oProperties.value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (JSON.stringify(mOptions) !== \"{}\") {\n\t\t\t\taFormatterArguments.push(JSON.stringify(mOptions));\n\t\t\t}\n\t\t} else {\n\t\t\tswitch (mParameters.type) {\n\t\t\t\tcase \"boolean\":\n\t\t\t\t\tif (!mParameters.selected) {\n\t\t\t\t\t\tmParameters.selected = false;\n\t\t\t\t\t}\n\t\t\t\t\taFormatterArguments.push(mParameters.selected);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"number\":\n\t\t\t\t\taFormatterArguments.push(parseFloat(mParameters.value));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"enum\":\n\t\t\t\t\taFormatterArguments.push(mParameters.selectedKey);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\taFormatterArguments.push(mParameters.value);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\tcontent = content.concat(aFormatterArguments[0]);\n\tfor (let i = 1; i < aFormatterArguments.length; i++) {\n\t\tconst aFormatter = aFormatterArguments[i];\n\t\tconst bindingOrFormatterArray = [\"{\", \"[\", \"$\"];\n\t\tconst hasBindingOrFormatter = bindingOrFormatterArray.some((item) => aFormatter.startsWith(item));\n\t\tif (typeof aFormatter === \"string\" && !hasBindingOrFormatter) {\n\t\t\tcontent = content.concat(\", '\" + aFormatter + \"' \");\n\t\t} else {\n\t\t\tcontent = content.concat(\", \" + aFormatter);\n\t\t}\n\t}\n\treturn content + \")\";\n};\n\n/**\n * Generates the default property formatter configuration for date properties.\n *\n * @param {ResourceBundle} i18nModel - The internationalization model used for localization.\n * @param {PropertyInfoMap} properties - The map of property information.\n * @returns {FormatterConfigurationMap} - The configuration map for date formatters.\n */\nexport const getDefaultPropertyFormatterConfig = function (i18nModel: ResourceBundle, properties: PropertyInfoMap): FormatterConfigurationMap {\n\tconst dateFormatterConfig: FormatterConfigurationMap = [];\n\tfor (const property of properties) {\n\t\tconst isPropertyTypeDate = ODataUtils.isPropertyTypeDate(property.type);\n\t\tif (property.name && isPropertyTypeDate) {\n\t\t\tconst configData = getDateFormatterConfiguration(property.name, property.type, i18nModel) as FormatterConfiguration;\n\t\t\tdateFormatterConfig.push(configData);\n\t\t}\n\t}\n\treturn dateFormatterConfig;\n};\n\n/**\n * Generates the default property formatter configuration for navigation properties.\n *\n * @param {ResourceBundle} i18nModel - The internationalization model used for localization.\n * @param {PropertyInfoMap} navProperties - The map of navigation properties.\n * @returns {FormatterConfigurationMap} The formatter configuration map for date properties.\n */\nexport const getDefaultPropertyFormatterConfigForNavProperties = function (i18nModel: ResourceBundle, navProperties: PropertyInfoMap): FormatterConfigurationMap {\n\tconst dateFormatterConfig: FormatterConfigurationMap = [];\n\tfor (const navProperty of navProperties) {\n\t\tconst properties = navProperty.properties as PropertyInfoMap || [];\n\t\tfor (const property of properties) {\n\t\t\tconst propertyName = navProperty.name + \"/\" + property.name;\n\t\t\tconst isPropertyTypeDate = ODataUtils.isPropertyTypeDate(property.type);\n\t\t\tif (propertyName && isPropertyTypeDate) {\n\t\t\t\tconst configData = getDateFormatterConfiguration(propertyName, property.type, i18nModel) as FormatterConfiguration;\n\t\t\t\tdateFormatterConfig.push(configData);\n\t\t\t}\n\t\t}\n\t}\n\treturn dateFormatterConfig;\n};\n \n/**\n * Generates configuration data for a given property based on its type.\n *\n * @param {string} propertyName - The name of the property.\n * @param {string} propertyType - The type of the property (e.g., \"Edm.DateTimeOffset\", \"Edm.TimeOfDay\", \"Edm.DateTime\", \"Edm.Date\").\n * @param {ResourceBundle} i18nModel - The internationalization model used to get localized text.\n * @returns {FormatterConfiguration} The configuration data for the specified property.\n */\nfunction getDateFormatterConfiguration(propertyName: string, propertyType: string, i18nModel: ResourceBundle) {\n\tif (propertyType === \"Edm.DateTimeOffset\" || propertyType === \"Edm.TimeOfDay\") {\n\t\tconst configData: FormatterConfiguration = {\n\t\t\tproperty: propertyName,\n\t\t\tformatterName: \"format.dateTime\",\n\t\t\tdisplayName: i18nModel.getText(\"FORMAT_DATETIME\") ?? \"\",\n\t\t\tparameters: [\n\t\t\t\t{\n\t\t\t\t\tname: \"options\",\n\t\t\t\t\tdisplayName: \"Options\",\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\tdefaultValue: \"\",\n\t\t\t\t\tproperties: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"relative\",\n\t\t\t\t\t\t\tdisplayName: i18nModel.getText(\"RELATIVE\") ?? \"\",\n\t\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t\t\tdefaultValue: false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"UTC\",\n\t\t\t\t\t\t\tdisplayName: i18nModel.getText(\"UTC\") ?? \"\",\n\t\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t\t\tdefaultValue: false,\n\t\t\t\t\t\t\tselected: true\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t],\n\t\t\ttype: \"Date\",\n\t\t\tvisible: true\n\t\t};\n\t\treturn configData;\n\t} else if (propertyType === \"Edm.DateTime\" || propertyType === \"Edm.Date\") {\n\t\tconst configData: FormatterConfiguration = {\n\t\t\tproperty: propertyName,\n\t\t\tformatterName: \"format.date\",\n\t\t\tdisplayName: i18nModel.getText(\"FORMAT_DATE\") ?? \"\",\n\t\t\tparameters: [\n\t\t\t\t{\n\t\t\t\t\tname: \"options\",\n\t\t\t\t\tdisplayName: \"Options\",\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\tdefaultValue: \"\",\n\t\t\t\t\tproperties: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"UTC\",\n\t\t\t\t\t\t\tdisplayName: i18nModel.getText(\"UTC\") ?? \"\",\n\t\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t\t\tdefaultValue: false,\n\t\t\t\t\t\t\tselected: true\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t],\n\t\t\ttype: \"Date\",\n\t\t\tvisible: true\n\t\t};\n\t\treturn configData;\n\t}\n}\n\ntype SupportedPropertyTypes = \"boolean\" | \"number\" | \"enum\" | \"string\" | \"object\";\nexport type SingleFormatterProperty = {\n\tname: string;\n\tdisplayName: string;\n\ttype: SupportedPropertyTypes;\n\tdefaultValue?: boolean | number | string;\n\tselected?: boolean;\n\tvalue?: string;\n\tselectedKey?: string;\n\tdefaultSelectedKey?: string;\n\tbIsProperty?: boolean;\n\toptions?: Array<{\n\t\tname: string;\n\t\tvalue: string;\n\t}>;\n};\n\ntype SingleFormatterParameter = {\n\tname: string;\n\tdisplayName: string;\n\ttype: SupportedPropertyTypes;\n\tdefaultValue?: string;\n\tvalue?: string;\n\tselectedKey?: string;\n\tselected?: boolean;\n\tproperties?: Array<SingleFormatterProperty>;\n\tdefaultSelectedKey?: string;\n\toptions?: Array<{\n\t\tname: string;\n\t\tvalue: string;\n\t}>;\n};\n\nexport type FormatterConfiguration = {\n\tproperty?: string;\n\tformatterName: string;\n\tdisplayName: string;\n\tparameters?: Array<SingleFormatterParameter>;\n\ttype: string;\n\tvisible: boolean;\n};\n\nexport type FormatterConfigurationMap = Array<FormatterConfiguration>;\n"],"mappings":"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","ignoreList":[]}