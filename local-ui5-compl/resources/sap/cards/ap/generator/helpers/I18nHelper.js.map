{"version":3,"file":"I18nHelper.js","names":["sap","ui","define","Log","jQuery","i18nMap","i18nPayload","I18nClassificationsMap","Title","Label","Button","hasBinding","propertyValue","startsWith","isJSONData","value","JSON","parse","Error","getPropertyValue","partialManifest","key","updatedKey","replaceAll","seti18nValueToMap","text","trim","length","inserti18nKeysManifest","integrationCardManifest","i18nKey","split","reduce","number","textClassification","keyType","comment","inserti18nPayLoad","type","description","groupPath","payload","push","writei18nPayload","ajax","url","headers","data","stringify","success","info","error","reseti18nProperties","createi18nKeysForActionParameters","index","actionPath","adaptiveCardAction","adaptiveCardActionParameters","actionParameters","forEach","actionParameter","idx","actionParameterLabel","label","actionParameterErrorMsg","errorMessage","actionParameterPlaceholder","placeholder","i18nKeyActionParamLabel","actionParameterDescription","actionParameterLabelPath","i18nKeyActionParamErrorMsg","actionParameterErrorMsgDescription","actionParameterErrorMsgPath","i18nKeyActionParamPlaceholder","actionParameterPlaceholderDescription","actionParameterPlaceholderPath","createI18nKeysForCardActions","cardManifest","actionsStrip","footer","actionPathPrefix","action","actions","parameters","replace","configuration","_adaptiveFooterActionParameters","adaptiveCardActionDescription","i18nKeyCardAction","AdaptiveCardActionTextpath","i18nKeyOkButton","okButtonDescription","okButtonPath","triggerActionText","createKeysFromManifestData","manifestHeader","header","manifestGroup","content","groups","manifestHeaderKeys","Object","keys","propertyType","propertyTypes","includes","property","toUpperCase","slice","items","configurationItem","createKeysFromGroup","title","path","groupLabelPath","itemIndex","groupIndex","groupType","itemsPath","updateManifestAppProperties","manifest","app","headerInfo","subTitle","UOMExists","unitOfMeasurement","resolveI18nTextFromResourceModel","resourceModel","endsWith","getObject","createAndStoreGeneratedi18nKeys","__exports","__esModule"],"sources":["I18nHelper.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport Log from \"sap/base/Log\";\nimport { AdaptiveCardAction, CardManifest, Group, GroupItems, ObjectContent } from \"sap/ui/integration/widgets/Card\";\nimport ResourceModel from \"sap/ui/model/resource/ResourceModel\";\nimport jQuery from \"sap/ui/thirdparty/jquery\";\n\ntype I18nObject = {\n\t[key: string]: string;\n};\n\ntype I18nClassifications = {\n\t[key: string]: string;\n};\n\ntype I18nProperty = {\n\tcomment: string;\n\tkey: string;\n\tvalue: string;\n};\n\ntype ManifestPartial = {\n\t[key: string]: ManifestPartial | string | number | boolean | undefined;\n};\n\nlet i18nMap: I18nObject = {};\nlet i18nPayload: Array<I18nProperty> = [];\n\nconst I18nClassificationsMap: I18nClassifications = {\n\tTitle: \"XTIT:\",\n\tLabel: \"XFLD:\",\n\tButton: \"XBUT:\",\n\t\"Group header\": \"XGRP:\"\n};\n\n/**\n * This function checks if the property value has a binding\n *\n * @param {string} propertyValue\n * @returns {boolean}\n */\nfunction hasBinding(propertyValue: string) {\n\treturn propertyValue && propertyValue.startsWith(\"{\");\n}\n\n/**\n * Function to check if the given data is of type JSON or not\n *\n * @param value\n * @returns\n */\nfunction isJSONData(value: string) {\n\ttry {\n\t\treturn JSON.parse(value) ? true : false;\n\t} catch (Error) {\n\t\treturn false;\n\t}\n}\n\n/**\n * This function gets the property value from the card manifest/sub-manifest\n * - In case if the property value is an object then return the object\n * - In case if the property value is not an object then return the object and key\n * - Added handling for keys with multiple dots should be passsed as \"parameters.[com/sap/property].name\"\n *\n * @param {object} obj The  object\n * @param {string} key\n * @returns {object}\n */\nfunction getPropertyValue(partialManifest: ManifestPartial, key: string) {\n\tif (isJSONData(key)) {\n\t\tconst updatedKey = JSON.parse(key.replaceAll(/\\//g, \".\"))?.[0];\n\t\tkey = updatedKey ? updatedKey : key;\n\t}\n\n\tif (key && typeof partialManifest[key] === \"object\" && key != \"mainIndicator\") {\n\t\treturn partialManifest[key];\n\t}\n\n\treturn {\n\t\tpartialManifest,\n\t\tkey\n\t};\n}\n\n/**\n * This function sets i18n values to a map\n *  - In case if it is a new key create a key in map.\n *  - In case if it is an existsinig one update it.\n *\n * @param {string} key\n * @param {string} value\n * @param {string} text\n */\nfunction seti18nValueToMap(key: string, value: string, text?: string) {\n\tif (!text?.trim().length) {\n\t\tdelete i18nMap[key];\n\t\treturn;\n\t}\n\ti18nMap[key] = \"{{CardGenerator\" + value + \"}}\";\n}\n\n/**\n * This function updates i18n keys to card manifest\n *\n * @param {object} integrationCardManifest The manifest object\n */\nfunction inserti18nKeysManifest(integrationCardManifest: CardManifest) {\n\tfor (const i18nKey in i18nMap) {\n\t\tconst { partialManifest, key } = i18nKey.split(\".\").reduce(getPropertyValue, integrationCardManifest[\"sap.card\"]);\n\n\t\tif (partialManifest[key]?.number && i18nMap[i18nKey]) {\n\t\t\tpartialManifest[key].number = i18nMap[i18nKey];\n\t\t} else if (partialManifest?.[key]?.trim().length > 0) {\n\t\t\tpartialManifest[key] = i18nMap[i18nKey];\n\t\t}\n\t}\n}\n\n/**\n * Gets the text classification for given i18n key and value\n *\n * @param {string} keyType Type of key\n * @param {string} comment The comments which needs to be added\n * @returns {string} The text classification string\n */\nfunction textClassification(keyType: string, comment: string): string {\n\tconst key = I18nClassificationsMap[keyType] || \"\";\n\treturn key + \" \" + comment;\n}\n\n/**\n * This function sets i18n payload to an array\n *\n * @param {string} text\n * @param {string} key\n * @param {string} type\n * @param {string} description\n * @param {string} groupPath\n */\nfunction inserti18nPayLoad(text: string, key: string, type: string, description: string, groupPath?: string) {\n\tif (text.trim().length === 0) {\n\t\treturn;\n\t}\n\tconst payload: I18nProperty = {\n\t\tcomment: textClassification(type, description),\n\t\tkey: \"CardGenerator\" + (groupPath ? key + groupPath : key),\n\t\tvalue: text\n\t};\n\ti18nPayload.push(payload);\n}\n\n/**\n * This function will create an ajax call to save i18n payload\n */\nfunction writei18nPayload() {\n\tif (i18nPayload.length === 0) {\n\t\treturn;\n\t}\n\n\tjQuery.ajax({\n\t\ttype: \"POST\",\n\t\turl: \"/editor/i18n\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\"\n\t\t},\n\t\tdata: JSON.stringify(i18nPayload),\n\t\tsuccess: function () {\n\t\t\tLog.info(\"i18n was successfully saved.\");\n\t\t},\n\t\terror: function () {\n\t\t\tLog.error(\"i18n could not be saved.\");\n\t\t}\n\t});\n}\n\n/**\n * This function resets i18nPayload and i18nMap\n *\n */\nfunction reseti18nProperties() {\n\ti18nPayload = [];\n\ti18nMap = {};\n}\n\n/**\n *\n * Creates i18n keys for the action parameters of an adaptive card action.\n *\n * For each action parameter the label value will be different so i18n key will be created for each action parameter label.\n * The placeholder and error message will be the same for all action parameters so i18n key will be created only once.\n *\n * @param {number} index - The index of the current action in the adaptive card actions array.\n * @param {string} actionPath - The path to the current action in the configuration parameters.\n * @param {AdaptiveCardAction} [adaptiveCardAction] - The adaptive card action object containing action parameters.\n */\nfunction createi18nKeysForActionParameters(index: number, actionPath: string, adaptiveCardAction?: AdaptiveCardAction) {\n\tconst adaptiveCardActionParameters = adaptiveCardAction?.actionParameters;\n\n\tif (adaptiveCardActionParameters?.length) {\n\t\tadaptiveCardActionParameters.forEach((actionParameter, idx) => {\n\t\t\tconst actionParameterLabel = actionParameter?.label;\n\t\t\tconst actionParameterErrorMsg = actionParameter?.errorMessage;\n\t\t\tconst actionParameterPlaceholder = actionParameter?.placeholder;\n\n\t\t\tif (actionParameterLabel) {\n\t\t\t\tconst i18nKeyActionParamLabel = `_AdaptiveCardAction_${index}_ActionParameterLabel_${idx}`;\n\t\t\t\tconst actionParameterDescription = `Label for Action Parameter ${actionParameterLabel} - Created by Card Generator`;\n\t\t\t\tconst actionParameterLabelPath = `configuration.parameters._adaptiveFooterActionParameters.[\"${actionPath}\"].actionParameters.${idx}.label`;\n\t\t\t\tseti18nValueToMap(actionParameterLabelPath, i18nKeyActionParamLabel, actionParameterLabel);\n\t\t\t\tinserti18nPayLoad(actionParameterLabel, i18nKeyActionParamLabel, \"Label\", actionParameterDescription);\n\t\t\t}\n\n\t\t\tif (actionParameterErrorMsg) {\n\t\t\t\tconst i18nKeyActionParamErrorMsg = `_AdaptiveCardAction_ActionParameterErrorMsg`;\n\t\t\t\tconst actionParameterErrorMsgDescription = `Error message for Action Parameters - Created by Card Generator`;\n\t\t\t\tconst actionParameterErrorMsgPath = `configuration.parameters._adaptiveFooterActionParameters.[\"${actionPath}\"].actionParameters.${idx}.errorMessage`;\n\t\t\t\tseti18nValueToMap(actionParameterErrorMsgPath, i18nKeyActionParamErrorMsg, actionParameterErrorMsg);\n\t\t\t\tif (idx === 0 && index === 0) {\n\t\t\t\t\tinserti18nPayLoad(actionParameterErrorMsg, i18nKeyActionParamErrorMsg, \"Label\", actionParameterErrorMsgDescription);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (actionParameterPlaceholder && idx === 0) {\n\t\t\t\tconst i18nKeyActionParamPlaceholder = `_AdaptiveCardAction_ActionParameterPlaceholder`;\n\t\t\t\tconst actionParameterPlaceholderDescription = `Placeholder for Action Parameters - Created by Card Generator`;\n\t\t\t\tconst actionParameterPlaceholderPath = `configuration.parameters._adaptiveFooterActionParameters.[\"${actionPath}\"].actionParameters.${idx}.placeholder`;\n\t\t\t\tseti18nValueToMap(actionParameterPlaceholderPath, i18nKeyActionParamPlaceholder, actionParameterPlaceholder);\n\t\t\t\tif (idx === 0 && index === 0) {\n\t\t\t\t\tinserti18nPayLoad(\n\t\t\t\t\t\tactionParameterPlaceholder,\n\t\t\t\t\t\ti18nKeyActionParamPlaceholder,\n\t\t\t\t\t\t\"Label\",\n\t\t\t\t\t\tactionParameterPlaceholderDescription\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\n/**\n *\n * Creates i18n keys for card actions based on the card manifest.\n *\n * Takes care of creating i18n key for the action label and the OK button text which will be used when action type is Submit.\n * The action text for Integration card is also replaced with same i18n key that is created for the adaptive card action.\n *\n * @param {CardManifest} cardManifest - The card manifest.\n */\nfunction createI18nKeysForCardActions(cardManifest: CardManifest) {\n\tconst actionsStrip = cardManifest[\"sap.card\"]?.footer?.actionsStrip;\n\tconst actionPathPrefix = \"{{parameters.footerActionParameters.\";\n\n\tactionsStrip?.forEach((action, index) => {\n\t\tlet actionPath = action?.actions[0]?.parameters?.replace(actionPathPrefix, \"\").replace(\"}}\", \"\") ?? \"\";\n\t\tconst adaptiveCardAction = cardManifest[\"sap.card\"]?.configuration?.parameters?._adaptiveFooterActionParameters?.[actionPath];\n\n\t\tif (adaptiveCardAction?.label) {\n\t\t\tactionPath = actionPath.replaceAll(/\\./g, \"/\");\n\t\t\tconst adaptiveCardActionDescription = `Label for Action ${adaptiveCardAction?.label} - Created by Card Generator`;\n\t\t\tconst i18nKeyCardAction = `_AdaptiveCardActions_${index}_Label`;\n\t\t\tconst AdaptiveCardActionTextpath = `configuration.parameters._adaptiveFooterActionParameters.[\"${actionPath}\"].label`;\n\t\t\taction.text = \"{{CardGenerator\" + i18nKeyCardAction + \"}}\";\n\n\t\t\tseti18nValueToMap(AdaptiveCardActionTextpath, i18nKeyCardAction, adaptiveCardAction?.label);\n\t\t\tinserti18nPayLoad(adaptiveCardAction?.label, i18nKeyCardAction, \"Label\", adaptiveCardActionDescription);\n\n\t\t\tconst i18nKeyOkButton = \"_AdaptiveCardActions_OkButton\";\n\t\t\tconst okButtonDescription = \"Label for OK Button - Created by Card Generator\";\n\t\t\tconst okButtonPath = `configuration.parameters._adaptiveFooterActionParameters.[\"${actionPath}\"].triggerActionText`;\n\t\t\tseti18nValueToMap(okButtonPath, i18nKeyOkButton, adaptiveCardAction?.triggerActionText);\n\n\t\t\tif (index === 0) {\n\t\t\t\tinserti18nPayLoad(adaptiveCardAction?.triggerActionText, i18nKeyOkButton, \"Button\", okButtonDescription);\n\t\t\t}\n\t\t}\n\n\t\tcreatei18nKeysForActionParameters(index, actionPath, adaptiveCardAction);\n\t});\n}\n\n/**\n * This function creates i18n keys from modal data\n *  - In case if text does not start with \"{\" create a key and set key and value to i18n map, also upload the i18n payload to the array.\n *  - In case if it is already a key then no need to create a new key.\n *\n * @param {CardManifest} cardManifest\n */\nfunction createKeysFromManifestData(cardManifest: CardManifest) {\n\tconst manifestHeader = cardManifest[\"sap.card\"].header;\n\tconst manifestGroup = (cardManifest[\"sap.card\"].content as ObjectContent).groups;\n\tconst manifestHeaderKeys = Object.keys(manifestHeader) as Array<keyof typeof manifestHeader>;\n\n\tmanifestHeaderKeys.forEach((propertyType) => {\n\t\tconst propertyTypes = [\"title\", \"subTitle\", \"unitOfMeasurement\", \"mainIndicator\"];\n\t\tif (propertyTypes.includes(propertyType)) {\n\t\t\tconst property = propertyType === \"mainIndicator\" ? manifestHeader[propertyType]?.number : manifestHeader[propertyType];\n\n\t\t\tif (hasBinding(property)) {\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tconst key = `header.${propertyType}`;\n\t\t\t\tconst value = `Header${propertyType[0].toUpperCase() + propertyType.slice(1)}`;\n\t\t\t\tconst description = `${value} for ${property} - Created by Card Generator`;\n\n\t\t\t\tseti18nValueToMap(key, value, property);\n\t\t\t\tinserti18nPayLoad(property, value, \"Title\", description);\n\t\t\t}\n\t\t}\n\t});\n\n\tmanifestGroup.forEach((configuration: Group, index: number) => {\n\t\tconfiguration.items.forEach((configurationItem: GroupItems, idx: number) => {\n\t\t\tcreateKeysFromGroup(configurationItem.label, idx, index, \"label\");\n\n\t\t\tif (!hasBinding(configurationItem.value)) {\n\t\t\t\tcreateKeysFromGroup(configurationItem.value, idx, index, \"value\");\n\t\t\t}\n\t\t});\n\t\tconst key = \"GroupHeader\";\n\t\tconst description = `${key} for ${configuration.title} - Created by Card Generator`;\n\t\tconst path = `_Groups_${index}`;\n\t\tconst groupLabelPath = `content.groups.${index}.title`;\n\n\t\tseti18nValueToMap(groupLabelPath, key + path, configuration.title);\n\t\tinserti18nPayLoad(configuration.title, key, \"Group header\", description, path);\n\t});\n\n\tcreateI18nKeysForCardActions(cardManifest);\n}\n\n/**\n * This function creates i18n keys from manifest group data\n *  - In case if text does not start with \"{\" create a key and set key and value to i18n map, also upload the i18n payload to the array.\n *  - In case if it is already a key then no need to create a new key.\n *\n * @param {string} configurationItem\n * @param {number} itemIndex\n * @param {number} groupIndex\n * @param {string} type\n */\nfunction createKeysFromGroup(configurationItem: string, itemIndex: number, groupIndex: number, type: string) {\n\tconst groupType = \"Label\";\n\tconst key = `GroupProperty${groupType}`;\n\tconst description = `${key} for ${configurationItem} - Created by Card Generator`;\n\tconst path = `_Groups_${groupIndex}_Items_${itemIndex}`;\n\tconst itemsPath = `content.groups.${groupIndex}.items.${itemIndex}.${type}`;\n\n\tseti18nValueToMap(itemsPath, key + path, configurationItem);\n\tinserti18nPayLoad(configurationItem, key, groupType, description, path);\n}\n\nfunction updateManifestAppProperties(manifest: CardManifest) {\n\tconst app = manifest[\"sap.app\"];\n\tconst headerInfo = manifest[\"sap.card\"].header;\n\n\tif (app.title !== headerInfo.title && headerInfo.title?.startsWith(\"{{\")) {\n\t\tapp.title = headerInfo.title;\n\t}\n\tif (app.subTitle !== headerInfo.subTitle && headerInfo.subTitle?.startsWith(\"{{\")) {\n\t\tconst UOMExists: boolean = headerInfo.unitOfMeasurement ? true : false;\n\t\tapp.subTitle = UOMExists ? headerInfo.subTitle + \" | \" + headerInfo.unitOfMeasurement : headerInfo.subTitle;\n\t}\n}\n\n/**\n * This function resolves i18n text from resource model\n * - In case if key exists in resource model then return the object from resource model\n * - In case if key does not exist in resource model then return the key\n * @param key\n */\nexport function resolveI18nTextFromResourceModel(key: string, resourceModel: ResourceModel) {\n\tif (key.startsWith(\"{{\") && key.endsWith(\"}}\")) {\n\t\treturn resourceModel.getObject(key.replace(\"{{\", \"\").replace(\"}}\", \"\"));\n\t}\n\n\treturn key;\n}\n\n/**\n * This function creates i18n keys from card manifest data and stores it in i18n map and i18n payload\n * - Further it will update manifest with i18n keys\n * - and create an ajax call to save i18n payload\n * @param cardManifest\n */\nexport function createAndStoreGeneratedi18nKeys(cardManifest: CardManifest) {\n\tcreateKeysFromManifestData(cardManifest);\n\tinserti18nKeysManifest(cardManifest);\n\tupdateManifestAppProperties(cardManifest);\n\twritei18nPayload();\n\treseti18nProperties();\n}\n"],"mappings":"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","ignoreList":[]}