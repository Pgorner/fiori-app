{"version":3,"file":"PropertyExpression-dbg-dbg.js","names":["sap","ui","define","Log","BindingParser","___config_FormatterOptions","___Formatter","getFormatterConfiguration","createFormatterExpression","isExpression","propertyValue","arguments","length","undefined","startsWith","isI18nExpression","endsWith","hasFormatter","formatValue","sPropertyName","propertyValueFormatters","oMatchedFormatterDetail","find","oFormatterDetail","property","getArrangements","mOptions","unitOfMeasures","textArrangements","bPropertyHasBinding","replace","oMatchedUOM","oArrangement","name","sMatchedUOMName","value","oMatchedArrangement","textArrangement","sMatchedArrangementName","bPropertyHasFormatter","bMatchedUOMHasFormatter","bMatchedArrangementHasFormatter","sProperty","sMatchedUOM","sMatchedArrangement","updatedVal","getFormattedValue","index","indexOf","formattedValue","slice","parts","split","uom","formatFloat","formatUnit","part1","part2","concat","extractPathWithoutUOM","extractPathExpressionWithoutUOM","hasUOM","includes","substring","getExpressionParts","expression","startSymbols","endSymbols","count","part","skipNext","i","trim","push","extractPropertyConfigurationWithoutTextArrangement","mCardManifest","textArrangementOptions","getTextArrangementFromCardManifest","textArrangementIndex","propertyPaths","formatterExpression","forEach","hasTextArrangement","hasFormatterBinding","parseFormatterExpression","propertyPath","remainingExpression","join","textArrangementProperty","prop","option","arrangementType","propertyPathWithoutUOM","matchedTextArrangement","resolvePropertyPathFromExpression","path","hasBinding","selectedFormatter","updateAndGetSelectedFormatters","mManifest","configuration","parameters","_propertyFormatting","Object","keys","arrangement","arrangements","text","key","isNavigationForId","isNavigationForDescription","propertyKeyForId","navigationKeyForId","navigationKeyForDescription","propertyKeyForDescription","navigationalPropertiesForDescription","navigationalPropertiesForId","formatterOptions","formatterName","formatter","bindingInfo","complexParser","propertyExpression","bindingPartial","lastIndexOf","parametersExpression","hasParameters","formatterParameters","parameter","type","startIndex","endIndex","options","JSON","parse","error","sPropertyPath","formatterConfig","parametersLength","formatterConfigParameters","updatePropertiesForObjectType","properties","__exports","__esModule"],"sources":["PropertyExpression.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport Log from \"sap/base/Log\";\nimport BindingParser from \"sap/ui/base/BindingParser\";\nimport { CardManifest } from \"sap/ui/integration/widgets/Card\";\nimport { ArrangementOptions } from \"../app/controls/ArrangementsEditor\";\nimport { getFormatterConfiguration } from \"../config/FormatterOptions\";\nimport type { FormatterConfiguration, FormatterConfigurationMap } from \"./Formatter\";\nimport { createFormatterExpression } from \"./Formatter\";\n\ntype JSONObject = {\n\t[key: string]: string | boolean | number;\n};\n\ntype FormatterConfigParameters = string | JSONObject;\n\ntype ParsedFormatterExpression = {\n\tformatterName: string;\n\tpropertyPath: string;\n\tparameters: Array<FormatterConfigParameters>;\n};\n\ntype PropertyFormattingOptions = {\n\tunitOfMeasures: Array<{\n\t\t[key: string]: string;\n\t}>;\n\ttextArrangements: ArrangementOptions[];\n\tpropertyValueFormatters: FormatterConfigurationMap;\n};\n\n/**\n * This function checks if the property value is an expression\n *\n * @param {string} propertyValue\n * @returns {boolean}\n */\nexport function isExpression(propertyValue = \"\"): boolean {\n\treturn propertyValue.startsWith(\"{\");\n}\n\n/**\n * This function checks if the property value is an i18n expression\n *\n * @param {string} propertyValue\n * @returns {boolean}\n */\nexport function isI18nExpression(propertyValue = \"\"): boolean {\n\treturn propertyValue.startsWith(\"{{\") && propertyValue.endsWith(\"}}\");\n}\n\n/**\n * The function checks if the property value has a formatter\n *\n * @param propertyValue\n * @returns\n */\nexport function hasFormatter(propertyValue = \"\"): boolean {\n\treturn propertyValue.startsWith(\"{=\") && propertyValue.endsWith(\"}\");\n}\n\n/**\n * format the value based on the formatter configuration\n * @param {string} sPropertyName\n * @param {FormatterConfigurationMap} propertyValueFormatters\n * @returns\n */\nfunction formatValue(sPropertyName: string, propertyValueFormatters: FormatterConfigurationMap = []) {\n\tconst oMatchedFormatterDetail = propertyValueFormatters.find(function (oFormatterDetail: FormatterConfiguration) {\n\t\treturn oFormatterDetail.property === sPropertyName || \"{\" + oFormatterDetail.property + \"}\" === sPropertyName;\n\t});\n\n\tif (oMatchedFormatterDetail) {\n\t\treturn createFormatterExpression(oMatchedFormatterDetail);\n\t}\n\treturn sPropertyName;\n}\n\n/**\n * Apply text arrangement, UOM and formatter to the property\n * @param {string} sPropertyName\n * @param {PropertyFormattingOptions} mOptions\n * @returns {string}\n */\nexport function getArrangements(sPropertyName: string, mOptions: PropertyFormattingOptions) {\n\tconst { unitOfMeasures, textArrangements, propertyValueFormatters } = mOptions;\n\tconst bPropertyHasBinding = sPropertyName.startsWith(\"{\");\n\tsPropertyName = sPropertyName.replace(/[{}]/g, \"\");\n\n\tconst oMatchedUOM = unitOfMeasures.find(function (oArrangement: any) {\n\t\treturn oArrangement.name === sPropertyName;\n\t});\n\tconst sMatchedUOMName = oMatchedUOM?.value?.replace(/[{}]/g, \"\");\n\tconst oMatchedArrangement = textArrangements.find(function (oArrangement: any) {\n\t\tif (oArrangement.value && oArrangement.textArrangement) {\n\t\t\treturn oArrangement.name === sPropertyName;\n\t\t}\n\t});\n\tconst sMatchedArrangementName = oMatchedArrangement?.value?.replace(/[{}]/g, \"\");\n\tlet bPropertyHasFormatter = false;\n\tlet bMatchedUOMHasFormatter = false;\n\tlet bMatchedArrangementHasFormatter = false;\n\tconst sProperty = sPropertyName;\n\n\tsPropertyName = sPropertyName && formatValue(sPropertyName, propertyValueFormatters);\n\tif (sPropertyName !== sProperty) {\n\t\tbPropertyHasFormatter = true;\n\t}\n\n\tconst sMatchedUOM = oMatchedUOM && formatValue(sMatchedUOMName ?? \"\", propertyValueFormatters);\n\tif (sMatchedUOMName !== sMatchedUOM) {\n\t\tbMatchedUOMHasFormatter = true;\n\t}\n\n\tconst sMatchedArrangement = sMatchedArrangementName && formatValue(sMatchedArrangementName, propertyValueFormatters);\n\tif (sMatchedArrangementName !== sMatchedArrangement) {\n\t\tbMatchedArrangementHasFormatter = true;\n\t}\n\n\tlet updatedVal = \"\";\n\tif (oMatchedUOM && oMatchedArrangement) {\n\t\tswitch (oMatchedArrangement.textArrangement) {\n\t\t\tcase \"TextLast\":\n\t\t\t\tupdatedVal += bPropertyHasFormatter ? \"{= \" + sPropertyName + \"}\" : \"{\" + sPropertyName + \"}\";\n\t\t\t\tupdatedVal += bMatchedUOMHasFormatter ? \" {= \" + sMatchedUOM + \"}\" : \" {\" + sMatchedUOMName + \"}\";\n\t\t\t\tupdatedVal = getFormattedValue(updatedVal, bPropertyHasFormatter, bMatchedUOMHasFormatter);\n\t\t\t\tupdatedVal += bMatchedArrangementHasFormatter\n\t\t\t\t\t? \" (\" + \"{= \" + sMatchedArrangement + \"}\" + \")\"\n\t\t\t\t\t: \" (\" + \"{\" + sMatchedArrangementName + \"}\" + \")\";\n\t\t\t\tbreak;\n\t\t\tcase \"TextFirst\":\n\t\t\t\tupdatedVal = bMatchedArrangementHasFormatter\n\t\t\t\t\t? \"{= \" + sMatchedArrangement + \"}\" + \" (\"\n\t\t\t\t\t: \"{\" + sMatchedArrangementName + \"}\" + \" (\";\n\t\t\t\tupdatedVal += bPropertyHasFormatter ? \"{= \" + sPropertyName + \"}\" : \"{\" + sPropertyName + \"}\";\n\t\t\t\tupdatedVal += bMatchedUOMHasFormatter ? \" {= \" + sMatchedUOM + \"}\" : \" {\" + sMatchedUOMName + \"}\";\n\t\t\t\tconst index = updatedVal.indexOf(\" (\");\n\t\t\t\tconst formattedValue = getFormattedValue(updatedVal.slice(index + 2), bPropertyHasFormatter, bMatchedUOMHasFormatter);\n\t\t\t\tupdatedVal = updatedVal.slice(0, index + 2) + formattedValue;\n\t\t\t\tupdatedVal += \")\";\n\t\t\t\tbreak;\n\t\t\tcase \"TextSeparate\":\n\t\t\t\tupdatedVal += bPropertyHasFormatter ? \"{= \" + sPropertyName + \"}\" : \"{\" + sPropertyName + \"}\";\n\t\t\t\tupdatedVal += bMatchedUOMHasFormatter ? \" {= \" + sMatchedUOM + \"}\" : \" {\" + sMatchedUOMName + \"}\";\n\t\t\t\tupdatedVal = getFormattedValue(updatedVal, bPropertyHasFormatter, bMatchedUOMHasFormatter);\n\t\t\t\tbreak;\n\t\t\tcase \"TextOnly\":\n\t\t\t\tupdatedVal += bMatchedArrangementHasFormatter ? \"{= \" + sMatchedArrangement + \"}\" : \"{\" + sMatchedArrangementName + \"}\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\treturn updatedVal;\n\t} else if (oMatchedUOM && sMatchedUOMName) {\n\t\tupdatedVal = bPropertyHasFormatter ? \"{= \" + sPropertyName + \"}\" : \"{\" + sPropertyName + \"}\";\n\t\tif (!sMatchedUOM?.startsWith(\"format.unit(\")) {\n\t\t\tupdatedVal += bMatchedUOMHasFormatter ? \" {= \" + sMatchedUOM + \"}\" : \" {\" + sMatchedUOMName + \"}\";\n\t\t}\n\t\treturn getFormattedValue(updatedVal, bPropertyHasFormatter, bMatchedUOMHasFormatter);\n\t} else if (oMatchedArrangement) {\n\t\tswitch (oMatchedArrangement.textArrangement) {\n\t\t\tcase \"TextLast\":\n\t\t\t\tupdatedVal += bPropertyHasFormatter ? \"{= \" + sPropertyName + \"}\" : \"{\" + sPropertyName + \"}\";\n\t\t\t\tupdatedVal += bMatchedArrangementHasFormatter\n\t\t\t\t\t? \" (\" + \"{= \" + sMatchedArrangement + \"}\" + \")\"\n\t\t\t\t\t: \" (\" + \"{\" + sMatchedArrangementName + \"}\" + \")\";\n\t\t\t\tbreak;\n\t\t\tcase \"TextFirst\":\n\t\t\t\tupdatedVal = bMatchedArrangementHasFormatter\n\t\t\t\t\t? \"{= \" + sMatchedArrangement + \"}\" + \" (\"\n\t\t\t\t\t: \"{\" + sMatchedArrangementName + \"}\" + \" (\";\n\t\t\t\tupdatedVal += bPropertyHasFormatter ? \"{= \" + sPropertyName + \"}\" : \"{\" + sPropertyName + \"}\";\n\t\t\t\tupdatedVal += \")\";\n\t\t\t\tbreak;\n\t\t\tcase \"TextSeparate\":\n\t\t\t\tupdatedVal += bPropertyHasFormatter ? \"{= \" + sPropertyName + \"}\" : \"{\" + sPropertyName + \"}\";\n\t\t\t\tbreak;\n\t\t\tcase \"TextOnly\":\n\t\t\t\tupdatedVal = bMatchedArrangementHasFormatter ? \"{= \" + sMatchedArrangement + \"}\" : \"{\" + sMatchedArrangementName + \"}\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\treturn updatedVal;\n\t}\n\treturn bPropertyHasBinding ? (bPropertyHasFormatter ? \"{= \" + sPropertyName + \"}\" : \"{\" + sPropertyName + \"}\") : sPropertyName;\n}\n\n/**\n * Retrieves the formatted value based on the provided parameters.\n *\n * @param updatedVal - The updated value to be formatted.\n * @param bPropertyHasFormatter - A boolean indicating whether the property has a formatter.\n * @param bMatchedUOMHasFormatter - A boolean indicating whether the matched unit of measure has a formatter.\n * @returns The formatted value as a binding string in the format '{= format.unit(${property}, ${uom})}'.\n */\nfunction getFormattedValue(updatedVal: string, bPropertyHasFormatter: boolean, bMatchedUOMHasFormatter: boolean) {\n\tconst parts = updatedVal.split(\" \");\n\tlet property = \"\",\n\t\tuom = \"\";\n\n\tif (parts.length === 2) {\n\t\tproperty = parts[0];\n\t\tuom = parts[1];\n\t}\n\n\tif (bPropertyHasFormatter) {\n\t\tconst formatFloat = updatedVal.startsWith(\"{= format.float(\");\n\t\tconst formatUnit = updatedVal.startsWith(\"{= format.unit(\");\n\n\t\tif ((formatFloat || formatUnit) && !bMatchedUOMHasFormatter) {\n\t\t\tconst index = updatedVal.indexOf(\"} \");\n\t\t\tlet part1 = updatedVal.slice(0, index + 1);\n\t\t\tconst part2 = updatedVal.slice(index + 2);\n\t\t\tpart1 = part1.replace(\"format.float(\", \"format.unit(\");\n\n\t\t\tconst parts = part1.split(\", \");\n\t\t\tif (parts.length === 2) {\n\t\t\t\tif (formatFloat) {\n\t\t\t\t\tupdatedVal = part1.replace(\", {\", \", $\" + part2 + \", {\");\n\t\t\t\t} else {\n\t\t\t\t\tupdatedVal = parts[0].concat(\", $\" + part2 + \")}\");\n\t\t\t\t}\n\t\t\t} else if (parts.length === 3) {\n\t\t\t\tif (part2) {\n\t\t\t\t\tupdatedVal = parts[0].concat(\", $\" + part2 + \", \");\n\t\t\t\t\tupdatedVal = updatedVal.concat(parts[2]);\n\t\t\t\t} else {\n\t\t\t\t\tupdatedVal = part1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn updatedVal;\n\t\t}\n\t\treturn updatedVal;\n\t}\n\n\t//To return the binding string in the below format  '{= format.unit(${gross_amount}, ${currency_code})}'\n\treturn \"{= format.unit($\" + property + \", $\" + uom + \")}\";\n}\n\n/**\n * Extracts the property path without unit of measure\n * \t - The property is in the format {propertyPath} {uomPath}\n *\n * @param property\n * @returns {string}\n */\nexport function extractPathWithoutUOM(property: string) {\n\treturn extractPathExpressionWithoutUOM(property).replace(/[{}]/g, \"\"); // Remove curly braces\n}\n\n/**\n * Extracts the property path expression without unit of measure\n * \t - The property is in the format {propertyPath} {uomPath}\n *\n * @param property\n * @returns {string}\n */\nexport function extractPathExpressionWithoutUOM(property: string) {\n\tconst hasUOM = property.includes(\"} {\");\n\treturn hasUOM ? property.substring(0, property.indexOf(\"} {\") + 1) : property;\n}\n\n/**\n * Extracts parts of an expression\n *\n * @param expression\n * @returns {string[]}\n */\nexport function getExpressionParts(expression: string) {\n\tconst startSymbols = [\"{=\", \"{\", \"(\", \"${\"];\n\tconst endSymbols = [\"}\", \")\"];\n\tconst parts = [];\n\tlet count = 0,\n\t\tpart = \"\",\n\t\tskipNext = false;\n\n\tfor (let i = 0; i < expression.length; i++) {\n\t\tif (skipNext) {\n\t\t\tskipNext = false;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (startSymbols.includes(expression[i])) {\n\t\t\tif (expression[i] === \"{\" && expression[i + 1] === \"=\") {\n\t\t\t\tpart += \"{=\";\n\t\t\t\tskipNext = true;\n\t\t\t} else {\n\t\t\t\tpart += expression[i];\n\t\t\t}\n\t\t\tcount++;\n\t\t} else if (endSymbols.includes(expression[i])) {\n\t\t\tpart += expression[i];\n\t\t\tcount--;\n\t\t} else {\n\t\t\tpart += expression[i];\n\t\t}\n\n\t\tif (count === 0) {\n\t\t\tif (part.trim().length !== 0) {\n\t\t\t\tparts.push(part);\n\t\t\t}\n\n\t\t\tpart = \"\";\n\t\t}\n\t}\n\treturn parts;\n}\n\n/**\n * Extracts the property path and formatter expression without text arrangement\n *\n * @param expression\n * @param mCardManifest\n *\n * @returns { propertyPath: string, formatterExpression: string[]}\n */\nexport function extractPropertyConfigurationWithoutTextArrangement(expression: string, mCardManifest: CardManifest) {\n\tconst textArrangementOptions: Array<ArrangementOptions> = getTextArrangementFromCardManifest(mCardManifest);\n\tconst parts = getExpressionParts(expression);\n\tlet textArrangementIndex = -1;\n\tconst propertyPaths: string[] = [];\n\tconst formatterExpression: string[] = [];\n\n\tparts.forEach((part, index) => {\n\t\tconst hasTextArrangement = part.trim().startsWith(\"(\") && part.trim().endsWith(\")\");\n\n\t\tif (hasTextArrangement) {\n\t\t\ttextArrangementIndex = index;\n\t\t\tconst hasFormatterBinding = hasFormatter(part.slice(1, -1));\n\n\t\t\tif (hasFormatterBinding) {\n\t\t\t\tformatterExpression.push(part.slice(1, -1));\n\t\t\t}\n\t\t\tpart = hasFormatterBinding ? parseFormatterExpression(part.slice(1, -1)).propertyPath : part.slice(1, -1);\n\t\t\tpart = \"({\" + part + \"})\";\n\t\t} else if (hasFormatter(part)) {\n\t\t\tformatterExpression.push(part);\n\t\t\tpart = \"{\" + parseFormatterExpression(part).propertyPath + \"}\";\n\t\t}\n\t\tpropertyPaths.push(part);\n\t});\n\n\tif (textArrangementIndex > -1) {\n\t\tlet remainingExpression = propertyPaths\n\t\t\t.slice(0, textArrangementIndex)\n\t\t\t.concat(propertyPaths.slice(textArrangementIndex + 1))\n\t\t\t.join(\" \");\n\t\tconst textArrangement = propertyPaths.slice(textArrangementIndex, textArrangementIndex + 1)[0];\n\t\tconst textArrangementProperty = textArrangement.trim().replace(/[({})]/g, \"\");\n\t\tconst prop = textArrangementOptions.find((option) => textArrangementProperty === option.name);\n\t\tif (prop && prop.arrangementType === \"TextFirst\") {\n\t\t\tremainingExpression = remainingExpression.replace(prop.value, prop.name);\n\t\t}\n\t\treturn {\n\t\t\tpropertyPath: remainingExpression,\n\t\t\tformatterExpression\n\t\t};\n\t} else {\n\t\tconst propertyPathWithoutUOM = extractPathWithoutUOM(expression);\n\t\tconst matchedTextArrangement = textArrangementOptions.find((option) => propertyPathWithoutUOM === option.value);\n\t\tif (matchedTextArrangement && matchedTextArrangement.arrangementType === \"TextOnly\") {\n\t\t\treturn {\n\t\t\t\tpropertyPath: `{${matchedTextArrangement.name}}`,\n\t\t\t\tformatterExpression\n\t\t\t};\n\t\t}\n\t}\n\n\treturn {\n\t\tpropertyPath: expression,\n\t\tformatterExpression\n\t};\n}\n\n/**\n *  Resolves the property path with expression to simple property path\n * \t- If path is an expression, resolve the expression then return the path\n *  - If path is an expression with formatter, return the path after extracting the formatter\n * @param path\n * @param mCardManifest\n * @returns\n */\nexport function resolvePropertyPathFromExpression(path = \"\", mCardManifest: CardManifest) {\n\tlet { propertyPath } = extractPropertyConfigurationWithoutTextArrangement(path, mCardManifest);\n\tconst hasBinding = isExpression(path) || hasFormatter(path);\n\n\tif (isExpression(propertyPath) && !hasFormatter(propertyPath)) {\n\t\tpropertyPath = extractPathWithoutUOM(propertyPath);\n\t}\n\n\tif (isExpression(propertyPath) && hasFormatter(propertyPath)) {\n\t\tconst formatterExpression = extractPathExpressionWithoutUOM(propertyPath);\n\t\tconst selectedFormatter = updateAndGetSelectedFormatters(formatterExpression);\n\t\tpropertyPath = selectedFormatter.property || \"\";\n\t}\n\n\treturn hasBinding ? `{${propertyPath}}` : propertyPath;\n}\n\nexport function getTextArrangementFromCardManifest(mManifest: CardManifest) {\n\tconst textArrangements = mManifest[\"sap.card\"].configuration?.parameters?._propertyFormatting as object | undefined;\n\n\tif (!textArrangements) {\n\t\treturn [];\n\t}\n\n\tconst textArrangementOptions: Array<ArrangementOptions> = [];\n\tObject.keys(textArrangements).forEach((property) => {\n\t\tconst arrangement = textArrangements[property].arrangements.text;\n\t\tconst arrangementType = Object.keys(arrangement).find((key) => arrangement[key]) || \"TextLast\";\n\t\tlet path = arrangement.path;\n\t\tlet isNavigationForId = false;\n\t\tlet isNavigationForDescription = false;\n\t\tlet propertyKeyForId = \"\";\n\t\tlet navigationKeyForId = \"\";\n\t\tlet navigationKeyForDescription = \"\";\n\t\tif (property.includes(\"/\")) {\n\t\t\tpropertyKeyForId = property.split(\"/\")[0];\n\t\t\tnavigationKeyForId = property.split(\"/\")[1];\n\t\t\tisNavigationForId = true;\n\t\t}\n\t\tif (path?.includes(\"/\")) {\n\t\t\tpath = arrangement.path.split(\"/\")[0];\n\t\t\tnavigationKeyForDescription = arrangement.path.split(\"/\")[1];\n\t\t\tisNavigationForDescription = true;\n\t\t}\n\t\ttextArrangementOptions.push({\n\t\t\tname: property,\n\t\t\tarrangementType,\n\t\t\tvalue: arrangement.path,\n\t\t\tpropertyKeyForDescription: path,\n\t\t\tpropertyKeyForId: property.includes(\"/\") ? propertyKeyForId : property,\n\t\t\ttextArrangement: arrangementType,\n\t\t\tisNavigationForId,\n\t\t\tisNavigationForDescription,\n\t\t\tnavigationKeyForId,\n\t\t\tnavigationKeyForDescription,\n\t\t\tnavigationalPropertiesForDescription: [],\n\t\t\tnavigationalPropertiesForId: []\n\t\t});\n\t});\n\treturn textArrangementOptions;\n}\n\n/**\n * Parses the formatter expression and returns the formatter name, property path and parameters\n *\n * @param path\n * @returns\n */\nexport function parseFormatterExpression(path = \"\"): ParsedFormatterExpression {\n\tconst formatterOptions = getFormatterConfiguration();\n\tconst formatterName = path.split(\"{=\")[1]?.split(\"(\")[0]?.trim();\n\n\tif (!formatterName) {\n\t\treturn {\n\t\t\tformatterName: \"\",\n\t\t\tpropertyPath: \"\",\n\t\t\tparameters: []\n\t\t};\n\t}\n\n\tconst selectedFormatter = formatterOptions.find((formatter) => formatter.formatterName === formatterName);\n\tconst bindingInfo = BindingParser.complexParser(path);\n\tconst propertyPath: string = bindingInfo.parts[0].path;\n\tconst propertyExpression = \"${\" + propertyPath + \"}\";\n\tconst parameters: Array<FormatterConfigParameters> = [];\n\n\tlet bindingPartial = path;\n\tbindingPartial = path.trim().replace(\"{=\", \"\");\n\tbindingPartial = bindingPartial.substring(0, bindingPartial.lastIndexOf(\"}\"));\n\tbindingPartial = bindingPartial.replace(`${formatterName}(`, \"\");\n\tbindingPartial = bindingPartial.substring(0, bindingPartial.lastIndexOf(\")\"));\n\n\tlet parametersExpression = bindingPartial.replace(`${propertyExpression}`, \"\").trim();\n\tconst hasParameters = parametersExpression.length > 0;\n\n\tif (hasParameters) {\n\t\tconst formatterParameters = selectedFormatter?.parameters || [];\n\t\tfor (const parameter of formatterParameters) {\n\t\t\tif (parameter.type === \"object\") {\n\t\t\t\tconst startIndex = parametersExpression.indexOf(\"{\");\n\t\t\t\tconst endIndex = parametersExpression.indexOf(\"}\");\n\t\t\t\tconst options = parametersExpression.substring(startIndex, endIndex + 1);\n\t\t\t\tparametersExpression = parametersExpression.substring(endIndex + 1);\n\t\t\t\ttry {\n\t\t\t\t\tparameters.push(JSON.parse(options) as JSONObject);\n\t\t\t\t} catch {\n\t\t\t\t\tLog.error(\"Error in parsing the formatter options\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (parameter.type === \"string\") {\n\t\t\t\tconst startIndex = parametersExpression.indexOf(\",\");\n\t\t\t\tparametersExpression = parametersExpression.substring(startIndex + 1);\n\t\t\t\tlet endIndex = parametersExpression.indexOf(\",\");\n\t\t\t\tlet options;\n\t\t\t\tif (endIndex !== -1) {\n\t\t\t\t\toptions = parametersExpression.substring(0, endIndex).trim();\n\t\t\t\t} else {\n\t\t\t\t\tendIndex = parametersExpression.indexOf(\"}\");\n\t\t\t\t\toptions = parametersExpression.substring(0, endIndex + 1).trim();\n\t\t\t\t}\n\t\t\t\tparametersExpression = parametersExpression.substring(endIndex + 1);\n\t\t\t\tparameters.push(options.replace(/['\"]+/g, \"\"));\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\tformatterName,\n\t\tpropertyPath,\n\t\tparameters\n\t};\n}\n\n/**\n * Updates the selected formatter with received parameters and returns the updated formatter\n *\n * @param sPropertyPath\n * @returns\n */\nexport function updateAndGetSelectedFormatters(sPropertyPath: string): FormatterConfiguration {\n\tconst formatterOptions = getFormatterConfiguration();\n\tconst formatterConfig = parseFormatterExpression(sPropertyPath);\n\tconst selectedFormatter = {\n\t\t...formatterOptions.find((options) => options.formatterName === formatterConfig.formatterName)\n\t} as FormatterConfiguration;\n\tselectedFormatter.property = formatterConfig.propertyPath;\n\n\tif (!selectedFormatter.parameters?.length) {\n\t\treturn selectedFormatter;\n\t}\n\n\tconst parametersLength = selectedFormatter.parameters.length;\n\tfor (let i = 0; i < parametersLength; i++) {\n\t\tconst formatterConfigParameters = formatterConfig.parameters;\n\t\tif (selectedFormatter.parameters[i].type === \"object\" && typeof formatterConfigParameters[i] === \"object\") {\n\t\t\tupdatePropertiesForObjectType(selectedFormatter, formatterConfigParameters, i);\n\t\t}\n\n\t\tif (selectedFormatter.parameters[i].type === \"string\" && typeof formatterConfigParameters[i] === \"string\") {\n\t\t\tselectedFormatter.parameters[i].value = formatterConfigParameters[i];\n\t\t}\n\t}\n\n\treturn selectedFormatter;\n}\n\n/**\n *  Updates the properties for the object type parameters\n *\n * @param selectedFormatter\n * @param formatterConfigParameters\n * @param index\n */\nfunction updatePropertiesForObjectType(\n\tselectedFormatter: FormatterConfiguration,\n\tformatterConfigParameters: Array<FormatterConfigParameters>,\n\tindex: number\n) {\n\tconst properties = selectedFormatter!.parameters![index].properties;\n\n\tproperties?.forEach((property) => {\n\t\tif (property.type === \"boolean\") {\n\t\t\tproperty[\"selected\"] = (formatterConfigParameters[index] as JSONObject)[property.name] as boolean;\n\t\t} else if (property.type === \"enum\") {\n\t\t\tproperty[\"selectedKey\"] = (formatterConfigParameters[index] as JSONObject)[property.name] as string;\n\t\t} else {\n\t\t\tproperty[\"value\"] =\n\t\t\t\ttypeof formatterConfigParameters === \"object\"\n\t\t\t\t\t? ((formatterConfigParameters[index] as JSONObject)[property.name] as string)\n\t\t\t\t\t: formatterConfigParameters[index];\n\t\t}\n\t});\n}\n"],"mappings":"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","ignoreList":[]}