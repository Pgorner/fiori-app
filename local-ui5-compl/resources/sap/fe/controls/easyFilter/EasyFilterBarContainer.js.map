{"version":3,"file":"EasyFilterBarContainer.js","names":["EasyFilterBarContainer","_dec","defineUI5Class","_dec2","property","type","_dec3","_dec4","_dec5","_dec6","_dec7","defineReference","_dec8","_dec9","aggregation","_dec10","event","_dec11","_dec12","_dec13","_dec14","_dec15","_dec16","defineState","_class","_class2","_Control","properties","others","_this","call","this","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","_descriptor12","_descriptor13","_descriptor14","_descriptor15","shouldTokenChangeEventFired","inputFieldReady","Promise","resolve","resolveContentReady","initialize","_exports","_inheritsLoose","_proto","prototype","setEasyFilterLib","easyFilterLib","setProperty","easyfilter","__ui5_require_async","setAppId","async","appId","easyFilterInput","current","initShellHistoryProvider","setFilterBarMetadata","filterBarMetadata","tokens","getDefaultTokens","innerControlPopover","createPopoverForInnerControls","addDependent","state","showResult","length","isMandatoryCheckRequired","init","resourceBundle","Lib","getResourceBundleFor","content","createContent","mandatoryKeyMap","forEach","data","isRequired","required","name","push","key","label","keySpecificSelectedValues","defaultValue","onEnterPressed","e","onGoPress","getParameter","checkIfAllMandatoryTokensFilled","tokensInState","getUnSetMandatoryTokensInCurrentState","getActualTokensFromState","token","ValueState","Error","getText","openValueStateMessage","closeAllMandatoryValueStateMessages","easyTokens","tokenizer","getTokens","closeValueStateMessage","magicQuery","resetState","tokenizerEditable","fireEvent","easyFilterMetadata","version","entitySet","contextPath","fields","easyFilterResult","easyFilter","success","isHistoryEnabled","addRecentQuery","handleV1Success","setAsInvalid","message","removeNonMandatoryTokens","Log","error","unclear","filter","debug","JSON","stringify","EasyFilterUtils","formatData","updatedTokens","verifySingleSelectTokenValues","singleSelectTokenLabels","selectedValues","splice","singleValueMessageStripText","join","showSingleValueMessageStrip","_jsx","Popover","id","getId","showArrow","showHeader","placement","PlacementType","Bottom","children","footer","getToolbar","toolbar","okButton","getOkButton","showAllButton","getShowAllButton","OverflowToolbar","_jsxs","_Fragment","ToolbarSpacer","Button","text","ButtonType","Emphasized","onStateChange","changedProps","arguments","undefined","includes","map","deepClone","$topGoBtn","createReference","outVBox","VBox","FlexBox","renderType","EasyFilterInput","recommendedValues","ref","enterPressed","bind","queryChanged","query","liveChange","icon","class","press","onGoButtonPress","visible","bindState","alignItems","FlexAlignItems","Center","wrap","FlexWrap","Wrap","justifyContent","FlexJustifyContent","SpaceBetween","AINotice","Tokenizer","editable","and","idx","ctx","object","getObject","Token","items","mandatory","isKeyMandatory","delete","tokenIndex","findIndex","newTokens","concat","updateFilterInput","customData","CustomData","value","find","codeList","Transparent","$searchInput","focus","MessageStrip","showIcon","enableFormattedText","showCloseButton","close","FESRHelper","setSemanticStepname","currentInputValue","getValue","currentInputPlaceholder","getPlaceholder","setValue","None","updateTokenArray","changeType","newTokenSpecificValues","tokenKey","t","setSelectedValues","closeInnerControlPopover","newToken","currValue","setPlaceholder","getTokensInInitialState","mandatoryTokens","requiredKeys","getKey","render","rm","control","jsx","renderUsingRenderManager","getAggregation","Control","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer"],"sources":["./EasyFilterBarContainer.tsx"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport type { EnhanceWithUI5, StateOf } from \"sap/fe/base/ClassSupport\";\nimport {\n\taggregation,\n\tcreateReference,\n\tdefineReference,\n\tdefineState,\n\tdefineUI5Class,\n\tevent,\n\tproperty,\n\ttype PropertiesOf\n} from \"sap/fe/base/ClassSupport\";\nimport type { Ref } from \"sap/fe/base/jsx-runtime/jsx\";\nimport jsx from \"sap/fe/base/jsx-runtime/jsx\";\nimport Token from \"sap/fe/controls/easyFilter/Token\";\nimport Button from \"sap/m/Button\";\nimport FlexBox from \"sap/m/FlexBox\";\nimport Popover from \"sap/m/Popover\";\nimport Tokenizer from \"sap/m/Tokenizer\";\nimport VBox from \"sap/m/VBox\";\nimport { ButtonType, FlexAlignItems, FlexJustifyContent, FlexWrap, PlacementType } from \"sap/m/library\";\nimport type UI5Event from \"sap/ui/base/Event\";\nimport type { $ControlSettings } from \"sap/ui/core/Control\";\nimport Control from \"sap/ui/core/Control\";\nimport CustomData from \"sap/ui/core/CustomData\";\nimport Lib from \"sap/ui/core/Lib\";\nimport type RenderManager from \"sap/ui/core/RenderManager\";\nimport { ValueState } from \"sap/ui/core/library\";\nimport type Context from \"sap/ui/model/Context\";\n\nimport type ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport deepClone from \"sap/base/util/deepClone\";\nimport { and, bindState } from \"sap/fe/base/BindingToolkit\";\nimport EasyFilterInput from \"sap/fe/controls/easyFilter/EasyFilterInput\";\nimport type EasyFilterToken from \"sap/fe/controls/easyFilter/Token\";\nimport MessageStrip from \"sap/m/MessageStrip\";\nimport OverflowToolbar from \"sap/m/OverflowToolbar\";\nimport ToolbarSpacer from \"sap/m/ToolbarSpacer\";\nimport type FilterOperator from \"sap/ui/model/FilterOperator\";\nimport FESRHelper from \"sap/ui/performance/trace/FESRHelper\";\nimport type EasyFilter from \"ux/eng/fioriai/reuse/easyfilter/EasyFilter\";\nimport type { EasyFilterMetadata, PropertyMetadata, Success } from \"ux/eng/fioriai/reuse/easyfilter/EasyFilter\";\nimport type { EventHandler } from \"../../../../../../../types/extension_types\";\nimport AINotice from \"./AINotice\";\nimport EasyFilterUtils from \"./utils\";\n\n//For current release we are ignoring \"All\" and \"Any\"\n//We can incorporate these values in future\nexport type BetweenSelectedValues = [boolean, boolean] | [string, string] | [number, number] | [Date, Date];\n\n//We will be handling \"ALL\" and \"ANY\" at later point of time\nexport type TokenSelectedValuesDefinition =\n\t| {\n\t\t\toperator: Exclude<FilterOperator, FilterOperator.BT | FilterOperator.NB>;\n\t\t\tselectedValues: string[] | boolean[] | number[] | Date[];\n\t  }\n\t| {\n\t\t\toperator: FilterOperator.BT | FilterOperator.NB;\n\t\t\tselectedValues: BetweenSelectedValues;\n\t  };\n\nexport type TokenType = \"MenuWithCheckBox\" | \"Calendar\" | \"Time\" | \"ValueHelp\" | \"MenuWithSingleSelect\";\n\nexport type TokenDefinition = {\n\tkey: string;\n\tlabel: string;\n\tkeySpecificSelectedValues: TokenSelectedValuesDefinition[];\n\ttype?: TokenType;\n\tisRequired?: boolean;\n};\n\nexport type TokenSetters = \"setSelectedValues\";\n\nexport type EasyFilterPropertyMetadata = PropertyMetadata & {\n\ttype: TokenType;\n\tdefaultValue?: TokenSelectedValuesDefinition[];\n};\n\n/*\n * Delivery for beta release for the easy filter feature.\n * @experimental\n */\n@defineUI5Class(\"sap.fe.controls.easyFilter.EasyFilterBarContainer\")\nexport default class EasyFilterBarContainer extends Control {\n\t@property({ type: \"string\" })\n\tcontextPath?: string;\n\n\t@property({ type: \"string\" })\n\tappId?: string;\n\n\t@property({ type: \"string\" })\n\teasyFilterLib?: string;\n\n\t@property({ type: \"array\" })\n\tfilterBarMetadata?: EasyFilterPropertyMetadata[];\n\n\t@property({ type: \"array\" })\n\trecommendedValues?: string[];\n\n\t@defineReference()\n\teasyFilterInput!: Ref<EnhanceWithUI5<EasyFilterInput>>;\n\n\t@defineReference()\n\ttokenizer!: Ref<Tokenizer>;\n\n\t@aggregation({ type: \"sap.ui.core.Control\" })\n\tcontent?: Control;\n\n\t@event()\n\ttokensChanged?: EventHandler<UI5Event<{ tokens: TokenDefinition[] }, EasyFilterBarContainer>>;\n\n\t@event()\n\tqueryChanged?: EventHandler<UI5Event<{ query: string }, EasyFilterBarContainer>>;\n\n\t@event()\n\tshowValueHelp?: EventHandler<\n\t\tUI5Event<\n\t\t\t{ key: string; values: unknown[]; resolve: (value: TokenSelectedValuesDefinition[]) => void; reject: (reason?: Error) => void },\n\t\t\tEasyFilterBarContainer\n\t\t>\n\t>;\n\n\t@event()\n\tclearFilters?: EventHandler;\n\n\t@event()\n\tbeforeQueryProcessing?: EventHandler;\n\n\t@event()\n\tafterQueryProcessing?: EventHandler;\n\n\tprivate resourceBundle!: ResourceBundle;\n\n\t@defineState()\n\tprotected state: StateOf<{\n\t\tshowResult: boolean;\n\t\ttokens: TokenDefinition[];\n\t\ttokenizerEditable: boolean;\n\t\tshowSingleValueMessageStrip?: boolean;\n\t\tsingleValueMessageStripText?: string;\n\t}> = {\n\t\tshowResult: false,\n\t\ttokens: [] as TokenDefinition[],\n\t\ttokenizerEditable: true,\n\t\tshowSingleValueMessageStrip: false,\n\t\tsingleValueMessageStripText: \"\"\n\t};\n\n\tprivate innerControlPopover?: Popover;\n\n\tprivate okButton?: Button;\n\n\tprivate showAllButton?: Button;\n\n\tprivate toolbar?: OverflowToolbar;\n\n\tprivate mandatoryKeyMap?: Record<string, boolean>;\n\n\t//If set to true the error state can be seen on the tokens\n\tprivate isMandatoryCheckRequired?: boolean;\n\n\tprivate shouldTokenChangeEventFired = true;\n\n\teasyfilter?: Promise<typeof EasyFilter | undefined>;\n\n\tprivate resolveContentReady!: () => void;\n\n\tprivate inputFieldReady: Promise<void> = new Promise((resolve) => {\n\t\tthis.resolveContentReady = resolve;\n\t});\n\n\tconstructor(properties: string | ($ControlSettings & PropertiesOf<EasyFilterBarContainer>), others?: $ControlSettings) {\n\t\tsuper(properties as string, others);\n\t\tthis.initialize();\n\t}\n\n\tsetEasyFilterLib(easyFilterLib: string): void {\n\t\tthis.setProperty(\"easyFilterLib\", easyFilterLib);\n\t\tif (this.easyFilterLib) {\n\t\t\tthis.easyfilter = import(this.easyFilterLib);\n\t\t}\n\t}\n\n\tasync setAppId(appId: string): Promise<void> {\n\t\tif (!this.appId) {\n\t\t\tthis.setProperty(\"appId\", appId, true);\n\t\t\tawait this.inputFieldReady;\n\t\t\tthis.easyFilterInput.current?.setProperty(\"appId\", appId, true);\n\t\t\tawait this.easyFilterInput.current?.initShellHistoryProvider();\n\t\t}\n\t}\n\n\tsetFilterBarMetadata(filterBarMetadata: EasyFilterPropertyMetadata[]): void {\n\t\tif (!this.filterBarMetadata) {\n\t\t\tthis.setProperty(\"filterBarMetadata\", filterBarMetadata, true);\n\t\t\t// populate the tokens with default value\n\t\t\tconst tokens = this.getDefaultTokens();\n\t\t\tif (!this.innerControlPopover) {\n\t\t\t\tthis.innerControlPopover = this.createPopoverForInnerControls();\n\t\t\t\tthis.addDependent(this.innerControlPopover);\n\t\t\t}\n\t\t\tthis.state.tokens = tokens;\n\t\t\tthis.state.showResult = tokens.length > 0;\n\t\t\t///We don't want to display error valueStateMessage as soon the control renders\n\t\t\tthis.isMandatoryCheckRequired = true;\n\t\t\t//onTokenChange event should not be fired when initial set of tokens are set\n\t\t\tthis.shouldTokenChangeEventFired = false;\n\t\t}\n\t}\n\n\tinit(): void {\n\t\tthis.resourceBundle = Lib.getResourceBundleFor(\"sap.fe.controls\")!;\n\t}\n\n\tinitialize(): void {\n\t\tthis.content = this.createContent();\n\t\tthis.resolveContentReady();\n\t\tif (!this.innerControlPopover) {\n\t\t\tthis.innerControlPopover = this.createPopoverForInnerControls();\n\t\t\tthis.addDependent(this.innerControlPopover);\n\t\t}\n\t\t//We don't want to display error valueStateMessage as soon the control renders\n\t\tthis.isMandatoryCheckRequired = true;\n\t\t//onTokenChange event should not be fired when initial set of tokens are set\n\t\tthis.shouldTokenChangeEventFired = false;\n\t}\n\n\t// This method should be used before updating the state, once the state is updated the previous overridden default values would be gone forever\n\tgetDefaultTokens(): TokenDefinition[] {\n\t\tconst tokens: TokenDefinition[] = [];\n\t\tif (!this.mandatoryKeyMap) {\n\t\t\tthis.mandatoryKeyMap = {};\n\t\t}\n\t\tthis.filterBarMetadata?.forEach((data) => {\n\t\t\tconst isRequired = data.required;\n\t\t\tif (isRequired) {\n\t\t\t\t(this.mandatoryKeyMap as Record<string, boolean>)[data.name] = true;\n\t\t\t\t//Check whether the keys exist in the current state else push it across\n\t\t\t\ttokens.push({\n\t\t\t\t\tkey: data.name,\n\t\t\t\t\tlabel: data.label as string,\n\t\t\t\t\tkeySpecificSelectedValues: data.defaultValue ?? [],\n\t\t\t\t\ttype: data.type,\n\t\t\t\t\tisRequired\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\treturn tokens;\n\t}\n\n\tonEnterPressed(e: UI5Event<{ query: string }, EasyFilterInput>): void {\n\t\tthis.onGoPress(e.getParameter(\"query\"));\n\t}\n\n\t//Making it public because in live mode the app developer can decide whether to display the error ValueStateMessage\n\t//In non-live mode , we are already internally handling it on every time time a user clicks on GO/Enter buttons\n\tpublic checkIfAllMandatoryTokensFilled(): boolean {\n\t\tconst tokensInState = this.getUnSetMandatoryTokensInCurrentState();\n\t\tif (tokensInState.length !== 0) {\n\t\t\tconst tokens = this.getActualTokensFromState(tokensInState);\n\t\t\ttokens?.forEach((token) => {\n\t\t\t\ttoken.setProperty(\"valueState\", ValueState.Error);\n\t\t\t\ttoken.setProperty(\"valueStateText\", this.resourceBundle.getText(\"M_EASY_FILTER_MANDATORY_TOKEN_ERROR\"));\n\t\t\t\ttoken.openValueStateMessage();\n\t\t\t});\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic closeAllMandatoryValueStateMessages(): void {\n\t\tconst easyTokens = this.tokenizer.current?.getTokens() as EasyFilterToken[];\n\t\teasyTokens.forEach((token) => token.closeValueStateMessage());\n\t}\n\n\tasync onGoPress(magicQuery: string | undefined): Promise<void> {\n\t\tif (!magicQuery) {\n\t\t\tthis.resetState();\n\t\t\treturn;\n\t\t}\n\t\tthis.state.tokenizerEditable = true;\n\n\t\t// Call AI service to get the filter criteria\n\t\tconst easyfilter = await this.easyfilter;\n\t\tif (!easyfilter) {\n\t\t\treturn;\n\t\t}\n\t\tthis.fireEvent(\"beforeQueryProcessing\");\n\n\t\tconst easyFilterMetadata: EasyFilterMetadata = {\n\t\t\tversion: 1,\n\t\t\tentitySet: this.contextPath,\n\t\t\tfields: this.filterBarMetadata as EasyFilterPropertyMetadata[]\n\t\t};\n\n\t\tconst easyFilterResult = await easyfilter.easyFilter(magicQuery, easyFilterMetadata);\n\n\t\tif (easyFilterResult.success) {\n\t\t\t//Only add the recent query when the call is success\n\t\t\t//Do not track the recent queries when the isHistoryEnabled is set to false\n\t\t\t//It would be a violation to users privacy\n\t\t\tif (this.easyFilterInput.current?.isHistoryEnabled() ?? false) {\n\t\t\t\tthis.easyFilterInput.current?.addRecentQuery(magicQuery);\n\t\t\t}\n\t\t\tif (easyFilterResult.data.version === 1) {\n\t\t\t\tthis.handleV1Success(easyFilterResult);\n\t\t\t} else if (easyFilterResult.data.version === 2) {\n\t\t\t\t// Create the sap.ui.model.Filter from the filter and apply it directly to the list binding\n\t\t\t}\n\t\t} else {\n\t\t\t// error\n\t\t\tthis.easyFilterInput.current?.setAsInvalid(easyFilterResult.message);\n\t\t\tthis.removeNonMandatoryTokens();\n\t\t\tLog.error(\"Error while generating filter criteria: \", easyFilterResult.message);\n\t\t}\n\n\t\tthis.fireEvent(\"afterQueryProcessing\");\n\t}\n\n\t/**\n\t * Handles the success response from the AI service for version 1 of the easy filter.\n\t * @param easyFilterResult The result from the AI service\n\t * @private\n\t */\n\tprivate handleV1Success(easyFilterResult: Success<EasyFilter.EasyFilterResult>): void {\n\t\tif (easyFilterResult.data.unclear) {\n\t\t\tthis.easyFilterInput.current?.setAsInvalid(\n\t\t\t\tthis.resourceBundle.getText(\"M_EASY_FILTER_UNCLEAR_INPUT\", [easyFilterResult.data.unclear])\n\t\t\t);\n\t\t}\n\t\tif (easyFilterResult.data.filter) {\n\t\t\t// We need to show a message to the user that the filter criteria has been generated\n\t\t\tLog.debug(\"Filter criteria generated: \", JSON.stringify(easyFilterResult.data.filter, null, 2));\n\n\t\t\tconst tokens = [...this.state.tokens].filter((token) => token.isRequired);\n\n\t\t\t// Validate and apply the filter criteria\n\t\t\tEasyFilterUtils.formatData(tokens, easyFilterResult.data.filter, this.filterBarMetadata as EasyFilterPropertyMetadata[]);\n\n\t\t\tconst updatedTokens = this.verifySingleSelectTokenValues(tokens);\n\t\t\tthis.state.showResult = true;\n\t\t\tthis.state.tokens = updatedTokens;\n\t\t}\n\t}\n\n\t//every single select menu type should have only one value, else splice to one value and update the  message strip\n\tverifySingleSelectTokenValues(tokens: TokenDefinition[]): TokenDefinition[] {\n\t\tconst singleSelectTokenLabels: string[] = [];\n\t\ttokens.forEach((token) => {\n\t\t\tif (token.type === \"MenuWithSingleSelect\") {\n\t\t\t\tif (token.keySpecificSelectedValues[0].selectedValues.length > 1) {\n\t\t\t\t\tsingleSelectTokenLabels.push(token.label);\n\t\t\t\t\ttoken.keySpecificSelectedValues[0].selectedValues.splice(1);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tif (singleSelectTokenLabels.length) {\n\t\t\tthis.state.singleValueMessageStripText = this.resourceBundle.getText(\"M_EASY_FILTER_SINGLE_VALUE_MESSAGE\", [\n\t\t\t\t`<strong>${singleSelectTokenLabels.join(\", \")}</strong>`\n\t\t\t]);\n\t\t\tthis.state.showSingleValueMessageStrip = true;\n\t\t}\n\t\treturn tokens;\n\t}\n\n\tcreatePopoverForInnerControls(): Popover {\n\t\tif (!this.innerControlPopover) {\n\t\t\tthis.innerControlPopover = (\n\t\t\t\t<Popover id={this.getId() + \"-innerPopover\"} showArrow={false} showHeader={true} placement={PlacementType.Bottom}>\n\t\t\t\t\t{{\n\t\t\t\t\t\tfooter: this.getToolbar()\n\t\t\t\t\t}}\n\t\t\t\t</Popover>\n\t\t\t);\n\t\t}\n\t\treturn this.innerControlPopover as Popover;\n\t}\n\n\tgetToolbar(): OverflowToolbar | undefined {\n\t\tif (!this.toolbar) {\n\t\t\tconst okButton = this.getOkButton();\n\t\t\tconst showAllButton = this.getShowAllButton();\n\t\t\tthis.toolbar = (\n\t\t\t\t<OverflowToolbar>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcontent: (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<ToolbarSpacer />\n\t\t\t\t\t\t\t\t{okButton}\n\t\t\t\t\t\t\t\t{showAllButton}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)\n\t\t\t\t\t}}\n\t\t\t\t</OverflowToolbar>\n\t\t\t);\n\t\t}\n\t\treturn this.toolbar;\n\t}\n\n\tgetOkButton(): Button | undefined {\n\t\tif (!this.okButton) {\n\t\t\tthis.okButton = <Button text={this.resourceBundle.getText(\"M_EASY_FILTER_POPOVER_OK\")} type={ButtonType.Emphasized} />;\n\t\t}\n\t\treturn this.okButton;\n\t}\n\n\tgetShowAllButton(): Button | undefined {\n\t\tif (!this.showAllButton) {\n\t\t\tthis.showAllButton = <Button text={this.resourceBundle.getText(\"M_EASY_FILTER_POPOVER_SHOW_ALL_ITEMS\")} />;\n\t\t}\n\t\treturn this.showAllButton;\n\t}\n\n\tonStateChange(changedProps: string[] = []): void {\n\t\tif (changedProps.includes(\"tokens\")) {\n\t\t\tif (this.shouldTokenChangeEventFired) {\n\t\t\t\tthis.fireEvent(\"tokensChanged\", {\n\t\t\t\t\ttokens: this.state.tokens.map((data) => deepClone(data))\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.state.showResult = this.state.tokens.length > 0;\n\t\t\tif (!(this.isMandatoryCheckRequired ?? false)) {\n\t\t\t\tthis.checkIfAllMandatoryTokensFilled();\n\t\t\t}\n\t\t}\n\t\t//Resetting to default values\n\t\tthis.isMandatoryCheckRequired = false;\n\t\tthis.shouldTokenChangeEventFired = true;\n\t}\n\n\tcreateContent(): VBox {\n\t\tconst $topGoBtn = createReference<Button>();\n\t\tconst outVBox = (\n\t\t\t<VBox>\n\t\t\t\t<FlexBox renderType=\"Bare\">\n\t\t\t\t\t<EasyFilterInput\n\t\t\t\t\t\trecommendedValues={this.recommendedValues}\n\t\t\t\t\t\tref={this.easyFilterInput}\n\t\t\t\t\t\tenterPressed={this.onEnterPressed.bind(this)}\n\t\t\t\t\t\tqueryChanged={(e): void => {\n\t\t\t\t\t\t\tthis.fireEvent(\"queryChanged\", { query: e.getParameter(\"query\") });\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tliveChange={(): void => {\n\t\t\t\t\t\t\tthis.state.tokenizerEditable = false;\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<Button\n\t\t\t\t\t\ticon={\"sap-icon://ai\"}\n\t\t\t\t\t\tclass={\"sapUiSmallMarginBegin\"}\n\t\t\t\t\t\tref={$topGoBtn}\n\t\t\t\t\t\ttext={this.resourceBundle.getText(\"M_EASY_FILTER_GO\")}\n\t\t\t\t\t\ttype={ButtonType.Emphasized}\n\t\t\t\t\t\tpress={this.onGoButtonPress.bind(this)}\n\t\t\t\t\t/>\n\t\t\t\t</FlexBox>\n\t\t\t\t<FlexBox\n\t\t\t\t\trenderType=\"Bare\"\n\t\t\t\t\tvisible={bindState(this.state, \"showResult\")}\n\t\t\t\t\talignItems={FlexAlignItems.Center}\n\t\t\t\t\twrap={FlexWrap.Wrap}\n\t\t\t\t\tjustifyContent={FlexJustifyContent.SpaceBetween}\n\t\t\t\t\tclass={\"sapUiTinyMarginTop\"}\n\t\t\t\t>\n\t\t\t\t\t<FlexBox class={\"sapFeControlsGap8px\"} renderType=\"Bare\" alignItems={FlexAlignItems.Center} wrap={FlexWrap.Wrap}>\n\t\t\t\t\t\t<AINotice resourceBundle={this.resourceBundle} />\n\t\t\t\t\t\t<Tokenizer\n\t\t\t\t\t\t\teditable={and(bindState(this.state, \"tokenizerEditable\"), true)}\n\t\t\t\t\t\t\tclass={\"sapFeControlsTokenizer\"}\n\t\t\t\t\t\t\ttokens={bindState(this.state, \"tokens\")}\n\t\t\t\t\t\t\tref={this.tokenizer}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t\ttokens: (idx: number, ctx: Context): Token => {\n\t\t\t\t\t\t\t\t\tconst object = ctx.getObject() as TokenDefinition;\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<Token\n\t\t\t\t\t\t\t\t\t\t\tkey={this.state.tokens.key}\n\t\t\t\t\t\t\t\t\t\t\tlabel={this.state.tokens.label}\n\t\t\t\t\t\t\t\t\t\t\titems={this.state.tokens.keySpecificSelectedValues}\n\t\t\t\t\t\t\t\t\t\t\tmandatory={this.isKeyMandatory(object.key)}\n\t\t\t\t\t\t\t\t\t\t\tdelete={(): void => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst tokenIndex = this.state.tokens.findIndex((token) => token.key === object.key);\n\t\t\t\t\t\t\t\t\t\t\t\tconst newTokens = this.state.tokens.concat();\n\t\t\t\t\t\t\t\t\t\t\t\tnewTokens.splice(tokenIndex, 1);\n\t\t\t\t\t\t\t\t\t\t\t\tthis.state.tokens = newTokens;\n\t\t\t\t\t\t\t\t\t\t\t\tthis.updateFilterInput(\"tokenUpdated\");\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t\t\t\t\t\tcustomData: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t<CustomData key=\"TokenInfo\" value={object} />,\n\t\t\t\t\t\t\t\t\t\t\t\t\t<CustomData key=\"popover\" value={this.innerControlPopover} />,\n\t\t\t\t\t\t\t\t\t\t\t\t\t<CustomData key=\"easyFilterBarContainer\" value={this} />,\n\t\t\t\t\t\t\t\t\t\t\t\t\t<CustomData\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey=\"codeList\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={this.filterBarMetadata?.find((data) => data.name === object.key)?.codeList}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t</Token>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t</Tokenizer>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\ttext={this.resourceBundle.getText(\"M_EASY_FILTER_RESET\")}\n\t\t\t\t\t\t\ttype={ButtonType.Transparent}\n\t\t\t\t\t\t\tpress={(): void => {\n\t\t\t\t\t\t\t\tthis.resetState();\n\t\t\t\t\t\t\t\t//Retaining the focus on popover doesn't make the popover close on every interaction\n\t\t\t\t\t\t\t\tthis.easyFilterInput.current?.$searchInput.focus();\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</FlexBox>\n\t\t\t\t</FlexBox>\n\t\t\t\t<FlexBox renderType=\"Bare\">\n\t\t\t\t\t<MessageStrip\n\t\t\t\t\t\ttext={bindState(this.state, \"singleValueMessageStripText\")}\n\t\t\t\t\t\tshowIcon={true}\n\t\t\t\t\t\tenableFormattedText={true}\n\t\t\t\t\t\tvisible={bindState(this.state, \"showSingleValueMessageStrip\")}\n\t\t\t\t\t\tshowCloseButton={true}\n\t\t\t\t\t\tclose={(): void => {\n\t\t\t\t\t\t\tthis.state.showSingleValueMessageStrip = false;\n\t\t\t\t\t\t}}\n\t\t\t\t\t></MessageStrip>\n\t\t\t\t</FlexBox>\n\t\t\t</VBox>\n\t\t) as VBox;\n\t\tFESRHelper.setSemanticStepname($topGoBtn.current!, \"press\", \"fe:ai:search\");\n\t\treturn outVBox;\n\t}\n\n\tasync onGoButtonPress(): Promise<void> {\n\t\tthis.state.tokenizerEditable = true;\n\t\tlet currentInputValue = this.easyFilterInput.current?.getValue();\n\t\tconst currentInputPlaceholder = this.easyFilterInput.current?.getPlaceholder();\n\n\t\tif (currentInputValue === \"\" && currentInputPlaceholder !== this.resourceBundle.getText(\"M_EASY_FILTER_PLACEHOLDER\")) {\n\t\t\tthis.easyFilterInput.current?.setValue(currentInputPlaceholder || \"\");\n\t\t\tcurrentInputValue = currentInputPlaceholder;\n\t\t}\n\t\tawait this.onGoPress(currentInputValue);\n\t}\n\n\tresetState(): void {\n\t\tthis.fireEvent(\"clearFilters\");\n\t\tthis.state.tokens = this.getDefaultTokens();\n\t\tthis.updateFilterInput(\"tokenReset\");\n\t\tthis.state.tokenizerEditable = true;\n\t\tthis.isMandatoryCheckRequired = true;\n\t\t//Set the Value States of all the Tokens back to None\n\t\tthis.tokenizer.current?.getTokens().forEach((token) => token.setProperty(\"valueState\", ValueState.None));\n\t\tthis.tokenizer.current?.getTokens().forEach((token) => token.setProperty(\"valueStateText\", null));\n\t}\n\n\t//The below code updates the existing state by fetching the key and selectedValues\n\tupdateTokenArray(changeType: TokenSetters, newTokenSpecificValues: TokenSelectedValuesDefinition[], tokenKey: string): void {\n\t\tconst newTokens = this.state.tokens.map((token) => ({ ...token, keySpecificSelectedValues: [...token.keySpecificSelectedValues] }));\n\t\tconst tokenIndex = newTokens.findIndex((t) => t.key === tokenKey);\n\t\tconst token = newTokens[tokenIndex];\n\t\tif (tokenIndex != -1) {\n\t\t\tswitch (changeType) {\n\t\t\t\tcase \"setSelectedValues\":\n\t\t\t\t\tthis.setSelectedValues(token, newTokenSpecificValues, tokenIndex, newTokens);\n\t\t\t\t\ttoken.keySpecificSelectedValues = newTokenSpecificValues;\n\t\t\t\t\t//Remove the token entirely\n\t\t\t\t\tif (!this.isKeyMandatory(token.key) && token.keySpecificSelectedValues.length === 0) {\n\t\t\t\t\t\tnewTokens.splice(tokenIndex, 1);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tLog.error(\"Specifying a setter that is out of the boundary\");\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// Update the state by assigning the new tokens array\n\t\t\tthis.state.tokens = newTokens;\n\t\t\tthis.state.showResult = newTokens.length > 0;\n\t\t\tthis.updateFilterInput(\"tokenUpdated\");\n\t\t}\n\t}\n\n\tpublic closeInnerControlPopover(): void {\n\t\tthis.innerControlPopover?.close();\n\t}\n\n\tprivate setSelectedValues(\n\t\ttoken: TokenDefinition,\n\t\tnewTokenSpecificValues: TokenSelectedValuesDefinition[],\n\t\ttokenIndex: number,\n\t\tnewTokens: TokenDefinition[]\n\t): void {\n\t\ttoken.keySpecificSelectedValues = newTokenSpecificValues;\n\t\tif (!this.isKeyMandatory(token.key) && token.keySpecificSelectedValues.length === 0) {\n\t\t\tnewTokens.splice(tokenIndex, 1);\n\t\t}\n\t}\n\n\tisKeyMandatory(key: string): boolean {\n\t\tif (!this.mandatoryKeyMap) {\n\t\t\tthis.mandatoryKeyMap = {};\n\t\t}\n\t\treturn this.mandatoryKeyMap[key] ? true : false;\n\t}\n\n\tremoveNonMandatoryTokens(): this {\n\t\tconst newToken: TokenDefinition[] = this.state.tokens.filter((token) => {\n\t\t\treturn this.isKeyMandatory(token.key);\n\t\t});\n\t\tthis.state.tokens = newToken;\n\t\treturn this;\n\t}\n\n\tupdateFilterInput(value: string): void {\n\t\tconst currValue: string = this.easyFilterInput.current?.getValue() || \"\";\n\t\tif (value === \"tokenUpdated\" && currValue !== \"\") {\n\t\t\tthis.easyFilterInput.current?.setValue(\"\");\n\t\t\tthis.easyFilterInput.current?.setPlaceholder(currValue);\n\t\t} else if (value === \"tokenReset\") {\n\t\t\tthis.easyFilterInput.current?.setValue(\"\");\n\t\t\tthis.easyFilterInput.current?.setPlaceholder(this.resourceBundle.getText(\"M_EASY_FILTER_PLACEHOLDER\"));\n\t\t}\n\t}\n\n\tgetTokensInInitialState(): TokenDefinition[] {\n\t\tconst newTokens = this.state.tokens.map((token) => ({ ...token, keySpecificSelectedValues: [...token.keySpecificSelectedValues] }));\n\t\tconst mandatoryTokens = newTokens.filter((token) => {\n\t\t\tif (this.isKeyMandatory(token.key)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\treturn mandatoryTokens.map((token) => ({ ...token, keySpecificSelectedValues: [] }));\n\t}\n\n\tgetUnSetMandatoryTokensInCurrentState(): TokenDefinition[] {\n\t\treturn this.state.tokens.filter((token) => {\n\t\t\tconst isKeyMandatory = this.isKeyMandatory(token.key);\n\t\t\tif (isKeyMandatory) {\n\t\t\t\treturn token.keySpecificSelectedValues.length === 0;\n\t\t\t}\n\t\t});\n\t}\n\n\tgetActualTokensFromState(tokens: TokenDefinition[]): EasyFilterToken[] | undefined {\n\t\tconst requiredKeys = tokens.map((token) => token.key);\n\t\treturn this.tokenizer.current?.getTokens().filter((token) => requiredKeys.includes(token.getKey())) as\n\t\t\t| EasyFilterToken[]\n\t\t\t| undefined;\n\t}\n\n\tstatic render(rm: RenderManager, control: EasyFilterBarContainer): void {\n\t\treturn jsx.renderUsingRenderManager(rm, control, () => {\n\t\t\treturn <span ref={control}>{control.getAggregation(\"content\")}</span>;\n\t\t});\n\t}\n}\n"],"mappings":"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","ignoreList":[]}