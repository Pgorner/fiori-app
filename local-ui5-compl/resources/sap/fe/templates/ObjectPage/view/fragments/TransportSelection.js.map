{"version":3,"file":"TransportSelection.js","names":["TransportSelection","_dec","defineUI5Class","_dec2","property","type","_dec3","_dec4","controllerExtensionHandler","_class","_class2","_BuildingBlock","props","others","_this","call","this","_initializerDefineProperty","_descriptor","_descriptor2","_exports","_inheritsLoose","_proto","prototype","onMetadataAvailable","_ownerComponent","definition","getModel","getObject","content","createContent","selectTransport","async","context","getBindingContext","label","messageStrip","getLink","getText","getPageController","editFlow","invokeAction","selectTransportAction","contexts","getTypeExpression","relativePath","getRelativePaths","transportPropertyObjectPath","requiredExpression","isRequiredExpression","targetObject","ifElse","and","not","pathInModel","transportRequestProperty","MessageType","Warning","Information","getLinkTextExpression","getTranslatedText","getStripText","textExpression","getTextBindingExpression","noTransportSelected","transportSelected","concat","getStripVisible","actionEnabledExpression","UI","IsEditable","dataModelObjects","getDataModelObjectPath","targetEntityType","actions","getActionEnabledExpression","convertedTypes","enhanceDataModelPath","_jsx","MessageStrip","text","showIcon","customIcon","class","visible","children","link","Link","press","bind","validateTransportRequestBeforeSave","getVisible","getType","leadingControl","Promise","resolve","BuildingBlock","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer","Object","getOwnPropertyDescriptor"],"sources":["./TransportSelection.tsx"],"sourcesContent":["import type { Property } from \"@sap-ux/vocabularies-types\";\nimport type { BindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { and, concat, ifElse, not, pathInModel } from \"sap/fe/base/BindingToolkit\";\nimport type { PropertiesOf } from \"sap/fe/base/ClassSupport\";\nimport { defineUI5Class, property } from \"sap/fe/base/ClassSupport\";\nimport { controllerExtensionHandler } from \"sap/fe/base/HookSupport\";\nimport type TemplateComponent from \"sap/fe/core/TemplateComponent\";\nimport BuildingBlock from \"sap/fe/core/buildingBlocks/BuildingBlock\";\nimport type { TransportSelectionDefinition } from \"sap/fe/core/converters/ManifestSettings\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport { UI } from \"sap/fe/core/helpers/BindingHelper\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { enhanceDataModelPath, getRelativePaths } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { isRequiredExpression } from \"sap/fe/core/templating/FieldControlHelper\";\nimport { getActionEnabledExpression } from \"sap/fe/core/templating/UIFormatters\";\nimport { getTextBindingExpression } from \"sap/fe/macros/field/FieldTemplating\";\nimport Link from \"sap/m/Link\";\nimport MessageStrip from \"sap/m/MessageStrip\";\nimport MessageType from \"sap/ui/core/message/MessageType\";\nimport type ODataV4Context from \"sap/ui/model/odata/v4/Context\";\n\n@defineUI5Class(\"sap.fe.templates.ObjectPage.view.fragments.TransportSelection\")\nexport default class TransportSelection extends BuildingBlock<MessageStrip> {\n\t// The transport selection definition\n\t@property({ type: \"object\" })\n\tpublic definition!: TransportSelectionDefinition;\n\n\t// a flag to indicate the leading control, also taking care on validating on safe\n\t@property({ type: \"boolean\" })\n\tpublic leadingControl!: boolean;\n\n\t// Reference to the message strip\n\tmessageStrip!: MessageStrip;\n\n\t// the selectTransport action enablement\n\tactionEnabledExpression!: BindingToolkitExpression<boolean>;\n\n\t// data model object path to the transport property\n\ttransportPropertyObjectPath!: DataModelObjectPath<Property>;\n\n\tconstructor(props?: PropertiesOf<TransportSelection>, others?: PropertiesOf<TransportSelection>) {\n\t\tsuper(props, others);\n\t}\n\n\tonMetadataAvailable(_ownerComponent: TemplateComponent): void {\n\t\tsuper.onMetadataAvailable(_ownerComponent);\n\t\tthis.definition = this.definition ?? _ownerComponent.getModel(\"_pageModel\").getObject(\"/transportSelection\");\n\t\tthis.content = this.createContent();\n\t}\n\n\t/**\n\t * Call the selectTransportAction once the user clicks on the link in the message strip.\n\t * @returns Promise that is resolved once a transport request was selected\n\t */\n\tasync selectTransport(): Promise<unknown> {\n\t\tconst context = this.getBindingContext() as ODataV4Context;\n\t\tconst label = this.messageStrip.getLink().getText();\n\t\treturn this.getPageController()?.editFlow.invokeAction(this.definition.selectTransportAction, { contexts: context, label: label });\n\t}\n\n\t/**\n\t * Get expression for the message strip type.\n\t *\n\t * If mandatory and no transport request is given the type is Warning,\n\t * otherwise it's Information.\n\t * @returns Expression to determine the message strip type.\n\t */\n\tgetTypeExpression(): BindingToolkitExpression<MessageType> {\n\t\tconst relativePath = getRelativePaths(this.transportPropertyObjectPath);\n\t\tconst requiredExpression = isRequiredExpression(this.transportPropertyObjectPath.targetObject, relativePath);\n\t\treturn ifElse(\n\t\t\tand(requiredExpression, not(pathInModel(this.definition.transportRequestProperty))),\n\t\t\tMessageType.Warning,\n\t\t\tMessageType.Information\n\t\t);\n\t}\n\n\t/**\n\t * Get expression for the link text.\n\t *\n\t * If transport request is given the text shall be change transport, if not\n\t * it shall be select transport.\n\t * @returns Expression to determine the link text.\n\t */\n\tgetLinkTextExpression(): BindingToolkitExpression<string> {\n\t\treturn ifElse(\n\t\t\tpathInModel(this.definition.transportRequestProperty),\n\t\t\tthis.getTranslatedText(\"T_TRANSPORT_SELECTION_CHANGE_TRANSPORT\"),\n\t\t\tthis.getTranslatedText(\"T_TRANSPORT_SELECTION_SELECT_TRANSPORT\")\n\t\t);\n\t}\n\n\t/**\n\t * Get expression for the message strip text.\n\t *\n\t * If no transport given we show a warning text, if one is given we show the\n\t * selected transport request, and also consider the text annotation on the\n\t * transport request property.\n\t * @returns Expression to determine the message strip text\n\t */\n\tgetStripText(): BindingToolkitExpression<string | undefined> {\n\t\tconst textExpression = getTextBindingExpression(this.transportPropertyObjectPath, {});\n\t\tconst noTransportSelected = this.getTranslatedText(\"T_TRANSPORT_SELECTION_NO_TRANSPORT_SELECTED\");\n\t\tconst transportSelected = concat(`${this.getTranslatedText(\"T_TRANSPORT_SELECTION_SELECTED_TRANSPORT\")}: `, textExpression);\n\t\treturn ifElse(pathInModel(this.definition.transportRequestProperty), transportSelected, noTransportSelected);\n\t}\n\n\t/**\n\t * Get expression for the message strip visibility.\n\t *\n\t * If not in edit mode we don't show the message strip at all. If in edit\n\t * mode we check the OperationAvailable annotation on the selectTransportAction.\n\t * @returns Expression to determine the  message strip visibility\n\t */\n\tgetStripVisible(): BindingToolkitExpression<boolean> {\n\t\t// The visibility of the strip relies on the Core.OperationAvailable set on the transport select action\n\t\treturn ifElse(this.actionEnabledExpression, UI.IsEditable, false);\n\t}\n\n\t/**\n\t * Get the message strip to be shown in the object page header.\n\t * @returns Message strip or nothing in case the feature is not enabled\n\t */\n\tcreateContent(): MessageStrip | undefined {\n\t\tconst dataModelObjects = this.getDataModelObjectPath<PageContextPathTarget>();\n\n\t\tconst selectTransportAction = dataModelObjects?.targetEntityType.actions[this.definition.selectTransportAction];\n\t\tif (dataModelObjects && selectTransportAction) {\n\t\t\tthis.actionEnabledExpression = getActionEnabledExpression(\n\t\t\t\tselectTransportAction,\n\t\t\t\tdataModelObjects?.convertedTypes,\n\t\t\t\tdataModelObjects\n\t\t\t);\n\t\t\tthis.transportPropertyObjectPath = enhanceDataModelPath<Property>(dataModelObjects, this.definition.transportRequestProperty);\n\n\t\t\tthis.messageStrip = (\n\t\t\t\t<MessageStrip\n\t\t\t\t\ttext={this.getStripText()}\n\t\t\t\t\ttype={this.getTypeExpression()}\n\t\t\t\t\tshowIcon=\"true\"\n\t\t\t\t\tcustomIcon=\"sap-icon://shipping-status\"\n\t\t\t\t\tclass=\"sapUiSmallMarginTop\"\n\t\t\t\t\tvisible={this.getStripVisible()}\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\tlink: <Link press={this.selectTransport.bind(this)} text={this.getLinkTextExpression()} />\n\t\t\t\t\t}}\n\t\t\t\t</MessageStrip>\n\t\t\t);\n\t\t\treturn this.messageStrip;\n\t\t}\n\t}\n\n\t/**\n\t * Show selectTransport dialog if no transport chosen.\n\t *\n\t * We check if the TransportSelection feature is enabled and if the message strip\n\t * type is warning (= mandatory but no transport request chosen). If so we show the selectTransport dialog.\n\t * @returns Promise that is resolved once a transport request was selected\n\t */\n\t@controllerExtensionHandler(\"editFlow\", \"onBeforeSave\")\n\tasync validateTransportRequestBeforeSave(): Promise<unknown> {\n\t\tif (this.messageStrip.getVisible() && this.messageStrip.getType() === MessageType.Warning && this.leadingControl) {\n\t\t\treturn this.selectTransport();\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n}\n"],"mappings":"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","ignoreList":[]}