{"version":3,"file":"ViewState.js","names":["NavType","NavLibrary","VariantManagementType","CoreLibrary","VariantManagement","TemplateContentView","InitialLoadMode","DISPLAY_CURRENCY_PROPERTY_NAME","ViewStateOverride","_bSearchTriggered","applyInitialStateOnly","onBeforeStateApplied","aPromises","navigationType","oView","this","getView","oController","getController","oFilterBar","_getFilterBarControl","aTables","_getControls","setSuspendSelection","push","waitForInitialization","hybrid","_clearFilterConditions","forEach","oTable","initialized","adaptBindingRefreshControls","aControls","base","aViewControls","aControlsToRefresh","KeepAliveHelper","getControlsForRefresh","Array","prototype","apply","adaptStateControls","aStateControls","oFilterBarVM","_getFilterBarVM","_isMultiMode","_getMultiModeControl","_hasMultiVisualizations","_getSegmentedButton","Chart","Table","byId","retrieveAdditionalStates","mAdditionalStates","bPendingFilter","getBindingContext","getProperty","dataLoaded","sAlpContentView","alpContentView","applyAdditionalStates","oAdditionalStates","filterBarAPI","getParent","triggerSearch","oInternalModelContext","Device","system","desktop","Hybrid","getModel","setProperty","getPath","isSearchTriggeredByInitialLoad","view","controller","viewData","getViewData","variantManagement","Control","_getFilterBarVariantControl","currentVariantKey","getCurrentVariantKey","xAppState","initialLoad","Enabled","_shouldAutoTriggerSearch","_getApplyAutomaticallyOnVariant","_enableFilterBar","filterBarControl","preventInitialSearch","fnOnSearch","getSuspendSelection","attachEventOnce","_applyNavigationParametersToFilterbar","oNavigationParameter","aResults","oAppComponent","getAppComponent","oComponentData","getComponentData","oStartupParameters","startupParameters","oVariantPromise","handleVariantIdPassedViaURLParams","bFilterVariantApplied","then","aVariants","length","_applySelectionVariant","bPreventInitialSearch","oFilterBarControl","initial","requiresStandardVariant","_preventInitialSearch","internalModelContext","searchTriggeredByInitialLoad","catch","Log","error","async","oUrlParams","aPageVariantId","aFilterBarVariantId","aTableVariantId","aChartVariantId","oVariantIDs","sPageVariantId","sFilterBarVariantId","sTableVariantId","sChartVariantId","_handleControlVariantId","oVM","sVariantManagement","_handlePageVariantId","_handleFilterBarVariantControlId","_handleTableControlVariantId","_handleChartControlVariantId","Promise","all","getVariants","oVariant","_findAndPushVariantToPromise","oTableVariant","getVariant","aCharts","oChart","oChartVariant","sVariantId","key","_applyControlVariant","sVariantID","sVariantReference","_checkIfVariantIdIsAvailable","getStandardVariantKey","ControlVariantApplyAPI","activateVariant","element","variantReference","Page","None","oVariantManagement","oCurrentVariant","find","oItem","getKey","executeOnSelect","_checkIfDisplayCurrencyIsRequired","metaModel","contextPath","metaContext","getMetaContext","dataModelObjectPath","getInvolvedDataModelObjects","entitySet","startingEntitySet","_type","undefined","requiredProperties","annotations","Capabilities","FilterRestrictions","RequiredProperties","displayCurrencyIsMandatory","some","requiredProperty","value","_addDefaultDisplayCurrencyToSV","sv","svDefaults","isEmpty","getMetaModel","svOptions","getSelectOption","defaultSVOptions","displayCurrencyDefaultExists","noSVDisplayCurrencyExists","displayCurrencySelectOption","sign","option","low","high","addSelectOption","_getAdjustedSV","appStateSV","useFLPDefaultValues","adjustedSV","SelectionVariant","toJSONObject","alreadyAppliedSV","getSelectionVariant","appliedSelOptNames","getSelectOptionsPropertyNames","reduce","svCopy","selOptionName","svSelOpts","selectOptions","massAddSelectOption","navigationParameter","filterVariantApplied","filterBar","selectionVariant","selectionVariantDefaults","reqStdVariant","bNavSelVarHasDefaultsOnly","svDefaultsOnly","resolve","clearFiltersAndReplaceWithAppState","_activeVariantAndGetAppStateOverride","svDefaultsArePresent","stdVariantIsDefaultVariant","getDefaultVariantKey","svToSet","setSelectionVariant","variantKey","getId","_fnClearStateBeforexAppNav","StateUtil","retrieveExternalState","oExternalState","oCondition","filter","field","condition","oError","aItems","oClearConditions","applyExternalState","items"],"sources":["./ViewState.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport type ViewState from \"sap/fe/core/controllerextensions/ViewState\";\nimport type { NavigationParameter } from \"sap/fe/core/controllerextensions/ViewState\";\nimport { getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport KeepAliveHelper from \"sap/fe/core/helpers/KeepAliveHelper\";\nimport type { InternalModelContext } from \"sap/fe/core/helpers/ModelHelper\";\nimport CoreLibrary from \"sap/fe/core/library\";\nimport type { PropertyInfo } from \"sap/fe/macros/DelegateUtil\";\nimport type FilterBarAPI from \"sap/fe/macros/filterBar/FilterBarAPI\";\nimport SelectionVariant from \"sap/fe/navigation/SelectionVariant\";\nimport NavLibrary from \"sap/fe/navigation/library\";\nimport type {\n\tdefault as ListReportController,\n\tdefault as ListReportControllerController\n} from \"sap/fe/templates/ListReport/ListReportController.controller\";\nimport Device from \"sap/ui/Device\";\nimport type Control from \"sap/ui/core/Control\";\nimport type UI5Element from \"sap/ui/core/Element\";\nimport type View from \"sap/ui/core/mvc/View\";\nimport ControlVariantApplyAPI from \"sap/ui/fl/apply/api/ControlVariantApplyAPI\";\nimport type VariantManagement from \"sap/ui/fl/variants/VariantManagement\";\nimport type Chart from \"sap/ui/mdc/Chart\";\nimport type FilterBar from \"sap/ui/mdc/FilterBar\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport StateUtil from \"sap/ui/mdc/p13n/StateUtil\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\n\ntype VariantObject = {\n\tauthor: string;\n\tchange: boolean;\n\tcontexts: object;\n\texecuteOnSelect: boolean;\n\tfavorite: boolean;\n\tkey: string;\n\toriginalContexts: object;\n\toriginalExecuteOnSelect: boolean;\n\toriginalFavorite: boolean;\n\toriginalTitle: string;\n\toriginalVisible: boolean;\n\tremove: boolean;\n\trename: boolean;\n\tsharing: string;\n\ttitle: string;\n\tvisible: boolean;\n};\n\ntype NavHandlerNavParams = NavigationParameter & {\n\tbNavSelVarHasDefaultsOnly?: boolean;\n};\n\ntype LRViewData = {\n\tcontrolConfiguration?: Record<string, Record<string, unknown>>;\n\tentitySet?: string;\n\tcontextPath?: string;\n\tvariantManagement?: boolean;\n};\n\ntype VariantIDs = {\n\tsPageVariantId: string;\n\tsFilterBarVariantId: string;\n\tsTableVariantId: string;\n\tsChartVariantId: string;\n};\n\nconst NavType = NavLibrary.NavType,\n\tVariantManagementType = CoreLibrary.VariantManagement,\n\tTemplateContentView = CoreLibrary.TemplateContentView,\n\tInitialLoadMode = CoreLibrary.InitialLoadMode,\n\tDISPLAY_CURRENCY_PROPERTY_NAME = \"DisplayCurrency\";\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nconst ViewStateOverride = {\n\t_bSearchTriggered: false,\n\tapplyInitialStateOnly: function (): boolean {\n\t\treturn true;\n\t},\n\tonBeforeStateApplied: function (\n\t\tthis: ViewState & typeof ViewStateOverride,\n\t\taPromises: Promise<unknown>[],\n\t\tnavigationType?: string\n\t): void {\n\t\tconst oView = this.getView(),\n\t\t\toController = oView.getController() as ListReportController,\n\t\t\toFilterBar = oController._getFilterBarControl(),\n\t\t\taTables = oController._getControls(\"table\") as Table[];\n\t\tif (oFilterBar) {\n\t\t\toFilterBar.setSuspendSelection(true);\n\t\t\taPromises.push(oFilterBar.waitForInitialization());\n\t\t\t//This is required to remove any existing or default filter conditions before restoring the filter bar state in hybrid navigation mode.\n\t\t\tif (navigationType === NavType.hybrid) {\n\t\t\t\tthis._clearFilterConditions(oFilterBar);\n\t\t\t}\n\t\t}\n\t\taTables.forEach(function (oTable: Table): void {\n\t\t\taPromises.push((oTable as unknown as { initialized: () => Promise<unknown> }).initialized());\n\t\t});\n\n\t\tdelete this._bSearchTriggered;\n\t},\n\tadaptBindingRefreshControls: function (this: ViewState, aControls: Control[]): void {\n\t\tconst oView = this.base.getView(),\n\t\t\toController = oView.getController() as ListReportController,\n\t\t\taViewControls = oController._getControls(),\n\t\t\taControlsToRefresh = KeepAliveHelper.getControlsForRefresh(oView, aViewControls);\n\n\t\tArray.prototype.push.apply(aControls, aControlsToRefresh);\n\t},\n\tadaptStateControls: function (this: ViewState & typeof ViewStateOverride, aStateControls: UI5Element[]): void {\n\t\tconst oView = this.base.getView(),\n\t\t\toController = oView.getController() as ListReportController;\n\t\tconst oFilterBarVM = this._getFilterBarVM(oView);\n\t\tif (oFilterBarVM) {\n\t\t\taStateControls.push(oFilterBarVM);\n\t\t}\n\t\tif (oController._isMultiMode()) {\n\t\t\taStateControls.push(oController._getMultiModeControl());\n\t\t}\n\t\tif (oController._hasMultiVisualizations()) {\n\t\t\taStateControls.push(oController._getSegmentedButton(TemplateContentView.Chart)!);\n\t\t\taStateControls.push(oController._getSegmentedButton(TemplateContentView.Table)!);\n\t\t}\n\t\taStateControls.push(oView.byId(\"fe::ListReport\")!);\n\t},\n\tretrieveAdditionalStates: function (\n\t\tthis: ViewState & typeof ViewStateOverride,\n\t\tmAdditionalStates: { dataLoaded: boolean; alpContentView: string }\n\t): void {\n\t\tconst oView = this.getView(),\n\t\t\toController = oView.getController() as ListReportController,\n\t\t\tbPendingFilter = (oView.getBindingContext(\"internal\") as InternalModelContext).getProperty(\"hasPendingFilters\");\n\n\t\tmAdditionalStates.dataLoaded = !bPendingFilter || !!this._bSearchTriggered;\n\t\tif (oController._hasMultiVisualizations()) {\n\t\t\tconst sAlpContentView = oView.getBindingContext(\"internal\")!.getProperty(\"alpContentView\");\n\t\t\tmAdditionalStates.alpContentView = sAlpContentView;\n\t\t}\n\n\t\tdelete this._bSearchTriggered;\n\t},\n\tapplyAdditionalStates: function (\n\t\tthis: ViewState & typeof ViewStateOverride,\n\t\toAdditionalStates?: { dataLoaded: boolean; alpContentView?: string }\n\t): void {\n\t\tconst oView = this.getView(),\n\t\t\toController = oView.getController() as ListReportController,\n\t\t\toFilterBar = oController._getFilterBarControl();\n\n\t\tif (oAdditionalStates) {\n\t\t\t// explicit check for boolean values - 'undefined' should not alter the triggered search property\n\t\t\tif (oAdditionalStates.dataLoaded === false && oFilterBar) {\n\t\t\t\t// without this, the data is loaded on navigating back\n\t\t\t\t(oFilterBar as { _bSearchTriggered?: boolean })._bSearchTriggered = false;\n\t\t\t} else if (oAdditionalStates.dataLoaded === true) {\n\t\t\t\tif (oFilterBar) {\n\t\t\t\t\tconst filterBarAPI = oFilterBar.getParent() as FilterBarAPI;\n\t\t\t\t\tfilterBarAPI.triggerSearch();\n\t\t\t\t}\n\t\t\t\tthis._bSearchTriggered = true;\n\t\t\t}\n\t\t\tif (oController._hasMultiVisualizations()) {\n\t\t\t\tconst oInternalModelContext = oView.getBindingContext(\"internal\") as InternalModelContext;\n\t\t\t\tif (!Device.system.desktop && oAdditionalStates.alpContentView == TemplateContentView.Hybrid) {\n\t\t\t\t\toAdditionalStates.alpContentView = TemplateContentView.Chart;\n\t\t\t\t}\n\t\t\t\toInternalModelContext\n\t\t\t\t\t.getModel()\n\t\t\t\t\t.setProperty(`${oInternalModelContext.getPath()}/alpContentView`, oAdditionalStates.alpContentView);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Determines whether Search can be triggered at initial load of the application or not.\n\t * @param navigationType Navigation Type during the load of the application\n\t * @returns A Boolean determining whether Search can be triggered or not\n\t */\n\tisSearchTriggeredByInitialLoad(this: ViewState & typeof ViewStateOverride, navigationType: string): boolean {\n\t\tconst view = this.base.getView(),\n\t\t\tcontroller = view.getController() as ListReportController,\n\t\t\tviewData = view.getViewData();\n\t\tlet isSearchTriggeredByInitialLoad = false,\n\t\t\tvariantManagement;\n\t\t// Determining whether it's Control variantManagement or Page variantManagement\n\t\tif (viewData.variantManagement === CoreLibrary.VariantManagement.Control) {\n\t\t\tvariantManagement = controller._getFilterBarVariantControl();\n\t\t} else {\n\t\t\tvariantManagement = view.byId(\"fe::PageVariantManagement\") as VariantManagement;\n\t\t}\n\t\tconst currentVariantKey = variantManagement?.getCurrentVariantKey();\n\t\t//The check shall happen for 'intial load' and 'Apply Automatically' for collapsing the header or\n\t\t// always be collapsed if navType is xAppState\n\t\t// initialLoad Auto or Disabled\n\t\tif (navigationType === NavType.xAppState) {\n\t\t\treturn true;\n\t\t} else if (variantManagement && viewData.initialLoad !== InitialLoadMode.Enabled) {\n\t\t\t// Header is collapsed if preset filters are set for initial load Auto, Header shall remain expanded if initial load is Auto without preset filters or intial load is disabled\n\t\t\tif (controller._shouldAutoTriggerSearch(this._getFilterBarVM(view))) {\n\t\t\t\tisSearchTriggeredByInitialLoad = true;\n\t\t\t}\n\t\t}\n\t\t// initialLoad Enabled\n\t\telse if (\n\t\t\tvariantManagement &&\n\t\t\tviewData.initialLoad === InitialLoadMode.Enabled &&\n\t\t\tcontroller._getApplyAutomaticallyOnVariant(variantManagement, currentVariantKey)\n\t\t) {\n\t\t\tisSearchTriggeredByInitialLoad = true;\n\t\t}\n\t\treturn isSearchTriggeredByInitialLoad;\n\t},\n\n\t_enableFilterBar: function (filterBarControl: FilterBar, preventInitialSearch: boolean): void {\n\t\tconst filterBarAPI = filterBarControl.getParent() as FilterBarAPI;\n\t\tconst fnOnSearch = (): void => {\n\t\t\tthis._bSearchTriggered = !preventInitialSearch;\n\t\t};\n\n\t\t// reset the suspend selection on filter bar to allow loading of data when needed (was set on LR Init)\n\t\tif (filterBarControl.getSuspendSelection()) {\n\t\t\t// Only if search is fired we set _bSearchTriggered.\n\t\t\t// If there was an error due to required filterfields empty or other issues we skip setting _bSearchTriggered.\n\t\t\tfilterBarAPI.attachEventOnce(\"search\", fnOnSearch);\n\t\t\tfilterBarControl.setSuspendSelection(false);\n\t\t} else {\n\t\t\t// search might already be triggered.\n\t\t\tfnOnSearch();\n\t\t}\n\t},\n\n\t_applyNavigationParametersToFilterbar: function (\n\t\tthis: ViewState & typeof ViewStateOverride,\n\t\toNavigationParameter: NavigationParameter,\n\t\taResults: unknown[]\n\t): void {\n\t\tconst oView = this.base.getView();\n\t\tconst oController = oView.getController() as ListReportController;\n\t\tconst oAppComponent = oController.getAppComponent();\n\t\tconst oComponentData = oAppComponent.getComponentData();\n\t\tconst oStartupParameters = (oComponentData && oComponentData.startupParameters) || {};\n\t\tconst oVariantPromise = this.handleVariantIdPassedViaURLParams(oStartupParameters);\n\t\tlet bFilterVariantApplied: boolean;\n\t\taResults.push(\n\t\t\toVariantPromise\n\t\t\t\t.then((aVariants: unknown[]) => {\n\t\t\t\t\tif (aVariants && aVariants.length > 0) {\n\t\t\t\t\t\tif (aVariants[0] === true || aVariants[1] === true) {\n\t\t\t\t\t\t\tbFilterVariantApplied = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this._applySelectionVariant(oView, oNavigationParameter, bFilterVariantApplied);\n\t\t\t\t})\n\t\t\t\t.then(() => {\n\t\t\t\t\tlet bPreventInitialSearch = false;\n\t\t\t\t\tconst oFilterBarVM = this._getFilterBarVM(oView);\n\t\t\t\t\tconst oFilterBarControl = oController._getFilterBarControl();\n\t\t\t\t\tif (oFilterBarControl) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(oNavigationParameter.navigationType !== NavType.initial && oNavigationParameter.requiresStandardVariant) ||\n\t\t\t\t\t\t\t(!oFilterBarVM && oView.getViewData().initialLoad === InitialLoadMode.Enabled) ||\n\t\t\t\t\t\t\toController._shouldAutoTriggerSearch(oFilterBarVM)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst filterBarAPI = oFilterBarControl.getParent() as FilterBarAPI;\n\t\t\t\t\t\t\tfilterBarAPI.triggerSearch();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbPreventInitialSearch = this._preventInitialSearch(oFilterBarVM);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//collapse or expand shall be available only for non-desktop systems\n\t\t\t\t\t\tif (!Device.system.desktop) {\n\t\t\t\t\t\t\tconst internalModelContext = oView.getBindingContext(\"internal\") as InternalModelContext;\n\t\t\t\t\t\t\tconst searchTriggeredByInitialLoad = this.isSearchTriggeredByInitialLoad(oNavigationParameter.navigationType);\n\t\t\t\t\t\t\tinternalModelContext.setProperty(\"searchTriggeredByInitialLoad\", searchTriggeredByInitialLoad);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._enableFilterBar(oFilterBarControl, bPreventInitialSearch);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t})\n\t\t\t\t.catch(function () {\n\t\t\t\t\tLog.error(\"Variant ID cannot be applied\");\n\t\t\t\t})\n\t\t);\n\t},\n\n\t// eslint-disable-next-line @typescript-eslint/require-await\n\thandleVariantIdPassedViaURLParams: async function (\n\t\tthis: ViewState & typeof ViewStateOverride,\n\t\toUrlParams: Record<string, string>\n\t): Promise<VariantManagement[]> {\n\t\tconst aPageVariantId = oUrlParams[\"sap-ui-fe-variant-id\"],\n\t\t\taFilterBarVariantId = oUrlParams[\"sap-ui-fe-filterbar-variant-id\"],\n\t\t\taTableVariantId = oUrlParams[\"sap-ui-fe-table-variant-id\"],\n\t\t\taChartVariantId = oUrlParams[\"sap-ui-fe-chart-variant-id\"];\n\t\tlet oVariantIDs: VariantIDs | undefined;\n\t\tif (aPageVariantId || aFilterBarVariantId || aTableVariantId || aChartVariantId) {\n\t\t\toVariantIDs = {\n\t\t\t\tsPageVariantId: aPageVariantId && aPageVariantId[0],\n\t\t\t\tsFilterBarVariantId: aFilterBarVariantId && aFilterBarVariantId[0],\n\t\t\t\tsTableVariantId: aTableVariantId && aTableVariantId[0],\n\t\t\t\tsChartVariantId: aChartVariantId && aChartVariantId[0]\n\t\t\t};\n\t\t}\n\t\treturn this._handleControlVariantId(oVariantIDs);\n\t},\n\n\t_handleControlVariantId: async function (\n\t\tthis: ViewState & typeof ViewStateOverride,\n\t\toVariantIDs: VariantIDs | undefined\n\t): Promise<unknown> {\n\t\tlet oVM: VariantManagement;\n\t\tconst oView = this.base.getView(),\n\t\t\taPromises: Promise<boolean>[] = [];\n\t\tconst sVariantManagement = oView.getViewData().variantManagement;\n\t\tif (oVariantIDs && oVariantIDs.sPageVariantId && sVariantManagement === \"Page\") {\n\t\t\toVM = oView.byId(\"fe::PageVariantManagement\") as VariantManagement;\n\t\t\tthis._handlePageVariantId(oVariantIDs, oVM, aPromises);\n\t\t} else if (oVariantIDs && sVariantManagement === \"Control\") {\n\t\t\tif (oVariantIDs.sFilterBarVariantId) {\n\t\t\t\toVM = (oView.getController() as ListReportControllerController)._getFilterBarVariantControl()!;\n\t\t\t\tthis._handleFilterBarVariantControlId(oVariantIDs, oVM, aPromises);\n\t\t\t}\n\t\t\tif (oVariantIDs.sTableVariantId) {\n\t\t\t\tconst oController = oView.getController() as ListReportController;\n\t\t\t\tthis._handleTableControlVariantId(oVariantIDs, oController, aPromises);\n\t\t\t}\n\n\t\t\tif (oVariantIDs.sChartVariantId) {\n\t\t\t\tconst oController = oView.getController() as ListReportController;\n\t\t\t\tthis._handleChartControlVariantId(oVariantIDs, oController, aPromises);\n\t\t\t}\n\t\t}\n\t\treturn Promise.all(aPromises);\n\t},\n\t/*\n\t * Handles page level variant and passes the variant to the function that pushes the promise to the promise array\n\t *\n\t * @param oVarinatIDs contains an object of all variant IDs\n\t * @param oVM contains the vairant management object for the page variant\n\t * @param aPromises is an array of all promises\n\t * @private\n\t */\n\t_handlePageVariantId: function (\n\t\tthis: ViewState & typeof ViewStateOverride,\n\t\toVariantIDs: VariantIDs,\n\t\toVM: VariantManagement,\n\t\taPromises: VariantManagement[]\n\t): void {\n\t\toVM.getVariants()?.forEach((oVariant: VariantObject) => {\n\t\t\tthis._findAndPushVariantToPromise(oVariant, oVariantIDs.sPageVariantId, oVM, aPromises, true);\n\t\t});\n\t},\n\n\t/*\n\t * Handles control level variant for filter bar and passes the variant to the function that pushes the promise to the promise array\n\t *\n\t * @param oVarinatIDs contains an object of all variant IDs\n\t * @param oVM contains the vairant management object for the filter bar\n\t * @param aPromises is an array of all promises\n\t * @private\n\t */\n\n\t_handleFilterBarVariantControlId: function (\n\t\tthis: ViewState & typeof ViewStateOverride,\n\t\toVariantIDs: VariantIDs,\n\t\toVM: VariantManagement,\n\t\taPromises: VariantManagement[]\n\t): void {\n\t\tif (oVM) {\n\t\t\toVM.getVariants().forEach((oVariant: VariantObject) => {\n\t\t\t\tthis._findAndPushVariantToPromise(oVariant, oVariantIDs.sFilterBarVariantId, oVM, aPromises, true);\n\t\t\t});\n\t\t}\n\t},\n\n\t/*\n\t * Handles control level variant for table and passes the variant to the function that pushes the promise to the promise array\n\t *\n\t * @param oVarinatIDs contains an object of all variant IDs\n\t * @param oController has the list report controller object\n\t * @param aPromises is an array of all promises\n\t * @private\n\t */\n\t_handleTableControlVariantId: function (\n\t\tthis: ViewState & typeof ViewStateOverride,\n\t\toVariantIDs: VariantIDs,\n\t\toController: ListReportController,\n\t\taPromises: VariantManagement[]\n\t): void {\n\t\tconst aTables = oController._getControls(\"table\") as Table[];\n\t\taTables.forEach((oTable: Table) => {\n\t\t\tconst oTableVariant = oTable.getVariant();\n\t\t\tif (oTable && oTableVariant) {\n\t\t\t\toTableVariant.getVariants().forEach((oVariant: VariantObject) => {\n\t\t\t\t\tthis._findAndPushVariantToPromise(oVariant, oVariantIDs.sTableVariantId, oTableVariant, aPromises);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t},\n\n\t/*\n\t * Handles control level variant for chart and passes the variant to the function that pushes the promise to the promise array\n\t *\n\t * @param oVarinatIDs contains an object of all variant IDs\n\t * @param oController has the list report controller object\n\t * @param aPromises is an array of all promises\n\t * @private\n\t */\n\t_handleChartControlVariantId: function (\n\t\tthis: ViewState & typeof ViewStateOverride,\n\t\toVariantIDs: VariantIDs,\n\t\toController: ListReportController,\n\t\taPromises: VariantManagement[]\n\t): void {\n\t\tconst aCharts = oController._getControls(\"Chart\") as Chart[];\n\t\taCharts.forEach((oChart: Chart) => {\n\t\t\tconst oChartVariant = oChart.getVariant();\n\t\t\tconst aVariants = oChartVariant.getVariants();\n\t\t\tif (aVariants) {\n\t\t\t\taVariants.forEach((oVariant: VariantObject) => {\n\t\t\t\t\tthis._findAndPushVariantToPromise(oVariant, oVariantIDs.sChartVariantId, oChartVariant, aPromises);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t},\n\t/*\n\t * Matches the variant ID provided in the url to the available vairant IDs and pushes the appropriate promise to the promise array\n\t *\n\t * @param oVariant is an object for a specific variant\n\t * @param sVariantId is the variant ID provided in the url\n\t * @param oVM is the variant management object for the specfic variant\n\t * @param aPromises is an array of promises\n\t * @param bFilterVariantApplied is an optional parameter which is set to ture in case the filter variant is applied\n\t * @private\n\t */\n\t_findAndPushVariantToPromise: function (\n\t\t//This function finds the suitable variant for the variantID provided in the url and pushes them to the promise array\n\t\tthis: ViewState & typeof ViewStateOverride,\n\t\toVariant: VariantObject,\n\t\tsVariantId: string,\n\t\toVM: VariantManagement,\n\t\taPromises: Promise<boolean>[],\n\t\tbFilterVariantApplied?: boolean\n\t): void {\n\t\tif (oVariant.key === sVariantId) {\n\t\t\taPromises.push(this._applyControlVariant(oVM, sVariantId, bFilterVariantApplied));\n\t\t}\n\t},\n\n\t_applyControlVariant: async function (\n\t\tthis: ViewState & typeof ViewStateOverride,\n\t\toVariant: VariantManagement,\n\t\tsVariantID: string,\n\t\tbFilterVariantApplied: boolean\n\t): Promise<boolean> {\n\t\tconst sVariantReference = this._checkIfVariantIdIsAvailable(oVariant, sVariantID) ? sVariantID : oVariant.getStandardVariantKey();\n\t\tconst oVM = ControlVariantApplyAPI.activateVariant({\n\t\t\telement: oVariant,\n\t\t\tvariantReference: sVariantReference\n\t\t});\n\t\treturn oVM.then(function () {\n\t\t\treturn bFilterVariantApplied;\n\t\t});\n\t},\n\t/************************************* private helper *****************************************/\n\n\t/**\n\t * Variant management used by filter bar.\n\t * @param view View of the LR filter bar\n\t * @returns VariantManagement if used\n\t */\n\t_getFilterBarVM: (view: View): VariantManagement | undefined => {\n\t\tlet variantManagement;\n\t\tconst viewData = view.getViewData() as LRViewData;\n\t\tswitch (viewData.variantManagement) {\n\t\t\tcase VariantManagementType.Page:\n\t\t\t\tvariantManagement = view.byId(\"fe::PageVariantManagement\");\n\t\t\t\tbreak;\n\t\t\tcase VariantManagementType.Control:\n\t\t\t\tvariantManagement = (view.getController() as ListReportController)._getFilterBarVariantControl();\n\t\t\t\tbreak;\n\t\t\tcase VariantManagementType.None:\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\treturn variantManagement as VariantManagement | undefined;\n\t},\n\n\t_preventInitialSearch: function (oVariantManagement: VariantManagement): boolean {\n\t\tif (!oVariantManagement) {\n\t\t\treturn true;\n\t\t}\n\t\tconst aVariants = oVariantManagement.getVariants();\n\t\tconst oCurrentVariant = aVariants.find(function (oItem): boolean {\n\t\t\treturn oItem.getKey() === oVariantManagement.getCurrentVariantKey();\n\t\t});\n\t\treturn !oCurrentVariant.executeOnSelect;\n\t},\n\n\t/**\n\t * Checks if DisplayCurrency is mandatory for filtering.\n\t * @param metaModel OdataV4 MetaModel\n\t * @param contextPath List Report context path.\n\t * @returns Boolean\n\t */\n\t_checkIfDisplayCurrencyIsRequired: function (metaModel: ODataMetaModel, contextPath: string): boolean {\n\t\tconst metaContext = metaModel.getMetaContext(contextPath),\n\t\t\tdataModelObjectPath = getInvolvedDataModelObjects(metaContext),\n\t\t\tentitySet = dataModelObjectPath.startingEntitySet._type === \"EntitySet\" ? dataModelObjectPath.startingEntitySet : undefined,\n\t\t\trequiredProperties = entitySet?.annotations.Capabilities?.FilterRestrictions?.RequiredProperties ?? [],\n\t\t\tdisplayCurrencyIsMandatory = requiredProperties.some(\n\t\t\t\t(requiredProperty) => requiredProperty.value === DISPLAY_CURRENCY_PROPERTY_NAME\n\t\t\t);\n\n\t\treturn displayCurrencyIsMandatory;\n\t},\n\n\t/**\n\t * Add DisplayCurrency to SV if it is mandatory and exists in SV defaults.\n\t * @param view View of the LR filter bar\n\t * @param sv Selection Variant to apply\n\t * @param svDefaults Selection Variant defaults\n\t */\n\t_addDefaultDisplayCurrencyToSV: function (view: View, sv: SelectionVariant, svDefaults?: SelectionVariant): void {\n\t\tif (!svDefaults || svDefaults?.isEmpty()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewData = view.getViewData() as LRViewData,\n\t\t\tmetaModel = view.getModel()?.getMetaModel() as ODataMetaModel,\n\t\t\tcontextPath = viewData.contextPath || `/${viewData.entitySet}`,\n\t\t\tdisplayCurrencyIsMandatory = this._checkIfDisplayCurrencyIsRequired(metaModel, contextPath);\n\n\t\tif (!displayCurrencyIsMandatory) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst svOptions = sv.getSelectOption(DISPLAY_CURRENCY_PROPERTY_NAME),\n\t\t\tdefaultSVOptions = svDefaults.getSelectOption(DISPLAY_CURRENCY_PROPERTY_NAME),\n\t\t\tdisplayCurrencyDefaultExists = !!defaultSVOptions && defaultSVOptions.length > 0,\n\t\t\tnoSVDisplayCurrencyExists = !svOptions || !svOptions.length;\n\n\t\tif (noSVDisplayCurrencyExists && displayCurrencyDefaultExists) {\n\t\t\tconst displayCurrencySelectOption = defaultSVOptions[0],\n\t\t\t\tsign = displayCurrencySelectOption[\"Sign\"],\n\t\t\t\toption = displayCurrencySelectOption[\"Option\"],\n\t\t\t\tlow = displayCurrencySelectOption[\"Low\"],\n\t\t\t\thigh = displayCurrencySelectOption[\"High\"];\n\n\t\t\tsv.addSelectOption(DISPLAY_CURRENCY_PROPERTY_NAME, sign, option, low, high);\n\t\t}\n\t},\n\n\t/**\n\t * Get adjusted Selection Variant based on 'useFLPDefaultValues' and 'already applied SV'.\n\t *\n\t * If useFLPDefaultValues is :\n\t * 1. FALSE, combine 'appSate SV' and 'already applied SV'.\n\t * 2. TRUE, 'appSate SV' is same as 'default SV'. Select Options of 'default SV' takes priority over 'already applied SV'.\n\t * @param filterBarAPI FilterBarAPI to fetch the applied SV\n\t * @param appStateSV Selection Variant to apply from appState\n\t * @param useFLPDefaultValues Should FLP defaults be used\n\t * @returns Adjusted SV\n\t */\n\t_getAdjustedSV: async (\n\t\tfilterBarAPI: FilterBarAPI,\n\t\tappStateSV: SelectionVariant,\n\t\tuseFLPDefaultValues: boolean\n\t): Promise<SelectionVariant> => {\n\t\tlet adjustedSV = new SelectionVariant(appStateSV.toJSONObject());\n\t\tconst alreadyAppliedSV = await filterBarAPI.getSelectionVariant();\n\t\tconst appliedSelOptNames = alreadyAppliedSV?.getSelectOptionsPropertyNames() || [];\n\t\tif (appliedSelOptNames.length > 0) {\n\t\t\t// We merge 'applied SV' and 'appState SV' based on 'useFLPDefaultValues'.\n\t\t\tadjustedSV = appliedSelOptNames.reduce((svCopy: SelectionVariant, selOptionName) => {\n\t\t\t\t// (appStateSV = adjustedSV = svCopy)\n\t\t\t\tconst svSelOpts = svCopy.getSelectOption(selOptionName);\n\t\t\t\t// If useFLPDefaultValues = true, means (appStateSV = svDefaults)\n\t\t\t\tif ((useFLPDefaultValues && !svSelOpts?.length) || !useFLPDefaultValues) {\n\t\t\t\t\t// if default SV needs to be used, then select options from default select options take priority.\n\t\t\t\t\t// else we merge both: already applied SV and SV from navParams.\n\t\t\t\t\tconst selectOptions = alreadyAppliedSV.getSelectOption(selOptionName);\n\t\t\t\t\tsvCopy.massAddSelectOption(selOptionName, selectOptions || []);\n\t\t\t\t}\n\t\t\t\treturn svCopy;\n\t\t\t}, adjustedSV);\n\t\t}\n\n\t\treturn adjustedSV;\n\t},\n\n\t/**\n\t * Apply Selection Variant from Navigation Parameter.\n\t * @param view View of the LR filter bar\n\t * @param navigationParameter Selection Variant to apply from appState\n\t * @param filterVariantApplied Is a filter variant alaready applied\n\t * @returns Promise for asynchronous handling\n\t */\n\t_applySelectionVariant: async function (\n\t\tview: View,\n\t\tnavigationParameter: NavHandlerNavParams,\n\t\tfilterVariantApplied: boolean\n\t): Promise<unknown> {\n\t\tconst filterBar = (view.getController() as ListReportController)._getFilterBarControl();\n\t\tconst {\n\t\t\tselectionVariant: sv,\n\t\t\tselectionVariantDefaults: svDefaults,\n\t\t\trequiresStandardVariant: reqStdVariant = false,\n\t\t\tbNavSelVarHasDefaultsOnly: svDefaultsOnly = false\n\t\t} = navigationParameter;\n\n\t\tif (!filterBar || !sv) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst variantManagement = this._getFilterBarVM(view) as VariantManagement;\n\t\tconst clearFiltersAndReplaceWithAppState = await this._activeVariantAndGetAppStateOverride(\n\t\t\tvariantManagement,\n\t\t\treqStdVariant,\n\t\t\tfilterVariantApplied\n\t\t);\n\n\t\tif (clearFiltersAndReplaceWithAppState) {\n\t\t\tthis._addDefaultDisplayCurrencyToSV(view, sv, svDefaults);\n\n\t\t\t// check if FLP default values are there and is it standard variant\n\t\t\tconst svDefaultsArePresent = svDefaults ? svDefaults.getSelectOptionsPropertyNames().length > 0 : false;\n\t\t\tconst stdVariantIsDefaultVariant =\n\t\t\t\tvariantManagement && variantManagement.getDefaultVariantKey() === variantManagement.getStandardVariantKey();\n\t\t\tconst useFLPDefaultValues: boolean =\n\t\t\t\tsvDefaultsArePresent && (stdVariantIsDefaultVariant || !variantManagement) && svDefaultsOnly;\n\n\t\t\tconst filterBarAPI = filterBar.getParent() as FilterBarAPI;\n\t\t\tlet svToSet: SelectionVariant = sv;\n\t\t\tif (filterVariantApplied || useFLPDefaultValues) {\n\t\t\t\tsvToSet = await this._getAdjustedSV(filterBarAPI, sv, useFLPDefaultValues);\n\t\t\t}\n\n\t\t\treturn filterBarAPI.setSelectionVariant(svToSet, true);\n\t\t}\n\t},\n\n\t/**\n\t * Activate variant from variant management and return if appState needs to be applied.\n\t * @param variantManagement VariantManagement used by filter bar\n\t * @param reqStdVariant If standard variant is required to be used\n\t * @param filterVariantApplied Is a filter variant already applied\n\t * @returns Promise for asynchronous handling\n\t */\n\t_activeVariantAndGetAppStateOverride: async function (\n\t\tvariantManagement: VariantManagement | undefined,\n\t\treqStdVariant: boolean,\n\t\tfilterVariantApplied: boolean\n\t): Promise<boolean> {\n\t\tif (variantManagement && !filterVariantApplied) {\n\t\t\tlet variantKey = reqStdVariant ? variantManagement.getStandardVariantKey() : variantManagement.getDefaultVariantKey();\n\t\t\tif (variantKey === null) {\n\t\t\t\tvariantKey = variantManagement.getId();\n\t\t\t}\n\t\t\tawait ControlVariantApplyAPI.activateVariant({\n\t\t\t\telement: variantManagement,\n\t\t\t\tvariantReference: variantKey\n\t\t\t});\n\t\t\treturn reqStdVariant || variantManagement.getDefaultVariantKey() === variantManagement.getStandardVariantKey();\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t/*\n\t * Sets filtered: false flag to every field so that it can be cleared out\n\t *\n\t * @param oFilterBar filterbar control is used to display filter properties in a user-friendly manner to populate values for a query\n\t * @returns promise which will be resolved to object\n\t * @private\n\t */\n\t_fnClearStateBeforexAppNav: async function (oFilterBar: FilterBar): Promise<unknown> {\n\t\treturn StateUtil.retrieveExternalState(oFilterBar)\n\t\t\t.then((oExternalState: { filter: Record<string, Record<string, boolean>[]> }) => {\n\t\t\t\tconst oCondition = oExternalState.filter;\n\t\t\t\tfor (const field in oCondition) {\n\t\t\t\t\tif (field !== \"$editState\" && field !== \"$search\" && oCondition[field]) {\n\t\t\t\t\t\toCondition[field].forEach((condition: Record<string, boolean>) => {\n\t\t\t\t\t\t\tcondition[\"filtered\"] = false;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn oCondition;\n\t\t\t})\n\t\t\t.catch(function (oError: unknown): void {\n\t\t\t\tLog.error(\"Error while retrieving the external state\", oError as string);\n\t\t\t});\n\t},\n\n\t_clearFilterConditions: async function (oFilterBar: FilterBar): Promise<unknown> {\n\t\tconst aItems: PropertyInfo[] = [];\n\t\treturn oFilterBar.waitForInitialization().then(async () => {\n\t\t\tconst oClearConditions = await this._fnClearStateBeforexAppNav(oFilterBar);\n\t\t\treturn StateUtil.applyExternalState(oFilterBar, {\n\t\t\t\tfilter: oClearConditions,\n\t\t\t\titems: aItems\n\t\t\t});\n\t\t});\n\t}\n};\n\nexport default ViewStateOverride;\n"],"mappings":"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","ignoreList":[]}