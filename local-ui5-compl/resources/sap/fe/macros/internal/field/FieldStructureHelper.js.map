{"version":3,"file":"FieldStructureHelper.js","names":["setUpField","internalField","controlConfiguration","settings","metaPath","contextPath","resultField","change","visible","liveChangeEnabled","onLiveChange","hasListeners","semanticObject","value","mainPropertyRelativePath","vhIdPrefix","_flexId","id","idPrefix","showValueHelpTemplate","formatOptions","getFormatOptions","valueHelpMetaPath","computeCommonProperties","convertedMetaPath","setUpDataPointType","setUpVisibleProperties","computeIDs","dataSourcePath","getTargetObjectPath","dataModelPath","computeExternalID","entityType","odataMetaModel","createBindingContext","targetEntityType","fullyQualifiedName","forInlineCreationRows","hasPropertyInsertRestrictions","computeEditMode","computeCollaborationProperties","computeEditableExpressions","setUpFormatOptions","dataModelPathExternalID","setUpDisplayStyle","setUpEditStyle","appComponent","valueState","setUpValueState","editStyle","editStylePlaceholder","setInputWithValuehelpPlaceholder","aDisplayStylesWithoutPropText","displayStyle","includes","targetObject","text","FieldTemplating","getTextBinding","showEmptyIndicator","emptyIndicatorMode","String","undefined","isProperty","annotations","UI","DataFieldDefault","readOnly","editMode","compileExpression","ifElse","equal","resolveBindingString","eventHandlers","liveChange","validateFieldGroup","_exports","computedEditableExpression","UIFormatters","getEditableExpressionAsObject","propertyForFieldControl","ModelHelper","isCollaborationDraftSupported","FieldEditMode","Display","collaborationEnabled","collaborationExpression","getCollaborationExpression","CollaborationFormatters","hasCollaborationActivity","editableExpression","and","not","constant","IsInactive","editModeAsObject","MetaModelConverter","convertMetaModelContext","metaPathContext","getInvolvedDataModelObjects","getDataModelObjectPathForValue","property","models","metaModel","Value","requiredPropertiesFromInsertRestrictions","getRequiredPropertiesFromInsertRestrictions","contextPathContext","getPath","replaceAll","requiredPropertiesFromUpdateRestrictions","getRequiredPropertiesFromUpdateRestrictions","oRequiredProperties","enabledExpression","getEnabledExpression","requiredExpression","getRequiredExpression","measureReadOnly","measureDisplayMode","getEditMode","externalIDProperty","getAssociatedExternalIdProperty","type","isDataField","$target","externalIdPropertyPath","getAssociatedExternalIdPropertyPath","externalIdContext","getModel","convertedMetaPathExternalID","computeFieldGroupIds","field","typesForCollaborationFocusManagement","sideEffectService","getSideEffectsService","fieldGroupIds","collaborationFieldGroup","CollaborationFieldGroupPrefix","push","getContextRelativeTargetObjectPath","length","join","_apiId","getContentId","_vhFlexId","editStyleId","generate","fieldMode","displayStyleId","textAlignMode","displayMode","textLinesEdit","textMaxLines","textMaxCharactersDisplay","textExpandBehaviorDisplay","textMaxLength","fieldEditStyle","radioButtonsHorizontalLayout","showTime","showTimezone","showDate","getObjectIdentifierText","fieldFormatOptions","propertyDataModelObjectPath","propertyBindingExpression","pathInModel","targetDisplayMode","propertyDefinition","isPropertyPathExpression","commonText","Common","Text","formatWithTypeInformation","relativeLocation","getRelativePaths","getExpressionFromAnnotation","formatResult","valueFormatters","formatToKeepWhitespace","getOverrides","props","controlConfig","Object","keys","forEach","configKey","manageQuickViewForDisplayStyle","hasSemanticObjects","hasQuickView","quickViewType","foundSemanticObjects","manageSemanticObjectsForCurrentUser","hasReachableStaticSemanticObject","dynamicSemanticObjects","propertyOrNavigationPropertyHasSemanticObject","getPropertyWithSemanticObject","fieldContainerType","propertyPath","name","recommendationValue","recommendationDescription","placeholderExp","additionalValueFormatter","formatPlaceholder","dataField","dataPointType","term","$Type","hasUnitOrCurrency","Measures","Unit","ISOCurrency","hasValidAnalyticalCurrencyOrUnit","textFromValueList","wrapBindingExpression","fn","IsImage","IsImageURL","InputMask","setUpDraftIndicator","Target","isUsedInNavigationWithQuickViewFacets","isSemanticKey","semanticKeyStyle","setUpObjectIdentifierTitleAndText","showErrorIndicator","contextLocation","_type","fieldGroupDraftIndicatorPropertyPath","situationsIndicatorPropertyPath","Criticality","isCurrencyAligned","valueAsStringBindingExpression","getValueBinding","unitBindingExpression","getBindingForUnitOrCurrency","Communication","IsEmailAddress","IsPhoneNumber","MultiLineText","hasSituationsIndicator","SituationsIndicator","getSituationsNavigationProperty","targetEntitySet","DraftRoot","hasDraftIndicator","draftIndicatorVisible","getDraftIndicatorVisibleBinding","addDraftIndicator","setEditStyleProperties","semanticStyle","identifierTitle","getTitleBindingExpression","getTextBindingExpression","splitTitleOnTwoLines","identifierText","overrideProps","getDisplayMode","viewData","getProperty","retrieveTextFromValueList","isRetrieveTextFromValueListEnabled","hasEntityTextArrangement","TextArrangement","valueStateExp","propertyPathInModel","textPath","formatValueState","getVisibleExpression","displayVisible","macroId"],"sources":["./FieldStructureHelper.ts"],"sourcesContent":["import type { EntitySet, Property, PropertyPath, ServiceObject } from \"@sap-ux/vocabularies-types\";\nimport type {\n\tDataFieldAbstractTypes,\n\tDataFieldForAnnotation,\n\tDataFieldTypes,\n\tDataPoint,\n\tDataPointTypeTypes\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTerms, UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport type {\n\tBindingToolkitExpression,\n\tCompiledBindingToolkitExpression,\n\tExpressionOrPrimitive,\n\tPathInModelExpression\n} from \"sap/fe/base/BindingToolkit\";\nimport {\n\tand,\n\tcompileExpression,\n\tconstant,\n\tequal,\n\tfn,\n\tformatResult,\n\tformatWithTypeInformation,\n\tgetExpressionFromAnnotation,\n\tifElse,\n\tnot,\n\tpathInModel,\n\tresolveBindingString,\n\twrapBindingExpression\n} from \"sap/fe/base/BindingToolkit\";\nimport type { PropertiesOf } from \"sap/fe/base/ClassSupport\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport type { XMLPreprocessorContext } from \"sap/fe/core/TemplateComponent\";\nimport type { TemplateProcessorSettings } from \"sap/fe/core/buildingBlocks/templating/BuildingBlockTemplateProcessor\";\nimport { CollaborationFieldGroupPrefix } from \"sap/fe/core/controllerextensions/collaboration/CollaborationCommon\";\nimport * as MetaModelConverter from \"sap/fe/core/converters/MetaModelConverter\";\nimport { isDataField } from \"sap/fe/core/converters/annotations/DataField\";\nimport * as CollaborationFormatters from \"sap/fe/core/formatters/CollaborationFormatter\";\nimport valueFormatters from \"sap/fe/core/formatters/ValueFormatter\";\nimport { UI } from \"sap/fe/core/helpers/BindingHelper\";\nimport {\n\tgetRequiredPropertiesFromInsertRestrictions,\n\tgetRequiredPropertiesFromUpdateRestrictions\n} from \"sap/fe/core/helpers/MetaModelFunction\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport { generate } from \"sap/fe/core/helpers/StableIdHelper\";\nimport { getTitleBindingExpression } from \"sap/fe/core/helpers/TitleHelper\";\nimport { isProperty, isPropertyPathExpression } from \"sap/fe/core/helpers/TypeGuards\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { getContextRelativeTargetObjectPath, getRelativePaths, getTargetObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { getAssociatedExternalIdProperty, getAssociatedExternalIdPropertyPath, isSemanticKey } from \"sap/fe/core/templating/PropertyHelper\";\nimport { getPropertyWithSemanticObject, manageSemanticObjectsForCurrentUser } from \"sap/fe/core/templating/SemanticObjectHelper\";\nimport type { DisplayMode } from \"sap/fe/core/templating/UIFormatters\";\nimport * as UIFormatters from \"sap/fe/core/templating/UIFormatters\";\nimport type { InputMaskFormatOptions } from \"sap/fe/core/type/InputMask\";\nimport * as FieldTemplating from \"sap/fe/macros/field/FieldTemplating\";\nimport {\n\tgetDataModelObjectPathForValue,\n\tgetDraftIndicatorVisibleBinding,\n\tgetTextBindingExpression,\n\tgetValueBinding,\n\tgetVisibleExpression,\n\thasPropertyInsertRestrictions,\n\tisRetrieveTextFromValueListEnabled,\n\tisUsedInNavigationWithQuickViewFacets,\n\tsetEditStyleProperties\n} from \"sap/fe/macros/field/FieldTemplating\";\nimport additionalValueFormatter from \"sap/fe/macros/internal/valuehelp/AdditionalValueFormatter\";\nimport SituationsIndicator from \"sap/fe/macros/situations/SituationsIndicator\";\nimport type Control from \"sap/ui/core/Control\";\nimport FieldEditMode from \"sap/ui/mdc/enums/FieldEditMode\";\nimport type Context from \"sap/ui/model/Context\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type { EventHandler } from \"types/extension_types\";\nimport type FieldAPI from \"../../field/FieldAPI\";\nimport type FieldFormatOptions from \"../../field/FieldFormatOptions\";\nimport type { DisplayStyle as DisplayStyleType, EditStyle as EditStyleType, FieldProperties } from \"../InternalField.block\";\n\nexport type InputFieldBlockProperties = PropertiesOf<FieldAPI> & {\n\tisPublicField?: boolean; //\n\t//add events from FieldAPI - 'PropertiesOf' does not include them\n\tchange?: EventHandler;\n\tliveChange?: EventHandler;\n\tonLiveChange?: string;\n};\nexport type FieldBlockProperties = Omit<FieldAPI, \"metaPath\" | \"contextPath\" | \"change\" | \"visible\"> & {\n\tchange: string | undefined | EventHandler;\n\tmetaPath: Context;\n\tcontextPath: Context;\n\tisPublicField: boolean;\n\tvisible?: boolean | CompiledBindingToolkitExpression;\n\tliveChange: EventHandler;\n\tonLiveChange?: string | EventHandler;\n\tsemanticObject: string;\n\tvalue?: string;\n\tmainPropertyRelativePath?: string;\n\t//-----\n\tformatOptions: FieldFormatOptions;\n\tproperty: Property;\n\tdataModelPath: DataModelObjectPath<Property>;\n\tvalueAsStringBindingExpression?: CompiledBindingToolkitExpression;\n\tunitBindingExpression?: string;\n\tdisplayVisible?: string | boolean;\n\thasValidAnalyticalCurrencyOrUnit?: CompiledBindingToolkitExpression;\n\t_flexId?: string;\n\tidPrefix?: string;\n\tconvertedMetaPath: DataFieldAbstractTypes | DataPointTypeTypes;\n\tclass?: string;\n\tariaLabelledBy?: string[];\n\thasUnitOrCurrency?: boolean;\n\ttext?: BindingToolkitExpression<string> | CompiledBindingToolkitExpression;\n\temptyIndicatorMode?: string;\n\teditableExpression: string | CompiledBindingToolkitExpression;\n\tfieldGroupIds?: string;\n\tdisplayStyleId?: string;\n\twrap?: boolean;\n\ttextFromValueList?: CompiledBindingToolkitExpression;\n\thasQuickView: boolean;\n\tidentifierTitle?: CompiledBindingToolkitExpression;\n\tidentifierText?: CompiledBindingToolkitExpression;\n\thasSituationsIndicator?: boolean;\n\tsituationsIndicatorPropertyPath: string;\n\tshowErrorIndicator: boolean;\n\tshowErrorObjectStatus?: boolean | CompiledBindingToolkitExpression;\n\tdynamicSemanticObjects?: BindingToolkitExpression<string>[];\n\tcollaborationExpression: BindingToolkitExpression<boolean>;\n\tcollaborationEnabled?: boolean;\n\tdataSourcePath?: string;\n\teditStyleId?: string;\n\tenabledExpression: string | CompiledBindingToolkitExpression;\n\trequiredExpression?: string;\n\teditModeAsObject: CompiledBindingToolkitExpression | BindingToolkitExpression<string>;\n\tvalueBindingExpression?: CompiledBindingToolkitExpression;\n\tshowTimezone?: boolean;\n\tminDateExpression: BindingToolkitExpression<unknown> | undefined | CompiledBindingToolkitExpression;\n\tmaxDateExpression: BindingToolkitExpression<unknown> | undefined | CompiledBindingToolkitExpression;\n\tliveChangeEnabled?: boolean;\n\teditStylePlaceholder?: string;\n\tstaticDescription?: string;\n\t_vhFlexId?: string;\n\tvhIdPrefix: string;\n\tvalueState?: CompiledBindingToolkitExpression;\n\teditMode?: FieldEditMode | CompiledBindingToolkitExpression;\n\ttextBindingExpression?: CompiledBindingToolkitExpression;\n\tratingIndicatorTooltip?: CompiledBindingToolkitExpression;\n\tratingIndicatorTargetValue?: CompiledBindingToolkitExpression;\n\tmask?: InputMaskFormatOptions | null;\n\teditStyle?: EditStyleType | null;\n\t_apiId?: string;\n\tnavigateAfterAction: boolean | undefined;\n\ttextAlign?: string;\n\tentityType?: Context;\n\todataMetaModel: ODataMetaModel;\n\tpropertyForFieldControl: UIFormatters.PropertyOrPath<Property>;\n\tdescriptionBindingExpression?: string;\n\tquickViewType?: \"SemanticLinks\" | \"Facets\" | \"FacetsAndSemanticLinks\";\n\tdisplayStyle?: DisplayStyleType;\n\tunitEditable?: string;\n\tstaticUnit?: string;\n\tvalueInputWidth?: string;\n\tvalueInputFieldWidth?: string;\n\tunitInputVisible?: CompiledBindingToolkitExpression;\n\tdraftIndicatorVisible?: string;\n\thasPropertyInsertRestrictions?: boolean | ExpressionOrPrimitive<boolean>;\n\taddDraftIndicator: boolean | undefined;\n\tconvertedMetaPathExternalID?: Property;\n\tdataModelPathExternalID?: DataModelObjectPath<Property | PropertyPath>;\n\tvalueHelpMetaPath?: Context;\n\tshowValueHelpTemplate: boolean;\n\tid: string;\n\treadOnly?: boolean;\n\tmetaPathContext: Context | undefined;\n\tcontextPathContext: Context | undefined;\n\teventHandlers: {\n\t\tchange: EventHandler;\n\t\tliveChange: EventHandler;\n\t\tvalidateFieldGroup: EventHandler;\n\t};\n};\n\nexport function setUpField(\n\tinternalField: InputFieldBlockProperties,\n\tcontrolConfiguration: TemplateProcessorSettings,\n\tsettings: TemplateProcessorSettings | XMLPreprocessorContext,\n\tmetaPath?: Context | undefined,\n\tcontextPath?: Context | undefined\n): FieldBlockProperties {\n\tconst resultField = { ...internalField } as unknown as FieldBlockProperties;\n\n\tresultField.change = internalField.change;\n\tresultField.metaPath = (metaPath ? metaPath : internalField.metaPath) as Context;\n\tresultField.contextPath = (contextPath ? contextPath : internalField.contextPath) as Context;\n\tresultField.visible = internalField.visible;\n\tresultField.liveChangeEnabled = !!internalField.onLiveChange || (internalField as unknown as Control).hasListeners?.(\"liveChange\");\n\tresultField.semanticObject = internalField.semanticObject as string;\n\tresultField.value = internalField.value;\n\tresultField.mainPropertyRelativePath = internalField.mainPropertyRelativePath;\n\n\t//this currently works only for the internal field\n\tif (!resultField.vhIdPrefix) {\n\t\tresultField.vhIdPrefix = \"FieldValueHelp\";\n\t\tresultField._flexId = internalField.id;\n\t\tif (!resultField.idPrefix) {\n\t\t\tresultField.idPrefix = internalField.id;\n\t\t}\n\t\tresultField.showValueHelpTemplate = true;\n\t}\n\n\tresultField.formatOptions ??= {} as FieldFormatOptions;\n\tresultField.formatOptions = getFormatOptions(resultField);\n\n\tresultField.valueHelpMetaPath = metaPath ? metaPath : resultField.metaPath;\n\tcomputeCommonProperties(resultField, settings as unknown as TemplateProcessorSettings);\n\tresultField.convertedMetaPath = setUpDataPointType(resultField.convertedMetaPath);\n\tsetUpVisibleProperties(resultField);\n\tcomputeIDs(resultField);\n\tresultField.dataSourcePath = getTargetObjectPath(resultField.dataModelPath);\n\n\t/* EXTERNALID */\n\tcomputeExternalID(resultField);\n\tresultField.entityType = resultField.odataMetaModel.createBindingContext(\n\t\t`/${resultField.dataModelPath.targetEntityType.fullyQualifiedName}`\n\t);\n\tif (resultField.formatOptions?.forInlineCreationRows === true) {\n\t\tresultField.hasPropertyInsertRestrictions = hasPropertyInsertRestrictions(resultField.dataModelPath);\n\t}\n\tcomputeEditMode(resultField);\n\tcomputeCollaborationProperties(resultField);\n\tcomputeEditableExpressions(resultField);\n\tresultField.formatOptions = resultField.formatOptions ? resultField.formatOptions : ({} as FieldFormatOptions);\n\tsetUpFormatOptions(\n\t\tresultField,\n\t\t(resultField.dataModelPathExternalID as DataModelObjectPath<Property>) || resultField.dataModelPath,\n\t\tcontrolConfiguration,\n\t\tsettings as unknown as TemplateProcessorSettings\n\t);\n\tsetUpDisplayStyle(\n\t\tresultField,\n\t\tresultField.convertedMetaPath,\n\t\tresultField.dataModelPath,\n\t\tsettings as unknown as TemplateProcessorSettings\n\t);\n\tsetUpEditStyle(resultField, settings?.appComponent);\n\n\tresultField.valueState = setUpValueState(resultField);\n\tif (resultField.editStyle === \"InputWithValueHelp\") {\n\t\tresultField.editStylePlaceholder = setInputWithValuehelpPlaceholder(resultField);\n\t}\n\n\t// ---------------------------------------- compute bindings----------------------------------------------------\n\tconst aDisplayStylesWithoutPropText = [\"Avatar\", \"AmountWithCurrency\"];\n\tif (\n\t\tresultField.displayStyle &&\n\t\t!aDisplayStylesWithoutPropText.includes(resultField.displayStyle) &&\n\t\tresultField.dataModelPath.targetObject\n\t) {\n\t\tresultField.text =\n\t\t\tresultField.text ??\n\t\t\tresultField.value ??\n\t\t\tFieldTemplating.getTextBinding(\n\t\t\t\t(resultField.dataModelPathExternalID as DataModelObjectPath<Property>) || resultField.dataModelPath,\n\t\t\t\tresultField.formatOptions\n\t\t\t);\n\t} else {\n\t\tresultField.text = \"\";\n\t}\n\n\tif (resultField.formatOptions.showEmptyIndicator) {\n\t\tresultField.emptyIndicatorMode = String(resultField.formatOptions.showEmptyIndicator) === \"true\" ? \"On\" : undefined;\n\t} else {\n\t\tresultField.emptyIndicatorMode = undefined;\n\t}\n\n\t// If the target is a property with a DataFieldDefault, use this as data field\n\tif (isProperty(resultField.convertedMetaPath) && resultField.convertedMetaPath.annotations?.UI?.DataFieldDefault !== undefined) {\n\t\tresultField.metaPath = resultField.odataMetaModel.createBindingContext(\n\t\t\t`@${UIAnnotationTerms.DataFieldDefault}`,\n\t\t\tmetaPath ? metaPath : resultField.metaPath\n\t\t);\n\t}\n\n\tif (resultField.readOnly !== undefined) {\n\t\tresultField.editMode = compileExpression(\n\t\t\tifElse(equal(resolveBindingString(resultField.readOnly, \"boolean\"), true), \"Display\", \"Editable\")\n\t\t);\n\t}\n\n\tresultField.eventHandlers = {\n\t\tchange: (): void => {},\n\t\tliveChange: (): void => {},\n\t\tvalidateFieldGroup: (): void => {}\n\t};\n\n\treturn resultField;\n}\n\n/**\n * This helper computes the properties that are needed for the collaboration avatar.\n * @param internalField Reference to the current internal field instance\n */\nexport function computeCollaborationProperties(internalField: FieldBlockProperties): void {\n\tconst computedEditableExpression = UIFormatters.getEditableExpressionAsObject(\n\t\tinternalField.propertyForFieldControl,\n\t\tinternalField.convertedMetaPath,\n\t\tinternalField.dataModelPath\n\t);\n\tif (ModelHelper.isCollaborationDraftSupported(internalField.odataMetaModel) && internalField.editMode !== FieldEditMode.Display) {\n\t\tconst collaborationEnabled = true;\n\t\t// Expressions needed for Collaboration Visualization\n\t\tconst collaborationExpression = UIFormatters.getCollaborationExpression(\n\t\t\tinternalField.dataModelPath,\n\t\t\tCollaborationFormatters.hasCollaborationActivity\n\t\t);\n\t\tconst editableExpression = compileExpression(and(computedEditableExpression, not(collaborationExpression)));\n\n\t\tconst editMode = compileExpression(\n\t\t\tifElse(\n\t\t\t\tcollaborationExpression,\n\t\t\t\tconstant(\"ReadOnly\"),\n\t\t\t\tifElse(and(UI.IsInactive, !!internalField.hasPropertyInsertRestrictions), \"Display\", internalField.editModeAsObject)\n\t\t\t)\n\t\t);\n\t\tinternalField.collaborationEnabled = collaborationEnabled;\n\t\tinternalField.collaborationExpression = collaborationExpression;\n\t\tinternalField.editableExpression = editableExpression;\n\t\tinternalField.editMode = editMode;\n\t} else {\n\t\tinternalField.editableExpression = compileExpression(computedEditableExpression);\n\t}\n}\n\n/**\n * This helper sets the common properties convertedMetaPath, dataModelPath\n * and property that can be reused in the individual templates if required.\n * @param internalField Reference to the current internal field instance\n * @param settings\n */\nexport function computeCommonProperties(internalField: FieldBlockProperties, settings: TemplateProcessorSettings): void {\n\tinternalField.convertedMetaPath = MetaModelConverter.convertMetaModelContext(\n\t\tinternalField.metaPathContext ? internalField.metaPathContext : internalField.metaPath\n\t) as DataFieldAbstractTypes | DataPointTypeTypes;\n\n\tlet dataModelPath = MetaModelConverter.getInvolvedDataModelObjects<DataFieldAbstractTypes | DataPointTypeTypes | Property>(\n\t\tinternalField.metaPathContext ? internalField.metaPathContext : internalField.metaPath,\n\t\tinternalField.contextPath\n\t);\n\tdataModelPath =\n\t\tgetDataModelObjectPathForValue(dataModelPath as DataModelObjectPath<DataFieldAbstractTypes | DataPointTypeTypes>) || dataModelPath;\n\tinternalField.dataModelPath = dataModelPath as DataModelObjectPath<Property>;\n\tinternalField.property = dataModelPath.targetObject as Property;\n\tinternalField.odataMetaModel = settings.models.metaModel || settings.models.contextPath;\n\tinternalField.propertyForFieldControl = (dataModelPath?.targetObject as unknown as DataFieldTypes)?.Value\n\t\t? (dataModelPath?.targetObject as unknown as DataFieldTypes).Value\n\t\t: dataModelPath?.targetObject;\n}\n\n/**\n * Helper to computes some of the expression for further processing.\n * @param internalField Reference to the current internal field instance\n */\nexport function computeEditableExpressions(internalField: FieldBlockProperties): void {\n\tconst requiredPropertiesFromInsertRestrictions = getRequiredPropertiesFromInsertRestrictions(\n\t\t(internalField.contextPathContext ? internalField.contextPathContext : internalField.contextPath)\n\t\t\t?.getPath()\n\t\t\t.replaceAll(\"/$NavigationPropertyBinding/\", \"/\"),\n\t\tinternalField.odataMetaModel\n\t);\n\tconst requiredPropertiesFromUpdateRestrictions = getRequiredPropertiesFromUpdateRestrictions(\n\t\t(internalField.contextPathContext ? internalField.contextPathContext : internalField.contextPath)\n\t\t\t?.getPath()\n\t\t\t.replaceAll(\"/$NavigationPropertyBinding/\", \"/\"),\n\t\tinternalField.odataMetaModel\n\t);\n\tconst oRequiredProperties = {\n\t\trequiredPropertiesFromInsertRestrictions: requiredPropertiesFromInsertRestrictions,\n\t\trequiredPropertiesFromUpdateRestrictions: requiredPropertiesFromUpdateRestrictions\n\t};\n\n\tconst liveChangeEnabled = internalField.liveChangeEnabled;\n\tconst enabledExpression = UIFormatters.getEnabledExpression(\n\t\tinternalField.propertyForFieldControl,\n\t\tinternalField.convertedMetaPath,\n\t\tfalse,\n\t\tinternalField.dataModelPath\n\t) as CompiledBindingToolkitExpression;\n\tconst requiredExpression = UIFormatters.getRequiredExpression(\n\t\tinternalField.propertyForFieldControl,\n\t\tinternalField.convertedMetaPath,\n\t\tfalse,\n\t\tfalse,\n\t\toRequiredProperties,\n\t\tinternalField.dataModelPath\n\t) as CompiledBindingToolkitExpression;\n\n\tinternalField.liveChangeEnabled = liveChangeEnabled;\n\tinternalField.enabledExpression = enabledExpression;\n\tinternalField.requiredExpression = requiredExpression;\n}\n\nexport function computeEditMode(internalField: FieldBlockProperties): void {\n\tif (internalField.editMode !== undefined && internalField.editMode !== null) {\n\t\t// Even if it provided as a string it's a valid part of a binding expression that can be later combined into something else.\n\t\tinternalField.editModeAsObject = internalField.editMode;\n\t} else {\n\t\tconst measureReadOnly = internalField.formatOptions?.measureDisplayMode\n\t\t\t? internalField.formatOptions.measureDisplayMode === \"ReadOnly\"\n\t\t\t: false;\n\n\t\tinternalField.editModeAsObject = UIFormatters.getEditMode(\n\t\t\tinternalField.propertyForFieldControl,\n\t\t\tinternalField.dataModelPath,\n\t\t\tmeasureReadOnly,\n\t\t\ttrue,\n\t\t\tinternalField.convertedMetaPath\n\t\t);\n\t\tinternalField.editMode = compileExpression(\n\t\t\tifElse(and(UI.IsInactive, !!internalField.hasPropertyInsertRestrictions), \"Display\", internalField.editModeAsObject)\n\t\t);\n\t}\n}\n\nexport function computeExternalID(internalField: FieldBlockProperties): void {\n\tconst externalIDProperty = getAssociatedExternalIdProperty(internalField.property);\n\n\tif (externalIDProperty) {\n\t\tif (internalField.property) internalField.property.type = externalIDProperty.type;\n\t\tif (isDataField(internalField.convertedMetaPath)) {\n\t\t\tinternalField.convertedMetaPath.Value.$target.type = externalIDProperty.type;\n\t\t}\n\t\tconst externalIdPropertyPath = getAssociatedExternalIdPropertyPath(internalField.property);\n\t\tconst externalIdContext = internalField.metaPath\n\t\t\t.getModel()\n\t\t\t.createBindingContext(internalField.contextPath?.getPath() + \"/\" + externalIdPropertyPath, internalField.metaPath);\n\n\t\tinternalField.convertedMetaPathExternalID = MetaModelConverter.convertMetaModelContext(externalIdContext) as Property;\n\n\t\tlet dataModelPath: DataModelObjectPath<Property> = MetaModelConverter.getInvolvedDataModelObjects(\n\t\t\texternalIdContext as Context,\n\t\t\tinternalField.contextPath\n\t\t);\n\t\tdataModelPath = getDataModelObjectPathForValue(dataModelPath as DataModelObjectPath<DataFieldAbstractTypes>) || dataModelPath;\n\t\tinternalField.dataModelPathExternalID = dataModelPath;\n\t}\n}\n\n/**\n * Calculate the fieldGroupIds for an Input or other edit control.\n * @param field\n * @param appComponent\n * @returns The fieldGroupIds\n */\nfunction computeFieldGroupIds(field: FieldBlockProperties, appComponent?: AppComponent): string | undefined {\n\tconst typesForCollaborationFocusManagement = [\n\t\t\"InputWithValueHelp\",\n\t\t\"TextArea\",\n\t\t\"DatePicker\",\n\t\t\"TimePicker\",\n\t\t\"DateTimePicker\",\n\t\t\"InputWithUnit\",\n\t\t\"Input\",\n\t\t\"InputMask\"\n\t];\n\n\tif (!appComponent) {\n\t\t//for ValueHelp / Mass edit Templating the appComponent is not passed to the templating\n\t\treturn;\n\t}\n\tconst sideEffectService = appComponent.getSideEffectsService();\n\tconst fieldGroupIds = sideEffectService.computeFieldGroupIds(\n\t\tfield.dataModelPath.targetEntityType?.fullyQualifiedName ?? \"\",\n\t\tfield.dataModelPath.targetObject?.fullyQualifiedName ?? \"\"\n\t);\n\n\tif (field.collaborationEnabled && typesForCollaborationFocusManagement.includes(field.editStyle || \"\")) {\n\t\tconst collaborationFieldGroup = `${CollaborationFieldGroupPrefix}${field.dataSourcePath}`;\n\t\tfieldGroupIds.push(collaborationFieldGroup);\n\t\tfield.mainPropertyRelativePath = isProperty(field.dataModelPath.targetObject)\n\t\t\t? getContextRelativeTargetObjectPath(field.dataModelPath)\n\t\t\t: undefined;\n\t}\n\n\treturn fieldGroupIds.length ? fieldGroupIds.join(\",\") : undefined;\n}\n\n/**\n * This helper is for the ID of the InternalField according to several different scenarios.\n *\n * displayStyleId is used for all controls inside the field wrapper in display mode. A <sap.m.text> control would get this ID. An example is: ApplicationContext::Field-display.\n * editStyleId is used for all controls inside the field wrapper in edit mode. A <sap.ui.mdc.field> control would get this ID. An example is: ApplicationContext::Field-edit.\n *\n * If no wrapper exists the wrappers ID will be propagated to the first control displayed, A <sap.m.text> control would get this ID. An example is: ApplicationContext::Field-content.\n * @param internalField Reference to the current internal field instance\n */\nexport function computeIDs(internalField: Partial<FieldBlockProperties>): void {\n\tif (internalField._flexId) {\n\t\tinternalField._apiId = internalField._flexId;\n\t\tinternalField._flexId = getContentId(internalField._flexId);\n\t\tinternalField._vhFlexId = `${internalField._flexId}_${internalField.vhIdPrefix}`;\n\t}\n\n\tif (internalField.idPrefix) {\n\t\tinternalField.editStyleId = generate([internalField.idPrefix, \"Field-edit\"]);\n\t}\n\t//NoWrapperId scenario is for the LR table.\n\tif (internalField.formatOptions?.fieldMode === \"nowrapper\" && internalField.editMode === \"Display\") {\n\t\tif (internalField._flexId) {\n\t\t\tinternalField.displayStyleId = internalField._flexId;\n\t\t} else {\n\t\t\tinternalField.displayStyleId = internalField.idPrefix ? generate([internalField.idPrefix, \"Field-content\"]) : undefined;\n\t\t}\n\t} else if (internalField.idPrefix) {\n\t\tinternalField.displayStyleId = generate([internalField.idPrefix, \"Field-display\"]);\n\t}\n}\n\n/**\n * Sets the internal formatOptions for the building block.\n * @param field\n * @returns A string with the internal formatOptions for the building block\n */\nexport function getFormatOptions(field: FieldBlockProperties): FieldFormatOptions {\n\treturn {\n\t\t...field.formatOptions,\n\t\ttextAlignMode: field.formatOptions.textAlignMode ?? \"Form\",\n\t\tshowEmptyIndicator: field.formatOptions.showEmptyIndicator ?? true,\n\t\tdisplayMode: field.formatOptions.displayMode as DisplayMode,\n\t\tmeasureDisplayMode: field.formatOptions.measureDisplayMode,\n\t\ttextLinesEdit: field.formatOptions.textLinesEdit,\n\t\ttextMaxLines: field.formatOptions.textMaxLines,\n\t\ttextMaxCharactersDisplay: field.formatOptions.textMaxCharactersDisplay,\n\t\ttextExpandBehaviorDisplay: field.formatOptions.textExpandBehaviorDisplay,\n\t\ttextMaxLength: field.formatOptions.textMaxLength,\n\t\tfieldEditStyle: field.formatOptions.fieldEditStyle,\n\t\tradioButtonsHorizontalLayout: field.formatOptions.radioButtonsHorizontalLayout,\n\t\tshowTime: field.formatOptions.showTime,\n\t\tshowTimezone: field.formatOptions.showTimezone,\n\t\tshowDate: field.formatOptions.showDate\n\t} as FieldFormatOptions;\n}\n\nfunction getObjectIdentifierText(\n\tfieldFormatOptions: FieldFormatOptions,\n\tpropertyDataModelObjectPath: DataModelObjectPath<Property | PropertyPath>\n): CompiledBindingToolkitExpression {\n\tlet propertyBindingExpression: BindingToolkitExpression<string> = pathInModel(\n\t\tgetContextRelativeTargetObjectPath(propertyDataModelObjectPath)\n\t);\n\tconst targetDisplayMode = fieldFormatOptions?.displayMode;\n\tconst propertyDefinition = isPropertyPathExpression(propertyDataModelObjectPath.targetObject)\n\t\t? (propertyDataModelObjectPath.targetObject.$target as Property)\n\t\t: (propertyDataModelObjectPath.targetObject as Property);\n\n\tconst commonText = propertyDefinition.annotations?.Common?.Text;\n\tif (commonText === undefined) {\n\t\treturn undefined;\n\t}\n\tpropertyBindingExpression = formatWithTypeInformation(propertyDefinition, propertyBindingExpression);\n\n\tswitch (targetDisplayMode) {\n\t\tcase \"ValueDescription\":\n\t\t\tconst relativeLocation = getRelativePaths(propertyDataModelObjectPath);\n\t\t\treturn compileExpression(getExpressionFromAnnotation(commonText, relativeLocation));\n\t\tcase \"DescriptionValue\":\n\t\t\treturn compileExpression(formatResult([propertyBindingExpression], valueFormatters.formatToKeepWhitespace));\n\t\tdefault:\n\t\t\treturn undefined;\n\t}\n}\n\nfunction getOverrides(controlConfiguration: TemplateProcessorSettings, id: string): FieldProperties {\n\t/*\n\t\tQualms: We need to use this TemplateProcessorSettings type to be able to iterate\n\t\tover the properties later on and cast it afterwards as a field property type\n\t*/\n\tconst props = {} as TemplateProcessorSettings;\n\n\tif (controlConfiguration) {\n\t\tconst controlConfig = controlConfiguration[id] as TemplateProcessorSettings;\n\t\tif (controlConfig) {\n\t\t\tObject.keys(controlConfig).forEach(function (configKey) {\n\t\t\t\tprops[configKey] = controlConfig[configKey];\n\t\t\t});\n\t\t}\n\t}\n\treturn props as unknown as FieldProperties;\n}\n\n/**\n * Prepare the display style of the field in case of semantic objects or quickview facets.\n * @param internalField The field\n * @param settings\n * @param dataModelPath The DataModelObjectPath of the property\n * @param hasSemanticObjects\n * @param hasQuickView\n */\nfunction manageQuickViewForDisplayStyle(\n\tinternalField: FieldBlockProperties,\n\tsettings: TemplateProcessorSettings,\n\tdataModelPath: DataModelObjectPath<Property>,\n\thasSemanticObjects: boolean,\n\thasQuickView: boolean\n): void {\n\tif (hasQuickView) {\n\t\tinternalField.hasQuickView = true;\n\t\tinternalField.quickViewType = \"Facets\";\n\t}\n\tif (hasSemanticObjects) {\n\t\tconst foundSemanticObjects = manageSemanticObjectsForCurrentUser(internalField.semanticObject, dataModelPath, settings);\n\t\tif (foundSemanticObjects.hasReachableStaticSemanticObject || foundSemanticObjects.dynamicSemanticObjects.length) {\n\t\t\tinternalField.hasQuickView = true;\n\t\t\tinternalField.quickViewType = hasQuickView ? \"FacetsAndSemanticLinks\" : \"SemanticLinks\";\n\t\t\tinternalField.dynamicSemanticObjects =\n\t\t\t\tfoundSemanticObjects.hasReachableStaticSemanticObject !== true ? foundSemanticObjects.dynamicSemanticObjects : undefined;\n\t\t}\n\t}\n}\n\n/**\n * Check field to know if it has semantic object.\n * @param internalField The field\n * @param dataModelPath The DataModelObjectPath of the property\n * @returns True if field has a semantic object\n */\nfunction propertyOrNavigationPropertyHasSemanticObject(\n\tinternalField: FieldBlockProperties,\n\tdataModelPath: DataModelObjectPath<Property>\n): boolean {\n\treturn (\n\t\t!!getPropertyWithSemanticObject(dataModelPath) ||\n\t\t(internalField.semanticObject !== undefined && internalField.semanticObject !== \"\")\n\t);\n}\n\nexport function setInputWithValuehelpPlaceholder(internalField: FieldBlockProperties): CompiledBindingToolkitExpression {\n\tlet targetEntityType;\n\tconst editStylePlaceholder = internalField.editStylePlaceholder;\n\tconst fieldContainerType = internalField.formatOptions.textAlignMode;\n\tif (fieldContainerType === \"Table\") {\n\t\ttargetEntityType = internalField.dataModelPath.targetEntityType;\n\t}\n\tconst propertyPath = internalField.dataModelPath.targetObject?.name;\n\tconst recommendationValue = pathInModel(`${propertyPath}@$ui5.fe.recommendations.placeholderValue`);\n\tconst recommendationDescription = pathInModel(`${propertyPath}@$ui5.fe.recommendations.placeholderDescription`);\n\tconst placeholderExp = formatResult(\n\t\t[\n\t\t\trecommendationValue,\n\t\t\trecommendationDescription,\n\t\t\tpathInModel(`/recommendationsData`, \"internal\"),\n\t\t\tpathInModel(`/currentCtxt`, \"internal\"),\n\t\t\tpathInModel(`${propertyPath}@$ui5.fe.messageType`),\n\t\t\teditStylePlaceholder,\n\t\t\tinternalField.formatOptions.displayMode\n\t\t],\n\t\tadditionalValueFormatter.formatPlaceholder,\n\t\ttargetEntityType\n\t);\n\n\treturn compileExpression(placeholderExp);\n}\n\nexport function setUpDataPointType(dataField: DataFieldAbstractTypes | DataPointTypeTypes): DataFieldAbstractTypes | DataPointTypeTypes {\n\t// data point annotations need not have $Type defined, so add it if missing\n\tconst dataPointType = { ...dataField };\n\tif ((dataField as unknown as DataPoint)?.term === \"com.sap.vocabularies.UI.v1.DataPoint\") {\n\t\tdataPointType.$Type = dataField.$Type || UIAnnotationTypes.DataPointType;\n\t}\n\treturn dataPointType;\n}\n\nexport function setUpDisplayStyle(\n\tinternalField: FieldBlockProperties,\n\tdataField: DataFieldAbstractTypes | DataPointTypeTypes,\n\tdataModelPath: DataModelObjectPath<DataFieldAbstractTypes | DataPointTypeTypes | Property>,\n\tsettings: TemplateProcessorSettings\n): FieldBlockProperties {\n\tconst resultField: FieldBlockProperties = internalField;\n\tconst property: Property = dataModelPath.targetObject as Property;\n\tif (!dataModelPath.targetObject) {\n\t\tresultField.displayStyle = \"Text\";\n\t\treturn resultField;\n\t}\n\n\tresultField.hasUnitOrCurrency =\n\t\tproperty.annotations?.Measures?.Unit !== undefined || property.annotations?.Measures?.ISOCurrency !== undefined;\n\tresultField.hasValidAnalyticalCurrencyOrUnit = UIFormatters.hasValidAnalyticalCurrencyOrUnit(\n\t\tdataModelPath as DataModelObjectPath<Property>\n\t);\n\tresultField.textFromValueList = wrapBindingExpression(\n\t\tcompileExpression(\n\t\t\tfn(\"FieldRuntime.retrieveTextFromValueList\", [\n\t\t\t\tpathInModel(getContextRelativeTargetObjectPath(dataModelPath)),\n\t\t\t\t`/${property.fullyQualifiedName}`,\n\t\t\t\tresultField.formatOptions.displayMode\n\t\t\t])\n\t\t) as string,\n\t\tfalse\n\t);\n\n\tif (property.annotations?.UI?.IsImage) {\n\t\tresultField.displayStyle = \"File\";\n\t\treturn resultField;\n\t}\n\tif (property.annotations?.UI?.IsImageURL) {\n\t\tresultField.displayStyle = \"Avatar\";\n\t\treturn resultField;\n\t}\n\tif (property.annotations?.UI?.InputMask) {\n\t\tresultField.displayStyle = \"Text\";\n\t\treturn resultField;\n\t}\n\t// For compatibility reasons, Stream will be shown within an entity instance as circle if the entity is annotated as IsNaturalPerson\n\t// and neither IsImage nor IsImageURL annotation has been used.\n\tif (property.type === \"Edm.Stream\") {\n\t\tresultField.displayStyle = \"File\";\n\t\treturn resultField;\n\t}\n\tsetUpDraftIndicator(dataModelPath as DataModelObjectPath<Property>, resultField);\n\tswitch (dataField.$Type as string) {\n\t\tcase UIAnnotationTypes.DataPointType:\n\t\t\tresultField.displayStyle = \"DataPoint\";\n\t\t\treturn resultField;\n\t\tcase UIAnnotationTypes.DataFieldForAnnotation:\n\t\t\tif ((dataField as unknown as DataFieldForAnnotation).Target?.$target?.$Type === UIAnnotationTypes.DataPointType) {\n\t\t\t\tresultField.displayStyle = \"DataPoint\";\n\t\t\t\treturn resultField;\n\t\t\t} else if (\n\t\t\t\t(dataField as unknown as DataFieldForAnnotation).Target?.$target?.$Type ===\n\t\t\t\t\"com.sap.vocabularies.Communication.v1.ContactType\"\n\t\t\t) {\n\t\t\t\tresultField.displayStyle = \"Contact\";\n\t\t\t\treturn resultField;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataFieldForAction:\n\t\tcase UIAnnotationTypes.DataFieldForIntentBasedNavigation:\n\t\t\tresultField.displayStyle = \"Button\";\n\t\t\treturn resultField;\n\t\tcase UIAnnotationTypes.DataFieldWithIntentBasedNavigation:\n\t\tcase UIAnnotationTypes.DataFieldWithNavigationPath:\n\t\tcase UIAnnotationTypes.DataFieldWithAction:\n\t\t\tresultField.displayStyle = \"Link\";\n\t\t\treturn resultField;\n\t}\n\tconst hasQuickView = isUsedInNavigationWithQuickViewFacets(dataModelPath, property);\n\tconst hasSemanticObjects = propertyOrNavigationPropertyHasSemanticObject(resultField, dataModelPath as DataModelObjectPath<Property>);\n\n\tif (isSemanticKey(property, dataModelPath) && resultField.formatOptions.semanticKeyStyle) {\n\t\tmanageQuickViewForDisplayStyle(\n\t\t\tresultField,\n\t\t\tsettings,\n\t\t\tdataModelPath as DataModelObjectPath<Property>,\n\t\t\thasSemanticObjects,\n\t\t\thasQuickView\n\t\t);\n\t\tsetUpObjectIdentifierTitleAndText(resultField, dataModelPath as DataModelObjectPath<Property>);\n\t\tresultField.showErrorIndicator =\n\t\t\t(dataModelPath.contextLocation as unknown as DataModelObjectPath<ServiceObject>)?.targetObject?._type ===\n\t\t\t\t\"NavigationProperty\" && !resultField.formatOptions.fieldGroupDraftIndicatorPropertyPath;\n\t\tresultField.situationsIndicatorPropertyPath = (dataModelPath.targetObject as Property).name;\n\t\tresultField.displayStyle =\n\t\t\tresultField.formatOptions.semanticKeyStyle === \"ObjectIdentifier\" ? \"ObjectIdentifier\" : \"LabelSemanticKey\";\n\t\treturn resultField;\n\t}\n\tif (dataField.Criticality) {\n\t\tmanageQuickViewForDisplayStyle(\n\t\t\tresultField,\n\t\t\tsettings,\n\t\t\tdataModelPath as DataModelObjectPath<Property>,\n\t\t\thasSemanticObjects,\n\t\t\thasQuickView\n\t\t);\n\t\tresultField.displayStyle = \"ObjectStatus\";\n\t\treturn resultField;\n\t}\n\tif (\n\t\tproperty.annotations?.Measures?.ISOCurrency &&\n\t\tString(resultField.formatOptions.isCurrencyAligned) === \"true\" &&\n\t\tresultField.formatOptions.measureDisplayMode !== \"Hidden\"\n\t) {\n\t\tresultField.valueAsStringBindingExpression = resultField.value\n\t\t\t? resultField.value\n\t\t\t: getValueBinding(dataModelPath as DataModelObjectPath<Property>, resultField.formatOptions, true, true, undefined, true);\n\t\tresultField.unitBindingExpression = compileExpression(\n\t\t\tUIFormatters.getBindingForUnitOrCurrency(dataModelPath as DataModelObjectPath<Property>)\n\t\t);\n\t\tresultField.displayStyle = \"AmountWithCurrency\";\n\n\t\treturn resultField;\n\t}\n\tif (property.annotations?.Communication?.IsEmailAddress || property.annotations?.Communication?.IsPhoneNumber) {\n\t\tresultField.displayStyle = \"Link\";\n\t\treturn resultField;\n\t}\n\tif (property.annotations?.UI?.MultiLineText) {\n\t\tresultField.displayStyle = \"ExpandableText\";\n\t\treturn resultField;\n\t}\n\n\tif (dataField.$Type === UIAnnotationTypes.DataFieldWithUrl) {\n\t\tresultField.displayStyle = \"Link\";\n\t\treturn resultField;\n\t}\n\n\tresultField.displayStyle = \"Text\";\n\tmanageQuickViewForDisplayStyle(resultField, settings, dataModelPath as DataModelObjectPath<Property>, hasSemanticObjects, hasQuickView);\n\tif (resultField.hasQuickView) {\n\t\tresultField.displayStyle = \"LinkWithQuickView\";\n\t}\n\treturn resultField;\n}\n\n/**\n * This determines whether we should add a draft indicator within the field template.\n * @param dataModelPath DataModelObjectPath pointing to the main property for the field\n * @param internalField\n */\nfunction setUpDraftIndicator(dataModelPath: DataModelObjectPath<Property>, internalField: FieldBlockProperties): void {\n\tif (isSemanticKey(dataModelPath.targetObject as Property, dataModelPath)) {\n\t\tinternalField.hasSituationsIndicator =\n\t\t\tSituationsIndicator.getSituationsNavigationProperty(dataModelPath.targetEntityType) !== undefined;\n\t\tif (\n\t\t\t(dataModelPath.contextLocation?.targetEntitySet as EntitySet | undefined)?.annotations?.Common?.DraftRoot &&\n\t\t\t(dataModelPath.targetEntitySet as EntitySet | undefined)?.annotations?.Common?.DraftRoot &&\n\t\t\tinternalField.formatOptions?.hasDraftIndicator === true\n\t\t) {\n\t\t\t// In case of a grid table or tree table hasDraftIndicator will be false since the draft\n\t\t\t// indicator needs to be rendered into a separate column\n\t\t\t// Hence we then fall back to display styles ObjectIdentifier or LabelSemanticKey instead\n\t\t\t// of the combined ID and draft indicator style\n\t\t\tinternalField.draftIndicatorVisible = getDraftIndicatorVisibleBinding(dataModelPath.targetObject?.name) as string;\n\t\t\tinternalField.addDraftIndicator = true;\n\t\t}\n\t}\n}\n\nexport function setUpEditStyle(field: FieldBlockProperties, appComponent?: AppComponent): FieldBlockProperties {\n\tconst resultField = field;\n\tsetEditStyleProperties(resultField, resultField.convertedMetaPath, resultField.dataModelPath);\n\tresultField.fieldGroupIds = computeFieldGroupIds(resultField, appComponent);\n\treturn resultField;\n}\n\nexport function setUpObjectIdentifierTitleAndText(\n\tinternalField: FieldBlockProperties,\n\tpropertyDataModelObjectPath: DataModelObjectPath<Property>\n): void {\n\tconst semanticStyle = internalField.formatOptions?.semanticKeyStyle;\n\tconst displayMode = internalField.formatOptions.displayMode;\n\tinternalField.identifierTitle = getTitleBindingExpression(\n\t\tpropertyDataModelObjectPath,\n\t\tgetTextBindingExpression,\n\t\t{ displayMode, splitTitleOnTwoLines: internalField.formatOptions.semanticKeyStyle === \"ObjectIdentifier\" },\n\t\tundefined,\n\t\tundefined\n\t);\n\tinternalField.identifierText =\n\t\tsemanticStyle === \"ObjectIdentifier\"\n\t\t\t? getObjectIdentifierText(internalField.formatOptions, propertyDataModelObjectPath)\n\t\t\t: undefined;\n}\n\nexport function setUpFormatOptions(\n\tinternalField: FieldBlockProperties,\n\tdataModelPath: DataModelObjectPath<Property>,\n\tcontrolConfiguration: TemplateProcessorSettings,\n\tsettings: TemplateProcessorSettings\n): void {\n\tconst overrideProps = getOverrides(\n\t\tcontrolConfiguration,\n\t\t(internalField.metaPathContext ? internalField.metaPathContext : internalField.metaPath).getPath()\n\t);\n\n\tif (!internalField.formatOptions.displayMode) {\n\t\tinternalField.formatOptions.displayMode = UIFormatters.getDisplayMode(dataModelPath);\n\t}\n\tif (internalField.formatOptions.displayMode === \"Description\") {\n\t\tinternalField.valueAsStringBindingExpression = internalField.value\n\t\t\t? internalField.value\n\t\t\t: getValueBinding(dataModelPath, internalField.formatOptions, true, true, undefined, true);\n\t}\n\tinternalField.formatOptions.textLinesEdit =\n\t\t(overrideProps as unknown as FieldFormatOptions).textLinesEdit ||\n\t\t(overrideProps.formatOptions && overrideProps.formatOptions.textLinesEdit) ||\n\t\tinternalField.formatOptions.textLinesEdit ||\n\t\t4;\n\tinternalField.formatOptions.textMaxLines =\n\t\t(overrideProps as unknown as FieldFormatOptions).textMaxLines ||\n\t\t(overrideProps.formatOptions && overrideProps.formatOptions.textMaxLines) ||\n\t\tinternalField.formatOptions.textMaxLines;\n\n\t// Retrieve text from value list as fallback feature for missing text annotation on the property\n\tif (settings.models.viewData?.getProperty(\"/retrieveTextFromValueList\")) {\n\t\tinternalField.formatOptions.retrieveTextFromValueList = isRetrieveTextFromValueListEnabled(\n\t\t\tdataModelPath.targetObject!,\n\t\t\tinternalField.formatOptions\n\t\t);\n\t\tif (internalField.formatOptions.retrieveTextFromValueList) {\n\t\t\t// Consider TextArrangement at EntityType otherwise set default display format 'DescriptionValue'\n\t\t\tconst hasEntityTextArrangement = !!dataModelPath?.targetEntityType?.annotations?.UI?.TextArrangement;\n\t\t\tinternalField.formatOptions.displayMode = hasEntityTextArrangement\n\t\t\t\t? internalField.formatOptions.displayMode\n\t\t\t\t: \"DescriptionValue\";\n\t\t}\n\t}\n}\n\nexport function setUpValueState(internalField: FieldBlockProperties): CompiledBindingToolkitExpression {\n\tlet valueStateExp;\n\tconst fieldContainerType = internalField.formatOptions?.textAlignMode ? internalField.formatOptions?.textAlignMode : \"Form\";\n\tconst propertyPathInModel = pathInModel(\n\t\tgetContextRelativeTargetObjectPath(internalField.dataModelPath)\n\t) as PathInModelExpression<Property>;\n\tconst relativeLocation = getRelativePaths(internalField.dataModelPath);\n\tconst textPath = getExpressionFromAnnotation(internalField.dataModelPath?.targetObject?.annotations?.Common?.Text, relativeLocation);\n\tconst propertyPath = internalField.dataModelPath.targetObject?.name;\n\tconst recommendationValue = pathInModel(`${propertyPath}@$ui5.fe.recommendations.placeholderValue`);\n\tconst recommendationDescription = pathInModel(`${propertyPath}@$ui5.fe.recommendations.placeholderDescription`);\n\tif (fieldContainerType === \"Table\") {\n\t\tvalueStateExp = formatResult(\n\t\t\t[\n\t\t\t\trecommendationValue,\n\t\t\t\trecommendationDescription,\n\t\t\t\tpathInModel(`/recommendationsData`, \"internal\"),\n\t\t\t\tpathInModel(`/isEditable`, \"ui\"),\n\t\t\t\tinternalField.dataSourcePath,\n\t\t\t\tpropertyPathInModel,\n\t\t\t\ttextPath\n\t\t\t],\n\t\t\tadditionalValueFormatter.formatValueState,\n\t\t\tinternalField.dataModelPath.targetEntityType\n\t\t);\n\t} else {\n\t\tvalueStateExp = formatResult(\n\t\t\t[\n\t\t\t\trecommendationValue,\n\t\t\t\trecommendationDescription,\n\t\t\t\tpathInModel(`/recommendationsData`, \"internal\"),\n\t\t\t\tpathInModel(`/isEditable`, \"ui\"),\n\t\t\t\tinternalField.dataSourcePath,\n\t\t\t\tpropertyPathInModel,\n\t\t\t\ttextPath\n\t\t\t],\n\t\t\tadditionalValueFormatter.formatValueState\n\t\t);\n\t}\n\n\tinternalField.valueState = compileExpression(valueStateExp);\n\treturn internalField.valueState;\n}\n\nexport function setUpVisibleProperties(internalField: FieldBlockProperties): void {\n\t// we do this before enhancing the dataModelPath so that it still points at the DataField\n\t// const visibleProperties: Partial<InternalFieldBlock> = {};\n\tconst propertyDataModelObjectPath = MetaModelConverter.getInvolvedDataModelObjects<DataFieldAbstractTypes>(\n\t\tinternalField.metaPathContext ? internalField.metaPathContext : internalField.metaPath,\n\t\tinternalField.contextPath\n\t);\n\n\tinternalField.visible = internalField.visible ??= getVisibleExpression(propertyDataModelObjectPath, internalField.formatOptions);\n\tinternalField.displayVisible = internalField.formatOptions?.fieldMode === \"nowrapper\" ? internalField.visible : undefined;\n}\n\nfunction getContentId(macroId: string): string {\n\treturn `${macroId}-content`;\n}\n"],"mappings":";;;;4iEAoLO,SAASA,GACfC,EACAC,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAc,IAAKL,GAEzBK,EAAYC,OAASN,EAAcM,OACnCD,EAAYF,SAAYA,EAAWA,EAAWH,EAAcG,SAC5DE,EAAYD,YAAeA,EAAcA,EAAcJ,EAAcI,YACrEC,EAAYE,QAAUP,EAAcO,QACpCF,EAAYG,oBAAsBR,EAAcS,cAAiBT,EAAqCU,eAAe,cACrHL,EAAYM,eAAiBX,EAAcW,eAC3CN,EAAYO,MAAQZ,EAAcY,MAClCP,EAAYQ,yBAA2Bb,EAAca,yBAGrD,IAAKR,EAAYS,WAAY,CAC5BT,EAAYS,WAAa,iBACzBT,EAAYU,QAAUf,EAAcgB,GACpC,IAAKX,EAAYY,SAAU,CAC1BZ,EAAYY,SAAWjB,EAAcgB,EACtC,CACAX,EAAYa,sBAAwB,IACrC,CAEAb,EAAYc,gBAAkB,CAAC,EAC/Bd,EAAYc,cAAgBC,GAAiBf,GAE7CA,EAAYgB,kBAAoBlB,EAAWA,EAAWE,EAAYF,SAClEmB,GAAwBjB,EAAaH,GACrCG,EAAYkB,kBAAoBC,GAAmBnB,EAAYkB,mBAC/DE,GAAuBpB,GACvBqB,GAAWrB,GACXA,EAAYsB,eAAiBC,EAAoBvB,EAAYwB,eAG7DC,GAAkBzB,GAClBA,EAAY0B,WAAa1B,EAAY2B,eAAeC,qBACnD,IAAI5B,EAAYwB,cAAcK,iBAAiBC,sBAEhD,GAAI9B,EAAYc,eAAeiB,wBAA0B,KAAM,CAC9D/B,EAAYgC,8BAAgCA,EAA8BhC,EAAYwB,cACvF,CACAS,GAAgBjC,GAChBkC,GAA+BlC,GAC/BmC,GAA2BnC,GAC3BA,EAAYc,cAAgBd,EAAYc,cAAgBd,EAAYc,cAAiB,CAAC,EACtFsB,GACCpC,EACCA,EAAYqC,yBAA6DrC,EAAYwB,cACtF5B,EACAC,GAEDyC,GACCtC,EACAA,EAAYkB,kBACZlB,EAAYwB,cACZ3B,GAED0C,GAAevC,EAAaH,GAAU2C,cAEtCxC,EAAYyC,WAAaC,GAAgB1C,GACzC,GAAIA,EAAY2C,YAAc,qBAAsB,CACnD3C,EAAY4C,qBAAuBC,GAAiC7C,EACrE,CAGA,MAAM8C,EAAgC,CAAC,SAAU,sBACjD,GACC9C,EAAY+C,eACXD,EAA8BE,SAAShD,EAAY+C,eACpD/C,EAAYwB,cAAcyB,aACzB,CACDjD,EAAYkD,KACXlD,EAAYkD,MACZlD,EAAYO,OACZ4C,EAAgBC,eACdpD,EAAYqC,yBAA6DrC,EAAYwB,cACtFxB,EAAYc,cAEf,KAAO,CACNd,EAAYkD,KAAO,EACpB,CAEA,GAAIlD,EAAYc,cAAcuC,mBAAoB,CACjDrD,EAAYsD,mBAAqBC,OAAOvD,EAAYc,cAAcuC,sBAAwB,OAAS,KAAOG,SAC3G,KAAO,CACNxD,EAAYsD,mBAAqBE,SAClC,CAGA,GAAIC,EAAWzD,EAAYkB,oBAAsBlB,EAAYkB,kBAAkBwC,aAAaC,IAAIC,mBAAqBJ,UAAW,CAC/HxD,EAAYF,SAAWE,EAAY2B,eAAeC,qBACjD,oDACA9B,EAAWA,EAAWE,EAAYF,SAEpC,CAEA,GAAIE,EAAY6D,WAAaL,UAAW,CACvCxD,EAAY8D,SAAWC,GACtBC,EAAOC,GAAMC,EAAqBlE,EAAY6D,SAAU,WAAY,MAAO,UAAW,YAExF,CAEA7D,EAAYmE,cAAgB,CAC3BlE,OAAQA,OACRmE,WAAYA,OACZC,mBAAoBA,QAGrB,OAAOrE,CACR,CAEAsE,EAAA5E,cAIO,SAASwC,GAA+BvC,GAC9C,MAAM4E,EAA6BC,EAAaC,8BAC/C9E,EAAc+E,wBACd/E,EAAcuB,kBACdvB,EAAc6B,eAEf,GAAImD,EAAYC,8BAA8BjF,EAAcgC,iBAAmBhC,EAAcmE,WAAae,EAAcC,QAAS,CAChI,MAAMC,EAAuB,KAE7B,MAAMC,EAA0BR,EAAaS,2BAC5CtF,EAAc6B,cACd0D,EAAwBC,0BAEzB,MAAMC,EAAqBrB,GAAkBsB,GAAId,EAA4Be,EAAIN,KAEjF,MAAMlB,EAAWC,GAChBC,EACCgB,EACAO,GAAS,YACTvB,EAAOqB,GAAI1B,EAAG6B,aAAc7F,EAAcqC,+BAAgC,UAAWrC,EAAc8F,oBAGrG9F,EAAcoF,qBAAuBA,EACrCpF,EAAcqF,wBAA0BA,EACxCrF,EAAcyF,mBAAqBA,EACnCzF,EAAcmE,SAAWA,CAC1B,KAAO,CACNnE,EAAcyF,mBAAqBrB,GAAkBQ,EACtD,CACD,CAEAD,EAAApC,kCAMO,SAASjB,GAAwBtB,EAAqCE,GAC5EF,EAAcuB,kBAAoBwE,EAAmBC,wBACpDhG,EAAciG,gBAAkBjG,EAAciG,gBAAkBjG,EAAcG,UAG/E,IAAI0B,EAAgBkE,EAAmBG,4BACtClG,EAAciG,gBAAkBjG,EAAciG,gBAAkBjG,EAAcG,SAC9EH,EAAcI,aAEfyB,EACCsE,EAA+BtE,IAAsFA,EACtH7B,EAAc6B,cAAgBA,EAC9B7B,EAAcoG,SAAWvE,EAAcyB,aACvCtD,EAAcgC,eAAiB9B,EAASmG,OAAOC,WAAapG,EAASmG,OAAOjG,YAC5EJ,EAAc+E,wBAA2BlD,GAAeyB,cAA4CiD,OAChG1E,GAAeyB,cAA2CiD,MAC3D1E,GAAeyB,YACnB,CAEAqB,EAAArD,2BAIO,SAASkB,GAA2BxC,GAC1C,MAAMwG,EAA2CC,GAC/CzG,EAAc0G,mBAAqB1G,EAAc0G,mBAAqB1G,EAAcI,cAClFuG,UACDC,WAAW,+BAAgC,KAC7C5G,EAAcgC,gBAEf,MAAM6E,EAA2CC,GAC/C9G,EAAc0G,mBAAqB1G,EAAc0G,mBAAqB1G,EAAcI,cAClFuG,UACDC,WAAW,+BAAgC,KAC7C5G,EAAcgC,gBAEf,MAAM+E,EAAsB,CAC3BP,yCAA0CA,EAC1CK,yCAA0CA,GAG3C,MAAMrG,EAAoBR,EAAcQ,kBACxC,MAAMwG,EAAoBnC,EAAaoC,qBACtCjH,EAAc+E,wBACd/E,EAAcuB,kBACd,MACAvB,EAAc6B,eAEf,MAAMqF,EAAqBrC,EAAasC,sBACvCnH,EAAc+E,wBACd/E,EAAcuB,kBACd,MACA,MACAwF,EACA/G,EAAc6B,eAGf7B,EAAcQ,kBAAoBA,EAClCR,EAAcgH,kBAAoBA,EAClChH,EAAckH,mBAAqBA,CACpC,CAACvC,EAAAnC,8BAEM,SAASF,GAAgBtC,GAC/B,GAAIA,EAAcmE,WAAaN,WAAa7D,EAAcmE,WAAa,KAAM,CAE5EnE,EAAc8F,iBAAmB9F,EAAcmE,QAChD,KAAO,CACN,MAAMiD,EAAkBpH,EAAcmB,eAAekG,mBAClDrH,EAAcmB,cAAckG,qBAAuB,WACnD,MAEHrH,EAAc8F,iBAAmBjB,EAAayC,YAC7CtH,EAAc+E,wBACd/E,EAAc6B,cACduF,EACA,KACApH,EAAcuB,mBAEfvB,EAAcmE,SAAWC,GACxBC,EAAOqB,GAAI1B,EAAG6B,aAAc7F,EAAcqC,+BAAgC,UAAWrC,EAAc8F,kBAErG,CACD,CAACnB,EAAArC,mBAEM,SAASR,GAAkB9B,GACjC,MAAMuH,EAAqBC,EAAgCxH,EAAcoG,UAEzE,GAAImB,EAAoB,CACvB,GAAIvH,EAAcoG,SAAUpG,EAAcoG,SAASqB,KAAOF,EAAmBE,KAC7E,GAAIC,EAAY1H,EAAcuB,mBAAoB,CACjDvB,EAAcuB,kBAAkBgF,MAAMoB,QAAQF,KAAOF,EAAmBE,IACzE,CACA,MAAMG,EAAyBC,EAAoC7H,EAAcoG,UACjF,MAAM0B,EAAoB9H,EAAcG,SACtC4H,WACA9F,qBAAqBjC,EAAcI,aAAauG,UAAY,IAAMiB,EAAwB5H,EAAcG,UAE1GH,EAAcgI,4BAA8BjC,EAAmBC,wBAAwB8B,GAEvF,IAAIjG,EAA+CkE,EAAmBG,4BACrE4B,EACA9H,EAAcI,aAEfyB,EAAgBsE,EAA+BtE,IAAiEA,EAChH7B,EAAc0C,wBAA0Bb,CACzC,CACD,CAEA8C,EAAA7C,qBAMA,SAASmG,GAAqBC,EAA6BrF,GAC1D,MAAMsF,EAAuC,CAC5C,qBACA,WACA,aACA,aACA,iBACA,gBACA,QACA,aAGD,IAAKtF,EAAc,CAElB,MACD,CACA,MAAMuF,EAAoBvF,EAAawF,wBACvC,MAAMC,EAAgBF,EAAkBH,qBACvCC,EAAMrG,cAAcK,kBAAkBC,oBAAsB,GAC5D+F,EAAMrG,cAAcyB,cAAcnB,oBAAsB,IAGzD,GAAI+F,EAAM9C,sBAAwB+C,EAAqC9E,SAAS6E,EAAMlF,WAAa,IAAK,CACvG,MAAMuF,EAA0B,GAAGC,IAAgCN,EAAMvG,iBACzE2G,EAAcG,KAAKF,GACnBL,EAAMrH,yBAA2BiD,EAAWoE,EAAMrG,cAAcyB,cAC7DoF,EAAmCR,EAAMrG,eACzCgC,SACJ,CAEA,OAAOyE,EAAcK,OAASL,EAAcM,KAAK,KAAO/E,SACzD,CAWO,SAASnC,GAAW1B,GAC1B,GAAIA,EAAce,QAAS,CAC1Bf,EAAc6I,OAAS7I,EAAce,QACrCf,EAAce,QAAU+H,GAAa9I,EAAce,SACnDf,EAAc+I,UAAY,GAAG/I,EAAce,WAAWf,EAAcc,YACrE,CAEA,GAAId,EAAciB,SAAU,CAC3BjB,EAAcgJ,YAAcC,EAAS,CAACjJ,EAAciB,SAAU,cAC/D,CAEA,GAAIjB,EAAcmB,eAAe+H,YAAc,aAAelJ,EAAcmE,WAAa,UAAW,CACnG,GAAInE,EAAce,QAAS,CAC1Bf,EAAcmJ,eAAiBnJ,EAAce,OAC9C,KAAO,CACNf,EAAcmJ,eAAiBnJ,EAAciB,SAAWgI,EAAS,CAACjJ,EAAciB,SAAU,kBAAoB4C,SAC/G,CACD,MAAO,GAAI7D,EAAciB,SAAU,CAClCjB,EAAcmJ,eAAiBF,EAAS,CAACjJ,EAAciB,SAAU,iBAClE,CACD,CAEA0D,EAAAjD,cAKO,SAASN,GAAiB8G,GAChC,MAAO,IACHA,EAAM/G,cACTiI,cAAelB,EAAM/G,cAAciI,eAAiB,OACpD1F,mBAAoBwE,EAAM/G,cAAcuC,oBAAsB,KAC9D2F,YAAanB,EAAM/G,cAAckI,YACjChC,mBAAoBa,EAAM/G,cAAckG,mBACxCiC,cAAepB,EAAM/G,cAAcmI,cACnCC,aAAcrB,EAAM/G,cAAcoI,aAClCC,yBAA0BtB,EAAM/G,cAAcqI,yBAC9CC,0BAA2BvB,EAAM/G,cAAcsI,0BAC/CC,cAAexB,EAAM/G,cAAcuI,cACnCC,eAAgBzB,EAAM/G,cAAcwI,eACpCC,6BAA8B1B,EAAM/G,cAAcyI,6BAClDC,SAAU3B,EAAM/G,cAAc0I,SAC9BC,aAAc5B,EAAM/G,cAAc2I,aAClCC,SAAU7B,EAAM/G,cAAc4I,SAEhC,CAACpF,EAAAvD,oBAED,SAAS4I,GACRC,EACAC,GAEA,IAAIC,EAA8DC,EACjE1B,EAAmCwB,IAEpC,MAAMG,EAAoBJ,GAAoBZ,YAC9C,MAAMiB,EAAqBC,EAAyBL,EAA4B5G,cAC5E4G,EAA4B5G,aAAaqE,QACzCuC,EAA4B5G,aAEhC,MAAMkH,EAAaF,EAAmBvG,aAAa0G,QAAQC,KAC3D,GAAIF,IAAe3G,UAAW,CAC7B,OAAOA,SACR,CACAsG,EAA4BQ,EAA0BL,EAAoBH,GAE1E,OAAQE,GACP,IAAK,mBACJ,MAAMO,EAAmBC,EAAiBX,GAC1C,OAAO9F,GAAkB0G,EAA4BN,EAAYI,IAClE,IAAK,mBACJ,OAAOxG,GAAkB2G,GAAa,CAACZ,GAA4Ba,EAAgBC,yBACpF,QACC,OAAOpH,UAEV,CAEA,SAASqH,GAAajL,EAAiDe,GAKtE,MAAMmK,EAAQ,CAAC,EAEf,GAAIlL,EAAsB,CACzB,MAAMmL,EAAgBnL,EAAqBe,GAC3C,GAAIoK,EAAe,CAClBC,OAAOC,KAAKF,GAAeG,QAAQ,SAAUC,GAC5CL,EAAMK,GAAaJ,EAAcI,EAClC,EACD,CACD,CACA,OAAOL,CACR,CAUA,SAASM,GACRzL,EACAE,EACA2B,EACA6J,EACAC,GAEA,GAAIA,EAAc,CACjB3L,EAAc2L,aAAe,KAC7B3L,EAAc4L,cAAgB,QAC/B,CACA,GAAIF,EAAoB,CACvB,MAAMG,EAAuBC,EAAoC9L,EAAcW,eAAgBkB,EAAe3B,GAC9G,GAAI2L,EAAqBE,kCAAoCF,EAAqBG,uBAAuBrD,OAAQ,CAChH3I,EAAc2L,aAAe,KAC7B3L,EAAc4L,cAAgBD,EAAe,yBAA2B,gBACxE3L,EAAcgM,uBACbH,EAAqBE,mCAAqC,KAAOF,EAAqBG,uBAAyBnI,SACjH,CACD,CACD,CAQA,SAASoI,GACRjM,EACA6B,GAEA,QACGqK,EAA8BrK,IAC/B7B,EAAcW,iBAAmBkD,WAAa7D,EAAcW,iBAAmB,EAElF,CAEO,SAASuC,GAAiClD,GAChD,IAAIkC,EACJ,MAAMe,EAAuBjD,EAAciD,qBAC3C,MAAMkJ,EAAqBnM,EAAcmB,cAAciI,cACvD,GAAI+C,IAAuB,QAAS,CACnCjK,EAAmBlC,EAAc6B,cAAcK,gBAChD,CACA,MAAMkK,EAAepM,EAAc6B,cAAcyB,cAAc+I,KAC/D,MAAMC,EAAsBlC,EAAY,GAAGgC,8CAC3C,MAAMG,EAA4BnC,EAAY,GAAGgC,oDACjD,MAAMI,EAAiBzB,GACtB,CACCuB,EACAC,EACAnC,EAAY,uBAAwB,YACpCA,EAAY,eAAgB,YAC5BA,EAAY,GAAGgC,yBACfnJ,EACAjD,EAAcmB,cAAckI,aAE7BoD,EAAyBC,kBACzBxK,GAGD,OAAOkC,GAAkBoI,EAC1B,CAAC7H,EAAAzB,oCAEM,SAAS1B,GAAmBmL,GAElC,MAAMC,EAAgB,IAAKD,GAC3B,GAAKA,GAAoCE,OAAS,uCAAwC,CACzFD,EAAcE,MAAQH,EAAUG,OAAK,0CACtC,CACA,OAAOF,CACR,CAACjI,EAAAnD,sBAEM,SAASmB,GACf3C,EACA2M,EACA9K,EACA3B,GAEA,MAAMG,EAAoCL,EAC1C,MAAMoG,EAAqBvE,EAAcyB,aACzC,IAAKzB,EAAcyB,aAAc,CAChCjD,EAAY+C,aAAe,OAC3B,OAAO/C,CACR,CAEAA,EAAY0M,kBACX3G,EAASrC,aAAaiJ,UAAUC,OAASpJ,WAAauC,EAASrC,aAAaiJ,UAAUE,cAAgBrJ,UACvGxD,EAAY8M,iCAAmCtI,EAAasI,iCAC3DtL,GAEDxB,EAAY+M,kBAAoBC,EAC/BjJ,GACCkJ,GAAG,yCAA0C,CAC5ClD,EAAY1B,EAAmC7G,IAC/C,IAAIuE,EAASjE,qBACb9B,EAAYc,cAAckI,eAG5B,OAGD,GAAIjD,EAASrC,aAAaC,IAAIuJ,QAAS,CACtClN,EAAY+C,aAAe,OAC3B,OAAO/C,CACR,CACA,GAAI+F,EAASrC,aAAaC,IAAIwJ,WAAY,CACzCnN,EAAY+C,aAAe,SAC3B,OAAO/C,CACR,CACA,GAAI+F,EAASrC,aAAaC,IAAIyJ,UAAW,CACxCpN,EAAY+C,aAAe,OAC3B,OAAO/C,CACR,CAGA,GAAI+F,EAASqB,OAAS,aAAc,CACnCpH,EAAY+C,aAAe,OAC3B,OAAO/C,CACR,CACAqN,GAAoB7L,EAAgDxB,GACpE,OAAQsM,EAAUG,OACjB,+CACCzM,EAAY+C,aAAe,YAC3B,OAAO/C,EACR,wDACC,GAAKsM,EAAgDgB,QAAQhG,SAASmF,QAAK,2CAAsC,CAChHzM,EAAY+C,aAAe,YAC3B,OAAO/C,CACR,MAAO,GACLsM,EAAgDgB,QAAQhG,SAASmF,QAClE,oDACC,CACDzM,EAAY+C,aAAe,UAC3B,OAAO/C,CACR,CACA,MACD,oDACA,mEACCA,EAAY+C,aAAe,SAC3B,OAAO/C,EACR,oEACA,6DACA,qDACCA,EAAY+C,aAAe,OAC3B,OAAO/C,EAET,MAAMsL,EAAeiC,EAAsC/L,EAAeuE,GAC1E,MAAMsF,EAAqBO,GAA8C5L,EAAawB,GAEtF,GAAIgM,EAAczH,EAAUvE,IAAkBxB,EAAYc,cAAc2M,iBAAkB,CACzFrC,GACCpL,EACAH,EACA2B,EACA6J,EACAC,GAEDoC,GAAkC1N,EAAawB,GAC/CxB,EAAY2N,mBACVnM,EAAcoM,iBAAmE3K,cAAc4K,QAC/F,uBAAyB7N,EAAYc,cAAcgN,qCACrD9N,EAAY+N,gCAAmCvM,EAAcyB,aAA0B+I,KACvFhM,EAAY+C,aACX/C,EAAYc,cAAc2M,mBAAqB,mBAAqB,mBAAqB,mBAC1F,OAAOzN,CACR,CACA,GAAIsM,EAAU0B,YAAa,CAC1B5C,GACCpL,EACAH,EACA2B,EACA6J,EACAC,GAEDtL,EAAY+C,aAAe,eAC3B,OAAO/C,CACR,CACA,GACC+F,EAASrC,aAAaiJ,UAAUE,aAChCtJ,OAAOvD,EAAYc,cAAcmN,qBAAuB,QACxDjO,EAAYc,cAAckG,qBAAuB,SAChD,CACDhH,EAAYkO,+BAAiClO,EAAYO,MACtDP,EAAYO,MACZ4N,EAAgB3M,EAAgDxB,EAAYc,cAAe,KAAM,KAAM0C,UAAW,MACrHxD,EAAYoO,sBAAwBrK,GACnCS,EAAa6J,4BAA4B7M,IAE1CxB,EAAY+C,aAAe,qBAE3B,OAAO/C,CACR,CACA,GAAI+F,EAASrC,aAAa4K,eAAeC,gBAAkBxI,EAASrC,aAAa4K,eAAeE,cAAe,CAC9GxO,EAAY+C,aAAe,OAC3B,OAAO/C,CACR,CACA,GAAI+F,EAASrC,aAAaC,IAAI8K,cAAe,CAC5CzO,EAAY+C,aAAe,iBAC3B,OAAO/C,CACR,CAEA,GAAIsM,EAAUG,QAAK,8CAAyC,CAC3DzM,EAAY+C,aAAe,OAC3B,OAAO/C,CACR,CAEAA,EAAY+C,aAAe,OAC3BqI,GAA+BpL,EAAaH,EAAU2B,EAAgD6J,EAAoBC,GAC1H,GAAItL,EAAYsL,aAAc,CAC7BtL,EAAY+C,aAAe,mBAC5B,CACA,OAAO/C,CACR,CAEAsE,EAAAhC,qBAKA,SAAS+K,GAAoB7L,EAA8C7B,GAC1E,GAAI6N,EAAchM,EAAcyB,aAA0BzB,GAAgB,CACzE7B,EAAc+O,uBACbC,EAAoBC,gCAAgCpN,EAAcK,oBAAsB2B,UACzF,GACEhC,EAAcoM,iBAAiBiB,iBAA2CnL,aAAa0G,QAAQ0E,WAC/FtN,EAAcqN,iBAA2CnL,aAAa0G,QAAQ0E,WAC/EnP,EAAcmB,eAAeiO,oBAAsB,KAClD,CAKDpP,EAAcqP,sBAAwBC,EAAgCzN,EAAcyB,cAAc+I,MAClGrM,EAAcuP,kBAAoB,IACnC,CACD,CACD,CAEO,SAAS3M,GAAesF,EAA6BrF,GAC3D,MAAMxC,EAAc6H,EACpBsH,EAAuBnP,EAAaA,EAAYkB,kBAAmBlB,EAAYwB,eAC/ExB,EAAYiI,cAAgBL,GAAqB5H,EAAawC,GAC9D,OAAOxC,CACR,CAACsE,EAAA/B,kBAEM,SAASmL,GACf/N,EACAkK,GAEA,MAAMuF,EAAgBzP,EAAcmB,eAAe2M,iBACnD,MAAMzE,EAAcrJ,EAAcmB,cAAckI,YAChDrJ,EAAc0P,gBAAkBC,EAC/BzF,EACA0F,EACA,CAAEvG,cAAawG,qBAAsB7P,EAAcmB,cAAc2M,mBAAqB,oBACtFjK,UACAA,WAED7D,EAAc8P,eACbL,IAAkB,mBACfzF,GAAwBhK,EAAcmB,cAAe+I,GACrDrG,SACL,CAACc,EAAAoJ,qCAEM,SAAStL,GACfzC,EACA6B,EACA5B,EACAC,GAEA,MAAM6P,EAAgB7E,GACrBjL,GACCD,EAAciG,gBAAkBjG,EAAciG,gBAAkBjG,EAAcG,UAAUwG,WAG1F,IAAK3G,EAAcmB,cAAckI,YAAa,CAC7CrJ,EAAcmB,cAAckI,YAAcxE,EAAamL,eAAenO,EACvE,CACA,GAAI7B,EAAcmB,cAAckI,cAAgB,cAAe,CAC9DrJ,EAAcuO,+BAAiCvO,EAAcY,MAC1DZ,EAAcY,MACd4N,EAAgB3M,EAAe7B,EAAcmB,cAAe,KAAM,KAAM0C,UAAW,KACvF,CACA7D,EAAcmB,cAAcmI,cAC1ByG,EAAgDzG,eAChDyG,EAAc5O,eAAiB4O,EAAc5O,cAAcmI,eAC5DtJ,EAAcmB,cAAcmI,eAC5B,EACDtJ,EAAcmB,cAAcoI,aAC1BwG,EAAgDxG,cAChDwG,EAAc5O,eAAiB4O,EAAc5O,cAAcoI,cAC5DvJ,EAAcmB,cAAcoI,aAG7B,GAAIrJ,EAASmG,OAAO4J,UAAUC,YAAY,8BAA+B,CACxElQ,EAAcmB,cAAcgP,0BAA4BC,EACvDvO,EAAcyB,aACdtD,EAAcmB,eAEf,GAAInB,EAAcmB,cAAcgP,0BAA2B,CAE1D,MAAME,IAA6BxO,GAAeK,kBAAkB6B,aAAaC,IAAIsM,gBACrFtQ,EAAcmB,cAAckI,YAAcgH,EACvCrQ,EAAcmB,cAAckI,YAC5B,kBACJ,CACD,CACD,CAAC1E,EAAAlC,sBAEM,SAASM,GAAgB/C,GAC/B,IAAIuQ,EACJ,MAAMpE,EAAqBnM,EAAcmB,eAAeiI,cAAgBpJ,EAAcmB,eAAeiI,cAAgB,OACrH,MAAMoH,EAAsBpG,EAC3B1B,EAAmC1I,EAAc6B,gBAElD,MAAM+I,EAAmBC,EAAiB7K,EAAc6B,eACxD,MAAM4O,EAAW3F,EAA4B9K,EAAc6B,eAAeyB,cAAcS,aAAa0G,QAAQC,KAAME,GACnH,MAAMwB,EAAepM,EAAc6B,cAAcyB,cAAc+I,KAC/D,MAAMC,EAAsBlC,EAAY,GAAGgC,8CAC3C,MAAMG,EAA4BnC,EAAY,GAAGgC,oDACjD,GAAID,IAAuB,QAAS,CACnCoE,EAAgBxF,GACf,CACCuB,EACAC,EACAnC,EAAY,uBAAwB,YACpCA,EAAY,cAAe,MAC3BpK,EAAc2B,eACd6O,EACAC,GAEDhE,EAAyBiE,iBACzB1Q,EAAc6B,cAAcK,iBAE9B,KAAO,CACNqO,EAAgBxF,GACf,CACCuB,EACAC,EACAnC,EAAY,uBAAwB,YACpCA,EAAY,cAAe,MAC3BpK,EAAc2B,eACd6O,EACAC,GAEDhE,EAAyBiE,iBAE3B,CAEA1Q,EAAc8C,WAAasB,GAAkBmM,GAC7C,OAAOvQ,EAAc8C,UACtB,CAAC6B,EAAA5B,mBAEM,SAAStB,GAAuBzB,GAGtC,MAAMkK,EAA8BnE,EAAmBG,4BACtDlG,EAAciG,gBAAkBjG,EAAciG,gBAAkBjG,EAAcG,SAC9EH,EAAcI,aAGfJ,EAAcO,QAAUP,EAAcO,UAAYoQ,EAAqBzG,EAA6BlK,EAAcmB,eAClHnB,EAAc4Q,eAAiB5Q,EAAcmB,eAAe+H,YAAc,YAAclJ,EAAcO,QAAUsD,SACjH,CAACc,EAAAlD,0BAED,SAASqH,GAAa+H,GACrB,MAAO,GAAGA,WACX,CAAC,OAAAlM,CAAA","ignoreList":[]}