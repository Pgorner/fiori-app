{"version":3,"file":"DisplayStyle.js","names":["DisplayStyle","getPrecisionForCurrency","internalField","scale","property","precision","Math","min","getCurrencyOrUnitControl","currencyOrUnit","visibleExpression","_jsx","Link","text","press","getContextRelativeTargetObjectPath","dataModelPath","visible","children","dependents","getAmountWithCurrencyTemplate","maxPrecision","relativePropertyPath","overallVisible","not","equal","pathInModel","undefined","formatOptions","isAnalytics","currency","Currency","stringValue","valueAsStringBindingExpression","unitBindingExpression","useSymbol","ConditionalWrapper","displayVisible","condition","hasValidAnalyticalCurrencyOrUnit","contentTrue","contentFalse","this","FormElementWrapper","formDoNotAdjustWidth","width","textAlignMode","getAvatarTemplate","avatarId","_flexId","idPrefix","generate","avatarVisible","FieldTemplating","getVisibleExpression","avatarSrc","getValueBinding","avatarDisplayShape","getAvatarShape","Avatar","id","src","displaySize","class","imageFitType","displayShape","getButtonTemplate","icon","showIconUrl","convertedMetaPath","IconUrl","Label","tooltip","buttonPress","buttonIsBound","buttonOperationAvailable","buttonOperationAvailableFormatted","navigationAvailable","$Type","dataFieldObject","metaPath","getObject","FieldHelper","getPressEventForDataFieldActionButton","ActionTarget","isBound","annotations","Core","OperationAvailable","actionTarget","bindingParamName","parameters","name","compileExpression","getExpressionFromAnnotation","path","startsWith","replace","CommonHelper","getPressHandlerForDataFieldForIBN","NavigationAvailable","String","ignoreNavigationAvailable","button","Button","enabled","isDataFieldActionButtonVisible","isDataFieldActionButtonEnabled","type","buildExpressionForCriticalityButtonType","getContactTemplate","contactMetaPath","getModel","createBindingContext","contactVisible","Contact","ariaLabelledBy","getPath","contextPath","showEmptyIndicator","getDataPointInnerPart","withConditionalWrapper","convertedDataField","MetaModelConverter","convertMetaModelContext","measureDisplayMode","DataPoint","value","getDataPointTemplate","hasUnitOrCurrency","getExpandableText","ExpandableText","displayStyleId","overflowMode","textExpandBehaviorDisplay","maxCharacters","textMaxCharactersDisplay","emptyIndicatorMode","getFileTemplate","innerFilePart","fileRelativePropertyPath","fileNameAnnotation","ContentDisposition","Filename","fileFilenameExpression","isPathAnnotationExpression","fileNameDataModelPath","enhanceDataModelPath","fileStreamNotEmpty","fileUploadUrl","fileFilenamePath","fileMediaType","MediaType","fileIsImage","UI","IsImageURL","IsImage","test","toString","fileAvatarSrc","fileAvatarDisplayShape","fileIconSrc","getPathForIconSource","fileLinkText","getFilenameExpr","fileLinkHref","getDownloadUrl","fileTextVisible","fileAcceptableMediaTypes","AcceptableMediaTypes","acceptedTypes","Array","from","map","join","fileMaximumSize","calculateMBfromByte","maxLength","avatar","customData","ImageCustomData","paramName","Icon","link","target","href","wrapping","Text","editMode","FieldEditMode","Display","beforeDialogOpen","collaborationEnabled","afterDialogOpen","fileUploader","FileUploader","editableExpression","buttonOnly","iconOnly","multiple","style","sendXHR","useMultipart","sameFilenameAllowed","mimeType","typeMissmatch","maximumFileSize","fileSizeExceed","uploadOnChange","uploadComplete","httpRequestMethod","change","afterDialogClose","uploadStart","deleteButton","FileWrapper","uploadUrl","propertyPath","filename","mediaType","fieldGroupIds","validateFieldGroup","dataSourcePath","getLinkTemplate","linkUrl","linkPress","iconUrl","linkActived","linkTarget","computeTextWithWhiteSpace","accessibleRole","LinkAccessibleRole","Target","html5LinkTarget","HTML5","LinkTarget","linkBinding","Url","Communication","IsEmailAddress","IsPhoneNumber","linkIsEmailAddress","linkIsPhoneNumber","propertyValueBinding","mailBlockId","uid","Email","mail","ObjectStatus","active","CustomData","wrap","getForeignKeyForCustomData","relativePathToQuickViewEntity","QuickView","getRelativePathToQuickViewEntity","targetNavigationProperties","targetEntityType","navigationProperties","targetNavProp","find","navProp","refConstraint","referentialConstraint","key","length","targetProperty","keyToFetch","getForeignKeyValueExpression","foreignKeyRelativePath","expression","_type","ifElse","constant","getStandardLinkWithQuickViewTemplate","getMdcLinkForQuickView","getConditionalLinkWithQuickViewTemplate","TextLink","showAsLink","semanticObject","getConditionalWrapperForQuickViewTemplate","getLinkWithQuickViewTemplate","retrieveTextFromValueList","textFromValueList","getQuickViewCondition","getTextTemplate","content","textAlign","renderWhitespace","customdata","displayMode","getObjectIdentifier","titleActive","hasQuickView","identifier","ObjectIdentifier","title","identifierTitle","identifierText","titlePress","hasSituationsIndicator","_jsxs","HBox","alignItems","justifyContent","SituationsIndicator","situationsIndicatorPropertyPath","showErrorIndicator","showErrorObjectStatus","VBox","state","getObjectStatus","objectStatus","requiredHelper","dataModelObjectPath","getInvolvedDataModelObjects","enhancedValueDataModelPath","targetObject","Value","criticalityIcon","buildExpressionForCriticalityIcon","buildExpressionForCriticalityColor","isActive","pressAction","createContent","getLabelSemanticKey","design","hasQuickview","addDraftIndicator","semanticKeyTemplate","fieldGroupDraftIndicatorPropertyPath","getMarginClass","compactSemanticKey","DraftIndicator","draftIndicatorType","ObjectMarkerVisibility","IconAndText","draftIndicatorVisible","getTextBinding","isPathInModelExpression","formatResult","quickViewType","dynamicSemanticObjects","listOfDynamicSemanticObjects","semanticObjectExpression","push","semanticObjectsPath","concat","valueFormatters","hasSemanticObjects","getTemplate","innerFieldContent","displayStyle"],"sources":["./DisplayStyle.tsx"],"sourcesContent":["import type { Action, PathAnnotationExpression, Property, PropertyAnnotationValue } from \"@sap-ux/vocabularies-types\";\nimport type {\n\tDataField,\n\tDataFieldAbstractTypes,\n\tDataFieldForAction,\n\tDataFieldTypes,\n\tDataFieldWithNavigationPath,\n\tDataFieldWithUrl,\n\tDataPointType\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport uid from \"sap/base/util/uid\";\nimport type { BindingToolkitExpression, CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport {\n\tcompileExpression,\n\tconstant,\n\tequal,\n\tformatResult,\n\tgetExpressionFromAnnotation,\n\tifElse,\n\tisPathInModelExpression,\n\tnot,\n\tpathInModel\n} from \"sap/fe/base/BindingToolkit\";\nimport FormElementWrapper from \"sap/fe/core/controls/FormElementWrapper\";\nimport * as MetaModelConverter from \"sap/fe/core/converters/MetaModelConverter\";\nimport valueFormatters from \"sap/fe/core/formatters/ValueFormatter\";\nimport { generate } from \"sap/fe/core/helpers/StableIdHelper\";\nimport { isPathAnnotationExpression } from \"sap/fe/core/helpers/TypeGuards\";\nimport {\n\tbuildExpressionForCriticalityButtonType,\n\tbuildExpressionForCriticalityColor,\n\tbuildExpressionForCriticalityIcon\n} from \"sap/fe/core/templating/CriticalityFormatters\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { enhanceDataModelPath, getContextRelativeTargetObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { hasValidAnalyticalCurrencyOrUnit } from \"sap/fe/core/templating/UIFormatters\";\nimport CommonHelper from \"sap/fe/macros/CommonHelper\";\nimport FieldHelper from \"sap/fe/macros/field/FieldHelper\";\nimport * as FieldTemplating from \"sap/fe/macros/field/FieldTemplating\";\nimport type { FieldBlockProperties } from \"sap/fe/macros/internal/field/FieldStructureHelper\";\nimport QuickView from \"sap/fe/macros/quickView/QuickView\";\nimport Avatar from \"sap/m/Avatar\";\nimport Button from \"sap/m/Button\";\nimport ExpandableText from \"sap/m/ExpandableText\";\nimport HBox from \"sap/m/HBox\";\nimport ImageCustomData from \"sap/m/ImageCustomData\";\nimport Label from \"sap/m/Label\";\nimport type { Link$PressEvent } from \"sap/m/Link\";\nimport Link from \"sap/m/Link\";\nimport type { ObjectIdentifier$TitlePressEvent } from \"sap/m/ObjectIdentifier\";\nimport ObjectIdentifier from \"sap/m/ObjectIdentifier\";\nimport ObjectStatus from \"sap/m/ObjectStatus\";\nimport Text from \"sap/m/Text\";\nimport VBox from \"sap/m/VBox\";\nimport { LinkAccessibleRole, ObjectMarkerVisibility } from \"sap/m/library\";\nimport type Event from \"sap/ui/base/Event\";\nimport type EventProvider from \"sap/ui/base/EventProvider\";\nimport type Control from \"sap/ui/core/Control\";\nimport type { Control$ValidateFieldGroupEvent } from \"sap/ui/core/Control\";\nimport CustomData from \"sap/ui/core/CustomData\";\nimport Icon from \"sap/ui/core/Icon\";\nimport type MdcLink from \"sap/ui/mdc/Link\";\nimport FieldEditMode from \"sap/ui/mdc/enums/FieldEditMode\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport Currency from \"sap/ui/unified/Currency\";\nimport type {\n\tFileUploader$ChangeEvent,\n\tFileUploader$FileSizeExceedEvent,\n\tFileUploader$TypeMissmatchEvent,\n\tFileUploader$UploadCompleteEvent,\n\tFileUploader$UploadStartEvent\n} from \"sap/ui/unified/FileUploader\";\nimport FileUploader from \"sap/ui/unified/FileUploader\";\nimport Contact from \"../../contact/Contact\";\nimport Email from \"../../contact/Email\";\nimport ConditionalWrapper from \"../../controls/ConditionalWrapper\";\nimport FileWrapper from \"../../controls/FileWrapper\";\nimport TextLink from \"../../controls/TextLink\";\nimport DraftIndicator from \"../../draftIndicator/DraftIndicator\";\nimport SituationsIndicator from \"../../situations/SituationsIndicator\";\nimport DataPoint from \"../DataPoint\";\nimport type { DisplayStyle as DisplayStyleType } from \"../InternalField.block\";\n\nconst DisplayStyle = {\n\tgetPrecisionForCurrency(internalField: FieldBlockProperties): number {\n\t\tlet scale = internalField.property.scale ?? 5;\n\t\tif (typeof scale !== \"number\") {\n\t\t\t// Scale can be \"variable\" but it's not typed as such. In this case, Scale equals the precision\n\t\t\tscale = internalField.property.precision ?? 5;\n\t\t}\n\t\treturn Math.min(scale, 5);\n\t},\n\n\tgetCurrencyOrUnitControl(\n\t\tinternalField: FieldBlockProperties,\n\t\tcurrencyOrUnit: string,\n\t\tvisibleExpression?: BindingToolkitExpression<boolean>\n\t): Control {\n\t\treturn (\n\t\t\t<Link\n\t\t\t\tcore:require=\"{FIELDRUNTIME: 'sap/fe/macros/field/FieldRuntime'}\"\n\t\t\t\ttext=\"{sap.fe.i18n>M_TABLE_SHOW_DETAILS}\"\n\t\t\t\tpress={\n\t\t\t\t\t`FIELDRUNTIME.displayAggregateDetails($event, '${getContextRelativeTargetObjectPath(\n\t\t\t\t\t\tinternalField.dataModelPath\n\t\t\t\t\t)}')` as unknown as (evt: Link$PressEvent) => void\n\t\t\t\t}\n\t\t\t\tvisible={visibleExpression}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tdependents: currencyOrUnit\n\t\t\t\t}}\n\t\t\t</Link>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the AmountWithCurrency template.\n\t * @param internalField Reference to the current internal field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetAmountWithCurrencyTemplate(internalField: FieldBlockProperties): string {\n\t\tconst maxPrecision = DisplayStyle.getPrecisionForCurrency(internalField);\n\n\t\t// We don't display anything if the value is undefined\n\t\tconst relativePropertyPath = getContextRelativeTargetObjectPath(internalField.dataModelPath);\n\t\tconst overallVisible = not(equal(pathInModel(relativePropertyPath), undefined));\n\n\t\tif (internalField.formatOptions.isAnalytics) {\n\t\t\tconst currency = (\n\t\t\t\t<Currency\n\t\t\t\t\tstringValue={internalField.valueAsStringBindingExpression}\n\t\t\t\t\tcurrency={internalField.unitBindingExpression}\n\t\t\t\t\tuseSymbol=\"false\"\n\t\t\t\t\tmaxPrecision={maxPrecision}\n\t\t\t\t\tvisible={overallVisible}\n\t\t\t\t/>\n\t\t\t);\n\t\t\treturn (\n\t\t\t\t<ConditionalWrapper\n\t\t\t\t\tvisible={internalField.displayVisible}\n\t\t\t\t\tcondition={internalField.hasValidAnalyticalCurrencyOrUnit as unknown as boolean}\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcontentTrue: currency,\n\t\t\t\t\t\tcontentFalse: this.getCurrencyOrUnitControl(internalField, currency, overallVisible)\n\t\t\t\t\t}}\n\t\t\t\t</ConditionalWrapper>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<FormElementWrapper\n\t\t\t\t\tformDoNotAdjustWidth={true}\n\t\t\t\t\twidth={internalField.formatOptions.textAlignMode === \"Table\" ? \"100%\" : undefined}\n\t\t\t\t\tvisible={overallVisible}\n\t\t\t\t>\n\t\t\t\t\t<Currency\n\t\t\t\t\t\tvisible={internalField.displayVisible}\n\t\t\t\t\t\tstringValue={internalField.valueAsStringBindingExpression}\n\t\t\t\t\t\tcurrency={internalField.unitBindingExpression}\n\t\t\t\t\t\tuseSymbol=\"false\"\n\t\t\t\t\t\tmaxPrecision={maxPrecision}\n\t\t\t\t\t/>\n\t\t\t\t</FormElementWrapper>\n\t\t\t);\n\t\t}\n\t},\n\n\t/**\n\t * Generates the Avatar template.\n\t * @param internalField Reference to the current internal field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetAvatarTemplate(internalField: FieldBlockProperties): string {\n\t\tlet avatarId;\n\t\tif (internalField._flexId) {\n\t\t\tavatarId = internalField._flexId;\n\t\t} else if (internalField.idPrefix) {\n\t\t\tavatarId = generate([internalField.idPrefix, \"Field-content\"]);\n\t\t}\n\n\t\tconst avatarVisible = FieldTemplating.getVisibleExpression(internalField.dataModelPath as DataModelObjectPath<DataPointType>);\n\n\t\tconst avatarSrc = FieldTemplating.getValueBinding(internalField.dataModelPath, {});\n\t\tconst avatarDisplayShape = FieldTemplating.getAvatarShape(internalField.dataModelPath);\n\n\t\treturn (\n\t\t\t<FormElementWrapper visible={avatarVisible}>\n\t\t\t\t<Avatar\n\t\t\t\t\tid={avatarId}\n\t\t\t\t\tsrc={avatarSrc}\n\t\t\t\t\tdisplaySize=\"S\"\n\t\t\t\t\tclass=\"sapUiSmallMarginEnd\"\n\t\t\t\t\timageFitType=\"Cover\"\n\t\t\t\t\tdisplayShape={avatarDisplayShape}\n\t\t\t\t/>\n\t\t\t</FormElementWrapper>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the button template.\n\t * @param internalField Reference to the current internal field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetButtonTemplate: (internalField: FieldBlockProperties): string => {\n\t\tconst icon =\n\t\t\tinternalField.formatOptions?.showIconUrl ?? false ? (internalField.convertedMetaPath as DataFieldTypes).IconUrl : undefined;\n\t\tconst text = !(internalField.formatOptions?.showIconUrl ?? false)\n\t\t\t? (internalField.convertedMetaPath as DataFieldTypes).Label\n\t\t\t: undefined;\n\t\tconst tooltip =\n\t\t\tinternalField.formatOptions?.showIconUrl ?? false ? (internalField.convertedMetaPath as DataFieldTypes).Label : undefined;\n\n\t\tlet buttonPress;\n\t\tlet buttonIsBound;\n\t\tlet buttonOperationAvailable;\n\t\tlet buttonOperationAvailableFormatted;\n\t\tlet navigationAvailable;\n\n\t\tif (internalField.convertedMetaPath.$Type === UIAnnotationTypes.DataFieldForAction) {\n\t\t\t//Qualms: the getObject is a bad practice, but for now it´s fine as an intermediate step to avoid refactoring of the helper in addition\n\t\t\tconst dataFieldObject = internalField.metaPath.getObject();\n\t\t\tbuttonPress = FieldHelper.getPressEventForDataFieldActionButton(internalField, dataFieldObject);\n\n\t\t\tbuttonIsBound = internalField.convertedMetaPath.ActionTarget ? internalField.convertedMetaPath.ActionTarget.isBound : true;\n\t\t\tbuttonOperationAvailable = internalField.convertedMetaPath.ActionTarget\n\t\t\t\t? internalField.convertedMetaPath.ActionTarget.annotations?.Core?.OperationAvailable\n\t\t\t\t: \"false\";\n\t\t\tbuttonOperationAvailableFormatted = internalField.convertedMetaPath.ActionTarget ? undefined : \"false\";\n\n\t\t\tif (buttonOperationAvailable && buttonOperationAvailable !== \"false\") {\n\t\t\t\tconst actionTarget = internalField.convertedMetaPath.ActionTarget as Action;\n\t\t\t\tconst bindingParamName = actionTarget.parameters[0].name;\n\t\t\t\t//QUALMS, needs to be checked whether this makes sense at that place, might be good in a dedicated helper function\n\t\t\t\tbuttonOperationAvailableFormatted = compileExpression(\n\t\t\t\t\tgetExpressionFromAnnotation(\n\t\t\t\t\t\tbuttonOperationAvailable as PropertyAnnotationValue<boolean>,\n\t\t\t\t\t\t[],\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t(path: string) => {\n\t\t\t\t\t\t\tif (path.startsWith(bindingParamName)) {\n\t\t\t\t\t\t\t\treturn path.replace(bindingParamName + \"/\", \"\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn path;\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (internalField.convertedMetaPath.$Type === UIAnnotationTypes.DataFieldForIntentBasedNavigation) {\n\t\t\tbuttonPress = CommonHelper.getPressHandlerForDataFieldForIBN(internalField.metaPath.getObject(), undefined, undefined);\n\t\t\tnavigationAvailable = true;\n\t\t\tif (\n\t\t\t\tinternalField.convertedMetaPath?.$Type === UIAnnotationTypes.DataFieldForIntentBasedNavigation &&\n\t\t\t\tinternalField.convertedMetaPath.NavigationAvailable !== undefined &&\n\t\t\t\tString(internalField.formatOptions.ignoreNavigationAvailable) !== \"true\"\n\t\t\t) {\n\t\t\t\tnavigationAvailable = compileExpression(getExpressionFromAnnotation(internalField.convertedMetaPath.NavigationAvailable));\n\t\t\t}\n\t\t}\n\n\t\tlet button = \"\";\n\t\tif (internalField.convertedMetaPath.$Type === UIAnnotationTypes.DataFieldForIntentBasedNavigation) {\n\t\t\tbutton = (\n\t\t\t\t<Button\n\t\t\t\t\tvisible={internalField.visible}\n\t\t\t\t\ttext={text}\n\t\t\t\t\ticon={icon}\n\t\t\t\t\tenabled={navigationAvailable}\n\t\t\t\t\ttooltip={tooltip}\n\t\t\t\t\tpress={buttonPress as unknown as ((oEvent: Event<object, EventProvider>) => void) | undefined}\n\t\t\t\t/>\n\t\t\t);\n\t\t} else if (\n\t\t\tFieldHelper.isDataFieldActionButtonVisible(\n\t\t\t\tinternalField.convertedMetaPath,\n\t\t\t\tbuttonIsBound,\n\t\t\t\tbuttonOperationAvailable as boolean | undefined\n\t\t\t)\n\t\t) {\n\t\t\tconst enabled = FieldHelper.isDataFieldActionButtonEnabled(\n\t\t\t\tinternalField.convertedMetaPath as DataFieldForAction,\n\t\t\t\tbuttonIsBound as unknown as boolean,\n\t\t\t\tbuttonOperationAvailable,\n\t\t\t\tbuttonOperationAvailableFormatted as string\n\t\t\t);\n\t\t\tconst type = buildExpressionForCriticalityButtonType(internalField.dataModelPath as DataModelObjectPath<DataPointType>);\n\n\t\t\tbutton = (\n\t\t\t\t<Button\n\t\t\t\t\tclass={internalField.class}\n\t\t\t\t\ttext={text}\n\t\t\t\t\ticon={icon}\n\t\t\t\t\ttooltip={tooltip}\n\t\t\t\t\tpress={buttonPress as unknown as ((oEvent: Event<object, EventProvider>) => void) | undefined}\n\t\t\t\t\tenabled={enabled}\n\t\t\t\t\tvisible={internalField.visible}\n\t\t\t\t\ttype={type}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t\treturn button;\n\t},\n\n\t/**\n\t * Generates the Contact template.\n\t * @param internalField Reference to the current internal field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetContactTemplate(internalField: FieldBlockProperties): string {\n\t\tconst contactMetaPath = internalField.metaPath.getModel().createBindingContext(\"Target/$AnnotationPath\", internalField.metaPath);\n\t\tconst contactVisible = FieldTemplating.getVisibleExpression(internalField.dataModelPath as DataModelObjectPath<DataPointType>);\n\n\t\treturn (\n\t\t\t<Contact\n\t\t\t\tidPrefix={internalField.idPrefix}\n\t\t\t\tariaLabelledBy={internalField.ariaLabelledBy}\n\t\t\t\tmetaPath={contactMetaPath.getPath()}\n\t\t\t\tcontextPath={internalField.contextPath.getPath()}\n\t\t\t\t_flexId={internalField._flexId}\n\t\t\t\tvisible={contactVisible}\n\t\t\t\tshowEmptyIndicator={internalField.formatOptions.showEmptyIndicator}\n\t\t\t/>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the innerpart of the data point to be used in getDataPointTemplate.\n\t * @param internalField Reference to the current internal field instance\n\t * @param withConditionalWrapper Boolean value to determine whether the DataPoint\n\t * \t\t\t\t\t  \t\t\tshall be generated for the conditional wrapper case\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetDataPointInnerPart(internalField: FieldBlockProperties, withConditionalWrapper: boolean): string {\n\t\tconst convertedDataField = MetaModelConverter.convertMetaModelContext(internalField.metaPath) as DataFieldAbstractTypes;\n\n\t\tconst metaPath =\n\t\t\tconvertedDataField.$Type === UIAnnotationTypes.DataFieldForAnnotation\n\t\t\t\t? internalField.metaPath.getModel().createBindingContext(\"Target/$AnnotationPath\", internalField.metaPath)\n\t\t\t\t: internalField.metaPath;\n\n\t\tconst formatOptions = {\n\t\t\tmeasureDisplayMode: internalField.formatOptions.measureDisplayMode,\n\t\t\tshowEmptyIndicator: internalField.formatOptions.showEmptyIndicator,\n\t\t\tisAnalytics: internalField.formatOptions.isAnalytics\n\t\t};\n\n\t\treturn (\n\t\t\t<DataPoint\n\t\t\t\tidPrefix={internalField.idPrefix}\n\t\t\t\tvisible={(!withConditionalWrapper ? internalField.displayVisible : \"\") as unknown as string | undefined}\n\t\t\t\tariaLabelledBy={internalField.ariaLabelledBy ? internalField.ariaLabelledBy : undefined}\n\t\t\t\tmetaPath={metaPath.getPath()}\n\t\t\t\tcontextPath={internalField.contextPath?.getPath()}\n\t\t\t\tvalue={internalField.value}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tformatOptions: { formatOptions }\n\t\t\t\t}}\n\t\t\t</DataPoint>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the DataPoint template.\n\t * @param internalField Reference to the current internal field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetDataPointTemplate(internalField: FieldBlockProperties): string {\n\t\tif ((internalField.formatOptions.isAnalytics ?? false) && (internalField.hasUnitOrCurrency ?? false)) {\n\t\t\treturn (\n\t\t\t\t<ConditionalWrapper\n\t\t\t\t\tvisible={internalField.displayVisible}\n\t\t\t\t\tcondition={internalField.hasValidAnalyticalCurrencyOrUnit as unknown as boolean}\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcontentTrue: this.getDataPointInnerPart(internalField, true),\n\t\t\t\t\t\tcontentFalse: this.getCurrencyOrUnitControl(internalField, this.getDataPointInnerPart(internalField, false))\n\t\t\t\t\t}}\n\t\t\t\t</ConditionalWrapper>\n\t\t\t);\n\t\t} else {\n\t\t\treturn this.getDataPointInnerPart(internalField, false);\n\t\t}\n\t},\n\n\t/**\n\t * Generates the ExpandableText template.\n\t * @param internalField Reference to the current internal field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetExpandableText(internalField: FieldBlockProperties): string {\n\t\treturn (\n\t\t\t<ExpandableText\n\t\t\t\tid={internalField?.displayStyleId}\n\t\t\t\tvisible={internalField?.displayVisible}\n\t\t\t\ttext={internalField.text}\n\t\t\t\toverflowMode={internalField?.formatOptions?.textExpandBehaviorDisplay}\n\t\t\t\tmaxCharacters={internalField?.formatOptions?.textMaxCharactersDisplay}\n\t\t\t\temptyIndicatorMode={internalField?.emptyIndicatorMode}\n\t\t\t/>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the File template.\n\t * @param internalField Reference to the current internal field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetFileTemplate(internalField: FieldBlockProperties): string {\n\t\tlet innerFilePart;\n\n\t\tconst fileRelativePropertyPath = getContextRelativeTargetObjectPath(internalField.dataModelPath);\n\t\tconst fileNameAnnotation = internalField.property.annotations.Core?.ContentDisposition?.Filename;\n\t\tlet fileFilenameExpression;\n\t\tif (isPathAnnotationExpression(fileNameAnnotation)) {\n\t\t\tconst fileNameDataModelPath = enhanceDataModelPath(internalField.dataModelPath, fileNameAnnotation.path);\n\t\t\t// This causes an expression parsing error: compileExpression(pathInModel(getContextRelativeTargetObjectPath(fileNameDataModelPath)));\n\t\t\tfileFilenameExpression = \"{ path: '\" + getContextRelativeTargetObjectPath(fileNameDataModelPath) + \"' }\";\n\t\t}\n\t\tconst fileStreamNotEmpty = compileExpression(not(equal(pathInModel(`${fileRelativePropertyPath}@odata.mediaContentType`), null)));\n\n\t\t// FileWrapper\n\t\tconst fileUploadUrl = FieldTemplating.getValueBinding(internalField.dataModelPath, {});\n\t\tconst fileFilenamePath = (internalField.property.annotations.Core?.ContentDisposition?.Filename as PathAnnotationExpression<string>)\n\t\t\t?.path;\n\t\tconst fileMediaType =\n\t\t\tinternalField.property.annotations.Core?.MediaType &&\n\t\t\tcompileExpression(getExpressionFromAnnotation(internalField.property.annotations.Core?.MediaType));\n\n\t\t// template:if\n\t\tconst fileIsImage =\n\t\t\t!!internalField.property.annotations.UI?.IsImageURL ||\n\t\t\t!!internalField.property.annotations.UI?.IsImage ||\n\t\t\t/image\\//i.test(internalField.property.annotations.Core?.MediaType?.toString() ?? \"\");\n\n\t\t// Avatar\n\t\tconst fileAvatarSrc = FieldTemplating.getValueBinding(internalField.dataModelPath, {});\n\t\tconst fileAvatarDisplayShape = FieldTemplating.getAvatarShape(internalField.dataModelPath);\n\n\t\t// Icon\n\t\tconst fileIconSrc = FieldHelper.getPathForIconSource(fileRelativePropertyPath);\n\n\t\t// Link\n\t\tconst fileLinkText = FieldHelper.getFilenameExpr(fileFilenameExpression, \"{sap.fe.i18n>M_FIELD_FILEUPLOADER_NOFILENAME_TEXT}\");\n\t\tconst fileLinkHref = FieldHelper.getDownloadUrl(fileUploadUrl ?? \"\");\n\n\t\t// Text\n\t\tconst fileTextVisible = compileExpression(equal(pathInModel(`${fileRelativePropertyPath}@odata.mediaContentType`), null));\n\n\t\tlet fileAcceptableMediaTypes;\n\t\t// FileUploader\n\t\tif (internalField.property.annotations.Core?.AcceptableMediaTypes) {\n\t\t\tconst acceptedTypes = Array.from(internalField.property.annotations.Core.AcceptableMediaTypes as unknown as string[]).map(\n\t\t\t\t(type) => `'${type}'`\n\t\t\t);\n\t\t\tfileAcceptableMediaTypes = `{=odata.collection([${acceptedTypes.join(\",\")}])}`; // This does not feel right, but follows the logic of AnnotationHelper#value\n\t\t}\n\t\tconst fileMaximumSize = FieldHelper.calculateMBfromByte(internalField.property.maxLength);\n\n\t\tif (fileIsImage) {\n\t\t\tinnerFilePart = {\n\t\t\t\tavatar: (\n\t\t\t\t\t<Avatar\n\t\t\t\t\t\tvisible={internalField.displayVisible}\n\t\t\t\t\t\tsrc={fileAvatarSrc}\n\t\t\t\t\t\tdisplaySize=\"S\"\n\t\t\t\t\t\tclass=\"sapUiSmallMarginEnd\"\n\t\t\t\t\t\timageFitType=\"Cover\"\n\t\t\t\t\t\tdisplayShape={fileAvatarDisplayShape}\n\t\t\t\t\t>\n\t\t\t\t\t\t{{\n\t\t\t\t\t\t\tcustomData: <ImageCustomData paramName=\"xcache\" />\n\t\t\t\t\t\t}}\n\t\t\t\t\t</Avatar>\n\t\t\t\t)\n\t\t\t};\n\t\t} else {\n\t\t\tinnerFilePart = {\n\t\t\t\ticon: <Icon src={fileIconSrc} class=\"sapUiSmallMarginEnd\" visible={fileStreamNotEmpty} />,\n\t\t\t\tlink: <Link text={fileLinkText} target=\"_blank\" href={fileLinkHref} visible={fileStreamNotEmpty} wrapping=\"true\" />,\n\t\t\t\ttext: <Text emptyIndicatorMode={internalField.emptyIndicatorMode} text=\"\" visible={fileTextVisible} />\n\t\t\t};\n\t\t}\n\n\t\tif (internalField.editMode !== FieldEditMode.Display) {\n\t\t\tconst beforeDialogOpen = internalField.collaborationEnabled ? \"FIELDRUNTIME.handleOpenUploader\" : undefined;\n\t\t\tconst afterDialogOpen = internalField.collaborationEnabled ? \"FIELDRUNTIME.handleCloseUploader\" : undefined;\n\n\t\t\tinnerFilePart = {\n\t\t\t\t...innerFilePart,\n\t\t\t\tfileUploader: (\n\t\t\t\t\t<FileUploader\n\t\t\t\t\t\tname=\"FEV4FileUpload\"\n\t\t\t\t\t\tvisible={internalField.editableExpression}\n\t\t\t\t\t\tbuttonOnly=\"true\"\n\t\t\t\t\t\ticonOnly=\"true\"\n\t\t\t\t\t\tmultiple=\"false\"\n\t\t\t\t\t\ttooltip=\"{sap.fe.i18n>M_FIELD_FILEUPLOADER_UPLOAD_BUTTON_TOOLTIP}\"\n\t\t\t\t\t\ticon=\"sap-icon://upload\"\n\t\t\t\t\t\tstyle=\"Transparent\"\n\t\t\t\t\t\tsendXHR=\"true\"\n\t\t\t\t\t\tuseMultipart=\"false\"\n\t\t\t\t\t\tsameFilenameAllowed=\"true\"\n\t\t\t\t\t\tmimeType={fileAcceptableMediaTypes}\n\t\t\t\t\t\ttypeMissmatch={\"FIELDRUNTIME.handleTypeMissmatch\" as unknown as (oEvent: FileUploader$TypeMissmatchEvent) => void}\n\t\t\t\t\t\tmaximumFileSize={fileMaximumSize}\n\t\t\t\t\t\tfileSizeExceed={\n\t\t\t\t\t\t\t\"FIELDRUNTIME.handleFileSizeExceed\" as unknown as (oEvent: FileUploader$FileSizeExceedEvent) => void\n\t\t\t\t\t\t}\n\t\t\t\t\t\tuploadOnChange=\"false\"\n\t\t\t\t\t\tuploadComplete={\n\t\t\t\t\t\t\t`FIELDRUNTIME.handleUploadComplete($event, ${\n\t\t\t\t\t\t\t\tfileFilenameExpression || \"undefined\"\n\t\t\t\t\t\t\t}, '${fileRelativePropertyPath}', $controller)` as unknown as (oEvent: FileUploader$UploadCompleteEvent) => void\n\t\t\t\t\t\t}\n\t\t\t\t\t\thttpRequestMethod=\"Put\"\n\t\t\t\t\t\tchange={\"FIELDRUNTIME.uploadStream($controller, $event)\" as unknown as (oEvent: FileUploader$ChangeEvent) => void}\n\t\t\t\t\t\tbeforeDialogOpen={beforeDialogOpen as unknown as (oEvent: Event) => void}\n\t\t\t\t\t\tafterDialogClose={afterDialogOpen as unknown as (oEvent: Event) => void}\n\t\t\t\t\t\tuploadStart={\"FIELDRUNTIME.handleOpenUploader\" as unknown as (oEvent: FileUploader$UploadStartEvent) => void}\n\t\t\t\t\t/>\n\t\t\t\t),\n\t\t\t\tdeleteButton: (\n\t\t\t\t\t<Button\n\t\t\t\t\t\ticon=\"sap-icon://sys-cancel\"\n\t\t\t\t\t\ttype=\"Transparent\"\n\t\t\t\t\t\tpress={\n\t\t\t\t\t\t\t`FIELDRUNTIME.removeStream($event, ${\n\t\t\t\t\t\t\t\tfileFilenameExpression || \"undefined\"\n\t\t\t\t\t\t\t}, '${fileRelativePropertyPath}', $controller)` as unknown as (oEvent: Event) => void\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttooltip=\"{sap.fe.i18n>M_FIELD_FILEUPLOADER_DELETE_BUTTON_TOOLTIP}\"\n\t\t\t\t\t\tvisible={internalField.editableExpression}\n\t\t\t\t\t\tenabled={fileStreamNotEmpty}\n\t\t\t\t\t/>\n\t\t\t\t)\n\t\t\t};\n\t\t}\n\n\t\treturn (\n\t\t\t<FileWrapper\n\t\t\t\tcore:require=\"{FIELDRUNTIME: 'sap/fe/macros/field/FieldRuntime'}\"\n\t\t\t\tvisible={internalField.visible}\n\t\t\t\tuploadUrl={fileUploadUrl}\n\t\t\t\tpropertyPath={fileRelativePropertyPath}\n\t\t\t\tfilename={fileFilenamePath}\n\t\t\t\tmediaType={fileMediaType}\n\t\t\t\tfieldGroupIds={internalField.fieldGroupIds}\n\t\t\t\tvalidateFieldGroup={\n\t\t\t\t\t\"FIELDRUNTIME.onValidateFieldGroup($event)\" as unknown as (oEvent: Control$ValidateFieldGroupEvent) => void\n\t\t\t\t}\n\t\t\t\tlog:sourcePath={internalField.dataSourcePath}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tinnerFilePart\n\t\t\t\t}}\n\t\t\t</FileWrapper>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the Link template.\n\t * @param internalField Reference to the current internal field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetLinkTemplate(internalField: FieldBlockProperties): string {\n\t\tlet linkUrl;\n\t\tlet linkPress;\n\t\tlet iconUrl;\n\t\tlet linkActived;\n\t\ttype LinkTarget = \"_blank\" | \"_self\" | \"_top\" | \"_parent\";\n\t\tlet linkTarget: LinkTarget | undefined;\n\n\t\tswitch (internalField.convertedMetaPath.$Type as string) {\n\t\t\tcase UIAnnotationTypes.DataFieldWithIntentBasedNavigation:\n\t\t\t\tlinkPress = CommonHelper.getPressHandlerForDataFieldForIBN(internalField.metaPath.getObject());\n\t\t\t\treturn (\n\t\t\t\t\t<Link\n\t\t\t\t\t\tid={internalField.displayStyleId}\n\t\t\t\t\t\tcore:require=\"{WSR: 'sap/base/strings/whitespaceReplacer'}\"\n\t\t\t\t\t\tvisible={internalField.displayVisible}\n\t\t\t\t\t\ttext={DisplayStyle.computeTextWithWhiteSpace(internalField)}\n\t\t\t\t\t\tpress={linkPress as unknown as (oEvent: Link$PressEvent) => void}\n\t\t\t\t\t\tariaLabelledBy={internalField.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\t\t\temptyIndicatorMode={internalField.emptyIndicatorMode}\n\t\t\t\t\t\tclass=\"sapMTextRenderWhitespaceWrap\"\n\t\t\t\t\t\taccessibleRole={LinkAccessibleRole.Button}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\tcase UIAnnotationTypes.DataFieldWithNavigationPath:\n\t\t\t\tlinkPress = `FieldRuntime.onDataFieldWithNavigationPath(\\${$source>/}, $controller, '${\n\t\t\t\t\t(internalField.convertedMetaPath as DataFieldWithNavigationPath).Target.value\n\t\t\t\t}')`;\n\t\t\t\treturn (\n\t\t\t\t\t<Link\n\t\t\t\t\t\tid={internalField.displayStyleId}\n\t\t\t\t\t\tcore:require=\"{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}\"\n\t\t\t\t\t\tvisible={internalField.displayVisible}\n\t\t\t\t\t\ttext={internalField.text}\n\t\t\t\t\t\tpress={linkPress as unknown as (oEvent: Link$PressEvent) => void}\n\t\t\t\t\t\tariaLabelledBy={internalField.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\t\t\temptyIndicatorMode={internalField.emptyIndicatorMode}\n\t\t\t\t\t\tclass=\"sapMTextRenderWhitespaceWrap\"\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\tcase UIAnnotationTypes.DataFieldWithAction:\n\t\t\t\tlinkPress = FieldHelper.getPressEventForDataFieldActionButton(internalField, internalField.metaPath.getObject());\n\t\t\t\treturn (\n\t\t\t\t\t<Link\n\t\t\t\t\t\tid={internalField.displayStyleId}\n\t\t\t\t\t\tvisible={internalField.displayVisible}\n\t\t\t\t\t\ttext={internalField.text}\n\t\t\t\t\t\tpress={linkPress as unknown as (oEvent: Link$PressEvent) => void}\n\t\t\t\t\t\tariaLabelledBy={internalField.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\t\t\temptyIndicatorMode={internalField.emptyIndicatorMode}\n\t\t\t\t\t\tclass=\"sapMTextRenderWhitespaceWrap\"\n\t\t\t\t\t\taccessibleRole={LinkAccessibleRole.Button}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\tcase UIAnnotationTypes.DataFieldWithUrl:\n\t\t\t\tconst html5LinkTarget = internalField.property.annotations.HTML5?.LinkTarget;\n\t\t\t\tinternalField.text = DisplayStyle.computeTextWithWhiteSpace(internalField);\n\t\t\t\ticonUrl = (internalField.convertedMetaPath as DataFieldTypes).IconUrl\n\t\t\t\t\t? compileExpression(\n\t\t\t\t\t\t\tgetExpressionFromAnnotation(\n\t\t\t\t\t\t\t\t(internalField.convertedMetaPath as DataFieldTypes).IconUrl as unknown as PropertyAnnotationValue<String>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t  )\n\t\t\t\t\t: undefined;\n\t\t\t\tconst linkBinding = getExpressionFromAnnotation(\n\t\t\t\t\t(internalField.convertedMetaPath as DataFieldWithUrl).Url as unknown as PropertyAnnotationValue<String>\n\t\t\t\t);\n\t\t\t\tlinkUrl = compileExpression(linkBinding);\n\t\t\t\tlinkActived = compileExpression(not(equal(linkBinding, \"\")));\n\t\t\t\tlinkTarget = html5LinkTarget && (html5LinkTarget.toString() as LinkTarget);\n\t\t}\n\n\t\tif (\n\t\t\tinternalField.property.annotations?.Communication?.IsEmailAddress ||\n\t\t\tinternalField.property.annotations?.Communication?.IsPhoneNumber\n\t\t) {\n\t\t\tconst linkIsEmailAddress = internalField.property.annotations.Communication?.IsEmailAddress !== undefined;\n\t\t\tconst linkIsPhoneNumber = internalField.property.annotations.Communication?.IsPhoneNumber !== undefined;\n\t\t\tconst propertyValueBinding = FieldTemplating.getValueBinding(internalField.dataModelPath, {});\n\t\t\tconst mailBlockId = internalField.displayStyleId ? internalField.displayStyleId : `mailBlock${uid()}`;\n\t\t\tif (linkIsEmailAddress) {\n\t\t\t\tlinkUrl = `mailto:${propertyValueBinding}`;\n\t\t\t\treturn (\n\t\t\t\t\t<Email\n\t\t\t\t\t\tid={mailBlockId}\n\t\t\t\t\t\tvisible={internalField.displayVisible}\n\t\t\t\t\t\ttext={internalField.text}\n\t\t\t\t\t\tmail={propertyValueBinding}\n\t\t\t\t\t\tariaLabelledBy={internalField.ariaLabelledBy ? internalField.ariaLabelledBy : undefined}\n\t\t\t\t\t\temptyIndicatorMode={internalField.emptyIndicatorMode}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (linkIsPhoneNumber) {\n\t\t\t\tlinkUrl = `tel:${propertyValueBinding}`;\n\t\t\t\treturn (\n\t\t\t\t\t<Link\n\t\t\t\t\t\tid={internalField.displayStyleId}\n\t\t\t\t\t\tcore:require=\"{WSR: 'sap/base/strings/whitespaceReplacer'}\"\n\t\t\t\t\t\tvisible={internalField.displayVisible}\n\t\t\t\t\t\ttext={DisplayStyle.computeTextWithWhiteSpace(internalField)}\n\t\t\t\t\t\thref={linkUrl}\n\t\t\t\t\t\tenabled={linkActived}\n\t\t\t\t\t\tariaLabelledBy={internalField.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\t\t\temptyIndicatorMode={internalField.emptyIndicatorMode}\n\t\t\t\t\t\tclass=\"sapMTextRenderWhitespaceWrap\"\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (iconUrl) {\n\t\t\treturn (\n\t\t\t\t<ObjectStatus\n\t\t\t\t\tcore:require=\"{WSR: 'sap/base/strings/whitespaceReplacer', FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}\"\n\t\t\t\t\tid={internalField.displayStyleId}\n\t\t\t\t\ticon={iconUrl}\n\t\t\t\t\tvisible={internalField.displayVisible}\n\t\t\t\t\ttext={internalField.text}\n\t\t\t\t\tpress={\"FieldRuntime.openExternalLink\" as unknown as (oEvent: Event) => void}\n\t\t\t\t\tactive={linkActived}\n\t\t\t\t\temptyIndicatorMode={internalField.emptyIndicatorMode}\n\t\t\t\t\tariaLabelledBy={internalField.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcustomData: <CustomData key={\"url\"} value={linkUrl} />\n\t\t\t\t\t}}\n\t\t\t\t</ObjectStatus>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<Link\n\t\t\t\t\tid={internalField.displayStyleId}\n\t\t\t\t\tcore:require=\"{WSR: 'sap/base/strings/whitespaceReplacer'}\"\n\t\t\t\t\tvisible={internalField.displayVisible}\n\t\t\t\t\ttext={internalField.text}\n\t\t\t\t\thref={linkUrl}\n\t\t\t\t\tenabled={linkActived}\n\t\t\t\t\ttarget={linkTarget === undefined ? \"_top\" : linkTarget}\n\t\t\t\t\twrapping={internalField.wrap === undefined ? true : internalField.wrap}\n\t\t\t\t\tariaLabelledBy={internalField.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\t\temptyIndicatorMode={internalField.emptyIndicatorMode}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t},\n\n\t/**\n\t * Find the foreign key of target entity which quick view Facets we want to display.\n\t * @param internalField Reference to the current internal field instance\n\t * @returns The key of the target entity\n\t */\n\tgetForeignKeyForCustomData(internalField: FieldBlockProperties): string | undefined {\n\t\tconst relativePathToQuickViewEntity = QuickView.getRelativePathToQuickViewEntity(internalField.dataModelPath);\n\t\tif (relativePathToQuickViewEntity) {\n\t\t\tconst targetNavigationProperties = internalField.dataModelPath.targetEntityType.navigationProperties;\n\t\t\tconst targetNavProp = targetNavigationProperties.find((navProp) => navProp.name === relativePathToQuickViewEntity);\n\t\t\tconst refConstraint = targetNavProp?.referentialConstraint;\n\t\t\tconst key = refConstraint?.length && typeof refConstraint[0] === \"object\" && refConstraint[0].targetProperty;\n\t\t\tconst keyToFetch = key ? `${relativePathToQuickViewEntity}/${key}` : undefined;\n\t\t\tif (keyToFetch !== undefined) {\n\t\t\t\treturn keyToFetch;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t},\n\n\t/**\n\t * Generates the check expression for displaying or not a quickview.\n\t * @param internalField Reference to the current internal field instance\n\t * @returns The key of the target entity\n\t */\n\tgetForeignKeyValueExpression(internalField: FieldBlockProperties): string {\n\t\tconst foreignKeyRelativePath = QuickView.getRelativePathToQuickViewEntity(internalField.dataModelPath)\n\t\t\t? this.getForeignKeyForCustomData(internalField)\n\t\t\t: undefined;\n\t\tconst expression: BindingToolkitExpression<string> = {\n\t\t\tpath: `${foreignKeyRelativePath}`,\n\t\t\t_type: \"PathInModel\"\n\t\t};\n\t\treturn `${compileExpression(ifElse(equal(foreignKeyRelativePath, undefined), constant(true), not(equal(null, expression))))}`;\n\t},\n\n\t/**\n\t * Generates the StandardLinkWithQuickView template.\n\t * @param internalField Reference to the current internal field instance\n\t * @param text The text to display\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetStandardLinkWithQuickViewTemplate(internalField: FieldBlockProperties, text: CompiledBindingToolkitExpression): string {\n\t\treturn (\n\t\t\t<Link\n\t\t\t\tid={internalField.displayStyleId}\n\t\t\t\tcore:require=\"{FieldRuntimeHelper: 'sap/fe/macros/field/FieldRuntimeHelper', WSR: 'sap/base/strings/whitespaceReplacer'}\"\n\t\t\t\ttext={text}\n\t\t\t\tvisible={internalField.displayVisible}\n\t\t\t\twrapping={internalField.wrap === undefined ? true : internalField.wrap}\n\t\t\t\tpress={\"FieldRuntimeHelper.pressLink\" as unknown as (oEvent: Link$PressEvent) => void}\n\t\t\t\tariaLabelledBy={internalField.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\temptyIndicatorMode={internalField.emptyIndicatorMode}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [<CustomData key={\"loadValue\"} value={internalField.valueAsStringBindingExpression} />],\n\t\t\t\t\tdependents: DisplayStyle.getMdcLinkForQuickView(internalField)\n\t\t\t\t}}\n\t\t\t</Link>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the ConditionalLinkTemplate template.\n\t * @param internalField Reference to the current internal field instance\n\t * @param condition Condition to display a Link or a Text\n\t * @param text The text to display\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetConditionalLinkWithQuickViewTemplate(\n\t\tinternalField: FieldBlockProperties,\n\t\tcondition: CompiledBindingToolkitExpression,\n\t\ttext: CompiledBindingToolkitExpression\n\t): string {\n\t\treturn (\n\t\t\t<TextLink\n\t\t\t\tid={internalField.displayStyleId}\n\t\t\t\tcore:require=\"{FieldRuntimeHelper: 'sap/fe/macros/field/FieldRuntimeHelper', ValueFormatter: 'sap/fe/core/formatters/ValueFormatter', WSR: 'sap/base/strings/whitespaceReplacer'}\"\n\t\t\t\tshowAsLink={condition as unknown as boolean}\n\t\t\t\tsemanticObject={internalField.semanticObject}\n\t\t\t\ttext={text}\n\t\t\t\twrapping={internalField.wrap === undefined ? true : internalField.wrap}\n\t\t\t\tpress={\"FieldRuntimeHelper.pressLink\" as unknown as (oEvent: Link$PressEvent) => void}\n\t\t\t\tariaLabelledBy={internalField.ariaLabelledBy}\n\t\t\t\temptyIndicatorMode={internalField.emptyIndicatorMode}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [<CustomData key={\"loadValue\"} value={internalField.valueAsStringBindingExpression} />],\n\t\t\t\t\tdependents: DisplayStyle.getMdcLinkForQuickView(internalField)\n\t\t\t\t}}\n\t\t\t</TextLink>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the ConditionalLinkTemplate template.\n\t * @param internalField Reference to the current internal field instance\n\t * @param condition Condition to display a Link or a Text\n\t * @param contentTrue The Control to display in case condition is true\n\t * @param contentFalse The Control to display in case condition is false\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetConditionalWrapperForQuickViewTemplate(\n\t\tinternalField: FieldBlockProperties,\n\t\tcondition: string,\n\t\tcontentTrue: string,\n\t\tcontentFalse: string\n\t): string {\n\t\treturn (\n\t\t\t<ConditionalWrapper visible={internalField.displayVisible} condition={condition as unknown as boolean}>\n\t\t\t\t{{\n\t\t\t\t\tcontentTrue: contentTrue,\n\t\t\t\t\tcontentFalse: contentFalse\n\t\t\t\t}}\n\t\t\t</ConditionalWrapper>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the LinkWithQuickView template.\n\t * @param internalField Reference to the current internal field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetLinkWithQuickViewTemplate(internalField: FieldBlockProperties): string {\n\t\tconst text = internalField.formatOptions.retrieveTextFromValueList\n\t\t\t? internalField.textFromValueList\n\t\t\t: DisplayStyle.computeTextWithWhiteSpace(internalField);\n\t\tconst condition = this.getQuickViewCondition(internalField);\n\t\tif (condition === \"true\") {\n\t\t\treturn this.getStandardLinkWithQuickViewTemplate(internalField, text);\n\t\t}\n\t\treturn this.getConditionalLinkWithQuickViewTemplate(internalField, condition, text);\n\t},\n\n\t/**\n\t * Generates the Text template.\n\t * @param internalField Reference to the current internal field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetTextTemplate(internalField: FieldBlockProperties): string {\n\t\tif (internalField.formatOptions.isAnalytics && internalField.hasUnitOrCurrency) {\n\t\t\tconst content = DisplayStyle.getCurrencyOrUnitControl(internalField, <Text text={internalField.text} textAlign=\"End\"></Text>);\n\t\t\treturn (\n\t\t\t\t<ConditionalWrapper\n\t\t\t\t\tvisible={internalField.displayVisible}\n\t\t\t\t\tcondition={internalField.hasValidAnalyticalCurrencyOrUnit as unknown as boolean}\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcontentTrue: (\n\t\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\t\tid={internalField.displayStyleId}\n\t\t\t\t\t\t\t\ttext={internalField.text}\n\t\t\t\t\t\t\t\temptyIndicatorMode={internalField.emptyIndicatorMode}\n\t\t\t\t\t\t\t\trenderWhitespace=\"true\"\n\t\t\t\t\t\t\t\twrapping={internalField.wrap}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t),\n\t\t\t\t\t\tcontentFalse: content\n\t\t\t\t\t}}\n\t\t\t\t</ConditionalWrapper>\n\t\t\t);\n\t\t} else if (internalField.formatOptions.retrieveTextFromValueList) {\n\t\t\treturn (\n\t\t\t\t<Text\n\t\t\t\t\tid={internalField.displayStyleId}\n\t\t\t\t\tvisible={internalField.displayVisible}\n\t\t\t\t\ttext={internalField.textFromValueList}\n\t\t\t\t\tcore:require=\"{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}\"\n\t\t\t\t\temptyIndicatorMode={internalField.emptyIndicatorMode}\n\t\t\t\t\trenderWhitespace=\"true\"\n\t\t\t\t/>\n\t\t\t);\n\t\t} else {\n\t\t\t// When having a TextArrangement with TextOnly, RTA can only find the binding for the text, but not for the field.\n\t\t\t// To prevent that such a field can be added twice via RTA, we need to provide the field binding as a dummy custom binding.\n\t\t\tlet customdata;\n\t\t\tif (internalField.formatOptions.displayMode === \"Description\" && internalField.valueAsStringBindingExpression) {\n\t\t\t\tcustomdata = <CustomData key=\"fieldBinding\" value={internalField.valueAsStringBindingExpression} />;\n\t\t\t}\n\t\t\treturn (\n\t\t\t\t<Text\n\t\t\t\t\tid={internalField.displayStyleId}\n\t\t\t\t\tvisible={internalField.displayVisible}\n\t\t\t\t\ttext={internalField.text}\n\t\t\t\t\twrapping={internalField.wrap}\n\t\t\t\t\temptyIndicatorMode={internalField.emptyIndicatorMode}\n\t\t\t\t\trenderWhitespace=\"true\"\n\t\t\t\t>\n\t\t\t\t\t{customdata}\n\t\t\t\t</Text>\n\t\t\t);\n\t\t}\n\t},\n\n\t/**\n\t * Generates the ObjectIdentifier template.\n\t * @param internalField Reference to the current internal field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetObjectIdentifier(internalField: FieldBlockProperties): string {\n\t\tlet dependents: MdcLink | undefined;\n\t\tlet titleActive;\n\t\tif (internalField.hasQuickView) {\n\t\t\ttitleActive = this.getQuickViewCondition(internalField);\n\t\t\tdependents = DisplayStyle.getMdcLinkForQuickView(internalField);\n\t\t} else {\n\t\t\ttitleActive = false;\n\t\t}\n\n\t\tlet identifier = (\n\t\t\t<ObjectIdentifier\n\t\t\t\tcore:require=\"{FieldRuntimeHelper: 'sap/fe/macros/field/FieldRuntimeHelper'}\"\n\t\t\t\tid={internalField.displayStyleId}\n\t\t\t\ttitle={internalField.identifierTitle}\n\t\t\t\ttext={internalField.identifierText}\n\t\t\t\ttitleActive={titleActive}\n\t\t\t\ttitlePress={\"FieldRuntimeHelper.pressLink\" as unknown as (oEvent: ObjectIdentifier$TitlePressEvent) => void}\n\t\t\t\tariaLabelledBy={internalField.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\temptyIndicatorMode={internalField.emptyIndicatorMode}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [<CustomData key={\"loadValue\"} value={internalField.valueAsStringBindingExpression} />],\n\t\t\t\t\tdependents: dependents\n\t\t\t\t}}\n\t\t\t</ObjectIdentifier>\n\t\t);\n\t\tif (internalField.hasSituationsIndicator) {\n\t\t\tidentifier = (\n\t\t\t\t<HBox alignItems=\"Center\" justifyContent=\"SpaceBetween\" width=\"100%\">\n\t\t\t\t\t{identifier}\n\t\t\t\t\t<SituationsIndicator\n\t\t\t\t\t\tcontextPath={internalField.contextPath.getPath()}\n\t\t\t\t\t\tpropertyPath={internalField.situationsIndicatorPropertyPath}\n\t\t\t\t\t/>\n\t\t\t\t</HBox>\n\t\t\t);\n\t\t}\n\t\tif (internalField.showErrorIndicator && internalField.showErrorObjectStatus) {\n\t\t\tidentifier = (\n\t\t\t\t<VBox>\n\t\t\t\t\t{identifier}\n\t\t\t\t\t<ObjectStatus\n\t\t\t\t\t\tvisible={internalField.showErrorObjectStatus}\n\t\t\t\t\t\tclass=\"sapUiSmallMarginBottom\"\n\t\t\t\t\t\ttext=\"{sap.fe.i18n>Contains_Errors}\"\n\t\t\t\t\t\tstate=\"Error\"\n\t\t\t\t\t/>\n\t\t\t\t</VBox>\n\t\t\t);\n\t\t}\n\n\t\treturn identifier;\n\t},\n\n\t/**\n\t * Generates the ObjectStatus template.\n\t * @param internalField Reference to the current internal field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetObjectStatus(internalField: FieldBlockProperties): string {\n\t\tlet objectStatus;\n\t\tlet requiredHelper = {\n\t\t\t\"core:require\": \"{FieldRuntimeHelper: 'sap/fe/macros/field/FieldRuntimeHelper'}\"\n\t\t};\n\t\tconst dataModelObjectPath = MetaModelConverter.getInvolvedDataModelObjects<DataField>(\n\t\t\tinternalField.metaPath,\n\t\t\tinternalField.contextPath\n\t\t);\n\t\tconst enhancedValueDataModelPath = enhanceDataModelPath<Property>(\n\t\t\tdataModelObjectPath,\n\t\t\tdataModelObjectPath.targetObject?.Value.path\n\t\t);\n\t\tconst condition = hasValidAnalyticalCurrencyOrUnit(enhancedValueDataModelPath);\n\t\tconst convertedDataField = MetaModelConverter.getInvolvedDataModelObjects<DataPointType>(internalField.metaPath);\n\t\tconst criticalityIcon = buildExpressionForCriticalityIcon(convertedDataField);\n\t\tconst state = buildExpressionForCriticalityColor(convertedDataField);\n\n\t\tconst linkUrl = (internalField.convertedMetaPath as DataFieldWithUrl).Url\n\t\t\t? compileExpression(\n\t\t\t\t\tgetExpressionFromAnnotation(\n\t\t\t\t\t\t(internalField.convertedMetaPath as DataFieldWithUrl).Url as unknown as PropertyAnnotationValue<String>\n\t\t\t\t\t)\n\t\t\t  )\n\t\t\t: undefined;\n\n\t\tif (internalField.formatOptions.isAnalytics && internalField.hasUnitOrCurrency) {\n\t\t\tconst content = DisplayStyle.getCurrencyOrUnitControl(internalField, <Text text={internalField.text} textAlign=\"End\"></Text>);\n\t\t\tobjectStatus = (\n\t\t\t\t<ConditionalWrapper id={internalField.displayStyleId} condition={condition as unknown as boolean}>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcontentTrue: (\n\t\t\t\t\t\t\t<ObjectStatus\n\t\t\t\t\t\t\t\ticon={criticalityIcon}\n\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\tvisible={internalField.displayVisible}\n\t\t\t\t\t\t\t\ttext={internalField.text}\n\t\t\t\t\t\t\t\temptyIndicatorMode={internalField.emptyIndicatorMode}\n\t\t\t\t\t\t\t\tclass=\"sapMTextRenderWhitespaceWrap\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t),\n\t\t\t\t\t\tcontentFalse: content\n\t\t\t\t\t}}\n\t\t\t\t</ConditionalWrapper>\n\t\t\t);\n\t\t} else {\n\t\t\tlet dependents: MdcLink | undefined;\n\t\t\tlet active = false;\n\t\t\tlet isActive;\n\t\t\tlet pressAction;\n\t\t\tif (internalField.hasQuickView) {\n\t\t\t\tdependents = DisplayStyle.getMdcLinkForQuickView(internalField);\n\t\t\t\tisActive = this.getQuickViewCondition(internalField);\n\t\t\t\tpressAction = \"FieldRuntimeHelper.pressLink\";\n\t\t\t}\n\t\t\tif (linkUrl) {\n\t\t\t\tactive = true;\n\t\t\t\trequiredHelper = {\n\t\t\t\t\t\"core:require\": \"{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}\"\n\t\t\t\t};\n\t\t\t\tpressAction = \"FieldRuntime.openExternalLink\";\n\t\t\t}\n\n\t\t\tobjectStatus = (\n\t\t\t\t<ObjectStatus\n\t\t\t\t\tid={internalField.displayStyleId}\n\t\t\t\t\ticon={criticalityIcon}\n\t\t\t\t\tstate={state}\n\t\t\t\t\ttext={internalField.text}\n\t\t\t\t\tvisible={internalField.displayVisible}\n\t\t\t\t\temptyIndicatorMode={internalField.emptyIndicatorMode}\n\t\t\t\t\t{...requiredHelper}\n\t\t\t\t\tactive={isActive ? isActive : active}\n\t\t\t\t\tpress={pressAction as unknown as (oEvent: Event) => void}\n\t\t\t\t\tariaLabelledBy={internalField.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcustomData: [\n\t\t\t\t\t\t\t<CustomData key={\"loadValue\"} value={internalField.valueAsStringBindingExpression} />,\n\t\t\t\t\t\t\t<CustomData key={\"url\"} value={linkUrl} />\n\t\t\t\t\t\t],\n\t\t\t\t\t\tdependents: dependents\n\t\t\t\t\t}}\n\t\t\t\t</ObjectStatus>\n\t\t\t);\n\t\t}\n\n\t\treturn objectStatus;\n\t},\n\n\tgetMdcLinkForQuickView(internalField: FieldBlockProperties): MdcLink {\n\t\treturn new QuickView(\n\t\t\tinternalField.dataModelPath,\n\t\t\tinternalField.metaPath.getPath(),\n\t\t\tinternalField.contextPath.getPath(),\n\t\t\tinternalField.semanticObject\n\t\t).createContent() as MdcLink;\n\t},\n\n\t/**\n\t * Generates the LabelSemantickey template.\n\t * @param internalField Reference to the current internal field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetLabelSemanticKey(internalField: FieldBlockProperties): string {\n\t\tconst contentTrue = (\n\t\t\t<Link\n\t\t\t\ttext={internalField.text}\n\t\t\t\twrapping=\"true\"\n\t\t\t\tcore:require=\"{FieldRuntimeHelper: 'sap/fe/macros/field/FieldRuntimeHelper'}\"\n\t\t\t\tpress={\"FieldRuntimeHelper.pressLink\" as unknown as (oEvent: Link$PressEvent) => void}\n\t\t\t\tariaLabelledBy={internalField.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\temptyIndicatorMode={internalField.emptyIndicatorMode}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [<CustomData key={\"loadValue\"} value={internalField.valueAsStringBindingExpression} />],\n\t\t\t\t\tdependents: DisplayStyle.getMdcLinkForQuickView(internalField)\n\t\t\t\t}}\n\t\t\t</Link>\n\t\t);\n\t\tconst contentFalse = (\n\t\t\t<Label\n\t\t\t\tid={internalField.displayStyleId}\n\t\t\t\tvisible={internalField.displayVisible}\n\t\t\t\ttext={internalField.identifierTitle}\n\t\t\t\tdesign=\"Bold\"\n\t\t\t/>\n\t\t);\n\t\tif (internalField.hasQuickView) {\n\t\t\tconst hasQuickview = this.getQuickViewCondition(internalField);\n\t\t\tif (hasQuickview === \"true\") {\n\t\t\t\treturn contentTrue;\n\t\t\t} else {\n\t\t\t\treturn this.getConditionalWrapperForQuickViewTemplate(internalField, hasQuickview as string, contentTrue, contentFalse);\n\t\t\t}\n\t\t}\n\t\treturn (\n\t\t\t<Label\n\t\t\t\tid={internalField.displayStyleId}\n\t\t\t\tvisible={internalField.displayVisible}\n\t\t\t\ttext={internalField.identifierTitle}\n\t\t\t\tdesign=\"Bold\"\n\t\t\t/>\n\t\t);\n\t},\n\t/**\n\t * Gets the template for the semantic key with draft indicator.\n\t * @param semanticKeyTemplate The template result without draft indicator\n\t * @param internalField Reference to the current internal field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\taddDraftIndicator(semanticKeyTemplate: string, internalField: FieldBlockProperties): string {\n\t\tif (!internalField.formatOptions.fieldGroupDraftIndicatorPropertyPath) {\n\t\t\t// if the draftIndicator is not handled at the fieldGroup level\n\t\t\t//TODO could this be a boolean no draftIndicator\n\t\t\tsemanticKeyTemplate = (\n\t\t\t\t<FormElementWrapper visible={internalField.displayVisible}>\n\t\t\t\t\t<VBox class={FieldHelper.getMarginClass(internalField.formatOptions.compactSemanticKey)}>\n\t\t\t\t\t\t{semanticKeyTemplate}\n\t\t\t\t\t\t<DraftIndicator\n\t\t\t\t\t\t\tdraftIndicatorType={ObjectMarkerVisibility.IconAndText}\n\t\t\t\t\t\t\tcontextPath={internalField.contextPath.getPath()}\n\t\t\t\t\t\t\tvisible={internalField.draftIndicatorVisible}\n\t\t\t\t\t\t\tariaLabelledBy={internalField.ariaLabelledBy ? internalField.ariaLabelledBy : []}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</VBox>\n\t\t\t\t</FormElementWrapper>\n\t\t\t);\n\t\t}\n\t\treturn semanticKeyTemplate;\n\t},\n\n\t/**\n\t * Computes the text property with the appropriate white space handling.\n\t * @param internalField Reference to the current internal field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tcomputeTextWithWhiteSpace(internalField: FieldBlockProperties): CompiledBindingToolkitExpression {\n\t\tconst text = FieldTemplating.getTextBinding(internalField.dataModelPath, internalField.formatOptions, true);\n\t\treturn isPathInModelExpression(text) || typeof text === \"string\"\n\t\t\t? compileExpression(formatResult([text], \"WSR\"))\n\t\t\t: compileExpression(text);\n\t},\n\t/**\n\t * Gets the condition for having an active link that opens the quick view.\n\t * @param internalField\n\t * @returns A compile binding expression for the condition.\n\t */\n\tgetQuickViewCondition(internalField: FieldBlockProperties): CompiledBindingToolkitExpression {\n\t\tswitch (internalField.quickViewType) {\n\t\t\tcase \"Facets\":\n\t\t\t\t//there is quick viewFacets annotation only then we check if the navigation is reachable\n\t\t\t\treturn this.getForeignKeyValueExpression(internalField);\n\n\t\t\tcase \"SemanticLinks\":\n\t\t\t\tif (internalField.dynamicSemanticObjects) {\n\t\t\t\t\tconst listOfDynamicSemanticObjects: BindingToolkitExpression<string>[] = [];\n\t\t\t\t\tif (internalField.semanticObject) {\n\t\t\t\t\t\t// If we see a dynamic expression with a formatter, we return false. The condition will be resolved later in TextLink control.\n\t\t\t\t\t\treturn compileExpression(constant(false));\n\t\t\t\t\t}\n\t\t\t\t\tfor (const semanticObjectExpression of internalField.dynamicSemanticObjects) {\n\t\t\t\t\t\tif (semanticObjectExpression._type === \"PathInModel\" || semanticObjectExpression._type === \"Constant\") {\n\t\t\t\t\t\t\tlistOfDynamicSemanticObjects.push(semanticObjectExpression);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// If we see a dynamic expression ($edmJson), we return true.\n\t\t\t\t\t\t\treturn compileExpression(constant(true));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst semanticObjectsPath = [\n\t\t\t\t\t\tpathInModel<Context[]>(\"/semanticObjects\", \"internal\") as BindingToolkitExpression<string>\n\t\t\t\t\t].concat(listOfDynamicSemanticObjects);\n\t\t\t\t\treturn compileExpression(formatResult(semanticObjectsPath, valueFormatters.hasSemanticObjects));\n\t\t\t\t}\n\t\t\t\treturn \"true\";\n\t\t\tdefault:\n\t\t\t\t// \"facetsAndSemanticLinks\"\n\t\t\t\t// if there is both facets and semantic links, we do not check if the navigation is reachable\n\t\t\t\treturn \"true\";\n\t\t}\n\t},\n\n\t/**\n\t * Entry point for further templating processings.\n\t * @param internalField Reference to the current internal field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetTemplate: (internalField: FieldBlockProperties): string => {\n\t\tlet innerFieldContent;\n\t\tswitch (internalField.displayStyle as DisplayStyleType) {\n\t\t\tcase \"AmountWithCurrency\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getAmountWithCurrencyTemplate(internalField);\n\t\t\t\tbreak;\n\t\t\tcase \"Avatar\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getAvatarTemplate(internalField);\n\t\t\t\tbreak;\n\t\t\tcase \"Button\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getButtonTemplate(internalField);\n\t\t\t\tbreak;\n\t\t\tcase \"Contact\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getContactTemplate(internalField);\n\t\t\t\tbreak;\n\t\t\tcase \"DataPoint\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getDataPointTemplate(internalField);\n\t\t\t\tbreak;\n\t\t\tcase \"ExpandableText\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getExpandableText(internalField);\n\t\t\t\tbreak;\n\t\t\tcase \"File\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getFileTemplate(internalField);\n\t\t\t\tbreak;\n\t\t\tcase \"Link\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getLinkTemplate(internalField);\n\t\t\t\tbreak;\n\t\t\tcase \"LinkWithQuickView\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getLinkWithQuickViewTemplate(internalField);\n\t\t\t\tbreak;\n\t\t\tcase \"ObjectIdentifier\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getObjectIdentifier(internalField);\n\t\t\t\tbreak;\n\t\t\tcase \"ObjectStatus\": {\n\t\t\t\tinnerFieldContent = DisplayStyle.getObjectStatus(internalField);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"LabelSemanticKey\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getLabelSemanticKey(internalField);\n\t\t\t\tbreak;\n\t\t\tcase \"Text\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getTextTemplate(internalField);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tinnerFieldContent = \"\";\n\t\t}\n\t\tif (internalField.addDraftIndicator && innerFieldContent) {\n\t\t\tinnerFieldContent = DisplayStyle.addDraftIndicator(innerFieldContent, internalField);\n\t\t}\n\n\t\treturn innerFieldContent;\n\t}\n};\n\nexport default DisplayStyle;\n"],"mappings":"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","ignoreList":[]}