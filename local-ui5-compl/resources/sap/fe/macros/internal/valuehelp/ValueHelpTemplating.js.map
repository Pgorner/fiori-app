{"version":3,"file":"ValueHelpTemplating.js","names":["getValueHelpTableDisplayMode","propertyPath","isValueHelpWithFixedValues","sDisplayMode","getDisplayMode","oTextAnnotation","targetObject","annotations","Common","Text","oTextArrangementAnnotation","UI","TextArrangement","toString","isPathAnnotationExpression","path","_exports","getDelegateConfiguration","conditionModelName","originalPropertyPath","requestGroupId","useMultiValueField","arguments","length","undefined","isUnitValueHelp","delegateConfiguration","name","payload","conditionModel","qualifiers","valueHelpQualifier","getDelegateConfigurationForDefineConditions","isDefineConditionValueHelp","compileExpression","generateID","sFlexId","sIdPrefix","sOriginalPropertyName","sPropertyName","sProperty","generate","requiresValidation","target","hasValueHelpWithFixedValues","hasValueListForValidation","hasValueHelp","isUnit","isCurrency","isGuid","useCaseSensitiveFilterRequests","oDataModelPath","aEntityContainerFilterFunctions","filterFunctions","targetEntitySet","Capabilities","FilterFunctions","includes","isSemanticDateRange","targetProperty","targetRestrictions","checkFilterExpressionRestrictions","hasDateType","shouldShowConditionPanel","oContextPath","contextLocation","getColumnDataProperty","sValueListProperty","textAnnotation","valueOf","getColumnDataPropertyType","valueListPropertyType","textArrangement","getColumnHAlign","property","propertyType","isProperty","type","isSemanticKey","FieldHelper","getPropertyAlignment","textAlignMode","getGrowingFormatter","formatResult","pathInModel","constant","additionalValueFormatter","getGrowing","getValueHelpTemplate","metaPath","vhContent","dataModelObjectPath","getInvolvedDataModelObjects","contextPath","originalProperty","enhanceDataModelPath","valueHelpId","_flexId","idPrefix","getTargetObjectPath","dialogTitle","getLabel","shouldValidateInput","filterFieldValueHelp","showConditionPanel","equal","valueHelpDelegateConfiguration","shouldUseCaseSensitiveFilter","map","str","isValueListForValidation","isValueListWithFixedValues","customData","_jsx","CustomData","value","push","getExpressionFromAnnotation","ValueListForValidation","ValueHelp","delegate","id","validateInput","children","typeahead","Popover","MTable","caseSensitive","useAsValueHelp","dialog","Dialog","title","Conditions"],"sources":["./ValueHelpTemplating.tsx"],"sourcesContent":["import type { ActionParameter, EntitySet, Property, PropertyAnnotationValue } from \"@sap-ux/vocabularies-types\";\nimport type { CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { compileExpression, constant, equal, formatResult, getExpressionFromAnnotation, pathInModel } from \"sap/fe/base/BindingToolkit\";\nimport { generate } from \"sap/fe/core/helpers/StableIdHelper\";\nimport { isPathAnnotationExpression, isProperty } from \"sap/fe/core/helpers/TypeGuards\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { checkFilterExpressionRestrictions, enhanceDataModelPath, getTargetObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport {\n\tgetLabel,\n\thasDateType,\n\thasValueHelp,\n\thasValueHelpWithFixedValues,\n\thasValueListForValidation,\n\tisCurrency,\n\tisGuid,\n\tisSemanticKey,\n\tisUnit\n} from \"sap/fe/core/templating/PropertyHelper\";\nimport { getDisplayMode } from \"sap/fe/core/templating/UIFormatters\";\nimport FieldHelper from \"sap/fe/macros/field/FieldHelper\";\n\nimport type { StrictPropertiesOf } from \"sap/fe/base/ClassSupport\";\nimport { getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport type ValueHelpBlock from \"sap/fe/macros/ValueHelp\";\nimport additionalValueFormatter from \"sap/fe/macros/internal/valuehelp/AdditionalValueFormatter\";\nimport type { ValueHelpPayload } from \"sap/fe/macros/internal/valuehelp/ValueListHelper\";\nimport type Control from \"sap/ui/core/Control\";\nimport CustomData from \"sap/ui/core/CustomData\";\nimport ValueHelp from \"sap/ui/mdc/ValueHelp\";\nimport Dialog from \"sap/ui/mdc/valuehelp/Dialog\";\nimport Popover from \"sap/ui/mdc/valuehelp/Popover\";\nimport Conditions from \"sap/ui/mdc/valuehelp/content/Conditions\";\nimport MTable from \"sap/ui/mdc/valuehelp/content/MTable\";\nimport type Context from \"sap/ui/model/Context\";\n\n/**\n * Retrieve the displayMode for the value help.\n * The main rule is that if a property is used in a VHTable then we don't want to display the text arrangement directly.\n * @param propertyPath The current property\n * @param isValueHelpWithFixedValues The value help is a drop-down list\n * @returns The target displayMode\n */\nexport const getValueHelpTableDisplayMode = function (\n\tpropertyPath: DataModelObjectPath<Property>,\n\tisValueHelpWithFixedValues: boolean\n): string {\n\tconst sDisplayMode = getDisplayMode(propertyPath);\n\tconst oTextAnnotation = propertyPath.targetObject?.annotations?.Common?.Text;\n\tconst oTextArrangementAnnotation = typeof oTextAnnotation !== \"string\" && oTextAnnotation?.annotations?.UI?.TextArrangement?.toString();\n\tif (isValueHelpWithFixedValues) {\n\t\treturn oTextAnnotation && isPathAnnotationExpression(oTextAnnotation) && oTextAnnotation.path ? sDisplayMode : \"Value\";\n\t} else {\n\t\t// Only explicit defined TextArrangements in a Value Help with Dialog are considered\n\t\treturn oTextArrangementAnnotation ? sDisplayMode : \"Value\";\n\t}\n};\n\n/**\n * Method to return delegate property of Value Help.\n * @param propertyPath The current property path\n * @param conditionModelName Condition model of the Value Help\n * @param originalPropertyPath The original property path\n * @param requestGroupId The requestGroupId to use for requests\n * @param useMultiValueField If true the value help is for a multi value Field\n * @param toJson If true the result is returned as a string (only for ovp)\n * @returns The expression needed to configure the delegate\n */\nexport const getDelegateConfiguration = function (\n\tpropertyPath: string,\n\tconditionModelName: string,\n\toriginalPropertyPath: string,\n\trequestGroupId?: string,\n\tuseMultiValueField = false\n): { name: string; payload: ValueHelpPayload } | string {\n\tconst isUnitValueHelp = propertyPath !== originalPropertyPath;\n\tconst delegateConfiguration: { name: string; payload: ValueHelpPayload } = {\n\t\tname: \"sap/fe/macros/valuehelp/ValueHelpDelegate\",\n\t\tpayload: {\n\t\t\tpropertyPath,\n\t\t\tisUnitValueHelp,\n\t\t\tconditionModel: conditionModelName,\n\t\t\trequestGroupId,\n\t\t\tuseMultiValueField,\n\t\t\tqualifiers: {},\n\t\t\tvalueHelpQualifier: \"\"\n\t\t}\n\t};\n\treturn delegateConfiguration; // for some reason \"qualifiers: {}\" is ignored here\n};\n\n/**\n * Method to return delegate property of Value Help for define conditions panel.\n * @param propertyPath The current property path\n * @returns The expression needed to configure the delegate\n */\nexport const getDelegateConfigurationForDefineConditions = function (propertyPath: string): CompiledBindingToolkitExpression {\n\tconst delegateConfiguration: { name: string; payload: ValueHelpPayload } = {\n\t\tname: \"sap/fe/macros/valuehelp/ValueHelpDelegate\",\n\t\tpayload: {\n\t\t\tpropertyPath,\n\t\t\tisDefineConditionValueHelp: true,\n\t\t\tqualifiers: {},\n\t\t\tvalueHelpQualifier: \"\"\n\t\t}\n\t};\n\treturn compileExpression(delegateConfiguration);\n};\n\n/**\n * Method to generate the ID for Value Help.\n * @param sFlexId Flex ID of the current object\n * @param sIdPrefix Prefix for the ValueHelp ID\n * @param sOriginalPropertyName Name of the property\n * @param sPropertyName Name of the ValueHelp Property\n * @returns The Id generated for the ValueHelp\n */\nexport const generateID = function (\n\tsFlexId: string | undefined,\n\tsIdPrefix: string | undefined,\n\tsOriginalPropertyName: string,\n\tsPropertyName: string\n): string {\n\tif (sFlexId) {\n\t\treturn sFlexId;\n\t}\n\tlet sProperty = sPropertyName;\n\tif (sOriginalPropertyName !== sPropertyName) {\n\t\tsProperty = `${sOriginalPropertyName}::${sPropertyName}`;\n\t}\n\treturn generate([sIdPrefix, sProperty]);\n};\n\n/**\n * Method to check if a property needs to be validated or not when used in the valuehelp.\n * @param target ValueHelp property type annotations\n * @returns `true` if the value help needs to be validated\n */\nexport const requiresValidation = function (target: Property | ActionParameter): boolean {\n\treturn (\n\t\thasValueHelpWithFixedValues(target) ||\n\t\thasValueListForValidation(target) ||\n\t\t(hasValueHelp(target) && (isUnit(target) || isCurrency(target) || isGuid(target)))\n\t);\n};\n\n/**\n * Method to decide if case-sensitive filter requests are to be used or not.\n *\n * If the back end has FilterFunctions Capabilies for the service or the entity, we check it includes support for tolower.\n * @param oDataModelPath Current data model pathÂ·\n * @param aEntityContainerFilterFunctions Filter functions of entity container\n * @returns `true` if the entity set or service supports case sensitive filter requests\n */\nexport const useCaseSensitiveFilterRequests = function (\n\toDataModelPath: DataModelObjectPath<Property | ActionParameter>,\n\taEntityContainerFilterFunctions: string[]\n): boolean {\n\tconst filterFunctions =\n\t\t((oDataModelPath?.targetEntitySet as EntitySet)?.annotations?.Capabilities?.FilterFunctions as unknown as string[]) ||\n\t\taEntityContainerFilterFunctions;\n\treturn filterFunctions ? !filterFunctions.includes(\"tolower\") : true;\n};\n\nexport const isSemanticDateRange = function (oDataModelPath: DataModelObjectPath<Property>): CompiledBindingToolkitExpression | false {\n\tconst targetProperty = oDataModelPath.targetObject;\n\tconst targetRestrictions = checkFilterExpressionRestrictions(oDataModelPath, [\"SingleRange\"]);\n\treturn targetProperty && hasDateType(targetProperty) && compileExpression(targetRestrictions);\n};\n\nexport const shouldShowConditionPanel = function (\n\toDataModelPath: DataModelObjectPath<Property>,\n\toContextPath: DataModelObjectPath<PageContextPathTarget>\n): boolean {\n\t// Force push the context path inside\n\toDataModelPath.contextLocation = oContextPath;\n\treturn compileExpression(checkFilterExpressionRestrictions(oDataModelPath, [\"SingleValue\", \"MultiValue\"])) === \"false\";\n};\n\nexport const getColumnDataProperty = function (sValueListProperty: string, propertyPath: DataModelObjectPath<Property>): string {\n\tconst textAnnotation = propertyPath?.targetObject?.annotations?.Common?.Text;\n\treturn textAnnotation?.annotations?.UI?.TextArrangement?.valueOf() === \"UI.TextArrangementType/TextOnly\" &&\n\t\tisPathAnnotationExpression(textAnnotation)\n\t\t? textAnnotation.path\n\t\t: sValueListProperty;\n};\n\nconst getColumnDataPropertyType = function (valueListPropertyType: string, propertyPath: DataModelObjectPath<Property>): string {\n\tconst textArrangement = propertyPath?.targetObject?.annotations?.Common?.Text?.annotations?.UI?.TextArrangement;\n\treturn textArrangement && textArrangement.valueOf() !== \"UI.TextArrangementType/TextSeparate\" ? \"Edm.String\" : valueListPropertyType;\n};\n\nexport const getColumnHAlign = function (propertyPath: DataModelObjectPath<Property>): CompiledBindingToolkitExpression {\n\tconst property = propertyPath.targetObject;\n\tconst propertyType = isProperty(property) ? getColumnDataPropertyType(property.type, propertyPath) : \"\";\n\n\treturn !propertyType || isSemanticKey(property, propertyPath)\n\t\t? \"Begin\"\n\t\t: FieldHelper.getPropertyAlignment(propertyType, { textAlignMode: \"Table\" });\n};\n/**\n *\n * @param  propertyPath PropertyPath of the Field\n * @returns Runtime formatter for growing and growingThreshold\n */\nexport const getGrowingFormatter = function (propertyPath: string): CompiledBindingToolkitExpression {\n\treturn compileExpression(\n\t\tformatResult([pathInModel(\"/recommendationsData\", \"internal\"), constant(propertyPath)], additionalValueFormatter.getGrowing)\n\t);\n};\n\nexport const getValueHelpTemplate = function (\n\tmetaPath: Context,\n\tvhContent: StrictPropertiesOf<Omit<ValueHelpBlock, \"contextPath\" | \"metaPath\" | \"ariaLabelledBy\">> & {\n\t\tmetaPath: Context;\n\t\tcontextPath: Context;\n\t}\n): string | Control | undefined {\n\tlet dataModelObjectPath = getInvolvedDataModelObjects<Property>(metaPath, vhContent.contextPath);\n\tlet originalProperty = getInvolvedDataModelObjects<Property>(vhContent.metaPath, vhContent.contextPath);\n\tif (isPathAnnotationExpression(originalProperty.targetObject)) {\n\t\toriginalProperty = enhanceDataModelPath(originalProperty, originalProperty.targetObject.path);\n\t}\n\tif (isPathAnnotationExpression(dataModelObjectPath.targetObject)) {\n\t\tdataModelObjectPath = enhanceDataModelPath(dataModelObjectPath, dataModelObjectPath.targetObject.path);\n\t}\n\tif (dataModelObjectPath.targetObject) {\n\t\tconst valueHelpId = generateID(\n\t\t\tvhContent._flexId,\n\t\t\tvhContent.idPrefix,\n\t\t\tgetTargetObjectPath(originalProperty, true),\n\t\t\tgetTargetObjectPath(dataModelObjectPath, true)\n\t\t);\n\t\tconst dialogTitle = getLabel(dataModelObjectPath.targetObject) || dataModelObjectPath.targetObject.name;\n\t\tif (hasValueHelp(dataModelObjectPath.targetObject)) {\n\t\t\tconst shouldValidateInput =\n\t\t\t\tvhContent.filterFieldValueHelp || vhContent.requiresValidation || requiresValidation(dataModelObjectPath.targetObject);\n\t\t\tconst showConditionPanel = vhContent.filterFieldValueHelp\n\t\t\t\t? equal(checkFilterExpressionRestrictions(dataModelObjectPath, [\"SingleValue\", \"MultiValue\"]), false)\n\t\t\t\t: false;\n\t\t\tconst valueHelpDelegateConfiguration = getDelegateConfiguration(\n\t\t\t\tgetTargetObjectPath(dataModelObjectPath),\n\t\t\t\tvhContent.conditionModel,\n\t\t\t\tgetTargetObjectPath(originalProperty),\n\t\t\t\tvhContent.requestGroupId,\n\t\t\t\tvhContent.useMultiValueField\n\t\t\t);\n\t\t\tconst shouldUseCaseSensitiveFilter = useCaseSensitiveFilterRequests(\n\t\t\t\tdataModelObjectPath,\n\t\t\t\t(dataModelObjectPath.targetEntitySet as EntitySet)?.annotations?.Capabilities?.FilterFunctions?.map((str) =>\n\t\t\t\t\tstr.toString()\n\t\t\t\t) ?? []\n\t\t\t);\n\t\t\tconst isValueListForValidation = hasValueListForValidation(dataModelObjectPath.targetObject);\n\t\t\tconst isValueListWithFixedValues = hasValueHelpWithFixedValues(dataModelObjectPath.targetObject);\n\t\t\tconst customData = [<CustomData key={\"showConditionPanel\"} value={showConditionPanel} />];\n\t\t\tif (isValueListForValidation) {\n\t\t\t\tcustomData.push(\n\t\t\t\t\t<CustomData\n\t\t\t\t\t\tkey={\"valuelistForValidation\"}\n\t\t\t\t\t\tvalue={compileExpression(\n\t\t\t\t\t\t\tgetExpressionFromAnnotation(\n\t\t\t\t\t\t\t\tdataModelObjectPath.targetObject.annotations?.Common\n\t\t\t\t\t\t\t\t\t?.ValueListForValidation as unknown as PropertyAnnotationValue<string>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn (\n\t\t\t\t<ValueHelp delegate={valueHelpDelegateConfiguration} id={valueHelpId} validateInput={shouldValidateInput}>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcustomData: customData,\n\t\t\t\t\t\ttypeahead: (\n\t\t\t\t\t\t\t<Popover>\n\t\t\t\t\t\t\t\t<MTable\n\t\t\t\t\t\t\t\t\tid={`${valueHelpId}::Popover::qualifier::`}\n\t\t\t\t\t\t\t\t\tcaseSensitive={shouldUseCaseSensitiveFilter}\n\t\t\t\t\t\t\t\t\tuseAsValueHelp={hasValueHelpWithFixedValues(dataModelObjectPath.targetObject)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Popover>\n\t\t\t\t\t\t),\n\t\t\t\t\t\tdialog: !isValueListWithFixedValues ? <Dialog /> : undefined\n\t\t\t\t\t}}\n\t\t\t\t</ValueHelp>\n\t\t\t);\n\t\t} else if (vhContent.filterFieldValueHelp) {\n\t\t\treturn (\n\t\t\t\t<ValueHelp id={valueHelpId}>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcustomData:\n\t\t\t\t\t\t\tvhContent.requestGroupId !== undefined\n\t\t\t\t\t\t\t\t? [<CustomData key={\"requestGroupId\"} value={vhContent.requestGroupId} />]\n\t\t\t\t\t\t\t\t: [],\n\t\t\t\t\t\tdialog: (\n\t\t\t\t\t\t\t<Dialog title={dialogTitle}>\n\t\t\t\t\t\t\t\t<Conditions />\n\t\t\t\t\t\t\t</Dialog>\n\t\t\t\t\t\t)\n\t\t\t\t\t}}\n\t\t\t\t</ValueHelp>\n\t\t\t);\n\t\t}\n\t}\n};\n"],"mappings":"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","ignoreList":[]}