{"version":3,"file":"ActionHelper.js","names":["ActionHelper","getMultiSelectDisabledActions","collections","multiSelectDisabledActions","actions","filter","collection","$Type","action","actionTarget","ActionTarget","isBound","parameter","parameters","isPathAnnotationExpression","annotations","UI","Hidden","Common","FieldControl","push","name","getPressEventDataFieldForActionButton","sId","oAction","oParams","sOperationAvailableMap","sInvocationGrouping","InvocationGrouping","$EnumMember","CommonHelper","addSingleQuotes","Label","generateFunction","Action","objectToString","getNumberOfContextsExpression","vActionEnabled","forContextMenu","arguments","length","undefined","sNumberOfSelectedContexts","selectedContext","getOperationAvailableMap","aCollection","sControl","oContext","oOperationAvailableMap","forEach","oRecord","actionName","includes","Determining","this","_getOperationAvailableMapOfTable","_getOperationAvailableMapOfChart","oDataFieldForAction","sActionName","oConverterContext","Core","OperationAvailable","bindingParameterFullName","fullyQualifiedName","targetExpression","getExpressionFromAnnotation","path","bindingContextPathVisitor","getConvertedTypes","isPathInModelExpression","_addToMap","oResult","getActionPath","context","sProperty","substring","sBindingParameter","sKey","oValue","oMap"],"sources":["./ActionHelper.ts"],"sourcesContent":["import type { DataFieldAbstractTypes, OperationGroupingType } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTypes, type DataFieldForAction } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { getExpressionFromAnnotation, isPathInModelExpression } from \"sap/fe/base/BindingToolkit\";\nimport type ConverterContext from \"sap/fe/core/converters/ConverterContext\";\nimport { bindingContextPathVisitor } from \"sap/fe/core/helpers/BindingHelper\";\nimport { isPathAnnotationExpression } from \"sap/fe/core/helpers/TypeGuards\";\nimport type { ComputedAnnotationInterface } from \"sap/fe/core/templating/UIFormatters\";\nimport CommonHelper from \"sap/fe/macros/CommonHelper\";\nimport type { MetaModelEnum, MetaModelType } from \"../../../../../../../../types/metamodel_types\";\n\nconst ActionHelper = {\n\t/**\n\t * Returns an array of actions that are not enabled with a multiple selection.\n\t * @param collections Array of records\n\t * @returns An array of action paths\n\t */\n\tgetMultiSelectDisabledActions(collections?: DataFieldAbstractTypes[]): string[] {\n\t\tconst multiSelectDisabledActions: string[] = [];\n\t\tconst actions = (collections?.filter((collection) => collection.$Type === UIAnnotationTypes.DataFieldForAction) ??\n\t\t\t[]) as DataFieldForAction[];\n\t\tfor (const action of actions) {\n\t\t\tconst actionTarget = action?.ActionTarget;\n\t\t\tif (actionTarget?.isBound === true) {\n\t\t\t\tfor (const parameter of actionTarget.parameters) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tisPathAnnotationExpression(parameter.annotations.UI?.Hidden) ||\n\t\t\t\t\t\tisPathAnnotationExpression(parameter.annotations.Common?.FieldControl)\n\t\t\t\t\t) {\n\t\t\t\t\t\tmultiSelectDisabledActions.push(actionTarget.name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn multiSelectDisabledActions;\n\t},\n\n\t/**\n\t * Method to get the expression for the 'press' event for the DataFieldForActionButton.\n\t * @param sId Control ID\n\t * @param oAction Action object\n\t * @param oParams Parameters\n\t * @param oParams.invocationGrouping Invocation grouping\n\t * @param oParams.controlId Control ID\n\t * @param oParams.operationAvailableMap OperationAvailableMap\n\t * @param oParams.model Model\n\t * @param oParams.label Label\n\t * @param oParams.contexts Contexts\n\t * @param sOperationAvailableMap OperationAvailableMap as stringified JSON object\n\t * @returns The binding expression\n\t */\n\tgetPressEventDataFieldForActionButton(\n\t\tsId: string,\n\t\toAction: MetaModelType<DataFieldForAction> & { InvocationGrouping: MetaModelEnum<OperationGroupingType> },\n\t\toParams: {\n\t\t\tinvocationGrouping?: string;\n\t\t\tcontrolId?: string;\n\t\t\toperationAvailableMap?: string;\n\t\t\tmodel?: string;\n\t\t\tlabel?: string;\n\t\t\tcontexts?: string;\n\t\t},\n\t\tsOperationAvailableMap: string\n\t): string {\n\t\tconst sInvocationGrouping =\n\t\t\toAction.InvocationGrouping &&\n\t\t\toAction.InvocationGrouping.$EnumMember === \"com.sap.vocabularies.UI.v1.OperationGroupingType/ChangeSet\"\n\t\t\t\t? \"ChangeSet\"\n\t\t\t\t: \"Isolated\";\n\t\toParams = oParams || {};\n\t\toParams[\"invocationGrouping\"] = CommonHelper.addSingleQuotes(sInvocationGrouping);\n\t\toParams[\"controlId\"] = CommonHelper.addSingleQuotes(sId);\n\t\toParams[\"operationAvailableMap\"] = CommonHelper.addSingleQuotes(sOperationAvailableMap);\n\t\toParams[\"model\"] = \"${$source>/}.getModel()\";\n\t\toParams[\"label\"] = oAction.Label && CommonHelper.addSingleQuotes(oAction.Label, true);\n\n\t\treturn CommonHelper.generateFunction(\n\t\t\t\".editFlow.invokeAction\",\n\t\t\tCommonHelper.addSingleQuotes(oAction.Action!),\n\t\t\tCommonHelper.objectToString(oParams)\n\t\t);\n\t},\n\t/**\n\t * Return Number of contexts expression.\n\t * @param vActionEnabled Status of action (single or multiselect)\n\t * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n\t * @returns Number of contexts expression\n\t */\n\tgetNumberOfContextsExpression(vActionEnabled: string, forContextMenu = false): string {\n\t\tlet sNumberOfSelectedContexts;\n\t\tconst selectedContext = !forContextMenu\n\t\t\t? \"${internal>numberOfSelectedContexts}\"\n\t\t\t: \"${internal>contextmenu/numberOfSelectedContexts}\";\n\t\tif (vActionEnabled === \"single\") {\n\t\t\tsNumberOfSelectedContexts = selectedContext + \" === 1\";\n\t\t} else {\n\t\t\tsNumberOfSelectedContexts = selectedContext + \" > 0\";\n\t\t}\n\t\treturn sNumberOfSelectedContexts;\n\t},\n\t/**\n\t * Return UI Control (LineItem/Chart) Operation Available Map.\n\t * @param aCollection Array of records\n\t * @param sControl Control name (lineItem / chart)\n\t * @param oContext Converter context\n\t * @returns The record containing all action names and their corresponding Core.OperationAvailable property paths\n\t */\n\tgetOperationAvailableMap(\n\t\taCollection: DataFieldAbstractTypes[] | undefined,\n\t\tsControl: string,\n\t\toContext: ConverterContext<unknown> | ComputedAnnotationInterface\n\t): Record<string, unknown> {\n\t\tlet oOperationAvailableMap: Record<string, unknown> = {};\n\t\tif (aCollection) {\n\t\t\taCollection.forEach((oRecord: DataFieldAbstractTypes) => {\n\t\t\t\tif (oRecord.$Type === UIAnnotationTypes.DataFieldForAction) {\n\t\t\t\t\tif (oRecord.$Type === UIAnnotationTypes.DataFieldForAction) {\n\t\t\t\t\t\tconst actionName = oRecord.Action as string;\n\t\t\t\t\t\tif (!actionName?.includes(\"/\") && !oRecord.Determining) {\n\t\t\t\t\t\t\tif (sControl === \"table\") {\n\t\t\t\t\t\t\t\toOperationAvailableMap = this._getOperationAvailableMapOfTable(\n\t\t\t\t\t\t\t\t\toRecord,\n\t\t\t\t\t\t\t\t\tactionName,\n\t\t\t\t\t\t\t\t\toOperationAvailableMap,\n\t\t\t\t\t\t\t\t\toContext as ConverterContext<unknown>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else if (sControl === \"chart\") {\n\t\t\t\t\t\t\t\toOperationAvailableMap = this._getOperationAvailableMapOfChart(\n\t\t\t\t\t\t\t\t\tactionName,\n\t\t\t\t\t\t\t\t\toOperationAvailableMap,\n\t\t\t\t\t\t\t\t\toContext as ComputedAnnotationInterface\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn oOperationAvailableMap;\n\t},\n\n\t/**\n\t * Return LineItem Action Operation Available Map.\n\t * @private\n\t * @param oDataFieldForAction Data field for action object\n\t * @param sActionName Action name\n\t * @param oOperationAvailableMap Operation available map object\n\t * @param oConverterContext Converter context object\n\t * @returns The record containing all action name of line item and the corresponding Core.OperationAvailable property path\n\t */\n\t_getOperationAvailableMapOfTable(\n\t\toDataFieldForAction: DataFieldForAction,\n\t\tsActionName: string,\n\t\toOperationAvailableMap: Record<string, unknown>,\n\t\toConverterContext: ConverterContext<unknown>\n\t): Record<string, unknown> {\n\t\tconst actionTarget = oDataFieldForAction.ActionTarget;\n\t\tif (actionTarget?.annotations?.Core?.OperationAvailable === null) {\n\t\t\t// We disabled action advertisement but kept it in the code for the time being\n\t\t\t//oOperationAvailableMap = this._addToMap(sActionName, null, oOperationAvailableMap);\n\t\t} else if (actionTarget?.parameters?.length) {\n\t\t\tconst bindingParameterFullName = actionTarget.parameters[0].fullyQualifiedName,\n\t\t\t\ttargetExpression = getExpressionFromAnnotation(\n\t\t\t\t\tactionTarget?.annotations?.Core?.OperationAvailable,\n\t\t\t\t\t[],\n\t\t\t\t\tundefined,\n\t\t\t\t\t(path: string) => bindingContextPathVisitor(path, oConverterContext.getConvertedTypes(), bindingParameterFullName)\n\t\t\t\t);\n\t\t\tif (isPathInModelExpression(targetExpression)) {\n\t\t\t\toOperationAvailableMap = this._addToMap(sActionName, targetExpression.path, oOperationAvailableMap);\n\t\t\t} else if (actionTarget?.annotations?.Core?.OperationAvailable !== undefined) {\n\t\t\t\toOperationAvailableMap = this._addToMap(sActionName, targetExpression, oOperationAvailableMap);\n\t\t\t}\n\t\t}\n\t\treturn oOperationAvailableMap;\n\t},\n\n\t/**\n\t * Return LineItem Action Operation Available Map.\n\t * @private\n\t * @param sActionName Action name\n\t * @param oOperationAvailableMap Operation available map object\n\t * @param oContext Context object\n\t * @param oContext.context Context object\n\t * @returns The record containing all action name of chart and the corresponding Core.OperationAvailable property path\n\t */\n\t_getOperationAvailableMapOfChart(\n\t\tsActionName: string,\n\t\toOperationAvailableMap: Record<string, unknown>,\n\t\toContext: ComputedAnnotationInterface\n\t): Record<string, unknown> {\n\t\tlet oResult = CommonHelper.getActionPath(oContext.context, false, sActionName, true);\n\t\tif (oResult === null) {\n\t\t\toOperationAvailableMap = this._addToMap(sActionName, null, oOperationAvailableMap);\n\t\t} else {\n\t\t\toResult = CommonHelper.getActionPath(oContext.context, false, sActionName) as {\n\t\t\t\tsContextPath: string;\n\t\t\t\tsProperty: string;\n\t\t\t\tsBindingParameter: string;\n\t\t\t};\n\t\t\tif (oResult.sProperty) {\n\t\t\t\toOperationAvailableMap = this._addToMap(\n\t\t\t\t\tsActionName,\n\t\t\t\t\toResult.sProperty.substring(oResult.sBindingParameter.length + 1),\n\t\t\t\t\toOperationAvailableMap\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn oOperationAvailableMap;\n\t},\n\n\t/**\n\t * Return Map.\n\t * @private\n\t * @param sKey Key\n\t * @param oValue Value\n\t * @param oMap Map object\n\t * @returns Map object\n\t */\n\t_addToMap(sKey: string, oValue: unknown, oMap: Record<string, unknown>): Record<string, unknown> {\n\t\tif (sKey && oMap) {\n\t\t\toMap[sKey] = oValue;\n\t\t}\n\t\treturn oMap;\n\t}\n};\n\nexport default ActionHelper;\n"],"mappings":"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","ignoreList":[]}