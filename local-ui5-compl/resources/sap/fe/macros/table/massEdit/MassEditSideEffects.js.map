{"version":3,"file":"MassEditSideEffects.js","names":["MassEditSideEffects","massEditDialog","this","referenceRowContext","contexts","table","view","CommonUtils","getTargetView","sideEffectsDefinition","generateSideEffectsDefinition","_exports","_proto","prototype","refreshDescription","async","fieldControl","context","groupId","propertyPath","properties","descriptionPath","getAppComponent","getSideEffectsService","requestSideEffects","includes","$NavigationPropertyPath","substring","lastIndexOf","sideEffectsMap","getSideEffectsMap","tableDefinition","getParent","getTableDefinition","key","keySideEffects","sideEffectsName","sideEffectsProperties","sideEffectsEntityType","split","sideEffectsContext","getController","_sideEffects","getContextForSideEffects","massSideEffectsProperties","getSpecificTargetsAndActions","sideEffects","getModel","getMetaModel","getContext","annotation","collection","massSideEffectsExecutionProperties","onRowContext","push","tableRefresh","isRequested","getSideEffectsInformation","oDataSideEffect","entitySetContext","sideEffectsService","metaModel","targetProperties","targetEntities","actionName","isControlSideEffects","triggerAction","undefined","immediateTargets","entitySetDataModelPath","getInvolvedDataModelObjects","sideEffectsDataModelPath","getMetaPath","getPath","parentEntitySet","getTargetEntitySetInfo","isRequestingTableEntityRefresh","tableTargetEntity","reduce","entities","targetEntity","target","targetEntityType","resolvePath","isNavigationProperty","targetType","entityType","targetProperty","propertyDataModelPath","enhanceDataModelPath","isProperty","targetObject","isImmediateTriggerAction","TableHelper","_isStaticAction","getObject","sideEffectsInformation","deferredTargets","filter","immediate","targets","deferred","model","metaPath","bindingContext","baseSideEffectsMapArray","appComponent","fieldProperties","field","visible","map","property","propertyInfo","relativePath","unitPropertyPath","flat","propertyDataModel","fieldGroupIds","computeFieldGroupIds","fullyQualifiedName","getSideEffectsMapForFieldGroups","executeImmediateSideEffects","rowContext","sideEffectsPromises","controller","length","unregisterFailedSideEffects","allFailedSideEffects","getRegisteredFailedRequests","getBindingContext","contextPath","failedSideEffects","unregisterFailedSideEffectsForAContext","failedSideEffect","Promise","allSettled","executeDeferredSideEffects","updatedFields","genericSideEffects","genericTargetEntity","sideEffectsExecuted","Set","sourceProperty","Object","keys","propertyName","has","add"],"sources":["./MassEditSideEffects.ts"],"sourcesContent":["import type { Property } from \"@sap-ux/vocabularies-types\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type { MassEditFieldSideEffectDictionary } from \"sap/fe/core/controllerextensions/SideEffects\";\nimport { getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport { isNavigationProperty, isProperty } from \"sap/fe/core/helpers/TypeGuards\";\nimport type {\n\tSideEffectsEntityType,\n\tSideEffectsService,\n\tSideEffectsTarget,\n\tSideEffectsType\n} from \"sap/fe/core/services/SideEffectsServiceFactory\";\nimport { enhanceDataModelPath, getTargetEntitySetInfo } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport type TableAPI from \"sap/fe/macros/table/TableAPI\";\nimport TableHelper from \"sap/fe/macros/table/TableHelper\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type Context from \"sap/ui/model/Context\";\nimport type ODataV4Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type MassEditDialog from \"./MassEditDialog\";\nimport type MassEditField from \"./MassEditField\";\n\ntype MassEditSideEffectsProperties = {\n\tsideEffects: SideEffectsType;\n\ttableRefresh: {\n\t\tisRequested: boolean;\n\t\ttargetEntity?: SideEffectsEntityType;\n\t};\n\timmediate: { targets: SideEffectsTarget[]; triggerAction: string | undefined };\n\tdeferred: { targets: SideEffectsTarget[]; triggerAction: string | undefined };\n};\n\nexport type MassEditSideEffectsExecutionProperties = MassEditSideEffectsProperties & { onRowContext: boolean };\n\nexport default class MassEditSideEffects {\n\tpublic readonly sideEffectsDefinition: Record<string, MassEditSideEffectsExecutionProperties[]>;\n\n\tprivate readonly view: FEView;\n\n\tprivate readonly table: Table;\n\n\tprivate readonly referenceRowContext: ODataV4Context;\n\n\tconstructor(private massEditDialog: MassEditDialog) {\n\t\tthis.massEditDialog = massEditDialog;\n\t\tthis.referenceRowContext = massEditDialog.contexts[0];\n\t\tthis.table = massEditDialog.table;\n\t\tthis.view = CommonUtils.getTargetView(this.table);\n\t\tthis.sideEffectsDefinition = this.generateSideEffectsDefinition();\n\t}\n\n\t/**\n\t * Manages the refresh of the description\n\t * When a field is changed and this field has a text arrangement annotation, then description must be updated by the SideEffect\n\t * if no SideEffect is configured to refresh the entire table (named genericField).\n\t * @param fieldControl The field\n\t * @param context The row context\n\t * @param groupId The batch group id\n\t * @returns Promise related to the SideEffects.\n\t */\n\tasync refreshDescription(fieldControl: MassEditField, context: ODataV4Context, groupId: string): Promise<void> {\n\t\tconst propertyPath = fieldControl.properties.descriptionPath;\n\t\tif (propertyPath && !this.sideEffectsDefinition[\"genericField\"]) {\n\t\t\treturn CommonUtils.getAppComponent(this.table)\n\t\t\t\t.getSideEffectsService()\n\t\t\t\t.requestSideEffects(\n\t\t\t\t\tpropertyPath.includes(\"/\")\n\t\t\t\t\t\t? [{ $NavigationPropertyPath: propertyPath.substring(0, propertyPath.lastIndexOf(\"/\")) }]\n\t\t\t\t\t\t: [propertyPath],\n\t\t\t\t\tcontext,\n\t\t\t\t\tgroupId\n\t\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Generates the SideEffects execution definition\n\t * This dictionary is used by the dialog to execute immediate and deferred SideEffects on the relevant contexts.\n\t * @returns The SideEffects execution properties.\n\t */\n\tgenerateSideEffectsDefinition(): Record<string, MassEditSideEffectsExecutionProperties[]> {\n\t\tconst sideEffectsMap = this.getSideEffectsMap();\n\t\tconst sideEffectsDefinition: Record<string, MassEditSideEffectsExecutionProperties[]> = {};\n\t\tconst tableDefinition = (this.table.getParent() as TableAPI).getTableDefinition();\n\t\tconst view = CommonUtils.getTargetView(this.table);\n\n\t\tfor (const key in sideEffectsMap) {\n\t\t\tconst keySideEffects = sideEffectsMap[key];\n\t\t\tfor (const sideEffectsName in keySideEffects) {\n\t\t\t\tconst sideEffectsProperties = keySideEffects[sideEffectsName];\n\t\t\t\tconst sideEffectsEntityType = sideEffectsName.split(\"#\")[0];\n\t\t\t\tconst sideEffectsContext = view\n\t\t\t\t\t.getController()\n\t\t\t\t\t._sideEffects.getContextForSideEffects(this.referenceRowContext, sideEffectsEntityType);\n\t\t\t\tif (sideEffectsContext) {\n\t\t\t\t\tconst massSideEffectsProperties = this.getSpecificTargetsAndActions(\n\t\t\t\t\t\tsideEffectsProperties.sideEffects,\n\t\t\t\t\t\tsideEffectsContext,\n\t\t\t\t\t\t(this.table.getModel() as ODataModel).getMetaModel().getContext(tableDefinition.annotation.collection),\n\t\t\t\t\t\tCommonUtils.getAppComponent(this.table).getSideEffectsService()\n\t\t\t\t\t);\n\t\t\t\t\tconst massSideEffectsExecutionProperties = {\n\t\t\t\t\t\t...massSideEffectsProperties,\n\t\t\t\t\t\t...{ onRowContext: this.referenceRowContext === sideEffectsContext }\n\t\t\t\t\t};\n\t\t\t\t\tsideEffectsDefinition[key] = sideEffectsDefinition[key] || [];\n\t\t\t\t\tsideEffectsDefinition[key].push(massSideEffectsExecutionProperties);\n\t\t\t\t\tif (!sideEffectsDefinition[\"genericField\"] && massSideEffectsProperties.tableRefresh.isRequested) {\n\t\t\t\t\t\tsideEffectsDefinition[\"genericField\"] = [massSideEffectsExecutionProperties];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sideEffectsDefinition;\n\t}\n\n\t/**\n\t * Gets the SideEffects information\n\t *  This information is\n\t * - immediateTargets: contains the immediate targets which must be executed on each row\n\t * - isImmediateTriggerAction: is the action is immediate or deferred\n\t * - isRequestingTableEntityRefresh: is the refresh is requested on the table entity by a TargetEntity\n\t * - tableTargetEntity: the target entity which requests the refresh on the table.\n\t * @param oDataSideEffect The SideEffect\n\t * @param sideEffectsContext The context where the SideEffects is executed\n\t * @param entitySetContext  The entitySet context of the dialog\n\t * @param sideEffectsService The SideEffects service\n\t * @returns The SideEffects information.\n\t */\n\tprivate getSideEffectsInformation(\n\t\toDataSideEffect: SideEffectsType,\n\t\tsideEffectsContext: ODataV4Context,\n\t\tentitySetContext: Context,\n\t\tsideEffectsService: SideEffectsService\n\t): {\n\t\timmediateTargets: SideEffectsTarget[];\n\t\tisImmediateTriggerAction: boolean;\n\t\tisRequestingTableEntityRefresh: boolean;\n\t\ttableTargetEntity: SideEffectsEntityType | undefined;\n\t} {\n\t\tconst metaModel = entitySetContext.getModel();\n\t\tconst targetProperties = oDataSideEffect.targetProperties ?? [];\n\t\tconst targetEntities = oDataSideEffect.targetEntities ?? [];\n\t\tconst actionName = !sideEffectsService.isControlSideEffects(oDataSideEffect) ? oDataSideEffect.triggerAction : undefined;\n\t\tlet immediateTargets: SideEffectsTarget[] = [];\n\t\tconst entitySetDataModelPath = getInvolvedDataModelObjects(entitySetContext);\n\t\tconst sideEffectsDataModelPath = getInvolvedDataModelObjects(\n\t\t\tmetaModel.getContext(metaModel.getMetaPath(sideEffectsContext.getPath()))\n\t\t);\n\t\tconst { parentEntitySet } = getTargetEntitySetInfo(entitySetDataModelPath);\n\t\tlet isRequestingTableEntityRefresh = false;\n\t\tlet tableTargetEntity: SideEffectsEntityType | undefined;\n\n\t\timmediateTargets = targetEntities.reduce((entities: SideEffectsEntityType[], targetEntity) => {\n\t\t\tconst target = sideEffectsDataModelPath.targetEntityType.resolvePath(targetEntity.$NavigationPropertyPath);\n\t\t\tif (isNavigationProperty(target)) {\n\t\t\t\tif (target.targetType == entitySetDataModelPath.targetEntityType) {\n\t\t\t\t\t//The refresh is requested on the table entity\n\t\t\t\t\tisRequestingTableEntityRefresh = true;\n\t\t\t\t\ttableTargetEntity = targetEntity;\n\t\t\t\t\treturn entities;\n\t\t\t\t}\n\t\t\t\tif (sideEffectsDataModelPath.targetEntityType === parentEntitySet?.entityType) {\n\t\t\t\t\t// The side effects context is the parent entity (the entitySet of the view)\n\t\t\t\t\treturn entities;\n\t\t\t\t}\n\t\t\t\tif (target.targetType !== parentEntitySet?.entityType) {\n\t\t\t\t\t//The refresh is not requested on the parent entity (the entitySet of the view)\n\t\t\t\t\tentities.push(targetEntity);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn entities;\n\t\t}, []);\n\n\t\tfor (const targetProperty of targetProperties) {\n\t\t\tconst propertyDataModelPath = enhanceDataModelPath(sideEffectsDataModelPath, targetProperty);\n\t\t\tif (isProperty(propertyDataModelPath.targetObject) || targetProperty === \"*\") {\n\t\t\t\t// if target entity is not from the parent\n\t\t\t\tif (parentEntitySet?.entityType !== propertyDataModelPath.targetEntityType) {\n\t\t\t\t\timmediateTargets.push(targetProperty);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// if entity is other than items table then action is deferred or the static action is on collection\n\t\tconst isImmediateTriggerAction =\n\t\t\t!!actionName &&\n\t\t\tsideEffectsDataModelPath.targetEntityType === entitySetDataModelPath.targetEntityType &&\n\t\t\t!TableHelper._isStaticAction(metaModel.getObject(`/${actionName}`), actionName);\n\n\t\treturn {\n\t\t\timmediateTargets,\n\t\t\tisImmediateTriggerAction,\n\t\t\tisRequestingTableEntityRefresh,\n\t\t\ttableTargetEntity\n\t\t};\n\t}\n\n\t/**\n\t * Gets the properties of the SideEffects\n\t * These properties are\n\t * - tableRefresh: is the whole table is refreshed by the SideEffects\n\t * - immediate: contains the immediate targets and action. They are immediate when these properties must be executed\n\t * on each row\n\t * - deferred: contains the deferred targets and action. They are deferred when these properties must be executed\n\t * only once even if multiple rows has been processed.\n\t * @param oDataSideEffect The SideEffect\n\t * @param sideEffectsContext The context where the SideEffects is executed\n\t * @param entitySetContext  The entitySet context of the dialog\n\t * @param sideEffectsService The SideEffects service\n\t * @returns The SideEffects properties.\n\t */\n\tgetSpecificTargetsAndActions(\n\t\toDataSideEffect: SideEffectsType,\n\t\tsideEffectsContext: ODataV4Context,\n\t\tentitySetContext: Context,\n\t\tsideEffectsService: SideEffectsService\n\t): MassEditSideEffectsProperties {\n\t\tconst sideEffectsInformation = this.getSideEffectsInformation(\n\t\t\toDataSideEffect,\n\t\t\tsideEffectsContext,\n\t\t\tentitySetContext,\n\t\t\tsideEffectsService\n\t\t);\n\t\tconst actionName = !sideEffectsService.isControlSideEffects(oDataSideEffect) ? oDataSideEffect.triggerAction : undefined;\n\n\t\tconst deferredTargets = [...(oDataSideEffect.targetProperties ?? []), ...(oDataSideEffect.targetEntities ?? [])].filter(\n\t\t\t(target) => !sideEffectsInformation.immediateTargets.includes(target) && target !== sideEffectsInformation.tableTargetEntity\n\t\t);\n\n\t\treturn {\n\t\t\tsideEffects: oDataSideEffect,\n\t\t\ttableRefresh: {\n\t\t\t\tisRequested: sideEffectsInformation.isRequestingTableEntityRefresh,\n\t\t\t\ttargetEntity: sideEffectsInformation.tableTargetEntity\n\t\t\t},\n\t\t\timmediate: {\n\t\t\t\ttargets: sideEffectsInformation.isRequestingTableEntityRefresh ? [] : sideEffectsInformation.immediateTargets,\n\t\t\t\ttriggerAction: sideEffectsInformation.isImmediateTriggerAction ? actionName : undefined\n\t\t\t},\n\t\t\tdeferred: {\n\t\t\t\ttargets: deferredTargets,\n\t\t\t\ttriggerAction: !sideEffectsInformation.isImmediateTriggerAction ? actionName : undefined\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Generates the side effects map according to the fields into the dialog.\n\t * @returns The SideEffects map.\n\t */\n\tgetSideEffectsMap(): Record<string, MassEditFieldSideEffectDictionary> {\n\t\tconst model = this.table.getModel() as ODataModel,\n\t\t\tmetaModel = model.getMetaModel(),\n\t\t\tmetaPath = metaModel.getMetaPath(this.massEditDialog.bindingContext.getPath()),\n\t\t\tentitySetContext = metaModel.getContext(metaPath);\n\t\tconst entitySetDataModelPath = getInvolvedDataModelObjects(entitySetContext);\n\t\tconst baseSideEffectsMapArray: Record<string, MassEditFieldSideEffectDictionary> = {};\n\t\tconst appComponent = CommonUtils.getAppComponent(this.view);\n\t\tconst properties = this.massEditDialog.fieldProperties\n\t\t\t.filter((field) => field.visible)\n\t\t\t.map((property) => [property.propertyInfo.relativePath, property.propertyInfo.unitPropertyPath])\n\t\t\t.flat()\n\t\t\t.filter((property): property is string => !!property);\n\n\t\tfor (const property of properties) {\n\t\t\tconst propertyDataModel = enhanceDataModelPath<Property>(entitySetDataModelPath, property);\n\t\t\tconst fieldGroupIds =\n\t\t\t\tappComponent\n\t\t\t\t\t.getSideEffectsService()\n\t\t\t\t\t.computeFieldGroupIds(\n\t\t\t\t\t\tentitySetDataModelPath.targetEntityType.fullyQualifiedName,\n\t\t\t\t\t\tpropertyDataModel.targetObject!.fullyQualifiedName\n\t\t\t\t\t) ?? [];\n\t\t\tbaseSideEffectsMapArray[property] = this.view.getController()._sideEffects.getSideEffectsMapForFieldGroups(fieldGroupIds);\n\t\t}\n\t\treturn baseSideEffectsMapArray;\n\t}\n\n\t/**\n\t * Executes the immediate SideEffects.\n\t * These sideEffects are\n\t * - The ones registered as immediate into the SideEffects dictionary\n\t * - The previous failed SideEffects on the row context or view bindingContext.\n\t * If there is any generic SideEffects (sideEffects which refresh the whole table) stored into the SideEffects\n\t * dictionary, the targets of all immediate SideEffects are ignored (no need to execute them since the table\n\t * is going to be refreshed by the generic SideEffects).\n\t * @param rowContext The context of the row\n\t * @param field  The property name of the field\n\t * @param groupId The groupId for the batch request\n\t * @returns A promise containing all SideEffects requests\n\t */\n\tasync executeImmediateSideEffects(\n\t\trowContext: ODataV4Context,\n\t\tfield: string,\n\t\tgroupId: string\n\t): Promise<PromiseSettledResult<unknown>[]> {\n\t\tconst sideEffectsPromises = [];\n\t\tconst controller = this.view.getController();\n\t\t//Execute the SideEffects defined into the annotations\n\t\tfor (const sideEffectsProperties of (this.sideEffectsDefinition[field] ?? []).filter(\n\t\t\t(sideEffects) => sideEffects.immediate.targets.length || sideEffects.immediate.triggerAction\n\t\t)) {\n\t\t\tconst context = sideEffectsProperties.onRowContext\n\t\t\t\t? rowContext\n\t\t\t\t: controller._sideEffects.getContextForSideEffects(\n\t\t\t\t\t\trowContext,\n\t\t\t\t\t\tsideEffectsProperties.sideEffects.fullyQualifiedName.split(\"@\")[0]\n\t\t\t\t  );\n\t\t\tif (context) {\n\t\t\t\tsideEffectsPromises.push(\n\t\t\t\t\tcontroller._sideEffects.requestSideEffects(sideEffectsProperties.sideEffects, context, groupId, () => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttargets: this.sideEffectsDefinition[\"genericField\"] ? [] : sideEffectsProperties.immediate.targets,\n\t\t\t\t\t\t\ttriggerAction: sideEffectsProperties.immediate.triggerAction\n\t\t\t\t\t\t};\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tcontroller._sideEffects.unregisterFailedSideEffects(sideEffectsProperties.sideEffects.fullyQualifiedName, context);\n\t\t\t}\n\t\t}\n\n\t\t//Execute the previous failed SideEffects requests\n\t\tconst allFailedSideEffects = controller._sideEffects.getRegisteredFailedRequests();\n\t\tfor (const context of [rowContext, this.view.getBindingContext()]) {\n\t\t\tif (context) {\n\t\t\t\tconst contextPath = context.getPath();\n\t\t\t\tconst failedSideEffects = allFailedSideEffects[contextPath] ?? [];\n\t\t\t\tcontroller._sideEffects.unregisterFailedSideEffectsForAContext(contextPath);\n\t\t\t\tfor (const failedSideEffect of failedSideEffects) {\n\t\t\t\t\tsideEffectsPromises.push(controller._sideEffects.requestSideEffects(failedSideEffect, context));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn Promise.allSettled(sideEffectsPromises);\n\t}\n\n\t/**\n\t * Executes the deferred SideEffects\n\t * These sideEffects are\n\t * - The ones registered as deferred into the SideEffects dictionary\n\t * - The one registered as generic since the whole table is refreshed.\n\t * @param updatedFields All the updated fields by the MassEdit\n\t */\n\texecuteDeferredSideEffects(updatedFields: Set<string>): void {\n\t\tconst genericSideEffects = this.sideEffectsDefinition[\"genericField\"]?.[0];\n\t\tconst genericTargetEntity = genericSideEffects?.tableRefresh.targetEntity;\n\t\tconst sideEffectsExecuted = new Set<string>();\n\t\tconst controller = this.view.getController();\n\n\t\tfor (const sourceProperty of Object.keys(this.sideEffectsDefinition).filter((propertyName) => updatedFields.has(propertyName))) {\n\t\t\tfor (const sideEffectsProperties of this.sideEffectsDefinition[sourceProperty].filter(\n\t\t\t\t(sideEffects) => sideEffects.deferred.targets.length || sideEffects.deferred.triggerAction\n\t\t\t)) {\n\t\t\t\tconst context = sideEffectsProperties.onRowContext\n\t\t\t\t\t? this.referenceRowContext\n\t\t\t\t\t: controller._sideEffects.getContextForSideEffects(\n\t\t\t\t\t\t\tthis.referenceRowContext,\n\t\t\t\t\t\t\tsideEffectsProperties.sideEffects.fullyQualifiedName.split(\"@\")[0]\n\t\t\t\t\t  );\n\t\t\t\tif (context && !sideEffectsExecuted.has(sideEffectsProperties.sideEffects.fullyQualifiedName)) {\n\t\t\t\t\tsideEffectsExecuted.add(sideEffectsProperties.sideEffects.fullyQualifiedName);\n\t\t\t\t\tcontroller._sideEffects.requestSideEffects(sideEffectsProperties.sideEffects, context, \"$auto.massEditDeferred\", () => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttargets: genericTargetEntity\n\t\t\t\t\t\t\t\t? sideEffectsProperties.deferred.targets.filter(\n\t\t\t\t\t\t\t\t\t\t(target) => typeof target === \"string\" || target !== genericTargetEntity\n\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t: sideEffectsProperties.deferred.targets,\n\t\t\t\t\t\t\ttriggerAction: sideEffectsProperties.deferred.triggerAction\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (genericSideEffects && genericTargetEntity) {\n\t\t\tconst context = controller._sideEffects.getContextForSideEffects(\n\t\t\t\tthis.referenceRowContext,\n\t\t\t\tgenericSideEffects.sideEffects.fullyQualifiedName.split(\"@\")[0]\n\t\t\t);\n\t\t\tif (context) {\n\t\t\t\tcontroller._sideEffects.requestSideEffects(genericSideEffects.sideEffects, context, \"$auto.massEditDeferred\", () => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttargets: [genericTargetEntity],\n\t\t\t\t\t\ttriggerAction: undefined\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]}