{"version":3,"file":"MassEdit.js","names":["MassEdit","props","this","fieldProperties","entityTypePath","table","getParent","getTableDefinition","annotation","collection","metaModel","getModel","getMetaModel","onContextMenu","onDialogClose","onClose","view","CommonUtils","getTargetView","contexts","fetchContextsForEdit","isAdaptation","getAppComponent","isAdaptationMode","headerInfo","getInvolvedDataModelObjects","getContext","targetEntityType","annotations","UI","HeaderInfo","_exports","_proto","prototype","open","async","templateComponent","Component","getOwnerComponentFor","internalModelContext","getBindingContext","internalModelProperty","selectedContexts","getProperty","getFieldsPropertiesFromInfo","getFieldsInfo","some","field","visible","noFieldInformation","length","confirmSelection","runAsOwner","massEditDialog","MassEditDialog","dialog","create","attachBeforeClose","error","Log","visibleFieldsFromManifest","control","massEdit","visibleFields","resourceBundle","Library","getResourceBundleFor","message","messageDetail","getText","getResourceText","TypeName","reduce","fields","fieldProperty","includes","propertyInfo","relativePath","push","label","join","MessageBox","information","details","coreResourceBundle","updatableContexts","Promise","resolve","tableAPI","editButton","cancelButton","typeName","typeNamePlural","TypeNamePlural","ModelHelper","isDraftSupported","data","readOnly","getMessageDetailForNonEditable","warning","actions","emphasizedAction","selection","undefined","getTranslatedTextFromExpBindingString","compileExpression","getExpressionFromAnnotation","toLocaleLowerCase","getEntityFieldsInfo","columnsData","columns","propertiesKeys","Set","column","type","name","transformPathsToInfo","manifestSettings","getColumns","map","getPropertyKey","ignoredFields","ignoredField","delete","propertiesPaths","Array","from","columnInfos","propertyPath","columnInfo","getFieldInfo","entityPath","getMetaPath","entitySetDataModel","relatedColumnInfo","find","fieldInfo","annotationPath","propertyDataModel","enhanceDataModelPath","convertedAnnotation","convertMetaModelContext","targetProperty","getCompliantProperty","entityProperties","key","targetObject","isProperty","IsImageURL","isDataFieldTypes","hasOwnProperty","Value","$target","unitProperty","getAssociatedUnitProperty","isMultiValueField","hasValueHelp","Common","ValueListRelevantQualifiers","isHiddenForContexts","expBinding","anyObject","Any","anyBoolean","setModel","isHidden","context","setBindingContext","getBinding","getExternalValue","destroy","updatableContextProperty","getFieldProperties","deepClone","fieldsInfo","visibilityBindings","dataPropertyPath","getContextRelativeTargetObjectPath","unitPropertyPath","getAssociatedUnitPropertyPath","inputType","getInputType","getRelativePaths","isVisible","editMode","getEditMode","constant","fieldData","Label","isFieldRequired","getRequiredExpression","descriptionPath","getAssociatedTextPropertyPath","textBinding","getTextBinding","displayMode","getDisplayMode","readOnlyExpression","isReadOnlyExpression","nullable","selectItems","bindingsToResolve","concat","index","pathInModel","getMissingData","all","isFieldVisible","runtimeSelection","getRuntimeSelection","getDefaultSelectOptions","generateFieldsProperties","generateEntityFieldsProperties","controls","objects","binding","any","setBindingMode","BindingMode","OneTime","isA","getBindings","nestedBinding","requestValue","distinctMap","selectOptions","anyText","selectedContext","propertyText","has","add","text","unitValue","getObject","propertyValue","keepEntry","SpecificSelectKeys","KeepKey","defaultOptions","ReplaceKey","ClearFieldValueKey","getFieldEditable","FieldEditMode","Editable","Object","keys","anyControl","model","dataFieldConverted","dataModelPath","editStyleProperties","setEditStyleProperties","editStyle","isStaticEditMode","isEditable"],"sources":["./MassEdit.tsx"],"sourcesContent":["import type { Property, PropertyAnnotationValue } from \"@sap-ux/vocabularies-types\";\nimport type { DataField, DataFieldForAction, DataFieldForAnnotation, HeaderInfo } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport type ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport deepClone from \"sap/base/util/deepClone\";\nimport type { CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { compileExpression, constant, getExpressionFromAnnotation, pathInModel } from \"sap/fe/base/BindingToolkit\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type TemplateComponent from \"sap/fe/core/TemplateComponent\";\nimport Any from \"sap/fe/core/controls/Any\";\nimport { convertMetaModelContext, getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport { isDataFieldTypes } from \"sap/fe/core/converters/annotations/DataField\";\nimport type { AnnotationTableColumn } from \"sap/fe/core/converters/controls/Common/Table\";\nimport type { InternalModelContext } from \"sap/fe/core/helpers/ModelHelper\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport { isProperty } from \"sap/fe/core/helpers/TypeGuards\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { enhanceDataModelPath, getContextRelativeTargetObjectPath, getRelativePaths } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { getDisplayMode } from \"sap/fe/core/templating/DisplayModeFormatter\";\nimport { isReadOnlyExpression } from \"sap/fe/core/templating/FieldControlHelper\";\nimport {\n\tgetAssociatedTextPropertyPath,\n\tgetAssociatedUnitProperty,\n\tgetAssociatedUnitPropertyPath,\n\thasValueHelp\n} from \"sap/fe/core/templating/PropertyHelper\";\nimport { getEditMode, getRequiredExpression, isMultiValueField, isVisible } from \"sap/fe/core/templating/UIFormatters\";\nimport { getTextBinding, setEditStyleProperties } from \"sap/fe/macros/field/FieldTemplating\";\nimport type { FieldBlockProperties } from \"sap/fe/macros/internal/field/FieldStructureHelper\";\nimport type TableAPI from \"sap/fe/macros/table/TableAPI\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport type ManagedObject from \"sap/ui/base/ManagedObject\";\nimport Component from \"sap/ui/core/Component\";\nimport Library from \"sap/ui/core/Lib\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport FieldEditMode from \"sap/ui/mdc/enums/FieldEditMode\";\nimport BindingMode from \"sap/ui/model/BindingMode\";\nimport type CompositeBinding from \"sap/ui/model/CompositeBinding\";\nimport type PropertyBinding from \"sap/ui/model/PropertyBinding\";\nimport type ODataV4Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type ODataPropertyBinding from \"sap/ui/model/odata/v4/ODataPropertyBinding\";\nimport MassEditDialog from \"./MassEditDialog\";\nimport type { MassFieldProperties, SelectInfo } from \"./library\";\nimport { SpecificSelectKeys } from \"./library\";\n\ntype DataFieldTypes = DataField | DataFieldForAnnotation | DataFieldForAction;\ntype FieldInfo = {\n\tkey: string;\n\tpropertyDataModel: DataModelObjectPath<Property>;\n\ttargetProperty: Property;\n\tlabel: string;\n\tconvertedAnnotation: DataFieldTypes;\n};\ntype FieldVisibilityBindings = { isVisible: CompiledBindingToolkitExpression; editMode: CompiledBindingToolkitExpression };\n\n/**\n * Display the massEdit dialog.\n */\nexport default class MassEdit {\n\tprivate readonly table: Table;\n\n\tprivate readonly onContextMenu: boolean;\n\n\tprivate readonly onDialogClose: (() => void) | undefined;\n\n\tprivate readonly view: FEView;\n\n\tprivate contexts: ODataV4Context[];\n\n\tprivate fieldProperties: MassFieldProperties[] = [];\n\n\tprivate readonly isAdaptation: boolean;\n\n\tprivate readonly headerInfo: HeaderInfo | undefined;\n\n\tmassEditDialog: MassEditDialog | undefined;\n\n\tconstructor(props: { table: Table; onContextMenu: boolean; onClose?: () => void }) {\n\t\tconst entityTypePath = (props.table.getParent() as TableAPI).getTableDefinition().annotation.collection,\n\t\t\tmetaModel = (props.table.getModel() as ODataModel).getMetaModel();\n\n\t\tthis.table = props.table;\n\t\tthis.onContextMenu = props.onContextMenu;\n\t\tthis.onDialogClose = props.onClose;\n\t\tthis.view = CommonUtils.getTargetView(this.table);\n\t\tthis.contexts = this.fetchContextsForEdit();\n\t\tthis.isAdaptation = CommonUtils.getAppComponent(this.table).isAdaptationMode();\n\t\tthis.headerInfo = getInvolvedDataModelObjects(metaModel.getContext(entityTypePath)).targetEntityType.annotations.UI?.HeaderInfo;\n\t}\n\n\t/**\n\t * Opens the mass edit dialog if all selected contexts are editable,\n\t * otherwise a message box to confirm the selection.\n\t * @returns A promise that resolves on open of the mass edit dialog.\n\t */\n\tasync open(): Promise<void> {\n\t\ttry {\n\t\t\tconst templateComponent = Component.getOwnerComponentFor(this.view) as TemplateComponent;\n\t\t\tconst internalModelContext = this.table.getBindingContext(\"internal\") as InternalModelContext,\n\t\t\t\tinternalModelProperty = !this.onContextMenu ? \"numberOfSelectedContexts\" : \"contextmenu/numberOfSelectedContexts\",\n\t\t\t\tselectedContexts = internalModelContext.getProperty(internalModelProperty) || 0;\n\t\t\tthis.fieldProperties = await this.getFieldsPropertiesFromInfo(this.getFieldsInfo());\n\t\t\tif (!this.isAdaptation) {\n\t\t\t\t// no field to edit\n\t\t\t\tif (!this.fieldProperties.some((field) => field.visible)) {\n\t\t\t\t\tthis.noFieldInformation();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t//Some rows are not editable -> do we want to continue?\n\t\t\t\tif (this.contexts.length !== selectedContexts) {\n\t\t\t\t\tthis.contexts = await this.confirmSelection(this.contexts, selectedContexts);\n\t\t\t\t\tif (!this.contexts.length) {\n\t\t\t\t\t\t// the user doesn't want to continue\n\t\t\t\t\t\tthis.onDialogClose?.();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait templateComponent.runAsOwner(async () => {\n\t\t\t\tthis.massEditDialog = new MassEditDialog({\n\t\t\t\t\ttable: this.table,\n\t\t\t\t\tcontexts: this.contexts,\n\t\t\t\t\tfieldProperties: this.fieldProperties\n\t\t\t\t});\n\t\t\t\tconst dialog = await this.massEditDialog.create();\n\t\t\t\tdialog.attachBeforeClose(() => {\n\t\t\t\t\tthis.onDialogClose?.();\n\t\t\t\t});\n\t\t\t\tdialog.open();\n\t\t\t});\n\t\t} catch (error: unknown) {\n\t\t\tLog.error(\"Mass Edit: Something went wrong in mass edit dialog creation.\", error as string);\n\t\t}\n\t}\n\n\t/**\n\t * Opens the message box to notify no fields are editable.\n\t */\n\tprivate noFieldInformation(): void {\n\t\tconst visibleFieldsFromManifest = (this.table.getParent() as TableAPI).getTableDefinition().control.massEdit.visibleFields;\n\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.macros\") as ResourceBundle;\n\t\tlet message = \"\",\n\t\t\tmessageDetail;\n\t\tif (visibleFieldsFromManifest.length > 0) {\n\t\t\tmessage = resourceBundle.getText(\"C_MASS_EDIT_NO_EDITABLE_FIELDS_WITH_MANIFEST\", [\n\t\t\t\tthis.getResourceText(this.headerInfo?.TypeName) ?? resourceBundle.getText(\"C_MASS_EDIT_DIALOG_DEFAULT_TYPENAME\")\n\t\t\t]);\n\t\t\tmessageDetail = `<ul>\n\t\t\t${this.fieldProperties\n\t\t\t\t.reduce((fields: string[], fieldProperty) => {\n\t\t\t\t\tif (visibleFieldsFromManifest.includes(fieldProperty.propertyInfo.relativePath)) {\n\t\t\t\t\t\tfields.push(`<li>${fieldProperty.label}</li>`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fields;\n\t\t\t\t}, [])\n\t\t\t\t.join(\"\")} </ul>`;\n\t\t} else {\n\t\t\tmessage = resourceBundle.getText(\"C_MASS_EDIT_NO_EDITABLE_FIELDS_DEFAULT\");\n\t\t}\n\n\t\tMessageBox.information(message, {\n\t\t\tdetails: messageDetail,\n\t\t\tonClose: () => {\n\t\t\t\tthis.onDialogClose?.();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Opens the confirmation dialog to validate the selected contexts.\n\t * @param contexts The contexts set as updatable\n\t * @param selectedContexts  The number of selected contexts\n\t * @returns A promise that resolves the contexts to be finally managed.\n\t */\n\tprivate async confirmSelection(contexts: ODataV4Context[], selectedContexts: number): Promise<ODataV4Context[]> {\n\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.macros\") as ResourceBundle;\n\t\tconst coreResourceBundle = Library.getResourceBundleFor(\"sap.fe.core\") as ResourceBundle;\n\n\t\tconst updatableContexts = contexts.length;\n\t\treturn new Promise((resolve) => {\n\t\t\ttry {\n\t\t\t\tconst tableAPI = this.table.getParent() as TableAPI;\n\t\t\t\tconst editButton = resourceBundle.getText(\"C_MASS_EDIT_CONFIRM_BUTTON_TEXT\"),\n\t\t\t\t\tcancelButton = coreResourceBundle.getText(\"C_COMMON_OBJECT_PAGE_CANCEL\"),\n\t\t\t\t\tmetaModel = (this.table.getModel() as ODataModel).getMetaModel(),\n\t\t\t\t\ttypeName =\n\t\t\t\t\t\tthis.getResourceText(this.headerInfo?.TypeName) ?? resourceBundle.getText(\"C_MASS_EDIT_DIALOG_DEFAULT_TYPENAME\"),\n\t\t\t\t\ttypeNamePlural =\n\t\t\t\t\t\tthis.getResourceText(this.headerInfo?.TypeNamePlural) ??\n\t\t\t\t\t\tresourceBundle.getText(\"C_MASS_EDIT_DIALOG_DEFAULT_TYPENAME_PLURAL\"),\n\t\t\t\t\tmessageDetail =\n\t\t\t\t\t\tModelHelper.isDraftSupported(metaModel, this.table.data(\"targetCollectionPath\")) && tableAPI.readOnly\n\t\t\t\t\t\t\t? this.getMessageDetailForNonEditable(typeName, typeNamePlural)\n\t\t\t\t\t\t\t: \"\";\n\n\t\t\t\tMessageBox.warning(\n\t\t\t\t\tresourceBundle.getText(\"C_MASS_EDIT_CONFIRM_MESSAGE\", [\n\t\t\t\t\t\tselectedContexts - updatableContexts,\n\t\t\t\t\t\tselectedContexts,\n\t\t\t\t\t\tupdatableContexts,\n\t\t\t\t\t\ttypeNamePlural\n\t\t\t\t\t]),\n\t\t\t\t\t{\n\t\t\t\t\t\tdetails: messageDetail,\n\t\t\t\t\t\tactions: [editButton, cancelButton],\n\t\t\t\t\t\temphasizedAction: editButton,\n\t\t\t\t\t\tonClose: function (selection: string) {\n\t\t\t\t\t\t\tresolve(selection === editButton ? contexts : []);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tLog.error(error as string);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Gets the text according to an annotation.\n\t * @param annotation The annotation\n\t * @returns The text.\n\t */\n\tprivate getResourceText(annotation: PropertyAnnotationValue<String> | undefined): string | undefined {\n\t\tif (!annotation) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn CommonUtils.getTranslatedTextFromExpBindingString(\n\t\t\tcompileExpression(getExpressionFromAnnotation(annotation)) as string,\n\t\t\tthis.view\n\t\t)?.toLocaleLowerCase();\n\t}\n\n\t/**\n\t * Gets the message detail of the confirmation dialog.\n\t * @param typeName The type name of the entity set\n\t * @param typeNamePlural The type name plural of the entity set\n\t * @returns The text.\n\t */\n\tprivate getMessageDetailForNonEditable(typeName: string, typeNamePlural: string): string {\n\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.macros\") as ResourceBundle;\n\t\treturn `<p><strong>${resourceBundle.getText(\"C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_HEADER\")}</strong></p>\\n\n\t\t\t<p>${resourceBundle.getText(\"C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_REASON\", [typeNamePlural])}</p>\\n\n\t\t\t<ul>\n\t\t\t\t<li>${resourceBundle.getText(\"C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_REASON_DRAFT\", [typeName])}</li>\n\t\t\t\t<li>${resourceBundle.getText(\"C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_REASON_NON_EDITABLE\", [typeName])}</li>\n\t\t\t</ul>`;\n\t}\n\n\t/**\n\t * Gets information about the entity which is compliant for a Mass Edit.\n\t * @returns Array of the field information.\n\t */\n\n\tprivate getEntityFieldsInfo(): FieldInfo[] {\n\t\tconst tableAPI = this.table.getParent() as TableAPI;\n\t\tconst columnsData = tableAPI.getTableDefinition().columns;\n\n\t\tconst propertiesKeys = new Set(\n\t\t\tcolumnsData.reduce((fields: string[], column) => {\n\t\t\t\tif (column.type === \"Annotation\") {\n\t\t\t\t\tfields.push(column.name);\n\t\t\t\t}\n\t\t\t\treturn fields;\n\t\t\t}, [])\n\t\t);\n\t\treturn this.transformPathsToInfo(propertiesKeys);\n\t}\n\n\t/**\n\t * Gets information about the properties of the table which are compliant for a Mass Edit.\n\t * @returns Array of the field information.\n\t */\n\tprivate getFieldsInfo(): FieldInfo[] {\n\t\tconst manifestSettings = (this.table.getParent() as TableAPI).getTableDefinition().control.massEdit;\n\n\t\tconst propertiesKeys =\n\t\t\tmanifestSettings.visibleFields.length > 0\n\t\t\t\t? new Set(manifestSettings.visibleFields)\n\t\t\t\t: new Set(this.table.getColumns().map((column) => column.getPropertyKey()));\n\n\t\tif (manifestSettings.ignoredFields.length > 0) {\n\t\t\tfor (const ignoredField of manifestSettings.ignoredFields) {\n\t\t\t\tpropertiesKeys.delete(ignoredField);\n\t\t\t}\n\t\t}\n\t\treturn this.transformPathsToInfo(propertiesKeys);\n\t}\n\n\t/**\n\t * Transforms a set of property paths to an array of field information.\n\t * @param propertiesPaths The set of property paths\n\t * @returns Array of the field information.\n\t */\n\tprivate transformPathsToInfo(propertiesPaths: Set<string>): FieldInfo[] {\n\t\treturn Array.from(propertiesPaths).reduce((columnInfos: FieldInfo[], propertyPath) => {\n\t\t\tconst columnInfo = this.getFieldInfo(propertyPath);\n\t\t\tif (columnInfo) {\n\t\t\t\tcolumnInfos.push(columnInfo);\n\t\t\t}\n\t\t\treturn columnInfos;\n\t\t}, []);\n\t}\n\n\t/**\n\t * Gets information about a property.\n\t * @param propertyPath\n\t * @returns Field information.\n\t */\n\tprivate getFieldInfo(propertyPath: string): FieldInfo | undefined {\n\t\tconst columnsData = (this.table.getParent() as TableAPI).getTableDefinition().columns;\n\t\tconst metaModel = (this.table.getModel() as ODataModel).getMetaModel();\n\t\tconst entityPath = metaModel.getMetaPath(this.table.data(\"metaPath\"));\n\t\tconst entitySetDataModel = getInvolvedDataModelObjects(metaModel.getContext(entityPath));\n\t\tconst relatedColumnInfo = columnsData.find((fieldInfo) => fieldInfo.name === propertyPath && fieldInfo.type === \"Annotation\");\n\t\tif (relatedColumnInfo) {\n\t\t\tconst annotationPath = (relatedColumnInfo as AnnotationTableColumn).annotationPath;\n\t\t\tif (annotationPath && propertyPath) {\n\t\t\t\tconst propertyDataModel = enhanceDataModelPath<Property>(entitySetDataModel, propertyPath);\n\t\t\t\tconst convertedAnnotation = convertMetaModelContext(metaModel.getContext(annotationPath)) as\n\t\t\t\t\t| DataField\n\t\t\t\t\t| DataFieldForAnnotation\n\t\t\t\t\t| DataFieldForAction;\n\t\t\t\tconst targetProperty = this.getCompliantProperty(propertyDataModel, convertedAnnotation);\n\t\t\t\tif (targetProperty && entitySetDataModel.targetEntityType.entityProperties.includes(targetProperty))\n\t\t\t\t\treturn {\n\t\t\t\t\t\tkey: relatedColumnInfo.key,\n\t\t\t\t\t\tpropertyDataModel,\n\t\t\t\t\t\ttargetProperty,\n\t\t\t\t\t\tlabel: relatedColumnInfo.label ?? relatedColumnInfo.key,\n\t\t\t\t\t\tconvertedAnnotation\n\t\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Gets the property to display on the Dialog.\n\t * @param propertyDataModel The dataModelObjectPath of the column\n\t * @param annotation  The converted annotation of the column\n\t * @returns The property if it is compliant, undefined otherwise\n\t */\n\tprivate getCompliantProperty(propertyDataModel: DataModelObjectPath<Property>, annotation: DataFieldTypes): Property | undefined {\n\t\tconst targetObject = propertyDataModel.targetObject;\n\t\tlet targetProperty: Property;\n\t\tif (isProperty(targetObject)) {\n\t\t\ttargetProperty = targetObject;\n\t\t\tif (targetObject.annotations.UI?.IsImageURL) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (isDataFieldTypes(annotation) && !annotation.hasOwnProperty(\"Action\")) {\n\t\t\ttargetProperty = annotation.Value.$target;\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if the field is compliant for the MassEdit\n\t\tconst unitProperty = getAssociatedUnitProperty(targetProperty);\n\t\tif (\n\t\t\tisMultiValueField(propertyDataModel) ||\n\t\t\t(hasValueHelp(targetProperty) && targetProperty.annotations?.Common?.ValueListRelevantQualifiers) || // context dependent VH is not supported for Mass Edit.\n\t\t\t(unitProperty && hasValueHelp(unitProperty) && unitProperty.annotations?.Common?.ValueListRelevantQualifiers)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\treturn targetProperty;\n\t}\n\n\t/**\n\t * Checks if the field is hidden for the provided contexts.\n\t * @param expBinding The expression binding of the property.\n\t * @returns True if the field is hidden for all contexts, false otherwise\n\t */\n\tprivate isHiddenForContexts(expBinding: CompiledBindingToolkitExpression): boolean {\n\t\tif (expBinding === \"true\") {\n\t\t\treturn false;\n\t\t} else if (expBinding === \"false\") {\n\t\t\treturn true;\n\t\t}\n\t\tconst anyObject = new Any({ anyBoolean: expBinding });\n\t\tanyObject.setModel(this.contexts[0].getModel());\n\t\tconst isHidden = !this.contexts.find((context) => {\n\t\t\tanyObject.setBindingContext(context);\n\t\t\treturn (anyObject.getBinding(\"anyBoolean\") as PropertyBinding).getExternalValue();\n\t\t});\n\t\tanyObject.destroy();\n\t\treturn isHidden;\n\t}\n\n\t/**\n\t * Gets the selected context set as updatable.\n\t * @returns The contexts.\n\t */\n\tprivate fetchContextsForEdit(): ODataV4Context[] {\n\t\tconst internalModelContext = this.table.getBindingContext(\"internal\"),\n\t\t\tupdatableContextProperty = !this.onContextMenu ? \"updatableContexts\" : \"contextmenu/updatableContexts\";\n\t\treturn internalModelContext?.getProperty(updatableContextProperty) ?? [];\n\t}\n\n\t/**\n\t * Gets the properties of the mass edit fields.\n\t * @returns The properties of the mass edit field.\n\t */\n\tgetFieldProperties(): MassFieldProperties[] {\n\t\treturn deepClone(this.fieldProperties);\n\t}\n\n\t/**\n\t * Gets the properties of the mass edit fields from an array of field information.\n\t * @param fieldsInfo The field information.\n\t * @returns The properties of the mass edit fields.\n\t */\n\tprivate async getFieldsPropertiesFromInfo(fieldsInfo: FieldInfo[]): Promise<MassFieldProperties[]> {\n\t\tconst fieldProperties: MassFieldProperties[] = [];\n\t\tconst visibilityBindings: FieldVisibilityBindings[] = [];\n\t\tfor (const fieldInfo of fieldsInfo) {\n\t\t\tconst { targetProperty, propertyDataModel, convertedAnnotation } = fieldInfo;\n\t\t\tconst dataPropertyPath = getContextRelativeTargetObjectPath(propertyDataModel);\n\t\t\tif (dataPropertyPath) {\n\t\t\t\tconst unitPropertyPath = getAssociatedUnitPropertyPath(targetProperty);\n\t\t\t\tconst inputType = this.getInputType(convertedAnnotation, propertyDataModel);\n\t\t\t\tif (inputType && propertyDataModel.targetObject) {\n\t\t\t\t\tconst relativePath = getRelativePaths(propertyDataModel);\n\t\t\t\t\tvisibilityBindings.push({\n\t\t\t\t\t\tisVisible: compileExpression(isVisible(convertedAnnotation)),\n\t\t\t\t\t\teditMode: getEditMode(\n\t\t\t\t\t\t\ttargetProperty,\n\t\t\t\t\t\t\tpropertyDataModel,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\tconvertedAnnotation,\n\t\t\t\t\t\t\tconstant(true)\n\t\t\t\t\t\t) as CompiledBindingToolkitExpression\n\t\t\t\t\t});\n\n\t\t\t\t\tconst fieldData = {\n\t\t\t\t\t\tvisible: true,\n\t\t\t\t\t\tlabel: fieldInfo.label || (targetProperty.annotations.Common?.Label as string | undefined) || dataPropertyPath,\n\t\t\t\t\t\tisFieldRequired: getRequiredExpression(\n\t\t\t\t\t\t\ttargetProperty,\n\t\t\t\t\t\t\tconvertedAnnotation,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tpropertyDataModel\n\t\t\t\t\t\t) as CompiledBindingToolkitExpression,\n\t\t\t\t\t\tdescriptionPath: getAssociatedTextPropertyPath(propertyDataModel.targetObject),\n\t\t\t\t\t\ttextBinding: getTextBinding(propertyDataModel, {\n\t\t\t\t\t\t\tdisplayMode: getDisplayMode(targetProperty, propertyDataModel)\n\t\t\t\t\t\t}) as CompiledBindingToolkitExpression,\n\t\t\t\t\t\treadOnlyExpression: isReadOnlyExpression(targetProperty, relativePath),\n\t\t\t\t\t\tinputType,\n\t\t\t\t\t\tpropertyInfo: {\n\t\t\t\t\t\t\tnullable: targetProperty.nullable !== false,\n\t\t\t\t\t\t\tkey: fieldInfo.key,\n\t\t\t\t\t\t\trelativePath: dataPropertyPath,\n\t\t\t\t\t\t\tunitPropertyPath\n\t\t\t\t\t\t},\n\t\t\t\t\t\tselectItems: [] as SelectInfo[]\n\t\t\t\t\t};\n\t\t\t\t\tfieldProperties.push(fieldData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this.isAdaptation) {\n\t\t\tconst bindingsToResolve = ([] as CompiledBindingToolkitExpression[]).concat(\n\t\t\t\t...fieldProperties.map((fieldData, index) => [\n\t\t\t\t\tvisibilityBindings[index].isVisible,\n\t\t\t\t\tvisibilityBindings[index].editMode,\n\t\t\t\t\tfieldData.textBinding,\n\t\t\t\t\tcompileExpression(fieldData.readOnlyExpression),\n\t\t\t\t\tfieldData.isFieldRequired,\n\t\t\t\t\tcompileExpression(pathInModel(fieldData.propertyInfo.relativePath)),\n\t\t\t\t\tcompileExpression(pathInModel(fieldData.propertyInfo.unitPropertyPath))\n\t\t\t\t])\n\t\t\t);\n\t\t\tawait this.getMissingData(bindingsToResolve);\n\t\t}\n\t\tawait Promise.all(\n\t\t\tfieldProperties.map(async (fieldData, index) => {\n\t\t\t\tfieldData.visible = this.isFieldVisible(visibilityBindings[index]);\n\t\t\t\tconst runtimeSelection = !this.isAdaptation ? await this.getRuntimeSelection(fieldData) : [];\n\t\t\t\tfieldData.selectItems = [...this.getDefaultSelectOptions(fieldData), ...runtimeSelection];\n\t\t\t})\n\t\t);\n\t\treturn fieldProperties;\n\t}\n\n\t/**\n\t * Gets the properties of dialog fields.\n\t * @returns The properties.\n\t */\n\tasync generateFieldsProperties(): Promise<MassFieldProperties[]> {\n\t\treturn this.getFieldsPropertiesFromInfo(this.getFieldsInfo());\n\t}\n\n\t/**\n\t * Gets the properties of the entity.\n\t * @returns The properties.\n\t */\n\tasync generateEntityFieldsProperties(): Promise<MassFieldProperties[]> {\n\t\treturn this.getFieldsPropertiesFromInfo(this.getEntityFieldsInfo());\n\t}\n\n\t/**\n\t * Gets the missing data for the fields.\n\t * @param bindingsToResolve The binding to resolve and its property path reference\n\t * @returns A promise that resolves when the data is fetched.\n\t */\n\tprivate async getMissingData(bindingsToResolve: CompiledBindingToolkitExpression[]): Promise<undefined> {\n\t\tlet controls: ManagedObject[] = [];\n\t\tfor (const context of this.contexts) {\n\t\t\tconst objects = bindingsToResolve.map((binding) => {\n\t\t\t\tconst control = new Any({ any: binding });\n\t\t\t\tcontrol.setModel(context.getModel());\n\t\t\t\tcontrol.setBindingContext(context);\n\t\t\t\treturn control;\n\t\t\t});\n\t\t\tcontrols = [...controls, ...objects];\n\t\t}\n\n\t\tawait Promise.all(\n\t\t\tcontrols.map(async (control) => {\n\t\t\t\tconst binding = control.getBinding(\"any\") as ODataPropertyBinding | undefined;\n\t\t\t\tif (binding) {\n\t\t\t\t\tbinding.setBindingMode(BindingMode.OneTime);\n\t\t\t\t\tif (binding.isA<CompositeBinding>(\"sap.ui.model.CompositeBinding\")) {\n\t\t\t\t\t\tawait Promise.all(binding.getBindings().map((nestedBinding) => nestedBinding.requestValue?.()));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tawait binding.requestValue?.();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tfor (const control of controls) {\n\t\t\tcontrol.destroy();\n\t\t}\n\t}\n\n\t/**\n\t * Gets the selection options of a field generated by the selected contexts.\n\t * @param fieldData Data of the field used by both the static and the runtime model\n\t * @returns The select options of the field\n\t */\n\tprivate async getRuntimeSelection(fieldData: MassFieldProperties): Promise<SelectInfo[]> {\n\t\tconst distinctMap = new Set<string>();\n\t\tconst selectOptions: SelectInfo[] = [];\n\t\tif (fieldData.inputType === \"CheckBox\") {\n\t\t\treturn [];\n\t\t}\n\t\tconst anyObject = new Any({ anyText: fieldData.textBinding });\n\t\tanyObject.setModel(this.contexts[0].getModel());\n\t\tfor (const selectedContext of this.contexts) {\n\t\t\tanyObject.setBindingContext(selectedContext);\n\t\t\tconst textBinding = anyObject.getBinding(\"anyText\");\n\t\t\tif (textBinding?.isA<CompositeBinding>(\"sap.ui.model.CompositeBinding\")) {\n\t\t\t\t// If the text binding is a composite binding, we need to request the value of each binding\n\t\t\t\t// to wait for the promise to resolve before getting the value of requestUnitsOfMeasure/requestCurrencyCodes\n\t\t\t\t// for the custom units of measure and currency codes.\n\t\t\t\t// We have to set the binding mode to OneTime to avoid the binding to be updated when the context changes.\n\t\t\t\t// Indeed even if the requestUnitsOfMeasure/requestCurrencyCodes doesn't change it's trigger a PATCH request\n\t\t\t\ttextBinding.setBindingMode(BindingMode.OneTime);\n\t\t\t\tawait Promise.all(textBinding.getBindings().map((binding) => binding.requestValue?.()));\n\t\t\t}\n\t\t\tconst propertyText = (anyObject.getBinding(\"anyText\") as PropertyBinding | undefined)?.getExternalValue();\n\t\t\tif (propertyText && !distinctMap.has(propertyText)) {\n\t\t\t\tdistinctMap.add(propertyText);\n\t\t\t\tselectOptions.push({\n\t\t\t\t\ttext: propertyText,\n\t\t\t\t\tkey: propertyText,\n\t\t\t\t\tunitValue: fieldData.propertyInfo.unitPropertyPath\n\t\t\t\t\t\t? selectedContext.getObject(fieldData.propertyInfo.unitPropertyPath)\n\t\t\t\t\t\t: \"\",\n\t\t\t\t\tpropertyValue: selectedContext.getObject(fieldData.propertyInfo.relativePath)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tanyObject.destroy();\n\t\treturn selectOptions;\n\t}\n\n\t/**\n\t * Gets the default selection options of a field.\n\t * @param fieldData The property information\n\t * @returns The default select options.\n\t */\n\tprivate getDefaultSelectOptions(fieldData: MassFieldProperties): SelectInfo[] {\n\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.macros\") as ResourceBundle;\n\t\tconst keepEntry = {\n\t\t\ttext: resourceBundle.getText(\"C_MASS_EDIT_COMBOBOX_KEEP_VALUES\"),\n\t\t\tkey: SpecificSelectKeys.KeepKey\n\t\t};\n\t\tconst defaultOptions: SelectInfo[] = [];\n\t\tdefaultOptions.push(keepEntry);\n\t\tif (fieldData.inputType === \"CheckBox\") {\n\t\t\tdefaultOptions.push({ text: resourceBundle.getText(\"yes\"), key: \"true\" }, { text: resourceBundle.getText(\"no\"), key: \"false\" });\n\t\t} else {\n\t\t\tdefaultOptions.push({\n\t\t\t\ttext: resourceBundle.getText(\"C_MASS_EDIT_COMBOBOX_REPLACE_VALUES\"),\n\t\t\t\tkey: SpecificSelectKeys.ReplaceKey\n\t\t\t});\n\t\t\tif (fieldData.isFieldRequired !== \"true\") {\n\t\t\t\tdefaultOptions.push({\n\t\t\t\t\ttext: resourceBundle.getText(\"C_MASS_EDIT_COMBOBOX_CLEAR_VALUES\"),\n\t\t\t\t\tkey: SpecificSelectKeys.ClearFieldValueKey\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn defaultOptions;\n\t}\n\n\t/**\n\t * Checks if the the field is editable.\n\t * @param expBinding The expression binding of the property.\n\t * @returns Returns true if the mass edit field is editable.\n\t */\n\tprivate getFieldEditable(expBinding: CompiledBindingToolkitExpression): boolean {\n\t\tif (expBinding === FieldEditMode.Editable) {\n\t\t\treturn true;\n\t\t} else if (Object.keys(FieldEditMode).includes(expBinding as FieldEditMode)) {\n\t\t\treturn false;\n\t\t} else if (expBinding) {\n\t\t\tconst anyControl = new Any({ any: expBinding });\n\t\t\tconst model = this.contexts[0].getModel();\n\t\t\tanyControl.setModel(model);\n\t\t\tconst visible = this.contexts.some((context) => {\n\t\t\t\tanyControl.setBindingContext(context);\n\t\t\t\treturn (anyControl.getBinding(\"any\") as PropertyBinding).getExternalValue() === FieldEditMode.Editable;\n\t\t\t});\n\t\t\tanyControl.destroy();\n\t\t\treturn visible;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the input type of the field.\n\t * @param dataFieldConverted The converted annotation fo the field\n\t * @param dataModelPath The dataModelObjectPath of the property\n\t * @returns The input type.\n\t */\n\tprivate getInputType(dataFieldConverted: DataFieldTypes, dataModelPath: DataModelObjectPath<Property>): string | undefined | null {\n\t\tconst editStyleProperties = {} as FieldBlockProperties;\n\t\tsetEditStyleProperties(editStyleProperties, dataFieldConverted, dataModelPath, true);\n\t\treturn editStyleProperties?.editStyle;\n\t}\n\n\t/**\n\t * Gets the visibility of the field\n\t * This visibility is not dependent on the context when the adaptation mode is set.\n\t * @param visibilityBindings The visibility bindings of the field\n\t * @returns True if the field is visible, false otherwise\n\t */\n\tprivate isFieldVisible(visibilityBindings: FieldVisibilityBindings): boolean {\n\t\tif (this.isAdaptation) {\n\t\t\tconst isStaticEditMode = Object.keys(FieldEditMode).includes(visibilityBindings.editMode as FieldEditMode);\n\t\t\tconst isEditable = !isStaticEditMode || (isStaticEditMode && visibilityBindings.editMode === FieldEditMode.Editable);\n\t\t\treturn isEditable && visibilityBindings.isVisible !== \"false\";\n\t\t}\n\t\treturn this.getFieldEditable(visibilityBindings.editMode) && !this.isHiddenForContexts(visibilityBindings.isVisible);\n\t}\n}\n"],"mappings":"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","ignoreList":[]}