{"version":3,"file":"MassEditDialog.js","names":["MassEditDialog","props","this","updatedProperties","Set","dialog","undefined","table","contexts","isAdaptation","CommonUtils","getAppComponent","isAdaptationMode","fieldProperties","view","getTargetView","transientListBinding","generateListBinding","bindingContext","create","resourceBundle","Library","getResourceBundleFor","contextsOnError","fieldControls","_exports","_proto","prototype","listBinding","getRowBinding","getModel","bindList","getPath","getContext","$$updateGroupId","refreshInternal","async","tableTitle","getHeader","coreResourceBundle","applyButtonText","getViewData","converterType","getText","dialogContent","createContent","_jsx","Dialog","id","ID","generate","getId","contentWidth","class","horizontalScrolling","title","length","toString","content","escapeHandler","onClose","bind","beforeOpen","beginButton","Button","text","type","press","onApply","endButton","setModel","JSONModel","isEditable","bindElement","path","model","event","getSource","setBindingContext","addDependent","destroy","close","manageMessage","controller","getController","DraftStatus","FELibrary","internalModelContext","getBindingContext","setProperty","messageHandler","showMessages","onBeforeShowMessage","messages","showMessageParameters","fnGetMessageSubtitle","messageHandling","setMessageSubtitle","size","editFlow","setDraftStatus","Saved","MessageToast","show","Clear","getIsEditable","some","message","getTargets","showMessageBox","showMessageDialog","confirmButtonTxt","MessageBox","success","actions","emphasizedAction","saveChanges","fieldValuesInfo","massEditSideEffects","MassEditSideEffects","fieldPromises","manifestSettings","getParent","getTableDefinition","control","massEdit","forEach","selectedContext","idx","values","fieldControlReference","valueHasChanged","isReadOnlyOnContext","groupId","operationGroupingMode","OperationGroupingMode","ChangeSet","propertyPath","getProperty","push","then","add","catch","error","Log","executeImmediateSideEffects","refreshDescription","Promise","allSettled","executeDeferredSideEffects","Array","from","getFieldValuesInfos","result","fieldControl","fieldValues","getFieldValues","applyChanges","fieldsValuesInfo","customSave","customMassEditSave","aContexts","oUpdateData","isFieldValid","removeBoundTransitionMessages","removeUnboundTransitionMessages","isCustomSave","customFormContainer","createCustomContainer","_jsxs","_Fragment","children","getAdaptationMessage","Form","layout","ResponsiveGridLayout","labelSpanM","labelSpanL","labelSpanXL","formContainers","FormContainer","formElements","createFormElements","MessageStrip","customFragment","getExtensionAPI","loadFragment","name","contextPath","getMetaModel","getMetaPath","getResolvedPath","map","createFormElement","fieldInfo","FormElement","visible","label","Label","propertyInfo","key","fields","createFields","metaModel","context","createBindingContext","massEditField","MassEditField","getControls"],"sources":["./MassEditDialog.tsx"],"sourcesContent":["import type { PrimitiveType } from \"@sap-ux/vocabularies-types\";\nimport Log from \"sap/base/Log\";\nimport type ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport messageHandling from \"sap/fe/core/controllerextensions/messageHandler/messageHandling\";\nimport { OperationGroupingMode } from \"sap/fe/core/converters/ManifestSettings\";\nimport * as ID from \"sap/fe/core/helpers/StableIdHelper\";\nimport FELibrary from \"sap/fe/core/library\";\nimport type { SideEffectsEntityType, SideEffectsTarget, SideEffectsType } from \"sap/fe/core/services/SideEffectsServiceFactory\";\nimport type TableAPI from \"sap/fe/macros/table/TableAPI\";\nimport Button from \"sap/m/Button\";\nimport Dialog from \"sap/m/Dialog\";\nimport Label from \"sap/m/Label\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport MessageStrip from \"sap/m/MessageStrip\";\nimport MessageToast from \"sap/m/MessageToast\";\nimport type UI5Event from \"sap/ui/base/Event\";\nimport type Control from \"sap/ui/core/Control\";\nimport Library from \"sap/ui/core/Lib\";\nimport type Message from \"sap/ui/core/message/Message\";\nimport Form from \"sap/ui/layout/form/Form\";\nimport FormContainer from \"sap/ui/layout/form/FormContainer\";\nimport FormElement from \"sap/ui/layout/form/FormElement\";\nimport ResponsiveGridLayout from \"sap/ui/layout/form/ResponsiveGridLayout\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type Context from \"sap/ui/model/Context\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type ODataV4Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataListBinding from \"sap/ui/model/odata/v4/ODataListBinding\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport MassEditField from \"./MassEditField\";\nimport MassEditSideEffects from \"./MassEditSideEffects\";\nimport type { MassFieldProperties } from \"./library\";\n\ntype MassEditSideEffectsProperties = {\n\tsideEffects: SideEffectsType;\n\ttableRefresh: {\n\t\tisRequested: boolean;\n\t\ttargetEntity?: SideEffectsEntityType;\n\t};\n\timmediate: { targets: SideEffectsTarget[]; triggerAction: string | undefined };\n\tdeferred: { targets: SideEffectsTarget[]; triggerAction: string | undefined };\n};\n\ntype FieldValuesInfo = {\n\tvalues: Record<string, PrimitiveType>;\n\tfieldControlReference: { control: MassEditField; values: Record<string, PrimitiveType> }[];\n};\n\nexport type MassEditSideEffectsExecutionProperties = MassEditSideEffectsProperties & { onRowContext: boolean };\n\nexport default class MassEditDialog {\n\tprivate dialog: Dialog | undefined;\n\n\tpublic readonly table: Table;\n\n\tpublic readonly fieldProperties: MassFieldProperties[];\n\n\tprivate readonly view: FEView;\n\n\tpublic readonly contexts: ODataV4Context[];\n\n\tprivate readonly contextsOnError: ODataV4Context[];\n\n\tprivate readonly updatedProperties: Set<string> = new Set();\n\n\tprivate readonly resourceBundle: ResourceBundle;\n\n\tpublic readonly bindingContext: ODataV4Context;\n\n\tpublic readonly transientListBinding: ODataListBinding;\n\n\tprivate readonly fieldControls: MassEditField[];\n\n\tprivate readonly isAdaptation: boolean;\n\n\t/**\n\t * Constructor of the MassEdit dialog.\n\t * @param props Contains the following attributes\n\t * @param props.table The table where the changes need to be applied\n\t * @param props.contexts The row contexts where the changes need to be applied\n\t * @param props.fieldProperties The properties ot the fields\n\t */\n\tconstructor(props: { table: Table; contexts: ODataV4Context[]; fieldProperties: MassFieldProperties[] }) {\n\t\tthis.dialog = undefined;\n\t\tthis.table = props.table;\n\t\tthis.contexts = props.contexts;\n\t\tthis.isAdaptation = CommonUtils.getAppComponent(this.table).isAdaptationMode();\n\t\tthis.fieldProperties = props.fieldProperties;\n\t\tthis.view = CommonUtils.getTargetView(this.table);\n\t\tthis.transientListBinding = this.generateListBinding();\n\t\tthis.bindingContext = this.transientListBinding.create({}, true);\n\n\t\tthis.resourceBundle = Library.getResourceBundleFor(\"sap.fe.macros\") as ResourceBundle;\n\t\tthis.contextsOnError = [];\n\t\tthis.fieldControls = [];\n\t}\n\n\t/**\n\t * Creates the context for the dialog.\n\t * @returns The context.\n\t */\n\tprivate generateListBinding(): ODataListBinding {\n\t\tconst listBinding = this.table.getRowBinding();\n\t\tconst transientListBinding = (this.table.getModel() as ODataModel).bindList(\n\t\t\tlistBinding.getPath(),\n\t\t\tlistBinding.getContext(),\n\t\t\t[],\n\t\t\t[],\n\t\t\t{\n\t\t\t\t$$updateGroupId: \"submitLater\"\n\t\t\t}\n\t\t);\n\t\ttransientListBinding.refreshInternal = (): void => {\n\t\t\t/* */\n\t\t};\n\t\treturn transientListBinding;\n\t}\n\n\t/**\n\t * Creates the dialog.\n\t * @returns The instance of dialog.\n\t */\n\tasync create(): Promise<Dialog> {\n\t\tif (!this.dialog) {\n\t\t\tconst tableTitle = this.table.getHeader();\n\t\t\tconst coreResourceBundle = Library.getResourceBundleFor(\"sap.fe.core\") as ResourceBundle;\n\t\t\tconst applyButtonText =\n\t\t\t\tthis.view.getViewData().converterType === \"ListReport\"\n\t\t\t\t\t? this.resourceBundle.getText(\"C_MASS_EDIT_SAVE_BUTTON_TEXT\")\n\t\t\t\t\t: coreResourceBundle.getText(\"C_COMMON_DIALOG_OK\");\n\t\t\tconst dialogContent = await this.createContent();\n\t\t\tconst dialog = (\n\t\t\t\t<Dialog\n\t\t\t\t\tdt:designtime=\"sap/fe/macros/table/massEdit/designtime/MassEdit.designtime\"\n\t\t\t\t\tid={ID.generate([this.table.getId(), \"MED_\", \"Dialog\"])}\n\t\t\t\t\tcontentWidth=\"27rem\"\n\t\t\t\t\tclass=\"sapUiContentPadding\"\n\t\t\t\t\thorizontalScrolling=\"false\"\n\t\t\t\t\ttitle={\n\t\t\t\t\t\ttableTitle\n\t\t\t\t\t\t\t? this.resourceBundle.getText(\"C_MASS_EDIT_DIALOG_TITLE_TYPENAME_PLURAL\", [\n\t\t\t\t\t\t\t\t\ttableTitle,\n\t\t\t\t\t\t\t\t\tthis.contexts.length.toString()\n\t\t\t\t\t\t\t  ])\n\t\t\t\t\t\t\t: this.resourceBundle.getText(\"C_MASS_EDIT_DIALOG_TITLE_WITHOUT_TYPENAME_PLURAL\", [\n\t\t\t\t\t\t\t\t\tthis.contexts.length.toString()\n\t\t\t\t\t\t\t  ])\n\t\t\t\t\t}\n\t\t\t\t\tcontent={dialogContent}\n\t\t\t\t\tescapeHandler={this.onClose.bind(this)}\n\t\t\t\t\tbeforeOpen={this.beforeOpen.bind(this)}\n\t\t\t\t\tbeginButton={<Button text={applyButtonText} type=\"Emphasized\" press={this.onApply.bind(this)} />}\n\t\t\t\t\tendButton={<Button text={coreResourceBundle.getText(\"C_COMMON_OBJECT_PAGE_CANCEL\")} press={this.onClose.bind(this)} />}\n\t\t\t\t/>\n\t\t\t);\n\t\t\tthis.dialog = dialog;\n\t\t\t// We don't want to inherit from the PageComponent for the ui model -> into this dialog, fields are editable\n\t\t\tdialog.setModel(new JSONModel({ isEditable: true }), \"ui\");\n\t\t\tdialog.bindElement({\n\t\t\t\tpath: \"/\",\n\t\t\t\tmodel: \"ui\"\n\t\t\t});\n\t\t\treturn dialog;\n\t\t}\n\t\treturn this.dialog;\n\t}\n\n\t/**\n\t * Sets the last configuration before opening the dialog:\n\t *  - set the runtime model\n\t *  - set the OdataModel\n\t *  - add the dialog as dependent of the table.\n\t * @param event The ui5 event\n\t */\n\tprivate beforeOpen(event: UI5Event<{}, Dialog>): void {\n\t\tconst dialog = event.getSource();\n\t\tdialog.setModel(this.table.getModel());\n\t\tdialog.setBindingContext(this.bindingContext);\n\t\tthis.table.addDependent(dialog);\n\t}\n\n\t/**\n\t * Closes and destroys the dialog.\n\t */\n\tprivate onClose(): void {\n\t\tthis.transientListBinding.destroy();\n\t\tif (this.dialog) {\n\t\t\tthis.dialog.close();\n\t\t\tthis.dialog.destroy();\n\t\t}\n\t}\n\n\t/**\n\t * Manages the messages according to the contexts on error.\n\t */\n\tasync manageMessage(): Promise<void> {\n\t\tconst coreResourceBundle = Library.getResourceBundleFor(\"sap.fe.core\") as ResourceBundle;\n\t\tconst controller = this.view.getController();\n\t\tconst DraftStatus = FELibrary.DraftStatus;\n\t\tconst internalModelContext = this.view.getBindingContext(\"internal\");\n\t\tinternalModelContext?.setProperty(\"getBoundMessagesForMassEdit\", true);\n\t\tawait controller.messageHandler.showMessages({\n\t\t\tonBeforeShowMessage: (\n\t\t\t\tmessages: Message[],\n\t\t\t\tshowMessageParameters: {\n\t\t\t\t\tfnGetMessageSubtitle?: Function;\n\t\t\t\t\tshowMessageBox?: boolean;\n\t\t\t\t\tshowMessageDialog?: boolean;\n\t\t\t\t\tfilteredMessages?: Message[];\n\t\t\t\t\tshowChangeSetErrorDialog?: boolean;\n\t\t\t\t}\n\t\t\t) => {\n\t\t\t\tshowMessageParameters.fnGetMessageSubtitle = messageHandling.setMessageSubtitle.bind({}, this.table, this.contexts);\n\n\t\t\t\tif (!this.contextsOnError.length) {\n\t\t\t\t\tif (this.updatedProperties.size > 0) {\n\t\t\t\t\t\t//There is at least one new value set\n\t\t\t\t\t\tcontroller.editFlow.setDraftStatus(DraftStatus.Saved);\n\t\t\t\t\t\tif (this.view.getViewData().converterType === \"ListReport\") {\n\t\t\t\t\t\t\tMessageToast.show(this.resourceBundle.getText(\"C_MASS_EDIT_SUCCESS_TOAST\"));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tMessageToast.show(this.resourceBundle.getText(\"C_OBJECT_PAGE_MASS_EDIT_SUCCESS_TOAST\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tMessageToast.show(this.resourceBundle.getText(\"C_MASS_EDIT_NO_CHANGE\"));\n\t\t\t\t\t}\n\t\t\t\t} else if (this.contextsOnError.length < this.contexts.length) {\n\t\t\t\t\tcontroller.editFlow.setDraftStatus(DraftStatus.Saved);\n\t\t\t\t} else if (this.contextsOnError.length === this.contexts.length) {\n\t\t\t\t\tcontroller.editFlow.setDraftStatus(DraftStatus.Clear);\n\t\t\t\t}\n\n\t\t\t\tif (CommonUtils.getIsEditable(controller) && !messages.some((message) => !message.getTargets())) {\n\t\t\t\t\tshowMessageParameters.showMessageBox = false;\n\t\t\t\t\tshowMessageParameters.showMessageDialog = false;\n\t\t\t\t}\n\t\t\t\treturn showMessageParameters;\n\t\t\t}\n\t\t});\n\n\t\tif (!!this.contextsOnError.length && this.contextsOnError.length < this.contexts.length) {\n\t\t\tconst confirmButtonTxt = coreResourceBundle.getText(\"C_COMMON_DIALOG_OK\");\n\t\t\tMessageBox.success(\n\t\t\t\tthis.resourceBundle.getText(\"C_MASS_EDIT_CHANGES_WITH_ERROR\", [\n\t\t\t\t\tthis.contexts.length - this.contextsOnError.length,\n\t\t\t\t\tthis.contexts.length\n\t\t\t\t]),\n\t\t\t\t{\n\t\t\t\t\tactions: [confirmButtonTxt],\n\t\t\t\t\temphasizedAction: confirmButtonTxt\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\tinternalModelContext?.setProperty(\"getBoundMessagesForMassEdit\", false);\n\t}\n\n\t/**\n\t * Saves the relevant contexts and refreshes the associated properties.\n\t * @param fieldValuesInfo The information of the values for all mass edit fields.\n\t * @returns A Promise.\n\t */\n\tprivate async saveChanges(fieldValuesInfo: FieldValuesInfo): Promise<void> {\n\t\tconst massEditSideEffects = new MassEditSideEffects(this); // Use the first line as reference context to calculate the map of side effects\n\t\tconst fieldPromises: Promise<unknown>[] = [];\n\t\tconst manifestSettings = (this.table.getParent() as TableAPI).getTableDefinition().control.massEdit;\n\n\t\tthis.contexts.forEach((selectedContext: ODataV4Context, idx: number) => {\n\t\t\tfor (const { control, values } of fieldValuesInfo.fieldControlReference) {\n\t\t\t\tlet valueHasChanged = false;\n\t\t\t\tif (!control.isReadOnlyOnContext(selectedContext)) {\n\t\t\t\t\tconst groupId = manifestSettings.operationGroupingMode === OperationGroupingMode.ChangeSet ? \"$auto\" : `$auto.${idx}`;\n\t\t\t\t\tfor (const propertyPath in values) {\n\t\t\t\t\t\tif (selectedContext.getProperty(propertyPath) !== values[propertyPath]) {\n\t\t\t\t\t\t\tvalueHasChanged = true;\n\t\t\t\t\t\t\tfieldPromises.push(\n\t\t\t\t\t\t\t\tselectedContext\n\t\t\t\t\t\t\t\t\t.setProperty(propertyPath, values[propertyPath], groupId)\n\t\t\t\t\t\t\t\t\t.then(() => this.updatedProperties.add(propertyPath))\n\t\t\t\t\t\t\t\t\t.catch((error: unknown) => {\n\t\t\t\t\t\t\t\t\t\tthis.contextsOnError.push(selectedContext);\n\t\t\t\t\t\t\t\t\t\tLog.error(\"Mass Edit: Something went wrong in updating entries.\", error as string);\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tfieldPromises.push(massEditSideEffects.executeImmediateSideEffects(selectedContext, propertyPath, groupId));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (valueHasChanged) {\n\t\t\t\t\t\tfieldPromises.push(massEditSideEffects.refreshDescription(control, selectedContext, groupId));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tawait Promise.allSettled(fieldPromises);\n\t\tif (this.updatedProperties.size) {\n\t\t\tmassEditSideEffects.executeDeferredSideEffects(new Set([\"genericField\", ...Array.from(this.updatedProperties)]));\n\t\t}\n\t}\n\n\t/**\n\t * Gets the information of the values for all mass edit fields.\n\t * @returns The information.\n\t */\n\tprivate getFieldValuesInfos(): FieldValuesInfo {\n\t\tconst result = {\n\t\t\tvalues: {},\n\t\t\tfieldControlReference: []\n\t\t} as FieldValuesInfo;\n\t\tfor (const fieldControl of this.fieldControls) {\n\t\t\tconst fieldValues = fieldControl.getFieldValues();\n\t\t\tresult.values = { ...result.values, ...fieldValues };\n\t\t\tresult.fieldControlReference.push({ control: fieldControl, values: fieldValues });\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Updates the table fields according to the dialog entries.\n\t * @returns `true` if the custom save is executed, `false` otherwise.\n\t */\n\tasync applyChanges(): Promise<boolean> {\n\t\t//We want to skip the patch handler(specific workflow done into the EditFlow) since the patch is managed here\n\t\tthis.view.getBindingContext(\"internal\")?.setProperty(\"skipPatchHandlers\", true);\n\n\t\tconst fieldsValuesInfo = this.getFieldValuesInfos();\n\t\tlet customSave = false;\n\t\ttry {\n\t\t\tcustomSave = await this.view\n\t\t\t\t.getController()\n\t\t\t\t.editFlow.customMassEditSave({ aContexts: this.contexts, oUpdateData: fieldsValuesInfo.values });\n\t\t} catch (error) {\n\t\t\tLog.error(\"Mass Edit: Something went wrong in updating entries.\", error as string);\n\t\t}\n\t\tif (!customSave) {\n\t\t\tawait this.saveChanges(fieldsValuesInfo);\n\t\t}\n\t\tthis.view.getBindingContext(\"internal\")?.setProperty(\"skipPatchHandlers\", false);\n\t\treturn customSave;\n\t}\n\n\t/**\n\t * Manages the press on the Apply Button.\n\t * @returns A promise.\n\t */\n\tprivate async onApply(): Promise<void> {\n\t\tif (this.fieldControls.some((fieldControl) => !fieldControl.isFieldValid())) {\n\t\t\treturn;\n\t\t}\n\t\tif (!this.isAdaptation) {\n\t\t\tmessageHandling.removeBoundTransitionMessages();\n\t\t\tmessageHandling.removeUnboundTransitionMessages();\n\t\t\tconst isCustomSave = await this.applyChanges();\n\t\t\tif (!isCustomSave) {\n\t\t\t\tthis.manageMessage();\n\t\t\t}\n\t\t}\n\t\tthis.onClose();\n\t}\n\n\t/**\n\t * Creates the dialog content.\n\t * @returns Promise returning instance of fragment.\n\t */\n\n\tprivate async createContent(): Promise<Form> {\n\t\tconst customFormContainer = await this.createCustomContainer();\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{this.getAdaptationMessage()}\n\t\t\t\t<Form>\n\t\t\t\t\t{{\n\t\t\t\t\t\tlayout: <ResponsiveGridLayout labelSpanM=\"12\" labelSpanL=\"12\" labelSpanXL=\"12\" />,\n\t\t\t\t\t\tformContainers: (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{customFormContainer}\n\t\t\t\t\t\t\t\t<FormContainer>\n\t\t\t\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t\t\t\tformElements: this.createFormElements()\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t</FormContainer>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)\n\t\t\t\t\t}}\n\t\t\t\t</Form>\n\t\t\t</>\n\t\t);\n\t}\n\n\t/**\n\t * Gets the adaptation message.\n\t * @returns The message strip if the dialog is displayed in adaptation mode.\n\t */\n\tprivate getAdaptationMessage(): MessageStrip | undefined {\n\t\tif (this.isAdaptation) {\n\t\t\treturn <MessageStrip text={this.resourceBundle.getText(\"C_MASS_EDIT_ADAPTATION_MODE\")} />;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Creates the custom form container according to the manifest settings.\n\t * @returns The custom form container.\n\t */\n\tprivate async createCustomContainer(): Promise<FormContainer | undefined> {\n\t\tconst manifestSettings = (this.table.getParent() as TableAPI).getTableDefinition().control.massEdit;\n\n\t\treturn manifestSettings.customFragment\n\t\t\t? ((await this.view\n\t\t\t\t\t.getController()\n\t\t\t\t\t.getExtensionAPI()\n\t\t\t\t\t.loadFragment({\n\t\t\t\t\t\tid: \"customMassEdit\",\n\t\t\t\t\t\tname: manifestSettings.customFragment,\n\t\t\t\t\t\tcontextPath: this.transientListBinding\n\t\t\t\t\t\t\t.getModel()\n\t\t\t\t\t\t\t.getMetaModel()\n\t\t\t\t\t\t\t.getMetaPath(this.transientListBinding.getResolvedPath())\n\t\t\t\t\t})) as FormContainer)\n\t\t\t: undefined;\n\t}\n\n\t/**\n\t * Creates the form elements of the dialog.\n\t * @returns The form elements.\n\t */\n\tprivate createFormElements(): FormElement[] {\n\t\treturn this.fieldProperties.map(this.createFormElement.bind(this));\n\t}\n\n\t/**\n\t * Creates the form elements of a Field.\n\t * @param fieldInfo The field properties\n\t * @returns The form element.\n\t */\n\tprivate createFormElement(fieldInfo: MassFieldProperties): FormElement {\n\t\treturn (\n\t\t\t<FormElement visible={fieldInfo.visible}>\n\t\t\t\t{{\n\t\t\t\t\tlabel: <Label text={fieldInfo.label} id={ID.generate([\"MED_\", fieldInfo.propertyInfo.key, \"Label\"])} />,\n\t\t\t\t\tfields: this.createFields(fieldInfo)\n\t\t\t\t}}\n\t\t\t</FormElement>\n\t\t);\n\t}\n\n\t/**\n\t * Creates the fields of the dialog.\n\t * @param fieldInfo The field properties\n\t * @returns The fields.\n\t */\n\tprivate createFields(fieldInfo: MassFieldProperties): Control[] {\n\t\tconst metaModel = (this.table.getModel() as ODataModel).getMetaModel();\n\t\tconst context = metaModel.createBindingContext(metaModel.getMetaPath(this.bindingContext.getPath())) as Context;\n\t\tconst massEditField = new MassEditField(fieldInfo, context);\n\t\tthis.fieldControls.push(massEditField);\n\t\treturn massEditField.getControls();\n\t}\n}\n"],"mappings":"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","ignoreList":[]}