{"version":3,"names":["MassEdit","props","fieldProperties","entityTypePath","table","getParent","getTableDefinition","annotation","collection","metaModel","getModel","getMetaModel","onContextMenu","onDialogClose","onClose","view","CommonUtils","getTargetView","contexts","fetchContextsForEdit","isAdaptation","getAppComponent","isAdaptationMode","headerInfo","getInvolvedDataModelObjects","getContext","targetEntityType","annotations","UI","HeaderInfo","_exports","_proto","prototype","open","templateComponent","Component","getOwnerComponentFor","internalModelContext","getBindingContext","internalModelProperty","selectedContexts","getProperty","getFieldsPropertiesFromInfo","getFieldsInfo","some","field","visible","noFieldInformation","length","confirmSelection","runAsOwner","massEditDialog","MassEditDialog","dialog","create","attachBeforeClose","error","Log","visibleFieldsFromManifest","control","massEdit","visibleFields","resourceBundle","Library","getResourceBundleFor","message","messageDetail","getText","getResourceText","TypeName","reduce","fields","fieldProperty","includes","propertyInfo","relativePath","push","label","join","MessageBox","information","details","coreResourceBundle","updatableContexts","Promise","resolve","tableAPI","editButton","cancelButton","typeName","typeNamePlural","TypeNamePlural","ModelHelper","isDraftSupported","data","readOnly","getMessageDetailForNonEditable","warning","actions","emphasizedAction","selection","undefined","getTranslatedTextFromExpBindingString","compileExpression","getExpressionFromAnnotation","toLocaleLowerCase","getEntityFieldsInfo","columnsData","columns","propertiesKeys","Set","column","type","name","transformPathsToInfo","manifestSettings","getColumns","map","getPropertyKey","ignoredFields","ignoredField","delete","propertiesPaths","Array","from","columnInfos","propertyPath","columnInfo","getFieldInfo","entityPath","getMetaPath","entitySetDataModel","relatedColumnInfo","find","fieldInfo","annotationPath","propertyDataModel","enhanceDataModelPath","convertedAnnotation","convertMetaModelContext","targetProperty","getCompliantProperty","entityProperties","key","targetObject","isProperty","IsImageURL","isDataFieldTypes","hasOwnProperty","Value","$target","unitProperty","getAssociatedUnitProperty","isMultiValueField","hasValueHelp","Common","ValueListRelevantQualifiers","isHiddenForContexts","expBinding","anyObject","Any","anyBoolean","setModel","isHidden","context","setBindingContext","getBinding","getExternalValue","destroy","updatableContextProperty","getFieldProperties","deepClone","fieldsInfo","visibilityBindings","dataPropertyPath","getContextRelativeTargetObjectPath","unitPropertyPath","getAssociatedUnitPropertyPath","inputType","getInputType","getRelativePaths","isVisible","editMode","getEditMode","constant","fieldData","Label","isFieldRequired","getRequiredExpression","descriptionPath","getAssociatedTextPropertyPath","textBinding","getTextBinding","displayMode","getDisplayMode","readOnlyExpression","isReadOnlyExpression","nullable","selectItems","bindingsToResolve","concat","index","pathInModel","getMissingData","all","isFieldVisible","runtimeSelection","getRuntimeSelection","getDefaultSelectOptions","generateFieldsProperties","generateEntityFieldsProperties","controls","objects","binding","any","setBindingMode","BindingMode","OneTime","isA","getBindings","nestedBinding","requestValue","distinctMap","selectOptions","anyText","selectedContext","propertyText","has","add","text","unitValue","getObject","propertyValue","keepEntry","SpecificSelectKeys","KeepKey","defaultOptions","ReplaceKey","ClearFieldValueKey","getFieldEditable","FieldEditMode","Editable","Object","keys","anyControl","model","dataFieldConverted","dataModelPath","editStyleProperties","setEditStyleProperties","editStyle","isStaticEditMode","isEditable"],"sourceRoot":".","sources":["MassEdit.tsx"],"sourcesContent":["import type { Property, PropertyAnnotationValue } from \"@sap-ux/vocabularies-types\";\nimport type { DataField, DataFieldForAction, DataFieldForAnnotation, HeaderInfo } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport type ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport deepClone from \"sap/base/util/deepClone\";\nimport type { CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { compileExpression, constant, getExpressionFromAnnotation, pathInModel } from \"sap/fe/base/BindingToolkit\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type TemplateComponent from \"sap/fe/core/TemplateComponent\";\nimport Any from \"sap/fe/core/controls/Any\";\nimport { convertMetaModelContext, getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport { isDataFieldTypes } from \"sap/fe/core/converters/annotations/DataField\";\nimport type { AnnotationTableColumn } from \"sap/fe/core/converters/controls/Common/Table\";\nimport type { InternalModelContext } from \"sap/fe/core/helpers/ModelHelper\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport { isProperty } from \"sap/fe/core/helpers/TypeGuards\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { enhanceDataModelPath, getContextRelativeTargetObjectPath, getRelativePaths } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { getDisplayMode } from \"sap/fe/core/templating/DisplayModeFormatter\";\nimport { isReadOnlyExpression } from \"sap/fe/core/templating/FieldControlHelper\";\nimport {\n\tgetAssociatedTextPropertyPath,\n\tgetAssociatedUnitProperty,\n\tgetAssociatedUnitPropertyPath,\n\thasValueHelp\n} from \"sap/fe/core/templating/PropertyHelper\";\nimport { getEditMode, getRequiredExpression, isMultiValueField, isVisible } from \"sap/fe/core/templating/UIFormatters\";\nimport { getTextBinding, setEditStyleProperties } from \"sap/fe/macros/field/FieldTemplating\";\nimport type { FieldBlockProperties } from \"sap/fe/macros/internal/field/FieldStructureHelper\";\nimport type TableAPI from \"sap/fe/macros/table/TableAPI\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport type ManagedObject from \"sap/ui/base/ManagedObject\";\nimport Component from \"sap/ui/core/Component\";\nimport Library from \"sap/ui/core/Lib\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport FieldEditMode from \"sap/ui/mdc/enums/FieldEditMode\";\nimport BindingMode from \"sap/ui/model/BindingMode\";\nimport type CompositeBinding from \"sap/ui/model/CompositeBinding\";\nimport type PropertyBinding from \"sap/ui/model/PropertyBinding\";\nimport type ODataV4Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type ODataPropertyBinding from \"sap/ui/model/odata/v4/ODataPropertyBinding\";\nimport MassEditDialog from \"./MassEditDialog\";\nimport type { MassFieldProperties, SelectInfo } from \"./library\";\nimport { SpecificSelectKeys } from \"./library\";\n\ntype DataFieldTypes = DataField | DataFieldForAnnotation | DataFieldForAction;\ntype FieldInfo = {\n\tkey: string;\n\tpropertyDataModel: DataModelObjectPath<Property>;\n\ttargetProperty: Property;\n\tlabel: string;\n\tconvertedAnnotation: DataFieldTypes;\n};\ntype FieldVisibilityBindings = { isVisible: CompiledBindingToolkitExpression; editMode: CompiledBindingToolkitExpression };\n\n/**\n * Display the massEdit dialog.\n */\nexport default class MassEdit {\n\tprivate readonly table: Table;\n\n\tprivate readonly onContextMenu: boolean;\n\n\tprivate readonly onDialogClose: (() => void) | undefined;\n\n\tprivate readonly view: FEView;\n\n\tprivate contexts: ODataV4Context[];\n\n\tprivate fieldProperties: MassFieldProperties[] = [];\n\n\tprivate readonly isAdaptation: boolean;\n\n\tprivate readonly headerInfo: HeaderInfo | undefined;\n\n\tmassEditDialog: MassEditDialog | undefined;\n\n\tconstructor(props: { table: Table; onContextMenu: boolean; onClose?: () => void }) {\n\t\tconst entityTypePath = (props.table.getParent() as TableAPI).getTableDefinition().annotation.collection,\n\t\t\tmetaModel = (props.table.getModel() as ODataModel).getMetaModel();\n\n\t\tthis.table = props.table;\n\t\tthis.onContextMenu = props.onContextMenu;\n\t\tthis.onDialogClose = props.onClose;\n\t\tthis.view = CommonUtils.getTargetView(this.table);\n\t\tthis.contexts = this.fetchContextsForEdit();\n\t\tthis.isAdaptation = CommonUtils.getAppComponent(this.table).isAdaptationMode();\n\t\tthis.headerInfo = getInvolvedDataModelObjects(metaModel.getContext(entityTypePath)).targetEntityType.annotations.UI?.HeaderInfo;\n\t}\n\n\t/**\n\t * Opens the mass edit dialog if all selected contexts are editable,\n\t * otherwise a message box to confirm the selection.\n\t * @returns A promise that resolves on open of the mass edit dialog.\n\t */\n\tasync open(): Promise<void> {\n\t\ttry {\n\t\t\tconst templateComponent = Component.getOwnerComponentFor(this.view) as TemplateComponent;\n\t\t\tconst internalModelContext = this.table.getBindingContext(\"internal\") as InternalModelContext,\n\t\t\t\tinternalModelProperty = !this.onContextMenu ? \"numberOfSelectedContexts\" : \"contextmenu/numberOfSelectedContexts\",\n\t\t\t\tselectedContexts = internalModelContext.getProperty(internalModelProperty) || 0;\n\t\t\tthis.fieldProperties = await this.getFieldsPropertiesFromInfo(this.getFieldsInfo());\n\t\t\tif (!this.isAdaptation) {\n\t\t\t\t// no field to edit\n\t\t\t\tif (!this.fieldProperties.some((field) => field.visible)) {\n\t\t\t\t\tthis.noFieldInformation();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t//Some rows are not editable -> do we want to continue?\n\t\t\t\tif (this.contexts.length !== selectedContexts) {\n\t\t\t\t\tthis.contexts = await this.confirmSelection(this.contexts, selectedContexts);\n\t\t\t\t\tif (!this.contexts.length) {\n\t\t\t\t\t\t// the user doesn't want to continue\n\t\t\t\t\t\tthis.onDialogClose?.();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait templateComponent.runAsOwner(async () => {\n\t\t\t\tthis.massEditDialog = new MassEditDialog({\n\t\t\t\t\ttable: this.table,\n\t\t\t\t\tcontexts: this.contexts,\n\t\t\t\t\tfieldProperties: this.fieldProperties\n\t\t\t\t});\n\t\t\t\tconst dialog = await this.massEditDialog.create();\n\t\t\t\tdialog.attachBeforeClose(() => {\n\t\t\t\t\tthis.onDialogClose?.();\n\t\t\t\t});\n\t\t\t\tdialog.open();\n\t\t\t});\n\t\t} catch (error: unknown) {\n\t\t\tLog.error(\"Mass Edit: Something went wrong in mass edit dialog creation.\", error as string);\n\t\t}\n\t}\n\n\t/**\n\t * Opens the message box to notify no fields are editable.\n\t */\n\tprivate noFieldInformation(): void {\n\t\tconst visibleFieldsFromManifest = (this.table.getParent() as TableAPI).getTableDefinition().control.massEdit.visibleFields;\n\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.macros\") as ResourceBundle;\n\t\tlet message = \"\",\n\t\t\tmessageDetail;\n\t\tif (visibleFieldsFromManifest.length > 0) {\n\t\t\tmessage = resourceBundle.getText(\"C_MASS_EDIT_NO_EDITABLE_FIELDS_WITH_MANIFEST\", [\n\t\t\t\tthis.getResourceText(this.headerInfo?.TypeName) ?? resourceBundle.getText(\"C_MASS_EDIT_DIALOG_DEFAULT_TYPENAME\")\n\t\t\t]);\n\t\t\tmessageDetail = `<ul>\n\t\t\t${this.fieldProperties\n\t\t\t\t.reduce((fields: string[], fieldProperty) => {\n\t\t\t\t\tif (visibleFieldsFromManifest.includes(fieldProperty.propertyInfo.relativePath)) {\n\t\t\t\t\t\tfields.push(`<li>${fieldProperty.label}</li>`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fields;\n\t\t\t\t}, [])\n\t\t\t\t.join(\"\")} </ul>`;\n\t\t} else {\n\t\t\tmessage = resourceBundle.getText(\"C_MASS_EDIT_NO_EDITABLE_FIELDS_DEFAULT\");\n\t\t}\n\n\t\tMessageBox.information(message, {\n\t\t\tdetails: messageDetail,\n\t\t\tonClose: () => {\n\t\t\t\tthis.onDialogClose?.();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Opens the confirmation dialog to validate the selected contexts.\n\t * @param contexts The contexts set as updatable\n\t * @param selectedContexts  The number of selected contexts\n\t * @returns A promise that resolves the contexts to be finally managed.\n\t */\n\tprivate async confirmSelection(contexts: ODataV4Context[], selectedContexts: number): Promise<ODataV4Context[]> {\n\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.macros\") as ResourceBundle;\n\t\tconst coreResourceBundle = Library.getResourceBundleFor(\"sap.fe.core\") as ResourceBundle;\n\n\t\tconst updatableContexts = contexts.length;\n\t\treturn new Promise((resolve) => {\n\t\t\ttry {\n\t\t\t\tconst tableAPI = this.table.getParent() as TableAPI;\n\t\t\t\tconst editButton = resourceBundle.getText(\"C_MASS_EDIT_CONFIRM_BUTTON_TEXT\"),\n\t\t\t\t\tcancelButton = coreResourceBundle.getText(\"C_COMMON_OBJECT_PAGE_CANCEL\"),\n\t\t\t\t\tmetaModel = (this.table.getModel() as ODataModel).getMetaModel(),\n\t\t\t\t\ttypeName =\n\t\t\t\t\t\tthis.getResourceText(this.headerInfo?.TypeName) ?? resourceBundle.getText(\"C_MASS_EDIT_DIALOG_DEFAULT_TYPENAME\"),\n\t\t\t\t\ttypeNamePlural =\n\t\t\t\t\t\tthis.getResourceText(this.headerInfo?.TypeNamePlural) ??\n\t\t\t\t\t\tresourceBundle.getText(\"C_MASS_EDIT_DIALOG_DEFAULT_TYPENAME_PLURAL\"),\n\t\t\t\t\tmessageDetail =\n\t\t\t\t\t\tModelHelper.isDraftSupported(metaModel, this.table.data(\"targetCollectionPath\")) && tableAPI.readOnly\n\t\t\t\t\t\t\t? this.getMessageDetailForNonEditable(typeName, typeNamePlural)\n\t\t\t\t\t\t\t: \"\";\n\n\t\t\t\tMessageBox.warning(\n\t\t\t\t\tresourceBundle.getText(\"C_MASS_EDIT_CONFIRM_MESSAGE\", [\n\t\t\t\t\t\tselectedContexts - updatableContexts,\n\t\t\t\t\t\tselectedContexts,\n\t\t\t\t\t\tupdatableContexts,\n\t\t\t\t\t\ttypeNamePlural\n\t\t\t\t\t]),\n\t\t\t\t\t{\n\t\t\t\t\t\tdetails: messageDetail,\n\t\t\t\t\t\tactions: [editButton, cancelButton],\n\t\t\t\t\t\temphasizedAction: editButton,\n\t\t\t\t\t\tonClose: function (selection: string) {\n\t\t\t\t\t\t\tresolve(selection === editButton ? contexts : []);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tLog.error(error as string);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Gets the text according to an annotation.\n\t * @param annotation The annotation\n\t * @returns The text.\n\t */\n\tprivate getResourceText(annotation: PropertyAnnotationValue<String> | undefined): string | undefined {\n\t\tif (!annotation) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn CommonUtils.getTranslatedTextFromExpBindingString(\n\t\t\tcompileExpression(getExpressionFromAnnotation(annotation)) as string,\n\t\t\tthis.view\n\t\t)?.toLocaleLowerCase();\n\t}\n\n\t/**\n\t * Gets the message detail of the confirmation dialog.\n\t * @param typeName The type name of the entity set\n\t * @param typeNamePlural The type name plural of the entity set\n\t * @returns The text.\n\t */\n\tprivate getMessageDetailForNonEditable(typeName: string, typeNamePlural: string): string {\n\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.macros\") as ResourceBundle;\n\t\treturn `<p><strong>${resourceBundle.getText(\"C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_HEADER\")}</strong></p>\\n\n\t\t\t<p>${resourceBundle.getText(\"C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_REASON\", [typeNamePlural])}</p>\\n\n\t\t\t<ul>\n\t\t\t\t<li>${resourceBundle.getText(\"C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_REASON_DRAFT\", [typeName])}</li>\n\t\t\t\t<li>${resourceBundle.getText(\"C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_REASON_NON_EDITABLE\", [typeName])}</li>\n\t\t\t</ul>`;\n\t}\n\n\t/**\n\t * Gets information about the entity which is compliant for a Mass Edit.\n\t * @returns Array of the field information.\n\t */\n\n\tprivate getEntityFieldsInfo(): FieldInfo[] {\n\t\tconst tableAPI = this.table.getParent() as TableAPI;\n\t\tconst columnsData = tableAPI.getTableDefinition().columns;\n\n\t\tconst propertiesKeys = new Set(\n\t\t\tcolumnsData.reduce((fields: string[], column) => {\n\t\t\t\tif (column.type === \"Annotation\") {\n\t\t\t\t\tfields.push(column.name);\n\t\t\t\t}\n\t\t\t\treturn fields;\n\t\t\t}, [])\n\t\t);\n\t\treturn this.transformPathsToInfo(propertiesKeys);\n\t}\n\n\t/**\n\t * Gets information about the properties of the table which are compliant for a Mass Edit.\n\t * @returns Array of the field information.\n\t */\n\tprivate getFieldsInfo(): FieldInfo[] {\n\t\tconst manifestSettings = (this.table.getParent() as TableAPI).getTableDefinition().control.massEdit;\n\n\t\tconst propertiesKeys =\n\t\t\tmanifestSettings.visibleFields.length > 0\n\t\t\t\t? new Set(manifestSettings.visibleFields)\n\t\t\t\t: new Set(this.table.getColumns().map((column) => column.getPropertyKey()));\n\n\t\tif (manifestSettings.ignoredFields.length > 0) {\n\t\t\tfor (const ignoredField of manifestSettings.ignoredFields) {\n\t\t\t\tpropertiesKeys.delete(ignoredField);\n\t\t\t}\n\t\t}\n\t\treturn this.transformPathsToInfo(propertiesKeys);\n\t}\n\n\t/**\n\t * Transforms a set of property paths to an array of field information.\n\t * @param propertiesPaths The set of property paths\n\t * @returns Array of the field information.\n\t */\n\tprivate transformPathsToInfo(propertiesPaths: Set<string>): FieldInfo[] {\n\t\treturn Array.from(propertiesPaths).reduce((columnInfos: FieldInfo[], propertyPath) => {\n\t\t\tconst columnInfo = this.getFieldInfo(propertyPath);\n\t\t\tif (columnInfo) {\n\t\t\t\tcolumnInfos.push(columnInfo);\n\t\t\t}\n\t\t\treturn columnInfos;\n\t\t}, []);\n\t}\n\n\t/**\n\t * Gets information about a property.\n\t * @param propertyPath\n\t * @returns Field information.\n\t */\n\tprivate getFieldInfo(propertyPath: string): FieldInfo | undefined {\n\t\tconst columnsData = (this.table.getParent() as TableAPI).getTableDefinition().columns;\n\t\tconst metaModel = (this.table.getModel() as ODataModel).getMetaModel();\n\t\tconst entityPath = metaModel.getMetaPath(this.table.data(\"metaPath\"));\n\t\tconst entitySetDataModel = getInvolvedDataModelObjects(metaModel.getContext(entityPath));\n\t\tconst relatedColumnInfo = columnsData.find((fieldInfo) => fieldInfo.name === propertyPath && fieldInfo.type === \"Annotation\");\n\t\tif (relatedColumnInfo) {\n\t\t\tconst annotationPath = (relatedColumnInfo as AnnotationTableColumn).annotationPath;\n\t\t\tif (annotationPath && propertyPath) {\n\t\t\t\tconst propertyDataModel = enhanceDataModelPath<Property>(entitySetDataModel, propertyPath);\n\t\t\t\tconst convertedAnnotation = convertMetaModelContext(metaModel.getContext(annotationPath)) as\n\t\t\t\t\t| DataField\n\t\t\t\t\t| DataFieldForAnnotation\n\t\t\t\t\t| DataFieldForAction;\n\t\t\t\tconst targetProperty = this.getCompliantProperty(propertyDataModel, convertedAnnotation);\n\t\t\t\tif (targetProperty && entitySetDataModel.targetEntityType.entityProperties.includes(targetProperty))\n\t\t\t\t\treturn {\n\t\t\t\t\t\tkey: relatedColumnInfo.key,\n\t\t\t\t\t\tpropertyDataModel,\n\t\t\t\t\t\ttargetProperty,\n\t\t\t\t\t\tlabel: relatedColumnInfo.label ?? relatedColumnInfo.key,\n\t\t\t\t\t\tconvertedAnnotation\n\t\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Gets the property to display on the Dialog.\n\t * @param propertyDataModel The dataModelObjectPath of the column\n\t * @param annotation  The converted annotation of the column\n\t * @returns The property if it is compliant, undefined otherwise\n\t */\n\tprivate getCompliantProperty(propertyDataModel: DataModelObjectPath<Property>, annotation: DataFieldTypes): Property | undefined {\n\t\tconst targetObject = propertyDataModel.targetObject;\n\t\tlet targetProperty: Property;\n\t\tif (isProperty(targetObject)) {\n\t\t\ttargetProperty = targetObject;\n\t\t\tif (targetObject.annotations.UI?.IsImageURL) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (isDataFieldTypes(annotation) && !annotation.hasOwnProperty(\"Action\")) {\n\t\t\ttargetProperty = annotation.Value.$target;\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if the field is compliant for the MassEdit\n\t\tconst unitProperty = getAssociatedUnitProperty(targetProperty);\n\t\tif (\n\t\t\tisMultiValueField(propertyDataModel) ||\n\t\t\t(hasValueHelp(targetProperty) && targetProperty.annotations?.Common?.ValueListRelevantQualifiers) || // context dependent VH is not supported for Mass Edit.\n\t\t\t(unitProperty && hasValueHelp(unitProperty) && unitProperty.annotations?.Common?.ValueListRelevantQualifiers)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\treturn targetProperty;\n\t}\n\n\t/**\n\t * Checks if the field is hidden for the provided contexts.\n\t * @param expBinding The expression binding of the property.\n\t * @returns True if the field is hidden for all contexts, false otherwise\n\t */\n\tprivate isHiddenForContexts(expBinding: CompiledBindingToolkitExpression): boolean {\n\t\tif (expBinding === \"true\") {\n\t\t\treturn false;\n\t\t} else if (expBinding === \"false\") {\n\t\t\treturn true;\n\t\t}\n\t\tconst anyObject = new Any({ anyBoolean: expBinding });\n\t\tanyObject.setModel(this.contexts[0].getModel());\n\t\tconst isHidden = !this.contexts.find((context) => {\n\t\t\tanyObject.setBindingContext(context);\n\t\t\treturn (anyObject.getBinding(\"anyBoolean\") as PropertyBinding).getExternalValue();\n\t\t});\n\t\tanyObject.destroy();\n\t\treturn isHidden;\n\t}\n\n\t/**\n\t * Gets the selected context set as updatable.\n\t * @returns The contexts.\n\t */\n\tprivate fetchContextsForEdit(): ODataV4Context[] {\n\t\tconst internalModelContext = this.table.getBindingContext(\"internal\"),\n\t\t\tupdatableContextProperty = !this.onContextMenu ? \"updatableContexts\" : \"contextmenu/updatableContexts\";\n\t\treturn internalModelContext?.getProperty(updatableContextProperty) ?? [];\n\t}\n\n\t/**\n\t * Gets the properties of the mass edit fields.\n\t * @returns The properties of the mass edit field.\n\t */\n\tgetFieldProperties(): MassFieldProperties[] {\n\t\treturn deepClone(this.fieldProperties);\n\t}\n\n\t/**\n\t * Gets the properties of the mass edit fields from an array of field information.\n\t * @param fieldsInfo The field information.\n\t * @returns The properties of the mass edit fields.\n\t */\n\tprivate async getFieldsPropertiesFromInfo(fieldsInfo: FieldInfo[]): Promise<MassFieldProperties[]> {\n\t\tconst fieldProperties: MassFieldProperties[] = [];\n\t\tconst visibilityBindings: FieldVisibilityBindings[] = [];\n\t\tfor (const fieldInfo of fieldsInfo) {\n\t\t\tconst { targetProperty, propertyDataModel, convertedAnnotation } = fieldInfo;\n\t\t\tconst dataPropertyPath = getContextRelativeTargetObjectPath(propertyDataModel);\n\t\t\tif (dataPropertyPath) {\n\t\t\t\tconst unitPropertyPath = getAssociatedUnitPropertyPath(targetProperty);\n\t\t\t\tconst inputType = this.getInputType(convertedAnnotation, propertyDataModel);\n\t\t\t\tif (inputType && propertyDataModel.targetObject) {\n\t\t\t\t\tconst relativePath = getRelativePaths(propertyDataModel);\n\t\t\t\t\tvisibilityBindings.push({\n\t\t\t\t\t\tisVisible: compileExpression(isVisible(convertedAnnotation)),\n\t\t\t\t\t\teditMode: getEditMode(\n\t\t\t\t\t\t\ttargetProperty,\n\t\t\t\t\t\t\tpropertyDataModel,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\tconvertedAnnotation,\n\t\t\t\t\t\t\tconstant(true)\n\t\t\t\t\t\t) as CompiledBindingToolkitExpression\n\t\t\t\t\t});\n\n\t\t\t\t\tconst fieldData = {\n\t\t\t\t\t\tvisible: true,\n\t\t\t\t\t\tlabel: fieldInfo.label || (targetProperty.annotations.Common?.Label as string | undefined) || dataPropertyPath,\n\t\t\t\t\t\tisFieldRequired: getRequiredExpression(\n\t\t\t\t\t\t\ttargetProperty,\n\t\t\t\t\t\t\tconvertedAnnotation,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tpropertyDataModel\n\t\t\t\t\t\t) as CompiledBindingToolkitExpression,\n\t\t\t\t\t\tdescriptionPath: getAssociatedTextPropertyPath(propertyDataModel.targetObject),\n\t\t\t\t\t\ttextBinding: getTextBinding(propertyDataModel, {\n\t\t\t\t\t\t\tdisplayMode: getDisplayMode(targetProperty, propertyDataModel)\n\t\t\t\t\t\t}) as CompiledBindingToolkitExpression,\n\t\t\t\t\t\treadOnlyExpression: isReadOnlyExpression(targetProperty, relativePath),\n\t\t\t\t\t\tinputType,\n\t\t\t\t\t\tpropertyInfo: {\n\t\t\t\t\t\t\tnullable: targetProperty.nullable !== false,\n\t\t\t\t\t\t\tkey: fieldInfo.key,\n\t\t\t\t\t\t\trelativePath: dataPropertyPath,\n\t\t\t\t\t\t\tunitPropertyPath\n\t\t\t\t\t\t},\n\t\t\t\t\t\tselectItems: [] as SelectInfo[]\n\t\t\t\t\t};\n\t\t\t\t\tfieldProperties.push(fieldData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this.isAdaptation) {\n\t\t\tconst bindingsToResolve = ([] as CompiledBindingToolkitExpression[]).concat(\n\t\t\t\t...fieldProperties.map((fieldData, index) => [\n\t\t\t\t\tvisibilityBindings[index].isVisible,\n\t\t\t\t\tvisibilityBindings[index].editMode,\n\t\t\t\t\tfieldData.textBinding,\n\t\t\t\t\tcompileExpression(fieldData.readOnlyExpression),\n\t\t\t\t\tfieldData.isFieldRequired,\n\t\t\t\t\tcompileExpression(pathInModel(fieldData.propertyInfo.relativePath)),\n\t\t\t\t\tcompileExpression(pathInModel(fieldData.propertyInfo.unitPropertyPath))\n\t\t\t\t])\n\t\t\t);\n\t\t\tawait this.getMissingData(bindingsToResolve);\n\t\t}\n\t\tawait Promise.all(\n\t\t\tfieldProperties.map(async (fieldData, index) => {\n\t\t\t\tfieldData.visible = this.isFieldVisible(visibilityBindings[index]);\n\t\t\t\tconst runtimeSelection = !this.isAdaptation ? await this.getRuntimeSelection(fieldData) : [];\n\t\t\t\tfieldData.selectItems = [...this.getDefaultSelectOptions(fieldData), ...runtimeSelection];\n\t\t\t})\n\t\t);\n\t\treturn fieldProperties;\n\t}\n\n\t/**\n\t * Gets the properties of dialog fields.\n\t * @returns The properties.\n\t */\n\tasync generateFieldsProperties(): Promise<MassFieldProperties[]> {\n\t\treturn this.getFieldsPropertiesFromInfo(this.getFieldsInfo());\n\t}\n\n\t/**\n\t * Gets the properties of the entity.\n\t * @returns The properties.\n\t */\n\tasync generateEntityFieldsProperties(): Promise<MassFieldProperties[]> {\n\t\treturn this.getFieldsPropertiesFromInfo(this.getEntityFieldsInfo());\n\t}\n\n\t/**\n\t * Gets the missing data for the fields.\n\t * @param bindingsToResolve The binding to resolve and its property path reference\n\t * @returns A promise that resolves when the data is fetched.\n\t */\n\tprivate async getMissingData(bindingsToResolve: CompiledBindingToolkitExpression[]): Promise<undefined> {\n\t\tlet controls: ManagedObject[] = [];\n\t\tfor (const context of this.contexts) {\n\t\t\tconst objects = bindingsToResolve.map((binding) => {\n\t\t\t\tconst control = new Any({ any: binding });\n\t\t\t\tcontrol.setModel(context.getModel());\n\t\t\t\tcontrol.setBindingContext(context);\n\t\t\t\treturn control;\n\t\t\t});\n\t\t\tcontrols = [...controls, ...objects];\n\t\t}\n\n\t\tawait Promise.all(\n\t\t\tcontrols.map(async (control) => {\n\t\t\t\tconst binding = control.getBinding(\"any\") as ODataPropertyBinding | undefined;\n\t\t\t\tif (binding) {\n\t\t\t\t\tbinding.setBindingMode(BindingMode.OneTime);\n\t\t\t\t\tif (binding.isA<CompositeBinding>(\"sap.ui.model.CompositeBinding\")) {\n\t\t\t\t\t\tawait Promise.all(binding.getBindings().map((nestedBinding) => nestedBinding.requestValue?.()));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tawait binding.requestValue?.();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tfor (const control of controls) {\n\t\t\tcontrol.destroy();\n\t\t}\n\t}\n\n\t/**\n\t * Gets the selection options of a field generated by the selected contexts.\n\t * @param fieldData Data of the field used by both the static and the runtime model\n\t * @returns The select options of the field\n\t */\n\tprivate async getRuntimeSelection(fieldData: MassFieldProperties): Promise<SelectInfo[]> {\n\t\tconst distinctMap = new Set<string>();\n\t\tconst selectOptions: SelectInfo[] = [];\n\t\tif (fieldData.inputType === \"CheckBox\") {\n\t\t\treturn [];\n\t\t}\n\t\tconst anyObject = new Any({ anyText: fieldData.textBinding });\n\t\tanyObject.setModel(this.contexts[0].getModel());\n\t\tfor (const selectedContext of this.contexts) {\n\t\t\tanyObject.setBindingContext(selectedContext);\n\t\t\tconst textBinding = anyObject.getBinding(\"anyText\");\n\t\t\tif (textBinding?.isA<CompositeBinding>(\"sap.ui.model.CompositeBinding\")) {\n\t\t\t\t// If the text binding is a composite binding, we need to request the value of each binding\n\t\t\t\t// to wait for the promise to resolve before getting the value of requestUnitsOfMeasure/requestCurrencyCodes\n\t\t\t\t// for the custom units of measure and currency codes.\n\t\t\t\t// We have to set the binding mode to OneTime to avoid the binding to be updated when the context changes.\n\t\t\t\t// Indeed even if the requestUnitsOfMeasure/requestCurrencyCodes doesn't change it's trigger a PATCH request\n\t\t\t\ttextBinding.setBindingMode(BindingMode.OneTime);\n\t\t\t\tawait Promise.all(textBinding.getBindings().map((binding) => binding.requestValue?.()));\n\t\t\t}\n\t\t\tconst propertyText = (anyObject.getBinding(\"anyText\") as PropertyBinding | undefined)?.getExternalValue();\n\t\t\tif (propertyText && !distinctMap.has(propertyText)) {\n\t\t\t\tdistinctMap.add(propertyText);\n\t\t\t\tselectOptions.push({\n\t\t\t\t\ttext: propertyText,\n\t\t\t\t\tkey: propertyText,\n\t\t\t\t\tunitValue: fieldData.propertyInfo.unitPropertyPath\n\t\t\t\t\t\t? selectedContext.getObject(fieldData.propertyInfo.unitPropertyPath)\n\t\t\t\t\t\t: \"\",\n\t\t\t\t\tpropertyValue: selectedContext.getObject(fieldData.propertyInfo.relativePath)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tanyObject.destroy();\n\t\treturn selectOptions;\n\t}\n\n\t/**\n\t * Gets the default selection options of a field.\n\t * @param fieldData The property information\n\t * @returns The default select options.\n\t */\n\tprivate getDefaultSelectOptions(fieldData: MassFieldProperties): SelectInfo[] {\n\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.macros\") as ResourceBundle;\n\t\tconst keepEntry = {\n\t\t\ttext: resourceBundle.getText(\"C_MASS_EDIT_COMBOBOX_KEEP_VALUES\"),\n\t\t\tkey: SpecificSelectKeys.KeepKey\n\t\t};\n\t\tconst defaultOptions: SelectInfo[] = [];\n\t\tdefaultOptions.push(keepEntry);\n\t\tif (fieldData.inputType === \"CheckBox\") {\n\t\t\tdefaultOptions.push({ text: resourceBundle.getText(\"yes\"), key: \"true\" }, { text: resourceBundle.getText(\"no\"), key: \"false\" });\n\t\t} else {\n\t\t\tdefaultOptions.push({\n\t\t\t\ttext: resourceBundle.getText(\"C_MASS_EDIT_COMBOBOX_REPLACE_VALUES\"),\n\t\t\t\tkey: SpecificSelectKeys.ReplaceKey\n\t\t\t});\n\t\t\tif (fieldData.isFieldRequired !== \"true\") {\n\t\t\t\tdefaultOptions.push({\n\t\t\t\t\ttext: resourceBundle.getText(\"C_MASS_EDIT_COMBOBOX_CLEAR_VALUES\"),\n\t\t\t\t\tkey: SpecificSelectKeys.ClearFieldValueKey\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn defaultOptions;\n\t}\n\n\t/**\n\t * Checks if the the field is editable.\n\t * @param expBinding The expression binding of the property.\n\t * @returns Returns true if the mass edit field is editable.\n\t */\n\tprivate getFieldEditable(expBinding: CompiledBindingToolkitExpression): boolean {\n\t\tif (expBinding === FieldEditMode.Editable) {\n\t\t\treturn true;\n\t\t} else if (Object.keys(FieldEditMode).includes(expBinding as FieldEditMode)) {\n\t\t\treturn false;\n\t\t} else if (expBinding) {\n\t\t\tconst anyControl = new Any({ any: expBinding });\n\t\t\tconst model = this.contexts[0].getModel();\n\t\t\tanyControl.setModel(model);\n\t\t\tconst visible = this.contexts.some((context) => {\n\t\t\t\tanyControl.setBindingContext(context);\n\t\t\t\treturn (anyControl.getBinding(\"any\") as PropertyBinding).getExternalValue() === FieldEditMode.Editable;\n\t\t\t});\n\t\t\tanyControl.destroy();\n\t\t\treturn visible;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the input type of the field.\n\t * @param dataFieldConverted The converted annotation fo the field\n\t * @param dataModelPath The dataModelObjectPath of the property\n\t * @returns The input type.\n\t */\n\tprivate getInputType(dataFieldConverted: DataFieldTypes, dataModelPath: DataModelObjectPath<Property>): string | undefined | null {\n\t\tconst editStyleProperties = {} as FieldBlockProperties;\n\t\tsetEditStyleProperties(editStyleProperties, dataFieldConverted, dataModelPath, true);\n\t\treturn editStyleProperties?.editStyle;\n\t}\n\n\t/**\n\t * Gets the visibility of the field\n\t * This visibility is not dependent on the context when the adaptation mode is set.\n\t * @param visibilityBindings The visibility bindings of the field\n\t * @returns True if the field is visible, false otherwise\n\t */\n\tprivate isFieldVisible(visibilityBindings: FieldVisibilityBindings): boolean {\n\t\tif (this.isAdaptation) {\n\t\t\tconst isStaticEditMode = Object.keys(FieldEditMode).includes(visibilityBindings.editMode as FieldEditMode);\n\t\t\tconst isEditable = !isStaticEditMode || (isStaticEditMode && visibilityBindings.editMode === FieldEditMode.Editable);\n\t\t\treturn isEditable && visibilityBindings.isVisible !== \"false\";\n\t\t}\n\t\treturn this.getFieldEditable(visibilityBindings.editMode) && !this.isHiddenForContexts(visibilityBindings.isVisible);\n\t}\n}\n"],"mappings":"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","ignoreList":[],"file":"MassEdit-dbg.js"}