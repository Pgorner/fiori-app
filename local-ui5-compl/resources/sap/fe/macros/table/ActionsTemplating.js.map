{"version":3,"file":"ActionsTemplating.js","names":["getMenuItemForAction","dataField","action","menuItemAction","table","forContextMenu","collectionContext","handlerProvider","annotationPath","undefined","actionContextPath","CommonHelper","getActionContext","metaPath","getModel","createBindingContext","actionContext","dataFieldDataModelObjectPath","MetaModelConverter","getInvolvedDataModelObjects","isBound","ActionTarget","isOperationAvailable","annotations","Core","OperationAvailable","valueOf","command","contextMenuText","pressHandler","getDataFieldForActionButtonPressHandler","pressCommand","enabled","TableHelper","isDataFieldForActionEnabled","tableDefinition","Action","getObject","enableOnSelect","targetEntityType","itemId","generate","id","key","_jsx","MenuItem","text","Label","press","visible","children","customData","createCustomData","getMenuItemForIntentBasedNavigation","arguments","length","getDataFieldForIBNPressHandler","isDataFieldForIBNEnabled","collection","RequiresContext","NavigationAvailable","SemanticObject","getMenuItem","convertedMetadata","resolvePath","target","type","isDataFieldForAction","isActionShownInContextMenu","contextObjectPath","isDataFieldForIntentBasedNavigation","getManifestActionPressHandler","enabledForContextMenu","getDataFieldButtonForAction","dataFieldActionContext","toolbarActionId","Button","ariaHasPopup","isActionWithDialog","ButtonType","Transparent","tableActionContextMenuId","visibleForContextMenu","getDataFieldButtonForIntentBasedNavigation","IBNData","getDataFieldButton","template","ActionToolbarAction","getDefaultMenuButtonAction","defaultAction","dataFieldForDefaultAction","handler","e","getMenuButton","defaultActionHandlers","menuItems","menu","filter","map","item","menuId","MenuButton","menuPosition","useDefaultActionOnly","buttonMode","MenuButtonMode","Split","Regular","Menu","menuItemsForContextMenu","forEach","push","items","getDefaultButton","getAction","getCopyAction","operationAvailable","ActionHelper","getNumberOfContextsExpression","compileExpression","equal","pathInModel","getCreateButton","standardAction","collectionEntity","suffixResourceKey","name","buttonText","getTranslatedText","createOutboundDetail","annotation","create","outboundDetail","control","enableUploadPlugin","ActionsPlaceholder","placeholderFor","getIBNData","getCreateMenu","values","nodeType","hasCustomCreateEnablement","createEnablement","allowedValue","index","modelName","isEnabled","notEqual","value","getCreateMenuItemPressHandler","getDeleteButton","getStandardAction","isTemplated","StandardActionKeys","Create","isInsertUpdateActionsTemplated","Delete","Cut","getCutButton","Paste","getPasteButton","MassEdit","getMassEditButtonPressHandler","Insights","addCardToInsightsPress","layoutData","OverflowToolbarLayoutData","priority","MoveUp","MoveDown","getMoveUpDownButton","getActions","actions","ActionType","Standard","Copy","_exports","getBasicSearch","useBasicSearch","filterBarId","_collectionIsDraftEnabled","isSearchable","label","BasicSearchMacro","useDraftEditState","getFullScreen","enableFullScreen","TableFullScreenButton","forMoveUp","tableType","getTableActionsTemplate","ModelHelper","isDraftNode","isDraftRoot","searchable","basicSearch","filterBar","fullScreen","getTableContextMenuTemplate","getExpandedCollapseActions","expandNode","collapseNode","expand","enableExpression","and"],"sources":["./ActionsTemplating.tsx"],"sourcesContent":["import type { Action } from \"@sap-ux/vocabularies-types/Edm\";\nimport type {\n\tDataFieldAbstractTypes,\n\tDataFieldForAction,\n\tDataFieldForIntentBasedNavigation\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\n\nimport type { EntitySet, NavigationProperty } from \"@sap-ux/vocabularies-types\";\nimport { and, compileExpression, equal, notEqual, pathInModel } from \"sap/fe/base/BindingToolkit\";\nimport { ActionType } from \"sap/fe/core/converters/ManifestSettings\";\nimport * as MetaModelConverter from \"sap/fe/core/converters/MetaModelConverter\";\nimport {\n\tisActionWithDialog,\n\tisDataFieldForAction,\n\tisDataFieldForIntentBasedNavigation\n} from \"sap/fe/core/converters/annotations/DataField\";\nimport type { AnnotationAction, BaseAction, CustomAction } from \"sap/fe/core/converters/controls/Common/Action\";\nimport { ButtonType } from \"sap/fe/core/converters/controls/Common/Action\";\nimport type { CreateBehaviorExternal } from \"sap/fe/core/converters/controls/Common/Table\";\nimport type { StandardAction } from \"sap/fe/core/converters/controls/Common/table/StandardActions\";\nimport { StandardActionKeys } from \"sap/fe/core/converters/controls/Common/table/StandardActions\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport { generate } from \"sap/fe/core/helpers/StableIdHelper\";\nimport CommonHelper from \"sap/fe/macros/CommonHelper\";\nimport { createCustomData } from \"sap/fe/macros/TSXUtils\";\nimport type { CustomAndAction } from \"sap/fe/macros/chart/MdcChartTemplate\";\nimport type { TableBlockProperties } from \"sap/fe/macros/table/MdcTableTemplate\";\nimport TableFullScreenButton from \"sap/fe/macros/table/TableFullScreenButton\";\nimport TableHelper from \"sap/fe/macros/table/TableHelper\";\nimport Button from \"sap/m/Button\";\nimport Menu from \"sap/m/Menu\";\nimport MenuButton from \"sap/m/MenuButton\";\nimport MenuItem from \"sap/m/MenuItem\";\nimport OverflowToolbarLayoutData from \"sap/m/OverflowToolbarLayoutData\";\nimport { MenuButtonMode } from \"sap/m/library\";\nimport ActionsPlaceholder from \"sap/m/upload/ActionsPlaceholder\";\nimport type UI5Event from \"sap/ui/base/Event\";\nimport type Control from \"sap/ui/core/Control\";\nimport ActionToolbarAction from \"sap/ui/mdc/actiontoolbar/ActionToolbarAction\";\nimport type Context from \"sap/ui/model/Context\";\nimport ActionHelper from \"../internal/helpers/ActionHelper\";\nimport BasicSearchMacro from \"./BasicSearch\";\nimport type TableEventHandlerProvider from \"./TableEventHandlerProvider\";\n\n/**\n * Generates the MenuItem for the DataFieldForAction.\n * @param dataField DataField for action\n * @param action The name of the action\n * @param menuItemAction The menuItemAction to be evaluated\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @param collectionContext The context of the collection\n * @param handlerProvider\n * @returns The MenuItem\n */\nfunction getMenuItemForAction(\n\tdataField: DataFieldForAction,\n\taction: BaseAction | AnnotationAction | CustomAction,\n\tmenuItemAction: BaseAction,\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\tcollectionContext: Context,\n\thandlerProvider: TableEventHandlerProvider\n): MenuItem | undefined {\n\tif (!menuItemAction.annotationPath) {\n\t\treturn undefined;\n\t}\n\tconst actionContextPath = CommonHelper.getActionContext(\n\t\ttable.metaPath.getModel().createBindingContext(menuItemAction.annotationPath + \"/Action\")!\n\t);\n\tconst actionContext = table.metaPath.getModel().createBindingContext(actionContextPath);\n\tconst dataFieldDataModelObjectPath = actionContext\n\t\t? MetaModelConverter.getInvolvedDataModelObjects(actionContext, collectionContext)\n\t\t: undefined;\n\tconst isBound = dataField.ActionTarget?.isBound;\n\tconst isOperationAvailable = dataField.ActionTarget?.annotations?.Core?.OperationAvailable?.valueOf() !== false;\n\tconst command = !forContextMenu ? menuItemAction.command : menuItemAction.command + \"::ContextMenu\";\n\tconst contextMenuText = forContextMenu ? \"ContextMenu\" : \"ActionMenu\";\n\tconst pressHandler = menuItemAction.command\n\t\t? undefined\n\t\t: handlerProvider.getDataFieldForActionButtonPressHandler(dataField, menuItemAction, action, forContextMenu);\n\tconst pressCommand = menuItemAction.command ? `cmd:${command}|press` : undefined;\n\tconst enabled =\n\t\tmenuItemAction.enabled !== undefined\n\t\t\t? menuItemAction.enabled\n\t\t\t: TableHelper.isDataFieldForActionEnabled(\n\t\t\t\t\ttable.tableDefinition,\n\t\t\t\t\tdataField.Action,\n\t\t\t\t\t!!isBound,\n\t\t\t\t\tactionContext.getObject(),\n\t\t\t\t\tmenuItemAction.enableOnSelect,\n\t\t\t\t\tdataFieldDataModelObjectPath?.targetEntityType,\n\t\t\t\t\tforContextMenu\n\t\t\t  );\n\tif (isBound !== true || isOperationAvailable) {\n\t\tconst itemId = generate([table.id, menuItemAction.key, action.key, contextMenuText, dataField, \"MenuItemForAction\"]);\n\t\treturn (\n\t\t\t<MenuItem\n\t\t\t\ttext={dataField.Label}\n\t\t\t\tid={itemId}\n\t\t\t\tpress={pressHandler}\n\t\t\t\tjsx:command={pressCommand}\n\t\t\t\tenabled={enabled}\n\t\t\t\tvisible={menuItemAction.visible}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [createCustomData(\"actionId\", itemId)]\n\t\t\t\t}}\n\t\t\t</MenuItem>\n\t\t);\n\t} else {\n\t\treturn undefined;\n\t}\n}\n\n/**\n * Generates the MenuItem for the DataFieldForIntentBasedNavigation.\n * @param dataField DataField for IntentBasedNavigation\n * @param menuItemAction The menuItemAction to be evaluated\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @param collectionContext The context of the collection\n * @param action\n * @param handlerProvider\n * @returns The MenuItem\n */\nfunction getMenuItemForIntentBasedNavigation(\n\tdataField: DataFieldForIntentBasedNavigation,\n\tmenuItemAction: BaseAction,\n\ttable: TableBlockProperties,\n\tforContextMenu = false,\n\tcollectionContext: Context,\n\taction: BaseAction | AnnotationAction | CustomAction,\n\thandlerProvider: TableEventHandlerProvider\n): MenuItem {\n\tconst pressHandler = menuItemAction.command\n\t\t? undefined\n\t\t: handlerProvider.getDataFieldForIBNPressHandler(menuItemAction, forContextMenu);\n\tconst pressCommand = menuItemAction.command ? `cmd:${menuItemAction.command}|press` : undefined;\n\n\tconst enabled =\n\t\tmenuItemAction.enabled !== undefined\n\t\t\t? menuItemAction.enabled\n\t\t\t: TableHelper.isDataFieldForIBNEnabled(\n\t\t\t\t\t{\n\t\t\t\t\t\tcollection: collectionContext,\n\t\t\t\t\t\ttableDefinition: table.tableDefinition\n\t\t\t\t\t},\n\t\t\t\t\tdataField,\n\t\t\t\t\tdataField.RequiresContext,\n\t\t\t\t\tdataField.NavigationAvailable,\n\t\t\t\t\tforContextMenu\n\t\t\t  );\n\tconst id = forContextMenu\n\t\t? generate([table.id, menuItemAction.key, action.key, dataField, \"MenuItemIntentBasedNavigation\", \"ContextMenu\"])\n\t\t: generate([table.id, menuItemAction.key, action.key, dataField, \"MenuItemIntentBasedNavigation\"]);\n\treturn (\n\t\t<MenuItem\n\t\t\ttext={dataField.Label}\n\t\t\tid={id}\n\t\t\tpress={pressHandler}\n\t\t\tjsx:command={pressCommand}\n\t\t\tenabled={enabled}\n\t\t\tvisible={menuItemAction.visible}\n\t\t>\n\t\t\t{{\n\t\t\t\tcustomData: [\n\t\t\t\t\t!dataField.RequiresContext\n\t\t\t\t\t\t? createCustomData(\"IBNData\", `{semanticObject: '${dataField.SemanticObject}' , action : '${dataField.Action}'}`)\n\t\t\t\t\t\t: undefined,\n\t\t\t\t\tcreateCustomData(\"actionId\", id)\n\t\t\t\t]\n\t\t\t}}\n\t\t</MenuItem>\n\t);\n}\n\n/**\n * Generates the xml string for the MenuItem based on the type of the menuItemAction.\n * @param action The name of the action\n * @param menuItemAction The menuItemAction to be evaluated\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @param collectionContext The context of the collection\n * @param handlerProvider The entity set of the collection\n * @returns The xml string for the MenuItem\n */\nfunction getMenuItem(\n\taction: BaseAction | AnnotationAction | CustomAction,\n\tmenuItemAction: BaseAction,\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\tcollectionContext: Context,\n\thandlerProvider: TableEventHandlerProvider\n): MenuItem | undefined {\n\tconst dataField = menuItemAction.annotationPath\n\t\t? (table.convertedMetadata.resolvePath(menuItemAction.annotationPath).target as DataFieldAbstractTypes)\n\t\t: undefined;\n\n\tswitch (dataField && menuItemAction.type) {\n\t\tcase \"ForAction\":\n\t\t\tif (isDataFieldForAction(dataField)) {\n\t\t\t\tif (\n\t\t\t\t\t!forContextMenu ||\n\t\t\t\t\t(forContextMenu && TableHelper.isActionShownInContextMenu(menuItemAction, table.contextObjectPath))\n\t\t\t\t) {\n\t\t\t\t\treturn getMenuItemForAction(\n\t\t\t\t\t\tdataField,\n\t\t\t\t\t\taction,\n\t\t\t\t\t\tmenuItemAction,\n\t\t\t\t\t\ttable,\n\t\t\t\t\t\tforContextMenu,\n\t\t\t\t\t\tcollectionContext,\n\t\t\t\t\t\thandlerProvider\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"ForNavigation\":\n\t\t\tif (\n\t\t\t\tisDataFieldForIntentBasedNavigation(dataField!) &&\n\t\t\t\t(!forContextMenu || (forContextMenu && TableHelper.isActionShownInContextMenu(menuItemAction, table.contextObjectPath)))\n\t\t\t) {\n\t\t\t\treturn getMenuItemForIntentBasedNavigation(\n\t\t\t\t\tdataField,\n\t\t\t\t\tmenuItemAction,\n\t\t\t\t\ttable,\n\t\t\t\t\tforContextMenu,\n\t\t\t\t\tcollectionContext,\n\t\t\t\t\taction,\n\t\t\t\t\thandlerProvider\n\t\t\t\t);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t}\n\n\tconst command = !forContextMenu ? menuItemAction.command : menuItemAction.command + \"::ContextMenu\";\n\tconst pressHandler = menuItemAction.command\n\t\t? undefined\n\t\t: handlerProvider.getManifestActionPressHandler(menuItemAction as CustomAction, forContextMenu);\n\tconst pressCommand = menuItemAction.command ? `cmd:${command}|press` : undefined;\n\tconst enabled = !forContextMenu ? menuItemAction.enabled : (menuItemAction as CustomAction).enabledForContextMenu;\n\tconst contextMenuText = forContextMenu ? \"ContextMenu\" : \"ActionMenu\";\n\tconst itemId = generate([table.id, menuItemAction.key, contextMenuText, action.key, dataField, \"MenuItem\"]);\n\treturn (\n\t\t<MenuItem\n\t\t\tcore:require=\"{FPM: 'sap/fe/core/helpers/FPMHelper'}\"\n\t\t\ttext={menuItemAction?.text}\n\t\t\tid={itemId}\n\t\t\tpress={pressHandler}\n\t\t\tjsx:command={pressCommand}\n\t\t\tvisible={menuItemAction.visible}\n\t\t\tenabled={enabled}\n\t\t>\n\t\t\t{{\n\t\t\t\tcustomData: [createCustomData(\"actionId\", itemId)]\n\t\t\t}}\n\t\t</MenuItem>\n\t);\n}\n\n/**\n * Generates the control for the DataFieldForActionButton.\n * @param dataField DataField for action\n * @param action The name of the action\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @param collectionContext The context of the collection\n * @param handlerProvider\n * @returns The control for the DataFieldForActionButton\n */\nfunction getDataFieldButtonForAction(\n\tdataField: DataFieldForAction,\n\taction: BaseAction | AnnotationAction | CustomAction,\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\tcollectionContext: Context,\n\thandlerProvider: TableEventHandlerProvider\n): Button | MenuItem {\n\tconst dataFieldActionContext = table.metaPath.getModel().createBindingContext(action.annotationPath + \"/Action\");\n\tconst actionContextPath = CommonHelper.getActionContext(dataFieldActionContext);\n\tconst actionContext = table.metaPath.getModel().createBindingContext(actionContextPath);\n\tconst dataFieldDataModelObjectPath = actionContext\n\t\t? MetaModelConverter.getInvolvedDataModelObjects<Action>(actionContext, collectionContext)\n\t\t: undefined;\n\tconst isBound = dataField.ActionTarget?.isBound;\n\tconst command = !forContextMenu ? action.command : action.command + \"::ContextMenu\";\n\tconst pressHandler = action.command\n\t\t? undefined\n\t\t: handlerProvider.getDataFieldForActionButtonPressHandler(dataField, action, undefined, forContextMenu);\n\tconst pressCommand = action.command ? `cmd:${command}|press` : undefined;\n\tconst enabled =\n\t\taction.enabled !== undefined\n\t\t\t? action.enabled\n\t\t\t: TableHelper.isDataFieldForActionEnabled(\n\t\t\t\t\ttable.tableDefinition,\n\t\t\t\t\tdataField.Action,\n\t\t\t\t\t!!isBound,\n\t\t\t\t\tactionContext.getObject(),\n\t\t\t\t\taction.enableOnSelect,\n\t\t\t\t\tdataFieldDataModelObjectPath?.targetEntityType,\n\t\t\t\t\tforContextMenu\n\t\t\t  );\n\tif (!forContextMenu) {\n\t\t// for table toolbar\n\t\tconst toolbarActionId = generate([table.id, dataField]);\n\t\treturn (\n\t\t\t<Button\n\t\t\t\tid={toolbarActionId}\n\t\t\t\ttext={dataField.Label}\n\t\t\t\tariaHasPopup={isActionWithDialog(dataField)}\n\t\t\t\tpress={pressHandler}\n\t\t\t\tjsx:command={pressCommand}\n\t\t\t\ttype={ButtonType.Transparent}\n\t\t\t\tenabled={enabled}\n\t\t\t\tvisible={action.visible}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [createCustomData(\"actionId\", toolbarActionId)]\n\t\t\t\t}}\n\t\t\t</Button>\n\t\t);\n\t} else {\n\t\t// for context menu\n\t\tconst tableActionContextMenuId = generate([table.id, dataField, \"ContextMenu\"]);\n\t\treturn (\n\t\t\t<MenuItem\n\t\t\t\tid={tableActionContextMenuId}\n\t\t\t\ttext={dataField.Label}\n\t\t\t\tpress={pressHandler}\n\t\t\t\tjsx:command={pressCommand}\n\t\t\t\tenabled={enabled}\n\t\t\t\tvisible={action.visibleForContextMenu}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [createCustomData(\"actionId\", tableActionContextMenuId)]\n\t\t\t\t}}\n\t\t\t</MenuItem>\n\t\t);\n\t}\n}\n\n/**\n * Generates the control for the DataFieldForIntentBasedNavigation Button.\n * @param dataField DataField for IntentBasedNavigation\n * @param action The name of the action\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @param collectionContext The context of the collection\n * @param handlerProvider\n * @returns The control for the DataFieldForIntentBasedNavigation button/menu item\n */\nfunction getDataFieldButtonForIntentBasedNavigation(\n\tdataField: DataFieldForIntentBasedNavigation,\n\taction: BaseAction | AnnotationAction | CustomAction,\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\tcollectionContext: Context,\n\thandlerProvider: TableEventHandlerProvider\n): Button | MenuItem {\n\tconst command = !forContextMenu ? action.command : action.command + \"::ContextMenu\";\n\tconst pressHandler = action.command ? undefined : handlerProvider.getDataFieldForIBNPressHandler(action, forContextMenu);\n\tconst pressCommand = action.command ? `cmd:${command}|press` : undefined;\n\tconst enabled =\n\t\taction.enabled !== undefined\n\t\t\t? action.enabled\n\t\t\t: TableHelper.isDataFieldForIBNEnabled(\n\t\t\t\t\t{\n\t\t\t\t\t\tcollection: collectionContext,\n\t\t\t\t\t\ttableDefinition: table.tableDefinition\n\t\t\t\t\t},\n\t\t\t\t\tdataField,\n\t\t\t\t\tdataField.RequiresContext,\n\t\t\t\t\tdataField.NavigationAvailable,\n\t\t\t\t\tforContextMenu\n\t\t\t  );\n\tconst IBNData = !dataField.RequiresContext\n\t\t? \"{semanticObject: '\" + dataField.SemanticObject + \"' , action : '\" + dataField.Action + \"'}\"\n\t\t: undefined;\n\tif (!forContextMenu) {\n\t\t// for table toolbar\n\t\tconst toolbarActionId = generate([table.id, dataField]);\n\t\treturn (\n\t\t\t<Button\n\t\t\t\tid={toolbarActionId}\n\t\t\t\ttext={dataField.Label}\n\t\t\t\tpress={pressHandler}\n\t\t\t\tjsx:command={pressCommand}\n\t\t\t\ttype={ButtonType.Transparent}\n\t\t\t\tenabled={enabled}\n\t\t\t\tvisible={action.visible}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [createCustomData(\"IBNData\", IBNData), createCustomData(\"actionId\", toolbarActionId)]\n\t\t\t\t}}\n\t\t\t</Button>\n\t\t);\n\t} else {\n\t\t// for context menu\n\t\tconst tableActionContextMenuId = generate([table.id, dataField, \"ContextMenu\"]);\n\t\treturn (\n\t\t\t<MenuItem\n\t\t\t\tid={tableActionContextMenuId}\n\t\t\t\ttext={dataField.Label}\n\t\t\t\tpress={pressHandler}\n\t\t\t\tjsx:command={pressCommand}\n\t\t\t\tenabled={enabled}\n\t\t\t\tvisible={action.visibleForContextMenu}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [createCustomData(\"IBNData\", IBNData), createCustomData(\"actionId\", tableActionContextMenuId)]\n\t\t\t\t}}\n\t\t\t</MenuItem>\n\t\t);\n\t}\n}\n\n/**\n * Generates the control for the button based on the type of the action.\n * @param action The name of the action\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @param collectionContext The context of the collection\n * @param handlerProvider\n * @returns The control for the button/menu item\n */\nfunction getDataFieldButton(\n\taction: BaseAction | AnnotationAction | CustomAction,\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\tcollectionContext: Context,\n\thandlerProvider: TableEventHandlerProvider\n): ActionToolbarAction | MenuItem | undefined {\n\tconst dataField = action.annotationPath\n\t\t? (table.convertedMetadata.resolvePath(action.annotationPath).target as DataFieldAbstractTypes)\n\t\t: undefined;\n\tlet template: MenuItem | Button | undefined;\n\tif (!dataField) {\n\t\treturn undefined;\n\t}\n\tswitch (action.type) {\n\t\tcase \"ForAction\":\n\t\t\tif (isDataFieldForAction(dataField)) {\n\t\t\t\tconst isBound = dataField.ActionTarget?.isBound;\n\t\t\t\tconst isOperationAvailable = dataField.ActionTarget?.annotations?.Core?.OperationAvailable?.valueOf() !== false;\n\t\t\t\t// show only bound actions in context menu\n\t\t\t\tif (!forContextMenu || TableHelper.isActionShownInContextMenu(action, table.contextObjectPath)) {\n\t\t\t\t\tif (isBound !== true || isOperationAvailable) {\n\t\t\t\t\t\ttemplate = getDataFieldButtonForAction(\n\t\t\t\t\t\t\tdataField,\n\t\t\t\t\t\t\taction,\n\t\t\t\t\t\t\ttable,\n\t\t\t\t\t\t\tforContextMenu,\n\t\t\t\t\t\t\tcollectionContext,\n\t\t\t\t\t\t\thandlerProvider\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"ForNavigation\":\n\t\t\tif (\n\t\t\t\tisDataFieldForIntentBasedNavigation(dataField) &&\n\t\t\t\t(!forContextMenu || TableHelper.isActionShownInContextMenu(action, table.contextObjectPath))\n\t\t\t) {\n\t\t\t\ttemplate = getDataFieldButtonForIntentBasedNavigation(\n\t\t\t\t\tdataField,\n\t\t\t\t\taction,\n\t\t\t\t\ttable,\n\t\t\t\t\tforContextMenu,\n\t\t\t\t\tcollectionContext,\n\t\t\t\t\thandlerProvider\n\t\t\t\t);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t}\n\n\tif (template === undefined) {\n\t\treturn undefined;\n\t}\n\n\tif (!forContextMenu) {\n\t\t// for table toolbar\n\t\treturn (\n\t\t\t<ActionToolbarAction\n\t\t\t\tid={generate([table.id, action.id, dataField, \"ActionToolbarAction\"])}\n\t\t\t\tdt:designtime={action.visible === \"true\" || action.visible === \"false\" ? undefined : \"not-adaptable-visibility\"}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\taction: template\n\t\t\t\t}}\n\t\t\t</ActionToolbarAction>\n\t\t);\n\t} else {\n\t\t// for context menu\n\t\treturn template as MenuItem;\n\t}\n}\n\n/**\n * Gets the default action handler that is invoked when adding the menu button.\n * @param defaultAction The default action\n * @param dataFieldForDefaultAction The dataField for the default action\n * @param handlerProvider\n * @returns The corresponding event handler or command\n */\nfunction getDefaultMenuButtonAction(\n\tdefaultAction: CustomAction | undefined,\n\tdataFieldForDefaultAction: DataFieldForIntentBasedNavigation | DataFieldForAction | undefined,\n\thandlerProvider: TableEventHandlerProvider\n): { handler?: (e: UI5Event) => void; command?: string } {\n\tif (!defaultAction || !dataFieldForDefaultAction) {\n\t\treturn {};\n\t}\n\n\ttry {\n\t\tswitch (defaultAction.type) {\n\t\t\tcase \"ForAction\":\n\t\t\t\treturn {\n\t\t\t\t\thandler: handlerProvider.getDataFieldForActionButtonPressHandler(\n\t\t\t\t\t\tdataFieldForDefaultAction as DataFieldForAction,\n\t\t\t\t\t\tdefaultAction,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tfalse\n\t\t\t\t\t)\n\t\t\t\t};\n\n\t\t\tcase \"ForNavigation\":\n\t\t\t\treturn {\n\t\t\t\t\thandler: handlerProvider.getDataFieldForIBNPressHandler(defaultAction, false)\n\t\t\t\t};\n\n\t\t\tdefault: {\n\t\t\t\tif (defaultAction.command) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcommand: `cmd:${defaultAction.command}|defaultAction`\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\treturn {\n\t\t\t\t\t\thandler: handlerProvider.getManifestActionPressHandler(defaultAction, false)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (e) {\n\t\treturn {};\n\t}\n}\n\n/**\n * Generates the control for the MenuButton control which enables the user to show a hierarchical menu.\n * @param action The name of the action\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @param collectionContext The context of the collection\n * @param handlerProvider\n * @returns The MenuButton control\n */\nfunction getMenuButton(\n\taction: BaseAction | AnnotationAction | CustomAction,\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\tcollectionContext: Context,\n\thandlerProvider: TableEventHandlerProvider\n): ActionToolbarAction | MenuItem | undefined {\n\tif (!forContextMenu) {\n\t\t// for table toolbar\n\t\tconst defaultAction = (action as CustomAction).defaultAction as CustomAction | undefined;\n\t\tconst dataFieldForDefaultAction = defaultAction?.annotationPath\n\t\t\t? table.convertedMetadata.resolvePath<DataFieldForAction | DataFieldForIntentBasedNavigation>(defaultAction.annotationPath)\n\t\t\t\t\t.target\n\t\t\t: undefined;\n\t\tconst defaultActionHandlers = getDefaultMenuButtonAction(defaultAction, dataFieldForDefaultAction, handlerProvider);\n\t\tconst menuItems = action.menu\n\t\t\t?.filter((menuItemAction) => typeof menuItemAction !== \"string\")\n\t\t\t.map((menuItemAction) => {\n\t\t\t\treturn getMenuItem(action, menuItemAction, table, forContextMenu, collectionContext, handlerProvider);\n\t\t\t})\n\t\t\t.filter((item) => item !== undefined);\n\n\t\tif (menuItems?.length) {\n\t\t\tconst menuId = generate([table.id, action.id]);\n\t\t\treturn (\n\t\t\t\t<ActionToolbarAction\n\t\t\t\t\tid={generate([table.id, action.id, \"ActionToolbarAction\"])}\n\t\t\t\t\tdt:designtime={action.visible === \"true\" || action.visible === \"false\" ? undefined : \"not-adaptable-visibility\"}\n\t\t\t\t>\n\t\t\t\t\t<MenuButton\n\t\t\t\t\t\ttext={action.text}\n\t\t\t\t\t\ttype={ButtonType.Transparent}\n\t\t\t\t\t\tmenuPosition=\"BeginBottom\"\n\t\t\t\t\t\tid={menuId}\n\t\t\t\t\t\tvisible={action.visible}\n\t\t\t\t\t\tenabled={action.enabled}\n\t\t\t\t\t\tuseDefaultActionOnly={!!(action as CustomAndAction).defaultAction}\n\t\t\t\t\t\tbuttonMode={(action as CustomAndAction).defaultAction ? MenuButtonMode.Split : MenuButtonMode.Regular}\n\t\t\t\t\t\tdefaultAction={defaultActionHandlers.handler}\n\t\t\t\t\t\tjsx:command={defaultActionHandlers.command}\n\t\t\t\t\t>\n\t\t\t\t\t\t{{\n\t\t\t\t\t\t\tcustomData: [createCustomData(\"actionId\", menuId)],\n\t\t\t\t\t\t\tmenu: <Menu>{menuItems}</Menu>\n\t\t\t\t\t\t}}\n\t\t\t\t\t</MenuButton>\n\t\t\t\t</ActionToolbarAction>\n\t\t\t);\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t} else {\n\t\t// for context menu\n\t\tconst menuItemsForContextMenu: BaseAction[] = [];\n\t\taction.menu?.forEach((menuItemAction) => {\n\t\t\tif (typeof menuItemAction !== \"string\" && TableHelper.isActionShownInContextMenu(menuItemAction, table.contextObjectPath)) {\n\t\t\t\tmenuItemsForContextMenu?.push(menuItemAction);\n\t\t\t}\n\t\t});\n\n\t\tconst menuItems = menuItemsForContextMenu\n\t\t\t.filter((menuItemAction) => typeof menuItemAction !== \"string\")\n\t\t\t.map((menuItemAction) => {\n\t\t\t\treturn getMenuItem(action, menuItemAction, table, forContextMenu, collectionContext, handlerProvider);\n\t\t\t})\n\t\t\t.filter((item) => item !== undefined);\n\n\t\tif (menuItems?.length) {\n\t\t\treturn (\n\t\t\t\t<MenuItem\n\t\t\t\t\ttext={action.text}\n\t\t\t\t\tid={generate([table.id, action.id, \"ContextMenu\"])}\n\t\t\t\t\tvisible={action.visibleForContextMenu}\n\t\t\t\t\tenabled={action.enabled}\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\titems: menuItems\n\t\t\t\t\t}}\n\t\t\t\t</MenuItem>\n\t\t\t);\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n}\n\n/**\n * Generates the xml string for the default button.\n * @param action The name of the action\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @param handlerProvider\n * @returns The xml string for the default button.\n */\nfunction getDefaultButton(\n\taction: CustomAction,\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\thandlerProvider: TableEventHandlerProvider\n): ActionToolbarAction | MenuItem | undefined {\n\tconst command = !forContextMenu ? action.command : action.command + \"::ContextMenu\";\n\tconst pressHandler = action.command ? undefined : handlerProvider.getManifestActionPressHandler(action, forContextMenu);\n\tconst pressCommand = action.command ? `cmd:${command}|press` : undefined;\n\tif (!forContextMenu) {\n\t\t// for table toolbar\n\t\treturn (\n\t\t\t<ActionToolbarAction\n\t\t\t\tid={generate([table.id, action.id, \"ActionToolbarAction\"])}\n\t\t\t\tdt:designtime={action.visible === \"true\" || action.visible === \"false\" ? undefined : \"not-adaptable-visibility\"}\n\t\t\t>\n\t\t\t\t<Button\n\t\t\t\t\tcore:require=\"{FPM: 'sap/fe/core/helpers/FPMHelper'}\"\n\t\t\t\t\tid={generate([table.id, action.id])}\n\t\t\t\t\ttext={action.text}\n\t\t\t\t\tpress={pressHandler}\n\t\t\t\t\tjsx:command={pressCommand}\n\t\t\t\t\ttype={ButtonType.Transparent}\n\t\t\t\t\tvisible={action.visible}\n\t\t\t\t\tenabled={action.enabled}\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcustomData: [createCustomData(\"actionId\", generate([table.id, action.id]))]\n\t\t\t\t\t}}\n\t\t\t\t</Button>\n\t\t\t</ActionToolbarAction>\n\t\t);\n\t} else if (TableHelper.isActionShownInContextMenu(action, table.contextObjectPath)) {\n\t\tconst tableActionContextMenuId = generate([table.id, action.id, \"ContextMenu\"]);\n\t\t// for context menu\n\t\treturn (\n\t\t\t<MenuItem\n\t\t\t\tcore:require=\"{FPM: 'sap/fe/core/helpers/FPMHelper'}\"\n\t\t\t\tid={tableActionContextMenuId}\n\t\t\t\ttext={action.text}\n\t\t\t\tpress={pressHandler}\n\t\t\t\tjsx:command={pressCommand}\n\t\t\t\tvisible={action.visibleForContextMenu}\n\t\t\t\tenabled={action.enabledForContextMenu}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [createCustomData(\"actionId\", tableActionContextMenuId)]\n\t\t\t\t}}\n\t\t\t</MenuItem>\n\t\t);\n\t} else {\n\t\treturn undefined;\n\t}\n}\n\n/**\n * Generates the control for an action button/menu item based on the type of the action.\n * @param action The action to get\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @param collectionContext The context of the collection\n * @param handlerProvider\n * @returns The control of the action\n */\nfunction getAction(\n\taction: BaseAction,\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\tcollectionContext: Context,\n\thandlerProvider: TableEventHandlerProvider\n): ActionToolbarAction | MenuItem | undefined {\n\tswitch (action.type) {\n\t\tcase \"Default\":\n\t\t\tif (\"noWrap\" in action) {\n\t\t\t\treturn getDefaultButton(action as CustomAction, table, forContextMenu, handlerProvider);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"Menu\":\n\t\t\treturn getMenuButton(action, table, forContextMenu, collectionContext, handlerProvider);\n\t\tdefault:\n\t}\n\treturn getDataFieldButton(action, table, forContextMenu, collectionContext, handlerProvider);\n}\n\n/**\n * Generates the copy action.\n * @param action The copy action\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if action is for Action Toolbar of Context Menu\n * @param collectionContext The context of the collection\n * @param handlerProvider\n * @returns The action\n */\nfunction getCopyAction(\n\taction: BaseAction,\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\tcollectionContext: Context,\n\thandlerProvider: TableEventHandlerProvider\n): ActionToolbarAction | MenuItem {\n\tconst dataField = action.annotationPath\n\t\t? (table.convertedMetadata.resolvePath(action.annotationPath).target as DataFieldForAction)\n\t\t: undefined;\n\tconst actionContextPath = CommonHelper.getActionContext(\n\t\ttable.metaPath.getModel().createBindingContext(action.annotationPath + \"/Action\")!\n\t);\n\tconst operationAvailable = dataField?.ActionTarget?.annotations?.Core?.OperationAvailable !== undefined;\n\tconst actionContext = table.metaPath.getModel().createBindingContext(actionContextPath);\n\tconst dataFieldDataModelObjectPath = actionContext\n\t\t? MetaModelConverter.getInvolvedDataModelObjects(actionContext, collectionContext)\n\t\t: undefined;\n\tconst isBound = dataField?.ActionTarget?.isBound;\n\tconst press = dataField\n\t\t? handlerProvider.getDataFieldForActionButtonPressHandler(dataField, action, undefined, forContextMenu)\n\t\t: undefined;\n\tconst enabled = operationAvailable\n\t\t? TableHelper.isDataFieldForActionEnabled(\n\t\t\t\ttable.tableDefinition,\n\t\t\t\tdataField.Action,\n\t\t\t\t!!isBound,\n\t\t\t\tactionContext.getObject(),\n\t\t\t\taction.enableOnSelect,\n\t\t\t\tdataFieldDataModelObjectPath?.targetEntityType,\n\t\t\t\tforContextMenu,\n\t\t\t\ttrue\n\t\t  )\n\t\t: `{= ${ActionHelper.getNumberOfContextsExpression(\"single\", forContextMenu)}}`;\n\tif (!forContextMenu) {\n\t\t// for table toolbar\n\t\treturn (\n\t\t\t<ActionToolbarAction\n\t\t\t\tid={generate([table.id, dataField, \"ActionToolbarAction\"])}\n\t\t\t\tdt:designtime={action.visible === \"true\" || action.visible === \"false\" ? undefined : \"not-adaptable-visibility\"}\n\t\t\t>\n\t\t\t\t<Button\n\t\t\t\t\tid={generate([table.id, dataField])}\n\t\t\t\t\ttext={action.text}\n\t\t\t\t\tpress={press}\n\t\t\t\t\ttype={ButtonType.Transparent}\n\t\t\t\t\tvisible={action.visible}\n\t\t\t\t\tenabled={enabled}\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcustomData: [createCustomData(\"actionId\", generate([table.id, dataField]))]\n\t\t\t\t\t}}\n\t\t\t\t</Button>\n\t\t\t</ActionToolbarAction>\n\t\t);\n\t} else {\n\t\t// for context menu\n\t\treturn (\n\t\t\t<MenuItem\n\t\t\t\tid={generate([table.id, dataField, \"ContextMenu\"])}\n\t\t\t\ttext={action.text}\n\t\t\t\tpress={press}\n\t\t\t\tvisible={action.visibleForContextMenu as unknown as boolean}\n\t\t\t\tenabled={compileExpression(equal(pathInModel(\"contextmenu/numberOfSelectedContexts\", \"internal\"), 1)) as unknown as boolean}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [createCustomData(\"actionId\", generate([table.id, dataField, \"ContextMenu\"]))]\n\t\t\t\t}}\n\t\t\t</MenuItem>\n\t\t);\n\t}\n}\n\n/**\n * Generates the xml string for the create button.\n * @param standardAction Standard actions to be evaluated\n * @param table The instance of the table building block\n * @param forContextMenu Indicates whether the action appears in the context menu. If set to `false`, the action appears in the table toolbar.\n * @param collectionEntity The entity set of the collection\n * @returns The xml string for the create button\n */\nfunction getCreateButton(\n\tstandardAction: StandardAction,\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\tcollectionEntity: EntitySet | NavigationProperty\n): ActionsPlaceholder | ActionToolbarAction | MenuItem {\n\tconst suffixResourceKey = collectionEntity.name;\n\tconst buttonText = table.getTranslatedText(\"M_COMMON_TABLE_CREATE\", undefined, suffixResourceKey);\n\tconst createOutboundDetail = (table.tableDefinition.annotation.create as CreateBehaviorExternal).outboundDetail;\n\n\tif (table.tableDefinition.control.enableUploadPlugin) {\n\t\treturn <ActionsPlaceholder id={`${table.id}-uploadButton`} placeholderFor=\"UploadButtonPlaceholder\" />;\n\t} else if (!forContextMenu) {\n\t\treturn (\n\t\t\t<ActionToolbarAction id={generate([table.id, standardAction.key, \"ActionToolbarAction\"])} dt:designtime=\"not-adaptable-tree\">\n\t\t\t\t<Button\n\t\t\t\t\tid={generate([table.id, standardAction.key])}\n\t\t\t\t\ttext={buttonText}\n\t\t\t\t\tjsx:command=\"cmd:Create|press\"\n\t\t\t\t\ttype={ButtonType.Transparent}\n\t\t\t\t\tvisible={standardAction.visible as unknown as boolean}\n\t\t\t\t\tenabled={standardAction.enabled as unknown as boolean}\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcustomData: createCustomData(\"IBNData\", TableHelper.getIBNData(createOutboundDetail))\n\t\t\t\t\t}}\n\t\t\t\t</Button>\n\t\t\t</ActionToolbarAction>\n\t\t);\n\t} else {\n\t\treturn (\n\t\t\t<MenuItem\n\t\t\t\tid={generate([table.id, standardAction.key, \"ContextMenu\"])}\n\t\t\t\ttext={buttonText}\n\t\t\t\tjsx:command=\"cmd:Create::ContextMenu|press\"\n\t\t\t\tvisible={standardAction.visible as unknown as boolean}\n\t\t\t\tenabled={standardAction.enabledForContextMenu as unknown as boolean}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nfunction getCreateMenu(\n\tstandardAction: StandardAction,\n\ttable: TableBlockProperties,\n\tcollectionEntity: EntitySet | NavigationProperty,\n\tforContextMenu: boolean,\n\thandlerProvider: TableEventHandlerProvider\n): ActionToolbarAction | MenuItem {\n\tconst suffixResourceKey = collectionEntity.name;\n\tconst buttonText = table.getTranslatedText(\"M_COMMON_TABLE_CREATE\", undefined, suffixResourceKey);\n\tconst values = table.tableDefinition.control.nodeType!.values;\n\tconst hasCustomCreateEnablement = table.tableDefinition.control.createEnablement !== undefined;\n\n\tconst menuItems = values.map((allowedValue, index) => {\n\t\tconst modelName = !forContextMenu ? \"\" : \"contextmenu/\";\n\n\t\tconst isEnabled = hasCustomCreateEnablement\n\t\t\t? notEqual(pathInModel(`${modelName}createEnablement/Create_${index}`, \"internal\"), false)\n\t\t\t: undefined;\n\t\tconst id = forContextMenu ? generate([table.id, allowedValue.value, \"ContextMenu\"]) : generate([table.id, allowedValue.value]);\n\t\treturn (\n\t\t\t<MenuItem\n\t\t\t\tid={id}\n\t\t\t\ttext={allowedValue.text}\n\t\t\t\tenabled={isEnabled ? compileExpression(isEnabled) : undefined}\n\t\t\t\tpress={handlerProvider.getCreateMenuItemPressHandler(index, forContextMenu)}\n\t\t\t/>\n\t\t);\n\t});\n\n\tif (forContextMenu) {\n\t\treturn (\n\t\t\t<MenuItem\n\t\t\t\tid={generate([table.id, standardAction.key, \"ContextMenu\"])}\n\t\t\t\ttext={buttonText}\n\t\t\t\tvisible={standardAction.visible as unknown as boolean}\n\t\t\t\tenabled={standardAction.enabledForContextMenu as unknown as boolean}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\titems: menuItems !== undefined && menuItems.length > 0 ? menuItems : undefined\n\t\t\t\t}}\n\t\t\t</MenuItem>\n\t\t);\n\t}\n\n\treturn (\n\t\t<ActionToolbarAction id={generate([table.id, standardAction.key, \"ActionToolbarAction\"])} dt:designtime=\"not-adaptable-tree\">\n\t\t\t<MenuButton\n\t\t\t\ttext={buttonText}\n\t\t\t\ttype={ButtonType.Transparent}\n\t\t\t\tmenuPosition=\"BeginBottom\"\n\t\t\t\tid={generate([table.id, standardAction.key])}\n\t\t\t\tvisible={standardAction.visible as unknown as boolean}\n\t\t\t\tenabled={standardAction.enabled as unknown as boolean}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [createCustomData(\"actionId\", generate([table.id, standardAction.key]))],\n\t\t\t\t\tmenu: <Menu>{menuItems}</Menu>\n\t\t\t\t}}\n\t\t\t</MenuButton>\n\t\t</ActionToolbarAction>\n\t);\n}\n\n/**\n * Generates the xml string for the delete button.\n * @param standardAction Standard actions to be evaluated\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @param collectionEntity The entity set of the collection\n * @returns The xml string for the delete button\n */\nfunction getDeleteButton(\n\tstandardAction: StandardAction,\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\tcollectionEntity: EntitySet | NavigationProperty\n): ActionToolbarAction | MenuItem {\n\tconst suffixResourceKey = collectionEntity.name;\n\tconst buttonText = table.getTranslatedText(\"M_COMMON_TABLE_DELETE\", undefined, suffixResourceKey);\n\tif (!forContextMenu) {\n\t\t// for table toolbar\n\t\treturn (\n\t\t\t<ActionToolbarAction id={generate([table.id, standardAction.key, \"ActionToolbarAction\"])} dt:designtime=\"not-adaptable-tree\">\n\t\t\t\t<Button\n\t\t\t\t\tid={generate([table.id, standardAction.key])}\n\t\t\t\t\ttext={buttonText}\n\t\t\t\t\tjsx:command=\"cmd:DeleteEntry|press\"\n\t\t\t\t\ttype={ButtonType.Transparent}\n\t\t\t\t\tvisible={standardAction.visible as unknown as boolean}\n\t\t\t\t\tenabled={standardAction.enabled as unknown as boolean}\n\t\t\t\t\tariaHasPopup=\"Dialog\"\n\t\t\t\t/>\n\t\t\t</ActionToolbarAction>\n\t\t);\n\t} else {\n\t\t// for context menu\n\t\treturn (\n\t\t\t<MenuItem\n\t\t\t\tid={generate([table.id, standardAction.key, \"ContextMenu\"])}\n\t\t\t\ttext={buttonText}\n\t\t\t\tjsx:command=\"cmd:DeleteEntry::ContextMenu|press\"\n\t\t\t\tvisible={standardAction.visible as unknown as boolean}\n\t\t\t\tenabled={standardAction.enabledForContextMenu as unknown as boolean}\n\t\t\t/>\n\t\t);\n\t}\n}\n\n/**\n * Generates the xml string for standard actions based on the key of the standard action.\n * @param action The action to template\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @param handlerProvider\n * @param collectionEntity The entity set of the collection\n * @returns The xml string representation of the standard action\n */\nfunction getStandardAction(\n\taction: StandardAction,\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\thandlerProvider: TableEventHandlerProvider,\n\tcollectionEntity: EntitySet | NavigationProperty\n): ActionToolbarAction | MenuItem | ActionsPlaceholder | undefined {\n\tif (action.isTemplated === \"false\") {\n\t\treturn undefined;\n\t}\n\n\tswitch (action.key) {\n\t\tcase StandardActionKeys.Create:\n\t\t\tif (\n\t\t\t\t!table.tableDefinition.annotation.isInsertUpdateActionsTemplated ||\n\t\t\t\t// We only have Create on the ContextMenu on the TreeTable\n\t\t\t\t(table.tableDefinition.control.type !== \"TreeTable\" && forContextMenu)\n\t\t\t) {\n\t\t\t\treturn undefined;\n\t\t\t} else if (table.tableDefinition.control.nodeType) {\n\t\t\t\treturn getCreateMenu(action, table, collectionEntity, forContextMenu, handlerProvider);\n\t\t\t} else {\n\t\t\t\treturn getCreateButton(action, table, forContextMenu, collectionEntity);\n\t\t\t}\n\n\t\tcase StandardActionKeys.Delete:\n\t\t\treturn getDeleteButton(action, table, forContextMenu, collectionEntity);\n\t\tcase StandardActionKeys.Cut:\n\t\t\treturn getCutButton(action, table, forContextMenu);\n\t\tcase StandardActionKeys.Paste:\n\t\t\treturn getPasteButton(action, table, forContextMenu);\n\n\t\tcase StandardActionKeys.MassEdit:\n\t\t\tif (table.tableDefinition.annotation.isInsertUpdateActionsTemplated) {\n\t\t\t\tif (!forContextMenu) {\n\t\t\t\t\t// for table toolbar\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<ActionToolbarAction\n\t\t\t\t\t\t\tid={generate([table.id, action.key, \"ActionToolbarAction\"])}\n\t\t\t\t\t\t\tdt:designtime=\"not-adaptable-tree\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tid={generate([table.id, action.key])}\n\t\t\t\t\t\t\t\ttext=\"{sap.fe.i18n>M_COMMON_TABLE_MASSEDIT}\"\n\t\t\t\t\t\t\t\tpress={handlerProvider.getMassEditButtonPressHandler(false)}\n\t\t\t\t\t\t\t\tvisible={action.visible as unknown as boolean}\n\t\t\t\t\t\t\t\tenabled={action.enabled as unknown as boolean}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ActionToolbarAction>\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// for context menu\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<MenuItem\n\t\t\t\t\t\t\tid={generate([table.id, action.key, \"ContextMenu\"])}\n\t\t\t\t\t\t\ttext=\"{sap.fe.i18n>M_COMMON_TABLE_MASSEDIT}\"\n\t\t\t\t\t\t\tpress={handlerProvider.getMassEditButtonPressHandler(true)}\n\t\t\t\t\t\t\tvisible={action.visibleForContextMenu as unknown as boolean}\n\t\t\t\t\t\t\tenabled={action.enabledForContextMenu as unknown as boolean}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn undefined;\n\n\t\tcase StandardActionKeys.Insights:\n\t\t\tif (!forContextMenu) {\n\t\t\t\t// for table toolbar\n\t\t\t\treturn (\n\t\t\t\t\t<ActionToolbarAction\n\t\t\t\t\t\tid={generate([table.id, action.key, \"ActionToolbarAction\"])}\n\t\t\t\t\t\tdt:designtime={action.visible === \"true\" || action.visible === \"false\" ? undefined : \"not-adaptable-visibility\"}\n\t\t\t\t\t\tvisible={action.visible}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tid={generate([table.id, action.key])}\n\t\t\t\t\t\t\ttext=\"{sap.fe.i18n>M_COMMON_INSIGHTS_CARD}\"\n\t\t\t\t\t\t\tpress={handlerProvider.addCardToInsightsPress}\n\t\t\t\t\t\t\tvisible={action.visible as unknown as boolean}\n\t\t\t\t\t\t\tenabled={action.enabled as unknown as boolean}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t\tlayoutData: <OverflowToolbarLayoutData priority=\"AlwaysOverflow\" />\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</ActionToolbarAction>\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn undefined;\n\n\t\tcase StandardActionKeys.MoveUp:\n\t\tcase StandardActionKeys.MoveDown:\n\t\t\treturn getMoveUpDownButton(action, table, forContextMenu);\n\n\t\tdefault:\n\t\t\treturn undefined;\n\t}\n}\n\n/**\n * Generates the xml string for standard, annotation, and custom actions of the table.\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @param handlerProvider\n * @param collectionContext The context of the collection\n * @param collectionEntity The entity set of the collection\n * @returns The xml string representation of the actions\n */\nexport function getActions(\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\thandlerProvider: TableEventHandlerProvider,\n\tcollectionContext: Context,\n\tcollectionEntity: EntitySet | NavigationProperty\n): (ActionToolbarAction | MenuItem | ActionsPlaceholder)[] {\n\treturn table.tableDefinition.actions\n\t\t.map((action) => {\n\t\t\tswitch (action.type) {\n\t\t\t\tcase ActionType.Standard:\n\t\t\t\t\treturn getStandardAction(action as StandardAction, table, forContextMenu, handlerProvider, collectionEntity);\n\t\t\t\tcase ActionType.Copy:\n\t\t\t\t\treturn getCopyAction(action, table, forContextMenu, collectionContext, handlerProvider);\n\t\t\t\tdefault:\n\t\t\t\t\treturn getAction(action, table, forContextMenu, collectionContext, handlerProvider);\n\t\t\t}\n\t\t})\n\t\t.filter((action) => action !== undefined) as (ActionToolbarAction | MenuItem | ActionsPlaceholder)[];\n}\n\n/**\n * Generates the control for BasicSearch.\n * @param useBasicSearch\n * @param filterBarId\n * @param _collectionIsDraftEnabled\n * @param isSearchable\n * @returns The control of the BasicSearch\n */\nfunction getBasicSearch(\n\tuseBasicSearch: boolean,\n\tfilterBarId: string | undefined,\n\t_collectionIsDraftEnabled: boolean,\n\tisSearchable: boolean\n): ActionToolbarAction | undefined {\n\tif (useBasicSearch) {\n\t\treturn (\n\t\t\t<ActionToolbarAction\n\t\t\t\tid={generate([filterBarId, \"ActionToolbarAction\"])}\n\t\t\t\tlabel=\"{sap.fe.i18n>M_BASIC_SEARCH}\"\n\t\t\t\tdt:designtime=\"not-adaptable-tree\"\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\taction: <BasicSearchMacro id={filterBarId} useDraftEditState={_collectionIsDraftEnabled} visible={isSearchable} />\n\t\t\t\t}}\n\t\t\t</ActionToolbarAction>\n\t\t);\n\t}\n\treturn undefined;\n}\n\n/**\n * Generates the control for table fullscreen button.\n * @param table The instance of the table building block\n * @returns The control of the button\n */\nfunction getFullScreen(table: TableBlockProperties): ActionToolbarAction | undefined {\n\tif (table.tableDefinition.control.enableFullScreen) {\n\t\treturn (\n\t\t\t<ActionToolbarAction\n\t\t\t\tid={generate([table.id, \"StandardAction\", \"FullScreen\", \"ActionToolbarAction\"])}\n\t\t\t\tdt:designtime=\"not-adaptable-tree\"\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\taction: <TableFullScreenButton id={generate([table.id, \"StandardAction\", \"FullScreen\"])} />\n\t\t\t\t}}\n\t\t\t</ActionToolbarAction>\n\t\t);\n\t}\n\treturn undefined;\n}\n\n/**\n * Generates the XML string for the Cut Button.\n * @param action The instance of the standardAction\n * @param table The instance of the table building block\n * @param forContextMenu\n * @returns The XML string representation of the Cut Button\n */\nfunction getCutButton(action: StandardAction, table: TableBlockProperties, forContextMenu = false): ActionToolbarAction | MenuItem {\n\tif (!forContextMenu) {\n\t\t// for table toolbar\n\t\treturn (\n\t\t\t<ActionToolbarAction id={generate([table.id, \"Cut\", \"ActionToolbarAction\"])} dt:designtime=\"not-adaptable-tree\">\n\t\t\t\t<Button\n\t\t\t\t\tid={generate([table.id, \"Cut\"])}\n\t\t\t\t\ttext=\"{sap.fe.i18n>M_TABLE_CUT}\"\n\t\t\t\t\tjsx:command=\"cmd:Cut|press\"\n\t\t\t\t\tvisible={action.visible as unknown as boolean}\n\t\t\t\t\tenabled={action.enabled as unknown as boolean}\n\t\t\t\t/>\n\t\t\t</ActionToolbarAction>\n\t\t);\n\t} else {\n\t\t// for context menu\n\t\treturn (\n\t\t\t<MenuItem\n\t\t\t\tid={generate([table.id, \"Cut\", \"ContextMenu\"])}\n\t\t\t\ttext=\"{sap.fe.i18n>M_TABLE_CUT}\"\n\t\t\t\tjsx:command=\"cmd:Cut::ContextMenu|press\"\n\t\t\t\tvisible={action.visible as unknown as boolean}\n\t\t\t\tenabled={action.enabledForContextMenu as unknown as boolean}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nfunction getMoveUpDownButton(action: StandardAction, table: TableBlockProperties, forContextMenu: boolean): ActionToolbarAction | MenuItem {\n\tconst forMoveUp = action.key === StandardActionKeys.MoveUp;\n\tif (!forContextMenu) {\n\t\t// for table toolbar\n\t\treturn (\n\t\t\t<ActionToolbarAction\n\t\t\t\tid={generate([table.id, action.key, \"ActionToolbarAction\"])}\n\t\t\t\tvisible={action.visible}\n\t\t\t\tdt:designtime=\"not-adaptable-tree\"\n\t\t\t>\n\t\t\t\t<Button\n\t\t\t\t\tid={generate([table.id, action.key])}\n\t\t\t\t\ttext={forMoveUp ? \"{sap.fe.i18n>M_TABLE_MOVE_UP}\" : \"{sap.fe.i18n>M_TABLE_MOVE_DOWN}\"}\n\t\t\t\t\tjsx:command={forMoveUp ? \"cmd:TableMoveElementUp|press\" : \"cmd:TableMoveElementDown|press\"}\n\t\t\t\t\tvisible={action.visible as unknown as boolean}\n\t\t\t\t\tenabled={action.enabled as unknown as boolean}\n\t\t\t\t/>\n\t\t\t</ActionToolbarAction>\n\t\t);\n\t} else {\n\t\t// for context menu\n\t\treturn (\n\t\t\t<MenuItem\n\t\t\t\tid={generate([table.id, action.key, \"ContextMenu\"])}\n\t\t\t\ttext={forMoveUp ? \"{sap.fe.i18n>M_TABLE_MOVE_UP}\" : \"{sap.fe.i18n>M_TABLE_MOVE_DOWN}\"}\n\t\t\t\tjsx:command={forMoveUp ? \"cmd:TableMoveElementUp::ContextMenu|press\" : \"cmd:TableMoveElementDown::ContextMenu|press\"}\n\t\t\t\tvisible={action.visible as unknown as boolean}\n\t\t\t\tenabled={action.enabledForContextMenu as unknown as boolean}\n\t\t\t/>\n\t\t);\n\t}\n}\n/**\n * Generates the XML string for the Paste Button.\n * @param action The Paste action\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @returns The XML string representation of the Paste Button\n */\nfunction getPasteButton(\n\taction: StandardAction,\n\ttable: TableBlockProperties,\n\tforContextMenu = false\n): ActionToolbarAction | MenuItem | undefined {\n\tconst tableType = table.tableDefinition.control.type;\n\tif (tableType === \"TreeTable\") {\n\t\tif (!forContextMenu) {\n\t\t\t// for table toolbar\n\t\t\treturn (\n\t\t\t\t<ActionToolbarAction id={generate([table.id, \"Paste\", \"ActionToolbarAction\"])} dt:designtime=\"not-adaptable-tree\">\n\t\t\t\t\t<Button\n\t\t\t\t\t\tid={generate([table.id, \"Paste\"])}\n\t\t\t\t\t\ttext=\"{sap.fe.i18n>M_PASTE}\"\n\t\t\t\t\t\tjsx:command=\"cmd:Paste|press\"\n\t\t\t\t\t\tvisible={action.visible as unknown as boolean}\n\t\t\t\t\t\tenabled={action.enabled as unknown as boolean}\n\t\t\t\t\t/>\n\t\t\t\t</ActionToolbarAction>\n\t\t\t);\n\t\t} else {\n\t\t\t// for Context Menu\n\t\t\treturn (\n\t\t\t\t<MenuItem\n\t\t\t\t\tid={generate([table.id, \"Paste\", \"ContextMenu\"])}\n\t\t\t\t\ttext=\"{sap.fe.i18n>M_PASTE}\"\n\t\t\t\t\tjsx:command=\"cmd:Paste::ContextMenu|press\"\n\t\t\t\t\tvisible={action.visible as unknown as boolean}\n\t\t\t\t\tenabled={action.enabledForContextMenu as unknown as boolean}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t}\n\treturn undefined;\n}\n\n/**\n * Generates the XML string for actions.\n * @param table The instance of the table building block\n * @param handlerProvider\n * @param collectionContext The context of the collection\n * @param collectionEntity The entity set of the collection\n * @returns The XML string representation of the actions\n */\nexport function getTableActionsTemplate(\n\ttable: TableBlockProperties,\n\thandlerProvider: TableEventHandlerProvider,\n\tcollectionContext: Context,\n\tcollectionEntity: EntitySet | NavigationProperty\n): Control[] {\n\tconst _collectionIsDraftEnabled = ModelHelper.isDraftNode(collectionEntity) || ModelHelper.isDraftRoot(collectionEntity);\n\tlet searchable: boolean;\n\tif (table.isSearchable === false) {\n\t\tsearchable = false;\n\t} else {\n\t\tsearchable = table.tableDefinition.annotation.searchable;\n\t}\n\n\tconst actions: (ActionToolbarAction | MenuItem | ActionsPlaceholder)[] = [];\n\tconst basicSearch = getBasicSearch(!!table.useBasicSearch, table.filterBar, _collectionIsDraftEnabled, searchable);\n\tif (basicSearch) {\n\t\tactions.push(basicSearch);\n\t}\n\tactions.push(...getActions(table, false, handlerProvider, collectionContext, collectionEntity));\n\tconst fullScreen = getFullScreen(table);\n\tif (fullScreen) {\n\t\tactions.push(fullScreen);\n\t}\n\n\treturn actions as Control[];\n}\n\n/**\n * Generates the xml string for context menu actions.\n * @param table The instance of the table building block\n * @param handlerProvider\n * @param collectionContext The context of the collection\n * @param collectionEntity The entity set of the collection\n * @returns The xml string representation of the actions\n */\nexport function getTableContextMenuTemplate(\n\ttable: TableBlockProperties,\n\thandlerProvider: TableEventHandlerProvider,\n\tcollectionContext: Context,\n\tcollectionEntity: EntitySet | NavigationProperty\n): MenuItem[] {\n\tconst template: MenuItem[] = getActions(table, true, handlerProvider, collectionContext, collectionEntity) as unknown as MenuItem[];\n\tif (table.tableDefinition.control.type === \"TreeTable\") {\n\t\ttemplate.push(getExpandedCollapseActions(table, true, handlerProvider.expandNode));\n\t\ttemplate.push(getExpandedCollapseActions(table, false, handlerProvider.collapseNode));\n\t}\n\treturn template;\n}\n\nfunction getExpandedCollapseActions(table: TableBlockProperties, expand: boolean, pressHandler?: (e: UI5Event) => void): MenuItem {\n\tconst enableExpression = expand\n\t\t? and(\n\t\t\t\tequal(pathInModel(\"contextmenu/isExpandable\", \"internal\"), true),\n\t\t\t\tequal(pathInModel(\"contextmenu/numberOfSelectedContexts\", \"internal\"), 1)\n\t\t  )\n\t\t: and(\n\t\t\t\tequal(pathInModel(\"contextmenu/isCollapsable\", \"internal\"), true),\n\t\t\t\tequal(pathInModel(\"contextmenu/numberOfSelectedContexts\", \"internal\"), 1)\n\t\t  );\n\treturn (\n\t\t<MenuItem\n\t\t\tid={generate([table.id, expand ? \"Expand\" : \"Collapse\", \"ContextMenu\"])}\n\t\t\ttext={expand ? \"{sap.fe.i18n>M_TABLE_CONTEXTMENU_EXPAND}\" : \"{sap.fe.i18n>M_TABLE_CONTEXTMENU_COLLAPSE}\"}\n\t\t\tpress={pressHandler}\n\t\t\tenabled={enableExpression}\n\t\t/>\n\t);\n}\n"],"mappings":"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","ignoreList":[]}