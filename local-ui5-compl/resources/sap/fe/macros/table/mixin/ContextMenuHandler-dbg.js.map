{"version":3,"names":["ContextMenuHandler","contextMenuActive","_exports","_proto","prototype","setupMixin","_baseClass","alignContextMenuWithTableToolbarChanges","table","contextMenu","getContextMenu","sortHelperForMenuItems","tableActions","getActions","forEach","tableAction","tableActionItem","getAggregation","_isActionSplit","_splitActionsInContextMenu","_isActionCombined","_combineActionInContextMenu","contextMenuItem","_getCorrespondingContextMenuAction","_alignTextAndVisiblityInContextMenu","push","length","menuItem","sortIndex","indexOfContextMenu","indexOfItem","removeItem","insertItem","actionItem","getMetadata","getName","dependents","getDependents","flexManagedObjectModels","filter","dependent","ManagedObjectModel","some","model","includes","contextMenuItems","getItems","menuButton","_findOrCreateMenuButtonInContextMenu","actionItems","getMenu","action","toolBarAction","actionIdInContextMenu","data","actionIdInToolbar","replace","setText","getText","addItem","getId","actionInSubMenu","_findActionInSubMenu","destroy","subMenu","splice","indexOf","undefined","newMenuButton","MenuItem","id","generate","text","menuItems","i","item","subItems","subItem","index","tableActionVisibility","getVisible","setVisible","setContextMenuActive","active","isContextMenuActive","_onContextMenuPress","oEvent","getSource","tableContexts","getSelectedContexts","contextMenuContext","getParameter","internalModelContext","getBindingContext","contextMenuSelection","getRelevantSelection","oneContextIsActive","context","isInactive","setProperty","activeSelectedContexts","oContext","visibleMenuItems","preventDefault","isExpandable","singleContext","isExpanded","isCollapsable","deleteHelper","updateDeleteInfoForSelectedContexts","navigationAvailableMap","TableRuntime","setIntentBasedNavigationEnablement","updatablePropertyPath","draft","readOnlyDraftEnabled","updatableContexts","selectedContext","isUpdatableContext","tableDefinition","getTableDefinition","control","createEnablement","_updateCreateEnablement","nodeType","updateCutPasteEnablement","getObject","updateMoveUpDownEnablement","operationAvailableMap","customData","ActionRuntime","setActionEnablement","JSON","parse"],"sourceRoot":".","sources":["ContextMenuHandler.ts"],"sourcesContent":["import { type IInterfaceWithMixin } from \"sap/fe/base/ClassSupport\";\nimport ActionRuntime from \"sap/fe/core/ActionRuntime\";\nimport deleteHelper from \"sap/fe/core/helpers/DeleteHelper\";\nimport type { InternalModelContext } from \"sap/fe/core/helpers/ModelHelper\";\nimport { generate } from \"sap/fe/core/helpers/StableIdHelper\";\nimport type Button from \"sap/m/Button\";\nimport type Menu from \"sap/m/Menu\";\nimport type MenuButton from \"sap/m/MenuButton\";\nimport MenuItem from \"sap/m/MenuItem\";\nimport ManagedObjectModel from \"sap/ui/fl/util/ManagedObjectModel\";\nimport type MDCTable from \"sap/ui/mdc/Table\";\nimport type { Table$BeforeOpenContextMenuEvent } from \"sap/ui/mdc/Table\";\nimport type ActionToolbarAction from \"sap/ui/mdc/actiontoolbar/ActionToolbarAction\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport { type ITableBlock } from \"../TableAPI\";\nimport TableRuntime from \"../TableRuntime\";\n\nexport default class ContextMenuHandler implements IInterfaceWithMixin {\n\tprotected contextMenuActive = false;\n\n\tsetupMixin(_baseClass: Function): void {\n\t\t// This method is needed to implement interface IInterfaceWithMixin\n\t}\n\n\t/**\n\t * Align context menu with the table actions by RTA changes in table toolbar.\n\t * @param table The table with bound table actions\n\t */\n\talignContextMenuWithTableToolbarChanges(table: MDCTable): void {\n\t\tconst contextMenu = table.getContextMenu() as Menu;\n\t\tconst sortHelperForMenuItems: MenuItem[] = [];\n\t\tconst tableActions = table.getActions();\n\t\ttableActions?.forEach((tableAction) => {\n\t\t\tconst tableActionItem = tableAction.getAggregation(\"action\") as Button;\n\t\t\t// Check if the action item has been split by RTA\n\t\t\tif (this._isActionSplit(tableActionItem)) {\n\t\t\t\t// Remove original menu item and add sub items as new menu items\n\t\t\t\tthis._splitActionsInContextMenu(tableActionItem, contextMenu);\n\t\t\t}\n\t\t\t// Check if the action item has been created by combining the two actions\n\t\t\tif (this._isActionCombined(tableActionItem)) {\n\t\t\t\tthis._combineActionInContextMenu(tableActionItem as unknown as MenuButton, contextMenu, table);\n\t\t\t}\n\t\t\tconst contextMenuItem = this._getCorrespondingContextMenuAction(tableActionItem, contextMenu);\n\t\t\tif (contextMenuItem) {\n\t\t\t\tthis._alignTextAndVisiblityInContextMenu(tableActionItem, contextMenuItem, tableAction as ActionToolbarAction);\n\t\t\t\tsortHelperForMenuItems.push(contextMenuItem);\n\t\t\t}\n\t\t});\n\t\t// Align the order of context-menuItems with bound table actions\n\t\tif (sortHelperForMenuItems.length) {\n\t\t\tsortHelperForMenuItems.forEach((menuItem, sortIndex) => {\n\t\t\t\tconst indexOfContextMenu = contextMenu.indexOfItem(menuItem);\n\t\t\t\tif (indexOfContextMenu !== sortIndex) {\n\t\t\t\t\tcontextMenu.removeItem(menuItem);\n\t\t\t\t\tcontextMenu.insertItem(menuItem, sortIndex);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Check if the action item has been created by a Combine RTA changes in the table toolbar.\n\t * @param actionItem The action to check\n\t * @returns True if the action item has been created by a Combine RTA changes in the table toolbar\n\t */\n\t_isActionCombined(actionItem: Button): boolean {\n\t\tif (actionItem.getMetadata().getName() === \"sap.m.MenuButton\") {\n\t\t\t// We don't have custom data attribute on the MenuButton created by RTA combine change\n\t\t\tconst dependents = actionItem.getDependents();\n\t\t\t// find all the dependents which are a Flex ManagedObjectModel\n\t\t\tconst flexManagedObjectModels = dependents.filter((dependent) => dependent instanceof ManagedObjectModel);\n\t\t\t// check if the name of one of them includes \"$sap.m.flexibility.MenuButtonModel\"\n\t\t\treturn flexManagedObjectModels.some((model) =>\n\t\t\t\t(model as unknown as ManagedObjectModel).getName().includes(\"$sap.m.flexibility.MenuButtonModel\")\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Combine the actions in the context menu to align with the table action toolbar.\n\t * @param actionItem The action item to split\n\t * @param contextMenu The context menu\n\t * @param table The MDCTable\n\t */\n\t_combineActionInContextMenu(actionItem: MenuButton, contextMenu: Menu, table: MDCTable): void {\n\t\tconst contextMenuItems = contextMenu.getItems();\n\t\t// Create a new menu button in the context menu if it does not exist\n\t\tconst menuButton = this._findOrCreateMenuButtonInContextMenu(actionItem, table);\n\t\tconst actionItems = actionItem.getMenu().getItems();\n\t\tfor (const action of actionItems) {\n\t\t\tconst toolBarAction = action;\n\t\t\t// now find the action in the context menu and remove it from the context menu\n\t\t\tfor (const menuItem of contextMenuItems) {\n\t\t\t\tconst actionIdInContextMenu = menuItem.data(\"actionId\");\n\t\t\t\tconst actionIdInToolbar = toolBarAction.data(\"actionId\");\n\t\t\t\tif (\n\t\t\t\t\tactionIdInContextMenu === actionIdInToolbar + \"::ContextMenu\" ||\n\t\t\t\t\tactionIdInContextMenu === actionIdInToolbar.replace(\"::ActionMenu\", \"::ContextMenu\")\n\t\t\t\t) {\n\t\t\t\t\tmenuItem.setText(toolBarAction.getText());\n\t\t\t\t\t// Add the action to the menu button\n\t\t\t\t\tcontextMenu.removeItem(menuItem);\n\t\t\t\t\tmenuButton.addItem(menuItem);\n\t\t\t\t}\n\t\t\t\t// If we find another menu in the context menu we check if the action is in the sub menu\n\t\t\t\tif (menuItem.getItems().length > 0 && !menuItem.getId().includes(actionItem.getId())) {\n\t\t\t\t\tconst actionInSubMenu = this._findActionInSubMenu(menuItem.getItems(), toolBarAction);\n\t\t\t\t\tif (actionInSubMenu) {\n\t\t\t\t\t\tactionInSubMenu.setText(toolBarAction.getText());\n\t\t\t\t\t\tmenuButton.addItem(actionInSubMenu);\n\t\t\t\t\t\tif (menuItem.getItems().length === 0) {\n\t\t\t\t\t\t\tmenuItem.destroy();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Finds the action in an action menu in the context menu, it return the action if found and removes it from the menu.\n\t * @param subMenu The array of actions in the menu\n\t * @param actionItem The action we are searching for\n\t * @returns The action if found, otherwise undefined\n\t */\n\t_findActionInSubMenu(subMenu: MenuItem[], actionItem: MenuItem): MenuItem | undefined {\n\t\tfor (const menuItem of subMenu) {\n\t\t\tif (\n\t\t\t\tmenuItem.data(\"actionId\") === actionItem.data(\"actionId\").replace(\"::ActionMenu\", \"::ContextMenu\") ||\n\t\t\t\tmenuItem.data(\"actionId\") === actionItem.data(\"actionId\") + \"::ContextMenu\"\n\t\t\t) {\n\t\t\t\tconst action = menuItem;\n\t\t\t\tsubMenu.splice(subMenu.indexOf(menuItem), 1);\n\t\t\t\treturn action;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Check's if a particular menu button exists in the context menu, if not creates a new menu button and adds it to the context menu.\n\t * @param actionItem The menu button to find or create\n\t * @param table The MDCTable\n\t * @returns The MenuItem if found, otherwise a new MenuItem\n\t */\n\t_findOrCreateMenuButtonInContextMenu(actionItem: MenuButton, table: MDCTable): MenuItem {\n\t\tconst contextMenu = table.getContextMenu() as Menu;\n\t\tconst contextMenuItems = contextMenu.getItems();\n\t\t//loop over contextMenuItems and check if the required menu button already exists\n\t\tfor (const menuItem of contextMenuItems) {\n\t\t\tif (menuItem.getId().includes(actionItem.getId())) {\n\t\t\t\treturn menuItem;\n\t\t\t}\n\t\t}\n\t\t// if the required menu button does not exist, create a new menu button and add it to the contextMenu\n\t\tconst newMenuButton = new MenuItem({\n\t\t\tid: generate([table.getId(), actionItem.getId(), \"::ContextMenu\"]),\n\t\t\ttext: actionItem.getText()\n\t\t});\n\t\tcontextMenu.addItem(newMenuButton);\n\t\treturn newMenuButton;\n\t}\n\n\t/**\n\t * Split the action items in the context menu.\n\t * @param actionItem The action item to split\n\t * @param contextMenu The context menu\n\t */\n\t_splitActionsInContextMenu(actionItem: Button, contextMenu: Menu): void {\n\t\tconst menuItems = contextMenu.getItems();\n\t\tfor (let i = 0; i < menuItems.length; i++) {\n\t\t\t//check if the menu item is a Menu\n\t\t\tif (menuItems[i].getItems().length > 0) {\n\t\t\t\tif (\n\t\t\t\t\tmenuItems[i]\n\t\t\t\t\t\t.getItems()\n\t\t\t\t\t\t.some((item) => item.data(\"actionId\") === actionItem.data(\"actionId\").replace(\"::ActionMenu\", \"::ContextMenu\"))\n\t\t\t\t) {\n\t\t\t\t\tconst menuItem = menuItems[i];\n\t\t\t\t\tconst subItems = menuItem.getItems();\n\t\t\t\t\t// Remove the menuItem from the context menu\n\t\t\t\t\tcontextMenu.removeItem(menuItem);\n\t\t\t\t\t// Insert these sub-items into the contextMenu starting from the original index\n\t\t\t\t\tsubItems.forEach((subItem, index) => {\n\t\t\t\t\t\tcontextMenu.insertItem(subItem, i + index);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets the corresponding context menu action for the table action.\n\t * @param tableAction The action item to split\n\t * @param contextMenu The context menu\n\t * @returns  MenuItem|null the corresponding context menu action or null if not found\n\t */\n\t_getCorrespondingContextMenuAction(tableAction: Button, contextMenu: Menu): MenuItem | null {\n\t\tconst menuItems = contextMenu.getItems();\n\t\tfor (const item of menuItems) {\n\t\t\t// the corresponding context menu action is either an item with an additional \"::ContextMenu\" text at the end of the id\n\t\t\t// or it is a splitted menu item where the \"::ContextMenu\" part is in the middle of the id\n\t\t\tif (\n\t\t\t\ttableAction.getId() + \"::ContextMenu\" === item.getId() ||\n\t\t\t\titem.data(\"actionId\") === tableAction.data(\"actionId\")?.replace(\"::ActionMenu\", \"::ContextMenu\")\n\t\t\t) {\n\t\t\t\treturn item;\n\t\t\t}\n\t\t\t// for combined actions, the context menu action is the one with the same text\n\t\t\tif (item.getId().includes(tableAction.getId())) {\n\t\t\t\treturn item;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Adjust the text and visibility of the action items in the context menu.\n\t * @param actionItem The action item to split\n\t * @param contextMenuItem The context menu\n\t * @param tableAction The array of table actions\n\t */\n\t_alignTextAndVisiblityInContextMenu(actionItem: Button, contextMenuItem: MenuItem, tableAction: ActionToolbarAction): void {\n\t\t// change the text of the menu item as the text of action item\n\t\tcontextMenuItem.setText(actionItem.getText());\n\t\t// change the visibility of the contextMenu action as the visibility of table action\n\t\tconst tableActionVisibility = actionItem.getVisible() && tableAction.getVisible();\n\t\tif (tableActionVisibility !== contextMenuItem.getVisible()) {\n\t\t\tcontextMenuItem.setVisible(tableActionVisibility);\n\t\t}\n\t}\n\n\t/**\n\t * Check if an action has been split by RTA.\n\t * @param actionItem The original action item\n\t * @returns Boolean indicating if the action has been split\n\t */\n\t_isActionSplit(actionItem: Button): boolean {\n\t\tif (actionItem.getMetadata().getName() === \"sap.m.MenuButton\") {\n\t\t\treturn false;\n\t\t}\n\t\tconst dependents = actionItem.getDependents();\n\t\t// find all the dependents which are a Flex ManagedObjectModel\n\t\tconst flexManagedObjectModels = dependents.filter((dependent) => dependent instanceof ManagedObjectModel);\n\t\t// check if one of them has the name \"$sap.m.flexibility.SplitButtonsModel\"\n\t\treturn flexManagedObjectModels.some(\n\t\t\t(model) => (model as unknown as ManagedObjectModel).getName() === \"$sap.m.flexibility.SplitButtonsModel\"\n\t\t);\n\t}\n\n\t/**\n\t * Sets a flag to indicate that a context menu item has been pressed.\n\t * @param active\n\t */\n\tsetContextMenuActive(active: boolean): void {\n\t\tthis.contextMenuActive = active;\n\t}\n\n\tisContextMenuActive(): boolean {\n\t\treturn this.contextMenuActive;\n\t}\n\n\t/**\n\t * Handler when an item in the context menu is pressed.\n\t * @param oEvent\n\t */\n\t_onContextMenuPress(this: ITableBlock & ContextMenuHandler, oEvent: Table$BeforeOpenContextMenuEvent): void {\n\t\tconst table = oEvent.getSource(),\n\t\t\ttableContexts = table.getSelectedContexts() as Context[], // selected items in the table\n\t\t\tcontextMenuContext = oEvent.getParameter(\"bindingContext\") as Context, // row clicked for context menu\n\t\t\tinternalModelContext = this.getBindingContext(\"internal\") as InternalModelContext;\n\n\t\tconst contextMenuSelection = this.getRelevantSelection(tableContexts, contextMenuContext);\n\n\t\t// Check if all contexts in contextMenuSelection are inactive\n\t\t// if so, set the inactiveContext property in the internal model to true\n\t\t// if just one context is not inactive, set the inactiveContext property to false\n\t\tlet oneContextIsActive = true;\n\t\toneContextIsActive = contextMenuSelection.some((context) => !context.isInactive());\n\t\tinternalModelContext?.setProperty(\"contextmenu/inactiveContext\", !oneContextIsActive);\n\n\t\t// Do not consider empty rows as selected context, for other actions than delete\n\t\tconst activeSelectedContexts = contextMenuSelection.filter(function (oContext: Context) {\n\t\t\treturn !oContext.isInactive();\n\t\t});\n\t\tinternalModelContext?.setProperty(\"contextmenu/selectedContexts\", activeSelectedContexts);\n\t\tinternalModelContext?.setProperty(\"contextmenu/numberOfSelectedContexts\", activeSelectedContexts.length);\n\t\tinternalModelContext?.setProperty(\"contextmenu/numberOfSelectedContextsForDelete\", contextMenuSelection.length);\n\n\t\tif (activeSelectedContexts.length > 0) {\n\t\t\t/* Align context menu with RTA changes in table toolbar */\n\t\t\tthis.alignContextMenuWithTableToolbarChanges(table);\n\t\t}\n\t\t// Check if the context menu contains only not visible items\n\t\t// in that case prevent the context menu from opening\n\t\tconst contextMenu = table.getContextMenu() as Menu;\n\t\tconst menuItems = contextMenu.getItems();\n\n\t\tconst visibleMenuItems = menuItems.filter((menuItem) => menuItem.getVisible());\n\t\tif (visibleMenuItems.length === 0) {\n\t\t\toEvent.preventDefault();\n\t\t}\n\n\t\t// Enablement of the Expand/Collapse buttons\n\t\tconst isExpandable = contextMenuSelection.some((singleContext) => singleContext.isExpanded() !== undefined);\n\t\tconst isCollapsable = contextMenuSelection.some((singleContext) => singleContext.isExpanded());\n\t\tinternalModelContext?.setProperty(\"contextmenu/isExpandable\", isExpandable);\n\t\tinternalModelContext?.setProperty(\"contextmenu/isCollapsable\", isCollapsable);\n\n\t\t// Action enablement for Delete\n\t\tinternalModelContext?.setProperty(\"controlId\", table.getId());\n\t\tdeleteHelper.updateDeleteInfoForSelectedContexts(internalModelContext, contextMenuSelection, true);\n\n\t\t// Action enablement for IBN\n\t\tif (!table.data(\"enableAnalytics\")) {\n\t\t\tconst navigationAvailableMap = table?.data(\"navigationAvailableMap\");\n\t\t\tTableRuntime.setIntentBasedNavigationEnablement(internalModelContext, navigationAvailableMap, activeSelectedContexts, true);\n\t\t}\n\n\t\t// Action enablement for Mass Edit\n\t\tconst updatablePropertyPath = table?.data(\"updatablePropertyPath\");\n\t\tconst draft = table?.data(\"draft\");\n\t\tconst readOnlyDraftEnabled = table.data(\"displayModePropertyBinding\") === \"true\" && draft !== \"undefined\";\n\t\tconst updatableContexts: Context[] = [];\n\t\tfor (const selectedContext of activeSelectedContexts) {\n\t\t\tif (TableRuntime.isUpdatableContext(updatablePropertyPath, selectedContext, readOnlyDraftEnabled)) {\n\t\t\t\tupdatableContexts.push(selectedContext);\n\t\t\t}\n\t\t}\n\t\tinternalModelContext?.setProperty(\"contextmenu/updatableContexts\", updatableContexts);\n\n\t\tconst tableDefinition = this.getTableDefinition();\n\t\tif (tableDefinition.control.createEnablement && contextMenuSelection.length === 1) {\n\t\t\tTableRuntime._updateCreateEnablement(\n\t\t\t\tinternalModelContext,\n\t\t\t\ttableDefinition.control.createEnablement,\n\t\t\t\ttable,\n\t\t\t\tcontextMenuSelection[0],\n\t\t\t\ttableDefinition.control.nodeType,\n\t\t\t\ttrue\n\t\t\t);\n\t\t}\n\n\t\tTableRuntime.updateCutPasteEnablement(internalModelContext.getObject(), table, true);\n\t\tTableRuntime.updateMoveUpDownEnablement(internalModelContext.getObject(), table, true);\n\n\t\t// Other action enablement\n\t\tconst operationAvailableMap = table?.data(\"operationAvailableMap\").customData;\n\t\tActionRuntime.setActionEnablement(internalModelContext, JSON.parse(operationAvailableMap), activeSelectedContexts, \"table\", true);\n\t}\n\n\tgetRelevantSelection(tableContexts: Context[], contextMenuContext: Context): Context[] {\n\t\tlet contextMenuSelection: Context[];\n\t\tif (tableContexts.includes(contextMenuContext)) {\n\t\t\tcontextMenuSelection = tableContexts;\n\t\t} else {\n\t\t\tcontextMenuSelection = [contextMenuContext] as Context[];\n\t\t}\n\t\treturn contextMenuSelection;\n\t}\n}\n"],"mappings":"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","ignoreList":[],"file":"ContextMenuHandler-dbg.js"}