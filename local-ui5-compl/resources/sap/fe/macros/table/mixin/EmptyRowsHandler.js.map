{"version":3,"file":"EmptyRowsHandler.js","names":["EmptyRowsHandler","_exports","_proto","prototype","setupMixin","_baseClass","this","creatingEmptyRows","_onFieldLiveChange","ui5Event","field","getSource","bindingContext","getBindingContext","binding","getBinding","isInactive","table","getContent","createEmptyRows","_handleCreateActivate","async","activateEvent","activatedContext","getParameter","validateEmptyRow","preventDefault","transientPath","getPath","view","CommonUtils","getTargetView","controller","getController","editFlow","created","Promise","resolve","onAfterCreate","context","e","Log","warning","content","collaborativeDraft","send","action","Activity","Create","updateLocksForContextPath","error","getDefaultValuesFunction","listBinding","model","getModel","metaModel","getMetaModel","metaContext","getMetaContext","getResolvedPath","listBindingObjectPath","getInvolvedDataModelObjects","defaultFuncOnTargetObject","targetObject","annotations","Common","DefaultValuesFunction","defaultFuncOnTargetEntitySet","targetEntitySet","setEmptyRowsEnabled","enablement","setProperty","navigationPath","data","appComponent","getAppComponent","getRowBinding","defaultValuesFunction","undefined","getSideEffectsService","registerTargetCallback","updateEmptyRows","bind","deregisterTargetCallback","setUpEmptyRows","bindingHeaderContext","getHeaderContext","isResolved","isLengthFinal","contextPath","_deleteEmptyRows","createButtonWasPressed","arguments","length","getTableDefinition","control","creationMode","CreationMode","InlineCreationRows","uiModel","getProperty","watchBinding","bindProperty","fnHandler","detachChange","destroy","attachChange","emptyRowsEnabled","removeEmptyRowsMessages","getIsEditable","inlineCreationRowsHiddenInEditMode","inactiveContext","getAllCurrentContexts","find","startsWith","delete","getInactiveContextNumber","filter","requiredProperties","annotation","missingProperties","requiredProperty","getObject","resourceBundle","Library","getResourceBundleFor","messages","displayedColumn","missingProperty","errorMessage","missingColumn","columns","tableColumn","relativePath","propertyInfos","includes","getText","getColumns","mdcColumn","getPropertyKey","name","getHeader","label","push","Message","message","processor","type","MessageType","Error","technical","persistent","technicalDetails","tableId","getId","emptyRowMessage","target","Messaging","addMessages","inactiveContexts","removeMessages","getMessageModel","getData","msg","getTechnicalDetails","contextMatches","Array","isArray","some","getTargets","value","recreateOneRow","newInlineCreationRowFromPaste","forceCreateatEnd","inlineCreationRowCount","from","atEnd","inactive","dataForCreate","contexts","createMultipleDocuments","onBeforeCreate","requestSideEffectsForNavigationProperty","forEach","canceled"],"sources":["./EmptyRowsHandler.ts"],"sourcesContent":["import type { EntitySet, NavigationProperty } from \"@sap-ux/vocabularies-types\";\nimport type { DefaultValuesFunction } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport Log from \"sap/base/Log\";\nimport { type IInterfaceWithMixin } from \"sap/fe/base/ClassSupport\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport { Activity } from \"sap/fe/core/controllerextensions/collaboration/CollaborationCommon\";\nimport { CreationMode } from \"sap/fe/core/converters/ManifestSettings\";\nimport { getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport type { AnnotationTableColumn } from \"sap/fe/core/converters/controls/Common/Table\";\nimport type UI5Event from \"sap/ui/base/Event\";\nimport type Control from \"sap/ui/core/Control\";\nimport Library from \"sap/ui/core/Lib\";\nimport Messaging from \"sap/ui/core/Messaging\";\nimport Message from \"sap/ui/core/message/Message\";\nimport MessageType from \"sap/ui/core/message/MessageType\";\nimport type MDCTable from \"sap/ui/mdc/Table\";\nimport type MDCColumn from \"sap/ui/mdc/table/Column\";\nimport type JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport type { ContextErrorType } from \"sap/ui/model/odata/v4/Context\";\nimport type ODataListBinding from \"sap/ui/model/odata/v4/ODataListBinding\";\nimport { type ITableBlock } from \"../TableAPI\";\n\nexport default class EmptyRowsHandler implements IInterfaceWithMixin {\n\tcreatingEmptyRows?: boolean;\n\n\tsetupMixin(_baseClass: Function): void {\n\t\tthis.creatingEmptyRows = false;\n\t}\n\n\t/**\n\t * Handler for the onFieldLiveChange event.\n\t * @param ui5Event The event object passed by the onFieldLiveChange event\n\t */\n\t_onFieldLiveChange(this: ITableBlock & EmptyRowsHandler, ui5Event: UI5Event<{}, Control>): void {\n\t\tconst field = ui5Event.getSource(),\n\t\t\tbindingContext = field.getBindingContext() as Context,\n\t\t\tbinding = bindingContext.getBinding();\n\t\t// creation of a new inactive row if relevant\n\t\tif (bindingContext.isInactive()) {\n\t\t\tconst table = this?.getContent();\n\t\t\tthis?.createEmptyRows(binding as ODataListBinding, table, true);\n\t\t}\n\t}\n\n\t/**\n\t * Handles the CreateActivate event from the ODataListBinding.\n\t * @param activateEvent The event sent by the binding\n\t */\n\tasync _handleCreateActivate(\n\t\tthis: ITableBlock & EmptyRowsHandler,\n\t\tactivateEvent: UI5Event<{ context: Context }, ODataListBinding>\n\t): Promise<void> {\n\t\tconst activatedContext = activateEvent.getParameter(\"context\");\n\t\t// we start by asking to recreate an empty row (if live change has already done it this won't have any effect)\n\t\t// but we do not wait\n\t\tthis.createEmptyRows(activateEvent.getSource(), this.getContent(), true);\n\t\tif (!this.validateEmptyRow(activatedContext)) {\n\t\t\tactivateEvent.preventDefault();\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tconst transientPath = activatedContext.getPath(),\n\t\t\t\tview = CommonUtils.getTargetView(this),\n\t\t\t\tcontroller = view.getController(),\n\t\t\t\teditFlow = controller.editFlow;\n\t\t\ttry {\n\t\t\t\tawait (activatedContext.created() ?? Promise.resolve());\n\t\t\t\tawait editFlow.onAfterCreate({ context: activatedContext });\n\t\t\t} catch (e) {\n\t\t\t\tLog.warning(`Failed to activate context ${activatedContext.getPath()}`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst content = activatedContext.getPath();\n\t\t\tconst collaborativeDraft = view.getController().collaborativeDraft;\n\t\t\t// Send notification to other users only after the creation has been finalized\n\t\t\tcollaborativeDraft.send({ action: Activity.Create, content });\n\t\t\t// Since the path of the context has changed during activation, we need to update all collaboration locks\n\t\t\t// that were using the transient path\n\t\t\tcollaborativeDraft.updateLocksForContextPath(transientPath, activatedContext.getPath());\n\t\t} catch (error) {\n\t\t\tLog.error(\"Failed to activate new row -\", error as Error);\n\t\t}\n\t}\n\n\t/**\n\t * Get the default values from the DefaultValues function.\n\t * @param listBinding The current list binding\n\t * @returns The DefaultValues function (or undefined if no function is found)\n\t */\n\tgetDefaultValuesFunction(listBinding: ODataListBinding): DefaultValuesFunction | undefined {\n\t\tconst model = listBinding.getModel();\n\t\tconst metaModel = model.getMetaModel();\n\t\tconst metaContext = metaModel.getMetaContext(listBinding.getResolvedPath() as string);\n\t\tconst listBindingObjectPath = getInvolvedDataModelObjects(metaContext);\n\n\t\tconst defaultFuncOnTargetObject = (listBindingObjectPath.targetObject as NavigationProperty | EntitySet).annotations.Common\n\t\t\t?.DefaultValuesFunction;\n\t\tconst defaultFuncOnTargetEntitySet = (listBindingObjectPath.targetEntitySet as EntitySet | undefined)?.annotations.Common\n\t\t\t?.DefaultValuesFunction;\n\n\t\treturn defaultFuncOnTargetObject ?? defaultFuncOnTargetEntitySet;\n\t}\n\n\t/**\n\t * EmptyRowsEnabled setter.\n\t * @param enablement\n\t */\n\tsetEmptyRowsEnabled(this: ITableBlock & EmptyRowsHandler, enablement: boolean): void {\n\t\tthis.setProperty(\"emptyRowsEnabled\", enablement);\n\t\tconst navigationPath = this.getContent().data().navigationPath,\n\t\t\tappComponent = CommonUtils.getAppComponent(this.getContent());\n\t\tif (enablement) {\n\t\t\tconst listBinding = this.getContent().getRowBinding();\n\t\t\tconst defaultValuesFunction = listBinding?.getResolvedPath() ? this.getDefaultValuesFunction(listBinding) : undefined;\n\t\t\tif (defaultValuesFunction) {\n\t\t\t\tappComponent.getSideEffectsService().registerTargetCallback(navigationPath, this.updateEmptyRows.bind(this));\n\t\t\t}\n\t\t} else {\n\t\t\tappComponent.getSideEffectsService().deregisterTargetCallback(navigationPath);\n\t\t}\n\t\tthis.setUpEmptyRows(this.getContent());\n\t}\n\n\t/**\n\t * Remove and recreate the empty rows in order to get any updated default values.\n\t *\n\t */\n\tasync updateEmptyRows(this: ITableBlock & EmptyRowsHandler): Promise<void> {\n\t\tconst table = this.getContent();\n\t\tconst binding = table.getRowBinding();\n\t\tconst bindingHeaderContext = binding.getHeaderContext();\n\t\tif (binding && binding.isResolved() && binding.isLengthFinal() && bindingHeaderContext) {\n\t\t\tconst contextPath = bindingHeaderContext.getPath();\n\t\t\tthis._deleteEmptyRows(binding, contextPath);\n\t\t\tawait this.createEmptyRows(binding, table);\n\t\t}\n\t\treturn;\n\t}\n\n\tasync setUpEmptyRows(this: ITableBlock & EmptyRowsHandler, table: MDCTable, createButtonWasPressed = false): Promise<void> {\n\t\tif (this.getTableDefinition().control?.creationMode !== CreationMode.InlineCreationRows) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst uiModel = table.getModel(\"ui\") as JSONModel | undefined;\n\t\tif (!uiModel) {\n\t\t\treturn;\n\t\t}\n\t\tif (uiModel.getProperty(\"/isEditablePending\")) {\n\t\t\t// The edit mode is still being computed, so we wait until this computation is done before checking its value\n\t\t\tconst watchBinding = uiModel.bindProperty(\"/isEditablePending\");\n\t\t\tawait new Promise<void>((resolve) => {\n\t\t\t\tconst fnHandler = (): void => {\n\t\t\t\t\twatchBinding.detachChange(fnHandler);\n\t\t\t\t\twatchBinding.destroy();\n\t\t\t\t\tresolve();\n\t\t\t\t};\n\t\t\t\twatchBinding.attachChange(fnHandler);\n\t\t\t});\n\t\t}\n\t\tconst binding = table.getRowBinding() as ODataListBinding | undefined;\n\t\tconst bindingHeaderContext = binding?.getHeaderContext();\n\t\tif (binding && binding.isResolved() && binding.isLengthFinal() && bindingHeaderContext) {\n\t\t\tconst contextPath = bindingHeaderContext.getPath();\n\t\t\tif (!this.emptyRowsEnabled) {\n\t\t\t\tthis.removeEmptyRowsMessages();\n\t\t\t\treturn this._deleteEmptyRows(binding, contextPath);\n\t\t\t}\n\t\t\tif (!CommonUtils.getIsEditable(table)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (\n\t\t\t\tthis.getTableDefinition().control?.inlineCreationRowsHiddenInEditMode &&\n\t\t\t\t!table.getBindingContext(\"pageInternal\")?.getProperty(\"createMode\") &&\n\t\t\t\t!createButtonWasPressed\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst inactiveContext = binding.getAllCurrentContexts().find(function (context) {\n\t\t\t\t// when this is called from controller code we need to check that inactive contexts are still relative to the current table context\n\t\t\t\treturn context.isInactive() && context.getPath().startsWith(contextPath);\n\t\t\t});\n\t\t\tif (!inactiveContext) {\n\t\t\t\tthis.removeEmptyRowsMessages();\n\t\t\t\tawait this.createEmptyRows(binding, table);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Deletes inactive rows from the table listBinding.\n\t * @param binding\n\t * @param contextPath\n\t */\n\t_deleteEmptyRows(binding: ODataListBinding, contextPath: string): void {\n\t\tfor (const context of binding.getAllCurrentContexts()) {\n\t\t\tif (context.isInactive() && context.getPath().startsWith(contextPath)) {\n\t\t\t\tcontext.delete();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the current number of inactive contexts within the list binding.\n\t * @param binding Data list binding\n\t * @returns The number of inactive contexts\n\t */\n\tgetInactiveContextNumber(binding: ODataListBinding): number {\n\t\treturn binding.getAllCurrentContexts().filter((context) => context.isInactive()).length;\n\t}\n\n\t/**\n\t * Handles the validation of the empty row.\n\t * @param context The context of the empty row\n\t * @returns The validation status\n\t */\n\tvalidateEmptyRow(this: ITableBlock & EmptyRowsHandler, context: Context): boolean {\n\t\tconst requiredProperties = this.getTableDefinition().annotation.requiredProperties;\n\t\tif (requiredProperties?.length) {\n\t\t\tthis.removeEmptyRowsMessages(context);\n\t\t\tconst missingProperties = requiredProperties.filter((requiredProperty) => !context.getObject(requiredProperty));\n\t\t\tif (missingProperties.length) {\n\t\t\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.macros\")!;\n\t\t\t\tconst messages: Message[] = [];\n\t\t\t\tlet displayedColumn: MDCColumn | undefined;\n\t\t\t\tfor (const missingProperty of missingProperties) {\n\t\t\t\t\tlet errorMessage: string;\n\t\t\t\t\tconst missingColumn = this.getTableDefinition().columns.find(\n\t\t\t\t\t\t(tableColumn) =>\n\t\t\t\t\t\t\t(tableColumn as AnnotationTableColumn).relativePath === missingProperty ||\n\t\t\t\t\t\t\t(tableColumn.propertyInfos && tableColumn.propertyInfos.includes(missingProperty))\n\t\t\t\t\t);\n\n\t\t\t\t\tif (!missingColumn) {\n\t\t\t\t\t\terrorMessage = resourceBundle.getText(\"M_TABLE_EMPTYROW_MANDATORY\", [missingProperty]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdisplayedColumn = this.getContent()\n\t\t\t\t\t\t\t.getColumns()\n\t\t\t\t\t\t\t.find((mdcColumn) => mdcColumn.getPropertyKey() === missingColumn.name);\n\t\t\t\t\t\terrorMessage = resourceBundle.getText(\n\t\t\t\t\t\t\tdisplayedColumn ? \"M_TABLE_EMPTYROW_MANDATORY\" : \"M_TABLE_EMPTYROW_MANDATORY_HIDDEN\",\n\t\t\t\t\t\t\t[displayedColumn?.getHeader() || missingColumn.label]\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tmessages.push(\n\t\t\t\t\t\tnew Message({\n\t\t\t\t\t\t\tmessage: errorMessage,\n\t\t\t\t\t\t\tprocessor: this.getModel(),\n\t\t\t\t\t\t\ttype: MessageType.Error,\n\t\t\t\t\t\t\ttechnical: false,\n\t\t\t\t\t\t\tpersistent: true,\n\t\t\t\t\t\t\ttechnicalDetails: {\n\t\t\t\t\t\t\t\ttableId: this.getContent().getId(), // Need to do it since handleCreateActivate can be triggered multiple times (extra properties set by value help) before controlIds are set on the message\n\t\t\t\t\t\t\t\temptyRowMessage: true,\n\t\t\t\t\t\t\t\tmissingColumn: displayedColumn ? undefined : missingProperty // needed to change the messageStrip message\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttarget: `${context?.getPath()}/${missingProperty}`\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tMessaging.addMessages(messages);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Removes the messages related to the empty rows.\n\t * @param inactiveContexts The contexts of the empty rows, if not provided, the messages of all empty rows are removed\n\t */\n\tremoveEmptyRowsMessages(this: ITableBlock & EmptyRowsHandler, inactiveContexts?: Context | Context[]): void {\n\t\tMessaging.removeMessages(\n\t\t\t(Messaging.getMessageModel().getData() as Message[]).filter((msg) => {\n\t\t\t\tconst technicalDetails = (msg.getTechnicalDetails() || {}) as { tableId?: string; emptyRowMessage?: boolean };\n\n\t\t\t\t// Check if msg target starts with any path in the inactiveContext array\n\t\t\t\tconst contextMatches = Array.isArray(inactiveContexts)\n\t\t\t\t\t? inactiveContexts.some((context) => msg.getTargets().some((value) => value.startsWith(context.getPath())))\n\t\t\t\t\t: !inactiveContexts || msg.getTargets().some((value) => value.startsWith(inactiveContexts.getPath()));\n\n\t\t\t\treturn contextMatches && technicalDetails.emptyRowMessage && technicalDetails.tableId === this.getContent().getId();\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Creation of inactive rows for the table in creation mode \"InlineCreationRows\".\n\t * @param binding Data list binding\n\t * @param table The table being edited\n\t * @param recreateOneRow `true` if the call is to recreate an emptyLine\n\t * @param newInlineCreationRowFromPaste Number of new inactive rows to be created\n\t * @param forceCreateatEnd `true` if the new row is to be created at the end of the table\n\t * @returns A promise that resolves to the created contexts or void if the creation failed\n\t */\n\tasync createEmptyRows(\n\t\tthis: ITableBlock & EmptyRowsHandler,\n\t\tbinding: ODataListBinding,\n\t\ttable: MDCTable,\n\t\trecreateOneRow = false,\n\t\tnewInlineCreationRowFromPaste?: number,\n\t\tforceCreateatEnd = false\n\t): Promise<void | Context[]> {\n\t\tconst inlineCreationRowCount = newInlineCreationRowFromPaste ?? (this.getTableDefinition().control?.inlineCreationRowCount || 1);\n\t\tif (this.creatingEmptyRows || this.getInactiveContextNumber(binding) > inlineCreationRowCount) {\n\t\t\treturn;\n\t\t}\n\t\tconst data = Array.from({ length: inlineCreationRowCount }, () => ({})),\n\t\t\tatEnd = table.data(\"tableType\") !== \"ResponsiveTable\",\n\t\t\tinactive = true,\n\t\t\tview = CommonUtils.getTargetView(table),\n\t\t\tcontroller = view.getController(),\n\t\t\teditFlow = controller.editFlow,\n\t\t\tappComponent = CommonUtils.getAppComponent(table);\n\n\t\tthis.creatingEmptyRows = true;\n\t\ttry {\n\t\t\tconst dataForCreate = recreateOneRow ? [{}] : data;\n\t\t\tconst contexts = await editFlow.createMultipleDocuments(\n\t\t\t\tbinding,\n\t\t\t\t// during a live change, only 1 new document is created\n\t\t\t\tdataForCreate,\n\t\t\t\t// When editing an empty row, the new empty row is to be created just below and not above\n\t\t\t\trecreateOneRow || forceCreateatEnd ? true : atEnd,\n\t\t\t\tfalse,\n\t\t\t\tcontroller.editFlow.onBeforeCreate,\n\t\t\t\tinactive\n\t\t\t);\n\t\t\tappComponent.getSideEffectsService().requestSideEffectsForNavigationProperty(binding.getPath(), view.getBindingContext());\n\t\t\tcontexts?.forEach(async function (context: Context) {\n\t\t\t\ttry {\n\t\t\t\t\tawait context.created();\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (!(error as ContextErrorType).canceled) {\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn contexts;\n\t\t} catch (e) {\n\t\t\tLog.error(e as string);\n\t\t} finally {\n\t\t\tthis.creatingEmptyRows = false;\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]}