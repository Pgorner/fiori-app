{"version":3,"file":"TableEventHandlerProvider.js","names":["selectionLimitForOpenInNewTab","TableEventHandlerProvider","tableBlockProperties","collectionEntity","tableAPI","this","metaModel","metaPath","getModel","constructorWithFunctions","constructorWithStrings","_exports","_proto","prototype","tableType","tableDefinition","control","type","addCardToInsightsPress","beforeExport","beforeOpenContextMenu","collapseNode","undefined","contextMenuItemSelected","rowNavigationInfo","annotation","row","navigationInfo","contextMenuOpenInNewTab","navigationTarget","targetPath","dataStateChange","hasDataStateIndicatorFilter","dataStateIndicatorFilter","displayTableSettings","dragStartDocument","dragEnterDocument","dropDocument","expandNode","quickFilterSelectionChange","rowPressHandlerPath","rowPress","editable","checkEditable","recreateContext","segmentedButtonPress","onSegmentedButtonPressedHandlerPath","selectionChange","tableContextChange","initialExpansionLevel","variantSaved","variantSavedHandlerPath","variantSelected","variantSelectedHandlerPath","onAddCardToInsightsPressed","bind","onBeforeExport","onContextMenuPress","e","onCollapseExpandNode","TableRuntime","onContextMenuItemSelected","_e","controller","getPageController","internalContext","getBindingContext","onOpenInNewTabNavigateOutBound","getProperty","onOpenInNewTabPress","callExtension","navMode","onDataStateChange","onDragStartDocument","onDragEnterDocument","onDropDocument","onQuickFilterSelectionChange","event","onChevronPressNavigateOutBound","getParameter","parameters","onTableRowPress","setContexts","onTreeTableContextChanged","getCreateButtonPressHandler","forContextMenu","forCreationRow","onCreateButtonPress","path","getCreateMenuItemPressHandler","index","onCreateMenuItemPress","getCutHandler","onCut","getDataFieldForActionButtonPressHandler","dataField","action","parentAction","actionContextPath","annotationPath","CommonHelper","getActionContext","createBindingContext","actionContext","actionName","Action","targetEntityTypeName","contextObjectPath","targetEntityType","fullyQualifiedName","isStaticAction","getObject","TableHelper","_isStaticAction","_isActionOverloadOnDifferentType","toString","applicablePropertyPath","notApplicablePropertyPath","contextMenuPath","params","contexts","bStaticAction","entitySetName","name","applicableContexts","notApplicableContexts","isNavigable","enableAutoScroll","defaultValuesExtensionFunction","invocationGrouping","InvocationGrouping","controlId","id","operationAvailableMap","label","Label","valueOf","model","onActionPress","pressEventDataFieldForActionButton","getDataFieldForIBNPressHandler","dataFieldContext","navigateWithConfirmationDialog","enableAnalytics","navigationParameters","navigationContexts","RequiresContext","Inline","applicableProperty","notApplicableProperty","SemanticObject","semanticObjectMapping","Mapping","_intentBasedNavigation","getSource","navigate","getPressHandlerForDataFieldForIBN","getExpressionForDataFieldValue","fullContextPath","value","Value","addSingleQuotes","expression","getExpressionFromAnnotation","isConstant","isPathInModelExpression","valueExpression","formatValueRecursively","compileExpression","getDeleteButtonPressHandler","headerInfo","entityType","targetType","annotations","UI","HeaderInfo","deletableContextsPath","selectedContextsPath","numberOfSelectedContextsPath","unSavedContextsPath","lockedContextsPath","draftsWithDeletableActivePath","draftsWithNonDeletableActivePath","titleExpression","Title","descriptionExpression","Description","numberOfSelectedContexts","unSavedContexts","lockedContexts","draftsWithDeletableActive","draftsWithNonDeletableActive","title","description","selectedContexts","editFlow","deleteMultipleDocuments","generateFunction","objectToString","getManifestActionPressHandler","noWrap","Error","internalModelPath","FPMHelper","actionWrapper","handlerModule","handlerMethod","catch","err","Log","error","press","buildActionWrapper","getMassEditButtonPressHandler","onMassEditButtonPressed","getMoveUpDownHandler","forMoveUp","onMoveUpDown","getPasteHandler","onPaste"],"sources":["./TableEventHandlerProvider.ts"],"sourcesContent":["import type { EntitySet, NavigationProperty } from \"@sap-ux/vocabularies-types\";\nimport {\n\ttype DataFieldForAction,\n\ttype DataFieldForIntentBasedNavigation,\n\ttype DataFieldTypes\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport type { CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { compileExpression, getExpressionFromAnnotation, isConstant, isPathInModelExpression } from \"sap/fe/base/BindingToolkit\";\nimport { type BaseAction, type CustomAction } from \"sap/fe/core/converters/controls/Common/Action\";\nimport FPMHelper from \"sap/fe/core/helpers/FPMHelper\";\nimport { type DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { formatValueRecursively } from \"sap/fe/macros/field/FieldTemplating\";\nimport type UI5Event from \"sap/ui/base/Event\";\nimport type Control from \"sap/ui/core/Control\";\nimport type Message from \"sap/ui/core/message/Message\";\nimport type V4Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport CommonHelper from \"../CommonHelper\";\nimport { type TableBlockProperties } from \"./MdcTableTemplate\";\nimport type TableAPI from \"./TableAPI\";\nimport TableHelper from \"./TableHelper\";\nimport TableRuntime from \"./TableRuntime\";\n\ntype EventHandlerType = (e: UI5Event) => void;\n\n// maximum number of items to open in new tabs simultanously\nconst selectionLimitForOpenInNewTab = 10;\n\nexport default class TableEventHandlerProvider {\n\taddCardToInsightsPress!: EventHandlerType;\n\n\tbeforeExport!: EventHandlerType;\n\n\tbeforeOpenContextMenu!: EventHandlerType;\n\n\tcollapseNode?: EventHandlerType;\n\n\tcontextMenuItemSelected!: EventHandlerType;\n\n\tcontextMenuOpenInNewTab?: EventHandlerType;\n\n\tdataStateChange!: EventHandlerType;\n\n\tdataStateIndicatorFilter?: (message: Message, control: Control) => boolean;\n\n\tdisplayTableSettings!: EventHandlerType;\n\n\tdragStartDocument?: EventHandlerType;\n\n\tdragEnterDocument?: EventHandlerType;\n\n\tdropDocument?: EventHandlerType;\n\n\texpandNode?: EventHandlerType;\n\n\tquickFilterSelectionChange!: EventHandlerType;\n\n\trowPress?: EventHandlerType;\n\n\tsegmentedButtonPress?: EventHandlerType;\n\n\tselectionChange!: EventHandlerType;\n\n\ttableContextChange?: EventHandlerType;\n\n\tvariantSaved?: EventHandlerType;\n\n\tvariantSelected?: EventHandlerType;\n\n\tprivate metaModel: ODataMetaModel;\n\n\tconstructor(\n\t\tprivate tableBlockProperties: TableBlockProperties,\n\t\tprivate collectionEntity: EntitySet | NavigationProperty,\n\t\tprivate tableAPI?: TableAPI\n\t) {\n\t\tthis.metaModel = tableBlockProperties.metaPath?.getModel();\n\n\t\tif (tableAPI) {\n\t\t\tthis.constructorWithFunctions(tableAPI);\n\t\t} else {\n\t\t\tthis.constructorWithStrings();\n\t\t}\n\t}\n\n\t/**\n\t * Initializes the event handler properties with string values.\n\t */\n\tprivate constructorWithStrings(): void {\n\t\tconst tableType = this.tableBlockProperties.tableDefinition?.control?.type;\n\n\t\tthis.addCardToInsightsPress = \"API.onAddCardToInsightsPressed($event, $controller)\" as unknown as EventHandlerType;\n\t\tthis.beforeExport = \"API.onBeforeExport($event)\" as unknown as EventHandlerType;\n\t\tthis.beforeOpenContextMenu = \"API.onContextMenuPress($event)\" as unknown as EventHandlerType;\n\t\tthis.collapseNode =\n\t\t\ttableType === \"TreeTable\" ? (\"API.onCollapseExpandNode($event, false)\" as unknown as EventHandlerType) : undefined;\n\t\tthis.contextMenuItemSelected = \"TableRuntime.onContextMenuItemSelected\" as unknown as EventHandlerType;\n\n\t\tconst rowNavigationInfo = this.tableBlockProperties.tableDefinition?.annotation.row?.navigationInfo;\n\t\tif (rowNavigationInfo !== undefined) {\n\t\t\tif (rowNavigationInfo.type === \"Outbound\") {\n\t\t\t\tthis.contextMenuOpenInNewTab =\n\t\t\t\t\t`.onOpenInNewTabNavigateOutBound('${rowNavigationInfo.navigationTarget}', %{internal>contextmenu/selectedContexts}, \"\", ${selectionLimitForOpenInNewTab})` as unknown as EventHandlerType;\n\t\t\t} else {\n\t\t\t\tthis.contextMenuOpenInNewTab =\n\t\t\t\t\t`API.onOpenInNewTabPress($event, $controller, %{internal>contextmenu/selectedContexts}, { callExtension: true, targetPath: '${rowNavigationInfo.targetPath}', navMode: 'openInNewTab' }, ${selectionLimitForOpenInNewTab})` as unknown as EventHandlerType;\n\t\t\t}\n\t\t}\n\n\t\tthis.dataStateChange = \"API.onDataStateChange\" as unknown as EventHandlerType;\n\n\t\tif (this.tableBlockProperties.tableDefinition?.control?.hasDataStateIndicatorFilter) {\n\t\t\tthis.dataStateIndicatorFilter = \"TableRuntime.dataStateIndicatorFilter\" as unknown as (\n\t\t\t\tmessage: Message,\n\t\t\t\tcontrol: Control\n\t\t\t) => boolean;\n\t\t}\n\n\t\tthis.displayTableSettings = \"TableRuntime.displayTableSettings\" as unknown as EventHandlerType;\n\t\tthis.dragStartDocument = tableType === \"TreeTable\" ? (\"API.onDragStartDocument\" as unknown as EventHandlerType) : undefined;\n\t\tthis.dragEnterDocument = tableType === \"TreeTable\" ? (\"API.onDragEnterDocument\" as unknown as EventHandlerType) : undefined;\n\t\tthis.dropDocument = tableType === \"TreeTable\" ? (\"API.onDropDocument\" as unknown as EventHandlerType) : undefined;\n\t\tthis.expandNode = tableType === \"TreeTable\" ? (\"API.onCollapseExpandNode($event, true)\" as unknown as EventHandlerType) : undefined;\n\t\tthis.quickFilterSelectionChange = \"API.onQuickFilterSelectionChange\" as unknown as EventHandlerType;\n\n\t\tif (this.tableBlockProperties.rowPressHandlerPath) {\n\t\t\tthis.rowPress = this.tableBlockProperties.rowPressHandlerPath as unknown as EventHandlerType;\n\t\t} else if (rowNavigationInfo !== undefined) {\n\t\t\tif (rowNavigationInfo.type === \"Outbound\") {\n\t\t\t\tthis.rowPress =\n\t\t\t\t\t`API.onChevronPressNavigateOutBound($event, $controller ,'${rowNavigationInfo.navigationTarget}', \\${$parameters>bindingContext})` as unknown as EventHandlerType;\n\t\t\t} else {\n\t\t\t\tconst editable = rowNavigationInfo.checkEditable\n\t\t\t\t\t? \"!${$parameters>bindingContext}.getProperty('IsActiveEntity')\"\n\t\t\t\t\t: \"undefined\";\n\t\t\t\tconst recreateContext = rowNavigationInfo.recreateContext ? \", recreateContext: true\" : \"\";\n\t\t\t\tthis.rowPress =\n\t\t\t\t\t`API.onTableRowPress($event, $controller, \\${$parameters>bindingContext}, { callExtension: true, targetPath: '${rowNavigationInfo.targetPath}', editable: ${editable} ${recreateContext} })` as unknown as EventHandlerType;\n\t\t\t}\n\t\t}\n\n\t\tthis.segmentedButtonPress = this.tableBlockProperties.onSegmentedButtonPressedHandlerPath as unknown as EventHandlerType;\n\t\tthis.selectionChange = \"TableRuntime.setContexts\" as unknown as EventHandlerType;\n\t\tthis.tableContextChange =\n\t\t\ttableType === \"TreeTable\"\n\t\t\t\t? (`TableRuntime.onTreeTableContextChanged($event, ${this.tableBlockProperties.tableDefinition?.annotation?.initialExpansionLevel})` as unknown as EventHandlerType)\n\t\t\t\t: undefined;\n\t\tthis.variantSaved = this.tableBlockProperties.variantSavedHandlerPath as unknown as EventHandlerType;\n\t\tthis.variantSelected = this.tableBlockProperties.variantSelectedHandlerPath as unknown as EventHandlerType;\n\t}\n\n\t/**\n\t * Initializes the event handler properties with functions.\n\t * @param tableAPI\n\t */\n\tprivate constructorWithFunctions(tableAPI: TableAPI): void {\n\t\tconst tableType = this.tableBlockProperties.tableDefinition?.control?.type;\n\n\t\tthis.addCardToInsightsPress = tableAPI.onAddCardToInsightsPressed.bind(tableAPI);\n\t\tthis.beforeExport = tableAPI.onBeforeExport.bind(tableAPI);\n\t\tthis.beforeOpenContextMenu = tableAPI.onContextMenuPress.bind(tableAPI);\n\t\tthis.collapseNode =\n\t\t\ttableType === \"TreeTable\"\n\t\t\t\t? (e: UI5Event): void => {\n\t\t\t\t\t\ttableAPI.onCollapseExpandNode(e, false);\n\t\t\t\t  }\n\t\t\t\t: undefined;\n\t\tthis.contextMenuItemSelected = TableRuntime.onContextMenuItemSelected.bind(TableRuntime);\n\n\t\tconst rowNavigationInfo = this.tableBlockProperties.tableDefinition?.annotation.row?.navigationInfo;\n\t\tif (rowNavigationInfo !== undefined) {\n\t\t\tif (rowNavigationInfo.type === \"Outbound\") {\n\t\t\t\tthis.contextMenuOpenInNewTab = (_e: UI5Event): void => {\n\t\t\t\t\tconst controller = tableAPI.getPageController();\n\t\t\t\t\tconst internalContext = tableAPI.getBindingContext(\"internal\");\n\t\t\t\t\tcontroller?.onOpenInNewTabNavigateOutBound?.(\n\t\t\t\t\t\trowNavigationInfo.navigationTarget,\n\t\t\t\t\t\tinternalContext?.getProperty(\"contextmenu/selectedContexts\"),\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\tselectionLimitForOpenInNewTab\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tthis.contextMenuOpenInNewTab = (e: UI5Event): void => {\n\t\t\t\t\tconst controller = tableAPI.getPageController()!;\n\t\t\t\t\tconst internalContext = tableAPI.getBindingContext(\"internal\");\n\t\t\t\t\ttableAPI.onOpenInNewTabPress(\n\t\t\t\t\t\te,\n\t\t\t\t\t\tcontroller,\n\t\t\t\t\t\tinternalContext?.getProperty(\"contextmenu/selectedContexts\"),\n\t\t\t\t\t\t{ callExtension: true, targetPath: rowNavigationInfo.targetPath, navMode: \"openInNewTab\" },\n\t\t\t\t\t\tselectionLimitForOpenInNewTab\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tthis.dataStateChange = tableAPI.onDataStateChange.bind(tableAPI);\n\n\t\tif (this.tableBlockProperties.tableDefinition?.control?.hasDataStateIndicatorFilter) {\n\t\t\tthis.dataStateIndicatorFilter = tableAPI.dataStateIndicatorFilter.bind(tableAPI);\n\t\t}\n\n\t\tthis.displayTableSettings = TableRuntime.displayTableSettings.bind(TableRuntime);\n\t\tthis.dragStartDocument = tableType === \"TreeTable\" ? (tableAPI.onDragStartDocument.bind(tableAPI) as EventHandlerType) : undefined;\n\t\tthis.dragEnterDocument = tableType === \"TreeTable\" ? (tableAPI.onDragEnterDocument.bind(tableAPI) as EventHandlerType) : undefined;\n\t\tthis.dropDocument = tableType === \"TreeTable\" ? (tableAPI.onDropDocument.bind(tableAPI) as EventHandlerType) : undefined;\n\t\tthis.expandNode =\n\t\t\ttableType === \"TreeTable\"\n\t\t\t\t? (e: UI5Event): void => {\n\t\t\t\t\t\ttableAPI.onCollapseExpandNode(e, true);\n\t\t\t\t  }\n\t\t\t\t: undefined;\n\t\tthis.quickFilterSelectionChange = tableAPI.onQuickFilterSelectionChange.bind(tableAPI);\n\n\t\tif (tableAPI.rowPress) {\n\t\t\tthis.rowPress = tableAPI.rowPress as EventHandlerType;\n\t\t} else if (rowNavigationInfo !== undefined) {\n\t\t\tif (rowNavigationInfo.type === \"Outbound\") {\n\t\t\t\tthis.rowPress = (e: UI5Event): void => {\n\t\t\t\t\tconst controller = tableAPI.getPageController();\n\t\t\t\t\tconst event = e as UI5Event<{ bindingContext: V4Context }>;\n\t\t\t\t\ttableAPI.onChevronPressNavigateOutBound(\n\t\t\t\t\t\te,\n\t\t\t\t\t\tcontroller!,\n\t\t\t\t\t\trowNavigationInfo.navigationTarget,\n\t\t\t\t\t\tevent.getParameter(\"bindingContext\")\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tthis.rowPress = (e: UI5Event): void => {\n\t\t\t\t\tconst event = e as UI5Event<{ bindingContext: V4Context }>;\n\t\t\t\t\tconst editable = rowNavigationInfo.checkEditable\n\t\t\t\t\t\t? !event.getParameter(\"bindingContext\").getProperty(\"IsActiveEntity\")\n\t\t\t\t\t\t: undefined;\n\t\t\t\t\tconst parameters = {\n\t\t\t\t\t\tcallExtension: true,\n\t\t\t\t\t\ttargetPath: rowNavigationInfo.targetPath,\n\t\t\t\t\t\teditable,\n\t\t\t\t\t\trecreateContext: rowNavigationInfo.recreateContext\n\t\t\t\t\t};\n\t\t\t\t\tconst controller = tableAPI.getPageController();\n\t\t\t\t\ttableAPI.onTableRowPress(e, controller!, event.getParameter(\"bindingContext\"), parameters);\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tthis.segmentedButtonPress = tableAPI.segmentedButtonPress as unknown as EventHandlerType;\n\t\tthis.selectionChange = TableRuntime.setContexts.bind(TableRuntime);\n\t\tthis.tableContextChange =\n\t\t\ttableType === \"TreeTable\"\n\t\t\t\t? (e: UI5Event): void => {\n\t\t\t\t\t\tTableRuntime.onTreeTableContextChanged(\n\t\t\t\t\t\t\te,\n\t\t\t\t\t\t\tthis.tableBlockProperties.tableDefinition?.annotation?.initialExpansionLevel\n\t\t\t\t\t\t);\n\t\t\t\t  }\n\t\t\t\t: undefined;\n\t\tthis.variantSaved = tableAPI.variantSaved as unknown as EventHandlerType;\n\t\tthis.variantSelected = tableAPI.variantSelected as unknown as EventHandlerType;\n\t}\n\n\t/**\n\t * Gets the press event handler for the Create button.\n\t * @param forContextMenu\n\t * @param forCreationRow\n\t * @returns The event handler.\n\t */\n\tgetCreateButtonPressHandler(forContextMenu: boolean, forCreationRow: boolean): EventHandlerType {\n\t\tif (this.tableAPI) {\n\t\t\treturn forCreationRow\n\t\t\t\t? TableRuntime.onCreateButtonPress.bind(TableRuntime)\n\t\t\t\t: (e: UI5Event): void => {\n\t\t\t\t\t\tconst internalContext = this.tableAPI!.getBindingContext(\"internal\");\n\t\t\t\t\t\tconst path = forContextMenu ? \"contextmenu/selectedContexts\" : \"selectedContexts\";\n\t\t\t\t\t\tTableRuntime.onCreateButtonPress(e, internalContext?.getProperty(path));\n\t\t\t\t  };\n\t\t} else if (!forCreationRow) {\n\t\t\treturn forContextMenu\n\t\t\t\t? (\"TableRuntime.onCreateButtonPress($event, ${internal>contextmenu/selectedContexts})\" as unknown as EventHandlerType)\n\t\t\t\t: (\"TableRuntime.onCreateButtonPress($event, ${internal>selectedContexts})\" as unknown as EventHandlerType);\n\t\t} else {\n\t\t\treturn \"TableRuntime.onCreateButtonPress($event)\" as unknown as EventHandlerType;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the press event handler for the Create menu item.\n\t * @param index\n\t * @param forContextMenu\n\t * @returns The event handler.\n\t */\n\tgetCreateMenuItemPressHandler(index: number, forContextMenu: boolean): EventHandlerType {\n\t\tconst path = forContextMenu ? \"contextmenu/selectedContexts\" : \"selectedContexts\";\n\t\tif (this.tableAPI) {\n\t\t\treturn (e: UI5Event): void => {\n\t\t\t\tTableRuntime.onCreateMenuItemPress(e, index, this.tableAPI!.getBindingContext(\"internal\")?.getProperty(path));\n\t\t\t};\n\t\t} else {\n\t\t\treturn `TableRuntime.onCreateMenuItemPress($event, ${index}, \\${internal>${path}})` as unknown as EventHandlerType;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the event handler for the Cut action.\n\t * @param forContextMenu\n\t * @returns The event handler.\n\t */\n\tgetCutHandler(forContextMenu: boolean): EventHandlerType {\n\t\tif (this.tableAPI) {\n\t\t\treturn (e: UI5Event): void => {\n\t\t\t\tthis.tableAPI!.onCut(e, forContextMenu);\n\t\t\t};\n\t\t} else {\n\t\t\treturn `API.onCut($event, ${forContextMenu})` as unknown as EventHandlerType;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the press event handler for an action button.\n\t * @param dataField\n\t * @param action\n\t * @param parentAction\n\t * @param forContextMenu\n\t * @returns The event handler.\n\t */\n\tgetDataFieldForActionButtonPressHandler(\n\t\tdataField: DataFieldForAction | undefined,\n\t\taction: BaseAction,\n\t\tparentAction: BaseAction | undefined,\n\t\tforContextMenu: boolean\n\t): EventHandlerType | undefined {\n\t\tif (!dataField) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst actionContextPath = action.annotationPath\n\t\t\t? CommonHelper.getActionContext(this.metaModel.createBindingContext(action.annotationPath + \"/Action\")!)\n\t\t\t: undefined;\n\t\tconst actionContext = actionContextPath ? this.metaModel.createBindingContext(actionContextPath) : undefined;\n\n\t\tif (this.tableAPI) {\n\t\t\tconst actionName = dataField.Action;\n\t\t\tconst targetEntityTypeName = this.tableBlockProperties.contextObjectPath.targetEntityType.fullyQualifiedName;\n\t\t\tconst isStaticAction =\n\t\t\t\ttypeof actionContext?.getObject() !== \"string\" &&\n\t\t\t\t(TableHelper._isStaticAction(actionContext?.getObject(), actionName) ||\n\t\t\t\t\tTableHelper._isActionOverloadOnDifferentType(actionName.toString(), targetEntityTypeName));\n\t\t\tconst applicablePropertyPath = !forContextMenu ? \"aApplicable\" : \"aApplicableForContextMenu\";\n\t\t\tconst notApplicablePropertyPath = !forContextMenu ? \"aNotApplicable\" : \"aNotApplicableForContextMenu\";\n\t\t\tconst contextMenuPath = !forContextMenu ? \"\" : \"contextmenu/\";\n\n\t\t\treturn (e: UI5Event): void => {\n\t\t\t\tconst internalContext = this.tableAPI!.getBindingContext(\"internal\")!;\n\t\t\t\tconst params = {\n\t\t\t\t\tcontexts: !isStaticAction ? internalContext.getProperty(`${contextMenuPath}selectedContexts`) : null,\n\t\t\t\t\tbStaticAction: isStaticAction ? isStaticAction : undefined,\n\t\t\t\t\tentitySetName: this.collectionEntity.name,\n\t\t\t\t\tapplicableContexts: !isStaticAction\n\t\t\t\t\t\t? internalContext.getProperty(`dynamicActions/${dataField.Action}/${applicablePropertyPath}/`)\n\t\t\t\t\t\t: null,\n\t\t\t\t\tnotApplicableContexts: !isStaticAction\n\t\t\t\t\t\t? internalContext.getProperty(`dynamicActions/${dataField.Action}/${notApplicablePropertyPath}/`)\n\t\t\t\t\t\t: null,\n\t\t\t\t\tisNavigable: (parentAction ?? action).isNavigable,\n\t\t\t\t\tenableAutoScroll: action.enableAutoScroll,\n\t\t\t\t\tdefaultValuesExtensionFunction: action.defaultValuesExtensionFunction,\n\t\t\t\t\tinvocationGrouping: dataField?.InvocationGrouping === \"UI.OperationGroupingType/ChangeSet\" ? \"ChangeSet\" : \"Isolated\",\n\t\t\t\t\tcontrolId: this.tableBlockProperties.id,\n\t\t\t\t\toperationAvailableMap: this.tableBlockProperties.tableDefinition.operationAvailableMap,\n\t\t\t\t\tlabel: dataField.Label?.valueOf() ?? \"\",\n\t\t\t\t\tmodel: this.tableAPI!.getPageController()!.getModel()\n\t\t\t\t};\n\t\t\t\tthis.tableAPI?.onActionPress(e, this.tableAPI.getPageController()!, dataField.Action.valueOf(), params);\n\t\t\t};\n\t\t} else {\n\t\t\treturn TableHelper.pressEventDataFieldForActionButton(\n\t\t\t\t{\n\t\t\t\t\tcontextObjectPath: this.tableBlockProperties.contextObjectPath,\n\t\t\t\t\tid: this.tableBlockProperties.id\n\t\t\t\t},\n\t\t\t\tdataField,\n\t\t\t\tthis.collectionEntity.name,\n\t\t\t\tthis.tableBlockProperties.tableDefinition.operationAvailableMap,\n\t\t\t\tactionContext?.getObject(),\n\t\t\t\t(parentAction ?? action).isNavigable,\n\t\t\t\taction.enableAutoScroll,\n\t\t\t\taction.defaultValuesExtensionFunction,\n\t\t\t\tforContextMenu\n\t\t\t) as unknown as EventHandlerType;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the press event handler for an IBN action.\n\t * @param action\n\t * @param forContextMenu\n\t * @returns The event handler.\n\t */\n\tgetDataFieldForIBNPressHandler(action: BaseAction, forContextMenu: boolean): EventHandlerType | undefined {\n\t\tif (action.annotationPath === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst dataFieldContext = this.metaModel.createBindingContext(action.annotationPath);\n\t\tconst dataField = dataFieldContext?.getObject() as DataFieldForIntentBasedNavigation | undefined;\n\t\tif (!dataField) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst navigateWithConfirmationDialog = this.tableBlockProperties.tableDefinition.enableAnalytics !== true;\n\n\t\tif (this.tableAPI) {\n\t\t\treturn (e: UI5Event): void => {\n\t\t\t\tconst internalContext = this.tableAPI!.getBindingContext(\"internal\")!;\n\t\t\t\tconst navigationParameters: {\n\t\t\t\t\tnavigationContexts?: V4Context[];\n\t\t\t\t\tlabel?: string;\n\t\t\t\t\tapplicableContexts?: V4Context[];\n\t\t\t\t\tnotApplicableContexts?: V4Context[];\n\t\t\t\t\tsemanticObjectMapping?: object;\n\t\t\t\t} = {};\n\n\t\t\t\tnavigationParameters.navigationContexts = forContextMenu\n\t\t\t\t\t? internalContext.getProperty(\"contextmenu/selectedContexts\")\n\t\t\t\t\t: internalContext.getProperty(\"selectedContexts\");\n\n\t\t\t\tif (dataField.RequiresContext && !dataField.Inline && navigateWithConfirmationDialog) {\n\t\t\t\t\tconst applicableProperty = !forContextMenu ? \"aApplicable\" : \"aApplicableForContextMenu\";\n\t\t\t\t\tconst notApplicableProperty = !forContextMenu ? \"aNotApplicable\" : \"aNotApplicableForContextMenu\";\n\t\t\t\t\tnavigationParameters.applicableContexts = internalContext.getProperty(\n\t\t\t\t\t\t`ibn/${dataField.SemanticObject}-${dataField.Action}/${applicableProperty}/`\n\t\t\t\t\t);\n\t\t\t\t\tnavigationParameters.notApplicableContexts = internalContext.getProperty(\n\t\t\t\t\t\t`ibn/${dataField.SemanticObject}-${dataField.Action}/${notApplicableProperty}/`\n\t\t\t\t\t);\n\t\t\t\t\tnavigationParameters.label = dataField.Label as string;\n\t\t\t\t}\n\t\t\t\tnavigationParameters.semanticObjectMapping = dataField.Mapping;\n\t\t\t\tconst controller = this.tableAPI!.getPageController();\n\t\t\t\tif (navigateWithConfirmationDialog) {\n\t\t\t\t\tcontroller?._intentBasedNavigation.navigateWithConfirmationDialog(\n\t\t\t\t\t\tdataField.SemanticObject as unknown as string,\n\t\t\t\t\t\tdataField.Action as unknown as string,\n\t\t\t\t\t\tnavigationParameters,\n\t\t\t\t\t\te.getSource<Control>()\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tcontroller?._intentBasedNavigation.navigate(\n\t\t\t\t\t\tdataField.SemanticObject as unknown as string,\n\t\t\t\t\t\tdataField.Action as unknown as string,\n\t\t\t\t\t\tnavigationParameters,\n\t\t\t\t\t\te.getSource<Control>()\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t};\n\t\t} else {\n\t\t\treturn CommonHelper.getPressHandlerForDataFieldForIBN(\n\t\t\t\tdataField,\n\t\t\t\tforContextMenu ? \"${internal>contextmenu/selectedContexts}\" : \"${internal>selectedContexts}\",\n\t\t\t\tnavigateWithConfirmationDialog,\n\t\t\t\tforContextMenu\n\t\t\t) as unknown as EventHandlerType;\n\t\t}\n\t}\n\n\tprivate getExpressionForDataFieldValue(\n\t\tdataField: DataFieldTypes | undefined,\n\t\tfullContextPath: DataModelObjectPath<unknown>\n\t): string | CompiledBindingToolkitExpression | undefined {\n\t\tconst value = dataField?.Value;\n\t\tif (!value) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (typeof value === \"string\") {\n\t\t\treturn this.tableAPI ? value : CommonHelper.addSingleQuotes(value, true);\n\t\t} else {\n\t\t\tconst expression = getExpressionFromAnnotation(value);\n\t\t\tif (isConstant(expression) || isPathInModelExpression(expression)) {\n\t\t\t\tconst valueExpression = formatValueRecursively(expression, fullContextPath);\n\t\t\t\treturn compileExpression(valueExpression);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets the press event handler for the Delete button.\n\t * @param forContextMenu\n\t * @returns The event handler.\n\t */\n\tgetDeleteButtonPressHandler(forContextMenu: boolean): EventHandlerType {\n\t\tconst headerInfo = ((this.collectionEntity as EntitySet)?.entityType || (this.collectionEntity as NavigationProperty)?.targetType)\n\t\t\t?.annotations?.UI?.HeaderInfo;\n\n\t\tconst contextMenuPath = !forContextMenu ? \"\" : \"contextmenu/\";\n\t\tconst deletableContextsPath = `${contextMenuPath}deletableContexts`;\n\t\tconst selectedContextsPath = `${contextMenuPath}selectedContextsIncludingInactive`;\n\t\tconst numberOfSelectedContextsPath = !forContextMenu\n\t\t\t? `numberOfSelectedContexts`\n\t\t\t: `${contextMenuPath}numberOfSelectedContextsForDelete`;\n\t\tconst unSavedContextsPath = `${contextMenuPath}unSavedContexts`;\n\t\tconst lockedContextsPath = `${contextMenuPath}lockedContexts`;\n\t\tconst draftsWithDeletableActivePath = `${contextMenuPath}draftsWithDeletableActive`;\n\t\tconst draftsWithNonDeletableActivePath = `${contextMenuPath}draftsWithNonDeletableActive`;\n\n\t\tconst titleExpression = this.getExpressionForDataFieldValue(\n\t\t\theaderInfo?.Title as DataFieldTypes,\n\t\t\tthis.tableBlockProperties.contextObjectPath\n\t\t);\n\n\t\tconst descriptionExpression = this.getExpressionForDataFieldValue(\n\t\t\theaderInfo?.Description as DataFieldTypes,\n\t\t\tthis.tableBlockProperties.contextObjectPath\n\t\t);\n\n\t\tif (this.tableAPI) {\n\t\t\treturn (_e: UI5Event): void => {\n\t\t\t\tconst internalContext = this.tableAPI!.getBindingContext(\"internal\");\n\t\t\t\tconst params = {\n\t\t\t\t\tid: this.tableBlockProperties.id,\n\t\t\t\t\tentitySetName: this.collectionEntity.name,\n\t\t\t\t\tnumberOfSelectedContexts: internalContext?.getProperty(numberOfSelectedContextsPath) as number,\n\t\t\t\t\tunSavedContexts: internalContext?.getProperty(unSavedContextsPath) as V4Context[],\n\t\t\t\t\tlockedContexts: internalContext?.getProperty(lockedContextsPath) as V4Context[],\n\t\t\t\t\tdraftsWithDeletableActive: internalContext?.getProperty(draftsWithDeletableActivePath) as V4Context[],\n\t\t\t\t\tdraftsWithNonDeletableActive: internalContext?.getProperty(draftsWithNonDeletableActivePath) as V4Context[],\n\t\t\t\t\tcontrolId: internalContext?.getProperty(\"controlId\"),\n\t\t\t\t\ttitle: titleExpression,\n\t\t\t\t\tdescription: descriptionExpression,\n\t\t\t\t\tselectedContexts: internalContext?.getProperty(selectedContextsPath) as V4Context[]\n\t\t\t\t};\n\t\t\t\tthis.tableAPI!.getPageController()?.editFlow.deleteMultipleDocuments(\n\t\t\t\t\tinternalContext?.getProperty(deletableContextsPath),\n\t\t\t\t\tparams\n\t\t\t\t);\n\t\t\t};\n\t\t} else {\n\t\t\tconst params = {\n\t\t\t\tid: CommonHelper.addSingleQuotes(this.tableBlockProperties.id),\n\t\t\t\tentitySetName: CommonHelper.addSingleQuotes(this.collectionEntity.name),\n\t\t\t\tnumberOfSelectedContexts: `\\${internal>${numberOfSelectedContextsPath}}`,\n\t\t\t\tunSavedContexts: `\\${internal>${unSavedContextsPath}}`,\n\t\t\t\tlockedContexts: `\\${internal>${lockedContextsPath}}`,\n\t\t\t\tdraftsWithDeletableActive: `\\${internal>${draftsWithDeletableActivePath}}`,\n\t\t\t\tdraftsWithNonDeletableActive: `\\${internal>${draftsWithNonDeletableActivePath}}`,\n\t\t\t\tcontrolId: \"${internal>controlId}\",\n\t\t\t\ttitle: titleExpression,\n\t\t\t\tdescription: descriptionExpression,\n\t\t\t\tselectedContexts: `\\${internal>${selectedContextsPath}}`\n\t\t\t};\n\n\t\t\treturn CommonHelper.generateFunction(\n\t\t\t\t\".editFlow.deleteMultipleDocuments\",\n\t\t\t\t`\\${internal>${deletableContextsPath}}`,\n\t\t\t\tCommonHelper.objectToString(params)\n\t\t\t) as unknown as EventHandlerType;\n\t\t}\n\t}\n\n\t/**\n\t * Get the press event handler for a manifest action button.\n\t * @param action\n\t * @param forContextMenu\n\t * @returns The event handler.\n\t */\n\tgetManifestActionPressHandler(action: CustomAction, forContextMenu: boolean): EventHandlerType {\n\t\tif (this.tableAPI) {\n\t\t\tif (action.noWrap === true) {\n\t\t\t\t// If noWrap = true, then the action is a slot action (defined in the XML view as an aggregation of the table block)\n\t\t\t\t// We don't support this yet, this requires some refactoring to have action.press as a function\n\t\t\t\tthrow new Error(\"Slot actions are not supported yet in new mode\");\n\t\t\t} else {\n\t\t\t\treturn (e: UI5Event): void => {\n\t\t\t\t\tconst internalModelPath = forContextMenu ? \"contextmenu/selectedContexts\" : \"selectedContexts\";\n\t\t\t\t\tconst internalContext = this.tableAPI!.getBindingContext(\"internal\")!;\n\t\t\t\t\tFPMHelper.actionWrapper(e, action.handlerModule, action.handlerMethod, {\n\t\t\t\t\t\tcontexts: internalContext.getProperty(internalModelPath)\n\t\t\t\t\t}).catch((err) => {\n\t\t\t\t\t\tLog.error(\"Error while executing custom action\", err);\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\treturn (action.noWrap === true\n\t\t\t\t? action.press\n\t\t\t\t: CommonHelper.buildActionWrapper(\n\t\t\t\t\t\taction,\n\t\t\t\t\t\t{ id: this.tableBlockProperties.id },\n\t\t\t\t\t\tforContextMenu\n\t\t\t\t  )) as unknown as EventHandlerType;\n\t\t}\n\t}\n\n\t/**\n\t * Get the press event handler for the mass edit button.\n\t * @param forContextMenu\n\t * @returns The event handler.\n\t */\n\tgetMassEditButtonPressHandler(forContextMenu: boolean): EventHandlerType {\n\t\tif (this.tableAPI) {\n\t\t\treturn (e: UI5Event): void => {\n\t\t\t\tthis.tableAPI!.onMassEditButtonPressed(e, forContextMenu);\n\t\t\t};\n\t\t} else {\n\t\t\treturn `API.onMassEditButtonPressed($event, ${forContextMenu})` as unknown as EventHandlerType;\n\t\t}\n\t}\n\n\t/**\n\t * Get the press event handler for the move up / move down buttons.\n\t * @param forMoveUp\n\t * @param forContextMenu\n\t * @returns The event handler.\n\t */\n\tgetMoveUpDownHandler(forMoveUp: boolean, forContextMenu: boolean): EventHandlerType {\n\t\tif (this.tableAPI) {\n\t\t\treturn (e: UI5Event): void => {\n\t\t\t\tthis.tableAPI!.onMoveUpDown(e, forMoveUp, forContextMenu);\n\t\t\t};\n\t\t} else {\n\t\t\treturn `API.onMoveUpDown($event, ${forMoveUp}, ${forContextMenu})` as unknown as EventHandlerType;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the event handler for the Paste action.\n\t * @param forContextMenu\n\t * @returns The event handler.\n\t */\n\tgetPasteHandler(forContextMenu: boolean): EventHandlerType {\n\t\tif (this.tableAPI) {\n\t\t\tconst controller = this.tableAPI.getPageController();\n\t\t\treturn (e: UI5Event): void => {\n\t\t\t\tthis.tableAPI!.onPaste(e, controller!, forContextMenu);\n\t\t\t};\n\t\t} else {\n\t\t\treturn `API.onPaste($event, $controller, ${forContextMenu})` as unknown as EventHandlerType;\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]}