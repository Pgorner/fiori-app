{"version":3,"names":["UploadTableRuntime","uploadFile","uploadInfo","uploadSetItem","oItem","uploadSetTable","oSource","mdcTable","getParent","listBinding","getRowBinding","fileNamePath","getRowConfiguration","getFileNamePath","data","getFileName","newListEntity","create","internalContext","getBindingContext","uploadPromise","Promise","resolve","reject","setProperty","getId","containingView","CommonUtils","getTargetView","feController","FieldRuntimeHelper","getExtensionController","getController","editFlow","syncTask","created","uploadPath","getUploadUrl","uploadUrl","getProperty","replace","getPath","getCanonicalPath","setHeaderFields","setUploadUrl","error","onUploadFailed","String","uploadTable","displayMessageForFailedUpload","onUploadCompleted","event","item","getParameter","status","Number","uploadInstance","delete","context","hasPendingChanges","requestRefresh","onMediaTypeMismatch","getSource","givenType","acceptedTypes","getMediaTypes","showTypeMismatchDialog","onFileSizeExceeded","showFileSizeExceedDialog","getMaxFileSize","toString","onFileNameLengthExceeded","showFileNameLengthExceedDialog","getMaxFileNameLength"],"sourceRoot":".","sources":["UploadTableRuntime.ts"],"sourcesContent":["import CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type { InternalModelContext } from \"sap/fe/core/helpers/ModelHelper\";\nimport {\n\tdisplayMessageForFailedUpload,\n\tsetHeaderFields,\n\tshowFileNameLengthExceedDialog,\n\tshowFileSizeExceedDialog,\n\tshowTypeMismatchDialog\n} from \"sap/fe/macros/internal/helpers/Upload\";\nimport type UploadSetwithTable from \"sap/m/plugins/UploadSetwithTable\";\nimport type UploadItem from \"sap/m/upload/UploadItem\";\nimport type Event from \"sap/ui/base/Event\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type { default as ODataV4Context } from \"sap/ui/model/odata/v4/Context\";\nimport FieldRuntimeHelper from \"../../field/FieldRuntimeHelper\";\n\nconst UploadTableRuntime = {\n\t/**\n\t * Create a new instance and set the URL to upload the document.\n\t * @param uploadInfo Information sent by the UploadSet control\n\t * @param uploadInfo.oItem UploadItem with the file information\n\t * @param uploadInfo.oSource The UploadSetwithTable control\n\t * @returns A promise to be resolved with the uploadSetwithTableItem to be used to upload the document\n\t */\n\tasync uploadFile(uploadInfo: { oItem: UploadItem; oSource: UploadSetwithTable }): Promise<UploadItem> {\n\t\tconst uploadSetItem = uploadInfo.oItem,\n\t\t\tuploadSetTable = uploadInfo.oSource,\n\t\t\tmdcTable = uploadSetTable.getParent() as Table,\n\t\t\tlistBinding = mdcTable.getRowBinding(),\n\t\t\tfileNamePath = uploadSetTable.getRowConfiguration().getFileNamePath(),\n\t\t\tdata = fileNamePath ? { [fileNamePath]: uploadSetItem.getFileName() } : {},\n\t\t\tnewListEntity = listBinding.create(data, true);\n\n\t\ttry {\n\t\t\tconst internalContext = uploadSetTable.getBindingContext(\"internal\") as InternalModelContext;\n\t\t\t// we have to add the upload process to the sync task to avoid the user can save without the upload being completed\n\t\t\tconst uploadPromise = new Promise<void>((resolve, reject): void => {\n\t\t\t\tinternalContext.setProperty(`UploadPromises/${uploadSetItem.getId()}`, { resolve: resolve, reject: reject });\n\t\t\t});\n\t\t\t// we also need to store the new entity to be able to retrieve it later\n\t\t\tinternalContext.setProperty(\"uploadInstance\", newListEntity);\n\t\t\tconst containingView = CommonUtils.getTargetView(uploadSetTable);\n\t\t\tconst feController = FieldRuntimeHelper.getExtensionController(containingView.getController());\n\t\t\tfeController.editFlow.syncTask(uploadPromise);\n\n\t\t\tawait newListEntity.created();\n\n\t\t\treturn await new Promise((resolve) => {\n\t\t\t\tconst uploadPath = uploadSetTable.getUploadUrl();\n\t\t\t\tlet uploadUrl = newListEntity.getProperty(uploadPath);\n\n\t\t\t\t// set upload url as canonical url for NavigationProperties\n\t\t\t\t// this is a workaround as some backends cannot resolve NavigationsProperties for stream types\n\t\t\t\tuploadUrl = uploadUrl.replace(newListEntity.getPath(), newListEntity.getCanonicalPath());\n\n\t\t\t\t// set header fields like etag and token\n\t\t\t\tsetHeaderFields(uploadSetItem, newListEntity);\n\n\t\t\t\t// set the URL for PUT request\n\t\t\t\tuploadSetItem.setUploadUrl(uploadUrl);\n\t\t\t\tresolve(uploadSetItem);\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tthis.onUploadFailed(uploadSetTable, uploadSetItem, String(error));\n\t\t\treturn Promise.reject(\"The new instance could not be created\");\n\t\t}\n\t},\n\n\t/**\n\t * Inform the user that the upload failed due to any technical reasons.\n\t * @param uploadTable\n\t * @param uploadSetItem\n\t * @param error The error message\n\t */\n\tonUploadFailed(uploadTable: UploadSetwithTable, uploadSetItem: UploadItem, error: string): void {\n\t\tdisplayMessageForFailedUpload(uploadTable, error);\n\t\t(uploadTable.getBindingContext(\"internal\") as InternalModelContext).getProperty(`UploadPromises/${uploadSetItem.getId()}`).reject();\n\t},\n\n\t/**\n\t * Refresh the instance after upload.\n\t * This ensures we retrieve the correct mime type determined by the backend.\n\t * @param event Sent by uploadTable control\n\t */\n\tasync onUploadCompleted(event: Event<{ item: UploadItem; status: string; responseText: string; response: string }>): Promise<void> {\n\t\tconst item = event.getParameter(\"item\"),\n\t\t\tstatus = Number(event.getParameter(\"status\")),\n\t\t\tinternalContext = item.getBindingContext(\"internal\") as InternalModelContext;\n\t\tif (status === 0 || status >= 400) {\n\t\t\tconst uploadTable = item.getParent() as UploadSetwithTable;\n\t\t\tconst error = event.getParameter(\"responseText\") || event.getParameter(\"response\");\n\t\t\tUploadTableRuntime.onUploadFailed(uploadTable, item, error);\n\t\t\tconst uploadInstance = internalContext.getProperty(\"uploadInstance\");\n\t\t\tif (uploadInstance) {\n\t\t\t\t// delete the upload instance so it disappears in the list\n\t\t\t\tawait uploadInstance.delete();\n\t\t\t}\n\t\t} else {\n\t\t\tconst context = item.getBindingContext() as ODataV4Context;\n\t\t\tif (context && !context.hasPendingChanges()) {\n\t\t\t\tawait context.requestRefresh();\n\t\t\t}\n\t\t\tinternalContext.getProperty(`UploadPromises/${item.getId()}`).resolve();\n\t\t}\n\t\tinternalContext.setProperty(\"uploadInstance\", null);\n\t},\n\n\t/**\n\t * Show an error dialog to the user if the file doesn't fit to the accepted media types.\n\t * @param event Sent by uploadTable control\n\t */\n\tonMediaTypeMismatch(event: Event<{ item: UploadItem }, UploadSetwithTable>): void {\n\t\tconst uploadTable = event.getSource();\n\t\tconst givenType = event.getParameter(\"item\").getProperty(\"mediaType\");\n\t\tconst acceptedTypes = uploadTable.getMediaTypes();\n\t\tshowTypeMismatchDialog(uploadTable, givenType, acceptedTypes);\n\t},\n\n\t/**\n\t * Show an error dialog to the user if the file exceeds the maximum file size.\n\t * @param event Sent by uploadTable control\n\t */\n\tonFileSizeExceeded(event: Event<{}, UploadSetwithTable>): void {\n\t\tconst uploadTable = event.getSource();\n\t\tshowFileSizeExceedDialog(uploadTable, uploadTable.getMaxFileSize().toString());\n\t},\n\n\t/**\n\t * Show an error dialog to the user if the file exceeds the maximum file size.\n\t * @param event Sent by uploadTable control\n\t */\n\tonFileNameLengthExceeded(event: Event<{}, UploadSetwithTable>): void {\n\t\tconst uploadTable = event.getSource();\n\t\tshowFileNameLengthExceedDialog(uploadTable, uploadTable.getMaxFileNameLength().toString());\n\t}\n};\nexport default UploadTableRuntime;\n"],"mappings":"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","ignoreList":[],"file":"UploadTableRuntime-dbg.js"}