{"version":3,"file":"Table.designtime.js","names":["itemsToRemove","getAdaptationProperties","designtimeSettings","control","propertyValues","forEach","setting","id","getAdaptationPropertyValue","_exports","table","getParent","tableDefinition","getProperty","returnValue","headerVisible","header","enableFullScreen","enableExport","data","creationMode","createAtEnd","frozenColumnCount","filters","quickFilters","showCounts","getP13nMode","length","includes","rowCount","rowCountMode","useCondensedTableLayout","widthIncludingColumnHeader","annotation","selectionMode","selectionLimit","hierarchyQualifier","massEdit","enabled","visibleFields","ignoreFields","enableAddCardToInsights","beforeRebindTable","selectionChange","getSettings","tableAPI","items","getDesigntimeSettings","manifestSetting","settingsData","label","name","tooltip","description","keyUser","controlData","type","enum","enums","value","push","configPath","designTime","actions","settings","fe","icon","handler","async","unchangedData","configContext","getBindingContext","isConfigModelPrepared","getSettingsIfKeyUser","CommonUtils","getAppComponent","prepareConfigModel","resourceModel","getModel","openAdaptionDialog","width","height","then","propertyValuesEntered","propertyPath","getPropertyPath","extractChanges","noChanges","properties","busyIndicatorDelay","ignore","enableColumnResize","headerLevel","multiSelectMode","showPasteButton","showRowCount","threshold","aggregations","manifestSettings","filter","item","getPropertyNamesAndDescriptions","manifestSettingsValues","returnValues","manifestPropertyPath","manifestPropertyChange","propertyChanges","separateChanges"],"sources":["./Table.designtime.ts"],"sourcesContent":["/*!\n * Find the current values of the table configuration that is provided in the table adapt dialog\n */\n\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type ResourceModel from \"sap/fe/core/ResourceModel\";\nimport type {\n\tadaptionChange,\n\tDesigntimeSetting,\n\tDesigntimeSettingEnums,\n\tPropertyValue,\n\tSettingsData\n} from \"sap/fe/macros/designtime/Designtime.helper\";\nimport {\n\textractChanges,\n\tgetPropertyNamesAndDescriptions,\n\tgetSettingsIfKeyUser,\n\tisConfigModelPrepared,\n\tnoChanges,\n\topenAdaptionDialog,\n\tprepareConfigModel,\n\tseparateChanges\n} from \"sap/fe/macros/designtime/Designtime.helper\";\nimport { getDesigntimeSettings, getPropertyPath } from \"sap/fe/macros/table/designtime/Table.designtime.helper\";\nimport type TableAPI from \"sap/fe/macros/table/TableAPI\";\nimport type MDCTable from \"sap/ui/mdc/Table\";\nimport type Context from \"sap/ui/model/Context\";\n\ntype ControlData = {\n\ttype: string | undefined;\n\tenum: DesigntimeSettingEnums[] | undefined;\n\tvalue: unknown;\n\tid: string;\n};\n// Don't pass these properties to fiori tools processing for the control panel for table. Currently the combination\n// of boolean property plus further option of fixed list is not supported\nconst itemsToRemove = [\n\t\"personalization\",\n\t\"personalizationSort\",\n\t\"personalizationColumn\",\n\t\"personalizationFilter\",\n\t\"personalizationGroup\",\n\t\"personalizationAggregate\"\n];\n\nexport function getAdaptationProperties(designtimeSettings: DesigntimeSetting[], control: MDCTable): PropertyValue {\n\tconst propertyValues: PropertyValue = {};\n\tdesigntimeSettings.forEach(function (setting) {\n\t\tpropertyValues[setting.id] = getAdaptationPropertyValue(control, setting);\n\t});\n\treturn propertyValues;\n}\n/**\n * Returns the value of one of the settings that have been defined for table adaptation.\n * @param control Reference to selected table\n * @param setting The definition of the setting required for adaptation\n * @returns Setting definition with a value for selected control\n */\nfunction getAdaptationPropertyValue(control: MDCTable, setting: DesigntimeSetting): boolean | string | number {\n\tconst table = control.getParent() as TableAPI;\n\tconst tableDefinition = table.getProperty(\"tableDefinition\");\n\tlet returnValue: boolean | string | number = \"\";\n\n\tswitch (setting.id) {\n\t\tcase \"headerVisible\":\n\t\t\treturnValue = tableDefinition.headerVisible;\n\t\t\tbreak;\n\t\tcase \"header\":\n\t\t\treturnValue = tableDefinition.header;\n\t\t\tbreak;\n\t\tcase \"enableFullScreen\":\n\t\t\treturnValue = tableDefinition.control.enableFullScreen;\n\t\t\tbreak;\n\t\tcase \"enableExport\":\n\t\t\treturnValue = tableDefinition.control.enableExport;\n\t\t\tbreak;\n\t\tcase \"type\":\n\t\t\treturnValue = control.data(\"tableType\");\n\t\t\tbreak;\n\t\tcase \"creationModeName\":\n\t\t\treturnValue = tableDefinition.control.creationMode;\n\t\t\tbreak;\n\t\tcase \"creationModeCreateAtEnd\":\n\t\t\treturnValue = tableDefinition.control.createAtEnd;\n\t\t\tbreak;\n\t\tcase \"frozenColumnCount\":\n\t\t\treturnValue = tableDefinition.control.frozenColumnCount;\n\t\t\tbreak;\n\t\tcase \"showCounts\":\n\t\t\treturnValue = tableDefinition.control.filters?.quickFilters?.showCounts;\n\t\t\tbreak;\n\t\t/* case \"hideTableTitle\":\n\t\t\tpropertyValues.hideTableTitle = tableDefinition.control.filters?.quickFilters && !tableDefinition.control.headerVisible;\n\t\t\tbreak; */\n\t\tcase \"personalization\":\n\t\t\treturnValue = control.getP13nMode().length === 0 ? \"False\" : \"True\";\n\t\t\tbreak;\n\t\tcase \"personalizationSort\":\n\t\t\treturnValue = control.getP13nMode().includes(\"Sort\");\n\t\t\tbreak;\n\t\tcase \"personalizationColumn\":\n\t\t\treturnValue = control.getP13nMode().includes(\"Column\");\n\t\t\tbreak;\n\t\tcase \"personalizationFilter\":\n\t\t\treturnValue = control.getP13nMode().includes(\"Filter\");\n\t\t\tbreak;\n\t\tcase \"personalizationGroup\":\n\t\t\treturnValue = control.getP13nMode().includes(\"Group\");\n\t\t\tbreak;\n\t\tcase \"personalizationAggregate\":\n\t\t\treturnValue = control.getP13nMode().includes(\"Aggregate\");\n\t\t\tbreak;\n\t\tcase \"rowCount\":\n\t\t\treturnValue = tableDefinition.control.rowCount;\n\t\t\tbreak;\n\t\tcase \"rowCountMode\":\n\t\t\treturnValue = tableDefinition.control.rowCountMode;\n\t\t\tbreak;\n\t\tcase \"condensedTableLayout\":\n\t\t\treturnValue = tableDefinition.control.useCondensedTableLayout;\n\t\t\tbreak;\n\t\tcase \"widthIncludingColumnHeader\":\n\t\t\treturnValue = tableDefinition.control.widthIncludingColumnHeader;\n\t\t\tbreak;\n\t\tcase \"selectionMode\":\n\t\t\treturnValue = tableDefinition.annotation.selectionMode;\n\t\t\tbreak;\n\t\tcase \"selectAll\":\n\t\t\treturnValue = tableDefinition.control.selectionLimit === 0;\n\t\t\tbreak;\n\t\tcase \"selectionLimit\":\n\t\t\treturnValue = tableDefinition.control.selectionLimit;\n\t\t\treturn returnValue;\n\t\t\tbreak;\n\t\tcase \"hierarchyQualifier\":\n\t\t\treturnValue = tableDefinition.control.hierarchyQualifier;\n\t\t\tbreak;\n\t\tcase \"enableMassEdit\":\n\t\t\treturnValue = tableDefinition.control.massEdit.enabled;\n\t\t\tbreak;\n\t\tcase \"enableMassEditVisibleFields\":\n\t\t\treturnValue = tableDefinition.control.massEdit.visibleFields;\n\t\t\tbreak;\n\t\tcase \"enableMassEditIgnoredFields\":\n\t\t\treturnValue = tableDefinition.control.massEdit.ignoreFields;\n\t\t\tbreak;\n\t\tcase \"enableAddCardToInsights\":\n\t\t\treturnValue = tableDefinition.control.enableAddCardToInsights;\n\t\t\tbreak;\n\t\tcase \"beforeRebindTable\":\n\t\t\treturnValue = tableDefinition.control.beforeRebindTable;\n\t\t\tbreak;\n\t\tcase \"selectionChange\":\n\t\t\treturnValue = tableDefinition.control.selectionChange;\n\t\t\tbreak;\n\t}\n\treturn returnValue;\n}\n/**\n * Returns the settings and values for a table formatted for the adaptation dialog content.\n * @param tableAPI Reference to selected table\n * @param propertyValues The list of properties and values for the selected table\n * @returns Formatted list for the adaptation dialog\n */\nfunction getSettings(tableAPI: TableAPI, propertyValues: PropertyValue): SettingsData[] {\n\tconst items: SettingsData[] = [];\n\n\tgetDesigntimeSettings(tableAPI).forEach(function (manifestSetting) {\n\t\t//Fill model for adaptation settings data\n\t\tconst settingsData: SettingsData = {\n\t\t\tlabel: manifestSetting.name,\n\t\t\ttooltip: manifestSetting.description,\n\t\t\tcontrol: [],\n\t\t\tkeyUser: manifestSetting.keyUser\n\t\t};\n\n\t\tconst controlData: ControlData = {\n\t\t\ttype: manifestSetting.type,\n\t\t\tenum: manifestSetting.enums,\n\t\t\tvalue: propertyValues[manifestSetting.id],\n\t\t\tid: manifestSetting.id\n\t\t};\n\n\t\tsettingsData.control.push(controlData);\n\t\titems.push(settingsData);\n\t});\n\treturn items;\n}\n\nconst configPath = \"rta/configSettings\";\n\nconst designTime = {\n\tactions: {\n\t\tsettings: {\n\t\t\tfe: {\n\t\t\t\tname: \"Configuration\", // TODO: add i18n and check with KM\n\t\t\t\ticon: \"sap-icon://developer-settings\",\n\t\t\t\thandler: async function (control: MDCTable): Promise<adaptionChange[]> {\n\t\t\t\t\tconst tableAPI = control.getParent() as TableAPI;\n\t\t\t\t\tconst designtimeSettings = getDesigntimeSettings(tableAPI);\n\t\t\t\t\tconst propertyValues = getAdaptationProperties(designtimeSettings, control);\n\t\t\t\t\tconst unchangedData = { ...propertyValues };\n\t\t\t\t\tconst configContext = control.getBindingContext(\"internal\") as Context;\n\t\t\t\t\tif (!isConfigModelPrepared(configContext, configPath)) {\n\t\t\t\t\t\t// first time this session\n\t\t\t\t\t\tlet items = getSettings(tableAPI, propertyValues);\n\t\t\t\t\t\titems = getSettingsIfKeyUser(CommonUtils.getAppComponent(control), items);\n\t\t\t\t\t\t// use internal model to persist adaptation configuration values\n\t\t\t\t\t\tprepareConfigModel(items, configContext, configPath);\n\t\t\t\t\t}\n\t\t\t\t\tconst resourceModel = control.getModel(\"sap.fe.i18n\") as ResourceModel;\n\t\t\t\t\treturn openAdaptionDialog(\n\t\t\t\t\t\tconfigContext,\n\t\t\t\t\t\tpropertyValues,\n\t\t\t\t\t\t\"{sap.fe.i18n>RTA_CONFIGURATION_TITLE_TABLE}\",\n\t\t\t\t\t\tresourceModel,\n\t\t\t\t\t\tconfigPath,\n\t\t\t\t\t\t\"{sap.fe.i18n>RTA_CONFIGURATION_INFO_MESSAGE_TABLE}\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\twidth: \"650px\",\n\t\t\t\t\t\t\theight: \"800px\"\n\t\t\t\t\t\t}\n\t\t\t\t\t).then(function (propertyValuesEntered: PropertyValue): adaptionChange[] | [] {\n\t\t\t\t\t\tconst propertyPath = getPropertyPath(control.getParent() as TableAPI);\n\t\t\t\t\t\treturn extractChanges(designtimeSettings, unchangedData, propertyValuesEntered, propertyPath, control);\n\t\t\t\t\t}, noChanges);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t// We disable mdc table properties in the property panel of Fiori Tools\n\tproperties: {\n\t\tbusyIndicatorDelay: { ignore: true },\n\t\tenableColumnResize: { ignore: true },\n\t\tenableExport: { ignore: true },\n\t\theader: { ignore: true },\n\t\theaderLevel: { ignore: true },\n\t\theaderVisible: { ignore: true },\n\t\tmultiSelectMode: { ignore: true },\n\t\tshowPasteButton: { ignore: true },\n\t\tshowRowCount: { ignore: true },\n\t\tthreshold: { ignore: true },\n\t\twidth: { ignore: true }\n\t},\n\taggregations: {},\n\n\t// These functions provide the properties used in table adaption to Fiori tools.\n\tmanifestSettings: function (control: MDCTable): DesigntimeSetting[] {\n\t\tconst table = control.getParent() as TableAPI;\n\t\tconst designtimeSettings = getDesigntimeSettings(table).filter((item) => !itemsToRemove.includes(item.id));\n\t\treturn getPropertyNamesAndDescriptions(designtimeSettings, control.getModel(\"sap.fe.i18n\") as ResourceModel);\n\t},\n\t// getAdaptionPropertyValue\n\tmanifestSettingsValues: function (designtimeSettings: DesigntimeSetting[], control: MDCTable): PropertyValue {\n\t\tconst returnValues: PropertyValue = {};\n\t\tdesigntimeSettings.forEach(function (setting) {\n\t\t\treturnValues[setting.id] = getAdaptationPropertyValue(control, setting);\n\t\t});\n\t\treturn returnValues;\n\t},\n\t// get path for control configuration. Pass reference to the control\n\tmanifestPropertyPath: function (control: MDCTable): string {\n\t\tconst table = control.getParent() as TableAPI;\n\t\treturn getPropertyPath(table);\n\t},\n\t// create change structue. Pass array of manifest setting and new value, the property path and the control\n\tmanifestPropertyChange: function (propertyChanges: PropertyValue, propertyPath: string, control: MDCTable): adaptionChange[] {\n\t\treturn separateChanges(propertyChanges, propertyPath, control);\n\t}\n};\n\nexport default designTime;\n"],"mappings":"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","ignoreList":[]}