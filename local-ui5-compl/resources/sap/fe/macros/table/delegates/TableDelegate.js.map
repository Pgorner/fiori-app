{"version":3,"file":"TableDelegate.js","names":["SEMANTICKEY_HAS_DRAFTINDICATOR","SEARCH_HAS_BEEN_FIRED","COLUMN_HAS_BEEN_ADDED","PREVIOUS_SORTERS","Object","assign","TableDelegateBase","apiVersion","_computeVisualSettingsForFieldGroup","oTable","oProperty","aProperties","name","indexOf","oColumn","getColumns","find","col","getPropertyKey","bShowDataFieldsLabel","data","oMetaModel","getModel","getMetaModel","involvedDataModelObjects","getInvolvedDataModelObjects","getContext","metadataPath","convertedMetaData","convertedTypes","oDataField","targetObject","oFieldGroup","Target","$target","aFieldWidth","Data","forEach","oData","oDataFieldWidth","$Type","TableSizeHelper","getWidthForDataFieldForAnnotation","getWidthForDataField","labelWidth","propertyWidth","SizeHelper","getButtonWidth","Label","toString","push","nWidest","reduce","acc","value","Math","max","visualSettings","deepExtend","widthCalculation","verticalArrangement","minWidth","ceil","_computeVisualSettingsForPropertyWithValueHelp","table","property","tableAPI","getParent","propertyInfos","metaModel","dataField","getObject","gap","getProperty","_computeVisualSettingsForPropertyWithUnit","oUnit","oUnitText","oTimezoneText","oTableAPI","sUnitText","getReadOnly","_computeLabel","labelMap","label","propertiesWithSameLabel","isPropertyUsedAsTextOnlyProperty","some","prop","text","path","mode","length","includes","additionalLabels","join","_updatePropertyInfo","properties","p13nMode","getP13nMode","sortable","filterable","groupable","undefined","concat","this","typeConfig","groupLabel","group","TypeMap","getTypeConfig","visible","getColumnsFor","getTableDefinition","columns","fetchExportCapabilities","async","oCapabilities","XLSX","oModel","DelegateUtil","fetchModel","then","model","aSupportedFormats","aLowerFormats","map","element","toLowerCase","oAnnotation","catch","err","Log","error","_isFilterableNavigationProperty","columnInfo","columnDataModelObjectPath","isFilterable","isPathFilterable","relativePath","isPartOfLineItem","isPartOfCustomColumn","isConstant","_fetchPropertyInfo","appComponent","sAbsoluteNavigationPath","annotationPath","oNavigationContext","createBindingContext","oTypeConfig","className","isTypeFilterable","formatOptions","constraints","bFilterable","CommonHelper","isPropertyFilterable","isComplexType","bIsAnalyticalTable","getCustomData","getLocalizedText","tooltip","propertyInfo","baseType","style","availability","exportSettings","_setPropertyInfoExportSettings","unit","template","clipboardSettings","keys","exportDataPointTargetValue","_updateAnalyticalPropertyInfoAttributes","isKey","isGroupable","textArrangement","descriptionColumn","oCol","textProperty","valueProperty","descriptionProperty","caseSensitive","additionalLabel","unitText","timezoneText","exportFormat","_getExportFormat","format","aggregatable","extension","_fetchComputedPropertyInfo","type","_fetchCustomPropertyInfo","header","startsWith","ModelHelper","fetchTextFromMetaModel","_bColumnHasPropertyWithDraftIndicator","oColumnInfo","hasDraftIndicator","fieldGroupDraftIndicatorPropertyPath","_updateDraftIndicatorModel","_oTable","_oColumnInfo","aVisibleColumns","oInternalBindingContext","getBindingContext","sInternalPath","getPath","index","setProperty","_fetchPropertiesForEntity","sEntityTypePath","oAppComponent","sBindingPath","getEntitySetPath","aFetchedProperties","oFR","CommonUtils","getFilterRestrictionsByPath","aNonFilterableProps","NonFilterableProperties","Promise","resolve","aColumns","oPropertyInfo","maxConditions","isMultiValue","Error","_getCachedOrFetchPropertiesForEntity","entityTypePath","fetchedProperties","getCachedProperties","subFetchedProperties","setCachedProperties","setNoDataInformation","illustratedMessageInformation","noDataAggregation","getNoData","isA","currentIllustratedMessage","setTitle","title","setDescription","description","setIllustrationType","illustrationType","setIllustrationSize","illustrationSize","illustratedMessage","IllustratedMessage","setNoData","setTableNoDataIllustratedMessage","bindingInfo","tableFilterInfo","TableUtils","getAllFilterInfo","resourceModel","getResourceModel","suffixResourceKey","substring","illustratedInformation","getNoDataIllustratedMessageWithFilters","getQuickFilter","getText","IllustratedMessageType","NoSearchResults","filterAssociation","getFilter","hasFilterOrSearch","search","filters","test","NoData","getTargetView","getViewData","liveMode","modeForNoDataMessage","currentNoData","handleTableDataReceived","oInternalModelContext","oBinding","getRowBinding","bDataReceivedAttached","attachDataReceived","setTimeout","aSelectedContexts","getSelectedContexts","oActionOperationAvailableMap","ActionRuntime","setActionEnablement","DeleteHelper","updateDeleteInfoForSelectedContexts","setUpEmptyRows","_updateAvailableCards","setOptimisticBatchPromiseForModel","controller","getAppComponent","setOptimisticBatchEnablerPromise","PromiseKeeper","setOptimisticBatchForModel","enableOptimisticBatchMode","filtersPropertiesAsPotentiallySensitiveDataOrDateType","isFilterEligibleForOptimisticBatch","_getFilterBarControl","getOptimisticBatchEnablerPromise","dataModel","isOptimisticBatchHasToBeEnabled","getShellServices","isFlpOptimisticBatchPluginLoaded","getOptimisticBatchEnabler","isOptimisticBatchDisabled","optimisticBatchEnablerPromiseKeeper","setOptimisticBatchEnabler","promise","rebind","oBindingInfo","bIsSuspended","TableRuntime","clearSelection","apply","onTableBound","whenBound","oError","fetchProperties","preInit","fastCreationRow","getCreationRow","setBindingContext","updateBindingInfo","internalBindingContext","_handleSortersOnCurrenciesOrUoM","_internalUpdateBindingInfo","_handleRecommendationOutputFields","_handleFiltersForExternalID","fireEvent","collectionBindingInfo","CollectionBindingInfoAPI","context","TableHelper","enableFastCreationRow","e","sorters","sorter","newSortersToBeApplied","tableProperties","tableProperty","unitProperty","Sorter","isDescending","getFilters","updateFiltersForExternalID","getController","recommendations","isRecommendationEnabled","tableDef","recommendationOutputProperties","getSideEffectsService","getRecommendationOutputFields","annotation","entityTypeName","parameters","$select","cards","collectAvailableCards","collaborationManager","CollaborationManager","cardObject","updateCards","parentAppId","getId","getCollaborationManagerService","addCardsToCollaborationManager","shareAvailableCards","getInResultPropertyKeys","tableDefinition","requestAtLeast","updateBinding","binding","needManualRefresh","view","manualUpdatePropertyKey","pendingManualUpdate","newSorters","JSON","stringify","viewData","oldFilters","previousSorters","filterNotChanged","deepEqual","getQueryOptionsFromParameters","$search","LRMultiViewEnabled","views","setTableBindingInfo","setDownloadUrl","requestRefresh","getGroupId","finally","control","_computeRowBindingInfoFromTemplate","rowBindingInfo","getTableTemplateBindingInfo","$$getKeepAliveContext","collectionPath","internalModel","keptAliveLists","suspended","oFilter","oFilterInfo","Filter","and","bindingPath","oDataStateIndicator","getDataStateIndicator","isFiltering","updateBindingInfoWithSearchQuery","addFilterOnActiveEntities","_templateCustomColumnFragment","modifier","tableId","tableContext","tableCollectionModel","owner","getOwnerComponent","columnModel","JSONModel","oThis","id","preprocessorSettings","bindingContexts","column","collection","models","customColumn","DOMParser","parseFromString","jsx","renderAsXML","getCustomColumnTemplate","templateControlFragment","firstElementChild","oItem","destroy","filterInfo","filter","normalizeSearchTerm","payload","getPayload","filterOnActiveEntities","filterOnActive","operator","value1","_templateSlotColumnFragment","slotColumnsXML","getSlotColumn","slotXML","getElementsByTagName","oTemplate","nodeName","replaceWith","remove","resultXML","XMLPreprocessor","process","getPreprocessorContext","targets","Fragment","load","definition","dataType","ExcelFormat","getExcelDatefromJSDate","getExcelDateTimefromJSDateTime","getExcelTimefromJSTime","_getVHRelevantFields","sMetadataPath","aFields","oDataFieldData","$kind","oValue","iIndex","getNavigationPath","_setDraftIndicatorOnVisibleColumn","aColumnsWithDraftIndicator","sAddVisibleColumnName","sVisibleColumnName","bFoundColumnVisibleWithDraft","sColumnNameWithDraftIndicator","i","j","removeItem","oPropertyInfoName","mPropertyBag","doRemoveItem","oModifier","sDataProperty","insertAggregation","_setDraftIndicatorStatus","_getMetaModel","_getGroupId","sRetrievedGroupId","_fnTemplateValueHelp","fnTemplateValueHelp","bValueHelpRequired","bValueHelpExists","_insertAggregation","oValueHelp","addItem","sPropertyInfoName","sTableId","warning","sPath","getCustomDataWithModifier","oTableContext","getCurrentPageView","enableAnalytics","getComputedColumn","sGroupId","oInfo","oPropertyContext","aVHProperties","oParameters","sValueHelpType","oControl","metaPath","requestGroupId","oPreprocessorSettings","contextPath","sFragmentName","message","fnTemplateFragment","oInPropertyInfo","oView","bDisplayMode","sTableTypeCustomData","sOnChangeCustomData","sCreationModeCustomData","all","aCustomData","enableAutoColumnWidth","readOnly","tableType","onChange","navigationPropertyPath","creationMode","widthIncludingColumnHeader","entitySet","computedColumnXML","getColumnTemplate","isCompactType","mParameters","sPropertyName","aResults","isValueHelpRequired","doesValueHelpExist","getFilterDelegate","FilterBarDelegate","oParentControl","replace","getTypeMap","formatGroupHeader","formatInfos","formatInfo","obj","externalFormat","ValueFormatter","formatWithBrackets"],"sources":["./TableDelegate.ts"],"sourcesContent":["import type { DataFieldAbstractTypes, DataFieldForAnnotation, FieldGroupType } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport deepEqual from \"sap/base/util/deepEqual\";\nimport deepExtend from \"sap/base/util/deepExtend\";\nimport { isConstant } from \"sap/fe/base/BindingToolkit\";\nimport type { EnhanceWithUI5 } from \"sap/fe/base/ClassSupport\";\nimport jsx from \"sap/fe/base/jsx-runtime/jsx\";\nimport ActionRuntime from \"sap/fe/core/ActionRuntime\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport type { BaseTreeModifier } from \"sap/fe/core/CommonUtils\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type TemplateComponent from \"sap/fe/core/TemplateComponent\";\nimport type { ListReportManifestSettings } from \"sap/fe/core/converters/ManifestSettings\";\nimport { getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport type { WrappedCard } from \"sap/fe/core/services/CollaborationManagerServiceFactory\";\n\nimport CollaborationManager from \"sap/fe/core/controllerextensions/cards/CollaborationManager\";\nimport type {\n\tAnnotationTableColumn,\n\tColumnExportSettings,\n\tComputedTableColumn,\n\tCustomBasedTableColumn,\n\tPropertyTypeConfig,\n\tTableColumn,\n\tTableType,\n\tVisualSettings\n} from \"sap/fe/core/converters/controls/Common/Table\";\nimport type { CustomElement } from \"sap/fe/core/converters/helpers/ConfigurableObject\";\nimport ValueFormatter from \"sap/fe/core/formatters/ValueFormatter\";\nimport DeleteHelper from \"sap/fe/core/helpers/DeleteHelper\";\nimport ExcelFormat from \"sap/fe/core/helpers/ExcelFormatHelper\";\nimport type { InternalModelContext } from \"sap/fe/core/helpers/ModelHelper\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport PromiseKeeper from \"sap/fe/core/helpers/PromiseKeeper\";\nimport { getLocalizedText, getResourceModel } from \"sap/fe/core/helpers/ResourceModelHelper\";\nimport SizeHelper from \"sap/fe/core/helpers/SizeHelper\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { isPathFilterable } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { isTypeFilterable } from \"sap/fe/core/type/EDM\";\nimport type { CollectionBindingInfo } from \"sap/fe/macros/CollectionBindingInfo\";\nimport CollectionBindingInfoAPI from \"sap/fe/macros/CollectionBindingInfo\";\nimport CommonHelper from \"sap/fe/macros/CommonHelper\";\nimport type { PropertyInfo } from \"sap/fe/macros/DelegateUtil\";\nimport DelegateUtil from \"sap/fe/macros/DelegateUtil\";\nimport type FilterBar from \"sap/fe/macros/controls/FilterBar\";\nimport FilterBarDelegate from \"sap/fe/macros/filterBar/FilterBarDelegate\";\nimport { getColumnTemplate, getComputedColumn, getCustomColumnTemplate, getSlotColumn } from \"sap/fe/macros/table/MdcTableTemplate\";\nimport type TableAPI from \"sap/fe/macros/table/TableAPI\";\nimport TableHelper from \"sap/fe/macros/table/TableHelper\";\nimport TableRuntime from \"sap/fe/macros/table/TableRuntime\";\nimport TableSizeHelper from \"sap/fe/macros/table/TableSizeHelper\";\nimport type { InternalBindingInfo } from \"sap/fe/macros/table/Utils\";\nimport TableUtils from \"sap/fe/macros/table/Utils\";\nimport type ListReportController from \"sap/fe/templates/ListReport/ListReportController.controller\";\nimport type { $IllustratedMessageSettings } from \"sap/m/IllustratedMessage\";\nimport IllustratedMessage from \"sap/m/IllustratedMessage\";\nimport IllustratedMessageType from \"sap/m/IllustratedMessageType\";\nimport type { BaseAggregationBindingInfo } from \"sap/ui/base/ManagedObject\";\nimport type UI5Element from \"sap/ui/core/Element\";\nimport Fragment from \"sap/ui/core/Fragment\";\nimport type View from \"sap/ui/core/mvc/View\";\nimport XMLPreprocessor from \"sap/ui/core/util/XMLPreprocessor\";\nimport type { JsControlTreeModifier } from \"sap/ui/core/util/reflection\";\nimport type Control from \"sap/ui/mdc/Control\";\nimport type { default as MDCTable, default as Table } from \"sap/ui/mdc/Table\";\nimport type { ConditionObject } from \"sap/ui/mdc/condition/Condition\";\nimport TableDelegateBase from \"sap/ui/mdc/odata/v4/TableDelegate\";\nimport TypeMap from \"sap/ui/mdc/odata/v4/TypeMap\";\nimport type Context from \"sap/ui/model/Context\";\nimport Filter from \"sap/ui/model/Filter\";\nimport type MetaModel from \"sap/ui/model/MetaModel\";\nimport type Model from \"sap/ui/model/Model\";\nimport Sorter from \"sap/ui/model/Sorter\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type { default as ODataV4Context, default as v4Context } from \"sap/ui/model/odata/v4/Context\";\nimport type ODataListBinding from \"sap/ui/model/odata/v4/ODataListBinding\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\n\nconst SEMANTICKEY_HAS_DRAFTINDICATOR = \"/semanticKeyHasDraftIndicator\";\nconst SEARCH_HAS_BEEN_FIRED = \"searchFired\";\nconst COLUMN_HAS_BEEN_ADDED = \"columnAdded\";\nconst PREVIOUS_SORTERS = \"previousSorters\";\n\n/**\n * Helper class for sap.ui.mdc.Table.\n * <h3><b>Note:</b></h3>\n * The class is experimental and the API and the behavior are not finalized. This class is not intended for productive usage.\n * @author SAP SE\n * @private\n * @experimental\n * @since 1.69.0\n * @alias sap.fe.macros.TableDelegate\n */\nexport default Object.assign({}, TableDelegateBase, {\n\tapiVersion: 2,\n\t/**\n\t * This function calculates the width of a FieldGroup column.\n\t * The width of the FieldGroup is the width of the widest property contained in the FieldGroup (including the label if showDataFieldsLabel is true)\n\t * The result of this calculation is stored in the visualSettings.widthCalculation.minWidth property, which is used by the MDCtable.\n\t * @param oTable Instance of the MDCtable\n\t * @param oProperty Current property\n\t * @param aProperties Array of properties\n\t * @private\n\t * @alias sap.fe.macros.TableDelegate\n\t */\n\t_computeVisualSettingsForFieldGroup: function (oTable: Table, oProperty: PropertyInfo, aProperties: PropertyInfo[]) {\n\t\tif (oProperty.name.indexOf(\"DataFieldForAnnotation::FieldGroup::\") === 0) {\n\t\t\tconst oColumn = oTable.getColumns().find((col) => {\n\t\t\t\treturn col.getPropertyKey() === oProperty.name;\n\t\t\t});\n\t\t\tconst bShowDataFieldsLabel = oColumn ? oColumn.data(\"showDataFieldsLabel\") === \"true\" : false;\n\t\t\tconst oMetaModel = (oTable.getModel() as ODataModel).getMetaModel();\n\t\t\tconst involvedDataModelObjects = getInvolvedDataModelObjects(oMetaModel.getContext(oProperty.metadataPath!));\n\t\t\tconst convertedMetaData = involvedDataModelObjects.convertedTypes;\n\t\t\tconst oDataField = involvedDataModelObjects.targetObject as DataFieldForAnnotation;\n\t\t\tconst oFieldGroup = oDataField.Target.$target as FieldGroupType;\n\t\t\tconst aFieldWidth: number[] = [];\n\t\t\toFieldGroup.Data.forEach(function (oData: DataFieldAbstractTypes) {\n\t\t\t\tlet oDataFieldWidth: { labelWidth: number; propertyWidth: number };\n\t\t\t\tswitch (oData.$Type) {\n\t\t\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldForAnnotation\":\n\t\t\t\t\t\toDataFieldWidth = TableSizeHelper.getWidthForDataFieldForAnnotation(\n\t\t\t\t\t\t\toData,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\taProperties,\n\t\t\t\t\t\t\tconvertedMetaData,\n\t\t\t\t\t\t\tbShowDataFieldsLabel\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"com.sap.vocabularies.UI.v1.DataField\":\n\t\t\t\t\t\toDataFieldWidth = TableSizeHelper.getWidthForDataField(\n\t\t\t\t\t\t\toData,\n\t\t\t\t\t\t\tbShowDataFieldsLabel,\n\t\t\t\t\t\t\taProperties,\n\t\t\t\t\t\t\tconvertedMetaData,\n\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldForAction\":\n\t\t\t\t\t\toDataFieldWidth = {\n\t\t\t\t\t\t\tlabelWidth: 0,\n\t\t\t\t\t\t\tpropertyWidth: SizeHelper.getButtonWidth(oData.Label?.toString())\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\t\tif (oDataFieldWidth!) {\n\t\t\t\t\taFieldWidth.push(oDataFieldWidth.labelWidth + oDataFieldWidth.propertyWidth);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst nWidest = aFieldWidth.reduce(function (acc: number, value: number) {\n\t\t\t\treturn Math.max(acc, value);\n\t\t\t}, 0);\n\t\t\toProperty.visualSettings = deepExtend(oProperty.visualSettings as object, {\n\t\t\t\twidthCalculation: {\n\t\t\t\t\tverticalArrangement: true,\n\t\t\t\t\tminWidth: Math.ceil(nWidest)\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\n\t_computeVisualSettingsForPropertyWithValueHelp: function (table: Table, property: PropertyInfo) {\n\t\tconst tableAPI = table.getParent() as TableAPI;\n\t\tif (!property.propertyInfos) {\n\t\t\tconst metaModel = (table.getModel() as ODataModel).getMetaModel();\n\t\t\tif (property.metadataPath && metaModel) {\n\t\t\t\tconst dataField = metaModel.getObject(`${property.metadataPath}@`);\n\t\t\t\tif (dataField && dataField[\"@com.sap.vocabularies.Common.v1.ValueList\"]) {\n\t\t\t\t\tproperty.visualSettings = deepExtend(property.visualSettings || {}, {\n\t\t\t\t\t\twidthCalculation: {\n\t\t\t\t\t\t\tgap: tableAPI.getProperty(\"readOnly\") ? 0 : 4\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_computeVisualSettingsForPropertyWithUnit: function (\n\t\toTable: Table,\n\t\toProperty: PropertyInfo,\n\t\toUnit?: string,\n\t\toUnitText?: string,\n\t\toTimezoneText?: string\n\t) {\n\t\tconst oTableAPI: EnhanceWithUI5<TableAPI> | null = oTable ? (oTable.getParent() as EnhanceWithUI5<TableAPI>) : null;\n\t\t// update gap for properties with string unit\n\t\tconst sUnitText = oUnitText || oTimezoneText;\n\t\tif (sUnitText) {\n\t\t\toProperty.visualSettings = deepExtend(oProperty.visualSettings as VisualSettings, {\n\t\t\t\twidthCalculation: {\n\t\t\t\t\tgap: Math.ceil(SizeHelper.getButtonWidth(sUnitText))\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (oUnit) {\n\t\t\toProperty.visualSettings = deepExtend(oProperty.visualSettings as VisualSettings, {\n\t\t\t\twidthCalculation: {\n\t\t\t\t\t// For properties with unit, a gap needs to be added to properly render the column width on edit mode\n\t\t\t\t\tgap: oTableAPI && oTableAPI.getReadOnly() ? 0 : 6\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\n\t_computeLabel: function (property: PropertyInfo, labelMap: { [label: string]: PropertyInfo[] }) {\n\t\tif (property.label) {\n\t\t\tconst propertiesWithSameLabel = labelMap[property.label];\n\t\t\t// For navigation properties used a texts, exclude them in case text arrangement is set to TextOnly\n\t\t\tconst isPropertyUsedAsTextOnlyProperty = propertiesWithSameLabel?.some(\n\t\t\t\t(prop) => prop.text === property.path && prop.mode === \"Description\"\n\t\t\t);\n\t\t\tif (\n\t\t\t\tpropertiesWithSameLabel?.length > 1 &&\n\t\t\t\tproperty.path?.includes(\"/\") &&\n\t\t\t\tproperty.additionalLabels &&\n\t\t\t\t!isPropertyUsedAsTextOnlyProperty\n\t\t\t) {\n\t\t\t\tproperty.label = property.label + \" (\" + property.additionalLabels.join(\" / \") + \")\";\n\t\t\t}\n\t\t\tdelete property.additionalLabels;\n\t\t}\n\t},\n\t//Update VisualSetting for columnWidth calculation and labels on navigation properties\n\t_updatePropertyInfo: function (table: Table, properties: PropertyInfo[]) {\n\t\tconst labelMap: { [label: string]: PropertyInfo[] } = {};\n\t\t// Check available p13n modes\n\t\tconst p13nMode = table.getP13nMode();\n\t\tproperties.forEach((property: PropertyInfo) => {\n\t\t\tif (!property.propertyInfos && property.label) {\n\t\t\t\t// Only for non-complex properties\n\t\t\t\tif (\n\t\t\t\t\t(p13nMode?.includes(\"Sort\") && property.sortable) ||\n\t\t\t\t\t(p13nMode?.includes(\"Filter\") && property.filterable) ||\n\t\t\t\t\t(p13nMode?.includes(\"Group\") && property.groupable)\n\t\t\t\t) {\n\t\t\t\t\tlabelMap[property.label] =\n\t\t\t\t\t\tlabelMap[property.label] !== undefined ? labelMap[property.label].concat([property]) : [property];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tproperties.forEach((property: PropertyInfo) => {\n\t\t\tthis._computeVisualSettingsForFieldGroup(table, property, properties);\n\t\t\tthis._computeVisualSettingsForPropertyWithValueHelp(table, property);\n\t\t\t// bcp: 2270003577\n\t\t\t// Some columns (eg: custom columns) have no typeConfig property.\n\t\t\t// initializing it prevents an exception throw\n\t\t\tproperty.typeConfig = deepExtend(property.typeConfig!, {}) as PropertyTypeConfig;\n\t\t\tthis._computeLabel(property, labelMap);\n\t\t});\n\t\t// Add the $editState property\n\t\tproperties.push({\n\t\t\tname: \"$editState\",\n\t\t\tpath: \"$editState\",\n\t\t\tgroupLabel: \"\",\n\t\t\tgroup: \"\",\n\t\t\ttypeConfig: TypeMap.getTypeConfig(\"sap.ui.model.odata.type.String\", {}, {}),\n\t\t\tvisible: false,\n\t\t\tgroupable: false,\n\t\t\tsortable: false,\n\t\t\tfilterable: false\n\t\t});\n\t\treturn properties;\n\t},\n\n\tgetColumnsFor: function (table: Table): TableColumn[] {\n\t\treturn (table.getParent() as TableAPI).getTableDefinition().columns;\n\t},\n\n\t/**\n\t * Returns the export capabilities for the given sap.ui.mdc.Table instance.\n\t * @param oTable Instance of the table\n\t * @returns Promise representing the export capabilities of the table instance\n\t */\n\tfetchExportCapabilities: async function (oTable: Table): Promise<{ XLSX?: unknown; PDF?: unknown }> {\n\t\tconst oCapabilities: { XLSX?: unknown; PDF?: unknown } = { XLSX: {} };\n\t\tlet oModel!: ODataModel;\n\t\treturn DelegateUtil.fetchModel(oTable)\n\t\t\t.then(function (model: Model) {\n\t\t\t\toModel = model as ODataModel;\n\t\t\t\treturn oModel.getMetaModel().getObject(\"/$EntityContainer@Org.OData.Capabilities.V1.SupportedFormats\");\n\t\t\t})\n\t\t\t.then(function (aSupportedFormats: string[] | undefined) {\n\t\t\t\tconst aLowerFormats = (aSupportedFormats || []).map((element) => {\n\t\t\t\t\treturn element.toLowerCase();\n\t\t\t\t});\n\t\t\t\tif (aLowerFormats.includes(\"application/pdf\")) {\n\t\t\t\t\treturn oModel.getMetaModel().getObject(\"/$EntityContainer@com.sap.vocabularies.PDF.v1.Features\");\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t})\n\t\t\t.then(function (oAnnotation: unknown) {\n\t\t\t\tif (oAnnotation) {\n\t\t\t\t\toCapabilities[\"PDF\"] = Object.assign({}, oAnnotation);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t})\n\t\t\t.catch(function (err) {\n\t\t\t\tLog.error(`An error occurs while computing export capabilities: ${err}`);\n\t\t\t})\n\t\t\t.then(function () {\n\t\t\t\treturn oCapabilities;\n\t\t\t});\n\t},\n\n\t/**\n\t * Filtering on navigation properties that are not part of the LineItem annotation nor of the custom columns is forbidden.\n\t * @param columnInfo\n\t * @param metaModel\n\t * @param table\n\t * @returns Boolean true if filtering is allowed, false otherwise\n\t */\n\t_isFilterableNavigationProperty: function (\n\t\tcolumnInfo: AnnotationTableColumn,\n\t\tcolumnDataModelObjectPath: DataModelObjectPath<unknown>\n\t): boolean {\n\t\tconst isFilterable = isPathFilterable(columnDataModelObjectPath);\n\t\treturn (\n\t\t\t!columnInfo.relativePath.includes(\"/\") ||\n\t\t\t((columnInfo.isPartOfLineItem === true || columnInfo.isPartOfCustomColumn === true) &&\n\t\t\t\t!(isConstant(isFilterable) && isFilterable.value === false))\n\t\t);\n\t},\n\n\t_fetchPropertyInfo: function (metaModel: MetaModel, columnInfo: AnnotationTableColumn, table: Table, appComponent: AppComponent) {\n\t\tconst sAbsoluteNavigationPath = columnInfo.annotationPath,\n\t\t\toDataField = metaModel.getObject(sAbsoluteNavigationPath),\n\t\t\toNavigationContext = metaModel.createBindingContext(sAbsoluteNavigationPath) as Context,\n\t\t\toTypeConfig =\n\t\t\t\tcolumnInfo.typeConfig?.className && isTypeFilterable(columnInfo.typeConfig.className)\n\t\t\t\t\t? TypeMap.getTypeConfig(\n\t\t\t\t\t\t\tcolumnInfo.typeConfig.className,\n\t\t\t\t\t\t\tcolumnInfo.typeConfig.formatOptions,\n\t\t\t\t\t\t\tcolumnInfo.typeConfig.constraints\n\t\t\t\t\t  )\n\t\t\t\t\t: {},\n\t\t\tbFilterable = CommonHelper.isPropertyFilterable(oNavigationContext, oDataField),\n\t\t\tisComplexType =\n\t\t\t\tcolumnInfo.typeConfig && columnInfo.typeConfig.className && columnInfo.typeConfig.className?.indexOf(\"Edm.\") !== 0,\n\t\t\tbIsAnalyticalTable = DelegateUtil.getCustomData(table, \"enableAnalytics\") === \"true\",\n\t\t\tlabel = getLocalizedText(columnInfo.label ?? \"\", appComponent ?? table);\n\t\tconst tooltip = getLocalizedText(columnInfo.tooltip ?? \"\", appComponent ?? table);\n\n\t\tconst propertyInfo: PropertyInfo = {\n\t\t\tname: columnInfo.name,\n\t\t\tmetadataPath: sAbsoluteNavigationPath,\n\t\t\tgroupLabel: columnInfo.groupLabel,\n\t\t\tgroup: columnInfo.group,\n\t\t\tlabel: label,\n\t\t\ttooltip: tooltip,\n\t\t\ttypeConfig: oTypeConfig as PropertyTypeConfig,\n\t\t\tformatOptions:\n\t\t\t\tcolumnInfo.typeConfig?.baseType === \"Edm.DateTimeOffset\" ? { style: \"medium/short\" } : columnInfo.typeConfig?.formatOptions,\n\t\t\tvisible: columnInfo.availability !== \"Hidden\" && !isComplexType,\n\t\t\texportSettings: this._setPropertyInfoExportSettings(columnInfo.exportSettings, columnInfo),\n\t\t\tunit: columnInfo.unit\n\t\t};\n\t\tif (propertyInfo.exportSettings?.template) {\n\t\t\tpropertyInfo.clipboardSettings = { template: propertyInfo.exportSettings.template };\n\t\t\t// if I set this clipBoardSettings the copy provider extract the data according to the template in the html property and it is properly copied in excel\n\t\t\t// but when we copy elsewhere we only get the raw data and not the templated data\n\t\t}\n\n\t\t// Set visualSettings only if it exists\n\t\tif (columnInfo.visualSettings && Object.keys(columnInfo.visualSettings).length > 0) {\n\t\t\tpropertyInfo.visualSettings = columnInfo.visualSettings;\n\t\t}\n\n\t\tif (columnInfo.exportDataPointTargetValue) {\n\t\t\tpropertyInfo.exportDataPointTargetValue = columnInfo.exportDataPointTargetValue;\n\t\t}\n\n\t\t// MDC expects  'propertyInfos' only for complex properties.\n\t\t// An empty array throws validation error and undefined value is unhandled.\n\t\tif (columnInfo.propertyInfos?.length) {\n\t\t\tpropertyInfo.propertyInfos = columnInfo.propertyInfos;\n\t\t} else {\n\t\t\t// Add properties which are supported only by simple PropertyInfos.\n\n\t\t\t//get the DataModelObjectPath for the column\n\t\t\tconst columnDataModelObjectPath = getInvolvedDataModelObjects(\n\t\t\t\tmetaModel.getContext(columnInfo.annotationPath),\n\t\t\t\tmetaModel.getContext(DelegateUtil.getCustomData(table, \"metaPath\")!)\n\t\t\t);\n\t\t\tpropertyInfo.path = columnInfo.relativePath;\n\t\t\t// TODO with the new complex property info, a lot of \"Description\" fields are added as filter/sort fields\n\t\t\tpropertyInfo.sortable = columnInfo.sortable;\n\t\t\tif (bIsAnalyticalTable) {\n\t\t\t\tthis._updateAnalyticalPropertyInfoAttributes(propertyInfo, columnInfo);\n\t\t\t}\n\t\t\tpropertyInfo.filterable =\n\t\t\t\tcolumnInfo.filterable !== false &&\n\t\t\t\t!!bFilterable &&\n\t\t\t\tthis._isFilterableNavigationProperty(columnInfo, columnDataModelObjectPath);\n\t\t\tpropertyInfo.isKey = columnInfo.isKey;\n\t\t\tpropertyInfo.groupable = columnInfo.isGroupable;\n\t\t\tif (columnInfo.textArrangement) {\n\t\t\t\tconst descriptionColumn = (this.getColumnsFor(table) as AnnotationTableColumn[]).find(function (oCol) {\n\t\t\t\t\treturn oCol.name === columnInfo.textArrangement?.textProperty;\n\t\t\t\t});\n\t\t\t\tif (descriptionColumn) {\n\t\t\t\t\tpropertyInfo.mode = columnInfo.textArrangement.mode;\n\t\t\t\t\tpropertyInfo.valueProperty = columnInfo.relativePath;\n\t\t\t\t\tpropertyInfo.descriptionProperty = descriptionColumn.relativePath;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpropertyInfo.text = columnInfo.textArrangement?.textProperty;\n\t\t\tpropertyInfo.caseSensitive = columnInfo.caseSensitive;\n\t\t\tif (columnInfo.additionalLabels) {\n\t\t\t\tpropertyInfo.additionalLabels = columnInfo.additionalLabels.map((additionalLabel: string) => {\n\t\t\t\t\treturn getLocalizedText(additionalLabel, appComponent || table);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthis._computeVisualSettingsForPropertyWithUnit(table, propertyInfo, columnInfo.unit, columnInfo.unitText, columnInfo.timezoneText);\n\n\t\treturn propertyInfo;\n\t},\n\n\t/**\n\t * Extend the export settings based on the column info.\n\t * @param exportSettings The export settings to be extended\n\t * @param columnInfo The columnInfo object\n\t * @returns The extended export settings\n\t */\n\t_setPropertyInfoExportSettings: function (\n\t\texportSettings: ColumnExportSettings | undefined | null,\n\t\tcolumnInfo: AnnotationTableColumn\n\t): ColumnExportSettings | undefined | null {\n\t\tconst exportFormat = this._getExportFormat(columnInfo.typeConfig?.className);\n\t\tif (exportFormat && exportSettings) {\n\t\t\texportSettings.format = exportFormat;\n\t\t}\n\t\treturn exportSettings;\n\t},\n\n\t_updateAnalyticalPropertyInfoAttributes(propertyInfo: PropertyInfo, columnInfo: AnnotationTableColumn) {\n\t\tif (columnInfo.aggregatable) {\n\t\t\tpropertyInfo.aggregatable = columnInfo.aggregatable;\n\t\t}\n\t\tif (columnInfo.extension) {\n\t\t\tpropertyInfo.extension = columnInfo.extension;\n\t\t}\n\t},\n\n\t_fetchComputedPropertyInfo: function (columnInfo: ComputedTableColumn, table: Table) {\n\t\tlet label = \"\";\n\t\tlabel = getLocalizedText(columnInfo.label, table); // Todo: To be removed once MDC provides translation support\n\t\tconst propertyInfo: PropertyInfo = {\n\t\t\tname: columnInfo.name,\n\t\t\tlabel: label.toString(),\n\t\t\ttype: \"Edm.String\",\n\t\t\tvisible: columnInfo.availability !== \"Hidden\",\n\t\t\tfilterable: false,\n\t\t\tsortable: false,\n\t\t\tgroupable: false,\n\t\t\texportSettings: null,\n\t\t\tclipboardSettings: null\n\t\t};\n\t\tif (columnInfo.propertyInfos !== undefined && columnInfo.propertyInfos.length > 0) {\n\t\t\tpropertyInfo.propertyInfos = columnInfo.propertyInfos;\n\t\t}\n\t\treturn propertyInfo;\n\t},\n\n\t_fetchCustomPropertyInfo: function (columnInfo: CustomBasedTableColumn, table: Table, appComponent: AppComponent) {\n\t\tlet label;\n\t\tif (columnInfo.header) {\n\t\t\tif (columnInfo.header.startsWith(\"{metaModel>\")) {\n\t\t\t\tlabel = ModelHelper.fetchTextFromMetaModel(columnInfo.header, undefined, (table.getModel() as ODataModel).getMetaModel());\n\t\t\t} else {\n\t\t\t\tlabel = getLocalizedText(columnInfo.header, appComponent); // Todo: To be removed once MDC provides translation support\n\t\t\t}\n\t\t}\n\t\tconst propertyInfo: PropertyInfo = {\n\t\t\tname: columnInfo.name,\n\t\t\tgroupLabel: undefined,\n\t\t\tgroup: undefined,\n\t\t\tlabel: label ?? \"\",\n\t\t\ttype: \"Edm.String\", // TBD\n\t\t\tvisible: columnInfo.availability !== \"Hidden\",\n\t\t\texportSettings: columnInfo.exportSettings,\n\t\t\tvisualSettings: columnInfo.visualSettings\n\t\t};\n\n\t\t// MDC expects 'propertyInfos' only for complex properties.\n\t\t// An empty array throws validation error and undefined value is unhandled.\n\t\tif (columnInfo.propertyInfos && columnInfo.propertyInfos.length) {\n\t\t\tpropertyInfo.propertyInfos = columnInfo.propertyInfos;\n\t\t} else {\n\t\t\t// Add properties which are supported only by simple PropertyInfos.\n\t\t\tpropertyInfo.path = columnInfo.name;\n\t\t\tpropertyInfo.sortable = false;\n\t\t\tpropertyInfo.filterable = false;\n\t\t}\n\t\treturn propertyInfo;\n\t},\n\t_bColumnHasPropertyWithDraftIndicator: function (oColumnInfo: TableColumn): boolean {\n\t\treturn !!(\n\t\t\t(oColumnInfo.formatOptions && oColumnInfo.formatOptions.hasDraftIndicator) ||\n\t\t\t(oColumnInfo.formatOptions && oColumnInfo.formatOptions.fieldGroupDraftIndicatorPropertyPath)\n\t\t);\n\t},\n\t_updateDraftIndicatorModel: function (_oTable: Table, _oColumnInfo: TableColumn): void {\n\t\tconst aVisibleColumns = _oTable.getColumns();\n\t\tconst oInternalBindingContext = _oTable.getBindingContext(\"internal\");\n\t\tconst sInternalPath = oInternalBindingContext && oInternalBindingContext.getPath();\n\t\tif (aVisibleColumns && oInternalBindingContext) {\n\t\t\tfor (const index in aVisibleColumns) {\n\t\t\t\tif (\n\t\t\t\t\tthis._bColumnHasPropertyWithDraftIndicator(_oColumnInfo) &&\n\t\t\t\t\t_oColumnInfo.name === aVisibleColumns[index].getPropertyKey()\n\t\t\t\t) {\n\t\t\t\t\tif (oInternalBindingContext.getProperty(sInternalPath + SEMANTICKEY_HAS_DRAFTINDICATOR) === undefined) {\n\t\t\t\t\t\toInternalBindingContext.setProperty(sInternalPath + SEMANTICKEY_HAS_DRAFTINDICATOR, _oColumnInfo.name);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t_fetchPropertiesForEntity: async function (\n\t\toTable: Table,\n\t\tsEntityTypePath: string,\n\t\toMetaModel: ODataMetaModel,\n\t\toAppComponent: AppComponent\n\t): Promise<PropertyInfo[]> {\n\t\t// when fetching properties, this binding context is needed - so lets create it only once and use if for all properties/data-fields/line-items\n\t\tconst sBindingPath = ModelHelper.getEntitySetPath(sEntityTypePath);\n\t\tlet aFetchedProperties: PropertyInfo[] = [];\n\t\tconst oFR = CommonUtils.getFilterRestrictionsByPath(sBindingPath, oMetaModel);\n\t\tconst aNonFilterableProps = oFR.NonFilterableProperties;\n\t\treturn Promise.resolve(this.getColumnsFor(oTable))\n\t\t\t.then((aColumns: TableColumn[]) => {\n\t\t\t\t// DraftAdministrativeData does not work via 'entitySet/$NavigationPropertyBinding/DraftAdministrativeData'\n\t\t\t\tif (aColumns) {\n\t\t\t\t\tlet oPropertyInfo;\n\t\t\t\t\taColumns.forEach((oColumnInfo) => {\n\t\t\t\t\t\tthis._updateDraftIndicatorModel(oTable, oColumnInfo);\n\t\t\t\t\t\tswitch (oColumnInfo.type) {\n\t\t\t\t\t\t\tcase \"Annotation\":\n\t\t\t\t\t\t\t\toPropertyInfo = this._fetchPropertyInfo(\n\t\t\t\t\t\t\t\t\toMetaModel,\n\t\t\t\t\t\t\t\t\toColumnInfo as AnnotationTableColumn,\n\t\t\t\t\t\t\t\t\toTable,\n\t\t\t\t\t\t\t\t\toAppComponent\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tif (oPropertyInfo && !aNonFilterableProps.includes(oPropertyInfo.name)) {\n\t\t\t\t\t\t\t\t\toPropertyInfo.maxConditions = DelegateUtil.isMultiValue(oPropertyInfo) ? -1 : 1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"Computed\":\n\t\t\t\t\t\t\t\toPropertyInfo = this._fetchComputedPropertyInfo(oColumnInfo as ComputedTableColumn, oTable);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"Slot\":\n\t\t\t\t\t\t\tcase \"Default\":\n\t\t\t\t\t\t\t\toPropertyInfo = this._fetchCustomPropertyInfo(oColumnInfo as CustomBasedTableColumn, oTable, oAppComponent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthrow new Error(`unhandled switch case ${oColumnInfo.type}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\taFetchedProperties.push(oPropertyInfo);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\taFetchedProperties = this._updatePropertyInfo(oTable, aFetchedProperties);\n\t\t\t\treturn;\n\t\t\t})\n\t\t\t.catch(function (err) {\n\t\t\t\tLog.error(`An error occurs while updating fetched properties: ${err as string}`);\n\t\t\t})\n\t\t\t.then(function () {\n\t\t\t\treturn aFetchedProperties;\n\t\t\t});\n\t},\n\n\t_getCachedOrFetchPropertiesForEntity: async function (\n\t\ttable: Table,\n\t\tentityTypePath: string,\n\t\tmetaModel: ODataMetaModel,\n\t\tappComponent: AppComponent\n\t): Promise<PropertyInfo[]> {\n\t\tconst fetchedProperties = DelegateUtil.getCachedProperties(table);\n\n\t\tif (fetchedProperties) {\n\t\t\treturn Promise.resolve(fetchedProperties);\n\t\t}\n\t\treturn this._fetchPropertiesForEntity(table, entityTypePath, metaModel, appComponent).then(function (\n\t\t\tsubFetchedProperties: PropertyInfo[]\n\t\t) {\n\t\t\tDelegateUtil.setCachedProperties(table, subFetchedProperties);\n\t\t\treturn subFetchedProperties;\n\t\t});\n\t},\n\tsetNoDataInformation: function (table: Table, illustratedMessageInformation: $IllustratedMessageSettings): void {\n\t\tconst noDataAggregation = table.getNoData();\n\t\tif (typeof noDataAggregation != \"string\" && (noDataAggregation as Control)?.isA(\"sap.m.IllustratedMessage\")) {\n\t\t\tconst currentIllustratedMessage = noDataAggregation as IllustratedMessage;\n\t\t\t// We override the current values of the IllustratedMessage\n\t\t\tcurrentIllustratedMessage.setTitle(illustratedMessageInformation.title);\n\t\t\tcurrentIllustratedMessage.setDescription(illustratedMessageInformation.description);\n\t\t\tcurrentIllustratedMessage.setIllustrationType(illustratedMessageInformation.illustrationType);\n\t\t\tcurrentIllustratedMessage.setIllustrationSize(illustratedMessageInformation.illustrationSize);\n\t\t} else {\n\t\t\tconst illustratedMessage = new IllustratedMessage({\n\t\t\t\t...illustratedMessageInformation\n\t\t\t});\n\t\t\ttable.setNoData(illustratedMessage);\n\t\t}\n\t},\n\n\tsetTableNoDataIllustratedMessage: function (table: Table, bindingInfo: CollectionBindingInfo) {\n\t\tconst tableFilterInfo = TableUtils.getAllFilterInfo(table);\n\t\tconst resourceModel = getResourceModel(table);\n\t\tconst suffixResourceKey = bindingInfo.path?.startsWith(\"/\") ? bindingInfo.path.substring(1) : bindingInfo.path;\n\t\tlet illustratedInformation: $IllustratedMessageSettings;\n\n\t\tconst getNoDataIllustratedMessageWithFilters = function (): $IllustratedMessageSettings {\n\t\t\tif (table.data(\"hiddenFilters\") || table.getQuickFilter()) {\n\t\t\t\treturn {\n\t\t\t\t\ttitle: resourceModel.getText(\"T_ILLUSTRATED_MESSAGE_TITLE_NOSEARCHRESULTS\"),\n\t\t\t\t\tdescription: resourceModel.getText(\"M_TABLE_AND_CHART_NO_DATA_TEXT_MULTI_VIEW\", undefined, suffixResourceKey),\n\t\t\t\t\tillustrationType: IllustratedMessageType.NoSearchResults\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn {\n\t\t\t\ttitle: resourceModel.getText(\"T_ILLUSTRATED_MESSAGE_TITLE_NOSEARCHRESULTS\"),\n\t\t\t\tdescription: resourceModel.getText(\"T_TABLE_AND_CHART_NO_DATA_TEXT_WITH_FILTER\", undefined, suffixResourceKey),\n\t\t\t\tillustrationType: IllustratedMessageType.NoSearchResults\n\t\t\t};\n\t\t};\n\n\t\tconst filterAssociation = table.getFilter();\n\t\tconst hasFilterOrSearch = tableFilterInfo.search || tableFilterInfo.filters?.length;\n\t\tif (filterAssociation && !/BasicSearch$/.test(filterAssociation)) {\n\t\t\t// check if a FilterBar is associated to the Table (basic search on toolBar is excluded)\n\t\t\tif (hasFilterOrSearch) {\n\t\t\t\t// check if table has any Filterbar filters or personalization filters\n\t\t\t\tillustratedInformation = getNoDataIllustratedMessageWithFilters();\n\t\t\t} else {\n\t\t\t\tillustratedInformation = {\n\t\t\t\t\ttitle: resourceModel.getText(\"T_ILLUSTRATED_MESSAGE_TITLE_NOSEARCHRESULTS\"),\n\t\t\t\t\tdescription: resourceModel.getText(\"T_TABLE_AND_CHART_NO_DATA_TEXT\", undefined, suffixResourceKey),\n\t\t\t\t\tillustrationType: IllustratedMessageType.NoSearchResults\n\t\t\t\t};\n\t\t\t}\n\t\t} else if (hasFilterOrSearch) {\n\t\t\t//check if table has any personalization filters\n\t\t\tillustratedInformation = getNoDataIllustratedMessageWithFilters();\n\t\t} else {\n\t\t\tillustratedInformation = {\n\t\t\t\ttitle: resourceModel.getText(\"T_ILLUSTRATED_MESSAGE_TITLE_NODATA\"),\n\t\t\t\tdescription: resourceModel.getText(\"M_TABLE_AND_CHART_NO_FILTERS_NO_DATA_TEXT\", undefined, suffixResourceKey),\n\t\t\t\tillustrationType: IllustratedMessageType.NoData\n\t\t\t};\n\t\t}\n\t\tif (CommonUtils.getTargetView(table).getViewData().liveMode) {\n\t\t\tillustratedInformation = {\n\t\t\t\ttitle: resourceModel.getText(\"T_ILLUSTRATED_MESSAGE_TITLE_NOSEARCHRESULTS\"),\n\t\t\t\tdescription: resourceModel.getText(\"T_TABLE_AND_CHART_NO_DATA_TEXT_WITH_FILTER\"),\n\t\t\t\tillustrationType: IllustratedMessageType.NoSearchResults\n\t\t\t};\n\t\t}\n\t\tillustratedInformation.illustrationSize = (table.getParent() as TableAPI).modeForNoDataMessage;\n\n\t\tif (illustratedInformation.illustrationSize === \"text\") {\n\t\t\tconst currentNoData = table.getNoData();\n\t\t\tif (typeof currentNoData === \"string\" && currentNoData === illustratedInformation.description) {\n\t\t\t\t// We don't change the noData aggregation unnecessary.\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttable.setNoData(illustratedInformation.description);\n\t\t} else {\n\t\t\tthis.setNoDataInformation(table, illustratedInformation);\n\t\t}\n\t},\n\n\thandleTableDataReceived: function (oTable: Table, oInternalModelContext: InternalModelContext): void {\n\t\tconst oBinding = oTable && oTable.getRowBinding(),\n\t\t\tbDataReceivedAttached = oInternalModelContext && oInternalModelContext.getProperty(\"dataReceivedAttached\");\n\n\t\tif (oInternalModelContext && !bDataReceivedAttached) {\n\t\t\toBinding.attachDataReceived(() => {\n\t\t\t\t// as the dataReceived event is fired multiple times, we need to ensure that the event is only handled once\n\t\t\t\tif (!oInternalModelContext.getProperty(\"dataReceivedTimeoutSet\")) {\n\t\t\t\t\toInternalModelContext.setProperty(\"dataReceivedTimeoutSet\", true);\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\toInternalModelContext.setProperty(\"dataReceivedTimeoutSet\", false);\n\t\t\t\t\t\t// Refresh the selected contexts to trigger re-calculation of enabled state of actions.\n\t\t\t\t\t\toInternalModelContext.setProperty(\"selectedContexts\", []);\n\t\t\t\t\t\tconst aSelectedContexts = oTable.getSelectedContexts() as ODataV4Context[];\n\t\t\t\t\t\toInternalModelContext.setProperty(\"selectedContexts\", aSelectedContexts);\n\t\t\t\t\t\toInternalModelContext.setProperty(\"numberOfSelectedContexts\", aSelectedContexts.length);\n\t\t\t\t\t\tconst oActionOperationAvailableMap =\n\t\t\t\t\t\t\tDelegateUtil.getCustomData<Record<string, string>>(oTable, \"operationAvailableMap\") ?? {};\n\t\t\t\t\t\tActionRuntime.setActionEnablement(oInternalModelContext, oActionOperationAvailableMap, aSelectedContexts, \"table\");\n\t\t\t\t\t\t// Refresh enablement of delete button\n\t\t\t\t\t\tDeleteHelper.updateDeleteInfoForSelectedContexts(oInternalModelContext, aSelectedContexts);\n\t\t\t\t\t\tconst oTableAPI = oTable ? oTable.getParent() : null;\n\t\t\t\t\t\tif (oTableAPI) {\n\t\t\t\t\t\t\t(oTableAPI as TableAPI).setUpEmptyRows(oTable);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._updateAvailableCards(oTable);\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t});\n\t\t\toInternalModelContext.setProperty(\"dataReceivedAttached\", true);\n\t\t}\n\t},\n\n\t/**\n\t * Set the optimistic batch promise for the enabler callback function.\n\t * @param controller The controller\n\t * @param tableAPI The TableAPI\n\t */\n\tsetOptimisticBatchPromiseForModel: function (controller: ListReportController, tableAPI: TableAPI): void {\n\t\tconst model = controller.getAppComponent().getModel();\n\t\tif (model) {\n\t\t\ttableAPI.setOptimisticBatchEnablerPromise(new PromiseKeeper<boolean>());\n\t\t\tthis.setOptimisticBatchForModel(controller, model, tableAPI);\n\t\t}\n\t},\n\n\t/**\n\t * Enable the optimistic batch mode if available.\n\t * @param controller\n\t * @param table\n\t */\n\tenableOptimisticBatchMode: function (controller: ListReportController, table: Table): void {\n\t\tconst filtersPropertiesAsPotentiallySensitiveDataOrDateType =\n\t\t\ttable && TableUtils.isFilterEligibleForOptimisticBatch(table, controller._getFilterBarControl() as FilterBar);\n\t\t(table.getParent() as TableAPI).getOptimisticBatchEnablerPromise()?.resolve(!filtersPropertiesAsPotentiallySensitiveDataOrDateType);\n\t},\n\n\t/**\n\t * Setter for the optimistic batch enabler callback function.\n\t * @param controller\n\t * @param dataModel The OData Model\n\t * @param tableAPI The TableAPI\n\t * @see {sap.ui.model.odata.v4.ODataModel#setOptimisticBatchEnabler} for further information.\n\t */\n\tsetOptimisticBatchForModel: function (controller: ListReportController, dataModel: ODataModel, tableAPI: TableAPI): void {\n\t\tconst isOptimisticBatchHasToBeEnabled = controller.getAppComponent().getShellServices().isFlpOptimisticBatchPluginLoaded();\n\t\tif (dataModel.getOptimisticBatchEnabler() === null && !tableAPI.isOptimisticBatchDisabled() && isOptimisticBatchHasToBeEnabled) {\n\t\t\tconst optimisticBatchEnablerPromiseKeeper = tableAPI.getOptimisticBatchEnablerPromise();\n\t\t\tdataModel.setOptimisticBatchEnabler(function (): Promise<boolean> | undefined {\n\t\t\t\treturn optimisticBatchEnablerPromiseKeeper?.promise;\n\t\t\t});\n\t\t}\n\t},\n\n\trebind: async function (oTable: Table, oBindingInfo: BaseAggregationBindingInfo): Promise<void> {\n\t\tconst oTableAPI = oTable.getParent() as TableAPI;\n\t\tconst bIsSuspended = oTableAPI?.getProperty(\"bindingSuspended\");\n\t\toTableAPI?.setProperty(\"outDatedBinding\", bIsSuspended);\n\t\tif (!bIsSuspended) {\n\t\t\tTableRuntime.clearSelection(oTable);\n\t\t\tTableDelegateBase.rebind.apply(this, [oTable, oBindingInfo]);\n\t\t\tTableUtils.onTableBound(oTable);\n\t\t\treturn TableUtils.whenBound(oTable)\n\t\t\t\t.then((table: Table): void => {\n\t\t\t\t\tthis.handleTableDataReceived(table, table.getBindingContext(\"internal\") as InternalModelContext);\n\t\t\t\t\treturn;\n\t\t\t\t})\n\t\t\t\t.catch(function (oError) {\n\t\t\t\t\tLog.error(\"Error while waiting for the table to be bound\", oError as string);\n\t\t\t\t});\n\t\t}\n\t\treturn Promise.resolve();\n\t},\n\n\t/**\n\t * Fetches the relevant metadata for the table and returns property info array.\n\t * @param table Instance of the MDCtable\n\t * @returns Array of property info\n\t */\n\tfetchProperties: async function (table: Table): Promise<PropertyInfo[]> {\n\t\treturn DelegateUtil.fetchModel(table)\n\t\t\t.then(async (model): Promise<PropertyInfo[]> => {\n\t\t\t\tconst appComponent = CommonUtils.getAppComponent(table);\n\t\t\t\treturn this._getCachedOrFetchPropertiesForEntity(\n\t\t\t\t\ttable,\n\t\t\t\t\tDelegateUtil.getCustomData<string>(table, \"entityType\") ?? \"\",\n\t\t\t\t\tmodel.getMetaModel() as ODataMetaModel,\n\t\t\t\t\tappComponent\n\t\t\t\t);\n\t\t\t})\n\t\t\t.then((properties) => {\n\t\t\t\t(table.getBindingContext(\"internal\") as Context)?.setProperty(\"tablePropertiesAvailable\", true);\n\t\t\t\treturn properties;\n\t\t\t});\n\t},\n\n\tpreInit: async function (table: Table): Promise<void> {\n\t\treturn (TableDelegateBase.preInit as (table: Table) => Promise<void>).apply(this, [table]).then(() => {\n\t\t\t/**\n\t\t\t * Set the binding context to null for every fast creation row to avoid inheriting\n\t\t\t * the wrong context and requesting the table columns on the parent entity\n\t\t\t * Set the correct binding context in ObjectPageController.enableFastCreationRow()\n\t\t\t */\n\t\t\tconst fastCreationRow = table.getCreationRow();\n\t\t\tif (fastCreationRow) {\n\t\t\t\tfastCreationRow.setBindingContext(null as unknown as Context);\n\t\t\t}\n\t\t\treturn;\n\t\t});\n\t},\n\tupdateBindingInfo: function (table: Table, bindingInfo: CollectionBindingInfo) {\n\t\tconst internalBindingContext = table.getBindingContext(\"internal\") as InternalModelContext | undefined;\n\t\tinternalBindingContext?.setProperty(\"isInsightsEnabled\", true);\n\t\tTableDelegateBase.updateBindingInfo.apply(this, [table, bindingInfo]);\n\t\ttry {\n\t\t\tthis._handleSortersOnCurrenciesOrUoM(table, bindingInfo);\n\t\t\tthis._internalUpdateBindingInfo(table, bindingInfo);\n\t\t\tthis.setTableNoDataIllustratedMessage(table, bindingInfo);\n\t\t\tthis._handleRecommendationOutputFields(table, bindingInfo);\n\t\t\tthis._handleFiltersForExternalID(table, bindingInfo);\n\n\t\t\ttable.getParent()?.fireEvent(\"beforeRebindTable\", { collectionBindingInfo: new CollectionBindingInfoAPI(bindingInfo) });\n\t\t\t/**\n\t\t\t * We have to set the binding context to null for every fast creation row to avoid it inheriting\n\t\t\t * the wrong context and requesting the table columns for the parent entity\n\t\t\t * The correct binding context is set in ObjectPageController.enableFastCreationRow()\n\t\t\t */\n\t\t\tconst context = table.getBindingContext();\n\t\t\t// eslint-disable-next-line deprecation/deprecation\n\t\t\tif (table.getCreationRow()?.getBindingContext() === null && bindingInfo.path && context) {\n\t\t\t\tTableHelper.enableFastCreationRow(\n\t\t\t\t\t// eslint-disable-next-line deprecation/deprecation\n\t\t\t\t\ttable.getCreationRow(),\n\t\t\t\t\tbindingInfo.path,\n\t\t\t\t\tcontext as v4Context,\n\t\t\t\t\ttable.getModel() as ODataModel,\n\t\t\t\t\tPromise.resolve()\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tLog.error(\"Error while updating the binding info\", e as string);\n\t\t}\n\t},\n\n\t_handleSortersOnCurrenciesOrUoM: function (table: Table, bindingInfo: CollectionBindingInfo) {\n\t\tconst sorters: Sorter[] | undefined = bindingInfo.sorter;\n\t\tconst newSortersToBeApplied: Sorter[] = [];\n\t\tif (sorters?.length) {\n\t\t\tconst tableProperties = DelegateUtil.getCachedProperties(table);\n\t\t\tfor (const sorter of sorters) {\n\t\t\t\tconst tableProperty = tableProperties?.find((property) => property.path === sorter.getPath());\n\t\t\t\tif (tableProperty?.unit) {\n\t\t\t\t\tconst unitProperty = tableProperties?.find((property) => property.name === tableProperty?.unit);\n\t\t\t\t\tif (unitProperty?.sortable !== false && unitProperty?.path) {\n\t\t\t\t\t\tnewSortersToBeApplied.push(new Sorter(unitProperty.path, sorter.isDescending()));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnewSortersToBeApplied.push(sorter);\n\t\t\t}\n\t\t\tbindingInfo.sorter = newSortersToBeApplied;\n\t\t}\n\t},\n\n\t_handleFiltersForExternalID: function (table: Table, bindingInfo: CollectionBindingInfo) {\n\t\tconst metaModel = (table.getModel() as ODataModel)?.getMetaModel();\n\t\tconst entityTypePath = bindingInfo.path + \"/\";\n\t\tconst filters = bindingInfo.filters?.getFilters();\n\t\tif (filters !== undefined) {\n\t\t\tTableUtils.updateFiltersForExternalID(metaModel, filters as unknown as ConditionObject[], entityTypePath);\n\t\t}\n\t},\n\n\t_handleRecommendationOutputFields: function (table: Table, oBindingInfo: CollectionBindingInfo) {\n\t\tconst tableAPI = table.getParent() as TableAPI;\n\t\tconst controller = tableAPI?.getController();\n\t\tif (controller?.recommendations.isRecommendationEnabled()) {\n\t\t\tconst appComponent = controller.getAppComponent();\n\t\t\tconst tableDef = tableAPI.getTableDefinition();\n\t\t\tconst recommendationOutputProperties = appComponent\n\t\t\t\t.getSideEffectsService()\n\t\t\t\t.getRecommendationOutputFields(tableDef.annotation.entityTypeName);\n\t\t\tif (recommendationOutputProperties && recommendationOutputProperties.length > 0 && oBindingInfo.parameters) {\n\t\t\t\toBindingInfo.parameters.$select = oBindingInfo.parameters?.$select?.concat(\",\", recommendationOutputProperties.join());\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Update the cards when the binding is refreshed.\n\t * @param table The mdc table control.\n\t */\n\t_updateAvailableCards: async function (table: Table): Promise<void> {\n\t\tconst tableAPI = table.getParent() as TableAPI;\n\t\tconst appComponent = tableAPI?.getController()?.getAppComponent();\n\t\tconst cards: WrappedCard[] = [];\n\t\tawait tableAPI.collectAvailableCards(cards);\n\t\tconst collaborationManager = new CollaborationManager();\n\t\tconst cardObject = collaborationManager.updateCards(cards);\n\t\tconst parentAppId = appComponent.getId();\n\t\tappComponent.getCollaborationManagerService().addCardsToCollaborationManager(cardObject, parentAppId);\n\t\tappComponent.getCollaborationManagerService().shareAvailableCards();\n\t},\n\n\t/**\n\t * The hook implemented by MDC that we can override.\n\t * This allows us to define properties to be requested in the MDC table (Main case is for the analytical table).\n\t * @param table The mdc table control.\n\t * @returns An array of property name to be requested.\n\t */\n\tgetInResultPropertyKeys: function (table: MDCTable): string[] {\n\t\tconst tableAPI = table.getParent() as TableAPI | null;\n\t\tif (tableAPI?.tableDefinition.requestAtLeast) {\n\t\t\treturn tableAPI.tableDefinition.requestAtLeast;\n\t\t}\n\t\treturn [\"\"];\n\t},\n\n\tupdateBinding: function (table: MDCTable, bindingInfo: CollectionBindingInfo, binding?: ODataListBinding): void {\n\t\tconst tableAPI = table.getParent() as TableAPI;\n\t\tconst bIsSuspended = tableAPI?.getProperty(\"bindingSuspended\");\n\t\tif (!bIsSuspended) {\n\t\t\tlet needManualRefresh = false;\n\t\t\tconst view = CommonUtils.getTargetView(table);\n\t\t\tconst internalBindingContext = table.getBindingContext(\"internal\");\n\t\t\tconst manualUpdatePropertyKey = \"pendingManualBindingUpdate\";\n\t\t\tconst pendingManualUpdate = internalBindingContext?.getProperty(manualUpdatePropertyKey) as boolean;\n\t\t\tconst newSorters = JSON.stringify(bindingInfo.sorter ?? []);\n\n\t\t\tif (binding) {\n\t\t\t\t/**\n\t\t\t\t * Manual refresh if filters are not changed by binding.refresh() since updating the bindingInfo\n\t\t\t\t * is not enough to trigger a batch request.\n\t\t\t\t * Removing columns creates one batch request that was not executed before\n\t\t\t\t */\n\t\t\t\tconst viewData = view?.getViewData() as ListReportManifestSettings;\n\t\t\t\tconst oldFilters = binding.getFilters(\"Application\");\n\t\t\t\tconst previousSorters = internalBindingContext?.getProperty(PREVIOUS_SORTERS) ?? \"[]\";\n\n\t\t\t\tconst filterNotChanged =\n\t\t\t\t\tdeepEqual(bindingInfo.filters, oldFilters[0]) &&\n\t\t\t\t\tnewSorters === previousSorters &&\n\t\t\t\t\tbindingInfo.path === binding.getPath() && // The path can be changed in case of a parametrized entity\n\t\t\t\t\tbinding.getQueryOptionsFromParameters().$search === bindingInfo?.parameters?.$search;\n\t\t\t\tconst LRMultiViewEnabled = !!viewData.views;\n\n\t\t\t\tneedManualRefresh =\n\t\t\t\t\tfilterNotChanged &&\n\t\t\t\t\t(internalBindingContext?.getProperty(SEARCH_HAS_BEEN_FIRED) || // check if the search has been triggered\n\t\t\t\t\t\tinternalBindingContext?.getProperty(COLUMN_HAS_BEEN_ADDED) || // check if a column has been added\n\t\t\t\t\t\tLRMultiViewEnabled) && // if the multi view is enabled the request should be refreshed as we don't known if the content of the table is outdated due to an action on another table\n\t\t\t\t\t!pendingManualUpdate;\n\t\t\t}\n\t\t\tTableDelegateBase.updateBinding.apply(this, [table, bindingInfo, binding]);\n\t\t\t// we store the table binding info that was used to bind the table in the table API\n\t\t\t// this needs to be done after the call to TableDelegateBase.updateBinding other wise we don't get the aggregate parameters\n\t\t\t// otherwise there is no way to retrieve sorters added in the onBeforeRebindTable event\n\t\t\ttableAPI.setTableBindingInfo(bindingInfo);\n\t\t\t// we make the call to update the download url but do not await it\n\t\t\ttableAPI.setDownloadUrl();\n\n\t\t\ttable.fireEvent(\"bindingUpdated\");\n\t\t\tif (needManualRefresh && table.getFilter() && binding) {\n\t\t\t\tbinding\n\t\t\t\t\t.requestRefresh(binding.getGroupId())\n\t\t\t\t\t.finally(() => {\n\t\t\t\t\t\tinternalBindingContext?.setProperty(manualUpdatePropertyKey, false);\n\t\t\t\t\t})\n\t\t\t\t\t.catch(function (oError) {\n\t\t\t\t\t\tLog.error(\"Error while refreshing the table\", oError as string);\n\t\t\t\t\t});\n\t\t\t\tinternalBindingContext?.setProperty(manualUpdatePropertyKey, true);\n\t\t\t}\n\t\t\tinternalBindingContext?.setProperty(SEARCH_HAS_BEEN_FIRED, false);\n\t\t\tinternalBindingContext?.setProperty(COLUMN_HAS_BEEN_ADDED, false);\n\t\t\tinternalBindingContext?.setProperty(PREVIOUS_SORTERS, newSorters);\n\n\t\t\t//for Treetable, it's necessary to clear the pastableContexts since the binding destroys previous contexts.\n\t\t\tif (tableAPI.getTableDefinition().control.type === \"TreeTable\") {\n\t\t\t\tinternalBindingContext?.setProperty(\"pastableContexts\", []);\n\t\t\t}\n\t\t}\n\t\ttableAPI?.setProperty(\"outDatedBinding\", bIsSuspended);\n\t},\n\n\t_computeRowBindingInfoFromTemplate: function (oTable: Table): CollectionBindingInfo {\n\t\tconst tableAPI = oTable.getParent() as TableAPI;\n\t\tconst rowBindingInfo = tableAPI.getTableTemplateBindingInfo();\n\t\t// if the rowBindingInfo has a $$getKeepAliveContext parameter we need to check it is the only Table with such a\n\t\t// parameter for the collectionMetaPath\n\t\tif (rowBindingInfo.parameters?.$$getKeepAliveContext === true) {\n\t\t\tconst collectionPath = DelegateUtil.getCustomData<string>(oTable, \"targetCollectionPath\") ?? \"\";\n\t\t\tconst internalModel = oTable.getModel(\"internal\") as JSONModel;\n\t\t\tconst keptAliveLists = internalModel?.getObject(\"/keptAliveLists\") ?? {};\n\t\t\tif (!keptAliveLists[collectionPath]) {\n\t\t\t\tkeptAliveLists[collectionPath] = oTable.getId();\n\t\t\t\tinternalModel?.setProperty(\"/keptAliveLists\", keptAliveLists);\n\t\t\t} else if (keptAliveLists[collectionPath] !== oTable.getId()) {\n\t\t\t\tdelete rowBindingInfo.parameters.$$getKeepAliveContext;\n\t\t\t}\n\t\t}\n\n\t\treturn rowBindingInfo;\n\t},\n\t_internalUpdateBindingInfo: function (oTable: Table, oBindingInfo: CollectionBindingInfo) {\n\t\tconst oInternalModelContext = oTable.getBindingContext(\"internal\") as InternalModelContext | undefined;\n\t\tObject.assign(oBindingInfo, this._computeRowBindingInfoFromTemplate(oTable));\n\t\t/**\n\t\t * Binding info might be suspended at the beginning when the first bindRows is called:\n\t\t * To avoid duplicate requests but still have a binding to create new entries.\t\t\t\t *\n\t\t * After the initial binding step, follow up bindings should no longer be suspended.\n\t\t */\n\t\tif (oTable.getRowBinding()) {\n\t\t\toBindingInfo.suspended = false;\n\t\t}\n\t\t// The previously added handler for the event 'dataReceived' is not anymore there\n\t\t// since the bindingInfo is recreated from scratch so we need to set the flag to false in order\n\t\t// to again add the handler on this event if needed\n\t\tif (oInternalModelContext) {\n\t\t\toInternalModelContext.setProperty(\"dataReceivedAttached\", false);\n\t\t}\n\n\t\tlet oFilter;\n\t\tconst oFilterInfo = TableUtils.getAllFilterInfo(oTable);\n\t\t// Prepare binding info with filter/search parameters\n\t\tif (oFilterInfo.filters.length > 0) {\n\t\t\toFilter = new Filter({ filters: oFilterInfo.filters, and: true });\n\t\t}\n\t\tif (oFilterInfo.bindingPath) {\n\t\t\toBindingInfo.path = oFilterInfo.bindingPath;\n\t\t}\n\n\t\tconst oDataStateIndicator = oTable.getDataStateIndicator();\n\t\tif (oDataStateIndicator && oDataStateIndicator.isFiltering()) {\n\t\t\t// Include filters on messageStrip\n\t\t\tif ((oBindingInfo.filters as unknown as Filter[]).length > 0) {\n\t\t\t\toFilter = new Filter({ filters: (oBindingInfo.filters as unknown as Filter[]).concat(oFilterInfo.filters), and: true });\n\t\t\t\tthis.updateBindingInfoWithSearchQuery(oBindingInfo, oFilterInfo, oFilter);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.updateBindingInfoWithSearchQuery(oBindingInfo, oFilterInfo, oFilter);\n\t\t}\n\n\t\tthis.addFilterOnActiveEntities(oTable, oBindingInfo);\n\t},\n\n\t_templateCustomColumnFragment: async function (\n\t\tcolumnInfo: CustomBasedTableColumn,\n\t\tview: View,\n\t\tmodifier: BaseTreeModifier,\n\t\ttableId: string,\n\t\ttableContext: Context\n\t): Promise<Element | UI5Element | Element[] | UI5Element[]> {\n\t\tconst tableCollectionModel = tableContext.getModel && tableContext.getModel();\n\t\tconst controller = view.getController();\n\t\tconst owner = controller?.getOwnerComponent() as EnhanceWithUI5<TemplateComponent>;\n\t\tconst columnModel = new JSONModel(columnInfo),\n\t\t\toThis = new JSONModel({\n\t\t\t\tid: tableId\n\t\t\t}),\n\t\t\tpreprocessorSettings = {\n\t\t\t\tbindingContexts: {\n\t\t\t\t\tthis: oThis.createBindingContext(\"/\"),\n\t\t\t\t\tcolumn: columnModel.createBindingContext(\"/\"),\n\t\t\t\t\tcollection: tableContext\n\t\t\t\t},\n\t\t\t\tmodels: {\n\t\t\t\t\tmetaModel: tableCollectionModel,\n\t\t\t\t\tthis: oThis,\n\t\t\t\t\tcolumn: columnModel,\n\t\t\t\t\tcollection: tableCollectionModel\n\t\t\t\t},\n\t\t\t\tappComponent: owner?.getAppComponent()\n\t\t\t};\n\n\t\tconst customColumn = new DOMParser().parseFromString(\n\t\t\tjsx.renderAsXML(() => {\n\t\t\t\treturn getCustomColumnTemplate(tableId, columnInfo, tableContext) as unknown as string;\n\t\t\t}),\n\t\t\t\"text/xml\"\n\t\t);\n\t\treturn DelegateUtil.templateControlFragment(customColumn.firstElementChild, preprocessorSettings, { view: view }, modifier).then(\n\t\t\tfunction (oItem: Element | UI5Element | Element[] | UI5Element[]) {\n\t\t\t\tcolumnModel.destroy();\n\t\t\t\treturn oItem;\n\t\t\t}\n\t\t);\n\t},\n\tupdateBindingInfoWithSearchQuery: function (bindingInfo: CollectionBindingInfo, filterInfo: InternalBindingInfo, filter?: Filter) {\n\t\tbindingInfo.filters = filter;\n\t\tbindingInfo.parameters ??= {};\n\t\tif (filterInfo.search) {\n\t\t\tbindingInfo.parameters.$search = CommonUtils.normalizeSearchTerm(filterInfo.search);\n\t\t} else {\n\t\t\tbindingInfo.parameters.$search = undefined;\n\t\t}\n\t},\n\t/**\n\t * If specified in the payload, adds a filter to display only active entities.\n\t * @param table\n\t * @param bindingInfo\n\t */\n\taddFilterOnActiveEntities: function (table: Table, bindingInfo: CollectionBindingInfo) {\n\t\tconst payload = table.getPayload() as { filterOnActiveEntities?: boolean };\n\n\t\tif (payload?.filterOnActiveEntities === true) {\n\t\t\tconst filterOnActive = new Filter({ path: \"IsActiveEntity\", operator: \"EQ\", value1: true });\n\t\t\tif (bindingInfo.filters) {\n\t\t\t\tbindingInfo.filters = new Filter({ filters: [filterOnActive, bindingInfo.filters], and: true });\n\t\t\t} else {\n\t\t\t\tbindingInfo.filters = filterOnActive;\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Creates a template from the fragment of a slot column.\n\t * @param columnInfo The custom table column\n\t * @param view The current view\n\t * @param modifier The control tree modifier\n\t * @param tableId The id of the underlying table\n\t * @returns The loaded fragment\n\t */\n\t_templateSlotColumnFragment: async function (\n\t\tcolumnInfo: CustomElement<CustomBasedTableColumn>,\n\t\tview: View,\n\t\tmodifier: BaseTreeModifier | JsControlTreeModifier,\n\t\ttableId: string\n\t): Promise<null | Control | Control[] | Element> {\n\t\tconst slotColumnsXML = new DOMParser().parseFromString(\n\t\t\tjsx.renderAsXML(() => {\n\t\t\t\treturn getSlotColumn(tableId, columnInfo, false) as unknown as string;\n\t\t\t}),\n\t\t\t\"text/xml\"\n\t\t);\n\t\tif (!slotColumnsXML) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\t\tconst slotXML = slotColumnsXML.getElementsByTagName(\"slot\")[0];\n\n\t\tif (columnInfo.template) {\n\t\t\tif (slotXML) {\n\t\t\t\tconst oTemplate = new DOMParser().parseFromString(columnInfo.template, \"text/xml\");\n\t\t\t\tif (oTemplate.firstElementChild && oTemplate.firstElementChild.nodeName !== \"html\") {\n\t\t\t\t\tslotXML.replaceWith(oTemplate.firstElementChild);\n\t\t\t\t} else {\n\t\t\t\t\tslotXML.remove();\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tLog.error(`Please provide content inside this Building Block Column: ${columnInfo.header}`);\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\t\tconst resultXML = await XMLPreprocessor.process(\n\t\t\tslotColumnsXML.firstElementChild,\n\t\t\t{ models: {} },\n\t\t\t(view.getController().getOwnerComponent() as EnhanceWithUI5<TemplateComponent>).getPreprocessorContext()\n\t\t);\n\t\tif (modifier?.targets !== \"jsControlTree\") {\n\t\t\treturn resultXML.firstElementChild;\n\t\t}\n\t\treturn Fragment.load({\n\t\t\ttype: \"XML\",\n\t\t\tdefinition: resultXML,\n\t\t\tcontroller: view.getController()\n\t\t}) as Promise<Control | Control[]>;\n\t},\n\n\t_getExportFormat: function (dataType?: string) {\n\t\tswitch (dataType) {\n\t\t\tcase \"Edm.Date\":\n\t\t\t\treturn ExcelFormat.getExcelDatefromJSDate();\n\t\t\tcase \"Edm.DateTimeOffset\":\n\t\t\t\treturn ExcelFormat.getExcelDateTimefromJSDateTime();\n\t\t\tcase \"Edm.TimeOfDay\":\n\t\t\t\treturn ExcelFormat.getExcelTimefromJSTime();\n\t\t\tdefault:\n\t\t\t\treturn undefined;\n\t\t}\n\t},\n\n\t_getVHRelevantFields: function (oMetaModel: ODataMetaModel, sMetadataPath: string, sBindingPath?: string): string[] {\n\t\tlet aFields: string[] = [],\n\t\t\toDataFieldData = oMetaModel.getObject(sMetadataPath);\n\n\t\tif (oDataFieldData.$kind && oDataFieldData.$kind === \"Property\") {\n\t\t\toDataFieldData = oMetaModel.getObject(`${sMetadataPath}@com.sap.vocabularies.UI.v1.DataFieldDefault`);\n\t\t\tsMetadataPath = `${sMetadataPath}@com.sap.vocabularies.UI.v1.DataFieldDefault`;\n\t\t}\n\t\tswitch (oDataFieldData.$Type) {\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldForAnnotation\":\n\t\t\t\tif (oMetaModel.getObject(`${sMetadataPath}/Target/$AnnotationPath`).includes(\"com.sap.vocabularies.UI.v1.FieldGroup\")) {\n\t\t\t\t\toMetaModel.getObject(`${sMetadataPath}/Target/$AnnotationPath/Data`).forEach((oValue: unknown, iIndex: number) => {\n\t\t\t\t\t\taFields = aFields.concat(\n\t\t\t\t\t\t\tthis._getVHRelevantFields(oMetaModel, `${sMetadataPath}/Target/$AnnotationPath/Data/${iIndex}`)\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath\":\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldWithUrl\":\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataField\":\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation\":\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldWithAction\":\n\t\t\t\taFields.push(oMetaModel.getObject(`${sMetadataPath}/Value/$Path`));\n\t\t\t\tbreak;\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldForAction\":\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation\":\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// property\n\t\t\t\t// temporary workaround to make sure VH relevant field path do not contain the bindingpath\n\t\t\t\tif (sBindingPath && sMetadataPath.indexOf(sBindingPath) === 0) {\n\t\t\t\t\taFields.push(sMetadataPath.substring(sBindingPath.length + 1));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\taFields.push(CommonHelper.getNavigationPath(sMetadataPath, true));\n\t\t\t\tbreak;\n\t\t}\n\t\treturn aFields;\n\t},\n\t_setDraftIndicatorOnVisibleColumn: function (oTable: Table, aColumns: TableColumn[], oColumnInfo?: TableColumn) {\n\t\tconst oInternalBindingContext = oTable.getBindingContext(\"internal\");\n\t\tif (!oInternalBindingContext) {\n\t\t\treturn;\n\t\t}\n\t\tconst sInternalPath = oInternalBindingContext.getPath();\n\t\tconst aColumnsWithDraftIndicator = aColumns.filter((oColumn: TableColumn) => {\n\t\t\treturn this._bColumnHasPropertyWithDraftIndicator(oColumn);\n\t\t});\n\t\tconst aVisibleColumns = oTable.getColumns();\n\t\tlet sAddVisibleColumnName, sVisibleColumnName, bFoundColumnVisibleWithDraft, sColumnNameWithDraftIndicator;\n\t\tfor (const i in aVisibleColumns) {\n\t\t\tsVisibleColumnName = aVisibleColumns[i].getPropertyKey();\n\t\t\tfor (const j in aColumnsWithDraftIndicator) {\n\t\t\t\tsColumnNameWithDraftIndicator = aColumnsWithDraftIndicator[j].name;\n\t\t\t\tif (sVisibleColumnName === sColumnNameWithDraftIndicator) {\n\t\t\t\t\tbFoundColumnVisibleWithDraft = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (oColumnInfo && oColumnInfo.name === sColumnNameWithDraftIndicator) {\n\t\t\t\t\tsAddVisibleColumnName = oColumnInfo.name;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (bFoundColumnVisibleWithDraft) {\n\t\t\t\toInternalBindingContext.setProperty(sInternalPath + SEMANTICKEY_HAS_DRAFTINDICATOR, sVisibleColumnName);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!bFoundColumnVisibleWithDraft && sAddVisibleColumnName) {\n\t\t\toInternalBindingContext.setProperty(sInternalPath + SEMANTICKEY_HAS_DRAFTINDICATOR, sAddVisibleColumnName);\n\t\t}\n\t},\n\tremoveItem: async function (\n\t\toTable: UI5Element | Element,\n\t\toPropertyInfoName: UI5Element | Element,\n\t\tmPropertyBag: { modifier: BaseTreeModifier; appComponent: AppComponent }\n\t): Promise<boolean> {\n\t\tlet doRemoveItem = true;\n\t\tif (!oPropertyInfoName) {\n\t\t\t// 1. Application removed the property from their data model\n\t\t\t// 2. addItem failed before revertData created\n\t\t\treturn Promise.resolve(doRemoveItem);\n\t\t}\n\t\tconst oModifier = mPropertyBag.modifier;\n\t\tconst sDataProperty = await oModifier.getProperty<string>(oPropertyInfoName, \"dataProperty\");\n\t\tif (sDataProperty && sDataProperty.includes && sDataProperty.includes(\"InlineXML\")) {\n\t\t\toModifier.insertAggregation(oTable, \"dependents\", oPropertyInfoName);\n\t\t\tdoRemoveItem = false;\n\t\t}\n\t\tif ((oTable as UI5Element).isA && oModifier.targets === \"jsControlTree\") {\n\t\t\tthis._setDraftIndicatorStatus(oModifier, oTable, this.getColumnsFor(oTable as Table));\n\t\t}\n\t\treturn Promise.resolve(doRemoveItem);\n\t},\n\t_getMetaModel: function (mPropertyBag: { appComponent: AppComponent }) {\n\t\treturn mPropertyBag.appComponent && mPropertyBag.appComponent.getModel().getMetaModel();\n\t},\n\t_setDraftIndicatorStatus: function (\n\t\toModifier: BaseTreeModifier,\n\t\toTable: UI5Element | Element,\n\t\taColumns: TableColumn[],\n\t\toColumnInfo?: TableColumn\n\t) {\n\t\tif (oModifier.targets === \"jsControlTree\") {\n\t\t\tthis._setDraftIndicatorOnVisibleColumn(oTable as Table, aColumns, oColumnInfo);\n\t\t}\n\t},\n\t_getGroupId: function (sRetrievedGroupId: string) {\n\t\treturn sRetrievedGroupId || undefined;\n\t},\n\t_fnTemplateValueHelp: function (fnTemplateValueHelp: Function, bValueHelpRequired: boolean, bValueHelpExists: boolean) {\n\t\tif (bValueHelpRequired && !bValueHelpExists) {\n\t\t\treturn fnTemplateValueHelp(\"sap.fe.macros.table.ValueHelp\");\n\t\t}\n\t\treturn Promise.resolve();\n\t},\n\t_insertAggregation: async function (\n\t\toValueHelp: Element | UI5Element | Element[] | UI5Element[],\n\t\toModifier: BaseTreeModifier,\n\t\toTable: Element | UI5Element\n\t): Promise<void> {\n\t\tif (oValueHelp) {\n\t\t\treturn oModifier.insertAggregation(oTable, \"dependents\", oValueHelp, 0);\n\t\t}\n\t\treturn;\n\t},\n\n\t/**\n\t * Invoked when a column is added using the table personalization dialog.\n\t * @param oTable Instance of table control\n\t * @param sPropertyInfoName Name of the property for which the column is added\n\t * @param mPropertyBag Instance of property bag from the flexibility API\n\t * @param mPropertyBag.modifier Instance of the control tree modifier\n\t * @param mPropertyBag.appComponent Instance of the app component\n\t * @param mPropertyBag.view Instance of the view\n\t * @returns Once resolved, a table column definition is returned\n\t */\n\taddItem: async function (\n\t\toTable: Element | UI5Element,\n\t\tsPropertyInfoName: string,\n\t\tmPropertyBag: { modifier: BaseTreeModifier; appComponent: AppComponent; view?: FEView }\n\t) {\n\t\tconst oMetaModel = this._getMetaModel(mPropertyBag),\n\t\t\toModifier = mPropertyBag.modifier,\n\t\t\tsTableId = oModifier.getId(oTable),\n\t\t\taColumns = (oTable as UI5Element).isA ? this.getColumnsFor(oTable as Table) : null;\n\t\tif (!aColumns) {\n\t\t\t// We return null here because everything should apply at runtime\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\tconst oColumnInfo = aColumns.find(function (oColumn) {\n\t\t\treturn oColumn.name === sPropertyInfoName;\n\t\t});\n\t\tif (!oColumnInfo) {\n\t\t\tLog.error(`${sPropertyInfoName} not found while adding column`);\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\t\tif (oColumnInfo.availability === \"Hidden\") {\n\t\t\tLog.warning(`Column for ${sPropertyInfoName} not added because it's hidden`);\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\t\tconst internalBindingContext = (oTable as Table).getBindingContext(\"internal\");\n\t\tinternalBindingContext?.setProperty(COLUMN_HAS_BEEN_ADDED, true);\n\t\tthis._setDraftIndicatorStatus(oModifier, oTable, aColumns, oColumnInfo);\n\t\tconst sPath = await DelegateUtil.getCustomDataWithModifier<string>(oTable, \"metaPath\", oModifier);\n\t\tconst oTableContext: Context = oMetaModel.createBindingContext(sPath!)!;\n\t\t// If view is not provided try to get it by accessing to the parental hierarchy\n\t\t// If it doesn't work (table into an unattached OP section) get the view via the AppComponent\n\t\tconst view =\n\t\t\tmPropertyBag.view ||\n\t\t\tCommonUtils.getTargetView(oTable as UI5Element) ||\n\t\t\t(mPropertyBag.appComponent ? CommonUtils.getCurrentPageView(mPropertyBag.appComponent) : undefined);\n\t\t// render custom column\n\t\tif (oColumnInfo.type === \"Default\") {\n\t\t\treturn this._templateCustomColumnFragment(oColumnInfo as CustomBasedTableColumn, view, oModifier, sTableId, oTableContext);\n\t\t}\n\n\t\tif (oColumnInfo.type === \"Slot\") {\n\t\t\treturn this._templateSlotColumnFragment(oColumnInfo as CustomElement<CustomBasedTableColumn>, view, oModifier, sTableId);\n\t\t}\n\n\t\tif (oColumnInfo.type === \"Computed\") {\n\t\t\tconst enableAnalytics = ((oTable as MDCTable).getParent() as TableAPI).getTableDefinition().enableAnalytics;\n\t\t\treturn getComputedColumn(sTableId, oColumnInfo as ComputedTableColumn, oTableContext, enableAnalytics);\n\t\t}\n\n\t\t// fall-back\n\t\tif (!oMetaModel) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\tconst sEntityTypePath = await DelegateUtil.getCustomDataWithModifier<string>(oTable, \"entityType\", oModifier);\n\t\tconst sRetrievedGroupId = await DelegateUtil.getCustomDataWithModifier<string>(oTable, \"requestGroupId\", oModifier);\n\t\tconst sGroupId: string | undefined = this._getGroupId(sRetrievedGroupId!);\n\n\t\tconst aFetchedProperties = await this._getCachedOrFetchPropertiesForEntity(\n\t\t\toTable as Table,\n\t\t\tsEntityTypePath!,\n\t\t\toMetaModel,\n\t\t\tmPropertyBag.appComponent\n\t\t);\n\t\tconst oPropertyInfo = aFetchedProperties.find(function (oInfo: PropertyInfo) {\n\t\t\treturn oInfo.name === sPropertyInfoName;\n\t\t});\n\n\t\tconst oPropertyContext: Context = oMetaModel.createBindingContext(oPropertyInfo!.metadataPath!)!;\n\t\tconst aVHProperties = this._getVHRelevantFields(oMetaModel, oPropertyInfo!.metadataPath!, sPath);\n\t\tconst oParameters = {\n\t\t\tsBindingPath: sPath!,\n\t\t\tsValueHelpType: \"TableValueHelp\",\n\t\t\toControl: oTable,\n\t\t\tmetaPath: oPropertyContext.getPath(),\n\t\t\toMetaModel,\n\t\t\toModifier,\n\t\t\toPropertyInfo\n\t\t};\n\n\t\tconst fnTemplateValueHelp = async (sFragmentName: string): Promise<void> => {\n\t\t\tconst oThis = new JSONModel({\n\t\t\t\t\tid: sTableId,\n\t\t\t\t\trequestGroupId: sGroupId\n\t\t\t\t}),\n\t\t\t\toPreprocessorSettings = {\n\t\t\t\t\tbindingContexts: {\n\t\t\t\t\t\tthis: oThis.createBindingContext(\"/\"),\n\t\t\t\t\t\tdataField: oPropertyContext,\n\t\t\t\t\t\tcontextPath: oTableContext\n\t\t\t\t\t},\n\t\t\t\t\tmodels: {\n\t\t\t\t\t\tthis: oThis,\n\t\t\t\t\t\tdataField: oMetaModel,\n\t\t\t\t\t\tmetaModel: oMetaModel,\n\t\t\t\t\t\tcontextPath: oMetaModel\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tconst oValueHelp = await DelegateUtil.templateControlFragment(sFragmentName, oPreprocessorSettings, {}, oModifier);\n\t\t\t\treturn await this._insertAggregation(oValueHelp, oModifier, oTable);\n\t\t\t} catch (oError) {\n\t\t\t\t//We always resolve the promise to ensure that the app does not crash\n\t\t\t\tLog.error(`ValueHelp not loaded : ${(oError as Error).message}`);\n\t\t\t\treturn;\n\t\t\t} finally {\n\t\t\t\toThis.destroy();\n\t\t\t}\n\t\t};\n\n\t\tconst fnTemplateFragment = async (\n\t\t\toInPropertyInfo: unknown,\n\t\t\toView: FEView\n\t\t): Promise<UI5Element | Element | UI5Element[] | Element[]> => {\n\t\t\tlet bDisplayMode: boolean | undefined;\n\t\t\tlet sTableTypeCustomData: string | undefined;\n\t\t\tlet sOnChangeCustomData: string | undefined;\n\t\t\tlet sCreationModeCustomData: string | undefined;\n\n\t\t\treturn Promise.all([\n\t\t\t\tDelegateUtil.getCustomDataWithModifier<string | boolean>(oTable, \"displayModePropertyBinding\", oModifier),\n\t\t\t\tDelegateUtil.getCustomDataWithModifier<string>(oTable, \"tableType\", oModifier),\n\t\t\t\tDelegateUtil.getCustomDataWithModifier<string>(oTable, \"onChange\", oModifier),\n\t\t\t\tDelegateUtil.getCustomDataWithModifier<string>(oTable, \"creationMode\", oModifier)\n\t\t\t]).then(async (aCustomData: (string | boolean | undefined)[]) => {\n\t\t\t\tbDisplayMode = aCustomData[0] as boolean | undefined;\n\t\t\t\tsTableTypeCustomData = aCustomData[1] as string | undefined;\n\t\t\t\tsOnChangeCustomData = aCustomData[2] as string | undefined;\n\t\t\t\tsCreationModeCustomData = aCustomData[3] as string | undefined;\n\t\t\t\t// Read Only and Column Edit Mode can both have three state\n\t\t\t\t// Undefined means that the framework decides what to do\n\t\t\t\t// True / Display means always read only\n\t\t\t\t// False / Editable means editable but while still respecting the low level principle (immutable property will not be editable)\n\t\t\t\tif (bDisplayMode !== undefined && typeof bDisplayMode !== \"boolean\") {\n\t\t\t\t\tbDisplayMode = bDisplayMode === \"true\";\n\t\t\t\t}\n\n\t\t\t\tconst tableAPI = (oTable as Table).getParent() as TableAPI;\n\t\t\t\tconst oThis = new JSONModel({\n\t\t\t\t\t\tenableAutoColumnWidth: tableAPI.enableAutoColumnWidth,\n\t\t\t\t\t\treadOnly: bDisplayMode,\n\t\t\t\t\t\ttableType: sTableTypeCustomData,\n\t\t\t\t\t\tonChange: sOnChangeCustomData as unknown as Function,\n\t\t\t\t\t\tid: sTableId,\n\t\t\t\t\t\tnavigationPropertyPath: sPropertyInfoName,\n\t\t\t\t\t\tcolumnInfo: oColumnInfo,\n\t\t\t\t\t\tcollection: oMetaModel.createBindingContext(sPath!),\n\t\t\t\t\t\tcreationMode: { name: sCreationModeCustomData },\n\t\t\t\t\t\twidthIncludingColumnHeader: tableAPI.widthIncludingColumnHeader\n\t\t\t\t\t}),\n\t\t\t\t\toPreprocessorSettings = {\n\t\t\t\t\t\tbindingContexts: {\n\t\t\t\t\t\t\tentitySet: oTableContext,\n\t\t\t\t\t\t\tcollection: oTableContext,\n\t\t\t\t\t\t\tdataField: oPropertyContext,\n\t\t\t\t\t\t\tthis: oThis.createBindingContext(\"/\"),\n\t\t\t\t\t\t\tcolumn: oThis.createBindingContext(\"/columnInfo\")\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmodels: {\n\t\t\t\t\t\t\tthis: oThis,\n\t\t\t\t\t\t\tentitySet: oMetaModel,\n\t\t\t\t\t\t\tcollection: oMetaModel,\n\t\t\t\t\t\t\tdataField: oMetaModel,\n\t\t\t\t\t\t\tmetaModel: oMetaModel,\n\t\t\t\t\t\t\tcolumn: oThis\n\t\t\t\t\t\t},\n\t\t\t\t\t\tappComponent: mPropertyBag.appComponent\n\t\t\t\t\t};\n\t\t\t\tconst computedColumnXML = new DOMParser().parseFromString(\n\t\t\t\t\tjsx.renderAsXML(() => {\n\t\t\t\t\t\treturn (getColumnTemplate(\n\t\t\t\t\t\t\tsTableId,\n\t\t\t\t\t\t\ttableAPI.getTableDefinition(),\n\t\t\t\t\t\t\toColumnInfo as AnnotationTableColumn,\n\t\t\t\t\t\t\toMetaModel.createBindingContext(sPath!)!,\n\t\t\t\t\t\t\tbDisplayMode,\n\t\t\t\t\t\t\ttableAPI.enableAutoColumnWidth,\n\t\t\t\t\t\t\ttableAPI.widthIncludingColumnHeader,\n\t\t\t\t\t\t\ttableAPI.getTableDefinition().enableAnalytics,\n\t\t\t\t\t\t\tsTableTypeCustomData as TableType,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: sCreationModeCustomData as \"NewPage\" | \"Inline\" | \"InlineCreationRows\" | \"External\" | \"CreationDialog\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\tsOnChangeCustomData,\n\t\t\t\t\t\t\ttableAPI.getTableDefinition().control.isCompactType,\n\t\t\t\t\t\t\t\"\"\n\t\t\t\t\t\t) ?? \"\") as unknown as string;\n\t\t\t\t\t}),\n\t\t\t\t\t\"text/xml\"\n\t\t\t\t);\n\t\t\t\treturn DelegateUtil.templateControlFragment(\n\t\t\t\t\tcomputedColumnXML.firstElementChild,\n\t\t\t\t\toPreprocessorSettings,\n\t\t\t\t\t{ view: oView },\n\t\t\t\t\toModifier\n\t\t\t\t).finally(function () {\n\t\t\t\t\toThis.destroy();\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\n\t\tawait Promise.all(\n\t\t\taVHProperties.map(async (sPropertyName: string) => {\n\t\t\t\tconst mParameters = Object.assign({}, oParameters, { sPropertyName: sPropertyName });\n\n\t\t\t\tconst aResults = await Promise.all([\n\t\t\t\t\tDelegateUtil.isValueHelpRequired(mParameters),\n\t\t\t\t\tDelegateUtil.doesValueHelpExist(mParameters)\n\t\t\t\t]);\n\n\t\t\t\tconst bValueHelpRequired = aResults[0],\n\t\t\t\t\tbValueHelpExists = aResults[1];\n\t\t\t\treturn this._fnTemplateValueHelp(fnTemplateValueHelp, bValueHelpRequired, bValueHelpExists);\n\t\t\t})\n\t\t);\n\t\treturn fnTemplateFragment(oPropertyInfo, view);\n\t},\n\n\t/**\n\t * Provide the Table's filter delegate to provide basic filter functionality such as adding FilterFields.\n\t * @returns Object for the Tables filter personalization.\n\t */\n\tgetFilterDelegate: function () {\n\t\treturn Object.assign(\n\t\t\t{\n\t\t\t\tapiVersion: 2\n\t\t\t},\n\t\t\tFilterBarDelegate,\n\t\t\t{\n\t\t\t\taddItem: async function (oParentControl: Control, sPropertyInfoName: string) {\n\t\t\t\t\tif (sPropertyInfoName.indexOf(\"Property::\") === 0) {\n\t\t\t\t\t\t// Correct the name of complex property info references.\n\t\t\t\t\t\tsPropertyInfoName = sPropertyInfoName.replace(\"Property::\", \"\");\n\t\t\t\t\t}\n\t\t\t\t\treturn FilterBarDelegate.addItem(oParentControl as FilterBar, sPropertyInfoName);\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t},\n\n\t/**\n\t * Returns the TypeMap attached to this delegate.\n\t * @returns Any instance of TypeMap\n\t */\n\tgetTypeMap: function (/*oPayload: object*/) {\n\t\treturn TypeMap;\n\t},\n\n\t/**\n\t * Format the title of the group header .\n\t * @param table Instance of table control\n\t * @param context Context\n\t * @param property Name of the property\n\t * @returns Formatted title of the group header.\n\t */\n\tformatGroupHeader(table: MDCTable, context: ODataV4Context, property: string) {\n\t\tconst formatInfos = DelegateUtil.getCachedProperties(table),\n\t\t\tformatInfo = formatInfos?.find((obj: PropertyInfo) => {\n\t\t\t\treturn obj.name === property;\n\t\t\t}),\n\t\t\t/*For a Date, DateTime or Boolean property, the value is returned in external format using a UI5 type for the\n\t        given property path that formats corresponding to the property's EDM type and constraints*/\n\t\t\texternalFormat =\n\t\t\t\tformatInfo?.typeConfig?.baseType === \"DateTime\" ||\n\t\t\t\tformatInfo?.typeConfig?.baseType === \"Date\" ||\n\t\t\t\tformatInfo?.typeConfig?.baseType === \"Boolean\";\n\t\tlet value;\n\t\tif (!context) {\n\t\t\tvalue = getResourceModel(CommonUtils.getTargetView(table)).getText(\"M_TABLE_GROUP_HEADER_TITLE_VALUE\");\n\t\t\treturn getResourceModel(table).getText(\"M_TABLE_GROUP_HEADER_TITLE\", [formatInfo?.label, value]);\n\t\t}\n\t\tif (formatInfo?.mode) {\n\t\t\tswitch (formatInfo.mode) {\n\t\t\t\tcase \"Description\":\n\t\t\t\t\tvalue = formatInfo.descriptionProperty ? context.getProperty(formatInfo.descriptionProperty, externalFormat) : null;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"DescriptionValue\":\n\t\t\t\t\tvalue = ValueFormatter.formatWithBrackets(\n\t\t\t\t\t\tformatInfo.descriptionProperty ? context.getProperty(formatInfo.descriptionProperty, externalFormat) : null,\n\t\t\t\t\t\tformatInfo.valueProperty ? context.getProperty(formatInfo.valueProperty, externalFormat) : null\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"ValueDescription\":\n\t\t\t\t\tvalue = ValueFormatter.formatWithBrackets(\n\t\t\t\t\t\tformatInfo.valueProperty ? context.getProperty(formatInfo.valueProperty, externalFormat) : null,\n\t\t\t\t\t\tformatInfo.descriptionProperty ? context.getProperty(formatInfo.descriptionProperty, externalFormat) : null\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = formatInfo?.path ? context.getProperty(formatInfo.path, externalFormat) : null;\n\t\t}\n\t\tif (value === null || value === \"\") {\n\t\t\tvalue = getResourceModel(CommonUtils.getTargetView(table)).getText(\"M_TABLE_GROUP_HEADER_TITLE_VALUE\");\n\t\t}\n\t\treturn getResourceModel(table).getText(\"M_TABLE_GROUP_HEADER_TITLE\", [formatInfo?.label, value]);\n\t}\n});\n"],"mappings":"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","ignoreList":[]}