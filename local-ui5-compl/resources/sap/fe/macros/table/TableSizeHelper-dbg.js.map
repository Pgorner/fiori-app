{"version":3,"names":["TableSizeHelper","getMDCColumnWidthFromDataField","dataField","properties","convertedMetaData","widthIncludingColumnHeader","arguments","length","undefined","property","find","prop","metadataPath","resolvePath","target","fullyQualifiedName","getMDCColumnWidthFromProperty","isSortableColumn","isColumnRequired","mWidthCalculation","Object","assign","headerGap","gap","truncateLabel","excludeProperties","required","visualSettings","widthCalculation","types","propertyInfos","map","propName","_property","name","typeConfig","typeInstance","filter","item","sSize","TableUtil","calcColumnWidth","label","Log","error","parseFloat","replace","getWidthForDataFieldForAnnotation","showDataFieldsLabel","oTargetedProperty","isAnnotationOfType","Target","$target","nPropertyWidth","fLabelWidth","Visualization","nbStars","TargetValue","parseInt","sLabel","Label","toString","SizeHelper","getButtonWidth","isPathAnnotationExpression","fn","labelWidth","propertyWidth","getWidthForDataField","Value","oTextArrangementTarget","annotations","Common","Text","displayMode","getDisplayMode","$Type"],"sourceRoot":".","sources":["TableSizeHelper.ts"],"sourcesContent":["import type { Property, ServiceObject } from \"@sap-ux/vocabularies-types\";\nimport type { ConvertedMetadata } from \"@sap-ux/vocabularies-types/Edm\";\nimport type { ContactType } from \"@sap-ux/vocabularies-types/vocabularies/Communication\";\nimport { CommunicationAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/Communication\";\nimport type {\n\tDataField,\n\tDataFieldForAction,\n\tDataFieldForAnnotation,\n\tDataFieldForIntentBasedNavigation,\n\tDataPointType\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport SizeHelper from \"sap/fe/core/helpers/SizeHelper\";\nimport { isAnnotationOfType, isPathAnnotationExpression } from \"sap/fe/core/helpers/TypeGuards\";\nimport { getDisplayMode } from \"sap/fe/core/templating/DisplayModeFormatter\";\nimport type { PropertyInfo } from \"sap/fe/macros/DelegateUtil\";\nimport TableUtil from \"sap/m/table/Util\";\n\nconst TableSizeHelper = {\n\t/**\n\t * Method to calculate the width of the MDCColumn.\n\t * @param dataField The Property or PropertyInfo Object for which the width will be calculated.\n\t * @param properties An array containing all property definitions (optional)\n\t * @param convertedMetaData\n\t * @param widthIncludingColumnHeader Indicates if the label should be a part of the width calculation\n\t * @private\n\t * @alias sap.fe.macros.TableSizeHelper\n\t * @returns The width of the column.\n\t */\n\tgetMDCColumnWidthFromDataField: function (\n\t\tdataField: DataField | Property | undefined,\n\t\tproperties: PropertyInfo[],\n\t\tconvertedMetaData: ConvertedMetadata,\n\t\twidthIncludingColumnHeader = false\n\t): number {\n\t\tconst property = properties.find(\n\t\t\t(prop) =>\n\t\t\t\tprop.metadataPath &&\n\t\t\t\tconvertedMetaData.resolvePath<ServiceObject>(prop.metadataPath)?.target?.fullyQualifiedName ===\n\t\t\t\t\tdataField?.fullyQualifiedName\n\t\t);\n\t\treturn property ? this.getMDCColumnWidthFromProperty(property, properties, widthIncludingColumnHeader) : 0;\n\t},\n\n\t/**\n\t *  Method to calculate the width of the MDCColumn.\n\t * @param property The PropertyInfo object for which the width is calculated\n\t * @param properties  An array containing all property definitions (optional)\n\t * @param widthIncludingColumnHeader Indicates if the label is part of the width calculation\n\t * @param isSortableColumn Indicates if the column is sortable\n\t * @param isColumnRequired Indicates if the column is required\n\t * @returns The width of the column.\n\t */\n\tgetMDCColumnWidthFromProperty: function (\n\t\tproperty: PropertyInfo,\n\t\tproperties: PropertyInfo[],\n\t\twidthIncludingColumnHeader = false,\n\t\tisSortableColumn = false,\n\t\tisColumnRequired = false\n\t): number {\n\t\tconst mWidthCalculation = Object.assign(\n\t\t\t{\n\t\t\t\theaderGap: widthIncludingColumnHeader && isSortableColumn,\n\t\t\t\tgap: 0,\n\t\t\t\ttruncateLabel: !widthIncludingColumnHeader,\n\t\t\t\texcludeProperties: [],\n\t\t\t\trequired: isColumnRequired\n\t\t\t},\n\t\t\tproperty.visualSettings?.widthCalculation\n\t\t);\n\n\t\tlet types;\n\n\t\tif (property.propertyInfos?.length) {\n\t\t\ttypes = property.propertyInfos\n\t\t\t\t.map((propName) => {\n\t\t\t\t\tconst prop = properties.find((_property) => _property.name === propName);\n\t\t\t\t\treturn prop?.typeConfig?.typeInstance;\n\t\t\t\t})\n\t\t\t\t.filter((item) => item);\n\t\t} else if (property?.typeConfig?.typeInstance) {\n\t\t\ttypes = [property?.typeConfig.typeInstance];\n\t\t}\n\t\tconst sSize = types ? TableUtil.calcColumnWidth(types, property.label, mWidthCalculation) : null;\n\t\tif (!sSize) {\n\t\t\tLog.error(`Cannot compute the column width for property: ${property.name}`);\n\t\t}\n\t\treturn sSize ? parseFloat(sSize.replace(\"Rem\", \"\")) : 0;\n\t},\n\n\t/**\n\t * Method to calculate the  width of a DataFieldAnnotation object contained in a fieldGroup.\n\t * @param dataField DataFieldAnnotation object.\n\t * @param widthIncludingColumnHeader Indicates if the column header should be a part of the width calculation.\n\t * @param properties Array containing all PropertyInfo objects.\n\t * @param convertedMetaData\n\t * @param showDataFieldsLabel Label is displayed inside the field\n\t * @private\n\t * @alias sap.fe.macros.TableSizeHelper\n\t * @returns Object containing the width of the label and the width of the property.\n\t */\n\tgetWidthForDataFieldForAnnotation: function (\n\t\tdataField: DataFieldForAnnotation | DataFieldForAction | DataFieldForIntentBasedNavigation | undefined,\n\t\twidthIncludingColumnHeader?: boolean,\n\t\tproperties?: PropertyInfo[],\n\t\tconvertedMetaData?: ConvertedMetadata,\n\t\tshowDataFieldsLabel = false\n\t): { labelWidth: number; propertyWidth: number } {\n\t\tconst oTargetedProperty = isAnnotationOfType<DataFieldForAnnotation>(dataField, UIAnnotationTypes.DataFieldForAnnotation)\n\t\t\t? (dataField?.Target?.$target as DataPointType | ContactType | undefined)\n\t\t\t: undefined;\n\t\tlet nPropertyWidth = 0,\n\t\t\tfLabelWidth = 0;\n\t\tif (isAnnotationOfType<DataPointType>(oTargetedProperty, UIAnnotationTypes.DataPointType) && oTargetedProperty?.Visualization) {\n\t\t\tswitch (oTargetedProperty.Visualization) {\n\t\t\t\tcase \"UI.VisualizationType/Rating\":\n\t\t\t\t\tconst nbStars = oTargetedProperty.TargetValue;\n\t\t\t\t\tnPropertyWidth = parseInt(nbStars, 10) * 1.375;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"UI.VisualizationType/Progress\":\n\t\t\t\tdefault:\n\t\t\t\t\tnPropertyWidth = 5;\n\t\t\t}\n\t\t\tconst sLabel = oTargetedProperty ? (oTargetedProperty as { label?: string }).label : dataField?.Label?.toString() || \"\";\n\t\t\tfLabelWidth = showDataFieldsLabel && sLabel ? SizeHelper.getButtonWidth(sLabel) : 0;\n\t\t} else if (\n\t\t\tconvertedMetaData &&\n\t\t\tproperties &&\n\t\t\tisAnnotationOfType<ContactType>(oTargetedProperty, CommunicationAnnotationTypes.ContactType) &&\n\t\t\tisPathAnnotationExpression(oTargetedProperty.fn)\n\t\t) {\n\t\t\tnPropertyWidth = this.getMDCColumnWidthFromDataField(\n\t\t\t\toTargetedProperty.fn.$target,\n\t\t\t\tproperties,\n\t\t\t\tconvertedMetaData,\n\t\t\t\twidthIncludingColumnHeader\n\t\t\t);\n\t\t}\n\t\treturn { labelWidth: fLabelWidth, propertyWidth: nPropertyWidth };\n\t},\n\n\t/**\n\t * Method to calculate the width of a DataField object.\n\t * @param dataField DataFieldAnnotation object.\n\t * @param showDataFieldsLabel Label is displayed inside the field.\n\t * @param properties Array containing all PropertyInfo objects.\n\t * @param convertedMetaData Context Object of the parent property.\n\t * @private\n\t * @alias sap.fe.macros.TableSizeHelper\n\t * @returns {object} Object containing the width of the label and the width of the property.\n\t */\n\n\tgetWidthForDataField: function (\n\t\tdataField: DataField,\n\t\tshowDataFieldsLabel: boolean,\n\t\tproperties: PropertyInfo[],\n\t\tconvertedMetaData: ConvertedMetadata,\n\t\twidthIncludingColumnHeader: boolean\n\t): { labelWidth: number; propertyWidth: number } {\n\t\tconst oTargetedProperty = dataField.Value?.$target,\n\t\t\toTextArrangementTarget = oTargetedProperty?.annotations?.Common?.Text,\n\t\t\tdisplayMode = getDisplayMode(dataField.Value?.$target);\n\n\t\tlet nPropertyWidth = 0,\n\t\t\tfLabelWidth = 0;\n\t\tif (oTargetedProperty) {\n\t\t\tswitch (displayMode) {\n\t\t\t\tcase \"Description\":\n\t\t\t\t\tnPropertyWidth =\n\t\t\t\t\t\tthis.getMDCColumnWidthFromDataField(\n\t\t\t\t\t\t\toTextArrangementTarget.$target,\n\t\t\t\t\t\t\tproperties,\n\t\t\t\t\t\t\tconvertedMetaData,\n\t\t\t\t\t\t\twidthIncludingColumnHeader\n\t\t\t\t\t\t) - 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"DescriptionValue\":\n\t\t\t\tcase \"ValueDescription\":\n\t\t\t\tcase \"Value\":\n\t\t\t\tdefault:\n\t\t\t\t\tnPropertyWidth =\n\t\t\t\t\t\tthis.getMDCColumnWidthFromDataField(oTargetedProperty, properties, convertedMetaData, widthIncludingColumnHeader) -\n\t\t\t\t\t\t1;\n\t\t\t}\n\t\t\tconst sLabel = dataField.Label ? dataField.Label : oTargetedProperty.label;\n\t\t\tfLabelWidth = showDataFieldsLabel && sLabel ? SizeHelper.getButtonWidth(sLabel) : 0;\n\t\t} else {\n\t\t\tLog.error(`Cannot compute width for type object: ${dataField.$Type}`);\n\t\t}\n\t\treturn { labelWidth: fLabelWidth, propertyWidth: nPropertyWidth };\n\t}\n};\n\nexport default TableSizeHelper;\n"],"mappings":"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","ignoreList":[],"file":"TableSizeHelper-dbg.js"}