{"version":3,"file":"TableFullScreenButton.js","names":["TableFullScreenButton","_dec","defineUI5Class","_dec2","property","type","_class","_class2","_BuildingBlock","properties","others","_this","call","this","_initializerDefineProperty","_descriptor","tablePlaceHolderPanel","Panel","data","_exports","_inheritsLoose","_proto","prototype","getTableAPI","tableAPI","currentControl","content","getParent","isA","onMetadataAvailable","initializeContent","afterDialogOpen","focus","beforeDialogClose","setFullScreenDialog","undefined","restoreNormalState","afterDialogClose","fullScreenDialog","destroy","component","Component","getOwnerComponentFor","appComponent","getRootViewController","_scrollTablesToLastNavigatedItems","createDialog","endButton","_jsx","Button","text","resourceModel","getText","ButtonType","Transparent","press","close","newDialog","Dialog","showHeader","stretch","afterOpen","bind","beforeClose","afterClose","Page","setIcon","setTooltip","getTableDefinition","control","rowCountMode","getContent","getType","setRowCountMode","aggregation","originalTableParent","getAggregation","originalAggregationName","Array","isArray","removeAggregation","addAggregation","setAggregation","onFullScreenToggle","async","JsControlTreeModifier","getParentAggregationName","addDependent","addContent","open","getResourceModel","id","createId","tooltip","icon","visible","enabled","BuildingBlock","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer"],"sources":["./TableFullScreenButton.tsx"],"sourcesContent":["import { defineUI5Class, property, type PropertiesOf } from \"sap/fe/base/ClassSupport\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport type ResourceModel from \"sap/fe/core/ResourceModel\";\nimport BuildingBlock from \"sap/fe/core/buildingBlocks/BuildingBlock\";\nimport { ButtonType } from \"sap/fe/core/converters/controls/Common/Action\";\nimport { getResourceModel } from \"sap/fe/core/helpers/ResourceModelHelper\";\nimport type TableAPI from \"sap/fe/macros/table/TableAPI\";\nimport Button from \"sap/m/Button\";\nimport Dialog from \"sap/m/Dialog\";\nimport Page from \"sap/m/Page\";\nimport Panel from \"sap/m/Panel\";\nimport Component from \"sap/ui/core/Component\";\nimport type Control from \"sap/ui/core/Control\";\nimport { JsControlTreeModifier } from \"sap/ui/core/util/reflection\";\nimport { type $ControlSettings } from \"sap/ui/mdc/Control\";\nimport type GridTableType from \"sap/ui/mdc/table/GridTableType\";\nimport type TreeTableType from \"sap/ui/mdc/table/TreeTableType\";\n\n@defineUI5Class(\"sap.fe.macros.table.TableFullScreenButton\")\nexport default class TableFullScreenButton extends BuildingBlock<Button> {\n\t@property({ type: \"string\" })\n\tid!: string;\n\n\tprotected tableAPI?: TableAPI;\n\n\tprotected fullScreenDialog?: Dialog;\n\n\tprotected originalTableParent?: Control;\n\n\tprotected originalAggregationName?: string;\n\n\tprotected tablePlaceHolderPanel: Panel;\n\n\tprotected resourceModel!: ResourceModel;\n\n\tconstructor(properties: $ControlSettings & PropertiesOf<TableFullScreenButton>, others?: $ControlSettings) {\n\t\tsuper(properties, others);\n\n\t\tthis.tablePlaceHolderPanel = new Panel();\n\t\tthis.tablePlaceHolderPanel.data(\"FullScreenTablePlaceHolder\", true);\n\t}\n\n\tprotected getTableAPI(): TableAPI {\n\t\tif (!this.tableAPI) {\n\t\t\tlet currentControl = this.content as Control;\n\t\t\tdo {\n\t\t\t\tcurrentControl = currentControl.getParent() as Control;\n\t\t\t} while (!currentControl.isA(\"sap.fe.macros.table.TableAPI\"));\n\t\t\tthis.tableAPI = currentControl as TableAPI;\n\t\t\treturn this.tableAPI;\n\t\t} else {\n\t\t\treturn this.tableAPI;\n\t\t}\n\t}\n\n\t/**\n\t * Handler for the onMetadataAvailable event.\n\t */\n\tonMetadataAvailable(): void {\n\t\tif (!this.content) {\n\t\t\tthis.initializeContent();\n\t\t}\n\t}\n\n\t/**\n\t * Set the focus back to the full screen button after opening the dialog.\n\t */\n\tprivate afterDialogOpen(): void {\n\t\tthis.content?.focus();\n\t}\n\n\t/**\n\t * Handle dialog close via Esc, navigation etc.\n\t */\n\tprivate beforeDialogClose(): void {\n\t\tthis.getTableAPI().setFullScreenDialog(undefined);\n\t\tthis.restoreNormalState();\n\t}\n\n\t/**\n\t * Some follow up after closing the dialog.\n\t */\n\tprivate afterDialogClose(): void {\n\t\tthis.fullScreenDialog?.destroy();\n\t\tthis.fullScreenDialog = undefined;\n\n\t\tconst component = Component.getOwnerComponentFor(this.getTableAPI())!;\n\t\tconst appComponent = Component.getOwnerComponentFor(component) as AppComponent;\n\t\tthis.content?.focus();\n\t\t// trigger the automatic scroll to the latest navigated row :\n\t\tappComponent?.getRootViewController()._scrollTablesToLastNavigatedItems();\n\t}\n\n\t/**\n\t * Create the full screen dialog.\n\t * @returns The new dialog\n\t */\n\tprivate createDialog(): Dialog {\n\t\tconst endButton = (\n\t\t\t<Button\n\t\t\t\ttext={this.resourceModel.getText(\"M_COMMON_TABLE_FULLSCREEN_CLOSE\")}\n\t\t\t\ttype={ButtonType.Transparent}\n\t\t\t\tpress={(): void => {\n\t\t\t\t\t// Just close the dialog here, all the needed processing is triggered\n\t\t\t\t\t// in beforeClose.\n\t\t\t\t\t// This ensures, that we only do it once event if the user presses the\n\t\t\t\t\t// ESC key and the Close button simultaneously\n\t\t\t\t\tthis.fullScreenDialog?.close();\n\t\t\t\t}}\n\t\t\t/>\n\t\t);\n\n\t\tconst newDialog = (\n\t\t\t<Dialog\n\t\t\t\tshowHeader={false}\n\t\t\t\tstretch={true}\n\t\t\t\tafterOpen={this.afterDialogOpen.bind(this)}\n\t\t\t\tbeforeClose={this.beforeDialogClose.bind(this)}\n\t\t\t\tafterClose={this.afterDialogClose.bind(this)}\n\t\t\t\tendButton={endButton}\n\t\t\t\tcontent={<Page />}\n\t\t\t/>\n\t\t);\n\n\t\t// The below is needed for correctly setting the focus after adding a new row in\n\t\t// the table in fullscreen mode\n\t\tnewDialog.data(\"FullScreenDialog\", true);\n\n\t\treturn newDialog;\n\t}\n\n\t/**\n\t * Restores the table to its \"normal\" state (non fullscreen).\n\t * Changes the button icon and text and moves the table back to its original place.\n\t */\n\tprivate restoreNormalState(): void {\n\t\t// change the button icon and text\n\t\tthis.content?.setIcon(\"sap-icon://full-screen\");\n\t\tthis.content?.setTooltip(this.resourceModel.getText(\"M_COMMON_TABLE_FULLSCREEN_MAXIMIZE\"));\n\n\t\t//set the rowCountMode to the initial value (if it was set in the manifest)\n\t\tif (\n\t\t\tthis.getTableAPI().getTableDefinition().control.type === \"GridTable\" ||\n\t\t\t(this.getTableAPI().getTableDefinition().control.type === \"TreeTable\" &&\n\t\t\t\tthis.getTableAPI().getTableDefinition().control.rowCountMode)\n\t\t) {\n\t\t\t(this.getTableAPI().getContent().getType() as GridTableType).setRowCountMode(\n\t\t\t\tthis.getTableAPI().getTableDefinition().control.rowCountMode\n\t\t\t);\n\t\t}\n\n\t\t// Move the table back to the old place and close the dialog\n\t\tconst aggregation = this.originalTableParent!.getAggregation(this.originalAggregationName!);\n\t\tif (Array.isArray(aggregation)) {\n\t\t\tthis.originalTableParent!.removeAggregation(this.originalAggregationName!, this.tablePlaceHolderPanel);\n\t\t\tthis.originalTableParent!.addAggregation(this.originalAggregationName!, this.getTableAPI());\n\t\t} else {\n\t\t\tthis.originalTableParent!.setAggregation(this.originalAggregationName!, this.getTableAPI());\n\t\t}\n\t}\n\n\t/**\n\t * Switches the table between normal display and fullscreen.\n\t */\n\tasync onFullScreenToggle(): Promise<void> {\n\t\tif (this.fullScreenDialog) {\n\t\t\t// The dialog is open --> close it\n\t\t\tthis.fullScreenDialog.close();\n\t\t} else {\n\t\t\t// Create a new fullscreen dialog\n\n\t\t\t// change the button icon and text\n\t\t\tthis.content?.setIcon(\"sap-icon://exit-full-screen\");\n\t\t\tthis.content?.setTooltip(this.resourceModel.getText(\"M_COMMON_TABLE_FULLSCREEN_MINIMIZE\"));\n\t\t\tthis.tablePlaceHolderPanel.data(\"tableAPIreference\", this.getTableAPI());\n\n\t\t\t// Store the current location of the table to be able to move it back later\n\t\t\tthis.originalTableParent = this.getTableAPI().getParent()! as Control;\n\t\t\tthis.originalAggregationName = await JsControlTreeModifier.getParentAggregationName(this.getTableAPI());\n\n\t\t\t// Replace the current position of the table with an empty Panel as a placeholder\n\t\t\tconst aggregation = this.originalTableParent.getAggregation(this.originalAggregationName);\n\t\t\tif (Array.isArray(aggregation)) {\n\t\t\t\tthis.originalTableParent.removeAggregation(this.originalAggregationName, this.getTableAPI());\n\t\t\t\tthis.originalTableParent.addAggregation(this.originalAggregationName, this.tablePlaceHolderPanel);\n\t\t\t} else {\n\t\t\t\tthis.originalTableParent.setAggregation(this.originalAggregationName, this.tablePlaceHolderPanel);\n\t\t\t}\n\n\t\t\t// Create the full screen dialog\n\t\t\tthis.fullScreenDialog = this.createDialog();\n\t\t\t// Add the dialog as a dependent to the original parent of the table in order to not lose the context\n\t\t\tthis.originalTableParent?.addDependent(this.fullScreenDialog);\n\n\t\t\t//Ensure that the rowCountMode of the mdc table is set to \"Auto\" to avoid the table from being cut off in fullscreen mode\n\t\t\tif (\n\t\t\t\tthis.getTableAPI().getTableDefinition().control.type === \"GridTable\" ||\n\t\t\t\tthis.getTableAPI().getTableDefinition().control.type === \"TreeTable\"\n\t\t\t) {\n\t\t\t\t(this.getTableAPI().getContent().getType() as GridTableType | TreeTableType).setRowCountMode(\"Auto\");\n\t\t\t}\n\n\t\t\t// Move the table over into the content page in the dialog and open the dialog\n\t\t\t(this.fullScreenDialog.getContent()[0] as Page).addContent(this.getTableAPI());\n\t\t\tthis.fullScreenDialog.open();\n\t\t\tthis.getTableAPI().setFullScreenDialog(this.fullScreenDialog);\n\t\t}\n\t}\n\n\t/**\n\t * Created the content (i.e. the button).\n\t */\n\tprivate initializeContent(): void {\n\t\tthis.resourceModel = getResourceModel(this);\n\t\tthis.content = (\n\t\t\t<Button\n\t\t\t\tid={this.createId(\"_btn\")}\n\t\t\t\ttooltip={this.resourceModel.getText(\"M_COMMON_TABLE_FULLSCREEN_MAXIMIZE\")}\n\t\t\t\ticon={\"sap-icon://full-screen\"}\n\t\t\t\tpress={this.onFullScreenToggle.bind(this)}\n\t\t\t\ttype={\"Transparent\"}\n\t\t\t\tvisible={true}\n\t\t\t\tenabled={true}\n\t\t\t/>\n\t\t);\n\t}\n}\n"],"mappings":";;;;m7CAmBqBA,GAAqBC,EADzCC,EAAe,6CAA4CC,EAE1DC,EAAS,CAAEC,KAAM,WAAWJ,EAAAK,GAAAC,EAAA,SAAAC,GAe7B,SAAAR,EAAYS,EAAoEC,GAA2B,IAAAC,EAC1GA,EAAAH,EAAAI,KAAAC,KAAMJ,EAAYC,IAAOG,KAACC,EAAAH,EAAA,KAAAI,EAAAJ,GAE1BA,EAAKK,sBAAwB,IAAIC,EACjCN,EAAKK,sBAAsBE,KAAK,6BAA8B,MAAM,OAAAP,CACrE,CAACQ,EAAAnB,EAAAoB,EAAApB,EAAAQ,GAAA,IAAAa,EAAArB,EAAAsB,UAAAD,EAESE,YAAV,SAAUA,IACT,IAAKV,KAAKW,SAAU,CACnB,IAAIC,EAAiBZ,KAAKa,QAC1B,EAAG,CACFD,EAAiBA,EAAeE,WACjC,QAAUF,EAAeG,IAAI,iCAC7Bf,KAAKW,SAAWC,EAChB,OAAOZ,KAAKW,QACb,KAAO,CACN,OAAOX,KAAKW,QACb,CACD,EAEAH,EAGAQ,oBAAA,SAAAA,IACC,IAAKhB,KAAKa,QAAS,CAClBb,KAAKiB,mBACN,CACD,EAEAT,EAGQU,gBAAR,SAAQA,IACPlB,KAAKa,SAASM,OACf,EAEAX,EAGQY,kBAAR,SAAQA,IACPpB,KAAKU,cAAcW,oBAAoBC,WACvCtB,KAAKuB,oBACN,EAEAf,EAGQgB,iBAAR,SAAQA,IACPxB,KAAKyB,kBAAkBC,UACvB1B,KAAKyB,iBAAmBH,UAExB,MAAMK,EAAYC,EAAUC,qBAAqB7B,KAAKU,eACtD,MAAMoB,EAAeF,EAAUC,qBAAqBF,GACpD3B,KAAKa,SAASM,QAEdW,GAAcC,wBAAwBC,mCACvC,EAEAxB,EAIQyB,aAAR,SAAQA,IACP,MAAMC,EACLC,EAACC,EAAM,CACNC,KAAMrC,KAAKsC,cAAcC,QAAQ,mCACjC/C,KAAMgD,EAAWC,YACjBC,MAAOA,KAKN1C,KAAKyB,kBAAkBkB,OAAO,IAKjC,MAAMC,EACLT,EAACU,EAAM,CACNC,WAAY,MACZC,QAAS,KACTC,UAAWhD,KAAKkB,gBAAgB+B,KAAKjD,MACrCkD,YAAalD,KAAKoB,kBAAkB6B,KAAKjD,MACzCmD,WAAYnD,KAAKwB,iBAAiByB,KAAKjD,MACvCkC,UAAWA,EACXrB,QAASsB,EAACiB,EAAI,MAMhBR,EAAUvC,KAAK,mBAAoB,MAEnC,OAAOuC,CACR,EAEApC,EAIQe,mBAAR,SAAQA,IAEPvB,KAAKa,SAASwC,QAAQ,0BACtBrD,KAAKa,SAASyC,WAAWtD,KAAKsC,cAAcC,QAAQ,uCAGpD,GACCvC,KAAKU,cAAc6C,qBAAqBC,QAAQhE,OAAS,aACxDQ,KAAKU,cAAc6C,qBAAqBC,QAAQhE,OAAS,aACzDQ,KAAKU,cAAc6C,qBAAqBC,QAAQC,aAChD,CACAzD,KAAKU,cAAcgD,aAAaC,UAA4BC,gBAC5D5D,KAAKU,cAAc6C,qBAAqBC,QAAQC,aAElD,CAGA,MAAMI,EAAc7D,KAAK8D,oBAAqBC,eAAe/D,KAAKgE,yBAClE,GAAIC,MAAMC,QAAQL,GAAc,CAC/B7D,KAAK8D,oBAAqBK,kBAAkBnE,KAAKgE,wBAA0BhE,KAAKG,uBAChFH,KAAK8D,oBAAqBM,eAAepE,KAAKgE,wBAA0BhE,KAAKU,cAC9E,KAAO,CACNV,KAAK8D,oBAAqBO,eAAerE,KAAKgE,wBAA0BhE,KAAKU,cAC9E,CACD,EAEAF,EAGM8D,mBAANC,eAAMD,IACL,GAAItE,KAAKyB,iBAAkB,CAE1BzB,KAAKyB,iBAAiBkB,OACvB,KAAO,CAIN3C,KAAKa,SAASwC,QAAQ,+BACtBrD,KAAKa,SAASyC,WAAWtD,KAAKsC,cAAcC,QAAQ,uCACpDvC,KAAKG,sBAAsBE,KAAK,oBAAqBL,KAAKU,eAG1DV,KAAK8D,oBAAsB9D,KAAKU,cAAcI,YAC9Cd,KAAKgE,8BAAgCQ,EAAsBC,yBAAyBzE,KAAKU,eAGzF,MAAMmD,EAAc7D,KAAK8D,oBAAoBC,eAAe/D,KAAKgE,yBACjE,GAAIC,MAAMC,QAAQL,GAAc,CAC/B7D,KAAK8D,oBAAoBK,kBAAkBnE,KAAKgE,wBAAyBhE,KAAKU,eAC9EV,KAAK8D,oBAAoBM,eAAepE,KAAKgE,wBAAyBhE,KAAKG,sBAC5E,KAAO,CACNH,KAAK8D,oBAAoBO,eAAerE,KAAKgE,wBAAyBhE,KAAKG,sBAC5E,CAGAH,KAAKyB,iBAAmBzB,KAAKiC,eAE7BjC,KAAK8D,qBAAqBY,aAAa1E,KAAKyB,kBAG5C,GACCzB,KAAKU,cAAc6C,qBAAqBC,QAAQhE,OAAS,aACzDQ,KAAKU,cAAc6C,qBAAqBC,QAAQhE,OAAS,YACxD,CACAQ,KAAKU,cAAcgD,aAAaC,UAA4CC,gBAAgB,OAC9F,CAGC5D,KAAKyB,iBAAiBiC,aAAa,GAAYiB,WAAW3E,KAAKU,eAChEV,KAAKyB,iBAAiBmD,OACtB5E,KAAKU,cAAcW,oBAAoBrB,KAAKyB,iBAC7C,CACD,EAEAjB,EAGQS,kBAAR,SAAQA,IACPjB,KAAKsC,cAAgBuC,EAAiB7E,MACtCA,KAAKa,QACJsB,EAACC,EAAM,CACN0C,GAAI9E,KAAK+E,SAAS,QAClBC,QAAShF,KAAKsC,cAAcC,QAAQ,sCACpC0C,KAAM,yBACNvC,MAAO1C,KAAKsE,mBAAmBrB,KAAKjD,MACpCR,KAAM,cACN0F,QAAS,KACTC,QAAS,MAGZ,EAAC,OAAAhG,CAAA,CA7M4B,CADqBiG,GAAalF,EAAAmF,EAAA3F,EAAAe,UAAA,MAAAnB,GAAA,CAAAgG,aAAA,KAAAC,WAAA,KAAAC,SAAA,KAAAC,YAAA,OAAA/F,KAAAD,GAAAa,EAAAnB,EAAA,OAAAmB,CAAA","ignoreList":[]}