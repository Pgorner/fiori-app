{"version":3,"file":"QuickFilterSelector.js","names":["QuickFilterSelector","_dec","defineUI5Class","_dec2","property","type","_dec3","required","_dec4","_dec5","_dec6","event","_class","_class2","_BuildingBlock","properties","others","_this","call","this","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_exports","_inheritsLoose","_proto","prototype","onMetadataAvailable","content","initializeContent","onSelChange","e","fireEvent","getParameters","getSegmentedButtonSelector","metaContext","items","filterConfiguration","paths","map","path","index","_jsx","SegmentedButtonItem","getSelectorItemProperties","SegmentedButton","id","enabled","notEqual","pathInModel","ariaLabelledBy","getSelectorAriaLabelledById","selectionChange","bind","children","getSelectSelector","Item","Select","autoAdjustWidth","change","key","annotationPath","text","getSelectorItemText","generate","countText","dataTableModelPath","getInvolvedDataModelObjects","selectionVariant","enhanceDataModelPath","targetObject","Text","toString","showCounts","registerSideEffectForQuickFilter","metaPath","contextPath","dataVisualizationModelPath","viewEntityType","contextLocation","targetEntityType","fullyQualifiedName","tableNavigationPath","getTargetNavigationPath","selectionVariantPaths","info","sourceProperties","Set","selectionVariantPath","SelectOptions","isAnnotationOfType","forEach","selectOption","propertyPath","PropertyName","value","propertyModelPath","add","getTargetObjectPath","getAppComponent","getSideEffectsService","addControlSideEffects","Array","from","targetEntities","$NavigationPropertyPath","sourceControlId","getAccessibilityControl","textBinding","invisibleText","InvisibleText","toStatic","metaPathObject","getMetaPathObject","odataMetaModel","_getOwner","getMetaModel","createBindingContext","getPath","context","getContextPath","selector","length","addDependent","getMDCTable","mdcTable","currentControl","isA","getParent","getSelectedKey","getItems","getKey","setSelectedKey","setCountsAsLoading","quickFilterCounts","internalContext","getBindingContext","k","setProperty","counts","refreshSelectedCount","count","getRowBinding","getCount","undefined","itemIndex","findIndex","selectorItem","TableUtils","getCountFormatted","refreshUnSelectedCounts","async","Promise","resolve","table","controller","getPageController","chart","getChartControl","chartBlock","setItemCounts","itemKey","item","itemFilters","CommonUtils","getFiltersFromAnnotation","getListBindingForCount","batchGroupId","additionalFilters","baseTableFilters","chartFilter","hasSelections","getFilter","getHiddenFilters","push","bindingPromises","filter","all","error","Log","BuildingBlock","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer"],"sources":["./QuickFilterSelector.tsx"],"sourcesContent":["import type { SelectionVariant, SelectionVariantType, SelectionVariantTypeTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport { notEqual, pathInModel } from \"sap/fe/base/BindingToolkit\";\nimport { defineUI5Class, event, property, type PropertiesOf } from \"sap/fe/base/ClassSupport\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type PageController from \"sap/fe/core/PageController\";\nimport BuildingBlock from \"sap/fe/core/buildingBlocks/BuildingBlock\";\nimport { getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport type { TableFiltersConfiguration } from \"sap/fe/core/converters/controls/Common/Table\";\nimport { generate } from \"sap/fe/core/helpers/StableIdHelper\";\nimport { isAnnotationOfType } from \"sap/fe/core/helpers/TypeGuards\";\nimport { enhanceDataModelPath, getTargetNavigationPath, getTargetObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport TableUtils from \"sap/fe/macros/table/Utils\";\nimport SegmentedButton from \"sap/m/SegmentedButton\";\nimport SegmentedButtonItem from \"sap/m/SegmentedButtonItem\";\nimport Select from \"sap/m/Select\";\nimport type UI5Event from \"sap/ui/base/Event\";\nimport type Control from \"sap/ui/core/Control\";\nimport { type $ControlSettings } from \"sap/ui/core/Control\";\nimport InvisibleText from \"sap/ui/core/InvisibleText\";\nimport Item from \"sap/ui/core/Item\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type Context from \"sap/ui/model/Context\";\n\n@defineUI5Class(\"sap.fe.macros.table.QuickFilterSelector\")\nexport default class QuickFilterSelector extends BuildingBlock<SegmentedButton | Select> {\n\t@property({ type: \"string\" })\n\tid!: string;\n\n\t@property({\n\t\ttype: \"string\",\n\t\trequired: true\n\t})\n\tmetaPath!: string;\n\n\t@property({ type: \"string\" })\n\tcontextPath?: string;\n\n\t@property({ type: \"object\" })\n\tfilterConfiguration!: TableFiltersConfiguration;\n\n\t@event()\n\tselectionChange?: Function;\n\n\tprotected mdcTable?: Table;\n\n\tconstructor(properties: $ControlSettings & PropertiesOf<QuickFilterSelector>, others?: $ControlSettings) {\n\t\tsuper(properties, others);\n\t}\n\n\t/**\n\t * Handler for the onMetadataAvailable event.\n\t */\n\tonMetadataAvailable(): void {\n\t\tif (!this.content) {\n\t\t\tthis.initializeContent();\n\t\t}\n\t}\n\n\tprivate onSelChange(e: UI5Event): void {\n\t\tthis.fireEvent(\"selectionChange\", e.getParameters());\n\t}\n\n\t/**\n\t * Generates the selector as a SegmentedButton.\n\t * @param metaContext The meta context\n\t * @returns  The SegmentedButton\n\t */\n\tprivate getSegmentedButtonSelector(metaContext: Context): SegmentedButton {\n\t\tconst items = this.filterConfiguration.paths.map((path, index) => {\n\t\t\treturn (<SegmentedButtonItem {...this.getSelectorItemProperties(index, metaContext)} />) as SegmentedButtonItem;\n\t\t});\n\t\treturn (\n\t\t\t<SegmentedButton\n\t\t\t\tid={`${this.id}-content`}\n\t\t\t\tenabled={notEqual(pathInModel(\"hasPendingFilters\", \"pageInternal\"), true)}\n\t\t\t\tariaLabelledBy={[this.getSelectorAriaLabelledById()]}\n\t\t\t\tselectionChange={this.onSelChange.bind(this)}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\titems\n\t\t\t\t}}\n\t\t\t</SegmentedButton>\n\t\t);\n\t}\n\n\t/**\n\t * Generates the selector as a Select.\n\t * @param metaContext The meta context\n\t * @returns  The Select\n\t */\n\tprivate getSelectSelector(metaContext: Context): Select {\n\t\tconst items = this.filterConfiguration.paths.map((path, index) => {\n\t\t\treturn (<Item {...this.getSelectorItemProperties(index, metaContext)} />) as Item;\n\t\t});\n\t\treturn (\n\t\t\t<Select\n\t\t\t\tid={`${this.id}-content`}\n\t\t\t\tenabled={notEqual(pathInModel(\"hasPendingFilters\", \"pageInternal\"), true)}\n\t\t\t\tariaLabelledBy={[this.getSelectorAriaLabelledById()]}\n\t\t\t\tautoAdjustWidth={true}\n\t\t\t\tchange={this.onSelChange.bind(this)}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\titems\n\t\t\t\t}}\n\t\t\t</Select>\n\t\t);\n\t}\n\n\t/**\n\t * Gets the properties of the selector Item.\n\t * @param index The index of the item into the selector\n\t * @param metaContext The meta context\n\t * @returns  The properties\n\t */\n\tprivate getSelectorItemProperties(index: number, metaContext: Context): { key: string; text: string } {\n\t\treturn {\n\t\t\tkey: this.filterConfiguration.paths[index].annotationPath,\n\t\t\ttext: this.getSelectorItemText(index, metaContext)\n\t\t};\n\t}\n\n\t/**\n\t * Generates the Id of the InvisibleText control.\n\t * @returns  The Id\n\t */\n\tprivate getSelectorAriaLabelledById(): string {\n\t\treturn generate([`${this.id}-content`, \"AriaText\"]);\n\t}\n\n\t/**\n\t * Generates the text for the selector item.\n\t * @param index The index of the item into the selector\n\t * @param metaContext The meta context\n\t * @returns  The text\n\t */\n\tprivate getSelectorItemText(index: number, metaContext: Context): string {\n\t\tconst countText = ` ({internal>quickFilters/counts/${index}})`;\n\t\tconst dataTableModelPath = getInvolvedDataModelObjects(metaContext);\n\t\tconst selectionVariant = enhanceDataModelPath(dataTableModelPath, this.filterConfiguration.paths[index].annotationPath)\n\t\t\t.targetObject as SelectionVariantType | undefined;\n\t\tconst text = selectionVariant?.Text?.toString() ?? \"\";\n\t\treturn `${text}${this.filterConfiguration.showCounts ? countText : \"\"}`;\n\t}\n\n\t/**\n\t * Registers the SideEffects control that must be executed when table cells that are related to configured filter(s) change.\n\t * @param metaPath The metaPath.\n\t * @param contextPath The contextPath.\n\t */\n\tprivate registerSideEffectForQuickFilter(metaPath: Context, contextPath: Context): void {\n\t\tconst dataVisualizationModelPath = getInvolvedDataModelObjects(metaPath, contextPath);\n\t\tconst viewEntityType = dataVisualizationModelPath.contextLocation?.targetEntityType.fullyQualifiedName;\n\t\tconst tableNavigationPath = getTargetNavigationPath(dataVisualizationModelPath, true);\n\t\tconst selectionVariantPaths = this.filterConfiguration.paths.map((info) => info.annotationPath);\n\n\t\tif (tableNavigationPath && viewEntityType) {\n\t\t\tconst sourceProperties: Set<string> = new Set();\n\t\t\tfor (const selectionVariantPath of selectionVariantPaths) {\n\t\t\t\tconst selectionVariant = enhanceDataModelPath(dataVisualizationModelPath, selectionVariantPath)\n\t\t\t\t\t.targetObject as Partial<SelectionVariantTypeTypes>; // We authorize SelectionVariant without SelectOptions even if it's not compliant with vocabularies\n\t\t\t\tif (\n\t\t\t\t\tselectionVariant.SelectOptions &&\n\t\t\t\t\tisAnnotationOfType<SelectionVariant>(selectionVariant, UIAnnotationTypes.SelectionVariantType)\n\t\t\t\t) {\n\t\t\t\t\tselectionVariant.SelectOptions.forEach((selectOption) => {\n\t\t\t\t\t\tconst propertyPath = selectOption.PropertyName?.value;\n\t\t\t\t\t\tif (propertyPath) {\n\t\t\t\t\t\t\tconst propertyModelPath = enhanceDataModelPath(dataVisualizationModelPath, propertyPath);\n\t\t\t\t\t\t\tsourceProperties.add(getTargetObjectPath(propertyModelPath, true));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.getAppComponent()!\n\t\t\t\t.getSideEffectsService()\n\t\t\t\t.addControlSideEffects(viewEntityType, {\n\t\t\t\t\tsourceProperties: Array.from(sourceProperties),\n\t\t\t\t\ttargetEntities: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$NavigationPropertyPath: tableNavigationPath\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\tsourceControlId: `${this.id}-content`\n\t\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Creates the invisibleText for the accessibility compliance.\n\t * @returns  The InvisibleText\n\t */\n\tprivate getAccessibilityControl(): InvisibleText {\n\t\tconst textBinding = `{sap.fe.i18n>M_TABLE_QUICKFILTER_ARIA}`;\n\t\tconst invisibleText = (<InvisibleText text={textBinding} id={this.getSelectorAriaLabelledById()} />) as InvisibleText;\n\n\t\t//Adds the invisibleText into the static, hidden area UI area container.\n\t\tinvisibleText.toStatic();\n\t\treturn invisibleText;\n\t}\n\n\tprivate initializeContent(): void {\n\t\tconst metaPathObject = this.getMetaPathObject(this.metaPath);\n\t\tif (metaPathObject) {\n\t\t\tconst odataMetaModel = this._getOwner()?.getMetaModel();\n\t\t\tconst metaContext = odataMetaModel?.createBindingContext(metaPathObject.getPath());\n\t\t\tconst context = odataMetaModel?.createBindingContext(metaPathObject.getContextPath());\n\t\t\tif (!metaContext || !context) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.filterConfiguration.showCounts) {\n\t\t\t\tthis.registerSideEffectForQuickFilter(metaContext, context);\n\t\t\t}\n\t\t\t/**\n\t\t\t * The number of views defined for a table determines the UI control that lets users switch the table views:\n\t\t\t *  - A segmented button for a maximum of three views\n\t\t\t *  - A select control for four or more views.\n\t\t\t */\n\n\t\t\tconst selector =\n\t\t\t\tthis.filterConfiguration.paths.length > 3\n\t\t\t\t\t? this.getSelectSelector(metaContext)\n\t\t\t\t\t: this.getSegmentedButtonSelector(metaContext);\n\t\t\tselector.addDependent(this.getAccessibilityControl());\n\t\t\tthis.content = selector;\n\t\t}\n\t}\n\n\tprotected getMDCTable(): Table {\n\t\tif (!this.mdcTable) {\n\t\t\tlet currentControl: Control | undefined = this.content;\n\t\t\twhile (currentControl && !currentControl.isA<Table>(\"sap.ui.mdc.Table\")) {\n\t\t\t\tcurrentControl = currentControl.getParent() as Control | undefined;\n\t\t\t}\n\t\t\tthis.mdcTable = currentControl as Table;\n\t\t\treturn this.mdcTable;\n\t\t} else {\n\t\t\treturn this.mdcTable;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the key of the selected item (or the key of the first item if there's no selection).\n\t * @returns The selected key\n\t */\n\tgetSelectedKey(): string {\n\t\treturn this.content?.getSelectedKey() || this.content?.getItems()[0].getKey() || \"\";\n\t}\n\n\t/**\n\t * Sets the selected key.\n\t * @param key The key of the item to be selected\n\t */\n\tsetSelectedKey(key: string): void {\n\t\tthis.content?.setSelectedKey(key);\n\t}\n\n\t/**\n\t * Sets the count in a pending state.\n\t */\n\tsetCountsAsLoading(): void {\n\t\tconst quickFilterCounts = {} as Record<string, string>;\n\t\tconst internalContext = this.getBindingContext(\"internal\") as Context;\n\n\t\tfor (const k in this.content?.getItems()) {\n\t\t\tquickFilterCounts[k] = \"...\";\n\t\t}\n\t\tinternalContext.setProperty(\"quickFilters\", { counts: quickFilterCounts });\n\t}\n\n\t/**\n\t * Updates the count of the selected item.\n\t */\n\trefreshSelectedCount(): void {\n\t\tconst count = this.getMDCTable().getRowBinding().getCount();\n\n\t\tif (this.filterConfiguration?.showCounts === true && count !== undefined) {\n\t\t\tconst itemIndex = this.content?.getItems().findIndex((selectorItem) => selectorItem.getKey() === this.getSelectedKey());\n\t\t\tif (itemIndex !== undefined && itemIndex > -1) {\n\t\t\t\tthis.getBindingContext(\"internal\")?.setProperty(`quickFilters/counts/${itemIndex}`, TableUtils.getCountFormatted(count));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Updates the counts of the unselected items.\n\t * @returns  Promise resolves once the count are updated\n\t */\n\tasync refreshUnSelectedCounts(): Promise<void> {\n\t\tif (!this.content) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\tconst table = this.getMDCTable();\n\t\tconst items = this.content.getItems();\n\t\tconst internalContext = this.getBindingContext(\"internal\") as Context;\n\t\tconst controller = this.getPageController();\n\t\tconst chart = (controller as PageController & { getChartControl?: Function }).getChartControl?.();\n\t\tconst chartBlock = chart?.getParent();\n\n\t\tconst setItemCounts = async (item: Item): Promise<void> => {\n\t\t\tconst itemKey = item.getKey();\n\t\t\tconst itemFilters = CommonUtils.getFiltersFromAnnotation(table, itemKey);\n\t\t\tconst count = await TableUtils.getListBindingForCount(table, table.getBindingContext(), {\n\t\t\t\tbatchGroupId: \"$auto\",\n\t\t\t\tadditionalFilters: [...baseTableFilters, ...itemFilters]\n\t\t\t});\n\t\t\tconst itemIndex = items.findIndex((selectorItem) => selectorItem.getKey() === itemKey);\n\t\t\tif (itemIndex > -1) {\n\t\t\t\tinternalContext.setProperty(`quickFilters/counts/${itemIndex}`, TableUtils.getCountFormatted(count));\n\t\t\t}\n\t\t};\n\n\t\tconst chartFilter = chartBlock?.hasSelections() && chartBlock?.getFilter();\n\t\tconst baseTableFilters = TableUtils.getHiddenFilters(table);\n\t\tif (chartFilter) {\n\t\t\tbaseTableFilters.push(chartFilter);\n\t\t}\n\t\tconst bindingPromises = items.filter((item) => item.getKey() !== this.getSelectedKey()).map(async (item) => setItemCounts(item));\n\t\ttry {\n\t\t\tawait Promise.all(bindingPromises);\n\t\t} catch (error: unknown) {\n\t\t\tLog.error(\"Error while retrieving the binding promises\", error as string);\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]}