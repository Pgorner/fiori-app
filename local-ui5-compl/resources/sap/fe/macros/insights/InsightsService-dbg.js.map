{"version":3,"names":["MAX_TABLE_RECORDS","SERVICE_HOST","isAnalytical","type","content","getCardData","_ref","requestParameters","queryUrl","includes","serviceUrl","split","request","url","method","headers","batch","response","Accept","getCardHeader","insightsParams","cardHeader","title","cardTitle","actions","parameters","status","text","getActionObject","navTarget","actionParams","ibnTarget","intent","ibnParams","sensitiveProps","nhHybridIAppStateKey","iAppStateKey","JSON","stringify","getCardConfigParameters","mandatoryFilters","filters","navigation","entitySetPath","contentUrl","sortQuery","cardConfigParams","state","value","_relevantODataFilters","_relevantODataParameters","_mandatoryODataFilters","_mandatoryODataParameters","_entitySet","_contentDataUrl","_HeaderDataUrl","_contentTopQuery","_headerTopQuery","_contentSkipQuery","_headerSkipQuery","_contentSortQuery","_headerSortQuery","filter","push","parameter","getCardConfig","cardConfiguration","destinations","service","name","defaultUrl","csrfTokens","token1","data","oDataParameters","getIntegrationCardManifest","cardConfig","configuration","header","getAnalyticalCardContent","getTableCardContent","extension","_ref2","cardContent","path","maxItems","row","highlight","rowCriticality","undefined","columns","insightsRelevantColumns","groupBy","groupConditionName","property","groupDescending","descending","group","order","dir","isNavigationEnabled","chartType","chartProperties","dimensions","measures","feeds","actionableArea","_exports","getManifestSapInsights","_ref3","parentAppManifest","ui5Version","VersionInfo","load","manifestParams","parentAppId","id","cardType","versions","ui5","version","buildTimestamp","filterEntitySet","allowedChartTypes","createCardManifest","appManifest","ui5Manifest","defaultModel","models","dataSourceService","dataSource","insightsCardManifest","Date","now","dataSources","filterService","contentDensities","dependencies","libs","lazy","componentName","showInsightsCardPreview","cardCreationDialogWarning","default","cardHelper","__ui5_require_async","cardHelperInstance","getServiceAsync","card","showCardPreview","showCollaborationManagerCardPreview","cmInstance","buttonText","Library","getResourceBundleFor","getText","event","cardManifest","getParameter","getSource","getManifest","publishCard","getCardManifest"],"sourceRoot":".","sources":["InsightsService.ts"],"sourcesContent":["import type { ContentDensitiesType } from \"sap/fe/core/converters/ManifestSettings\";\nimport type { CollaborationManagerService } from \"sap/fe/core/services/CollaborationManagerServiceFactory\";\nimport type { FilterParameterType } from \"sap/fe/macros/insights/CommonInsightsHelper\";\nimport type { CardManifest, CardMessage } from \"sap/insights/CardHelper\";\nimport VersionInfo from \"sap/ui/VersionInfo\";\nimport Library from \"sap/ui/core/Lib\";\nimport type { ManifestContent } from \"sap/ui/core/Manifest\";\nimport type {\n\tActionParams,\n\tCardConfigParameters,\n\tCardConfiguration,\n\tCardData,\n\tCardHeader,\n\tCardType,\n\tChartCardContent,\n\tTableCardColumn,\n\tTableCardContent\n} from \"sap/ui/integration/widgets/Card\";\nimport type { ParsedHash } from \"sap/ushell/services/URLParsing\";\n\nexport type ChartContent = Pick<ChartCardContent, \"dimensions\" | \"feeds\" | \"measures\" | \"chartType\" | \"chartProperties\"> & {\n\tcardTitle: string;\n\tlegendVisible: boolean;\n\tallowedChartTypes: CardManifest[\"sap.insights\"][\"allowedChartTypes\"];\n};\n\ntype InsightRequestParameters = {\n\t// all parameters related to request for the data\n\tserviceUrl: string;\n\tqueryUrl: string;\n\tgroupBy?: {\n\t\tproperty: string;\n\t\tdescending?: boolean;\n\t};\n\tsortQuery: string;\n};\n\nexport type TableContent = {\n\trowCriticality: string | undefined;\n\tcardTitle: string;\n\tinsightsRelevantColumns: TableCardColumn[];\n};\n\nexport type InsightsParams<C = TableContent | ChartContent> = {\n\tnavigation: {\n\t\tiAppStateKey: string | undefined;\n\t\tintent: ParsedHash;\n\t};\n\ttype: CardType;\n\trequestParameters: InsightRequestParameters;\n\tcontent: C;\n\tparentAppManifest: ManifestContent;\n\tparameters: {\n\t\tmandatoryFilters?: string[];\n\t\tfilters?: Record<string, FilterParameterType>;\n\t\toDataParameters?: Record<string, FilterParameterType>;\n\t\tsensitiveProperties?: string[];\n\t\tisNavigationEnabled?: boolean;\n\t};\n\tentitySetPath: string;\n};\n\nconst MAX_TABLE_RECORDS = 15;\nconst SERVICE_HOST = \"{{destinations.service}}\";\n\n/**\n * Checks whether the parameters have analytical or table content.\n * @param type Card type\n * @param content Content that is to be typed\n * @returns Type checked true if the parameters contain content for an analytical card\n */\nfunction isAnalytical(type: string, content: TableContent | ChartContent): content is ChartContent {\n\treturn type === \"Analytical\";\n}\n\n/**\n * Constructs the request object to fetch data for the insights card.\n * @param insightsParams\n * @param insightsParams.type\n * @param insightsParams.requestParameters\n * @returns The request data for the insights card.\n */\nfunction getCardData({ type, requestParameters }: InsightsParams<unknown>): CardData {\n\t// manipulate the query url based on card type and service url\n\tlet queryUrl = requestParameters.queryUrl;\n\tif (requestParameters.queryUrl.includes(requestParameters.serviceUrl)) {\n\t\tqueryUrl = requestParameters.queryUrl.split(requestParameters.serviceUrl)[1];\n\t}\n\tif (type === \"Table\") {\n\t\t// fetch only the first 15 records\n\t\tqueryUrl = `${queryUrl}&$top=${MAX_TABLE_RECORDS}`;\n\t}\n\n\treturn {\n\t\trequest: {\n\t\t\turl: `${SERVICE_HOST}${requestParameters.serviceUrl}$batch`,\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"X-CSRF-Token\": \"{{csrfTokens.token1}}\"\n\t\t\t},\n\t\t\tbatch: {\n\t\t\t\tresponse: {\n\t\t\t\t\tmethod: \"GET\",\n\t\t\t\t\turl: queryUrl,\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAccept: \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * Constructs the card header for the insights card.\n * Includes the status to be shown and the navigation action to be configured on the insights card.\n * @param insightsParams\n * @returns The card header\n */\nfunction getCardHeader(insightsParams: InsightsParams): CardHeader {\n\tconst cardHeader: CardHeader = {\n\t\ttitle: insightsParams.content.cardTitle,\n\t\tactions: [\n\t\t\t{\n\t\t\t\ttype: \"Navigation\",\n\t\t\t\tparameters: \"{= extension.formatters.getNavigationContext(${parameters>/state/value})}\"\n\t\t\t}\n\t\t]\n\t};\n\tif (insightsParams.type === \"Table\") {\n\t\tcardHeader.status = {\n\t\t\ttext: \"{/response/@odata.count}\" // number of records on LR received as part of the request\n\t\t};\n\t}\n\treturn cardHeader;\n}\n\n/**\n * Construct the action object that is required by the insights card.\n * This is used to configure the navigation from the card to the source application.\n * @param navTarget\n * @returns The action object\n */\nfunction getActionObject(navTarget: InsightsParams[\"navigation\"]): string {\n\tconst actionParams: ActionParams = {\n\t\tparameters: {\n\t\t\tibnTarget: navTarget.intent,\n\t\t\tibnParams: {\n\t\t\t\tsensitiveProps: [],\n\t\t\t\tnhHybridIAppStateKey: navTarget.iAppStateKey\n\t\t\t}\n\t\t}\n\t};\n\treturn JSON.stringify(actionParams);\n}\n\n/**\n * Construct the card configuration parameters required by the insights card.\n * This includes filters, parameters, sensitive properties and the action object for the navigation.\n * @param mandatoryFilters List of mandatory filters\n * @param filters Object containing the filters\n * @param navigation Navigation parameters\n * @param entitySetPath Entity set path\n * @param parameters Collection of parameters\n * @param contentUrl URL to fetch the content\n * @param sortQuery Sort query\n * @param type Card type\n * @returns The card configuration parameters\n */\nfunction getCardConfigParameters(\n\tmandatoryFilters: string[],\n\tfilters: Record<string, FilterParameterType>,\n\tnavigation: InsightsParams[\"navigation\"],\n\tentitySetPath: string,\n\tparameters: Record<string, FilterParameterType>,\n\tcontentUrl: string,\n\tsortQuery: string,\n\ttype: CardType\n): CardConfigParameters {\n\tconst cardConfigParams: CardConfigParameters = {\n\t\tstate: {\n\t\t\tvalue: getActionObject(navigation)\n\t\t},\n\t\t_relevantODataFilters: {\n\t\t\tvalue: []\n\t\t},\n\t\t_relevantODataParameters: {\n\t\t\tvalue: []\n\t\t},\n\t\t_mandatoryODataFilters: {\n\t\t\tvalue: mandatoryFilters\n\t\t},\n\t\t_mandatoryODataParameters: {\n\t\t\tvalue: []\n\t\t},\n\t\tsensitiveProps: [],\n\t\t_entitySet: {\n\t\t\tvalue: entitySetPath\n\t\t},\n\t\t_contentDataUrl: {\n\t\t\tvalue: contentUrl\n\t\t},\n\t\t_HeaderDataUrl: {\n\t\t\tvalue: contentUrl\n\t\t},\n\t\t_contentTopQuery: {\n\t\t\tvalue: type === \"Table\" ? `$top=${MAX_TABLE_RECORDS}` : \"\"\n\t\t},\n\t\t_headerTopQuery: {\n\t\t\tvalue: type === \"Table\" ? `$top=${MAX_TABLE_RECORDS}` : \"\"\n\t\t},\n\t\t_contentSkipQuery: {\n\t\t\tvalue: type === \"Table\" ? \"$skip=0\" : \"\"\n\t\t},\n\t\t_headerSkipQuery: {\n\t\t\tvalue: type === \"Table\" ? \"$skip=0\" : \"\"\n\t\t},\n\t\t_contentSortQuery: {\n\t\t\tvalue: sortQuery === \"\" ? \"\" : `$orderby=${sortQuery}`\n\t\t},\n\t\t_headerSortQuery: {\n\t\t\tvalue: sortQuery === \"\" ? \"\" : `$orderby=${sortQuery}`\n\t\t}\n\t};\n\tfor (const filter in filters) {\n\t\tcardConfigParams._relevantODataFilters.value.push(filter);\n\t\tcardConfigParams[filter] = {\n\t\t\tvalue: filters[filter].value,\n\t\t\ttype: filters[filter].type\n\t\t};\n\t}\n\tfor (const parameter in parameters) {\n\t\tcardConfigParams._relevantODataParameters.value.push(parameter);\n\t\tcardConfigParams._mandatoryODataParameters.value.push(parameter);\n\t\tcardConfigParams[parameter] = {\n\t\t\tvalue: parameters[parameter].value,\n\t\t\ttype: parameters[parameter].type\n\t\t};\n\t}\n\treturn cardConfigParams;\n}\n\n/**\n * Construct the card configuration for the insights card.\n * @param insightsParams\n * @returns The card configuration for the insights card.\n */\nfunction getCardConfig(insightsParams: InsightsParams): CardConfiguration {\n\tconst cardConfiguration: CardConfiguration = {};\n\tconst serviceUrl = insightsParams.requestParameters.serviceUrl;\n\tcardConfiguration.destinations = { service: { name: \"(default)\", defaultUrl: \"/\" } };\n\tcardConfiguration.csrfTokens = {\n\t\ttoken1: {\n\t\t\tdata: {\n\t\t\t\trequest: {\n\t\t\t\t\turl: `${SERVICE_HOST}${serviceUrl}`,\n\t\t\t\t\tmethod: \"HEAD\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t\"X-CSRF-Token\": \"Fetch\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tcardConfiguration.parameters = getCardConfigParameters(\n\t\tinsightsParams.parameters.mandatoryFilters ?? [],\n\t\tinsightsParams.parameters.filters ?? {},\n\t\tinsightsParams.navigation,\n\t\tinsightsParams.entitySetPath,\n\t\tinsightsParams.parameters.oDataParameters ?? {},\n\t\tinsightsParams.requestParameters.queryUrl,\n\t\tinsightsParams.requestParameters.sortQuery,\n\t\tinsightsParams.type\n\t);\n\treturn cardConfiguration;\n}\n\n/**\n * Construct the manifest entry for sap.card namespace of the insights card.\n * @param insightsParams\n * @returns The card manifest entry for the sap.card namespace\n */\nfunction getIntegrationCardManifest(insightsParams: InsightsParams): CardManifest[\"sap.card\"] {\n\tconst cardConfig: Partial<CardManifest[\"sap.card\"]> = {\n\t\ttype: insightsParams.type\n\t};\n\tcardConfig.configuration = getCardConfig(insightsParams);\n\tcardConfig.header = getCardHeader(insightsParams);\n\tcardConfig.data = getCardData(insightsParams);\n\tif (isAnalytical(insightsParams.type, insightsParams.content)) {\n\t\tcardConfig.content = getAnalyticalCardContent(insightsParams.content);\n\t} else {\n\t\tcardConfig.content = getTableCardContent(insightsParams as InsightsParams<TableContent>);\n\t}\n\tcardConfig.extension = \"module:sap/fe/core/InsightsFormattersExtension\";\n\treturn cardConfig as CardManifest[\"sap.card\"];\n}\n\n/**\n * Constructs the card content for the insights card.\n * Includes the configuration of a navigation action and the creation of bindings to read the data from the response of the back end.\n * @param insightsParams\n * @param insightsParams.requestParameters\n * @param insightsParams.content\n * @param insightsParams.parameters\n * @returns The card content for the insights card.\n */\nfunction getTableCardContent({ requestParameters, content, parameters }: InsightsParams<TableContent>): TableCardContent {\n\tconst cardContent: TableCardContent = {\n\t\tdata: {\n\t\t\tpath: \"/response/value\"\n\t\t},\n\t\tmaxItems: MAX_TABLE_RECORDS,\n\t\trow: {\n\t\t\thighlight: content.rowCriticality ? content.rowCriticality : undefined,\n\t\t\tcolumns: content.insightsRelevantColumns\n\t\t}\n\t};\n\tif (requestParameters.groupBy) {\n\t\tconst groupConditionName = requestParameters.groupBy.property;\n\t\tconst groupDescending = requestParameters.groupBy.descending;\n\t\tcardContent.group = {\n\t\t\ttitle: \"{\" + groupConditionName + \"}\",\n\t\t\torder: {\n\t\t\t\tpath: groupConditionName,\n\t\t\t\tdir: groupDescending === true ? \"DESC\" : \"ASC\"\n\t\t\t}\n\t\t};\n\t}\n\tif (parameters.isNavigationEnabled === true) {\n\t\tcardContent.row.actions = [\n\t\t\t{\n\t\t\t\ttype: \"Navigation\",\n\t\t\t\tparameters: \"{= extension.formatters.getNavigationContext(${parameters>/state/value}, ${})}\"\n\t\t\t}\n\t\t];\n\t}\n\treturn cardContent;\n}\n\n/**\n * Creates the chart card content for the insights card.\n * @param content Content configuration for an analytical card\n * @returns The chart card content\n */\nexport function getAnalyticalCardContent(content: ChartContent): ChartCardContent {\n\treturn {\n\t\tchartType: content.chartType,\n\t\tchartProperties: content.chartProperties as never,\n\t\tdata: { path: \"/response/value\" },\n\t\tdimensions: content.dimensions,\n\t\tmeasures: content.measures,\n\t\tfeeds: content.feeds,\n\t\tactions: [\n\t\t\t{\n\t\t\t\ttype: \"Navigation\",\n\t\t\t\tparameters: \"{= extension.formatters.getNavigationContext(${parameters>/state/value}, ${})}\"\n\t\t\t}\n\t\t],\n\t\tactionableArea: \"Chart\"\n\t};\n}\n\n/**\n * Construct the manifest entry for sap.insights namespace of the insights card.\n * @param params\n * @param params.parentAppManifest Manifest of the target application\n * @param params.entitySetPath Entity set to be used for filtering\n * @param params.type Card type\n * @param params.content Content specific parameters\n * @returns The card manifest entry for the sap.insights namespace\n */\nasync function getManifestSapInsights({\n\tparentAppManifest,\n\tentitySetPath,\n\ttype,\n\tcontent\n}: InsightsParams): Promise<CardManifest[\"sap.insights\"]> {\n\tconst ui5Version = await VersionInfo.load();\n\tconst manifestParams: CardManifest[\"sap.insights\"] = {\n\t\tparentAppId: parentAppManifest[\"sap.app\"].id,\n\t\tcardType: \"RT\",\n\t\tversions: {\n\t\t\tui5: ui5Version.version + \"-\" + ui5Version.buildTimestamp\n\t\t},\n\t\tfilterEntitySet: entitySetPath\n\t};\n\tif (isAnalytical(type, content)) {\n\t\tmanifestParams.allowedChartTypes = content.allowedChartTypes;\n\t}\n\treturn manifestParams;\n}\n/**\n * Creates the card manifest for the insights card.\n * @param insightsParams\n * @returns The insights card\n */\nexport async function createCardManifest(insightsParams: InsightsParams): Promise<CardManifest> {\n\tconst appManifest = { ...insightsParams.parentAppManifest[\"sap.app\"] };\n\tconst ui5Manifest = { ...insightsParams.parentAppManifest[\"sap.ui5\"] };\n\tconst defaultModel = ui5Manifest.models[\"\"];\n\tconst dataSourceService = defaultModel.dataSource ? defaultModel.dataSource : \"\";\n\tconst insightsCardManifest: Partial<CardManifest> = {};\n\tappManifest.id = `user.${appManifest.id}.${Date.now()}`;\n\tappManifest.type = \"card\";\n\tappManifest.dataSources.filterService = { ...appManifest.dataSources[dataSourceService] };\n\tinsightsCardManifest[\"sap.app\"] = appManifest as CardManifest[\"sap.app\"];\n\tinsightsCardManifest[\"sap.card\"] = getIntegrationCardManifest(insightsParams);\n\tinsightsCardManifest[\"sap.insights\"] = await getManifestSapInsights(insightsParams);\n\tinsightsCardManifest[\"sap.ui5\"] = {\n\t\tcontentDensities: ui5Manifest.contentDensities as ContentDensitiesType,\n\t\tdependencies: {\n\t\t\tlibs: {\n\t\t\t\t\"sap.insights\": {\n\t\t\t\t\tlazy: false\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcomponentName: insightsCardManifest[\"sap.app\"].id\n\t};\n\treturn insightsCardManifest as CardManifest;\n}\n\n/**\n * Create the manifest of the insights card and show a preview of the card that is created.\n * @param insightsParams\n * @param cardCreationDialogWarning\n */\nexport async function showInsightsCardPreview(insightsParams: InsightsParams, cardCreationDialogWarning?: CardMessage): Promise<void> {\n\tconst { default: cardHelper } = await import(\"sap/insights/CardHelper\");\n\tconst cardHelperInstance = await cardHelper.getServiceAsync(\"UIService\");\n\tconst card = await createCardManifest(insightsParams);\n\tawait cardHelperInstance.showCardPreview(card, true, cardCreationDialogWarning);\n}\n\n/**\n * Create the manifest of the insights card and show a preview of the card that is created for collaboration manager.\n * @param card The card manifest to be used for the callback\n * @param cmInstance The current CollaborationManagerService instance\n */\nexport async function showCollaborationManagerCardPreview(card: CardManifest, cmInstance: CollaborationManagerService): Promise<void> {\n\tconst { default: cardHelper } = await import(\"sap/insights/CardHelper\");\n\tconst cardHelperInstance = await cardHelper.getServiceAsync(\"UIService\");\n\tconst buttonText = Library.getResourceBundleFor(\"sap.fe.macros\")?.getText(\"C_SEND_TO_COLLABORATION_MANAGER\");\n\tawait cardHelperInstance.showCardPreview(card, true, { type: \"None\" }, buttonText, (event) => {\n\t\t// We need to introduce this check as there seems to be a regression that the 'manifest' parameters is not filled in some versions\n\t\tconst cardManifest = event.getParameter(\"manifest\") ?? event.getSource().getManifest();\n\t\tcmInstance.publishCard(cardManifest);\n\t});\n}\n\nexport async function getCardManifest(insightsParams: InsightsParams): Promise<CardManifest> {\n\treturn createCardManifest(insightsParams);\n}\n"],"mappings":"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","ignoreList":[],"file":"InsightsService-dbg.js"}