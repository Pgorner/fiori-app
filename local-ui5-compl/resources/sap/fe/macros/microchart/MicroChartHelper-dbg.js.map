{"version":3,"names":["calendarPatternMap","yyyy","Q","MM","ww","yyyyMMdd","yyyyMM","MicroChartHelper","getThresholdColor","value","iContext","path","context","getPath","includes","ValueColor","Error","Critical","Neutral","getMeasurePropertyPaths","chartAnnotations","entityTypeAnnotations","chartType","propertyPath","Log","warning","undefined","measureIndex","Measures","iMeasureAttribute","CommonHelper","getMeasureAttributeIndex","measureAttribute","MeasureAttributes","dataPoint","DataPoint","$AnnotationPath","Value","$Path","push","join","getHiddenPathExpression","_len","arguments","length","args","Array","_key","hiddenPaths","forEach","call","hiddenProperty","isNotAlwaysHidden","maxValue","valueHidden","maxValueHidden","logError","error","formatDecimal","property","fractionDigits","constraints","formatOptions","scale","$Scale","$Nullable","$Precision","decimals","NumberFormat","getFloatInstance","style","preserveDecimals","format","getSelectParameters","groupId","sortOrder","criticalityCalculation","criticality","otherPaths","sorters","parameters","sorter","Property","Descending","cricticalityCalculationKeys","Object","keys","key","getDataPointQualifiersForMeasures","qualifiers","measureAttributes","fnAddDataPointQualifier","chartMeasure","measure","$PropertyPath","qualifier","Measure","annotationPath","split","logWarning","getDisplayValueForMicroChart","pathText","valueTextPath","valueDataPointPath","valueFormat","ValueFormat","NumberOfFractionalDigits","shouldMicroChartRender","dataPointValueHidden","targetAnnotations","dataPointMaxValue","availableChartTypes","dataPointValue","hiddenPath","chartAnnotationDimension","Dimensions","finalDataPointValue","dataPointMaximumValue","MaximumValue","maxValueHiddenPath","getDataPointQualifiersForMicroChart","getColorPaletteForMicroChart","Criticality","getMeasureScaleForMicroChart","valueOf","getBindingExpressionForMicrochart","microChart","collection","uiName","condition","currencyOrUnit","getUOMPathForMicrochart","showOnlyChart","dataPointCriticallity","targetObject","functionValue","batchGroupId","annotations","ISOCurrency","Unit","getAggregationForMicrochart","aggregationType","dimension","measureOrDimensionBar","dataPointCriticallityCalc","targetValuePath","dimensionPropertyPath","$target","Common","Text","CriticalityCalculation","TargetValue","getCurrencyOrUnit","getCalendarPattern","propertyType","formatDimension","date","pattern","DateFormat","getDateInstance","parse","Date","getTime","formatStringDimension","matchedValue","toString","match","getX","some","type"],"sourceRoot":".","sources":["MicroChartHelper.ts"],"sourcesContent":["import type { PathAnnotationExpression, PropertyPath } from \"@sap-ux/vocabularies-types/Edm\";\nimport type { Measure } from \"@sap-ux/vocabularies-types/vocabularies/Analytics\";\nimport type { SortOrderType } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport { CommonAnnotationTerms } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport { MeasuresAnnotationTerms } from \"@sap-ux/vocabularies-types/vocabularies/Measures\";\nimport type { PropertyAnnotations_Measures } from \"@sap-ux/vocabularies-types/vocabularies/Measures_Edm\";\nimport type {\n\tChart,\n\tChartMeasureAttributeTypeTypes,\n\tCriticalityCalculationType,\n\tDataPointType\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTerms } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport type { MetaModelEntityTypeAnnotations, MetaModelPropertyAnnotations } from \"sap/fe/core/converters/MetaModelConverter\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport type { ComputedAnnotationInterface } from \"sap/fe/core/templating/UIFormatters\";\nimport CommonHelper from \"sap/fe/macros/CommonHelper\";\nimport type MicroChartBlock from \"sap/fe/macros/microchart/MicroChart.block\";\nimport { ValueColor } from \"sap/m/library\";\nimport DateFormat from \"sap/ui/core/format/DateFormat\";\nimport NumberFormat from \"sap/ui/core/format/NumberFormat\";\nimport type { MetaModelNavProperty, MetaModelType } from \"types/metamodel_types\";\n\ntype Property = {\n\t$kind?: string;\n\t$Type?: string;\n\t$Name?: string;\n\t$Nullable?: boolean;\n\t$MaxLength?: number;\n\t$Precision?: number;\n\t$Scale?: number | string;\n};\n\nconst calendarPatternMap: { [key: string]: RegExp } = {\n\tyyyy: /[1-9][0-9]{3,}|0[0-9]{3}/,\n\tQ: /[1-4]/,\n\tMM: /0[1-9]|1[0-2]/,\n\tww: /0[1-9]|[1-4][0-9]|5[0-3]/,\n\tyyyyMMdd: /([1-9][0-9]{3,}|0[0-9]{3})(0[1-9]|1[0-2])(0[1-9]|[12][0-9]|3[01])/,\n\tyyyyMM: /([1-9][0-9]{3,}|0[0-9]{3})(0[1-9]|1[0-2])/,\n\t\"yyyy-MM-dd\": /([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])/\n};\n\n/**\n * Helper class used by MDC_Controls to handle SAP Fiori elements for OData V4\n * @private\n * @experimental This module is only for internal/experimental use!\n */\nconst MicroChartHelper = {\n\t/**\n\t * This function returns the Threshold Color for bullet micro chart.\n\t * @param value Threshold value provided in the annotations\n\t * @param iContext InterfaceContext with path to the threshold\n\t * @returns The indicator for Threshold Color\n\t */\n\tgetThresholdColor: function (value: string, iContext: ComputedAnnotationInterface): ValueColor {\n\t\tconst path = iContext.context.getPath();\n\t\tif (path.includes(\"DeviationRange\")) {\n\t\t\treturn ValueColor.Error;\n\t\t} else if (path.includes(\"ToleranceRange\")) {\n\t\t\treturn ValueColor.Critical;\n\t\t}\n\t\treturn ValueColor.Neutral;\n\t},\n\n\t/**\n\t * To fetch measures from DataPoints.\n\t * @param chartAnnotations Chart Annotations\n\t * @param entityTypeAnnotations EntityType Annotations\n\t * @param chartType Chart Type used\n\t * @returns Containing all measures.\n\t * @private\n\t */\n\tgetMeasurePropertyPaths: function (\n\t\tchartAnnotations: MetaModelType<Chart>,\n\t\tentityTypeAnnotations: MetaModelEntityTypeAnnotations | undefined,\n\t\tchartType: string\n\t): string | undefined {\n\t\tconst propertyPath: string[] = [];\n\n\t\tif (!entityTypeAnnotations) {\n\t\t\tLog.warning(\"FE:Macro:MicroChart : Couldn't find annotations for the DataPoint.\");\n\t\t\treturn undefined;\n\t\t}\n\n\t\tfor (const measureIndex in chartAnnotations.Measures) {\n\t\t\tconst iMeasureAttribute = CommonHelper.getMeasureAttributeIndex(measureIndex as unknown as number, chartAnnotations),\n\t\t\t\tmeasureAttribute =\n\t\t\t\t\tiMeasureAttribute > -1 && chartAnnotations.MeasureAttributes && chartAnnotations.MeasureAttributes[iMeasureAttribute],\n\t\t\t\tdataPoint = (measureAttribute &&\n\t\t\t\t\tentityTypeAnnotations &&\n\t\t\t\t\tentityTypeAnnotations[measureAttribute.DataPoint?.$AnnotationPath as keyof MetaModelEntityTypeAnnotations]) as\n\t\t\t\t\t| MetaModelType<DataPointType>\n\t\t\t\t\t| undefined;\n\t\t\tif (dataPoint?.Value?.$Path) {\n\t\t\t\tpropertyPath.push(dataPoint.Value.$Path);\n\t\t\t} else {\n\t\t\t\tLog.warning(\n\t\t\t\t\t`FE:Macro:MicroChart : Couldn't find DataPoint(Value) measure for the measureAttribute ${chartType} MicroChart.`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn propertyPath.join(\",\");\n\t},\n\n\t/**\n\t * This function returns the visible expression path.\n\t * @param args\n\t * @returns Expression Binding for the visible.\n\t */\n\tgetHiddenPathExpression: function (...args: unknown[]): string | boolean {\n\t\tif (!args[0] && !args[1]) {\n\t\t\treturn true;\n\t\t}\n\t\tif (args[0] === true || args[1] === true) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst hiddenPaths: string[] = [];\n\t\t[].forEach.call(args, function (hiddenProperty: unknown) {\n\t\t\tif (hiddenProperty && (hiddenProperty as { $Path: string }).$Path) {\n\t\t\t\thiddenPaths.push(\"%{\" + (hiddenProperty as { $Path: string }).$Path + \"}\");\n\t\t\t}\n\t\t});\n\n\t\treturn hiddenPaths.length ? \"{= \" + hiddenPaths.join(\" || \") + \" === true ? false : true }\" : false;\n\t},\n\n\t/**\n\t * This function returns the true/false to display chart.\n\t * @param chartType The chart type\n\t * @param value Data point value of Value\n\t * @param value.$Path\n\t * @param maxValue Data point value of MaximumValue\n\t * @param maxValue.$Path\n\t * @param valueHidden Hidden path object/boolean value for the referenced property of value\n\t * @param valueHidden.$Path\n\t * @param maxValueHidden Hidden path object/boolean value for the referenced property of MaxValue\n\t * @param maxValueHidden.$Path\n\t * @returns `true` or `false` to hide/show chart\n\t */\n\tisNotAlwaysHidden: function (\n\t\tchartType: string,\n\t\tvalue: { $Path: string },\n\t\tmaxValue: { $Path: string } | undefined,\n\t\tvalueHidden?: boolean | { $Path: string },\n\t\tmaxValueHidden?: boolean | { $Path: string }\n\t): boolean {\n\t\tif (valueHidden === true) {\n\t\t\tthis.logError(chartType, value);\n\t\t}\n\t\tif (maxValueHidden === true) {\n\t\t\tthis.logError(chartType, maxValue);\n\t\t}\n\t\tif (valueHidden === undefined && maxValueHidden === undefined) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn ((!valueHidden || (valueHidden as { $Path: string }).$Path) && valueHidden !== undefined) ||\n\t\t\t\t((!maxValueHidden || (maxValueHidden as { $Path: string }).$Path) && maxValueHidden !== undefined)\n\t\t\t\t? true\n\t\t\t\t: false;\n\t\t}\n\t},\n\n\t/**\n\t * This function is to log errors for missing data point properties.\n\t * @param chartType The chart type.\n\t * @param value Dynamic hidden property name.\n\t * @param value.$Path Dynamic hidden property name.\n\t */\n\tlogError: function (chartType: string, value?: { $Path: string }): void {\n\t\tLog.error(`Measure Property ${value?.$Path} is hidden for the ${chartType} Micro Chart`);\n\t},\n\n\t/**\n\t * This function returns the formatted value with scale factor for the value displayed.\n\t * @param path Property path for the value\n\t * @param property The Property for constraints\n\t * @param fractionDigits No. of fraction digits specified from annotations\n\t * @param value Static value of the property\n\t * @returns Expression Binding for the value with scale.\n\t */\n\tformatDecimal: function (path: string, property: Property, fractionDigits: number | undefined, value?: number): string | undefined {\n\t\tif (path) {\n\t\t\tconst constraints = [],\n\t\t\t\tformatOptions = [\"style: 'short'\"];\n\t\t\tconst scale = typeof fractionDigits === \"number\" ? fractionDigits : (property && property?.$Scale) || 1;\n\n\t\t\tif (property.$Nullable != undefined) {\n\t\t\t\tconstraints.push(\"nullable: \" + property.$Nullable);\n\t\t\t}\n\t\t\tif (property.$Precision != undefined) {\n\t\t\t\tformatOptions.push(\"precision: \" + (property.$Precision ? property.$Precision : \"1\"));\n\t\t\t}\n\t\t\tconstraints.push(\"scale: \" + (scale === \"variable\" ? \"'\" + scale + \"'\" : scale));\n\n\t\t\treturn (\n\t\t\t\t\"{ path: '\" +\n\t\t\t\tpath +\n\t\t\t\t\"'\" +\n\t\t\t\t\", type: 'sap.ui.model.odata.type.Decimal', constraints: { \" +\n\t\t\t\tconstraints.join(\",\") +\n\t\t\t\t\" }, formatOptions: { \" +\n\t\t\t\tformatOptions.join(\",\") +\n\t\t\t\t\" } }\"\n\t\t\t);\n\t\t} else if (value) {\n\t\t\tconst decimals = typeof fractionDigits === \"number\" ? fractionDigits : 1;\n\t\t\treturn NumberFormat.getFloatInstance({ style: \"short\", preserveDecimals: true, decimals: decimals }).format(value);\n\t\t}\n\t},\n\n\t/**\n\t * To fetch, the $select parameters from annotations to add to the list binding.\n\t * @param groupId GroupId to be used\n\t * @param sortOrder Sort order to be used\n\t * @param criticalityCalculation Criticality calculation object property path\n\t * @param criticality Criticality for the chart\n\t * @param otherPaths All other paths\n\t * @returns String containing all the property paths needed to be added to the $select query of the list binding.\n\t * @private\n\t */\n\tgetSelectParameters: function (\n\t\tgroupId: string,\n\t\tsortOrder?: SortOrderType[],\n\t\tcriticalityCalculation?: CriticalityCalculationType,\n\t\tcriticality?: string,\n\t\totherPaths?: string[]\n\t): string {\n\t\tconst propertyPath: string[] = [],\n\t\t\tsorters: string[] = [],\n\t\t\tparameters: string[] = [];\n\n\t\tif (groupId) {\n\t\t\tparameters.push(`$$groupId : '${groupId}'`);\n\t\t}\n\t\tif (sortOrder) {\n\t\t\tsortOrder.forEach((sorter: SortOrderType) => {\n\t\t\t\tsorters.push(`${sorter.Property}${sorter.Descending ? \" desc\" : \"\"}`);\n\t\t\t});\n\t\t}\n\n\t\tif (criticality) {\n\t\t\tpropertyPath.push(criticality);\n\t\t} else if (criticalityCalculation) {\n\t\t\tconst cricticalityCalculationKeys = [\n\t\t\t\t\"ImprovementDirection\",\n\t\t\t\t\"DeviationRangeLowValue\",\n\t\t\t\t\"ToleranceRangeLowValue\",\n\t\t\t\t\"AcceptanceRangeLowValue\",\n\t\t\t\t\"AcceptanceRangeHighValue\",\n\t\t\t\t\"ToleranceRangeHighValue\",\n\t\t\t\t\"DeviationRangeHighValue\"\n\t\t\t];\n\t\t\tObject.keys(criticalityCalculation).forEach((key: string) => {\n\t\t\t\tif (\n\t\t\t\t\tcricticalityCalculationKeys.includes(key) &&\n\t\t\t\t\t((criticalityCalculation as unknown as Record<string, string>)[key] as unknown as PathAnnotationExpression<string>).path\n\t\t\t\t) {\n\t\t\t\t\tpropertyPath.push(\n\t\t\t\t\t\t((criticalityCalculation as unknown as Record<string, string>)[key] as unknown as PathAnnotationExpression<string>)\n\t\t\t\t\t\t\t.path\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\totherPaths?.forEach((path) => {\n\t\t\tif (path) {\n\t\t\t\tpropertyPath.push(path);\n\t\t\t}\n\t\t});\n\n\t\tif (propertyPath.length) {\n\t\t\tparameters.push(`$select : '${propertyPath.join(\",\")}'`);\n\t\t}\n\t\tif (sorters.length) {\n\t\t\tparameters.push(`$orderby : '${sorters.join(\",\")}'`);\n\t\t}\n\n\t\treturn parameters.join(\",\");\n\t},\n\n\t/**\n\t * To fetch DataPoint qualifiers of measures.\n\t * @param chartAnnotations Chart annotations\n\t * @param entityTypeAnnotations EntityType annotations\n\t * @param chartType Chart type used\n\t * @returns Containing all data point qualifiers.\n\t * @private\n\t */\n\tgetDataPointQualifiersForMeasures: function (\n\t\tchartAnnotations: MetaModelType<Chart>,\n\t\tentityTypeAnnotations: MetaModelEntityTypeAnnotations | undefined,\n\t\tchartType: string\n\t): string {\n\t\tconst qualifiers: string[] = [],\n\t\t\tmeasureAttributes = chartAnnotations.MeasureAttributes,\n\t\t\tfnAddDataPointQualifier = function (chartMeasure: { $PropertyPath: string }): void {\n\t\t\t\tconst measure = chartMeasure.$PropertyPath;\n\t\t\t\tlet qualifier: string | undefined;\n\t\t\t\tif (entityTypeAnnotations) {\n\t\t\t\t\tmeasureAttributes?.forEach(function (measureAttribute: MetaModelType<ChartMeasureAttributeTypeTypes>) {\n\t\t\t\t\t\tif (measureAttribute.Measure?.$PropertyPath === measure && measureAttribute.DataPoint?.$AnnotationPath) {\n\t\t\t\t\t\t\tconst annotationPath = measureAttribute.DataPoint.$AnnotationPath;\n\t\t\t\t\t\t\tif (entityTypeAnnotations[annotationPath as keyof MetaModelEntityTypeAnnotations]) {\n\t\t\t\t\t\t\t\tqualifier = annotationPath.split(\"#\")[1];\n\t\t\t\t\t\t\t\tif (qualifier) {\n\t\t\t\t\t\t\t\t\tqualifiers.push(qualifier);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (qualifier === undefined) {\n\t\t\t\t\tLog.warning(\n\t\t\t\t\t\t`FE:Macro:MicroChart : Couldn't find DataPoint(Value) measure for the measureAttribute for ${chartType} MicroChart.`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t};\n\n\t\tif (!entityTypeAnnotations) {\n\t\t\tLog.warning(`FE:Macro:MicroChart : Couldn't find annotations for the DataPoint ${chartType} MicroChart.`);\n\t\t}\n\t\tchartAnnotations.Measures?.forEach(fnAddDataPointQualifier);\n\t\treturn qualifiers.join(\",\");\n\t},\n\n\t/**\n\t * This function is to log warnings for missing datapoint properties.\n\t * @param chartType The Chart type.\n\t * @param error Object with properties from DataPoint.\n\t */\n\tlogWarning: function (chartType: string, error: object): void {\n\t\tfor (const key in error) {\n\t\t\tif (!error[key as keyof typeof error]) {\n\t\t\t\tLog.warning(`${key} parameter is missing for the ${chartType} Micro Chart`);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * This function is used to get DisplayValue for comparison micro chart data aggregation.\n\t * @param dataPoint Data point object.\n\t * @param pathText Object after evaluating @com.sap.vocabularies.Common.v1.Text annotation\n\t * @param pathText.$Path The target path\n\t * @param valueTextPath Evaluation of @com.sap.vocabularies.Common.v1.Text/$Path/$ value of the annotation\n\t * @param valueDataPointPath DataPoint>Value/$Path/$ value after evaluating annotation\n\t * @returns Expression binding for Display Value for comparison micro chart's aggregation data.\n\t */\n\tgetDisplayValueForMicroChart: function (\n\t\tdataPoint: MetaModelType<DataPointType>,\n\t\tpathText: { $Path: string } | undefined,\n\t\tvalueTextPath: object,\n\t\tvalueDataPointPath: object\n\t): string | undefined {\n\t\tconst valueFormat = dataPoint.ValueFormat && dataPoint.ValueFormat.NumberOfFractionalDigits;\n\t\tif (pathText) {\n\t\t\treturn MicroChartHelper.formatDecimal(pathText[\"$Path\"], valueTextPath as Property, valueFormat);\n\t\t}\n\t\treturn MicroChartHelper.formatDecimal(dataPoint.Value[\"$Path\"], valueDataPointPath as Property, valueFormat);\n\t},\n\n\t/**\n\t * This function is used to check whether micro chart is enabled or not by checking properties, chart annotations, hidden properties.\n\t * @param chartType MicroChart Type,such as Bullet.\n\t * @param dataPoint Data point object.\n\t * @param dataPointValueHidden Object with $Path annotation to get the hidden value path\n\t * @param targetAnnotations ChartAnnotation object\n\t * @param dataPointMaxValue Object with $Path annotation to get hidden max value path\n\t * @returns `true` if the chart has all values and properties and also it is not always hidden sFinalDataPointValue && bMicrochartVisible.\n\t */\n\tshouldMicroChartRender: function (\n\t\tchartType: string,\n\t\tdataPoint: DataPointType,\n\t\tdataPointValueHidden: Record<string, boolean>,\n\t\ttargetAnnotations: Chart,\n\t\tdataPointMaxValue: Record<string, boolean>\n\t): boolean {\n\t\tconst availableChartTypes = [\"Area\", \"Column\", \"Comparison\"],\n\t\t\tdataPointValue = dataPoint && dataPoint.Value,\n\t\t\thiddenPath = dataPointValueHidden && dataPointValueHidden[UIAnnotationTerms.Hidden],\n\t\t\tchartAnnotationDimension = targetAnnotations && targetAnnotations.Dimensions && targetAnnotations.Dimensions[0],\n\t\t\tfinalDataPointValue = availableChartTypes.includes(chartType) ? dataPointValue && chartAnnotationDimension : dataPointValue; // only for three charts in array\n\t\tif (chartType === \"Harvey\") {\n\t\t\tconst dataPointMaximumValue = dataPoint && dataPoint.MaximumValue,\n\t\t\t\tmaxValueHiddenPath = dataPointMaxValue && dataPointMaxValue[UIAnnotationTerms.Hidden];\n\t\t\treturn (\n\t\t\t\tdataPointValue &&\n\t\t\t\tdataPointMaximumValue &&\n\t\t\t\tMicroChartHelper.isNotAlwaysHidden(\n\t\t\t\t\t\"Bullet\",\n\t\t\t\t\tdataPointValue,\n\t\t\t\t\tdataPointMaximumValue as unknown as { $Path: string },\n\t\t\t\t\thiddenPath,\n\t\t\t\t\tmaxValueHiddenPath\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t\treturn finalDataPointValue && MicroChartHelper.isNotAlwaysHidden(chartType, dataPointValue, undefined, hiddenPath);\n\t},\n\n\t/**\n\t * This function is used to get dataPointQualifiers for Column, Comparison and StackedBar micro charts.\n\t * @param annotationPath\n\t * @returns Result string or undefined.\n\t */\n\tgetDataPointQualifiersForMicroChart: function (annotationPath: string): string | undefined {\n\t\tif (!annotationPath.includes(UIAnnotationTerms.DataPoint)) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn annotationPath.split(\"#\")[1] ?? \"\";\n\t},\n\n\t/**\n\t * This function is used to get colorPalette for comparison and HarveyBall Microcharts.\n\t * @param dataPoint Data point object.\n\t * @returns Result string for colorPalette or undefined.\n\t */\n\tgetColorPaletteForMicroChart: function (dataPoint: DataPointType): string | undefined {\n\t\treturn dataPoint.Criticality\n\t\t\t? undefined\n\t\t\t: \"sapUiChartPaletteQualitativeHue1, sapUiChartPaletteQualitativeHue2, sapUiChartPaletteQualitativeHue3,          sapUiChartPaletteQualitativeHue4, sapUiChartPaletteQualitativeHue5, sapUiChartPaletteQualitativeHue6, sapUiChartPaletteQualitativeHue7,          sapUiChartPaletteQualitativeHue8, sapUiChartPaletteQualitativeHue9, sapUiChartPaletteQualitativeHue10, sapUiChartPaletteQualitativeHue11\";\n\t},\n\n\t/**\n\t * This function is used to get MeasureScale for Area, Column and Line micro charts.\n\t * @param dataPoint Data point object.\n\t * @returns Data point value format fractional digits or data point scale or 1.\n\t */\n\tgetMeasureScaleForMicroChart: function (dataPoint: DataPointType): number {\n\t\tif (dataPoint.ValueFormat && dataPoint.ValueFormat.NumberOfFractionalDigits) {\n\t\t\treturn dataPoint.ValueFormat.NumberOfFractionalDigits.valueOf();\n\t\t}\n\t\tif (dataPoint.Value && dataPoint.Value[\"$Path\"] && dataPoint.Value[\"$Path\"][\"$Scale\"]) {\n\t\t\treturn dataPoint.Value[\"$Path\"][\"$Scale\"];\n\t\t}\n\t\treturn 1;\n\t},\n\n\t/**\n\t * This function is to return the binding expression of microchart.\n\t * @param chartType The type of micro chart (Bullet, Radial etc.)\n\t * @param measure Measure value for micro chart.\n\t * @param microChart `this`/current model for micro chart.\n\t * @param collection Collection object.\n\t * @param uiName The @sapui.name in collection model is not accessible here from model hence need to pass it.\n\t * @param dataPoint Data point object used in case of Harvey Ball micro chart\n\t * @returns The binding expression for micro chart.\n\t * @private\n\t */\n\tgetBindingExpressionForMicrochart: function (\n\t\tchartType: string,\n\t\tmeasure: DataModelObjectPath<Measure>,\n\t\tmicroChart: MicroChartBlock,\n\t\tcollection: MetaModelNavProperty,\n\t\tuiName: string,\n\t\tdataPoint: DataModelObjectPath<DataPointType>\n\t): string {\n\t\tconst condition = collection[\"$isCollection\"] || collection[\"$kind\"] === \"EntitySet\";\n\t\tconst path = condition ? \"\" : uiName;\n\t\tlet currencyOrUnit = MicroChartHelper.getUOMPathForMicrochart(microChart.showOnlyChart as boolean, measure);\n\t\tlet dataPointCriticallity = \"\";\n\t\tswitch (chartType) {\n\t\t\tcase \"Radial\":\n\t\t\t\tcurrencyOrUnit = \"\";\n\t\t\t\tbreak;\n\t\t\tcase \"Harvey\":\n\t\t\t\tdataPointCriticallity = dataPoint?.targetObject?.Criticality\n\t\t\t\t\t? (dataPoint.targetObject?.Criticality as PathAnnotationExpression<string>)?.path\n\t\t\t\t\t: \"\";\n\t\t\t\tbreak;\n\t\t}\n\t\tconst functionValue = MicroChartHelper.getSelectParameters(microChart.batchGroupId, undefined, undefined, dataPointCriticallity, [\n\t\t\tcurrencyOrUnit\n\t\t]);\n\n\t\treturn `{ path: '${path}'` + `, parameters : {${functionValue}} }`;\n\t},\n\n\t/**\n\t * This function is to return the UOMPath expression of the micro chart.\n\t * @param showOnlyChart Whether only chart should be rendered or not.\n\t * @param measure Measures for the micro chart.\n\t * @returns UOMPath String for the micro chart.\n\t * @private\n\t */\n\tgetUOMPathForMicrochart: function (showOnlyChart: boolean, measure?: DataModelObjectPath<Measure>): string {\n\t\treturn measure && !showOnlyChart\n\t\t\t? (\n\t\t\t\t\t(measure.targetObject?.annotations?.Measures as PropertyAnnotations_Measures)\n\t\t\t\t\t\t?.ISOCurrency as unknown as PathAnnotationExpression<string>\n\t\t\t  )?.path ||\n\t\t\t\t\t(\n\t\t\t\t\t\t(measure.targetObject?.annotations?.Measures as PropertyAnnotations_Measures)\n\t\t\t\t\t\t\t?.Unit as unknown as PathAnnotationExpression<string>\n\t\t\t\t\t)?.path ||\n\t\t\t\t\t\"\"\n\t\t\t: \"\";\n\t},\n\n\t/**\n\t * This function is to return the aggregation binding expression of micro chart.\n\t * @param aggregationType Aggregation type of chart (for example, Point for AreaMicrochart)\n\t * @param collection Collection object.\n\t * @param dataPoint Data point info for micro chart.\n\t * @param uiName The @sapui.name in collection model is not accessible here from model hence need to pass it.\n\t * @param dimension Micro chart Dimensions.\n\t * @param measure Measure value for micro chart.\n\t * @param sortOrder SortOrder for micro chart.\n\t * @param measureOrDimensionBar The measure or dimension passed specifically in the case of bar chart.\n\t * @returns Aggregation binding expression for micro chart.\n\t * @private\n\t */\n\tgetAggregationForMicrochart: function (\n\t\taggregationType: string,\n\t\tcollection: MetaModelNavProperty,\n\t\tdataPoint: DataModelObjectPath<DataPointType>,\n\t\tuiName: string,\n\t\tdimension: DataModelObjectPath<PropertyPath> | undefined,\n\t\tmeasure: DataModelObjectPath<Measure>,\n\t\tsortOrder: SortOrderType[],\n\t\tmeasureOrDimensionBar: string\n\t): string {\n\t\tlet path = collection[\"$kind\"] === \"EntitySet\" ? \"/\" : \"\";\n\t\tpath = path + uiName;\n\t\tconst groupId = \"\";\n\t\tlet dataPointCriticallityCalc;\n\t\tlet dataPointCriticallity = dataPoint.targetObject?.Criticality\n\t\t\t? (dataPoint.targetObject?.Criticality as PathAnnotationExpression<string>)?.path\n\t\t\t: \"\";\n\t\tconst currencyOrUnit = MicroChartHelper.getUOMPathForMicrochart(false, measure);\n\t\tlet targetValuePath = \"\";\n\t\tlet dimensionPropertyPath = \"\";\n\t\tif (dimension?.targetObject?.$target?.annotations?.Common?.Text) {\n\t\t\tdimensionPropertyPath = (\n\t\t\t\tdimension?.targetObject?.$target?.annotations?.Common?.Text as unknown as PathAnnotationExpression<string>\n\t\t\t)?.path;\n\t\t} else if (dimension) {\n\t\t\tdimensionPropertyPath = dimension.targetObject?.value as string;\n\t\t}\n\t\tswitch (aggregationType) {\n\t\t\tcase \"Points\":\n\t\t\t\tdataPointCriticallityCalc = dataPoint?.targetObject?.CriticalityCalculation;\n\t\t\t\ttargetValuePath = dataPoint?.targetObject?.TargetValue?.path;\n\t\t\t\tdataPointCriticallity = \"\";\n\t\t\t\tbreak;\n\t\t\tcase \"Columns\":\n\t\t\t\tdataPointCriticallityCalc = dataPoint?.targetObject?.CriticalityCalculation;\n\t\t\t\tbreak;\n\t\t\tcase \"LinePoints\":\n\t\t\t\tdataPointCriticallity = \"\";\n\t\t\t\tbreak;\n\t\t\tcase \"Bars\":\n\t\t\t\tdimensionPropertyPath = \"\";\n\t\t\t\tbreak;\n\t\t}\n\t\tconst functionValue = MicroChartHelper.getSelectParameters(groupId, sortOrder, dataPointCriticallityCalc, dataPointCriticallity, [\n\t\t\tcurrencyOrUnit,\n\t\t\ttargetValuePath,\n\t\t\tdimensionPropertyPath,\n\t\t\tmeasureOrDimensionBar\n\t\t]);\n\n\t\treturn `{path:'${path}'` + `, parameters : {${functionValue}} }`;\n\t},\n\n\tgetCurrencyOrUnit: function (measure: MetaModelPropertyAnnotations): string | undefined {\n\t\tif (measure[`@${MeasuresAnnotationTerms.ISOCurrency}`]) {\n\t\t\treturn (\n\t\t\t\t(measure[`@${MeasuresAnnotationTerms.ISOCurrency}`] as { $Path: string }).$Path ||\n\t\t\t\t(measure[`@${MeasuresAnnotationTerms.ISOCurrency}`] as string)\n\t\t\t);\n\t\t}\n\t\tif (measure[`@${MeasuresAnnotationTerms.Unit}`]) {\n\t\t\treturn (\n\t\t\t\t(measure[`@${MeasuresAnnotationTerms.Unit}`] as { $Path: string }).$Path ||\n\t\t\t\t(measure[`@${MeasuresAnnotationTerms.Unit}`] as string)\n\t\t\t);\n\t\t}\n\t\treturn \"\";\n\t},\n\n\tgetCalendarPattern: function (propertyType: string, annotations: Record<string, unknown>): {} | undefined {\n\t\treturn (\n\t\t\t(annotations[`@${CommonAnnotationTerms.IsCalendarYear}`] && \"yyyy\") ||\n\t\t\t(annotations[`@${CommonAnnotationTerms.IsCalendarQuarter}`] && \"Q\") ||\n\t\t\t(annotations[`@${CommonAnnotationTerms.IsCalendarMonth}`] && \"MM\") ||\n\t\t\t(annotations[`@${CommonAnnotationTerms.IsCalendarWeek}`] && \"ww\") ||\n\t\t\t(annotations[`@${CommonAnnotationTerms.IsCalendarDate}`] && \"yyyyMMdd\") ||\n\t\t\t(annotations[`@${CommonAnnotationTerms.IsCalendarYearMonth}`] && \"yyyyMM\") ||\n\t\t\t(propertyType === \"Edm.Date\" && \"yyyy-MM-dd\") ||\n\t\t\tundefined\n\t\t);\n\t},\n\n\tformatDimension: function (date: string, pattern: string, propertyPath: string): number {\n\t\tconst value = DateFormat.getDateInstance({ pattern }).parse(date, false, true);\n\t\tif (value instanceof Date) {\n\t\t\treturn value.getTime();\n\t\t} else {\n\t\t\tLog.warning(\"Date value could not be determined for \" + propertyPath);\n\t\t}\n\t\treturn 0;\n\t},\n\n\tformatStringDimension: function (value: unknown, pattern: string, propertyPath: string): number {\n\t\tif (pattern in calendarPatternMap) {\n\t\t\tconst matchedValue = value?.toString().match(calendarPatternMap[pattern]);\n\t\t\tif (matchedValue && matchedValue?.length) {\n\t\t\t\treturn MicroChartHelper.formatDimension(matchedValue[0], pattern, propertyPath);\n\t\t\t}\n\t\t}\n\t\tLog.warning(\"Pattern not supported for \" + propertyPath);\n\t\treturn 0;\n\t},\n\n\tgetX: function (propertyPath: string, propertyType: string, annotations?: Record<string, unknown>): string | undefined {\n\t\tconst pattern = annotations && MicroChartHelper.getCalendarPattern(propertyType, annotations);\n\t\tif (pattern && [\"Edm.Date\", \"Edm.String\"].some((type) => type === propertyType)) {\n\t\t\treturn `{parts: [{path: '${propertyPath}', targetType: 'any'}, {value: '${pattern}'}, {value: '${propertyPath}'}], formatter: 'MICROCHARTR.formatStringDimension'}`;\n\t\t}\n\t}\n};\n\nexport default MicroChartHelper;\n"],"mappings":"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","ignoreList":[],"file":"MicroChartHelper-dbg.js"}