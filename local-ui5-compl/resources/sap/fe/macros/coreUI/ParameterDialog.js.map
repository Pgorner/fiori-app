{"version":3,"file":"ParameterDialog.js","names":["ActionParameterDialog","action","actionContext","parameters","parameterValues","entitySetName","view","messageHandler","strictHandlingUtilities","callbacks","ignoreETag","this","buttonLock","actionParameterInfos","result","parameterModel","JSONModel","$displayMode","actionName","isBound","fullyQualifiedName","replace","name","metaModel","getModel","dialogPromise","Promise","resolve","reject","_fnResolve","_fnReject","resourceModel","getResourceModel","appComponent","_exports","_proto","prototype","getParameterEditMode","parameter","annotations","fieldControl","Common","FieldControl","immutable","Core","Immutable","valueOf","computed","Computed","constant","FieldEditMode","ReadOnly","ifElse","isReadOnlyExpression","isDisabledExpression","Disabled","Editable","createFormElement","async","actionMetaPath","getMetaPath","getPath","metaContext","createBindingContext","CommonUtils","getParameterPath","field","isCollection","createMultiField","createField","_jsxs","_Fragment","children","_jsx","Label","id","generate","text","getText","toString","parameterContext","display","FieldHelper","getAPDialogDisplayFormat","getObject","context","MultiValueField","placeholder","UI","Placeholder","items","path","delegate","editMode","width","multipleLines","MultiLineText","required","compileExpression","isActionParameterRequiredExpression","convertTypes","valueHelp","hasValueHelp","undefined","change","handleFieldChange","e","visible","not","equal","getExpressionFromAnnotation","Hidden","ariaLabelledBy","dependents","createParameterDialogValueHelp","MultiValueFieldItem","description","Field","payload","retrieveTextFromValueList","value","AnnotationHelper","format","isMultiLineText","ValueHelp","propertyPath","getTargetNavigationPath","getInvolvedDataModelObjects","substring","lastIndexOf","qualifiers","valueHelpQualifier","validateInput","requiresValidation","typeahead","Popover","MTable","caseSensitive","useCaseSensitiveFilterRequests","entityContainer","Capabilities","FilterFunctions","useAsValueHelp","ValueListWithFixedValues","dialog","createFieldVHDialog","VHDialog","event","fieldPromise","getParameter","getSource","parameterInfo","find","actionParameterInfo","validationPromise","removeMessagesForParameter","defaultParametersValues","hasError","error","ActionRuntime","_addMessageForActionParameter","message","messages","Messaging","getMessageModel","getData","controlId","relevantMessages","filter","msg","getControlIds","some","split","includes","removeMessages","getFormElements","formElements","createDialog","actionParameters","slice","dialogContentsWithParameters","all","map","bind","dialogContents","dialogContent","registerActionParameterInfo","endButton","Button","press","close","Dialog","title","getTitleText","label","escapeHandler","afterClose","beforeOpen","afterOpen","initialFocus","beginButton","isCreateAction","getBeginButtonLabel","onApply","type","content","SimpleForm","binding","actionLabel","key","defaultKey","getOverriddenText","boundActionName","pop","suffixResourceKey","checkIfResourceKeyExists","innerParameters","getObjectBinding","getParameterContext","newValuesDictionary","Object","assign","values","getProperty","Key","isNewValue","BusyLocker","lock","validateProperties","unlock","setProperty","UiModelConstants","DocumentModified","removeTransitionMessages","errorOnFirstIteration","failedContexts","executeActionOnApply","isDialogMessage","manageMessageOnApply","isOpen","updateDialogBindingContextForError","aContexts","afterOnApply","contexts","length","warningContext","infoContext","erroneousCtx","ctx","getMessages","getType","MessageType","Warning","Information","Error","contextToUse","setBindingContext","executeAction","status","is412Executed","strictHandlingTransitionFails","delaySuccessMessages","concat","fail","oAction","getContext","isDialogOpen","addMessages","showMessageDialog","isActionParameterDialogOpen","forceShowUIElement","onBeforeShowMessage","showMessageParametersIn","beforeShowingMessage","bGrouped","strictHandlingPromises","messageHandling","hasTransitionErrorsOrWarnings","aSelectedContexts","sActionName","showGenericErrorMessageForChangeSet","showMessages","messagePageNavigationCallback","aMessages","showMessageParameters","control","getParent","clearStrictWarningMessages","strictHandlingWarningMessages","processedMessageIds","Set","isLocked","after412","results","ODataOperation","execute","modelMessages","failedTransitionsWith412","attachEvent","attachEventOnce","openDialog","owner","setUserDefaults","setModels","addDependent","setOperationDefaultValues","open","setModel","bindElement","model","_event","getParameterDefaultValue","bindingParameter","operationBinding","parameterModelData","paramName","defaultValue","ParameterDefaultValue","isPathAnnotationExpression","pathForContext","startsWith","paramValue","requestSingletonProperty","requestProperty","noPossibleValue","Log","latePropertyError","getManifestFunctionValues","bindingContext","getBindingContext","defaultValuesExtensionFunction","FPMHelper","loadModuleAndCallMethod","getPreDefinedValues","boundFunctionName","DefaultValuesFunction","requestContextObject","functionParams","operations","callBoundFunction","requestObject","contextValues","promises","defaultValues","functionValues","manifestFunctionValues","firstVisibleParameter","getVisible","firstField","focusInfo","getFocusInfo","targetInfo","silent","focus","forEach","push","isMultiValue","setParameter","i","parameterName","parameterProvidedValue","element","hasOwnProperty","setOfFunctionValues","index","size","Array","from","refresh","MessageBox","warning","actions","Action","OK","emphasizedAction","onClose","extensionAPI","getController","getExtensionAPI","contentWidth","origin","getEndButton","FELibrary","Constants","CancelActionDialog","destroy"],"sources":["./ParameterDialog.tsx"],"sourcesContent":["import type { PrimitiveType } from \"@sap-ux/vocabularies-types\";\nimport { type Action, type ActionParameter } from \"@sap-ux/vocabularies-types\";\nimport { type PropertyAnnotations_Core } from \"@sap-ux/vocabularies-types/vocabularies/Core_Edm\";\nimport Log from \"sap/base/Log\";\nimport {\n\tcompileExpression,\n\tconstant,\n\tequal,\n\tgetExpressionFromAnnotation,\n\tifElse,\n\tnot,\n\ttype BindingToolkitExpression\n} from \"sap/fe/base/BindingToolkit\";\nimport type { ActionParameterInfo } from \"sap/fe/core/ActionRuntime\";\nimport ActionRuntime from \"sap/fe/core/ActionRuntime\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type ResourceModel from \"sap/fe/core/ResourceModel\";\nimport BusyLocker from \"sap/fe/core/controllerextensions/BusyLocker\";\nimport type MessageHandler from \"sap/fe/core/controllerextensions/MessageHandler\";\nimport type { OperationResult } from \"sap/fe/core/controllerextensions/editFlow/ODataOperation\";\nimport ODataOperation from \"sap/fe/core/controllerextensions/editFlow/ODataOperation\";\nimport UiModelConstants from \"sap/fe/core/controllerextensions/editFlow/editFlowConstants\";\nimport type { ShowActionDialogParameters } from \"sap/fe/core/controllerextensions/editFlow/operations/facade\";\nimport operations from \"sap/fe/core/controllerextensions/editFlow/operations/facade\";\nimport type { ShowMessageParameters } from \"sap/fe/core/controllerextensions/messageHandler/messageHandling\";\nimport messageHandling from \"sap/fe/core/controllerextensions/messageHandler/messageHandling\";\nimport { convertTypes, getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport FPMHelper from \"sap/fe/core/helpers/FPMHelper\";\nimport { getResourceModel } from \"sap/fe/core/helpers/ResourceModelHelper\";\nimport { generate } from \"sap/fe/core/helpers/StableIdHelper\";\nimport { isPathAnnotationExpression } from \"sap/fe/core/helpers/TypeGuards\";\nimport FELibrary from \"sap/fe/core/library\";\nimport type { StrictHandlingUtilities } from \"sap/fe/core/operationsHelper\";\nimport { getTargetNavigationPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { isActionParameterRequiredExpression, isDisabledExpression, isReadOnlyExpression } from \"sap/fe/core/templating/FieldControlHelper\";\nimport { hasValueHelp, isMultiLineText } from \"sap/fe/core/templating/PropertyHelper\";\nimport FieldHelper from \"sap/fe/macros/field/FieldHelper\";\nimport { requiresValidation, useCaseSensitiveFilterRequests } from \"sap/fe/macros/internal/valuehelp/ValueHelpTemplating\";\nimport type ListReportExtensionAPI from \"sap/fe/templates/ListReport/ExtensionAPI\";\nimport type ObjectPageExtensionAPI from \"sap/fe/templates/ObjectPage/ExtensionAPI\";\nimport Button from \"sap/m/Button\";\nimport type { Dialog$AfterCloseEvent, Dialog$BeforeOpenEvent } from \"sap/m/Dialog\";\nimport Dialog from \"sap/m/Dialog\";\nimport Label from \"sap/m/Label\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport type Control from \"sap/ui/core/Control\";\nimport Messaging from \"sap/ui/core/Messaging\";\nimport type Message from \"sap/ui/core/message/Message\";\nimport MessageType from \"sap/ui/core/message/MessageType\";\nimport SimpleForm from \"sap/ui/layout/form/SimpleForm\";\nimport type { Field$ChangeEvent } from \"sap/ui/mdc/Field\";\nimport Field from \"sap/ui/mdc/Field\";\nimport type { MultiValueField$ChangeEvent } from \"sap/ui/mdc/MultiValueField\";\nimport MultiValueField from \"sap/ui/mdc/MultiValueField\";\nimport ValueHelp from \"sap/ui/mdc/ValueHelp\";\nimport FieldEditMode from \"sap/ui/mdc/enums/FieldEditMode\";\nimport MultiValueFieldItem from \"sap/ui/mdc/field/MultiValueFieldItem\";\nimport VHDialog from \"sap/ui/mdc/valuehelp/Dialog\";\nimport Popover from \"sap/ui/mdc/valuehelp/Popover\";\nimport MTable from \"sap/ui/mdc/valuehelp/content/MTable\";\nimport type Context from \"sap/ui/model/Context\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport AnnotationHelper from \"sap/ui/model/odata/v4/AnnotationHelper\";\nimport type { default as ODataV4Context } from \"sap/ui/model/odata/v4/Context\";\nimport type ODataContextBinding from \"sap/ui/model/odata/v4/ODataContextBinding\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\n\ntype ParameterDefaultValue = { paramName: string; value: unknown; latePropertyError?: boolean; noPossibleValue?: boolean };\n\ntype FormElementType = [Label, Field | MultiValueField];\n\ntype DialogContentTypes = {\n\tformElements: FormElementType;\n\tparameter: ActionParameter;\n};\nexport default class ActionParameterDialog {\n\tprivate readonly dialogPromise: Promise<PromiseSettledResult<OperationResult>[]>;\n\n\tprivate _fnResolve!: (resolveValue: PromiseSettledResult<OperationResult>[]) => void;\n\n\tprivate _fnReject!: (error: unknown) => void;\n\n\tprivate dialog: Dialog | undefined;\n\n\tprivate readonly actionName: string;\n\n\tprivate buttonLock = false;\n\n\tprivate readonly metaModel: ODataMetaModel;\n\n\tprivate actionParameterInfos: (ActionParameterInfo & { parameter: ActionParameter })[] = [];\n\n\tprivate result: PromiseSettledResult<OperationResult>[] = [];\n\n\tprivate parameterModel: JSONModel = new JSONModel({\n\t\t$displayMode: {}\n\t});\n\n\tprivate readonly resourceModel: ResourceModel;\n\n\tconstructor(\n\t\tprivate action: Action,\n\t\tprivate actionContext: Context,\n\t\tprivate parameters: ShowActionDialogParameters,\n\t\tprivate parameterValues: Record<string, unknown>[] | undefined,\n\t\tprivate entitySetName: string | undefined,\n\t\tprivate view: FEView | null,\n\t\tprivate messageHandler: MessageHandler,\n\t\tprivate strictHandlingUtilities: StrictHandlingUtilities,\n\t\tprivate callbacks: {\n\t\t\tbeforeShowingMessage: (\n\t\t\t\tmParameters: ShowActionDialogParameters,\n\t\t\t\taContexts: ODataV4Context[],\n\t\t\t\toDialog: Dialog | undefined,\n\t\t\t\tmessages: Message[],\n\t\t\t\tshowMessageParametersIn: ShowMessageParameters,\n\t\t\t\tshowGenericErrorMessageForChangeSet: boolean,\n\t\t\t\tisActionSuccessful?: boolean\n\t\t\t) => ShowMessageParameters;\n\t\t},\n\n\t\tprivate ignoreETag?: boolean\n\t) {\n\t\tthis.actionName = this.action.isBound\n\t\t\t? this.action.fullyQualifiedName.replace(/\\(.*\\)$/g, \"\") // remove the part related to the overlay\n\t\t\t: this.action.name;\n\t\tthis.metaModel = actionContext.getModel();\n\t\tthis.dialogPromise = new Promise((resolve, reject) => {\n\t\t\tthis._fnResolve = resolve;\n\t\t\tthis._fnReject = reject;\n\t\t});\n\t\tthis.resourceModel = this.view ? getResourceModel(this.view) : getResourceModel(this.parameters.appComponent);\n\t}\n\n\t/**\n\t * Gets binding expression of the edit mode property for a parameter.\n\t * @param parameter The parameter\n\t * @returns The binding expression.\n\t */\n\tprivate getParameterEditMode(parameter: ActionParameter): BindingToolkitExpression<FieldEditMode> {\n\t\tconst annotations = parameter.annotations,\n\t\t\tfieldControl = annotations.Common?.FieldControl,\n\t\t\timmutable = (annotations.Core as unknown as PropertyAnnotations_Core)?.Immutable?.valueOf(),\n\t\t\tcomputed = (annotations.Core as unknown as PropertyAnnotations_Core)?.Computed?.valueOf();\n\n\t\tif (immutable || computed) {\n\t\t\treturn constant(FieldEditMode.ReadOnly);\n\t\t} else if (fieldControl) {\n\t\t\treturn ifElse(\n\t\t\t\tisReadOnlyExpression(parameter),\n\t\t\t\tFieldEditMode.ReadOnly,\n\t\t\t\tifElse(isDisabledExpression(parameter), FieldEditMode.Disabled, FieldEditMode.Editable)\n\t\t\t);\n\t\t}\n\t\treturn constant(FieldEditMode.Editable);\n\t}\n\n\t/**\n\t * Creates the form element control for a parameter.\n\t * @param parameter The parameter\n\t * @returns The form element control.\n\t */\n\tprivate async createFormElement(parameter: ActionParameter): Promise<FormElementType> {\n\t\tconst actionMetaPath = this.metaModel.getMetaPath(this.actionContext.getPath());\n\t\tconst metaContext = this.metaModel.createBindingContext(CommonUtils.getParameterPath(actionMetaPath, parameter.name))!;\n\t\tconst field = await (parameter.isCollection\n\t\t\t? this.createMultiField(parameter, metaContext)\n\t\t\t: this.createField(parameter, metaContext));\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Label\n\t\t\t\t\tid={generate([\"APD_\", parameter.name, \"Label\"])}\n\t\t\t\t\ttext={\n\t\t\t\t\t\tparameter.annotations.Common?.Label\n\t\t\t\t\t\t\t? this.resourceModel.getText(parameter.annotations.Common.Label.toString())\n\t\t\t\t\t\t\t: parameter.name\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t{field}\n\t\t\t</>\n\t\t);\n\t}\n\n\t/**\n\t * Creates the multi field control for a parameter.\n\t * @param parameter The parameter\n\t * @param parameterContext The parameter context\n\t * @returns The multi value field control.\n\t */\n\tprivate async createMultiField(parameter: ActionParameter, parameterContext: Context): Promise<MultiValueField> {\n\t\tconst display = await FieldHelper.getAPDialogDisplayFormat(parameterContext.getObject(), { context: parameterContext });\n\t\treturn (\n\t\t\t<MultiValueField\n\t\t\t\tid={generate([\"APD_\", parameter.name])}\n\t\t\t\tplaceholder={parameter.annotations.UI?.Placeholder}\n\t\t\t\titems={{ path: `mvfview>/${parameter.name}` }}\n\t\t\t\tdelegate={{ name: \"sap/fe/core/controls/MultiValueParameterDelegate\" }}\n\t\t\t\tdisplay={display}\n\t\t\t\teditMode={this.getParameterEditMode(parameter)}\n\t\t\t\twidth=\"100%\"\n\t\t\t\tmultipleLines={parameter.annotations.UI?.MultiLineText?.valueOf() === true}\n\t\t\t\trequired={compileExpression(isActionParameterRequiredExpression(parameter, this.action, convertTypes(this.metaModel)))}\n\t\t\t\tvalueHelp={hasValueHelp(parameter) ? generate([this.actionName, parameter.name]) : undefined}\n\t\t\t\tchange={async (e): Promise<void> => this.handleFieldChange(e, parameter)}\n\t\t\t\tvisible={compileExpression(not(equal(getExpressionFromAnnotation(parameter.annotations?.UI?.Hidden), true)))}\n\t\t\t\tariaLabelledBy={[generate([\"APD_\", parameter.name, \"Label\"])]}\n\t\t\t\tdependents={this.createParameterDialogValueHelp(parameter, parameterContext)}\n\t\t\t>\n\t\t\t\t<MultiValueFieldItem key=\"{path: 'mvfview>Key', type:'sap.ui.model.type.String'}\" description=\"{mvfview>Desc}\" />\n\t\t\t</MultiValueField>\n\t\t);\n\t}\n\n\t/**\n\t * Creates the field control for a parameter.\n\t * @param parameter The parameter\n\t * @param parameterContext The parameter context\n\t * @returns The field control.\n\t */\n\tprivate async createField(parameter: ActionParameter, parameterContext: Context): Promise<Field> {\n\t\tconst display = await FieldHelper.getAPDialogDisplayFormat(parameterContext.getObject(), { context: parameterContext });\n\t\treturn (\n\t\t\t<Field\n\t\t\t\tdelegate={{ name: \"sap/fe/macros/field/FieldBaseDelegate\", payload: { retrieveTextFromValueList: true } }}\n\t\t\t\tid={generate([\"APD_\", parameter.name])}\n\t\t\t\tvalue={AnnotationHelper.format(parameterContext.getObject(), { context: parameterContext })}\n\t\t\t\tplaceholder={parameter.annotations.UI?.Placeholder}\n\t\t\t\tdisplay={display}\n\t\t\t\teditMode={this.getParameterEditMode(parameter)}\n\t\t\t\twidth=\"100%\"\n\t\t\t\tmultipleLines={isMultiLineText(parameter)}\n\t\t\t\trequired={compileExpression(isActionParameterRequiredExpression(parameter, this.action, convertTypes(this.metaModel)))}\n\t\t\t\tchange={async (e): Promise<void> => this.handleFieldChange(e, parameter)}\n\t\t\t\tvalueHelp={hasValueHelp(parameter) ? generate([this.actionName, parameter.name]) : undefined}\n\t\t\t\tdependents={this.createParameterDialogValueHelp(parameter, parameterContext)}\n\t\t\t\tvisible={compileExpression(\n\t\t\t\t\tifElse(\n\t\t\t\t\t\tparameter.name === \"ResultIsActiveEntity\",\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tnot(equal(getExpressionFromAnnotation(parameter.annotations?.UI?.Hidden), true))\n\t\t\t\t\t)\n\t\t\t\t)}\n\t\t\t\tariaLabelledBy={[generate([\"APD_\", parameter.name, \"Label\"])]}\n\t\t\t/>\n\t\t);\n\t}\n\n\t/**\n\t * Creates the valueHelp  for a parameter.\n\t * @param parameter The parameter\n\t * @param parameterContext The parameter context\n\t * @returns A valueHelp if the parameter has a VH, undefined otherwise\n\t */\n\tprivate createParameterDialogValueHelp(parameter: ActionParameter, parameterContext: Context): ValueHelp | undefined {\n\t\tif (!hasValueHelp(parameter)) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn (\n\t\t\t<ValueHelp\n\t\t\t\tid={generate([this.actionName, parameter.name])}\n\t\t\t\tdelegate={{\n\t\t\t\t\tname: \"sap/fe/macros/valuehelp/ValueHelpDelegate\",\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tpropertyPath: this.action.isBound\n\t\t\t\t\t\t\t? `${getTargetNavigationPath(getInvolvedDataModelObjects<ActionParameter>(parameterContext))}/${\n\t\t\t\t\t\t\t\t\tthis.actionName\n\t\t\t\t\t\t\t  }/${parameter.name}`\n\t\t\t\t\t\t\t: `/${this.action.name.substring(this.action.name.lastIndexOf(\".\") + 1)}/${parameter.name}`,\n\t\t\t\t\t\tqualifiers: {},\n\t\t\t\t\t\tvalueHelpQualifier: \"\"\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tvalidateInput={requiresValidation(parameter)}\n\t\t\t\ttypeahead={\n\t\t\t\t\t<Popover>\n\t\t\t\t\t\t<MTable\n\t\t\t\t\t\t\tid={generate([this.actionName, parameter.name, \"Popover\", \"qualifier\"])}\n\t\t\t\t\t\t\tcaseSensitive={\n\t\t\t\t\t\t\t\tthis.action.isBound\n\t\t\t\t\t\t\t\t\t? useCaseSensitiveFilterRequests(\n\t\t\t\t\t\t\t\t\t\t\tgetInvolvedDataModelObjects<ActionParameter>(parameterContext),\n\t\t\t\t\t\t\t\t\t\t\t(convertTypes(this.metaModel).entityContainer.annotations.Capabilities\n\t\t\t\t\t\t\t\t\t\t\t\t?.FilterFunctions as unknown as string[]) ?? []\n\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t\t: false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tuseAsValueHelp={!!parameter.annotations.Common?.ValueListWithFixedValues}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Popover>\n\t\t\t\t}\n\t\t\t\tdialog={this.createFieldVHDialog(parameter)}\n\t\t\t></ValueHelp>\n\t\t);\n\t}\n\n\t/**\n\t * Creates the ValueHelp dialog for a parameter.\n\t * @param parameter The parameter\n\t * @returns A dialog if the parameter has a VH, undefined otherwise\n\t */\n\tprivate createFieldVHDialog(parameter: ActionParameter): VHDialog | undefined {\n\t\tif (parameter.annotations.Common?.ValueListWithFixedValues?.valueOf() !== true) {\n\t\t\treturn <VHDialog />;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Handles the field change event for a parameter.\n\t * @param event The ui5 event\n\t * @param parameter The parameter\n\t * @returns Promise.\n\t */\n\tprivate async handleFieldChange(event: MultiValueField$ChangeEvent | Field$ChangeEvent, parameter: ActionParameter): Promise<void> {\n\t\tconst fieldPromise = (event as Field$ChangeEvent).getParameter(\"promise\");\n\t\tconst field = (event as Field$ChangeEvent).getSource() as Field | MultiValueField;\n\t\tconst parameterInfo = this.actionParameterInfos.find((actionParameterInfo) => actionParameterInfo.field === field);\n\t\tif (!parameterInfo) {\n\t\t\treturn;\n\t\t}\n\t\tparameterInfo.validationPromise = fieldPromise;\n\t\t// field value is being changed, thus existing messages related to that field are not valid anymore\n\t\tthis.removeMessagesForParameter(parameter);\n\t\ttry {\n\t\t\tparameterInfo.value = await fieldPromise;\n\t\t\tthis.parameters.defaultParametersValues[parameterInfo.parameter.name] = parameterInfo.value;\n\t\t\tparameterInfo.hasError = false;\n\t\t} catch (error) {\n\t\t\tdelete parameterInfo.value;\n\t\t\tparameterInfo.hasError = true;\n\t\t\tActionRuntime._addMessageForActionParameter([\n\t\t\t\t{\n\t\t\t\t\tactionParameterInfo: parameterInfo,\n\t\t\t\t\tmessage: (error as { message: string }).message\n\t\t\t\t}\n\t\t\t]);\n\t\t}\n\t}\n\n\t/**\n\t * Removes the messages for a parameter.\n\t * @param parameter The parameter\n\t */\n\tprivate removeMessagesForParameter(parameter: ActionParameter): void {\n\t\tconst messages = Messaging.getMessageModel().getData();\n\t\tconst controlId = generate([\"APD_\", parameter.name]);\n\t\t// also remove messages assigned to inner controls, but avoid removing messages for different parameters (with name being substring of another parameter name)\n\t\tconst relevantMessages = messages.filter((msg: Message) =>\n\t\t\tmsg.getControlIds().some((id: string) => controlId.split(\"-\").includes(id))\n\t\t);\n\t\tMessaging.removeMessages(relevantMessages);\n\t}\n\n\t/**\n\t * gets the FormElements along with the array of parameters.\n\t * @param parameter The parameter\n\t * @returns The parameter information along with the FormElements.\n\t */\n\tprivate async getFormElements(parameter: ActionParameter): Promise<DialogContentTypes> {\n\t\tconst formElements = await this.createFormElement(parameter);\n\t\treturn {\n\t\t\tformElements: formElements,\n\t\t\tparameter: parameter\n\t\t};\n\t}\n\n\t/**\n\t * Creates the action parameter dialog.\n\t * @returns The dialog.\n\t */\n\tasync createDialog(): Promise<Dialog> {\n\t\tconst actionParameters = this.action.isBound ? this.action.parameters.slice(1) : this.action.parameters;\n\t\t// In case of deffered create we have no view, so we need to get the resource model from the app component\n\n\t\tconst dialogContentsWithParameters = await Promise.all(actionParameters.map(this.getFormElements.bind(this)));\n\t\tconst dialogContents = dialogContentsWithParameters.map((dialogContent) => {\n\t\t\treturn dialogContent.formElements;\n\t\t});\n\t\tthis.registerActionParameterInfo(dialogContentsWithParameters);\n\t\tconst endButton = (\n\t\t\t<Button\n\t\t\t\tid={generate([\"fe\", \"APD_\", this.actionName, \"Action\", \"Cancel\"])}\n\t\t\t\ttext={this.resourceModel.getText(\"C_COMMON_ACTION_PARAMETER_DIALOG_CANCEL\")}\n\t\t\t\tpress={this.close.bind(this)}\n\t\t\t/>\n\t\t);\n\t\tconst dialog = (\n\t\t\t<Dialog\n\t\t\t\ttitle={this.getTitleText(this.parameters.label)}\n\t\t\t\tid={generate([\"fe\", \"APD_\", this.actionName])}\n\t\t\t\tescapeHandler={this.close.bind(this)}\n\t\t\t\tafterClose={this.afterClose.bind(this)}\n\t\t\t\tbeforeOpen={this.beforeOpen.bind(this)}\n\t\t\t\tafterOpen={(): void => {\n\t\t\t\t\tthis.afterOpen();\n\t\t\t\t}}\n\t\t\t\tinitialFocus={endButton} // The initial focus is set programmatically in afterOpen, to avoid opening the VH dialog\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tbeginButton: (\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tid={generate([\"fe\", \"APD_\", this.actionName, \"Action\", \"Ok\"])}\n\t\t\t\t\t\t\ttext={\n\t\t\t\t\t\t\t\tthis.parameters.isCreateAction\n\t\t\t\t\t\t\t\t\t? this.resourceModel.getText(\"C_TRANSACTION_HELPER_SAPFE_ACTION_CREATE_BUTTON_CONTINUE\")\n\t\t\t\t\t\t\t\t\t: this.getBeginButtonLabel(this.parameters.label)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpress={(): void => {\n\t\t\t\t\t\t\t\tthis.onApply.bind(this)();\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\ttype=\"Emphasized\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t),\n\t\t\t\t\tendButton: endButton,\n\t\t\t\t\tcontent: (\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t// @ts-ignore (unknown property binding)\n\t\t\t\t\t\t<SimpleForm binding={\"$Parameter\"}>{{ content: dialogContents }}</SimpleForm>\n\t\t\t\t\t)\n\t\t\t\t}}\n\t\t\t</Dialog>\n\t\t);\n\t\tthis.dialog = dialog;\n\t\treturn dialog;\n\t}\n\n\t/**\n\t * Gets the label for the begin button of the dialog.\n\t * @param actionLabel The label of the action\n\t * @returns The label.\n\t */\n\tprivate getBeginButtonLabel(actionLabel: string | undefined): string {\n\t\tconst key = \"ACTION_PARAMETER_DIALOG_ACTION_NAME\";\n\t\tconst defaultKey = \"C_COMMON_DIALOG_OK\";\n\t\treturn this.getOverriddenText(key, defaultKey, actionLabel);\n\t}\n\n\t/**\n\t * Gets the title of the dialog.\n\t * @param actionLabel The label of the action\n\t * @returns The title.\n\t */\n\tprivate getTitleText(actionLabel: string | undefined): string {\n\t\tconst key = \"ACTION_PARAMETER_DIALOG_ACTION_TITLE\";\n\t\tconst defaultKey = \"C_OPERATIONS_ACTION_PARAMETER_DIALOG_TITLE\";\n\t\treturn this.getOverriddenText(key, defaultKey, actionLabel);\n\t}\n\n\t/**\n\t * Gets an overridden text.\n\t * @param key The key for an overridden text\n\t * @param defaultKey The default key for the text\n\t * @param actionLabel The label of the action\n\t * @returns The overridden text or label.\n\t */\n\tprivate getOverriddenText(key: string, defaultKey: string, actionLabel?: string): string {\n\t\tlet boundActionName = this.actionName;\n\t\tboundActionName = boundActionName.split(\".\").pop() ?? boundActionName;\n\t\tconst suffixResourceKey = boundActionName && this.entitySetName ? `${this.entitySetName}|${boundActionName}` : \"\";\n\t\tif (actionLabel) {\n\t\t\tif (this.resourceModel.checkIfResourceKeyExists(`${key}|${suffixResourceKey}`)) {\n\t\t\t\treturn this.resourceModel.getText(key, undefined, suffixResourceKey);\n\t\t\t} else if (this.resourceModel.checkIfResourceKeyExists(`${key}|${this.entitySetName}`)) {\n\t\t\t\treturn this.resourceModel.getText(key, undefined, `${this.entitySetName}`);\n\t\t\t} else if (this.resourceModel.checkIfResourceKeyExists(`${key}`)) {\n\t\t\t\treturn this.resourceModel.getText(key);\n\t\t\t} else {\n\t\t\t\treturn actionLabel;\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.resourceModel.getText(defaultKey);\n\t\t}\n\t}\n\n\t/**\n\t * Manages the press event of the begin button of the dialog.\n\t * @returns The promise.\n\t */\n\tprivate async onApply(): Promise<void> {\n\t\t// prevent multiple press events. The BusyLocker is not fast enough. (BCP: 2370130210)\n\t\tif (this.buttonLock || !this.dialog) {\n\t\t\treturn;\n\t\t}\n\t\tconst dialog = this.dialog;\n\n\t\tconst innerParameters = { ...this.parameters };\n\t\tconst parameterContext = (dialog.getObjectBinding() as ODataContextBinding | undefined)?.getParameterContext();\n\t\tconst newValuesDictionary = Object.assign(\n\t\t\t{},\n\t\t\t...this.actionParameterInfos.map((actionParameterInfos) => {\n\t\t\t\tconst parameter = actionParameterInfos.parameter;\n\t\t\t\tconst value = parameter.isCollection\n\t\t\t\t\t? Object.values((dialog.getModel(\"mvfview\") as JSONModel).getProperty(`/${parameter.name}`) ?? {}).map(\n\t\t\t\t\t\t\t(value) => (value as { Key?: PrimitiveType })?.Key\n\t\t\t\t\t  )\n\t\t\t\t\t: parameterContext?.getProperty(parameter.name);\n\t\t\t\treturn { [parameter.name]: value };\n\t\t\t})\n\t\t) as Record<string, PrimitiveType>;\n\t\tconst isNewValue = Object.values(newValuesDictionary).some((value) => !!value);\n\n\t\tinnerParameters.label = this.parameters.label;\n\n\t\tthis.buttonLock = true;\n\t\tBusyLocker.lock(dialog);\n\n\t\t// validate the action parameters\n\t\tif (!(await ActionRuntime.validateProperties(this.actionParameterInfos, this.resourceModel))) {\n\t\t\tBusyLocker.unlock(this.dialog);\n\t\t\tthis.buttonLock = false;\n\t\t\treturn;\n\t\t}\n\t\t//Save the values of the parameters\n\t\tinnerParameters.defaultParametersValues = newValuesDictionary;\n\n\t\tthis.parameters.appComponent.getModel(\"ui\").setProperty(UiModelConstants.DocumentModified, isNewValue);\n\t\t// Due to using the search and value helps on the action dialog transient messages could appear\n\t\t// we need an UX design for those to show them to the user - for now remove them before continuing\n\t\tthis.messageHandler.removeTransitionMessages();\n\n\t\tconst { errorOnFirstIteration, failedContexts } = await this.executeActionOnApply(innerParameters);\n\n\t\tif (errorOnFirstIteration) {\n\t\t\tconst isDialogMessage = await this.manageMessageOnApply(failedContexts);\n\t\t\tthis.buttonLock = false; //needed if the action fails with an error popup and this one is canceled (Journey: 412WarningHandling)\n\t\t\t// In case of backend validation error(s?), message shall not be shown in message dialog but next to the field on parameter dialog, which should\n\t\t\t// stay open in this case => in this case, we must not resolve or reject the promise controlling the parameter dialog.\n\t\t\t// In all other cases (e.g. other backend errors or user cancellation), the promise controlling the parameter dialog needs to be rejected to allow\n\t\t\t// callers to react. (Example: If creation in backend after navigation to transient context fails, back navigation needs to be triggered)\n\t\t\tif (isDialogMessage) {\n\t\t\t\tif (dialog.isOpen()) {\n\t\t\t\t\t// do nothing, do not reject promise here\n\t\t\t\t\t// We do not close the APM dialog if user enters a wrong value in of the fields that results in an error from the backend.\n\t\t\t\t\t// The user can close the message dialog and the APM dialog would still be open on which he could enter a new value and trigger the action again.\n\t\t\t\t\t// Earlier we were rejecting the promise on error here, and the call stack was destroyed as the promise was rejected and returned to EditFlow invoke action.\n\t\t\t\t\t// But since the APM dialog was still open, a new promise was resolved in case the user retried the action and the object was created, but the navigation to object page was not taking place.\n\t\t\t\t\tthis.updateDialogBindingContextForError(this.parameters.aContexts);\n\t\t\t\t} else {\n\t\t\t\t\tthis._fnReject(errorOnFirstIteration);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.afterOnApply();\n\t}\n\n\t/**\n\t * Change the binding context of the dialog to one with priority message.\n\t *\n\t * On initial action execution, we might have bound messages with any selected contexts as target apart from the dialog's initial context.\n\t * We change the binding context of dialog for the parameter fields' to get the valid value state from the priority bound message.\n\t * @param contexts Array of selected contexts.\n\t */\n\tupdateDialogBindingContextForError(contexts: ODataV4Context[]): void {\n\t\tif (contexts.length < 2) {\n\t\t\t// We would need to switch the binding context of the dialog only when we have multiple contexts for executing the action.\n\t\t\treturn;\n\t\t}\n\n\t\tlet warningContext: ODataV4Context | undefined, infoContext: ODataV4Context | undefined;\n\t\tconst erroneousCtx = contexts.find((ctx) => {\n\t\t\tconst messages = ctx.getMessages();\n\t\t\treturn messages.some((msg) => {\n\t\t\t\t// We hold first context with warning or info messages.\n\t\t\t\twarningContext = !warningContext && msg.getType() === MessageType.Warning ? ctx : undefined;\n\t\t\t\tinfoContext = !infoContext && msg.getType() === MessageType.Information ? ctx : undefined;\n\t\t\t\t// Error is found!!! We shall exit.\n\t\t\t\treturn msg.getType() === MessageType.Error;\n\t\t\t});\n\t\t});\n\t\tconst contextToUse = erroneousCtx ?? warningContext ?? infoContext;\n\n\t\tif (contextToUse) {\n\t\t\tthis.dialog?.setBindingContext(contextToUse);\n\t\t}\n\t}\n\n\t/**\n\t * Manages the execution(s) of the action.\n\t * @param innerParameters The parameters of the action\n\t * @returns The promise.\n\t */\n\tprivate async executeActionOnApply(\n\t\tinnerParameters: ShowActionDialogParameters\n\t): Promise<{ errorOnFirstIteration: unknown; failedContexts: ODataV4Context[] }> {\n\t\tlet errorOnFirstIteration: unknown;\n\t\tlet failedContexts: ODataV4Context[] = [];\n\t\tconst dialog = this.dialog!;\n\n\t\t//Execute the action\n\t\ttry {\n\t\t\tthis.result = await this.executeAction(innerParameters, this.parameters.aContexts, false);\n\t\t\tif (this.result.find((result) => result.status === \"rejected\")) {\n\t\t\t\tthrow new Error(\"At least one action failed\");\n\t\t\t}\n\t\t\tthis.close();\n\t\t} catch (error: unknown) {\n\t\t\tif (this.strictHandlingUtilities.is412Executed && this.strictHandlingUtilities.strictHandlingTransitionFails.length) {\n\t\t\t\tthis.strictHandlingUtilities.delaySuccessMessages = this.strictHandlingUtilities.delaySuccessMessages.concat(\n\t\t\t\t\tMessaging.getMessageModel().getData()\n\t\t\t\t);\n\t\t\t}\n\t\t\terrorOnFirstIteration = error;\n\t\t}\n\n\t\t//Retry the action execution in case of strict handling and if there is at least one failed context (give it another try to succeed)\n\t\tif (this.strictHandlingUtilities.is412Executed && this.strictHandlingUtilities.strictHandlingTransitionFails.length) {\n\t\t\ttry {\n\t\t\t\tfailedContexts = this.strictHandlingUtilities.strictHandlingTransitionFails.map(\n\t\t\t\t\t(fail) => fail.oAction.getContext() as ODataV4Context\n\t\t\t\t);\n\t\t\t\tinnerParameters.aContexts = failedContexts;\n\t\t\t\tthis.result = await this.executeAction(innerParameters, this.parameters.aContexts, true);\n\t\t\t\tif (this.result.find((result) => result.status === \"rejected\")) {\n\t\t\t\t\tthrow new Error(\"At least one action failed on the second iteration\");\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\tconst isDialogOpen = dialog.isOpen();\n\t\t\t\tif (this.strictHandlingUtilities.is412Executed && this.strictHandlingUtilities.strictHandlingTransitionFails.length) {\n\t\t\t\t\tMessaging.addMessages(this.strictHandlingUtilities.delaySuccessMessages);\n\t\t\t\t}\n\t\t\t\tawait this.messageHandler.showMessageDialog({\n\t\t\t\t\tisActionParameterDialogOpen: isDialogOpen,\n\t\t\t\t\tforceShowUIElement: isDialogOpen,\n\t\t\t\t\tonBeforeShowMessage: (messages: Message[], showMessageParametersIn: ShowMessageParameters) => {\n\t\t\t\t\t\treturn this.callbacks.beforeShowingMessage(\n\t\t\t\t\t\t\tinnerParameters,\n\t\t\t\t\t\t\tthis.parameters.aContexts,\n\t\t\t\t\t\t\tdialog,\n\t\t\t\t\t\t\tmessages,\n\t\t\t\t\t\t\tshowMessageParametersIn,\n\t\t\t\t\t\t\t!!this.parameters.bGrouped &&\n\t\t\t\t\t\t\t\t(!!this.strictHandlingUtilities.strictHandlingPromises.length ||\n\t\t\t\t\t\t\t\t\tmessageHandling.hasTransitionErrorsOrWarnings())\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\taSelectedContexts: undefined, // not used at all\n\t\t\t\t\tsActionName: this.parameters.label\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\terrorOnFirstIteration,\n\t\t\tfailedContexts\n\t\t};\n\t}\n\n\t/**\n\t * Manages the messages of the action.\n\t * @param failedContexts The contexts of the failed action\n\t * @returns The promise.\n\t */\n\tprivate async manageMessageOnApply(failedContexts: ODataV4Context[]): Promise<boolean> {\n\t\tconst dialog = this.dialog!;\n\t\tlet isDialogMessage: boolean | undefined = true;\n\t\tconst showGenericErrorMessageForChangeSet = !!(\n\t\t\tthis.parameters.bGrouped &&\n\t\t\t(this.strictHandlingUtilities.strictHandlingPromises.length || messageHandling.hasTransitionErrorsOrWarnings())\n\t\t);\n\n\t\tawait this.messageHandler.showMessages({\n\t\t\tcontext: failedContexts[0], // only used in case of failed context to reset in messageHandling showMessagesInUI\n\t\t\tisActionParameterDialogOpen: dialog.isOpen(),\n\t\t\tforceShowUIElement: dialog.isOpen(),\n\t\t\tmessagePageNavigationCallback: () => {\n\t\t\t\tthis.close();\n\t\t\t},\n\t\t\tonBeforeShowMessage: (aMessages: Message[], showMessageParametersIn: ShowMessageParameters) => {\n\t\t\t\tconst showMessageParameters = this.callbacks.beforeShowingMessage(\n\t\t\t\t\tthis.parameters,\n\t\t\t\t\tthis.parameters.aContexts,\n\t\t\t\t\tdialog,\n\t\t\t\t\taMessages,\n\t\t\t\t\tshowMessageParametersIn,\n\t\t\t\t\tshowGenericErrorMessageForChangeSet\n\t\t\t\t);\n\t\t\t\tisDialogMessage = showMessageParameters.showMessageDialog;\n\t\t\t\treturn showMessageParameters;\n\t\t\t},\n\t\t\taSelectedContexts: undefined, // not used at all!\n\t\t\tsActionName: this.parameters.label,\n\t\t\tcontrol: dialog.getParent() as Control\n\t\t});\n\t\treturn isDialogMessage;\n\t}\n\n\t/**\n\t * Cleans after the execution of the action.\n\t *\n\t */\n\tprivate afterOnApply(): void {\n\t\tthis.messageHandler.clearStrictWarningMessages();\n\t\tthis.strictHandlingUtilities = {\n\t\t\tis412Executed: false,\n\t\t\tstrictHandlingTransitionFails: [],\n\t\t\tstrictHandlingPromises: [],\n\t\t\tstrictHandlingWarningMessages: [],\n\t\t\tdelaySuccessMessages: [],\n\t\t\tprocessedMessageIds: new Set()\n\t\t};\n\t\tif (this.dialog && BusyLocker.isLocked(this.dialog)) {\n\t\t\tBusyLocker.unlock(this.dialog);\n\t\t}\n\t}\n\n\t/**\n\t * Manages the execution of the action.\n\t * @param parameters The parameters of the action\n\t * @param contexts The contexts of the action\n\t * @param after412 Flag to indicate if the action is executed after a 412 error\n\t * @returns The promise.\n\t */\n\tprivate async executeAction(\n\t\tparameters: ShowActionDialogParameters,\n\t\tcontexts: ODataV4Context[],\n\t\tafter412: boolean\n\t): Promise<PromiseSettledResult<OperationResult>[]> {\n\t\tconst dialog = this.dialog!;\n\t\tconst results = await new ODataOperation(this.action, parameters, this.messageHandler, this.strictHandlingUtilities, {\n\t\t\tignoreETag: this.ignoreETag\n\t\t}).execute();\n\t\tconst modelMessages = Messaging.getMessageModel().getData();\n\t\tconst failedTransitionsWith412 =\n\t\t\tthis.strictHandlingUtilities.is412Executed && this.strictHandlingUtilities.strictHandlingTransitionFails.length;\n\n\t\tconst showGenericErrorMessageForChangeSet =\n\t\t\t!!this.parameters.bGrouped &&\n\t\t\t(this.strictHandlingUtilities.strictHandlingPromises.length > 0 || messageHandling.hasTransitionErrorsOrWarnings());\n\t\tlet attachEvent = modelMessages.length > 0;\n\n\t\tif (failedTransitionsWith412) {\n\t\t\tif (!after412) {\n\t\t\t\tthis.strictHandlingUtilities.delaySuccessMessages = this.strictHandlingUtilities.delaySuccessMessages.concat(modelMessages);\n\t\t\t\tattachEvent = false;\n\t\t\t} else {\n\t\t\t\tMessaging.addMessages(this.strictHandlingUtilities.delaySuccessMessages);\n\t\t\t}\n\t\t}\n\t\tif (attachEvent) {\n\t\t\tdialog.attachEventOnce(\"afterClose\", () => {\n\t\t\t\tconst isDialogOpen = dialog.isOpen();\n\t\t\t\tthis.messageHandler.showMessageDialog({\n\t\t\t\t\tisActionParameterDialogOpen: failedTransitionsWith412 ? undefined : isDialogOpen,\n\t\t\t\t\tforceShowUIElement: failedTransitionsWith412 ? undefined : isDialogOpen,\n\t\t\t\t\tonBeforeShowMessage: (messages: Message[], showMessageParametersIn: ShowMessageParameters) => {\n\t\t\t\t\t\treturn this.callbacks.beforeShowingMessage(\n\t\t\t\t\t\t\tparameters,\n\t\t\t\t\t\t\tcontexts,\n\t\t\t\t\t\t\tdialog,\n\t\t\t\t\t\t\tmessages,\n\t\t\t\t\t\t\tshowMessageParametersIn,\n\t\t\t\t\t\t\tshowGenericErrorMessageForChangeSet,\n\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\tcontrol: dialog.getParent() as Control,\n\t\t\t\t\taSelectedContexts: parameters.aContexts,\n\t\t\t\t\tsActionName: parameters.label\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\treturn results;\n\t}\n\n\t/**\n\t * Closes the dialog.\n\t */\n\tprivate close(): void {\n\t\tif (this.dialog) {\n\t\t\tthis.dialog.close();\n\t\t}\n\t}\n\n\t/**\n\t * Opens the dialog.\n\t * @param owner The owner of the dialog\n\t * @returns The promise of the action result.\n\t */\n\tasync openDialog(owner: Control): Promise<PromiseSettledResult<OperationResult>[]> {\n\t\tif (!this.dialog) {\n\t\t\tthrow new Error(\"Error on opening the dialog\");\n\t\t}\n\t\tawait CommonUtils.setUserDefaults(\n\t\t\tthis.parameters.appComponent,\n\t\t\tthis.actionParameterInfos.map((actionParameterInfo) => actionParameterInfo.parameter),\n\t\t\tthis.parameterModel,\n\t\t\ttrue\n\t\t);\n\n\t\tthis.setModels(this.dialog);\n\t\towner.addDependent(this.dialog);\n\t\tawait this.setOperationDefaultValues(this.dialog);\n\t\tthis.dialog.open();\n\t\treturn this.dialogPromise;\n\t}\n\n\t/**\n\t * Sets the model configuration for the dialog.\n\t * @param dialog The owner of the dialog\n\t */\n\tprivate setModels(dialog: Dialog): void {\n\t\tdialog.setModel(this.parameterModel, \"paramsModel\");\n\t\tdialog.bindElement({\n\t\t\tpath: \"/\",\n\t\t\tmodel: \"paramsModel\"\n\t\t});\n\t\tdialog.setModel(this.parameters.model);\n\t\tdialog.bindElement({\n\t\t\tpath: `${this.parameters.aContexts.length ? \"\" : \"/\"}${this.actionName}(...)`\n\t\t});\n\n\t\tif (this.parameters.aContexts.length) {\n\t\t\tdialog.setBindingContext(this.parameters.aContexts[0]); // use context of first selected line item\n\t\t}\n\t\t// empty model to add elements dynamically depending on number of MVF fields defined on the dialog\n\t\tdialog.setModel(new JSONModel({}), \"mvfview\");\n\t}\n\n\t/**\n\t * Removes the messages before opening the dialog.\n\t * @param _event\n\t */\n\tprivate beforeOpen(_event: Dialog$BeforeOpenEvent): void {\n\t\tthis.messageHandler.removeTransitionMessages();\n\t}\n\n\t/**\n\t * Gets the default values for a parameter.\n\t * @param parameter The parameter\n\t * @param bindingParameter The binding parameter\n\t * @param dialog The dialog\n\t * @returns The promise of the default values.\n\t */\n\tprivate async getParameterDefaultValue(\n\t\tparameter: ActionParameter,\n\t\tbindingParameter: string,\n\t\tdialog: Dialog\n\t): Promise<ParameterDefaultValue> {\n\t\tconst operationBinding = dialog.getObjectBinding() as ODataContextBinding;\n\t\tconst parameterModelData = this.parameterModel.getData();\n\t\tconst paramName = parameter.name;\n\t\tconst defaultValue = parameter.annotations.UI?.ParameterDefaultValue;\n\t\t// Case 1: There is a ParameterDefaultValue annotation\n\t\tif (defaultValue) {\n\t\t\tif (this.parameters.aContexts.length > 0 && isPathAnnotationExpression(defaultValue)) {\n\t\t\t\ttry {\n\t\t\t\t\tconst pathForContext: string =\n\t\t\t\t\t\tbindingParameter && defaultValue.path.startsWith(`${bindingParameter}/`)\n\t\t\t\t\t\t\t? defaultValue.path.replace(`${bindingParameter}/`, \"\")\n\t\t\t\t\t\t\t: defaultValue.path;\n\t\t\t\t\tlet paramValue = await CommonUtils.requestSingletonProperty(defaultValue.path, operationBinding.getModel());\n\t\t\t\t\tif (paramValue === null) {\n\t\t\t\t\t\tparamValue = await operationBinding.getParameterContext().requestProperty(defaultValue.path);\n\t\t\t\t\t}\n\t\t\t\t\tif (this.parameters.aContexts.length > 1) {\n\t\t\t\t\t\t// For multi select, need to loop over aContexts (as contexts cannot be retrieved via binding parameter of the operation binding)\n\n\t\t\t\t\t\tif (this.parameters.aContexts.some((context) => context.getProperty(pathForContext) !== paramValue)) {\n\t\t\t\t\t\t\t// if the values from the contexts are not all the same, do not prefill\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tparamName,\n\t\t\t\t\t\t\t\tvalue: undefined,\n\t\t\t\t\t\t\t\tnoPossibleValue: true\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn { paramName, value: paramValue };\n\t\t\t\t} catch (error) {\n\t\t\t\t\tLog.error(\"Error while reading default action parameter\", paramName, this.action.name);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tparamName,\n\t\t\t\t\t\tvalue: undefined,\n\t\t\t\t\t\tlatePropertyError: true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Case 1.2: ParameterDefaultValue defines a fixed string value (i.e. vParamDefaultValue = 'someString')\n\t\t\t\treturn { paramName, value: defaultValue.valueOf() };\n\t\t\t}\n\t\t}\n\t\treturn { paramName, value: parameterModelData[paramName] };\n\t}\n\n\t/**\n\t * Gets the manifest values.\n\t * @returns The promise of the manifest values.\n\t */\n\tprivate async getManifestFunctionValues(): Promise<Record<string, unknown>> {\n\t\tconst bindingContext = this.dialog?.getBindingContext();\n\t\tif (!this.view || !this.parameters.defaultValuesExtensionFunction || !bindingContext) {\n\t\t\treturn {};\n\t\t}\n\n\t\treturn FPMHelper.loadModuleAndCallMethod(\n\t\t\tthis.parameters.defaultValuesExtensionFunction\n\t\t\t\t.substring(0, this.parameters.defaultValuesExtensionFunction.lastIndexOf(\".\") || -1)\n\t\t\t\t.replace(/\\./gi, \"/\"),\n\t\t\tthis.parameters.defaultValuesExtensionFunction.substring(\n\t\t\t\tthis.parameters.defaultValuesExtensionFunction.lastIndexOf(\".\") + 1,\n\t\t\t\tthis.parameters.defaultValuesExtensionFunction.length\n\t\t\t),\n\t\t\tthis.view,\n\t\t\tbindingContext,\n\t\t\tthis.parameters.aContexts\n\t\t) as Promise<Record<string, unknown>>;\n\t}\n\n\t/**\n\t * Gets the predefined values for the parameters.\n\t * @param bindingParameter The binding parameter\n\t * @param dialog The dialog\n\t * @returns The promise containing all predefined values.\n\t */\n\tprivate async getPreDefinedValues(\n\t\tbindingParameter: string,\n\t\tdialog: Dialog\n\t): Promise<{\n\t\tcontextValues: Record<string, unknown>;\n\t\tdefaultValues: ParameterDefaultValue[];\n\t\tfunctionValues: ODataV4Context[];\n\t\tmanifestFunctionValues: Record<string, unknown>;\n\t}> {\n\t\tconst boundFunctionName = this.action.annotations.Common?.DefaultValuesFunction?.valueOf();\n\t\tlet requestContextObject: Promise<Record<string, unknown>> = Promise.resolve({});\n\t\tlet functionParams: Promise<ODataV4Context>[] = [];\n\t\tif (this.action.isBound) {\n\t\t\tif (typeof boundFunctionName === \"string\") {\n\t\t\t\tfunctionParams = this.parameters.aContexts.map(async (context) =>\n\t\t\t\t\toperations.callBoundFunction(boundFunctionName, context, context.getModel())\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (this.parameters.aContexts.length > 0) {\n\t\t\t\trequestContextObject = this.parameters.aContexts[0].requestObject();\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst contextValues = await requestContextObject;\n\n\t\t\tconst promises = await Promise.all([\n\t\t\t\tPromise.all(\n\t\t\t\t\tthis.actionParameterInfos.map(async (actionParameterInfo) =>\n\t\t\t\t\t\tthis.getParameterDefaultValue(actionParameterInfo.parameter, bindingParameter, dialog)\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tPromise.all(functionParams),\n\t\t\t\tthis.getManifestFunctionValues()\n\t\t\t]);\n\t\t\treturn {\n\t\t\t\tcontextValues,\n\t\t\t\tdefaultValues: promises[0],\n\t\t\t\tfunctionValues: promises[1],\n\t\t\t\tmanifestFunctionValues: promises[2]\n\t\t\t};\n\t\t} catch (error: unknown) {\n\t\t\tLog.error(\"Error while retrieving the parameter\", error as string);\n\t\t\t// Remove messages relating to the function for default values as they aren't helpful for a user\n\t\t\tthis.messageHandler.removeTransitionMessages();\n\t\t\treturn {\n\t\t\t\tcontextValues: {},\n\t\t\t\tdefaultValues: [],\n\t\t\t\tfunctionValues: [],\n\t\t\t\tmanifestFunctionValues: {}\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * Callback when the dialog is opened. Sets the focus on the first field without opening the VH dialog.\n\t */\n\tprivate afterOpen(): void {\n\t\tconst firstVisibleParameter = this.actionParameterInfos.find((parameterInfo) => parameterInfo.field.getVisible());\n\t\tif (firstVisibleParameter) {\n\t\t\tconst firstField = firstVisibleParameter?.field;\n\t\t\tconst focusInfo = firstField?.getFocusInfo() as { targetInfo: object };\n\t\t\tfocusInfo.targetInfo = { silent: true };\n\t\t\tfirstField?.focus(focusInfo);\n\t\t}\n\t}\n\n\t/**\n\t * Registers the action parameter info.\n\t * @param actionParameters The action parameters\n\t * @param fields The fields\n\t */\n\tprivate registerActionParameterInfo(dialogContents: DialogContentTypes[]): void {\n\t\t//Register the field\n\t\tdialogContents.forEach((dialogContent) => {\n\t\t\tconst parameter = dialogContent?.parameter;\n\t\t\tconst field = dialogContent?.formElements?.[1];\n\t\t\tthis.actionParameterInfos.push({\n\t\t\t\tparameter,\n\t\t\t\tfield,\n\t\t\t\tisMultiValue: parameter.isCollection,\n\t\t\t\thasError: false\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Sets the default values for the parameters.\n\t * @param dialog The dialog\n\t * @returns The promise.\n\t */\n\tprivate async setOperationDefaultValues(dialog: Dialog): Promise<void> {\n\t\tconst bindingParameter = this.action.isBound ? this.action.parameters[0].name : \"\";\n\t\tconst { contextValues, defaultValues, functionValues, manifestFunctionValues } = await this.getPreDefinedValues(\n\t\t\tbindingParameter,\n\t\t\tdialog\n\t\t);\n\t\tconst operationBinding = dialog.getObjectBinding() as ODataContextBinding;\n\n\t\tif (bindingParameter) {\n\t\t\toperationBinding.setParameter(bindingParameter, contextValues);\n\t\t}\n\n\t\tfor (const i in this.actionParameterInfos) {\n\t\t\tif (this.actionParameterInfos[i].parameter.name !== \"ResultIsActiveEntity\") {\n\t\t\t\tconst parameterName = this.actionParameterInfos[i].parameter.name;\n\t\t\t\t// Parameter values provided in the call of invokeAction overrule other sources\n\t\t\t\tconst parameterProvidedValue = this.parameterValues?.find((element) => element.name === parameterName)?.value;\n\t\t\t\tif (parameterProvidedValue) {\n\t\t\t\t\toperationBinding.setParameter(parameterName, parameterProvidedValue);\n\t\t\t\t} else if (manifestFunctionValues.hasOwnProperty(parameterName)) {\n\t\t\t\t\toperationBinding.setParameter(parameterName, manifestFunctionValues[parameterName]);\n\t\t\t\t} else if (defaultValues[i] && defaultValues[i].value !== undefined) {\n\t\t\t\t\toperationBinding.setParameter(parameterName, defaultValues[i].value);\n\t\t\t\t} else if (this.action.annotations.Common?.DefaultValuesFunction && !defaultValues[i].noPossibleValue) {\n\t\t\t\t\tconst setOfFunctionValues = new Set<string>(\n\t\t\t\t\t\tthis.parameters.aContexts.map((context, index) => functionValues[index].getObject(parameterName))\n\t\t\t\t\t);\n\t\t\t\t\tif (setOfFunctionValues.size === 1) {\n\t\t\t\t\t\t//param values are all the same:\n\t\t\t\t\t\toperationBinding.setParameter(parameterName, Array.from(setOfFunctionValues)[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If at least one Default Property is a Late Property and an eTag error was raised.\n\t\tif (defaultValues.some((value) => value.latePropertyError)) {\n\t\t\tconst refresh = this.resourceModel.getText(\"C_COMMON_SAPFE_REFRESH\");\n\t\t\tMessageBox.warning(getResourceModel(this.parameters.appComponent).getText(\"C_APP_COMPONENT_SAPFE_ETAG_LATE_PROPERTY\"), {\n\t\t\t\tactions: [refresh, MessageBox.Action.OK],\n\t\t\t\temphasizedAction: refresh,\n\t\t\t\tonClose: (action: string) => {\n\t\t\t\t\tif (action === refresh) {\n\t\t\t\t\t\tconst extensionAPI = this.view?.getController().getExtensionAPI();\n\t\t\t\t\t\t(extensionAPI as ListReportExtensionAPI | ObjectPageExtensionAPI).refresh();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcontentWidth: \"25em\"\n\t\t\t} as object);\n\t\t}\n\t}\n\n\t/**\n\t * Manages the close of the dialog.\n\t * @param event The event\n\t */\n\tprivate afterClose(event: Dialog$AfterCloseEvent): void {\n\t\t// when the dialog is cancelled, messages need to be removed in case the same action should be executed again\n\t\tconst origin = event.getParameter(\"origin\");\n\t\tfor (const i in this.actionParameterInfos) {\n\t\t\tthis.removeMessagesForParameter(this.actionParameterInfos[i].parameter);\n\t\t}\n\t\tif (origin === null || origin === this.dialog?.getEndButton()) {\n\t\t\t// Escape or Cancel button\n\t\t\tthis._fnReject(FELibrary.Constants.CancelActionDialog);\n\t\t} else {\n\t\t\tthis._fnResolve(this.result);\n\t\t}\n\n\t\tthis.dialog?.destroy();\n\t\tthis.buttonLock = false; //needed here, not in the press events finally clause. In case the UI is sluggish, begin button could be pressed again.\n\t}\n}\n"],"mappings":"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","ignoreList":[]}