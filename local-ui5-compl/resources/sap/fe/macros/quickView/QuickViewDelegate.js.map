{"version":3,"file":"QuickViewDelegate.js","names":["SimpleLinkDelegate","Object","assign","LinkDelegate","apiVersion","CONSTANTS","iLinksShownInPopup","sapmLink","sapuimdcLink","sapuimdclinkLinkItem","sapmObjectIdentifier","sapmObjectStatus","getConstants","_getEntityType","oPayload","oMetaModel","createBindingContext","entityType","undefined","_getSemanticsModel","JSONModel","_getDataField","dataField","_getContact","contact","preparePayload","link","payload","calculatePayloadWithDynamicSemanticObjectsResolved","LinkId","this","oControl","isA","getId","titleLink","getModel","getProperty","fnTemplateFragment","async","containingView","CommonUtils","getTargetView","appComponent","getAppComponent","fragmentName","preProcessorSettings","bindingContexts","models","oPayloadToUse","oSemanticsModel","semanticModel","semantic","entitySet","metaModel","converterContext","viewData","fragment","XMLTemplateProcessor","loadTemplate","templatedFragment","XMLPreprocessor","process","name","templateComponent","getController","getOwnerComponent","popoverContent","runAsOwner","Fragment","load","definition","controller","setModel","setBindingContext","fetchAdditionalContent","mdcLinkControl","payLoad","getPayload","aNavigateRegexpMatch","navigationPath","match","listBinding","getBindingContext","getBinding","aggregation","getAggregation","isListBindingAnalytical","hierarchyQualifier","modelParameters","$$ownRequest","bindingContext","length","bindContext","getMetaModel","boundContext","getBoundContext","_fetchLinkCustomData","_oLink","getParent","getCustomData","fetchLinkItems","oLink","oBindingContext","oInfoLog","_getSemanticObjects","initialize","_oLinkCustomData","_link","aLinkCustomData","map","linkItem","getValue","oSemanticAttributesResolved","_calculateSemanticAttributes","oSemanticAttributes","results","oPayloadResolved","_retrieveNavigationTargets","then","aLinks","Promise","resolve","_findLinkType","aLinkItems","nLinkType","oLinkItem","LinkItem","text","getText","href","getHref","hasQuickViewFacets","LinkType","DirectLink","Popover","Text","linkType","fetchLinkType","_oCurrentLink","_oPayload","oDefaultInitialType","initialType","type","directLink","runtimeType","appStateKeyMap","semanticObjects","_retrieveUnmodifiedLinkItems","retrieveLinkItems","_LinkType","Error","oError","Log","error","_RemoveTitleLinkFromTargets","mdcLink","linkItems","titleHasLink","titleIntent","titleLinkHref","result","linkIntentWithoutParameters","titleIntentWithoutParameters","split","linkIsPrimaryAction","titleLinkhref","mdcLinkModel","setProperty","aMLinkItems","filter","linkItemFromMdc","key","_IsSemanticObjectDynamic","aNewLinkCustomData","oThis","otherLink","_getLineContext","oView","mLineContext","_setFilterContextUrlForSelectionVariant","oSelectionVariant","oNavigationService","getViewData","sContextUrl","constructContextUrl","setFilterContextUrl","_setObjectMappings","sSemanticObject","oParams","aSemanticObjectMappings","hasChanged","modifiedSelectionVariant","SelectionVariant","toJSONObject","forEach","mapping","mappingSemanticObject","semanticObject","mappingSemanticObjectPath","getDynamicPathFromSemanticObject","oMappings","items","i","sLocalProperty","sSemanticObjectProperty","value","removeParameter","removeSelectOption","renameParameter","renameSelectOption","localPropertySelectOptionName","getSelectOptionsPropertyNames","find","property","includes","replace","slice","params","selectionVariant","_getAppStateKeyAndUrlParameters","_this","navigationService","aValues","deepEqual","defaultCache","semanticAttributes","appstatekey","toES6Promise","getAppStateKeyAndUrlParameters","toJSONString","cache","_getLinkItemWithNewParameter","services","quickViewDelegate","mdcLinkToModify","appStateKey","mdcLinkItemHash","shellServices","expandCompactHash","mdcLinkItem","shellHash","parseShellHash","linkParametersFromSelectionVariant","oNewParams","semanticObjectMappings","updatedParameters","action","linksUpdatedWithParameters","getLinks","intentModified","intent","setHref","semanticPrimaryActions","some","primaryIntentFound","FieldHelper","findPrimaryActionWithinIntents","bind","_removeEmptyLinkItem","_checkImplicitSemanticObjectMapping","propertyPath","lineContext","view","lineContextData","_intentBasedNavigation","removeSensitiveData","getObject","getMetaPath","getPath","keys","filteredSemanticObjectMappings","push","modifyLinkItems","payloadResolved","oAppComponent","primaryActionIsActive","checkPrimaryActions","bTitleHasLink","hasTitleLink","oShellServices","getShellServices","hasUShell","reject","oTargetInfo","getNavigationService","oController","mLineContextData","sMetaPath","dataFieldPropPath","pathsToRetain","mappings","semanticMappingDef","processSemanticAttributes","prepareContextForExternalNavigation","mixAttributesAndSelectionVariant","propertiesWithoutConflict","linkContextPath","intentBasedNavigation","adaptNavigationContext","_removeTechnicalParameters","oNavHandler","_getURLParametersFromSelectionVariant","titleLinktoBeRemove","index","beforeNavigationCallback","event","source","getSource","urlParsing","Factory","getService","hash","KeepAliveHelper","storeControlRefreshStrategyForHash","hashToNavigate","decomposedHash","navigate","_getSemanticObjectCustomDataValue","oSemanticObjectsResolved","sPropertyName","sCustomDataValue","element","getKey","_isDynamicPath","pathOrValue","expression","resolveBindingString","_type","_updatePayloadWithResolvedSemanticObjectValue","newPayload","semanticObjectName","semanticObjectsResolved","j","_createNewPayloadWithDynamicSemanticObjectsResolved","semanticObjectNameToResolve","fnFindQualifier","internalQualifiers","qualifiers","semanticObjectNameResolved","_updateSemanticObjectsForMappings","mdcPayload","mdcPayloadWithDynamicSemanticObjectsResolved","semanticObjectMapping","indexOf","_updateSemanticObjectsUnavailableActions","mdcPayloadSemanticObjectUnavailableActions","_Index","semanticObjectUnavailableAction","findIndex","_removeEmptySemanticObjectsMappings","mappingsCount","splice","_setPayloadWithDynamicSemanticObjectsResolved","oPayloadWithDynamicSemanticObjectsResolved","propertyPathLabel","deepClone","semanticObjectUnavailableActions","_SemanticObjectUnavailableActions","_getPayloadWithDynamicSemanticObjectsResolved","linkCustomData","payloadWithDynamicSemanticObjectsResolved","_updatePayloadWithSemanticAttributes","aSemanticObjects","oContextObject","oResults","mSemanticObjectMappings","addContextObject","sAttributeName","oAttribute","oTransformationAdditional","getSemanticObjectAttribute","createAttributeStructure","addSemanticObjectAttribute","transformations","description","isPlainObject","aKeys","sNewAttributeNameMapped","sNewAttributeName","sValue","sKey","sAttributeNameMapped","reason","aAttributeNew","_convertSemanticObjectMapping","_getSemanticObjectMappings","checkPrimaryActionForHash","navLinks","hashs","targetHash","constructShellHash","target","substring","sAppStateKey","oNavigationTargets","ownNavigation","availableActions","iSuperiorActionLinksFound","Library","sap","ui","require","Utils","getAppComponentForControl","aParams","sortResultsBy","bHasLinks","elements","aSemanticObjectUnavailableActions","_getSemanticObjectUnavailableActions","oUnavailableActions","_convertSemanticObjectUnavailableAction","sCurrentHash","FieldRuntime","_fnFixHashQueryString","getHash","fnIsUnavailableAction","sAction","primaryIntents","_getPrimaryIntents","Boolean","fnAddLink","oShellHash","sHref","icon","initiallyVisible","tags","addSemanticObjectIntent","n","iLinkItemIndex","oSemanticObjectUnavailableAction","SemanticObjectUnavailableAction","actions","aSemanticObjectMappingItems","oSemanticObjectMapping","oSemanticObjectMappingItem","SemanticObjectMappingItem","SemanticObjectMapping","getSemanticObject","fromEntries","getItems","oItem","_SemanticObjectName","_SemanticObjectHasAlreadyUnavailableActions","_UnavailableActions","mSemanticObjectUnavailableActions","oSemanticObjectUnavailableActions","getActions","UnavailableAction","fetchPopoverTitle","oPanel","sTitle","oLabelledByControl","_getLabelledByControl"],"sources":["./QuickViewDelegate.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport deepClone from \"sap/base/util/deepClone\";\nimport deepEqual from \"sap/base/util/deepEqual\";\nimport isPlainObject from \"sap/base/util/isPlainObject\";\nimport type { CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { resolveBindingString } from \"sap/fe/base/BindingToolkit\";\nimport type { EnhanceWithUI5 } from \"sap/fe/base/ClassSupport\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type TemplateComponent from \"sap/fe/core/TemplateComponent\";\nimport KeepAliveHelper from \"sap/fe/core/helpers/KeepAliveHelper\";\nimport toES6Promise from \"sap/fe/core/helpers/ToES6Promise\";\nimport type { NavigationService } from \"sap/fe/core/services/NavigationServiceFactory\";\nimport type { IShellServices } from \"sap/fe/core/services/ShellServicesFactory\";\nimport { getDynamicPathFromSemanticObject } from \"sap/fe/core/templating/SemanticObjectHelper\";\nimport FieldHelper from \"sap/fe/macros/field/FieldHelper\";\nimport FieldRuntime from \"sap/fe/macros/field/FieldRuntime\";\nimport SelectionVariant from \"sap/fe/navigation/SelectionVariant\";\nimport type Link from \"sap/m/Link\";\nimport type Event from \"sap/ui/base/Event\";\nimport type Control from \"sap/ui/core/Control\";\nimport type CustomData from \"sap/ui/core/CustomData\";\nimport type UI5Element from \"sap/ui/core/Element\";\nimport Fragment from \"sap/ui/core/Fragment\";\nimport Library from \"sap/ui/core/Lib\";\nimport XMLTemplateProcessor from \"sap/ui/core/XMLTemplateProcessor\";\nimport XMLPreprocessor from \"sap/ui/core/util/XMLPreprocessor\";\nimport type flUtils from \"sap/ui/fl/Utils\";\nimport type MdcLink from \"sap/ui/mdc/Link\";\nimport type { LinkTypeWrapper, LinkType as MdcLinkType } from \"sap/ui/mdc/Link\";\n\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport type ManagedObject from \"sap/ui/base/ManagedObject\";\nimport LinkDelegate from \"sap/ui/mdc/LinkDelegate\";\nimport LinkType from \"sap/ui/mdc/enums/LinkType\";\nimport Factory from \"sap/ui/mdc/link/Factory\";\nimport LinkItem from \"sap/ui/mdc/link/LinkItem\";\nimport SemanticObjectMapping from \"sap/ui/mdc/ushell/SemanticObjectMapping\";\nimport SemanticObjectMappingItem from \"sap/ui/mdc/ushell/SemanticObjectMappingItem\";\nimport SemanticObjectUnavailableAction from \"sap/ui/mdc/ushell/SemanticObjectUnavailableAction\";\nimport type Context from \"sap/ui/model/Context\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type ODataV4Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataListBinding from \"sap/ui/model/odata/v4/ODataListBinding\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type { LinkFilter, Link as NavigationLink } from \"sap/ushell/services/Navigation\";\nimport type { DecomposedHash, ParsedHash } from \"sap/ushell/services/URLParsing\";\n\nexport type RegisteredSemanticObjectMapping = { semanticObject: string; items: { key: string; value: string }[] };\ntype RegisteredSemanticObjectMappings = RegisteredSemanticObjectMapping[];\nexport type LinkDelegatePayload = {\n\tqualifiers: Record<string, CompiledBindingToolkitExpression>;\n\tsemanticObjects: string[];\n\tsemanticObjectsResolved?: string[];\n\tsemanticObjectMappings: RegisteredSemanticObjectMappings;\n\tsemanticObjectUnavailableActions: RegisteredSemanticObjectUnavailableAction[];\n\tsemanticPrimaryActions?: RegisteredPrimaryIntents;\n\tentityType?: string;\n\tdataField?: string;\n\tcontact?: string;\n\tnavigationPath?: string;\n\tpropertyPathLabel?: string;\n\thasQuickViewFacets?: string;\n\tLinkId?: string;\n\ttitleLink?: string;\n\tdataFieldPropPath?: string;\n\ttitleLinkhref?: string;\n};\n\nexport type RegisteredPrimaryIntent = {\n\tintent: string;\n\ttext: string;\n\ticon?: string;\n\tshortTitle?: string;\n\ttags?: string[];\n};\n\nexport type RegisteredPrimaryIntents = RegisteredPrimaryIntent[];\n\nexport type RegisteredSemanticObjectUnavailableAction = {\n\tsemanticObject: string;\n\tactions: string[];\n};\n\nexport type RegisteredSemanticAttributes = Record<string, Record<string, string>>;\n\nexport type SimpleLinkDelegatePayload = {\n\tnavigationPath: string;\n\tsemanticObjects: object[];\n\tcontact: string[];\n\tentityType: string;\n\ttitleLinkhref: string;\n};\n\n//FIXME: only necessary due to the access of private sap.ui.mdc.Link methods\ninterface FELink extends MdcLink {\n\t_retrieveUnmodifiedLinkItems: Function;\n}\n\ntype InfoLog = {\n\tinitialize: Function;\n\taddSemanticObjectAttribute: Function;\n\taddContextObject: Function;\n\tgetSemanticObjectAttribute: Function;\n\tcreateAttributeStructure: Function;\n\taddSemanticObjectIntent: Function;\n};\n\nconst SimpleLinkDelegate = Object.assign({}, LinkDelegate) as LinkDelegate & {\n\tapiVersion: number;\n\toMetaModel: ODataMetaModel;\n\tpayload: LinkDelegatePayload;\n\tsemanticModel: JSONModel | undefined;\n\toControl: UI5Element;\n\taLinkCustomData: unknown[] | undefined;\n\tappStateKeyMap: Record<string, { selectionVariant?: SelectionVariant; semanticAttributes?: string; appstatekey?: string }>;\n\t_link: MdcLink | undefined;\n\tgetConstants: () => typeof CONSTANTS;\n\t_getEntityType: (oPayload: LinkDelegatePayload, oMetaModel: ODataMetaModel) => Context | undefined;\n\t_getSemanticsModel: (oPayload: LinkDelegatePayload, oMetaModel: ODataMetaModel | undefined) => JSONModel | undefined;\n\t_getDataField: (oPayload: LinkDelegatePayload, oMetaModel: ODataMetaModel) => Context | undefined;\n\t_getContact: (oPayload: LinkDelegatePayload, oMetaModel: ODataMetaModel) => Context | undefined;\n\tpreparePayload: (link: MdcLink) => LinkDelegatePayload;\n\tfnTemplateFragment: (link: MdcLink) => Promise<Control | Control[]>;\n\t_fetchLinkCustomData: (_oLink: MdcLink) => CustomData[] | undefined;\n\tfetchLinkItems: (oLink: MdcLink, oBindingContext: Context, oInfoLog: InfoLog) => Promise<object | null>;\n\t_getSemanticObjects: (oPayload: LinkDelegatePayload) => string[];\n\t_getLabelledByControl: (oControl: UI5Element) => UI5Element | undefined;\n\t_getLinkItemWithNewParameter: (\n\t\tservices: { shellServices: IShellServices; navigationService: NavigationService },\n\t\tquickViewDelegate: typeof SimpleLinkDelegate,\n\t\tmdcLinkToModify: {\n\t\t\tmdcLink: MdcLink;\n\t\t\tpayload: LinkDelegatePayload;\n\t\t\tlinkParametersFromSelectionVariant: Record<string, string>;\n\t\t\ttitleHasLink: boolean;\n\t\t\tmdcLinkItem: LinkItem;\n\t\t},\n\t\tappStateKey: string | undefined,\n\t\tselectionVariant: SelectionVariant\n\t) => Promise<boolean>;\n\t_findLinkType: (\n\t\tpayload: LinkDelegatePayload,\n\t\taLinkItems: LinkItem[]\n\t) => {\n\t\tlinkType: LinkType;\n\t\tlinkItem: LinkItem | undefined;\n\t};\n\tcalculatePayloadWithDynamicSemanticObjectsResolved: (link: MdcLink) => LinkDelegatePayload;\n\t_calculateSemanticAttributes: (\n\t\toBindingContext: Context,\n\t\toPayload: LinkDelegatePayload,\n\t\toInfoLog: InfoLog,\n\t\toLink: MdcLink\n\t) => { payload: LinkDelegatePayload; results: Record<string, Record<string, string>> };\n\t_getSemanticObjectUnavailableActions: (oPayload: LinkDelegatePayload) => (typeof SemanticObjectUnavailableAction)[];\n\tcheckPrimaryActionForHash: (shellServices: IShellServices, navLinks: NavigationLink[], hash: ParsedHash) => boolean;\n\t_convertSemanticObjectUnavailableAction: (\n\t\taSemanticObjectUnavailableActions: (typeof SemanticObjectUnavailableAction)[]\n\t) => Record<string, string[]> | undefined;\n\t_getSemanticObjectMappings: (oPayload: LinkDelegatePayload) => SemanticObjectMapping[];\n\t_convertSemanticObjectMapping: (\n\t\taSemanticObjectMappings: SemanticObjectMapping[]\n\t) => Record<string, Record<string, unknown>> | undefined;\n\t_RemoveTitleLinkFromTargets: (\n\t\tmdcLink: MdcLink,\n\t\tlinkItems: LinkItem[],\n\t\ttitleHasLink: boolean,\n\t\ttitleIntent: string | undefined\n\t) => boolean;\n\t_IsSemanticObjectDynamic: (aNewLinkCustomData: unknown[], oThis: typeof SimpleLinkDelegate) => boolean;\n\t_checkImplicitSemanticObjectMapping: (\n\t\tpayload: LinkDelegatePayload,\n\t\tpropertyPath: string | undefined,\n\t\tlineContext: Context,\n\t\tview: FEView\n\t) => void;\n\t_setFilterContextUrlForSelectionVariant: (\n\t\toView: FEView,\n\t\toSelectionVariant: SelectionVariant,\n\t\toNavigationService: NavigationService\n\t) => SelectionVariant;\n\t_retrieveNavigationTargets: (\n\t\tsAppStateKey: string,\n\t\toSemanticAttributes: Record<string, Record<string, string>>,\n\t\toPayload: LinkDelegatePayload,\n\t\toInfoLog: InfoLog,\n\t\toLink: MdcLink | undefined\n\t) => Promise<LinkItem[]>;\n\t_updatePayloadWithSemanticAttributes: (\n\t\taSemanticObjects: string[],\n\t\toInfoLog: InfoLog,\n\t\toContextObject: Record<string, unknown>,\n\t\toResults: RegisteredSemanticAttributes,\n\t\tmSemanticObjectMappings?: Record<string, Record<string, unknown>>\n\t) => void;\n\t_getAppStateKeyAndUrlParameters: (\n\t\t_this: typeof SimpleLinkDelegate,\n\t\tnavigationService: NavigationService,\n\t\tselectionVariant: SelectionVariant,\n\t\tsemanticObject: string\n\t) => Promise<string[]>;\n\t_getPayloadWithDynamicSemanticObjectsResolved: (\n\t\tpayload: LinkDelegatePayload,\n\t\tlinkCustomData: CustomData[] | undefined\n\t) => LinkDelegatePayload | undefined;\n\t_getSemanticObjectCustomDataValue: (aLinkCustomData: CustomData[], oSemanticObjectsResolved: Record<string, { value: string }>) => void;\n\t_setObjectMappings: (\n\t\tsSemanticObject: string,\n\t\toParams: Record<string, string>,\n\t\taSemanticObjectMappings: RegisteredSemanticObjectMappings,\n\t\toSelectionVariant: SelectionVariant\n\t) => { params: Record<string, string>; hasChanged: boolean; selectionVariant: SelectionVariant };\n\t_removeTechnicalParameters: (oSelectionVariant: SelectionVariant) => void;\n\t_setPayloadWithDynamicSemanticObjectsResolved: (payload: LinkDelegatePayload, newPayload: LinkDelegatePayload) => LinkDelegatePayload;\n\t_getLineContext: (oView: FEView, mLineContext: Context | undefined) => Context;\n\t_removeEmptyLinkItem: (aLinkItems: LinkItem[]) => LinkItem[];\n\t_updateSemanticObjectsForMappings: (\n\t\tmdcPayload: LinkDelegatePayload,\n\t\tmdcPayloadWithDynamicSemanticObjectsResolved: LinkDelegatePayload,\n\t\tnewPayload: LinkDelegatePayload\n\t) => void;\n\t_isDynamicPath: (pathOrValue: string) => boolean;\n\t_updatePayloadWithResolvedSemanticObjectValue: (newPayload: LinkDelegatePayload, semanticObjectName: string | undefined) => void;\n\t_createNewPayloadWithDynamicSemanticObjectsResolved: (\n\t\tpayload: LinkDelegatePayload,\n\t\tsemanticObjectsResolved: Record<string, { value: string }>,\n\t\tnewPayload: LinkDelegatePayload\n\t) => void;\n\t_updateSemanticObjectsUnavailableActions: (\n\t\tmdcPayload: LinkDelegatePayload,\n\t\tmdcPayloadSemanticObjectUnavailableActions: RegisteredSemanticObjectUnavailableAction[],\n\t\tmdcPayloadWithDynamicSemanticObjectsResolved: LinkDelegatePayload\n\t) => void;\n\t_removeEmptySemanticObjectsMappings: (mdcPayloadWithDynamicSemanticObjectsResolved: LinkDelegatePayload) => void;\n};\n\nSimpleLinkDelegate.apiVersion = 2;\nconst CONSTANTS = {\n\tiLinksShownInPopup: 3,\n\tsapmLink: \"sap.m.Link\",\n\tsapuimdcLink: \"sap.ui.mdc.Link\",\n\tsapuimdclinkLinkItem: \"sap.ui.mdc.link.LinkItem\",\n\tsapmObjectIdentifier: \"sap.m.ObjectIdentifier\",\n\tsapmObjectStatus: \"sap.m.ObjectStatus\"\n};\nSimpleLinkDelegate.getConstants = function (): typeof CONSTANTS {\n\treturn CONSTANTS;\n};\n\n/**\n * This will return an array of the SemanticObjects as strings given by the payload.\n * @private\n * @param oPayload The payload defined by the application\n * @param oMetaModel The ODataMetaModel received from the Link\n * @returns The context pointing to the current EntityType.\n */\nSimpleLinkDelegate._getEntityType = function (oPayload: LinkDelegatePayload, oMetaModel: ODataMetaModel): Context | undefined {\n\tif (oMetaModel) {\n\t\treturn oMetaModel.createBindingContext(oPayload.entityType!) ?? undefined;\n\t} else {\n\t\treturn undefined;\n\t}\n};\n/**\n * This will return an array of the SemanticObjects as strings given by the payload.\n * @private\n * @param oPayload The payload defined by the application\n * @param oMetaModel The ODataMetaModel received from the Link\n * @returns A model containing the payload information\n */\nSimpleLinkDelegate._getSemanticsModel = function (\n\toPayload: LinkDelegatePayload,\n\toMetaModel: ODataMetaModel | undefined\n): JSONModel | undefined {\n\tif (oMetaModel) {\n\t\treturn new JSONModel(oPayload);\n\t} else {\n\t\treturn undefined;\n\t}\n};\n/**\n * This will return an array of the SemanticObjects as strings given by the payload.\n * @private\n * @param oPayload The payload defined by the application\n * @param oMetaModel The ODataMetaModel received from the Link\n * @returns An array containing SemanticObjects based of the payload\n */\nSimpleLinkDelegate._getDataField = function (oPayload: LinkDelegatePayload, oMetaModel: ODataMetaModel): Context | undefined {\n\treturn oMetaModel.createBindingContext(oPayload.dataField!) ?? undefined;\n};\n/**\n * This will return an array of the SemanticObjects as strings given by the payload.\n * @private\n * @param oPayload The payload defined by the application\n * @param oMetaModel The ODataMetaModel received from the Link\n * @returns Ancontaining SemanticObjects based of the payload\n */\nSimpleLinkDelegate._getContact = function (oPayload: LinkDelegatePayload, oMetaModel: ODataMetaModel): Context | undefined {\n\treturn oMetaModel.createBindingContext(oPayload.contact!) ?? undefined;\n};\n\nSimpleLinkDelegate.preparePayload = function (link: MdcLink): LinkDelegatePayload {\n\t// payload has been modified by fetching Semantic Objects names with path\n\tconst payload: LinkDelegatePayload = SimpleLinkDelegate.calculatePayloadWithDynamicSemanticObjectsResolved(link);\n\tif (!payload.LinkId) {\n\t\tpayload.LinkId = this.oControl?.isA<MdcLink>(CONSTANTS.sapuimdcLink) ? this.oControl.getId() : undefined;\n\t}\n\n\tif (payload.LinkId) {\n\t\tpayload.titleLink = this.oControl.getModel(\"$sapuimdcLink\")?.getProperty(\"/titleLinkHref\");\n\t}\n\treturn payload;\n};\n\nSimpleLinkDelegate.fnTemplateFragment = async function (link: MdcLink): Promise<Control> {\n\tconst containingView = CommonUtils.getTargetView(link);\n\tconst appComponent = CommonUtils.getAppComponent(containingView);\n\tlet fragmentName = \"\";\n\tconst preProcessorSettings: {\n\t\tbindingContexts: {\n\t\t\tdataField?: Context;\n\t\t\tentitySet?: Context;\n\t\t\tmetaModel?: Context;\n\t\t\tentityType?: Context;\n\t\t\tsemantic?: Context;\n\t\t\tconverterContext?: Context;\n\t\t\tviewData?: Context;\n\t\t};\n\t\tmodels: {\n\t\t\tdataField?: ODataMetaModel;\n\t\t\tentitySet?: ODataMetaModel;\n\t\t\tmetaModel?: ODataMetaModel;\n\t\t\tentityType?: ODataMetaModel;\n\t\t\tsemantic?: JSONModel;\n\t\t\tconverterContext?: JSONModel;\n\t\t\tviewData?: object;\n\t\t};\n\t\tappComponent: AppComponent;\n\t} = { bindingContexts: {}, models: {}, appComponent };\n\n\tconst oPayloadToUse = SimpleLinkDelegate.preparePayload(link);\n\n\tconst oSemanticsModel = this._getSemanticsModel(oPayloadToUse, this.oMetaModel);\n\tthis.semanticModel = oSemanticsModel;\n\n\tif (oPayloadToUse.entityType && this._getEntityType(oPayloadToUse, this.oMetaModel) && oSemanticsModel) {\n\t\tfragmentName = \"sap.fe.macros.quickView.fragments.QuickViewForEntity\";\n\t\tpreProcessorSettings.bindingContexts = {\n\t\t\tentityType: this._getEntityType(oPayloadToUse, this.oMetaModel),\n\t\t\tsemantic: oSemanticsModel.createBindingContext(\"/\")\n\t\t};\n\t\tpreProcessorSettings.models = {\n\t\t\tentityType: this.oMetaModel,\n\t\t\tsemantic: oSemanticsModel\n\t\t};\n\t} else if (oPayloadToUse.dataField && this._getDataField(oPayloadToUse, this.oMetaModel) && oSemanticsModel) {\n\t\tfragmentName = \"sap.fe.macros.quickView.fragments.QuickViewForDataField\";\n\t\tpreProcessorSettings.bindingContexts = {\n\t\t\tdataField: this._getDataField(oPayloadToUse, this.oMetaModel),\n\t\t\tsemantic: oSemanticsModel.createBindingContext(\"/\")\n\t\t};\n\t\tpreProcessorSettings.models = {\n\t\t\tdataField: this.oMetaModel,\n\t\t\tsemantic: oSemanticsModel\n\t\t};\n\t}\n\n\tpreProcessorSettings.models.entitySet = this.oMetaModel;\n\tpreProcessorSettings.models.metaModel = this.oMetaModel;\n\tpreProcessorSettings.models.converterContext = containingView.getModel(\"_pageModel\");\n\tpreProcessorSettings.bindingContexts.converterContext = preProcessorSettings.models.converterContext.createBindingContext(\"/\");\n\n\tif (this.oControl && this.oControl.getModel(\"viewData\")) {\n\t\tpreProcessorSettings.models.viewData = this.oControl.getModel(\"viewData\");\n\t\tpreProcessorSettings.bindingContexts.viewData = this.oControl.getModel(\"viewData\")?.createBindingContext(\"/\");\n\t}\n\n\tconst fragment = XMLTemplateProcessor.loadTemplate(fragmentName, \"fragment\");\n\tconst templatedFragment = await XMLPreprocessor.process(fragment, { name: fragmentName }, preProcessorSettings);\n\tconst templateComponent = containingView.getController().getOwnerComponent() as EnhanceWithUI5<TemplateComponent>;\n\tconst popoverContent = (await templateComponent.runAsOwner(async (): Promise<Control> => {\n\t\treturn (await Fragment.load({\n\t\t\tdefinition: templatedFragment as unknown as string,\n\t\t\tcontroller: containingView.getController()\n\t\t})) as Control;\n\t})) as Control;\n\tif (popoverContent) {\n\t\tif (preProcessorSettings.models && preProcessorSettings.models.semantic) {\n\t\t\tpopoverContent.setModel(preProcessorSettings.models.semantic, \"semantic\");\n\t\t\tpopoverContent.setBindingContext(preProcessorSettings.bindingContexts.semantic, \"semantic\");\n\t\t}\n\n\t\tif (preProcessorSettings.bindingContexts && preProcessorSettings.bindingContexts.entityType) {\n\t\t\tpopoverContent.setModel(preProcessorSettings.models.entityType, \"entityType\");\n\t\t\tpopoverContent.setBindingContext(preProcessorSettings.bindingContexts.entityType, \"entityType\");\n\t\t}\n\t}\n\treturn popoverContent;\n};\n\n/**\n * Retrieves and returns the relevant <code>additionalContent</code> for the <code>Link</code> control as an array.\n * @public\n * @param mdcLinkControl Instance of the <code>Link</code> control\n * @returns Once the promise resolves, an array of {@link sap.ui.core.Control} is returned\n */\nSimpleLinkDelegate.fetchAdditionalContent = async function (mdcLinkControl: MdcLink): Promise<Control[]> {\n\tconst payLoad = mdcLinkControl.getPayload() as LinkDelegatePayload;\n\tthis.oControl = mdcLinkControl;\n\tconst aNavigateRegexpMatch = payLoad?.navigationPath?.match(/{(.*?)}/);\n\tconst listBinding = (mdcLinkControl.getBindingContext() as ODataV4Context)?.getBinding() as ODataListBinding;\n\tconst aggregation = listBinding?.getAggregation && (listBinding.getAggregation() as { hierarchyQualifier?: string } | undefined);\n\tconst isListBindingAnalytical = aggregation !== undefined && !aggregation.hierarchyQualifier;\n\tconst modelParameters = isListBindingAnalytical ? { $$ownRequest: true } : undefined;\n\tconst bindingContext =\n\t\taNavigateRegexpMatch && aNavigateRegexpMatch.length > 1 && aNavigateRegexpMatch[1]\n\t\t\t? mdcLinkControl\n\t\t\t\t\t.getModel()\n\t\t\t\t\t?.bindContext(aNavigateRegexpMatch[1], mdcLinkControl.getBindingContext() || undefined, modelParameters)\n\t\t\t: null;\n\tthis.payload = payLoad;\n\tthis.oMetaModel = mdcLinkControl.getModel()?.getMetaModel() as ODataMetaModel;\n\tconst popoverContent = (await this.fnTemplateFragment(mdcLinkControl)) as Control;\n\tif (bindingContext) {\n\t\tconst boundContext = bindingContext.getBoundContext();\n\t\tif (boundContext) {\n\t\t\tpopoverContent.setBindingContext(boundContext);\n\t\t}\n\t}\n\treturn [popoverContent];\n};\nSimpleLinkDelegate._fetchLinkCustomData = function (_oLink: MdcLink): CustomData[] | undefined {\n\tif (\n\t\t_oLink.getParent() &&\n\t\t_oLink.isA(CONSTANTS.sapuimdcLink) &&\n\t\t(_oLink.getParent()?.isA(CONSTANTS.sapmLink) ||\n\t\t\t_oLink.getParent()?.isA(CONSTANTS.sapmObjectIdentifier) ||\n\t\t\t_oLink.getParent()?.isA(CONSTANTS.sapmObjectStatus) ||\n\t\t\t_oLink.getParent()?.isA(\"sap.fe.macros.controls.TextLink\"))\n\t) {\n\t\treturn _oLink.getCustomData();\n\t} else {\n\t\treturn undefined;\n\t}\n};\n/**\n * Fetches the relevant {@link sap.ui.mdc.link.LinkItem} for the Link and returns them.\n * @public\n * @param oLink The Payload of the Link given by the application\n * @param oBindingContext The ContextObject of the Link\n * @param oInfoLog The InfoLog of the Link\n * @returns Once the promise resolves an array of {@link sap.ui.mdc.link.LinkItem} is returned\n */\nSimpleLinkDelegate.fetchLinkItems = async function (\n\toLink: MdcLink,\n\toBindingContext: Context,\n\toInfoLog: InfoLog\n): Promise<LinkItem[] | null> {\n\tconst oPayload = oLink.getPayload() as LinkDelegatePayload;\n\tif (oBindingContext && SimpleLinkDelegate._getSemanticObjects(oPayload)) {\n\t\tif (oInfoLog) {\n\t\t\toInfoLog.initialize(SimpleLinkDelegate._getSemanticObjects(oPayload));\n\t\t}\n\t\tconst _oLinkCustomData = this._link && this._fetchLinkCustomData(this._link);\n\t\tthis.aLinkCustomData =\n\t\t\t_oLinkCustomData &&\n\t\t\tthis._fetchLinkCustomData(this._link!)?.map(function (linkItem: CustomData) {\n\t\t\t\treturn linkItem.getValue() as unknown;\n\t\t\t});\n\n\t\t//here oContext is the context of the link\n\t\tconst oSemanticAttributesResolved = SimpleLinkDelegate._calculateSemanticAttributes(oBindingContext, oPayload, oInfoLog, oLink);\n\t\tconst oSemanticAttributes = oSemanticAttributesResolved.results;\n\t\tconst oPayloadResolved = oSemanticAttributesResolved.payload;\n\n\t\treturn SimpleLinkDelegate._retrieveNavigationTargets(\"\", oSemanticAttributes, oPayloadResolved, oInfoLog, this._link).then(\n\t\t\tfunction (aLinks: LinkItem[] /*oOwnNavigationLink: any*/) {\n\t\t\t\treturn aLinks.length === 0 ? null : aLinks;\n\t\t\t}\n\t\t);\n\t} else {\n\t\treturn Promise.resolve(null);\n\t}\n};\n\n/**\n * Find the type of the link.\n * @param payload The payload of the mdc link.\n * @param aLinkItems Links returned by call to mdc _retrieveUnmodifiedLinkItems.\n * @returns The type of the link as defined by mdc.\n */\nSimpleLinkDelegate._findLinkType = function (\n\tpayload: LinkDelegatePayload,\n\taLinkItems: LinkItem[]\n): {\n\tlinkType: LinkType;\n\tlinkItem: LinkItem | undefined;\n} {\n\tlet nLinkType, oLinkItem;\n\tif (aLinkItems?.length === 1) {\n\t\toLinkItem = new LinkItem({\n\t\t\ttext: aLinkItems[0].getText(),\n\t\t\thref: aLinkItems[0].getHref()\n\t\t});\n\t\tnLinkType = payload.hasQuickViewFacets === \"false\" ? LinkType.DirectLink : LinkType.Popover;\n\t} else if (payload.hasQuickViewFacets === \"false\" && aLinkItems?.length === 0) {\n\t\tnLinkType = LinkType.Text;\n\t} else {\n\t\tnLinkType = LinkType.Popover;\n\t}\n\treturn {\n\t\tlinkType: nLinkType,\n\t\tlinkItem: oLinkItem\n\t};\n};\n\n/**\n * Calculates and returns the type of link that is displayed.\n * @public\n * @param oLink Instance of the <code>Link</code>\n * @returns Once the promise resolves, an object containing an initial {@link sap.ui.mdc.link.LinkType} and an optional <code>Promise</code> are returned.\n * The optional <code>Promise</code> also returns a {@link sap.ui.mdc.link.LinkType} object.\n * Once the optional <code>Promise</code> has been resolved, the returned {@link sap.ui.mdc.link.LinkType} overwrites the <code>initialType</code>.\n */\nSimpleLinkDelegate.fetchLinkType = async function (oLink: FELink): Promise<LinkTypeWrapper> {\n\tconst _oCurrentLink = oLink;\n\tconst _oPayload = Object.assign({}, oLink.getPayload()) as LinkDelegatePayload;\n\tlet oDefaultInitialType: LinkTypeWrapper = {\n\t\tinitialType: {\n\t\t\ttype: LinkType.Popover,\n\t\t\tdirectLink: undefined as unknown as LinkItem\n\t\t},\n\t\truntimeType: undefined as unknown as Promise<MdcLinkType>\n\t};\n\t// clean appStateKeyMap storage\n\tif (!this.appStateKeyMap) {\n\t\tthis.appStateKeyMap = {};\n\t}\n\n\ttry {\n\t\tif (_oPayload?.semanticObjects) {\n\t\t\tthis._link = oLink;\n\t\t\tlet aLinkItems = await _oCurrentLink._retrieveUnmodifiedLinkItems();\n\t\t\tif (aLinkItems.length === 1) {\n\t\t\t\t// This is the direct navigation use case so we need to perform the appropriate checks / transformations\n\t\t\t\taLinkItems = await _oCurrentLink.retrieveLinkItems();\n\t\t\t}\n\t\t\tconst _LinkType = SimpleLinkDelegate._findLinkType(_oPayload, aLinkItems);\n\t\t\treturn {\n\t\t\t\tinitialType: {\n\t\t\t\t\ttype: _LinkType.linkType,\n\t\t\t\t\tdirectLink: (_LinkType.linkItem ? _LinkType.linkItem : undefined) as unknown as LinkItem // Yes stupid type somewhere\n\t\t\t\t},\n\t\t\t\truntimeType: undefined as unknown as Promise<MdcLinkType>\n\t\t\t};\n\t\t} else if (_oPayload?.contact?.length && _oPayload?.contact?.length > 0) {\n\t\t\treturn oDefaultInitialType;\n\t\t} else if (_oPayload?.entityType && _oPayload?.navigationPath) {\n\t\t\treturn oDefaultInitialType;\n\t\t}\n\t\toDefaultInitialType = undefined as unknown as LinkTypeWrapper;\n\t\tthrow new Error(\"no payload or semanticObjects found\");\n\t} catch (oError: unknown) {\n\t\tLog.error(\"Error in SimpleLinkDelegate.fetchLinkType: \", oError as string);\n\t}\n\treturn oDefaultInitialType;\n};\n\nSimpleLinkDelegate._RemoveTitleLinkFromTargets = function (\n\tmdcLink: MdcLink,\n\tlinkItems: LinkItem[],\n\ttitleHasLink: boolean,\n\ttitleIntent: string | undefined\n): boolean {\n\tlet titleLinkHref;\n\tlet result = false;\n\tif (titleHasLink && titleIntent && linkItems.length) {\n\t\tconst linkIntentWithoutParameters = `#${linkItems[0].getProperty(\"key\")}`;\n\t\tconst titleIntentWithoutParameters = titleIntent.split(\"?\")[0];\n\t\tconst linkIsPrimaryAction = titleIntentWithoutParameters === linkIntentWithoutParameters;\n\t\tif (linkIsPrimaryAction) {\n\t\t\ttitleLinkHref = linkItems[0].getProperty(\"href\");\n\t\t\tthis.payload.titleLinkhref = titleLinkHref;\n\t\t\tconst mdcLinkModel = mdcLink.getModel(\"$sapuimdcLink\");\n\t\t\t(mdcLinkModel as JSONModel).setProperty(\"/titleLinkHref\", titleLinkHref);\n\t\t\tconst aMLinkItems = mdcLinkModel?.getProperty(\"/linkItems\").filter(function (linkItemFromMdc: LinkItem) {\n\t\t\t\tif (`#${linkItemFromMdc.key}` !== linkIntentWithoutParameters) {\n\t\t\t\t\treturn linkItemFromMdc;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (aMLinkItems && aMLinkItems.length > 0) {\n\t\t\t\t(mdcLinkModel as JSONModel).setProperty(\"/linkItems/\", aMLinkItems);\n\t\t\t}\n\t\t\tresult = true;\n\t\t}\n\t}\n\treturn result;\n};\nSimpleLinkDelegate._IsSemanticObjectDynamic = function (aNewLinkCustomData: unknown[], oThis: typeof SimpleLinkDelegate): boolean {\n\tif (aNewLinkCustomData && oThis.aLinkCustomData) {\n\t\treturn (\n\t\t\toThis.aLinkCustomData.filter(function (link: unknown) {\n\t\t\t\treturn (\n\t\t\t\t\taNewLinkCustomData.filter(function (otherLink: unknown) {\n\t\t\t\t\t\treturn otherLink !== link;\n\t\t\t\t\t}).length > 0\n\t\t\t\t);\n\t\t\t}).length > 0\n\t\t);\n\t} else {\n\t\treturn false;\n\t}\n};\nSimpleLinkDelegate._getLineContext = function (oView: FEView, mLineContext: Context | undefined): Context {\n\tif (!mLineContext) {\n\t\tif (\n\t\t\t(oView.getAggregation(\"content\") as ManagedObject[])[0] &&\n\t\t\t(oView.getAggregation(\"content\") as ManagedObject[])[0].getBindingContext()\n\t\t) {\n\t\t\treturn (oView.getAggregation(\"content\") as ManagedObject[])[0].getBindingContext()!;\n\t\t}\n\t}\n\treturn mLineContext!;\n};\nSimpleLinkDelegate._setFilterContextUrlForSelectionVariant = function (\n\toView: FEView,\n\toSelectionVariant: SelectionVariant,\n\toNavigationService: NavigationService\n): SelectionVariant {\n\tif (oView.getViewData().entitySet && oSelectionVariant) {\n\t\tconst sContextUrl = oNavigationService.constructContextUrl(oView.getViewData().entitySet!, oView.getModel());\n\t\toSelectionVariant.setFilterContextUrl(sContextUrl);\n\t}\n\treturn oSelectionVariant;\n};\n\nSimpleLinkDelegate._setObjectMappings = function (\n\tsSemanticObject: string,\n\toParams: Record<string, string>,\n\taSemanticObjectMappings: RegisteredSemanticObjectMappings,\n\toSelectionVariant: SelectionVariant\n): { params: Record<string, string>; hasChanged: boolean; selectionVariant: SelectionVariant } {\n\tlet hasChanged = false;\n\tconst modifiedSelectionVariant = new SelectionVariant(oSelectionVariant.toJSONObject());\n\t// if semanticObjectMappings has items with dynamic semanticObjects we need to resolve them using oParams\n\taSemanticObjectMappings.forEach(function (mapping) {\n\t\tlet mappingSemanticObject = mapping.semanticObject;\n\t\tconst mappingSemanticObjectPath = getDynamicPathFromSemanticObject(mapping.semanticObject);\n\t\tif (mappingSemanticObjectPath && oParams[mappingSemanticObjectPath]) {\n\t\t\tmappingSemanticObject = oParams[mappingSemanticObjectPath];\n\t\t}\n\t\tif (sSemanticObject === mappingSemanticObject) {\n\t\t\tconst oMappings = mapping.items;\n\t\t\tfor (const i in oMappings) {\n\t\t\t\tconst sLocalProperty = oMappings[i].key;\n\t\t\t\tconst sSemanticObjectProperty = oMappings[i].value;\n\t\t\t\tif (sLocalProperty !== sSemanticObjectProperty) {\n\t\t\t\t\tif (oParams[sLocalProperty]) {\n\t\t\t\t\t\tmodifiedSelectionVariant.removeParameter(sSemanticObjectProperty);\n\t\t\t\t\t\tmodifiedSelectionVariant.removeSelectOption(sSemanticObjectProperty);\n\t\t\t\t\t\tmodifiedSelectionVariant.renameParameter(sLocalProperty, sSemanticObjectProperty);\n\t\t\t\t\t\tmodifiedSelectionVariant.renameSelectOption(sLocalProperty, sSemanticObjectProperty);\n\t\t\t\t\t\toParams[sSemanticObjectProperty] = oParams[sLocalProperty];\n\t\t\t\t\t\tdelete oParams[sLocalProperty];\n\t\t\t\t\t\thasChanged = true;\n\t\t\t\t\t}\n\t\t\t\t\t// We remove the parameter as there is no value\n\n\t\t\t\t\t// The local property comes from a navigation property\n\t\t\t\t\telse if (sLocalProperty.split(\"/\").length > 1) {\n\t\t\t\t\t\t// find the property to be removed\n\t\t\t\t\t\t//1. If the property name also exist without nav, we need to look for a select option that looks like\n\t\t\t\t\t\t// contextEntity.navProperty.property\n\t\t\t\t\t\tlet localPropertySelectOptionName = modifiedSelectionVariant.getSelectOptionsPropertyNames().find((property) => {\n\t\t\t\t\t\t\treturn property.includes(sLocalProperty.replace(\"/\", \".\"));\n\t\t\t\t\t\t});\n\t\t\t\t\t\t//2. there is no property named the same on the contextEntity so the selectOption is named property\n\t\t\t\t\t\tlocalPropertySelectOptionName = localPropertySelectOptionName\n\t\t\t\t\t\t\t? localPropertySelectOptionName\n\t\t\t\t\t\t\t: sLocalProperty.split(\"/\").slice(-1)[0];\n\t\t\t\t\t\tif (!oParams[localPropertySelectOptionName]) {\n\t\t\t\t\t\t\t// The navigation property has no value\n\t\t\t\t\t\t\tdelete oParams[localPropertySelectOptionName];\n\t\t\t\t\t\t\tmodifiedSelectionVariant.removeParameter(localPropertySelectOptionName);\n\t\t\t\t\t\t\tmodifiedSelectionVariant.removeSelectOption(localPropertySelectOptionName);\n\t\t\t\t\t\t} else if (localPropertySelectOptionName !== sSemanticObjectProperty) {\n\t\t\t\t\t\t\t// The navigation property has a value and properties names are different\n\t\t\t\t\t\t\tmodifiedSelectionVariant.removeParameter(sSemanticObjectProperty);\n\t\t\t\t\t\t\tmodifiedSelectionVariant.removeSelectOption(sSemanticObjectProperty);\n\t\t\t\t\t\t\tmodifiedSelectionVariant.renameParameter(localPropertySelectOptionName, sSemanticObjectProperty);\n\t\t\t\t\t\t\tmodifiedSelectionVariant.renameSelectOption(localPropertySelectOptionName, sSemanticObjectProperty);\n\t\t\t\t\t\t\toParams[sSemanticObjectProperty] = oParams[localPropertySelectOptionName];\n\t\t\t\t\t\t\tdelete oParams[localPropertySelectOptionName];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdelete oParams[sLocalProperty];\n\t\t\t\t\t\tmodifiedSelectionVariant.removeParameter(sSemanticObjectProperty);\n\t\t\t\t\t\tmodifiedSelectionVariant.removeSelectOption(sSemanticObjectProperty);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\treturn { params: oParams, hasChanged, selectionVariant: modifiedSelectionVariant };\n};\n\n/**\n * Call getAppStateKeyAndUrlParameters in navigation service and cache its results.\n * @param _this The instance of quickviewdelegate.\n * @param navigationService The navigation service.\n * @param selectionVariant The current selection variant.\n * @param semanticObject The current semanticObject.\n * @returns A promise with the semanticAttributes and appstatekey.\n */\nSimpleLinkDelegate._getAppStateKeyAndUrlParameters = async function (\n\t_this: typeof SimpleLinkDelegate,\n\tnavigationService: NavigationService,\n\tselectionVariant: SelectionVariant,\n\tsemanticObject: string\n): Promise<string[]> {\n\tlet aValues = [];\n\n\t// check if default cache contains already the unmodified selectionVariant\n\tif (deepEqual(selectionVariant, _this.appStateKeyMap[\"\"]?.selectionVariant)) {\n\t\tconst defaultCache = _this.appStateKeyMap[\"\"];\n\t\treturn [defaultCache.semanticAttributes!, defaultCache.appstatekey!];\n\t}\n\t// update url parameters because there is a change in selection variant\n\tif (\n\t\t_this.appStateKeyMap[`${semanticObject}`] === undefined ||\n\t\t!deepEqual(_this.appStateKeyMap[`${semanticObject}`].selectionVariant, selectionVariant)\n\t) {\n\t\taValues = await toES6Promise<string[]>(navigationService.getAppStateKeyAndUrlParameters(selectionVariant.toJSONString()));\n\t\t_this.appStateKeyMap[`${semanticObject}`] = {\n\t\t\tsemanticAttributes: aValues[0],\n\t\t\tappstatekey: aValues[1],\n\t\t\tselectionVariant: selectionVariant\n\t\t};\n\t} else {\n\t\tconst cache = _this.appStateKeyMap[`${semanticObject}`];\n\t\taValues = [cache.semanticAttributes!, cache.appstatekey!];\n\t}\n\treturn aValues;\n};\n\nSimpleLinkDelegate._getLinkItemWithNewParameter = async function (\n\tservices: { shellServices: IShellServices; navigationService: NavigationService },\n\tquickViewDelegate: typeof SimpleLinkDelegate,\n\tmdcLinkToModify: {\n\t\tmdcLink: MdcLink;\n\t\tpayload: LinkDelegatePayload;\n\t\tlinkParametersFromSelectionVariant: Record<string, string>;\n\t\ttitleHasLink: boolean;\n\t\tmdcLinkItem: LinkItem;\n\t},\n\tappStateKey: string | undefined,\n\tselectionVariant: SelectionVariant\n): Promise<boolean> {\n\tconst mdcLinkItemHash = await services.shellServices.expandCompactHash(mdcLinkToModify.mdcLinkItem.getHref());\n\tconst shellHash = services.shellServices.parseShellHash(mdcLinkItemHash);\n\tconst params = Object.assign({}, mdcLinkToModify.linkParametersFromSelectionVariant);\n\tlet titleIntent: string | undefined;\n\tconst { params: oNewParams } = SimpleLinkDelegate._setObjectMappings(\n\t\tshellHash.semanticObject,\n\t\tparams,\n\t\tmdcLinkToModify.payload.semanticObjectMappings,\n\t\tselectionVariant\n\t);\n\tdelete oNewParams[\"sap-xapp-state\"];\n\tdelete oNewParams[\"@odata.etag\"];\n\tconst updatedParameters = {\n\t\tsemanticObject: shellHash.semanticObject,\n\t\taction: shellHash.action,\n\t\tparams: oNewParams,\n\t\tappStateKey: appStateKey\n\t};\n\tconst linksUpdatedWithParameters = await services.shellServices.getLinks([updatedParameters]);\n\tconst intentModified = linksUpdatedWithParameters && linksUpdatedWithParameters[0] && linksUpdatedWithParameters[0][0].intent;\n\tmdcLinkToModify.mdcLinkItem.setHref(intentModified);\n\t// The link is removed from the target list because the title link has same target.\n\tif (\n\t\tmdcLinkToModify.payload.semanticPrimaryActions &&\n\t\tmdcLinkToModify.payload.semanticPrimaryActions.some((action) => action !== null)\n\t) {\n\t\tconst { primaryIntentFound } = FieldHelper.findPrimaryActionWithinIntents(\n\t\t\tmdcLinkToModify.payload.semanticPrimaryActions,\n\t\t\tmdcLinkToModify.payload\n\t\t);\n\t\ttitleIntent = primaryIntentFound ? primaryIntentFound.intent ?? \"\" : undefined;\n\t}\n\treturn SimpleLinkDelegate._RemoveTitleLinkFromTargets.bind(quickViewDelegate)(\n\t\tmdcLinkToModify.mdcLink,\n\t\t[mdcLinkToModify.mdcLinkItem],\n\t\tmdcLinkToModify.titleHasLink,\n\t\ttitleIntent\n\t);\n};\nSimpleLinkDelegate._removeEmptyLinkItem = function (aLinkItems: LinkItem[]): LinkItem[] {\n\treturn aLinkItems.filter((linkItem: LinkItem) => {\n\t\treturn linkItem !== undefined;\n\t});\n};\n\n/**\n * Update the payload with semantic object mapping if a semantic object is present with no mapping.\n * This is to ensure that the semantic object is passed with the corresponding property's value if no explicit mapping exists.\n * @private\n * @param payload The new updated payload.\n * @param propertyPath The property path for which the semantic object is mapped\n * @param lineContext Context for the row\n * @param view View\n */\nSimpleLinkDelegate._checkImplicitSemanticObjectMapping = function (\n\tpayload: LinkDelegatePayload,\n\tpropertyPath: string | undefined,\n\tlineContext: Context,\n\tview: FEView\n): void {\n\tif (!propertyPath) {\n\t\treturn;\n\t}\n\t//We ensure to remove the sensitive data so that we do not add the semanticobject mappings to the payload if they are sensitive\n\t//Also we have to remove these before processSemanticAttributes as semantic object mappings are used in it.\n\tconst lineContextData = view.getController()._intentBasedNavigation.removeSensitiveData(\n\t\tlineContext.getObject(),\n\t\tview\n\t\t\t.getModel()\n\t\t\t.getMetaModel()\n\t\t\t.getMetaPath(lineContext?.getPath() || \"\"),\n\t\tview.getModel().getMetaModel()\n\t);\n\tif (Object.keys(lineContextData)?.includes(propertyPath)) {\n\t\tpayload.semanticObjects?.forEach((semanticObject: string) => {\n\t\t\tconst filteredSemanticObjectMappings = payload.semanticObjectMappings.filter(\n\t\t\t\t(mapping: RegisteredSemanticObjectMapping) => mapping.semanticObject === semanticObject\n\t\t\t);\n\t\t\tif (!filteredSemanticObjectMappings.length) {\n\t\t\t\tpayload.semanticObjectMappings.push({\n\t\t\t\t\tsemanticObject: semanticObject,\n\t\t\t\t\titems: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: propertyPath,\n\t\t\t\t\t\t\tvalue: semanticObject\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n};\n\n/**\n * Enables the modification of LinkItems before the popover opens. This enables additional parameters\n * to be added to the link.\n * @param mdcLink The Link control\n * @param oBindingContext The binding context of the Link\n * @param aLinkItems The LinkItems of the Link that can be modified\n * @returns Once resolved, an array of {@link sap.ui.mdc.link.LinkItem} is returned\n */\nSimpleLinkDelegate.modifyLinkItems = async function (\n\tmdcLink: MdcLink,\n\toBindingContext: Context,\n\taLinkItems: LinkItem[]\n): Promise<LinkItem[]> {\n\tif (aLinkItems.length !== 0) {\n\t\tthis.payload = mdcLink.getPayload() as LinkDelegatePayload;\n\t\tconst payloadResolved = SimpleLinkDelegate.calculatePayloadWithDynamicSemanticObjectsResolved(mdcLink);\n\t\tconst oView = CommonUtils.getTargetView(mdcLink);\n\t\tconst oAppComponent = CommonUtils.getAppComponent(oView);\n\t\tconst primaryActionIsActive = (await FieldHelper.checkPrimaryActions(payloadResolved, true, oAppComponent)) as {\n\t\t\ttitleLink: Partial<{ intent: string }>;\n\t\t\thasTitleLink: boolean;\n\t\t};\n\t\tconst bTitleHasLink: boolean = primaryActionIsActive.hasTitleLink;\n\t\tconst oShellServices = oAppComponent.getShellServices();\n\t\tif (!oShellServices.hasUShell()) {\n\t\t\tLog.error(\"QuickViewDelegate: Cannot retrieve the shell services\");\n\t\t\treturn Promise.reject();\n\t\t}\n\t\tconst oMetaModel = oView.getModel().getMetaModel();\n\t\tlet mLineContext = mdcLink.getBindingContext()!;\n\t\tconst oTargetInfo: { semanticObject: string; action: string; propertiesWithoutConflict?: string[]; linkContextPath?: string } = {\n\t\t\tsemanticObject: payloadResolved.semanticObjects[0],\n\t\t\taction: \"\"\n\t\t};\n\n\t\ttry {\n\t\t\tconst oNavigationService = oAppComponent.getNavigationService();\n\t\t\tconst oController = oView.getController();\n\t\t\tlet oSelectionVariant, mLineContextData;\n\t\t\tmLineContext = SimpleLinkDelegate._getLineContext(oView, mLineContext);\n\t\t\tconst sMetaPath = oMetaModel.getMetaPath(mLineContext?.getPath() || \"\");\n\t\t\tmLineContextData = mLineContext?.getObject();\n\t\t\tif (mLineContext) {\n\t\t\t\tconst propertyPath = this.payload?.dataFieldPropPath;\n\t\t\t\tconst pathsToRetain = [];\n\t\t\t\tSimpleLinkDelegate._checkImplicitSemanticObjectMapping(payloadResolved, propertyPath, mLineContext, oView);\n\t\t\t\t//We ensure that all the paths that are used in the semantic object mappings are retained to apply the mappings later on\n\t\t\t\tthis.payload.semanticObjectMappings.forEach((mappings: RegisteredSemanticObjectMapping) => {\n\t\t\t\t\tmappings.items.forEach((semanticMappingDef: { key: string; value: string }) => {\n\t\t\t\t\t\tpathsToRetain.push(semanticMappingDef.key);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tif (propertyPath) {\n\t\t\t\t\tpathsToRetain.push(propertyPath);\n\t\t\t\t}\n\t\t\t\tmLineContextData = oController._intentBasedNavigation.processSemanticAttributes(\n\t\t\t\t\tmLineContext,\n\t\t\t\t\tmLineContextData,\n\t\t\t\t\tpathsToRetain\n\t\t\t\t);\n\n\t\t\t\tmLineContextData = oController._intentBasedNavigation.removeSensitiveData(mLineContextData, sMetaPath, oMetaModel);\n\n\t\t\t\t//even if we retain the nav prop, this next line deltetes it\n\t\t\t\tmLineContextData = oController._intentBasedNavigation.prepareContextForExternalNavigation(mLineContextData, mLineContext);\n\t\t\t}\n\t\t\toSelectionVariant = oNavigationService.mixAttributesAndSelectionVariant(mLineContextData.semanticAttributes as object, {});\n\t\t\toTargetInfo.propertiesWithoutConflict = mLineContextData.propertiesWithoutConflict;\n\t\t\toTargetInfo.linkContextPath = mdcLink.getBindingContext()?.getPath();\n\t\t\t//calling this function before adaptNavigationContext to add filter context URL in selection variant\n\t\t\toSelectionVariant = SimpleLinkDelegate._setFilterContextUrlForSelectionVariant(oView, oSelectionVariant, oNavigationService);\n\n\t\t\t//TO modify the selection variant from the Extension API\n\t\t\toController.intentBasedNavigation.adaptNavigationContext(oSelectionVariant, oTargetInfo);\n\n\t\t\tSimpleLinkDelegate._removeTechnicalParameters(oSelectionVariant);\n\n\t\t\tconst oParams = oNavigationService.oNavHandler._getURLParametersFromSelectionVariant(oSelectionVariant);\n\t\t\tconst appStateKey = undefined;\n\n\t\t\tlet titleLinktoBeRemove: boolean;\n\t\t\taLinkItems = SimpleLinkDelegate._removeEmptyLinkItem(aLinkItems);\n\t\t\tfor (const index in aLinkItems) {\n\t\t\t\ttitleLinktoBeRemove = await SimpleLinkDelegate._getLinkItemWithNewParameter(\n\t\t\t\t\t{ shellServices: oShellServices, navigationService: oNavigationService },\n\t\t\t\t\tthis,\n\t\t\t\t\t{\n\t\t\t\t\t\tmdcLink: mdcLink,\n\t\t\t\t\t\tpayload: payloadResolved,\n\t\t\t\t\t\tlinkParametersFromSelectionVariant: oParams,\n\t\t\t\t\t\ttitleHasLink: bTitleHasLink,\n\t\t\t\t\t\tmdcLinkItem: aLinkItems[index]\n\t\t\t\t\t},\n\t\t\t\t\tappStateKey,\n\t\t\t\t\toSelectionVariant\n\t\t\t\t);\n\t\t\t\t// Do not remove the link if there is only one direct target application\n\t\t\t\tif (titleLinktoBeRemove === true && aLinkItems.length > 1) {\n\t\t\t\t\t(aLinkItems as (LinkItem | undefined)[])[index] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn SimpleLinkDelegate._removeEmptyLinkItem(aLinkItems);\n\t\t} catch (oError) {\n\t\t\tLog.error(\"Error while getting the navigation service\", oError as string);\n\t\t\treturn [];\n\t\t}\n\t} else {\n\t\treturn aLinkItems;\n\t}\n};\nSimpleLinkDelegate.beforeNavigationCallback = async function (mdcLink: MdcLink, event: Event<{}, Link>): Promise<boolean> {\n\tconst source = event.getSource(),\n\t\thref = source.getHref(),\n\t\turlParsing = Factory.getService(\"URLParsing\"),\n\t\thash = href && urlParsing.parseShellHash(href);\n\n\tKeepAliveHelper.storeControlRefreshStrategyForHash(source, hash);\n\n\tconst view = CommonUtils.getTargetView(mdcLink);\n\tconst appComponent = CommonUtils.getAppComponent(view);\n\tconst navigationService = appComponent.getNavigationService();\n\n\tconst hashToNavigate = source.getHref();\n\tconst decomposedHash: DecomposedHash = urlParsing.parseShellHash(hashToNavigate);\n\n\tnavigationService.navigate(\n\t\tdecomposedHash && decomposedHash.semanticObject,\n\t\tdecomposedHash && decomposedHash.action,\n\t\tdecomposedHash && decomposedHash.params\n\t);\n\treturn Promise.resolve(false);\n};\nSimpleLinkDelegate._removeTechnicalParameters = function (oSelectionVariant: SelectionVariant): void {\n\toSelectionVariant.removeSelectOption(\"@odata.context\");\n\toSelectionVariant.removeSelectOption(\"@odata.metadataEtag\");\n\toSelectionVariant.removeSelectOption(\"SAP__Messages\");\n};\n\nSimpleLinkDelegate._getSemanticObjectCustomDataValue = function (\n\taLinkCustomData: CustomData[],\n\toSemanticObjectsResolved: Record<string, { value: string }>\n): void {\n\tlet sPropertyName: string, sCustomDataValue: string;\n\tfor (const element of aLinkCustomData) {\n\t\tsPropertyName = element.getKey();\n\t\tsCustomDataValue = element.getValue();\n\t\toSemanticObjectsResolved[sPropertyName] = { value: sCustomDataValue };\n\t}\n};\n\n/**\n * Check the semantic object name if it is dynamic or not.\n * @private\n * @param pathOrValue The semantic object path or name\n * @returns True if semantic object is dynamic\n */\nSimpleLinkDelegate._isDynamicPath = function (pathOrValue: string): boolean {\n\tconst expression = resolveBindingString(pathOrValue);\n\tif (expression._type === \"EmbeddedBinding\" || expression._type === \"EmbeddedExpressionBinding\") {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\n\n/**\n * Update the payload with semantic object values from custom data of Link.\n * @private\n * @param newPayload The new updated payload.\n * @param semanticObjectName The semantic object name resolved.\n */\nSimpleLinkDelegate._updatePayloadWithResolvedSemanticObjectValue = function (\n\tnewPayload: LinkDelegatePayload,\n\tsemanticObjectName: string | undefined\n): void {\n\tswitch (typeof semanticObjectName) {\n\t\tcase \"string\":\n\t\t\tnewPayload.semanticObjectsResolved?.push(semanticObjectName);\n\t\t\tnewPayload.semanticObjects.push(semanticObjectName);\n\t\t\tbreak;\n\t\tcase \"object\":\n\t\t\tfor (const j in semanticObjectName as string[]) {\n\t\t\t\tnewPayload.semanticObjectsResolved?.push(semanticObjectName[j]);\n\t\t\t\tnewPayload.semanticObjects.push(semanticObjectName[j]);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t}\n};\n\nSimpleLinkDelegate._createNewPayloadWithDynamicSemanticObjectsResolved = function (\n\tpayload: LinkDelegatePayload,\n\tsemanticObjectsResolved: Record<string, { value: string }>,\n\tnewPayload: LinkDelegatePayload\n): void {\n\tlet semanticObjectNameToResolve: string;\n\tconst fnFindQualifier = function (\n\t\tinternalQualifiers: Record<string, CompiledBindingToolkitExpression>,\n\t\tsemanticObject: string\n\t): string | undefined {\n\t\treturn Object.keys(internalQualifiers).find((key) => internalQualifiers[key] === semanticObject);\n\t};\n\tfor (const i in payload.semanticObjects) {\n\t\tsemanticObjectNameToResolve = payload.semanticObjects[i];\n\t\tif (SimpleLinkDelegate._isDynamicPath(semanticObjectNameToResolve)) {\n\t\t\tconst key = payload.qualifiers && fnFindQualifier(payload.qualifiers, semanticObjectNameToResolve);\n\t\t\tconst semanticObjectNameResolved = key && semanticObjectsResolved[key].value;\n\t\t\tSimpleLinkDelegate._updatePayloadWithResolvedSemanticObjectValue(newPayload, semanticObjectNameResolved);\n\t\t} else {\n\t\t\tnewPayload.semanticObjects.push(semanticObjectNameToResolve);\n\t\t}\n\t}\n};\n\n/**\n * Update the semantic object name from the resolved value for the mappings attributes.\n * @private\n * @param mdcPayload The payload given by the application.\n * @param mdcPayloadWithDynamicSemanticObjectsResolved The payload with the resolved value for the semantic object name.\n * @param newPayload The new updated payload.\n */\nSimpleLinkDelegate._updateSemanticObjectsForMappings = function (\n\tmdcPayload: LinkDelegatePayload,\n\tmdcPayloadWithDynamicSemanticObjectsResolved: LinkDelegatePayload,\n\tnewPayload: LinkDelegatePayload\n): void {\n\t// update the semantic object name from the resolved ones in the semantic object mappings.\n\tmdcPayloadWithDynamicSemanticObjectsResolved.semanticObjectMappings.forEach(function (\n\t\tsemanticObjectMapping: RegisteredSemanticObjectMapping\n\t) {\n\t\tif (semanticObjectMapping.semanticObject && SimpleLinkDelegate._isDynamicPath(semanticObjectMapping.semanticObject)) {\n\t\t\tsemanticObjectMapping.semanticObject =\n\t\t\t\tnewPayload.semanticObjects[mdcPayload.semanticObjects.indexOf(semanticObjectMapping.semanticObject)];\n\t\t}\n\t});\n};\n\n/**\n * Update the semantic object name from the resolved value for the unavailable actions.\n * @private\n * @param mdcPayload The payload given by the application.\n * @param mdcPayloadSemanticObjectUnavailableActions The unavailable actions given by the application.\n * @param mdcPayloadWithDynamicSemanticObjectsResolved The updated payload with the resolved value for the semantic object name for the unavailable actions.\n */\nSimpleLinkDelegate._updateSemanticObjectsUnavailableActions = function (\n\tmdcPayload: LinkDelegatePayload,\n\tmdcPayloadSemanticObjectUnavailableActions: RegisteredSemanticObjectUnavailableAction[],\n\tmdcPayloadWithDynamicSemanticObjectsResolved: LinkDelegatePayload\n): void {\n\tlet _Index: number;\n\tmdcPayloadSemanticObjectUnavailableActions.forEach(function (\n\t\tsemanticObjectUnavailableAction: RegisteredSemanticObjectUnavailableAction\n\t) {\n\t\t// Dynamic SemanticObject has an unavailable action\n\t\tif (\n\t\t\tsemanticObjectUnavailableAction?.semanticObject &&\n\t\t\tSimpleLinkDelegate._isDynamicPath(semanticObjectUnavailableAction.semanticObject)\n\t\t) {\n\t\t\t_Index = mdcPayload.semanticObjects.findIndex(function (semanticObject: string) {\n\t\t\t\treturn semanticObject === semanticObjectUnavailableAction.semanticObject;\n\t\t\t});\n\t\t\tif (_Index !== undefined) {\n\t\t\t\t// Get the SemanticObject name resolved to a value\n\t\t\t\tsemanticObjectUnavailableAction.semanticObject = mdcPayloadWithDynamicSemanticObjectsResolved.semanticObjects[_Index];\n\t\t\t}\n\t\t}\n\t});\n};\n\n/**\n * Remove empty semantic object mappings and if there is no semantic object name, link to it.\n * @private\n * @param mdcPayloadWithDynamicSemanticObjectsResolved The payload used to check the mappings of the semantic objects.\n */\nSimpleLinkDelegate._removeEmptySemanticObjectsMappings = function (\n\tmdcPayloadWithDynamicSemanticObjectsResolved: LinkDelegatePayload\n): void {\n\t// remove undefined Semantic Object Mapping\n\tfor (\n\t\tlet mappingsCount = 0;\n\t\tmappingsCount < mdcPayloadWithDynamicSemanticObjectsResolved.semanticObjectMappings.length;\n\t\tmappingsCount++\n\t) {\n\t\tif (\n\t\t\tmdcPayloadWithDynamicSemanticObjectsResolved.semanticObjectMappings[mappingsCount] &&\n\t\t\tmdcPayloadWithDynamicSemanticObjectsResolved.semanticObjectMappings[mappingsCount].semanticObject === undefined\n\t\t) {\n\t\t\tmdcPayloadWithDynamicSemanticObjectsResolved.semanticObjectMappings.splice(mappingsCount, 1);\n\t\t}\n\t}\n};\n\nSimpleLinkDelegate._setPayloadWithDynamicSemanticObjectsResolved = function (\n\tpayload: LinkDelegatePayload,\n\tnewPayload: LinkDelegatePayload\n): LinkDelegatePayload {\n\tlet oPayloadWithDynamicSemanticObjectsResolved: LinkDelegatePayload;\n\tif (newPayload.semanticObjectsResolved && newPayload.semanticObjectsResolved.length > 0) {\n\t\toPayloadWithDynamicSemanticObjectsResolved = {\n\t\t\tqualifiers: payload.qualifiers,\n\t\t\tentityType: payload.entityType,\n\t\t\tdataField: payload.dataField,\n\t\t\tcontact: payload.contact,\n\t\t\tnavigationPath: payload.navigationPath,\n\t\t\tpropertyPathLabel: payload.propertyPathLabel,\n\t\t\tsemanticObjectMappings: deepClone(payload.semanticObjectMappings),\n\t\t\tsemanticObjectUnavailableActions: [],\n\t\t\tsemanticObjects: newPayload.semanticObjects\n\t\t};\n\t\tSimpleLinkDelegate._updateSemanticObjectsForMappings(payload, oPayloadWithDynamicSemanticObjectsResolved, newPayload);\n\t\tconst _SemanticObjectUnavailableActions: RegisteredSemanticObjectUnavailableAction[] = deepClone(\n\t\t\tpayload.semanticObjectUnavailableActions\n\t\t);\n\t\tSimpleLinkDelegate._updateSemanticObjectsUnavailableActions(\n\t\t\tpayload,\n\t\t\t_SemanticObjectUnavailableActions,\n\t\t\toPayloadWithDynamicSemanticObjectsResolved\n\t\t);\n\t\toPayloadWithDynamicSemanticObjectsResolved.semanticObjectUnavailableActions = _SemanticObjectUnavailableActions;\n\t\tSimpleLinkDelegate._removeEmptySemanticObjectsMappings(oPayloadWithDynamicSemanticObjectsResolved);\n\t\treturn oPayloadWithDynamicSemanticObjectsResolved;\n\t} else {\n\t\treturn {} as LinkDelegatePayload;\n\t}\n};\n\nSimpleLinkDelegate._getPayloadWithDynamicSemanticObjectsResolved = function (\n\tpayload: LinkDelegatePayload,\n\tlinkCustomData: CustomData[] | undefined\n): LinkDelegatePayload | undefined {\n\tlet payloadWithDynamicSemanticObjectsResolved: LinkDelegatePayload;\n\tconst semanticObjectsResolved: Record<string, { value: string }> = {};\n\tconst newPayload: LinkDelegatePayload = {\n\t\tsemanticObjects: [],\n\t\tsemanticObjectsResolved: [],\n\t\tsemanticObjectMappings: [],\n\t\tsemanticObjectUnavailableActions: [],\n\t\tqualifiers: {}\n\t};\n\tif (payload.semanticObjects) {\n\t\t// sap.m.Link has custom data with Semantic Objects names resolved\n\t\tif (linkCustomData && linkCustomData.length > 0) {\n\t\t\tSimpleLinkDelegate._getSemanticObjectCustomDataValue(linkCustomData, semanticObjectsResolved);\n\t\t\tSimpleLinkDelegate._createNewPayloadWithDynamicSemanticObjectsResolved(payload, semanticObjectsResolved, newPayload);\n\t\t\tpayloadWithDynamicSemanticObjectsResolved = SimpleLinkDelegate._setPayloadWithDynamicSemanticObjectsResolved(\n\t\t\t\tpayload,\n\t\t\t\tnewPayload\n\t\t\t);\n\t\t\treturn payloadWithDynamicSemanticObjectsResolved;\n\t\t}\n\t} else {\n\t\treturn undefined;\n\t}\n};\n\nSimpleLinkDelegate._updatePayloadWithSemanticAttributes = function (\n\taSemanticObjects: string[],\n\toInfoLog: InfoLog,\n\toContextObject: Record<string, unknown>,\n\toResults: RegisteredSemanticAttributes,\n\tmSemanticObjectMappings?: Record<string, Record<string, unknown>>\n): void {\n\taSemanticObjects.forEach(function (sSemanticObject: string) {\n\t\tif (oInfoLog) {\n\t\t\toInfoLog.addContextObject(sSemanticObject, oContextObject);\n\t\t}\n\t\toResults[sSemanticObject] = {};\n\t\tfor (const sAttributeName in oContextObject) {\n\t\t\tlet oAttribute = null,\n\t\t\t\toTransformationAdditional = null;\n\t\t\tif (oInfoLog) {\n\t\t\t\toAttribute = oInfoLog.getSemanticObjectAttribute(sSemanticObject, sAttributeName);\n\t\t\t\tif (!oAttribute) {\n\t\t\t\t\toAttribute = oInfoLog.createAttributeStructure();\n\t\t\t\t\toInfoLog.addSemanticObjectAttribute(sSemanticObject, sAttributeName, oAttribute);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Ignore undefined and null values\n\t\t\tif (oContextObject[sAttributeName] === undefined || oContextObject[sAttributeName] === null) {\n\t\t\t\tif (oAttribute) {\n\t\t\t\t\toAttribute.transformations.push({\n\t\t\t\t\t\tvalue: undefined,\n\t\t\t\t\t\tdescription: \"\\u2139 Undefined and null values have been removed in SimpleLinkDelegate.\"\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Ignore plain objects (BCP 1770496639)\n\t\t\tif (isPlainObject(oContextObject[sAttributeName] as object)) {\n\t\t\t\tif (mSemanticObjectMappings && mSemanticObjectMappings[sSemanticObject]) {\n\t\t\t\t\tconst aKeys = Object.keys(mSemanticObjectMappings[sSemanticObject]);\n\t\t\t\t\tlet sNewAttributeNameMapped, sNewAttributeName, sValue, sKey;\n\t\t\t\t\tfor (const element of aKeys) {\n\t\t\t\t\t\tsKey = element;\n\t\t\t\t\t\tif (sKey.indexOf(sAttributeName) === 0) {\n\t\t\t\t\t\t\tsNewAttributeNameMapped = mSemanticObjectMappings[sSemanticObject][sKey] as string;\n\t\t\t\t\t\t\tsNewAttributeName = sKey.split(\"/\")[sKey.split(\"/\").length - 1];\n\t\t\t\t\t\t\tsValue = (oContextObject[sAttributeName] as Record<string, string>)[sNewAttributeName];\n\t\t\t\t\t\t\tif (sNewAttributeNameMapped && sNewAttributeName && sValue) {\n\t\t\t\t\t\t\t\toResults[sSemanticObject][sNewAttributeNameMapped] = sValue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (oAttribute) {\n\t\t\t\t\toAttribute.transformations.push({\n\t\t\t\t\t\tvalue: undefined,\n\t\t\t\t\t\tdescription: \"\\u2139 Plain objects has been removed in SimpleLinkDelegate.\"\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Map the attribute name only if 'semanticObjectMapping' is defined.\n\t\t\t// Note: under defined 'semanticObjectMapping' we also mean an empty annotation or an annotation with empty record\n\t\t\tconst sAttributeNameMapped: string =\n\t\t\t\tmSemanticObjectMappings &&\n\t\t\t\tmSemanticObjectMappings[sSemanticObject] &&\n\t\t\t\tmSemanticObjectMappings[sSemanticObject][sAttributeName]\n\t\t\t\t\t? (mSemanticObjectMappings[sSemanticObject][sAttributeName] as string)\n\t\t\t\t\t: sAttributeName;\n\n\t\t\tif (oAttribute && sAttributeName !== sAttributeNameMapped) {\n\t\t\t\toTransformationAdditional = {\n\t\t\t\t\tvalue: undefined,\n\t\t\t\t\tdescription: `\\u2139 The attribute ${sAttributeName} has been renamed to ${sAttributeNameMapped} in SimpleLinkDelegate.`,\n\t\t\t\t\treason: `\\ud83d\\udd34 A com.sap.vocabularies.Common.v1.SemanticObjectMapping annotation is defined for semantic object ${sSemanticObject} with source attribute ${sAttributeName} and target attribute ${sAttributeNameMapped}. You can modify the annotation if the mapping result is not what you expected.`\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// If more then one local property maps to the same target property (clash situation)\n\t\t\t// we take the value of the last property and write an error log\n\t\t\tif (oResults[sSemanticObject][sAttributeNameMapped]) {\n\t\t\t\tLog.error(\n\t\t\t\t\t`SimpleLinkDelegate: The attribute ${sAttributeName} can not be renamed to the attribute ${sAttributeNameMapped} due to a clash situation. This can lead to wrong navigation later on.`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Copy the value replacing the attribute name by semantic object name\n\t\t\toResults[sSemanticObject][sAttributeNameMapped] = oContextObject[sAttributeName] as string;\n\n\t\t\tif (oAttribute) {\n\t\t\t\tif (oTransformationAdditional) {\n\t\t\t\t\toAttribute.transformations.push(oTransformationAdditional);\n\t\t\t\t\tconst aAttributeNew = oInfoLog.createAttributeStructure();\n\t\t\t\t\taAttributeNew.transformations.push({\n\t\t\t\t\t\tvalue: oContextObject[sAttributeName],\n\t\t\t\t\t\tdescription: `\\u2139 The attribute ${sAttributeNameMapped} with the value ${oContextObject[sAttributeName]} has been added due to a mapping rule regarding the attribute ${sAttributeName} in SimpleLinkDelegate.`\n\t\t\t\t\t});\n\t\t\t\t\toInfoLog.addSemanticObjectAttribute(sSemanticObject, sAttributeNameMapped, aAttributeNew);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n};\n\n/**\n * Calculate the payload with the semantic objects resolved.\n * @param link The corresponding Link\n * @returns The payload resolved with the value of the semantic object\n */\nSimpleLinkDelegate.calculatePayloadWithDynamicSemanticObjectsResolved = function (link: MdcLink): LinkDelegatePayload {\n\tconst payload = link?.getPayload() as LinkDelegatePayload;\n\tconst linkCustomData = link && this._fetchLinkCustomData(link);\n\tconst payloadResolved = SimpleLinkDelegate._getPayloadWithDynamicSemanticObjectsResolved(payload, linkCustomData);\n\treturn payloadResolved ? payloadResolved : payload;\n};\n\n/**\n * Checks which attributes of the ContextObject belong to which SemanticObject and maps them into a two dimensional array.\n * @private\n * @param oBindingContext The BindingContext of the SourceControl of the Link / of the Link itself if not set\n * @param oPayload The payload given by the application\n * @param oInfoLog The corresponding InfoLog of the Link\n * @param oLink The corresponding Link\n * @returns An object containing the computed payload and computed semantic attributes\n */\nSimpleLinkDelegate._calculateSemanticAttributes = function (\n\toBindingContext: Context,\n\toPayload: LinkDelegatePayload,\n\toInfoLog: InfoLog,\n\toLink: MdcLink\n): { payload: LinkDelegatePayload; results: Record<string, Record<string, string>> } {\n\tconst oContextObject = oBindingContext.getObject();\n\tconst oPayloadWithDynamicSemanticObjectsResolved = SimpleLinkDelegate.calculatePayloadWithDynamicSemanticObjectsResolved(oLink);\n\tconst aSemanticObjects = SimpleLinkDelegate._getSemanticObjects(oPayloadWithDynamicSemanticObjectsResolved);\n\n\tif (!aSemanticObjects.length) {\n\t\treturn { payload: oPayloadWithDynamicSemanticObjectsResolved, results: {} };\n\t}\n\tconst oResults = {};\n\tconst oView = CommonUtils.getTargetView(oLink);\n\tconst propertyPath = oPayloadWithDynamicSemanticObjectsResolved?.dataFieldPropPath;\n\n\tSimpleLinkDelegate._checkImplicitSemanticObjectMapping(\n\t\toPayloadWithDynamicSemanticObjectsResolved,\n\t\tpropertyPath,\n\t\toBindingContext,\n\t\toView\n\t);\n\tconst mSemanticObjectMappings = SimpleLinkDelegate._convertSemanticObjectMapping(\n\t\tSimpleLinkDelegate._getSemanticObjectMappings(oPayloadWithDynamicSemanticObjectsResolved)\n\t);\n\n\tSimpleLinkDelegate._updatePayloadWithSemanticAttributes(aSemanticObjects, oInfoLog, oContextObject, oResults, mSemanticObjectMappings);\n\treturn { payload: oPayloadWithDynamicSemanticObjectsResolved, results: oResults };\n};\n\n/**\n * Checks if the current hash corresponds to a primary action.\n * @param shellServices The shell services object.\n * @param navLinks An array of navigation links.\n * @param hash The parsed hash object.\n * @returns - Returns true if the hash corresponds to a primary action, otherwise false.\n */\nSimpleLinkDelegate.checkPrimaryActionForHash = function (\n\tshellServices: IShellServices,\n\tnavLinks: NavigationLink[],\n\thash: ParsedHash\n): boolean {\n\treturn navLinks.some((hashs) => {\n\t\tlet targetHash = shellServices.constructShellHash({\n\t\t\ttarget: {\n\t\t\t\tshellHash: hashs.intent\n\t\t\t}\n\t\t});\n\t\t// The sandbox adds a ?sap-app-origin-hint to the hash, so we need to remove it\n\t\tif (targetHash.includes(\"?\")) {\n\t\t\ttargetHash = targetHash.substring(0, targetHash.indexOf(\"?\"));\n\t\t}\n\t\treturn `${hash.semanticObject}-${hash.action}` === targetHash;\n\t});\n};\n\n/**\n * Retrieves the actual targets for the navigation of the link. This uses the UShell loaded by the {@link sap.ui.mdc.link.Factory} to retrieve\n * the navigation targets from the FLP service.\n * @private\n * @param sAppStateKey Key of the appstate (not used yet)\n * @param oSemanticAttributes The calculated by _calculateSemanticAttributes\n * @param oPayload The payload given by the application\n * @param oInfoLog The corresponding InfoLog of the Link\n * @param oLink The corresponding Link\n * @returns Resolving into availableAtions and ownNavigation containing an array of {@link sap.ui.mdc.link.LinkItem}\n */\nSimpleLinkDelegate._retrieveNavigationTargets = async function (\n\tsAppStateKey: string,\n\toSemanticAttributes: Record<string, Record<string, string>>,\n\toPayload: LinkDelegatePayload,\n\toInfoLog: InfoLog,\n\toLink?: MdcLink\n): Promise<LinkItem[]> {\n\tif (!oPayload.semanticObjects) {\n\t\treturn Promise.resolve([]);\n\t}\n\tconst aSemanticObjects = oPayload.semanticObjects;\n\tconst oNavigationTargets: {\n\t\townNavigation?: LinkItem;\n\t\tavailableActions: LinkItem[];\n\t} = {\n\t\townNavigation: undefined,\n\t\tavailableActions: []\n\t};\n\tlet iSuperiorActionLinksFound = 0;\n\treturn Library.load({ name: \"sap.ui.fl\" }).then(async () => {\n\t\treturn new Promise((resolve) => {\n\t\t\tsap.ui.require([\"sap/ui/fl/Utils\"], async (Utils: typeof flUtils) => {\n\t\t\t\tconst oAppComponent: AppComponent = Utils.getAppComponentForControl(oLink === undefined ? this.oControl : oLink);\n\t\t\t\tconst oShellServices = oAppComponent ? oAppComponent.getShellServices() : null;\n\t\t\t\tif (!oShellServices) {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tresolve(oNavigationTargets.availableActions, oNavigationTargets.ownNavigation);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!oShellServices?.hasUShell()) {\n\t\t\t\t\tLog.error(\"SimpleLinkDelegate: Service 'CrossApplicationNavigation' or 'URLParsing' could not be obtained\");\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tresolve(oNavigationTargets.availableActions, oNavigationTargets.ownNavigation);\n\t\t\t\t}\n\t\t\t\tconst aParams: LinkFilter[] = aSemanticObjects.map(function (sSemanticObject): Omit<LinkFilter, \"ui5Component\"> {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tsemanticObject: sSemanticObject,\n\t\t\t\t\t\tparams: oSemanticAttributes ? oSemanticAttributes[sSemanticObject] : undefined,\n\t\t\t\t\t\tappStateKey: sAppStateKey,\n\t\t\t\t\t\tsortResultsBy: \"text\"\n\t\t\t\t\t};\n\t\t\t\t}) as LinkFilter[];\n\t\t\t\ttry {\n\t\t\t\t\tconst aLinks = await oShellServices.getLinks(aParams);\n\t\t\t\t\tlet bHasLinks = false;\n\t\t\t\t\tfor (const elements of aLinks) {\n\t\t\t\t\t\tif (elements.length > 0) {\n\t\t\t\t\t\t\tbHasLinks = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (bHasLinks) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!aLinks || !aLinks.length || !bHasLinks) {\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tresolve(oNavigationTargets.availableActions, oNavigationTargets.ownNavigation);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst aSemanticObjectUnavailableActions: (typeof SemanticObjectUnavailableAction)[] =\n\t\t\t\t\t\tSimpleLinkDelegate._getSemanticObjectUnavailableActions(oPayload);\n\t\t\t\t\tconst oUnavailableActions =\n\t\t\t\t\t\tSimpleLinkDelegate._convertSemanticObjectUnavailableAction(aSemanticObjectUnavailableActions);\n\t\t\t\t\tlet sCurrentHash = FieldRuntime._fnFixHashQueryString(oAppComponent.getShellServices().getHash());\n\n\t\t\t\t\tif (sCurrentHash) {\n\t\t\t\t\t\t// BCP 1770315035: we have to set the end-point '?' of action in order to avoid matching of \"#SalesOrder-manage\" in \"#SalesOrder-manageFulfillment\"\n\t\t\t\t\t\tsCurrentHash += \"?\";\n\t\t\t\t\t}\n\n\t\t\t\t\tconst fnIsUnavailableAction = function (sSemanticObject: string, sAction: string): boolean {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t!!oUnavailableActions &&\n\t\t\t\t\t\t\t!!oUnavailableActions[sSemanticObject] &&\n\t\t\t\t\t\t\toUnavailableActions[sSemanticObject].includes(sAction)\n\t\t\t\t\t\t);\n\t\t\t\t\t};\n\t\t\t\t\tconst primaryIntents = (\n\t\t\t\t\t\tawait FieldHelper._getPrimaryIntents(oAppComponent, oPayload && oPayload.semanticObjects)\n\t\t\t\t\t).filter(Boolean);\n\t\t\t\t\tconst fnAddLink = function (_oLink: NavigationLink): void {\n\t\t\t\t\t\tconst oShellHash = oShellServices.parseShellHash(_oLink.intent);\n\t\t\t\t\t\tif (fnIsUnavailableAction(oShellHash.semanticObject, oShellHash.action)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst sHref = `#${oShellServices.constructShellHash({ target: { shellHash: _oLink.intent } })}`;\n\n\t\t\t\t\t\tif (_oLink.intent && _oLink.intent.indexOf(sCurrentHash) === 0) {\n\t\t\t\t\t\t\t// Prevent current app from being listed\n\t\t\t\t\t\t\t// NOTE: If the navigation target exists in\n\t\t\t\t\t\t\t// multiple contexts (~XXXX in hash) they will all be skipped\n\t\t\t\t\t\t\toNavigationTargets.ownNavigation = new LinkItem({\n\t\t\t\t\t\t\t\thref: sHref,\n\t\t\t\t\t\t\t\ttext: _oLink.text\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst oLinkItem = new LinkItem({\n\t\t\t\t\t\t\t// As the retrieveNavigationTargets method can be called several time we can not create the LinkItem instance with the same id\n\t\t\t\t\t\t\tkey:\n\t\t\t\t\t\t\t\toShellHash.semanticObject && oShellHash.action\n\t\t\t\t\t\t\t\t\t? `${oShellHash.semanticObject}-${oShellHash.action}`\n\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\ttext: _oLink.text,\n\t\t\t\t\t\t\tdescription: undefined,\n\t\t\t\t\t\t\thref: sHref,\n\t\t\t\t\t\t\t// target: not supported yet\n\t\t\t\t\t\t\ticon: undefined, //_oLink.icon,\n\t\t\t\t\t\t\tinitiallyVisible: _oLink.tags && _oLink.tags.includes(\"superiorAction\")\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (oLinkItem.getProperty(\"initiallyVisible\")) {\n\t\t\t\t\t\t\t// If the current link item is not a primary intent, add it to the list shown in the popover\n\t\t\t\t\t\t\tif (!SimpleLinkDelegate.checkPrimaryActionForHash(oShellServices, primaryIntents, oShellHash)) {\n\t\t\t\t\t\t\t\tiSuperiorActionLinksFound++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\toNavigationTargets.availableActions.push(oLinkItem);\n\n\t\t\t\t\t\tif (oInfoLog) {\n\t\t\t\t\t\t\toInfoLog.addSemanticObjectIntent(oShellHash.semanticObject, {\n\t\t\t\t\t\t\t\tintent: oLinkItem.getHref(),\n\t\t\t\t\t\t\t\ttext: oLinkItem.getText()\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tfor (let n = 0; n < aSemanticObjects.length; n++) {\n\t\t\t\t\t\taLinks[n].forEach(fnAddLink);\n\t\t\t\t\t}\n\t\t\t\t\tif (iSuperiorActionLinksFound === 0) {\n\t\t\t\t\t\tfor (let iLinkItemIndex = 0; iLinkItemIndex < oNavigationTargets.availableActions.length; iLinkItemIndex++) {\n\t\t\t\t\t\t\tif (iLinkItemIndex < this.getConstants().iLinksShownInPopup) {\n\t\t\t\t\t\t\t\toNavigationTargets.availableActions[iLinkItemIndex].setProperty(\"initiallyVisible\", true);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tresolve(oNavigationTargets.availableActions, oNavigationTargets.ownNavigation);\n\t\t\t\t} catch (oError) {\n\t\t\t\t\tLog.error(\"SimpleLinkDelegate: '_retrieveNavigationTargets' failed executing getLinks method\");\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tresolve(oNavigationTargets.availableActions, oNavigationTargets.ownNavigation);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t});\n};\nSimpleLinkDelegate._getSemanticObjects = function (oPayload: LinkDelegatePayload): string[] {\n\treturn oPayload.semanticObjects ? oPayload.semanticObjects : [];\n};\nSimpleLinkDelegate._getSemanticObjectUnavailableActions = function (\n\toPayload: LinkDelegatePayload\n): (typeof SemanticObjectUnavailableAction)[] {\n\tconst aSemanticObjectUnavailableActions: (typeof SemanticObjectUnavailableAction)[] = [];\n\tif (oPayload.semanticObjectUnavailableActions) {\n\t\toPayload.semanticObjectUnavailableActions.forEach(function (\n\t\t\toSemanticObjectUnavailableAction: RegisteredSemanticObjectUnavailableAction\n\t\t) {\n\t\t\taSemanticObjectUnavailableActions.push(\n\t\t\t\tnew SemanticObjectUnavailableAction({\n\t\t\t\t\tsemanticObject: oSemanticObjectUnavailableAction.semanticObject,\n\t\t\t\t\tactions: oSemanticObjectUnavailableAction.actions\n\t\t\t\t})\n\t\t\t);\n\t\t});\n\t}\n\treturn aSemanticObjectUnavailableActions;\n};\n\n/**\n * This will return an array of {@link sap.ui.mdc.ushell.SemanticObjectMapping} depending on the given payload.\n * @private\n * @param oPayload The payload defined by the application\n * @returns An array of semantic object mappings.\n */\nSimpleLinkDelegate._getSemanticObjectMappings = function (oPayload: LinkDelegatePayload): SemanticObjectMapping[] {\n\tconst aSemanticObjectMappings: SemanticObjectMapping[] = [];\n\tlet aSemanticObjectMappingItems: (typeof SemanticObjectMappingItem)[] = [];\n\tif (oPayload.semanticObjectMappings) {\n\t\toPayload.semanticObjectMappings.forEach(function (oSemanticObjectMapping: RegisteredSemanticObjectMapping) {\n\t\t\taSemanticObjectMappingItems = [];\n\t\t\tif (oSemanticObjectMapping.items) {\n\t\t\t\toSemanticObjectMapping.items.forEach(function (oSemanticObjectMappingItem: { key: string; value: string }) {\n\t\t\t\t\taSemanticObjectMappingItems.push(\n\t\t\t\t\t\tnew SemanticObjectMappingItem({\n\t\t\t\t\t\t\tkey: oSemanticObjectMappingItem.key,\n\t\t\t\t\t\t\tvalue: oSemanticObjectMappingItem.value\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\t\t\taSemanticObjectMappings.push(\n\t\t\t\tnew SemanticObjectMapping({\n\t\t\t\t\tsemanticObject: oSemanticObjectMapping.semanticObject,\n\t\t\t\t\titems: aSemanticObjectMappingItems\n\t\t\t\t})\n\t\t\t);\n\t\t});\n\t}\n\treturn aSemanticObjectMappings;\n};\n/**\n * Converts a given array of SemanticObjectMapping into a Map containing SemanticObjects as Keys and a Map of it's corresponding SemanticObjectMappings as values.\n * @private\n * @param aSemanticObjectMappings An array of SemanticObjectMappings.\n * @returns The converterd SemanticObjectMappings\n */\nSimpleLinkDelegate._convertSemanticObjectMapping = function (\n\taSemanticObjectMappings: SemanticObjectMapping[]\n): Record<string, Record<string, unknown>> | undefined {\n\tif (!aSemanticObjectMappings.length) {\n\t\treturn undefined;\n\t}\n\tconst mSemanticObjectMappings: Record<string, Record<string, unknown>> = {};\n\taSemanticObjectMappings.forEach((oSemanticObjectMapping) => {\n\t\tif (!oSemanticObjectMapping.getSemanticObject()) {\n\t\t\tthrow Error(\n\t\t\t\t`SimpleLinkDelegate: 'semanticObject' property with value '${oSemanticObjectMapping.getSemanticObject()}' is not valid`\n\t\t\t);\n\t\t}\n\t\tmSemanticObjectMappings[oSemanticObjectMapping.getSemanticObject()] = Object.fromEntries(\n\t\t\toSemanticObjectMapping.getItems().map((oItem) => [oItem.getKey(), oItem.getValue()])\n\t\t);\n\t});\n\treturn mSemanticObjectMappings;\n};\n/**\n * Converts a given array of SemanticObjectUnavailableActions into a map containing SemanticObjects as keys and a map of its corresponding SemanticObjectUnavailableActions as values.\n * @private\n * @param aSemanticObjectUnavailableActions The SemanticObjectUnavailableActions converted\n * @returns The map containing the converted SemanticObjectUnavailableActions\n */\nSimpleLinkDelegate._convertSemanticObjectUnavailableAction = function (\n\taSemanticObjectUnavailableActions: (typeof SemanticObjectUnavailableAction)[]\n): Record<string, string[]> | undefined {\n\tlet _SemanticObjectName: string;\n\tlet _SemanticObjectHasAlreadyUnavailableActions: string[];\n\tlet _UnavailableActions: string[] = [];\n\tif (!aSemanticObjectUnavailableActions.length) {\n\t\treturn undefined;\n\t}\n\tconst mSemanticObjectUnavailableActions: Record<string, string[]> = {};\n\taSemanticObjectUnavailableActions.forEach(function (oSemanticObjectUnavailableActions: typeof SemanticObjectUnavailableAction) {\n\t\t_SemanticObjectName = oSemanticObjectUnavailableActions.getSemanticObject();\n\t\tif (!_SemanticObjectName) {\n\t\t\tthrow Error(`SimpleLinkDelegate: 'semanticObject' property with value '${_SemanticObjectName}' is not valid`);\n\t\t}\n\t\t_UnavailableActions = oSemanticObjectUnavailableActions.getActions();\n\t\tif (mSemanticObjectUnavailableActions[_SemanticObjectName] === undefined) {\n\t\t\tmSemanticObjectUnavailableActions[_SemanticObjectName] = _UnavailableActions;\n\t\t} else {\n\t\t\t_SemanticObjectHasAlreadyUnavailableActions = mSemanticObjectUnavailableActions[_SemanticObjectName];\n\t\t\t_UnavailableActions.forEach(function (UnavailableAction: string) {\n\t\t\t\t_SemanticObjectHasAlreadyUnavailableActions.push(UnavailableAction);\n\t\t\t});\n\t\t\tmSemanticObjectUnavailableActions[_SemanticObjectName] = _SemanticObjectHasAlreadyUnavailableActions;\n\t\t}\n\t});\n\treturn mSemanticObjectUnavailableActions;\n};\n/**\n * Delegate method to fetch popover title and labelledBy control.\n * @param oLink\n * @param oPanel\n * @returns A title and a labelledBy control.\n */\nSimpleLinkDelegate.fetchPopoverTitle = async function (\n\toLink: MdcLink | undefined,\n\toPanel: Control\n): Promise<{ sTitle: string; oLabelledByControl: UI5Element | undefined }> {\n\tconst sTitle = \"\";\n\tif (!oLink || !oPanel) {\n\t\treturn { sTitle, oLabelledByControl: undefined };\n\t}\n\tconst oLabelledByControl = SimpleLinkDelegate?._getLabelledByControl(oPanel);\n\n\treturn Promise.resolve({ sTitle, oLabelledByControl });\n};\n\nexport default SimpleLinkDelegate;\n"],"mappings":"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","ignoreList":[]}