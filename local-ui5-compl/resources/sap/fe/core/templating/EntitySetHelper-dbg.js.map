{"version":3,"names":["getNonFilterablePropertiesRestrictions","entitySet","nonFilterableProperties","annotations","Capabilities","FilterRestrictions","Filterable","push","entityType","entityProperties","map","property","name","NonFilterableProperties","value","NavigationRestrictions","RestrictedProperties","forEach","navigationRestriction","nonFilterableNavigationProperties","_exports","getNonSortablePropertiesRestrictions","nonSortableProperties","SortRestrictions","Sortable","NonSortableProperties","navigationProperty","navigationProperties","by_name","NavigationProperty","targetType","nonSortableNavigationProperties","getRestrictionsOnProperties","propertiesRestrictions","isEntitySet"],"sourceRoot":".","sources":["EntitySetHelper.ts"],"sourcesContent":["import type { EntitySet, Singleton } from \"@sap-ux/vocabularies-types\";\nimport { isEntitySet } from \"sap/fe/core/helpers/TypeGuards\";\n\nexport type RestrictionsOnProperties = {\n\tnonSortableProperties: string[];\n\tnonFilterableProperties: string[];\n};\n\ntype currentEntitySet = EntitySet | Singleton | undefined;\n\n/**\n * Gets NonFilterableProperties on FilterRestrictions of the main entity.\n * @param entitySet Entity set to be analyzed\n * @returns Array containing the property names of all non-filterable properties\n */\nexport const getNonFilterablePropertiesRestrictions = function (entitySet: EntitySet): string[] {\n\tlet nonFilterableProperties = [];\n\tif (entitySet.annotations.Capabilities?.FilterRestrictions?.Filterable === false) {\n\t\t// add all properties of the entity to the nonFilterableProperties\n\t\tnonFilterableProperties.push(...entitySet.entityType.entityProperties.map((property) => property.name));\n\t} else {\n\t\tnonFilterableProperties =\n\t\t\tentitySet.annotations.Capabilities?.FilterRestrictions?.NonFilterableProperties?.map((property) => property.value) || [];\n\t}\n\n\t// Check for every navigationRestriction if it has FilterRestrictions\n\tentitySet.annotations.Capabilities?.NavigationRestrictions?.RestrictedProperties?.forEach((navigationRestriction) => {\n\t\t// leave the property path unchanged (it is relative to the annotation target!)\n\t\tconst nonFilterableNavigationProperties = navigationRestriction?.FilterRestrictions?.NonFilterableProperties?.map(\n\t\t\t(property) => property.value\n\t\t);\n\t\tif (nonFilterableNavigationProperties) {\n\t\t\tnonFilterableProperties.push(...nonFilterableNavigationProperties);\n\t\t}\n\t});\n\treturn nonFilterableProperties;\n};\n\n/**\n * Reads all SortRestrictions of the main entity and the (first level) navigation restrictions.\n * This does not work for more than one level of navigation.\n * @param entitySet Entity set to be analyzed\n * @returns Array containing the property names of all non-sortable properties\n */\nexport const getNonSortablePropertiesRestrictions = function (entitySet: EntitySet): string[] {\n\tlet nonSortableProperties = [];\n\t// Check annotations for main entity\n\tif (entitySet.annotations.Capabilities?.SortRestrictions?.Sortable === false) {\n\t\t// add all properties of the entity to the nonSortableProperties\n\t\tnonSortableProperties.push(...entitySet.entityType.entityProperties.map((property) => property.name));\n\t} else {\n\t\tnonSortableProperties =\n\t\t\tentitySet.annotations.Capabilities?.SortRestrictions?.NonSortableProperties?.map((property) => property.value) || [];\n\t}\n\t// Check for every navigationRestriction if it has sortRestrictions\n\tentitySet.annotations.Capabilities?.NavigationRestrictions?.RestrictedProperties?.forEach((navigationRestriction) => {\n\t\tif (navigationRestriction?.SortRestrictions?.Sortable === false) {\n\t\t\t// find correct navigation property\n\t\t\tconst navigationProperty = entitySet.entityType.navigationProperties.by_name(navigationRestriction?.NavigationProperty?.value);\n\t\t\tif (navigationProperty) {\n\t\t\t\t// add all properties of the navigation property to the nonSortableProperties\n\t\t\t\tnonSortableProperties.push(\n\t\t\t\t\t...navigationProperty.targetType.entityProperties.map((property) => `${navigationProperty.name}/${property.name}`)\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\t// leave the property path unchanged (it is relative to the annotation target!)\n\t\t\tconst nonSortableNavigationProperties = navigationRestriction?.SortRestrictions?.NonSortableProperties?.map(\n\t\t\t\t(property) => property.value\n\t\t\t);\n\t\t\tif (nonSortableNavigationProperties) {\n\t\t\t\tnonSortableProperties.push(...nonSortableNavigationProperties);\n\t\t\t}\n\t\t}\n\t});\n\treturn nonSortableProperties;\n};\n\n/**\n * Gets all SortRestrictions and FilterRestriction of the main entity and the (first level) navigation restrictions.\n * This does not work for more than one level of navigation.\n * @param entitySet Entity set to be analyzed\n * @returns Object containing all property names with restrictions separated by sortable and filterable capabilities\n */\n\nexport const getRestrictionsOnProperties = function (entitySet: currentEntitySet): RestrictionsOnProperties {\n\tlet propertiesRestrictions: RestrictionsOnProperties = { nonSortableProperties: [], nonFilterableProperties: [] };\n\t// Check annotations for main entity\n\tif (!isEntitySet(entitySet)) {\n\t\treturn propertiesRestrictions;\n\t} else {\n\t\tpropertiesRestrictions = {\n\t\t\tnonSortableProperties: getNonSortablePropertiesRestrictions(entitySet),\n\t\t\tnonFilterableProperties: getNonFilterablePropertiesRestrictions(entitySet)\n\t\t};\n\t\treturn propertiesRestrictions;\n\t}\n};\n"],"mappings":"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","ignoreList":[],"file":"EntitySetHelper-dbg.js"}