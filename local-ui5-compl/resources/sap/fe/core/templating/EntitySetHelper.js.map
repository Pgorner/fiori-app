{"version":3,"file":"EntitySetHelper.js","names":["getNonFilterablePropertiesRestrictions","entitySet","nonFilterableProperties","annotations","Capabilities","FilterRestrictions","Filterable","push","entityType","entityProperties","map","property","name","NonFilterableProperties","value","NavigationRestrictions","RestrictedProperties","forEach","navigationRestriction","nonFilterableNavigationProperties","_exports","getNonSortablePropertiesRestrictions","nonSortableProperties","SortRestrictions","Sortable","NonSortableProperties","navigationProperty","navigationProperties","by_name","NavigationProperty","targetType","nonSortableNavigationProperties","getRestrictionsOnProperties","propertiesRestrictions","isEntitySet"],"sources":["./EntitySetHelper.ts"],"sourcesContent":["import type { EntitySet, Singleton } from \"@sap-ux/vocabularies-types\";\nimport { isEntitySet } from \"sap/fe/core/helpers/TypeGuards\";\n\nexport type RestrictionsOnProperties = {\n\tnonSortableProperties: string[];\n\tnonFilterableProperties: string[];\n};\n\ntype currentEntitySet = EntitySet | Singleton | undefined;\n\n/**\n * Gets NonFilterableProperties on FilterRestrictions of the main entity.\n * @param entitySet Entity set to be analyzed\n * @returns Array containing the property names of all non-filterable properties\n */\nexport const getNonFilterablePropertiesRestrictions = function (entitySet: EntitySet): string[] {\n\tlet nonFilterableProperties = [];\n\tif (entitySet.annotations.Capabilities?.FilterRestrictions?.Filterable === false) {\n\t\t// add all properties of the entity to the nonFilterableProperties\n\t\tnonFilterableProperties.push(...entitySet.entityType.entityProperties.map((property) => property.name));\n\t} else {\n\t\tnonFilterableProperties =\n\t\t\tentitySet.annotations.Capabilities?.FilterRestrictions?.NonFilterableProperties?.map((property) => property.value) || [];\n\t}\n\n\t// Check for every navigationRestriction if it has FilterRestrictions\n\tentitySet.annotations.Capabilities?.NavigationRestrictions?.RestrictedProperties?.forEach((navigationRestriction) => {\n\t\t// leave the property path unchanged (it is relative to the annotation target!)\n\t\tconst nonFilterableNavigationProperties = navigationRestriction?.FilterRestrictions?.NonFilterableProperties?.map(\n\t\t\t(property) => property.value\n\t\t);\n\t\tif (nonFilterableNavigationProperties) {\n\t\t\tnonFilterableProperties.push(...nonFilterableNavigationProperties);\n\t\t}\n\t});\n\treturn nonFilterableProperties;\n};\n\n/**\n * Reads all SortRestrictions of the main entity and the (first level) navigation restrictions.\n * This does not work for more than one level of navigation.\n * @param entitySet Entity set to be analyzed\n * @returns Array containing the property names of all non-sortable properties\n */\nexport const getNonSortablePropertiesRestrictions = function (entitySet: EntitySet): string[] {\n\tlet nonSortableProperties = [];\n\t// Check annotations for main entity\n\tif (entitySet.annotations.Capabilities?.SortRestrictions?.Sortable === false) {\n\t\t// add all properties of the entity to the nonSortableProperties\n\t\tnonSortableProperties.push(...entitySet.entityType.entityProperties.map((property) => property.name));\n\t} else {\n\t\tnonSortableProperties =\n\t\t\tentitySet.annotations.Capabilities?.SortRestrictions?.NonSortableProperties?.map((property) => property.value) || [];\n\t}\n\t// Check for every navigationRestriction if it has sortRestrictions\n\tentitySet.annotations.Capabilities?.NavigationRestrictions?.RestrictedProperties?.forEach((navigationRestriction) => {\n\t\tif (navigationRestriction?.SortRestrictions?.Sortable === false) {\n\t\t\t// find correct navigation property\n\t\t\tconst navigationProperty = entitySet.entityType.navigationProperties.by_name(navigationRestriction?.NavigationProperty?.value);\n\t\t\tif (navigationProperty) {\n\t\t\t\t// add all properties of the navigation property to the nonSortableProperties\n\t\t\t\tnonSortableProperties.push(\n\t\t\t\t\t...navigationProperty.targetType.entityProperties.map((property) => `${navigationProperty.name}/${property.name}`)\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\t// leave the property path unchanged (it is relative to the annotation target!)\n\t\t\tconst nonSortableNavigationProperties = navigationRestriction?.SortRestrictions?.NonSortableProperties?.map(\n\t\t\t\t(property) => property.value\n\t\t\t);\n\t\t\tif (nonSortableNavigationProperties) {\n\t\t\t\tnonSortableProperties.push(...nonSortableNavigationProperties);\n\t\t\t}\n\t\t}\n\t});\n\treturn nonSortableProperties;\n};\n\n/**\n * Gets all SortRestrictions and FilterRestriction of the main entity and the (first level) navigation restrictions.\n * This does not work for more than one level of navigation.\n * @param entitySet Entity set to be analyzed\n * @returns Object containing all property names with restrictions separated by sortable and filterable capabilities\n */\n\nexport const getRestrictionsOnProperties = function (entitySet: currentEntitySet): RestrictionsOnProperties {\n\tlet propertiesRestrictions: RestrictionsOnProperties = { nonSortableProperties: [], nonFilterableProperties: [] };\n\t// Check annotations for main entity\n\tif (!isEntitySet(entitySet)) {\n\t\treturn propertiesRestrictions;\n\t} else {\n\t\tpropertiesRestrictions = {\n\t\t\tnonSortableProperties: getNonSortablePropertiesRestrictions(entitySet),\n\t\t\tnonFilterableProperties: getNonFilterablePropertiesRestrictions(entitySet)\n\t\t};\n\t\treturn propertiesRestrictions;\n\t}\n};\n"],"mappings":";;;;uGAeO,MAAMA,EAAyC,SAAUC,GAC/D,IAAIC,EAA0B,GAC9B,GAAID,EAAUE,YAAYC,cAAcC,oBAAoBC,aAAe,MAAO,CAEjFJ,EAAwBK,QAAQN,EAAUO,WAAWC,iBAAiBC,IAAKC,GAAaA,EAASC,MAClG,KAAO,CACNV,EACCD,EAAUE,YAAYC,cAAcC,oBAAoBQ,yBAAyBH,IAAKC,GAAaA,EAASG,QAAU,EACxH,CAGAb,EAAUE,YAAYC,cAAcW,wBAAwBC,sBAAsBC,QAASC,IAE1F,MAAMC,EAAoCD,GAAuBb,oBAAoBQ,yBAAyBH,IAC5GC,GAAaA,EAASG,OAExB,GAAIK,EAAmC,CACtCjB,EAAwBK,QAAQY,EACjC,IAED,OAAOjB,CACR,EAEAkB,EAAApB,yCAMO,MAAMqB,EAAuC,SAAUpB,GAC7D,IAAIqB,EAAwB,GAE5B,GAAIrB,EAAUE,YAAYC,cAAcmB,kBAAkBC,WAAa,MAAO,CAE7EF,EAAsBf,QAAQN,EAAUO,WAAWC,iBAAiBC,IAAKC,GAAaA,EAASC,MAChG,KAAO,CACNU,EACCrB,EAAUE,YAAYC,cAAcmB,kBAAkBE,uBAAuBf,IAAKC,GAAaA,EAASG,QAAU,EACpH,CAEAb,EAAUE,YAAYC,cAAcW,wBAAwBC,sBAAsBC,QAASC,IAC1F,GAAIA,GAAuBK,kBAAkBC,WAAa,MAAO,CAEhE,MAAME,EAAqBzB,EAAUO,WAAWmB,qBAAqBC,QAAQV,GAAuBW,oBAAoBf,OACxH,GAAIY,EAAoB,CAEvBJ,EAAsBf,QAClBmB,EAAmBI,WAAWrB,iBAAiBC,IAAKC,GAAa,GAAGe,EAAmBd,QAAQD,EAASC,QAE7G,CACD,KAAO,CAEN,MAAMmB,EAAkCb,GAAuBK,kBAAkBE,uBAAuBf,IACtGC,GAAaA,EAASG,OAExB,GAAIiB,EAAiC,CACpCT,EAAsBf,QAAQwB,EAC/B,CACD,IAED,OAAOT,CACR,EAEAF,EAAAC,uCAOO,MAAMW,EAA8B,SAAU/B,GACpD,IAAIgC,EAAmD,CAAEX,sBAAuB,GAAIpB,wBAAyB,IAE7G,IAAKgC,EAAYjC,GAAY,CAC5B,OAAOgC,CACR,KAAO,CACNA,EAAyB,CACxBX,sBAAuBD,EAAqCpB,GAC5DC,wBAAyBF,EAAuCC,IAEjE,OAAOgC,CACR,CACD,EAAEb,EAAAY,8BAAA,OAAAZ,CAAA","ignoreList":[]}