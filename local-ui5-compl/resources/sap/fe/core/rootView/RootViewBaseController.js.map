{"version":3,"file":"RootViewBaseController.js","names":["RootViewBaseController","_dec","defineUI5Class","_dec2","usingExtension","Placeholder","_dec3","ViewState","_class","_class2","_BaseController","_this","_len","arguments","length","args","Array","_key","call","this","_initializerDefineProperty","_descriptor","_descriptor2","bIsComputingTitleHierachy","_inheritsLoose","_proto","prototype","onInit","SizeHelper","init","_aHelperModels","getPlaceholder","oPlaceholder","attachRouteMatchers","getAppComponent","getRoutingService","attachAfterRouteMatched","_onAfterRouteMatched","onExit","detachAfterRouteMatched","oRouter","undefined","exit","forEach","oModel","destroy","getViewFromContainer","container","result","isA","getComponentInstance","getRootControl","getViewsFromPages","pages","views","page","view","push","getResourceBundle","getOwnerComponent","getModel","getRouter","_createHelperModel","JSONModel","routingIsComplete","async","_oRouteMatchedPromise","Promise","resolve","waitForRightMostViewReady","oEvent","aContainers","getParameter","aFEContainers","oContainer","oView","oComponentInstance","getController","pageReady","oRightMostFEView","isPageReady","attachEventOnce","restoreFocusFromHistory","history","state","focusInfo","type","table","Element","getElementById","tableId","pos","getRowBinding","getCurrentContexts","findIndex","context","getPath","contextPathFocus","focusRow","controlId","focus","replaceState","Object","assign","then","oRootControl","getView","getContent","getAutoFocus","setProperty","oAppComponent","_scrollTablesToLastNavigatedItems","getEnvironmentCapabilities","getCapabilities","UShell","computeTitleHierarchy","bForceFocus","getRouterProxy","isFocusForced","setFocusForced","onPageReady","getParent","forceFocus","restoreFocusForCurrentHash","onContainerReady","catch","oError","Log","error","finally","_getTitleHierarchyCache","oTitleHierarchyCache","clearTitleHierarchyCache","path","_computeTitleInfo","title","subtitle","sIntent","icon","aParts","split","includes","intent","_formatTitle","displayMode","titleValue","titleDescription","formattedTitle","_fetchTitleValue","appComponent","model","metaModel","getMetaModel","metaPath","getMetaPath","bindingViewContext","createBindingContext","headerInfoTitleValueAnnotation","getObject","valueExpression","AnnotationHelper","format","$Function","anyObject","Any","any","setModel","setBindingContext","textBinding","getBinding","all","getBindings","map","binding","requestValue","infoTitle","getAny","textExpression","propertyContext","promises","parsedvalueExpression","BindingParser","complexParser","promiseForDisplayMode","CommonUtils","computeDisplayMode","valuePath","parts","fnValueFormatter","formatter","valueBinding","bindProperty","$$groupId","initialize","promiseForTitleValue","fnChange","event","targetValue","getSource","getValue","detachChange","attachChange","parsedTextExpression","textPath","lastIndexOf","slice","fnTextFormatter","promiseForTitleText","targetText","titleInfo","getAppSpecificHash","hashChanger","HashChanger","getInstance","hrefForAppSpecificHash","URI","decode","_getHash","getHash","getTitleInfoFromPath","sPath","oMetaModel","sEntityPath","sTypeName","sAppSpecificHash","sTitle","oTitleInfo","_ensureHierarchyElementsAreStrings","aHierarchy","aHierarchyShell","level","oHierarchy","oShellHierarchy","key","String","_getTargetTypeFromHash","sHash","sTargetType","aRoutes","getManifestEntry","routing","routes","route","oRoute","getRoute","name","match","sTarget","getRouteTargetNames","target","getTarget","_oOptions","getBindingContext","currentPage","titleInformationPromises","appSpecificHash","manifestAppSettings","appTitle","appSubTitle","subTitle","appIcon","pageTitleInformation","newPath","_getPageTitleInformation","pathParts","shift","pop","pathPart","getRouteInfoByHash","parameterPath","isParameterized","reject","titleInfoHierarchyShell","titleInfoHierarchy","reverse","getShellServices","setHierarchy","_setShellMenuTitle","errorMessage","calculateLayout","iNextFCLLevel","sProposedLayout","keepCurrentLayout","onContextBoundToView","oContext","sDeepestPath","getProperty","sViewContextPath","indexOf","displayErrorPage","_errorMessage","_parameters","_FCLLevel","updateUIStateForView","FCLLevel","getInstancedViews","getVisibleViews","isFclEnabled","sAppTitle","setTitle","getAppContentContainer","appContentId","config","byId","BaseController","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer"],"sources":["./RootViewBaseController.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport type ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport type FlexibleColumnLayout from \"sap/f/FlexibleColumnLayout\";\nimport { defineUI5Class, usingExtension } from \"sap/fe/base/ClassSupport\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport BaseController from \"sap/fe/core/BaseController\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type PageController from \"sap/fe/core/PageController\";\nimport type TemplateComponent from \"sap/fe/core/TemplateComponent\";\nimport { type NavigationToErrorPageResult } from \"sap/fe/core/controllerextensions/MessageHandler\";\nimport Placeholder from \"sap/fe/core/controllerextensions/Placeholder\";\nimport ViewState from \"sap/fe/core/controllerextensions/ViewState\";\nimport { getRouteTargetNames } from \"sap/fe/core/helpers/ManifestHelper\";\nimport SizeHelper from \"sap/fe/core/helpers/SizeHelper\";\nimport type FclController from \"sap/fe/core/rootView/Fcl.controller\";\nimport type NavContainer from \"sap/m/NavContainer\";\nimport BindingParser from \"sap/ui/base/BindingParser\";\nimport type ComponentContainer from \"sap/ui/core/ComponentContainer\";\nimport type Control from \"sap/ui/core/Control\";\nimport Element from \"sap/ui/core/Element\";\nimport type View from \"sap/ui/core/mvc/View\";\nimport HashChanger from \"sap/ui/core/routing/HashChanger\";\nimport type { Route$MatchedEvent } from \"sap/ui/core/routing/Route\";\nimport type Router from \"sap/ui/core/routing/Router\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type CompositeBinding from \"sap/ui/model/CompositeBinding\";\nimport type Context from \"sap/ui/model/Context\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport AnnotationHelper from \"sap/ui/model/odata/v4/AnnotationHelper\";\nimport type { ODataPropertyBinding$ChangeEvent } from \"sap/ui/model/odata/v4/ODataPropertyBinding\";\nimport type ResourceModel from \"sap/ui/model/resource/ResourceModel\";\nimport URI from \"sap/ui/thirdparty/URI\";\nimport type AppComponent from \"../AppComponent\";\nimport Any from \"../controls/Any\";\n\nexport type TitleInformation = {\n\ttitle?: string;\n\tsubtitle?: string;\n\ticon?: string;\n\tintent?: string;\n};\n\n@defineUI5Class(\"sap.fe.core.rootView.RootViewBaseController\")\nclass RootViewBaseController extends BaseController {\n\t@usingExtension(Placeholder)\n\toPlaceholder!: Placeholder;\n\n\t@usingExtension(ViewState)\n\tviewState!: ViewState;\n\n\tprivate _aHelperModels!: JSONModel[];\n\n\tprivate oRouter?: Router;\n\n\tprivate _oRouteMatchedPromise?: Promise<void>;\n\n\tprivate oTitleHierarchyCache?: Record<string, TitleInformation>;\n\n\tprivate bIsComputingTitleHierachy = false;\n\n\tonInit(): void {\n\t\tSizeHelper.init();\n\n\t\tthis._aHelperModels = [];\n\t}\n\n\tgetPlaceholder(): Placeholder {\n\t\treturn this.oPlaceholder;\n\t}\n\n\tattachRouteMatchers(): void {\n\t\tthis.oPlaceholder.attachRouteMatchers();\n\t\tthis.getAppComponent().getRoutingService().attachAfterRouteMatched({}, this._onAfterRouteMatched, this);\n\t}\n\n\tonExit(): void {\n\t\tthis.getAppComponent().getRoutingService().detachAfterRouteMatched(this._onAfterRouteMatched, this);\n\t\tthis.oRouter = undefined;\n\n\t\tSizeHelper.exit();\n\n\t\t// Destroy all JSON models created dynamically for the views\n\t\tthis._aHelperModels.forEach(function (oModel: JSONModel) {\n\t\t\toModel.destroy();\n\t\t});\n\t}\n\n\tgetViewFromContainer(container: Control): View | undefined {\n\t\tconst result = container.isA<ComponentContainer>(\"sap.ui.core.ComponentContainer\")\n\t\t\t? container.getComponentInstance().getRootControl()\n\t\t\t: container;\n\n\t\treturn result?.isA<View>(\"sap.ui.core.mvc.View\") ? result : undefined;\n\t}\n\n\t/**\n\t * Analyze the pages and return the corresponding views.\n\t * @param pages The pages to be analyzed.\n\t * @returns The views\n\t */\n\tprotected getViewsFromPages(pages: Control[]): View[] {\n\t\tconst views: View[] = [];\n\n\t\tpages.forEach((page) => {\n\t\t\tconst view = this.getViewFromContainer(page);\n\n\t\t\tif (view !== undefined) {\n\t\t\t\tviews.push(view);\n\t\t\t}\n\t\t});\n\n\t\treturn views;\n\t}\n\n\t/**\n\t * Convenience method for getting the resource bundle.\n\t * @public\n\t * @returns The resourceModel of the component\n\t */\n\tgetResourceBundle(): ResourceBundle | Promise<ResourceBundle> {\n\t\treturn (this.getOwnerComponent().getModel(\"i18n\") as ResourceModel).getResourceBundle();\n\t}\n\n\tgetRouter(): Router {\n\t\tif (!this.oRouter) {\n\t\t\tthis.oRouter = this.getAppComponent().getRouter();\n\t\t}\n\n\t\treturn this.oRouter;\n\t}\n\n\t_createHelperModel(): JSONModel {\n\t\t// We keep a reference on the models created dynamically, as they don't get destroyed\n\t\t// automatically when the view is destroyed.\n\t\t// This is done during onExit\n\t\tconst oModel = new JSONModel();\n\t\tthis._aHelperModels.push(oModel);\n\n\t\treturn oModel;\n\t}\n\n\tasync routingIsComplete(): Promise<void> {\n\t\tawait (this._oRouteMatchedPromise || Promise.resolve());\n\t}\n\n\t/**\n\t * Function waiting for the Right most view to be ready.\n\t * @param oEvent Reference an Event parameter coming from routeMatched event\n\t * @returns A promise indicating when the right most view is ready\n\t */\n\tasync waitForRightMostViewReady(oEvent: Route$MatchedEvent): Promise<FEView> {\n\t\treturn new Promise(function (resolve: (value: FEView) => void) {\n\t\t\tconst aContainers = oEvent.getParameter(\"views\") ?? [],\n\t\t\t\t// There can also be reuse components in the view, remove them before processing.\n\t\t\t\taFEContainers: FEView[] = [];\n\t\t\taContainers.forEach(function (oContainer: View | ComponentContainer | undefined) {\n\t\t\t\tlet oView = oContainer as FEView | undefined;\n\t\t\t\tif (oContainer && (oContainer as ComponentContainer).getComponentInstance) {\n\t\t\t\t\tconst oComponentInstance = (oContainer as ComponentContainer).getComponentInstance();\n\t\t\t\t\toView = oComponentInstance.getRootControl() as FEView;\n\t\t\t\t}\n\t\t\t\tif (oView && oView.getController() && oView.getController().pageReady) {\n\t\t\t\t\taFEContainers.push(oView);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst oRightMostFEView = aFEContainers[aFEContainers.length - 1];\n\t\t\tif (oRightMostFEView && oRightMostFEView.getController().pageReady.isPageReady()) {\n\t\t\t\tresolve(oRightMostFEView);\n\t\t\t} else if (oRightMostFEView) {\n\t\t\t\toRightMostFEView.getController().pageReady.attachEventOnce(\"pageReady\", function () {\n\t\t\t\t\tresolve(oRightMostFEView);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Method to restore the focusInformation from the history Object.\n\t */\n\tprotected restoreFocusFromHistory(): void {\n\t\tswitch (history.state.focusInfo.type) {\n\t\t\tcase \"Row\":\n\t\t\t\tconst table = Element.getElementById(history.state.focusInfo.tableId) as Table;\n\t\t\t\tconst pos = table\n\t\t\t\t\t.getRowBinding()\n\t\t\t\t\t.getCurrentContexts()\n\t\t\t\t\t.findIndex((context) => context.getPath() === history.state.focusInfo.contextPathFocus);\n\t\t\t\tif (pos !== -1) {\n\t\t\t\t\ttable.focusRow(pos);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tElement.getElementById(history.state.focusInfo.controlId)?.focus();\n\t\t}\n\t\t//once applied, the focus info is removed to prevent focusing on it each time the user do a back navigation to this page\n\t\thistory.replaceState(Object.assign(history.state, { focusInfo: null }), \"\");\n\t}\n\n\t/**\n\t * Callback when the navigation is done.\n\t * - update the shell title.\n\t * - update table scroll.\n\t * - call onPageReady on the rightMostView.\n\t * @param oEvent\n\t */\n\t_onAfterRouteMatched(oEvent: Route$MatchedEvent): void {\n\t\tif (!this._oRouteMatchedPromise) {\n\t\t\tthis._oRouteMatchedPromise = this.waitForRightMostViewReady(oEvent)\n\t\t\t\t.then((oView: View) => {\n\t\t\t\t\t// The autoFocus is initially disabled on the navContainer or the FCL, so that the focus stays on the Shell menu\n\t\t\t\t\t// even if the app takes a long time to launch\n\t\t\t\t\t// The first time the view is displayed, we need to enable the autofocus so that it's managed properly during navigation\n\t\t\t\t\tconst oRootControl = this.getView().getContent()[0];\n\t\t\t\t\tif (\n\t\t\t\t\t\toRootControl &&\n\t\t\t\t\t\t(oRootControl as FlexibleColumnLayout).getAutoFocus &&\n\t\t\t\t\t\t!(oRootControl as FlexibleColumnLayout).getAutoFocus()\n\t\t\t\t\t) {\n\t\t\t\t\t\toRootControl.setProperty(\"autoFocus\", true, true); // Do not mark the container as invalid, otherwise it's re-rendered\n\t\t\t\t\t}\n\n\t\t\t\t\tconst oAppComponent = this.getAppComponent();\n\t\t\t\t\tthis._scrollTablesToLastNavigatedItems();\n\t\t\t\t\tif (oAppComponent.getEnvironmentCapabilities().getCapabilities().UShell) {\n\t\t\t\t\t\tthis.computeTitleHierarchy(oView);\n\t\t\t\t\t}\n\t\t\t\t\tconst bForceFocus = oAppComponent.getRouterProxy().isFocusForced();\n\t\t\t\t\toAppComponent.getRouterProxy().setFocusForced(false); // reset\n\t\t\t\t\tif (\n\t\t\t\t\t\toView.getController() &&\n\t\t\t\t\t\t(oView.getController() as PageController).onPageReady &&\n\t\t\t\t\t\t(oView.getParent() as TemplateComponent).onPageReady\n\t\t\t\t\t) {\n\t\t\t\t\t\t(oView.getParent() as TemplateComponent).onPageReady({ forceFocus: bForceFocus });\n\t\t\t\t\t}\n\t\t\t\t\tif (history.state.focusInfo) {\n\t\t\t\t\t\tthis.restoreFocusFromHistory();\n\t\t\t\t\t} else if (!bForceFocus) {\n\t\t\t\t\t\t// Try to restore the focus on where it was when we last visited the current hash\n\t\t\t\t\t\toAppComponent.getRouterProxy().restoreFocusForCurrentHash();\n\t\t\t\t\t}\n\t\t\t\t\tif (this.onContainerReady) {\n\t\t\t\t\t\tthis.onContainerReady();\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t})\n\t\t\t\t.catch(function (oError: unknown) {\n\t\t\t\t\tLog.error(\"An error occurs while computing the title hierarchy and calling focus method\", oError as string);\n\t\t\t\t})\n\t\t\t\t.finally(() => {\n\t\t\t\t\tthis._oRouteMatchedPromise = undefined;\n\t\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * This function returns the TitleHierarchy cache ( or initializes it if undefined).\n\t * @returns  The TitleHierarchy cache\n\t */\n\t_getTitleHierarchyCache(): Record<string, TitleInformation> {\n\t\tif (!this.oTitleHierarchyCache) {\n\t\t\tthis.oTitleHierarchyCache = {};\n\t\t}\n\t\treturn this.oTitleHierarchyCache;\n\t}\n\n\t/**\n\t * This function clear the TitleHierarchy cache for the given context path.\n\t * @param  path The path of the context to clear the cache for\n\t */\n\tclearTitleHierarchyCache(path: string): void {\n\t\tdelete this._getTitleHierarchyCache()[path];\n\t}\n\n\t/**\n\t * This function returns a titleInfo object.\n\t * @param title The application's title\n\t * @param subtitle The application's subTitle\n\t * @param sIntent The intent path to be redirected to\n\t * @param icon The application's icon\n\t * @returns The title information\n\t */\n\t_computeTitleInfo(title: string, subtitle: string, sIntent: string, icon = \"\"): TitleInformation {\n\t\tconst aParts = sIntent.split(\"/\");\n\t\tif (!aParts[aParts.length - 1].includes(\"?\")) {\n\t\t\tsIntent += \"?restoreHistory=true\";\n\t\t} else {\n\t\t\tsIntent += \"&restoreHistory=true\";\n\t\t}\n\t\treturn {\n\t\t\ttitle: title,\n\t\t\tsubtitle: subtitle,\n\t\t\tintent: sIntent,\n\t\t\ticon: icon\n\t\t};\n\t}\n\n\t_formatTitle(displayMode: string, titleValue: string, titleDescription: string): string {\n\t\tlet formattedTitle = \"\";\n\t\tswitch (displayMode) {\n\t\t\tcase \"Value\":\n\t\t\t\tformattedTitle = `${titleValue}`;\n\t\t\t\tbreak;\n\t\t\tcase \"ValueDescription\":\n\t\t\t\tformattedTitle = `${titleValue} (${titleDescription})`;\n\t\t\t\tbreak;\n\t\t\tcase \"DescriptionValue\":\n\t\t\t\tformattedTitle = `${titleDescription} (${titleValue})`;\n\t\t\t\tbreak;\n\t\t\tcase \"Description\":\n\t\t\t\tformattedTitle = `${titleDescription}`;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t\treturn formattedTitle;\n\t}\n\n\t/**\n\t * Fetches the value of the HeaderInfo title for a given path.\n\t * @param path The path to the entity\n\t * @returns A promise containing the formatted title, or an empty string if no HeaderInfo title annotation is available\n\t */\n\tasync _fetchTitleValue(path: string): Promise<string> {\n\t\tconst appComponent = this.getAppComponent(),\n\t\t\tmodel = this.getView().getModel(),\n\t\t\tmetaModel = appComponent.getMetaModel(),\n\t\t\tmetaPath = metaModel.getMetaPath(path),\n\t\t\tbindingViewContext = model.createBindingContext(path),\n\t\t\theaderInfoTitleValueAnnotation = metaModel.getObject(`${metaPath}/@com.sap.vocabularies.UI.v1.HeaderInfo/Title/Value`),\n\t\t\tvalueExpression = AnnotationHelper.format(headerInfoTitleValueAnnotation, { context: metaModel.createBindingContext(\"/\") });\n\t\tif (!valueExpression) {\n\t\t\treturn Promise.resolve(\"\");\n\t\t}\n\t\tif (headerInfoTitleValueAnnotation.$Function === \"odata.concat\") {\n\t\t\tconst anyObject = new Any({ any: valueExpression });\n\t\t\tanyObject.setModel(model);\n\t\t\tanyObject.setBindingContext(bindingViewContext);\n\t\t\tconst textBinding = anyObject.getBinding(\"any\");\n\t\t\tif (textBinding?.isA<CompositeBinding>(\"sap.ui.model.CompositeBinding\")) {\n\t\t\t\tawait Promise.all(textBinding.getBindings().map((binding) => binding.requestValue?.()));\n\t\t\t}\n\t\t\tconst infoTitle = anyObject.getAny();\n\t\t\tanyObject.destroy();\n\t\t\treturn Promise.resolve(infoTitle as string);\n\t\t}\n\t\tconst textExpression = AnnotationHelper.format(\n\t\t\t\tmetaModel.getObject(\n\t\t\t\t\t`${metaPath}/@com.sap.vocabularies.UI.v1.HeaderInfo/Title/Value/$Path@com.sap.vocabularies.Common.v1.Text`\n\t\t\t\t),\n\t\t\t\t{ context: metaModel.createBindingContext(\"/\") }\n\t\t\t),\n\t\t\tpropertyContext = metaModel.getObject(`${metaPath}/@com.sap.vocabularies.UI.v1.HeaderInfo/Title/Value/$Path@`),\n\t\t\tpromises: Promise<string>[] = [],\n\t\t\tparsedvalueExpression = BindingParser.complexParser(valueExpression),\n\t\t\tpromiseForDisplayMode = new Promise(function (resolve: (value: string) => void) {\n\t\t\t\tconst displayMode = CommonUtils.computeDisplayMode(propertyContext);\n\t\t\t\tresolve(displayMode);\n\t\t\t});\n\t\tpromises.push(promiseForDisplayMode);\n\t\tconst valuePath = parsedvalueExpression.parts ? parsedvalueExpression.parts[0].path : parsedvalueExpression.path,\n\t\t\tfnValueFormatter = parsedvalueExpression.formatter,\n\t\t\tvalueBinding = model.bindProperty(valuePath, bindingViewContext, { $$groupId: \"$auto.Heroes\" });\n\t\tvalueBinding.initialize();\n\t\tconst promiseForTitleValue = new Promise(function (resolve: (value: string) => void) {\n\t\t\tconst fnChange = function (event: ODataPropertyBinding$ChangeEvent): void {\n\t\t\t\tconst targetValue = fnValueFormatter ? fnValueFormatter(event.getSource().getValue()) : event.getSource().getValue();\n\n\t\t\t\tvalueBinding.detachChange(fnChange);\n\t\t\t\tresolve(targetValue);\n\t\t\t};\n\t\t\tvalueBinding.attachChange(fnChange);\n\t\t});\n\t\tpromises.push(promiseForTitleValue);\n\n\t\tif (textExpression) {\n\t\t\tconst parsedTextExpression = BindingParser.complexParser(textExpression);\n\t\t\tlet textPath = parsedTextExpression.parts ? parsedTextExpression.parts[0].path : parsedTextExpression.path;\n\t\t\ttextPath = valuePath.lastIndexOf(\"/\") > -1 ? `${valuePath.slice(0, valuePath.lastIndexOf(\"/\"))}/${textPath}` : textPath;\n\n\t\t\tconst fnTextFormatter = parsedTextExpression.formatter,\n\t\t\t\ttextBinding = model.bindProperty(textPath, bindingViewContext, { $$groupId: \"$auto.Heroes\" });\n\t\t\ttextBinding.initialize();\n\t\t\tconst promiseForTitleText = new Promise(function (resolve: (description: string) => void) {\n\t\t\t\tconst fnChange = function (event: ODataPropertyBinding$ChangeEvent): void {\n\t\t\t\t\tconst targetText = fnTextFormatter ? fnTextFormatter(event.getSource().getValue()) : event.getSource().getValue();\n\n\t\t\t\t\ttextBinding.detachChange(fnChange);\n\t\t\t\t\tresolve(targetText);\n\t\t\t\t};\n\n\t\t\t\ttextBinding.attachChange(fnChange);\n\t\t\t});\n\t\t\tpromises.push(promiseForTitleText);\n\t\t}\n\t\ttry {\n\t\t\tconst titleInfo: string[] = await Promise.all(promises);\n\t\t\tlet formattedTitle = \"\";\n\t\t\tif (typeof titleInfo !== \"string\") {\n\t\t\t\tformattedTitle = this._formatTitle(titleInfo[0], titleInfo[1], titleInfo[2]);\n\t\t\t}\n\t\t\treturn formattedTitle;\n\t\t} catch (error: unknown) {\n\t\t\tLog.error(\"Error while fetching the title from the header info :\" + error);\n\t\t}\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Function returning the decoded application-specific hash.\n\t * @returns Decoded application-specific hash\n\t */\n\tgetAppSpecificHash(): string {\n\t\t// HashChanged isShellNavigationHashChanger\n\t\tconst hashChanger = HashChanger.getInstance();\n\t\treturn hashChanger.hrefForAppSpecificHash ? URI.decode(hashChanger.hrefForAppSpecificHash(\"\")) : \"#/\";\n\t}\n\n\t_getHash(): string {\n\t\treturn HashChanger.getInstance().getHash();\n\t}\n\n\t/**\n\t * This function returns titleInformation from a path.\n\t * It updates the cache to store title information if necessary\n\t * @param {*} sPath path of the context to retrieve title information from MetaModel\n\t * @returns {Promise}  oTitleinformation returned as promise\n\t */\n\n\tasync getTitleInfoFromPath(sPath: string): Promise<TitleInformation> {\n\t\tconst oTitleHierarchyCache = this._getTitleHierarchyCache();\n\n\t\tif (oTitleHierarchyCache[sPath]) {\n\t\t\t// The title info is already stored in the cache\n\t\t\treturn Promise.resolve(oTitleHierarchyCache[sPath]);\n\t\t}\n\n\t\tconst oMetaModel = this.getAppComponent().getMetaModel();\n\t\tconst sEntityPath = oMetaModel.getMetaPath(sPath);\n\t\tconst sTypeName = oMetaModel.getObject(`${sEntityPath}/@com.sap.vocabularies.UI.v1.HeaderInfo/TypeName`);\n\t\tconst sAppSpecificHash = this.getAppSpecificHash();\n\t\tconst sIntent = sAppSpecificHash + sPath.slice(1);\n\t\treturn this._fetchTitleValue(sPath).then((sTitle: string) => {\n\t\t\tconst oTitleInfo = this._computeTitleInfo(sTypeName, sTitle, sIntent);\n\t\t\toTitleHierarchyCache[sPath] = oTitleInfo;\n\t\t\treturn oTitleInfo;\n\t\t});\n\t}\n\n\t/**\n\t * Ensure that the ushell service receives all elements\n\t * (title, subtitle, intent, icon) as strings.\n\t *\n\t * Annotation HeaderInfo allows for binding of title and description\n\t * (which are used here as title and subtitle) to any element in the entity\n\t * (such types as Boolean, timestamp, double, and others are possible)\n\t *\n\t * Creates a new hierarchy and converts non-string types to string.\n\t * @param aHierarchy Shell title hierarchy\n\t * @returns Copy of shell title hierarchy containing all elements as strings\n\t */\n\t_ensureHierarchyElementsAreStrings(aHierarchy: TitleInformation[]): object[] {\n\t\tconst aHierarchyShell = [];\n\t\tfor (const level in aHierarchy) {\n\t\t\tconst oHierarchy = aHierarchy[level];\n\t\t\tconst oShellHierarchy: Record<string, string> = {};\n\t\t\tfor (const key in oHierarchy) {\n\t\t\t\toShellHierarchy[key] = (\n\t\t\t\t\ttypeof oHierarchy[key as keyof TitleInformation] !== \"string\"\n\t\t\t\t\t\t? String(oHierarchy[key as keyof TitleInformation])\n\t\t\t\t\t\t: oHierarchy[key as keyof TitleInformation]\n\t\t\t\t) as string;\n\t\t\t}\n\t\t\taHierarchyShell.push(oShellHierarchy);\n\t\t}\n\t\treturn aHierarchyShell;\n\t}\n\n\t_getTargetTypeFromHash(sHash: string): string {\n\t\tconst oAppComponent = this.getAppComponent();\n\t\tlet sTargetType = \"\";\n\n\t\tconst aRoutes = oAppComponent.getManifestEntry(\"sap.ui5\").routing?.routes ?? [];\n\t\tfor (const route of aRoutes) {\n\t\t\tconst oRoute = oAppComponent.getRouter().getRoute(route.name);\n\t\t\tif (oRoute?.match(sHash)) {\n\t\t\t\tconst sTarget = getRouteTargetNames(route.target)[0];\n\t\t\t\tsTargetType = (oAppComponent.getRouter().getTarget(sTarget) as unknown as { _oOptions: { name: string } })._oOptions.name;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn sTargetType;\n\t}\n\n\t/**\n\t * This function updates the shell title after each navigation.\n\t * @param view The current view\n\t * @returns A Promise that is resolved when the menu is filled properly\n\t * @private\n\t */\n\tasync computeTitleHierarchy(view: View): Promise<void> {\n\t\tconst appComponent = this.getAppComponent(),\n\t\t\tcontext = view.getBindingContext(),\n\t\t\tcurrentPage = view.getParent(),\n\t\t\ttitleInformationPromises = [],\n\t\t\tappSpecificHash = this.getAppSpecificHash(),\n\t\t\tmanifestAppSettings = appComponent.getManifestEntry(\"sap.app\"),\n\t\t\tappTitle = manifestAppSettings.title || \"\",\n\t\t\tappSubTitle = manifestAppSettings.subTitle || \"\",\n\t\t\tappIcon = manifestAppSettings.icon || \"\";\n\t\tlet pageTitleInformation: TitleInformation, newPath: string | undefined;\n\n\t\tif (currentPage && (currentPage as TemplateComponent)._getPageTitleInformation) {\n\t\t\tif (context) {\n\t\t\t\t// If the first page of the application is a LR, use the title and subtitle from the manifest\n\t\t\t\tif (this._getTargetTypeFromHash(\"\") === \"sap.fe.templates.ListReport\") {\n\t\t\t\t\ttitleInformationPromises.push(Promise.resolve(this._computeTitleInfo(appTitle, appSubTitle, appSpecificHash, appIcon)));\n\t\t\t\t}\n\n\t\t\t\t// Then manage other pages\n\t\t\t\tnewPath = context.getPath();\n\t\t\t\tconst pathParts = newPath.split(\"/\");\n\t\t\t\tlet path = \"\";\n\n\t\t\t\tpathParts.shift(); // Remove the first segment (empty string) as it has been managed above\n\t\t\t\tpathParts.pop(); // Remove the last segment as it corresponds to the current page and shouldn't appear in the menu\n\t\t\t\tpathParts.forEach((pathPart: string) => {\n\t\t\t\t\tpath += `/${pathPart}`;\n\t\t\t\t\t//if the associated target is not declared in the routes, we skip it\n\t\t\t\t\tif (!appComponent.getRouter().getRouteInfoByHash(path)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst metaModel = appComponent.getMetaModel(),\n\t\t\t\t\t\tparameterPath = metaModel.getMetaPath(path),\n\t\t\t\t\t\tisParameterized = metaModel.getObject(`${parameterPath}/@com.sap.vocabularies.Common.v1.ResultContext`);\n\t\t\t\t\tif (!isParameterized) {\n\t\t\t\t\t\ttitleInformationPromises.push(this.getTitleInfoFromPath(path));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Current page\n\t\t\tpageTitleInformation = (currentPage as TemplateComponent)._getPageTitleInformation();\n\t\t\tpageTitleInformation = this._computeTitleInfo(\n\t\t\t\tpageTitleInformation.title ?? \"\",\n\t\t\t\tpageTitleInformation.subtitle ?? \"\",\n\t\t\t\tappSpecificHash + this._getHash()\n\t\t\t);\n\n\t\t\tif (context && newPath) {\n\t\t\t\tthis._getTitleHierarchyCache()[newPath] = pageTitleInformation;\n\t\t\t} else {\n\t\t\t\tthis._getTitleHierarchyCache()[appSpecificHash] = pageTitleInformation;\n\t\t\t}\n\t\t} else {\n\t\t\ttitleInformationPromises.push(Promise.reject(\"Title information missing in HeaderInfo\"));\n\t\t}\n\t\treturn Promise.all(titleInformationPromises)\n\t\t\t.then(async (titleInfoHierarchy: TitleInformation[]): Promise<void> => {\n\t\t\t\t// workaround for shell which is expecting all elements being of type string\n\t\t\t\tconst titleInfoHierarchyShell = this._ensureHierarchyElementsAreStrings(titleInfoHierarchy),\n\t\t\t\t\ttitle = pageTitleInformation.title ?? \"\";\n\t\t\t\ttitleInfoHierarchyShell.reverse();\n\t\t\t\tawait appComponent.getShellServices().setHierarchy(titleInfoHierarchyShell);\n\n\t\t\t\tawait this._setShellMenuTitle(appComponent, title, appTitle);\n\t\t\t\treturn;\n\t\t\t})\n\t\t\t.catch(function (errorMessage: unknown) {\n\t\t\t\tLog.error(errorMessage as string);\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tthis.bIsComputingTitleHierachy = false;\n\t\t\t})\n\t\t\t.catch(function (errorMessage: unknown) {\n\t\t\t\tLog.error(errorMessage as string);\n\t\t\t});\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tcalculateLayout(iNextFCLLevel: number, sHash: string, sProposedLayout: string | undefined, keepCurrentLayout = false): string {\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Callback after a view has been bound to a context.\n\t * @param oContext The context that has been bound to a view\n\t */\n\tonContextBoundToView(oContext: Context | undefined | null): void {\n\t\tif (oContext) {\n\t\t\tconst sDeepestPath = this.getView().getModel(\"internal\").getProperty(\"/deepestPath\"),\n\t\t\t\tsViewContextPath = oContext.getPath();\n\n\t\t\tif (!sDeepestPath || sDeepestPath.indexOf(sViewContextPath) !== 0) {\n\t\t\t\t// There was no previous value for the deepest reached path, or the path\n\t\t\t\t// for the view isn't a subpath of the previous deepest path --> update\n\t\t\t\tthis.getView().getModel(\"internal\").setProperty(\"/deepestPath\", sViewContextPath, undefined, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync displayErrorPage(_errorMessage: string, _parameters: NavigationToErrorPageResult, _FCLLevel = 0): Promise<boolean> {\n\t\t// To be overridden\n\t\treturn Promise.resolve(true);\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tupdateUIStateForView(oView: FEView, FCLLevel: number): void {\n\t\t// To be overriden\n\t}\n\n\tgetInstancedViews(): View[] {\n\t\treturn [];\n\t\t// To be overriden\n\t}\n\n\t/**\n\t * Return all visible views.\n\t * @returns The visible views\n\t */\n\tgetVisibleViews(): View[] {\n\t\treturn [];\n\t\t// To be overriden\n\t}\n\n\t_scrollTablesToLastNavigatedItems(): void {\n\t\t// To be overriden\n\t}\n\n\tisFclEnabled(): this is FclController {\n\t\treturn false;\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tasync _setShellMenuTitle(oAppComponent: AppComponent, sTitle: string, sAppTitle: string): Promise<void> {\n\t\t// To be overriden by FclController\n\t\tawait oAppComponent.getShellServices().setTitle(sTitle);\n\t}\n\n\tgetAppContentContainer(): NavContainer | FlexibleColumnLayout {\n\t\tconst oAppComponent = this.getAppComponent();\n\t\tconst appContentId = oAppComponent.getManifestEntry(\"sap.ui5\").routing?.config?.controlId ?? \"appContent\";\n\t\treturn this.getView().byId(appContentId) as NavContainer | FlexibleColumnLayout;\n\t}\n}\ninterface RootViewBaseController {\n\tonContainerReady?(): void;\n}\n\nexport default RootViewBaseController;\n"],"mappings":"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","ignoreList":[]}