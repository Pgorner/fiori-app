{"version":3,"file":"draftDataLossPopup.js","names":["NavigationType","DraftDataLossOptions","dataLossDialog","DraftDataLossDialog","silentlyKeepDraftOnForwardNavigation","pageController","oManifest","getAppComponent","getManifestEntry","app","async","processFclMode","draftAdminData","fnCancelFunction","oController","processFunctionForDrafts","bSkipBindingToView","context","CreationDateTime","LastChangeDateTime","open","then","selectedKey","draftDataLossPopup","handleDialogSelection","processNoActiveEntityMode","navigationType","bSilentlyKeepDraftOnForwardNavigation","EditState","isEditStateDirty","BackNavigation","discardDraft","error","Log","ForwardNavigation","processEditingDraftForExistingEntity","oContext","mParameters","skipDiscardPopover","skipBindingToView","editFlow","cancelDocument","processEditStateDirty","processDraftAdminData","fnProcessFunction","draftRootContext","arguments","length","undefined","collaborationConnected","collaborativeDraft","isConnected","disconnect","_len","args","Array","_key","apply","getRootViewController","isFclEnabled","getObject","HasActiveEntity","processDataLossOrDraftDiscardConfirmation","oView","getView","oModel","getBindingContext","getModel","oMetaModel","getMetaModel","viewData","getViewData","contextPath","entitySet","isDraftRoot","bIsEditable","CommonUtils","getIsEditable","originalContext","draftRootPath","getPath","ModelHelper","getDraftRootPath","bindContext","$expand","getBoundContext","backNavExitsApp","getRouterProxy","checkIfBackExitsApp","isDeleted","requestProperty","oError","saveDocument","controller","hasInitialContext","isA","_saveDocument","params","skipBackNavigation","Save","savedContext","catch","RecommendationDialogDecision","Continue","close","Keep","Discard","discardedDraft"],"sources":["./draftDataLossPopup.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type PageController from \"sap/fe/core/PageController\";\nimport EditState from \"sap/fe/core/helpers/EditState\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport type ObjectPageControllerController from \"sap/fe/templates/ObjectPage/ObjectPageController.controller\";\nimport type ODataV4Context from \"sap/ui/model/odata/v4/Context\";\nimport DraftDataLossDialog from \"../../controls/DataLossOrDraftDiscard/DraftDataLossDialog\";\nimport { RecommendationDialogDecision } from \"../../controls/Recommendations/ConfirmRecommendationDialog\";\n\n/* Enum for navigation types */\nenum NavigationType {\n\tBackNavigation = \"BackNavigation\",\n\tForwardNavigation = \"ForwardNavigation\"\n}\n\n/* Enum types for the data loss dialog options */\nenum DraftDataLossOptions {\n\tSave = \"draftDataLossOptionSave\",\n\tKeep = \"draftDataLossOptionKeep\",\n\tDiscard = \"draftDataLossOptionDiscard\"\n}\n\ntype DraftAdministrativeData = {\n\tCreationDateTime: Date;\n\tLastChangeDateTime: Date;\n};\n\n/*Create the data loss dialog*/\nconst dataLossDialog = new DraftDataLossDialog(\"fe::DraftDataLossPopup\");\n\n/**\n * The method checks whether an optional parameter in the manifest is set to silently keep the draft in case a forward navigation is triggered.\n * @param pageController The reference to the current PageController instance\n * @returns Boolean value with true or false to silently keep the draft\n */\nfunction silentlyKeepDraftOnForwardNavigation(pageController: PageController): boolean {\n\tconst oManifest = pageController.getAppComponent().getManifestEntry(\"sap.fe\");\n\treturn oManifest?.app?.silentlyKeepDraftOnForwardNavigation || false;\n}\n\n/**\n * Logic to process the FCL mode.\n * @param draftAdminData Admin data\n * @param fnCancelFunction The cancel function\n * @param oController The current controller referenced\n * @param processFunctionForDrafts The function to process the handler\n * @param bSkipBindingToView The optional parameter to skip the binding to the view\n * @param context The context to be used for the draft operation\n * @returns Nothing\n */\nasync function processFclMode(\n\tdraftAdminData: DraftAdministrativeData,\n\tfnCancelFunction: Function,\n\toController: PageController,\n\tprocessFunctionForDrafts: Function,\n\tbSkipBindingToView?: boolean,\n\tcontext?: ODataV4Context\n): Promise<void> {\n\t// The application is running in FCL mode so in this case we fall back to\n\t// the old logic since the dirty state handling is not properly working\n\t// for FCL.\n\tif (draftAdminData.CreationDateTime !== draftAdminData.LastChangeDateTime) {\n\t\treturn dataLossDialog\n\t\t\t.open(oController)\n\t\t\t.then((selectedKey) =>\n\t\t\t\tdraftDataLossPopup.handleDialogSelection(\n\t\t\t\t\tselectedKey as string,\n\t\t\t\t\tprocessFunctionForDrafts,\n\t\t\t\t\tfnCancelFunction,\n\t\t\t\t\toController,\n\t\t\t\t\tbSkipBindingToView,\n\t\t\t\t\tcontext\n\t\t\t\t)\n\t\t\t);\n\t} else {\n\t\tprocessFunctionForDrafts();\n\t}\n}\n\n/**\n * Logic to process the mode with no active entity.\n * @param draftAdminData Admin data\n * @param fnCancelFunction The cancel function\n * @param oController The current controller referenced\n * @param processFunctionForDrafts The function to process the handler\n * @param navigationType The navigation type for which the function should be called\n * @param bSilentlyKeepDraftOnForwardNavigation The parameter to determine whether to skip the popup appearance in forward case\n * @param bSkipBindingToView The optional parameter to skip the binding to the view\n * @param context The context to be used for the draft operations\n * @returns Nothing\n */\nasync function processNoActiveEntityMode(\n\tdraftAdminData: DraftAdministrativeData,\n\tfnCancelFunction: Function,\n\toController: PageController,\n\tprocessFunctionForDrafts: Function,\n\tnavigationType: NavigationType,\n\tbSilentlyKeepDraftOnForwardNavigation: boolean,\n\tbSkipBindingToView?: boolean,\n\tcontext?: ODataV4Context\n): Promise<void> {\n\t// There is no active entity so, we are editing either newly created data or\n\t// a draft which has never been saved to active version\n\t// Since we want to react differently in the two situations, we have to check the\n\t// dirty state\n\tif (EditState.isEditStateDirty()) {\n\t\tif (draftAdminData.CreationDateTime === draftAdminData.LastChangeDateTime && navigationType === NavigationType.BackNavigation) {\n\t\t\t// in case we have untouched changes for the draft and a \"back\"\n\t\t\t// navigation we can silently discard the draft again\n\t\t\t// eslint-disable-next-line promise/no-nesting\n\t\t\ttry {\n\t\t\t\tawait draftDataLossPopup.discardDraft(oController, bSkipBindingToView, context);\n\t\t\t\tprocessFunctionForDrafts();\n\t\t\t} catch (error: unknown) {\n\t\t\t\tLog.error(\"Error while canceling the document\", error as string);\n\t\t\t}\n\t\t} else if (navigationType === NavigationType.ForwardNavigation && bSilentlyKeepDraftOnForwardNavigation) {\n\t\t\t// In case we have a \"forward navigation\" and an additional parameter set in the manifest\n\t\t\t// we \"silently\" keep the draft\n\t\t\tprocessFunctionForDrafts();\n\t\t} else {\n\t\t\t// In this case data is being changed or a forward navigation is triggered\n\t\t\t// and, we always want to show the data loss dialog on navigation\n\t\t\treturn dataLossDialog\n\t\t\t\t.open(oController)\n\t\t\t\t.then((selectedKey) =>\n\t\t\t\t\tdraftDataLossPopup.handleDialogSelection(\n\t\t\t\t\t\tselectedKey as string,\n\t\t\t\t\t\tprocessFunctionForDrafts,\n\t\t\t\t\t\tfnCancelFunction,\n\t\t\t\t\t\toController,\n\t\t\t\t\t\tbSkipBindingToView,\n\t\t\t\t\t\tcontext\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t}\n\t} else {\n\t\t// We are editing a draft which has been created earlier but never saved to active\n\t\t// version and since the edit state is not dirty, there have been no user changes\n\t\t// so in this case we want to silently navigate and do nothing\n\t\tprocessFunctionForDrafts();\n\t}\n}\n\n/**\n * Logic to process the draft editing for existing entity.\n * @param oController The current controller referenced.\n * @param oContext The context of the current call\n * @param processFunctionForDrafts The function to process the handler\n * @param navigationType The navigation type for which the function should be called\n */\nasync function processEditingDraftForExistingEntity(\n\toController: PageController,\n\toContext: ODataV4Context,\n\tprocessFunctionForDrafts: Function,\n\tnavigationType: NavigationType\n): Promise<void> {\n\t// We are editing a draft for an existing active entity\n\t// The CreationDateTime and LastChangeDateTime are equal, so this draft was\n\t// never saved before, hence we're currently editing a newly created draft for\n\t// an existing active entity for the first time.\n\t// Also, there have so far been no changes made to the draft and in this\n\t// case we want to silently navigate and delete the draft in case of a back\n\t// navigation but in case of a forward navigation we want to silently keep it!\n\tif (navigationType === NavigationType.BackNavigation) {\n\t\tconst mParameters = {\n\t\t\tskipDiscardPopover: true,\n\t\t\tskipBindingToView: true\n\t\t};\n\n\t\ttry {\n\t\t\tawait oController.editFlow.cancelDocument(oContext, mParameters);\n\t\t\tprocessFunctionForDrafts();\n\t\t} catch (error) {\n\t\t\tLog.error(\"Error while canceling the document\", error as Error);\n\t\t}\n\t} else {\n\t\t// In case of a forward navigation we silently keep the draft and only\n\t\t// execute the followup function.\n\t\tprocessFunctionForDrafts();\n\t}\n}\n\n/**\n * Logic to process the context when the edit state is in dirty mode.\n * @param oController The current controller referenced.\n * @param fnCancelFunction The cancel function\n * @param processFunctionForDrafts The function to process the handler\n * @param navigationType The navigation type for which the function should be called\n * @param bSilentlyKeepDraftOnForwardNavigation The parameter to determine whether to skip the popup appearance in forward case\n * @param bSkipBindingToView The optional parameter to skip the binding to the view.\n * @param context The context to be used for the draft operations\n * @returns Nothing\n */\nasync function processEditStateDirty(\n\toController: PageController,\n\tfnCancelFunction: Function,\n\tprocessFunctionForDrafts: Function,\n\tnavigationType: NavigationType,\n\tbSilentlyKeepDraftOnForwardNavigation: boolean,\n\tbSkipBindingToView?: boolean,\n\tcontext?: ODataV4Context\n): Promise<void> {\n\tif (navigationType === NavigationType.ForwardNavigation && bSilentlyKeepDraftOnForwardNavigation) {\n\t\t// In case we have a \"forward navigation\" and an additional parameter set in the manifest\n\t\t// we \"silently\" keep the draft\n\t\tprocessFunctionForDrafts();\n\t} else {\n\t\t// The CreationDateTime and LastChangeDateTime are NOT equal, so we are currently editing\n\t\t// an existing draft and need to distinguish depending on if any changes\n\t\t// have been made in the current editing session or not\n\t\t// Changes have been made in the current editing session, so we want\n\t\t// to show the data loss dialog and let the user decide\n\t\treturn dataLossDialog\n\t\t\t.open(oController)\n\t\t\t.then((selectedKey) =>\n\t\t\t\tdraftDataLossPopup.handleDialogSelection(\n\t\t\t\t\tselectedKey as string,\n\t\t\t\t\tprocessFunctionForDrafts,\n\t\t\t\t\tfnCancelFunction,\n\t\t\t\t\toController,\n\t\t\t\t\tbSkipBindingToView,\n\t\t\t\t\tcontext\n\t\t\t\t)\n\t\t\t);\n\t}\n}\n\n/**\n * Logic to process the admin data.\n * @param draftAdminData Admin data\n * @param fnProcessFunction The function to process the handler\n * @param fnCancelFunction The cancel function\n * @param draftRootContext The context for the draft root\n * @param oController The current controller referenced\n * @param bSkipBindingToView The optional parameter to skip the binding to the view\n * @param navigationType The navigation type for which the function should be called\n * @returns Nothing\n */\nasync function processDraftAdminData(\n\tdraftAdminData: DraftAdministrativeData,\n\tfnProcessFunction: Function,\n\tfnCancelFunction: Function,\n\tdraftRootContext: ODataV4Context,\n\toController: PageController,\n\tbSkipBindingToView?: boolean,\n\tnavigationType: NavigationType = NavigationType.BackNavigation\n): Promise<void> {\n\tconst collaborationConnected = oController.collaborativeDraft.isConnected();\n\tconst processFunctionForDrafts = !collaborationConnected\n\t\t? fnProcessFunction\n\t\t: function (...args: unknown[]): void {\n\t\t\t\toController.collaborativeDraft.disconnect();\n\t\t\t\tfnProcessFunction.apply(null, ...args);\n\t\t  };\n\n\tconst bSilentlyKeepDraftOnForwardNavigation = silentlyKeepDraftOnForwardNavigation(oController);\n\n\tif (draftAdminData) {\n\t\tif (oController.getAppComponent().getRootViewController().isFclEnabled()) {\n\t\t\tawait processFclMode(\n\t\t\t\tdraftAdminData,\n\t\t\t\tfnCancelFunction,\n\t\t\t\toController,\n\t\t\t\tprocessFunctionForDrafts,\n\t\t\t\tbSkipBindingToView,\n\t\t\t\tdraftRootContext\n\t\t\t);\n\t\t} else if (!draftRootContext.getObject().HasActiveEntity) {\n\t\t\tprocessNoActiveEntityMode(\n\t\t\t\tdraftAdminData,\n\t\t\t\tfnCancelFunction,\n\t\t\t\toController,\n\t\t\t\tprocessFunctionForDrafts,\n\t\t\t\tnavigationType,\n\t\t\t\tbSilentlyKeepDraftOnForwardNavigation,\n\t\t\t\tbSkipBindingToView\n\t\t\t);\n\t\t} else if (draftAdminData.CreationDateTime === draftAdminData.LastChangeDateTime) {\n\t\t\tprocessEditingDraftForExistingEntity(oController, draftRootContext, processFunctionForDrafts, navigationType);\n\t\t} else if (EditState.isEditStateDirty()) {\n\t\t\tprocessEditStateDirty(\n\t\t\t\toController,\n\t\t\t\tfnCancelFunction,\n\t\t\t\tprocessFunctionForDrafts,\n\t\t\t\tnavigationType,\n\t\t\t\tbSilentlyKeepDraftOnForwardNavigation,\n\t\t\t\tbSkipBindingToView,\n\t\t\t\tdraftRootContext\n\t\t\t);\n\t\t} else {\n\t\t\t// The user started editing the existing draft but did not make any changes\n\t\t\t// in the current editing session, so in this case we do not want\n\t\t\t// to show the data loss dialog but just keep the draft\n\t\t\tprocessFunctionForDrafts();\n\t\t}\n\t} else {\n\t\tfnProcessFunction();\n\t}\n}\n\n/**\n * The general handler in which the individual steps are called.\n * @param fnProcessFunction\n * @param fnCancelFunction\n * @param oContext\n * @param oController\n * @param bSkipBindingToView\n * @param navigationType\n */\nasync function processDataLossOrDraftDiscardConfirmation(\n\tfnProcessFunction: Function,\n\tfnCancelFunction: Function,\n\toContext: ODataV4Context,\n\toController: PageController,\n\tbSkipBindingToView?: boolean,\n\tnavigationType: NavigationType = NavigationType.BackNavigation\n): Promise<void> {\n\tconst oView = oController.getView();\n\tconst oModel = oView.getBindingContext().getModel();\n\tconst oMetaModel = oModel.getMetaModel();\n\tconst viewData = oView.getViewData() as { entitySet?: string; contextPath?: string };\n\tconst contextPath = viewData.contextPath || (viewData.entitySet ? `/${viewData.entitySet}` : undefined);\n\tconst isDraftRoot = contextPath ? !!oMetaModel.getObject(`${contextPath}@com.sap.vocabularies.Common.v1.DraftRoot`) : false;\n\tconst bIsEditable = CommonUtils.getIsEditable(oView);\n\tconst originalContext = oContext;\n\tlet draftRootPath = oContext.getPath();\n\tif (!isDraftRoot) {\n\t\tdraftRootPath = ModelHelper.getDraftRootPath(oContext) ?? draftRootPath;\n\t\toContext = oModel.bindContext(draftRootPath, undefined, { $expand: \"DraftAdministrativeData\" }).getBoundContext();\n\t}\n\n\t// Shouldn't display data loss popover on shell back navigation from sub-object pages (unless there's no page before in the history because of deep linking)\n\t// or when object page is in display mode, or when the object is deleted\n\tconst backNavExitsApp = isDraftRoot || oController.getAppComponent().getRouterProxy().checkIfBackExitsApp();\n\tif (originalContext.isDeleted() || (!backNavExitsApp && navigationType === NavigationType.BackNavigation) || !bIsEditable) {\n\t\tfnProcessFunction();\n\t} else {\n\t\ttry {\n\t\t\t// The following 3 properties are needed to determine the state of the draft, so we ensure they are loaded\n\t\t\tawait oContext.requestProperty([\n\t\t\t\t\"DraftAdministrativeData/CreationDateTime\",\n\t\t\t\t\"DraftAdministrativeData/LastChangeDateTime\",\n\t\t\t\t\"HasActiveEntity\"\n\t\t\t]);\n\t\t\tconst draftAdminData = oContext.getObject(\"DraftAdministrativeData\");\n\t\t\tawait processDraftAdminData(\n\t\t\t\tdraftAdminData,\n\t\t\t\tfnProcessFunction,\n\t\t\t\tfnCancelFunction,\n\t\t\t\toContext,\n\t\t\t\toController,\n\t\t\t\tbSkipBindingToView,\n\t\t\t\tnavigationType\n\t\t\t);\n\t\t} catch (oError: unknown) {\n\t\t\tLog.error(\"Cannot retrieve draftDataContext information\", oError as string);\n\t\t\tfnProcessFunction();\n\t\t}\n\t}\n}\n\n/**\n * Saves the document. If the controller is of type ObjectPage, then internal _saveDocument is called, otherwise saveDocument\n * from EditFlow is called.\n * @param controller Controller of the current view\n * @param context The context to be used for the draft operations\n * @returns A promise resolved if the save was successful\n */\nasync function saveDocument(controller: PageController, context?: ODataV4Context): Promise<unknown> {\n\tconst hasInitialContext = context !== undefined;\n\tcontext = context ?? controller.getView().getBindingContext();\n\tif (!hasInitialContext && controller.isA<ObjectPageControllerController>(\"sap.fe.templates.ObjectPage.ObjectPageController\")) {\n\t\treturn controller._saveDocument();\n\t} else {\n\t\treturn controller.editFlow.saveDocument(context, {});\n\t}\n}\n\n/**\n * Discards the draft.\n * @param controller Controller of the current view\n * @param skipBindingToView The parameter to skip the binding to the view\n * @param context The context to be used for the draft operations\n * @returns A promise resolved if cancelDocument was successful\n */\nasync function discardDraft(\n\tcontroller: PageController,\n\tskipBindingToView: boolean | undefined,\n\tcontext?: ODataV4Context\n): Promise<unknown> {\n\tcontext = context ?? controller.getView().getBindingContext();\n\tconst params = {\n\t\tskipBackNavigation: true,\n\t\tskipDiscardPopover: true,\n\t\tskipBindingToView: skipBindingToView !== undefined ? skipBindingToView : true\n\t};\n\treturn controller.editFlow.cancelDocument(context, params);\n}\n\n/**\n * Executes the follow-up functions after an option was selected in the data loss dialog.\n * @param selectedKey The key of the selected option from the data loss dialog\n * @param processFunctionForDrafts The function to process the handler\n * @param fnCancelFunction The function to process the handler\n * @param controller Controller of the current view\n * @param skipBindingToView The parameter to skip the binding to the view\n * @param context The context to be used for the binding\n */\nfunction handleDialogSelection(\n\tselectedKey: string,\n\tprocessFunctionForDrafts: Function,\n\tfnCancelFunction: Function,\n\tcontroller: PageController,\n\tskipBindingToView: boolean | undefined,\n\tcontext?: ODataV4Context\n): void {\n\tswitch (selectedKey) {\n\t\tcase DraftDataLossOptions.Save:\n\t\t\tdraftDataLossPopup\n\t\t\t\t.saveDocument(controller, context)\n\t\t\t\t.then((savedContext?) => processFunctionForDrafts(savedContext))\n\t\t\t\t.catch(function (error: string | undefined) {\n\t\t\t\t\tif (error === RecommendationDialogDecision.Continue) {\n\t\t\t\t\t\treturn fnCancelFunction();\n\t\t\t\t\t}\n\t\t\t\t\tLog.error(\"Error while saving document\", error);\n\t\t\t\t});\n\t\t\tdataLossDialog.close();\n\t\t\tbreak;\n\t\tcase DraftDataLossOptions.Keep:\n\t\t\tprocessFunctionForDrafts();\n\t\t\tdataLossDialog.close();\n\t\t\tbreak;\n\t\tcase DraftDataLossOptions.Discard:\n\t\t\tdraftDataLossPopup\n\t\t\t\t.discardDraft(controller, skipBindingToView, context)\n\t\t\t\t.then((discardedDraft?) => processFunctionForDrafts(discardedDraft))\n\t\t\t\t.catch(function (error: string | undefined) {\n\t\t\t\t\tLog.error(\"Error while discarding draft\", error);\n\t\t\t\t});\n\t\t\tdataLossDialog.close();\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tfnCancelFunction();\n\t\t\tdataLossDialog.close();\n\t}\n}\n\nconst draftDataLossPopup = {\n\tprocessDataLossOrDraftDiscardConfirmation: processDataLossOrDraftDiscardConfirmation,\n\tsilentlyKeepDraftOnForwardNavigation: silentlyKeepDraftOnForwardNavigation,\n\tNavigationType: NavigationType,\n\tprocessFclMode: processFclMode,\n\tprocessNoActiveEntityMode: processNoActiveEntityMode,\n\tprocessEditingDraftForExistingEntity: processEditingDraftForExistingEntity,\n\tprocessEditStateDirty: processEditStateDirty,\n\thandleDialogSelection: handleDialogSelection,\n\tsaveDocument: saveDocument,\n\tdiscardDraft: discardDraft\n};\n\nexport default draftDataLossPopup;\n"],"mappings":"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","ignoreList":[]}