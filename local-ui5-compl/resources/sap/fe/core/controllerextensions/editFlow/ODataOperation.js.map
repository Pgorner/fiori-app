{"version":3,"file":"ODataOperation.js","names":["Constants","FELibrary","ODataOperation","operation","parameters","messageHandler","strictHandlingUtilities","operationProperties","arguments","length","undefined","this","enableStrictHandling","firstIterationOperations","operationParameters","neverSubmitted","apiGroupIdsToSubmit","Set","disableStrictHandling","isFunction","defineOperationParameters","_exports","_proto","prototype","_type","action","isBound","slice","execute","async","result","aContexts","bGrouped","executeChangeset","executeSequentially","Promise","allSettled","executeImport","error","Log","actionName","fnOnResponse","operationContext","model","bindContext","setParametersValue","groupId","promises","invoke","additionalSideEffect","context","getBoundContext","sideEffect","pathExpressions","triggerActions","requestSideEffects","destroy","defaultSubmit","currentPromiseValues","all","operationPromises","map","executeBoundOperation","manageStrictHandlingFails","reduce","promise","id","push","resolve","targetContext","mBindingParameters","finalGroupId","getUpdateGroupId","initialTableContext","control","getRowBinding","getHeaderContext","sideEffects","getPath","bind","operationPromise","findIndex","operationContextBinding","contextIndex","returnedContext","firstIterationResolve","firstIterationReject","strictHandlingPromise","reject","isAPIMode","add","contextLength","operationInvoke","ignoreETag","operationsHelper","fnOnStrictHandlingFailed","getContext","replaceWithRVC","race","update412TransitionMessages","ActionExecutionFailed","boundContext","submit","size","Array","from","values","submitOnModel","fnOnSubmitted","submitBatch","delete","startsWith","submitMode","appComponent","getManifestEntry","models","settings","groupProperties","SubmitMode","Auto","Direct","includes","firstSubmit","deferredSubmit","displayErrorOrWarning","strictHandlingPromises","messageHandling","hasTransitionErrorsOrWarnings","strictHandlingWarningMessages","renderMessageView","shPromise","messageModel","Messaging","getMessageModel","messagesInModel","getData","setData","concat","onlySuccessMessages","messages","processedMessageIds","delaySuccessMessages","strictHandlingTransitionFails","unProcessedMessages","acc","message","has","getId","newTransitionErrorMessagesId","filter","getPersistent","getType","MessageType","Success","Object","internalModelContext","oAction","defaultValues","defaultParametersValues","parameter","name","type","setParameter","localPromise","sideEffectsService","getSideEffectsService","executeAction","operationAvailableMap","ActionRuntime","setActionEnablement","JSON","parse","selectedItems"],"sources":["./ODataOperation.ts"],"sourcesContent":["import type { ActionImport, ActionParameter, Action as EdmAction } from \"@sap-ux/vocabularies-types\";\nimport Log from \"sap/base/Log\";\nimport type { ShowActionDialogParameters } from \"sap/fe/core/controllerextensions/editFlow/operations/facade\";\nimport FELibrary from \"sap/fe/core/library\";\nimport Messaging from \"sap/ui/core/Messaging\";\nimport type Message from \"sap/ui/core/message/Message\";\nimport MessageType from \"sap/ui/core/message/MessageType\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type { default as ODataV4Context } from \"sap/ui/model/odata/v4/Context\";\nimport type ODataContextBinding from \"sap/ui/model/odata/v4/ODataContextBinding\";\nimport SubmitMode from \"sap/ui/model/odata/v4/SubmitMode\";\nimport ActionRuntime from \"../../ActionRuntime\";\nimport operationsHelper, { type StrictHandlingUtilities } from \"../../operationsHelper\";\nimport type { ActionSideEffectsType } from \"../../services/SideEffectsServiceFactory\";\nimport type MessageHandler from \"../MessageHandler\";\nimport messageHandling from \"../messageHandler/messageHandling\";\n\nconst Constants = FELibrary.Constants;\n\nexport type OperationResult = {\n\treturnedContext?: ODataV4Context;\n\tboundContext: ODataV4Context;\n};\n\nexport default class ODataOperation {\n\tprivate readonly enableStrictHandling: boolean = true;\n\n\tprivate readonly firstIterationOperations: Promise<unknown>[] = [];\n\n\tprivate operationParameters: ActionParameter[] = [];\n\n\tprivate neverSubmitted = true;\n\n\tprivate readonly apiGroupIdsToSubmit: Set<string> = new Set();\n\n\tconstructor(\n\t\tprivate readonly operation: EdmAction | ActionImport,\n\t\tprivate readonly parameters: ShowActionDialogParameters,\n\t\tprivate readonly messageHandler: MessageHandler,\n\t\tprivate readonly strictHandlingUtilities: StrictHandlingUtilities | undefined,\n\t\tprivate readonly operationProperties: {\n\t\t\tdeferredSubmit?: boolean;\n\t\t\tignoreETag?: boolean;\n\t\t\treplaceWithRVC?: boolean;\n\t\t} = {}\n\t) {\n\t\tthis.enableStrictHandling = this.parameters.disableStrictHandling !== true && !(this.operation as EdmAction).isFunction;\n\t\tthis.defineOperationParameters();\n\t}\n\n\t/**\n\t * Defines the parameters of the operation.\n\t */\n\tprivate defineOperationParameters(): void {\n\t\tif (this.operation._type === \"ActionImport\") {\n\t\t\tthis.operationParameters = this.operation.action.parameters;\n\t\t} else {\n\t\t\t//Remove the binding parameters from the parameters list\n\t\t\tthis.operationParameters = this.operation.isBound ? this.operation.parameters.slice(1) : this.operation.parameters;\n\t\t}\n\t}\n\n\t/**\n\t * Executes the operation.\n\t * @returns The promise of the operation\n\t */\n\tasync execute(): Promise<PromiseSettledResult<OperationResult>[]> {\n\t\tlet result: PromiseSettledResult<OperationResult>[];\n\t\ttry {\n\t\t\tif (this.parameters.aContexts.length) {\n\t\t\t\tresult = await (this.parameters.bGrouped === true ? this.executeChangeset() : this.executeSequentially());\n\t\t\t} else {\n\t\t\t\tresult = await Promise.allSettled([this.executeImport()]);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tLog.error(\"Error while executing operation \" + this.parameters.actionName, error as string);\n\t\t\tthrow error;\n\t\t} finally {\n\t\t\tthis.parameters.fnOnResponse?.();\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Executes the import operation.\n\t * @returns The promise of the operation\n\t */\n\tprivate async executeImport(): Promise<OperationResult> {\n\t\tconst operationContext = this.parameters.model.bindContext(`/${this.parameters.actionName}(...)`);\n\t\tthis.setParametersValue(operationContext);\n\t\tconst groupId = this.parameters.groupId ?? \"actionImport\";\n\t\tconst promises = [this.invoke(operationContext, groupId, null)];\n\n\t\tif (this.parameters.additionalSideEffect) {\n\t\t\tconst context = this.parameters.model.bindContext(\"/unBoundAction\").getBoundContext();\n\t\t\tconst sideEffect = {\n\t\t\t\tcontext: context,\n\t\t\t\tpathExpressions: this.parameters.additionalSideEffect.pathExpressions,\n\t\t\t\ttriggerActions: this.parameters.additionalSideEffect.triggerActions\n\t\t\t};\n\t\t\tthis.requestSideEffects(sideEffect, groupId, promises);\n\t\t\tcontext.destroy();\n\t\t}\n\t\tthis.defaultSubmit(groupId);\n\n\t\tconst currentPromiseValues = await Promise.all(promises);\n\t\treturn currentPromiseValues[0];\n\t}\n\n\t/**\n\t * Executes the operations on one changeset.\n\t * @returns The promise of the operations\n\t */\n\tprivate async executeChangeset(): Promise<PromiseSettledResult<OperationResult>[]> {\n\t\tconst operationPromises = this.parameters.aContexts.map(async (context) =>\n\t\t\tthis.executeBoundOperation(context, this.parameters.groupId)\n\t\t);\n\t\tawait Promise.allSettled(this.firstIterationOperations);\n\t\tawait this.manageStrictHandlingFails();\n\t\treturn Promise.allSettled(operationPromises);\n\t}\n\n\t/**\n\t * Executes the operations sequentially.\n\t * @returns The promise of the operations\n\t */\n\tprivate async executeSequentially(): Promise<PromiseSettledResult<OperationResult>[]> {\n\t\tconst operationPromises: Promise<OperationResult>[] = [];\n\n\t\t// serialization: executeBoundOperation to be called for each entry only after the promise returned from the one before has been resolved\n\t\tawait this.parameters.aContexts.reduce(async (promise: Promise<void>, context: ODataV4Context, id: number): Promise<void> => {\n\t\t\tawait promise;\n\t\t\toperationPromises.push(this.executeBoundOperation(context, this.parameters.groupId ?? `apiMode${id + 1}`));\n\t\t\tawait Promise.allSettled(this.firstIterationOperations);\n\t\t}, Promise.resolve());\n\t\tawait this.manageStrictHandlingFails(true);\n\t\treturn Promise.allSettled(operationPromises);\n\t}\n\n\t/**\n\t * Executes the bound operation.\n\t * @param targetContext The target context\n\t * @param groupId The groupId of the batch\n\t * @returns The promise of the operation\n\t */\n\tprivate async executeBoundOperation(targetContext: ODataV4Context, groupId?: string): Promise<OperationResult> {\n\t\tconst operationContext = this.parameters.model.bindContext(\n\t\t\t`${this.parameters.actionName}(...)`,\n\t\t\ttargetContext,\n\t\t\tthis.parameters.mBindingParameters\n\t\t);\n\n\t\tconst promises: Promise<unknown>[] = [];\n\t\tthis.setParametersValue(operationContext);\n\t\tconst finalGroupId = groupId ?? operationContext.getUpdateGroupId();\n\n\t\t// Action on the table level is bound on a copy of the oDataListBinding, to execute the SideEffects we need\n\t\t// to do it on the original oDataListBinding\n\t\tconst initialTableContext = (this.parameters.control as Table)?.getRowBinding?.()?.getHeaderContext();\n\t\tconst sideEffects = {\n\t\t\tcontext: initialTableContext?.getPath() === targetContext.getPath() ? initialTableContext : targetContext,\n\t\t\tpathExpressions: this.parameters.additionalSideEffect?.pathExpressions,\n\t\t\ttriggerActions: this.parameters.additionalSideEffect?.triggerActions\n\t\t};\n\t\t//Has to be removed when the refactoring  is done\n\t\tthis.parameters.requestSideEffects = this.requestSideEffects.bind(this, sideEffects, finalGroupId, promises);\n\t\tconst operationPromise = this.invoke(\n\t\t\toperationContext,\n\t\t\tfinalGroupId,\n\t\t\tthis.parameters.aContexts.findIndex((context) => context === targetContext) + 1\n\t\t);\n\n\t\tpromises.push(operationPromise);\n\n\t\tthis.requestSideEffects(sideEffects, finalGroupId, promises);\n\t\tthis.defaultSubmit(finalGroupId);\n\t\tPromise.allSettled(promises);\n\t\treturn operationPromise;\n\t}\n\n\t/**\n\t * Invokes the operation on the context.\n\t * @param operationContextBinding The operation context binding\n\t * @param groupId The groupId of the batch\n\t * @param contextIndex The index of the context\n\t * @returns The promise of the operation\n\t */\n\tprivate async invoke(\n\t\toperationContextBinding: ODataContextBinding,\n\t\tgroupId: string,\n\t\tcontextIndex: number | null\n\t): Promise<OperationResult> {\n\t\tlet returnedContext;\n\t\tlet firstIterationResolve!: Function;\n\t\tlet firstIterationReject!: Function;\n\t\tconst strictHandlingPromise = new Promise<unknown>(function (resolve, reject) {\n\t\t\tfirstIterationResolve = resolve;\n\t\t\tfirstIterationReject = reject;\n\t\t});\n\t\tthis.firstIterationOperations.push(strictHandlingPromise);\n\t\tif (groupId && this.isAPIMode(groupId)) {\n\t\t\tthis.apiGroupIdsToSubmit.add(groupId);\n\t\t}\n\t\ttry {\n\t\t\tconst contextLength = this.parameters.aContexts.length ? this.parameters.aContexts.length : null;\n\t\t\tconst operationInvoke = operationContextBinding.invoke(\n\t\t\t\tgroupId,\n\t\t\t\tthis.operationProperties.ignoreETag,\n\t\t\t\tthis.enableStrictHandling\n\t\t\t\t\t? operationsHelper.fnOnStrictHandlingFailed.bind(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\tgroupId,\n\t\t\t\t\t\t\tthis.parameters,\n\t\t\t\t\t\t\tcontextIndex,\n\t\t\t\t\t\t\toperationContextBinding.getContext(),\n\t\t\t\t\t\t\tcontextLength,\n\t\t\t\t\t\t\tthis.messageHandler,\n\t\t\t\t\t\t\tthis.strictHandlingUtilities,\n\t\t\t\t\t\t\tfirstIterationResolve\n\t\t\t\t\t  )\n\t\t\t\t\t: undefined,\n\t\t\t\tthis.operationProperties.replaceWithRVC\n\t\t\t);\n\t\t\tawait Promise.race([operationInvoke, strictHandlingPromise]);\n\n\t\t\treturnedContext = await operationInvoke;\n\t\t\tfirstIterationResolve();\n\t\t\tif (!this.parameters.bGrouped) {\n\t\t\t\t//Has to be removed when the refactoring  is done\n\t\t\t\tthis.update412TransitionMessages(operationContextBinding, groupId, true);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (!this.parameters.bGrouped) {\n\t\t\t\tthis.update412TransitionMessages(operationContextBinding, groupId);\n\t\t\t}\n\t\t\tfirstIterationReject(error);\n\t\t\tthrow Constants.ActionExecutionFailed;\n\t\t}\n\n\t\treturn {\n\t\t\treturnedContext,\n\t\t\tboundContext: operationContextBinding.getBoundContext()\n\t\t};\n\t}\n\n\t/**\n\t * Submits the batch related to the groupId of the operation.\n\t */\n\tpublic submit(): void {\n\t\tif (!this.neverSubmitted || this.apiGroupIdsToSubmit.size === 0) {\n\t\t\treturn;\n\t\t}\n\t\tfor (const groupId of Array.from(this.apiGroupIdsToSubmit.values())) {\n\t\t\tthis.submitOnModel(groupId);\n\t\t}\n\t\tthis.parameters.fnOnSubmitted?.();\n\t}\n\n\t/**\n\t * Submits the batch at the model level related to the groupId of the operation.\n\t * @param groupId The groupId of the batch\n\t */\n\tprivate submitOnModel(groupId: string): void {\n\t\tthis.parameters.model.submitBatch(groupId);\n\t\tthis.apiGroupIdsToSubmit.delete(groupId);\n\t}\n\n\t/**\n\t * Is the SubmitMode of the groupId set to API.\n\t * @param groupId The groupId of the batch\n\t * @returns True if the SubmitMode is set to API, false otherwise\n\t */\n\tprivate isAPIMode(groupId?: string): boolean {\n\t\tif (!groupId) {\n\t\t\treturn false;\n\t\t}\n\t\tif (groupId.startsWith(\"$auto\") || groupId.startsWith(\"$direct\") || groupId.startsWith(\"$single\")) {\n\t\t\treturn false;\n\t\t}\n\t\tconst submitMode = (\n\t\t\tthis.parameters.appComponent.getManifestEntry(\"sap.ui5\")?.models[\"\"]?.settings as\n\t\t\t\t| { groupProperties?: Record<string, { submit: SubmitMode }> }\n\t\t\t\t| undefined\n\t\t)?.groupProperties?.[groupId]?.submit;\n\n\t\tif (submitMode === undefined || [SubmitMode.Auto, SubmitMode.Direct].includes(submitMode)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Executes the submit of the operation if the submitMode is on API and deferredSubmit is not set to true\n\t * The submitBatch is skipped if the groupId is $auto or $direct since done by the model.\n\t * @param groupId The groupId of the batch\n\t */\n\tprivate defaultSubmit(groupId?: string): void {\n\t\tconst firstSubmit = this.neverSubmitted;\n\t\tconst isAPIMode = this.isAPIMode(groupId);\n\t\tif (!isAPIMode) {\n\t\t\t// The submitBatch is skipped if the groupId is $auto or $direct since done by the model\n\t\t\tthis.neverSubmitted = false;\n\t\t} else if (this.operationProperties.deferredSubmit !== true && groupId) {\n\t\t\tthis.neverSubmitted = false;\n\t\t\tthis.submitOnModel(groupId);\n\t\t}\n\t\tif (firstSubmit && !this.neverSubmitted) {\n\t\t\t//Trigger the callback only once\n\t\t\tthis.parameters.fnOnSubmitted?.();\n\t\t}\n\t}\n\n\t/**\n\t * Manages the strict handling fails.\n\t * @param displayErrorOrWarning True, if the warning/error messages have to be displayed, false otherwise (default)\n\t * @returns The promise of the strict handling\n\t */\n\tprivate async manageStrictHandlingFails(displayErrorOrWarning = false): Promise<void> {\n\t\tif (this.strictHandlingUtilities && this.strictHandlingUtilities.strictHandlingPromises.length) {\n\t\t\ttry {\n\t\t\t\tif (\n\t\t\t\t\t(!messageHandling.hasTransitionErrorsOrWarnings() || displayErrorOrWarning) &&\n\t\t\t\t\tthis.strictHandlingUtilities.strictHandlingWarningMessages.length\n\t\t\t\t) {\n\t\t\t\t\tawait operationsHelper.renderMessageView(\n\t\t\t\t\t\tthis.parameters,\n\t\t\t\t\t\tthis.messageHandler,\n\t\t\t\t\t\tthis.strictHandlingUtilities.strictHandlingWarningMessages,\n\t\t\t\t\t\tthis.strictHandlingUtilities,\n\t\t\t\t\t\tthis.parameters.aContexts.length > 1\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tfor (const shPromise of this.strictHandlingUtilities.strictHandlingPromises) {\n\t\t\t\t\t\tshPromise.resolve(false);\n\t\t\t\t\t}\n\t\t\t\t\tconst messageModel = Messaging.getMessageModel();\n\t\t\t\t\tconst messagesInModel = messageModel.getData();\n\t\t\t\t\tmessageModel.setData(messagesInModel.concat(this.strictHandlingUtilities.strictHandlingWarningMessages));\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\tLog.error(\"Re-triggering of strict handling operations failed\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Updates the strictHandling utilities with the failed and successful transition messages.\n\t * @param operation The operation context binding\n\t * @param groupId GroupId of the batch\n\t * @param onlySuccessMessages To update only successful transition messages\n\t */\n\tprivate update412TransitionMessages(operation: ODataContextBinding, groupId: string, onlySuccessMessages = false): void {\n\t\t//Has to be removed  from here when the refactoring  is done\n\t\tif (this.enableStrictHandling && this.strictHandlingUtilities) {\n\t\t\tconst messages: Array<Message> = Messaging.getMessageModel().getData();\n\t\t\tconst { processedMessageIds, delaySuccessMessages, strictHandlingTransitionFails } = this.strictHandlingUtilities;\n\t\t\tconst unProcessedMessages = messages.reduce((acc: Message[], message) => {\n\t\t\t\tif (!processedMessageIds.has(message.getId())) {\n\t\t\t\t\tacc.push(message);\n\t\t\t\t}\n\t\t\t\treturn acc;\n\t\t\t}, []);\n\n\t\t\tconst newTransitionErrorMessagesId = unProcessedMessages\n\t\t\t\t.filter(\n\t\t\t\t\t(message) =>\n\t\t\t\t\t\tmessage.getPersistent() === true &&\n\t\t\t\t\t\tmessage.getType() !== MessageType.Success &&\n\t\t\t\t\t\t!processedMessageIds.has(message.getId())\n\t\t\t\t)\n\t\t\t\t.map((message) => message.getId());\n\n\t\t\tif (newTransitionErrorMessagesId.length) {\n\t\t\t\tthis.strictHandlingUtilities.processedMessageIds = new Set([\n\t\t\t\t\t...Array.from(processedMessageIds),\n\t\t\t\t\t...newTransitionErrorMessagesId\n\t\t\t\t]);\n\t\t\t\tdelaySuccessMessages.push(\n\t\t\t\t\t...Object.values(unProcessedMessages).filter((message) => message.getType() === MessageType.Success)\n\t\t\t\t);\n\t\t\t\tif (!onlySuccessMessages && this.parameters.internalModelContext) {\n\t\t\t\t\tstrictHandlingTransitionFails.push({\n\t\t\t\t\t\toAction: operation,\n\t\t\t\t\t\tgroupId\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Sets the default values for the parameters of the operation.\n\t * @param operationContextBinding The operation context binding\n\t */\n\tprivate setParametersValue(operationContextBinding: ODataContextBinding): void {\n\t\tif (this.operationParameters.length) {\n\t\t\tconst defaultValues = this.parameters.defaultParametersValues ?? {};\n\t\t\tfor (const parameter of this.operationParameters) {\n\t\t\t\tconst name = parameter.name;\n\t\t\t\tif (!defaultValues[name]) {\n\t\t\t\t\tswitch (parameter.type) {\n\t\t\t\t\t\tcase \"Edm.String\":\n\t\t\t\t\t\t\tdefaultValues[name] = \"\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"Edm.Boolean\":\n\t\t\t\t\t\t\tdefaultValues[name] = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"Edm.Byte\":\n\t\t\t\t\t\tcase \"Edm.Int16\":\n\t\t\t\t\t\tcase \"Edm.Int32\":\n\t\t\t\t\t\tcase \"Edm.Int64\":\n\t\t\t\t\t\t\tdefaultValues[name] = 0;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\toperationContextBinding.setParameter(name, defaultValues[name]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Requests the side effects for the action.\n\t * @param sideEffect  The side effect to be executed\n\t * @param groupId  The groupId of the batch\n\t * @param localPromise The promise of the invoked action\n\t * @returns The promise of the side effect\n\t */\n\tprivate async requestSideEffects(\n\t\tsideEffect: (ActionSideEffectsType & { context: ODataV4Context }) | undefined,\n\t\tgroupId: string,\n\t\tlocalPromise?: Promise<unknown>[]\n\t): Promise<void> {\n\t\tconst sideEffectsService = this.parameters.appComponent.getSideEffectsService();\n\t\tlet promises: Promise<unknown>[] = localPromise ?? [];\n\t\t// trigger actions from side effects\n\t\tif (sideEffect) {\n\t\t\tpromises = promises.concat(\n\t\t\t\t(sideEffect.triggerActions ?? []).map(async (action) =>\n\t\t\t\t\tsideEffectsService.executeAction(action, sideEffect.context, groupId)\n\t\t\t\t),\n\t\t\t\tsideEffect.pathExpressions\n\t\t\t\t\t? sideEffectsService.requestSideEffects(sideEffect.pathExpressions, sideEffect.context, groupId)\n\t\t\t\t\t: []\n\t\t\t);\n\t\t\tif (sideEffect.pathExpressions) {\n\t\t\t\ttry {\n\t\t\t\t\tawait Promise.all(promises);\n\t\t\t\t\tif (this.parameters.operationAvailableMap && this.parameters.internalModelContext) {\n\t\t\t\t\t\tActionRuntime.setActionEnablement(\n\t\t\t\t\t\t\tthis.parameters.internalModelContext,\n\t\t\t\t\t\t\tJSON.parse(this.parameters.operationAvailableMap),\n\t\t\t\t\t\t\tthis.parameters.selectedItems,\n\t\t\t\t\t\t\t\"table\"\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t} catch (error: unknown) {\n\t\t\t\t\tLog.error(\"Error while requesting side effects\", error as string);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"],"mappings":";;;;qRAiBA,MAAMA,EAAYC,EAAUD,UAAU,IAOjBE,EAAc,WAWlC,SAAAA,EACkBC,EACAC,EACAC,EACAC,GAMhB,IALgBC,EAIhBC,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAAG,CAAC,EAACG,KAnBUC,qBAAgC,KAAID,KAEpCE,yBAA+C,GAAEF,KAE1DG,oBAAyC,GAAEH,KAE3CI,eAAiB,KAAIJ,KAEZK,oBAAmC,IAAIC,IAAKN,KAG3CR,YAAmCQ,KACnCP,aAAsCO,KACtCN,iBAA8BM,KAC9BL,0BAA4DK,KAC5DJ,sBAMjBI,KAAKC,qBAAuBD,KAAKP,WAAWc,wBAA0B,OAAUP,KAAKR,UAAwBgB,WAC7GR,KAAKS,2BACN,CAEAC,EAAAnB,EAAA,IAAAoB,EAAApB,EAAAqB,UAAAD,EAGQF,0BAAR,SAAQA,IACP,GAAIT,KAAKR,UAAUqB,QAAU,eAAgB,CAC5Cb,KAAKG,oBAAsBH,KAAKR,UAAUsB,OAAOrB,UAClD,KAAO,CAENO,KAAKG,oBAAsBH,KAAKR,UAAUuB,QAAUf,KAAKR,UAAUC,WAAWuB,MAAM,GAAKhB,KAAKR,UAAUC,UACzG,CACD,EAEAkB,EAIMM,QAANC,eAAMD,IACL,IAAIE,EACJ,IACC,GAAInB,KAAKP,WAAW2B,UAAUtB,OAAQ,CACrCqB,QAAgBnB,KAAKP,WAAW4B,WAAa,KAAOrB,KAAKsB,mBAAqBtB,KAAKuB,sBACpF,KAAO,CACNJ,QAAeK,QAAQC,WAAW,CAACzB,KAAK0B,iBACzC,CACD,CAAE,MAAOC,GACRC,EAAID,MAAM,mCAAqC3B,KAAKP,WAAWoC,WAAYF,GAC3E,MAAMA,CACP,CAAC,QACA3B,KAAKP,WAAWqC,gBACjB,CACA,OAAOX,CACR,EAEAR,EAIce,cAAdR,eAAcQ,IACb,MAAMK,EAAmB/B,KAAKP,WAAWuC,MAAMC,YAAY,IAAIjC,KAAKP,WAAWoC,mBAC/E7B,KAAKkC,mBAAmBH,GACxB,MAAMI,EAAUnC,KAAKP,WAAW0C,SAAW,eAC3C,MAAMC,EAAW,CAACpC,KAAKqC,OAAON,EAAkBI,EAAS,OAEzD,GAAInC,KAAKP,WAAW6C,qBAAsB,CACzC,MAAMC,EAAUvC,KAAKP,WAAWuC,MAAMC,YAAY,kBAAkBO,kBACpE,MAAMC,EAAa,CAClBF,QAASA,EACTG,gBAAiB1C,KAAKP,WAAW6C,qBAAqBI,gBACtDC,eAAgB3C,KAAKP,WAAW6C,qBAAqBK,gBAEtD3C,KAAK4C,mBAAmBH,EAAYN,EAASC,GAC7CG,EAAQM,SACT,CACA7C,KAAK8C,cAAcX,GAEnB,MAAMY,QAA6BvB,QAAQwB,IAAIZ,GAC/C,OAAOW,EAAqB,EAC7B,EAEApC,EAIcW,iBAAdJ,eAAcI,IACb,MAAM2B,EAAoBjD,KAAKP,WAAW2B,UAAU8B,IAAIhC,SACvDlB,KAAKmD,sBAAsBZ,EAASvC,KAAKP,WAAW0C,gBAE/CX,QAAQC,WAAWzB,KAAKE,gCACxBF,KAAKoD,4BACX,OAAO5B,QAAQC,WAAWwB,EAC3B,EAEAtC,EAIcY,oBAAdL,eAAcK,IACb,MAAM0B,EAAgD,SAGhDjD,KAAKP,WAAW2B,UAAUiC,OAAOnC,MAAOoC,EAAwBf,EAAyBgB,WACxFD,EACNL,EAAkBO,KAAKxD,KAAKmD,sBAAsBZ,EAASvC,KAAKP,WAAW0C,SAAW,UAAUoB,EAAK,YAC/F/B,QAAQC,WAAWzB,KAAKE,yBAAyB,EACrDsB,QAAQiC,iBACLzD,KAAKoD,0BAA0B,MACrC,OAAO5B,QAAQC,WAAWwB,EAC3B,EAEAtC,EAMcwC,sBAAdjC,eAAciC,EAAsBO,EAA+BvB,GAClE,MAAMJ,EAAmB/B,KAAKP,WAAWuC,MAAMC,YAC9C,GAAGjC,KAAKP,WAAWoC,kBACnB6B,EACA1D,KAAKP,WAAWkE,oBAGjB,MAAMvB,EAA+B,GACrCpC,KAAKkC,mBAAmBH,GACxB,MAAM6B,EAAezB,GAAWJ,EAAiB8B,mBAIjD,MAAMC,EAAuB9D,KAAKP,WAAWsE,SAAmBC,mBAAmBC,mBACnF,MAAMC,EAAc,CACnB3B,QAASuB,GAAqBK,YAAcT,EAAcS,UAAYL,EAAsBJ,EAC5FhB,gBAAiB1C,KAAKP,WAAW6C,sBAAsBI,gBACvDC,eAAgB3C,KAAKP,WAAW6C,sBAAsBK,gBAGvD3C,KAAKP,WAAWmD,mBAAqB5C,KAAK4C,mBAAmBwB,KAAKpE,KAAMkE,EAAaN,EAAcxB,GACnG,MAAMiC,EAAmBrE,KAAKqC,OAC7BN,EACA6B,EACA5D,KAAKP,WAAW2B,UAAUkD,UAAW/B,GAAYA,IAAYmB,GAAiB,GAG/EtB,EAASoB,KAAKa,GAEdrE,KAAK4C,mBAAmBsB,EAAaN,EAAcxB,GACnDpC,KAAK8C,cAAcc,GACnBpC,QAAQC,WAAWW,GACnB,OAAOiC,CACR,EAEA1D,EAOc0B,OAAdnB,eAAcmB,EACbkC,EACApC,EACAqC,GAEA,IAAIC,EACJ,IAAIC,EACJ,IAAIC,EACJ,MAAMC,EAAwB,IAAIpD,QAAiB,SAAUiC,EAASoB,GACrEH,EAAwBjB,EACxBkB,EAAuBE,CACxB,GACA7E,KAAKE,yBAAyBsD,KAAKoB,GACnC,GAAIzC,GAAWnC,KAAK8E,UAAU3C,GAAU,CACvCnC,KAAKK,oBAAoB0E,IAAI5C,EAC9B,CACA,IACC,MAAM6C,EAAgBhF,KAAKP,WAAW2B,UAAUtB,OAASE,KAAKP,WAAW2B,UAAUtB,OAAS,KAC5F,MAAMmF,EAAkBV,EAAwBlC,OAC/CF,EACAnC,KAAKJ,oBAAoBsF,WACzBlF,KAAKC,qBACFkF,EAAiBC,yBAAyBhB,KAC1CpE,KACAmC,EACAnC,KAAKP,WACL+E,EACAD,EAAwBc,aACxBL,EACAhF,KAAKN,eACLM,KAAKL,wBACL+E,GAEA3E,UACHC,KAAKJ,oBAAoB0F,sBAEpB9D,QAAQ+D,KAAK,CAACN,EAAiBL,IAErCH,QAAwBQ,EACxBP,IACA,IAAK1E,KAAKP,WAAW4B,SAAU,CAE9BrB,KAAKwF,4BAA4BjB,EAAyBpC,EAAS,KACpE,CACD,CAAE,MAAOR,GACR,IAAK3B,KAAKP,WAAW4B,SAAU,CAC9BrB,KAAKwF,4BAA4BjB,EAAyBpC,EAC3D,CACAwC,EAAqBhD,GACrB,MAAMtC,EAAUoG,qBACjB,CAEA,MAAO,CACNhB,kBACAiB,aAAcnB,EAAwB/B,kBAExC,EAEA7B,EAGOgF,OAAP,SAAOA,IACN,IAAK3F,KAAKI,gBAAkBJ,KAAKK,oBAAoBuF,OAAS,EAAG,CAChE,MACD,CACA,IAAK,MAAMzD,KAAW0D,MAAMC,KAAK9F,KAAKK,oBAAoB0F,UAAW,CACpE/F,KAAKgG,cAAc7D,EACpB,CACAnC,KAAKP,WAAWwG,iBACjB,EAEAtF,EAIQqF,cAAR,SAAQA,EAAc7D,GACrBnC,KAAKP,WAAWuC,MAAMkE,YAAY/D,GAClCnC,KAAKK,oBAAoB8F,OAAOhE,EACjC,EAEAxB,EAKQmE,UAAR,SAAQA,EAAU3C,GACjB,IAAKA,EAAS,CACb,OAAO,KACR,CACA,GAAIA,EAAQiE,WAAW,UAAYjE,EAAQiE,WAAW,YAAcjE,EAAQiE,WAAW,WAAY,CAClG,OAAO,KACR,CACA,MAAMC,EACLrG,KAAKP,WAAW6G,aAAaC,iBAAiB,YAAYC,OAAO,KAAKC,UAGpEC,kBAAkBvE,IAAUwD,OAE/B,GAAIU,IAAetG,WAAa,CAAC4G,EAAWC,KAAMD,EAAWE,QAAQC,SAAST,GAAa,CAC1F,OAAO,IACR,CACA,OAAO,IACR,EAEA1F,EAKQmC,cAAR,SAAQA,EAAcX,GACrB,MAAM4E,EAAc/G,KAAKI,eACzB,MAAM0E,EAAY9E,KAAK8E,UAAU3C,GACjC,IAAK2C,EAAW,CAEf9E,KAAKI,eAAiB,KACvB,MAAO,GAAIJ,KAAKJ,oBAAoBoH,iBAAmB,MAAQ7E,EAAS,CACvEnC,KAAKI,eAAiB,MACtBJ,KAAKgG,cAAc7D,EACpB,CACA,GAAI4E,IAAgB/G,KAAKI,eAAgB,CAExCJ,KAAKP,WAAWwG,iBACjB,CACD,EAEAtF,EAKcyC,0BAAdlC,eAAckC,IAAwE,IAA9C6D,EAAqBpH,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAAG,MAC/D,GAAIG,KAAKL,yBAA2BK,KAAKL,wBAAwBuH,uBAAuBpH,OAAQ,CAC/F,IACC,KACGqH,EAAgBC,iCAAmCH,IACrDjH,KAAKL,wBAAwB0H,8BAA8BvH,OAC1D,OACKqF,EAAiBmC,kBACtBtH,KAAKP,WACLO,KAAKN,eACLM,KAAKL,wBAAwB0H,8BAC7BrH,KAAKL,wBACLK,KAAKP,WAAW2B,UAAUtB,OAAS,EAErC,KAAO,CACN,IAAK,MAAMyH,KAAavH,KAAKL,wBAAwBuH,uBAAwB,CAC5EK,EAAU9D,QAAQ,MACnB,CACA,MAAM+D,EAAeC,EAAUC,kBAC/B,MAAMC,EAAkBH,EAAaI,UACrCJ,EAAaK,QAAQF,EAAgBG,OAAO9H,KAAKL,wBAAwB0H,+BAC1E,CACD,CAAE,MACDzF,EAAID,MAAM,qDACX,CACD,CACD,EAEAhB,EAMQ6E,4BAAR,SAAQA,EAA4BhG,EAAgC2C,GAAoD,IAAnC4F,EAAmBlI,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAAG,MAE1G,GAAIG,KAAKC,sBAAwBD,KAAKL,wBAAyB,CAC9D,MAAMqI,EAA2BP,EAAUC,kBAAkBE,UAC7D,MAAMK,oBAAEA,EAAmBC,qBAAEA,EAAoBC,8BAAEA,GAAkCnI,KAAKL,wBAC1F,MAAMyI,EAAsBJ,EAAS3E,OAAO,CAACgF,EAAgBC,KAC5D,IAAKL,EAAoBM,IAAID,EAAQE,SAAU,CAC9CH,EAAI7E,KAAK8E,EACV,CACA,OAAOD,CAAG,EACR,IAEH,MAAMI,EAA+BL,EACnCM,OACCJ,GACAA,EAAQK,kBAAoB,MAC5BL,EAAQM,YAAcC,EAAYC,UACjCb,EAAoBM,IAAID,EAAQE,UAElCtF,IAAKoF,GAAYA,EAAQE,SAE3B,GAAIC,EAA6B3I,OAAQ,CACxCE,KAAKL,wBAAwBsI,oBAAsB,IAAI3H,IAAI,IACvDuF,MAAMC,KAAKmC,MACXQ,IAEJP,EAAqB1E,QACjBuF,OAAOhD,OAAOqC,GAAqBM,OAAQJ,GAAYA,EAAQM,YAAcC,EAAYC,UAE7F,IAAKf,GAAuB/H,KAAKP,WAAWuJ,qBAAsB,CACjEb,EAA8B3E,KAAK,CAClCyF,QAASzJ,EACT2C,WAEF,CACD,CACD,CACD,EAEAxB,EAIQuB,mBAAR,SAAQA,EAAmBqC,GAC1B,GAAIvE,KAAKG,oBAAoBL,OAAQ,CACpC,MAAMoJ,EAAgBlJ,KAAKP,WAAW0J,yBAA2B,CAAC,EAClE,IAAK,MAAMC,KAAapJ,KAAKG,oBAAqB,CACjD,MAAMkJ,EAAOD,EAAUC,KACvB,IAAKH,EAAcG,GAAO,CACzB,OAAQD,EAAUE,MACjB,IAAK,aACJJ,EAAcG,GAAQ,GACtB,MACD,IAAK,cACJH,EAAcG,GAAQ,MACtB,MACD,IAAK,WACL,IAAK,YACL,IAAK,YACL,IAAK,YACJH,EAAcG,GAAQ,EACtB,MACD,QACC,MAEH,CACA9E,EAAwBgF,aAAaF,EAAMH,EAAcG,GAC1D,CACD,CACD,EAEA1I,EAOciC,mBAAd1B,eAAc0B,EACbH,EACAN,EACAqH,GAEA,MAAMC,EAAqBzJ,KAAKP,WAAW6G,aAAaoD,wBACxD,IAAItH,EAA+BoH,GAAgB,GAEnD,GAAI/G,EAAY,CACfL,EAAWA,EAAS0F,QAClBrF,EAAWE,gBAAkB,IAAIO,IAAIhC,SACrCuI,EAAmBE,cAAc7I,EAAQ2B,EAAWF,QAASJ,IAE9DM,EAAWC,gBACR+G,EAAmB7G,mBAAmBH,EAAWC,gBAAiBD,EAAWF,QAASJ,GACtF,IAEJ,GAAIM,EAAWC,gBAAiB,CAC/B,UACOlB,QAAQwB,IAAIZ,GAClB,GAAIpC,KAAKP,WAAWmK,uBAAyB5J,KAAKP,WAAWuJ,qBAAsB,CAClFa,EAAcC,oBACb9J,KAAKP,WAAWuJ,qBAChBe,KAAKC,MAAMhK,KAAKP,WAAWmK,uBAC3B5J,KAAKP,WAAWwK,cAChB,QAEF,CACA,MACD,CAAE,MAAOtI,GACRC,EAAID,MAAM,sCAAuCA,EAClD,CACD,CACD,CACD,EAAC,OAAApC,CAAA,CAvbiC,GAubjCmB,EAAAnB,EAAA,OAAAmB,CAAA","ignoreList":[]}