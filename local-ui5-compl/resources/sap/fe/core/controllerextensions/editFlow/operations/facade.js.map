{"version":3,"file":"facade.js","names":["Constants","FELibrary","InvocationGrouping","Action","MessageBox","async","callBoundAction","sActionName","contexts","oModel","oAppComponent","mParameters","length","Error","aContexts","Array","isArray","oMetaModel","getMetaModel","sActionPath","getMetaPath","getPath","oBoundAction","createBindingContext","isCriticalAction","ActionRuntime","getIsActionCritical","convertedTypes","convertTypes","convertedAction","resolvePath","target","callAction","callActionImport","actionName","model","appComponent","parameters","metaModel","actionPath","convertedActionImport","action","unboundActionIndex","actions","filter","name","findIndex","isBound","actionNameFromModel","actionImport","callBoundFunction","sFunctionName","context","Promise","reject","sFunctionPath","oBoundFunction","_executeFunction","callFunctionImport","bindContext","oFunctionImport","getObject","oFunction","functionToCall","groupId","executionPromise","execute","submitBatch","getBoundContext","checkParameterTypeAndReturnConvertedValue","parameter","value","undefined","BaseType","__ui5_require_async","default","TypeMap","parameterType","type","getBaseType","String","typeInstance","getDataTypeInstance","parseValue","oAction","strictHandlingUtilities","is412Executed","strictHandlingTransitionFails","strictHandlingPromises","strictHandlingWarningMessages","delaySuccessMessages","processedMessageIds","Set","fullyQualifiedName","replace","bGrouped","invocationGrouping","ChangeSet","resolve","sActionLabel","label","bSkipParameterDialog","skipParameterDialog","bIsCreateAction","bIsCriticalAction","sMessagesPath","iMessageSideEffect","isSameEntity","bValuesProvidedForAllMandatoryParameters","actionDefinition","actionParameters","slice","bActionNeedsParameterDialog","aParameterValues","parameterValues","oComponentData","getComponentData","oStartupParameters","startupParameters","actionParameter","every","annotations","UI","Hidden","valueOf","_valuesProvidedForAllMandatoryParameters","mActionExecutionParameters","defaultParametersValues","fnOnSubmitted","onSubmitted","fnOnResponse","onResponse","aActionParameters","defaultValuesExtensionFunction","selectedItems","convertedMetaData","filteredEntitySet","entitySets","singleEntitySet","entityType","returnEntityType","currentEntitySet","returnCollection","sourceEntityType","ModelHelper","isDraftRoot","mBindingParameters","$select","additionalSideEffect","pathExpressions","getMessagesPath","exp","entityProperties","find","property","split","includes","push","triggerActions","splice","internalModelContext","operationAvailableMap","isCreateAction","bObjectPage","disableStrictHandling","controlId","control","parentControl","byId","isStatic","isCollection","operationResult","executionWitDialog","parameterDialog","getCoreUIFactory","newParameterDialog","entitySetName","view","messageHandler","beforeShowingMessage","actionParameterShowMessageCallback","ignoreETag","createDialog","openDialog","confirmCriticalAction","e","afterActionResolution","i","element","parameterValueNotConverted","ParameterDefaultValue","oOperationResult","ODataOperation","messages","Messaging","getMessageModel","getData","concat","strictHandlingFails","aFailedContexts","forEach","fail","getContext","oFailedOperationResult","addMessages","showGenericErrorMessageForChangeSet","messageHandling","hasTransitionErrorsOrWarnings","showMessageDialog","onBeforeShowMessage","aMessages","showMessageParametersIn","res","status","aSelectedContexts","entitySet","boundActionName","then","clearStrictWarningMessages","getConfirmTitle","oParentControl","suffixResourceKey","key","resourceModel","getResourceModel","titleOverrideExists","checkIfResourceKeyExists","getText","sConfirmationText","confirm","title","onClose","sAction","OK","oOperation","oError","CancelActionDialog","$IsBound","selectedContexts","getProperty","setActionEnablement","JSON","parse","isA","getSelectedContexts","DeleteHelper","updateDeleteInfoForSelectedContexts","filterAPDandContextMessages","errorTargetsInAPD","unboundMessages","isAPDOPen","removeContextMessagesfromModel","containsBoundTransistion","CommonUtils","getIsEditable","removeMessagesForActionParameterDialog","messagesToShow","showMessageInDialog","oDialog","isActionSuccessful","showMessageBox","oControl","oResourceBundle","Library","getResourceBundleFor","message","getTargets","APDmessages","some","actionParam","APDMessage","isAPDTarget","messageModel","messagesInModel","aBoundMessages","getMessages","genericMessage","isEditable","nonErrorMessageExistsInDialog","getType","nonErrorMessageExistsInModel","getGenericMsgForSingleErrorInChangeSet","unshift","sMessage","sDescriptionText","Message","MessageType","persistent","description","code","isOpen","close","destroy","filteredMessages","bIsAPDOpen","fnGetMessageSubtitle","setMessageSubtitle","bind","showChangeSetErrorDialog","hiddenAnnotationSetOnAllActions","fieldControl","Common","FieldControl","isMandatory","toString","parameterValue","resourceBundle","technicalDetails","fe","changeSetPreTextForSingleError","operations","valuesProvidedForAllMandatoryParameters"],"sources":["./facade.ts"],"sourcesContent":["import type {\n\tActionImport,\n\tActionParameter,\n\tAction as EdmAction,\n\tActionParameter as EdmActionParameter,\n\tPrimitiveType\n} from \"@sap-ux/vocabularies-types\";\nimport ActionRuntime from \"sap/fe/core/ActionRuntime\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport { getCoreUIFactory } from \"sap/fe/core/UIProvider\";\nimport type { BindContextParameters } from \"sap/fe/core/controllerextensions/editFlow/draft\";\nimport type { MessageWithHeader, ShowMessageParameters } from \"sap/fe/core/controllerextensions/messageHandler/messageHandling\";\nimport messageHandling from \"sap/fe/core/controllerextensions/messageHandler/messageHandling\";\nimport { convertTypes, type MetaModelAction } from \"sap/fe/core/converters/MetaModelConverter\";\nimport DeleteHelper from \"sap/fe/core/helpers/DeleteHelper\";\nimport type { InternalModelContext } from \"sap/fe/core/helpers/ModelHelper\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport { getResourceModel } from \"sap/fe/core/helpers/ResourceModelHelper\";\nimport FELibrary from \"sap/fe/core/library\";\nimport type { ActionSideEffectsType } from \"sap/fe/core/services/SideEffectsServiceFactory\";\nimport type Dialog from \"sap/m/Dialog\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport type Control from \"sap/ui/core/Control\";\nimport Library from \"sap/ui/core/Lib\";\nimport Messaging from \"sap/ui/core/Messaging\";\nimport Message from \"sap/ui/core/message/Message\";\nimport MessageType from \"sap/ui/core/message/MessageType\";\nimport type View from \"sap/ui/core/mvc/View\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type MultiValueFieldItem from \"sap/ui/mdc/field/MultiValueFieldItem\";\nimport type Context from \"sap/ui/model/Context\";\nimport type { default as ODataV4Context } from \"sap/ui/model/odata/v4/Context\";\nimport type ODataContextBinding from \"sap/ui/model/odata/v4/ODataContextBinding\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type AppComponent from \"../../../AppComponent\";\nimport { type StrictHandlingUtilities } from \"../../../operationsHelper\";\nimport type MessageHandler from \"../../MessageHandler\";\n\nimport type ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport ODataOperation, { type OperationResult } from \"../ODataOperation\";\n\nconst Constants = FELibrary.Constants,\n\tInvocationGrouping = FELibrary.InvocationGrouping;\nconst Action = MessageBox.Action;\n\nexport type ShowActionDialogParameters = {\n\tappComponent: AppComponent;\n\tfnOnSubmitted?: Function;\n\tfnOnResponse?: Function;\n\tactionName: string;\n\tmodel: ODataModel;\n\taActionParameters: EdmActionParameter[];\n\tdefaultParametersValues: Record<string, PrimitiveType>;\n\tdefaultValuesExtensionFunction?: string;\n\tlabel?: string;\n\tselectedItems: ODataV4Context[];\n\taContexts: ODataV4Context[];\n\tmBindingParameters?: BindContextParameters;\n\tadditionalSideEffect?: ActionSideEffectsType;\n\tbGrouped?: boolean;\n\tinternalModelContext?: InternalModelContext | null;\n\toperationAvailableMap?: string;\n\tisCreateAction?: boolean;\n\tbObjectPage?: boolean;\n\tdisableStrictHandling?: boolean;\n\tbIsCreateAction?: boolean;\n\tgroupId?: string;\n\tisStatic?: boolean;\n\tcontrol?: Control;\n\toDialog?: Dialog;\n\trequestSideEffects?: Function;\n};\n\nexport type CallActionParameters = {\n\tparameterValues?: Record<string, string | boolean | number | MultiValueFieldItem[]>[];\n\tlabel?: string;\n\tinvocationGrouping?: string;\n\tskipParameterDialog?: boolean;\n\tbindingParameters?: BindContextParameters;\n\tentitySetName?: string;\n\tonSubmitted: Function;\n\tonResponse: Function;\n\tparentControl: View;\n\tcontrol?: Control;\n\tbIsCreateAction?: boolean;\n\tinternalModelContext?: InternalModelContext | null;\n\toperationAvailableMap?: string;\n\tmessageHandler: MessageHandler;\n\tbObjectPage?: boolean;\n\tisCriticalAction?: boolean;\n\tcontrolId?: string;\n\tignoreETag?: boolean;\n\tview: View | null;\n} & {\n\tdefaultValuesExtensionFunction?: string;\n} & {\n\tbGrouped?: boolean;\n\taContexts?: ODataV4Context[];\n\tselectedItems?: ODataV4Context[];\n\tadditionalSideEffect?: ActionSideEffectsType;\n\tmBindingParameters?: BindContextParameters;\n\tdisableStrictHandling?: boolean;\n\tgroupId?: string;\n};\n\ntype BaseTypeParameter = string | number | boolean;\n\n/**\n * Calls a bound action for one or multiple contexts.\n * @param sActionName The name of the action to be called\n * @param contexts Either one context or an array with contexts for which the action is to be be called\n * @param oModel OData Model\n * @param oAppComponent The AppComponent\n * @param [mParameters] Optional, can contain the following attributes:\n * @param [mParameters.parameterValues] A map of action parameter names and provided values\n * @param [mParameters.mBindingParameters] A map of binding parameters that would be part of $select and $expand coming from side effects for bound actions\n * @param [mParameters.additionalSideEffect] Array of property paths to be requested in addition to actual target properties of the side effect\n * @param [mParameters.showActionParameterDialog] If set and if parameters exist the user retrieves a dialog to fill in parameters, if actionParameters are passed they are shown to the user\n * @param [mParameters.label] A human-readable label for the action\n * @param [mParameters.invocationGrouping] Mode how actions are to be called: Changeset to put all action calls into one changeset, Isolated to put them into separate changesets, defaults to Isolated\n * @param [mParameters.onSubmitted] Function which is called once the actions are submitted with an array of promises\n * @param [mParameters.defaultParameters] Can contain default parameters from FLP user defaults\n * @param [mParameters.parentControl] If specified, the dialogs are added as dependent of the parent control\n * @param [mParameters.ignoreETag] If specified, the action is called without ETag handling\n * @returns Promise resolves with an array of response objects\n */\nasync function callBoundAction(\n\tsActionName: string,\n\tcontexts: ODataV4Context[],\n\toModel: ODataModel,\n\toAppComponent: AppComponent,\n\tmParameters: CallActionParameters\n): Promise<PromiseSettledResult<OperationResult>[]> {\n\tif (!contexts || contexts.length === 0) {\n\t\t//In Freestyle apps bound actions can have no context\n\t\tthrow new Error(\"Bound actions always requires at least one context\");\n\t}\n\tmParameters.aContexts = Array.isArray(contexts) ? contexts : [contexts];\n\n\tconst oMetaModel = oModel.getMetaModel(),\n\t\t// Analyzing metaModelPath for action only from first context seems weird, but probably works in all existing scenarios - if several contexts are passed, they probably\n\t\t// belong to the same metamodelpath. TODO: Check, whether this can be improved / scenarios with different metaModelPaths might exist\n\t\tsActionPath = `${oMetaModel.getMetaPath(mParameters.aContexts[0].getPath())}/${sActionName}`,\n\t\toBoundAction = oMetaModel.createBindingContext(`${sActionPath}/@$ui5.overload/0`)!;\n\tmParameters.isCriticalAction = await ActionRuntime.getIsActionCritical(oMetaModel, sActionPath, mParameters.aContexts);\n\tconst convertedTypes = convertTypes(oModel.getMetaModel());\n\tconst convertedAction = convertedTypes.resolvePath<EdmAction | undefined>(oBoundAction.getPath()).target;\n\tif (!convertedAction) {\n\t\tthrow new Error(\"Unknown bound action\");\n\t}\n\treturn callAction(convertedAction, oModel, oBoundAction, oAppComponent, mParameters);\n}\n/**\n * Calls an action import.\n * @param actionName The name of the action import to be called\n * @param model An instance of an OData V4 model\n * @param appComponent The AppComponent\n * @param [parameters] Optional, can contain the following attributes:\n * @param [parameters.parameterValues] A map of action parameter names and provided values\n * @param [parameters.label] A human-readable label for the action\n * @param [parameters.showActionParameterDialog] If set and if parameters exist the user retrieves a dialog to fill in parameters, if actionParameters are passed they are shown to the user\n * @param [parameters.onSubmitted] Function which is called once the actions are submitted with an array of promises\n * @param [parameters.defaultParameters] Can contain default parameters from FLP user defaults\n * @param [parameters.ignoreETag] If specified, the action is called without ETag handling\n * @returns Promise resolves with an array of response objects\n */\nasync function callActionImport(\n\tactionName: string,\n\tmodel: ODataModel,\n\tappComponent: AppComponent,\n\tparameters: {\n\t\tparameterValues?: Record<string, string | boolean | number | MultiValueFieldItem[]>[];\n\t\tlabel?: string;\n\t\tskipParameterDialog?: boolean;\n\t\tbindingParameters?: BindContextParameters;\n\t\tentitySetName?: string;\n\t\tadditionalSideEffect?: ActionSideEffectsType;\n\t\tonSubmitted: Function;\n\t\tonResponse: Function;\n\t\tparentControl: View;\n\t\tinternalModelContext?: InternalModelContext | null;\n\t\toperationAvailableMap?: string;\n\t\tmessageHandler: MessageHandler;\n\t\tbObjectPage?: boolean;\n\t\tselectedItems?: ODataV4Context[];\n\t\tignoreETag?: boolean;\n\t\tview: View | null;\n\t} & {\n\t\tisCriticalAction?: boolean;\n\t}\n): Promise<PromiseSettledResult<OperationResult>[]> {\n\tconst metaModel = model.getMetaModel();\n\tconst actionPath = `/${actionName}`;\n\tconst convertedTypes = convertTypes(metaModel);\n\tconst convertedActionImport = convertedTypes.resolvePath<ActionImport | undefined>(actionPath).target,\n\t\tconvertedAction = convertedActionImport?.action;\n\tif (!convertedAction) {\n\t\tthrow new Error(\"Unknown action import\");\n\t}\n\tconst unboundActionIndex = convertedTypes.actions\n\t\t\t.filter((action) => action.name === convertedAction.name)\n\t\t\t.findIndex((action) => !action.isBound),\n\t\tactionNameFromModel = convertedActionImport.actionName,\n\t\tactionImport = metaModel.createBindingContext(`/${actionNameFromModel}/${unboundActionIndex}`);\n\tparameters.isCriticalAction = await ActionRuntime.getIsActionCritical(metaModel, `${actionPath}/@$ui5.overload`);\n\treturn callAction(convertedActionImport.action, model, actionImport, appComponent, parameters);\n}\nasync function callBoundFunction(sFunctionName: string, context: Context, oModel: ODataModel): Promise<ODataV4Context> {\n\tif (!context) {\n\t\treturn Promise.reject(\"Bound functions always requires a context\");\n\t}\n\tconst oMetaModel = oModel.getMetaModel(),\n\t\tsFunctionPath = `${oMetaModel.getMetaPath(context.getPath())}/${sFunctionName}`,\n\t\toBoundFunction = oMetaModel.createBindingContext(sFunctionPath);\n\treturn _executeFunction(sFunctionName, oModel, oBoundFunction, context);\n}\n\n/**\n * Calls a function import.\n * @param sFunctionName The name of the function to be called\n * @param oModel An instance of an OData v4 model\n * @returns Promise resolves\n */\nasync function callFunctionImport(sFunctionName: string, oModel: ODataModel): Promise<void | ODataV4Context> {\n\tconst oMetaModel = oModel.getMetaModel(),\n\t\tsFunctionPath = oModel.bindContext(`/${sFunctionName}`).getPath(),\n\t\toFunctionImport = oMetaModel.createBindingContext(`/${oMetaModel.createBindingContext(sFunctionPath)!.getObject(\"$Function\")}/0`);\n\treturn _executeFunction(sFunctionName, oModel, oFunctionImport);\n}\nasync function _executeFunction(\n\tsFunctionName: string,\n\toModel: ODataModel,\n\toFunction: Context | null,\n\tcontext?: Context\n): Promise<ODataV4Context> {\n\tif (!oFunction?.getObject()) {\n\t\treturn Promise.reject(new Error(`Function ${sFunctionName} not found`));\n\t}\n\tconst functionToCall: ODataContextBinding = oModel.bindContext(`${context?.getPath() ?? \"\"}/${sFunctionName}(...)`);\n\tconst groupId = context ? \"functionGroup\" : \"functionImport\";\n\tconst executionPromise = functionToCall.execute(groupId);\n\toModel.submitBatch(groupId);\n\tawait executionPromise;\n\treturn functionToCall.getBoundContext();\n}\n\nasync function checkParameterTypeAndReturnConvertedValue(\n\tparameter: ActionParameter,\n\tvalue?: BaseTypeParameter | null\n): Promise<BaseTypeParameter | undefined | null> {\n\tif (value === undefined || value === null) {\n\t\treturn value;\n\t}\n\tconst BaseType = (await import(\"sap/ui/mdc/enums/BaseType\")).default;\n\tconst TypeMap = (await import(\"sap/ui/mdc/odata/v4/TypeMap\")).default;\n\tconst parameterType = (\n\t\tparameter as {\n\t\t\tname: string;\n\t\t\ttype?: string;\n\t\t}\n\t).type\n\t\t? TypeMap.getBaseType(\n\t\t\t\t(\n\t\t\t\t\tparameter as {\n\t\t\t\t\t\tname: string;\n\t\t\t\t\t\ttype: string;\n\t\t\t\t\t}\n\t\t\t\t).type\n\t\t  )\n\t\t: BaseType.String;\n\tconst typeInstance = TypeMap.getDataTypeInstance(parameterType);\n\treturn typeInstance.parseValue(value, \"string\");\n}\n\nasync function callAction(\n\tconvertedAction: EdmAction,\n\toModel: ODataModel,\n\toAction: Context,\n\toAppComponent: AppComponent,\n\tmParameters: CallActionParameters\n): Promise<PromiseSettledResult<OperationResult>[]> {\n\tlet strictHandlingUtilities: StrictHandlingUtilities = {\n\t\tis412Executed: false,\n\t\tstrictHandlingTransitionFails: [],\n\t\tstrictHandlingPromises: [],\n\t\tstrictHandlingWarningMessages: [],\n\t\tdelaySuccessMessages: [],\n\t\tprocessedMessageIds: new Set<string>()\n\t};\n\tconst sActionName = convertedAction.isBound\n\t\t? convertedAction.fullyQualifiedName.replace(/\\(.*\\)$/g, \"\") // remove the part related to the overlay\n\t\t: convertedAction.name;\n\tmParameters.bGrouped = mParameters.invocationGrouping === InvocationGrouping.ChangeSet;\n\treturn new Promise<PromiseSettledResult<OperationResult>[]>(async function (\n\t\tresolve: (value: PromiseSettledResult<OperationResult>[]) => void,\n\t\treject: (error: unknown) => void\n\t) {\n\t\tconst sActionLabel = mParameters.label;\n\t\tlet bSkipParameterDialog = mParameters.skipParameterDialog;\n\t\tconst aContexts = mParameters.aContexts;\n\t\tconst bIsCreateAction = mParameters.bIsCreateAction;\n\t\tconst bIsCriticalAction = mParameters.isCriticalAction;\n\t\tlet oMetaModel;\n\t\tlet sMessagesPath: string;\n\t\tlet iMessageSideEffect;\n\t\tlet isSameEntity;\n\t\tlet bValuesProvidedForAllMandatoryParameters;\n\t\tconst actionDefinition = oAction.getObject() as MetaModelAction;\n\n\t\t//in case of bound actions, ignore the first parameter and consider the rest\n\t\tconst actionParameters = convertedAction.isBound ? convertedAction.parameters.slice(1) : convertedAction.parameters;\n\n\t\t// Check if the action has parameters and would need a parameter dialog\n\t\t// The parameter ResultIsActiveEntity is always hidden in the dialog! Hence if\n\t\t// this is the only parameter, this is treated as no parameter here because the\n\t\t// dialog would be empty!\n\t\t// FIXME: Should only ignore this if this is a 'create' action, otherwise it is just some normal parameter that happens to have this name\n\t\tconst bActionNeedsParameterDialog =\n\t\t\tactionParameters.length > 0 && !(actionParameters.length === 1 && actionParameters[0].name === \"ResultIsActiveEntity\");\n\n\t\t// Provided values for the action parameters from invokeAction call\n\t\tconst aParameterValues = mParameters.parameterValues;\n\n\t\t// Determine startup parameters if provided\n\t\tconst oComponentData = oAppComponent.getComponentData();\n\t\tconst oStartupParameters = (oComponentData && oComponentData.startupParameters) || {};\n\n\t\t// If all parameters are hidden  and all mandatory parameters values are available, then we skip the dialog.\n\t\tbSkipParameterDialog =\n\t\t\tactionParameters.length &&\n\t\t\tactionParameters\n\t\t\t\t.filter((actionParameter) => actionParameter.name !== \"ResultIsActiveEntity\")\n\t\t\t\t.every((parameter) => parameter.annotations.UI?.Hidden?.valueOf() === true)\n\t\t\t\t? true\n\t\t\t\t: bSkipParameterDialog;\n\t\t// In case an action parameter is needed, and we shall skip the dialog, check if values are provided for all parameters\n\t\tif (bActionNeedsParameterDialog && bSkipParameterDialog) {\n\t\t\tbValuesProvidedForAllMandatoryParameters = _valuesProvidedForAllMandatoryParameters(\n\t\t\t\t!!bIsCreateAction,\n\t\t\t\tactionParameters,\n\t\t\t\taParameterValues,\n\t\t\t\toStartupParameters\n\t\t\t);\n\t\t}\n\n\t\t// Depending on the previously determined data, either set a dialog or leave it empty which\n\t\t// will lead to direct execution of the action without a dialog\n\n\t\tconst mActionExecutionParameters: ShowActionDialogParameters = {\n\t\t\tdefaultParametersValues: {},\n\t\t\tappComponent: oAppComponent,\n\t\t\tfnOnSubmitted: mParameters.onSubmitted,\n\t\t\tfnOnResponse: mParameters.onResponse,\n\t\t\tactionName: sActionName,\n\t\t\taContexts: [],\n\t\t\tmodel: oModel,\n\t\t\taActionParameters: actionParameters,\n\t\t\tdefaultValuesExtensionFunction: mParameters.defaultValuesExtensionFunction,\n\t\t\tlabel: mParameters.label,\n\t\t\tselectedItems: mParameters.selectedItems!\n\t\t};\n\t\tif (convertedAction.isBound) {\n\t\t\toMetaModel = oModel.getMetaModel();\n\n\t\t\tconst convertedMetaData = convertTypes(oMetaModel);\n\t\t\tconst filteredEntitySet = convertedMetaData.entitySets.filter(\n\t\t\t\t(singleEntitySet) => singleEntitySet.entityType === convertedAction.returnEntityType\n\t\t\t);\n\t\t\tconst currentEntitySet = filteredEntitySet.length > 0 ? filteredEntitySet[0] : undefined;\n\n\t\t\tisSameEntity =\n\t\t\t\t!convertedAction.returnCollection &&\n\t\t\t\tconvertedAction.returnEntityType &&\n\t\t\t\tconvertedAction.sourceEntityType === convertedAction.returnEntityType;\n\n\t\t\tif (isSameEntity && ModelHelper.isDraftRoot(currentEntitySet)) {\n\t\t\t\tmParameters.mBindingParameters ??= {};\n\t\t\t\tmParameters.mBindingParameters.$select = mParameters.mBindingParameters.$select\n\t\t\t\t\t? `${mParameters.mBindingParameters.$select},HasActiveEntity`\n\t\t\t\t\t: \"HasActiveEntity\";\n\t\t\t}\n\n\t\t\tif (mParameters.additionalSideEffect?.pathExpressions) {\n\t\t\t\tsMessagesPath = ModelHelper.getMessagesPath(oMetaModel, aContexts![0].getPath())!;\n\n\t\t\t\tif (sMessagesPath) {\n\t\t\t\t\t// '*' effectively includes the messages path if there is one\n\t\t\t\t\tiMessageSideEffect = mParameters.additionalSideEffect.pathExpressions.findIndex(\n\t\t\t\t\t\t(exp) => typeof exp === \"string\" && (exp === sMessagesPath || exp === \"*\")\n\t\t\t\t\t);\n\n\t\t\t\t\t// Add SAP_Messages by default if not annotated by side effects, action does not return a collection and\n\t\t\t\t\t// the return type is the same as the bound type\n\t\t\t\t\tif (iMessageSideEffect > -1 || isSameEntity) {\n\t\t\t\t\t\t// the message path is annotated as side effect. As there's no binding for it and the model does currently not allow\n\t\t\t\t\t\t// to add it at a later point of time we have to take care it's part of the $select of the POST, therefore moving it.\n\t\t\t\t\t\tmParameters.mBindingParameters ??= {};\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tconvertedAction.returnEntityType?.entityProperties.find((property) => property.name === sMessagesPath) &&\n\t\t\t\t\t\t\t!(mParameters.mBindingParameters.$select ?? \"\").split(\",\").includes(sMessagesPath)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tmParameters.mBindingParameters.$select = mParameters.mBindingParameters.$select\n\t\t\t\t\t\t\t\t? `${mParameters.mBindingParameters.$select},${sMessagesPath}`\n\t\t\t\t\t\t\t\t: sMessagesPath;\n\t\t\t\t\t\t\t// Add side effects at entity level because $select stops these being returned by the action\n\t\t\t\t\t\t\t// Only if no other side effects were added for Messages\n\t\t\t\t\t\t\tif (iMessageSideEffect === -1) {\n\t\t\t\t\t\t\t\tmParameters.additionalSideEffect.pathExpressions.push(\"*\");\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (mParameters.additionalSideEffect.triggerActions?.length === 0 && iMessageSideEffect > -1) {\n\t\t\t\t\t\t\t\t// no trigger action therefore no need to request messages again\n\t\t\t\t\t\t\t\tmParameters.additionalSideEffect.pathExpressions.splice(iMessageSideEffect, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmActionExecutionParameters.aContexts = aContexts ?? [];\n\t\t\tmActionExecutionParameters.mBindingParameters = mParameters.mBindingParameters;\n\t\t\tmActionExecutionParameters.additionalSideEffect = mParameters.additionalSideEffect;\n\t\t\tmActionExecutionParameters.bGrouped = mParameters.invocationGrouping === InvocationGrouping.ChangeSet;\n\t\t\tmActionExecutionParameters.internalModelContext = mParameters.internalModelContext;\n\t\t\tmActionExecutionParameters.operationAvailableMap = mParameters.operationAvailableMap;\n\t\t\tmActionExecutionParameters.isCreateAction = bIsCreateAction;\n\t\t\tmActionExecutionParameters.bObjectPage = mParameters.bObjectPage;\n\t\t\tmActionExecutionParameters.disableStrictHandling = mParameters.disableStrictHandling;\n\t\t\tmActionExecutionParameters.groupId = mParameters.groupId;\n\t\t\tif (mParameters.controlId) {\n\t\t\t\tmActionExecutionParameters.control = mParameters.parentControl.byId(mParameters.controlId) as Control;\n\t\t\t\tmParameters.control = mActionExecutionParameters.control;\n\t\t\t} else {\n\t\t\t\tmActionExecutionParameters.control = mParameters.parentControl;\n\t\t\t\tmParameters.control = mParameters.parentControl;\n\t\t\t}\n\t\t}\n\t\tmActionExecutionParameters.additionalSideEffect = mParameters.additionalSideEffect;\n\t\tif (bIsCreateAction) {\n\t\t\tmActionExecutionParameters.bIsCreateAction = bIsCreateAction;\n\t\t}\n\t\tmActionExecutionParameters.isStatic = convertedAction.isBound && !!convertedAction.parameters[0]?.isCollection;\n\n\t\tlet operationResult: PromiseSettledResult<OperationResult>[] = [];\n\t\tlet executionWitDialog = false;\n\t\ttry {\n\t\t\tif (bActionNeedsParameterDialog) {\n\t\t\t\tif (!(bSkipParameterDialog && bValuesProvidedForAllMandatoryParameters)) {\n\t\t\t\t\texecutionWitDialog = true;\n\t\t\t\t\tconst parameterDialog = getCoreUIFactory().newParameterDialog(\n\t\t\t\t\t\tconvertedAction,\n\t\t\t\t\t\toAction as ODataV4Context,\n\t\t\t\t\t\tmActionExecutionParameters,\n\t\t\t\t\t\taParameterValues,\n\t\t\t\t\t\tmParameters.entitySetName,\n\t\t\t\t\t\tmParameters.view as FEView | null,\n\t\t\t\t\t\tmParameters.messageHandler,\n\t\t\t\t\t\tstrictHandlingUtilities,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbeforeShowingMessage: actionParameterShowMessageCallback\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmParameters.ignoreETag\n\t\t\t\t\t);\n\t\t\t\t\tawait parameterDialog.createDialog();\n\t\t\t\t\toperationResult = await parameterDialog.openDialog(mParameters.parentControl);\n\t\t\t\t}\n\t\t\t} else if (bIsCriticalAction) {\n\t\t\t\texecutionWitDialog = true;\n\t\t\t\toperationResult = await confirmCriticalAction(\n\t\t\t\t\tconvertedAction,\n\t\t\t\t\tsActionName,\n\t\t\t\t\tmActionExecutionParameters,\n\t\t\t\t\tmParameters.parentControl,\n\t\t\t\t\tmParameters.entitySetName,\n\t\t\t\t\tmParameters.messageHandler,\n\t\t\t\t\tstrictHandlingUtilities,\n\t\t\t\t\tmParameters.ignoreETag\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treject(e);\n\t\t}\n\t\tif (executionWitDialog) {\n\t\t\tafterActionResolution(mParameters, mActionExecutionParameters, actionDefinition);\n\t\t\tresolve(operationResult);\n\t\t\treturn;\n\t\t}\n\n\t\t// Take over all provided parameter values and call the action.\n\t\t// This shall only happen if values are provided for all the parameters, otherwise the parameter dialog shall be shown which is ensured earlier\n\n\t\tif (aParameterValues) {\n\t\t\tfor (const i in mActionExecutionParameters.aActionParameters) {\n\t\t\t\tmActionExecutionParameters.defaultParametersValues[mActionExecutionParameters.aActionParameters[i].name] =\n\t\t\t\t\taParameterValues?.find((element) => element.name === mActionExecutionParameters.aActionParameters[i].name)?.value;\n\t\t\t}\n\t\t} else {\n\t\t\tlet actionParameter, parameterValueNotConverted;\n\t\t\tfor (const i in mActionExecutionParameters.aActionParameters) {\n\t\t\t\tactionParameter = mActionExecutionParameters.aActionParameters[i];\n\t\t\t\tparameterValueNotConverted =\n\t\t\t\t\t(oStartupParameters[actionParameter.name]?.[0] as BaseTypeParameter) ||\n\t\t\t\t\tactionParameter.annotations?.UI?.ParameterDefaultValue?.valueOf();\n\t\t\t\tmActionExecutionParameters.defaultParametersValues[actionParameter.name] =\n\t\t\t\t\tparameterValueNotConverted === undefined\n\t\t\t\t\t\t? parameterValueNotConverted\n\t\t\t\t\t\t: await checkParameterTypeAndReturnConvertedValue(actionParameter, parameterValueNotConverted);\n\t\t\t}\n\t\t}\n\t\tlet oOperationResult: PromiseSettledResult<OperationResult>[] = [];\n\t\ttry {\n\t\t\toOperationResult = await new ODataOperation(\n\t\t\t\tconvertedAction,\n\t\t\t\tmActionExecutionParameters,\n\t\t\t\tmParameters.messageHandler,\n\t\t\t\tstrictHandlingUtilities,\n\t\t\t\t{ ignoreETag: mParameters.ignoreETag }\n\t\t\t).execute();\n\n\t\t\tconst messages = Messaging.getMessageModel().getData();\n\t\t\tif (\n\t\t\t\tstrictHandlingUtilities &&\n\t\t\t\tstrictHandlingUtilities.is412Executed &&\n\t\t\t\tstrictHandlingUtilities.strictHandlingTransitionFails.length\n\t\t\t) {\n\t\t\t\tstrictHandlingUtilities.delaySuccessMessages = strictHandlingUtilities.delaySuccessMessages.concat(messages);\n\t\t\t}\n\t\t\tafterActionResolution(mParameters, mActionExecutionParameters, actionDefinition);\n\t\t\tresolve(oOperationResult);\n\t\t} catch (e) {\n\t\t\treject(e);\n\t\t} finally {\n\t\t\tif (\n\t\t\t\tstrictHandlingUtilities &&\n\t\t\t\tstrictHandlingUtilities.is412Executed &&\n\t\t\t\tstrictHandlingUtilities.strictHandlingTransitionFails.length &&\n\t\t\t\tmParameters.aContexts!.length > 1\n\t\t\t) {\n\t\t\t\ttry {\n\t\t\t\t\tconst strictHandlingFails = strictHandlingUtilities.strictHandlingTransitionFails;\n\t\t\t\t\tconst aFailedContexts = [] as ODataV4Context[];\n\t\t\t\t\tstrictHandlingFails.forEach(function (fail: { oAction: ODataContextBinding; groupId: string }): void {\n\t\t\t\t\t\taFailedContexts.push(fail.oAction.getContext() as ODataV4Context);\n\t\t\t\t\t});\n\t\t\t\t\tmActionExecutionParameters.aContexts = aFailedContexts;\n\t\t\t\t\tconst oFailedOperationResult = await new ODataOperation(\n\t\t\t\t\t\tconvertedAction,\n\t\t\t\t\t\tmActionExecutionParameters,\n\t\t\t\t\t\tmParameters.messageHandler,\n\t\t\t\t\t\tstrictHandlingUtilities,\n\t\t\t\t\t\t{ ignoreETag: mParameters.ignoreETag }\n\t\t\t\t\t).execute();\n\t\t\t\t\tstrictHandlingUtilities.strictHandlingTransitionFails = [];\n\t\t\t\t\tMessaging.addMessages(strictHandlingUtilities.delaySuccessMessages);\n\t\t\t\t\tafterActionResolution(mParameters, mActionExecutionParameters, actionDefinition);\n\t\t\t\t\tresolve(oFailedOperationResult);\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet showGenericErrorMessageForChangeSet = false;\n\t\t\tif (\n\t\t\t\t(mParameters.bGrouped && strictHandlingUtilities && strictHandlingUtilities.strictHandlingPromises.length) ||\n\t\t\t\t(mParameters.bGrouped && messageHandling.hasTransitionErrorsOrWarnings())\n\t\t\t) {\n\t\t\t\tshowGenericErrorMessageForChangeSet = true;\n\t\t\t}\n\t\t\tmParameters?.messageHandler\n\t\t\t\t?.showMessageDialog({\n\t\t\t\t\tcontrol: mActionExecutionParameters?.control,\n\t\t\t\t\tonBeforeShowMessage: function (aMessages: Message[], showMessageParametersIn: ShowMessageParameters) {\n\t\t\t\t\t\treturn actionParameterShowMessageCallback(\n\t\t\t\t\t\t\tmActionExecutionParameters,\n\t\t\t\t\t\t\taContexts!,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\taMessages,\n\t\t\t\t\t\t\tshowMessageParametersIn,\n\t\t\t\t\t\t\tshowGenericErrorMessageForChangeSet,\n\t\t\t\t\t\t\toOperationResult.length > 0 && oOperationResult.every((res) => res.status === \"fulfilled\")\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\taSelectedContexts: mParameters.aContexts,\n\t\t\t\t\tsActionName: sActionLabel,\n\t\t\t\t\tentitySet: mParameters.entitySetName,\n\t\t\t\t\tboundActionName: sActionName\n\t\t\t\t})\n\t\t\t\t.then(() => {\n\t\t\t\t\tmParameters.messageHandler.clearStrictWarningMessages();\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\tif (strictHandlingUtilities) {\n\t\t\t\tstrictHandlingUtilities = {\n\t\t\t\t\tis412Executed: false,\n\t\t\t\t\tstrictHandlingTransitionFails: [],\n\t\t\t\t\tstrictHandlingPromises: [],\n\t\t\t\t\tstrictHandlingWarningMessages: [],\n\t\t\t\t\tdelaySuccessMessages: [],\n\t\t\t\t\tprocessedMessageIds: new Set()\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t});\n}\n\n/**\n * Reads a title from custom i18n file.\n * @param oParentControl The view where the action is called\n * @param suffixResourceKey The key of the title\n * @returns Title if defined\n */\nfunction getConfirmTitle(oParentControl: View, suffixResourceKey: string): string | undefined {\n\t// A title only exists if it has been defined in the extension. Otherwise \"Confirmation\"\n\t// is used from the MessageBox control.\n\tconst key = \"C_OPERATIONS_ACTION_CONFIRM_TITLE\";\n\tconst resourceModel = getResourceModel(oParentControl);\n\tconst titleOverrideExists = resourceModel.checkIfResourceKeyExists(`${key}|${suffixResourceKey}`);\n\tif (titleOverrideExists) {\n\t\treturn resourceModel.getText(key, undefined, suffixResourceKey);\n\t}\n}\nasync function confirmCriticalAction(\n\tconvertedAction: EdmAction,\n\tsActionName: string,\n\tmParameters: ShowActionDialogParameters,\n\toParentControl: View,\n\tentitySetName: string | undefined,\n\tmessageHandler: MessageHandler,\n\tstrictHandlingUtilities: StrictHandlingUtilities,\n\tignoreETag?: boolean\n): Promise<PromiseSettledResult<OperationResult>[]> {\n\treturn new Promise((resolve, reject) => {\n\t\tlet boundActionName = sActionName;\n\t\tboundActionName = boundActionName.includes(\".\")\n\t\t\t? boundActionName.split(\".\")[boundActionName.split(\".\").length - 1]\n\t\t\t: boundActionName;\n\t\tconst suffixResourceKey = boundActionName && entitySetName ? `${entitySetName}|${boundActionName}` : \"\";\n\t\tconst resourceModel = getResourceModel(oParentControl);\n\t\tconst sConfirmationText = resourceModel.getText(\"C_OPERATIONS_ACTION_CONFIRM_MESSAGE\", undefined, suffixResourceKey);\n\n\t\tMessageBox.confirm(sConfirmationText, {\n\t\t\ttitle: getConfirmTitle(oParentControl, suffixResourceKey),\n\t\t\tonClose: async function (sAction: string) {\n\t\t\t\tif (sAction === Action.OK) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst oOperation = await new ODataOperation(convertedAction, mParameters, messageHandler, strictHandlingUtilities, {\n\t\t\t\t\t\t\tignoreETag\n\t\t\t\t\t\t}).execute();\n\t\t\t\t\t\tresolve(oOperation);\n\t\t\t\t\t} catch (oError: unknown) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait messageHandler.showMessageDialog();\n\t\t\t\t\t\t\treject(oError);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\treject(oError);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treject(Constants.CancelActionDialog);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\nfunction afterActionResolution(\n\tmParameters: CallActionParameters,\n\tmActionExecutionParameters: ShowActionDialogParameters,\n\tactionDefinition: MetaModelAction\n): void {\n\tif (\n\t\tmActionExecutionParameters.internalModelContext &&\n\t\tmActionExecutionParameters.operationAvailableMap &&\n\t\tmActionExecutionParameters.aContexts &&\n\t\tmActionExecutionParameters.aContexts.length &&\n\t\tactionDefinition.$IsBound\n\t) {\n\t\tlet selectedContexts: ODataV4Context[] = [];\n\t\t//check for skipping static actions\n\t\tconst isStatic = mActionExecutionParameters.isStatic;\n\t\tif (!isStatic) {\n\t\t\tselectedContexts = mActionExecutionParameters.internalModelContext.getProperty(\"selectedContexts\") || [];\n\t\t\tActionRuntime.setActionEnablement(\n\t\t\t\tmActionExecutionParameters.internalModelContext,\n\t\t\t\tJSON.parse(mActionExecutionParameters.operationAvailableMap),\n\t\t\t\tselectedContexts,\n\t\t\t\t\"table\"\n\t\t\t);\n\t\t} else if (mActionExecutionParameters.control) {\n\t\t\tconst control = mActionExecutionParameters.control;\n\t\t\tif (control.isA<Table>(\"sap.ui.mdc.Table\")) {\n\t\t\t\tselectedContexts = control.getSelectedContexts() as ODataV4Context[];\n\t\t\t\tActionRuntime.setActionEnablement(\n\t\t\t\t\tmActionExecutionParameters.internalModelContext,\n\t\t\t\t\tJSON.parse(mActionExecutionParameters.operationAvailableMap),\n\t\t\t\t\tselectedContexts,\n\t\t\t\t\t\"table\"\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t//update delete button\n\t\tDeleteHelper.updateDeleteInfoForSelectedContexts(mActionExecutionParameters.internalModelContext, selectedContexts);\n\t}\n}\n\n/**\n * Filters an array of messages based on various conditions and returns an object containing the filtered messages and other properties.\n * @param messages The messages to filter.\n * @param errorTargetsInAPD Indicates whether error targets are in APD.\n * @param contexts An array of contexts.\n * @param unboundMessages An array of unbound messages.\n * @param control A control object.\n * @param isAPDOPen Indicates whether APD is open.\n * @param showMessageDialog Indicates whether to show the message dialog.\n * @returns An object containing a boolean indicating whether the result contains a bound transition, an array of messages to show, and a boolean indicating whether to show the message in a dialog.\n */\nfunction filterAPDandContextMessages(\n\tmessages: Message[],\n\terrorTargetsInAPD?: boolean,\n\tcontexts?: Context[],\n\tunboundMessages?: Message[],\n\tcontrol?: Control,\n\tisAPDOPen?: boolean,\n\tshowMessageDialog?: boolean\n): { containsBoundTransistion: boolean | undefined; messagesToShow: Message[]; showMessageInDialog?: boolean } {\n\tif (isAPDOPen && errorTargetsInAPD) {\n\t\t/* When APD is open, we need to remove the messages which are related to the objectpage context */\n\t\tmessageHandling.removeContextMessagesfromModel(messages, contexts);\n\t}\n\n\t// Filter out messages which are not related to the action parameter dialog in the edit mode and display mode\n\tlet containsBoundTransistion;\n\tif (!(control && CommonUtils.getIsEditable(control))) {\n\t\tif (isAPDOPen && errorTargetsInAPD) {\n\t\t\tif (unboundMessages?.length === 0) {\n\t\t\t\tcontainsBoundTransistion = false;\n\t\t\t\tshowMessageDialog = false;\n\t\t\t}\n\t\t\tmessages = messageHandling.removeMessagesForActionParameterDialog(messages);\n\t\t}\n\t} else {\n\t\tif (unboundMessages?.length === 0) {\n\t\t\tcontainsBoundTransistion = false;\n\t\t}\n\t\tmessages = messageHandling.removeMessagesForActionParameterDialog(messages);\n\t}\n\treturn {\n\t\tmessagesToShow: messages,\n\t\tcontainsBoundTransistion: containsBoundTransistion,\n\t\tshowMessageInDialog: showMessageDialog\n\t};\n}\n\nfunction actionParameterShowMessageCallback(\n\tmParameters: ShowActionDialogParameters,\n\taContexts: ODataV4Context[],\n\toDialog: Dialog | undefined,\n\tmessages: Message[],\n\tshowMessageParametersIn: ShowMessageParameters,\n\tshowGenericErrorMessageForChangeSet: boolean,\n\tisActionSuccessful?: boolean\n): ShowMessageParameters {\n\tlet showMessageBox = showMessageParametersIn.showMessageBox,\n\t\tshowMessageDialog = showMessageParametersIn.showMessageDialog;\n\tconst oControl = mParameters.control;\n\tconst oResourceBundle = Library.getResourceBundleFor(\"sap.fe.core\")!;\n\tconst unboundMessages = messages.filter(function (message: Message) {\n\t\treturn message.getTargets()?.[0] === \"\";\n\t});\n\tconst APDmessages = messages.filter(function (message) {\n\t\treturn (\n\t\t\tmessage.getTargets &&\n\t\t\tmessage.getTargets()?.[0].includes(mParameters.actionName) &&\n\t\t\tmParameters?.aActionParameters?.some(function (actionParam) {\n\t\t\t\treturn message.getTargets()?.[0].includes(actionParam.name);\n\t\t\t})\n\t\t);\n\t});\n\tAPDmessages?.forEach(function (APDMessage) {\n\t\t(APDMessage as unknown as { isAPDTarget: boolean }).isAPDTarget = true;\n\t});\n\n\tconst errorTargetsInAPD = APDmessages.length ? true : false;\n\t//If Action is successful with warnings, dont show the generic error message for changeset in dialog\n\tif (showGenericErrorMessageForChangeSet && !errorTargetsInAPD && !isActionSuccessful) {\n\t\tconst messageModel = Messaging.getMessageModel();\n\t\tconst messagesInModel = messageModel.getData();\n\t\tconst aBoundMessages = messageHandling.getMessages(true);\n\t\tlet genericMessage;\n\t\tconst isEditable = (oControl && CommonUtils.getIsEditable(oControl)) ?? false;\n\n\t\tconst nonErrorMessageExistsInDialog = messages.findIndex(function (message: Message) {\n\t\t\treturn message.getType() === \"Error\" || message.getType() === \"Warning\";\n\t\t});\n\t\tconst nonErrorMessageExistsInModel = messagesInModel.findIndex(function (message: Message) {\n\t\t\treturn message.getType() === \"Error\" || message.getType() === \"Warning\";\n\t\t});\n\n\t\tif (\n\t\t\tnonErrorMessageExistsInDialog !== 1 &&\n\t\t\tnonErrorMessageExistsInModel !== -1 &&\n\t\t\tmParameters.aContexts &&\n\t\t\tmParameters.aContexts.length > 1\n\t\t) {\n\t\t\tif (messagesInModel.length === 1 && aBoundMessages.length === 1) {\n\t\t\t\tgenericMessage = getGenericMsgForSingleErrorInChangeSet(isEditable, oResourceBundle);\n\t\t\t\tmessages.unshift(genericMessage);\n\t\t\t\tshowMessageBox = true;\n\t\t\t\tshowMessageDialog = false;\n\t\t\t} else {\n\t\t\t\tconst sMessage = oResourceBundle.getText(\"C_COMMON_DIALOG_CANCEL_ERROR_MESSAGES_TEXT\");\n\t\t\t\tconst sDescriptionText = oResourceBundle.getText(\"C_COMMON_DIALOG_CANCEL_ERROR_MESSAGES_DETAIL_TEXT\");\n\t\t\t\tgenericMessage = new Message({\n\t\t\t\t\tmessage: sMessage,\n\t\t\t\t\ttype: MessageType.Error,\n\t\t\t\t\ttarget: \"\",\n\t\t\t\t\tpersistent: true,\n\t\t\t\t\tdescription: sDescriptionText,\n\t\t\t\t\tcode: \"FE_CUSTOM_MESSAGE_CHANGESET_ALL_FAILED\"\n\t\t\t\t});\n\t\t\t\tmessages.unshift(genericMessage);\n\t\t\t\tif (messages.length === 1) {\n\t\t\t\t\tshowMessageBox = true;\n\t\t\t\t\tshowMessageDialog = false;\n\t\t\t\t} else {\n\t\t\t\t\tshowMessageDialog = true;\n\t\t\t\t\tshowMessageBox = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (oDialog && oDialog.isOpen() && aContexts.length !== 0 && !mParameters.isStatic) {\n\t\tif (!mParameters.bGrouped) {\n\t\t\t//isolated\n\t\t\tif (aContexts.length > 1 || !errorTargetsInAPD) {\n\t\t\t\t// does not matter if error is in APD or not, if there are multiple contexts selected or if the error is not the APD, we close it.\n\t\t\t\t// TODO: Dilaog handling should not be part of message handling. Refactor accordingly - dialog should not be needed inside this method - neither\n\t\t\t\t// to ask whether it's open, nor to close/destroy it!\n\t\t\t\toDialog.close();\n\t\t\t\toDialog.destroy();\n\t\t\t}\n\t\t} else if (!errorTargetsInAPD) {\n\t\t\t//changeset\n\t\t\toDialog.close();\n\t\t\toDialog.destroy();\n\t\t}\n\t}\n\tconst filteredMessages: Message[] = [];\n\tconst bIsAPDOpen = oDialog && oDialog.isOpen();\n\n\tconst { messagesToShow, containsBoundTransistion, showMessageInDialog } = filterAPDandContextMessages(\n\t\tmessages,\n\t\terrorTargetsInAPD,\n\t\taContexts,\n\t\tunboundMessages,\n\t\toControl,\n\t\tbIsAPDOpen\n\t);\n\tmessages = messagesToShow;\n\tshowMessageDialog = showMessageInDialog ?? showMessageDialog;\n\n\tif (!bIsAPDOpen && errorTargetsInAPD && !mParameters.bGrouped) {\n\t\t// If APD is not open and there are messages related to APD, then show in the message dialog. since\n\t\tshowMessageDialog = true;\n\t\tmessages = messages.concat(APDmessages);\n\t}\n\n\tlet fnGetMessageSubtitle;\n\tif (oControl && oControl.isA<Table>(\"sap.ui.mdc.Table\")) {\n\t\tfnGetMessageSubtitle = messageHandling.setMessageSubtitle.bind({}, oControl, aContexts);\n\t}\n\treturn {\n\t\tshowMessageBox: showMessageBox,\n\t\tshowMessageDialog: showMessageDialog,\n\t\tfilteredMessages: filteredMessages.length ? filteredMessages : messages,\n\t\tfnGetMessageSubtitle: fnGetMessageSubtitle,\n\t\tshowChangeSetErrorDialog: mParameters.bGrouped,\n\t\tcontainsBoundTransistion: containsBoundTransistion\n\t};\n}\n\nfunction _valuesProvidedForAllMandatoryParameters(\n\tisCreateAction: boolean,\n\tactionParameters: EdmActionParameter[],\n\tparameterValues?: Record<string, unknown>[],\n\tstartupParameters?: Record<string, unknown>\n): boolean {\n\tconst hiddenAnnotationSetOnAllActions = actionParameters.every((parameter) => parameter?.annotations?.UI?.Hidden?.valueOf() === true);\n\n\tif (parameterValues?.length && !hiddenAnnotationSetOnAllActions) {\n\t\t// If showDialog is false but there are parameters from the invokeAction call which need to be checked on existance\n\t\tfor (const actionParameter of actionParameters) {\n\t\t\tif (\n\t\t\t\tactionParameter.name !== \"ResultIsActiveEntity\" &&\n\t\t\t\t!parameterValues?.find((element) => element.name === actionParameter.name)\n\t\t\t) {\n\t\t\t\t// At least for one parameter no value has been provided, so we can't skip the dialog\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (isCreateAction && startupParameters?.length && !hiddenAnnotationSetOnAllActions) {\n\t\t// If parameters have been provided during application launch, we need to check if the set is complete\n\t\t// If not, the parameter dialog still needs to be shown.\n\t\tfor (const actionParameter of actionParameters) {\n\t\t\tif (startupParameters && !startupParameters[actionParameter.name]) {\n\t\t\t\t// At least for one parameter no value has been provided, so we can't skip the dialog\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (actionParameters.length && hiddenAnnotationSetOnAllActions) {\n\t\treturn actionParameters.every(function (parameter) {\n\t\t\tconst fieldControl = parameter.annotations?.Common?.FieldControl;\n\t\t\tconst isMandatory = fieldControl?.toString() === \"Common.FieldControlType/Mandatory\";\n\n\t\t\t// Possible sources may be startupParameters, parameterValues, defaultValues per annotation (ParameterDefaultValue)\n\t\t\t// If none is found, return false\n\t\t\treturn (\n\t\t\t\t!isMandatory ||\n\t\t\t\t(startupParameters && startupParameters[parameter.name]) ||\n\t\t\t\tparameterValues?.find((parameterValue) => parameterValue.name === parameter.name) ||\n\t\t\t\tparameter?.annotations?.UI?.ParameterDefaultValue?.valueOf()\n\t\t\t);\n\t\t});\n\t}\n\n\treturn true;\n}\n\nfunction getGenericMsgForSingleErrorInChangeSet(isEditable: boolean, resourceBundle: ResourceBundle): MessageWithHeader {\n\tconst message = isEditable\n\t\t? resourceBundle.getText(\"C_COMMON_DIALOG_CANCEL_SINGLE_ERROR_MESSAGE_TEXT_EDIT\")\n\t\t: resourceBundle.getText(\"C_COMMON_DIALOG_CANCEL_SINGLE_ERROR_MESSAGE_TEXT\");\n\treturn new Message({\n\t\tmessage,\n\t\ttype: MessageType.Error,\n\t\ttarget: \"\",\n\t\tpersistent: true,\n\t\tcode: \"FE_CUSTOM_MESSAGE_CHANGESET_ALL_FAILED\",\n\t\ttechnicalDetails: {\n\t\t\tfe: {\n\t\t\t\tchangeSetPreTextForSingleError: message\n\t\t\t}\n\t\t}\n\t});\n}\n\n/**\n * Static functions to call OData actions (bound/import) and functions (bound/import)\n * @namespace\n * @experimental This module is only for experimental use! <br/><b>This is only a POC and maybe deleted</b>\n * @since 1.56.0\n */\nconst operations = {\n\tcallBoundAction: callBoundAction,\n\tcallActionImport: callActionImport,\n\tcallBoundFunction: callBoundFunction,\n\tcallFunctionImport: callFunctionImport,\n\tvaluesProvidedForAllMandatoryParameters: _valuesProvidedForAllMandatoryParameters,\n\tactionParameterShowMessageCallback: actionParameterShowMessageCallback,\n\tafterActionResolution: afterActionResolution,\n\tcheckParameterTypeAndReturnConvertedValue: checkParameterTypeAndReturnConvertedValue,\n\tgetConfirmTitle: getConfirmTitle\n};\n\nexport default operations;\n"],"mappings":"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","ignoreList":[]}