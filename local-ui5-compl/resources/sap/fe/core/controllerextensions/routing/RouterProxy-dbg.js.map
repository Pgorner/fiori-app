{"version":3,"names":["enumState","EQUAL","COMPATIBLE","ANCESTOR","DIFFERENT","enumURLParams","LAYOUTPARAM","IAPPSTATEPARAM","createGuardFromHash","sGuardHash","_guardHash","replace","check","sHash","indexOf","removeAppStateInHash","RegExp","RouterProxy","_dec","defineUI5Class","_class","_BaseObject","_this","_len","arguments","length","args","Array","_key","call","bIsRebuildHistoryRunning","bIsComputingTitleHierachy","bIsGuardCrossAllowed","sIAppStateKey","_bActivateRouteMatchSynchro","_bApplyRestore","_pathMappings","restoreHistoryTriggered","_inheritsLoose","_proto","prototype","init","oAppComponent","isfclEnabled","getService","then","asyncInit","catch","oError","Log","error","_fnHashGuard","hashGuard","bind","window","addEventListener","_bDisableOnHashChange","_bIgnoreRestore","_bForceFocus","_oShellServices","getShellServices","initRaw","getRouter","waitForRouteMatchBeforeNavigation","history","replaceState","Object","assign","feLevel","state","location","fclEnabled","_fnBlockingNavFilter","_blockingNavigationFilter","registerNavigationFilter","destroy","unregisterNavigationFilter","removeEventListener","setAppStateInHash","sAppStateKey","sNewHash","includes","findAppStateInHash","aAppState","match","getDecodedWindowHash","decodeURI","hash","oRouter","_oRouter","_oManagedHistory","_oNavigationGuard","sCurrentAppHash","getHash","push","_extractStateFromHash","appName","getAppNameFromHash","getFullHash","splitHash","appSpecificRoute","getHashChanger","shellPart","isFocusForced","setFocusForced","bForced","removeIAppStateKey","navToHash","bPreserveHistory","bDisablePreservationCache","bForceFocus","bPreserveShellBackNavigationHandler","setBackNavigation","_oRouteMatchSynchronization","waitFor","undefined","_internalNavToHash","checkHashWithGuard","oResourceBundle","Library","getResourceBundleFor","confirm","getText","Promise","resolve","oNewState","aCurrentHashKeys","_extractEntitySetsFromHash","keys","every","key","index","oHistoryAction","_pushNewState","storeFocusInfoForCurrentHash","_rebuildBrowserHistory","restoreHistory","sTargetHash","checkRestoreHistoryWasTriggered","resetRestoreHistoryFlag","navBack","sCurrentHash","sPreviousHash","i","back","navTo","sRouteName","oParameters","getURL","noPreservationCache","bIsStickyMode","exitFromApp","backToPreviousApp","isCurrentStateImpactedBy","substring","oLocalGuard","isNavigationFinalized","setNavigationGuard","discardNavigationGuard","hasNavigationGuard","isGuardCrossAllowedByUser","activateRouteMatchSynchronization","resolveRouteMatch","Synchronization","sHashNoParams","split","aTokens","names","forEach","sToken","oState","screenMode","aLayout","sLayout","bRebuildOnly","bDisableHistoryPreservation","lastIndex","iPopCount","pop","preserved","oLastRemovedItem","oTopState","_compareCacheStates","sPreviousIAppStateKey","oComparisonStateResult","bHasSameHash","focusControlId","secondaryFocusControlId","focusInfo","secondaryFocusInfo","type","steps","_disableEventOnHashChange","stop","_enableEventOnHashChange","bIgnoreCurrentHash","initialize","that","oTargetState","newLevel","replaceAsync","replaceHash","setTimeout","backReplaceAsync","backAsync","setHash","go","getLastHistoryEntry","setPathMapping","mappings","filter","mapping","oldPath","newPath","currentAppName","find","m","encodeURI","aHashSplit","sAppHash","oState1","oState2","equal","splitAppSpecificRoute","routeSplit","shift","checkIfBackIsOutOfGuard","segments","previousHash","checkIfBackExitsApp","checkIfBackHasSameContext","oCurrentState","oPreviousState","restoreFocusForCurrentHash","currentHash","stateForHash","focusApplied","focusControl","Element","getElementById","getFocusDomRef","getParent","isA","getBusy","focus","getActiveElement","getId","parentTable","preventScroll","getFocusInfo","findLayoutForHash","hashNoParam","targetState","BaseObject"],"sourceRoot":".","sources":["RouterProxy.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport type ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport { defineUI5Class } from \"sap/fe/base/ClassSupport\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport Synchronization from \"sap/fe/core/helpers/Synchronization\";\nimport type { IShellServices } from \"sap/fe/core/services/ShellServicesFactory\";\nimport type MTable from \"sap/m/Table\";\nimport BaseObject from \"sap/ui/base/Object\";\nimport Element from \"sap/ui/core/Element\";\nimport Library from \"sap/ui/core/Lib\";\nimport type Router from \"sap/ui/core/routing/Router\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type UITable from \"sap/ui/table/Table\";\n\nconst enumState = {\n\tEQUAL: 0,\n\tCOMPATIBLE: 1,\n\tANCESTOR: 2,\n\tDIFFERENT: 3\n};\nconst enumURLParams = {\n\tLAYOUTPARAM: \"layout\",\n\tIAPPSTATEPARAM: \"sap-iapp-state\"\n};\n\ntype RouterState = {\n\tkeys: string[];\n\thash: string;\n\tpreserved?: boolean;\n\tsLayout?: string;\n\tscreenMode: number;\n\tfocusControlId?: string;\n\tsecondaryFocusControlId?: string;\n\tfocusInfo?: {\n\t\tpreventScroll?: boolean;\n\t\ttargetInfo?: unknown;\n\t};\n\tsecondaryFocusInfo?: {\n\t\tpreventScroll?: boolean;\n\t};\n};\n\ntype OtherHistoryAction = { type: \"append\" | \"none\" | \"replace\" };\nexport type BackHistoryAction = { type: \"back\" | \"back-replace\"; steps: number };\ntype HystoryAction = BackHistoryAction | OtherHistoryAction;\n\ntype NavigationGuard = { _guardHash: string; check: (hash: string) => boolean };\n/**\n * Creates a HashGuard object.\n * @param sGuardHash The hash used for the guard\n * @returns The created hash guard\n */\nfunction createGuardFromHash(sGuardHash: string): NavigationGuard {\n\treturn {\n\t\t_guardHash: sGuardHash.replace(/\\?[^?]*$/, \"\"), // Remove query part\n\t\tcheck: function (sHash: string): boolean {\n\t\t\treturn sHash.indexOf(this._guardHash) === 0;\n\t\t}\n\t};\n}\n/**\n * Returns a hash without its iAppState part.\n * @param sHash The hash\n * @returns The hash without the iAppState\n */\nfunction removeAppStateInHash(sHash: string): string {\n\treturn sHash.replace(new RegExp(`[&?]*${enumURLParams.IAPPSTATEPARAM}=[^&]*`), \"\");\n}\n\n@defineUI5Class(\"sap.fe.core.RouterProxy\")\nclass RouterProxy extends BaseObject {\n\tbIsRebuildHistoryRunning = false;\n\n\tbIsComputingTitleHierachy = false;\n\n\tbIsGuardCrossAllowed = false;\n\n\tsIAppStateKey: string | null = null;\n\n\t_oShellServices!: IShellServices;\n\n\tfclEnabled!: boolean;\n\n\t_fnBlockingNavFilter!: Function;\n\n\t_fnHashGuard!: (this: Window, popStateEvent: PopStateEvent) => unknown;\n\n\t_bDisableOnHashChange!: boolean;\n\n\t_bIgnoreRestore!: boolean;\n\n\t_bForceFocus!: boolean;\n\n\t_oRouter!: Router;\n\n\t_oManagedHistory!: RouterState[];\n\n\t_oNavigationGuard!: NavigationGuard | null;\n\n\toResourceBundle?: ResourceBundle;\n\n\t_oRouteMatchSynchronization?: Synchronization;\n\n\t_bActivateRouteMatchSynchro = false;\n\n\t_bApplyRestore = false;\n\n\t_pathMappings: { oldPath: string; newPath: string }[] = [];\n\n\trestoreHistoryTriggered = false;\n\n\tappName!: string;\n\n\tinit(oAppComponent: AppComponent, isfclEnabled: boolean): void {\n\t\t// Save the name of the app (including startup parameters) for rebuilding full hashes later\n\t\toAppComponent\n\t\t\t.getService(\"shellServices\")\n\t\t\t.then(() => this.asyncInit(oAppComponent, isfclEnabled))\n\t\t\t.catch(function (oError: unknown) {\n\t\t\t\tLog.error(\"Cannot retrieve the shell services\", oError as string);\n\t\t\t});\n\t\tthis._fnHashGuard = this.hashGuard.bind(this);\n\t\twindow.addEventListener(\"popstate\", this._fnHashGuard);\n\t\tthis._bDisableOnHashChange = false;\n\t\tthis._bIgnoreRestore = false;\n\t\tthis._bForceFocus = true; // Trigger the focus mechanism for the first view displayed by the app\n\t}\n\n\tasyncInit(oAppComponent: AppComponent, isfclEnabled: boolean): void {\n\t\tthis._oShellServices = oAppComponent.getShellServices();\n\n\t\tthis.initRaw(oAppComponent.getRouter());\n\t\t// We want to wait until the initial routeMatched is done before doing any navigation\n\t\tthis.waitForRouteMatchBeforeNavigation();\n\n\t\t// Set feLevel=0 for the first Application page in the history\n\t\thistory.replaceState(\n\t\t\tObject.assign(\n\t\t\t\t{\n\t\t\t\t\tfeLevel: 0\n\t\t\t\t},\n\t\t\t\thistory.state\n\t\t\t),\n\t\t\t\"\",\n\t\t\twindow.location as unknown as string\n\t\t);\n\t\tthis.fclEnabled = isfclEnabled;\n\n\t\tthis._fnBlockingNavFilter = this._blockingNavigationFilter.bind(this);\n\t\tthis._oShellServices.registerNavigationFilter(this._fnBlockingNavFilter);\n\t}\n\n\tdestroy(): void {\n\t\tif (this._oShellServices) {\n\t\t\tthis._oShellServices.unregisterNavigationFilter(this._fnBlockingNavFilter);\n\t\t}\n\t\twindow.removeEventListener(\"popstate\", this._fnHashGuard);\n\t}\n\n\t/**\n\t * Adds an iAppState inside a hash (or replaces an existing one).\n\t * @param sHash The hash\n\t * @param sAppStateKey The iAppState to add\n\t * @returns The hash with the app state\n\t */\n\tsetAppStateInHash(sHash: string, sAppStateKey: string): string {\n\t\tlet sNewHash: string;\n\n\t\tif (sHash.includes(enumURLParams.IAPPSTATEPARAM)) {\n\t\t\t// If there's already an iAppState parameter in the hash, replace it\n\t\t\tsNewHash = sHash.replace(\n\t\t\t\tnew RegExp(`${enumURLParams.IAPPSTATEPARAM}=[^&]*`),\n\t\t\t\t`${enumURLParams.IAPPSTATEPARAM}=${sAppStateKey}`\n\t\t\t);\n\t\t} else {\n\t\t\t// Add the iAppState parameter in the hash\n\t\t\tif (!sHash.includes(\"?\")) {\n\t\t\t\tsNewHash = `${sHash}?`;\n\t\t\t} else {\n\t\t\t\tsNewHash = `${sHash}&`;\n\t\t\t}\n\t\t\tsNewHash += `${enumURLParams.IAPPSTATEPARAM}=${sAppStateKey}`;\n\t\t}\n\n\t\treturn sNewHash;\n\t}\n\n\t/**\n\t * Returns the iAppState part from a hash (or null if not found).\n\t * @param sHash The hash\n\t * @returns The iAppState part of the hash\n\t */\n\tfindAppStateInHash(sHash: string): string | null {\n\t\tconst aAppState = sHash.match(new RegExp(`\\\\?.*${enumURLParams.IAPPSTATEPARAM}=([^&]*)`));\n\t\treturn aAppState && aAppState.length > 1 ? aAppState[1] : null;\n\t}\n\n\tprivate getDecodedWindowHash(): string {\n\t\treturn decodeURI(window.location.hash);\n\t}\n\n\t/**\n\t * Raw initialization (for unit tests).\n\t * @param oRouter The router used by this proxy\n\t */\n\tinitRaw(oRouter: Router): void {\n\t\tthis._oRouter = oRouter;\n\t\tthis._oManagedHistory = [];\n\t\tthis._oNavigationGuard = null;\n\n\t\tconst sCurrentAppHash = this.getHash();\n\t\tthis._oManagedHistory.push(this._extractStateFromHash(sCurrentAppHash));\n\n\t\tthis.appName = this.getAppNameFromHash(this.getDecodedWindowHash());\n\n\t\t// Set the iAppState if the initial hash contains one\n\t\tthis.sIAppStateKey = this.findAppStateInHash(sCurrentAppHash);\n\t}\n\n\t/**\n\t * Return the full app-specific hash part from window.location.hash.\n\t *\n\t * Compared to {@link getHash} this function includes sub-routes of nested components.\n\t * @returns The app-specific hash part (i.e., without the shell part), or an empty string if there is none.\n\t */\n\tgetFullHash(): string {\n\t\tconst splitHash = this._oShellServices.splitHash(this.getDecodedWindowHash());\n\n\t\tif (\"appSpecificRoute\" in splitHash) {\n\t\t\treturn splitHash.appSpecificRoute?.replace(/^&\\//, \"\") ?? \"\"; // remove the leading \"&/\"\n\t\t}\n\t\treturn \"\";\n\t}\n\n\tgetHash(): string {\n\t\treturn this._oRouter.getHashChanger().getHash() ?? \"\";\n\t}\n\n\tprotected getAppNameFromHash(hash: string): string {\n\t\tconst splitHash = this._oShellServices?.splitHash(hash) as { shellPart: string; appSpecificRoute: string } | undefined;\n\t\treturn splitHash?.shellPart ?? \"\";\n\t}\n\n\tisFocusForced(): boolean {\n\t\treturn this._bForceFocus;\n\t}\n\n\tsetFocusForced(bForced: boolean): void {\n\t\tthis._bForceFocus = bForced;\n\t}\n\n\t/**\n\t * Resets the internal variable sIAppStateKey.\n\t *\n\t */\n\tremoveIAppStateKey(): void {\n\t\tthis.sIAppStateKey = null;\n\t}\n\n\t/**\n\t * Navigates to a specific hash.\n\t * @param sHash Hash to be navigated to\n\t * @param bPreserveHistory If set to true, non-ancestor entries in history will be retained\n\t * @param bDisablePreservationCache If set to true, cache preservation mechanism is disabled for the current navigation\n\t * @param bForceFocus If set to true, the logic to set the focus once the navigation is finalized will be triggered (onPageReady)\n\t * @param bPreserveShellBackNavigationHandler If not set to false, the back navigation is set to undefined\n\t * @returns Promise (resolved when the navigation is finalized) that returns 'true' if a navigation took place, 'false' if the navigation didn't happen\n\t */\n\tasync navToHash(\n\t\tsHash: string,\n\t\tbPreserveHistory?: boolean,\n\t\tbDisablePreservationCache?: boolean,\n\t\tbForceFocus?: boolean,\n\t\tbPreserveShellBackNavigationHandler?: boolean\n\t): Promise<boolean> {\n\t\tif (bPreserveShellBackNavigationHandler !== false) {\n\t\t\tawait this._oShellServices.setBackNavigation();\n\t\t}\n\t\tif (this._oRouteMatchSynchronization) {\n\t\t\treturn this._oRouteMatchSynchronization.waitFor().then(async () => {\n\t\t\t\tthis._oRouteMatchSynchronization = undefined;\n\t\t\t\treturn this._internalNavToHash(sHash, bPreserveHistory, bDisablePreservationCache, bForceFocus);\n\t\t\t});\n\t\t} else {\n\t\t\tif (this._bActivateRouteMatchSynchro) {\n\t\t\t\tthis.waitForRouteMatchBeforeNavigation();\n\t\t\t}\n\t\t\treturn this._internalNavToHash(sHash, bPreserveHistory, bDisablePreservationCache, bForceFocus);\n\t\t}\n\t}\n\n\tasync _internalNavToHash(\n\t\tsHash: string,\n\t\tbPreserveHistory?: boolean,\n\t\tbDisablePreservationCache?: boolean,\n\t\tbForceFocus?: boolean\n\t): Promise<boolean> {\n\t\t// Add the app state in the hash if needed\n\t\tif (this.fclEnabled && this.sIAppStateKey && !this.findAppStateInHash(sHash)) {\n\t\t\tsHash = this.setAppStateInHash(sHash, this.sIAppStateKey);\n\t\t}\n\n\t\tif (!this.checkHashWithGuard(sHash)) {\n\t\t\tif (!this.oResourceBundle) {\n\t\t\t\tthis.oResourceBundle = Library.getResourceBundleFor(\"sap.fe.core\")!;\n\t\t\t}\n\n\t\t\t// We have to use a confirm here for UI consistency reasons, as with some scenarios\n\t\t\t// in the EditFlow we rely on a UI5 mechanism that displays a confirm dialog.\n\t\t\t// eslint-disable-next-line no-alert\n\t\t\tif (!confirm(this.oResourceBundle.getText(\"C_ROUTER_PROXY_SAPFE_EXIT_NOTSAVED_MESSAGE\"))) {\n\t\t\t\t// The user clicked on Cancel --> cancel navigation\n\t\t\t\treturn Promise.resolve(false);\n\t\t\t}\n\t\t\tthis.bIsGuardCrossAllowed = true;\n\t\t}\n\n\t\t// In case the navigation will cause a new view to be displayed, we force the focus\n\t\t// I.e. if the keys for the hash we're navigating to is a superset of the current hash keys.\n\t\tconst oNewState = this._extractStateFromHash(sHash);\n\t\tif (!this._bForceFocus) {\n\t\t\t// If the focus was already forced, keep it\n\t\t\tconst aCurrentHashKeys = this._extractEntitySetsFromHash(this.getHash());\n\t\t\tthis._bForceFocus =\n\t\t\t\tbForceFocus ||\n\t\t\t\t(aCurrentHashKeys.length < oNewState.keys.length &&\n\t\t\t\t\taCurrentHashKeys.every(function (key: string, index: number) {\n\t\t\t\t\t\treturn key === oNewState.keys[index];\n\t\t\t\t\t}));\n\t\t}\n\n\t\tconst oHistoryAction = this._pushNewState(oNewState, false, bPreserveHistory, bDisablePreservationCache);\n\t\tthis.storeFocusInfoForCurrentHash();\n\n\t\treturn this._rebuildBrowserHistory(oHistoryAction, false);\n\t}\n\n\t/**\n\t * Clears browser history if entries have been added without using the RouterProxy.\n\t * Updates the internal history accordingly.\n\t * @returns Promise that is resolved once the history is rebuilt\n\t */\n\tasync restoreHistory(): Promise<void | boolean> {\n\t\tif (this._bApplyRestore) {\n\t\t\tthis._bApplyRestore = false;\n\t\t\tlet sTargetHash = this.getHash();\n\t\t\tsTargetHash = sTargetHash.replace(/(\\?|&)restoreHistory=true/, \"\");\n\t\t\tconst oNewState = this._extractStateFromHash(sTargetHash);\n\n\t\t\tconst oHistoryAction = this._pushNewState(oNewState, true, false, true);\n\n\t\t\tthis.restoreHistoryTriggered = true;\n\t\t\treturn this._rebuildBrowserHistory(oHistoryAction, true);\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t * Checks if RestoreHistory has been triggered on the RouterProxy.\n\t * @returns True if it has been triggered\n\t */\n\tcheckRestoreHistoryWasTriggered(): boolean {\n\t\treturn this.restoreHistoryTriggered;\n\t}\n\n\t/**\n\t * Resets the flag that says if RestoreHistory has been triggered on the RouterProxy.\n\t */\n\tresetRestoreHistoryFlag(): void {\n\t\tthis.restoreHistoryTriggered = false;\n\t}\n\n\t/**\n\t * Navigates back in the history.\n\t * @returns Promise that is resolved when the navigation is finalized\n\t */\n\tasync navBack(): Promise<void | boolean> {\n\t\tconst sCurrentHash = this.getHash();\n\t\tlet sPreviousHash;\n\n\t\t// Look for the current hash in the managed history\n\t\tfor (let i = this._oManagedHistory.length - 1; i > 0; i--) {\n\t\t\tif (this._oManagedHistory[i].hash === sCurrentHash) {\n\t\t\t\tsPreviousHash = this._oManagedHistory[i - 1].hash;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (sPreviousHash) {\n\t\t\treturn this.navToHash(sPreviousHash);\n\t\t} else {\n\t\t\t// We couldn't find a previous hash in history\n\t\t\t// This can happen when navigating from a transient hash in a create app, and\n\t\t\t// in that case history.back would go back to the FLP\n\t\t\twindow.history.back();\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t * Navigates to a route with parameters.\n\t * @param sRouteName The route name to be navigated to\n\t * @param oParameters Parameters for the navigation\n\t * @param oParameters.noPreservationCache\n\t * @param oParameters.bIsStickyMode\n\t * @returns Promise that is resolved when the navigation is finalized\n\t */\n\tasync navTo(sRouteName: string, oParameters?: { noPreservationCache?: boolean; bIsStickyMode?: boolean }): Promise<boolean> {\n\t\tconst sHash = this._oRouter.getURL(sRouteName, oParameters);\n\t\treturn this.navToHash(sHash!, false, oParameters?.noPreservationCache, false, !oParameters?.bIsStickyMode);\n\t}\n\n\t/**\n\t * Exits the current app by navigating back\n\t * to the previous app (if any) or the FLP.\n\t * @returns Promise that is resolved when we exit the app\n\t */\n\texitFromApp(): void {\n\t\treturn this._oShellServices.backToPreviousApp();\n\t}\n\n\t/**\n\t * Checks whether a given hash can have an impact on the current state\n\t * i.e. if the hash is equal, compatible or an ancestor of the current state.\n\t * @param sHash `true` if there is an impact\n\t * @returns If there is an impact\n\t */\n\tisCurrentStateImpactedBy(sHash: string): boolean {\n\t\tif (sHash[0] === \"/\") {\n\t\t\tsHash = sHash.substring(1);\n\t\t}\n\t\tconst oLocalGuard = createGuardFromHash(sHash);\n\t\treturn oLocalGuard.check(this.getHash());\n\t}\n\n\t/**\n\t * Checks if a navigation is currently being processed.\n\t * @returns `false` if a navigation has been triggered in the RouterProxy and is not yet finalized\n\t */\n\tisNavigationFinalized(): boolean {\n\t\treturn !this.bIsRebuildHistoryRunning;\n\t}\n\n\t/**\n\t * Sets the last state as a guard.\n\t * Each future navigation will be checked against this guard, and a confirmation dialog will\n\t * be displayed before the navigation crosses the guard (i.e. goes to an ancestor of the guard).\n\t * @param sHash The hash for the guard\n\t */\n\tsetNavigationGuard(sHash: string): void {\n\t\tthis._oNavigationGuard = createGuardFromHash(sHash);\n\t\tthis.bIsGuardCrossAllowed = false;\n\t}\n\n\t/**\n\t * Disables the navigation guard.\n\t */\n\tdiscardNavigationGuard(): void {\n\t\tthis._oNavigationGuard = null;\n\t}\n\n\t/**\n\t * Checks for the availability of the navigation guard.\n\t * @returns `true` if navigating guard is available\n\t */\n\thasNavigationGuard(): boolean {\n\t\treturn this._oNavigationGuard !== null;\n\t}\n\n\t/**\n\t * Tests a hash against the navigation guard.\n\t * @param sHash The hash to be tested\n\t * @returns `true` if navigating to the hash doesn't cross the guard\n\t */\n\tcheckHashWithGuard(sHash: string): boolean {\n\t\treturn this._oNavigationGuard === null || this._oNavigationGuard.check(sHash);\n\t}\n\n\t/**\n\t * Checks if the user allowed the navigation guard to be crossed.\n\t * @returns `true` if crossing the guard has been allowed by the user\n\t */\n\tisGuardCrossAllowedByUser(): boolean {\n\t\treturn this.bIsGuardCrossAllowed;\n\t}\n\n\t/**\n\t * Activates the synchronization for routeMatchedEvent.\n\t * The next NavToHash call will create a Synchronization object that will be resolved\n\t * by the corresponding onRouteMatched event, preventing another NavToHash to happen in parallel.\n\t */\n\tactivateRouteMatchSynchronization(): void {\n\t\tthis._bActivateRouteMatchSynchro = true;\n\t}\n\n\t/**\n\t * Resolve the routeMatch synchronization object, unlocking potential pending NavToHash calls.\n\t */\n\tresolveRouteMatch(): void {\n\t\tif (this._oRouteMatchSynchronization) {\n\t\t\tthis._oRouteMatchSynchronization.resolve();\n\t\t}\n\t}\n\n\t/**\n\t * Makes sure no navigation can happen before a routeMatch happened.\n\t */\n\twaitForRouteMatchBeforeNavigation(): void {\n\t\tthis._oRouteMatchSynchronization = new Synchronization();\n\t\tthis._bActivateRouteMatchSynchro = false;\n\t}\n\n\t_extractEntitySetsFromHash(sHash: string | undefined): string[] {\n\t\tif (sHash === undefined) {\n\t\t\tsHash = \"\";\n\t\t}\n\t\tconst sHashNoParams = sHash.split(\"?\")[0]; // remove params\n\t\tconst aTokens = sHashNoParams.split(\"/\");\n\t\tconst names: string[] = [];\n\n\t\taTokens.forEach((sToken) => {\n\t\t\tif (sToken.length) {\n\t\t\t\tnames.push(sToken.split(\"(\")[0]);\n\t\t\t}\n\t\t});\n\n\t\treturn names;\n\t}\n\n\t/**\n\t * Builds a state from a hash.\n\t * @param sHash The hash to be used as entry\n\t * @returns The state\n\t */\n\t_extractStateFromHash(sHash: string): RouterState {\n\t\tif (sHash === undefined) {\n\t\t\tsHash = \"\";\n\t\t}\n\n\t\tconst oState: RouterState = {\n\t\t\tkeys: this._extractEntitySetsFromHash(sHash),\n\t\t\thash: sHash,\n\t\t\tscreenMode: 0 // will be updated in a sec\n\t\t};\n\n\t\t// Retrieve layout (if any)\n\t\tconst aLayout = sHash.match(new RegExp(`\\\\?.*${enumURLParams.LAYOUTPARAM}=([^&]*)`));\n\t\toState.sLayout = aLayout && aLayout.length > 1 ? aLayout[1] : undefined;\n\t\tif (oState.sLayout === \"MidColumnFullScreen\") {\n\t\t\toState.screenMode = 1;\n\t\t} else if (oState.sLayout === \"EndColumnFullScreen\") {\n\t\t\toState.screenMode = 2;\n\t\t} else {\n\t\t\toState.screenMode = 0;\n\t\t}\n\t\treturn oState;\n\t}\n\n\t/**\n\t * Adds a new state into the internal history structure.\n\t * Makes sure this new state is added after an ancestor.\n\t * Also sets the iAppState key in the whole history.\n\t * @param oNewState The new state to be added\n\t * @param bRebuildOnly `true` if we're rebuilding the history after a shell menu navigation\n\t * @param bPreserveHistory If set to true, non-ancestor entries in history will be retained\n\t * @param bDisableHistoryPreservation Disable the mechanism to retained marked entries in cache\n\t * @returns The new state\n\t * @final\n\t */\n\t_pushNewState(\n\t\toNewState: RouterState,\n\t\tbRebuildOnly: boolean,\n\t\tbPreserveHistory?: boolean,\n\t\tbDisableHistoryPreservation?: boolean\n\t): HystoryAction {\n\t\tconst sCurrentHash = this.getHash();\n\t\tlet lastIndex = this._oManagedHistory.length - 1;\n\t\tlet iPopCount = bRebuildOnly ? 1 : 0;\n\n\t\t// 1. Do some cleanup in the managed history : in case the user has navigated back in the browser history, we need to remove\n\t\t// the states ahead in history and make sure the top state corresponds to the current page\n\t\t// We don't do that when restoring the history, as the current state has been added on top of the browser history\n\t\t// and is not reflected in the managed history\n\t\tif (!bRebuildOnly) {\n\t\t\twhile (lastIndex >= 0 && this._oManagedHistory[lastIndex].hash !== sCurrentHash) {\n\t\t\t\tthis._oManagedHistory.pop();\n\t\t\t\tlastIndex--;\n\t\t\t}\n\n\t\t\tif (this._oManagedHistory.length === 0) {\n\t\t\t\t// We couldn't find the current location in the history. This can happen if a browser reload\n\t\t\t\t// happened, causing a reinitialization of the managed history.\n\t\t\t\t// In that case, we use the current location as the new starting point in the managed history\n\t\t\t\tthis._oManagedHistory.push(this._extractStateFromHash(sCurrentHash));\n\t\t\t\thistory.replaceState(Object.assign({ feLevel: 0 }, history.state), \"\");\n\t\t\t}\n\t\t}\n\n\t\t// 2. Mark the top state as preserved if required\n\t\tif (bPreserveHistory && !bDisableHistoryPreservation) {\n\t\t\tthis._oManagedHistory[this._oManagedHistory.length - 1].preserved = true;\n\t\t}\n\n\t\t// 3. Then pop all states until we find an ancestor of the new state, or we find a state that need to be preserved\n\t\tlet oLastRemovedItem;\n\t\twhile (this._oManagedHistory.length > 0) {\n\t\t\tconst oTopState = this._oManagedHistory[this._oManagedHistory.length - 1];\n\t\t\tif (\n\t\t\t\t(bDisableHistoryPreservation || !oTopState.preserved) &&\n\t\t\t\tthis._compareCacheStates(oTopState, oNewState) !== enumState.ANCESTOR\n\t\t\t) {\n\t\t\t\t// The top state is not an ancestor of oNewState and is not preserved --> we can pop it\n\t\t\t\toLastRemovedItem = this._oManagedHistory.pop();\n\t\t\t\tiPopCount++;\n\t\t\t} else if (oTopState.preserved && removeAppStateInHash(oTopState.hash) === removeAppStateInHash(oNewState.hash)) {\n\t\t\t\t// We try to add a state that is already in cache (due to preserved flag) but with a different iapp-state\n\t\t\t\t// --> we should delete the previous entry (it will be later replaced by the new one) and stop popping\n\t\t\t\toLastRemovedItem = this._oManagedHistory.pop();\n\t\t\t\tiPopCount++;\n\t\t\t\toNewState.preserved = true;\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tbreak; // Ancestor or preserved state found --> we stop popping out states\n\t\t\t}\n\t\t}\n\n\t\t// 4. iAppState management\n\t\tthis.sIAppStateKey = this.findAppStateInHash(oNewState.hash);\n\t\tif (!this.fclEnabled && oLastRemovedItem) {\n\t\t\tconst sPreviousIAppStateKey = this.findAppStateInHash(oLastRemovedItem.hash);\n\t\t\tconst oComparisonStateResult = this._compareCacheStates(oLastRemovedItem, oNewState);\n\t\t\t// if current state doesn't contain a i-appstate and this state should replace a state containing a iAppState\n\t\t\t// then the previous iAppState is preserved\n\t\t\tif (\n\t\t\t\t!this.sIAppStateKey &&\n\t\t\t\tsPreviousIAppStateKey &&\n\t\t\t\t(oComparisonStateResult === enumState.EQUAL || oComparisonStateResult === enumState.COMPATIBLE)\n\t\t\t) {\n\t\t\t\toNewState.hash = this.setAppStateInHash(oNewState.hash, sPreviousIAppStateKey);\n\t\t\t}\n\t\t}\n\n\t\t// 5. Now we can push the state at the top of the internal history\n\t\tconst bHasSameHash = oLastRemovedItem && oNewState.hash === oLastRemovedItem.hash;\n\t\tif (this._oManagedHistory.length === 0 || this._oManagedHistory[this._oManagedHistory.length - 1].hash !== oNewState.hash) {\n\t\t\tthis._oManagedHistory.push(oNewState);\n\t\t\tif (oLastRemovedItem && removeAppStateInHash(oLastRemovedItem.hash) === removeAppStateInHash(oNewState.hash)) {\n\t\t\t\toNewState.focusControlId = oLastRemovedItem.focusControlId;\n\t\t\t\toNewState.secondaryFocusControlId = oLastRemovedItem.secondaryFocusControlId;\n\t\t\t\toNewState.focusInfo = oLastRemovedItem.focusInfo;\n\t\t\t\toNewState.secondaryFocusInfo = oLastRemovedItem.secondaryFocusInfo;\n\t\t\t}\n\t\t}\n\n\t\t// 6. Determine which actions to do on the history\n\t\tif (iPopCount === 0) {\n\t\t\t// No state was popped --> append\n\t\t\treturn { type: \"append\" };\n\t\t} else if (iPopCount === 1) {\n\t\t\t// Only 1 state was popped --> replace current hash unless hash is the same (then nothing to do)\n\t\t\treturn bHasSameHash ? { type: \"none\" } : { type: \"replace\" };\n\t\t} else {\n\t\t\t// More than 1 state was popped --> go bakc in history and replace hash if necessary\n\t\t\treturn bHasSameHash ? { type: \"back\", steps: iPopCount - 1 } : { type: \"back-replace\", steps: iPopCount - 1 };\n\t\t}\n\t}\n\n\t_blockingNavigationFilter(): \"Custom\" | \"Continue\" {\n\t\treturn this._bDisableOnHashChange ? \"Custom\" : \"Continue\";\n\t}\n\n\t/**\n\t * Disable the routing by calling the router stop method.\n\t * @final\n\t */\n\t_disableEventOnHashChange(): void {\n\t\tthis._bDisableOnHashChange = true;\n\t\tthis._oRouter.stop();\n\t}\n\n\t/**\n\t * Enable the routing by calling the router initialize method.\n\t * @param [bIgnoreCurrentHash] Ignore the last hash event triggered before the router has initialized\n\t * @final\n\t */\n\t_enableEventOnHashChange(bIgnoreCurrentHash: boolean | undefined): void {\n\t\tthis._bDisableOnHashChange = false;\n\t\tthis._oRouter.initialize(bIgnoreCurrentHash);\n\t}\n\n\t/**\n\t * Synchronizes the browser history with the internal history of the routerProxy, and triggers a navigation if needed.\n\t * @param oHistoryAction Specifies the navigation action to be performed\n\t * @param bRebuildOnly `true` if internal history is currently being rebuilt\n\t * @returns Promise (resolved when the navigation is finalized) that returns 'true' if a navigation took place, 'false' if the navigation didn't happen\n\t * @final\n\t */\n\tasync _rebuildBrowserHistory(oHistoryAction: HystoryAction, bRebuildOnly: boolean): Promise<boolean> {\n\t\t// eslint-disable-next-line @typescript-eslint/no-this-alias\n\t\tconst that = this;\n\t\treturn new Promise((resolve) => {\n\t\t\tthis.bIsRebuildHistoryRunning = true;\n\t\t\tconst oTargetState = this._oManagedHistory[this._oManagedHistory.length - 1],\n\t\t\t\tnewLevel = this._oManagedHistory.length - 1;\n\n\t\t\tfunction replaceAsync(): void {\n\t\t\t\tif (!bRebuildOnly) {\n\t\t\t\t\tthat._enableEventOnHashChange(true);\n\t\t\t\t}\n\n\t\t\t\t(that._oRouter.getHashChanger().replaceHash as Function)(oTargetState.hash);\n\t\t\t\thistory.replaceState(Object.assign({ feLevel: newLevel }, history.state), \"\");\n\n\t\t\t\tif (bRebuildOnly) {\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t// Timeout to let 'hashchange' event be processed before by the HashChanger, so that\n\t\t\t\t\t\t// onRouteMatched notification isn't raised\n\t\t\t\t\t\tthat._enableEventOnHashChange(true);\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\n\t\t\t\tthat.bIsRebuildHistoryRunning = false;\n\t\t\t\tresolve(true); // a navigation occurred\n\t\t\t}\n\n\t\t\t// Async callbacks when navigating back, in order to let all notifications and events get processed\n\t\t\tfunction backReplaceAsync(): void {\n\t\t\t\twindow.removeEventListener(\"popstate\", backReplaceAsync);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t// Timeout to let 'hashchange' event be processed before by the HashChanger\n\t\t\t\t\treplaceAsync();\n\t\t\t\t}, 0);\n\t\t\t}\n\n\t\t\tfunction backAsync(): void {\n\t\t\t\twindow.removeEventListener(\"popstate\", backAsync);\n\t\t\t\tthat.bIsRebuildHistoryRunning = false;\n\t\t\t\tresolve(true); // a navigation occurred\n\t\t\t}\n\n\t\t\tthat._bIgnoreRestore = true;\n\n\t\t\tswitch (oHistoryAction.type) {\n\t\t\t\tcase \"replace\":\n\t\t\t\t\tconst focusInfo = history.state?.focusInfo;\n\t\t\t\t\t(that._oRouter.getHashChanger().replaceHash as Function)(oTargetState.hash);\n\t\t\t\t\thistory.replaceState(\n\t\t\t\t\t\tObject.assign(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfeLevel: newLevel,\n\t\t\t\t\t\t\t\tfocusInfo: focusInfo\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\thistory.state\n\t\t\t\t\t\t),\n\t\t\t\t\t\t\"\"\n\t\t\t\t\t);\n\t\t\t\t\tthat.bIsRebuildHistoryRunning = false;\n\t\t\t\t\tresolve(true); // a navigation occurred\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"append\":\n\t\t\t\t\tthat._oRouter.getHashChanger().setHash(oTargetState.hash);\n\t\t\t\t\thistory.replaceState(Object.assign({ feLevel: newLevel }, history.state), \"\");\n\t\t\t\t\tthat.bIsRebuildHistoryRunning = false;\n\t\t\t\t\tresolve(true); // a navigation occurred\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"back\":\n\t\t\t\t\twindow.addEventListener(\"popstate\", backAsync);\n\t\t\t\t\thistory.go(-oHistoryAction.steps);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"back-replace\":\n\t\t\t\t\tthis._disableEventOnHashChange();\n\t\t\t\t\twindow.addEventListener(\"popstate\", backReplaceAsync);\n\t\t\t\t\thistory.go(-oHistoryAction.steps);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\t// No navigation\n\t\t\t\t\tthis.bIsRebuildHistoryRunning = false;\n\t\t\t\t\tresolve(false); // no navigation --> resolve to false\n\t\t\t}\n\t\t});\n\t}\n\n\tgetLastHistoryEntry(): RouterState {\n\t\treturn this._oManagedHistory[this._oManagedHistory.length - 1];\n\t}\n\n\tsetPathMapping(mappings: { oldPath: string; newPath: string }[]): void {\n\t\tthis._pathMappings = mappings.filter((mapping) => {\n\t\t\treturn mapping.oldPath !== mapping.newPath;\n\t\t});\n\t}\n\n\thashGuard(): void {\n\t\tlet sHash = this.getDecodedWindowHash();\n\t\tconst currentAppName = this.getAppNameFromHash(sHash);\n\t\tif (currentAppName != this.appName) {\n\t\t\t// When doing external navigation in another window, the current window location is temporarily modified with the URL of the target app\n\t\t\t// In this case, we don't want to update the internally managed history, so we simply do nothing\n\t\t\treturn;\n\t\t}\n\n\t\tif (sHash.includes(\"restoreHistory=true\")) {\n\t\t\tthis._bApplyRestore = true;\n\t\t} else if (!this.bIsRebuildHistoryRunning) {\n\t\t\t// Check if the hash needs to be changed (this happens in FCL when switching b/w edit and read-only with 3 columns open)\n\t\t\tconst mapping = this._pathMappings.find((m) => {\n\t\t\t\treturn sHash.includes(m.oldPath);\n\t\t\t});\n\t\t\tif (mapping) {\n\t\t\t\t// Replace the current hash\n\t\t\t\tsHash = sHash.replace(mapping.oldPath, mapping.newPath);\n\t\t\t\thistory.replaceState(Object.assign({}, history.state), \"\", encodeURI(sHash));\n\t\t\t}\n\n\t\t\tconst aHashSplit = sHash.split(\"&/\");\n\t\t\tconst sAppHash = aHashSplit[1] ? aHashSplit[1] : \"\";\n\t\t\tif (this.checkHashWithGuard(sAppHash)) {\n\t\t\t\tconst oNewState = this._extractStateFromHash(sAppHash);\n\t\t\t\tthis._pushNewState(oNewState, false, false, true);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Compares 2 states.\n\t * @param {object} oState1\n\t * @param {object} oState2\n\t * @returns {number} The result of the comparison:\n\t *        - enumState.EQUAL if oState1 and oState2 are equal\n\t *        - enumState.COMPATIBLE if oState1 and oState2 are compatible\n\t *        - enumState.ANCESTOR if oState1 is an ancestor of oState2\n\t *        - enumState.DIFFERENT if the 2 states are different\n\t */\n\n\t_compareCacheStates(oState1: RouterState, oState2: RouterState): number {\n\t\t// First compare object keys\n\t\tif (oState1.keys.length > oState2.keys.length) {\n\t\t\treturn enumState.DIFFERENT;\n\t\t}\n\t\tlet equal = true;\n\t\tlet index;\n\t\tfor (index = 0; equal && index < oState1.keys.length; index++) {\n\t\t\tif (oState1.keys[index] !== oState2.keys[index]) {\n\t\t\t\tequal = false;\n\t\t\t}\n\t\t}\n\t\tif (!equal) {\n\t\t\t// Some objects keys are different\n\t\t\treturn enumState.DIFFERENT;\n\t\t}\n\n\t\t// All keys from oState1 are in oState2 --> check if ancestor\n\t\tif (oState1.keys.length < oState2.keys.length || oState1.screenMode < oState2.screenMode) {\n\t\t\treturn enumState.ANCESTOR;\n\t\t}\n\t\tif (oState1.screenMode > oState2.screenMode) {\n\t\t\treturn enumState.DIFFERENT; // Not sure this case can happen...\n\t\t}\n\n\t\t// At this stage, the 2 states have the same object keys (in the same order) and same screenmode\n\t\t// They can be either compatible or equal\n\t\treturn oState1.sLayout === oState2.sLayout ? enumState.EQUAL : enumState.COMPATIBLE;\n\t}\n\n\t/**\n\t * Split the app-specific route at the \"&/\" separator.\n\t *\n\t * The app-specific route consists of one or more segments separated by \"&/\".\n\t * @example\n\t * splitAppSpecificRoute(\"&/Entity('abc')/NextEntity('xyz')\");\n\t * // [\"Entity('abc')/NextEntity('xyz')\"]\n\t *\n\t * splitAppSpecificRoute(\"&/Entity('abc')/NextEntity('xyz')&/Prefix/NestedRoute\");\n\t * // [\"Entity('abc')/NextEntity('xyz')\", \"Prefix/NestedRoute\"]\n\t * @param appSpecificRoute\tThe app-specific route.\n\t * @returns An array of app-specific route segments.\n\t */\n\tprivate static splitAppSpecificRoute(appSpecificRoute: string | undefined): string[] {\n\t\tconst routeSplit = appSpecificRoute?.split(\"&/\") ?? [];\n\t\tif (!routeSplit[0]) {\n\t\t\trouteSplit.shift(); // remove the leading empty segment (the app-specific route starts with \"&/\")\n\t\t}\n\t\treturn routeSplit;\n\t}\n\n\t/**\n\t * Checks if back exits the present guard set.\n\t * @returns `true` if back exits the guard\n\t */\n\tcheckIfBackIsOutOfGuard(): boolean {\n\t\t// We use window.location.hash instead of HashChanger.getInstance().getHash() because the latter\n\t\t// replaces characters in the URL (e.g. %24 replaced by $) and it causes issues when comparing\n\t\t// with the URLs in the managed history\n\t\tconst splitHash = this.getFullHash();\n\n\t\tconst segments = RouterProxy.splitAppSpecificRoute(splitHash);\n\n\t\tif (segments.length > 1) {\n\t\t\t// there is a nested route involved -> assume we are still inside the guard\n\t\t\treturn false;\n\t\t}\n\n\t\tconst hash = segments[0] ?? \"\";\n\n\t\tlet previousHash;\n\t\tif (this._oNavigationGuard) {\n\t\t\tfor (let i = this._oManagedHistory.length - 1; i > 0; i--) {\n\t\t\t\tif (this._oManagedHistory[i].hash === hash) {\n\t\t\t\t\tpreviousHash = this._oManagedHistory[i - 1].hash;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn !previousHash || !this.checkHashWithGuard(previousHash);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks if a back navigation will exit the app.\n\t * @returns True if back exits the app\n\t */\n\tcheckIfBackExitsApp(): boolean {\n\t\tconst splitHash = this.getFullHash();\n\n\t\tconst segments = RouterProxy.splitAppSpecificRoute(splitHash);\n\n\t\tif (segments.length > 1) {\n\t\t\t// there is a nested route involved -> assume we are still inside the app\n\t\t\treturn false;\n\t\t}\n\n\t\t// If the current hash is the first one in the history, then a navback will exit the app\n\t\tconst hash = segments[0] ?? \"\";\n\t\treturn this._oManagedHistory.length > 0 && this._oManagedHistory[0].hash === hash;\n\t}\n\n\t/**\n\t * Checks if the last 2 entries in the history share the same context.\n\t * @returns `true` if they share the same context.\n\t */\n\tcheckIfBackHasSameContext(): boolean {\n\t\tif (this._oManagedHistory.length < 2) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst oCurrentState = this._oManagedHistory[this._oManagedHistory.length - 1];\n\t\tconst oPreviousState = this._oManagedHistory[this._oManagedHistory.length - 2];\n\n\t\treturn oCurrentState.hash.split(\"?\")[0] === oPreviousState.hash.split(\"?\")[0];\n\t}\n\n\t/**\n\t * Restores the focus for the current hash, if we can find it in the history.\n\t * @returns True if focus was set, false otherwise.\n\t */\n\trestoreFocusForCurrentHash(): boolean {\n\t\tconst currentHash = removeAppStateInHash(this.getHash());\n\t\tconst stateForHash = this._oManagedHistory.find((state) => {\n\t\t\treturn removeAppStateInHash(state.hash) === currentHash;\n\t\t});\n\n\t\tlet focusApplied = false;\n\t\tif (stateForHash?.focusControlId) {\n\t\t\tlet focusControl = Element.getElementById(stateForHash.focusControlId);\n\t\t\tlet focusInfo = stateForHash.focusInfo;\n\t\t\tif ((!focusControl || !focusControl.getFocusDomRef()) && stateForHash.secondaryFocusControlId) {\n\t\t\t\t// The control for focus is either not found or is not displayed on screen (no focusDomRef)\n\t\t\t\t// --> try the secondary control if there's one\n\t\t\t\tfocusControl = Element.getElementById(stateForHash.secondaryFocusControlId);\n\t\t\t\tfocusInfo = stateForHash.secondaryFocusInfo;\n\t\t\t}\n\t\t\tif (\n\t\t\t\t// if the control is a busy table, we don't want to focus it.\n\t\t\t\t// tables have their own handling to restore focus, so we don't want to interfere with that\n\t\t\t\tfocusControl?.getParent()?.isA<Table>(\"sap.ui.mdc.Table\") &&\n\t\t\t\t(focusControl as MTable | UITable).getBusy()\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfocusControl?.focus(focusInfo);\n\t\t\tfocusApplied = focusControl !== undefined;\n\t\t}\n\n\t\treturn focusApplied;\n\t}\n\n\t/**\n\t * Stores the ID of the currently focused control in the history for the current hash.\n\t *\n\t */\n\tprivate storeFocusInfoForCurrentHash(): void {\n\t\tconst currentHash = removeAppStateInHash(this.getHash());\n\t\tconst stateForHash = this._oManagedHistory.find((state) => {\n\t\t\treturn removeAppStateInHash(state.hash) === currentHash;\n\t\t});\n\t\tif (stateForHash) {\n\t\t\tconst focusControl = Element.getActiveElement();\n\t\t\tstateForHash.focusControlId = focusControl?.getId();\n\t\t\tif (focusControl) {\n\t\t\t\t// The secondary focus control is the parent table if there's one\n\t\t\t\tlet parentTable = focusControl.getParent();\n\t\t\t\twhile (parentTable && !parentTable.isA<UITable>(\"sap.ui.table.Table\") && !parentTable.isA<MTable>(\"sap.m.Table\")) {\n\t\t\t\t\tparentTable = parentTable.getParent();\n\t\t\t\t}\n\t\t\t\tstateForHash.secondaryFocusControlId = parentTable?.getId();\n\t\t\t\tstateForHash.secondaryFocusInfo = { preventScroll: true };\n\t\t\t}\n\t\t\tstateForHash.focusInfo = focusControl?.getFocusInfo();\n\t\t}\n\t}\n\n\t/**\n\t * Finds a layout value for a hash in the history.\n\t * @param hash The hash to look for in the history.\n\t * @returns A layout value if it could be found, undefined otherwise.\n\t */\n\tfindLayoutForHash(hash: string): string | undefined {\n\t\tif (!this.fclEnabled) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Remove all query parameters from the hash\n\t\tconst hashNoParam = hash.split(\"?\")[0];\n\n\t\t// Look for the state backwards, so that we find the last state in the history (e.g. if we have 2 states with the same hash but 2 different layouts)\n\t\tlet targetState: RouterState | undefined;\n\t\tfor (let index = this._oManagedHistory.length - 1; index >= 0 && targetState === undefined; index--) {\n\t\t\tif (this._oManagedHistory[index].hash.split(\"?\")[0] === hashNoParam) {\n\t\t\t\ttargetState = this._oManagedHistory[index];\n\t\t\t}\n\t\t}\n\n\t\treturn targetState?.sLayout;\n\t}\n}\n\nexport default RouterProxy;\n"],"mappings":"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","ignoreList":[],"file":"RouterProxy-dbg.js"}