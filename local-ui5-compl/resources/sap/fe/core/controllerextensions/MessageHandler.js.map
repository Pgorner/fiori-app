{"version":3,"file":"MessageHandler.js","names":["MessageHandler","_dec","defineUI5Class","_dec2","privateExtension","_dec3","extensible","OverrideExecution","Instead","_dec4","publicExtension","_dec5","finalExtension","_dec6","_dec7","_dec8","_class","_class2","_ControllerExtension","_this","call","this","strictWarningMessages","holdKeys","holdMsgsToShow","_inheritsLoose","_proto","prototype","addWarningMessagesToMessageHandler","aMessages","concat","isStrictWarningMessage","oMessage","find","message","getCode","getMessage","getType","getDescriptionUrl","deepEqual","getTargets","getPersistent","undefined","clearStrictWarningMessages","filterErrorMessages","messages","filter","MessageType","Error","getShowBoundMessagesInMessageDialog","registerToHoldMessages","key","uniqueKey","uid","includes","push","resetHoldKeys","showMessageDialog","async","mParameters","messagesInModel","Messaging","getMessageModel","getData","duplicateWarningMessage","removeMessages","customMessages","oOPInternalBindingContext","base","getView","getBindingContext","viewType","getViewData","converterType","isActionParameterDialogOpen","setProperty","bShowBoundMessages","oBindingContext","context","Promise","resolve","reject","setTimeout","processAndShowMessages","bind","parameters","bindingContext","showBoundTransitionMessages","success","failure","concurrentEditFlag","control","sActionName","onBeforeShowMessage","unHoldKey","forceShowUIElement","overrideUIDecision","showBoundStateMessages","newUIDecisions","messageHandling","getUIDecisions","updateUIDecisions","removeHoldKey","getId","showMessagesWithCondtions","arguments","length","showUIElement","checkToShowUIElement","uiDecisions","showMessagesInUI","then","catch","Log","info","removeTransitionMessages","keepBoundMessage","keepUnboundMessage","sPathToBeRemoved","removeBoundTransitionMessages","removeUnboundTransitionMessages","_checkNavigationToErrorPage","aUnboundMessages","getMessages","bShowBoundTransitionMessages","aBoundTransitionMessages","aCustomMessages","bIsStickyEditMode","CommonUtils","isStickyEditMode","mMessagePageParameters","isDataReceivedError","title","description","navigateBackToOrigin","errorType","isInitialLoad503Error","oTechnicalDetails","getTechnicalDetails","httpStatus","_getHTTP503MessageParameters","technicalDetails","messagePageParameters","secondsBeforeRetry","retryAfter","_getSecondsBeforeRetryAfter","retryAfterMessage","getRetryAfterMessage","dRetryAfter","dCurrentDateTime","Date","iCurrentDateTimeInMilliSeconds","getTime","iRetryAfterDateTimeInMilliSeconds","iSecondsBeforeRetry","oldUIDecisions","allMessagesToShow","mergedUIDecision","messagesToShow","Array","from","Set","elements","uiElementToUse","contextNeedsEtagRefresh","containsBoundTransition","inKey","splice","indexOf","holdMessagesForControl","identifier","releaseHoldByControl","showMessages","messagePageNavigationCallback","handleShellBack","shellBack","oResourceBundle","Library","getResourceBundleFor","_routing","navigateToMessagePage","getText","ControllerExtension","_applyDecoratedDescriptor","Object","getOwnPropertyDescriptor"],"sources":["./MessageHandler.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport deepEqual from \"sap/base/util/deepEqual\";\nimport uid from \"sap/base/util/uid\";\nimport { defineUI5Class, extensible, finalExtension, privateExtension, publicExtension } from \"sap/fe/base/ClassSupport\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type PageController from \"sap/fe/core/PageController\";\nimport type {\n\tMessageTechnicalDetails,\n\tMessageUIDecisions,\n\tShowMessageParameters,\n\tSupportedUIElement\n} from \"sap/fe/core/controllerextensions/messageHandler/messageHandling\";\nimport messageHandling from \"sap/fe/core/controllerextensions/messageHandler/messageHandling\";\nimport type { InternalModelContext } from \"sap/fe/core/helpers/ModelHelper\";\nimport type Dialog from \"sap/m/Dialog\";\nimport type Control from \"sap/ui/core/Control\";\nimport Library from \"sap/ui/core/Lib\";\nimport Messaging from \"sap/ui/core/Messaging\";\nimport type Message from \"sap/ui/core/message/Message\";\nimport MessageType from \"sap/ui/core/message/MessageType\";\nimport ControllerExtension from \"sap/ui/core/mvc/ControllerExtension\";\nimport OverrideExecution from \"sap/ui/core/mvc/OverrideExecution\";\nimport type Context from \"sap/ui/model/Context\";\nimport type ODataV4Context from \"sap/ui/model/odata/v4/Context\";\n\ntype ObjectWithConverterType = object & {\n\tconverterType: string;\n};\ntype NavigationToErrorPageParameter = {\n\tcustomMessages?: CustomMessage[];\n\tconcurrentEditFlag?: boolean;\n\tisDataReceivedError?: boolean;\n\ttitle?: string;\n\tdescription?: string;\n\tisInitialLoad503Error?: boolean;\n};\nexport type NavigationToErrorPageResult = {\n\ttitle?: string;\n\tdescription?: string;\n\terrorType?: string;\n\tnavigateBackToOrigin?: boolean;\n\thandleShellBack?: boolean;\n};\nexport type CustomMessage = {\n\tcode: string;\n\ttext: string;\n\tpersistent: boolean;\n\ttype: MessageType;\n};\nexport type ShowMessageDialogParameter = {\n\tcustomMessages?: CustomMessage[];\n\tisActionParameterDialogOpen?: boolean;\n\tcontext?: Context;\n\tconcurrentEditFlag?: boolean;\n\tcontrol?: Control;\n\tsActionName?: string;\n\taSelectedContexts?: Context | Context[] | null;\n\tonBeforeShowMessage?: (messages: Message[], showMessageParameters: ShowMessageParameters) => ShowMessageParameters;\n\tunHoldKey?: string;\n\tforceShowUIElement?: boolean;\n\toverrideUIDecision?: boolean;\n\tshowBoundStateMessages?: boolean;\n\tboundActionName?: string;\n\tentitySet?: string;\n};\n\nexport type ShowMessagesParameters = ShowMessageDialogParameter & {\n\tmessagePageNavigationCallback?: Function;\n\tshellBack?: Function | boolean;\n\tisDataReceivedError?: boolean;\n\tisInitialLoad503Error?: boolean;\n\ttitle?: string;\n\tdescription?: string;\n};\n/**\n * A controller extension offering message handling.\n * @hideconstructor\n * @public\n * @experimental As of version 1.90.0\n * @since 1.90.0\n */\n@defineUI5Class(\"sap.fe.core.controllerextensions.MessageHandler\")\nclass MessageHandler extends ControllerExtension {\n\tprivate strictWarningMessages: Message[] = [];\n\n\tprotected base!: PageController;\n\n\tprotected holdKeys: string[] = [];\n\n\tprotected uiDecisions: MessageUIDecisions | undefined;\n\n\tprivate holdMsgsToShow = false;\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Adds warning messages to the message handler.\n\t * @param aMessages The strict warning messages to be added\n\t */\n\taddWarningMessagesToMessageHandler(aMessages: Message[]): void {\n\t\tthis.strictWarningMessages = this.strictWarningMessages.concat(aMessages);\n\t}\n\n\t/**\n\t * Determines whether or not a message is a strict warning message that was received previously.\n\t * @param oMessage The message to be checked\n\t * @returns Whether or not the message is a strict warning message\n\t */\n\tisStrictWarningMessage(oMessage: Message): boolean {\n\t\treturn (\n\t\t\tthis.strictWarningMessages.find((message) => {\n\t\t\t\treturn (\n\t\t\t\t\tmessage.getCode() === oMessage.getCode() &&\n\t\t\t\t\tmessage.getMessage() === oMessage.getMessage() &&\n\t\t\t\t\tmessage.getType() === oMessage.getType() &&\n\t\t\t\t\tmessage.getDescriptionUrl() === oMessage.getDescriptionUrl() &&\n\t\t\t\t\tdeepEqual(message.getTargets(), oMessage.getTargets()) &&\n\t\t\t\t\tmessage.getPersistent() === oMessage.getPersistent()\n\t\t\t\t);\n\t\t\t}) !== undefined\n\t\t);\n\t}\n\n\t/**\n\t * Clears all strict warning messages from the message handler.\n\t */\n\tclearStrictWarningMessages(): void {\n\t\tthis.strictWarningMessages = [];\n\t}\n\n\tfilterErrorMessages(messages: Message[]): Message[] {\n\t\treturn messages.filter((message) => message.getType() === MessageType.Error);\n\t}\n\n\t/**\n\t * Determines whether or not bound messages are shown in the message dialog.\n\t *\n\t * This function is meant to be individually overridden by consuming controllers, but not to be called directly.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.Instead}.\n\t *\n\t * If the bound messages are shown to the user with a different control like the (TODO:Link) MessageButton\n\t * this method has to be overridden.\n\t * @returns Determines whether or not bound messages are shown in the message dialog.\n\t */\n\t@privateExtension()\n\t@extensible(OverrideExecution.Instead)\n\tgetShowBoundMessagesInMessageDialog(): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Register to hold messages unitl a process is complete.\n\t *\n\t * The caller can register to hold the message handler from showing messages until the caller's processes are completed.\n\t * On registering the caller is returned a unique key.\n\t * The messages will not be shown in the UI with subsequent 'showMessageDialog()' calls.\n\t * The caller needs to use 'showMessageDialog(<key>)' at the end of all his processes to show the messages in the UI.\n\t *\n\t * If multiple owners register simultaneously, then messages are shown in the UI only after 'showMessageDialog(<respective_key>)' is called by all the processes' owners.\n\t * @param key Unique identifier to use, If not provided, a UID would be created and used to register.\n\t * @returns Unique Key to be used by the caller to show messages at a later point of time.\n\t */\n\tregisterToHoldMessages(key?: string): string {\n\t\tconst uniqueKey = key ?? uid();\n\t\tif (!this.holdKeys.includes(uniqueKey)) {\n\t\t\tthis.holdKeys.push(uniqueKey);\n\t\t}\n\t\treturn uniqueKey;\n\t}\n\n\t/**\n\t * Clear all existing held keys.\n\t */\n\tresetHoldKeys(): void {\n\t\tthis.holdKeys = [];\n\t}\n\n\t/**\n\t * Shows a message dialog with transition messages if there are any.\n\t * The message dialog is shown as a modal dialog. Once the user confirms the dialog, all transition messages\n\t * are removed from the message model. If there is more than one message, a list of messages is shown. The user\n\t * can filter on message types and can display details as well as the long text. If there is one message,\n\t * the dialog immediately shows the details of the message. If there is just one success message, a message\n\t * toast is shown instead.\n\t * @param mParameters PRIVATE\n\t * @returns A promise that is resolved once the user closes the dialog. If there are no messages\n\t * to be shown, the promise is resolved immediately\n\t * @public\n\t * @experimental As of version 1.90.0\n\t * @since 1.90.0\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tasync showMessageDialog(mParameters?: ShowMessageDialogParameter): Promise<void> {\n\t\t// remove strict warning messages from the message model before showing the message dialog\n\t\tconst messagesInModel = Messaging.getMessageModel().getData();\n\t\tconst duplicateWarningMessage = messagesInModel.filter((message: Message) => {\n\t\t\treturn this.isStrictWarningMessage(message);\n\t\t});\n\t\tMessaging.removeMessages(duplicateWarningMessage);\n\n\t\tconst customMessages = mParameters && mParameters.customMessages ? mParameters.customMessages : undefined,\n\t\t\toOPInternalBindingContext = this.base.getView().getBindingContext(\"internal\") as InternalModelContext;\n\t\tconst viewType = (this.base.getView().getViewData() as ObjectWithConverterType).converterType;\n\t\t// set isActionParameterDialog open so that it can be used in the controller extension to decide whether message dialog should open or not\n\t\tif (mParameters && mParameters.isActionParameterDialogOpen && oOPInternalBindingContext) {\n\t\t\toOPInternalBindingContext.setProperty(\"isActionParameterDialogOpen\", true);\n\t\t}\n\t\tconst bShowBoundMessages = this.getShowBoundMessagesInMessageDialog();\n\t\tconst oBindingContext = (\n\t\t\tmParameters && mParameters.context ? mParameters.context : this.getView().getBindingContext()\n\t\t) as ODataV4Context;\n\t\t//const bEtagMessage = mParameters && mParameters.bHasEtagMessage;\n\t\t// reset  isActionParameterDialogOpen\n\t\t// cannot do this operations.js since it is not aware of the view\n\t\tif (oOPInternalBindingContext) {\n\t\t\toOPInternalBindingContext.setProperty(\"isActionParameterDialogOpen\", false);\n\t\t}\n\t\treturn new Promise<void>(\n\t\t\tfunction (this: MessageHandler, resolve: () => void, reject: () => void): void {\n\t\t\t\t// we have to set a timeout to be able to access the most recent messages\n\t\t\t\tsetTimeout(\n\t\t\t\t\tfunction (this: MessageHandler): void {\n\t\t\t\t\t\t// TODO: great API - will be changed later\n\t\t\t\t\t\tthis.processAndShowMessages(\n\t\t\t\t\t\t\tmParameters ?? {},\n\t\t\t\t\t\t\toBindingContext,\n\t\t\t\t\t\t\tbShowBoundMessages,\n\t\t\t\t\t\t\tcustomMessages ?? [],\n\t\t\t\t\t\t\tresolve,\n\t\t\t\t\t\t\treject,\n\t\t\t\t\t\t\tviewType\n\t\t\t\t\t\t);\n\t\t\t\t\t}.bind(this),\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t}.bind(this)\n\t\t);\n\t}\n\n\t/**\n\t * Process the messages and show them when expected.\n\t *\n\t * We filter the messages to show and hold them until all registered processes call showMessageDialog with their respective held keys.\n\t * @param parameters Parameters to show message dialog.\n\t * @param bindingContext Bind context of the page.\n\t * @param showBoundTransitionMessages Should bound messages be shown.\n\t * @param customMessages Custom messages to add.\n\t * @param success Success callback.\n\t * @param failure Failure callback.\n\t * @param viewType View type, list report or object page.\n\t */\n\tprocessAndShowMessages(\n\t\tparameters: ShowMessageDialogParameter,\n\t\tbindingContext: ODataV4Context,\n\t\tshowBoundTransitionMessages: boolean,\n\t\tcustomMessages: CustomMessage[],\n\t\tsuccess: () => void,\n\t\tfailure: () => void,\n\t\tviewType?: string\n\t): void {\n\t\tconst {\n\t\t\tconcurrentEditFlag,\n\t\t\tcontrol,\n\t\t\tsActionName,\n\t\t\tonBeforeShowMessage,\n\t\t\tunHoldKey,\n\t\t\tforceShowUIElement = false,\n\t\t\toverrideUIDecision,\n\t\t\tshowBoundStateMessages\n\t\t} = parameters;\n\t\tthis.holdMsgsToShow = true;\n\n\t\t// Create a UI decision.\n\t\tconst newUIDecisions = messageHandling.getUIDecisions(\n\t\t\tcustomMessages,\n\t\t\tbindingContext,\n\t\t\tshowBoundTransitionMessages,\n\t\t\tconcurrentEditFlag,\n\t\t\tcontrol,\n\t\t\tsActionName,\n\t\t\tonBeforeShowMessage,\n\t\t\tviewType,\n\t\t\tshowBoundStateMessages,\n\t\t\tparameters\n\t\t);\n\t\tthis.updateUIDecisions(newUIDecisions, overrideUIDecision);\n\t\tthis.removeHoldKey(unHoldKey ?? control?.getId());\n\t\tthis.showMessagesWithCondtions(forceShowUIElement, success, failure);\n\t}\n\n\t/**\n\t * Show Messages in the UI based on conditions.\n\t * @param forceShowUIElement\n\t * @param success\n\t * @param failure\n\t */\n\tshowMessagesWithCondtions(forceShowUIElement = false, success?: () => void, failure?: () => void): void {\n\t\tconst showUIElement = forceShowUIElement || this.checkToShowUIElement();\n\t\tif (showUIElement && this.uiDecisions) {\n\t\t\t// Show UI element for the present decision and clear the decision.\n\t\t\tmessageHandling.showMessagesInUI(this.uiDecisions).then(success).catch(failure);\n\t\t\tthis.uiDecisions = undefined;\n\t\t\tthis.clearStrictWarningMessages();\n\t\t\tthis.holdMsgsToShow = false;\n\t\t} else {\n\t\t\tLog.info(\"FE : V4 : MessageHandler : Holding messages until a registered process \");\n\t\t\tsuccess?.();\n\t\t}\n\t}\n\n\t/**\n\t * You can remove the existing transition message from the message model with this method.\n\t * With every user interaction that causes server communication (like clicking on an action, changing data),\n\t * this method removes the existing transition messages from the message model.\n\t * @param [keepBoundMessage] Checks if the bound transition messages are not to be removed\n\t * @param keepUnboundMessage\n\t * @param sPathToBeRemoved\n\t */\n\t@publicExtension()\n\tremoveTransitionMessages(keepBoundMessage?: boolean, keepUnboundMessage?: boolean, sPathToBeRemoved?: string): void {\n\t\tif (!keepBoundMessage) {\n\t\t\tmessageHandling.removeBoundTransitionMessages(sPathToBeRemoved);\n\t\t}\n\t\tif (!keepUnboundMessage) {\n\t\t\tmessageHandling.removeUnboundTransitionMessages();\n\t\t}\n\t}\n\n\t/**\n\t * Method that returns all the parameters needed to handle the navigation to the error page.\n\t * @param mParameters\n\t * @returns The parameters necessary for the navigation to the error page\n\t */\n\t_checkNavigationToErrorPage(mParameters?: NavigationToErrorPageParameter): NavigationToErrorPageResult | undefined {\n\t\tconst aUnboundMessages = messageHandling.getMessages();\n\t\tconst bShowBoundTransitionMessages = this.getShowBoundMessagesInMessageDialog();\n\t\tconst aBoundTransitionMessages = bShowBoundTransitionMessages ? messageHandling.getMessages(true, true) : [];\n\t\tconst aCustomMessages = mParameters && mParameters.customMessages ? mParameters.customMessages : [];\n\t\tconst bIsStickyEditMode = CommonUtils.isStickyEditMode(this.base.getView());\n\t\tlet mMessagePageParameters: NavigationToErrorPageResult | undefined;\n\n\t\t// TODO: Stick mode check is okay as long as the controller extension is used with sap.fe.core and sap.fe.core.AppComponent.\n\t\t// It might be better to provide an extension to the consumer of the controller extension to provide this value.\n\n\t\t// The message page can only show 1 message today, so we navigate to it when :\n\t\t// 1. There are no bound transition messages to show,\n\t\t// 2. There are no custom messages to show, &\n\t\t// 3. There is exactly 1 unbound message in the message model with statusCode=503 and retry-After available\n\t\t// 4. retryAfter is greater than 120 seconds\n\t\t//\n\t\t// In Addition, navigating away from a sticky session will destroy the session so we do not navigate to message page for now.\n\t\t// TODO: check if navigation should be done in sticky edit mode.\n\t\tif (mParameters?.isDataReceivedError === true) {\n\t\t\tmMessagePageParameters = {\n\t\t\t\ttitle: mParameters.title,\n\t\t\t\tdescription: mParameters.description,\n\t\t\t\tnavigateBackToOrigin: true,\n\t\t\t\terrorType: \"PageNotFound\"\n\t\t\t};\n\t\t} else if (\n\t\t\t!bIsStickyEditMode &&\n\t\t\t!aBoundTransitionMessages.length &&\n\t\t\t!aCustomMessages.length &&\n\t\t\t(aUnboundMessages.length === 1 || mParameters?.isInitialLoad503Error === true)\n\t\t) {\n\t\t\tconst oMessage = aUnboundMessages[0];\n\t\t\tconst oTechnicalDetails = oMessage.getTechnicalDetails() as MessageTechnicalDetails | undefined;\n\t\t\tif (oTechnicalDetails?.httpStatus === 503) {\n\t\t\t\tmMessagePageParameters = this._getHTTP503MessageParameters(oMessage, oTechnicalDetails);\n\t\t\t}\n\t\t}\n\t\treturn mMessagePageParameters;\n\t}\n\n\t_getHTTP503MessageParameters(message: Message, technicalDetails: MessageTechnicalDetails): NavigationToErrorPageResult | undefined {\n\t\tlet messagePageParameters: NavigationToErrorPageResult | undefined;\n\n\t\tconst secondsBeforeRetry =\n\t\t\ttechnicalDetails.retryAfter !== undefined ? this._getSecondsBeforeRetryAfter(technicalDetails.retryAfter) : undefined;\n\n\t\tif (secondsBeforeRetry === undefined || secondsBeforeRetry > 120) {\n\t\t\tconst retryAfterMessage = messageHandling.getRetryAfterMessage(message);\n\t\t\tmessagePageParameters = {\n\t\t\t\tdescription: retryAfterMessage ? `${retryAfterMessage} ${message.getMessage()}` : message.getMessage(),\n\t\t\t\tnavigateBackToOrigin: true,\n\t\t\t\terrorType: \"UnableToLoad\"\n\t\t\t};\n\t\t}\n\n\t\treturn messagePageParameters;\n\t}\n\n\t_getSecondsBeforeRetryAfter(dRetryAfter: Date): number {\n\t\tconst dCurrentDateTime = new Date(),\n\t\t\tiCurrentDateTimeInMilliSeconds = dCurrentDateTime.getTime(),\n\t\t\tiRetryAfterDateTimeInMilliSeconds = dRetryAfter.getTime(),\n\t\t\tiSecondsBeforeRetry = (iRetryAfterDateTimeInMilliSeconds - iCurrentDateTimeInMilliSeconds) / 1000;\n\t\treturn iSecondsBeforeRetry;\n\t}\n\n\t/**\n\t * Update the existing UI decisions with the new ones.\n\t * @param newUIDecisions In comming UI decisions.\n\t * @param overrideUIDecision Override the existing UI decision to show messages with the new one.\n\t *\n\t * 'overrideUIDecision', This would be needed when there is a change in page context and the paramters to create the new UI decision are different.\n\t */\n\tupdateUIDecisions(newUIDecisions: MessageUIDecisions, overrideUIDecision = false): void {\n\t\tconst oldUIDecisions = this.uiDecisions;\n\t\tlet allMessagesToShow: Message[] = [];\n\t\tlet mergedUIDecision;\n\t\tif (oldUIDecisions && overrideUIDecision === false) {\n\t\t\tif (oldUIDecisions.messagesToShow.length === 1 && newUIDecisions.messagesToShow.length === 1 && oldUIDecisions.messagesToShow[0].getCode() === \"C_COMMON_SUCCESS_MESSAGE\" && newUIDecisions.messagesToShow[0].getCode() === \"C_COMMON_SUCCESS_MESSAGE\") {\n\t\t\t\t// Check if both are generic success messages, then we show only one message.\n\t\t\t\tallMessagesToShow = oldUIDecisions.messagesToShow;\n\t\t\t} else {\n\t\t\t\tallMessagesToShow = Array.from(new Set([...oldUIDecisions.messagesToShow, ...newUIDecisions.messagesToShow]));\n\t\t\t}\n\t\t\tconst elements = [oldUIDecisions.uiElementToUse, newUIDecisions.uiElementToUse];\n\t\t\t// Default we show dialog\n\t\t\tlet uiElementToUse: SupportedUIElement = allMessagesToShow.length > 0 ? \"Dialog\" : \"None\";\n\n\t\t\tif (allMessagesToShow.length === 1) {\n\t\t\t\t// Single message, we check for specific UI Element to use.\n\t\t\t\tif (elements.includes(\"Toast\")) {\n\t\t\t\t\tuiElementToUse = \"Toast\";\n\t\t\t\t} else if (elements.includes(\"Box\")) {\n\t\t\t\t\tuiElementToUse = \"Box\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmergedUIDecision = {\n\t\t\t\tmessagesToShow: allMessagesToShow,\n\t\t\t\tuiElementToUse,\n\t\t\t\tcontextNeedsEtagRefresh: oldUIDecisions.contextNeedsEtagRefresh || newUIDecisions.contextNeedsEtagRefresh,\n\t\t\t\tcontainsBoundTransition: oldUIDecisions.containsBoundTransition || newUIDecisions.containsBoundTransition\n\t\t\t};\n\t\t} else {\n\t\t\tmergedUIDecision = newUIDecisions;\n\t\t}\n\n\t\tthis.uiDecisions = mergedUIDecision;\n\t}\n\n\t/**\n\t * Remove held key.\n\t * @param inKey Key to remove.\n\t */\n\tremoveHoldKey(inKey?: string): void {\n\t\tif (inKey && this.holdKeys.includes(inKey)) {\n\t\t\tthis.holdKeys.splice(this.holdKeys.indexOf(inKey), 1);\n\t\t}\n\t}\n\n\t/**\n\t * Check if UI Element with messages should be shown.\n\t * @returns Boolean\n\t */\n\tcheckToShowUIElement(): boolean {\n\t\treturn this.holdMsgsToShow && (this.holdKeys.length > 0 ? false : true);\n\t}\n\n\t/**\n\t * Hold messages for the control.\n\t * @param control\n\t */\n\tholdMessagesForControl(control: Control): void {\n\t\tconst identifier = control.getId();\n\t\tthis.registerToHoldMessages(identifier);\n\t}\n\n\t/**\n\t * Release message hold by a control.\n\t * @param control\n\t */\n\treleaseHoldByControl(control?: Control): void {\n\t\tconst identifier = control?.getId();\n\t\tthis.removeHoldKey(identifier);\n\t\tthis.showMessagesWithCondtions();\n\t}\n\n\t/**\n\t * Shows a message page or a message dialog based on the messages in the message dialog.\n\t * @param [parameters]\n\t * @returns A promise that is resolved once the user closes the message dialog or when navigation to the message page is complete. If there are no messages\n\t * to be shown, the promise is resolved immediately\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tasync showMessages(parameters?: ShowMessagesParameters): Promise<void | boolean | Dialog> {\n\t\tconst messagePageParameters = this._checkNavigationToErrorPage(parameters);\n\n\t\tif (messagePageParameters) {\n\t\t\t// navigate to message page.\n\t\t\t// handler before page navigation is triggered, for example to close the action parameter dialog\n\t\t\tif (parameters?.messagePageNavigationCallback) {\n\t\t\t\tparameters.messagePageNavigationCallback();\n\t\t\t}\n\n\t\t\tmessagePageParameters.handleShellBack = !parameters?.shellBack;\n\t\t\tthis.removeTransitionMessages();\n\t\t\tconst oResourceBundle = Library.getResourceBundleFor(\"sap.fe.core\")!;\n\n\t\t\t// clear all hold keys as we navigate to message page.\n\t\t\tthis.resetHoldKeys();\n\n\t\t\treturn new Promise<boolean>((resolve, reject) => {\n\t\t\t\t// we have to set a timeout to be able to access the most recent messages\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t// TODO: great API - will be changed later\n\t\t\t\t\tthis.base._routing\n\t\t\t\t\t\t.navigateToMessagePage(\n\t\t\t\t\t\t\tparameters?.isDataReceivedError === true\n\t\t\t\t\t\t\t\t? oResourceBundle.getText(\"C_COMMON_SAPFE_DATA_RECEIVED_ERROR\")\n\t\t\t\t\t\t\t\t: oResourceBundle.getText(\"C_MESSAGE_HANDLING_SAPFE_503_TITLE\"),\n\t\t\t\t\t\t\tmessagePageParameters\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.then(resolve)\n\t\t\t\t\t\t.catch(reject);\n\t\t\t\t}, 0);\n\t\t\t});\n\t\t} else {\n\t\t\t// navigate to message dialog\n\t\t\treturn this.showMessageDialog(parameters);\n\t\t}\n\t}\n}\nexport default MessageHandler;\n"],"mappings":"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","ignoreList":[]}