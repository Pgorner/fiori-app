{"version":3,"file":"ViewState.js","names":["NavType","NavLibrary","ADDITIONAL_STATES_KEY","getStateUtil","async","__ui5_require_async","default","_mControlStateHandlerMap","retrieve","oVM","variantId","getCurrentVariantKey","apply","controlState","undefined","isVariantIdAvailable","this","_checkIfVariantIdIsAvailable","sVariantReference","getStandardVariantKey","controlsVariantIdUnavailable","push","getFor","ControlVariantApplyAPI","activateVariant","element","variantReference","_setInitialStatesForDeltaCompute","error","Log","invalidateInitialStateForApply","multipleModeControl","selectedKey","content","getSelectedKey","tabBar","getItems","find","item","getKey","setSelectedKey","refreshBinding","oTable","oTableBinding","getRowBinding","oRootBinding","getRootBinding","aggregation","getAggregation","hierarchyQualifier","refresh","oHeaderContext","getHeaderContext","sGroupId","getGroupId","requestSideEffects","$NavigationPropertyPath","info","getId","oSegmentedButton","oControlState","getParent","isA","fireEvent","oSelect","oDynamicPage","headerExpanded","getHeaderExpanded","setHeaderExpanded","oView","oController","getController","viewState","retrieveViewState","oNavParameters","skipMerge","applyViewState","refreshViewBindings","oComponentContainer","oComponent","getComponentInstance","retrieveControlState","getRootControl","applyControlState","ViewState","_dec","defineUI5Class","_dec2","publicExtension","_dec3","finalExtension","_dec4","_dec5","extensible","OverrideExecution","After","_dec6","privateExtension","_dec7","_dec8","_dec9","_dec10","_dec11","_dec12","_dec13","_dec14","_dec15","_dec16","_dec17","_dec18","_dec19","_dec20","_dec21","_dec22","_dec23","_dec24","_dec25","_dec26","_dec27","_dec28","_dec29","_dec30","_dec31","_dec32","_dec33","Instead","_dec34","_dec35","_dec36","_dec37","_dec38","_dec39","_dec40","_dec41","_dec42","_dec43","_dec44","_dec45","_dec46","_dec47","_dec48","_class","_class2","_ControllerExtension","_this","call","initialControlStatesMapper","viewStateControls","stateContributors","adaptControls","externalStatePromises","controlStateKey","initialControlStates","variantControls","variantManagement","updateInitialState","Promise","all","filter","control","includes","map","_addEventListenersToVariantManagement","externalStatePromise","retrieveExternalState","getStateKey","forEach","initialControlState","i","e","_iRetrievingStateCounter","_pInitialStateApplied","resolve","_pInitialStateAppliedResolve","_inheritsLoose","_proto","prototype","aControls","collectResults","base","adaptBindingRefreshControls","oPromiseChain","oControl","then","refreshControlBinding","bind","aCollectedControls","oControlRefreshBindingHandler","getControlRefreshBindingHandler","getMetadata","getName","oRefreshBindingHandler","sType","adaptBindingRefreshHandler","_oControl","_oControlHandler","onSuspend","onRestore","destroy","fnCall","aResults","_len","arguments","length","args","Array","_key","adaptControlStateHandler","aControlHandler","getControlStateHandler","aInternalControlStateHandler","aCustomControlStateHandler","retrieveState","applyState","_control","shouldApplyDiffState","navigationType","hybrid","applyLegacyState","getControlState","Object","assign","concat","adaptStateControls","_aCollectedControls","getView","getLocalId","oViewState","aResolvedStates","vResult","key","value","reduce","oStates","mState","oCurrentState","mergeObjects","prevState","_currentViewState","keys","_addMissingState","mAdditionalStates","_retrieveAdditionalStates","retrieveAdditionalStates","aControlStateHandlers","mControlStateHandler","Error","aStates","oFinalState","applyInitialStateOnly","controlKey","oNavParameter","_getInitialStateApplied","_isStateEmptyForIAppStateNavType","__isRootViewController","onBeforeStateApplied","hasVariantManagement","configOfStateApply","navTypeParameters","state","sortedAdaptStateControls","modifiedControls","isVariantManagementControl","sKey","iAppState","applyAdditionalStates","applyNavigationParameters","_applyNavigationParametersToFilterbar","onAfterStateApplied","_setInitialStateApplied","sVariantId","aVariants","getVariants","bIsControlStateVariantAvailable","oVariant","pInitialStateAppliedResolve","navType","rootViewController","aPromises","_oNavParameter","_aPromises","updateAppStateDebounced","updateAppStateTimer","clearTimeout","setTimeout","getExtensionAPI","updateAppState","registerStateContributor","stateContributor","deregisterStateContributor","targetIndex","findIndex","contributor","splice","getInterface","_getControlState","fullState","initialState","oPayload","variantManagedControls","fnEvent","_updateInitialStatesOnVariantChange","attachSave","attachSelect","vmAssociatedControlsToReset","vmAssociatedcontrolKey","viewControls","controlId","setInitialState","_isInitialStatesApplicable","isNavHybrid","ControllerExtension","_applyDecoratedDescriptor","getOwnPropertyDescriptor"],"sources":["./ViewState.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport mergeObjects from \"sap/base/util/merge\";\nimport type DynamicPage from \"sap/f/DynamicPage\";\nimport { defineUI5Class, extensible, finalExtension, privateExtension, publicExtension } from \"sap/fe/base/ClassSupport\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport type PageController from \"sap/fe/core/PageController\";\nimport type IViewStateContributor from \"sap/fe/core/controllerextensions/viewState/IViewStateContributor\";\nimport type SelectionVariant from \"sap/fe/navigation/SelectionVariant\";\nimport NavLibrary from \"sap/fe/navigation/library\";\nimport type MultipleModeControl from \"sap/fe/templates/ListReport/controls/MultipleModeControl\";\nimport type IconTabFilter from \"sap/m/IconTabFilter\";\nimport type SegmentedButton from \"sap/m/SegmentedButton\";\nimport type Select from \"sap/m/Select\";\nimport type ManagedObject from \"sap/ui/base/ManagedObject\";\nimport type BaseObject from \"sap/ui/base/Object\";\nimport type ComponentContainer from \"sap/ui/core/ComponentContainer\";\nimport type Control from \"sap/ui/core/Control\";\nimport ControllerExtension from \"sap/ui/core/mvc/ControllerExtension\";\nimport OverrideExecution from \"sap/ui/core/mvc/OverrideExecution\";\nimport type VariantManagement from \"sap/ui/fl/variants/VariantManagement\";\nimport type MDCControl from \"sap/ui/mdc/Control\";\nimport type FilterBar from \"sap/ui/mdc/FilterBar\";\nimport type MDCTable from \"sap/ui/mdc/Table\";\n\nimport type StateUtil from \"sap/ui/mdc/p13n/StateUtil\";\nimport type FclController from \"../rootView/Fcl.controller\";\nimport type NavContainerController from \"../rootView/NavContainer.controller\";\n\n// additionalStates are stored next to control IDs, so name clash avoidance needed. Fortunately IDs have restrictions:\n// \"Allowed is a sequence of characters (capital/lowercase), digits, underscores, dashes, points and/or colons.\"\n// Therefore adding a symbol like # or @\nconst NavType = NavLibrary.NavType;\n\n/**\n * Definition of a navigation parameter\n * @public\n */\nexport type NavigationParameter = {\n\t/**\n\t *  The actual navigation type.\n\t *  @public\n\t */\n\tnavigationType: string;\n\t/**\n\t * The selectionVariant from the navigation.\n\t * @public\n\t */\n\tselectionVariant?: SelectionVariant;\n\t/**\n\t * The selectionVariant defaults from the navigation\n\t *  @public\n\t */\n\tselectionVariantDefaults?: SelectionVariant;\n\t/**\n\t * Defines whether the standard variant must be used in variant management\n\t *  @public\n\t */\n\trequiresStandardVariant?: boolean;\n};\n\nconst ADDITIONAL_STATES_KEY = \"#additionalStates\";\n\nexport type ControlState =\n\t| ({\n\t\t\tinitialState?: {\n\t\t\t\tsupplementaryConfig?: object;\n\t\t\t};\n\t\t\tfullState?: {\n\t\t\t\tfilter?: object;\n\t\t\t};\n\t  } & Record<string, unknown>)\n\t| undefined;\n\nexport type NavParameters = {\n\tnavigationType?: string;\n};\nexport type LegacyFilterBarState = {\n\tfilter?: Record<string, Array<object>>;\n} & Record<string, unknown>;\n\n///////////////////////////////////////////////////////////////////\n// methods to retrieve & apply states for the different controls //\n///////////////////////////////////////////////////////////////////\nexport type ControlStateHandler<T extends ManagedObject, K extends unknown | undefined> = {\n\tretrieve?: (oControl: T) => K | Promise<K>;\n\tapply?: (oControl: T, controlState: K, navParameters?: NavigationParameter, skipMerge?: boolean) => Promise<void> | void;\n\trefreshBinding?: (oControl: T) => void;\n};\ntype ControlStateMap = {\n\t\"sap.ui.fl.variants.VariantManagement\": ControlStateHandler<VariantManagement, { variantId: string | null }>;\n\t\"sap.fe.templates.ListReport.controls.MultipleModeControl\": ControlStateHandler<MultipleModeControl, { selectedKey: string }>;\n\t\"sap.ui.mdc.Table\": ControlStateHandler<MDCTable, ControlState>;\n\t\"sap.m.SegmentedButton\": ControlStateHandler<SegmentedButton, { selectedKey: string }>;\n\t\"sap.m.Select\": ControlStateHandler<Select, { selectedKey: string }>;\n\t\"sap.f.DynamicPage\": ControlStateHandler<DynamicPage, { headerExpanded: boolean }>;\n\t\"sap.ui.core.ComponentContainer\": ControlStateHandler<ComponentContainer, object>;\n\t\"sap.ui.core.mvc.View\": ControlStateHandler<FEView, ControlState>;\n};\nconst getStateUtil = async function (): Promise<typeof StateUtil> {\n\treturn (await import(\"sap/ui/mdc/p13n/StateUtil\")).default;\n};\nconst _mControlStateHandlerMap: ControlStateMap = {\n\t\"sap.ui.fl.variants.VariantManagement\": {\n\t\tretrieve: function (oVM: VariantManagement): { variantId: string | null } {\n\t\t\treturn {\n\t\t\t\tvariantId: oVM.getCurrentVariantKey()\n\t\t\t};\n\t\t},\n\t\tapply: async function (this: ViewState, oVM: VariantManagement, controlState?: { variantId?: string | null }): Promise<void> {\n\t\t\ttry {\n\t\t\t\tif (controlState && controlState.variantId !== undefined && controlState.variantId !== oVM.getCurrentVariantKey()) {\n\t\t\t\t\tconst isVariantIdAvailable = this._checkIfVariantIdIsAvailable(oVM, controlState.variantId);\n\t\t\t\t\tlet sVariantReference;\n\t\t\t\t\tif (isVariantIdAvailable) {\n\t\t\t\t\t\tsVariantReference = controlState.variantId;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsVariantReference = oVM.getStandardVariantKey();\n\t\t\t\t\t\tthis.controlsVariantIdUnavailable.push(...oVM.getFor());\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst ControlVariantApplyAPI = (await import(\"sap/ui/fl/apply/api/ControlVariantApplyAPI\")).default;\n\t\t\t\t\t\tawait ControlVariantApplyAPI.activateVariant({\n\t\t\t\t\t\t\telement: oVM,\n\t\t\t\t\t\t\tvariantReference: sVariantReference as string\n\t\t\t\t\t\t});\n\t\t\t\t\t\tawait this._setInitialStatesForDeltaCompute(oVM);\n\t\t\t\t\t} catch (error: unknown) {\n\t\t\t\t\t\tLog.error(error as string);\n\t\t\t\t\t\tthis.invalidateInitialStateForApply.push(...oVM.getFor());\n\t\t\t\t\t\tawait this._setInitialStatesForDeltaCompute(oVM);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._setInitialStatesForDeltaCompute(oVM);\n\t\t\t\t}\n\t\t\t} catch (error: unknown) {\n\t\t\t\tLog.error(error as string);\n\t\t\t}\n\t\t}\n\t},\n\t\"sap.fe.templates.ListReport.controls.MultipleModeControl\": {\n\t\tretrieve: function (multipleModeControl: MultipleModeControl): { selectedKey: string } {\n\t\t\treturn {\n\t\t\t\tselectedKey: multipleModeControl.content.getSelectedKey()\n\t\t\t};\n\t\t},\n\t\tapply: function (multipleModeControl: MultipleModeControl, controlState?: { selectedKey: string }) {\n\t\t\tif (controlState?.selectedKey) {\n\t\t\t\tconst tabBar = multipleModeControl.content;\n\t\t\t\tif (tabBar.getItems().find((item) => (item as IconTabFilter).getKey() === controlState.selectedKey)) {\n\t\t\t\t\ttabBar.setSelectedKey(controlState.selectedKey);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\"sap.ui.mdc.Table\": {\n\t\trefreshBinding: function (oTable: MDCTable) {\n\t\t\tconst oTableBinding = oTable.getRowBinding();\n\t\t\tif (oTableBinding) {\n\t\t\t\tconst oRootBinding = oTableBinding.getRootBinding();\n\t\t\t\tconst aggregation = oTableBinding.getAggregation() as { hierarchyQualifier?: string } | undefined;\n\t\t\t\tif (oRootBinding === oTableBinding && aggregation?.hierarchyQualifier === undefined) {\n\t\t\t\t\t// absolute binding (except TreeTable, where we want to keep expansion states)\n\t\t\t\t\toTableBinding.refresh();\n\t\t\t\t} else {\n\t\t\t\t\t// relative binding or TreeTable\n\t\t\t\t\tconst oHeaderContext = oTableBinding.getHeaderContext();\n\t\t\t\t\tconst sGroupId = oTableBinding.getGroupId();\n\n\t\t\t\t\tif (oHeaderContext) {\n\t\t\t\t\t\toHeaderContext.requestSideEffects([{ $NavigationPropertyPath: \"\" }], sGroupId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tLog.info(`Table: ${oTable.getId()} was not refreshed. No binding found!`);\n\t\t\t}\n\t\t}\n\t},\n\t\"sap.m.SegmentedButton\": {\n\t\tretrieve: function (oSegmentedButton: SegmentedButton): { selectedKey: string } {\n\t\t\treturn {\n\t\t\t\tselectedKey: oSegmentedButton.getSelectedKey()\n\t\t\t};\n\t\t},\n\t\tapply: function (this: ViewState, oSegmentedButton: SegmentedButton, oControlState?: { selectedKey: string }): void {\n\t\t\tif (oControlState?.selectedKey && oControlState.selectedKey !== oSegmentedButton.getSelectedKey()) {\n\t\t\t\toSegmentedButton.setSelectedKey(oControlState.selectedKey);\n\t\t\t\tif (oSegmentedButton.getParent()?.isA(\"sap.ui.mdc.ActionToolbar\")) {\n\t\t\t\t\toSegmentedButton.fireEvent(\"selectionChange\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\"sap.m.Select\": {\n\t\tretrieve: function (oSelect: Select): { selectedKey: string } {\n\t\t\treturn {\n\t\t\t\tselectedKey: oSelect.getSelectedKey()\n\t\t\t};\n\t\t},\n\t\tapply: function (this: ViewState, oSelect: Select, oControlState?: { selectedKey: string }): void {\n\t\t\tif (oControlState?.selectedKey && oControlState.selectedKey !== oSelect.getSelectedKey()) {\n\t\t\t\toSelect.setSelectedKey(oControlState.selectedKey);\n\t\t\t\tif (oSelect.getParent()?.isA(\"sap.ui.mdc.ActionToolbar\")) {\n\t\t\t\t\toSelect.fireEvent(\"change\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\"sap.f.DynamicPage\": {\n\t\tretrieve: function (oDynamicPage: DynamicPage): { headerExpanded: boolean } {\n\t\t\treturn {\n\t\t\t\theaderExpanded: oDynamicPage.getHeaderExpanded()\n\t\t\t};\n\t\t},\n\t\tapply: function (oDynamicPage: DynamicPage, oControlState?: { headerExpanded: boolean }): void {\n\t\t\tif (oControlState) {\n\t\t\t\toDynamicPage.setHeaderExpanded(oControlState.headerExpanded);\n\t\t\t}\n\t\t}\n\t},\n\t\"sap.ui.core.mvc.View\": {\n\t\tretrieve: function (oView: FEView) {\n\t\t\tconst oController = oView.getController();\n\t\t\tif (oController && oController.viewState) {\n\t\t\t\treturn oController.viewState.retrieveViewState();\n\t\t\t}\n\t\t\treturn {};\n\t\t},\n\t\tapply: async function (oView: FEView, oControlState: ControlState, oNavParameters?: NavigationParameter, skipMerge?: boolean) {\n\t\t\tconst oController = oView.getController();\n\t\t\tif (oController && oController.viewState && oNavParameters) {\n\t\t\t\treturn oController.viewState.applyViewState(oControlState, oNavParameters, skipMerge);\n\t\t\t}\n\t\t},\n\t\trefreshBinding: async function (oView: FEView) {\n\t\t\tconst oController = oView.getController();\n\t\t\tif (oController && oController.viewState) {\n\t\t\t\treturn oController.viewState.refreshViewBindings();\n\t\t\t}\n\t\t}\n\t},\n\t\"sap.ui.core.ComponentContainer\": {\n\t\tretrieve: async function (this: ViewState, oComponentContainer: ComponentContainer): Promise<object> {\n\t\t\tconst oComponent = oComponentContainer.getComponentInstance();\n\t\t\tif (oComponent) {\n\t\t\t\treturn this.retrieveControlState(oComponent.getRootControl());\n\t\t\t}\n\t\t\treturn {} as object;\n\t\t},\n\t\tapply: async function (\n\t\t\tthis: ViewState,\n\t\t\toComponentContainer: ComponentContainer,\n\t\t\toControlState: object,\n\t\t\toNavParameters?: NavigationParameter\n\t\t): Promise<void> {\n\t\t\tconst oComponent = oComponentContainer.getComponentInstance();\n\t\t\tif (oComponent) {\n\t\t\t\treturn this.applyControlState(oComponent.getRootControl(), oControlState, oNavParameters);\n\t\t\t}\n\t\t}\n\t}\n};\n/**\n * A controller extension offering hooks for state handling\n *\n * If you need to maintain a specific state for your application, you can use the controller extension.\n * @hideconstructor\n * @public\n * @since 1.85.0\n */\n@defineUI5Class(\"sap.fe.core.controllerextensions.ViewState\")\nclass ViewState extends ControllerExtension {\n\tprivate _iRetrievingStateCounter: number;\n\n\tprivate _pInitialStateApplied: Promise<unknown>;\n\n\tprivate _pInitialStateAppliedResolve?: Function;\n\n\tpublic base!: PageController;\n\n\tinitialControlStatesMapper: Record<string, unknown> = {};\n\n\tcontrolsVariantIdUnavailable: string[] = [];\n\n\tinvalidateInitialStateForApply: string[] = [];\n\n\tviewStateControls: ManagedObject[] = [];\n\n\tstateContributors: (ManagedObject & IViewStateContributor<unknown>)[] = [];\n\n\t_currentViewState?: Record<string, unknown>;\n\n\tconfigOfStateApply?: {\n\t\tskipMerge?: boolean | undefined;\n\t\tnavTypeParameters?: NavParameters;\n\t\tstate?: Record<string, unknown>;\n\t};\n\n\tprivate updateAppStateTimer: number | undefined;\n\n\t/**\n\t * Constructor.\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis._iRetrievingStateCounter = 0;\n\t\tthis._pInitialStateApplied = new Promise((resolve) => {\n\t\t\tthis._pInitialStateAppliedResolve = resolve;\n\t\t});\n\t}\n\n\t@publicExtension()\n\t@finalExtension()\n\tasync refreshViewBindings(): Promise<void> {\n\t\tconst aControls = await this.collectResults(this.base.viewState.adaptBindingRefreshControls);\n\t\tlet oPromiseChain = Promise.resolve();\n\t\taControls\n\t\t\t.filter((oControl) => {\n\t\t\t\treturn oControl && oControl.isA && oControl.isA<ManagedObject>(\"sap.ui.base.ManagedObject\");\n\t\t\t})\n\t\t\t.forEach((oControl: ManagedObject) => {\n\t\t\t\toPromiseChain = oPromiseChain.then(this.refreshControlBinding.bind(this, oControl));\n\t\t\t});\n\t\treturn oPromiseChain;\n\t}\n\n\t/**\n\t * This function should add all controls relevant for refreshing to the provided control array.\n\t *\n\t * This function is meant to be individually overridden by consuming controllers, but not to be called directly.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.\n\t * @param aCollectedControls The collected controls\n\t * @protected\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tadaptBindingRefreshControls(aCollectedControls: ManagedObject[]): void {\n\t\t// to be overriden\n\t}\n\n\t@privateExtension()\n\t@finalExtension()\n\tasync refreshControlBinding(oControl: ManagedObject): Promise<void> {\n\t\tconst oControlRefreshBindingHandler = this.getControlRefreshBindingHandler(oControl);\n\t\tlet oPromiseChain = Promise.resolve();\n\t\tif (typeof oControlRefreshBindingHandler.refreshBinding !== \"function\") {\n\t\t\tLog.info(`refreshBinding handler for control: ${oControl.getMetadata().getName()} is not provided`);\n\t\t} else {\n\t\t\toPromiseChain = oPromiseChain.then(oControlRefreshBindingHandler.refreshBinding.bind(this, oControl));\n\t\t}\n\t\treturn oPromiseChain;\n\t}\n\n\t/**\n\t * Returns a map of <code>refreshBinding</code> function for a certain control.\n\t * @param oControl The control to get state handler for\n\t * @returns A plain object with one function: <code>refreshBinding</code>\n\t */\n\n\t@privateExtension()\n\t@finalExtension()\n\tgetControlRefreshBindingHandler(oControl: ManagedObject): {\n\t\trefreshBinding?: (oControl: ManagedObject) => void;\n\t} {\n\t\tconst oRefreshBindingHandler: {\n\t\t\trefreshBinding?: (oControl: ManagedObject) => void;\n\t\t} = {};\n\t\tif (oControl) {\n\t\t\tfor (const sType in _mControlStateHandlerMap) {\n\t\t\t\tif (oControl.isA(sType)) {\n\t\t\t\t\t// pass only the refreshBinding handler in an object so that :\n\t\t\t\t\t// 1. Application has access only to refreshBinding and not apply and reterive at this stage\n\t\t\t\t\t// 2. Application modifications to the object will be reflected here (as we pass by reference)\n\t\t\t\t\toRefreshBindingHandler[\"refreshBinding\"] =\n\t\t\t\t\t\t(_mControlStateHandlerMap[sType as keyof ControlStateMap].refreshBinding as (oControl: ManagedObject) => void) ||\n\t\t\t\t\t\t{};\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.base.viewState.adaptBindingRefreshHandler(oControl, oRefreshBindingHandler);\n\t\treturn oRefreshBindingHandler;\n\t}\n\n\t/**\n\t * Customize the <code>refreshBinding</code> function for a certain control.\n\t *\n\t * This function is meant to be individually overridden by consuming controllers, but not to be called directly.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.\n\t * @param _oControl The control for which the refresh handler is adapted.\n\t * @param _oControlHandler A plain object which can have one function: <code>refreshBinding</code>\n\t * @param _oControlHandler.refreshBinding\n\t * @protected\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\tadaptBindingRefreshHandler(\n\t\t_oControl: ManagedObject,\n\t\t_oControlHandler: {\n\t\t\trefreshBinding?: (oControl: ManagedObject) => void;\n\t\t}\n\t): void {\n\t\t// to be overriden\n\t}\n\n\t/**\n\t * Called when the application is suspended due to keep-alive mode.\n\t * @public\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\tonSuspend(): void {\n\t\t// to be overriden\n\t}\n\n\t/**\n\t * Called when the application is restored due to keep-alive mode.\n\t * @public\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\tonRestore(): void {\n\t\t// to be overriden\n\t}\n\n\t/**\n\t * Destructor method for objects.\n\t */\n\tdestroy(): void {\n\t\tdelete this._pInitialStateAppliedResolve;\n\t\tsuper.destroy();\n\t}\n\n\t/**\n\t * Helper function to enable multi override. It is adding an additional parameter (array) to the provided\n\t * function (and its parameters), that will be evaluated via <code>Promise.all</code>.\n\t * @param fnCall The function to be called\n\t * @param args\n\t * @returns A promise to be resolved with the result of all overrides\n\t */\n\t@privateExtension()\n\t@finalExtension()\n\tasync collectResults(fnCall: Function, ...args: unknown[]): Promise<Control[]> {\n\t\tconst aResults: Control[] = [];\n\t\targs.push(aResults);\n\t\tfnCall.apply(this, args);\n\t\treturn Promise.all(aResults);\n\t}\n\n\t/**\n\t * Customize the <code>retrieve</code> and <code>apply</code> functions for a certain control.\n\t *\n\t * This function is meant to be individually overridden by consuming controllers, but not to be called directly.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.\n\t * @param oControl The control to get state handler for\n\t * @param aControlHandler A list of plain objects with two functions: <code>retrieve</code> and <code>apply</code>\n\t * @protected\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tadaptControlStateHandler(oControl: ManagedObject, aControlHandler: object[]): void {\n\t\t// to be overridden if needed\n\t}\n\n\t/**\n\t * Returns a map of <code>retrieve</code> and <code>apply</code> functions for a certain control.\n\t * @param oControl The control to get state handler for\n\t * @returns A plain object with two functions: <code>retrieve</code> and <code>apply</code>\n\t */\n\t@privateExtension()\n\t@finalExtension()\n\tgetControlStateHandler(oControl: ManagedObject): ControlStateHandler<ManagedObject, object>[] {\n\t\tconst aInternalControlStateHandler: ControlStateHandler<ManagedObject, object>[] = [],\n\t\t\taCustomControlStateHandler: ControlStateHandler<ManagedObject, object>[] = [];\n\t\tif (oControl) {\n\t\t\tif (\n\t\t\t\toControl.isA<IViewStateContributor<object>>(\"sap.fe.core.controllerextensions.viewState.IViewStateContributor\") &&\n\t\t\t\toControl.retrieveState &&\n\t\t\t\toControl.applyState\n\t\t\t) {\n\t\t\t\taInternalControlStateHandler.push({\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/require-await\n\t\t\t\t\tretrieve: async (_control) => oControl.retrieveState.bind(oControl)(),\n\n\t\t\t\t\tapply: async (\n\t\t\t\t\t\t_control: ManagedObject,\n\t\t\t\t\t\tcontrolState?: object,\n\t\t\t\t\t\toNavParameters?: NavigationParameter,\n\t\t\t\t\t\tskipMerge?: boolean\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/require-await\n\t\t\t\t\t) => {\n\t\t\t\t\t\tconst shouldApplyDiffState =\n\t\t\t\t\t\t\t!this.invalidateInitialStateForApply.includes(oControl.getId()) &&\n\t\t\t\t\t\t\t!this.controlsVariantIdUnavailable.includes(oControl.getId()) &&\n\t\t\t\t\t\t\toNavParameters?.navigationType !== NavType.hybrid &&\n\t\t\t\t\t\t\tskipMerge !== true;\n\t\t\t\t\t\tif (!controlState) {\n\t\t\t\t\t\t\tif (oControl.applyLegacyState) {\n\t\t\t\t\t\t\t\tawait oControl.applyLegacyState.bind(oControl)(\n\t\t\t\t\t\t\t\t\tthis.getControlState.bind(this),\n\t\t\t\t\t\t\t\t\toNavParameters,\n\t\t\t\t\t\t\t\t\tshouldApplyDiffState,\n\t\t\t\t\t\t\t\t\tskipMerge\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tawait oControl.applyState.bind(oControl)(controlState, oNavParameters, shouldApplyDiffState, skipMerge);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tfor (const sType in _mControlStateHandlerMap) {\n\t\t\t\t\tif (oControl.isA(sType)) {\n\t\t\t\t\t\t// avoid direct manipulation of internal _mControlStateHandlerMap\n\t\t\t\t\t\taInternalControlStateHandler.push(\n\t\t\t\t\t\t\tObject.assign({}, _mControlStateHandlerMap[sType as keyof ControlStateMap]) as ControlStateHandler<\n\t\t\t\t\t\t\t\tManagedObject,\n\t\t\t\t\t\t\t\tobject\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.base.viewState.adaptControlStateHandler(oControl, aCustomControlStateHandler);\n\t\treturn aInternalControlStateHandler.concat(aCustomControlStateHandler);\n\t}\n\n\t/**\n\t * This function should add all controls for given view that should be considered for the state handling to the provided control array.\n\t *\n\t * This function is meant to be individually overridden by consuming controllers, but not to be called directly.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.\n\t * @param _aCollectedControls The collected controls\n\t * @protected\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\tadaptStateControls(_aCollectedControls: ManagedObject[]): void {\n\t\t_aCollectedControls.push(...this.stateContributors);\n\t}\n\n\t/**\n\t * Returns the key to be used for given control.\n\t * @param oControl The control to get state key for\n\t * @returns The key to be used for storing the controls state\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tgetStateKey(oControl: ManagedObject): string {\n\t\treturn this.getView().getLocalId(oControl.getId()) || oControl.getId();\n\t}\n\n\t/**\n\t * Retrieve the view state of this extensions view.\n\t * When this function is called more than once before finishing, all but the final response will resolve to <code>undefined</code>.\n\t * @returns A promise resolving the view state\n\t * @public\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tasync retrieveViewState(): Promise<Record<string, unknown> | undefined> {\n\t\t++this._iRetrievingStateCounter;\n\t\tlet oViewState: Record<string, unknown>;\n\n\t\ttry {\n\t\t\tawait this._pInitialStateApplied;\n\t\t\tconst aControls: (ManagedObject | undefined)[] = await this.collectResults(this.base.viewState.adaptStateControls);\n\t\t\tconst aResolvedStates = await Promise.all(\n\t\t\t\t(\n\t\t\t\t\taControls.filter(function (oControl) {\n\t\t\t\t\t\treturn oControl && oControl.isA && oControl.isA<ManagedObject>(\"sap.ui.base.ManagedObject\");\n\t\t\t\t\t}) as ManagedObject[]\n\t\t\t\t).map(async (oControl) => {\n\t\t\t\t\treturn this.retrieveControlState(oControl).then((vResult: unknown) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tkey: this.getStateKey(oControl),\n\t\t\t\t\t\t\tvalue: vResult\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t);\n\t\t\toViewState = aResolvedStates.reduce(function (oStates: Record<string, unknown>, mState: { key: string; value: unknown }) {\n\t\t\t\tconst oCurrentState: Record<string, unknown> = {};\n\t\t\t\toCurrentState[mState.key] = mState.value;\n\t\t\t\treturn mergeObjects(oStates, oCurrentState);\n\t\t\t}, {});\n\t\t\tconst prevState = this._currentViewState;\n\t\t\tif (prevState && Object.keys(prevState).length > 0) {\n\t\t\t\tthis._addMissingState(oViewState, prevState);\n\t\t\t}\n\t\t\tconst mAdditionalStates = await Promise.resolve(this._retrieveAdditionalStates());\n\t\t\tif (mAdditionalStates && Object.keys(mAdditionalStates).length) {\n\t\t\t\toViewState[ADDITIONAL_STATES_KEY] = mAdditionalStates;\n\t\t\t}\n\t\t} finally {\n\t\t\t--this._iRetrievingStateCounter;\n\t\t}\n\t\tthis._currentViewState = oViewState;\n\t\treturn this._iRetrievingStateCounter === 0 ? oViewState : undefined;\n\t}\n\n\t// To carry forward unapplied state lost due to lazy loading of controls.\n\t//\n\t// If user 1 changes a control's state in a lazy-loaded section and navigates away, then shares the URL with user 2,\n\t// who doesn't visit the lazy-loaded section, the control's state is missed in the new app state.\n\t// This ensures the full state from user 1 is preserved and transferred to user 3 when the URL is shared.\n\t_addMissingState(oViewState: Record<string, unknown>, prevState: Record<string, unknown>): void {\n\t\tfor (const key in prevState) {\n\t\t\tif (!(key in oViewState)) {\n\t\t\t\toViewState[key] = prevState[key];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Extend the map of additional states (not control bound) to be added to the current view state of the given view.\n\t *\n\t * This function is meant to be individually overridden by consuming controllers, but not to be called directly.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.\n\t * @param mAdditionalStates The additional state\n\t * @protected\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tretrieveAdditionalStates(mAdditionalStates: object): void {\n\t\t// to be overridden if needed\n\t}\n\n\t/**\n\t * Returns a map of additional states (not control bound) to be added to the current view state of the given view.\n\t * @returns Additional view states\n\t */\n\t_retrieveAdditionalStates(): unknown {\n\t\tconst mAdditionalStates = {};\n\t\tthis.base.viewState.retrieveAdditionalStates(mAdditionalStates);\n\t\treturn mAdditionalStates;\n\t}\n\n\t/**\n\t * Returns the current state for the given control.\n\t * @param oControl The object to get the state for\n\t * @returns The state for the given control\n\t */\n\t@privateExtension()\n\t@finalExtension()\n\tasync retrieveControlState(oControl: ManagedObject): Promise<object> {\n\t\tconst aControlStateHandlers = this.getControlStateHandler(oControl);\n\t\treturn Promise.all(\n\t\t\taControlStateHandlers.map(async (mControlStateHandler) => {\n\t\t\t\tif (typeof mControlStateHandler.retrieve !== \"function\") {\n\t\t\t\t\tthrow new Error(`controlStateHandler.retrieve is not a function for control: ${oControl.getMetadata().getName()}`);\n\t\t\t\t}\n\t\t\t\treturn mControlStateHandler.retrieve.call(this, oControl);\n\t\t\t})\n\t\t).then((aStates: object[]) => {\n\t\t\treturn aStates.reduce(function (oFinalState: Record<string, unknown>, oCurrentState: object) {\n\t\t\t\treturn mergeObjects(oFinalState, oCurrentState);\n\t\t\t}, {});\n\t\t});\n\t}\n\n\t/**\n\t * Defines whether the view state should only be applied once initially.\n\t *\n\t * This function is meant to be individually overridden by consuming controllers, but not to be called directly.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.Instead}.\n\t *\n\t * Important:\n\t * You should only override this method for custom pages and not for the standard ListReportPage and ObjectPage!\n\t * @returns If <code>true</code>, only the initial view state is applied once,\n\t * else any new view state is also applied on follow-up calls (default)\n\t * @protected\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.Instead)\n\tapplyInitialStateOnly(): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Retrieves the state of a specific control.\n\t * @param control The managed control object whose state is to be retrieved.\n\t * @returns - The state of the specified control.\n\t */\n\tgetControlState(control: ManagedObject): ControlState {\n\t\tconst oViewState = this._currentViewState;\n\t\tlet controlState: ControlState = {};\n\t\tif (oViewState) {\n\t\t\tconst controlKey = this.getStateKey(control);\n\t\t\tcontrolState = oViewState[controlKey] as Record<string, ControlState>;\n\t\t}\n\t\treturn controlState;\n\t}\n\n\t/**\n\t * Applies the given view state to this extensions view.\n\t * @param oViewState The view state to apply (can be undefined)\n\t * @param oNavParameter The current navigation parameter\n\t * @param oNavParameter.navigationType The actual navigation type\n\t * @param oNavParameter.selectionVariant The selectionVariant from the navigation\n\t * @param oNavParameter.selectionVariantDefaults The selectionVariant defaults from the navigation\n\t * @param oNavParameter.requiresStandardVariant Defines whether the standard variant must be used in variant management\n\t * @param skipMerge Boolean which determines to skip the key user shine through\n\t * @returns Promise for async state handling\n\t * @public\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tasync applyViewState(\n\t\toViewState: Record<string, unknown> | undefined,\n\t\toNavParameter: NavigationParameter,\n\t\tskipMerge?: boolean\n\t): Promise<void> {\n\t\tif (this.base.viewState.applyInitialStateOnly() && this._getInitialStateApplied()) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\t//SNOW: CS20230006765897 For transient AppState, we return without applying the state to controls in RootContainer's children views as there is no state to apply\n\t\t\t//Only need is to resolve the _pInitialStateApplied so that update of AppState can still happen\n\t\t\tif (this._isStateEmptyForIAppStateNavType(oViewState, oNavParameter.navigationType) && !this.__isRootViewController()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.collectResults(this.base.viewState.onBeforeStateApplied, [], oNavParameter.navigationType);\n\t\t\tconst aControls: ManagedObject[] = await this.collectResults(this.base.viewState.adaptStateControls);\n\t\t\tthis.viewStateControls = aControls;\n\t\t\tlet oPromiseChain = Promise.resolve();\n\t\t\tlet hasVariantManagement = false;\n\t\t\tthis._currentViewState = oViewState;\n\n\t\t\tthis.configOfStateApply = this.configOfStateApply ?? {};\n\t\t\tthis.configOfStateApply.skipMerge = skipMerge;\n\t\t\tthis.configOfStateApply.navTypeParameters = oNavParameter;\n\t\t\tthis.configOfStateApply.state = oViewState;\n\n\t\t\t/**\n\t\t\t * This ensures that variantManagement control is applied first to calculate the initial state for delta logic\n\t\t\t */\n\t\t\tconst sortedAdaptStateControls = aControls.reduce((modifiedControls: ManagedObject[], control) => {\n\t\t\t\tif (!control) {\n\t\t\t\t\treturn modifiedControls;\n\t\t\t\t}\n\t\t\t\tconst isVariantManagementControl = control.isA(\"sap.ui.fl.variants.VariantManagement\");\n\t\t\t\tif (!hasVariantManagement) {\n\t\t\t\t\thasVariantManagement = isVariantManagementControl;\n\t\t\t\t}\n\t\t\t\tmodifiedControls = isVariantManagementControl ? [control, ...modifiedControls] : [...modifiedControls, control];\n\t\t\t\treturn modifiedControls;\n\t\t\t}, []);\n\n\t\t\t// In case of no Variant Management, this ensures that initial states is set\n\t\t\tif (!hasVariantManagement) {\n\t\t\t\tthis._setInitialStatesForDeltaCompute();\n\t\t\t}\n\t\t\tsortedAdaptStateControls\n\t\t\t\t.filter(function (oControl) {\n\t\t\t\t\treturn oControl.isA(\"sap.ui.base.ManagedObject\");\n\t\t\t\t})\n\t\t\t\t.forEach((oControl) => {\n\t\t\t\t\tconst sKey = this.getStateKey(oControl);\n\t\t\t\t\toPromiseChain = oPromiseChain.then(\n\t\t\t\t\t\tthis.applyControlState.bind(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\toControl,\n\t\t\t\t\t\t\t(oViewState ? oViewState[sKey] : undefined) as Record<string, unknown>,\n\t\t\t\t\t\t\toNavParameter,\n\t\t\t\t\t\t\tskipMerge ?? false\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\tawait oPromiseChain;\n\t\t\tif (oNavParameter.navigationType === NavType.iAppState || oNavParameter.navigationType === NavType.hybrid) {\n\t\t\t\tawait this.collectResults(\n\t\t\t\t\tthis.base.viewState.applyAdditionalStates,\n\t\t\t\t\toViewState ? oViewState[ADDITIONAL_STATES_KEY] : undefined\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tawait this.collectResults(this.base.viewState.applyNavigationParameters, oNavParameter);\n\t\t\t\tawait this.collectResults(this.base.viewState._applyNavigationParametersToFilterbar, oNavParameter);\n\t\t\t}\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (!this._isStateEmptyForIAppStateNavType(oViewState, oNavParameter.navigationType)) {\n\t\t\t\t\tawait this.collectResults(this.base.viewState.onAfterStateApplied);\n\t\t\t\t}\n\t\t\t\tthis._setInitialStateApplied();\n\t\t\t} catch (e: unknown) {\n\t\t\t\tLog.error(e as string);\n\t\t\t}\n\t\t}\n\t}\n\n\t@privateExtension()\n\t_checkIfVariantIdIsAvailable(oVM: VariantManagement, sVariantId: string | null): boolean {\n\t\tconst aVariants = oVM.getVariants();\n\t\tlet bIsControlStateVariantAvailable = false;\n\t\taVariants.forEach(function (oVariant) {\n\t\t\tif (oVariant.getKey() === sVariantId) {\n\t\t\t\tbIsControlStateVariantAvailable = true;\n\t\t\t}\n\t\t});\n\t\treturn bIsControlStateVariantAvailable;\n\t}\n\n\t_setInitialStateApplied(): void {\n\t\tif (this._pInitialStateAppliedResolve) {\n\t\t\tconst pInitialStateAppliedResolve = this._pInitialStateAppliedResolve;\n\t\t\tdelete this._pInitialStateAppliedResolve;\n\t\t\tpInitialStateAppliedResolve();\n\t\t}\n\t}\n\n\t_getInitialStateApplied(): boolean {\n\t\treturn !this._pInitialStateAppliedResolve;\n\t}\n\n\t_isStateEmptyForIAppStateNavType(viewState: Record<string, unknown> | undefined, navType: string): boolean {\n\t\treturn (!viewState || Object.keys(viewState).length === 0) && navType == NavType.iAppState;\n\t}\n\n\t__isRootViewController(): boolean {\n\t\tconst rootViewController = this.base.getView().getController();\n\t\treturn (\n\t\t\trootViewController.isA<NavContainerController>(\"sap.fe.core.rootView.NavContainer\") ||\n\t\t\trootViewController.isA<FclController>(\"sap.fe.core.rootView.Fcl\")\n\t\t);\n\t}\n\n\t/**\n\t * Hook to react before a state for given view is applied.\n\t *\n\t * This function is meant to be individually overridden by consuming controllers, but not to be called directly.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.\n\t * @param aPromises Extensible array of promises to be resolved before continuing\n\t * @param navigationType Navigation type responsible for the applying the state\n\t * @protected\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tonBeforeStateApplied(aPromises: Promise<unknown>[], navigationType?: string): void {\n\t\t// to be overriden\n\t}\n\n\t/**\n\t * Hook to react when state for given view was applied.\n\t *\n\t * This function is meant to be individually overridden by consuming controllers, but not to be called directly.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.\n\t * @param aPromises Extensible array of promises to be resolved before continuing\n\t * @protected\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tonAfterStateApplied(aPromises: Promise<unknown>): void {\n\t\t// to be overriden\n\t}\n\n\t/**\n\t * Applying additional, not control related, states - is called only if navigation type is iAppState.\n\t *\n\t * This function is meant to be individually overridden by consuming controllers, but not to be called directly.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.\n\t * @param oViewState The current view state\n\t * @param aPromises Extensible array of promises to be resolved before continuing\n\t * @protected\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tapplyAdditionalStates(oViewState: object, aPromises: Promise<unknown>): void {\n\t\t// to be overridden if needed\n\t}\n\n\t@privateExtension()\n\t_applyNavigationParametersToFilterbar(_oNavParameter: NavigationParameter, _aPromises: Promise<unknown>): void {\n\t\t// to be overridden if needed\n\t}\n\n\t/**\n\t * Apply navigation parameters is not called if the navigation type is iAppState\n\t *\n\t * This function is meant to be individually overridden by consuming controllers, but not to be called directly.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.\n\t * @param oNavParameter The current navigation parameter\n\t * @param aPromises Extensible array of promises to be resolved before continuing\n\t * @protected\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\tapplyNavigationParameters(\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\toNavParameter: NavigationParameter,\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\taPromises: Promise<unknown>\n\t): void {\n\t\t// to be overridden if needed\n\t}\n\n\t/**\n\t * Applying the given state to the given control.\n\t * @param oControl The object to apply the given state\n\t * @param oControlState The state for the given control\n\t * @param [oNavParameters] The current navigation parameters\n\t * @param [skipMerge] Whether merge should be skipped or not\n\t * @returns Return a promise for async state handling\n\t */\n\t@privateExtension()\n\t@finalExtension()\n\tasync applyControlState(\n\t\toControl: ManagedObject,\n\t\toControlState: object,\n\t\toNavParameters?: NavigationParameter,\n\t\tskipMerge?: boolean\n\t): Promise<void> {\n\t\tconst aControlStateHandlers = this.getControlStateHandler(oControl);\n\t\tlet oPromiseChain = Promise.resolve();\n\t\taControlStateHandlers.forEach((mControlStateHandler) => {\n\t\t\tif (typeof mControlStateHandler.apply !== \"function\") {\n\t\t\t\tthrow new Error(`controlStateHandler.apply is not a function for control: ${oControl.getMetadata().getName()}`);\n\t\t\t}\n\t\t\toPromiseChain = oPromiseChain.then(mControlStateHandler.apply.bind(this, oControl, oControlState, oNavParameters, skipMerge));\n\t\t});\n\t\treturn oPromiseChain;\n\t}\n\n\t@publicExtension()\n\tpublic updateAppStateDebounced(): void {\n\t\tif (this.updateAppStateTimer) {\n\t\t\tclearTimeout(this.updateAppStateTimer);\n\t\t}\n\t\tthis.updateAppStateTimer = setTimeout(() => {\n\t\t\tthis.base.getExtensionAPI().updateAppState();\n\t\t}, 200) as unknown as number;\n\t}\n\n\t/**\n\t * Register a dedicated IViewStateContributor into the whole view state handling.\n\t * @param stateContributor The ViewStateContributor to register\n\t */\n\tregisterStateContributor(stateContributor: ManagedObject & IViewStateContributor<unknown>): void {\n\t\tif (this.stateContributors.includes(stateContributor)) {\n\t\t\t// no need to register the same control again\n\t\t\treturn;\n\t\t}\n\t\tthis.stateContributors.push(stateContributor);\n\t\tif (this._currentViewState) {\n\t\t\tconst controlKey = this.getStateKey(stateContributor);\n\t\t\tconst controlState = this._currentViewState[controlKey];\n\t\t\tconst navigationType = this.configOfStateApply?.navTypeParameters?.navigationType;\n\t\t\tconst skipMerge = this.configOfStateApply?.skipMerge;\n\t\t\tif (controlState && controlState === this.configOfStateApply?.state?.[controlKey]) {\n\t\t\t\t// To check whether diffstate shuold be called or not to applyExternalState\n\t\t\t\tconst shouldApplyDiffState =\n\t\t\t\t\t!this.invalidateInitialStateForApply.includes(stateContributor.getId()) &&\n\t\t\t\t\t!this.controlsVariantIdUnavailable.includes(stateContributor.getId()) &&\n\t\t\t\t\tnavigationType !== NavType.hybrid &&\n\t\t\t\t\tskipMerge !== true;\n\n\t\t\t\tstateContributor.applyState(controlState, undefined, shouldApplyDiffState);\n\t\t\t} else {\n\t\t\t\tthis.updateAppStateDebounced();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Deregister a dedicated IViewStateContributor from the whole view state handling.\n\t * @param stateContributor The ViewStateContributor to deregister\n\t */\n\tderegisterStateContributor(stateContributor: ManagedObject & IViewStateContributor<unknown>): void {\n\t\tconst targetIndex = this.stateContributors.findIndex((contributor) => contributor == stateContributor);\n\t\tif (targetIndex !== -1) {\n\t\t\tthis.stateContributors.splice(targetIndex, 1);\n\t\t}\n\t}\n\n\tgetInterface(): this {\n\t\treturn this;\n\t}\n\n\t// method to get the control state for mdc controls applying the delta logic\n\t_getControlState(controlStateKey: string, controlState: ControlState): ControlState {\n\t\tconst initialControlStatesMapper = this.initialControlStatesMapper;\n\t\tif (Object.keys(initialControlStatesMapper).length > 0 && initialControlStatesMapper[controlStateKey]) {\n\t\t\tif (Object.keys(initialControlStatesMapper[controlStateKey] as object).length === 0) {\n\t\t\t\tinitialControlStatesMapper[controlStateKey] = { ...controlState };\n\t\t\t}\n\t\t\treturn { fullState: controlState as object, initialState: initialControlStatesMapper[controlStateKey] as object };\n\t\t}\n\t\treturn controlState;\n\t}\n\n\t//method to store the initial states for delta computation of mdc controls\n\t_setInitialStatesForDeltaCompute = async (variantManagement?: VariantManagement): Promise<void> => {\n\t\ttry {\n\t\t\tconst adaptControls = this.viewStateControls;\n\n\t\t\tconst externalStatePromises: Promise<object>[] = [];\n\t\t\tconst controlStateKey: string[] = [];\n\t\t\tlet initialControlStates: object[] = [];\n\t\t\tconst variantControls: string[] = variantManagement?.getFor() ?? [];\n\n\t\t\tthis.updateInitialState(variantControls);\n\n\t\t\tawait Promise.all(\n\t\t\t\tadaptControls\n\t\t\t\t\t.filter(function (control) {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\tcontrol &&\n\t\t\t\t\t\t\t(!variantManagement || variantControls.includes((control as Control).getId())) &&\n\t\t\t\t\t\t\t((control as BaseObject).isA(\"sap.ui.mdc.Table\") ||\n\t\t\t\t\t\t\t\t(control as BaseObject).isA(\"sap.ui.mdc.FilterBar\") ||\n\t\t\t\t\t\t\t\t(control as BaseObject).isA(\"sap.ui.mdc.Chart\"))\n\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t\t\t.map(async (control) => {\n\t\t\t\t\t\tif (variantManagement) {\n\t\t\t\t\t\t\tthis._addEventListenersToVariantManagement(variantManagement, variantControls);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst externalStatePromise = (await getStateUtil()).retrieveExternalState(control as MDCControl);\n\t\t\t\t\t\texternalStatePromises.push(externalStatePromise);\n\t\t\t\t\t\tcontrolStateKey.push(this.getStateKey(control));\n\t\t\t\t\t})\n\t\t\t);\n\n\t\t\tinitialControlStates = await Promise.all(externalStatePromises);\n\t\t\tinitialControlStates.forEach((initialControlState: object, i: number) => {\n\t\t\t\tthis.initialControlStatesMapper[controlStateKey[i]] = initialControlState;\n\t\t\t});\n\t\t} catch (e: unknown) {\n\t\t\tLog.error(e as string);\n\t\t}\n\t};\n\n\t// Attach event to save and select of Variant Management to update the initial Control States on variant change\n\t_addEventListenersToVariantManagement(variantManagement: VariantManagement, variantControls: string[]): void {\n\t\tconst oPayload = { variantManagedControls: variantControls };\n\t\tconst fnEvent = (): void => {\n\t\t\tthis._updateInitialStatesOnVariantChange(variantControls);\n\t\t};\n\t\tvariantManagement.attachSave(oPayload, fnEvent, {});\n\t\tvariantManagement.attachSelect(oPayload, fnEvent, {});\n\t}\n\n\t_updateInitialStatesOnVariantChange(vmAssociatedControlsToReset: string[]): void {\n\t\tconst initialControlStatesMapper = this.initialControlStatesMapper;\n\t\tObject.keys(initialControlStatesMapper).forEach((controlKey) => {\n\t\t\tfor (const vmAssociatedcontrolKey of vmAssociatedControlsToReset) {\n\t\t\t\tif (vmAssociatedcontrolKey.includes(controlKey)) {\n\t\t\t\t\tinitialControlStatesMapper[controlKey] = {};\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.updateInitialState(vmAssociatedControlsToReset);\n\t}\n\n\t/**\n\t * Updates the initial state of the specified variant controls.\n\t * @param variantControls An array of control IDs for which the initial state needs to be updated.\n\t * @returns A promise that resolves when the initial state update is complete.\n\t */\n\tasync updateInitialState(variantControls: string[]): Promise<void> {\n\t\tconst viewControls: (ManagedObject | undefined)[] = this.stateContributors;\n\t\tawait Promise.all(\n\t\t\tviewControls.map(async (control) => {\n\t\t\t\tconst controlId: string = control?.getId() as string;\n\t\t\t\tif (\n\t\t\t\t\tvariantControls.includes(controlId) &&\n\t\t\t\t\tcontrol?.isA<IViewStateContributor<object>>(\"sap.fe.core.controllerextensions.viewState.IViewStateContributor\") &&\n\t\t\t\t\tcontrol.setInitialState\n\t\t\t\t) {\n\t\t\t\t\tawait control.setInitialState();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\t_isInitialStatesApplicable(\n\t\tinitialState: object | undefined,\n\t\tcontrol: FilterBar | MDCTable,\n\t\tskipMerge: boolean | undefined,\n\t\tisNavHybrid?: boolean\n\t): boolean {\n\t\treturn (\n\t\t\t!!initialState &&\n\t\t\t!this.invalidateInitialStateForApply.includes(control.getId()) &&\n\t\t\t!this.controlsVariantIdUnavailable.includes(control.getId()) &&\n\t\t\t(isNavHybrid ?? true) &&\n\t\t\tskipMerge !== true\n\t\t);\n\t}\n}\n\nexport default ViewState;\n"],"mappings":"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","ignoreList":[]}