{"version":3,"names":["ColumnType","getTableActions","lineItemAnnotation","visualizationPath","converterContext","standardActions","navigationSettings","tableActions","getTableAnnotationActions","manifestActions","getActionsFromManifest","getManifestControlConfiguration","actions","copyActions","filter","a","type","ActionType","Copy","annotationActions","annotationAndStandardActions","create","delete","massEdit","insights","creationRow","cut","paste","moveUp","moveDown","action","undefined","manifestAction","Object","values","Default","Menu","position","anchor","StandardActionKeys","Create","placement","Placement","Before","manifestActionEntries","entries","standardManifestActions","fromEntries","_ref","key","startsWith","nonStandardManifestActions","_ref2","actionOverwriteConfig","isNavigable","OverrideType","overwrite","enableOnSelect","enableAutoScroll","enabled","visible","visibleForContextMenu","defaultValuesExtensionFunction","command","menu","annotationMenuActionItems","getAnnotationMenuActionItems","matchingManifestActions","getMatchingManifestAction","overwrittenMenuActionItems","insertCustomElements","prepareMenuActions","removeDuplicateActions","getVisibilityEnablementMenuActions","commandActions","_exports","getTableColumns","annotationColumns","getColumnsFromAnnotations","manifestColumns","getColumnsFromManifest","columns","getAnnotationEntityType","tableColumns","width","widthIncludingColumnHeader","importance","horizontalAlign","availability","settings","formatOptions","exportSettings","addComputedColumns","getContextDefiningPropertiesFromAggregationAnnotation","aggregationHelper","customAggregateAnnotations","getCustomAggregateDefinitions","customAggregatedefinitions","forEach","annotation","aggregatedProperty","_entityType","entityProperties","find","property","name","qualifier","contextDefiningProperties","annotations","Aggregation","ContextDefiningProperties","map","ctxDefProperty","value","getExtensionInfoFromEntityType","entityType","AggregationHelper","isAnalyticsSupported","currencyOrUnitProperties","Set","column","tableColumn","unit","targetUnitProperty","prop","add","relativePath","contextDefiningPropertiesFromAggregation","result","propertyInfos","rawContextDefiningProperties","fromGroupableProperty","isPropertyGroupable","has","contextDefiningPropertyName","foundColumn","findColumnByPath","push","length","additionalProperties","updateTableVisualizationForType","tableVisualization","presentationVariantAnnotation","control","aggregationData","enableAnalytics","enable$select","enable$$getKeepAliveContext","analyticsExtensions","_updatePropertyInfosWithAggregatesDefinitions","allowedTransformations","getAllowedTransformations","enableBasicSearch","includes","groupConditions","getGroupConditions","aggregateConditions","getAggregateConditions","ModelHelper","isObjectPathDraftSupported","getDataModelObjectPath","requestAtLeast","isDraftRoot","getEntitySet","Log","error","changeSiblingForRootsSupported","Hierarchy","hierarchyQualifier","ChangeSiblingForRootsSupported","allowDropBetweenNodes","ChangeNextSiblingAction","enableUploadPlugin","streamProperty","UI","MediaResource","Stream","$target","uploadAction","uploadTable","stream","fileName","Core","ContentDisposition","Filename","path","fileNameMaxLength","maxLength","acceptableMediaTypes","AcceptableMediaTypes","createRequestedProperties","lineItem","operationAvailable","selectedFields","pushField","field","indexOf","pushFieldList","fields","operationAvailableProperties","split","validProperties","propName","resolvePath","semanticKeys","Common","SemanticKey","semanticKey","capabilitiesAnnotation","Capabilities","alternateAndSecondaryKeys","getAlternateAndSecondaryKeys","RequestAtLeast","propertyPath","getNavigationAvailableFieldsFromLineItem","DeleteRestrictions","Deletable","UpdateRestrictions","Updatable","record","$Type","Inline","Determining","isPathAnnotationExpression","NavigationAvailable","getNavigationTargetPath","navigationPropertyPath","manifestWrapper","getManifestWrapper","getNavigationConfiguration","navConfig","keys","dataModelPath","contextPath","getContextPath","navConfigForContextPath","targetEntitySet","startingEntitySet","annotationColumn","updateLinkedProperties","dataModelObjectPath","getConverterContextFor","oColumn","propertyDataModelObjectPath","enhanceDataModelPath","targetObject","addCurrencyOrUoMToProperty","timezoneProperty","getAssociatedTimezoneProperty","timezone","Timezone","oTimezoneColumn","timezoneText","toString","displayMode","getDisplayMode","textAnnotation","Text","textColumn","textArrangement","textProperty","mode","currencyOrUoMProperty","getAssociatedCurrencyPropertyPath","getAssociatedUnitPropertyPath","currencyOrUoMPropertyDataModelObjectPath","currencyOrUoMRelativePath","getContextRelativeTargetObjectPath","unitColumn","Measures","ISOCurrency","Unit","unitText","getSemanticKeysAndTitleInfo","headerInfoTitlePath","HeaderInfo","Title","Value","semanticKeyAnnotations","headerInfoTypeName","TypeName","semanticKeyColumns","createTableVisualization","params","isCondensedTableLayoutCompliant","selectionVariantAnnotation","tableManifestConfig","getTableManifestConfiguration","splitPath","navigationTargetPath","operationAvailableMap","getOperationAvailableMap","semanticKeysAndHeaderInfoTitle","standardActionsConfiguration","getStandardActionsConfiguration","tableAnnotation","getTableAnnotationConfiguration","getOperationAvailableProperties","header","title","oVisualization","VisualizationType","Table","JSON","stringify","headerInfoTitle","headerVisible","handlePatchSent","getTemplateType","TemplateType","ListReport","createDefaultTableVisualization","isBlankTable","getColumnsFromEntityType","getEntityType","creationMode","ActionHelper","getCurrentEntitySetUpdatablePath","restrictions","getRestrictions","entitySet","updatable","isUpdatable","isOnlyDynamicOnCurrentEntity","isConstant","expression","navigationExpression","_type","updatableExpression","updatablePropertyPath","properties","actionName","propertyName","size","titleProperty","Array","from","join","getUIHiddenExpForActionsRequiringContext","currentEntityType","contextDataModelObjectPath","aUiHiddenPathExpressions","dataField","ActionTarget","isBound","sourceEntityType","RequiresContext","valueOf","Hidden","equal","getHiddenExpressionAtTableLevel","getPathFromActionAnnotation","source","constant","substring","splitPathForNavigationProperty","navigationPath","isNavigationProperty","partner","pathInModel","slice","updateManifestActionAndTagIt","dataFieldId","some","actionKey","requiresSelection","hasBoundActionsAlwaysVisibleInToolBar","manifestActionId","generate","Action","SemanticObject","hasCustomActionsAlwaysVisibleInToolBar","customActions","reduce","menuAction","getVisibleExpForCustomActionsRequiringContext","aVisiblePathExpressions","resolveBindingString","getCapabilityRestriction","isDeletable","isPathDeletable","isPathUpdatable","getSelectionMode","isEntitySet","targetCapabilities","deleteButtonVisibilityExpression","massEditVisibilityExpression","arguments","cutButtonVisibilityExpression","tableManifestSettings","tableType","tableSettings","selectionMode","SelectionMode","Multi","None","compileExpression","ifElse","ForceMulti","ForceSingle","Single","aHiddenBindingExpressions","aVisibleBindingExpressions","isParentDeletable","parentEntitySetDeletable","ObjectPage","bMassEditEnabled","Auto","buttonVisibilityExpression","or","and","IsEditable","editModebuttonVisibilityExpression","concat","copyDataField","getCopyAction","dataFieldIsCopyAction","annotationPath","getEntitySetBasedAnnotationPath","fullyQualifiedName","KeyHelper","generateKeyFromDataField","visibleExpression","visibleForContextMenuExpression","text","Label","Library","getResourceBundleFor","getText","isDataFieldForActionAbstract","tableAction","getDataFieldAnnotationAction","isDataFieldForActionGroup","dataFieldGroup","DataFieldForAction","sEntityType","_useEnabledExpression","getEnabledForAnnotationAction","DataFieldForIntentBasedNavigation","id","Actions","getHighlightRowBinding","criticalityAnnotation","isDraftRootOrNode","targetEntityType","defaultHighlightRowDefinition","MessageType","getExpressionFromAnnotation","getMessageTypeFromCriticalityType","formatResult","Entity","HasActive","IsActive","IsInactive","tableFormatters","rowHighlighting","_getCreationBehaviour","tableManifestConfiguration","navigation","detail","originalTableSettings","outbound","outboundDetail","CreationMode","NewPage","External","CreationDialog","warning","newAction","targetAnnotations","targetAnnotationsCommon","targetAnnotationsSession","Session","DraftRoot","NewAction","StickySessionSupported","CreationRow","Error","route","append","createAtEnd","navigateToTarget","info","_getRowConfigurationProperty","targetPath","navigationInfo","criticalityProperty","Criticality","navigationTarget","display","target","getDraftRoot","getDraftNode","checkEditable","routePath","recreateContext","rowNavigatedExpression","navigatedRow","rowNavigated","rowCriticalityForInsights","criticalityExpressionForIntegrationCards","not","columnsToBeCreated","tableCreationMode","displayModeOfDescriptionPropertiesMap","restrictionsOnProperties","propertiesNotToBeConsidered","groupableProperties","getGroupableProperties","getAssociatedTextProperty","textProp","exists","targetType","relatedPropertiesInfo","collectRelatedProperties","relatedPropertyNames","additionalPropertyNames","addPropertyToDisplayModeOfDescriptionPropertiesMap","columnInfo","getColumnDefinitionFromProperty","dataPointTargetValue","exportDataPointTargetValue","annotationProperty","updatePropertyLabel","additionalPropertyInfos","additionalPropertyName","nonSortableProperties","relatedColumns","_createRelatedColumns","fullPropertyPath","useDataFieldPrefix","availableForAdaptation","relativePathForMultiValue","semanticObjectAnnotationPath","getSemanticObjectPath","isHidden","isReferencePropertyStaticallyHidden","groupPath","_sliceAtSlash","isGroup","label","getLabel","dataType","getDataFieldDataType","propertyTypeConfig","getTypeConfig","isAPropertyFromTextOnlyAnnotation","sortable","filterable","nonFilterableProperties","typeConfig","className","constraints","_isExportableColumn","createColumnExportSettings","collectedNavigationPropertyLabels","_getCollectedNavigationPropertyLabels","replaceSpecialChars","Annotation","groupLabel","group","semanticObjectPath","isGroupable","isKey","caseSensitive","isFilteringCaseSensitive","getImportance","DataFieldDefault","required","isRequiredColumn","additionalLabels","_addToolTip","_setExportSettingsForDataPoint","enhancedColumn","extension","technicallyAggregatable","technicallyGroupable","unitProperty","utc","isATimezone","currencyProperty","scale","isProperty","getAssociatedUnitProperty","getAssociatedCurrencyProperty","getStaticUnitOrCurrency","getStaticTimezone","isTimezone","exportType","getExportDataType","inputFormat","getDateInputFormat","delimiter","getDelimiter","template","wrap","autoScale","removeUndefinedFromExportSettings","setting","columnName","linkedAnnotationColumns","col","tooltip","propertyType","dataFieldDefaultProperty","Target","MediaType","term","isURL","_isValidColumn","_getVisibleExpression","dataFieldModelPath","propertyValue","isAnalyticalGroupHeaderExpanded","isAnalyticalLeaf","_getFieldGroupHiddenExpressions","fieldGroupHiddenExpressions","Data","innerDataField","dataFieldDefault","isDataFieldTypes","_getTooltip","QuickInfo","datapointTarget","getRowStatusVisibility","colName","isSemanticKeyInFieldGroup","getErrorStatusTextVisibilityFormatter","existingColumns","relatedPropertyNameMap","getAbsoluteAnnotationPath","relatedColumn","propertyObjectPath","isMultiValueField","newNameRelativeTargetPath","computeHiddenOnRelatedColumns","newName","propertyInfo","_getAnnotationColumnName","createTechnicalProperty","relatedAdditionalPropertyNameMap","columnExists","additionalProperty","technicalColumn","aggregatable","_getShowDataFieldsLabel","fieldGroupName","columnKeys","showDataFieldsLabel","_getRelativePath","isLastSlash","isLastPart","iSlashIndex","lastIndexOf","_isColumnMultiValued","_isColumnSortable","nonSortableColumns","filterFunctions","_getFilterFunctions","isArray","ConverterContext","TypeGuards","FilterFunctions","getEntityContainer","_getDefaultFormatOptionsForTable","textLinesEdit","_findSemanticKeyValues","aSemanticKeyValues","bSemanticKeyFound","i","semanticKeyFound","_findProperties","semanticKeyValues","fieldGroupProperties","semanticKeyHasPropertyInFieldGroup","sPropertyPath","tmp","fieldGroupPropertyPath","_findSemanticKeyValuesInFieldGroup","aProperties","_propertiesFound","getDefaultDraftIndicatorForColumn","semanticKeyInFieldGroup","fieldGroupDraftIndicatorPropertyPath","showErrorObjectStatus","hasDraftIndicator","_getImpNumber","Importance","_getDataFieldImportance","targetValuefromDP","getTargetValueOnDataPoint","isDataPointFromDataFieldDefault","_getMaxImportance","maxImpNumber","impNumber","DataFieldWithMaxImportance","requiredProperties","getRequiredProperties","highKeys","fieldsWithImportance","isAnnotationOfType","dataFieldTarget","fieldGroupData","fieldGroupDataField","High","item","getRestrictionsOnProperties","getTableType","defaultCreationMode","getSapFeManifestConfiguration","macros","table","InlineCreationRows","getAnnotationsByTerm","tableConverterContext","getTargetObjectPath","collectRelatedPropertiesRecursively","sLabel","isFieldGroupColumn","navigationProperties","situationsNavProps","navigationProperty","isCollection","SAPObjectNodeType","Name","situationsNavProp","hasSituationsIndicator","isMultiValue","visualSettings","widthCalculation","FieldGroupHiddenExpressions","HTML5","CssDefaults","isPartOfLineItem","relatedPropertyName","displayModeOfPropertyUsedAsDescription","createPropertyAnnotatedTextOnly","_getPropertyNames","matchedProperties","isRequiredFieldGroup","fieldGroup","isDataField","isStaticallyMandatory","isAnnotatedRequiredProperty","isRequiredDataFieldForAnnotation","dataFieldForAnnotation","DataFieldForAnnotationFieldControlNotMandatory","hasFieldControlNotMandatory","hasFieldGroupTarget","hasDataPointTarget","Visualization","isRequiredDataPoint","isRequiredProperty","isRatingVisualizationFromDataFieldDefault","dataPoint","AnalyticalListPage","isDataFieldForAnnotation","_appendCustomTemplate","exportProperties","internalColumns","isAnnotationColumn","isSlotColumn","manifestColumn","Slot","isCustomColumn","_updateLinkedPropertiesOnCustomColumns","annotationTableColumns","replace","isPartOfCustomColumn","validateKey","baseTableColumn","After","propertiesToOverwriteAnnotationColumn","isActionNavigable","getCustomExportSettings","tooltipText","fetchTextFromMetaModel","headerText","customColumnExportSettings","baseManifestColumn","HorizontalAlign","Begin","customTableColumn","message","getDiagnostics","addIssue","IssueCategory","Manifest","IssueSeverity","Low","IssueCategoryType","AnnotationColumns","InvalidKey","columnWithSituationsIndicator","situationsIndicatorColumn","propertyKey","isSituationsIndicator","Computed","clipboardSettings","indexOfFirstVisibleColumn","findIndex","splice","columnsWithDraftIndicator","isDraftNode","columnWithDraftIndicator","draftIndicatorColumn","isDraftIndicator","columnIndexToInsertAfter","getP13nMode","variantManagement","getVariantManagement","modes","isAnalyticalTable","isResponsiveTable","personalization","sort","aggregate","VariantManagementType","Control","_isFilterBarHidden","isFilterBarHidden","hasMultipleVisualizations","getSortConditions","sortConditions","sorters","SortOrder","condition","conditionProperty","Property","infoName","convertPropertyPathsToInfoNames","descending","Descending","getInitialExpansionLevel","level","InitialExpansionLevel","paths","infoNames","currentPath","groupLevels","GroupBy","aGroupBy","aggregatablePropertyName","aggregatablePropertyDefinition","additionalPropertyInfo","getContextPropertyRestriction","capabilities","InsertRestrictions","RequiredProperties","extensionInfoMap","Total","aTotals","creationBehaviour","standardActionsContext","generateStandardActionsContext","getCutVisibility","getDeleteVisibility","massEditButtonVisibilityExpression","getMassEditVisibility","isInsertUpdateActionsTemplated","getInsertUpdateActionsTemplating","isDraftOrStickySupported","getStandardActionCut","getStandardActionCreate","getStandardActionDelete","getStandardActionPaste","getStandardActionMassEdit","getStandardActionInsights","getCreationRow","configuration","getStandardActionMoveUpDown","typeNamePlural","TypeNamePlural","pageManifestSettings","hasAbsolutePath","p13nMode","getTableID","threshold","MaxItems","isSearchable","isPathSearchable","apiId","entityName","entityTypeName","collection","row","isInDisplayMode","searchable","initialExpansionLevel","isCurrency","exportDataType","targetNavigationPropertyPath","getSelectionVariantConfiguration","selectionVariantPath","resolvedTarget","getEntityTypeAnnotation","selection","propertyNames","SelectOptions","selectOption","PropertyName","_getFullScreenBasedOnDevice","isIphone","enableFullScreen","IssueType","FULLSCREENMODE_NOT_ON_LISTREPORT","_getMultiSelectMode","multiSelectMode","selectAll","useIconTabBar","_getTableMode","isTemplateListReport","rowCountMode","rowCount","_getCondensedTableLayout","_tableType","_tableSettings","condensedTableLayout","_getTableSelectionLimit","selectionLimit","_getTableInlineCreationRowCount","inlineCreationRowCount","_getEnableExport","enablePaste","enableExport","_getFrozenColumnCount","frozenColumnCount","_getWidthIncludingColumnHeader","getFilterConfiguration","hideTableTitle","filters","quickVariantSelection","quickFilterPaths","filterPaths","quickFilters","showCounts","hiddenFilters","navProperty","useEnabledExpression","OperationAvailable","overloadAction","sourceType","staticAction","parameters","updateTreeTableManifestConfiguration","tableConfiguration","hierarchyParentNavigationPropertyPath","getHierarchyParentNavigationPropertyPath","nonUpdatableNavigationProperties","getNonUpdatableNavigationProperties","isHierarchyParentNodeUpdatable","isNodeMovable","getCustomFunctionInfo","isMoveToPositionAllowed","createEnablement","isCreateEnabled","nodeType","nodeTypeInfo","creationDialogFields","getFieldList","creationFields","createInPlace","lastDotIndex","moduleName","methodName","additionalRequiredModules","getOptimisticBatchSettingsFromManifest","disableRequestCache","getMassEditSettings","defaultFieldConfiguration","visibleFields","ignoredFields","operationGroupingMode","OperationGroupingMode","Isolated","ChangeSet","enableMassEdit","customFragment","trim","checkCondensedLayout","_manifestWrapper","globalFEManifestSettings","enableAutoColumnWidth","isPhone","disableCopyToClipboard","templateType","isCondensedLayoutCompliant","oFilterConfiguration","customValidationFunction","exportRequestSize","tableRowMode","defaultScrollThreshold","inlineCreationRowsHiddenInEditMode","useTextForNoDataMessages","getUseTextForNoDataMessages","oConfiguration","hasDataStateIndicatorFilter","disableAddRowButtonForEmptyData","enablePastingOfComputedProperties","enableAddCardToInsights","showRowCount","getViewConfiguration","useCondensedTableLayout","isCompactType","beforeRebindTable","selectionChange","modeForNoDataMessage","scrollThreshold","isPropertyNavigated","inheredPropertyDataModelObjectPath","isInheredPropertyNavigated","oProperty","oTargetMapping","isTypeDefinition","EDM_TYPE_MAPPING","underlyingType","$Scale","precision","$Precision","$MaxLength","nullable","$Nullable","minimum","isNaN","Validation","Minimum","maximum","Maximum","isDigitSequence","IsDigitSequence","parseAsString","emptyString","parseKeepsEmptyString","relatedAnnotationColumns","existingColumn","columnKey","columnFromAnnotations","enableWrapping","customExportSettings"],"sourceRoot":".","sources":["Table.ts"],"sourcesContent":["import type {\n\tEntitySet,\n\tEntityType,\n\tNavigationProperty,\n\tPathAnnotationExpression,\n\tProperty,\n\tPropertyAnnotationValue,\n\tPropertyPath\n} from \"@sap-ux/vocabularies-types\";\nimport type { FilterFunctions } from \"@sap-ux/vocabularies-types/vocabularies/Capabilities\";\nimport type { EntitySetAnnotations_Capabilities } from \"@sap-ux/vocabularies-types/vocabularies/Capabilities_Edm\";\nimport type { SemanticKey } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport { CommonAnnotationTerms } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport type { EntitySetAnnotations_Common } from \"@sap-ux/vocabularies-types/vocabularies/Common_Edm\";\nimport type { EntitySetAnnotations_Session } from \"@sap-ux/vocabularies-types/vocabularies/Session_Edm\";\nimport type {\n\tCriticality,\n\tDataField,\n\tDataFieldAbstractTypes,\n\tDataFieldForAction,\n\tDataFieldForActionGroup,\n\tDataFieldForActionTypes,\n\tDataFieldForAnnotation,\n\tDataFieldForIntentBasedNavigation,\n\tDataFieldTypes,\n\tDataPoint,\n\tDataPointTypeTypes,\n\tFieldGroup,\n\tLineItem,\n\tPresentationVariantType,\n\tSelectOptionType,\n\tSelectionVariant,\n\tSelectionVariantType\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTerms, UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport type { BindingToolkitExpression, CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport {\n\tEDM_TYPE_MAPPING,\n\tand,\n\tcompileExpression,\n\tconstant,\n\tequal,\n\tformatResult,\n\tgetExpressionFromAnnotation,\n\tifElse,\n\tisConstant,\n\tnot,\n\tor,\n\tpathInModel,\n\tresolveBindingString\n} from \"sap/fe/base/BindingToolkit\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport type { ComplexPropertyInfo } from \"sap/fe/core/converters/annotations/DataField\";\nimport {\n\tcollectRelatedProperties,\n\tcollectRelatedPropertiesRecursively,\n\tgetDataFieldDataType,\n\tgetSemanticObjectPath,\n\tgetTargetValueOnDataPoint,\n\thasDataPointTarget,\n\thasFieldGroupTarget,\n\tisDataField,\n\tisDataFieldForActionAbstract,\n\tisDataFieldForActionGroup,\n\tisDataFieldForAnnotation,\n\tisDataFieldTypes,\n\tisDataPointFromDataFieldDefault,\n\tisRatingVisualizationFromDataFieldDefault,\n\tvisibleExpression\n} from \"sap/fe/core/converters/annotations/DataField\";\nimport type {\n\tAnnotationAction,\n\tAnnotationActionGroup,\n\tBaseAction,\n\tCombinedAction,\n\tCustomAction,\n\tOverrideTypeAction\n} from \"sap/fe/core/converters/controls/Common/Action\";\nimport {\n\tdataFieldIsCopyAction,\n\tgetActionsFromManifest,\n\tgetAnnotationMenuActionItems,\n\tgetCopyAction,\n\tgetEnabledForAnnotationAction,\n\tgetMatchingManifestAction,\n\tgetVisibilityEnablementMenuActions,\n\tisActionNavigable,\n\tprepareMenuActions,\n\tremoveDuplicateActions\n} from \"sap/fe/core/converters/controls/Common/Action\";\nimport type { ConfigurableObject, CustomElement } from \"sap/fe/core/converters/helpers/ConfigurableObject\";\nimport { OverrideType, Placement, insertCustomElements } from \"sap/fe/core/converters/helpers/ConfigurableObject\";\nimport { IssueCategory, IssueCategoryType, IssueSeverity, IssueType } from \"sap/fe/core/converters/helpers/IssueManager\";\nimport { KeyHelper } from \"sap/fe/core/converters/helpers/Key\";\nimport { Entity, UI } from \"sap/fe/core/helpers/BindingHelper\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport { generate, replaceSpecialChars } from \"sap/fe/core/helpers/StableIdHelper\";\nimport * as TypeGuards from \"sap/fe/core/helpers/TypeGuards\";\nimport {\n\tisAnnotationOfType,\n\tisNavigationProperty,\n\tisPathAnnotationExpression,\n\tisProperty,\n\tisTypeDefinition\n} from \"sap/fe/core/helpers/TypeGuards\";\nimport {\n\tenhanceDataModelPath,\n\tgetContextPropertyRestriction,\n\tgetContextRelativeTargetObjectPath,\n\tgetHierarchyParentNavigationPropertyPath,\n\tgetNonUpdatableNavigationProperties,\n\tgetTargetObjectPath,\n\tisPathDeletable,\n\tisPathSearchable,\n\tisPathUpdatable,\n\ttype DataModelObjectPath\n} from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { getDisplayMode, type DisplayMode } from \"sap/fe/core/templating/DisplayModeFormatter\";\nimport { getRestrictionsOnProperties, type RestrictionsOnProperties } from \"sap/fe/core/templating/EntitySetHelper\";\nimport { hasFieldControlNotMandatory, isStaticallyMandatory } from \"sap/fe/core/templating/FieldControlHelper\";\nimport {\n\tgetAssociatedCurrencyProperty,\n\tgetAssociatedCurrencyPropertyPath,\n\tgetAssociatedTextProperty,\n\tgetAssociatedTimezoneProperty,\n\tgetAssociatedUnitProperty,\n\tgetAssociatedUnitPropertyPath,\n\tgetStaticTimezone,\n\tgetStaticUnitOrCurrency,\n\tisTimezone\n} from \"sap/fe/core/templating/PropertyHelper\";\nimport { isMultiValueField } from \"sap/fe/core/templating/UIFormatters\";\nimport type { DefaultTypeForEdmType } from \"sap/fe/core/type/EDM\";\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { criticalityExpressionForIntegrationCards } from \"sap/fe/core/templating/CriticalityFormatters\";\nimport tableFormatters from \"sap/fe/macros/formatters/TableFormatter\";\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport ActionHelper from \"sap/fe/macros/internal/helpers/ActionHelper\";\nimport Library from \"sap/ui/core/Lib\";\nimport MessageType from \"sap/ui/core/message/MessageType\";\nimport type ConverterContext from \"../../ConverterContext\";\nimport type {\n\tAvailabilityType,\n\tCustomDefinedTableColumn,\n\tCustomDefinedTableColumnForOverride,\n\tFormatOptionsType,\n\tManifestAction,\n\tNavigationSettingsConfiguration,\n\tNavigationTargetConfiguration,\n\tTableColumnSettings,\n\tTableManifestConfiguration,\n\tTableManifestSettingsConfiguration\n} from \"../../ManifestSettings\";\nimport {\n\tActionType,\n\tCreationMode,\n\tHorizontalAlign,\n\tImportance,\n\tOperationGroupingMode,\n\tSelectionMode,\n\tTemplateType,\n\tVariantManagementType,\n\tVisualizationType\n} from \"../../ManifestSettings\";\nimport type ManifestWrapper from \"../../ManifestWrapper\";\nimport { AggregationHelper } from \"../../helpers/Aggregation\";\nimport { isReferencePropertyStaticallyHidden } from \"../../helpers/DataFieldHelper\";\nimport { getTableID } from \"../../helpers/ID\";\nimport { getMessageTypeFromCriticalityType } from \"./Criticality\";\nimport type { StandardAction } from \"./table/StandardActions\";\nimport {\n\tStandardActionKeys,\n\tgenerateStandardActionsContext,\n\tgetCreationRow,\n\tgetCutVisibility,\n\tgetDeleteVisibility,\n\tgetInsertUpdateActionsTemplating,\n\tgetMassEditVisibility,\n\tgetRestrictions,\n\tgetStandardActionCreate,\n\tgetStandardActionCut,\n\tgetStandardActionDelete,\n\tgetStandardActionInsights,\n\tgetStandardActionMassEdit,\n\tgetStandardActionMoveUpDown,\n\tgetStandardActionPaste,\n\tisDraftOrStickySupported,\n\tisInDisplayMode\n} from \"./table/StandardActions\";\n\ntype UploadTableSettings = {\n\tstream: string;\n\tfileName?: string;\n\tfileNameMaxLength?: int;\n\tacceptableMediaTypes?: string[];\n\tmaxLength?: int;\n\tuploadAction?: StandardAction;\n};\n\ntype RowNavigationInfo =\n\t| {\n\t\t\ttype: \"Outbound\";\n\t\t\tnavigationTarget: string;\n\t\t\tnavigationInEditMode?: boolean;\n\t  }\n\t| {\n\t\t\ttype: \"Navigation\";\n\t\t\ttargetPath: string;\n\t\t\tcheckEditable: boolean;\n\t\t\trecreateContext: boolean;\n\t\t\troutePath: string;\n\t\t\tnavigationInEditMode?: boolean;\n\t  };\n\ntype RowConfiguration = {\n\taction?: string;\n\tnavigationInfo?: RowNavigationInfo;\n\trowHighlighting: CompiledBindingToolkitExpression;\n\trowNavigated: CompiledBindingToolkitExpression;\n\trowCriticalityForInsights?: CompiledBindingToolkitExpression;\n\tvisible?: CompiledBindingToolkitExpression;\n};\n\nexport type MassEditTableConfiguration = {\n\tenabled: boolean;\n\tvisibleFields: string[];\n\tignoredFields: string[];\n\toperationGroupingMode: OperationGroupingMode;\n\tcustomFragment?: string;\n};\n\ntype TableSortConditions = {\n\tsorters: {\n\t\tname: string;\n\t\tdescending: boolean;\n\t}[];\n};\n\ntype TableGroupConditions = {\n\tgroupLevels: { name: string }[];\n};\n\ntype TableAggregateConditions = Record<string, object>;\n\ntype TableP13nMode = \"Aggregate\" | \"Column\" | \"Filter\" | \"Group\" | \"Sort\";\n\nexport type TableAnnotationConfiguration = {\n\tcollection: string;\n\tvariantManagement: VariantManagementType;\n\tfilterId?: string;\n\tid: string;\n\tapiId: string;\n\tnavigationPath: string;\n\tp13nMode?: TableP13nMode[];\n\trow?: RowConfiguration;\n\tselectionMode: string | undefined;\n\tisInsertUpdateActionsTemplated: boolean;\n\tupdatablePropertyPath: string;\n\tdisplayMode?: boolean;\n\tthreshold: number;\n\tentityName: string;\n\tentityTypeName: string;\n\tsortConditions?: TableSortConditions;\n\tgroupConditions?: TableGroupConditions;\n\taggregateConditions?: TableAggregateConditions;\n\tinitialExpansionLevel?: number;\n\tallowDropBetweenNodes?: boolean;\n\tchangeSiblingForRootsSupported?: boolean;\n\t/** Create new entries */\n\tcreate: CreateBehavior | CreateBehaviorExternal;\n\ttitle: string | undefined;\n\tsearchable: boolean;\n\trequiredProperties?: string[];\n\tuploadTable?: UploadTableSettings;\n};\n/**\n * New entries are created within the app (default case)\n */\nexport type CreateBehavior = {\n\tmode: CreationMode;\n\tappend: boolean;\n\tnewAction?: string;\n\tnavigateToTarget?: string;\n};\n\nexport type ExternalMethodConfig = {\n\tmoduleName: string;\n\tmethodName: string;\n};\n/**\n * New entries are created by navigating to some target\n */\nexport type CreateBehaviorExternal = {\n\tmode: \"External\";\n\toutbound: string;\n\toutboundDetail: NavigationTargetConfiguration[\"outboundDetail\"];\n\tnavigationSettings: NavigationSettingsConfiguration;\n};\nexport type TableCapabilityRestriction = {\n\tisDeletable: boolean;\n\tisUpdatable: boolean;\n};\nexport type TableFiltersConfiguration = {\n\tpaths: {\n\t\tannotationPath: string;\n\t}[];\n\tshowCounts?: boolean;\n};\nexport type SelectionVariantConfiguration = {\n\tpropertyNames: string[];\n\ttext?: string;\n};\n\nexport type TableControlConfiguration = {\n\tdisableRequestCache: boolean;\n\tcreateAtEnd: boolean;\n\tcreateInPlace?: boolean;\n\tcreationMode: CreationMode;\n\tdisableAddRowButtonForEmptyData: boolean;\n\tcustomValidationFunction: string | undefined;\n\tuseCondensedTableLayout: boolean;\n\tenableExport: boolean;\n\tenablePastingOfComputedProperties?: boolean;\n\tfrozenColumnCount?: number;\n\twidthIncludingColumnHeader?: boolean;\n\theader?: string;\n\theaderVisible?: boolean;\n\tfilters?: Partial<Record<\"quickFilters\" | \"hiddenFilters\", TableFiltersConfiguration>>;\n\ttype: TableType;\n\trowCountMode?: TableRowCountMode;\n\trowCount?: number;\n\tscrollThreshold?: number;\n\tselectAll?: boolean;\n\tselectionLimit: number;\n\tmultiSelectMode: string | undefined;\n\tenablePaste: boolean;\n\tdisableCopyToClipboard?: boolean;\n\tenableFullScreen: boolean;\n\tshowRowCount: boolean;\n\tinlineCreationRowCount?: number;\n\tinlineCreationRowsHiddenInEditMode?: boolean;\n\tmassEdit: MassEditTableConfiguration;\n\tenableAutoColumnWidth: boolean;\n\thasDataStateIndicatorFilter: boolean;\n\tisCompactType?: boolean;\n\thierarchyQualifier?: string;\n\tisHierarchyParentNodeUpdatable?: boolean;\n\tenableAddCardToInsights?: boolean | undefined;\n\tcreationDialogFields?: string[];\n\tnodeType?: {\n\t\tpropertyName: string;\n\t\tvalues: { value: string; text: string; creationDialogFields?: string[] }[];\n\t};\n\tcreateEnablement?: ExternalMethodConfig;\n\tisNodeMovable?: ExternalMethodConfig;\n\tisMoveToPositionAllowed?: ExternalMethodConfig;\n\tselectionChange?: string;\n\tadditionalRequiredModules?: string[];\n\tbeforeRebindTable?: string;\n\texportRequestSize?: number;\n\tenableUploadPlugin?: boolean;\n\tmodeForNoDataMessage?: string;\n};\nexport type TableType = \"GridTable\" | \"ResponsiveTable\" | \"AnalyticalTable\" | \"TreeTable\";\nexport type TableRowCountMode = \"Auto\" | \"Fixed\";\n\nenum ColumnType {\n\tDefault = \"Default\", // Default Type (Custom Column)\n\tAnnotation = \"Annotation\",\n\tSlot = \"Slot\",\n\tComputed = \"Computed\"\n}\n// Custom Column from Manifest\nexport type ManifestDefinedCustomColumn = CustomDefinedTableColumn & {\n\ttype?: ColumnType.Default;\n};\n// Slot Column from Building Block\nexport type FragmentDefinedSlotColumn = CustomDefinedTableColumn & {\n\ttype: ColumnType.Slot;\n};\n// Properties all ColumnTypes have:\nexport type BaseTableColumn = ConfigurableObject & {\n\ttype: ColumnType; //Origin of the source where we are getting the templated information from\n\twidth?: string;\n\twidthIncludingColumnHeader?: boolean;\n\timportance?: Importance;\n\thorizontalAlign?: HorizontalAlign;\n\tavailability?: AvailabilityType;\n\tisNavigable?: boolean;\n\tcaseSensitive: boolean;\n\tlabel?: string;\n\ttooltip?: string;\n};\n// Properties on Custom Columns and Slot Columns\nexport type CustomBasedTableColumn = BaseTableColumn & {\n\tid: string;\n\tname: string;\n\theader?: string;\n\ttemplate: string;\n\tpropertyInfos?: string[];\n\texportSettings?: ColumnExportSettings | null;\n\tformatOptions: FormatOptionsType;\n\tisGroupable: boolean;\n\tisNavigable: boolean;\n\tsortable: boolean;\n\tvisualSettings: { widthCalculation: null };\n\tproperties?: string[];\n\trequired?: CompiledBindingToolkitExpression;\n};\n\nexport type ComputedTableColumn = BaseTableColumn & {\n\tname: string;\n\tlabel: string;\n\tpropertyKey: string;\n\tisDraftIndicator?: boolean;\n\tisSituationsIndicator?: boolean;\n\tformatOptions?: FormatOptionsType | null;\n\tpropertyInfos?: string[];\n\texportSettings?: ColumnExportSettings | null;\n\tclipboardSettings?: Object | null;\n\trequired?: CompiledBindingToolkitExpression;\n};\n\n// Properties derived from Manifest to override Annotation configurations\nexport type AnnotationTableColumnForOverride = BaseTableColumn & {\n\tsettings?: TableColumnSettings;\n\tformatOptions?: FormatOptionsType;\n\texportSettings?: ColumnExportSettings | null;\n};\nexport type PropertyTypeConstraints = Partial<{\n\tscale: number;\n\tprecision: number;\n\tmaxLength: number;\n\tnullable: boolean;\n\tminimum: string;\n\tmaximum: string;\n\tisDigitSequence: boolean;\n}>;\nexport type PropertyTypeFormatOptions = Partial<{\n\tparseAsString: boolean;\n\temptyString: string;\n\tparseKeepsEmptyString: boolean;\n}>;\nexport type PropertyTypeConfig = {\n\ttype?: string;\n\tconstraints: PropertyTypeConstraints;\n\tformatOptions: PropertyTypeFormatOptions;\n\ttypeInstance?: unknown;\n\tbaseType?: string;\n\tclassName?: keyof typeof DefaultTypeForEdmType;\n};\nexport type ColumnExportSettings = Partial<{\n\ttemplate: string;\n\tlabel: string;\n\twrap: boolean;\n\ttype: string;\n\tinputFormat: string;\n\tformat: string;\n\tscale: number;\n\tdelimiter: boolean;\n\tunit: string;\n\tunitProperty: string;\n\ttimezone: string;\n\ttimezoneProperty: string;\n\tutc: boolean;\n\tdataPointTargetValue: string;\n\tisCurrency: boolean;\n\tproperty: string[];\n\twidth: number;\n\tautoScale: boolean;\n}>;\n// Properties for Annotation Columns\nexport type AnnotationTableColumn = AnnotationTableColumnForOverride & {\n\tname: string;\n\tpropertyInfos?: string[];\n\tannotationPath: string;\n\trelativePath: string;\n\tlabel?: string;\n\ttooltip?: string;\n\tgroupLabel?: string;\n\tgroup?: string;\n\tFieldGroupHiddenExpressions?: CompiledBindingToolkitExpression;\n\tshowDataFieldsLabel?: boolean;\n\trequired?: CompiledBindingToolkitExpression;\n\tisKey?: boolean;\n\tisGroupable?: boolean;\n\tunit?: string;\n\tunitText?: string;\n\ttimezoneText?: string;\n\ttimezone?: string;\n\tsemanticObjectPath?: string;\n\tsortable: boolean;\n\tfilterable?: boolean;\n\texportSettings?: ColumnExportSettings | null;\n\ttextArrangement?: {\n\t\ttextProperty: string;\n\t\tmode: DisplayMode;\n\t};\n\tadditionalPropertyInfos?: string[];\n\tvisualSettings?: VisualSettings;\n\ttypeConfig?: PropertyTypeConfig;\n\tisPartOfLineItem?: boolean; // temporary indicator to only allow filtering on navigation properties when they're part of a line item\n\tisPartOfCustomColumn?: boolean;\n\tadditionalLabels?: string[];\n\texportDataPointTargetValue?: string;\n\taggregatable?: boolean;\n\textension?: ExtensionForAnalytics;\n\tisMultiValue?: boolean;\n};\nexport type ExtensionForAnalytics = {\n\tadditionalProperties?: string[];\n};\nexport type TechnicalColumn = AnnotationTableColumn & {\n\textension?: {\n\t\ttechnicallyGroupable: boolean;\n\t\ttechnicallyAggregatable: boolean;\n\t};\n};\nexport type VisualSettings = {\n\twidthCalculation?: WidthCalculation;\n};\nexport type WidthCalculation = null | {\n\tminWidth?: number;\n\tmaxWidth?: number;\n\tdefaultWidth?: number;\n\ttruncateLabel?: boolean;\n\tgap?: number;\n\t// only relevant for complex types\n\texcludeProperties?: string[];\n\tverticalArrangement?: boolean;\n};\n\nexport type TableColumn = CustomBasedTableColumn | AnnotationTableColumn | ComputedTableColumn | TechnicalColumn;\nexport type ManifestColumn = CustomElement<CustomBasedTableColumn | AnnotationTableColumnForOverride>;\nexport type InternalExtensionForAnalytics = ExtensionForAnalytics & {\n\tfromGroupableProperty: boolean;\n\trelativePath: string;\n};\nexport type TableVisualization = {\n\ttype: VisualizationType.Table;\n\tannotation: TableAnnotationConfiguration;\n\tcontrol: TableControlConfiguration;\n\tcolumns: TableColumn[];\n\tactions: BaseAction[];\n\tcommandActions?: Record<string, CustomAction>;\n\tanalyticsExtensions?: Record<string, InternalExtensionForAnalytics>;\n\trequestAtLeast?: string[];\n\tenableAnalytics?: boolean;\n\tenableBasicSearch?: boolean;\n\toperationAvailableMap: string;\n\toperationAvailableProperties: string;\n\theaderInfoTitle: string;\n\tsemanticKeys: string[];\n\theaderInfoTypeName: PropertyAnnotationValue<String> | undefined;\n\tenable$select: boolean;\n\tenable$$getKeepAliveContext: boolean;\n\tisInsightsEnabled?: boolean;\n\theader?: string;\n\theaderVisible?: boolean;\n\thandlePatchSent: boolean;\n};\n\n/**\n * Returns an array of all standard, annotation-based, and manifest-based table actions.\n * @param lineItemAnnotation\n * @param visualizationPath\n * @param converterContext\n * @param standardActions\n * @param navigationSettings\n * @returns The complete table actions\n */\nexport function getTableActions(\n\tlineItemAnnotation: LineItem,\n\tvisualizationPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActions: StandardActionsConfiguration[\"standardActions\"],\n\tnavigationSettings?: NavigationSettingsConfiguration\n): CombinedAction {\n\t// 1. Get actions from annotations\n\tconst tableActions = getTableAnnotationActions(lineItemAnnotation, visualizationPath, converterContext);\n\t// 2. Get actions from manifest\n\tconst manifestActions = getActionsFromManifest(\n\t\tconverterContext.getManifestControlConfiguration<TableManifestConfiguration>(visualizationPath).actions as Record<\n\t\t\tstring,\n\t\t\tManifestAction\n\t\t>,\n\t\tconverterContext,\n\t\ttableActions.tableActions,\n\t\tnavigationSettings,\n\t\ttrue\n\t);\n\t// The \"Copy\" action always needs to be placed after the \"Create\" action, so we need to separate it\n\tconst copyActions = tableActions.tableActions.filter((a) => a.type === ActionType.Copy);\n\tconst annotationActions = tableActions.tableActions.filter((a) => a.type !== ActionType.Copy);\n\t// Combine standard, annotation, and custom actions together, respecting the fixed order of standard actions\n\tconst annotationAndStandardActions = (\n\t\t[\n\t\t\t...annotationActions,\n\t\t\tstandardActions.create,\n\t\t\t...copyActions,\n\t\t\tstandardActions.delete,\n\t\t\tstandardActions.massEdit,\n\t\t\tstandardActions.insights,\n\t\t\tstandardActions.creationRow, // Not templated as a button\n\t\t\tstandardActions.cut,\n\t\t\tstandardActions.paste,\n\t\t\tstandardActions.moveUp,\n\t\t\tstandardActions.moveDown\n\t\t] as BaseAction[]\n\t).filter((action) => action !== undefined);\n\t// Anchor all non-anchored manifest custom actions/menus before the standard actions\n\tfor (const manifestAction of Object.values(manifestActions.actions)) {\n\t\tif ((manifestAction.type === ActionType.Default || manifestAction.type === ActionType.Menu) && !manifestAction.position?.anchor) {\n\t\t\tmanifestAction.position = {\n\t\t\t\tanchor: StandardActionKeys.Create,\n\t\t\t\tplacement: Placement.Before\n\t\t\t};\n\t\t}\n\t}\n\t// Insert twice to allow regular override for non-standard actions and positional override for standard actions\n\tconst manifestActionEntries = Object.entries(manifestActions.actions);\n\tconst standardManifestActions = Object.fromEntries(manifestActionEntries.filter(([key]) => key.startsWith(\"StandardAction::\")));\n\tconst nonStandardManifestActions = Object.fromEntries(manifestActionEntries.filter(([key]) => !standardManifestActions[key]));\n\tconst actionOverwriteConfig: OverrideTypeAction = {\n\t\tisNavigable: OverrideType.overwrite,\n\t\tenableOnSelect: OverrideType.overwrite,\n\t\tenableAutoScroll: OverrideType.overwrite,\n\t\tenabled: OverrideType.overwrite,\n\t\tvisible: OverrideType.overwrite,\n\t\tvisibleForContextMenu: OverrideType.overwrite,\n\t\tdefaultValuesExtensionFunction: OverrideType.overwrite,\n\t\tcommand: OverrideType.overwrite,\n\t\tposition: OverrideType.overwrite,\n\t\tmenu: OverrideType.overwrite\n\t};\n\t// 3. Get all annotation menu items\n\tconst annotationMenuActionItems = getAnnotationMenuActionItems(annotationActions);\n\t// 4. Find manifest actions which override any annotation menu items\n\tconst matchingManifestActions = getMatchingManifestAction(annotationMenuActionItems, manifestActions.actions);\n\t// 5. Get overridden annotation menu items\n\tconst overwrittenMenuActionItems = insertCustomElements(annotationMenuActionItems, matchingManifestActions, actionOverwriteConfig);\n\t// 6. Override all actions\n\tlet actions = insertCustomElements(annotationAndStandardActions, nonStandardManifestActions, actionOverwriteConfig) as CustomAction[];\n\tactions = insertCustomElements(actions, standardManifestActions, {\n\t\tposition: OverrideType.overwrite\n\t});\n\t// 7. Replace original menu items with their corresponding overridden menu items\n\tprepareMenuActions(actions, overwrittenMenuActionItems);\n\t// 8. Remove duplicate actions which are menu items\n\tactions = removeDuplicateActions(actions);\n\t// 9. Hide menus where all menu items are hidden\n\tactions = getVisibilityEnablementMenuActions(actions);\n\treturn {\n\t\tactions: actions,\n\t\tcommandActions: manifestActions.commandActions\n\t};\n}\n/**\n * Returns an array of all columns, annotation-based as well as manifest-based.\n * They are sorted and some properties can be overwritten via the manifest (check out the keys that can be overwritten).\n * @param lineItemAnnotation Collection of data fields for representation in a table or list\n * @param visualizationPath\n * @param converterContext\n * @param navigationSettings\n * @returns Returns all table columns that should be available, regardless of templating or personalization or their origin\n */\nexport function getTableColumns(\n\tlineItemAnnotation: LineItem,\n\tvisualizationPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tnavigationSettings?: NavigationSettingsConfiguration\n): TableColumn[] {\n\tconst annotationColumns = getColumnsFromAnnotations(lineItemAnnotation, visualizationPath, converterContext);\n\tconst manifestColumns = getColumnsFromManifest(\n\t\tconverterContext.getManifestControlConfiguration<TableManifestConfiguration>(visualizationPath).columns ?? {},\n\t\tannotationColumns,\n\t\tconverterContext,\n\t\tconverterContext.getAnnotationEntityType(lineItemAnnotation),\n\t\tnavigationSettings\n\t);\n\n\tconst tableColumns: TableColumn[] = insertCustomElements(\n\t\tannotationColumns as TableColumn[],\n\t\tmanifestColumns as Record<string, CustomElement<TableColumn>>,\n\t\t{\n\t\t\twidth: OverrideType.overwrite,\n\t\t\twidthIncludingColumnHeader: OverrideType.overwrite,\n\t\t\timportance: OverrideType.overwrite,\n\t\t\thorizontalAlign: OverrideType.overwrite,\n\t\t\tavailability: OverrideType.overwrite,\n\t\t\tisNavigable: OverrideType.overwrite,\n\t\t\tsettings: OverrideType.overwrite,\n\t\t\tformatOptions: OverrideType.overwrite,\n\t\t\texportSettings: OverrideType.overwrite\n\t\t}\n\t);\n\n\treturn addComputedColumns(tableColumns, visualizationPath, converterContext);\n}\n\n//Returns the ContextDefiningProperties from the custom aggregate annotation or from the aggregation annotation on the property itself.\nfunction getContextDefiningPropertiesFromAggregationAnnotation(aggregationHelper: AggregationHelper): Record<string, string[]> {\n\tconst customAggregateAnnotations = aggregationHelper.getCustomAggregateDefinitions();\n\tconst customAggregatedefinitions: Record<string, string[]> = {};\n\tcustomAggregateAnnotations.forEach((annotation) => {\n\t\tconst aggregatedProperty = aggregationHelper._entityType.entityProperties.find((property) => {\n\t\t\treturn property.name === annotation.qualifier;\n\t\t});\n\t\tif (aggregatedProperty) {\n\t\t\tconst contextDefiningProperties =\n\t\t\t\tannotation.annotations?.Aggregation?.ContextDefiningProperties ??\n\t\t\t\taggregatedProperty.annotations.Aggregation?.ContextDefiningProperties;\n\t\t\tcustomAggregatedefinitions[aggregatedProperty.name] =\n\t\t\t\tcontextDefiningProperties?.map((ctxDefProperty) => ctxDefProperty.value) ?? [];\n\t\t}\n\t});\n\treturn customAggregatedefinitions;\n}\n\n/**\n * Retrieve the extension information for all aggregable properties .\n * @param entityType The target entity type.\n * @param tableColumns The array of columns for the entity type.\n * @param converterContext The converter context.\n * @returns The aggregate definitions from the entityType, or undefined if the entity doesn't support analytical queries.\n */\nexport const getExtensionInfoFromEntityType = function (\n\tentityType: EntityType,\n\ttableColumns: TableColumn[],\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): Record<string, InternalExtensionForAnalytics> | undefined {\n\tconst aggregationHelper = new AggregationHelper(entityType, converterContext);\n\tif (!aggregationHelper.isAnalyticsSupported()) {\n\t\treturn undefined;\n\t}\n\t// Keep a set of all currency/unit properties, as we don't want to consider them as aggregates\n\t// They are aggregates for technical reasons (to manage multi-units situations) but it doesn't make sense from a user standpoint\n\tconst currencyOrUnitProperties = new Set();\n\ttableColumns.forEach((column) => {\n\t\tconst tableColumn = column as AnnotationTableColumn;\n\t\tif (tableColumn.unit) {\n\t\t\tconst targetUnitProperty = tableColumns.find((prop) => prop.name === tableColumn.unit) as AnnotationTableColumn;\n\t\t\tcurrencyOrUnitProperties.add(targetUnitProperty.relativePath);\n\t\t}\n\t});\n\tconst contextDefiningPropertiesFromAggregation = getContextDefiningPropertiesFromAggregationAnnotation(aggregationHelper);\n\tconst result: Record<string, InternalExtensionForAnalytics> = {};\n\ttableColumns.forEach((column) => {\n\t\tconst tableColumn = column as AnnotationTableColumn;\n\t\tconst property = entityType.entityProperties.find((prop) => prop.name === tableColumn.relativePath);\n\t\tif (tableColumn.propertyInfos === undefined && tableColumn.relativePath) {\n\t\t\tlet rawContextDefiningProperties = contextDefiningPropertiesFromAggregation[tableColumn.relativePath] as string[] | undefined;\n\n\t\t\t// if there is no custom aggregate definition, and the property is groupable, then we can use the default context defining properties\n\t\t\tlet fromGroupableProperty = false;\n\t\t\tif (!rawContextDefiningProperties && property && !!aggregationHelper.isPropertyGroupable(property)) {\n\t\t\t\tfromGroupableProperty = true;\n\t\t\t\trawContextDefiningProperties = property.annotations.Aggregation?.ContextDefiningProperties?.map(\n\t\t\t\t\t(ctxDefProperty) => ctxDefProperty.value\n\t\t\t\t);\n\t\t\t}\n\t\t\t// Ignore aggregates corresponding to currencies or units of measure\n\t\t\tif (rawContextDefiningProperties && !currencyOrUnitProperties.has(tableColumn.relativePath)) {\n\t\t\t\tresult[tableColumn.name] = {\n\t\t\t\t\tfromGroupableProperty: fromGroupableProperty,\n\t\t\t\t\trelativePath: tableColumn.relativePath\n\t\t\t\t};\n\t\t\t\tconst contextDefiningProperties: string[] = [];\n\t\t\t\trawContextDefiningProperties.forEach((contextDefiningPropertyName) => {\n\t\t\t\t\t// Ignore contextdefiningproperties corresponding to currencies or units of measure\n\t\t\t\t\tif (currencyOrUnitProperties.has(contextDefiningPropertyName)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst foundColumn = findColumnByPath(contextDefiningPropertyName, tableColumns);\n\t\t\t\t\tif (foundColumn) {\n\t\t\t\t\t\tcontextDefiningProperties.push(foundColumn.name);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (contextDefiningProperties.length) {\n\t\t\t\t\tresult[tableColumn.name].additionalProperties = contextDefiningProperties;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\treturn result;\n};\n/**\n * Updates a table visualization for analytical use cases.\n * @param tableVisualization The visualization to be updated\n * @param entityType The entity type displayed in the table\n * @param converterContext The converter context\n * @param presentationVariantAnnotation The presentationVariant annotation (if any)\n */\nexport function updateTableVisualizationForType(\n\ttableVisualization: TableVisualization,\n\tentityType: EntityType,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tpresentationVariantAnnotation?: PresentationVariantType\n): void {\n\tif (tableVisualization.control.type === \"AnalyticalTable\") {\n\t\tconst aggregationData = getExtensionInfoFromEntityType(entityType, tableVisualization.columns, converterContext),\n\t\t\taggregationHelper = new AggregationHelper(entityType, converterContext);\n\t\tif (aggregationData) {\n\t\t\ttableVisualization.enableAnalytics = true;\n\t\t\ttableVisualization.enable$select = false;\n\t\t\ttableVisualization.enable$$getKeepAliveContext = false;\n\t\t\ttableVisualization.analyticsExtensions = aggregationData;\n\t\t\t_updatePropertyInfosWithAggregatesDefinitions(tableVisualization);\n\t\t\tconst allowedTransformations = aggregationHelper.getAllowedTransformations();\n\t\t\ttableVisualization.enableBasicSearch = allowedTransformations ? allowedTransformations.includes(\"search\") : true;\n\t\t\t// Add group and sort conditions from the presentation variant\n\t\t\ttableVisualization.annotation.groupConditions = getGroupConditions(\n\t\t\t\tpresentationVariantAnnotation,\n\t\t\t\ttableVisualization.columns,\n\t\t\t\ttableVisualization.control.type\n\t\t\t);\n\t\t\ttableVisualization.annotation.aggregateConditions = getAggregateConditions(\n\t\t\t\tpresentationVariantAnnotation,\n\t\t\t\ttableVisualization.columns,\n\t\t\t\taggregationData\n\t\t\t);\n\n\t\t\tif (ModelHelper.isObjectPathDraftSupported(converterContext.getDataModelObjectPath())) {\n\t\t\t\t// For an analytical table displaying a draft-enabled entity, we always load 'HasActiveEntity'\n\t\t\t\t// because it's needed for the row criticality expression\n\t\t\t\tif (tableVisualization.requestAtLeast) {\n\t\t\t\t\ttableVisualization.requestAtLeast.push(\"HasActiveEntity\");\n\t\t\t\t} else {\n\t\t\t\t\ttableVisualization.requestAtLeast = [\"HasActiveEntity\"];\n\t\t\t\t}\n\n\t\t\t\t// We always load 'HasDraftEntity' in a LR because it's needed to navigate to the draft instance if there's one when clicking on the active instance\n\t\t\t\tif (ModelHelper.isDraftRoot(converterContext.getEntitySet())) {\n\t\t\t\t\ttableVisualization.requestAtLeast.push(\"HasDraftEntity\");\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tLog.error(`Aggregation not supported for this entity type: ${entityType.name}`);\n\t\t}\n\t\ttableVisualization.control.type = \"GridTable\"; // AnalyticalTable isn't a real type for the MDC:Table, so we always switch back to Grid\n\t} else if (tableVisualization.control.type === \"ResponsiveTable\") {\n\t\ttableVisualization.annotation.groupConditions = getGroupConditions(\n\t\t\tpresentationVariantAnnotation,\n\t\t\ttableVisualization.columns,\n\t\t\ttableVisualization.control.type\n\t\t);\n\t} else if (tableVisualization.control.type === \"TreeTable\") {\n\t\tconst aggregationHelper = new AggregationHelper(entityType, converterContext);\n\t\tconst allowedTransformations = aggregationHelper.getAllowedTransformations();\n\t\ttableVisualization.enableBasicSearch = allowedTransformations ? allowedTransformations.includes(\"search\") : true;\n\t\ttableVisualization.enable$$getKeepAliveContext = true;\n\t\ttableVisualization.annotation.changeSiblingForRootsSupported = (entityType?.annotations.Hierarchy?.[\n\t\t\t`RecursiveHierarchyActions#${tableVisualization.control.hierarchyQualifier ?? \"\"}`\n\t\t]?.ChangeSiblingForRootsSupported ?? true) as boolean;\n\n\t\ttableVisualization.annotation.allowDropBetweenNodes =\n\t\t\t!!entityType.annotations.Hierarchy?.[`RecursiveHierarchyActions#${tableVisualization.control.hierarchyQualifier ?? \"\"}`]\n\t\t\t\t?.ChangeNextSiblingAction;\n\n\t\t// We always load 'HasDraftEntity' in a LR because it's needed to navigate to the draft instance if there's one when clicking on the active instance\n\t\tif (ModelHelper.isDraftRoot(converterContext.getEntitySet())) {\n\t\t\tif (tableVisualization.requestAtLeast) {\n\t\t\t\ttableVisualization.requestAtLeast.push(\"HasDraftEntity\");\n\t\t\t} else {\n\t\t\t\ttableVisualization.requestAtLeast = [\"HasDraftEntity\"];\n\t\t\t}\n\t\t}\n\t}\n\n\tif (tableVisualization.control.enableUploadPlugin) {\n\t\tconst streamProperty = converterContext.getAnnotationEntityType().annotations?.UI?.MediaResource?.Stream?.$target;\n\t\tif (!streamProperty) {\n\t\t\tthrow \"UI.MediaResource annotation with Stream property missing\";\n\t\t}\n\n\t\t// the upload action is treated as the create action\n\t\tconst uploadAction = tableVisualization.actions.find((a) => a.key === StandardActionKeys.Create) as StandardAction;\n\n\t\ttableVisualization.annotation.uploadTable = {\n\t\t\tstream: streamProperty.name,\n\t\t\tfileName: (streamProperty.annotations.Core?.ContentDisposition?.Filename as PathAnnotationExpression<string> | undefined)?.path,\n\t\t\tfileNameMaxLength: streamProperty.annotations.Core?.ContentDisposition?.Filename?.$target?.maxLength,\n\t\t\tacceptableMediaTypes: streamProperty.annotations.Core?.AcceptableMediaTypes,\n\t\t\tmaxLength: streamProperty.maxLength,\n\t\t\tuploadAction: uploadAction\n\t\t};\n\t}\n}\n\n/**\n * Creates and returns a select query with the selected fields from the parameters that were passed.\n * @param lineItem The LineItem we want the requested properties from.\n * @param converterContext The converter context.\n * @param operationAvailable A string containing the available operation, which we'll take the properties to add to the select query.\n * @param presentationVariantAnnotation The presentation variant annotation which we'll take the RequestAtLeast properties from.\n * @returns The 'select' query that has the selected fields from the parameters that were passed.\n */\nexport function createRequestedProperties(\n\tlineItem: LineItem,\n\tconverterContext: ConverterContext,\n\toperationAvailable?: string,\n\tpresentationVariantAnnotation?: PresentationVariantType\n): string[] {\n\tconst entityType = converterContext.getAnnotationEntityType(lineItem);\n\tconst selectedFields: string[] = [];\n\tfunction pushField(field: string): void {\n\t\tif (field && !selectedFields.includes(field) && field.indexOf(\"/\") !== 0) {\n\t\t\t// Do not add singleton property (with absolute path) to $select\n\t\t\tselectedFields.push(field);\n\t\t}\n\t}\n\n\tfunction pushFieldList(fields: string[]): void {\n\t\tif (fields?.length) {\n\t\t\tfields.forEach(pushField);\n\t\t}\n\t}\n\n\tconst operationAvailableProperties = (operationAvailable || \"\").split(\",\");\n\tconst validProperties = operationAvailableProperties.filter(function (propName: string) {\n\t\treturn entityType.resolvePath(propName);\n\t});\n\tconst semanticKeys: string[] = (entityType.annotations.Common?.SemanticKey || []).map((semanticKey) => semanticKey.value);\n\tconst capabilitiesAnnotation = converterContext.getEntitySet()?.annotations?.Capabilities;\n\tconst alternateAndSecondaryKeys = ModelHelper.getAlternateAndSecondaryKeys(entityType, converterContext.getEntitySet() as EntitySet);\n\tif (presentationVariantAnnotation) {\n\t\tpushFieldList(presentationVariantAnnotation.RequestAtLeast?.map((propertyPath) => propertyPath.value));\n\t}\n\tpushFieldList(getNavigationAvailableFieldsFromLineItem(lineItem, entityType));\n\tpushFieldList(validProperties);\n\tpushFieldList(semanticKeys);\n\tpushFieldList(alternateAndSecondaryKeys);\n\tif (capabilitiesAnnotation) {\n\t\tpushField((capabilitiesAnnotation.DeleteRestrictions?.Deletable as PathAnnotationExpression<boolean>)?.path);\n\t\tpushField((capabilitiesAnnotation.UpdateRestrictions?.Updatable as PathAnnotationExpression<boolean>)?.path);\n\t}\n\n\treturn selectedFields;\n}\n\n/**\n * This return the property that are available from the NavigationAvailable annotation on IBN Fields.\n * @param lineItem The line item annotation.\n * @param entityType The Entity Type.\n * @returns An array containing the properties name.\n */\nfunction getNavigationAvailableFieldsFromLineItem(lineItem: LineItem, entityType: EntityType): string[] {\n\tconst selectedFields: string[] = [];\n\tlineItem.forEach(function (record) {\n\t\tif (\n\t\t\trecord.$Type === UIAnnotationTypes.DataFieldForIntentBasedNavigation &&\n\t\t\t!record.Inline &&\n\t\t\t!record.Determining &&\n\t\t\tisPathAnnotationExpression(record.NavigationAvailable)\n\t\t) {\n\t\t\tconst path = (record.NavigationAvailable as unknown as { path: string }).path;\n\t\t\tif (entityType.resolvePath(path)) {\n\t\t\t\tselectedFields.push(path);\n\t\t\t}\n\t\t}\n\t});\n\treturn selectedFields;\n}\n\n/**\n * Get the navigation target path from manifest settings.\n * @param converterContext The converter context\n * @param navigationPropertyPath The navigation path to check in the manifest settings\n * @returns Navigation path from manifest settings\n */\nexport function getNavigationTargetPath(converterContext: ConverterContext<PageContextPathTarget>, navigationPropertyPath: string): string {\n\tconst manifestWrapper = converterContext.getManifestWrapper();\n\tif (navigationPropertyPath && manifestWrapper.getNavigationConfiguration(navigationPropertyPath)) {\n\t\tconst navConfig = manifestWrapper.getNavigationConfiguration(navigationPropertyPath);\n\t\tif (Object.keys(navConfig).length > 0) {\n\t\t\treturn navigationPropertyPath;\n\t\t}\n\t}\n\tconst dataModelPath = converterContext.getDataModelObjectPath();\n\tconst contextPath = converterContext.getContextPath();\n\tconst navConfigForContextPath = manifestWrapper.getNavigationConfiguration(contextPath);\n\tif (navConfigForContextPath && Object.keys(navConfigForContextPath).length > 0) {\n\t\treturn contextPath;\n\t}\n\treturn dataModelPath.targetEntitySet ? dataModelPath.targetEntitySet.name : dataModelPath.startingEntitySet.name;\n}\nfunction findColumnByPath(path: string, tableColumns: TableColumn[]): TableColumn | undefined {\n\treturn tableColumns.find((column) => {\n\t\tconst annotationColumn = column as AnnotationTableColumn;\n\t\treturn annotationColumn.propertyInfos === undefined && annotationColumn.relativePath === path;\n\t});\n}\n/**\n * Sets the 'unit', 'textArrangement', 'timezone' and 'exportsettings' properties in columns when necessary.\n * @param converterContext The instance of the converter context\n * @param tableColumns The columns to be updated\n */\nexport function updateLinkedProperties(converterContext: ConverterContext, tableColumns: TableColumn[]): void {\n\tconst dataModelObjectPath = converterContext.getConverterContextFor(converterContext.getContextPath()).getDataModelObjectPath();\n\ttableColumns.forEach((oColumn) => {\n\t\tconst tableColumn = oColumn as AnnotationTableColumn;\n\t\tif (tableColumn.propertyInfos === undefined && tableColumn.relativePath) {\n\t\t\tconst propertyDataModelObjectPath = enhanceDataModelPath<Property>(dataModelObjectPath, tableColumn.relativePath);\n\t\t\tconst property = propertyDataModelObjectPath.targetObject;\n\t\t\tif (property) {\n\t\t\t\taddCurrencyOrUoMToProperty(property, propertyDataModelObjectPath, tableColumns, tableColumn);\n\t\t\t\tconst timezoneProperty = getAssociatedTimezoneProperty(property);\n\t\t\t\tconst timezone = property?.annotations?.Common?.Timezone;\n\t\t\t\tif (timezoneProperty) {\n\t\t\t\t\tconst oTimezoneColumn = findColumnByPath(timezoneProperty.name, tableColumns);\n\t\t\t\t\ttableColumn.timezone = oTimezoneColumn?.name;\n\t\t\t\t} else if (timezone) {\n\t\t\t\t\ttableColumn.timezoneText = timezone.toString();\n\t\t\t\t}\n\t\t\t\tconst displayMode = getDisplayMode(property),\n\t\t\t\t\ttextAnnotation = property.annotations.Common?.Text;\n\t\t\t\tif (isPathAnnotationExpression(textAnnotation) && displayMode !== \"Value\") {\n\t\t\t\t\tconst textColumn = findColumnByPath(textAnnotation.path, tableColumns);\n\t\t\t\t\tif (textColumn && textColumn.name !== tableColumn.name) {\n\t\t\t\t\t\ttableColumn.textArrangement = {\n\t\t\t\t\t\t\ttextProperty: textColumn.name,\n\t\t\t\t\t\t\tmode: displayMode\n\t\t\t\t\t\t};\n\t\t\t\t\t\t// If text properties are used but hidden, we must include them to the export as there are used in the paste\n\t\t\t\t\t\tif (!textColumn.exportSettings) {\n\t\t\t\t\t\t\ttextColumn.exportSettings = { type: \"String\" };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n}\n\n/**\n * Adds the \"unit\" property into the columns when neccesary for columns with unit of measure and currencies.\n * @param property The property referenced on the column\n * @param dataModelObjectPath The property DataModelObjectPath.\n * @param tableColumns The list of columns displayed on the table\n * @param tableColumn The table column which adds the currency or unit\n * @returns The updated property with the UoM or currency\n */\n\nfunction addCurrencyOrUoMToProperty(\n\tproperty: Property,\n\tpropertyDataModelObjectPath: DataModelObjectPath<Property>,\n\ttableColumns: TableColumn[],\n\ttableColumn: AnnotationTableColumn\n): void {\n\tconst currencyOrUoMProperty = getAssociatedCurrencyPropertyPath(property) || getAssociatedUnitPropertyPath(property);\n\tif (currencyOrUoMProperty) {\n\t\tconst currencyOrUoMPropertyDataModelObjectPath = enhanceDataModelPath<Property>(propertyDataModelObjectPath, currencyOrUoMProperty);\n\t\tconst currencyOrUoMRelativePath = getContextRelativeTargetObjectPath(currencyOrUoMPropertyDataModelObjectPath);\n\t\tif (currencyOrUoMRelativePath) {\n\t\t\tconst unitColumn = findColumnByPath(currencyOrUoMRelativePath, tableColumns);\n\t\t\ttableColumn.unit = unitColumn?.name;\n\t\t}\n\t} else {\n\t\tconst unit = property?.annotations?.Measures?.ISOCurrency || property?.annotations?.Measures?.Unit;\n\t\tif (unit) {\n\t\t\ttableColumn.unitText = `${unit}`;\n\t\t}\n\t}\n}\nfunction getSemanticKeysAndTitleInfo(converterContext: ConverterContext<PageContextPathTarget>): {\n\theaderInfoTitlePath: string;\n\tsemanticKeyColumns: string[];\n\theaderInfoTypeName: PropertyAnnotationValue<String> | undefined;\n} {\n\tconst headerInfoTitlePath = (converterContext.getAnnotationEntityType()?.annotations?.UI?.HeaderInfo?.Title as DataFieldTypes)?.Value\n\t\t?.path;\n\tconst semanticKeyAnnotations = converterContext.getAnnotationEntityType()?.annotations?.Common?.SemanticKey;\n\tconst headerInfoTypeName = converterContext?.getAnnotationEntityType()?.annotations?.UI?.HeaderInfo?.TypeName;\n\tconst semanticKeyColumns: string[] = [];\n\tif (semanticKeyAnnotations) {\n\t\tsemanticKeyAnnotations.forEach(function (oColumn) {\n\t\t\tsemanticKeyColumns.push(oColumn.value);\n\t\t});\n\t}\n\treturn { headerInfoTitlePath, semanticKeyColumns, headerInfoTypeName };\n}\nexport function createTableVisualization(\n\tlineItemAnnotation: LineItem,\n\tvisualizationPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tparams?: Partial<{\n\t\tpresentationVariantAnnotation: PresentationVariantType;\n\t\tselectionVariantAnnotation: SelectionVariantType;\n\t\tisCondensedTableLayoutCompliant: boolean;\n\t}>\n): TableVisualization {\n\tconst { presentationVariantAnnotation, isCondensedTableLayoutCompliant, selectionVariantAnnotation } = params ?? {};\n\tconst tableManifestConfig = getTableManifestConfiguration(\n\t\tlineItemAnnotation,\n\t\tvisualizationPath,\n\t\tconverterContext,\n\t\tisCondensedTableLayoutCompliant,\n\t\tselectionVariantAnnotation\n\t);\n\tconst { navigationPropertyPath } = splitPath(visualizationPath);\n\tconst navigationTargetPath = getNavigationTargetPath(converterContext, navigationPropertyPath);\n\tconst navigationSettings = converterContext.getManifestWrapper().getNavigationConfiguration(navigationTargetPath);\n\tconst columns = getTableColumns(lineItemAnnotation, visualizationPath, converterContext, navigationSettings);\n\tconst operationAvailableMap = getOperationAvailableMap(lineItemAnnotation, converterContext);\n\tconst semanticKeysAndHeaderInfoTitle = getSemanticKeysAndTitleInfo(converterContext);\n\tconst standardActionsConfiguration = getStandardActionsConfiguration(\n\t\tlineItemAnnotation,\n\t\tvisualizationPath,\n\t\tconverterContext,\n\t\ttableManifestConfig,\n\t\tnavigationSettings\n\t);\n\tconst tableAnnotation = getTableAnnotationConfiguration(\n\t\tlineItemAnnotation,\n\t\tvisualizationPath,\n\t\tconverterContext,\n\t\ttableManifestConfig,\n\t\tcolumns,\n\t\tnavigationSettings,\n\t\tstandardActionsConfiguration,\n\t\tpresentationVariantAnnotation\n\t);\n\tconst tableActions = getTableActions(\n\t\tlineItemAnnotation,\n\t\tvisualizationPath,\n\t\tconverterContext,\n\t\tstandardActionsConfiguration.standardActions,\n\t\tnavigationSettings\n\t);\n\tconst operationAvailable = getOperationAvailableProperties(operationAvailableMap, converterContext);\n\tlet header = tableManifestConfig.header;\n\theader ??= tableAnnotation.title === \"\" ? undefined : tableAnnotation.title;\n\tconst oVisualization: TableVisualization = {\n\t\ttype: VisualizationType.Table,\n\t\tannotation: tableAnnotation,\n\t\tcontrol: tableManifestConfig,\n\t\tactions: tableActions.actions,\n\t\tcommandActions: tableActions.commandActions,\n\t\tcolumns: columns,\n\t\toperationAvailableMap: JSON.stringify(operationAvailableMap),\n\t\toperationAvailableProperties: operationAvailable,\n\t\theaderInfoTitle: semanticKeysAndHeaderInfoTitle.headerInfoTitlePath,\n\t\tsemanticKeys: semanticKeysAndHeaderInfoTitle.semanticKeyColumns,\n\t\theaderInfoTypeName: semanticKeysAndHeaderInfoTitle.headerInfoTypeName,\n\t\tenable$select: true,\n\t\tenable$$getKeepAliveContext: true,\n\t\theader: header,\n\t\theaderVisible: tableManifestConfig.headerVisible,\n\t\trequestAtLeast: createRequestedProperties(lineItemAnnotation, converterContext, operationAvailable, presentationVariantAnnotation),\n\t\thandlePatchSent: converterContext.getManifestWrapper().getTemplateType() !== TemplateType.ListReport\n\t};\n\tupdateLinkedProperties(converterContext, columns);\n\tupdateTableVisualizationForType(\n\t\toVisualization,\n\t\tconverterContext.getAnnotationEntityType(lineItemAnnotation),\n\t\tconverterContext,\n\t\tpresentationVariantAnnotation\n\t);\n\treturn oVisualization;\n}\nexport function createDefaultTableVisualization(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tisBlankTable?: boolean\n): TableVisualization {\n\tconst tableManifestConfig = getTableManifestConfiguration(undefined, \"\", converterContext, false);\n\tconst columns = getColumnsFromEntityType(\n\t\t{},\n\t\tconverterContext.getEntityType(),\n\t\t[],\n\t\tconverterContext,\n\t\ttableManifestConfig.type,\n\t\ttableManifestConfig.creationMode,\n\t\t{}\n\t);\n\tconst operationAvailableMap = getOperationAvailableMap(undefined, converterContext);\n\tconst semanticKeysAndHeaderInfoTitle = getSemanticKeysAndTitleInfo(converterContext);\n\tconst navigationTargetPath = getNavigationTargetPath(converterContext, \"\");\n\tconst navigationSettings = converterContext.getManifestWrapper().getNavigationConfiguration(navigationTargetPath);\n\tconst standardActionsConfiguration = getStandardActionsConfiguration(\n\t\tundefined,\n\t\t\"\",\n\t\tconverterContext,\n\t\ttableManifestConfig,\n\t\tnavigationSettings\n\t);\n\tconst oVisualization: TableVisualization = {\n\t\ttype: VisualizationType.Table,\n\t\tannotation: getTableAnnotationConfiguration(\n\t\t\tundefined,\n\t\t\t\"\",\n\t\t\tconverterContext,\n\t\t\ttableManifestConfig,\n\t\t\tisBlankTable ? [] : columns,\n\t\t\tnavigationSettings,\n\t\t\tstandardActionsConfiguration\n\t\t),\n\t\tcontrol: tableManifestConfig,\n\t\tactions: [],\n\t\tcolumns: columns,\n\t\toperationAvailableMap: JSON.stringify(operationAvailableMap),\n\t\toperationAvailableProperties: getOperationAvailableProperties(operationAvailableMap, converterContext),\n\t\theaderInfoTitle: semanticKeysAndHeaderInfoTitle.headerInfoTitlePath,\n\t\tsemanticKeys: semanticKeysAndHeaderInfoTitle.semanticKeyColumns,\n\t\theaderInfoTypeName: semanticKeysAndHeaderInfoTitle.headerInfoTypeName,\n\t\tenable$select: true,\n\t\tenable$$getKeepAliveContext: true,\n\t\theader: tableManifestConfig.header,\n\t\theaderVisible: tableManifestConfig.headerVisible,\n\t\thandlePatchSent: converterContext.getManifestWrapper().getTemplateType() !== TemplateType.ListReport\n\t};\n\tupdateLinkedProperties(converterContext, columns);\n\tupdateTableVisualizationForType(oVisualization, converterContext.getEntityType(), converterContext);\n\treturn oVisualization;\n}\n/**\n * Gets the map of Core.OperationAvailable property paths for all DataFieldForActions.\n * @param lineItemAnnotation The instance of the line item\n * @param converterContext The instance of the converter context\n * @returns The record containing all action names and their corresponding Core.OperationAvailable property paths\n */\nfunction getOperationAvailableMap(\n\tlineItemAnnotation: LineItem | undefined,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): Record<string, unknown> {\n\treturn ActionHelper.getOperationAvailableMap(lineItemAnnotation, \"table\", converterContext);\n}\n/**\n * Gets updatable propertyPath for the current entityset if valid.\n * @param converterContext The instance of the converter context\n * @returns The updatable property for the rows\n */\nfunction getCurrentEntitySetUpdatablePath(converterContext: ConverterContext<PageContextPathTarget>): string {\n\tconst restrictions = getRestrictions(converterContext);\n\tconst entitySet = converterContext.getEntitySet();\n\tconst updatable = restrictions.isUpdatable;\n\tconst isOnlyDynamicOnCurrentEntity = !isConstant(updatable.expression) && updatable.navigationExpression._type === \"Unresolvable\";\n\tconst updatableExpression = entitySet?.annotations.Capabilities?.UpdateRestrictions?.Updatable;\n\tconst updatablePropertyPath = isPathAnnotationExpression(updatableExpression) && updatableExpression.path;\n\treturn isOnlyDynamicOnCurrentEntity ? (updatablePropertyPath as string) : \"\";\n}\n/**\n * Method to retrieve all property paths assigned to the Core.OperationAvailable annotation.\n * @param operationAvailableMap The record consisting of actions and their Core.OperationAvailable property paths\n * @param converterContext The instance of the converter context\n * @returns The CSV string of all property paths associated with the Core.OperationAvailable annotation\n */\nfunction getOperationAvailableProperties(\n\toperationAvailableMap: Record<string, unknown>,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): string {\n\tconst properties = new Set();\n\tfor (const actionName in operationAvailableMap) {\n\t\tconst propertyName = operationAvailableMap[actionName];\n\t\tif (propertyName === null) {\n\t\t\t// Annotation configured with explicit 'null' (action advertisement relevant)\n\t\t\tproperties.add(actionName);\n\t\t} else if (typeof propertyName === \"string\") {\n\t\t\t// Add property paths and not Constant values.\n\t\t\tproperties.add(propertyName);\n\t\t}\n\t}\n\tif (properties.size) {\n\t\t// Some actions have an operation available based on property --> we need to load the HeaderInfo.Title property\n\t\t// so that the dialog on partial actions is displayed properly (BCP 2180271425)\n\t\tconst entityType = converterContext.getEntityType();\n\t\tconst titleProperty = (entityType.annotations?.UI?.HeaderInfo?.Title as DataFieldTypes)?.Value?.path;\n\t\tif (titleProperty) {\n\t\t\tproperties.add(titleProperty);\n\t\t}\n\t}\n\treturn Array.from(properties).join(\",\");\n}\n/**\n * Iterates over the DataFieldForAction and DataFieldForIntentBasedNavigation of a line item and\n * returns all the UI.Hidden annotation expressions.\n * @param lineItemAnnotation Collection of data fields used for representation in a table or list\n * @param currentEntityType Current entity type\n * @param contextDataModelObjectPath Object path of the data model\n * @returns All the `UI.Hidden` path expressions found in the relevant actions\n */\nfunction getUIHiddenExpForActionsRequiringContext(\n\tlineItemAnnotation: LineItem,\n\tcurrentEntityType: EntityType,\n\tcontextDataModelObjectPath: DataModelObjectPath<PageContextPathTarget>\n): BindingToolkitExpression<boolean>[] {\n\tconst aUiHiddenPathExpressions: BindingToolkitExpression<boolean>[] = [];\n\tlineItemAnnotation.forEach((dataField) => {\n\t\t// Check if the lineItem context is the same as that of the action:\n\t\tif (\n\t\t\t(dataField.$Type === UIAnnotationTypes.DataFieldForAction &&\n\t\t\t\tdataField?.ActionTarget?.isBound &&\n\t\t\t\tcurrentEntityType === dataField?.ActionTarget.sourceEntityType) ||\n\t\t\t(dataField.$Type === UIAnnotationTypes.DataFieldForIntentBasedNavigation &&\n\t\t\t\tdataField.RequiresContext &&\n\t\t\t\tdataField?.Inline?.valueOf() !== true)\n\t\t) {\n\t\t\tif (typeof dataField.annotations?.UI?.Hidden?.valueOf() === \"object\") {\n\t\t\t\taUiHiddenPathExpressions.push(equal(getHiddenExpressionAtTableLevel(dataField, contextDataModelObjectPath), false));\n\t\t\t}\n\t\t}\n\t});\n\treturn aUiHiddenPathExpressions;\n}\n/**\n * This method is used to get the binding expression of the path of a DataField.\n * @param expression CompiledBindingToolkitExpression\n * @returns The binding expression\n */\nfunction getPathFromActionAnnotation(expression: CompiledBindingToolkitExpression): CompiledBindingToolkitExpression {\n\tlet path: CompiledBindingToolkitExpression;\n\tif (isPathAnnotationExpression(expression)) {\n\t\tpath = expression.path;\n\t} else {\n\t\tpath = expression;\n\t}\n\treturn path;\n}\n/**\n * This method is used to change the context currently referenced by this binding by removing the last navigation property.\n *\n * It is used (specifically in this case), to transform a binding made for a NavProp context /MainObject/NavProp1/NavProp2,\n * into a binding on the previous context /MainObject/NavProp1.\n * @param source DataFieldForAction | DataFieldForIntentBasedNavigation | CustomAction\n * @param contextDataModelObjectPath DataModelObjectPath\n * @returns The binding expression\n */\nfunction getHiddenExpressionAtTableLevel(\n\tsource: DataFieldAbstractTypes,\n\tcontextDataModelObjectPath: DataModelObjectPath<PageContextPathTarget>\n): BindingToolkitExpression<unknown> {\n\tconst expression = source.annotations?.UI?.Hidden as CompiledBindingToolkitExpression;\n\tlet path = getPathFromActionAnnotation(expression);\n\tif (typeof path === \"object\") {\n\t\treturn constant(false);\n\t} else if (typeof path === \"string\") {\n\t\tif (\"visible\" in source) {\n\t\t\tpath = path.substring(1, path.length - 1);\n\t\t}\n\t\tif (path.indexOf(\"/\") > 0) {\n\t\t\t//check if the navigation property is correct:\n\t\t\tconst splitPathForNavigationProperty = path.split(\"/\");\n\t\t\tconst navigationPath = splitPathForNavigationProperty[0];\n\t\t\tif (\n\t\t\t\tisNavigationProperty(contextDataModelObjectPath?.targetObject) &&\n\t\t\t\tcontextDataModelObjectPath.targetObject.partner === navigationPath\n\t\t\t) {\n\t\t\t\treturn pathInModel(splitPathForNavigationProperty.slice(1).join(\"/\"));\n\t\t\t} else {\n\t\t\t\treturn constant(true);\n\t\t\t}\n\t\t} else {\n\t\t\treturn constant(false);\n\t\t}\n\t}\n\treturn constant(true);\n}\n/**\n * Loop through the manifest actions and check the following:\n *\n * If the data field is also referenced as a custom action.\n * If the underlying manifest action is either a bound action or has the 'RequiresContext' property set to true.\n *\n * If so, the 'requiresSelection' property is forced to 'true' in the manifest.\n * @param dataFieldId Id of the DataField evaluated\n * @param dataField DataField evaluated\n * @param manifestActions The actions defined in the manifest\n * @returns `true` if the DataField is found among the manifest actions\n */\nfunction updateManifestActionAndTagIt(\n\tdataFieldId: string,\n\tdataField: DataFieldForAction | DataFieldForIntentBasedNavigation,\n\tmanifestActions: Record<string, CustomAction>\n): boolean {\n\treturn Object.keys(manifestActions).some((actionKey) => {\n\t\tif (actionKey === dataFieldId) {\n\t\t\tif (\n\t\t\t\t(dataField as DataFieldForAction)?.ActionTarget?.isBound ||\n\t\t\t\t(dataField as DataFieldForIntentBasedNavigation)?.RequiresContext\n\t\t\t) {\n\t\t\t\tmanifestActions[dataFieldId].requiresSelection = true;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t});\n}\n/**\n * Loop through the DataFieldForAction and DataFieldForIntentBasedNavigation of a line item and\n * check the following:\n * If at least one of them is always visible in the table toolbar and requires a context\n * If an action is also defined in the manifest, it is set aside and will be considered\n * when going through the manifest.\n * @param lineItemAnnotation Collection of data fields for representation in a table or list\n * @param manifestActions The actions defined in the manifest\n * @param currentEntityType Current Entity Type\n * @returns `true` if there is at least 1 action that meets the criteria\n */\nfunction hasBoundActionsAlwaysVisibleInToolBar(\n\tlineItemAnnotation: LineItem,\n\tmanifestActions: Record<string, CustomAction>,\n\tcurrentEntityType: EntityType\n): boolean {\n\treturn lineItemAnnotation.some((dataField) => {\n\t\tif (\n\t\t\t(dataField.$Type === UIAnnotationTypes.DataFieldForAction ||\n\t\t\t\tdataField.$Type === UIAnnotationTypes.DataFieldForIntentBasedNavigation) &&\n\t\t\tdataField?.Inline?.valueOf() !== true &&\n\t\t\t(dataField.annotations?.UI?.Hidden?.valueOf() === false || dataField.annotations?.UI?.Hidden?.valueOf() === undefined)\n\t\t) {\n\t\t\tif (dataField.$Type === UIAnnotationTypes.DataFieldForAction) {\n\t\t\t\tconst manifestActionId = generate([\"DataFieldForAction\", dataField.Action as string]);\n\t\t\t\t// if the DataFieldForActon from annotation also exists in the manifest, its visibility will be evaluated later on\n\t\t\t\tif (updateManifestActionAndTagIt(manifestActionId, dataField, manifestActions)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t// Check if the lineItem context is the same as that of the action:\n\t\t\t\treturn dataField?.ActionTarget?.isBound && currentEntityType === dataField?.ActionTarget.sourceEntityType;\n\t\t\t} else if (dataField.$Type === UIAnnotationTypes.DataFieldForIntentBasedNavigation) {\n\t\t\t\t// if the DataFieldForIntentBasedNavigation from annotation also exists in the manifest, its visibility will be evaluated later on\n\t\t\t\tif (\n\t\t\t\t\tupdateManifestActionAndTagIt(\n\t\t\t\t\t\t`DataFieldForIntentBasedNavigation::${dataField.SemanticObject}::${dataField.Action}`,\n\t\t\t\t\t\tdataField,\n\t\t\t\t\t\tmanifestActions\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn dataField.RequiresContext;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t});\n}\n/**\n * Checks if a custom action that requires a context is always visible in the toolbar.\n * @param manifestActions The actions defined in the manifest\n * @returns `true` if there is at least 1 action that meets the criteria\n */\nfunction hasCustomActionsAlwaysVisibleInToolBar(manifestActions: Record<string, CustomAction>): boolean {\n\tconst customActions = Object.keys(manifestActions).reduce((actions: CustomAction[], actionKey) => {\n\t\tconst action = manifestActions[actionKey];\n\t\tif (!action.menu) {\n\t\t\t//simple custom action\n\t\t\tactions.push(action);\n\t\t} else {\n\t\t\t// grouped actions\n\t\t\tactions = [...actions, ...(action.menu.filter((menuAction) => typeof menuAction !== \"string\") as CustomAction[])];\n\t\t}\n\t\treturn actions;\n\t}, []);\n\treturn !!customActions.find(\n\t\t(action) => action.requiresSelection && (action.visible === undefined || action.visible?.toString() === \"true\")\n\t);\n}\n/**\n * Iterates over the custom actions (with key requiresSelection) declared in the manifest for the current line item and returns all the\n * visible key values as an expression.\n * @param manifestActions The actions defined in the manifest\n * @returns Array<Expression<boolean>> All the visible path expressions of the actions that meet the criteria\n */\nfunction getVisibleExpForCustomActionsRequiringContext(manifestActions: Record<string, CustomAction>): BindingToolkitExpression<boolean>[] {\n\tconst aVisiblePathExpressions: BindingToolkitExpression<boolean>[] = [];\n\tif (manifestActions) {\n\t\tObject.keys(manifestActions).forEach((actionKey) => {\n\t\t\tconst action = manifestActions[actionKey];\n\t\t\tif (action.requiresSelection === true && action.visible !== undefined) {\n\t\t\t\tif (typeof action.visible === \"string\") {\n\t\t\t\t\t/*The final aim would be to check if the path expression depends on the parent context\n\t\t\t\t\tand considers only those expressions for the expression evaluation,\n\t\t\t\t\tbut currently not possible from the manifest as the visible key is bound on the parent entity.\n\t\t\t\t\tTricky to differentiate the path as it's done for the Hidden annotation.\n\t\t\t\t\tFor the time being we consider all the paths of the manifest*/\n\t\t\t\t\taVisiblePathExpressions.push(resolveBindingString(action?.visible?.valueOf()));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\treturn aVisiblePathExpressions;\n}\n/**\n * Evaluate if the path is statically deletable or updatable.\n * @param converterContext\n * @returns The table capabilities\n */\nexport function getCapabilityRestriction(converterContext: ConverterContext<PageContextPathTarget>): TableCapabilityRestriction {\n\tconst isDeletable = isPathDeletable(converterContext.getDataModelObjectPath());\n\tconst isUpdatable = isPathUpdatable(converterContext.getDataModelObjectPath());\n\treturn {\n\t\tisDeletable: !(isConstant(isDeletable) && isDeletable.value === false),\n\t\tisUpdatable: !(isConstant(isUpdatable) && isUpdatable.value === false)\n\t};\n}\nexport function getSelectionMode(\n\tlineItemAnnotation: LineItem | undefined,\n\tvisualizationPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tisEntitySet: boolean,\n\ttargetCapabilities: TableCapabilityRestriction,\n\tdeleteButtonVisibilityExpression?: BindingToolkitExpression<boolean>,\n\tmassEditVisibilityExpression: BindingToolkitExpression<boolean> = constant(false),\n\tcutButtonVisibilityExpression: BindingToolkitExpression<boolean> = constant(false)\n): string | undefined {\n\tconst tableManifestSettings = converterContext.getManifestControlConfiguration<TableManifestConfiguration>(visualizationPath);\n\tconst tableType = tableManifestSettings.tableSettings?.type;\n\tlet selectionMode = tableManifestSettings.tableSettings?.selectionMode;\n\n\t// The collapse/Expand action of a tree table is a bound action, as a result, a tree table should always have a selection mode to \"Multi\" when no selectionMode has been set in the manifest\n\tif (tableType === \"TreeTable\" && !selectionMode) {\n\t\treturn SelectionMode.Multi;\n\t}\n\n\t// If the selection mode is forced to 'None' in the manifest/macro table parameters, we keep it unless here is a delete button\n\tif (!lineItemAnnotation || selectionMode === SelectionMode.None) {\n\t\tif (targetCapabilities.isDeletable && deleteButtonVisibilityExpression) {\n\t\t\treturn compileExpression(ifElse(deleteButtonVisibilityExpression, constant(SelectionMode.Multi), constant(SelectionMode.None)));\n\t\t}\n\t\treturn SelectionMode.None;\n\t}\n\tif (selectionMode === SelectionMode.ForceMulti) {\n\t\treturn SelectionMode.Multi;\n\t} else if (selectionMode === SelectionMode.ForceSingle) {\n\t\treturn SelectionMode.Single;\n\t}\n\tlet aHiddenBindingExpressions: BindingToolkitExpression<boolean>[] = [],\n\t\taVisibleBindingExpressions: BindingToolkitExpression<boolean>[] = [];\n\tconst manifestActions = getActionsFromManifest(\n\t\tconverterContext.getManifestControlConfiguration<TableManifestConfiguration>(visualizationPath).actions,\n\t\tconverterContext,\n\t\t[],\n\t\tundefined,\n\t\tfalse\n\t);\n\tlet isParentDeletable, parentEntitySetDeletable;\n\tif (converterContext.getTemplateType() === TemplateType.ObjectPage) {\n\t\tisParentDeletable = isPathDeletable(converterContext.getDataModelObjectPath());\n\t\tparentEntitySetDeletable = isParentDeletable ? compileExpression(isParentDeletable, true) : isParentDeletable;\n\t}\n\tconst bMassEditEnabled: boolean = !isConstant(massEditVisibilityExpression) || massEditVisibilityExpression.value !== false;\n\tif (!selectionMode || selectionMode === SelectionMode.Auto) {\n\t\tselectionMode = SelectionMode.Multi;\n\t}\n\tif (bMassEditEnabled) {\n\t\t// Override default selection mode when mass edit is visible\n\t\tselectionMode = selectionMode === SelectionMode.Single ? SelectionMode.Single : SelectionMode.Multi;\n\t}\n\tif (\n\t\thasBoundActionsAlwaysVisibleInToolBar(lineItemAnnotation, manifestActions.actions, converterContext.getEntityType()) ||\n\t\thasCustomActionsAlwaysVisibleInToolBar(manifestActions.actions)\n\t) {\n\t\treturn selectionMode;\n\t}\n\taHiddenBindingExpressions = getUIHiddenExpForActionsRequiringContext(\n\t\tlineItemAnnotation,\n\t\tconverterContext.getEntityType(),\n\t\tconverterContext.getDataModelObjectPath()\n\t);\n\taVisibleBindingExpressions = getVisibleExpForCustomActionsRequiringContext(manifestActions.actions);\n\t// No action requiring a context:\n\tif (\n\t\taHiddenBindingExpressions.length === 0 &&\n\t\taVisibleBindingExpressions.length === 0 &&\n\t\t(cutButtonVisibilityExpression || deleteButtonVisibilityExpression || bMassEditEnabled)\n\t) {\n\t\tif (!isEntitySet) {\n\t\t\t// Example: OP case\n\t\t\tif (targetCapabilities.isDeletable || parentEntitySetDeletable !== \"false\" || bMassEditEnabled) {\n\t\t\t\t// Building expression for delete and mass edit\n\t\t\t\tconst buttonVisibilityExpression = or(\n\t\t\t\t\tcutButtonVisibilityExpression || true,\n\t\t\t\t\tdeleteButtonVisibilityExpression || true, // default delete visibility as true\n\t\t\t\t\tmassEditVisibilityExpression\n\t\t\t\t);\n\t\t\t\treturn compileExpression(\n\t\t\t\t\tifElse(and(UI.IsEditable, buttonVisibilityExpression), constant(selectionMode), constant(SelectionMode.None))\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn compileExpression(\n\t\t\t\t\tifElse(cutButtonVisibilityExpression, constant(SelectionMode.Single), constant(SelectionMode.None))\n\t\t\t\t);\n\t\t\t}\n\t\t\t// EntitySet deletable:\n\t\t} else if (bMassEditEnabled) {\n\t\t\t// example: LR scenario\n\t\t\treturn selectionMode;\n\t\t} else if (targetCapabilities.isDeletable && deleteButtonVisibilityExpression) {\n\t\t\treturn compileExpression(ifElse(deleteButtonVisibilityExpression, constant(selectionMode), constant(SelectionMode.None)));\n\t\t\t// EntitySet not deletable:\n\t\t} else {\n\t\t\treturn SelectionMode.None;\n\t\t}\n\t\t// There are actions requiring a context:\n\t} else if (!isEntitySet) {\n\t\t// Example: OP case\n\t\tif (targetCapabilities.isDeletable || parentEntitySetDeletable !== \"false\" || bMassEditEnabled) {\n\t\t\t// Use selectionMode in edit mode if delete is enabled or mass edit is visible\n\t\t\tconst editModebuttonVisibilityExpression = ifElse(\n\t\t\t\tbMassEditEnabled && !targetCapabilities.isDeletable,\n\t\t\t\tmassEditVisibilityExpression,\n\t\t\t\tconstant(true)\n\t\t\t);\n\t\t\treturn compileExpression(\n\t\t\t\tifElse(\n\t\t\t\t\tand(UI.IsEditable, editModebuttonVisibilityExpression),\n\t\t\t\t\tconstant(selectionMode),\n\t\t\t\t\tifElse(\n\t\t\t\t\t\tor(...aHiddenBindingExpressions.concat(aVisibleBindingExpressions)),\n\t\t\t\t\t\tconstant(selectionMode),\n\t\t\t\t\t\tconstant(SelectionMode.None)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\t\t} else {\n\t\t\treturn compileExpression(\n\t\t\t\tifElse(\n\t\t\t\t\tor(...aHiddenBindingExpressions.concat(aVisibleBindingExpressions)),\n\t\t\t\t\tconstant(selectionMode),\n\t\t\t\t\tconstant(SelectionMode.None)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t\t//EntitySet deletable:\n\t} else if (targetCapabilities.isDeletable || bMassEditEnabled) {\n\t\t// Example: LR scenario\n\t\treturn selectionMode;\n\t\t//EntitySet not deletable:\n\t} else {\n\t\treturn compileExpression(\n\t\t\tifElse(\n\t\t\t\tor(...aHiddenBindingExpressions.concat(aVisibleBindingExpressions), massEditVisibilityExpression),\n\t\t\t\tconstant(selectionMode),\n\t\t\t\tconstant(SelectionMode.None)\n\t\t\t)\n\t\t);\n\t}\n}\n\n/**\n * Method to retrieve all table actions from annotations.\n * @param lineItemAnnotation\n * @param visualizationPath\n * @param converterContext\n * @returns The table annotation actions\n */\nfunction getTableAnnotationActions(\n\tlineItemAnnotation: LineItem,\n\tvisualizationPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): { tableActions: Array<AnnotationAction | AnnotationActionGroup> } {\n\tconst tableActions: Array<AnnotationAction | AnnotationActionGroup> = [];\n\tconst copyDataField = getCopyAction(\n\t\tlineItemAnnotation.filter((dataField) => {\n\t\t\treturn dataFieldIsCopyAction(dataField as DataFieldForActionTypes);\n\t\t}) as DataFieldForActionTypes[]\n\t);\n\tif (copyDataField) {\n\t\ttableActions.push({\n\t\t\ttype: ActionType.Copy,\n\t\t\tannotationPath: converterContext.getEntitySetBasedAnnotationPath(copyDataField.fullyQualifiedName),\n\t\t\tkey: KeyHelper.generateKeyFromDataField(copyDataField),\n\t\t\tvisible: compileExpression(visibleExpression(copyDataField, converterContext)),\n\t\t\tvisibleForContextMenu: compileExpression(visibleForContextMenuExpression(copyDataField, converterContext)),\n\t\t\ttext: copyDataField.Label?.toString() ?? Library.getResourceBundleFor(\"sap.fe.core\")!.getText(\"C_COMMON_COPY\"),\n\t\t\tisNavigable: true\n\t\t});\n\t}\n\tlineItemAnnotation\n\t\t.filter((dataField) => {\n\t\t\treturn !dataFieldIsCopyAction(dataField as DataFieldForAction);\n\t\t})\n\t\t.forEach((dataField: DataFieldAbstractTypes) => {\n\t\t\tif (\n\t\t\t\tisDataFieldForActionAbstract(dataField) &&\n\t\t\t\tdataField.Inline?.valueOf() !== true &&\n\t\t\t\tdataField.Determining?.valueOf() !== true\n\t\t\t) {\n\t\t\t\tconst tableAction = getDataFieldAnnotationAction(dataField, converterContext);\n\t\t\t\tif (tableAction) {\n\t\t\t\t\ttableActions.push(tableAction);\n\t\t\t\t}\n\t\t\t} else if (isDataFieldForActionGroup(dataField)) {\n\t\t\t\tconst dataFieldGroup = getDataFieldAnnotationAction(dataField, converterContext);\n\t\t\t\tif (dataFieldGroup) {\n\t\t\t\t\ttableActions.push(dataFieldGroup);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\treturn {\n\t\ttableActions\n\t};\n}\n\n// For the context menu, the visibility should also consider the 'inactiveContext' property:\n// only when at least one selected context is active (i.e. \"contextmenu/inactiveContext\" is false), the action should be visible in the context menu\n// This is only relevant when the table manifest setting \"creationMode\" is \"InlineCreationRows\"\nfunction visibleForContextMenuExpression(\n\tdataField: DataFieldForAction | DataFieldForIntentBasedNavigation | DataFieldForActionGroup | undefined,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): BindingToolkitExpression<boolean> {\n\treturn and(visibleExpression(dataField, converterContext), equal(pathInModel(\"contextmenu/inactiveContext\", \"internal\"), false));\n}\n\nfunction getDataFieldAnnotationAction(\n\tdataField: DataFieldAbstractTypes,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): AnnotationAction | AnnotationActionGroup | void {\n\tswitch (dataField.$Type) {\n\t\tcase UIAnnotationTypes.DataFieldForAction:\n\t\t\tconst tableAction: AnnotationAction = {\n\t\t\t\ttype: ActionType.DataFieldForAction,\n\t\t\t\tannotationPath: converterContext.getEntitySetBasedAnnotationPath(dataField.fullyQualifiedName),\n\t\t\t\tkey: KeyHelper.generateKeyFromDataField(dataField),\n\t\t\t\tvisible: compileExpression(visibleExpression(dataField, converterContext)),\n\t\t\t\tvisibleForContextMenu: compileExpression(visibleForContextMenuExpression(dataField, converterContext)),\n\t\t\t\tisNavigable: true\n\t\t\t};\n\t\t\tconst sEntityType = converterContext.getEntityType().fullyQualifiedName;\n\t\t\tif (_useEnabledExpression(dataField, sEntityType)) {\n\t\t\t\ttableAction.enabled = getEnabledForAnnotationAction(converterContext, dataField.ActionTarget, true);\n\t\t\t}\n\t\t\treturn tableAction;\n\t\tcase UIAnnotationTypes.DataFieldForIntentBasedNavigation:\n\t\t\treturn {\n\t\t\t\ttype: ActionType.DataFieldForIntentBasedNavigation,\n\t\t\t\tannotationPath: converterContext.getEntitySetBasedAnnotationPath(dataField.fullyQualifiedName),\n\t\t\t\tkey: KeyHelper.generateKeyFromDataField(dataField),\n\t\t\t\tvisible: compileExpression(visibleExpression(dataField, converterContext)),\n\t\t\t\tvisibleForContextMenu: compileExpression(visibleForContextMenuExpression(dataField, converterContext))\n\t\t\t};\n\t\tcase UIAnnotationTypes.DataFieldForActionGroup:\n\t\t\treturn {\n\t\t\t\ttype: ActionType.Menu,\n\t\t\t\tkey: KeyHelper.generateKeyFromDataField(dataField),\n\t\t\t\tid: KeyHelper.generateKeyFromDataField(dataField),\n\t\t\t\ttext: dataField.Label?.toString(),\n\t\t\t\tvisible: compileExpression(visibleExpression(dataField, converterContext)),\n\t\t\t\tvisibleForContextMenu: compileExpression(visibleForContextMenuExpression(dataField, converterContext)),\n\t\t\t\tmenu: dataField.Actions.map((action) => getDataFieldAnnotationAction(action, converterContext))\n\t\t\t} as AnnotationActionGroup;\n\t\tdefault:\n\t\t\treturn;\n\t}\n}\n\n/**\n * Generate the bindingExpression for the highlight rowSetting parameter.\n * @param criticalityAnnotation Path or value of the criticality\n * @param isDraftRootOrNode  Is the current entitySet an Draft root or a node\n * @param targetEntityType The targeted entityType\n * @returns An expressionBinding\n */\nfunction getHighlightRowBinding(\n\tcriticalityAnnotation: Criticality | undefined,\n\tisDraftRootOrNode: boolean,\n\ttargetEntityType?: EntityType\n): BindingToolkitExpression<MessageType> {\n\tlet defaultHighlightRowDefinition: MessageType | BindingToolkitExpression<MessageType> = MessageType.None;\n\tif (criticalityAnnotation) {\n\t\tif (typeof criticalityAnnotation === \"object\") {\n\t\t\tdefaultHighlightRowDefinition = getExpressionFromAnnotation(criticalityAnnotation) as BindingToolkitExpression<MessageType>;\n\t\t} else {\n\t\t\t// Enum Value so we get the corresponding static part\n\t\t\tdefaultHighlightRowDefinition = getMessageTypeFromCriticalityType(criticalityAnnotation);\n\t\t}\n\t}\n\treturn formatResult(\n\t\t[\n\t\t\tdefaultHighlightRowDefinition,\n\t\t\tpathInModel(`filteredMessages`, \"internal\"),\n\t\t\tisDraftRootOrNode && Entity.HasActive,\n\t\t\tisDraftRootOrNode && Entity.IsActive,\n\t\t\t`${isDraftRootOrNode}`,\n\t\t\tpathInModel(\"@$ui5.fe.contextPath\"),\n\t\t\tUI.IsInactive\n\t\t],\n\t\ttableFormatters.rowHighlighting,\n\t\ttargetEntityType\n\t);\n}\nfunction _getCreationBehaviour(\n\tlineItemAnnotation: LineItem | undefined,\n\ttableManifestConfiguration: TableControlConfiguration,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tnavigationSettings: NavigationSettingsConfiguration,\n\tvisualizationPath: string\n): TableAnnotationConfiguration[\"create\"] {\n\tconst navigation = navigationSettings?.create || navigationSettings?.detail;\n\tconst tableManifestSettings: TableManifestConfiguration = converterContext.getManifestControlConfiguration(visualizationPath);\n\tconst originalTableSettings = (tableManifestSettings && tableManifestSettings.tableSettings) || {};\n\t// cross-app\n\tif (navigation?.outbound && navigation.outboundDetail && navigationSettings?.create) {\n\t\treturn {\n\t\t\tmode: \"External\",\n\t\t\toutbound: navigation.outbound,\n\t\t\toutboundDetail: navigation.outboundDetail,\n\t\t\tnavigationSettings: navigationSettings\n\t\t};\n\t}\n\tif (\n\t\tconverterContext.getTemplateType() === TemplateType.ListReport &&\n\t\t![CreationMode.NewPage, CreationMode.External, CreationMode.CreationDialog].includes(tableManifestConfiguration.creationMode)\n\t) {\n\t\t// Fallback to \"NewPage\"\n\t\tLog.warning(\n\t\t\t`Creation mode '${tableManifestConfiguration.creationMode}' can not be used within the List Report. Instead, the default mode \"NewPage\" is used.`\n\t\t);\n\t\ttableManifestConfiguration.creationMode = CreationMode.NewPage;\n\t} else if (\n\t\tconverterContext.getTemplateType() !== TemplateType.ListReport &&\n\t\ttableManifestConfiguration.type === \"TreeTable\" &&\n\t\t![CreationMode.NewPage, CreationMode.Inline, CreationMode.CreationDialog].includes(tableManifestConfiguration.creationMode)\n\t) {\n\t\t// Fallback to \"NewPage\" in case of a non-supported mode for a TreeTable\n\t\tLog.warning(\n\t\t\t`Creation mode '${tableManifestConfiguration.creationMode}' can not be used with a Tree Table. Instead, the default mode \"NewPage\" is used.`\n\t\t);\n\t\ttableManifestConfiguration.creationMode = CreationMode.NewPage;\n\t}\n\tlet newAction;\n\tif (lineItemAnnotation) {\n\t\t// in-app\n\t\tconst targetAnnotations = converterContext.getEntitySet()?.annotations;\n\t\tconst targetAnnotationsCommon = targetAnnotations?.Common as EntitySetAnnotations_Common,\n\t\t\ttargetAnnotationsSession = targetAnnotations?.Session as EntitySetAnnotations_Session;\n\t\tnewAction = targetAnnotationsCommon?.DraftRoot?.NewAction || targetAnnotationsSession?.StickySessionSupported?.NewAction;\n\t\tif (tableManifestConfiguration.creationMode === CreationMode.CreationRow && newAction) {\n\t\t\t// A combination of 'CreationRow' and 'NewAction' does not make sense\n\t\t\tthrow Error(`Creation mode '${CreationMode.CreationRow}' can not be used with a custom 'new' action (${newAction})`);\n\t\t}\n\t\tif (navigation?.route) {\n\t\t\t// route specified\n\t\t\treturn {\n\t\t\t\tmode: tableManifestConfiguration.creationMode,\n\t\t\t\tappend: tableManifestConfiguration.createAtEnd,\n\t\t\t\tnewAction: newAction?.toString(),\n\t\t\t\tnavigateToTarget: tableManifestConfiguration.creationMode === CreationMode.NewPage ? navigation.route : undefined // navigate only in NewPage mode\n\t\t\t};\n\t\t}\n\t}\n\t// no navigation or no route specified - fallback to inline create if original creation mode was 'NewPage'\n\tif (tableManifestConfiguration.creationMode === CreationMode.NewPage) {\n\t\tif (converterContext.getTemplateType() === TemplateType.ListReport) {\n\t\t\tLog.error(\"The creation mode 'NewPage' is used but the navigation configuration to the sub page is missing.\");\n\t\t} else {\n\t\t\ttableManifestConfiguration.creationMode = CreationMode.Inline;\n\t\t\t// In case there was no specific configuration for the createAtEnd we force it to false\n\t\t\tif (originalTableSettings.creationMode?.createAtEnd === undefined) {\n\t\t\t\ttableManifestConfiguration.createAtEnd = false;\n\t\t\t}\n\t\t\tLog.info(\"The creation mode was changed from 'NewPage' to 'Inline' due to missing navigation configuration to the sub page.\");\n\t\t}\n\t}\n\treturn {\n\t\tmode: tableManifestConfiguration.creationMode,\n\t\tappend: tableManifestConfiguration.createAtEnd,\n\t\tnewAction: newAction?.toString()\n\t};\n}\nconst _getRowConfigurationProperty = function (\n\tlineItemAnnotation: LineItem | undefined,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tnavigationSettings: NavigationSettingsConfiguration,\n\ttargetPath: string,\n\ttableType: TableType\n): RowConfiguration {\n\tlet navigationInfo: RowNavigationInfo | undefined;\n\tlet criticalityProperty: BindingToolkitExpression<MessageType> = constant(MessageType.None);\n\tconst targetEntityType = converterContext.getEntityType();\n\tconst criticalityAnnotation = lineItemAnnotation?.annotations?.UI?.Criticality;\n\tif (navigationSettings && lineItemAnnotation) {\n\t\tconst navigationTarget = navigationSettings.display?.target || navigationSettings.detail?.outbound;\n\t\tconst targetEntitySet = converterContext.getEntitySet();\n\t\tcriticalityProperty = getHighlightRowBinding(\n\t\t\tcriticalityAnnotation,\n\t\t\t!!ModelHelper.getDraftRoot(targetEntitySet) || !!ModelHelper.getDraftNode(targetEntitySet),\n\t\t\ttargetEntityType\n\t\t);\n\t\tif (navigationTarget) {\n\t\t\tnavigationInfo = { type: \"Outbound\", navigationTarget };\n\t\t}\n\t\tif (!navigationTarget && navigationSettings.detail?.route) {\n\t\t\tconst checkEditable =\n\t\t\t\tModelHelper.getDraftRoot(targetEntitySet) !== undefined || ModelHelper.getDraftNode(targetEntitySet) !== undefined;\n\t\t\tnavigationInfo = {\n\t\t\t\ttype: \"Navigation\",\n\t\t\t\troutePath: navigationSettings.detail.route,\n\t\t\t\ttargetPath,\n\t\t\t\tcheckEditable,\n\t\t\t\trecreateContext: tableType === \"AnalyticalTable\"\n\t\t\t};\n\t\t}\n\t}\n\tconst rowNavigatedExpression: BindingToolkitExpression<boolean> = formatResult(\n\t\t[pathInModel(\"/deepestPath\", \"internal\")],\n\t\ttableFormatters.navigatedRow,\n\t\ttargetEntityType\n\t);\n\treturn {\n\t\tnavigationInfo,\n\t\taction: navigationInfo ? \"Navigation\" : undefined,\n\t\trowHighlighting: compileExpression(criticalityProperty),\n\t\trowNavigated: compileExpression(rowNavigatedExpression),\n\t\trowCriticalityForInsights: criticalityAnnotation ? criticalityExpressionForIntegrationCards(criticalityAnnotation) : undefined,\n\t\tvisible: compileExpression(not(UI.IsInactive))\n\t};\n};\n/**\n * Retrieve the columns from the entityType.\n * @param columnsToBeCreated The columns to be created.\n * @param entityType The target entity type.\n * @param annotationColumns The array of columns created based on LineItem annotations.\n * @param converterContext The converter context.\n * @param tableType The table type.\n * @param tableCreationMode The creation mode of the table.\n * @param displayModeOfDescriptionPropertiesMap The map of properties referenced as description on a text arrangement annotation.\n * @param restrictionsOnProperties The existing restrictions on properties\n * @returns The column from the entityType\n */\nexport const getColumnsFromEntityType = function (\n\tcolumnsToBeCreated: Record<string, Property>,\n\tentityType: EntityType,\n\tannotationColumns: AnnotationTableColumn[],\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\ttableType: TableType,\n\ttableCreationMode: CreationMode,\n\tdisplayModeOfDescriptionPropertiesMap: Record<string, DisplayMode>,\n\trestrictionsOnProperties?: RestrictionsOnProperties\n): AnnotationTableColumn[] {\n\tif (annotationColumns === undefined) {\n\t\tannotationColumns = [];\n\t}\n\n\tlet propertiesNotToBeConsidered: string[] = [];\n\tconst tableColumns: (AnnotationTableColumn | TechnicalColumn)[] = annotationColumns;\n\tconst aggregationHelper = new AggregationHelper(entityType, converterContext);\n\tconst groupableProperties = aggregationHelper.getGroupableProperties();\n\t//For Analytical table, we exclude all properties that are not groupable and used as Text in a groupable Property.\n\tif (tableType === \"AnalyticalTable\" && aggregationHelper.isAnalyticsSupported() && groupableProperties) {\n\t\tpropertiesNotToBeConsidered = groupableProperties\n\t\t\t.map((property) => property.$target)\n\t\t\t.filter((target) => target !== undefined)\n\t\t\t.map((target) => getAssociatedTextProperty(target as Property))\n\t\t\t.filter((textProp) => textProp && !aggregationHelper.isPropertyGroupable(textProp))\n\t\t\t.map((prop) => prop?.name)\n\t\t\t.filter((name) => name !== undefined) as string[];\n\t}\n\tentityType.entityProperties.forEach((property: Property) => {\n\t\t// Catch already existing columns - which were added before by LineItem Annotations\n\t\tconst exists = annotationColumns.some((column) => {\n\t\t\treturn column.name === property.name;\n\t\t});\n\t\t// if target type exists, it is a complex property and should be ignored\n\t\tif (!property.targetType && !exists && !propertiesNotToBeConsidered.includes(property.name)) {\n\t\t\tconst relatedPropertiesInfo: ComplexPropertyInfo = collectRelatedProperties(\n\t\t\t\tproperty.name,\n\t\t\t\tproperty,\n\t\t\t\tconverterContext,\n\t\t\t\ttrue,\n\t\t\t\ttableType\n\t\t\t);\n\t\t\tconst relatedPropertyNames: string[] = Object.keys(relatedPropertiesInfo.properties);\n\t\t\tconst additionalPropertyNames: string[] = Object.keys(relatedPropertiesInfo.additionalProperties);\n\t\t\t// Include the text properties and their corresponding text arrangement\n\t\t\trelatedPropertyNames.forEach((name) => {\n\t\t\t\taddPropertyToDisplayModeOfDescriptionPropertiesMap(displayModeOfDescriptionPropertiesMap, relatedPropertiesInfo, name);\n\t\t\t});\n\n\t\t\tconst columnInfo = getColumnDefinitionFromProperty(\n\t\t\t\tproperty,\n\t\t\t\tconverterContext.getEntitySetBasedAnnotationPath(property.fullyQualifiedName),\n\t\t\t\tproperty.name,\n\t\t\t\ttrue,\n\t\t\t\ttrue,\n\t\t\t\taggregationHelper,\n\t\t\t\tconverterContext,\n\t\t\t\tdisplayModeOfDescriptionPropertiesMap,\n\t\t\t\trestrictionsOnProperties,\n\t\t\t\ttableCreationMode,\n\t\t\t\trelatedPropertiesInfo\n\t\t\t);\n\t\t\tif (relatedPropertyNames.length > 0) {\n\t\t\t\tcolumnInfo.propertyInfos = relatedPropertyNames;\n\t\t\t\tif (relatedPropertiesInfo.exportSettings.dataPointTargetValue) {\n\t\t\t\t\tcolumnInfo.exportDataPointTargetValue = relatedPropertiesInfo.exportSettings.dataPointTargetValue;\n\t\t\t\t}\n\t\t\t\t// Collect information of related columns to be created.\n\t\t\t\trelatedPropertyNames.forEach((name) => {\n\t\t\t\t\tcolumnsToBeCreated[name] = relatedPropertiesInfo.properties[name].annotationProperty;\n\t\t\t\t});\n\t\t\t}\n\t\t\t// update Property Label when it's referenced only once in a column, new label will be the label of the column\n\t\t\tupdatePropertyLabel(annotationColumns, columnsToBeCreated, columnInfo);\n\t\t\tif (additionalPropertyNames.length > 0) {\n\t\t\t\tcolumnInfo.additionalPropertyInfos = additionalPropertyNames;\n\t\t\t\t// Create columns for additional properties identified for ALP use case.\n\t\t\t\tadditionalPropertyNames.forEach((additionalPropertyName) => {\n\t\t\t\t\t// Intentional overwrite as we require only one new PropertyInfo for a related Property.\n\t\t\t\t\tcolumnsToBeCreated[additionalPropertyName] = relatedPropertiesInfo.additionalProperties[additionalPropertyName];\n\t\t\t\t});\n\t\t\t}\n\t\t\ttableColumns.push(columnInfo);\n\t\t}\n\t\t// In case a property has defined a #TextOnly text arrangement that points to a text property (and not a 'hard coded text') don't only create the complex property with the text property as a child property,\n\t\t// but also the property itself as it can be used as within the sortConditions or on custom columns.\n\t\t// This step must be valid also from the columns added via LineItems or from a column available on the p13n.\n\t\tif (getDisplayMode(property) === \"Description\") {\n\t\t\trestrictionsOnProperties?.nonSortableProperties.push(property.name);\n\t\t\tif (isPathAnnotationExpression(property?.annotations?.Common?.Text)) {\n\t\t\t\ttableColumns.push(\n\t\t\t\t\tgetColumnDefinitionFromProperty(\n\t\t\t\t\t\tproperty,\n\t\t\t\t\t\tconverterContext.getEntitySetBasedAnnotationPath(property.fullyQualifiedName),\n\t\t\t\t\t\tproperty.name,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\taggregationHelper,\n\t\t\t\t\t\tconverterContext,\n\t\t\t\t\t\tdisplayModeOfDescriptionPropertiesMap,\n\t\t\t\t\t\trestrictionsOnProperties,\n\t\t\t\t\t\ttableCreationMode\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t});\n\t// Create a propertyInfo for each related property.\n\tconst relatedColumns = _createRelatedColumns(\n\t\tcolumnsToBeCreated,\n\t\ttableColumns,\n\t\tconverterContext,\n\t\tentityType,\n\t\tdisplayModeOfDescriptionPropertiesMap,\n\t\ttableCreationMode,\n\t\trestrictionsOnProperties\n\t);\n\treturn tableColumns.concat(relatedColumns);\n};\n/**\n * Create a column definition from a property.\n * @param property Entity type property for which the column is created\n * @param fullPropertyPath The full path to the target property\n * @param relativePath The relative path to the target property based on the context\n * @param useDataFieldPrefix Should be prefixed with \"DataField::\", else it will be prefixed with \"Property::\"\n * @param availableForAdaptation Decides whether the column should be available for adaptation\n * @param aggregationHelper The aggregationHelper for the entity\n * @param converterContext The converter context\n * @param displayModeOfDescriptionPropertiesMap The map of properties referenced as description on a text arrangement annotation\n * @param restrictionsOnProperties The existing restrictions on properties\n * @param tableCreationMode The creation mode of the table\n * @param relatedPropertiesInfo The properties identified so far for the column\n * @param relativePathForMultiValue The MDC path used for the 1:n property to allow filtering from MDC\n * @returns The annotation column definition\n */\nconst getColumnDefinitionFromProperty = function (\n\tproperty: Property,\n\tfullPropertyPath: string,\n\trelativePath: string,\n\tuseDataFieldPrefix: boolean,\n\tavailableForAdaptation: boolean,\n\taggregationHelper: AggregationHelper,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tdisplayModeOfDescriptionPropertiesMap: Record<string, DisplayMode>,\n\trestrictionsOnProperties?: RestrictionsOnProperties,\n\ttableCreationMode?: CreationMode,\n\trelatedPropertiesInfo?: ComplexPropertyInfo,\n\trelativePathForMultiValue?: string\n): AnnotationTableColumn | TechnicalColumn {\n\tlet name, key;\n\tconst semanticObjectAnnotationPath = getSemanticObjectPath(converterContext, property);\n\tconst isHidden = isReferencePropertyStaticallyHidden(property);\n\tconst groupPath: string | undefined = property.name ? _sliceAtSlash(property.name, true, false) : undefined;\n\tconst isGroup: boolean = groupPath != property.name;\n\tconst label = getLabel(property, isGroup);\n\tconst dataType: string | undefined = getDataFieldDataType(property);\n\tconst propertyTypeConfig = getTypeConfig(property, dataType);\n\tconst isAPropertyFromTextOnlyAnnotation = displayModeOfDescriptionPropertiesMap[relativePath] === \"Description\";\n\tconst sortable =\n\t\t(!isHidden || isAPropertyFromTextOnlyAnnotation) && !restrictionsOnProperties?.nonSortableProperties.includes(relativePath);\n\tconst filterable = !isAPropertyFromTextOnlyAnnotation && !restrictionsOnProperties?.nonFilterableProperties.includes(relativePath);\n\tconst typeConfig = {\n\t\tclassName: property.type || dataType,\n\t\tformatOptions: propertyTypeConfig.formatOptions,\n\t\tconstraints: propertyTypeConfig.constraints\n\t};\n\tlet exportSettings: ColumnExportSettings | null = null;\n\tif (_isExportableColumn(property)) {\n\t\texportSettings = createColumnExportSettings(property, relatedPropertiesInfo);\n\t}\n\tconst availability: AvailabilityType =\n\t\t!availableForAdaptation || isHidden || displayModeOfDescriptionPropertiesMap[relativePath] ? \"Hidden\" : \"Adaptation\";\n\tconst collectedNavigationPropertyLabels: string[] | undefined = _getCollectedNavigationPropertyLabels(relativePath, converterContext);\n\tif (relativePathForMultiValue) {\n\t\tname = relativePathForMultiValue;\n\t\tkey = \"DataField::\" + replaceSpecialChars(relativePathForMultiValue);\n\t\trelativePath = relativePathForMultiValue;\n\t} else {\n\t\tname = useDataFieldPrefix ? relativePath : `Property::${relativePath}`;\n\t\tkey = (useDataFieldPrefix ? \"DataField::\" : \"Property::\") + replaceSpecialChars(relativePath);\n\t}\n\n\tconst column: AnnotationTableColumn = {\n\t\tkey: key,\n\t\ttype: ColumnType.Annotation,\n\t\tlabel: label,\n\t\tgroupLabel: isGroup ? getLabel(property) : undefined,\n\t\tgroup: isGroup ? groupPath : undefined,\n\t\tannotationPath: fullPropertyPath,\n\t\tsemanticObjectPath: semanticObjectAnnotationPath,\n\t\tavailability: availability,\n\t\tname: name,\n\t\trelativePath: relativePath,\n\t\tsortable: sortable,\n\t\tfilterable: filterable,\n\t\tisGroupable: aggregationHelper.isAnalyticsSupported() ? !!aggregationHelper.isPropertyGroupable(property) : sortable,\n\t\tisKey: property.isKey,\n\t\texportSettings: exportSettings,\n\t\tcaseSensitive: isFilteringCaseSensitive(converterContext),\n\t\ttypeConfig: typeConfig as PropertyTypeConfig,\n\t\timportance: getImportance(converterContext, property.annotations?.UI?.DataFieldDefault),\n\t\trequired: isRequiredColumn(converterContext, property, tableCreationMode),\n\t\tadditionalLabels: collectedNavigationPropertyLabels\n\t};\n\t_addToolTip(property, column);\n\t_setExportSettingsForDataPoint(property, column);\n\n\tif (\n\t\taggregationHelper.isAnalyticsSupported() &&\n\t\tModelHelper.isObjectPathDraftSupported(converterContext.getDataModelObjectPath()) &&\n\t\t(relativePath === \"HasActiveEntity\" || relativePath === \"HasDraftEntity\")\n\t) {\n\t\t// In case of analytical table on a draft-enabled entity, we always consider the HasDraftEntity and HasActiveEntity properties as\n\t\t// technically groupable, as we need to load them for our internal logic.\n\t\tconst enhancedColumn = column as TechnicalColumn;\n\t\tenhancedColumn.extension = {\n\t\t\ttechnicallyAggregatable: false,\n\t\t\ttechnicallyGroupable: true\n\t\t};\n\t\treturn enhancedColumn;\n\t} else {\n\t\treturn column;\n\t}\n};\n/**\n * Create the export settings for a given column.\n * @param column The given column from a line item as a data field or a property from the entity type\n * @param relatedPropertiesInfo The related properties linked to the column (named also complex property)\n * @returns The export settings in a the given column\n */\nconst createColumnExportSettings = function (\n\tcolumn: Property | DataFieldAbstractTypes,\n\trelatedPropertiesInfo?: ComplexPropertyInfo\n): ColumnExportSettings {\n\tlet unitProperty, timezoneProperty, unitText, timezoneText, utc, isATimezone, currencyProperty, scale;\n\tconst relatedPropertyNames = relatedPropertiesInfo ? Object.keys(relatedPropertiesInfo.properties) : [];\n\tif (relatedPropertiesInfo && relatedPropertyNames?.length === 1) {\n\t\t// Create the export settings of a column based on the related (child) property in case there is only one.\n\t\t// This is required when we have a text only annotation to compute the export settings from the text instead of the value\n\t\tcolumn = relatedPropertiesInfo.properties[relatedPropertyNames[0]].annotationProperty;\n\t}\n\tconst dataType = getDataFieldDataType(column);\n\tif (isProperty(column)) {\n\t\tunitProperty = getAssociatedUnitProperty(column);\n\t\tcurrencyProperty = getAssociatedCurrencyProperty(column);\n\t\ttimezoneProperty = getAssociatedTimezoneProperty(column);\n\t\tunitText = getStaticUnitOrCurrency(column);\n\t\ttimezoneText = getStaticTimezone(column);\n\t\tisATimezone = isTimezone(column);\n\t\tscale = column.scale;\n\t}\n\tunitProperty = relatedPropertiesInfo?.exportSettings?.unitProperty ?? unitProperty?.name ?? currencyProperty?.name;\n\ttimezoneProperty = relatedPropertiesInfo?.exportSettings?.timezoneProperty ?? timezoneProperty?.name;\n\tscale = relatedPropertiesInfo?.exportSettings?.scale ?? scale;\n\tconst exportType = getExportDataType(dataType, isATimezone, !!currencyProperty, relatedPropertiesInfo?.exportSettings);\n\tif (timezoneProperty || (exportType === \"DateTime\" && !timezoneText)) {\n\t\tutc = false;\n\t}\n\tconst exportSettings: ColumnExportSettings = {\n\t\ttype: exportType,\n\t\tinputFormat: getDateInputFormat(dataType),\n\t\tdelimiter: getDelimiter(dataType),\n\t\tscale: scale,\n\t\tunitProperty: unitProperty,\n\t\tunit: relatedPropertiesInfo?.exportSettings.unit ?? unitText,\n\t\ttimezoneProperty: timezoneProperty,\n\t\ttimezone: relatedPropertiesInfo?.exportSettings.timezone ?? timezoneText?.toString(),\n\t\ttemplate: relatedPropertiesInfo?.exportSettings.template,\n\t\t//only in case of complex properties, wrap the cell content\ton the excel exported file\n\t\twrap: relatedPropertiesInfo?.exportSettings.wrap,\n\t\tutc: utc\n\t};\n\tif (exportSettings.unitProperty || exportSettings.unit) {\n\t\texportSettings.autoScale = true;\n\t}\n\treturn removeUndefinedFromExportSettings(exportSettings);\n};\n/**\n * Gets the export format template for columns with dates.\n * @param dataType The data type of the column\n * @returns The inputFormat\n */\nconst getDateInputFormat = function (dataType?: string): string | undefined {\n\treturn dataType === \"Edm.Date\" ? \"YYYY-MM-DD\" : undefined;\n};\n/**\n * Gets the delimiter in numeric columns.\n * The delimiter is used to display thousands separator in numeric columns.\n * @param dataType The data type of the column\n * @returns True to display thousands separator in numeric columns\n */\nconst getDelimiter = function (dataType?: string): boolean | undefined {\n\treturn dataType === \"Edm.Int64\" ? true : undefined;\n};\n/**\n * Removes undefined values from the export settings object of a column.\n * @param exportSettings The export settings configurations for a column\n * @returns The export settings configurations without undefined values\n */\nconst removeUndefinedFromExportSettings = function (exportSettings: ColumnExportSettings): ColumnExportSettings {\n\t//Remove undefined settings from exportSetting object\n\tfor (const setting in exportSettings) {\n\t\tif (exportSettings[setting as keyof ColumnExportSettings] === undefined) {\n\t\t\tdelete exportSettings[setting as keyof ColumnExportSettings];\n\t\t}\n\t}\n\treturn exportSettings;\n};\n/**\n * Update property label in case it's only referenced in one column. The label of the column must be used instead of the property label.\n * This update also is applied for the tooltip as it is based on the column's label.\n * @param annotationColumns The array of columns created based on LineItem annotations.\n * @param columnsToBeCreated The columns to be created\n * @param columnInfo The column definition\n * @param columnName The name of the column\n */\nfunction updatePropertyLabel(\n\tannotationColumns: AnnotationTableColumn[],\n\tcolumnsToBeCreated: Record<string, Property>,\n\tcolumnInfo: AnnotationTableColumn,\n\tcolumnName?: string\n): void {\n\tconst linkedAnnotationColumns = annotationColumns.filter(\n\t\t(col) => col.propertyInfos?.includes(columnInfo.relativePath) || (columnName && col.propertyInfos?.includes(columnName))\n\t);\n\tif (\n\t\tlinkedAnnotationColumns?.length === 1 &&\n\t\t(columnsToBeCreated[columnInfo.relativePath] || (columnName && columnsToBeCreated[columnName])) &&\n\t\tlinkedAnnotationColumns[0].propertyInfos?.length === 1\n\t) {\n\t\tcolumnInfo.label = linkedAnnotationColumns[0].label;\n\t\tcolumnInfo.tooltip = linkedAnnotationColumns[0].tooltip;\n\t}\n}\n/**\n * Returns Boolean true for exportable columns, false for non exportable columns.\n * @param source The dataField or property to be evaluated\n * @returns True for exportable column, false for non exportable column\n */\nfunction _isExportableColumn(source: DataFieldAbstractTypes | Property): boolean {\n\tlet propertyType, property;\n\tconst dataFieldDefaultProperty = (source as Property).annotations.UI?.DataFieldDefault;\n\tif (isProperty(source)) {\n\t\tif (isReferencePropertyStaticallyHidden(source)) {\n\t\t\treturn false;\n\t\t}\n\t\tpropertyType = dataFieldDefaultProperty?.$Type;\n\t} else if (isReferencePropertyStaticallyHidden(source)) {\n\t\treturn false;\n\t} else {\n\t\tproperty = source;\n\t\tpropertyType = property.$Type;\n\t\tif (propertyType === UIAnnotationTypes.DataFieldForAnnotation && (property as DataFieldForAnnotation).Target?.$target?.$Type) {\n\t\t\t//For Chart\n\t\t\tpropertyType = (property as DataFieldForAnnotation).Target?.$target?.$Type;\n\t\t\treturn propertyType !== undefined && !UIAnnotationTypes.ChartDefinitionType.includes(propertyType);\n\t\t} else if (\n\t\t\t(property as DataField).Value?.$target?.annotations?.Core?.MediaType?.term === \"Org.OData.Core.V1.MediaType\" &&\n\t\t\t(property as DataField).Value?.$target?.annotations?.Core?.isURL !== true\n\t\t) {\n\t\t\t//For Stream\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn propertyType\n\t\t? ![\n\t\t\t\tUIAnnotationTypes.DataFieldForAction,\n\t\t\t\tUIAnnotationTypes.DataFieldForIntentBasedNavigation,\n\t\t\t\tUIAnnotationTypes.DataFieldForActionGroup\n\t\t  ].includes(propertyType)\n\t\t: true;\n}\n/**\n * Returns Boolean true for valid columns, false for invalid columns.\n * @param dataField Different DataField types defined in the annotations\n * @returns True for valid columns, false for invalid columns\n */\nconst _isValidColumn = function (dataField: DataFieldAbstractTypes): boolean {\n\tswitch (dataField.$Type) {\n\t\tcase UIAnnotationTypes.DataFieldForAction:\n\t\tcase UIAnnotationTypes.DataFieldForIntentBasedNavigation:\n\t\t\treturn !!dataField.Inline;\n\t\tcase UIAnnotationTypes.DataFieldWithAction:\n\t\tcase UIAnnotationTypes.DataFieldWithIntentBasedNavigation:\n\t\tcase UIAnnotationTypes.DataField:\n\t\tcase UIAnnotationTypes.DataFieldWithUrl:\n\t\tcase UIAnnotationTypes.DataFieldForAnnotation:\n\t\tcase UIAnnotationTypes.DataFieldWithNavigationPath:\n\t\t\treturn true;\n\t\tdefault:\n\t\t\t// Todo: Replace with proper Log statement once available\n\t\t\t//  throw new Error(\"Unhandled DataField Abstract type: \" + dataField.$Type);\n\t\t\treturn false;\n\t}\n};\n/**\n * Returns the binding expression to evaluate the visibility of a DataField or DataPoint annotation.\n *\n * SAP Fiori elements will evaluate either the UI.Hidden annotation defined on the annotation itself or on the target property.\n * @param dataFieldModelPath The metapath referring to the annotation that is evaluated by SAP Fiori elements.\n * @returns An expression that you can bind to the UI.\n */\nexport const _getVisibleExpression = function (\n\tdataFieldModelPath: DataModelObjectPath<DataFieldAbstractTypes | DataPointTypeTypes>\n): BindingToolkitExpression<boolean> {\n\tconst targetObject = dataFieldModelPath.targetObject;\n\tlet propertyValue;\n\tif (targetObject) {\n\t\tswitch (targetObject.$Type) {\n\t\t\tcase UIAnnotationTypes.DataField:\n\t\t\tcase UIAnnotationTypes.DataFieldWithUrl:\n\t\t\tcase UIAnnotationTypes.DataFieldWithNavigationPath:\n\t\t\tcase UIAnnotationTypes.DataFieldWithIntentBasedNavigation:\n\t\t\tcase UIAnnotationTypes.DataFieldWithAction:\n\t\t\tcase UIAnnotationTypes.DataPointType:\n\t\t\t\tpropertyValue = targetObject.Value.$target;\n\t\t\t\tbreak;\n\t\t\tcase UIAnnotationTypes.DataFieldForAnnotation:\n\t\t\t\t// if it is a DataFieldForAnnotation pointing to a DataPoint we look at the dataPoint's value\n\t\t\t\tif (targetObject?.Target?.$target?.$Type === UIAnnotationTypes.DataPointType) {\n\t\t\t\t\tpropertyValue = targetObject.Target.$target?.Value.$target;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase UIAnnotationTypes.DataFieldForIntentBasedNavigation:\n\t\t\tcase UIAnnotationTypes.DataFieldForAction:\n\t\t\tdefault:\n\t\t\t\tpropertyValue = undefined;\n\t\t}\n\t}\n\tconst isAnalyticalGroupHeaderExpanded = /*formatOptions?.isAnalytics ? UI.IsExpanded :*/ constant(false);\n\tconst isAnalyticalLeaf = /*formatOptions?.isAnalytics ? equal(UI.NodeLevel, 0) :*/ constant(false);\n\t// A data field is visible if:\n\t// - the UI.Hidden expression in the original annotation does not evaluate to 'true'\n\t// - the UI.Hidden expression in the target property does not evaluate to 'true'\n\t// - in case of Analytics it's not visible for an expanded GroupHeader\n\treturn and(\n\t\t...[\n\t\t\tnot(equal(getExpressionFromAnnotation(targetObject?.annotations?.UI?.Hidden), true)),\n\t\t\tifElse(\n\t\t\t\t!!propertyValue,\n\t\t\t\tpropertyValue && not(equal(getExpressionFromAnnotation(propertyValue.annotations?.UI?.Hidden), true)),\n\t\t\t\ttrue\n\t\t\t),\n\t\t\tor(not(isAnalyticalGroupHeaderExpanded), isAnalyticalLeaf)\n\t\t]\n\t);\n};\n/**\n * Returns hidden binding expressions for a field group.\n * @param dataFieldGroup DataField defined in the annotations\n * @returns Compile binding of field group expressions.\n */\nconst _getFieldGroupHiddenExpressions = function (dataFieldGroup: DataFieldAbstractTypes): CompiledBindingToolkitExpression | undefined {\n\tconst fieldGroupHiddenExpressions: BindingToolkitExpression<boolean>[] = [];\n\tif (\n\t\tdataFieldGroup.$Type === UIAnnotationTypes.DataFieldForAnnotation &&\n\t\tdataFieldGroup.Target?.$target?.$Type === UIAnnotationTypes.FieldGroupType\n\t) {\n\t\tif (dataFieldGroup?.annotations?.UI?.Hidden) {\n\t\t\treturn compileExpression(not(equal(getExpressionFromAnnotation(dataFieldGroup.annotations.UI.Hidden), true)));\n\t\t} else {\n\t\t\tdataFieldGroup.Target.$target.Data?.forEach((innerDataField: DataFieldAbstractTypes | DataPointTypeTypes) => {\n\t\t\t\tfieldGroupHiddenExpressions.push(\n\t\t\t\t\t_getVisibleExpression({ targetObject: innerDataField } as DataModelObjectPath<\n\t\t\t\t\t\tDataFieldAbstractTypes | DataPointTypeTypes\n\t\t\t\t\t>)\n\t\t\t\t);\n\t\t\t});\n\t\t\treturn compileExpression(ifElse(or(...fieldGroupHiddenExpressions), constant(true), constant(false)));\n\t\t}\n\t} else {\n\t\treturn undefined;\n\t}\n};\n/**\n * Returns the label for the property and dataField.\n * @param [property] Property, DataField or Navigation Property defined in the annotations\n * @param isGroup\n * @returns Label of the property or DataField\n */\nconst getLabel = function (property: DataFieldAbstractTypes | Property | NavigationProperty, isGroup = false): string | undefined {\n\tif (!property) {\n\t\treturn undefined;\n\t}\n\tif (isProperty(property) || isNavigationProperty(property)) {\n\t\tconst dataFieldDefault = (property as Property).annotations?.UI?.DataFieldDefault;\n\t\tif (dataFieldDefault && !dataFieldDefault.qualifier && dataFieldDefault.Label) {\n\t\t\treturn dataFieldDefault.Label?.toString();\n\t\t}\n\t\treturn property.annotations.Common?.Label?.toString() ?? property.name;\n\t} else if (isDataFieldTypes(property)) {\n\t\tif (!!isGroup && property.$Type === UIAnnotationTypes.DataFieldWithIntentBasedNavigation) {\n\t\t\treturn property?.Label?.toString();\n\t\t}\n\t\treturn (\n\t\t\tproperty?.Label?.toString() ??\n\t\t\tcompileExpression(\n\t\t\t\tgetExpressionFromAnnotation(property.Value?.$target?.annotations?.Common?.Label, [], property.Value?.$target?.name)\n\t\t\t)\n\t\t);\n\t} else if (property.$Type === UIAnnotationTypes.DataFieldForAnnotation) {\n\t\treturn (\n\t\t\tproperty.Label?.toString() ??\n\t\t\tcompileExpression(\n\t\t\t\tgetExpressionFromAnnotation((property.Target?.$target as DataPoint)?.Value?.$target?.annotations?.Common?.Label?.valueOf())\n\t\t\t)\n\t\t);\n\t} else {\n\t\treturn property.Label?.toString();\n\t}\n};\nconst _getTooltip = function (source: DataFieldAbstractTypes | Property): string | undefined {\n\tif (!source) {\n\t\treturn undefined;\n\t}\n\tif (isProperty(source) || source.annotations?.Common?.QuickInfo) {\n\t\treturn source.annotations?.Common?.QuickInfo\n\t\t\t? compileExpression(getExpressionFromAnnotation(source.annotations.Common.QuickInfo))\n\t\t\t: undefined;\n\t} else if (isDataFieldTypes(source)) {\n\t\treturn source.Value?.$target?.annotations?.Common?.QuickInfo\n\t\t\t? compileExpression(getExpressionFromAnnotation(source.Value.$target.annotations.Common.QuickInfo))\n\t\t\t: undefined;\n\t} else if (source.$Type === UIAnnotationTypes.DataFieldForAnnotation) {\n\t\tconst datapointTarget = source.Target?.$target as DataPoint;\n\t\treturn datapointTarget?.Value?.$target?.annotations?.Common?.QuickInfo\n\t\t\t? compileExpression(getExpressionFromAnnotation(datapointTarget.Value.$target.annotations.Common.QuickInfo))\n\t\t\t: undefined;\n\t} else {\n\t\treturn undefined;\n\t}\n};\nexport function getRowStatusVisibility(colName: string, isSemanticKeyInFieldGroup?: boolean): BindingToolkitExpression<boolean> {\n\treturn formatResult(\n\t\t[\n\t\t\tpathInModel(`semanticKeyHasDraftIndicator`, \"internal\"),\n\t\t\tpathInModel(`filteredMessages`, \"internal\"),\n\t\t\tcolName,\n\t\t\tisSemanticKeyInFieldGroup\n\t\t],\n\t\ttableFormatters.getErrorStatusTextVisibilityFormatter\n\t);\n}\n/**\n * Creates a PropertyInfo for each identified property consumed by a LineItem.\n * @param columnsToBeCreated Identified properties.\n * @param existingColumns The list of columns created for LineItems and Properties of entityType.\n * @param converterContext The converter context.\n * @param entityType The entity type for the LineItem\n * @param displayModeOfDescriptionPropertiesMap The map of properties referenced as text on a text arrangement annotation.\n * @param tableCreationMode The creation mode of the table\n * @param restrictionsOnProperties The existing restrictions on properties\n * @returns The array of columns created.\n */\nconst _createRelatedColumns = function (\n\tcolumnsToBeCreated: Record<string, Property>,\n\texistingColumns: AnnotationTableColumn[],\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tentityType: EntityType,\n\tdisplayModeOfDescriptionPropertiesMap: Record<string, DisplayMode>,\n\ttableCreationMode?: CreationMode,\n\trestrictionsOnProperties?: RestrictionsOnProperties\n): AnnotationTableColumn[] {\n\tconst relatedColumns: (AnnotationTableColumn | TechnicalColumn)[] = [];\n\tconst relatedPropertyNameMap: Record<string, string> = {};\n\tconst aggregationHelper = new AggregationHelper(entityType, converterContext);\n\tObject.keys(columnsToBeCreated).forEach((name) => {\n\t\tconst property = columnsToBeCreated[name],\n\t\t\tannotationPath = converterContext.getAbsoluteAnnotationPath(name),\n\t\t\t// Check whether the related column already exists.\n\t\t\trelatedColumn = existingColumns.find((column) => column.name === name);\n\t\tconst dataModelObjectPath = converterContext.getConverterContextFor(converterContext.getContextPath()).getDataModelObjectPath();\n\t\tconst propertyObjectPath = enhanceDataModelPath<PageContextPathTarget>(dataModelObjectPath, name);\n\t\tif (isMultiValueField(propertyObjectPath)) {\n\t\t\tconst newNameRelativeTargetPath = getContextRelativeTargetObjectPath(propertyObjectPath, false, true);\n\t\t\tconst column = getColumnDefinitionFromProperty(\n\t\t\t\tproperty,\n\t\t\t\tannotationPath,\n\t\t\t\tname,\n\t\t\t\ttrue,\n\t\t\t\tfalse,\n\t\t\t\taggregationHelper,\n\t\t\t\tconverterContext,\n\t\t\t\tdisplayModeOfDescriptionPropertiesMap,\n\t\t\t\trestrictionsOnProperties,\n\t\t\t\ttableCreationMode,\n\t\t\t\tundefined,\n\t\t\t\tnewNameRelativeTargetPath\n\t\t\t);\n\t\t\tcomputeHiddenOnRelatedColumns(existingColumns, name, column);\n\t\t\tupdatePropertyLabel(existingColumns, columnsToBeCreated, column, name);\n\t\t\trelatedColumns.push(column);\n\t\t\trelatedPropertyNameMap[name] = newNameRelativeTargetPath ?? name;\n\t\t} else if (relatedColumn === undefined) {\n\t\t\t// Case 1: Key contains DataField prefix to ensure all property columns have the same key format.\n\t\t\t// New created property column is set to hidden.\n\t\t\tconst column = getColumnDefinitionFromProperty(\n\t\t\t\tproperty,\n\t\t\t\tannotationPath,\n\t\t\t\tname,\n\t\t\t\ttrue,\n\t\t\t\tfalse,\n\t\t\t\taggregationHelper,\n\t\t\t\tconverterContext,\n\t\t\t\tdisplayModeOfDescriptionPropertiesMap,\n\t\t\t\trestrictionsOnProperties,\n\t\t\t\ttableCreationMode\n\t\t\t);\n\t\t\tcomputeHiddenOnRelatedColumns(existingColumns, name, column);\n\t\t\tupdatePropertyLabel(existingColumns, columnsToBeCreated, column);\n\t\t\trelatedColumns.push(column);\n\t\t} else if (relatedColumn.annotationPath !== annotationPath || relatedColumn.propertyInfos) {\n\t\t\t// Case 2: The existing column points to a LineItem (or)\n\t\t\t// Case 3: This is a self reference from an existing column\n\t\t\tconst newName = `Property::${name}`;\n\t\t\t// Checking whether the related property column has already been created in a previous iteration.\n\t\t\tif (!existingColumns.some((column) => column.name === newName)) {\n\t\t\t\t// Create a new property column with 'Property::' prefix,\n\t\t\t\t// Set it to hidden as it is only consumed by Complex property infos.\n\t\t\t\tconst column = getColumnDefinitionFromProperty(\n\t\t\t\t\tproperty,\n\t\t\t\t\tannotationPath,\n\t\t\t\t\tname,\n\t\t\t\t\tfalse,\n\t\t\t\t\tfalse,\n\t\t\t\t\taggregationHelper,\n\t\t\t\t\tconverterContext,\n\t\t\t\t\tdisplayModeOfDescriptionPropertiesMap,\n\t\t\t\t\trestrictionsOnProperties,\n\t\t\t\t\ttableCreationMode\n\t\t\t\t);\n\t\t\t\tcomputeHiddenOnRelatedColumns(existingColumns, name, column);\n\t\t\t\tupdatePropertyLabel(existingColumns, columnsToBeCreated, column);\n\t\t\t\trelatedColumns.push(column);\n\t\t\t\trelatedPropertyNameMap[name] = newName;\n\t\t\t} else if (\n\t\t\t\texistingColumns.some((column) => column.name === newName) &&\n\t\t\t\texistingColumns.some((column) => column.propertyInfos?.includes(name))\n\t\t\t) {\n\t\t\t\trelatedPropertyNameMap[name] = newName;\n\t\t\t}\n\t\t} else if (\n\t\t\tdisplayModeOfDescriptionPropertiesMap[name] === \"Description\" &&\n\t\t\t!relatedColumn.filterable &&\n\t\t\t!restrictionsOnProperties?.nonFilterableProperties.includes(name)\n\t\t) {\n\t\t\t// Case 4: The column is a referenced text only property. Set it to hidden, non sortable nor groupable.\n\t\t\t// Case 5: The column isn't already available for filtering as it could be referenced on another column (e.g. text first).\n\t\t\trestrictionsOnProperties?.nonSortableProperties.push(name);\n\t\t\tconst column = getColumnDefinitionFromProperty(\n\t\t\t\tproperty,\n\t\t\t\tannotationPath,\n\t\t\t\tname,\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\taggregationHelper,\n\t\t\t\tconverterContext,\n\t\t\t\t{},\n\t\t\t\trestrictionsOnProperties,\n\t\t\t\ttableCreationMode\n\t\t\t);\n\t\t\tcolumn.isGroupable = false;\n\t\t\trelatedColumns.push(column);\n\t\t}\n\t});\n\t// The property 'name' has been prefixed with 'Property::' for uniqueness.\n\t// Update the same in other propertyInfos[] references which point to this property.\n\texistingColumns.forEach((column) => {\n\t\tcolumn.propertyInfos = column.propertyInfos?.map((propertyInfo) => relatedPropertyNameMap[propertyInfo] ?? propertyInfo);\n\t\tcolumn.additionalPropertyInfos = column.additionalPropertyInfos?.map(\n\t\t\t(propertyInfo) => relatedPropertyNameMap[propertyInfo] ?? propertyInfo\n\t\t);\n\t});\n\treturn relatedColumns;\n};\n/**\n * Getting the Column Name\n * If it points to a DataField with one property or DataPoint with one property, it will use the property name\n * here to be consistent with the existing flex changes.\n * @param dataField Different DataField types defined in the annotations\n * @returns The name of annotation columns\n */\nconst _getAnnotationColumnName = function (dataField: DataFieldAbstractTypes): string {\n\t// This is needed as we have flexibility changes already that we have to check against\n\tif (isDataFieldTypes(dataField) && dataField.Value?.path) {\n\t\treturn dataField.Value?.path;\n\t} else if (dataField.$Type === UIAnnotationTypes.DataFieldForAnnotation && (dataField.Target?.$target as DataPoint)?.Value?.path) {\n\t\t// This is for removing duplicate properties. For example, 'Progress' Property is removed if it is already defined as a DataPoint\n\t\treturn (dataField.Target?.$target as DataPoint)?.Value.path;\n\t} else {\n\t\treturn KeyHelper.generateKeyFromDataField(dataField);\n\t}\n};\n/**\n * Creates a PropertyInfo for the identified additional property for the ALP table use-case.\n *\n * For e.g. If UI.Hidden points to a property, include this technical property in the additionalProperties of ComplexPropertyInfo object.\n * @param name The name of the property to be created.\n * @param columns The list of columns created for LineItems and Properties of entityType from the table visualization.\n * @param relatedAdditionalPropertyNameMap\n */\nconst createTechnicalProperty = function (\n\tname: string,\n\tcolumns: TableColumn[],\n\trelatedAdditionalPropertyNameMap: Record<string, string>\n): void {\n\tconst key = `Property_Technical::${name}`;\n\t// Validate if the technical property hasn't yet been created on previous iterations.\n\tconst columnExists = columns.find((column) => column.key === key);\n\t// Retrieve the simple property used by the hidden annotation, it will be used as a base for the mandatory attributes of newly created technical property. For e.g. relativePath\n\tconst additionalProperty =\n\t\t!columnExists && (columns.find((column) => column.name === name && !column.propertyInfos) as AnnotationTableColumn)!;\n\tif (additionalProperty) {\n\t\tconst technicalColumn: TechnicalColumn = {\n\t\t\tkey: key,\n\t\t\ttype: ColumnType.Annotation,\n\t\t\tlabel: additionalProperty.label,\n\t\t\tannotationPath: additionalProperty.annotationPath,\n\t\t\tavailability: \"Hidden\",\n\t\t\tname: key,\n\t\t\trelativePath: additionalProperty.relativePath,\n\t\t\tsortable: false,\n\t\t\tisGroupable: false,\n\t\t\tisKey: false,\n\t\t\texportSettings: null,\n\t\t\tcaseSensitive: false,\n\t\t\taggregatable: false,\n\t\t\tfilterable: false,\n\t\t\textension: {\n\t\t\t\ttechnicallyGroupable: true,\n\t\t\t\ttechnicallyAggregatable: true\n\t\t\t}\n\t\t};\n\t\tcolumns.push(technicalColumn);\n\t\trelatedAdditionalPropertyNameMap[name] = technicalColumn.name;\n\t}\n};\n/**\n * Determines if the data field labels have to be displayed in the table.\n * @param fieldGroupName The `DataField` name being processed.\n * @param visualizationPath\n * @param converterContext\n * @returns `showDataFieldsLabel` value from the manifest\n */\nconst _getShowDataFieldsLabel = function (\n\tfieldGroupName: string,\n\tvisualizationPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): boolean | undefined {\n\tconst columns = converterContext.getManifestControlConfiguration<TableManifestConfiguration>(visualizationPath)?.columns;\n\tconst columnKeys = columns && Object.keys(columns);\n\treturn (\n\t\tcolumnKeys &&\n\t\t!!columnKeys.find(function (key: string) {\n\t\t\treturn key === fieldGroupName && (columns[key] as CustomDefinedTableColumnForOverride).showDataFieldsLabel;\n\t\t})\n\t);\n};\n/**\n * Determines the relative path of the property with respect to the root entity.\n * @param dataField The `DataField` being processed.\n * @returns The relative path\n */\nconst _getRelativePath = function (dataField: DataFieldAbstractTypes): string {\n\tlet relativePath = \"\";\n\tswitch (dataField.$Type) {\n\t\tcase UIAnnotationTypes.DataField:\n\t\tcase UIAnnotationTypes.DataFieldWithNavigationPath:\n\t\tcase UIAnnotationTypes.DataFieldWithUrl:\n\t\tcase UIAnnotationTypes.DataFieldWithIntentBasedNavigation:\n\t\tcase UIAnnotationTypes.DataFieldWithAction:\n\t\t\trelativePath = (dataField as DataField)?.Value?.path;\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataFieldForAnnotation:\n\t\t\trelativePath = dataField?.Target?.value;\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataFieldForAction:\n\t\tcase UIAnnotationTypes.DataFieldForIntentBasedNavigation:\n\t\tcase UIAnnotationTypes.DataFieldForActionGroup:\n\t\tcase UIAnnotationTypes.DataFieldWithActionGroup:\n\t\t\trelativePath = KeyHelper.generateKeyFromDataField(dataField);\n\t\t\tbreak;\n\t}\n\treturn relativePath;\n};\nconst _sliceAtSlash = function (path: string, isLastSlash: boolean, isLastPart: boolean): string {\n\tconst iSlashIndex = isLastSlash ? path.lastIndexOf(\"/\") : path.indexOf(\"/\");\n\tif (iSlashIndex === -1) {\n\t\treturn path;\n\t}\n\treturn isLastPart ? path.substring(iSlashIndex + 1, path.length) : path.substring(0, iSlashIndex);\n};\n/**\n * Determines if the column contains a multi-value field.\n * @param dataField The DataField being processed\n * @param converterContext The converter context\n * @returns True if the DataField corresponds to a multi-value field.\n */\nconst _isColumnMultiValued = function (\n\tdataField: DataFieldAbstractTypes,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): boolean {\n\tif (isDataFieldTypes(dataField) && isPathAnnotationExpression(dataField.Value)) {\n\t\tconst propertyObjectPath = enhanceDataModelPath<PageContextPathTarget>(\n\t\t\tconverterContext.getDataModelObjectPath(),\n\t\t\tdataField.Value.path\n\t\t);\n\t\treturn isMultiValueField(propertyObjectPath);\n\t} else {\n\t\treturn false;\n\t}\n};\n/**\n * Determine whether a column is sortable.\n * @param dataField The data field being processed\n * @param propertyPath The property path\n * @param nonSortableColumns Collection of non-sortable column names as per annotation\n * @param relatedPropertiesInfo The related properties linked to the column\n * @returns True if the column is sortable\n */\nconst _isColumnSortable = function (\n\tdataField: DataFieldAbstractTypes,\n\tpropertyPath: string,\n\tnonSortableColumns: string[],\n\trelatedPropertiesInfo: ComplexPropertyInfo\n): boolean {\n\treturn (\n\t\t!nonSortableColumns.includes(propertyPath) && // Column is not marked as non-sortable via annotation\n\t\t(((dataField.$Type === UIAnnotationTypes.DataField || dataField.$Type === UIAnnotationTypes.DataFieldForAnnotation) &&\n\t\t\tObject.keys(relatedPropertiesInfo.properties).some((propName) => {\n\t\t\t\tconst isHidden = isReferencePropertyStaticallyHidden(relatedPropertiesInfo.properties[propName].annotationProperty);\n\t\t\t\treturn !isHidden && !nonSortableColumns.includes(propName);\n\t\t\t})) ||\n\t\t\tdataField.$Type === UIAnnotationTypes.DataFieldWithUrl ||\n\t\t\tdataField.$Type === UIAnnotationTypes.DataFieldWithIntentBasedNavigation ||\n\t\t\tdataField.$Type === UIAnnotationTypes.DataFieldWithAction)\n\t);\n};\n/**\n * Returns whether filtering on the table is case sensitive.\n * @param converterContext The instance of the converter context\n * @returns Returns 'false' if FilterFunctions annotation supports 'tolower', else 'true'\n */\nexport const isFilteringCaseSensitive = function (converterContext: ConverterContext<PageContextPathTarget>): boolean {\n\tconst filterFunctions: FilterFunctions | undefined = _getFilterFunctions(converterContext);\n\treturn Array.isArray(filterFunctions) ? !(filterFunctions as String[]).includes(\"tolower\") : true;\n};\nfunction _getFilterFunctions(ConverterContext: ConverterContext<PageContextPathTarget>): FilterFunctions | undefined {\n\tconst entitySet = ConverterContext.getEntitySet();\n\tif (TypeGuards.isEntitySet(entitySet)) {\n\t\treturn (\n\t\t\tentitySet.annotations.Capabilities?.FilterFunctions ??\n\t\t\tConverterContext.getEntityContainer().annotations.Capabilities?.FilterFunctions\n\t\t);\n\t}\n\treturn undefined;\n}\n/**\n * Returns default format options for text fields in a table.\n * @param formatOptions\n * @returns Collection of format options with default values\n */\nfunction _getDefaultFormatOptionsForTable(formatOptions: FormatOptionsType | undefined): FormatOptionsType | undefined {\n\treturn formatOptions === undefined\n\t\t? undefined\n\t\t: {\n\t\t\t\ttextLinesEdit: 4,\n\t\t\t\t...formatOptions\n\t\t  };\n}\nfunction _findSemanticKeyValues(semanticKeys: SemanticKey, name: string): { values: string[]; semanticKeyFound: boolean } {\n\tconst aSemanticKeyValues: string[] = [];\n\tlet bSemanticKeyFound = false;\n\tfor (let i = 0; i < semanticKeys.length; i++) {\n\t\taSemanticKeyValues.push(semanticKeys[i].value);\n\t\tif (semanticKeys[i].value === name) {\n\t\t\tbSemanticKeyFound = true;\n\t\t}\n\t}\n\treturn {\n\t\tvalues: aSemanticKeyValues,\n\t\tsemanticKeyFound: bSemanticKeyFound\n\t};\n}\nfunction _findProperties(\n\tsemanticKeyValues: string[],\n\tfieldGroupProperties: string[]\n): { semanticKeyHasPropertyInFieldGroup: boolean; fieldGroupPropertyPath?: string } {\n\tlet semanticKeyHasPropertyInFieldGroup = false;\n\tlet sPropertyPath;\n\tif (semanticKeyValues && semanticKeyValues.length >= 1 && fieldGroupProperties && fieldGroupProperties.length >= 1) {\n\t\tfor (let i = 0; i < semanticKeyValues.length; i++) {\n\t\t\tif ([semanticKeyValues[i]].some((tmp) => fieldGroupProperties.includes(tmp))) {\n\t\t\t\tsemanticKeyHasPropertyInFieldGroup = true;\n\t\t\t\tsPropertyPath = semanticKeyValues[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\tsemanticKeyHasPropertyInFieldGroup: semanticKeyHasPropertyInFieldGroup,\n\t\tfieldGroupPropertyPath: sPropertyPath\n\t};\n}\n/**\n * Find the first property in the fieldGroup that is part of the semantic keys.\n * @param dataFieldGroup\n * @param semanticKeyValues\n * @returns An object containing a flag true if a property is found and a propertyPath.\n */\nfunction _findSemanticKeyValuesInFieldGroup(\n\tdataFieldGroup: DataFieldAbstractTypes | null,\n\tsemanticKeyValues: string[]\n): { semanticKeyHasPropertyInFieldGroup: boolean; propertyPath?: string } {\n\t// this info is used in FieldHelper#isDraftIndicatorVisibleInFieldGroup to show a draft indicator at the end of a field group\n\tconst aProperties: string[] = [];\n\tlet _propertiesFound: { semanticKeyHasPropertyInFieldGroup: boolean; fieldGroupPropertyPath?: string } = {\n\t\tsemanticKeyHasPropertyInFieldGroup: false,\n\t\tfieldGroupPropertyPath: undefined\n\t};\n\tif (\n\t\tdataFieldGroup &&\n\t\tdataFieldGroup.$Type === UIAnnotationTypes.DataFieldForAnnotation &&\n\t\tdataFieldGroup.Target?.$target?.$Type === UIAnnotationTypes.FieldGroupType\n\t) {\n\t\tdataFieldGroup.Target.$target.Data?.forEach((innerDataField: DataFieldAbstractTypes) => {\n\t\t\tif (\n\t\t\t\t(innerDataField.$Type === UIAnnotationTypes.DataField || innerDataField.$Type === UIAnnotationTypes.DataFieldWithUrl) &&\n\t\t\t\tinnerDataField.Value\n\t\t\t) {\n\t\t\t\taProperties.push(innerDataField.Value.path);\n\t\t\t}\n\t\t\t_propertiesFound = _findProperties(semanticKeyValues, aProperties);\n\t\t});\n\t}\n\treturn {\n\t\tsemanticKeyHasPropertyInFieldGroup: _propertiesFound.semanticKeyHasPropertyInFieldGroup,\n\t\tpropertyPath: _propertiesFound.fieldGroupPropertyPath\n\t};\n}\n/**\n * Returns default format options with draftIndicator for a column.\n * @param name\n * @param semanticKeys\n * @param dataFieldGroup\n * @returns Collection of format options with default values\n */\nfunction getDefaultDraftIndicatorForColumn(\n\tname: string,\n\tsemanticKeys: SemanticKey,\n\tdataFieldGroup: DataFieldAbstractTypes | null\n): Partial<{\n\tfieldGroupDraftIndicatorPropertyPath: string;\n\tfieldGroupName: string;\n\tshowErrorObjectStatus: CompiledBindingToolkitExpression;\n\thasDraftIndicator: boolean;\n}> {\n\tif (!semanticKeys) {\n\t\treturn {};\n\t}\n\tconst semanticKey = _findSemanticKeyValues(semanticKeys, name);\n\tconst semanticKeyInFieldGroup = _findSemanticKeyValuesInFieldGroup(dataFieldGroup, semanticKey.values);\n\tif (semanticKeyInFieldGroup.semanticKeyHasPropertyInFieldGroup) {\n\t\t// Semantic Key has a property in a FieldGroup\n\t\treturn {\n\t\t\t//TODO we should rather store hasSemanticKeyInFieldGroup\n\t\t\tfieldGroupDraftIndicatorPropertyPath: semanticKeyInFieldGroup.propertyPath,\n\t\t\tfieldGroupName: name,\n\t\t\tshowErrorObjectStatus: compileExpression(getRowStatusVisibility(name, true))\n\t\t};\n\t} else if (semanticKey.semanticKeyFound) {\n\t\treturn {\n\t\t\thasDraftIndicator: true,\n\t\t\tshowErrorObjectStatus: compileExpression(getRowStatusVisibility(name, false))\n\t\t};\n\t}\n\treturn {};\n}\nfunction _getImpNumber(dataField: DataFieldTypes): number {\n\tconst importance = dataField?.annotations?.UI?.Importance as string;\n\tif (importance && importance.includes(\"UI.ImportanceType/High\")) {\n\t\treturn 3;\n\t}\n\tif (importance && importance.includes(\"UI.ImportanceType/Medium\")) {\n\t\treturn 2;\n\t}\n\tif (importance && importance.includes(\"UI.ImportanceType/Low\")) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}\nfunction _getDataFieldImportance(dataField: DataFieldTypes): Importance {\n\tconst importance = dataField?.annotations?.UI?.Importance as string;\n\treturn importance ? (importance.split(\"/\")[1] as Importance) : Importance.None;\n}\n/**\n * Sets the export settings of a column containing datapoints.\n * @param property The property referenced on a given column\n * @param column The column to be updated\n */\n\nfunction _setExportSettingsForDataPoint(property: Property, column: AnnotationTableColumn): void {\n\tconst targetValuefromDP = getTargetValueOnDataPoint(property);\n\tif (\n\t\tisDataPointFromDataFieldDefault(property) &&\n\t\ttypeof targetValuefromDP === \"string\" &&\n\t\tcolumn.exportSettings &&\n\t\tcolumn.exportSettings?.unit !== \"%\"\n\t) {\n\t\tcolumn.exportDataPointTargetValue = targetValuefromDP;\n\t\tcolumn.exportSettings.template = \"{0}/\" + targetValuefromDP;\n\t}\n}\n\nfunction _getMaxImportance(fields: DataFieldTypes[]): Importance {\n\tif (fields && fields.length > 0) {\n\t\tlet maxImpNumber = -1;\n\t\tlet impNumber = -1;\n\t\tlet DataFieldWithMaxImportance;\n\t\tfor (const field of fields) {\n\t\t\timpNumber = _getImpNumber(field);\n\t\t\tif (impNumber > maxImpNumber) {\n\t\t\t\tmaxImpNumber = impNumber;\n\t\t\t\tDataFieldWithMaxImportance = field;\n\t\t\t}\n\t\t}\n\t\treturn _getDataFieldImportance(DataFieldWithMaxImportance as DataFieldTypes);\n\t}\n\treturn Importance.None;\n}\n/**\n * Returns the importance value for a column.\n * @param converterContext\n * @param dataField\n * @returns The importance value\n */\nexport function getImportance(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tdataField: DataFieldAbstractTypes | undefined\n): Importance | undefined {\n\tif (!dataField) {\n\t\treturn undefined;\n\t}\n\tconst semanticKeys = converterContext.getDataModelObjectPath().targetEntityType.annotations.Common?.SemanticKey ?? [];\n\tconst requiredProperties = getRequiredProperties(converterContext);\n\tconst highKeys = [...semanticKeys, ...requiredProperties].map((propertyPath) => propertyPath.$target?.fullyQualifiedName);\n\t//Evaluate default Importance is not set explicitly\n\tlet fieldsWithImportance;\n\tif (isAnnotationOfType<DataFieldForAnnotation>(dataField, UIAnnotationTypes.DataFieldForAnnotation)) {\n\t\tconst dataFieldTarget = dataField.Target.$target;\n\t\tif (isAnnotationOfType<FieldGroup>(dataFieldTarget, UIAnnotationTypes.FieldGroupType)) {\n\t\t\tconst fieldGroupData = dataFieldTarget.Data;\n\t\t\t//If a FieldGroup contains a semanticKey or required property, importance set to High\n\t\t\tif (\n\t\t\t\tfieldGroupData.some(function (fieldGroupDataField: DataFieldAbstractTypes): boolean {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tisDataFieldTypes(fieldGroupDataField) && highKeys.includes(fieldGroupDataField.Value?.$target?.fullyQualifiedName)\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t) {\n\t\t\t\treturn Importance.High;\n\t\t\t} else {\n\t\t\t\t//If the DataFieldForAnnotation has an Importance we take it\n\t\t\t\tif (dataField?.annotations?.UI?.Importance) {\n\t\t\t\t\treturn _getDataFieldImportance(dataField as unknown as DataFieldTypes);\n\t\t\t\t}\n\t\t\t\t// else the highest importance (if any) is returned\n\t\t\t\tfieldsWithImportance = fieldGroupData.filter(function (item) {\n\t\t\t\t\treturn item?.annotations?.UI?.Importance;\n\t\t\t\t});\n\t\t\t\treturn _getMaxImportance(fieldsWithImportance as DataFieldTypes[]);\n\t\t\t}\n\t\t}\n\t}\n\treturn highKeys.includes((dataField as DataFieldTypes).Value?.$target?.fullyQualifiedName)\n\t\t? Importance.High\n\t\t: _getDataFieldImportance(dataField as unknown as DataFieldTypes);\n}\n/**\n * Returns line items from metadata annotations.\n * @param lineItemAnnotation Collection of data fields with their annotations\n * @param visualizationPath The visualization path\n * @param converterContext The converter context\n * @returns The columns from the annotations\n */\nconst getColumnsFromAnnotations = function (\n\tlineItemAnnotation: LineItem,\n\tvisualizationPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): AnnotationTableColumn[] {\n\tconst entityType: EntityType = converterContext.getAnnotationEntityType(lineItemAnnotation),\n\t\tannotationColumns: AnnotationTableColumn[] = [],\n\t\tcolumnsToBeCreated: Record<string, Property> = {},\n\t\tdisplayModeOfDescriptionPropertiesMap: Record<string, DisplayMode> = {},\n\t\trestrictionsOnProperties = getRestrictionsOnProperties(converterContext.getEntitySet()),\n\t\ttableManifestSettings: TableManifestConfiguration = converterContext.getManifestControlConfiguration(visualizationPath),\n\t\ttableType = getTableType(converterContext, tableManifestSettings),\n\t\tdefaultCreationMode =\n\t\t\tconverterContext.getManifestWrapper().getSapFeManifestConfiguration()?.macros?.table?.defaultCreationMode ===\n\t\t\t\"InlineCreationRows\"\n\t\t\t\t? CreationMode.InlineCreationRows\n\t\t\t\t: undefined,\n\t\ttableCreationMode: CreationMode =\n\t\t\ttableManifestSettings?.tableSettings?.creationMode?.name ?? defaultCreationMode ?? CreationMode.Inline;\n\tconst semanticKeys: SemanticKey = converterContext.getAnnotationsByTerm(\"Common\", CommonAnnotationTerms.SemanticKey, [\n\t\tconverterContext.getEntityType()\n\t])[0] as SemanticKey;\n\tif (lineItemAnnotation) {\n\t\tconst tableConverterContext = converterContext.getConverterContextFor<PageContextPathTarget>(\n\t\t\tgetTargetObjectPath(converterContext.getDataModelObjectPath())\n\t\t);\n\t\tlineItemAnnotation.forEach((dataField) => {\n\t\t\t// TODO: variable name should be datafield and not lineItem\n\t\t\tif (!_isValidColumn(dataField)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet exportSettings: ColumnExportSettings | null = null;\n\t\t\tconst semanticObjectAnnotationPath =\n\t\t\t\tisDataFieldTypes(dataField) && dataField.Value?.$target?.fullyQualifiedName\n\t\t\t\t\t? getSemanticObjectPath(converterContext, dataField)\n\t\t\t\t\t: undefined;\n\t\t\tconst relativePath = _getRelativePath(dataField);\n\t\t\t// Determine properties which are consumed by this LineItem.\n\t\t\tconst relatedPropertiesInfo: ComplexPropertyInfo = collectRelatedPropertiesRecursively(dataField, converterContext, tableType);\n\t\t\tconst relatedPropertyNames: string[] = Object.keys(relatedPropertiesInfo.properties);\n\t\t\tconst additionalPropertyNames: string[] = Object.keys(relatedPropertiesInfo.additionalProperties);\n\t\t\tconst groupPath: string | undefined = relativePath ? _sliceAtSlash(relativePath, true, false) : undefined;\n\t\t\tconst isGroup: boolean = groupPath != relativePath;\n\t\t\tconst sLabel: string | undefined = getLabel(dataField, isGroup);\n\t\t\tconst name = _getAnnotationColumnName(dataField);\n\t\t\tconst isFieldGroupColumn: boolean = groupPath ? groupPath.includes(`@${UIAnnotationTerms.FieldGroup}`) : false;\n\t\t\tconst showDataFieldsLabel: boolean | undefined = isFieldGroupColumn\n\t\t\t\t? _getShowDataFieldsLabel(name, visualizationPath, converterContext)\n\t\t\t\t: false;\n\t\t\tconst dataType: string | undefined = getDataFieldDataType(dataField);\n\t\t\tconst formatOptions = _getDefaultFormatOptionsForTable(getDefaultDraftIndicatorForColumn(name, semanticKeys, dataField));\n\t\t\tconst propertyDataModelObjectPath = enhanceDataModelPath<DataFieldAbstractTypes>(\n\t\t\t\tconverterContext.getDataModelObjectPath(),\n\t\t\t\trelativePath\n\t\t\t);\n\t\t\t// Determine if we need a situations indicator\n\t\t\tconst navigationProperties: NavigationProperty[] = propertyDataModelObjectPath.targetEntityType.navigationProperties;\n\t\t\tconst situationsNavProps = navigationProperties.filter(\n\t\t\t\t(navigationProperty) =>\n\t\t\t\t\t!navigationProperty.isCollection &&\n\t\t\t\t\tnavigationProperty.targetType.annotations.Common?.SAPObjectNodeType?.Name === \"BusinessSituation\"\n\t\t\t);\n\t\t\tconst situationsNavProp: NavigationProperty | undefined = situationsNavProps.length >= 1 ? situationsNavProps[0] : undefined;\n\t\t\tif (situationsNavProp && formatOptions) {\n\t\t\t\tformatOptions.hasSituationsIndicator = true;\n\t\t\t}\n\n\t\t\tlet fieldGroupHiddenExpressions: CompiledBindingToolkitExpression;\n\t\t\tif (\n\t\t\t\tdataField.$Type === UIAnnotationTypes.DataFieldForAnnotation &&\n\t\t\t\tdataField.Target?.$target?.$Type === UIAnnotationTypes.FieldGroupType\n\t\t\t) {\n\t\t\t\tfieldGroupHiddenExpressions = _getFieldGroupHiddenExpressions(dataField);\n\t\t\t}\n\t\t\tconst isMultiValue = _isColumnMultiValued(dataField, tableConverterContext);\n\t\t\tif (!isMultiValue && _isExportableColumn(dataField)) {\n\t\t\t\t//exclude the types listed above for the Export (generates error on Export as PDF)\n\t\t\t\texportSettings = createColumnExportSettings(dataField, relatedPropertiesInfo);\n\t\t\t}\n\t\t\tlet propertyTypeConfig: PropertyTypeConfig | undefined;\n\t\t\tif (dataType) {\n\t\t\t\tpropertyTypeConfig = getTypeConfig(dataField, dataType);\n\t\t\t}\n\t\t\tconst typeConfig: PropertyTypeConfig = {\n\t\t\t\tclassName: dataType as keyof typeof DefaultTypeForEdmType,\n\t\t\t\tformatOptions: {\n\t\t\t\t\t...formatOptions,\n\t\t\t\t\t...propertyTypeConfig?.formatOptions\n\t\t\t\t},\n\t\t\t\tconstraints: { ...propertyTypeConfig?.constraints }\n\t\t\t};\n\t\t\tconst visualSettings: VisualSettings = {};\n\t\t\tif (!dataType || !typeConfig) {\n\t\t\t\t// for charts\n\t\t\t\tvisualSettings.widthCalculation = null;\n\t\t\t}\n\t\t\tconst sortable =\n\t\t\t\t!isMultiValue &&\n\t\t\t\t_isColumnSortable(dataField, relativePath, restrictionsOnProperties.nonSortableProperties, relatedPropertiesInfo);\n\t\t\tconst availability = isReferencePropertyStaticallyHidden(dataField) ? \"Hidden\" : \"Default\";\n\t\t\tconst column: AnnotationTableColumn = {\n\t\t\t\tkey: KeyHelper.generateKeyFromDataField(dataField),\n\t\t\t\ttype: ColumnType.Annotation,\n\t\t\t\tlabel: sLabel,\n\t\t\t\tgroupLabel: isGroup ? getLabel(dataField) : undefined,\n\t\t\t\tgroup: isGroup ? groupPath : undefined,\n\t\t\t\tFieldGroupHiddenExpressions: fieldGroupHiddenExpressions,\n\t\t\t\tannotationPath: converterContext.getEntitySetBasedAnnotationPath(dataField.fullyQualifiedName),\n\t\t\t\tsemanticObjectPath: semanticObjectAnnotationPath,\n\t\t\t\tavailability: availability,\n\t\t\t\tname: name,\n\t\t\t\tshowDataFieldsLabel: showDataFieldsLabel,\n\t\t\t\trequired: isRequiredColumn(converterContext, dataField as DataFieldTypes, tableCreationMode),\n\t\t\t\trelativePath: relativePath,\n\t\t\t\tsortable: sortable,\n\t\t\t\tpropertyInfos: relatedPropertyNames.length ? relatedPropertyNames : undefined,\n\t\t\t\tadditionalPropertyInfos: additionalPropertyNames.length > 0 ? additionalPropertyNames : undefined,\n\t\t\t\texportSettings: exportSettings,\n\t\t\t\twidth: (dataField.annotations?.HTML5?.CssDefaults?.width?.valueOf() as string) || undefined,\n\t\t\t\timportance: getImportance(converterContext, dataField as DataFieldTypes),\n\t\t\t\tisNavigable: true,\n\t\t\t\tformatOptions: formatOptions,\n\t\t\t\tcaseSensitive: isFilteringCaseSensitive(converterContext),\n\t\t\t\ttypeConfig: typeConfig,\n\t\t\t\tvisualSettings: visualSettings,\n\t\t\t\ttimezoneText: exportSettings?.timezone,\n\t\t\t\tisPartOfLineItem: true,\n\t\t\t\tisMultiValue\n\t\t\t};\n\t\t\tconst tooltip = _getTooltip(dataField) ?? sLabel;\n\t\t\tif (tooltip) {\n\t\t\t\tcolumn.tooltip = tooltip;\n\t\t\t}\n\t\t\tif (relatedPropertiesInfo.exportSettings.dataPointTargetValue) {\n\t\t\t\tcolumn.exportDataPointTargetValue = relatedPropertiesInfo.exportSettings.dataPointTargetValue;\n\t\t\t}\n\t\t\tannotationColumns.push(column);\n\t\t\t// Collect information of related columns to be created.\n\t\t\trelatedPropertyNames.forEach((relatedPropertyName) => {\n\t\t\t\tcolumnsToBeCreated[relatedPropertyName] = relatedPropertiesInfo.properties[relatedPropertyName].annotationProperty;\n\t\t\t\t// In case of a multi-value, related properties cannot be sorted as we go through a 1-n relation\n\t\t\t\tif (isMultiValue) {\n\t\t\t\t\trestrictionsOnProperties.nonSortableProperties.push(relatedPropertyName);\n\t\t\t\t}\n\t\t\t\taddPropertyToDisplayModeOfDescriptionPropertiesMap(\n\t\t\t\t\tdisplayModeOfDescriptionPropertiesMap,\n\t\t\t\t\trelatedPropertiesInfo,\n\t\t\t\t\trelatedPropertyName\n\t\t\t\t);\n\t\t\t\t// In case the lineItem points to a navigation property with a textArrangement TextOnly, we need to create the column with the value navigation property.\n\t\t\t\t// The text property is referenced on the related properties of the lineItem, so will be created on the _createRelatedColumns method.\n\t\t\t\tif (relatedPropertiesInfo.properties[relatedPropertyName].displayModeOfPropertyUsedAsDescription === \"Description\") {\n\t\t\t\t\tcreatePropertyAnnotatedTextOnly(\n\t\t\t\t\t\tconverterContext,\n\t\t\t\t\t\tpropertyDataModelObjectPath,\n\t\t\t\t\t\tdataField,\n\t\t\t\t\t\tcolumnsToBeCreated,\n\t\t\t\t\t\trelativePath,\n\t\t\t\t\t\trestrictionsOnProperties\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// Create columns for additional properties identified for ALP use case.\n\t\t\tadditionalPropertyNames.forEach((additionalPropertyName) => {\n\t\t\t\t// Intentional overwrite as we require only one new PropertyInfo for a related Property.\n\t\t\t\tcolumnsToBeCreated[additionalPropertyName] = relatedPropertiesInfo.additionalProperties[additionalPropertyName];\n\t\t\t});\n\t\t});\n\t}\n\t// Get columns from the Properties of EntityType\n\treturn getColumnsFromEntityType(\n\t\tcolumnsToBeCreated,\n\t\tentityType,\n\t\tannotationColumns,\n\t\tconverterContext,\n\t\ttableType,\n\t\ttableCreationMode,\n\t\tdisplayModeOfDescriptionPropertiesMap,\n\t\trestrictionsOnProperties\n\t);\n};\n/**\n * Gets the property names from the manifest and checks against existing properties already added by annotations.\n * If a not yet stored property is found it adds it for sorting and filtering only to the annotationColumns.\n * @param properties\n * @param annotationColumns\n * @param converterContext\n * @param entityType\n * @returns The columns from the annotations\n */\nconst _getPropertyNames = function (\n\tproperties: string[] | undefined,\n\tannotationColumns: AnnotationTableColumn[],\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tentityType: EntityType\n): string[] | undefined {\n\tlet matchedProperties: string[] | undefined;\n\tif (properties) {\n\t\tmatchedProperties = properties.map(function (propertyPath) {\n\t\t\tconst annotationColumn = annotationColumns.find(function (annotationColumn) {\n\t\t\t\treturn annotationColumn.relativePath === propertyPath && annotationColumn.propertyInfos === undefined;\n\t\t\t});\n\t\t\tif (annotationColumn) {\n\t\t\t\treturn annotationColumn.name;\n\t\t\t} else {\n\t\t\t\tconst relatedColumns = _createRelatedColumns(\n\t\t\t\t\t{ [propertyPath]: entityType.resolvePath(propertyPath) },\n\t\t\t\t\tannotationColumns,\n\t\t\t\t\tconverterContext,\n\t\t\t\t\tentityType,\n\t\t\t\t\t{}\n\t\t\t\t);\n\t\t\t\tannotationColumns.push(relatedColumns[0]);\n\t\t\t\treturn relatedColumns[0].name;\n\t\t\t}\n\t\t});\n\t}\n\treturn matchedProperties;\n};\n\n/**\n * Determines if the field group has to be flagged as required.\n * @param converterContext The converter context\n * @param fieldGroup The fieldGroup being processed\n * @param tableCreationMode The creation mode of the underlying table\n * @returns True if the fieldGroup is required.\n */\nconst isRequiredFieldGroup = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tfieldGroup: FieldGroup,\n\ttableCreationMode: CreationMode\n): boolean {\n\tconst fieldGroupData = fieldGroup.Data;\n\treturn fieldGroupData.some(function (item) {\n\t\t// we exclude boolean type, the end-user may want to keep the underlying check box empty on purpose\n\t\tif (isDataField(item) && item?.Value?.$target.type !== \"Edm.Boolean\") {\n\t\t\treturn (\n\t\t\t\tisStaticallyMandatory(item) ||\n\t\t\t\t(tableCreationMode === CreationMode.InlineCreationRows &&\n\t\t\t\t\tisAnnotatedRequiredProperty(item.Value.$target.fullyQualifiedName, converterContext))\n\t\t\t);\n\t\t}\n\t});\n};\n\n/**\n * Determines if the dataFieldForAnnotation has to be flagged as required.\n * @param converterContext The converter context\n * @param dataFieldForAnnotation The property being processed\n * @param tableCreationMode The creation mode of the underlying table\n * @returns True if the property is required.\n */\nconst isRequiredDataFieldForAnnotation = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tdataFieldForAnnotation: DataFieldForAnnotation,\n\ttableCreationMode: CreationMode\n): boolean {\n\tconst dataFieldTarget = dataFieldForAnnotation.Target.$target;\n\tconst DataFieldForAnnotationFieldControlNotMandatory = hasFieldControlNotMandatory(dataFieldForAnnotation);\n\t// Check if the DataFieldForAnnotation points to a FieldGroup\n\tif (hasFieldGroupTarget(dataFieldForAnnotation)) {\n\t\tif (isRequiredFieldGroup(converterContext, dataFieldTarget as FieldGroup, tableCreationMode)) {\n\t\t\treturn true;\n\t\t}\n\t\tconst fieldGroupData = (dataFieldTarget as FieldGroup).Data;\n\t\treturn fieldGroupData.some((innerDataField: DataFieldAbstractTypes) => {\n\t\t\treturn isRequiredColumn(converterContext, innerDataField, tableCreationMode);\n\t\t});\n\t}\n\t/*If the underlying datapoint is a rating indicator, the end-user may want to keep the rating empty (value 0) on purpose.\n\tBesides, currently, only a fieldControl set on a dataFieldForAnnotation pointing to a dataPoint has an influence in the table.\n\tAccordingly, if a datapoint comes from a dataFieldForAnnotation with a fieldControl set as not mandatory, this dataPoint must not be flagged as \"required\"*/\n\tif (hasDataPointTarget(dataFieldForAnnotation) && (dataFieldTarget as DataPoint).Visualization !== \"UI.VisualizationType/Rating\") {\n\t\tif (DataFieldForAnnotationFieldControlNotMandatory) {\n\t\t\treturn false;\n\t\t}\n\t\tif (isStaticallyMandatory(dataFieldForAnnotation)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn isRequiredDataPoint(converterContext, dataFieldTarget as DataPoint, tableCreationMode);\n\t}\n\treturn false;\n};\n\n/**\n * Determines if the property has to be flagged as required.\n * @param converterContext The converter context\n * @param property The property being processed\n * @param tableCreationMode The creation mode of the underlying table\n * @returns True if the property is required.\n */\nconst isRequiredProperty = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tproperty: Property,\n\ttableCreationMode: CreationMode\n): boolean {\n\treturn (\n\t\tproperty.type !== \"Edm.Boolean\" &&\n\t\t!isRatingVisualizationFromDataFieldDefault(property) &&\n\t\t(isStaticallyMandatory(property) ||\n\t\t\t(tableCreationMode === CreationMode.InlineCreationRows &&\n\t\t\t\tisAnnotatedRequiredProperty(property.fullyQualifiedName, converterContext)))\n\t);\n};\n\n/**\n * Determines if the dataPoint has to be flagged as required.\n * @param converterContext The converter context\n * @param dataPoint The dataPoint being processed\n * @param tableCreationMode The creation mode of the underlying table\n * @returns True if the dataPoint is required.\n */\nconst isRequiredDataPoint = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tdataPoint: DataPoint,\n\ttableCreationMode: CreationMode\n): boolean {\n\treturn (\n\t\tisStaticallyMandatory(dataPoint) ||\n\t\t(tableCreationMode === CreationMode.InlineCreationRows &&\n\t\t\tisAnnotatedRequiredProperty(dataPoint.Value.$target.fullyQualifiedName, converterContext))\n\t);\n};\n\n/**\n * Determines if the underlying column has to be flagged as required.\n * @param converterContext The converter context\n * @param target The target being processed\n * @param tableCreationMode The creation mode of the underlying table\n * @returns The binding expression for the 'required' property of the table column.\n */\nconst isRequiredColumn = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\ttarget: DataFieldAbstractTypes | Property,\n\ttableCreationMode?: CreationMode\n): CompiledBindingToolkitExpression {\n\tconst creationMode = tableCreationMode || CreationMode.Inline;\n\tif (\n\t\tconverterContext.getTemplateType() === TemplateType.ListReport ||\n\t\tconverterContext.getTemplateType() === TemplateType.AnalyticalListPage\n\t) {\n\t\treturn undefined;\n\t}\n\tif (isProperty(target)) {\n\t\treturn isRequiredProperty(converterContext, target, creationMode) ? compileExpression(UI.IsEditable) : undefined;\n\t}\n\t// Check if the dataField is of type DataFieldForAnnotation\n\tif (isDataFieldForAnnotation(target)) {\n\t\treturn isRequiredDataFieldForAnnotation(converterContext, target, creationMode) ? compileExpression(UI.IsEditable) : undefined;\n\t}\n\t//If the underlying property is a boolean, the end-user may want to keep the check box empty on purpose\n\tif (isDataField(target) && target.Value?.$target?.type !== \"Edm.Boolean\") {\n\t\treturn isStaticallyMandatory(target) ||\n\t\t\t(creationMode === CreationMode.InlineCreationRows &&\n\t\t\t\tisAnnotatedRequiredProperty(target.Value.$target.fullyQualifiedName, converterContext))\n\t\t\t? compileExpression(UI.IsEditable)\n\t\t\t: undefined;\n\t}\n\treturn undefined;\n};\nconst _appendCustomTemplate = function (properties: string[] | undefined, exportProperties: string[] | undefined): string | undefined {\n\tif (exportProperties?.length) {\n\t\tproperties = exportProperties;\n\t}\n\tif (properties) {\n\t\treturn properties\n\t\t\t.map((property) => {\n\t\t\t\treturn `{${properties!.indexOf(property)}}`;\n\t\t\t})\n\t\t\t.join(`${\"\\n\"}`);\n\t}\n\treturn undefined;\n};\n/**\n * Returns table column definitions from manifest.\n *\n * These may be custom columns defined in the manifest, slot columns coming through\n * a building block, or annotation columns to overwrite annotation-based columns.\n * @param columns\n * @param annotationColumns\n * @param converterContext\n * @param entityType\n * @param navigationSettings\n * @returns The columns from the manifest\n */\nconst getColumnsFromManifest = function (\n\tcolumns: Record<string, CustomDefinedTableColumn | CustomDefinedTableColumnForOverride>,\n\tannotationColumns: AnnotationTableColumn[],\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tentityType: EntityType,\n\tnavigationSettings?: NavigationSettingsConfiguration\n): Record<string, ManifestColumn> {\n\tconst internalColumns: Record<string, ManifestColumn> = {};\n\tfunction isAnnotationColumn(\n\t\tcolumn: CustomDefinedTableColumn | CustomDefinedTableColumnForOverride,\n\t\tkey: string\n\t): column is CustomDefinedTableColumnForOverride {\n\t\treturn annotationColumns.some((annotationColumn) => annotationColumn.key === key);\n\t}\n\tfunction isSlotColumn(manifestColumn: CustomDefinedTableColumn): manifestColumn is FragmentDefinedSlotColumn {\n\t\treturn manifestColumn.type === ColumnType.Slot;\n\t}\n\tfunction isCustomColumn(manifestColumn: CustomDefinedTableColumn): manifestColumn is ManifestDefinedCustomColumn {\n\t\treturn manifestColumn.type === undefined && !!manifestColumn.template;\n\t}\n\tfunction _updateLinkedPropertiesOnCustomColumns(propertyInfos: string[], annotationTableColumns: AnnotationTableColumn[]): void {\n\t\tconst restrictionsOnProperties = getRestrictionsOnProperties(converterContext.getEntitySet());\n\t\tpropertyInfos.forEach((property) => {\n\t\t\tannotationTableColumns.forEach((prop) => {\n\t\t\t\tif (prop.name === property) {\n\t\t\t\t\tprop.sortable = !restrictionsOnProperties.nonSortableProperties.includes(property.replace(\"Property::\", \"\"));\n\t\t\t\t\tprop.isGroupable = prop.sortable;\n\t\t\t\t\tprop.filterable = !restrictionsOnProperties.nonFilterableProperties.includes(property.replace(\"Property::\", \"\"));\n\t\t\t\t\tprop.isPartOfCustomColumn = true;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\tfor (const key in columns) {\n\t\tconst manifestColumn = columns[key];\n\t\tKeyHelper.validateKey(key);\n\t\t// BaseTableColumn\n\t\tconst baseTableColumn = {\n\t\t\tkey: key,\n\t\t\twidthIncludingColumnHeader: manifestColumn.widthIncludingColumnHeader,\n\t\t\twidth: manifestColumn.width || undefined,\n\t\t\tposition: {\n\t\t\t\tanchor: manifestColumn.position?.anchor,\n\t\t\t\tplacement: manifestColumn.position === undefined ? Placement.After : manifestColumn.position.placement\n\t\t\t},\n\t\t\tcaseSensitive: isFilteringCaseSensitive(converterContext)\n\t\t};\n\t\tif (isAnnotationColumn(manifestColumn, key)) {\n\t\t\tconst propertiesToOverwriteAnnotationColumn: CustomElement<AnnotationTableColumnForOverride> = {\n\t\t\t\t...baseTableColumn,\n\t\t\t\timportance: manifestColumn?.importance,\n\t\t\t\thorizontalAlign: manifestColumn?.horizontalAlign,\n\t\t\t\tavailability: manifestColumn?.availability,\n\t\t\t\ttype: ColumnType.Annotation,\n\t\t\t\tisNavigable: isAnnotationColumn(manifestColumn, key)\n\t\t\t\t\t? undefined\n\t\t\t\t\t: isActionNavigable(manifestColumn, navigationSettings, true),\n\t\t\t\tsettings: manifestColumn.settings,\n\t\t\t\tformatOptions: _getDefaultFormatOptionsForTable(manifestColumn.formatOptions),\n\t\t\t\texportSettings: getCustomExportSettings(\n\t\t\t\t\tmanifestColumn?.exportSettings,\n\t\t\t\t\tannotationColumns,\n\t\t\t\t\tconverterContext,\n\t\t\t\t\tentityType,\n\t\t\t\t\tundefined,\n\t\t\t\t\tkey\n\t\t\t\t)\n\t\t\t};\n\t\t\tinternalColumns[key] = propertiesToOverwriteAnnotationColumn;\n\t\t} else {\n\t\t\tconst propertyInfos: string[] | undefined = _getPropertyNames(\n\t\t\t\tmanifestColumn.properties,\n\t\t\t\tannotationColumns,\n\t\t\t\tconverterContext,\n\t\t\t\tentityType\n\t\t\t);\n\t\t\tconst tooltipText = converterContext.fetchTextFromMetaModel(manifestColumn.tooltip),\n\t\t\t\theaderText = converterContext.fetchTextFromMetaModel(manifestColumn.header);\n\n\t\t\tconst customColumnExportSettings: ColumnExportSettings | null = propertyInfos\n\t\t\t\t? getCustomExportSettings(manifestColumn?.exportSettings, annotationColumns, converterContext, entityType, propertyInfos)\n\t\t\t\t: null;\n\t\t\tconst baseManifestColumn = {\n\t\t\t\t...baseTableColumn,\n\t\t\t\theader: headerText,\n\t\t\t\timportance: manifestColumn?.importance || Importance.None,\n\t\t\t\thorizontalAlign: manifestColumn?.horizontalAlign || HorizontalAlign.Begin,\n\t\t\t\tavailability: manifestColumn?.availability || \"Default\",\n\t\t\t\ttemplate: manifestColumn.template,\n\t\t\t\tpropertyInfos: propertyInfos,\n\t\t\t\texportSettings: customColumnExportSettings,\n\t\t\t\tid: `CustomColumn::${key}`,\n\t\t\t\tname: `CustomColumn::${key}`,\n\t\t\t\t//Needed for MDC:\n\t\t\t\tformatOptions: { textLinesEdit: 4 },\n\t\t\t\tisGroupable: false,\n\t\t\t\tisNavigable: false,\n\t\t\t\tsortable: false,\n\t\t\t\tvisualSettings: { widthCalculation: null },\n\t\t\t\ttooltip: tooltipText ? tooltipText : headerText,\n\t\t\t\tproperties: manifestColumn.properties,\n\t\t\t\trequired:\n\t\t\t\t\tmanifestColumn.required &&\n\t\t\t\t\tconverterContext.getTemplateType() !== TemplateType.ListReport &&\n\t\t\t\t\tconverterContext.getTemplateType() !== TemplateType.AnalyticalListPage\n\t\t\t\t\t\t? compileExpression(UI.IsEditable)\n\t\t\t\t\t\t: undefined\n\t\t\t};\n\t\t\tif (propertyInfos) {\n\t\t\t\t_updateLinkedPropertiesOnCustomColumns(propertyInfos, annotationColumns);\n\t\t\t}\n\t\t\tif (isSlotColumn(manifestColumn)) {\n\t\t\t\tconst customTableColumn: CustomElement<CustomBasedTableColumn> = {\n\t\t\t\t\t...baseManifestColumn,\n\t\t\t\t\ttype: ColumnType.Slot\n\t\t\t\t};\n\t\t\t\tinternalColumns[key] = customTableColumn;\n\t\t\t} else if (isCustomColumn(manifestColumn)) {\n\t\t\t\tconst customTableColumn: CustomElement<CustomBasedTableColumn> = {\n\t\t\t\t\t...baseManifestColumn,\n\t\t\t\t\ttype: ColumnType.Default\n\t\t\t\t};\n\t\t\t\tinternalColumns[key] = customTableColumn;\n\t\t\t} else {\n\t\t\t\tconst message = `The annotation column '${key}' referenced in the manifest is not found`;\n\t\t\t\tconverterContext\n\t\t\t\t\t.getDiagnostics()\n\t\t\t\t\t.addIssue(\n\t\t\t\t\t\tIssueCategory.Manifest,\n\t\t\t\t\t\tIssueSeverity.Low,\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\tIssueCategoryType,\n\t\t\t\t\t\tIssueCategoryType?.AnnotationColumns?.InvalidKey\n\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\treturn internalColumns;\n};\n\n/**\n * Adds computed columns such as the draft status and situations status.\n * @param tableColumns The table columns collected so far\n * @param visualizationPath\n * @param converterContext\n * @returns The enriched set of table columns\n */\nexport function addComputedColumns(\n\ttableColumns: TableColumn[],\n\tvisualizationPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): TableColumn[] {\n\tconst tableManifestSettings: TableManifestConfiguration = converterContext.getManifestControlConfiguration(visualizationPath);\n\tconst tableType = getTableType(converterContext, tableManifestSettings);\n\n\tif (![\"GridTable\", \"TreeTable\", \"AnalyticalTable\"].includes(tableType)) {\n\t\t// Computed columns are not used in Responsive tables\n\t\treturn tableColumns;\n\t}\n\n\t// In case a grid table or tree table is used, we display the situations indicator in a separate column\n\t// so we have to disable it here to ensure, that the field building block\n\t// does not render it into the ID column\n\tconst columnWithSituationsIndicator: TableColumn | undefined = tableColumns.find(\n\t\t(column) => column.formatOptions?.hasSituationsIndicator !== undefined && column.formatOptions?.hasSituationsIndicator === true\n\t);\n\tif (columnWithSituationsIndicator?.formatOptions) {\n\t\t// Switch off the situations indicator in the found column\n\t\tcolumnWithSituationsIndicator.formatOptions.hasSituationsIndicator = false;\n\n\t\t// Insert a separate situations indicator column\n\t\tconst situationsIndicatorColumn: ComputedTableColumn = {\n\t\t\tkey: \"situationsIndicator\",\n\t\t\tname: \"situationsIndicator\",\n\t\t\tpropertyKey: columnWithSituationsIndicator.name,\n\t\t\tisSituationsIndicator: true,\n\t\t\tavailability: \"Default\",\n\t\t\tlabel: \"{sap.fe.i18n>C_SITUATIONS_STATUS_COLUMN_LABEL_TOOLTIP}\",\n\t\t\ttooltip: \"{sap.fe.i18n>C_SITUATIONS_STATUS_COLUMN_LABEL_TOOLTIP}\",\n\t\t\ttype: ColumnType.Computed,\n\t\t\tformatOptions: null,\n\t\t\texportSettings: null,\n\t\t\tclipboardSettings: null,\n\t\t\tpropertyInfos: undefined,\n\t\t\tcaseSensitive: false\n\t\t};\n\n\t\t// Place the draft status column after the first visible column\n\t\tconst indexOfFirstVisibleColumn: int = tableColumns.findIndex((column) => column.availability !== \"Hidden\");\n\t\ttableColumns.splice(indexOfFirstVisibleColumn + 1, 0, situationsIndicatorColumn);\n\t}\n\n\t// In case a grid table or tree table is used, we display the draft indicator in a separate column\n\t// so we have to disable it here to ensure, that the field building block\n\t// does not render it into the ID column\n\t// The additional column is only added for tables on a LR and in case tehe entity is draft enabled!\n\tconst columnsWithDraftIndicator: TableColumn[] = tableColumns.filter((column) => column.formatOptions?.hasDraftIndicator === true);\n\tif (\n\t\tcolumnsWithDraftIndicator.length &&\n\t\tconverterContext.getTemplateType() === TemplateType.ListReport &&\n\t\t(ModelHelper.isDraftNode(converterContext.getEntitySet()) || ModelHelper.isDraftRoot(converterContext.getEntitySet()))\n\t) {\n\t\t// Switch off the draft indicator in the found column\n\t\tcolumnsWithDraftIndicator.forEach((columnWithDraftIndicator: TableColumn) => {\n\t\t\tif (columnWithDraftIndicator?.formatOptions) {\n\t\t\t\tcolumnWithDraftIndicator.formatOptions.hasDraftIndicator = false;\n\t\t\t}\n\t\t});\n\n\t\t// Insert a separate draft indicator column\n\t\tconst draftIndicatorColumn: ComputedTableColumn = {\n\t\t\tkey: \"draftStatus\",\n\t\t\tname: \"draftStatus\",\n\t\t\tpropertyKey: columnsWithDraftIndicator[0].name,\n\t\t\tisDraftIndicator: true,\n\t\t\tavailability: \"Default\",\n\t\t\tlabel: \"{sap.fe.i18n>C_DRAFT_STATUS_COLUMN_LABEL_TOOLTIP}\",\n\t\t\ttooltip: \"{sap.fe.i18n>C_DRAFT_STATUS_COLUMN_LABEL_TOOLTIP}\",\n\t\t\ttype: ColumnType.Computed,\n\t\t\tformatOptions: null,\n\t\t\texportSettings: null,\n\t\t\tcaseSensitive: false\n\t\t};\n\t\tlet columnIndexToInsertAfter: int = 0;\n\t\tif (columnWithSituationsIndicator) {\n\t\t\t// If there's a situations indicator column, place the draft status column before it\n\t\t\tcolumnIndexToInsertAfter =\n\t\t\t\ttableColumns.findIndex((column) => (column as ComputedTableColumn).isSituationsIndicator === true) - 1;\n\t\t} else {\n\t\t\t// Otherwise place the draft status column after the first visible column\n\t\t\tcolumnIndexToInsertAfter = tableColumns.findIndex((column) => column.availability !== \"Hidden\");\n\t\t}\n\t\ttableColumns.splice(columnIndexToInsertAfter + 1, 0, draftIndicatorColumn);\n\t}\n\n\treturn tableColumns;\n}\n\nexport function getP13nMode(\n\tvisualizationPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\ttableManifestConfiguration: TableControlConfiguration\n): TableP13nMode[] | undefined {\n\tconst manifestWrapper: ManifestWrapper = converterContext.getManifestWrapper();\n\tconst tableManifestSettings: TableManifestConfiguration = converterContext.getManifestControlConfiguration(visualizationPath);\n\tconst variantManagement: VariantManagementType = manifestWrapper.getVariantManagement();\n\tconst modes: TableP13nMode[] = [];\n\tconst isAnalyticalTable = tableManifestConfiguration.type === \"AnalyticalTable\";\n\tconst isResponsiveTable = tableManifestConfiguration.type === \"ResponsiveTable\";\n\tif (tableManifestSettings?.tableSettings?.personalization !== undefined) {\n\t\t// Personalization configured in manifest.\n\t\tconst personalization = tableManifestSettings.tableSettings.personalization;\n\t\tif (personalization === true) {\n\t\t\t// Table personalization fully enabled.\n\t\t\tswitch (tableManifestConfiguration.type) {\n\t\t\t\tcase \"AnalyticalTable\":\n\t\t\t\t\treturn [\"Sort\", \"Column\", \"Filter\", \"Group\", \"Aggregate\"];\n\t\t\t\tcase \"ResponsiveTable\":\n\t\t\t\t\treturn [\"Sort\", \"Column\", \"Filter\", \"Group\"];\n\t\t\t\tdefault:\n\t\t\t\t\treturn [\"Sort\", \"Column\", \"Filter\"];\n\t\t\t}\n\t\t} else if (typeof personalization === \"object\") {\n\t\t\t// Specific personalization options enabled in manifest. Use them as is.\n\t\t\tif (personalization.sort) {\n\t\t\t\tmodes.push(\"Sort\");\n\t\t\t}\n\t\t\tif (personalization.column) {\n\t\t\t\tmodes.push(\"Column\");\n\t\t\t}\n\t\t\tif (personalization.filter) {\n\t\t\t\tmodes.push(\"Filter\");\n\t\t\t}\n\t\t\tif (personalization.group && (isAnalyticalTable || isResponsiveTable)) {\n\t\t\t\tmodes.push(\"Group\");\n\t\t\t}\n\t\t\tif (personalization.aggregate && isAnalyticalTable) {\n\t\t\t\tmodes.push(\"Aggregate\");\n\t\t\t}\n\t\t\treturn modes.length > 0 ? modes : undefined;\n\t\t}\n\t} else {\n\t\t// No personalization configured in manifest.\n\t\tmodes.push(\"Sort\");\n\t\tmodes.push(\"Column\");\n\t\tif (converterContext.getTemplateType() === TemplateType.ListReport) {\n\t\t\tif (variantManagement === VariantManagementType.Control || _isFilterBarHidden(manifestWrapper, converterContext)) {\n\t\t\t\t// Feature parity with V2.\n\t\t\t\t// Enable table filtering by default only in case of Control level variant management.\n\t\t\t\t// Or when the LR filter bar is hidden via manifest setting\n\t\t\t\tmodes.push(\"Filter\");\n\t\t\t}\n\t\t} else {\n\t\t\tmodes.push(\"Filter\");\n\t\t}\n\t\tif (isAnalyticalTable) {\n\t\t\tmodes.push(\"Group\");\n\t\t\tmodes.push(\"Aggregate\");\n\t\t}\n\t\tif (isResponsiveTable) {\n\t\t\tmodes.push(\"Group\");\n\t\t}\n\t\treturn modes;\n\t}\n}\n/**\n * Returns a Boolean value suggesting if a filter bar is being used on the page.\n *\n * Chart has a dependency to filter bar (issue with loading data). Once resolved, the check for chart should be removed here.\n * Until then, hiding filter bar is now allowed if a chart is being used on LR.\n * @param manifestWrapper Manifest settings getter for the page\n * @param converterContext The instance of the converter context\n * @returns Boolean suggesting if a filter bar is being used on the page.\n */\nfunction _isFilterBarHidden(manifestWrapper: ManifestWrapper, converterContext: ConverterContext<PageContextPathTarget>): boolean {\n\treturn (\n\t\tmanifestWrapper.isFilterBarHidden() &&\n\t\t!converterContext.getManifestWrapper().hasMultipleVisualizations() &&\n\t\tconverterContext.getTemplateType() !== TemplateType.AnalyticalListPage\n\t);\n}\n/**\n * Returns a JSON string containing the sort conditions for the presentation variant.\n * @param converterContext The instance of the converter context\n * @param presentationVariantAnnotation Presentation variant annotation\n * @param columns Table columns processed by the converter\n * @returns Sort conditions for a presentation variant.\n */\nfunction getSortConditions(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tpresentationVariantAnnotation: PresentationVariantType | undefined,\n\tcolumns: TableColumn[]\n): TableSortConditions | undefined {\n\t// Currently navigation property is not supported as sorter\n\tconst nonSortableProperties = getRestrictionsOnProperties(converterContext.getEntitySet()).nonSortableProperties;\n\tconst sortConditions: TableSortConditions = {\n\t\tsorters: []\n\t};\n\tif (presentationVariantAnnotation?.SortOrder) {\n\t\tpresentationVariantAnnotation.SortOrder.forEach((condition) => {\n\t\t\tconst conditionProperty = condition.Property;\n\t\t\tif (conditionProperty?.$target !== undefined && !nonSortableProperties.includes(conditionProperty.$target.name)) {\n\t\t\t\tconst infoName = convertPropertyPathsToInfoNames([conditionProperty], columns)[0];\n\t\t\t\tif (infoName) {\n\t\t\t\t\tsortConditions.sorters.push({\n\t\t\t\t\t\tname: infoName,\n\t\t\t\t\t\tdescending: !!condition.Descending\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\treturn sortConditions.sorters.length ? sortConditions : undefined;\n}\nfunction getInitialExpansionLevel(presentationVariantAnnotation: PresentationVariantType | undefined): number | undefined {\n\tif (!presentationVariantAnnotation) {\n\t\treturn undefined;\n\t}\n\tconst level = presentationVariantAnnotation.InitialExpansionLevel?.valueOf();\n\treturn typeof level === \"number\" ? level + 1 : undefined;\n}\n/**\n * Converts an array of propertyPath to an array of propertyInfo names.\n * @param paths The array to be converted\n * @param columns The array of propertyInfos\n * @returns An array of propertyInfo names\n */\nfunction convertPropertyPathsToInfoNames(paths: PropertyPath[], columns: TableColumn[]): string[] {\n\tconst infoNames: string[] = [];\n\tlet propertyInfo: TableColumn | undefined, annotationColumn: AnnotationTableColumn;\n\tpaths.forEach((currentPath) => {\n\t\tif (currentPath?.value) {\n\t\t\tpropertyInfo = columns.find((column) => {\n\t\t\t\tannotationColumn = column as AnnotationTableColumn;\n\t\t\t\treturn !annotationColumn.propertyInfos && annotationColumn.relativePath === currentPath?.value;\n\t\t\t});\n\t\t\tif (propertyInfo) {\n\t\t\t\tinfoNames.push(propertyInfo.name);\n\t\t\t}\n\t\t}\n\t});\n\treturn infoNames;\n}\n/**\n * Returns a JSON string containing Presentation Variant group conditions.\n * @param presentationVariantAnnotation Presentation variant annotation\n * @param columns Converter processed table columns\n * @param tableType The table type.\n * @returns Group conditions for a Presentation variant.\n */\nfunction getGroupConditions(\n\tpresentationVariantAnnotation: PresentationVariantType | undefined,\n\tcolumns: TableColumn[],\n\ttableType: string\n): TableGroupConditions | undefined {\n\tconst groupConditions: TableGroupConditions = {\n\t\tgroupLevels: []\n\t};\n\tif (presentationVariantAnnotation?.GroupBy) {\n\t\tlet aGroupBy = presentationVariantAnnotation.GroupBy;\n\t\tif (tableType === \"ResponsiveTable\") {\n\t\t\taGroupBy = aGroupBy.slice(0, 1);\n\t\t}\n\t\tgroupConditions.groupLevels = convertPropertyPathsToInfoNames(aGroupBy, columns).map((infoName) => {\n\t\t\treturn { name: infoName };\n\t\t});\n\t}\n\treturn groupConditions.groupLevels.length ? groupConditions : undefined;\n}\n/**\n * Updates the column's propertyInfos of a analytical table integrating all extensions and binding-relevant property info part.\n * @param tableVisualization The visualization to be updated\n */\nfunction _updatePropertyInfosWithAggregatesDefinitions(tableVisualization: TableVisualization): void {\n\tconst relatedAdditionalPropertyNameMap: Record<string, string> = {};\n\ttableVisualization.columns.forEach((column) => {\n\t\tcolumn = column as AnnotationTableColumn;\n\t\tconst aggregatablePropertyName = Object.keys(tableVisualization.analyticsExtensions!).find(\n\t\t\t(aggregate) => aggregate === column.name\n\t\t);\n\t\tif (aggregatablePropertyName) {\n\t\t\tconst aggregatablePropertyDefinition = tableVisualization.analyticsExtensions![aggregatablePropertyName];\n\t\t\tcolumn.aggregatable = !aggregatablePropertyDefinition.fromGroupableProperty;\n\t\t\tcolumn.extension = aggregatablePropertyDefinition ?? {};\n\t\t}\n\t\tif (column.additionalPropertyInfos?.length) {\n\t\t\tcolumn.additionalPropertyInfos.forEach((additionalPropertyInfo) => {\n\t\t\t\t// Create propertyInfo for each additional property.\n\t\t\t\t// The new property 'name' has been prefixed with 'Property_Technical::' for uniqueness and it has been named technical property as it requires dedicated MDC attributes (technicallyGroupable and technicallyAggregatable).\n\t\t\t\tcreateTechnicalProperty(additionalPropertyInfo, tableVisualization.columns, relatedAdditionalPropertyNameMap);\n\t\t\t});\n\t\t}\n\t});\n\ttableVisualization.columns.forEach((column) => {\n\t\tcolumn = column as AnnotationTableColumn;\n\t\tif (column.additionalPropertyInfos) {\n\t\t\tcolumn.additionalPropertyInfos = column.additionalPropertyInfos.map(\n\t\t\t\t(propertyInfo) => relatedAdditionalPropertyNameMap[propertyInfo] ?? propertyInfo\n\t\t\t);\n\t\t\t// Add additional properties to the complex property using the hidden annotation.\n\t\t\tcolumn.propertyInfos = column.propertyInfos?.concat(column.additionalPropertyInfos);\n\t\t}\n\t});\n}\n/**\n * Provides the required properties set on the annotations.\n * @param converterContext  The instance of the converter context\n * @returns The paths of the restricted properties\n */\nfunction getRequiredProperties(converterContext: ConverterContext<PageContextPathTarget>): PropertyPath[] {\n\treturn getContextPropertyRestriction(\n\t\tconverterContext.getDataModelObjectPath(),\n\t\t(capabilities) => {\n\t\t\treturn (capabilities as EntitySetAnnotations_Capabilities | undefined)?.InsertRestrictions?.RequiredProperties;\n\t\t},\n\t\tfalse\n\t);\n}\n/**\n * Determines if the property is annotated as a required property.\n * @param name The name of the property\n * @param converterContext The instance of the converter context\n * @returns True if the property is required\n */\nfunction isAnnotatedRequiredProperty(name: string, converterContext: ConverterContext<PageContextPathTarget>): boolean {\n\treturn getRequiredProperties(converterContext)\n\t\t.map((property) => property.$target?.fullyQualifiedName)\n\t\t.includes(name);\n}\n/**\n * Returns a JSON string containing Presentation Variant aggregate conditions.\n * @param presentationVariantAnnotation Presentation variant annotation\n * @param columns Converter processed table columns\n * @param extensionInfoMap\n * @returns Group conditions for a Presentation variant.\n */\nfunction getAggregateConditions(\n\tpresentationVariantAnnotation: PresentationVariantType | undefined,\n\tcolumns: TableColumn[],\n\textensionInfoMap: Record<string, InternalExtensionForAnalytics>\n): TableAggregateConditions | undefined {\n\tconst aggregateConditions: TableAggregateConditions = {};\n\tif (presentationVariantAnnotation?.Total) {\n\t\tconst aTotals = presentationVariantAnnotation.Total;\n\t\tconvertPropertyPathsToInfoNames(aTotals, columns).forEach((infoName) => {\n\t\t\taggregateConditions[infoName] = {};\n\t\t});\n\t} else {\n\t\tfor (const key in extensionInfoMap) {\n\t\t\tif (!extensionInfoMap[key].fromGroupableProperty) {\n\t\t\t\taggregateConditions[key] = {};\n\t\t\t}\n\t\t}\n\t}\n\treturn Object.keys(aggregateConditions).length ? aggregateConditions : undefined;\n}\nexport type StandardActionsConfiguration = {\n\tcreationBehaviour: TableAnnotationConfiguration[\"create\"];\n\tcutButtonVisibilityExpression: BindingToolkitExpression<boolean>;\n\tdeleteButtonVisibilityExpression: BindingToolkitExpression<boolean>;\n\tmassEditButtonVisibilityExpression: BindingToolkitExpression<boolean>;\n\tisInsertUpdateActionsTemplated: boolean;\n\tstandardActions: {\n\t\tcreate: StandardAction;\n\t\tdelete: StandardAction;\n\t\tpaste: StandardAction;\n\t\tmassEdit: StandardAction;\n\t\tinsights: StandardAction;\n\t\tcreationRow: StandardAction;\n\t\tcut: StandardAction;\n\t\tmoveUp?: StandardAction;\n\t\tmoveDown?: StandardAction;\n\t};\n};\n/**\n * Calculates the standard actions and adjacent properties that are needed in the further conversion process.\n * @param lineItemAnnotation Collection of data fields used for representation in a table or list\n * @param visualizationPath The visualization path\n * @param converterContext The instance of the converter context\n * @param tableManifestConfiguration The table manifest configuration\n * @param navigationSettings The navigation target manifest configuration\n * @returns Standard actions and connected properties\n */\nexport function getStandardActionsConfiguration(\n\tlineItemAnnotation: LineItem | undefined,\n\tvisualizationPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\ttableManifestConfiguration: TableControlConfiguration,\n\tnavigationSettings: NavigationSettingsConfiguration\n): StandardActionsConfiguration {\n\tconst creationBehaviour = _getCreationBehaviour(\n\t\tlineItemAnnotation,\n\t\ttableManifestConfiguration,\n\t\tconverterContext,\n\t\tnavigationSettings,\n\t\tvisualizationPath\n\t);\n\tconst standardActionsContext = generateStandardActionsContext(\n\t\tconverterContext,\n\t\tcreationBehaviour.mode as CreationMode,\n\t\ttableManifestConfiguration\n\t);\n\tconst cutButtonVisibilityExpression = getCutVisibility(converterContext, standardActionsContext);\n\tconst deleteButtonVisibilityExpression = getDeleteVisibility(converterContext, standardActionsContext);\n\tconst massEditButtonVisibilityExpression = getMassEditVisibility(converterContext, standardActionsContext);\n\tconst isInsertUpdateActionsTemplated = getInsertUpdateActionsTemplating(\n\t\tstandardActionsContext,\n\t\tisDraftOrStickySupported(converterContext)\n\t);\n\tconst standardActions = {\n\t\tcut: getStandardActionCut(converterContext, standardActionsContext),\n\t\tcreate: getStandardActionCreate(converterContext, standardActionsContext),\n\t\tdelete: getStandardActionDelete(converterContext, standardActionsContext),\n\t\tpaste: getStandardActionPaste(converterContext, standardActionsContext, isInsertUpdateActionsTemplated),\n\t\tmassEdit: getStandardActionMassEdit(converterContext, standardActionsContext),\n\t\tinsights: getStandardActionInsights(converterContext, standardActionsContext, visualizationPath),\n\t\tcreationRow: getCreationRow(converterContext, standardActionsContext)\n\t};\n\tconst configuration: StandardActionsConfiguration = {\n\t\tcreationBehaviour,\n\t\tcutButtonVisibilityExpression,\n\t\tdeleteButtonVisibilityExpression,\n\t\tmassEditButtonVisibilityExpression,\n\t\tisInsertUpdateActionsTemplated,\n\t\tstandardActions\n\t};\n\n\tif (standardActionsContext.tableManifestConfiguration.type === \"TreeTable\") {\n\t\tconfiguration.standardActions.moveUp = getStandardActionMoveUpDown(converterContext, standardActionsContext, true);\n\t\tconfiguration.standardActions.moveDown = getStandardActionMoveUpDown(converterContext, standardActionsContext, false);\n\t}\n\n\treturn configuration;\n}\nexport function getTableAnnotationConfiguration(\n\tlineItemAnnotation: LineItem | undefined,\n\tvisualizationPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\ttableManifestConfiguration: TableControlConfiguration,\n\tcolumns: TableColumn[],\n\tnavigationSettings: NavigationSettingsConfiguration,\n\tstandardActionsConfiguration: StandardActionsConfiguration,\n\tpresentationVariantAnnotation?: PresentationVariantType\n): TableAnnotationConfiguration {\n\t// Need to get the target\n\tconst { navigationPropertyPath } = splitPath(visualizationPath);\n\tconst typeNamePlural = converterContext.getDataModelObjectPath().targetEntityType.annotations?.UI?.HeaderInfo?.TypeNamePlural;\n\tconst title = typeNamePlural && compileExpression(getExpressionFromAnnotation(typeNamePlural));\n\tconst entitySet = converterContext.getDataModelObjectPath().targetEntitySet;\n\tconst pageManifestSettings: ManifestWrapper = converterContext.getManifestWrapper();\n\tconst hasAbsolutePath = navigationPropertyPath.length === 0;\n\tconst p13nMode = getP13nMode(visualizationPath, converterContext, tableManifestConfiguration);\n\tconst id = navigationPropertyPath ? getTableID(visualizationPath) : getTableID(converterContext.getContextPath(), \"LineItem\");\n\tconst targetCapabilities = getCapabilityRestriction(converterContext);\n\tconst navigationTargetPath = getNavigationTargetPath(converterContext, navigationPropertyPath);\n\tconst selectionMode = getSelectionMode(\n\t\tlineItemAnnotation,\n\t\tvisualizationPath,\n\t\tconverterContext,\n\t\thasAbsolutePath,\n\t\ttargetCapabilities,\n\t\tstandardActionsConfiguration.deleteButtonVisibilityExpression,\n\t\tstandardActionsConfiguration.massEditButtonVisibilityExpression,\n\t\tstandardActionsConfiguration.cutButtonVisibilityExpression\n\t);\n\tlet threshold = navigationPropertyPath ? 10 : 30;\n\tif (presentationVariantAnnotation?.MaxItems) {\n\t\tthreshold = presentationVariantAnnotation.MaxItems.valueOf();\n\t} else if (tableManifestConfiguration.type === \"TreeTable\") {\n\t\t// To make scrolling smooth, we set the threshold value higher for tree tables\n\t\tthreshold = 200;\n\t} else if (tableManifestConfiguration.type === \"GridTable\" || tableManifestConfiguration.type === \"AnalyticalTable\") {\n\t\tthreshold = 100;\n\t}\n\tconst variantManagement: VariantManagementType = pageManifestSettings.getVariantManagement();\n\tconst isSearchable = isPathSearchable(converterContext.getDataModelObjectPath());\n\treturn {\n\t\tid: id,\n\t\tapiId: generate([id, \"Table\"]),\n\t\tentityName: entitySet ? entitySet.name : \"\",\n\t\tentityTypeName: entitySet && entitySet.entityType ? entitySet.entityType.name : \"\",\n\t\tcollection: getTargetObjectPath(converterContext.getDataModelObjectPath()),\n\t\tnavigationPath: navigationPropertyPath,\n\t\trow: _getRowConfigurationProperty(\n\t\t\tlineItemAnnotation,\n\t\t\tconverterContext,\n\t\t\tnavigationSettings,\n\t\t\tnavigationTargetPath,\n\t\t\ttableManifestConfiguration.type\n\t\t),\n\t\tp13nMode,\n\t\tisInsertUpdateActionsTemplated: standardActionsConfiguration.isInsertUpdateActionsTemplated,\n\t\tupdatablePropertyPath: getCurrentEntitySetUpdatablePath(converterContext),\n\t\tdisplayMode: isInDisplayMode(converterContext, true),\n\t\tcreate: standardActionsConfiguration.creationBehaviour,\n\t\tselectionMode: selectionMode,\n\t\tvariantManagement: variantManagement === \"Control\" && !p13nMode ? VariantManagementType.None : variantManagement,\n\t\tthreshold: threshold,\n\t\tsortConditions: getSortConditions(converterContext, presentationVariantAnnotation, columns),\n\t\ttitle: title,\n\t\tsearchable: tableManifestConfiguration.type !== \"AnalyticalTable\" && !(isConstant(isSearchable) && isSearchable.value === false),\n\t\tinitialExpansionLevel: getInitialExpansionLevel(presentationVariantAnnotation),\n\t\trequiredProperties: getRequiredProperties(converterContext)\n\t\t\t.filter((property) => property?.$target?.type !== \"Edm.Boolean\")\n\t\t\t.map((property) => property.value)\n\t};\n}\n/**\n * Gets the data type of a column for the export.\n * @param dataType The data type of a property, column\n * @param isATimezone Is the given property a timezone\n * @param isCurrency Is the given property a currency\n * @param exportSettings The already detected export settings from datafields\n * @returns The supported export type\n */\nfunction getExportDataType(\n\tdataType: string | undefined,\n\tisATimezone = false,\n\tisCurrency = false,\n\texportSettings?: ColumnExportSettings\n): string {\n\tlet exportDataType = \"String\";\n\tif (!dataType || exportSettings?.dataPointTargetValue) {\n\t\treturn exportDataType;\n\t}\n\tif (exportSettings?.isCurrency || isCurrency) {\n\t\treturn \"Currency\";\n\t}\n\tif (isATimezone) {\n\t\treturn \"Timezone\";\n\t}\n\tif (exportSettings?.wrap) {\n\t\treturn exportDataType;\n\t}\n\tswitch (dataType) {\n\t\tcase \"Edm.Decimal\":\n\t\tcase \"Edm.Int32\":\n\t\tcase \"Edm.Int64\":\n\t\tcase \"Edm.Double\":\n\t\tcase \"Edm.Byte\":\n\t\t\texportDataType = \"Number\";\n\t\t\tbreak;\n\t\tcase \"Edm.DateOfTime\":\n\t\tcase \"Edm.Date\":\n\t\t\texportDataType = \"Date\";\n\t\t\tbreak;\n\t\tcase \"Edm.DateTimeOffset\":\n\t\t\texportDataType = \"DateTime\";\n\t\t\tbreak;\n\t\tcase \"Edm.TimeOfDay\":\n\t\t\texportDataType = \"Time\";\n\t\t\tbreak;\n\t\tcase \"Edm.Boolean\":\n\t\t\texportDataType = \"Boolean\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\texportDataType = \"String\";\n\t}\n\treturn exportDataType;\n}\n/**\n * Splits the visualization path into navigation property path and annotation.\n * @param visualizationPath\n * @returns The split path\n */\nexport function splitPath(visualizationPath: string): { navigationPropertyPath: string; annotationPath: string } {\n\tconst [targetNavigationPropertyPath, annotationPath] = visualizationPath.split(\"@\");\n\tlet navigationPropertyPath = targetNavigationPropertyPath;\n\tif (navigationPropertyPath.lastIndexOf(\"/\") === navigationPropertyPath.length - 1) {\n\t\t// Drop trailing slash\n\t\tnavigationPropertyPath = navigationPropertyPath.substring(0, navigationPropertyPath.length - 1);\n\t}\n\treturn { navigationPropertyPath, annotationPath };\n}\nexport function getSelectionVariantConfiguration(\n\tselectionVariantPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): SelectionVariantConfiguration | undefined {\n\tconst resolvedTarget = converterContext.getEntityTypeAnnotation(selectionVariantPath);\n\tconst selection: SelectionVariant = resolvedTarget.annotation as SelectionVariant;\n\tif (selection) {\n\t\tconst propertyNames: string[] = [];\n\t\tselection.SelectOptions?.forEach((selectOption: SelectOptionType) => {\n\t\t\tconst propertyName = selectOption.PropertyName;\n\t\t\tconst propertyPath: string = propertyName?.value ?? \"\";\n\t\t\tif (!propertyNames.includes(propertyPath)) {\n\t\t\t\tpropertyNames.push(propertyPath);\n\t\t\t}\n\t\t});\n\t\treturn {\n\t\t\ttext: selection?.Text?.toString(),\n\t\t\tpropertyNames: propertyNames\n\t\t};\n\t}\n\treturn undefined;\n}\nfunction _getFullScreenBasedOnDevice(\n\ttableSettings: TableManifestSettingsConfiguration,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tisIphone: boolean\n): boolean {\n\t// If enableFullScreen is not set, use as default true on phone and false otherwise\n\tlet enableFullScreen = tableSettings.enableFullScreen ?? isIphone;\n\t// Make sure that enableFullScreen is not set on ListReport for desktop or tablet\n\tif (!isIphone && enableFullScreen && converterContext.getTemplateType() === TemplateType.ListReport) {\n\t\tenableFullScreen = false;\n\t\tconverterContext.getDiagnostics().addIssue(IssueCategory.Manifest, IssueSeverity.Low, IssueType.FULLSCREENMODE_NOT_ON_LISTREPORT);\n\t}\n\treturn enableFullScreen;\n}\nfunction _getMultiSelectMode(\n\ttableSettings: TableManifestSettingsConfiguration,\n\ttableType: TableType,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): string | undefined {\n\tlet multiSelectMode: string | undefined;\n\tif (tableType !== \"ResponsiveTable\") {\n\t\treturn undefined;\n\t}\n\tswitch (converterContext.getTemplateType()) {\n\t\tcase TemplateType.ListReport:\n\t\tcase TemplateType.ObjectPage:\n\t\t\tmultiSelectMode = tableSettings.selectAll === false ? \"ClearAll\" : \"Default\";\n\t\t\tif (converterContext.getTemplateType() === TemplateType.ObjectPage && converterContext.getManifestWrapper().useIconTabBar()) {\n\t\t\t\tmultiSelectMode = !tableSettings.selectAll ? \"ClearAll\" : \"Default\";\n\t\t\t}\n\t\t\tbreak;\n\t\tcase TemplateType.AnalyticalListPage:\n\t\t\tmultiSelectMode = !tableSettings.selectAll ? \"ClearAll\" : \"Default\";\n\t\t\tbreak;\n\t\tdefault:\n\t}\n\treturn multiSelectMode;\n}\nfunction _getTableMode(\n\ttableType: TableType,\n\ttableSettings: TableManifestSettingsConfiguration,\n\tisTemplateListReport: boolean\n): { rowCountMode?: TableRowCountMode; rowCount?: number } {\n\tif (tableType !== \"ResponsiveTable\") {\n\t\tif (isTemplateListReport) {\n\t\t\treturn {\n\t\t\t\trowCountMode: \"Auto\",\n\t\t\t\trowCount: 3\n\t\t\t};\n\t\t} else {\n\t\t\treturn {\n\t\t\t\trowCountMode: tableSettings.rowCountMode ?? \"Fixed\",\n\t\t\t\trowCount: tableSettings.rowCount ?? (tableType === \"GridTable\" ? 5 : 10)\n\t\t\t};\n\t\t}\n\t} else {\n\t\treturn {};\n\t}\n}\nfunction _getCondensedTableLayout(_tableType: TableType, _tableSettings: TableManifestSettingsConfiguration): boolean {\n\treturn _tableSettings.condensedTableLayout !== undefined && _tableType !== \"ResponsiveTable\"\n\t\t? _tableSettings.condensedTableLayout\n\t\t: false;\n}\nfunction _getTableSelectionLimit(_tableSettings: TableManifestSettingsConfiguration): number {\n\treturn _tableSettings.selectAll === true || _tableSettings.selectionLimit === 0 ? 0 : _tableSettings.selectionLimit || 200;\n}\nfunction _getTableInlineCreationRowCount(_tableSettings: TableManifestSettingsConfiguration): number {\n\treturn _tableSettings.creationMode?.inlineCreationRowCount ? _tableSettings.creationMode?.inlineCreationRowCount : 1;\n}\n\nfunction _getEnableExport(\n\ttableSettings: TableManifestSettingsConfiguration,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tenablePaste: boolean\n): boolean {\n\treturn tableSettings.enableExport !== undefined\n\t\t? tableSettings.enableExport\n\t\t: converterContext.getTemplateType() !== \"ObjectPage\" || enablePaste;\n}\nfunction _getFrozenColumnCount(tableSettings: TableManifestSettingsConfiguration): number | undefined {\n\treturn tableSettings.frozenColumnCount;\n}\n\n/**\n * Get the widthIncludingColumnHeader value from the tableSettings if it exists.\n * @param tableSettings TableSettings Object\n * @returns Returns the value of widthIncludingColumnHeader or false\n */\nfunction _getWidthIncludingColumnHeader(tableSettings: TableManifestSettingsConfiguration): boolean {\n\treturn tableSettings.widthIncludingColumnHeader ?? false;\n}\n\nfunction getFilterConfiguration(\n\ttableSettings: TableManifestSettingsConfiguration,\n\tlineItemAnnotation: LineItem,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tselectionVariantAnnotation: SelectionVariantType | undefined\n): {\n\tfilters: Partial<Record<\"quickFilters\" | \"hiddenFilters\", TableFiltersConfiguration>>;\n\theaderVisible: boolean;\n} {\n\tlet hideTableTitle = false;\n\tconst filters: Partial<Record<\"quickFilters\" | \"hiddenFilters\", TableFiltersConfiguration>> = {};\n\tconst targetEntityType = converterContext.getAnnotationEntityType(lineItemAnnotation);\n\tif (tableSettings.quickVariantSelection) {\n\t\tconst quickFilterPaths = (tableSettings.quickVariantSelection.paths ?? []).reduce(\n\t\t\t(filterPaths: { annotationPath: string }[], path) => {\n\t\t\t\tif (targetEntityType.resolvePath(path.annotationPath)) {\n\t\t\t\t\tfilterPaths.push({ annotationPath: path.annotationPath });\n\t\t\t\t}\n\t\t\t\treturn filterPaths;\n\t\t\t},\n\t\t\t[]\n\t\t);\n\t\tif (quickFilterPaths.length) {\n\t\t\tfilters.quickFilters = {\n\t\t\t\tshowCounts: tableSettings.quickVariantSelection.showCounts,\n\t\t\t\tpaths: quickFilterPaths\n\t\t\t};\n\t\t}\n\t}\n\tif (selectionVariantAnnotation) {\n\t\t/**\n\t\t * Provide Selection Variant to hiddenFilters in order to set the SV filters to the table.\n\t\t * MDC Table overrides binding Filter and from SAP FE the only method where we are able to add\n\t\t * additional filter is 'rebindTable' into Table delegate.\n\t\t * To avoid implementing specific LR feature to SAP FE Macro Table, the filter(s)  not managed by the FilterBar\n\t\t * can be passed to macro table via parameter/context named filters and key hiddenFilters.\n\t\t */\n\t\tfilters.hiddenFilters = { paths: [{ annotationPath: `@${selectionVariantAnnotation.fullyQualifiedName.split(\"@\")[1]}` }] };\n\t}\n\n\thideTableTitle = !!tableSettings.quickVariantSelection?.hideTableTitle;\n\treturn {\n\t\tfilters: filters,\n\t\theaderVisible: !(filters?.quickFilters && hideTableTitle)\n\t};\n}\n/**\n * Adds the tooltip configuration for a given column.\n * @param property The property referenced on the column\n * @param column The column to be updated\n */\nfunction _addToolTip(property: Property, column: AnnotationTableColumn): void {\n\tconst tooltip = _getTooltip(property) ?? column.label;\n\tif (tooltip) {\n\t\tcolumn.tooltip = tooltip;\n\t}\n}\nfunction _getCollectedNavigationPropertyLabels(\n\trelativePath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): string[] | undefined {\n\tconst navigationProperties = enhanceDataModelPath(converterContext.getDataModelObjectPath(), relativePath).navigationProperties;\n\tif (navigationProperties?.length > 0) {\n\t\tconst collectedNavigationPropertyLabels: string[] = [];\n\t\tnavigationProperties.forEach((navProperty) => {\n\t\t\tcollectedNavigationPropertyLabels.push(getLabel(navProperty) || navProperty.name);\n\t\t});\n\t\treturn collectedNavigationPropertyLabels;\n\t}\n}\n/**\n * Determines if the action will have an expression for enablement generated.\n * @param dataField The dataField containing an action\n * @param sEntityType The current entity for templating\n * @returns Whether an expression for enablement is to be generated\n */\nfunction _useEnabledExpression(dataField: DataFieldForActionTypes, sEntityType: string): boolean {\n\t// There are three cases when a table action has an OperationAvailable that leads to an enablement expression\n\t// and is not dependent upon the table entries.\n\t// 1. An action with an overload, that is executed against a parent entity.\n\t// 2. An unbound action\n\t// 3. A static action (that is, bound to a collection)\n\tlet useEnabledExpression = false;\n\tif (dataField.ActionTarget?.annotations?.Core?.OperationAvailable !== undefined) {\n\t\t// Unbound action. Is recognised, but getExpressionFromAnnotation checks for isBound = true, so not generated.\n\t\tconst isBound = dataField.ActionTarget?.isBound;\n\t\t//overload action\n\t\tconst overloadAction = isBound && dataField.ActionTarget?.sourceType !== sEntityType;\n\t\t//static action\n\t\tconst staticAction = dataField.ActionTarget?.parameters[0]?.isCollection;\n\t\t//copy action\n\t\tif (!isBound || overloadAction || staticAction) {\n\t\t\tuseEnabledExpression = true;\n\t\t}\n\t}\n\treturn useEnabledExpression;\n}\n\n/**\n * Updates the table control configuration with Tree-Table specific information.\n * @param tableConfiguration The table configuration\n * @param tableSettings Settings from the manifest\n * @param converterContext The instance of the converter context\n */\nfunction updateTreeTableManifestConfiguration(\n\ttableConfiguration: TableControlConfiguration,\n\ttableSettings: TableManifestSettingsConfiguration,\n\tconverterContext: ConverterContext\n): void {\n\tconst dataModelObjectPath = converterContext.getDataModelObjectPath();\n\ttableConfiguration.hierarchyQualifier = tableSettings.hierarchyQualifier;\n\tconst hierarchyParentNavigationPropertyPath = getHierarchyParentNavigationPropertyPath(\n\t\tdataModelObjectPath,\n\t\ttableConfiguration.hierarchyQualifier!\n\t);\n\tconst nonUpdatableNavigationProperties = getNonUpdatableNavigationProperties(dataModelObjectPath);\n\ttableConfiguration.isHierarchyParentNodeUpdatable = !nonUpdatableNavigationProperties?.includes(hierarchyParentNavigationPropertyPath);\n\ttableConfiguration.isNodeMovable = getCustomFunctionInfo(tableSettings.isNodeMovable, tableConfiguration);\n\ttableConfiguration.isMoveToPositionAllowed = getCustomFunctionInfo(tableSettings.isMoveToPositionAllowed, tableConfiguration);\n\ttableConfiguration.createEnablement = getCustomFunctionInfo(tableSettings.creationMode?.isCreateEnabled, tableConfiguration);\n\n\tif (tableSettings.creationMode?.nodeType?.propertyName && tableSettings.creationMode?.nodeType?.values) {\n\t\tconst values = tableSettings.creationMode.nodeType.values;\n\t\ttableConfiguration.nodeType = {\n\t\t\tpropertyName: tableSettings.creationMode.nodeType.propertyName,\n\t\t\tvalues: Object.keys(values).map((value) => {\n\t\t\t\tconst nodeTypeInfo = values[value];\n\n\t\t\t\tif (typeof nodeTypeInfo === \"string\") {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\ttext: nodeTypeInfo\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\ttext: nodeTypeInfo.label,\n\t\t\t\t\t\tcreationDialogFields:\n\t\t\t\t\t\t\ttableConfiguration.creationMode === CreationMode.CreationDialog\n\t\t\t\t\t\t\t\t? getFieldList(nodeTypeInfo.creationFields, converterContext)\n\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t})\n\t\t};\n\t}\n\n\t// Create in place\n\tif (tableSettings.creationMode?.createInPlace) {\n\t\ttableConfiguration.createInPlace = true;\n\t}\n}\n\nexport function getCustomFunctionInfo(\n\tvalue: string | undefined,\n\ttableConfiguration: TableControlConfiguration\n): ExternalMethodConfig | undefined {\n\tif (!value) {\n\t\treturn undefined;\n\t}\n\tconst lastDotIndex = value.lastIndexOf(\".\") || -1;\n\tconst moduleName = value.substring(0, lastDotIndex).replace(/\\./gi, \"/\");\n\tconst methodName = value.substring(lastDotIndex + 1);\n\n\t// Add the custom module in the list of required modules if necessary\n\tif (!moduleName.startsWith(\"/extension/\")) {\n\t\tif (!tableConfiguration.additionalRequiredModules) {\n\t\t\ttableConfiguration.additionalRequiredModules = [moduleName];\n\t\t} else if (!tableConfiguration.additionalRequiredModules.includes(moduleName)) {\n\t\t\ttableConfiguration.additionalRequiredModules.push(moduleName);\n\t\t}\n\t}\n\n\treturn { moduleName, methodName };\n}\n\n/**\n * Retrieve the table control configuration optimistic batch information.\n * @param tableManifestSettings The table configuration\n @returns True if Optimistic batch mode is disabled\n */\nfunction getOptimisticBatchSettingsFromManifest(tableManifestSettings: TableManifestConfiguration): boolean {\n\t// Optimistic batch is set by default\n\treturn tableManifestSettings?.tableSettings?.disableRequestCache || false;\n}\n\n/**\n * Gets the settings coming from the manifest related to the mass edit dialog.\n * @param tableSettings The table configuration\n * @param converterContext The instance of the converter context\n * @returns The mass edit configuration.\n */\nexport function getMassEditSettings(\n\ttableSettings: TableManifestSettingsConfiguration,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): MassEditTableConfiguration {\n\tconst defaultFieldConfiguration = {\n\t\tvisibleFields: [],\n\t\tignoredFields: [],\n\t\toperationGroupingMode:\n\t\t\tconverterContext.getTemplateType() === TemplateType.ListReport\n\t\t\t\t? OperationGroupingMode.Isolated\n\t\t\t\t: OperationGroupingMode.ChangeSet\n\t};\n\tif (!tableSettings.enableMassEdit) {\n\t\treturn { enabled: false, ...defaultFieldConfiguration };\n\t}\n\tif (tableSettings.enableMassEdit === true) {\n\t\treturn { enabled: tableSettings.enableMassEdit, ...defaultFieldConfiguration };\n\t} else if (typeof tableSettings.enableMassEdit === \"object\") {\n\t\treturn {\n\t\t\tenabled: true,\n\t\t\tvisibleFields: getFieldList(tableSettings.enableMassEdit.visibleFields, converterContext),\n\t\t\tignoredFields: getFieldList(tableSettings.enableMassEdit.ignoredFields, converterContext),\n\t\t\toperationGroupingMode:\n\t\t\t\ttableSettings.enableMassEdit.operationGroupingMode &&\n\t\t\t\tObject.values(OperationGroupingMode).includes(tableSettings.enableMassEdit.operationGroupingMode)\n\t\t\t\t\t? tableSettings.enableMassEdit.operationGroupingMode\n\t\t\t\t\t: defaultFieldConfiguration.operationGroupingMode,\n\t\t\tcustomFragment: tableSettings.enableMassEdit.customFragment\n\t\t};\n\t}\n\treturn { enabled: false, ...defaultFieldConfiguration };\n}\n\n/**\n * Gets a list of the fields coming from the manifest.\n * @param fields The fields, could be a FieldGroup or fields separated by a comma\n * @param converterContext The instance of the converter context\n * @returns The list of fields.\n */\nfunction getFieldList(fields: string | undefined, converterContext: ConverterContext<PageContextPathTarget>): string[] {\n\tif (!fields) {\n\t\treturn [];\n\t}\n\tif (fields.startsWith(UIAnnotationTerms.FieldGroup)) {\n\t\tconst fieldGroup = converterContext.getEntityTypeAnnotation<FieldGroup>(`@${fields}`);\n\t\tif (isAnnotationOfType<FieldGroup>(fieldGroup.annotation, UIAnnotationTypes.FieldGroupType)) {\n\t\t\treturn fieldGroup.annotation.Data.reduce((properties: string[], field) => {\n\t\t\t\tif (isDataField(field) && isPathAnnotationExpression(field.Value)) {\n\t\t\t\t\tproperties.push(field.Value.path);\n\t\t\t\t}\n\t\t\t\treturn properties;\n\t\t\t}, []);\n\t\t}\n\t\treturn [];\n\t}\n\treturn fields\n\t\t.replace(/\\s/g, \"\")\n\t\t.split(\",\")\n\t\t.map((name) => name.trim());\n}\n\nexport function getTableManifestConfiguration(\n\tlineItemAnnotation: LineItem | undefined,\n\tvisualizationPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tcheckCondensedLayout = true,\n\tselectionVariantAnnotation?: SelectionVariantType\n): TableControlConfiguration {\n\tconst _manifestWrapper = converterContext.getManifestWrapper();\n\tconst tableManifestSettings: TableManifestConfiguration = converterContext.getManifestControlConfiguration(visualizationPath);\n\tconst tableSettings = tableManifestSettings?.tableSettings ?? {};\n\tconst globalFEManifestSettings = _manifestWrapper.getSapFeManifestConfiguration();\n\tconst defaultCreationMode =\n\t\tglobalFEManifestSettings?.macros?.table?.defaultCreationMode === \"InlineCreationRows\" ? CreationMode.InlineCreationRows : undefined;\n\tconst creationMode: CreationMode = tableSettings.creationMode?.name ?? defaultCreationMode ?? CreationMode.NewPage;\n\tconst enableAutoColumnWidth = !_manifestWrapper.isPhone();\n\tconst disableCopyToClipboard = tableSettings.disableCopyToClipboard;\n\tconst templateType = converterContext.getTemplateType();\n\tconst isCondensedTableLayoutCompliant = checkCondensedLayout && _manifestWrapper.isCondensedLayoutCompliant();\n\tconst oFilterConfiguration = lineItemAnnotation\n\t\t? getFilterConfiguration(tableSettings, lineItemAnnotation, converterContext, selectionVariantAnnotation)\n\t\t: {};\n\tconst customValidationFunction = tableSettings.creationMode?.customValidationFunction;\n\tconst exportRequestSize = tableSettings.exportRequestSize;\n\tconst tableType = getTableType(converterContext, tableManifestSettings);\n\t// By default, paste is enabled on an ObjectPage and on a ListReport with a draft TreeTable\n\tconst enablePaste =\n\t\ttableSettings.enablePaste ??\n\t\t(converterContext.getTemplateType() === \"ObjectPage\" ||\n\t\t\t(tableType === \"TreeTable\" && (converterContext.getEntitySet() as EntitySet)?.annotations.Common?.DraftRoot !== undefined));\n\tconst tableRowMode = _getTableMode(tableType, tableSettings, templateType === TemplateType.ListReport);\n\tconst defaultScrollThreshold = tableType !== \"ResponsiveTable\" ? 300 : undefined;\n\tconst condensedTableLayout = _getCondensedTableLayout(tableType, tableSettings);\n\tlet inlineCreationRowsHiddenInEditMode = false;\n\tif (tableSettings.creationMode?.inlineCreationRowsHiddenInEditMode) {\n\t\tinlineCreationRowsHiddenInEditMode =\n\t\t\ttypeof tableSettings.creationMode?.inlineCreationRowsHiddenInEditMode === \"string\"\n\t\t\t\t? tableSettings.creationMode?.inlineCreationRowsHiddenInEditMode === \"true\"\n\t\t\t\t: tableSettings.creationMode?.inlineCreationRowsHiddenInEditMode;\n\t}\n\tlet useTextForNoDataMessages: string;\n\tif (converterContext.getTemplateType() === \"ListReport\") {\n\t\tuseTextForNoDataMessages = \"illustratedMessage-Auto\";\n\t} else {\n\t\tuseTextForNoDataMessages = _manifestWrapper.getUseTextForNoDataMessages() ? \"text\" : \"illustratedMessage-Dot\";\n\t}\n\tconst oConfiguration = {\n\t\t// If no createAtEnd is specified it will be false for Inline/CreationDialog create and true otherwise\n\t\tcreateAtEnd:\n\t\t\ttableSettings.creationMode?.createAtEnd !== undefined\n\t\t\t\t? tableSettings.creationMode?.createAtEnd\n\t\t\t\t: ![CreationMode.Inline, CreationMode.CreationDialog].includes(creationMode),\n\t\tcreationMode: creationMode,\n\t\tcreationDialogFields:\n\t\t\tcreationMode === CreationMode.CreationDialog\n\t\t\t\t? getFieldList(tableSettings.creationMode?.creationFields, converterContext)\n\t\t\t\t: undefined,\n\t\tcustomValidationFunction: customValidationFunction,\n\t\thasDataStateIndicatorFilter: templateType === TemplateType.ListReport,\n\t\t// if a custom validation function is provided, disableAddRowButtonForEmptyData should not be considered, i.e. set to false\n\t\tdisableAddRowButtonForEmptyData: !customValidationFunction ? !!tableSettings.creationMode?.disableAddRowButtonForEmptyData : false,\n\t\tenableAutoColumnWidth: enableAutoColumnWidth,\n\t\tenablePastingOfComputedProperties: tableSettings.enablePastingOfComputedProperties,\n\t\tenableExport: _getEnableExport(tableSettings, converterContext, enablePaste),\n\t\tfrozenColumnCount: _getFrozenColumnCount(tableSettings),\n\t\twidthIncludingColumnHeader: _getWidthIncludingColumnHeader(tableSettings),\n\t\tenableFullScreen: _getFullScreenBasedOnDevice(tableSettings, converterContext, _manifestWrapper.isPhone()),\n\t\tmassEdit: getMassEditSettings(tableSettings, converterContext),\n\t\tenableAddCardToInsights: tableSettings?.enableAddCardToInsights,\n\t\tenablePaste: enablePaste,\n\t\tdisableCopyToClipboard: disableCopyToClipboard,\n\t\theaderVisible: true,\n\t\theader: tableSettings.header,\n\t\tmultiSelectMode: _getMultiSelectMode(tableSettings, tableType, converterContext),\n\t\tselectionLimit: _getTableSelectionLimit(tableSettings),\n\t\tinlineCreationRowCount: _getTableInlineCreationRowCount(tableSettings),\n\t\tinlineCreationRowsHiddenInEditMode: inlineCreationRowsHiddenInEditMode,\n\t\tshowRowCount: tableSettings?.quickVariantSelection?.paths ? false : !_manifestWrapper.getViewConfiguration()?.showCounts,\n\t\ttype: tableType,\n\t\tdisableRequestCache: getOptimisticBatchSettingsFromManifest(tableManifestSettings),\n\t\tuseCondensedTableLayout: condensedTableLayout && isCondensedTableLayoutCompliant,\n\t\tisCompactType: _manifestWrapper.isCompactType(),\n\t\tbeforeRebindTable: tableSettings.beforeRebindTable,\n\t\texportRequestSize: exportRequestSize,\n\t\tenableUploadPlugin: !!converterContext.getAnnotationEntityType().annotations?.UI?.MediaResource?.Stream,\n\t\tselectionChange: tableSettings.selectionChange,\n\t\tmodeForNoDataMessage: useTextForNoDataMessages,\n\t\tscrollThreshold: tableSettings.scrollThreshold ?? defaultScrollThreshold\n\t};\n\n\tconst tableConfiguration: TableControlConfiguration = { ...oConfiguration, ...tableRowMode, ...oFilterConfiguration };\n\tif (tableType === \"TreeTable\") {\n\t\tupdateTreeTableManifestConfiguration(tableConfiguration, tableSettings, converterContext);\n\t}\n\n\tif (tableSettings.headerVisible !== undefined) {\n\t\ttableConfiguration.headerVisible = tableSettings.headerVisible;\n\t}\n\n\treturn tableConfiguration;\n}\n\nfunction getTableType(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\ttableManifestSettings?: TableManifestConfiguration\n): TableType {\n\tif (tableManifestSettings?.tableSettings?.type) {\n\t\t// in case the application specified a table type we will use this one\n\t\treturn tableManifestSettings.tableSettings.type;\n\t}\n\n\t// default is the ResponsiveTable\n\treturn \"ResponsiveTable\";\n}\n\n/**\n * Creates a property using the text arrangement annotation set to text only.\n * @param converterContext The converter context.\n * @param propertyDataModelObjectPath The corresponding DataModelObjectPath.\n * @param lineItem The column to be evaluated.\n * @param columnsToBeCreated The list of columns to be created.\n * @param relativePath The relative path to the target property based on the context.\n * @param restrictionsOnProperties The existing restrictions on properties\n */\nfunction createPropertyAnnotatedTextOnly(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tpropertyDataModelObjectPath: DataModelObjectPath<DataFieldAbstractTypes>,\n\tlineItem: DataFieldAbstractTypes,\n\tcolumnsToBeCreated: Record<string, Property>,\n\trelativePath: string,\n\trestrictionsOnProperties: RestrictionsOnProperties\n): void {\n\tconst isPropertyNavigated =\n\t\tpropertyDataModelObjectPath.navigationProperties.length !== converterContext.getDataModelObjectPath().navigationProperties.length;\n\tif (isPropertyNavigated && isDataField(lineItem)) {\n\t\tcolumnsToBeCreated[relativePath] = lineItem.Value.$target;\n\t\trestrictionsOnProperties.nonSortableProperties.push(relativePath);\n\t} else if (isDataFieldForAnnotation(lineItem) && hasFieldGroupTarget(lineItem)) {\n\t\t(lineItem.Target.$target as FieldGroup).Data.forEach((field) => {\n\t\t\tif (isDataField(field) && getDisplayMode(field.Value.$target) === \"Description\") {\n\t\t\t\tconst inheredPropertyDataModelObjectPath = enhanceDataModelPath(\n\t\t\t\t\tconverterContext.getDataModelObjectPath(),\n\t\t\t\t\tfield.Value.path\n\t\t\t\t);\n\t\t\t\tconst isInheredPropertyNavigated =\n\t\t\t\t\tinheredPropertyDataModelObjectPath.navigationProperties.length !==\n\t\t\t\t\tconverterContext.getDataModelObjectPath().navigationProperties.length;\n\t\t\t\tif (isInheredPropertyNavigated) {\n\t\t\t\t\tcolumnsToBeCreated[field.Value.path] = field.Value.$target;\n\t\t\t\t\trestrictionsOnProperties.nonSortableProperties.push(field.Value.path);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport function getTypeConfig(oProperty: Property | DataFieldAbstractTypes | undefined, dataType: string | undefined): PropertyTypeConfig {\n\tlet oTargetMapping;\n\tif (isProperty(oProperty)) {\n\t\toTargetMapping = isTypeDefinition(oProperty.targetType)\n\t\t\t? EDM_TYPE_MAPPING[oProperty.targetType.underlyingType]\n\t\t\t: EDM_TYPE_MAPPING[oProperty.type];\n\t}\n\tif (oTargetMapping === undefined && dataType !== undefined) {\n\t\toTargetMapping = EDM_TYPE_MAPPING[dataType];\n\t}\n\tconst propertyTypeConfig: PropertyTypeConfig = {\n\t\ttype: oTargetMapping?.type,\n\t\tconstraints: {},\n\t\tformatOptions: {}\n\t};\n\tif (isProperty(oProperty) && oTargetMapping !== undefined) {\n\t\tpropertyTypeConfig.constraints = {\n\t\t\tscale: oTargetMapping.constraints?.$Scale ? oProperty.scale : undefined,\n\t\t\tprecision: oTargetMapping.constraints?.$Precision ? oProperty.precision : undefined,\n\t\t\tmaxLength: oTargetMapping.constraints?.$MaxLength ? oProperty.maxLength : undefined,\n\t\t\tnullable: oTargetMapping.constraints?.$Nullable ? oProperty.nullable : undefined,\n\t\t\tminimum:\n\t\t\t\toTargetMapping.constraints?.[\"@Org.OData.Validation.V1.Minimum/$Decimal\"] &&\n\t\t\t\t!isNaN(oProperty.annotations?.Validation?.Minimum)\n\t\t\t\t\t? `${oProperty.annotations?.Validation?.Minimum}`\n\t\t\t\t\t: undefined,\n\t\t\tmaximum:\n\t\t\t\toTargetMapping.constraints?.[\"@Org.OData.Validation.V1.Maximum/$Decimal\"] &&\n\t\t\t\t!isNaN(oProperty.annotations?.Validation?.Maximum)\n\t\t\t\t\t? `${oProperty.annotations?.Validation?.Maximum}`\n\t\t\t\t\t: undefined,\n\t\t\tisDigitSequence:\n\t\t\t\tpropertyTypeConfig.type === \"sap.ui.model.odata.type.String\" &&\n\t\t\t\toTargetMapping.constraints?.[`@${CommonAnnotationTerms.IsDigitSequence}`] &&\n\t\t\t\toProperty.annotations?.Common?.IsDigitSequence\n\t\t\t\t\t? true\n\t\t\t\t\t: undefined\n\t\t};\n\t}\n\tpropertyTypeConfig.formatOptions = {\n\t\tparseAsString:\n\t\t\tpropertyTypeConfig?.type?.indexOf(\"sap.ui.model.odata.type.Int\") === 0 ||\n\t\t\tpropertyTypeConfig?.type?.indexOf(\"sap.ui.model.odata.type.Double\") === 0\n\t\t\t\t? false\n\t\t\t\t: undefined,\n\t\temptyString:\n\t\t\tpropertyTypeConfig?.type?.indexOf(\"sap.ui.model.odata.type.Int\") === 0 ||\n\t\t\tpropertyTypeConfig?.type?.indexOf(\"sap.ui.model.odata.type.Double\") === 0\n\t\t\t\t? \"\"\n\t\t\t\t: undefined,\n\t\tparseKeepsEmptyString:\n\t\t\tpropertyTypeConfig.type === \"sap.ui.model.odata.type.String\" && propertyTypeConfig.constraints.nullable === false\n\t\t\t\t? true\n\t\t\t\t: undefined\n\t};\n\treturn propertyTypeConfig;\n}\n/**\n * Add a description property to the list of description properties used by the columns of a table\n * @param textProperties The list of properties referenced as text on a text arrangement annotation\n * @param relatedPropertiesInfo The related properties linked to the column (named also complex property)\n * @param relatedPropertyName The property name to be added\n */\n\nfunction addPropertyToDisplayModeOfDescriptionPropertiesMap(\n\tdisplayModeOfDescriptionPropertiesMap: Record<string, DisplayMode>,\n\trelatedPropertiesInfo: ComplexPropertyInfo,\n\trelatedPropertyName: string\n): void {\n\tif (\n\t\trelatedPropertiesInfo.properties[relatedPropertyName].displayModeOfPropertyUsedAsDescription &&\n\t\t!displayModeOfDescriptionPropertiesMap[relatedPropertyName]\n\t) {\n\t\tdisplayModeOfDescriptionPropertiesMap[relatedPropertyName] =\n\t\t\trelatedPropertiesInfo.properties[relatedPropertyName].displayModeOfPropertyUsedAsDescription!;\n\t}\n}\n\n/**\n * Computes the referenced properties of a LineItem in case the LineItem is annotated as hidden.\n * @param existingColumns The list of columns created from LineItems and from properties of entityType\n * @param name The name of the property to be evaluated\n * @param column The given column from lineItem or property of entitySet\n */\nfunction computeHiddenOnRelatedColumns(existingColumns: AnnotationTableColumn[], name: string, column: AnnotationTableColumn): void {\n\tconst relatedAnnotationColumns = existingColumns.filter(\n\t\t(existingColumn) => existingColumn.propertyInfos?.includes(name) && existingColumn.isPartOfLineItem\n\t);\n\tcolumn.isPartOfLineItem = !!relatedAnnotationColumns.length;\n\tif (\n\t\trelatedAnnotationColumns.length &&\n\t\t!relatedAnnotationColumns?.some((annotationColumn) => annotationColumn.availability !== \"Hidden\")\n\t) {\n\t\tcolumn.sortable = false;\n\t\tcolumn.isGroupable = false;\n\t\tcolumn.filterable = false;\n\t}\n}\n\n/**\n * Gets the export settings properties of a manifest column.\n * @param exportSettings The customized/overwritten export settings of a manifest column\n * @param annotationColumns The list of columns created from LineItems\n * @param converterContext The converter context\n * @param entityType The target entity type\n * @param propertyInfos The properties linked to a complex column\n * @param columnKey The column key of the column to be overwritten\n * @returns The export settings of the column merging customized export settings with the default values detected on the annotation column\n */\nfunction getCustomExportSettings(\n\texportSettings: ColumnExportSettings | undefined,\n\tannotationColumns: AnnotationTableColumn[],\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tentityType: EntityType,\n\tpropertyInfos?: string[],\n\tcolumnKey?: string\n): ColumnExportSettings | null {\n\tlet columnFromAnnotations;\n\tif (columnKey) {\n\t\tcolumnFromAnnotations = annotationColumns.find((annotationColumn) => annotationColumn.key === columnKey);\n\t\tif (columnFromAnnotations?.exportSettings === null) {\n\t\t\treturn columnFromAnnotations?.exportSettings;\n\t\t}\n\t}\n\tconst enableWrapping =\n\t\texportSettings?.wrap ??\n\t\t(!!(exportSettings?.property && exportSettings.property?.length > 1) || !!(propertyInfos && propertyInfos.length > 1));\n\tconst customExportSettings: ColumnExportSettings = {\n\t\t...columnFromAnnotations?.exportSettings,\n\t\ttype: exportSettings?.type ?? columnFromAnnotations?.exportSettings?.type,\n\t\ttemplate:\n\t\t\texportSettings?.template ??\n\t\t\t_appendCustomTemplate(propertyInfos, exportSettings?.property) ??\n\t\t\tcolumnFromAnnotations?.exportSettings?.template,\n\t\tproperty: exportSettings?.property\n\t\t\t? _getPropertyNames(exportSettings?.property, annotationColumns, converterContext, entityType)\n\t\t\t: undefined,\n\t\twidth: exportSettings?.width,\n\t\twrap: enableWrapping\n\t};\n\treturn removeUndefinedFromExportSettings(customExportSettings);\n}\n\nexport default {\n\tgetTableActions,\n\tgetTableColumns,\n\tgetColumnsFromEntityType,\n\tupdateLinkedProperties,\n\tcreateTableVisualization,\n\tcreateDefaultTableVisualization,\n\tgetCapabilityRestriction,\n\tgetImportance,\n\tgetSelectionMode,\n\tgetRowStatusVisibility,\n\tgetP13nMode,\n\tgetStandardActionsConfiguration,\n\tgetTableAnnotationConfiguration,\n\tisFilteringCaseSensitive,\n\tsplitPath,\n\tgetSelectionVariantConfiguration,\n\tgetTableManifestConfiguration,\n\tgetTypeConfig,\n\tupdateTableVisualizationForType,\n\tcreateRequestedProperties,\n\tgetNavigationTargetPath,\n\tgetCustomFunctionInfo\n};\n"],"mappings":"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","ignoreList":[],"file":"Table-dbg.js"}