{"version":3,"names":["ButtonType","_exports","getVisibilityEnablementMenuActions","actions","menuActionNotVisible","menuActionVisiblePaths","atleastOneMenuItemsVisible","menuItemsVisiblePaths","forEach","menuAction","visible","valueOf","push","menu","length","menuItem","menuItemVisible","toString","visibleExpressions","map","menuItemVisiblePath","resolveBindingString","compileExpression","and","or","mapActionByKey","manifestActions","annotationActions","actionKey","annotationAction","find","action","key","manifestAction","resultAction","Object","keys","filter","actionAnnotation","type","ActionType","Menu","enabled","prop","propKey","canBeMenuItem","DataFieldForAction","DataFieldForIntentBasedNavigation","mapMenuDefaultAction","commandActions","defaultAction","command","mapMenuItems","mappedMenuItems","matchingAnnotationAction","menuItemKey","mappedMenuAction","transformMenuActionsAndIdentifyCommands","allActions","actionKeysToDelete","undefined","_getManifestEnabled","isAnnotationAction","converterContext","forContextMenu","arguments","result","getManifestActionBooleanPropertyWithFormatter","internalModelProperty","ifElse","requiresSelection","enableOnSelect","equal","pathInModel","greaterOrEqual","_getManifestVisible","overrideManifestConfigurationWithAnnotation","annotationPath","press","visibleForContextMenu","getActionsFromManifest","navigationSettings","considerNavigationSettings","hiddenActions","facetName","lastDotIndex","lastIndexOf","id","startsWith","getCustomActionID","Default","enabledForContextMenu","handlerModule","substring","replace","handlerMethod","text","noWrap","__noWrap","replaceSpecialChars","defaultValuesExtensionFunction","defaultValuesFunction","position","anchor","placement","Placement","After","isNavigable","isActionNavigable","enableAutoScroll","inline","propertyValue","resolvedBinding","isConstant","value","constant","methodPath","formatResult","fpmFormatter","customBooleanPropertyCheck","getDataModelObjectPath","contextLocation","targetEntityType","getEntityType","removeDuplicateActions","oMenuItemKeys","actionMenu","reduce","item","_ref","getEnabledForAnnotationAction","actionTarget","pathFromContextLocation","annotations","Core","OperationAvailable","dataModelObjectPath","isEnabledExp","getActionEnabledExpression","getConvertedTypes","getSemanticObjectMapping","mappings","mapping","LocalProperty","$PropertyPath","SemanticObjectProperty","bIsNavigationConfigured","detailOrDisplay","detail","display","route","afterExecution","navigateToInstance","dataFieldIsCopyAction","dataField","UI","IsCopyAction","$Type","getCopyAction","copyDataFields","Log","error","getAnnotationMenuActionItems","menuActionItems","getMatchingManifestAction","annotationMenuItems","matchingManifestActions","prepareMenuActions","unpreparedActions","overrideMenuActions","foundAction","menuItemIndex","overrideMenuAction","splice"],"sourceRoot":".","sources":["Action.ts"],"sourcesContent":["import type { Action } from \"@sap-ux/vocabularies-types\";\nimport type { SemanticObjectMappingType } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport type { DataFieldForActionGroupTypes, DataFieldForActionTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport type { BindingToolkitExpression, CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport {\n\tand,\n\tcompileExpression,\n\tconstant,\n\tequal,\n\tformatResult,\n\tgreaterOrEqual,\n\tifElse,\n\tisConstant,\n\tor,\n\tpathInModel,\n\tresolveBindingString\n} from \"sap/fe/base/BindingToolkit\";\nimport type {\n\tCustomDefinedTableColumnForOverride,\n\tManifestAction,\n\tNavigationSettingsConfiguration\n} from \"sap/fe/core/converters/ManifestSettings\";\nimport { ActionType } from \"sap/fe/core/converters/ManifestSettings\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport type { ConfigurableObject, CustomElement, OverrideType } from \"sap/fe/core/converters/helpers/ConfigurableObject\";\nimport { Placement } from \"sap/fe/core/converters/helpers/ConfigurableObject\";\nimport { getCustomActionID } from \"sap/fe/core/converters/helpers/ID\";\nimport fpmFormatter from \"sap/fe/core/formatters/FPMFormatter\";\nimport { replaceSpecialChars } from \"sap/fe/core/helpers/StableIdHelper\";\nimport { getActionEnabledExpression } from \"sap/fe/core/templating/UIFormatters\";\nimport type View from \"sap/ui/core/mvc/View\";\nimport type Context from \"sap/ui/model/Context\";\nimport type { MetaModelType } from \"types/metamodel_types\";\nimport type ConverterContext from \"../../ConverterContext\";\n\nexport enum ButtonType {\n\tAccept = \"Accept\",\n\tAttention = \"Attention\",\n\tBack = \"Back\",\n\tCritical = \"Critical\",\n\tDefault = \"Default\",\n\tEmphasized = \"Emphasized\",\n\tGhost = \"Ghost\",\n\tNegative = \"Negative\",\n\tNeutral = \"Neutral\",\n\tReject = \"Reject\",\n\tSuccess = \"Success\",\n\tTransparent = \"Transparent\",\n\tUnstyled = \"Unstyled\",\n\tUp = \"Up\"\n}\n\nexport type BaseAction = ConfigurableObject & {\n\tid?: string;\n\ttext?: string;\n\ttype?: ActionType;\n\tpress?: string;\n\tenabled?: CompiledBindingToolkitExpression;\n\tenabledForContextMenu?: CompiledBindingToolkitExpression;\n\tvisible?: CompiledBindingToolkitExpression;\n\tvisibleForContextMenu?: CompiledBindingToolkitExpression;\n\tenableOnSelect?: string;\n\tannotationPath?: string;\n\tdefaultValuesExtensionFunction?: string;\n\tisNavigable?: boolean;\n\tenableAutoScroll?: boolean;\n\tparentEntityDeleteEnabled?: CompiledBindingToolkitExpression;\n\tmenu?: BaseAction[];\n\tfacetName?: string;\n\tcommand?: string | undefined;\n};\n\nexport type AnnotationAction = BaseAction & {\n\ttype: ActionType.DataFieldForIntentBasedNavigation | ActionType.DataFieldForAction | ActionType.Menu | ActionType.Copy;\n\tannotationPath: string;\n\tcustomData?: string;\n\trequiresDialog?: string;\n\tbinding?: string;\n\tbuttonType?: ButtonType.Ghost | ButtonType.Transparent | string;\n};\n\nexport type AnnotationActionActionGroup = BaseAction & {\n\t// implements DataFieldForActionGroup\n\ttype: ActionType.Menu;\n\tmenu: AnnotationAction[];\n};\n\nexport type CustomAction = CustomElement<\n\tBaseAction & {\n\t\thandlerMethod?: string;\n\t\thandlerModule?: string;\n\t\tnoWrap?: boolean; // Indicates that we want to avoid the wrapping from the FPMHelper\n\t\trequiresSelection?: boolean;\n\t\tdefaultAction?: string | BaseAction | CustomAction; // Indicates whether a default action exists in this context\n\t}\n>;\n\nexport type AnnotationActionGroup = BaseAction & {\n\t// implements DataFieldForActionGroup\n\ttype: ActionType.Menu;\n\tmenu: AnnotationAction[];\n};\n\nexport type CombinedAction = {\n\tactions: BaseAction[];\n\tcommandActions: Record<string, CustomAction>;\n};\n\nexport type OverrideTypeAction = {\n\tenableAutoScroll?: OverrideType.overwrite;\n\tdefaultValuesExtensionFunction?: OverrideType.overwrite;\n\tisNavigable?: OverrideType.overwrite;\n\tenableOnSelect?: OverrideType.overwrite;\n\tmenu?: OverrideType.overwrite;\n\n\t// Can be overwritten by manifest configuration and should be aligned for all actions\n\tenabled: OverrideType.overwrite;\n\tvisible: OverrideType.overwrite;\n\tvisibleForContextMenu?: OverrideType.overwrite;\n\tcommand: OverrideType.overwrite;\n\tposition: OverrideType.overwrite;\n};\n\nexport type DataFieldForActionOrActionGroup = DataFieldForActionTypes | DataFieldForActionGroupTypes;\n\ntype MenuAction =\n\t| BaseAction\n\t| {\n\t\t\tvisible?: string[];\n\t\t\tenabled?: string[];\n\t\t\tmenu?: BaseAction[];\n\t  };\n/**\n * Method provides actions collection after calculating the visible setting for all actions of type menu depending on its visible setting and its menu items visible settings.\n * @param actions Collection of actions\n * @returns Collection of actions with visible setting set for actions of type menu\n */\nexport const getVisibilityEnablementMenuActions = (actions: CustomAction[]): CustomAction[] => {\n\tlet menuActionNotVisible: string | boolean,\n\t\tmenuActionVisiblePaths: string[],\n\t\tatleastOneMenuItemsVisible: boolean,\n\t\tmenuItemsVisiblePaths: string[];\n\tactions.forEach((menuAction: MenuAction) => {\n\t\tmenuActionNotVisible = menuAction.visible?.valueOf() === \"false\";\n\t\tatleastOneMenuItemsVisible = false;\n\t\tmenuItemsVisiblePaths = [];\n\t\tmenuActionVisiblePaths = [];\n\t\tif (menuAction.visible && !(menuAction.visible.valueOf() === \"true\" || menuAction.visible.valueOf() === \"false\")) {\n\t\t\tmenuActionVisiblePaths.push(menuAction.visible as string);\n\t\t}\n\t\tif (menuAction?.menu?.length) {\n\t\t\tmenuAction?.menu?.forEach((menuItem: BaseAction): void => {\n\t\t\t\tconst menuItemVisible = menuItem.visible;\n\t\t\t\tif (menuItemVisible && (typeof menuItemVisible === \"boolean\" || menuItemVisible.valueOf() === \"true\")) {\n\t\t\t\t\tatleastOneMenuItemsVisible = true;\n\t\t\t\t} else if (menuItemVisible && menuItemVisible.valueOf() !== \"false\") {\n\t\t\t\t\tmenuItemsVisiblePaths.push(menuItemVisible.valueOf());\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (menuActionNotVisible) {\n\t\t\t\t// if menu is statically visible false\n\t\t\t\tmenuAction.visible = false.toString();\n\t\t\t} else if (!atleastOneMenuItemsVisible && !menuItemsVisiblePaths.length) {\n\t\t\t\t// if all menu items are statically visible false\n\t\t\t\tmenuAction.visible = false.toString();\n\t\t\t} else if (atleastOneMenuItemsVisible && !menuActionVisiblePaths.length) {\n\t\t\t\t// if at least one menu item is statically visible true and no visible setting for menu\n\t\t\t\tmenuAction.visible = true.toString();\n\t\t\t} else if (menuActionVisiblePaths.length || menuItemsVisiblePaths.length) {\n\t\t\t\t// If the menu is set to invisible, it should be invisible, otherwise the visibility should be calculated from the items\n\t\t\t\tconst visibleExpressions: BindingToolkitExpression<boolean>[] = menuItemsVisiblePaths.map((menuItemVisiblePath) =>\n\t\t\t\t\tresolveBindingString(menuItemVisiblePath, \"boolean\")\n\t\t\t\t);\n\t\t\t\tmenuAction.visible = compileExpression(\n\t\t\t\t\tand(resolveBindingString((menuAction.visible as string) || true, \"boolean\"), or(...visibleExpressions))\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tmenuAction.visible = (!menuActionNotVisible).toString();\n\t\t\t}\n\t\t}\n\t});\n\treturn actions;\n};\n\n/**\n * Maps an action by its key, based on the given annotation actions and manifest configuration. The result already represents the\n * merged action from both configuration sources.\n *\n * This function also returns an indication whether the action can be a menu item, saying whether it is visible or of a specific type\n * that allows this.\n * @param manifestActions Actions defined in the manifest\n * @param annotationActions Actions defined through annotations\n * @param actionKey Action Key to look up\n * @returns Merged action and indicator whether it can be a menu item\n */\nfunction mapActionByKey(\n\tmanifestActions: Record<string, PartiallyConvertedCustomAction>,\n\tannotationActions: BaseAction[],\n\tactionKey: string\n): { action: BaseAction | CustomAction; canBeMenuItem: boolean | CompiledBindingToolkitExpression } {\n\tconst annotationAction = annotationActions.find((action) => action.key === actionKey);\n\tconst manifestAction = manifestActions[actionKey];\n\tlet resultAction: PartiallyConvertedCustomAction | BaseAction = { ...(annotationAction ?? manifestAction) };\n\n\t// actions inside menus can't be found on top level, so assign actions from menu to it\n\tif (Object.keys(resultAction).length === 0) {\n\t\tannotationActions\n\t\t\t.filter((actionAnnotation: BaseAction) => {\n\t\t\t\treturn actionAnnotation.type === ActionType.Menu;\n\t\t\t})\n\t\t\t.forEach((menuAction: BaseAction) => {\n\t\t\t\tmenuAction.menu?.forEach((menuItem: BaseAction) => {\n\t\t\t\t\tif (menuItem.key === actionKey) {\n\t\t\t\t\t\tresultAction = menuItem;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\t// Annotation action and manifest configuration already has to be merged here as insertCustomElements only considers top-level actions\n\tif (annotationAction) {\n\t\t// If enabled or visible is not set in the manifest, use the annotation value and hence do not overwrite\n\t\tresultAction.enabled = manifestAction?.enabled ?? annotationAction.enabled;\n\t\tresultAction.visible = manifestAction?.visible ?? annotationAction.visible;\n\n\t\tfor (const prop in manifestAction || {}) {\n\t\t\tconst propKey = prop as keyof BaseAction;\n\t\t\tif (!annotationAction[propKey] && propKey !== \"menu\") {\n\t\t\t\tresultAction[propKey] = manifestAction[propKey] as never;\n\t\t\t}\n\t\t}\n\t}\n\n\tconst canBeMenuItem =\n\t\tresultAction?.visible ||\n\t\tresultAction?.type === ActionType.DataFieldForAction ||\n\t\tresultAction?.type === ActionType.DataFieldForIntentBasedNavigation;\n\n\treturn {\n\t\taction: resultAction as BaseAction | CustomAction,\n\t\tcanBeMenuItem\n\t};\n}\n\n/**\n * Map the default action key of a menu to its actual action configuration and identify whether this default action is a command.\n * @param menuAction Menu action to map the default action for\n * @param manifestActions Actions defined in the manifest\n * @param annotationActions Actions defined through annotations\n * @param commandActions Array of command actions to push the default action to if applicable\n */\nfunction mapMenuDefaultAction(\n\tmenuAction: PartiallyConvertedCustomAction,\n\tmanifestActions: Record<string, PartiallyConvertedCustomAction>,\n\tannotationActions: BaseAction[],\n\tcommandActions: Record<string, CustomAction | BaseAction>\n): void {\n\tconst { action, canBeMenuItem } = mapActionByKey(manifestActions, annotationActions, menuAction.defaultAction as string);\n\n\tif (canBeMenuItem) {\n\t\tmenuAction.defaultAction = action;\n\t}\n\n\tif (action.command) {\n\t\tcommandActions[action.key] = action;\n\t}\n}\n\n/**\n * Map the menu item keys of a menu to their actual action configurations and identify whether they are commands.\n * @param menuAction Menu action to map the menu items for\n * @param manifestActions Actions defined in the manifest\n * @param annotationActions Actions defined through annotations\n * @param commandActions Array of command actions to push the menu item actions to if applicable\n */\nfunction mapMenuItems(\n\tmenuAction: PartiallyConvertedCustomAction,\n\tmanifestActions: Record<string, PartiallyConvertedCustomAction>,\n\tannotationActions: BaseAction[],\n\tcommandActions: Record<string, BaseAction | CustomAction>\n): void {\n\tconst mappedMenuItems: (CustomAction | BaseAction)[] = [];\n\tconst matchingAnnotationAction = annotationActions.find((annotationAction) => annotationAction.key === menuAction.key);\n\n\tif (menuAction.menu?.length !== 0) {\n\t\tfor (const menuItemKey of menuAction.menu ?? []) {\n\t\t\tconst { action, canBeMenuItem } = mapActionByKey(manifestActions, annotationActions, menuItemKey);\n\n\t\t\tif (canBeMenuItem) {\n\t\t\t\tmappedMenuItems.push(action);\n\t\t\t}\n\n\t\t\tif (action.command) {\n\t\t\t\tcommandActions[menuItemKey] = action;\n\t\t\t}\n\t\t}\n\t}\n\n\t// If no menu items are assigned to the manifest-override-menu, it inherits the items from the previous menu\n\telse if (matchingAnnotationAction) {\n\t\tmatchingAnnotationAction.menu?.forEach((menuItem) => mappedMenuItems.push(menuItem));\n\t}\n\n\tconst mappedMenuAction = menuAction as CustomAction;\n\tmappedMenuAction.menu = mappedMenuItems;\n\n\t// If the menu is set to invisible, it should be invisible, otherwise the visibility should be calculated from the items\n\tconst visibleExpressions: BindingToolkitExpression<boolean>[] = mappedMenuItems.map((menuItem) =>\n\t\tresolveBindingString(menuItem.visible as string, \"boolean\")\n\t);\n\tmappedMenuAction.visible = compileExpression(\n\t\tand(resolveBindingString(menuAction.visible as string, \"boolean\"), or(...visibleExpressions))\n\t);\n}\n\n/**\n * Transforms the flat collection of actions into a nested structures of menus. The result is a record of actions that are either menus or\n * ones that do not appear in menus as menu items. It also returns a list of actions that have an assigned command.\n *\n * Note that menu items are already the merged result of annotation actions and their manifest configuration, as {@link insertCustomElements}\n * only considers root-level actions.\n * @param manifestActions Actions defined in the manifest\n * @param annotationActions Actions defined through annotations\n * @returns The transformed actions from the manifest and a list of command actions\n */\nfunction transformMenuActionsAndIdentifyCommands(\n\tmanifestActions: Record<string, PartiallyConvertedCustomAction>,\n\tannotationActions: BaseAction[]\n): Record<string, Record<string, CustomAction>> {\n\tconst allActions: Record<string, CustomAction> = {};\n\tconst actionKeysToDelete: string[] = [];\n\tconst commandActions: Record<string, CustomAction> = {};\n\n\tfor (const actionKey in manifestActions) {\n\t\tconst manifestAction: PartiallyConvertedCustomAction = manifestActions[actionKey];\n\n\t\tif (manifestAction.defaultAction !== undefined) {\n\t\t\tmapMenuDefaultAction(manifestAction, manifestActions, annotationActions, commandActions);\n\t\t}\n\n\t\tif (manifestAction.type === ActionType.Menu) {\n\t\t\tmapMenuItems(manifestAction, manifestActions, annotationActions, commandActions);\n\n\t\t\t// Menu has no visible items, so remove it\n\t\t\tif (!manifestAction.menu?.length) {\n\t\t\t\tactionKeysToDelete.push(manifestAction.key);\n\t\t\t}\n\t\t}\n\n\t\tif (manifestAction.command) {\n\t\t\tcommandActions[actionKey] = manifestAction as CustomAction;\n\t\t}\n\n\t\tallActions[actionKey] = manifestAction as CustomAction;\n\t}\n\n\tactionKeysToDelete.forEach((actionKey: string) => delete allActions[actionKey]);\n\n\treturn {\n\t\tactions: allActions,\n\t\tcommandActions: commandActions\n\t};\n}\n\n/**\n * Gets the binding expression for the enablement of a manifest action.\n * @param manifestAction The action configured in the manifest\n * @param isAnnotationAction Whether the action, defined in manifest, corresponds to an existing annotation action.\n * @param converterContext\n * @param forContextMenu\n * @returns Determined property value for the enablement\n */\nconst _getManifestEnabled = function (\n\tmanifestAction: ManifestAction,\n\tisAnnotationAction: boolean,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tforContextMenu = false\n): CompiledBindingToolkitExpression | undefined {\n\tif (isAnnotationAction && manifestAction.enabled === undefined) {\n\t\t// If annotation action has no property defined in manifest,\n\t\t// do not overwrite it with manifest action's default value.\n\t\treturn undefined;\n\t}\n\n\tconst result = getManifestActionBooleanPropertyWithFormatter(manifestAction.enabled, converterContext);\n\n\t// Consider requiresSelection property to include selectedContexts in the binding expression\n\tconst internalModelProperty = !forContextMenu ? \"numberOfSelectedContexts\" : \"contextmenu/numberOfSelectedContexts\";\n\treturn compileExpression(\n\t\tifElse(\n\t\t\tmanifestAction.requiresSelection === true,\n\t\t\tifElse(\n\t\t\t\tmanifestAction.enableOnSelect === \"single\",\n\t\t\t\tand(equal(pathInModel(internalModelProperty, \"internal\"), 1), result),\n\t\t\t\tand(greaterOrEqual(pathInModel(internalModelProperty, \"internal\"), 1), result)\n\t\t\t),\n\t\t\tresult\n\t\t)\n\t);\n};\n\n/**\n * Gets the binding expression for the visibility of a manifest action.\n * @param manifestAction The action configured in the manifest\n * @param isAnnotationAction Whether the action, defined in the manifest, corresponds to an existing annotation action.\n * @param converterContext\n * @param forContextMenu\n * @returns Determined property value for the visibility\n */\nconst _getManifestVisible = function (\n\tmanifestAction: ManifestAction,\n\tisAnnotationAction: boolean,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tforContextMenu = false\n): CompiledBindingToolkitExpression | undefined {\n\tif (isAnnotationAction && manifestAction.visible === undefined) {\n\t\t// If annotation action has no property defined in manifest,\n\t\t// do not overwrite it with manifest action's default value.\n\t\treturn undefined;\n\t}\n\n\tlet result = getManifestActionBooleanPropertyWithFormatter(manifestAction.visible, converterContext);\n\t// For the context menu, the visibility should also consider the 'inactiveContext' property:\n\t// only when at least one selected context is active (i.e. \"contextmenu/inactiveContext\" is false), the action should be visible in the context menu\n\t// This is only relevant when the table manifest setting \"creationMode\" is \"InlineCreationRows\"\n\tresult = forContextMenu ? and(result, equal(pathInModel(\"contextmenu/inactiveContext\", \"internal\"), false)) : result;\n\treturn compileExpression(result);\n};\n\ntype PartiallyConvertedCustomAction = Omit<CustomAction, \"menu\"> & { menu: string[] | undefined };\n\n/**\n * As some properties should not be overridable by the manifest, make sure that the manifest configuration gets the annotation values for these.\n * @param manifestAction Action defined in the manifest\n * @param annotationAction Action defined through annotations\n */\nfunction overrideManifestConfigurationWithAnnotation(manifestAction: PartiallyConvertedCustomAction, annotationAction?: BaseAction): void {\n\tif (!annotationAction) {\n\t\treturn;\n\t}\n\n\t// Do not override the 'type' given in an annotation action\n\tmanifestAction.type = annotationAction.type;\n\tmanifestAction.annotationPath = annotationAction.annotationPath;\n\tmanifestAction.press = annotationAction.press;\n\n\t// Only use the annotation values for enablement and visibility if not set in the manifest\n\tmanifestAction.enabled = manifestAction.enabled ?? annotationAction.enabled;\n\tmanifestAction.visible = manifestAction.visible ?? annotationAction.visible;\n\tmanifestAction.visibleForContextMenu = manifestAction.visibleForContextMenu ?? annotationAction.visibleForContextMenu;\n}\n\n/**\n * Creates the action configuration based on the manifest settings.\n * @param manifestActions The manifest actions\n * @param converterContext The converter context\n * @param annotationActions The annotation actions definition\n * @param navigationSettings The navigation settings\n * @param considerNavigationSettings The navigation settings to be considered\n * @param hiddenActions Actions that are configured as hidden (additional to the visible property)\n * @param facetName The facet where an action is displayed if it is inline\n * @returns The actions from the manifest\n */\nexport function getActionsFromManifest(\n\tmanifestActions: Record<string, ManifestAction> | undefined,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tannotationActions?: BaseAction[],\n\tnavigationSettings?: NavigationSettingsConfiguration,\n\tconsiderNavigationSettings?: boolean,\n\thiddenActions?: BaseAction[],\n\tfacetName?: string\n): Record<string, Record<string, CustomAction>> {\n\tconst actions: Record<string, PartiallyConvertedCustomAction> = {};\n\tfor (const actionKey in manifestActions) {\n\t\tconst manifestAction: ManifestAction = manifestActions[actionKey];\n\t\tconst lastDotIndex = manifestAction.press?.lastIndexOf(\".\") || -1;\n\t\tlet annotationAction: BaseAction | undefined;\n\n\t\tif (annotationActions) {\n\t\t\tfor (const action of annotationActions) {\n\t\t\t\t// SubSection.ts#createFormActionReducer uses insertCustomElements which results in annotation actions mixing up with manifest action\n\t\t\t\t// this is why we may find an action that has a CustomAction prefix\n\t\t\t\tif (action.id?.startsWith(\"CustomAction::\")) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (action.key === actionKey) {\n\t\t\t\t\tannotationAction = action;\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (action.type === \"Menu\") {\n\t\t\t\t\t// If not found, check inside menus\n\t\t\t\t\tannotationAction = action.menu?.find((menuItem: BaseAction) => {\n\t\t\t\t\t\treturn menuItem.key === actionKey;\n\t\t\t\t\t});\n\t\t\t\t\tif (annotationAction) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// To identify the annotation action property overwrite via manifest use-case.\n\t\tconst isAnnotationAction = !!annotationAction;\n\t\tif (manifestAction.facetName) {\n\t\t\tfacetName = manifestAction.facetName;\n\t\t}\n\n\t\tactions[actionKey] = {\n\t\t\tid: annotationAction ? actionKey : getCustomActionID(actionKey),\n\t\t\ttype: manifestAction.menu ? ActionType.Menu : ActionType.Default,\n\t\t\tvisible: _getManifestVisible(manifestAction, isAnnotationAction, converterContext),\n\t\t\tvisibleForContextMenu: _getManifestVisible(manifestAction, isAnnotationAction, converterContext, true),\n\t\t\tenabled: _getManifestEnabled(manifestAction, isAnnotationAction, converterContext),\n\t\t\tenabledForContextMenu: _getManifestEnabled(manifestAction, isAnnotationAction, converterContext, true),\n\t\t\thandlerModule: manifestAction.press && manifestAction.press.substring(0, lastDotIndex).replace(/\\./gi, \"/\"),\n\t\t\thandlerMethod: manifestAction.press && manifestAction.press.substring(lastDotIndex + 1),\n\t\t\tpress: manifestAction.press,\n\t\t\ttext: manifestAction.text,\n\t\t\tnoWrap: manifestAction.__noWrap,\n\t\t\tkey: replaceSpecialChars(actionKey),\n\t\t\tenableOnSelect: manifestAction.enableOnSelect,\n\t\t\tdefaultValuesExtensionFunction: manifestAction.defaultValuesFunction,\n\t\t\tposition: {\n\t\t\t\tanchor: manifestAction.position?.anchor,\n\t\t\t\tplacement: manifestAction.position === undefined ? Placement.After : manifestAction.position.placement\n\t\t\t},\n\t\t\tisNavigable: isActionNavigable(manifestAction, navigationSettings, considerNavigationSettings),\n\t\t\tcommand: manifestAction.command,\n\t\t\trequiresSelection: manifestAction.requiresSelection === undefined ? false : manifestAction.requiresSelection,\n\t\t\tenableAutoScroll: enableAutoScroll(manifestAction),\n\t\t\tmenu: manifestAction.menu ?? (annotationAction?.type === ActionType.Menu ? [] : undefined),\n\t\t\tfacetName: manifestAction.inline ? facetName : undefined,\n\t\t\tdefaultAction: manifestAction.defaultAction\n\t\t};\n\n\t\toverrideManifestConfigurationWithAnnotation(actions[actionKey], annotationAction);\n\t}\n\n\treturn transformMenuActionsAndIdentifyCommands(actions, annotationActions ?? []);\n}\n\n/**\n * Gets a binding expression representing a Boolean manifest property that can either be represented by a static value, a binding string,\n * or a runtime formatter function.\n * @param propertyValue String representing the configured property value\n * @param converterContext\n * @returns A binding expression representing the property\n */\nfunction getManifestActionBooleanPropertyWithFormatter(\n\tpropertyValue: string | undefined | boolean,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): BindingToolkitExpression<boolean> {\n\tconst resolvedBinding = resolveBindingString<boolean | string>(propertyValue as string, \"boolean\");\n\tlet result: BindingToolkitExpression<boolean>;\n\tif (isConstant(resolvedBinding) && resolvedBinding.value === undefined) {\n\t\t// No property value configured in manifest for the custom action --> default value is true\n\t\tresult = constant(true);\n\t} else if (isConstant(resolvedBinding) && typeof resolvedBinding.value === \"string\") {\n\t\t// Then it's a module-method reference \"sap.xxx.yyy.doSomething\"\n\t\tconst methodPath = resolvedBinding.value;\n\t\t// FIXME: The custom \"isEnabled\" check does not trigger (because none of the bound values changes)\n\t\tresult = formatResult(\n\t\t\t[pathInModel<View>(\"/\", \"$view\"), methodPath, pathInModel<Context[]>(\"selectedContexts\", \"internal\")],\n\t\t\tfpmFormatter.customBooleanPropertyCheck,\n\t\t\tconverterContext.getDataModelObjectPath().contextLocation?.targetEntityType || converterContext.getEntityType()\n\t\t);\n\t} else {\n\t\t// then it's a binding\n\t\tresult = resolvedBinding as BindingToolkitExpression<boolean>;\n\t}\n\n\treturn result;\n}\n\nexport const removeDuplicateActions = (actions: CustomAction[]): CustomAction[] => {\n\tlet oMenuItemKeys: Record<string, boolean> = {};\n\tactions.forEach((action) => {\n\t\tif (action?.menu?.length) {\n\t\t\tconst actionMenu = action.menu;\n\t\t\toMenuItemKeys = actionMenu.reduce((item: Record<string, boolean>, { key }) => {\n\t\t\t\tif (key && !item[key]) {\n\t\t\t\t\titem[key] = true;\n\t\t\t\t}\n\t\t\t\treturn item;\n\t\t\t}, oMenuItemKeys);\n\t\t}\n\t});\n\treturn actions.filter((action) => !oMenuItemKeys[action.key]);\n};\n\n/**\n * Method to determine the value of the 'enabled' property of an annotation-based action.\n * @param converterContext The instance of the converter context\n * @param actionTarget The instance of the action\n * @param pathFromContextLocation Is the binding path calculated  from the converter context location\n * @returns The binding expression for the 'enabled' property of the action button.\n */\nexport function getEnabledForAnnotationAction(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tactionTarget: Action | undefined,\n\tpathFromContextLocation = false\n): CompiledBindingToolkitExpression {\n\tif (actionTarget?.annotations.Core?.OperationAvailable) {\n\t\tconst dataModelObjectPath = converterContext.getDataModelObjectPath();\n\t\tconst isEnabledExp = getActionEnabledExpression(\n\t\t\tactionTarget,\n\t\t\tconverterContext.getConvertedTypes(),\n\t\t\tdataModelObjectPath,\n\t\t\tpathFromContextLocation\n\t\t);\n\t\treturn compileExpression(isEnabledExp);\n\t}\n\treturn \"true\";\n}\n\nexport function getSemanticObjectMapping(mappings?: SemanticObjectMappingType[]): MetaModelType<SemanticObjectMappingType>[] {\n\treturn mappings\n\t\t? mappings.map((mapping) => {\n\t\t\t\treturn {\n\t\t\t\t\tLocalProperty: {\n\t\t\t\t\t\t$PropertyPath: mapping.LocalProperty.value\n\t\t\t\t\t},\n\t\t\t\t\tSemanticObjectProperty: mapping.SemanticObjectProperty.toString()\n\t\t\t\t};\n\t\t  })\n\t\t: [];\n}\n\nexport function isActionNavigable(\n\taction: ManifestAction | CustomDefinedTableColumnForOverride | undefined,\n\tnavigationSettings?: NavigationSettingsConfiguration,\n\tconsiderNavigationSettings?: boolean\n): boolean {\n\tlet bIsNavigationConfigured = true;\n\tif (considerNavigationSettings) {\n\t\tconst detailOrDisplay = navigationSettings && (navigationSettings.detail || navigationSettings.display);\n\t\tbIsNavigationConfigured = detailOrDisplay?.route ? true : false;\n\t}\n\t// when enableAutoScroll is true the navigateToInstance feature is disabled\n\tif (\n\t\t(action &&\n\t\t\taction.afterExecution &&\n\t\t\t(action.afterExecution?.navigateToInstance === false || action.afterExecution?.enableAutoScroll === true)) ||\n\t\t!bIsNavigationConfigured\n\t) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nexport function enableAutoScroll(action: ManifestAction): boolean {\n\treturn action?.afterExecution?.enableAutoScroll === true;\n}\n\nexport function dataFieldIsCopyAction(dataField: DataFieldForActionTypes): boolean {\n\treturn dataField.annotations?.UI?.IsCopyAction?.valueOf() === true && dataField.$Type === UIAnnotationTypes.DataFieldForAction;\n}\n\nexport function getCopyAction(copyDataFields: DataFieldForActionTypes[]): DataFieldForActionTypes | undefined {\n\tif (copyDataFields.length === 1) {\n\t\treturn copyDataFields[0];\n\t}\n\tif (copyDataFields.length > 1) {\n\t\tLog.error(\"Multiple actions are annotated with isCopyAction. There can be only one standard copy action.\");\n\t}\n\treturn undefined;\n}\n\n/**\n * Method to extract menu items from actions of type menus.\n * @param annotationActions Collection of annotation based actions\n * @returns Collection of actions which are menu items in one of the annotation based menus\n */\nexport function getAnnotationMenuActionItems(annotationActions: BaseAction[]): BaseAction[] {\n\tconst menuActionItems: BaseAction[] = [];\n\n\tannotationActions.forEach((action: BaseAction) => {\n\t\tif (action.type === \"Menu\" && !action.id?.startsWith(\"CustomAction::\") && action.menu) {\n\t\t\tmenuActionItems.push(...action.menu);\n\t\t}\n\t});\n\n\treturn menuActionItems;\n}\n\n/**\n * Method to find the matching manifest actions which override the annotation menu items.\n * @param annotationMenuItems Collection of annotation based menu items\n * @param manifestActions Collection of manifest based actions\n * @returns Collection of actions which are menu items in one of the annotation based menus\n */\nexport function getMatchingManifestAction(\n\tannotationMenuItems: BaseAction[],\n\tmanifestActions: Record<string, CustomAction>\n): Record<string, CustomAction> {\n\tconst matchingManifestActions: Record<string, CustomAction> = {};\n\n\tfor (const manifestAction in manifestActions) {\n\t\tif (\n\t\t\tmanifestAction.startsWith(\"DataFieldForAction::\") &&\n\t\t\tannotationMenuItems.find((menuActionItems) => {\n\t\t\t\treturn menuActionItems.key === manifestAction;\n\t\t\t})\n\t\t) {\n\t\t\tmatchingManifestActions[manifestAction] = manifestActions[manifestAction];\n\t\t}\n\t}\n\n\treturn matchingManifestActions;\n}\n\n/**\n * Method to transform the menus by replacing the menu items with their overriding actions.\n * @param unpreparedActions Collection of all actions after merging manifest and annotation actions\n * @param overrideMenuActions Collection of all overriden menu items\n */\nexport function prepareMenuActions(unpreparedActions: CustomAction[], overrideMenuActions: BaseAction[]): void {\n\tlet foundAction;\n\n\tunpreparedActions.forEach((action: CustomAction) => {\n\t\tif (action.type === ActionType.Menu) {\n\t\t\taction.menu?.forEach((menuItem: BaseAction, menuItemIndex: number) => {\n\t\t\t\tfoundAction = overrideMenuActions.find((overrideMenuAction: BaseAction) => {\n\t\t\t\t\treturn overrideMenuAction.key === menuItem.key;\n\t\t\t\t});\n\n\t\t\t\tif (foundAction) {\n\t\t\t\t\taction.menu?.splice(menuItemIndex, 1, foundAction);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}\n"],"mappings":"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","ignoreList":[],"file":"Action-dbg.js"}