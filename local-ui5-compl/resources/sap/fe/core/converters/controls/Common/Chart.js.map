{"version":3,"file":"Chart.js","names":["getChartActionsFromAnnotations","chartAnnotation","visualizationPath","converterContext","chartActions","Actions","forEach","dataField","key","KeyHelper","generateKeyFromDataField","isDataFieldForActionAbstract","Inline","Determining","$Type","ActionTarget","isBound","push","type","ActionType","DataFieldForAction","annotationPath","getEntitySetBasedAnnotationPath","fullyQualifiedName","visible","getCompileExpressionForAction","DataFieldForIntentBasedNavigation","isNavigable","isAnnotationActionGroup","Menu","text","Label","toString","menu","map","action","getDataFieldAnnotationAction","getChartActions","aAnnotationActions","manifestActions","getActionsFromManifest","getManifestControlConfiguration","actions","actionOverwriteConfig","enabled","OverrideType","overwrite","enableOnSelect","command","position","insertCustomElements","commandActions","_exports","getP13nMode","manifestWrapper","getManifestWrapper","chartManifestSettings","variantManagement","getVariantManagement","aPersonalization","personalization","chartSettings","isControlVariant","VariantManagementType","Control","undefined","item","sort","filter","join","getAggregatablePropertiesObject","aggProp","obj","Property","$PropertyPath","value","name","createChartVisualization","doNotCheckApplySupported","selectionPresentationVariantPath","aggregationHelper","AggregationHelper","getEntityType","isAnalyticsSupported","Error","aTransAggregations","getTransAggregations","aCustomAggregates","getCustomAggregateDefinitions","pageManifestSettings","p13nMode","Log","warning","mCustomAggregates","entityType","customAggregate","aContextDefiningProperties","annotations","Aggregation","ContextDefiningProperties","qualifier","relatedCustomAggregateProperty","entityProperties","find","property","label","Common","sortable","sortOrder","contextDefiningProperty","oCtxDefProperty","mTransAggregations","oResourceBundleCore","Library","getResourceBundleFor","element","Name","propertyPath","AggregatableProperty","aggregationMethod","AggregationMethod","getText","custom","aAggProps","getAggregatableProperties","aGrpProps","getGroupableProperties","mApplySupported","AggregatableProperties","GroupableProperties","prop","navigationPropertyPath","split","lastIndexOf","length","substring","title","Title","dataModelPath","getDataModelObjectPath","isEntitySet","entityName","targetEntitySet","startingEntitySet","sFilterbarId","getFilterBarID","getContextPath","oVizProperties","plotArea","window","start","end","legendGroup","layout","autoBindOnInit","getTemplateType","TemplateType","ObjectPage","ListReport","AnalyticalListPage","hasMultipleVisualizations","onSegmentedButtonPressed","allowedTransformations","getAllowedTransformations","enableSearch","includes","isInsightsVisible","getInsightsVisibility","isParameterizedEntitySet","getParameterEntityType","isInsightsEnabled","and","getInsightsEnablement","VisualizationType","Chart","id","getChartID","collection","getTargetObjectPath","apiId","generate","navigationPath","getAbsoluteAnnotationPath","filterId","vizProperties","JSON","stringify","customAgg","transAgg","applySupported","findVariantManagement","None","createChartVisualizationForTemplating","visualization","compileExpression","not","equal","getExpressionFromAnnotation","UI","Hidden","getRelativeModelPathFunction","createBlankChartVisualization","multiViews"],"sources":["./Chart.ts"],"sourcesContent":["import type { Property, PropertyPath } from \"@sap-ux/vocabularies-types\";\nimport type { AggregatablePropertyType, AggregationMethod } from \"@sap-ux/vocabularies-types/vocabularies/Aggregation\";\nimport { AggregationAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/Aggregation\";\nimport type {\n\tChart,\n\tDataFieldAbstractTypes,\n\tDataFieldForActionGroup,\n\tDataFieldForActionGroupTypes,\n\tDataFieldForActionTypes\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport type { CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { and, compileExpression, equal, getExpressionFromAnnotation, not, type BindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport { isDataFieldForActionAbstract } from \"sap/fe/core/converters/annotations/DataField\";\nimport type {\n\tAnnotationAction,\n\tAnnotationActionActionGroup,\n\tBaseAction,\n\tCombinedAction,\n\tCustomAction,\n\tOverrideTypeAction\n} from \"sap/fe/core/converters/controls/Common/Action\";\nimport { getActionsFromManifest } from \"sap/fe/core/converters/controls/Common/Action\";\nimport { OverrideType, insertCustomElements } from \"sap/fe/core/converters/helpers/ConfigurableObject\";\nimport { KeyHelper } from \"sap/fe/core/converters/helpers/Key\";\nimport { generate } from \"sap/fe/core/helpers/StableIdHelper\";\nimport { getTargetObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport Library from \"sap/ui/core/Lib\";\nimport type { ExpandPathType } from \"../../../../../../../../../types/metamodel_types\";\nimport type ConverterContext from \"../../ConverterContext\";\nimport type { ChartManifestConfiguration, ManifestAction } from \"../../ManifestSettings\";\nimport { ActionType, TemplateType, VariantManagementType, VisualizationType } from \"../../ManifestSettings\";\nimport type ManifestWrapper from \"../../ManifestWrapper\";\nimport { AggregationHelper } from \"../../helpers/Aggregation\";\nimport { getChartID, getFilterBarID } from \"../../helpers/ID\";\nimport { getInsightsEnablement, getInsightsVisibility } from \"../../helpers/InsightsHelpers\";\nimport type { ActualVisualizationAnnotations } from \"./DataVisualization\";\n\nexport type ChartApplySupported = {\n\t$Type: string;\n\tenableSearch?: boolean;\n\tAggregatableProperties?: (ExpandPathType<PropertyPath> & { Property: ExpandPathType<PropertyPath> })[];\n\tGroupableProperties?: (ExpandPathType<PropertyPath> & { Property: ExpandPathType<PropertyPath> })[];\n};\nexport type ChartTemplateVisualization = {\n\ttype: VisualizationType.Chart;\n\tid: string;\n\tapiId: string;\n\tentityName: string;\n\tcollection: string;\n\tannotationPath: string;\n\tapplySupported: ChartApplySupported;\n\tisParameterizedEntitySet?: boolean;\n};\n\n/**\n * @typedef ChartVisualization\n */\nexport type ChartVisualization = ChartTemplateVisualization & {\n\tentityName: string;\n\tpersonalization?: string;\n\tnavigationPath: string;\n\tfilterId?: string;\n\tvizProperties: string;\n\tactions: BaseAction[];\n\tcommandActions: Record<string, CustomAction>;\n\ttitle: string | undefined;\n\tautoBindOnInit: boolean | undefined;\n\tonSegmentedButtonPressed: string;\n\tvisible: string;\n\tcustomAgg: object;\n\ttransAgg: object;\n\tmultiViews?: boolean;\n\tvariantManagement: VariantManagementType;\n\tselectionPresentationVariantPath?: string;\n\tisInsightsEnabled?: BindingToolkitExpression<boolean>;\n\tisInsightsVisible?: BindingToolkitExpression<boolean>;\n};\n\n/**\n * Method to retrieve all chart actions from annotations.\n * @param chartAnnotation\n * @param visualizationPath\n * @param converterContext\n * @returns The chart actions from the annotation\n */\nfunction getChartActionsFromAnnotations(\n\tchartAnnotation: Chart,\n\tvisualizationPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): Array<AnnotationAction | AnnotationActionActionGroup> {\n\tconst chartActions: Array<AnnotationAction | AnnotationActionActionGroup> = [];\n\tif (chartAnnotation?.Actions) {\n\t\tchartAnnotation.Actions.forEach((dataField: DataFieldAbstractTypes | DataFieldForActionGroupTypes) => {\n\t\t\tconst key = KeyHelper.generateKeyFromDataField(dataField);\n\t\t\tif (isDataFieldForActionAbstract(dataField) && !dataField.Inline && !dataField.Determining) {\n\t\t\t\tswitch (dataField.$Type) {\n\t\t\t\t\tcase UIAnnotationTypes.DataFieldForAction:\n\t\t\t\t\t\tif (dataField.ActionTarget && !dataField.ActionTarget.isBound) {\n\t\t\t\t\t\t\tchartActions.push({\n\t\t\t\t\t\t\t\ttype: ActionType.DataFieldForAction,\n\t\t\t\t\t\t\t\tannotationPath: converterContext.getEntitySetBasedAnnotationPath(dataField.fullyQualifiedName),\n\t\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\t\tvisible: getCompileExpressionForAction(dataField, converterContext)\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UIAnnotationTypes.DataFieldForIntentBasedNavigation:\n\t\t\t\t\t\tchartActions.push({\n\t\t\t\t\t\t\ttype: ActionType.DataFieldForIntentBasedNavigation,\n\t\t\t\t\t\t\tannotationPath: converterContext.getEntitySetBasedAnnotationPath(dataField.fullyQualifiedName),\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tvisible: getCompileExpressionForAction(dataField, converterContext),\n\t\t\t\t\t\t\tisNavigable: true\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isAnnotationActionGroup(dataField)) {\n\t\t\t\tchartActions.push({\n\t\t\t\t\ttype: ActionType.Menu,\n\t\t\t\t\ttext: dataField.Label?.toString(),\n\t\t\t\t\tvisible: getCompileExpressionForAction(dataField, converterContext),\n\t\t\t\t\tmenu: dataField.Actions.map((action) =>\n\t\t\t\t\t\tgetDataFieldAnnotationAction(action as DataFieldForActionTypes, converterContext)\n\t\t\t\t\t),\n\t\t\t\t\tkey: KeyHelper.generateKeyFromDataField(dataField)\n\t\t\t\t} as AnnotationActionActionGroup);\n\t\t\t}\n\t\t});\n\t}\n\treturn chartActions;\n}\n/**\n * Checks if the dataField is a DataFieldForActionGroup.\n * @param dataField The dataField to check.\n * @returns The dataField if it matches DataFieldForActionGroup.\n */\nfunction isAnnotationActionGroup(dataField: DataFieldAbstractTypes): dataField is DataFieldForActionGroup {\n\treturn dataField.$Type === UIAnnotationTypes.DataFieldForActionGroup;\n}\n\n/**\n * Creates and returns DataFieldForAction for menu of DataFieldForActionGroup.\n * @param dataField The datafield to get the annotation action from.\n * @param converterContext The converter context.\n * @returns An annotation action.\n */\nfunction getDataFieldAnnotationAction(\n\tdataField: DataFieldForActionTypes,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): AnnotationAction {\n\treturn {\n\t\ttype: ActionType.DataFieldForAction,\n\t\tannotationPath: converterContext.getEntitySetBasedAnnotationPath(dataField.fullyQualifiedName),\n\t\tkey: KeyHelper.generateKeyFromDataField(dataField),\n\t\tvisible: getCompileExpressionForAction(dataField, converterContext)\n\t};\n}\n\nexport function getChartActions(\n\tchartAnnotation: Chart,\n\tvisualizationPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): CombinedAction {\n\tconst aAnnotationActions = getChartActionsFromAnnotations(chartAnnotation, visualizationPath, converterContext);\n\tconst manifestActions = getActionsFromManifest(\n\t\tconverterContext.getManifestControlConfiguration<ChartManifestConfiguration>(visualizationPath).actions as Record<\n\t\t\tstring,\n\t\t\tManifestAction\n\t\t>,\n\t\tconverterContext,\n\t\taAnnotationActions\n\t);\n\tconst actionOverwriteConfig: OverrideTypeAction = {\n\t\tenabled: OverrideType.overwrite,\n\t\tenableOnSelect: OverrideType.overwrite,\n\t\tvisible: OverrideType.overwrite,\n\t\tcommand: OverrideType.overwrite,\n\t\tposition: OverrideType.overwrite\n\t};\n\tconst chartActions = insertCustomElements<BaseAction>(aAnnotationActions, manifestActions.actions, actionOverwriteConfig);\n\treturn {\n\t\tactions: chartActions,\n\t\tcommandActions: manifestActions.commandActions\n\t};\n}\n\nexport function getP13nMode(visualizationPath: string, converterContext: ConverterContext<PageContextPathTarget>): string | undefined {\n\tconst manifestWrapper: ManifestWrapper = converterContext.getManifestWrapper();\n\tconst chartManifestSettings: ChartManifestConfiguration = converterContext.getManifestControlConfiguration(visualizationPath);\n\tconst variantManagement: VariantManagementType = manifestWrapper.getVariantManagement();\n\tconst aPersonalization: string[] = [];\n\t// Personalization configured in manifest.\n\tconst personalization = chartManifestSettings?.chartSettings?.personalization;\n\tconst isControlVariant = variantManagement === VariantManagementType.Control ? true : false;\n\t// if personalization is set to false do not show any option\n\tif ((personalization !== undefined && !personalization) || personalization == \"false\") {\n\t\treturn undefined;\n\t}\n\tif (typeof personalization === \"object\") {\n\t\t// Specific personalization options enabled in manifest. Use them as is.\n\t\tif (personalization.type) {\n\t\t\taPersonalization.push(\"Type\");\n\t\t}\n\t\tif (personalization.item) {\n\t\t\taPersonalization.push(\"Item\");\n\t\t}\n\t\tif (personalization.sort) {\n\t\t\taPersonalization.push(\"Sort\");\n\t\t}\n\t\tif (personalization.filter) {\n\t\t\taPersonalization.push(\"Filter\");\n\t\t}\n\t\treturn aPersonalization.join(\",\");\n\t} else if (isControlVariant || !!personalization) {\n\t\t// manifest has personalization configured, check if it's true\n\t\t// if manifest doesn't have personalization, check for variant management is set to control\n\t\treturn \"Sort,Type,Item,Filter\";\n\t} else {\n\t\t// if manifest doesn't have personalization, show default options without filter\n\t\treturn \"Sort,Type,Item\";\n\t}\n}\nexport type ChartCustomAggregate = {\n\tname: string;\n\tlabel: string;\n\tsortable: boolean;\n\tsortOrder: \"both\";\n\tcontextDefiningProperty: string[];\n};\n\nexport type TransAgg = {\n\tname: string;\n\tpropertyPath: string;\n\taggregationMethod: AggregationMethod;\n\tlabel: string;\n\tsortable: boolean;\n\tsortOrder: \"both\";\n\tcustom: boolean;\n};\nfunction getAggregatablePropertiesObject(aggProp: AggregatablePropertyType | Property): { Property: { $PropertyPath: string } } {\n\tlet obj;\n\tif ((aggProp as AggregatablePropertyType)?.Property) {\n\t\tobj = {\n\t\t\tProperty: {\n\t\t\t\t$PropertyPath: (aggProp as AggregatablePropertyType)?.Property?.value\n\t\t\t}\n\t\t};\n\t} else {\n\t\tobj = {\n\t\t\tProperty: {\n\t\t\t\t$PropertyPath: (aggProp as Property)?.name\n\t\t\t}\n\t\t};\n\t}\n\treturn obj;\n}\n/**\n * Create the ChartVisualization configuration that will be used to display a chart using the Chart building block.\n * @param chartAnnotation The targeted chart annotation\n * @param visualizationPath The path of the visualization annotation\n * @param converterContext The converter context\n * @param doNotCheckApplySupported Flag that indicates whether ApplySupported needs to be checked or not\n * @param selectionPresentationVariantPath\n * @returns The chart visualization based on the annotation\n */\nexport function createChartVisualization(\n\tchartAnnotation: Chart,\n\tvisualizationPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tdoNotCheckApplySupported?: boolean,\n\tselectionPresentationVariantPath?: string\n): ChartVisualization {\n\tconst aggregationHelper = new AggregationHelper(converterContext.getEntityType(), converterContext, true); // passing the last parameter as true to consider the old annotations i.e. Aggregation.Aggregatable for backward compatibility in case of chart\n\tif (!doNotCheckApplySupported && !aggregationHelper.isAnalyticsSupported()) {\n\t\tthrow new Error(\"ApplySupported is not added to the annotations\");\n\t}\n\tconst aTransAggregations = aggregationHelper.getTransAggregations();\n\tconst aCustomAggregates = aggregationHelper.getCustomAggregateDefinitions();\n\tconst pageManifestSettings: ManifestWrapper = converterContext.getManifestWrapper();\n\tconst variantManagement: VariantManagementType = pageManifestSettings.getVariantManagement();\n\tconst p13nMode: string | undefined = getP13nMode(visualizationPath, converterContext);\n\tif (p13nMode === undefined && variantManagement === \"Control\") {\n\t\tLog.warning(\"Variant Management cannot be enabled when personalization is disabled\");\n\t}\n\tconst mCustomAggregates: Record<string, object> = {};\n\tif (aCustomAggregates) {\n\t\tconst entityType = aggregationHelper.getEntityType();\n\t\tfor (const customAggregate of aCustomAggregates) {\n\t\t\tconst aContextDefiningProperties = customAggregate?.annotations?.Aggregation?.ContextDefiningProperties;\n\t\t\tconst qualifier = customAggregate?.qualifier;\n\t\t\tconst relatedCustomAggregateProperty = qualifier && entityType.entityProperties.find((property) => property.name === qualifier);\n\t\t\tconst label = relatedCustomAggregateProperty && relatedCustomAggregateProperty?.annotations?.Common?.Label?.toString();\n\t\t\tmCustomAggregates[qualifier] = {\n\t\t\t\tname: qualifier,\n\t\t\t\tlabel: label || `Custom Aggregate (${qualifier})`,\n\t\t\t\tsortable: true,\n\t\t\t\tsortOrder: \"both\",\n\t\t\t\tcontextDefiningProperty: aContextDefiningProperties\n\t\t\t\t\t? aContextDefiningProperties.map((oCtxDefProperty) => {\n\t\t\t\t\t\t\treturn oCtxDefProperty.value;\n\t\t\t\t\t  })\n\t\t\t\t\t: []\n\t\t\t};\n\t\t}\n\t}\n\n\tconst mTransAggregations: Record<string, TransAgg> = {};\n\tconst oResourceBundleCore = Library.getResourceBundleFor(\"sap.fe.core\")!;\n\tif (aTransAggregations) {\n\t\tfor (const element of aTransAggregations) {\n\t\t\tmTransAggregations[element.Name as string] = {\n\t\t\t\tname: element.Name as string,\n\t\t\t\tpropertyPath: element.AggregatableProperty.value,\n\t\t\t\taggregationMethod: element.AggregationMethod,\n\t\t\t\tlabel: element?.annotations?.Common?.Label\n\t\t\t\t\t? element?.annotations?.Common?.Label?.toString()\n\t\t\t\t\t: `${oResourceBundleCore.getText(\"AGGREGATABLE_PROPERTY\")} (${element.Name})`,\n\t\t\t\tsortable: true,\n\t\t\t\tsortOrder: \"both\",\n\t\t\t\tcustom: false\n\t\t\t};\n\t\t}\n\t}\n\n\tconst aAggProps = aggregationHelper.getAggregatableProperties();\n\tconst aGrpProps = aggregationHelper.getGroupableProperties();\n\tconst mApplySupported = {} as ChartApplySupported;\n\tmApplySupported.$Type = AggregationAnnotationTypes.ApplySupportedType;\n\tmApplySupported.AggregatableProperties = [];\n\tmApplySupported.GroupableProperties = [];\n\n\tif (aAggProps) {\n\t\tmApplySupported.AggregatableProperties = aAggProps.map((prop) =>\n\t\t\tgetAggregatablePropertiesObject(prop)\n\t\t) as (ExpandPathType<PropertyPath> & { Property: ExpandPathType<PropertyPath> })[];\n\t}\n\n\tif (aGrpProps) {\n\t\tmApplySupported.GroupableProperties = aGrpProps.map((prop) => ({\n\t\t\t[\"$PropertyPath\"]: prop.value\n\t\t})) as (ExpandPathType<PropertyPath> & { Property: ExpandPathType<PropertyPath> })[];\n\t}\n\n\tconst chartActions = getChartActions(chartAnnotation, visualizationPath, converterContext);\n\tlet [navigationPropertyPath /*, annotationPath*/] = visualizationPath.split(\"@\");\n\tif (navigationPropertyPath.lastIndexOf(\"/\") === navigationPropertyPath.length - 1) {\n\t\t// Drop trailing slash\n\t\tnavigationPropertyPath = navigationPropertyPath.substring(0, navigationPropertyPath.length - 1);\n\t}\n\tconst title = chartAnnotation.Title?.toString() || \"\"; // read title from chart annotation\n\tconst dataModelPath = converterContext.getDataModelObjectPath();\n\tconst isEntitySet: boolean = navigationPropertyPath.length === 0;\n\tconst entityName: string = dataModelPath.targetEntitySet ? dataModelPath.targetEntitySet.name : dataModelPath.startingEntitySet.name;\n\tconst sFilterbarId = isEntitySet ? getFilterBarID(converterContext.getContextPath()) : undefined;\n\tconst oVizProperties = {\n\t\tplotArea: {\n\t\t\twindow: {\n\t\t\t\tstart: \"firstDataPoint\",\n\t\t\t\tend: \"lastDataPoint\"\n\t\t\t}\n\t\t},\n\t\tlegendGroup: {\n\t\t\tlayout: {\n\t\t\t\tposition: \"bottom\"\n\t\t\t}\n\t\t}\n\t};\n\tlet autoBindOnInit: boolean | undefined;\n\tif (converterContext.getTemplateType() === TemplateType.ObjectPage) {\n\t\tautoBindOnInit = true;\n\t} else if (\n\t\tconverterContext.getTemplateType() === TemplateType.ListReport ||\n\t\tconverterContext.getTemplateType() === TemplateType.AnalyticalListPage\n\t) {\n\t\tautoBindOnInit = false;\n\t}\n\tconst hasMultipleVisualizations =\n\t\tconverterContext.getManifestWrapper().hasMultipleVisualizations() ||\n\t\tconverterContext.getTemplateType() === TemplateType.AnalyticalListPage;\n\tconst onSegmentedButtonPressed = hasMultipleVisualizations ? \".handlers.onSegmentedButtonPressed\" : \"\";\n\tconst visible = hasMultipleVisualizations ? \"{= ${pageInternal>alpContentView} !== 'Table'}\" : \"true\";\n\tconst allowedTransformations = aggregationHelper.getAllowedTransformations();\n\tmApplySupported.enableSearch = allowedTransformations ? allowedTransformations.includes(\"search\") : true;\n\tlet qualifier = \"\";\n\tif (chartAnnotation.fullyQualifiedName.split(\"#\").length > 1) {\n\t\tqualifier = chartAnnotation.fullyQualifiedName.split(\"#\")[1];\n\t}\n\tconst isInsightsVisible = getInsightsVisibility(\"Analytical\", converterContext, visualizationPath);\n\tconst isParameterizedEntitySet = converterContext.getParameterEntityType() ? true : false;\n\tconst isInsightsEnabled = and(getInsightsEnablement(), isInsightsVisible);\n\treturn {\n\t\ttype: VisualizationType.Chart,\n\t\tid: qualifier\n\t\t\t? getChartID(isEntitySet ? entityName : navigationPropertyPath, qualifier, VisualizationType.Chart)\n\t\t\t: getChartID(isEntitySet ? entityName : navigationPropertyPath, VisualizationType.Chart),\n\t\tcollection: getTargetObjectPath(converterContext.getDataModelObjectPath()),\n\t\tapiId: generate([\n\t\t\tqualifier\n\t\t\t\t? getChartID(isEntitySet ? entityName : navigationPropertyPath, qualifier, VisualizationType.Chart)\n\t\t\t\t: getChartID(isEntitySet ? entityName : navigationPropertyPath, VisualizationType.Chart),\n\t\t\t\"Chart\"\n\t\t]),\n\t\tentityName: entityName,\n\t\tpersonalization: getP13nMode(visualizationPath, converterContext),\n\t\tnavigationPath: navigationPropertyPath,\n\t\tannotationPath: converterContext.getAbsoluteAnnotationPath(visualizationPath),\n\t\tfilterId: sFilterbarId,\n\t\tvizProperties: JSON.stringify(oVizProperties),\n\t\tactions: chartActions.actions,\n\t\tcommandActions: chartActions.commandActions,\n\t\ttitle: title,\n\t\tautoBindOnInit: autoBindOnInit,\n\t\tonSegmentedButtonPressed: onSegmentedButtonPressed,\n\t\tvisible: visible,\n\t\tcustomAgg: mCustomAggregates,\n\t\ttransAgg: mTransAggregations,\n\t\tapplySupported: mApplySupported,\n\t\tselectionPresentationVariantPath,\n\t\tvariantManagement: findVariantManagement(p13nMode, variantManagement),\n\t\tisInsightsEnabled: isInsightsEnabled,\n\t\tisInsightsVisible: isInsightsVisible,\n\t\tisParameterizedEntitySet: isParameterizedEntitySet\n\t};\n}\n/**\n * Method to determine the variant management.\n * @param p13nMode\n * @param variantManagement\n * @returns The variant management for the chart\n */\nfunction findVariantManagement(p13nMode: string | undefined, variantManagement: VariantManagementType): VariantManagementType {\n\treturn variantManagement === \"Control\" && !p13nMode ? VariantManagementType.None : variantManagement;\n}\n\n/**\n * Create the ChartVisualization configuration that will be used to during templating.\n * @param converterContext The converter context\n * @param visualizationPath The path of the visualization annotation\n * @param visualization The visualization annotation\n * @returns The chart visualization based on the annotation used for templating\n */\nexport function createChartVisualizationForTemplating(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tvisualizationPath: string,\n\tvisualization: ActualVisualizationAnnotations\n): ChartTemplateVisualization {\n\tconst qualifier = visualization.fullyQualifiedName.split(\"#\").length > 1 ? visualization.fullyQualifiedName.split(\"#\")[1] : \"\";\n\tconst [navigationPropertyPath] = visualizationPath.split(\"@\");\n\n\tconst dataModelPath = converterContext.getDataModelObjectPath();\n\tconst isEntitySet: boolean = navigationPropertyPath.length === 0;\n\tconst entityName: string = dataModelPath.targetEntitySet?.name ?? dataModelPath.startingEntitySet.name;\n\tconst aggregationHelper = new AggregationHelper(converterContext.getEntityType(), converterContext, true);\n\tconst allowedTransformations = aggregationHelper.getAllowedTransformations();\n\tconst isParameterizedEntitySet = !!converterContext.getParameterEntityType();\n\treturn {\n\t\tannotationPath: converterContext.getAbsoluteAnnotationPath(visualizationPath),\n\t\tisParameterizedEntitySet,\n\t\tcollection: getTargetObjectPath(converterContext.getDataModelObjectPath()),\n\t\ttype: VisualizationType.Chart,\n\t\tentityName,\n\t\tid: qualifier\n\t\t\t? getChartID(isEntitySet ? entityName : navigationPropertyPath, qualifier, VisualizationType.Chart)\n\t\t\t: getChartID(isEntitySet ? entityName : navigationPropertyPath, VisualizationType.Chart),\n\t\tapiId: generate([\n\t\t\tqualifier\n\t\t\t\t? getChartID(isEntitySet ? entityName : navigationPropertyPath, qualifier, VisualizationType.Chart)\n\t\t\t\t: getChartID(isEntitySet ? entityName : navigationPropertyPath, VisualizationType.Chart),\n\t\t\t\"Chart\"\n\t\t]),\n\t\tapplySupported: {\n\t\t\t$Type: \"Org.OData.Aggregation.V1.ApplySupportedType\",\n\t\t\tenableSearch: allowedTransformations?.includes(\"search\") ?? true\n\t\t}\n\t};\n}\n\n/**\n * Method to get compile expression for DataFieldForAction and DataFieldForIntentBasedNavigation.\n * @param dataField\n * @param converterContext\n * @returns Compile expression for DataFieldForAction and DataFieldForIntentBasedNavigation\n */\nfunction getCompileExpressionForAction(\n\tdataField: DataFieldAbstractTypes,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): CompiledBindingToolkitExpression {\n\treturn compileExpression(\n\t\tnot(\n\t\t\tequal(\n\t\t\t\tgetExpressionFromAnnotation(\n\t\t\t\t\tdataField.annotations?.UI?.Hidden,\n\t\t\t\t\t[],\n\t\t\t\t\tundefined,\n\t\t\t\t\tconverterContext.getRelativeModelPathFunction()\n\t\t\t\t),\n\t\t\t\ttrue\n\t\t\t)\n\t\t)\n\t);\n}\n\nexport function createBlankChartVisualization(converterContext: ConverterContext<PageContextPathTarget>): ChartVisualization {\n\tconst hasMultipleVisualizations =\n\t\tconverterContext.getManifestWrapper().hasMultipleVisualizations() ||\n\t\tconverterContext.getTemplateType() === TemplateType.AnalyticalListPage;\n\tconst dataModelPath = converterContext.getDataModelObjectPath();\n\tconst entityName = dataModelPath.targetEntitySet ? dataModelPath.targetEntitySet.name : dataModelPath.startingEntitySet.name;\n\n\tconst visualization: ChartVisualization = {\n\t\ttype: VisualizationType.Chart,\n\t\tid: getChartID(entityName, VisualizationType.Chart),\n\t\tapiId: generate([getChartID(entityName, VisualizationType.Chart), \"Chart\"]),\n\t\tentityName: entityName,\n\t\ttitle: \"\",\n\t\tcollection: \"\",\n\t\tpersonalization: undefined,\n\t\tnavigationPath: \"\",\n\t\tannotationPath: \"\",\n\t\tvizProperties: JSON.stringify({\n\t\t\tlegendGroup: {\n\t\t\t\tlayout: {\n\t\t\t\t\tposition: \"bottom\"\n\t\t\t\t}\n\t\t\t}\n\t\t}),\n\t\tactions: [],\n\t\tcommandActions: {},\n\t\tautoBindOnInit: false,\n\t\tonSegmentedButtonPressed: \"\",\n\t\tvisible: hasMultipleVisualizations ? \"{= ${pageInternal>alpContentView} !== 'Table'}\" : \"true\",\n\t\tcustomAgg: {},\n\t\ttransAgg: {},\n\t\tapplySupported: {\n\t\t\t$Type: \"Org.OData.Aggregation.V1.ApplySupportedType\",\n\t\t\tAggregatableProperties: [],\n\t\t\tGroupableProperties: [],\n\t\t\tenableSearch: false\n\t\t},\n\t\tmultiViews: false,\n\t\tvariantManagement: VariantManagementType.None\n\t};\n\n\treturn visualization;\n}\n"],"mappings":"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","ignoreList":[]}