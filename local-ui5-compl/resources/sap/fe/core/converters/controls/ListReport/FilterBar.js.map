{"version":3,"file":"FilterBar.js","names":["filterFieldType","sEdmString","sStringDataType","getFieldGroupFilterGroups","fieldGroup","filterFacetMap","Data","forEach","dataField","$Type","Value","path","group","fullyQualifiedName","groupLabel","Label","toString","annotations","Common","qualifier","getExcludedFilterProperties","lrTableVisualizations","converterContext","selectionVariantPaths","Set","manifestFilterFields","getManifestWrapper","getFilterConfiguration","filterFields","selectionFieldPaths","getDataModelObjectPath","targetEntityType","UI","SelectionFields","map","selectionField","value","Object","keys","filter","key","template","visualization","tableFilters","control","filters","hiddenFilters","paths","quickFilters","annotationPath","has","add","selectionVariantConfig","getSelectionVariantConfiguration","propertyNames","propertyName","flat","_getConditionPath","entityType","propertyPath","parts","split","partialPath","length","part","shift","property","resolvePath","isMultipleNavigationProperty","_createFilterSelectionField","fullPropertyPath","includeHidden","targetType","undefined","Hidden","valueOf","getAnnotationEntityType","filterField","KeyHelper","getSelectionFieldKeyFromPath","getAbsoluteAnnotationPath","conditionPath","availability","HiddenFilter","label","name","getSettingsOfDefaultFilterFields","standardDynamicDateRangeKeys","StandardDynamicDateRangeKeys","TO","TOMORROW","NEXTWEEK","NEXTMONTH","NEXTQUARTER","NEXTYEAR","settings","operatorConfiguration","equals","join","exclude","_getSelectionFields","navigationPath","properties","selectionFieldMap","fullPath","_getSelectionFieldsByPath","propertyPaths","selectionFields","localSelectionFields","enhancedPath","enhanceDataModelPath","targetObject","navigationProperties","find","navigationProperty","isNavigationProperty","entityProperties","isComplexType","getTargetNavigationPath","_getFilterField","getDiagnostics","addIssue","IssueCategory","Annotation","IssueSeverity","High","IssueType","MISSING_SELECTIONFIELD","isParameter","ResultContext","_getDefaultFilterFields","aSelectOptions","excludedFilterProperties","annotatedSelectionFields","UISelectionFields","SelectionField","selectOption","PropertyName","sPropertyPath","currentSelectionFields","FilterField","getFilterField","push","defaultFilterValue","FilterDefaultValue","_getParameterFields","dataModelObjectPath","parameterEntityType","startingEntitySet","isParameterized","targetEntitySet","parameterConverterContext","getConverterContextFor","getFilterBarHideBasicSearch","listReportTables","charts","noSearchInCharts","every","chart","applySupported","enableSearch","noSearchInTables","table","enableAnalytics","type","enableBasicSearch","contextPath","getContextPath","_exports","getManifestFilterFields","manifestWrapper","settingsContextPath","getEntitySet","filterConfigurationPath","getFilterConfigurationPath","fbConfig","definedFilterFields","getPathFromSelectionFieldKey","sKey","Slot","Default","visualFilter","getVisualFilters","isCustomFilter","slotName","documentRefText","fetchTextFromMetaModel","position","placement","Placement","After","required","objectPath","filterBarContextPath","metaPath","startsWith","replace","getFilterRestrictions","oFilterRestrictionsAnnotation","sRestriction","aProps","oProperty","getFilterAllowedExpression","mAllowedExpressions","FilterExpressionRestrictions","Property","AllowedExpressions","getSearchFilterPropertyInfo","dataType","maxConditions","getEditStateFilterPropertyInfo","hiddenFilter","getSearchRestrictions","entitySet","isEntitySet","Capabilities","SearchRestrictions","getNavigationRestrictions","sNavigationPath","oNavigationRestrictions","NavigationRestrictions","aRestrictedProperties","RestrictedProperties","oRestrictedProperty","NavigationProperty","_fetchBasicPropertyInfo","oFilterFieldInfo","display","caseSensitive","menu","_getMissingLabelForManifestFilterFields","hasOwnProperty","getSpecificAllowedExpression","aExpressions","aAllowedExpressionsPriority","sort","a","b","indexOf","displayMode","oPropertyAnnotations","oCollectionAnnotations","oTextAnnotation","Text","oTextArrangmentAnnotation","TextArrangement","fetchPropertyInfo","oTypeConfig","oPropertyInfo","sAnnotationPath","targetPropertyObject","oFormatOptions","formatOptions","oConstraints","constraints","assign","isMultiValue","bIsMultiValue","filterExpression","_isFilterableNavigationProperty","entry","includes","addChildNavigationProperties","navProperties","targetProperty","$target","additionalPropertyPath","getAssociatedTextPropertyPath","getAssociatedCurrencyPropertyPath","getAssociatedUnitPropertyPath","getAssociatedTimezonePropertyPath","navigationPropertyPath","getNavigationPropertiesRecursively","Target","innerDataField","getRelativePaths","getAnnotatedSelectionFieldData","lrTables","arguments","lineItemTerm","getEntityType","getEntityTypeAnnotation","annotation","ModelHelper","isDraftRoot","selectionVariant","getSelectionVariant","SelectOptions","propertyInfoFields","reduce","filterPropertyPath","defaultFilterFields","fetchTypeConfig","getTypeConfig","nullable","parseKeepsEmptyString","assignDataTypeToPropertyInfo","propertyInfoField","aRequiredProps","aTypeConfig","isFilteringCaseSensitive","processSelectionFields","defaultValuePropertyFields","concat","parameterField","propertyConvertyContext","propertyTargetObject","oFilterRestrictions","FilterRestrictions","oRet","RequiredProperties","NonFilterableProperties","FilterAllowedExpressions","sEntitySetPath","aPathParts","splice","oNavigationFilterRestrictions","aNonFilterableProps","aFetchedProperties","isObjectPathDraftSupported","searchRestrictions","hideBasicSearch","Boolean","Searchable","insertCustomManifestElements","insertCustomElements","OverrideType","overwrite","sortPropertyInfosByGroupLabel","propertyInfos","aGroupLabelIsSet","bGroupLabelIsSet","localeCompare","getSelectionFields","oAnnotatedSelectionFieldData","parameterFields","sFetchProperties","JSON","stringify","sPropertyInfo","propSelectionFields","parse","filterFacets","FilterFacets","aFieldGroups","getAnnotationsByTerm","i","previousValue","filterFacet","ID","allFilters","isCaseSensitive","getExpandFilterFields","filterRestrictionsAnnotation","valueList","requiredProperties","FetchValues"],"sources":["./FilterBar.ts"],"sourcesContent":["import type { AnnotationTerm, EntitySet, EntityType, NavigationProperty, Property, PropertyPath } from \"@sap-ux/vocabularies-types\";\nimport type {\n\tFilterExpressionRestrictionType,\n\tFilterExpressionType,\n\tFilterRestrictions,\n\tFilterRestrictionsType,\n\tNavigationPropertyRestriction,\n\tSearchRestrictions\n} from \"@sap-ux/vocabularies-types/vocabularies/Capabilities\";\nimport type { ValueList } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport type { EntityTypeAnnotations, PropertyAnnotations } from \"@sap-ux/vocabularies-types/vocabularies/Edm_Types\";\nimport type {\n\tDataField,\n\tDataFieldAbstractTypes,\n\tDataFieldTypes,\n\tDataFieldWithNavigationPath,\n\tDataFieldWithUrl,\n\tFieldGroup,\n\tLineItem,\n\tReferenceFacetTypes,\n\tSelectOptionType\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTerms, UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport type ConverterContext from \"sap/fe/core/converters/ConverterContext\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport type { ChartVisualization } from \"sap/fe/core/converters/controls/Common/Chart\";\nimport { getSelectionVariant } from \"sap/fe/core/converters/controls/Common/DataVisualization\";\nimport type { PropertyTypeConfig, TableVisualization } from \"sap/fe/core/converters/controls/Common/Table\";\nimport { getSelectionVariantConfiguration, getTypeConfig, isFilteringCaseSensitive } from \"sap/fe/core/converters/controls/Common/Table\";\nimport type { VisualFilters } from \"sap/fe/core/converters/controls/ListReport/VisualFilters\";\nimport { getVisualFilters } from \"sap/fe/core/converters/controls/ListReport/VisualFilters\";\nimport type { ConfigurableObject, CustomElement, Position } from \"sap/fe/core/converters/helpers/ConfigurableObject\";\nimport { OverrideType, Placement, insertCustomElements } from \"sap/fe/core/converters/helpers/ConfigurableObject\";\nimport { IssueCategory, IssueSeverity, IssueType } from \"sap/fe/core/converters/helpers/IssueManager\";\nimport { KeyHelper } from \"sap/fe/core/converters/helpers/Key\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport { isComplexType, isEntitySet, isMultipleNavigationProperty, isNavigationProperty } from \"sap/fe/core/helpers/TypeGuards\";\nimport { enhanceDataModelPath, getRelativePaths, getTargetNavigationPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport {\n\tgetAssociatedCurrencyPropertyPath,\n\tgetAssociatedTextPropertyPath,\n\tgetAssociatedTimezonePropertyPath,\n\tgetAssociatedUnitPropertyPath\n} from \"sap/fe/core/templating/PropertyHelper\";\nimport { StandardDynamicDateRangeKeys } from \"sap/m/library\";\nimport type TypeConfig from \"sap/ui/mdc/TypeConfig\";\nimport type { MetaModelType } from \"types/metamodel_types\";\nimport type {\n\tAvailabilityType,\n\tFilterFieldManifestConfiguration,\n\tFilterManifestConfiguration,\n\tFilterSettings\n} from \"../../ManifestSettings\";\n\n//import { hasValueHelp } from \"sap/fe/core/templating/PropertyHelper\";\n\nexport type FilterField = ConfigurableObject & {\n\ttype?: string;\n\tkey: string;\n\tdataType?: string;\n\tname?: string;\n\tconditionPath: string;\n\tavailability: AvailabilityType;\n\tannotationPath: string;\n\tlabel?: string;\n\ttemplate?: string;\n\tdocumentRefText?: string;\n\tgroup?: string;\n\tmenu?: string;\n\tgroupLabel?: string;\n\tsettings?: FilterSettings;\n\tisParameter?: boolean;\n\tvisualFilter?: VisualFilters;\n\tcaseSensitive?: boolean;\n\trequired?: boolean;\n};\n\nexport type ManifestFilterField = FilterField & {\n\tslotName?: string;\n};\n\ntype FilterGroup = {\n\tgroup?: string;\n\tgroupLabel?: string;\n};\n\nenum filterFieldType {\n\tDefault = \"Default\",\n\tSlot = \"Slot\"\n}\n\nconst sEdmString = \"Edm.String\";\nconst sStringDataType = \"sap.ui.model.odata.type.String\";\n\nexport type CustomElementFilterField = CustomElement<ManifestFilterField>;\n\n/**\n * Enter all DataFields of a given FieldGroup into the filterFacetMap.\n * @param fieldGroup\n * @returns The map of facets for the given FieldGroup\n */\nfunction getFieldGroupFilterGroups(fieldGroup: FieldGroup): Record<string, FilterGroup> {\n\tconst filterFacetMap: Record<string, FilterGroup> = {};\n\tfieldGroup.Data.forEach((dataField: DataFieldAbstractTypes) => {\n\t\tif (dataField.$Type === \"com.sap.vocabularies.UI.v1.DataField\") {\n\t\t\tfilterFacetMap[dataField.Value.path] = {\n\t\t\t\tgroup: fieldGroup.fullyQualifiedName,\n\t\t\t\tgroupLabel: fieldGroup.Label?.toString() ?? fieldGroup.annotations?.Common?.Label?.toString() ?? fieldGroup.qualifier\n\t\t\t};\n\t\t}\n\t});\n\treturn filterFacetMap;\n}\n\n/**\n * Get the properties of the selection variants used in the different visualizations that should be excluded.\n * @param lrTableVisualizations The list report tables\n * @param converterContext The converter context\n * @returns The excluded properties\n */\nfunction getExcludedFilterProperties(\n\tlrTableVisualizations: TableVisualization[],\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): Set<string> {\n\tconst selectionVariantPaths = new Set<string>();\n\tconst manifestFilterFields = converterContext.getManifestWrapper().getFilterConfiguration().filterFields ?? {};\n\tconst selectionFieldPaths = new Set<string>([\n\t\t//Selection Fields coming from the annotation\n\t\t...(converterContext.getDataModelObjectPath().targetEntityType?.annotations?.UI?.SelectionFields ?? []).map(\n\t\t\t(selectionField) => selectionField.value\n\t\t),\n\t\t//Selection Fields coming from the manifest and not with custom template\n\t\t...Object.keys(manifestFilterFields).filter((key) => !!manifestFilterFields[key].template)\n\t]);\n\n\treturn new Set(\n\t\tlrTableVisualizations\n\t\t\t.map((visualization) => {\n\t\t\t\tconst tableFilters = visualization.control.filters;\n\t\t\t\tif (!tableFilters) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t\treturn [...(tableFilters.hiddenFilters?.paths ?? []), ...(tableFilters.quickFilters?.paths ?? [])].map((path) => {\n\t\t\t\t\tconst annotationPath = path.annotationPath;\n\t\t\t\t\tif (!selectionVariantPaths.has(annotationPath)) {\n\t\t\t\t\t\tselectionVariantPaths.add(annotationPath);\n\t\t\t\t\t\tconst selectionVariantConfig = getSelectionVariantConfiguration(annotationPath, converterContext);\n\t\t\t\t\t\tif (selectionVariantConfig) {\n\t\t\t\t\t\t\tselectionVariantConfig.propertyNames = selectionVariantConfig.propertyNames.filter(\n\t\t\t\t\t\t\t\t(propertyName) => !selectionFieldPaths.has(propertyName)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn selectionVariantConfig.propertyNames;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn [];\n\t\t\t\t});\n\t\t\t})\n\t\t\t.flat(2)\n\t);\n}\n\n/**\n * Returns the condition path required for the condition model. It looks as follows:\n * <1:N-PropertyName>*\\/<1:1-PropertyName>/<PropertyName>.\n * @param entityType The root EntityType\n * @param propertyPath The full path to the target property\n * @returns The formatted condition path\n */\nconst _getConditionPath = function (entityType: EntityType, propertyPath: string): string {\n\tconst parts = propertyPath.split(\"/\");\n\tlet partialPath;\n\tlet key = \"\";\n\twhile (parts.length) {\n\t\tlet part = parts.shift() as string;\n\t\tpartialPath = partialPath ? `${partialPath}/${part}` : part;\n\t\tconst property: Property | NavigationProperty = entityType.resolvePath(partialPath);\n\t\tif (isMultipleNavigationProperty(property)) {\n\t\t\tpart += \"*\";\n\t\t}\n\t\tkey = key ? `${key}/${part}` : part;\n\t}\n\treturn key;\n};\n\nconst _createFilterSelectionField = function (\n\tentityType: EntityType,\n\tproperty: Property,\n\tfullPropertyPath: string,\n\tincludeHidden: boolean,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): FilterField | undefined {\n\t// ignore complex property types and hidden annotated ones\n\tif (property && property.targetType === undefined && (includeHidden || property.annotations?.UI?.Hidden?.valueOf() !== true)) {\n\t\tconst targetEntityType = converterContext.getAnnotationEntityType(property),\n\t\t\tfilterField: FilterField = {\n\t\t\t\tkey: KeyHelper.getSelectionFieldKeyFromPath(fullPropertyPath),\n\t\t\t\tannotationPath: converterContext.getAbsoluteAnnotationPath(fullPropertyPath),\n\t\t\t\tconditionPath: _getConditionPath(entityType, fullPropertyPath),\n\t\t\t\tavailability: property.annotations?.UI?.HiddenFilter?.valueOf() === true ? \"Hidden\" : \"Adaptation\",\n\t\t\t\tlabel: property.annotations.Common?.Label?.toString() ?? property.name,\n\t\t\t\tgroup: targetEntityType.name,\n\t\t\t\tgroupLabel: targetEntityType?.annotations?.Common?.Label?.toString() ?? targetEntityType.name\n\t\t\t};\n\t\tgetSettingsOfDefaultFilterFields(filterField);\n\t\treturn filterField;\n\t}\n\treturn undefined;\n};\n\n/**\n * Retrieve the configuration for the technical property DraftAdministrativeData. Only relevant for CreationDateTime\n * and LastChangeDateTime, as they are displaying the timeframe related properties as a SemanticDateRange.\n * @param filterField\n */\nconst getSettingsOfDefaultFilterFields = function (filterField: FilterField): void {\n\tif (\n\t\tfilterField.key === \"DraftAdministrativeData::CreationDateTime\" ||\n\t\tfilterField.key === \"DraftAdministrativeData::LastChangeDateTime\"\n\t) {\n\t\tconst standardDynamicDateRangeKeys = [\n\t\t\tStandardDynamicDateRangeKeys.TO,\n\t\t\tStandardDynamicDateRangeKeys.TOMORROW,\n\t\t\tStandardDynamicDateRangeKeys.NEXTWEEK,\n\t\t\tStandardDynamicDateRangeKeys.NEXTMONTH,\n\t\t\tStandardDynamicDateRangeKeys.NEXTQUARTER,\n\t\t\tStandardDynamicDateRangeKeys.NEXTYEAR\n\t\t];\n\t\tfilterField.settings = {\n\t\t\toperatorConfiguration: [\n\t\t\t\t{\n\t\t\t\t\tpath: \"key\",\n\t\t\t\t\tequals: standardDynamicDateRangeKeys.join(\",\"),\n\t\t\t\t\texclude: true\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t}\n};\n\nconst _getSelectionFields = function (\n\tentityType: EntityType,\n\tnavigationPath: string,\n\tproperties: Array<Property> | undefined,\n\tincludeHidden: boolean,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): Record<string, FilterField> {\n\tconst selectionFieldMap: Record<string, FilterField> = {};\n\tif (properties) {\n\t\tproperties.forEach((property: Property) => {\n\t\t\tconst propertyPath: string = property.name;\n\t\t\tconst fullPath: string = (navigationPath ? `${navigationPath}/` : \"\") + propertyPath;\n\t\t\tconst selectionField = _createFilterSelectionField(entityType, property, fullPath, includeHidden, converterContext);\n\t\t\tif (selectionField) {\n\t\t\t\tselectionFieldMap[fullPath] = selectionField;\n\t\t\t}\n\t\t});\n\t}\n\treturn selectionFieldMap;\n};\n\nconst _getSelectionFieldsByPath = function (\n\tentityType: EntityType,\n\tpropertyPaths: Array<string> | undefined,\n\tincludeHidden: boolean,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): Record<string, FilterField> {\n\tlet selectionFields: Record<string, FilterField> = {};\n\tif (propertyPaths) {\n\t\tpropertyPaths.forEach((propertyPath: string) => {\n\t\t\tlet localSelectionFields: Record<string, FilterField> = {};\n\t\t\tconst enhancedPath = enhanceDataModelPath<Property | NavigationProperty>(\n\t\t\t\tconverterContext.getDataModelObjectPath(),\n\t\t\t\tpropertyPath\n\t\t\t);\n\t\t\tconst property = enhancedPath.targetObject;\n\t\t\tif (\n\t\t\t\tproperty === undefined ||\n\t\t\t\t(!includeHidden &&\n\t\t\t\t\tenhancedPath.navigationProperties.find(\n\t\t\t\t\t\t(navigationProperty) => navigationProperty.annotations?.UI?.Hidden?.valueOf() === true\n\t\t\t\t\t))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (isNavigationProperty(property)) {\n\t\t\t\t// handle navigation properties\n\t\t\t\tlocalSelectionFields = _getSelectionFields(\n\t\t\t\t\tentityType,\n\t\t\t\t\tpropertyPath,\n\t\t\t\t\tproperty.targetType.entityProperties,\n\t\t\t\t\tincludeHidden,\n\t\t\t\t\tconverterContext\n\t\t\t\t);\n\t\t\t} else if (isComplexType(property.targetType)) {\n\t\t\t\t// handle ComplexType properties\n\t\t\t\tlocalSelectionFields = _getSelectionFields(\n\t\t\t\t\tentityType,\n\t\t\t\t\tpropertyPath,\n\t\t\t\t\tproperty.targetType.properties,\n\t\t\t\t\tincludeHidden,\n\t\t\t\t\tconverterContext\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tlocalSelectionFields = _getSelectionFields(\n\t\t\t\t\tentityType,\n\t\t\t\t\tgetTargetNavigationPath(enhancedPath, true),\n\t\t\t\t\t[property],\n\t\t\t\t\tincludeHidden,\n\t\t\t\t\tconverterContext\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tselectionFields = {\n\t\t\t\t...selectionFields,\n\t\t\t\t...localSelectionFields\n\t\t\t};\n\t\t});\n\t}\n\treturn selectionFields;\n};\n\nconst _getFilterField = function (\n\tfilterFields: Record<string, FilterField>,\n\tpropertyPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tentityType: EntityType\n): FilterField | undefined {\n\tlet filterField: FilterField | undefined = filterFields[propertyPath];\n\tif (filterField) {\n\t\tdelete filterFields[propertyPath];\n\t} else {\n\t\tfilterField = _createFilterSelectionField(entityType, entityType.resolvePath(propertyPath), propertyPath, true, converterContext);\n\t}\n\tif (!filterField) {\n\t\tconverterContext.getDiagnostics()?.addIssue(IssueCategory.Annotation, IssueSeverity.High, IssueType.MISSING_SELECTIONFIELD);\n\t}\n\t// defined SelectionFields are available by default\n\tif (filterField) {\n\t\tfilterField.availability = filterField.availability === \"Hidden\" ? \"Hidden\" : \"Default\";\n\t\tfilterField.isParameter = !!entityType.annotations?.Common?.ResultContext;\n\t}\n\treturn filterField;\n};\n\nconst _getDefaultFilterFields = function (\n\taSelectOptions: SelectOptionType[],\n\tentityType: EntityType,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\texcludedFilterProperties: Set<string>,\n\tannotatedSelectionFields: PropertyPath[]\n): FilterField[] {\n\tconst selectionFields: FilterField[] = [];\n\tconst UISelectionFields: Record<string, boolean> = {};\n\tconst properties = entityType.entityProperties;\n\t// Using entityType instead of entitySet\n\tannotatedSelectionFields?.forEach((SelectionField) => {\n\t\tUISelectionFields[SelectionField.value] = true;\n\t});\n\tif (aSelectOptions && aSelectOptions.length > 0) {\n\t\taSelectOptions?.forEach((selectOption: SelectOptionType) => {\n\t\t\tconst propertyName = selectOption.PropertyName;\n\t\t\tconst sPropertyPath = propertyName?.value;\n\t\t\tconst currentSelectionFields: Record<string, boolean> = {};\n\t\t\tannotatedSelectionFields?.forEach((SelectionField) => {\n\t\t\t\tcurrentSelectionFields[SelectionField.value] = true;\n\t\t\t});\n\t\t\tif (sPropertyPath && !excludedFilterProperties.has(sPropertyPath)) {\n\t\t\t\tif (!(sPropertyPath in currentSelectionFields)) {\n\t\t\t\t\tconst FilterField: FilterField | undefined = getFilterField(sPropertyPath, converterContext, entityType);\n\t\t\t\t\tif (FilterField) {\n\t\t\t\t\t\tselectionFields.push(FilterField);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t} else if (properties) {\n\t\tproperties.forEach((property: Property) => {\n\t\t\tconst defaultFilterValue = property.annotations?.Common?.FilterDefaultValue;\n\t\t\tconst propertyPath = property.name;\n\t\t\tif (!(propertyPath in excludedFilterProperties)) {\n\t\t\t\tif (defaultFilterValue && !(propertyPath in UISelectionFields)) {\n\t\t\t\t\tconst FilterField: FilterField | undefined = getFilterField(propertyPath, converterContext, entityType);\n\t\t\t\t\tif (FilterField) {\n\t\t\t\t\t\tselectionFields.push(FilterField);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\treturn selectionFields;\n};\n\n/**\n * Get all parameter filter fields in case of a parameterized service.\n * @param converterContext\n * @returns An array of parameter FilterFields\n */\nfunction _getParameterFields(converterContext: ConverterContext<PageContextPathTarget>): FilterField[] {\n\tconst dataModelObjectPath = converterContext.getDataModelObjectPath();\n\tconst parameterEntityType = dataModelObjectPath.startingEntitySet.entityType;\n\tconst isParameterized = !!parameterEntityType.annotations?.Common?.ResultContext && !dataModelObjectPath.targetEntitySet;\n\tconst parameterConverterContext =\n\t\tisParameterized && converterContext.getConverterContextFor<EntitySet>(`/${dataModelObjectPath.startingEntitySet.name}`);\n\n\treturn (\n\t\tparameterConverterContext\n\t\t\t? parameterEntityType.entityProperties.map(function (property) {\n\t\t\t\t\treturn _getFilterField(\n\t\t\t\t\t\t{} as Record<string, FilterField>,\n\t\t\t\t\t\tproperty.name,\n\t\t\t\t\t\tparameterConverterContext,\n\t\t\t\t\t\tparameterEntityType\n\t\t\t\t\t);\n\t\t\t  })\n\t\t\t: []\n\t) as FilterField[];\n}\n\n/**\n * Determines if the FilterBar search field is hidden or not.\n * @param listReportTables The list report tables\n * @param charts The ALP charts\n * @param converterContext The converter context\n * @returns The information if the FilterBar search field is hidden or not\n */\nexport const getFilterBarHideBasicSearch = function (\n\tlistReportTables: TableVisualization[],\n\tcharts: ChartVisualization[],\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): boolean {\n\t// Check if charts allow search\n\tconst noSearchInCharts = charts.length === 0 || charts.every((chart) => !chart.applySupported.enableSearch);\n\n\t// Check if all tables are analytical and none of them allow for search\n\t// or all tables are TreeTable and none of them allow for search\n\tconst noSearchInTables =\n\t\tlistReportTables.length === 0 ||\n\t\tlistReportTables.every((table) => (table.enableAnalytics || table.control.type === \"TreeTable\") && !table.enableBasicSearch);\n\n\tconst contextPath = converterContext.getContextPath();\n\tif (contextPath && noSearchInCharts && noSearchInTables) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\n\n/**\n * Retrieves filter fields from the manifest.\n * @param entityType The current entityType\n * @param converterContext The converter context\n * @param annotationPath Annotation path of the selection fields\n * @returns The filter fields defined in the manifest\n */\nexport const getManifestFilterFields = function (\n\tentityType: EntityType,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tannotationPath?: string\n): Record<string, CustomElementFilterField> {\n\tconst manifestWrapper = converterContext.getManifestWrapper();\n\n\tconst settingsContextPath =\n\t\tmanifestWrapper.getContextPath() || (manifestWrapper.getEntitySet() ? `/${manifestWrapper.getEntitySet()}` : undefined);\n\tconst filterConfigurationPath = getFilterConfigurationPath(converterContext, settingsContextPath, annotationPath);\n\tlet fbConfig: FilterManifestConfiguration = {};\n\tfbConfig = manifestWrapper.getFilterConfiguration(filterConfigurationPath);\n\n\tconst definedFilterFields: Record<string, FilterFieldManifestConfiguration> = fbConfig?.filterFields || {};\n\tconst selectionFields: Record<string, FilterField> = _getSelectionFieldsByPath(\n\t\tentityType,\n\t\tObject.keys(definedFilterFields).map((key) => definedFilterFields[key].property ?? KeyHelper.getPathFromSelectionFieldKey(key)),\n\t\ttrue,\n\t\tconverterContext\n\t);\n\tconst filterFields: Record<string, CustomElementFilterField> = {};\n\n\tfor (const sKey in definedFilterFields) {\n\t\tconst filterField = definedFilterFields[sKey];\n\t\tconst propertyName = filterField.property ?? KeyHelper.getPathFromSelectionFieldKey(sKey);\n\t\tconst selectionField = selectionFields[propertyName];\n\t\tconst type = filterField.type === \"Slot\" ? filterFieldType.Slot : filterFieldType.Default;\n\t\tconst visualFilter =\n\t\t\tfilterField && filterField?.visualFilter\n\t\t\t\t? getVisualFilters(entityType, converterContext, sKey, definedFilterFields)\n\t\t\t\t: undefined;\n\t\tif (filterField.template || filterField.type === filterFieldType.Slot) {\n\t\t\tif (filterField.settings) {\n\t\t\t\tfilterField.settings.isCustomFilter = true;\n\t\t\t} else {\n\t\t\t\tfilterField.settings = {\n\t\t\t\t\tisCustomFilter: true\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tfilterFields[sKey] = {\n\t\t\tkey: sKey,\n\t\t\ttype: type,\n\t\t\tslotName: filterField?.slotName || sKey,\n\t\t\tannotationPath: selectionField?.annotationPath,\n\t\t\tconditionPath: filterField.property\n\t\t\t\t? KeyHelper.getPathFromSelectionFieldKey(sKey)\n\t\t\t\t: selectionField?.conditionPath || propertyName,\n\t\t\tdocumentRefText:\n\t\t\t\tfilterField.property &&\n\t\t\t\tconverterContext.fetchTextFromMetaModel(\n\t\t\t\t\t\"{metaModel>\" + filterField.property + \"@com.sap.vocabularies.Common.v1.DocumentationRef}\"\n\t\t\t\t),\n\t\t\ttemplate: filterField.template,\n\t\t\tlabel: converterContext.fetchTextFromMetaModel(filterField.label),\n\t\t\tposition: filterField.position || { placement: Placement.After },\n\t\t\tavailability: filterField.availability || \"Default\",\n\t\t\tsettings: filterField.settings,\n\t\t\tvisualFilter: visualFilter,\n\t\t\trequired: filterField.required\n\t\t};\n\t}\n\treturn filterFields;\n};\n\n/**\n * Returns configuration path to fetch the custom filter fields from manifest.\n * @param converterContext The converter context\n * @param settingsContextPath Manifest entity set path and context path\n * @param annotationPath The annotation path\n * @returns Path to fetch the custom filters from the manifest\n */\nconst getFilterConfigurationPath = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tsettingsContextPath?: string,\n\tannotationPath?: string\n): string | undefined {\n\tlet objectPath;\n\tconst filterBarContextPath = converterContext.getContextPath();\n\tconst metaPath = `${filterBarContextPath}/${annotationPath}`;\n\tif (settingsContextPath && metaPath?.startsWith(settingsContextPath) && annotationPath) {\n\t\tobjectPath = metaPath.replace(`${settingsContextPath}/`, \"\");\n\t} else {\n\t\tobjectPath = annotationPath;\n\t}\n\treturn objectPath ? objectPath : undefined;\n};\n\nexport const getFilterField = function (\n\tpropertyPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tentityType: EntityType\n): FilterField | undefined {\n\treturn _getFilterField({}, propertyPath, converterContext, entityType);\n};\n\nexport const getFilterRestrictions = function (\n\toFilterRestrictionsAnnotation: FilterRestrictionsType | undefined,\n\tsRestriction: \"RequiredProperties\" | \"NonFilterableProperties\"\n): string[] {\n\tlet aProps: string[] = [];\n\tif (oFilterRestrictionsAnnotation && oFilterRestrictionsAnnotation[sRestriction]) {\n\t\taProps = oFilterRestrictionsAnnotation[sRestriction].map(function (oProperty) {\n\t\t\treturn oProperty.value;\n\t\t});\n\t}\n\treturn aProps;\n};\nexport const getFilterAllowedExpression = function (\n\toFilterRestrictionsAnnotation: FilterRestrictionsType | undefined\n): Record<string, FilterExpressionType[]> {\n\tconst mAllowedExpressions: Record<string, FilterExpressionType[]> = {};\n\tif (oFilterRestrictionsAnnotation && oFilterRestrictionsAnnotation.FilterExpressionRestrictions) {\n\t\toFilterRestrictionsAnnotation.FilterExpressionRestrictions.forEach(function (oProperty: FilterExpressionRestrictionType) {\n\t\t\t//SingleValue | MultiValue | SingleRange | MultiRange | SearchExpression | MultiRangeOrSearchExpression\n\t\t\tif (oProperty.Property?.value && oProperty.AllowedExpressions) {\n\t\t\t\tif (mAllowedExpressions[oProperty.Property?.value]) {\n\t\t\t\t\tmAllowedExpressions[oProperty.Property?.value].push(oProperty.AllowedExpressions.toString());\n\t\t\t\t} else {\n\t\t\t\t\tmAllowedExpressions[oProperty.Property?.value] = [oProperty.AllowedExpressions.toString()];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\treturn mAllowedExpressions;\n};\n\nconst getSearchFilterPropertyInfo = function (): PropertyInfo {\n\treturn {\n\t\tname: \"$search\",\n\t\tpath: \"$search\",\n\t\tdataType: sStringDataType,\n\t\tmaxConditions: 1\n\t};\n};\n\nconst getEditStateFilterPropertyInfo = function (): PropertyInfo {\n\treturn {\n\t\tname: \"$editState\",\n\t\tpath: \"$editState\",\n\t\tgroupLabel: \"\",\n\t\tgroup: \"\",\n\t\tdataType: sStringDataType,\n\t\thiddenFilter: false\n\t};\n};\n\nconst getSearchRestrictions = function (converterContext: ConverterContext<PageContextPathTarget>): SearchRestrictions | undefined {\n\tconst entitySet = converterContext.getEntitySet();\n\treturn isEntitySet(entitySet) ? entitySet.annotations.Capabilities?.SearchRestrictions : undefined;\n};\n\nexport const getNavigationRestrictions = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tsNavigationPath: string\n): NavigationPropertyRestriction | undefined {\n\tconst oNavigationRestrictions = converterContext.getEntitySet()?.annotations?.Capabilities?.NavigationRestrictions;\n\tconst aRestrictedProperties = oNavigationRestrictions && oNavigationRestrictions.RestrictedProperties;\n\treturn (\n\t\taRestrictedProperties &&\n\t\taRestrictedProperties.find(function (oRestrictedProperty) {\n\t\t\treturn (\n\t\t\t\toRestrictedProperty &&\n\t\t\t\toRestrictedProperty.NavigationProperty &&\n\t\t\t\toRestrictedProperty.NavigationProperty.value === sNavigationPath\n\t\t\t);\n\t\t})\n\t);\n};\n// The propertyInfo used internally within FE\nexport type PropertyInfo = {\n\tkey?: string;\n\tannotationPath?: string;\n\tconditionPath?: string;\n\tname: string;\n\tpath?: string;\n\tlabel?: string;\n\ttooltip?: string;\n\tvisible?: boolean;\n\tgroupLabel?: string;\n\tmaxConditions?: number;\n\tdataType?: string;\n\tgroup?: string;\n\thiddenFilter?: boolean;\n\tdisplay?: string;\n\tisParameter?: boolean;\n\tcaseSensitive?: boolean;\n\tavailability?: AvailabilityType;\n\tposition?: Position;\n\ttype?: string;\n\ttemplate?: string;\n\tmenu?: string;\n\trequired?: boolean;\n\tfilterExpression?: string;\n\tisCustomFilter?: boolean;\n\tconstraints?: object;\n\tformatOptions?: object;\n\tsettings?: FilterSettings;\n\tvisualFilter?: VisualFilters;\n\ttypeConfig?: TypeConfig;\n\tfilterable?: boolean;\n};\n\n// The propertyInfo we share with MDC\nexport type PropertyInfoExternal = {\n\tkey: string;\n\tlabel: string;\n\tdataType: string;\n\tcaseSensitive?: boolean;\n\tgroupLabel?: string;\n\tgroup?: string;\n\tconstraints?: object;\n\tformatOptions?: object;\n\tmaxConditions?: number;\n\tvisible?: boolean;\n\ttooltip?: string;\n\tpath?: string;\n\trequired?: boolean;\n\thiddenFilter?: boolean;\n};\nconst _fetchBasicPropertyInfo = function (oFilterFieldInfo: FilterField | PropertyInfo): PropertyInfo {\n\treturn {\n\t\tkey: oFilterFieldInfo.key,\n\t\tannotationPath: oFilterFieldInfo.annotationPath,\n\t\tconditionPath: oFilterFieldInfo.conditionPath,\n\t\tname: oFilterFieldInfo.conditionPath!,\n\t\tlabel: oFilterFieldInfo.label,\n\t\thiddenFilter: oFilterFieldInfo.availability === \"Hidden\",\n\t\tdisplay: \"Value\",\n\t\tisParameter: oFilterFieldInfo.isParameter,\n\t\tcaseSensitive: oFilterFieldInfo.caseSensitive,\n\t\tavailability: oFilterFieldInfo.availability,\n\t\tposition: oFilterFieldInfo.position,\n\t\ttype: oFilterFieldInfo.type,\n\t\ttemplate: oFilterFieldInfo.template,\n\t\tmenu: oFilterFieldInfo.menu,\n\t\trequired: oFilterFieldInfo.required,\n\t\tisCustomFilter: oFilterFieldInfo.settings?.isCustomFilter\n\t};\n};\n\nconst _getMissingLabelForManifestFilterFields = function (\n\tfilterFields: ManifestFilterField[],\n\tmanifestFilterFields: Record<string, CustomElementFilterField>\n): void {\n\tfilterFields.forEach((filterField) => {\n\t\tif (manifestFilterFields.hasOwnProperty(filterField.key) && !manifestFilterFields[filterField.key].label) {\n\t\t\tmanifestFilterFields[filterField.key].label = filterField.label;\n\t\t}\n\t});\n};\n\nexport const getSpecificAllowedExpression = function (aExpressions: string[]): string {\n\tconst aAllowedExpressionsPriority = [\n\t\t\"SingleValue\",\n\t\t\"MultiValue\",\n\t\t\"SingleRange\",\n\t\t\"MultiRange\",\n\t\t\"SearchExpression\",\n\t\t\"MultiRangeOrSearchExpression\"\n\t];\n\n\taExpressions.sort(function (a: string, b: string) {\n\t\treturn aAllowedExpressionsPriority.indexOf(a) - aAllowedExpressionsPriority.indexOf(b);\n\t});\n\n\treturn aExpressions[0];\n};\n\nexport const displayMode = function (\n\toPropertyAnnotations: PropertyAnnotations | undefined,\n\toCollectionAnnotations: EntityTypeAnnotations | undefined\n): string {\n\tconst oTextAnnotation = oPropertyAnnotations?.Common?.Text,\n\t\toTextArrangmentAnnotation =\n\t\t\toTextAnnotation &&\n\t\t\t((oPropertyAnnotations && oPropertyAnnotations?.Common?.Text?.annotations?.UI?.TextArrangement) ||\n\t\t\t\t(oCollectionAnnotations && oCollectionAnnotations?.UI?.TextArrangement));\n\n\tif (oTextArrangmentAnnotation) {\n\t\tif (oTextArrangmentAnnotation.valueOf() === \"UI.TextArrangementType/TextOnly\") {\n\t\t\treturn \"Description\";\n\t\t} else if (oTextArrangmentAnnotation.valueOf() === \"UI.TextArrangementType/TextLast\") {\n\t\t\treturn \"ValueDescription\";\n\t\t}\n\t\treturn \"DescriptionValue\"; //TextFirst\n\t}\n\treturn oTextAnnotation ? \"DescriptionValue\" : \"Value\";\n};\n\nexport const fetchPropertyInfo = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\toFilterFieldInfo: FilterField | PropertyInfo,\n\toTypeConfig: Partial<PropertyTypeConfig>\n): PropertyInfo {\n\tlet oPropertyInfo = _fetchBasicPropertyInfo(oFilterFieldInfo);\n\tconst sAnnotationPath = oFilterFieldInfo.annotationPath;\n\n\tif (!sAnnotationPath) {\n\t\treturn oPropertyInfo;\n\t}\n\tconst targetPropertyObject = converterContext.getConverterContextFor<Property>(sAnnotationPath).getDataModelObjectPath().targetObject;\n\n\tconst oPropertyAnnotations = targetPropertyObject?.annotations;\n\tconst oCollectionAnnotations = converterContext?.getDataModelObjectPath().targetObject?.annotations;\n\n\tconst oFormatOptions = oTypeConfig.formatOptions;\n\tconst oConstraints = oTypeConfig.constraints;\n\toPropertyInfo = Object.assign(oPropertyInfo, {\n\t\tformatOptions: oFormatOptions,\n\t\tconstraints: oConstraints,\n\t\tdisplay: displayMode(oPropertyAnnotations, oCollectionAnnotations)\n\t});\n\treturn oPropertyInfo;\n};\n\nexport const isMultiValue = function (oProperty: PropertyInfo): boolean {\n\tlet bIsMultiValue = true;\n\t//SingleValue | MultiValue | SingleRange | MultiRange | SearchExpression | MultiRangeOrSearchExpression\n\tswitch (oProperty.filterExpression) {\n\t\tcase \"SearchExpression\":\n\t\tcase \"SingleRange\":\n\t\tcase \"SingleValue\":\n\t\t\tbIsMultiValue = false;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\tif (oProperty.type && oProperty.type.indexOf(\"Boolean\") > 0) {\n\t\tbIsMultiValue = false;\n\t}\n\treturn bIsMultiValue;\n};\n\nconst _isFilterableNavigationProperty = function (\n\tentry: DataFieldAbstractTypes\n): entry is AnnotationTerm<DataField | DataFieldWithUrl | DataFieldWithNavigationPath> {\n\treturn (\n\t\t(entry.$Type === UIAnnotationTypes.DataField ||\n\t\t\tentry.$Type === UIAnnotationTypes.DataFieldWithUrl ||\n\t\t\tentry.$Type === UIAnnotationTypes.DataFieldWithNavigationPath) &&\n\t\tentry.Value.path?.includes(\"/\")\n\t);\n};\n\n/**\n * Adds the additional property which references to the unit, timezone, textArrangement or currency from a data field.\n * @param dataField The data field to be considered\n * @param converterContext The converter context\n * @param navProperties The list of navigation properties\n */\nconst addChildNavigationProperties = function (\n\tdataField: DataFieldAbstractTypes,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tnavProperties: string[]\n): void {\n\tconst targetProperty = (dataField as DataField).Value?.$target;\n\tif (targetProperty) {\n\t\tconst additionalPropertyPath =\n\t\t\tgetAssociatedTextPropertyPath(targetProperty) ||\n\t\t\tgetAssociatedCurrencyPropertyPath(targetProperty) ||\n\t\t\tgetAssociatedUnitPropertyPath(targetProperty) ||\n\t\t\tgetAssociatedTimezonePropertyPath(targetProperty);\n\t\tconst navigationProperty = additionalPropertyPath\n\t\t\t? enhanceDataModelPath(converterContext.getDataModelObjectPath(), additionalPropertyPath).navigationProperties\n\t\t\t: undefined;\n\t\tif (navigationProperty?.length) {\n\t\t\tconst navigationPropertyPath = navigationProperty[0].name;\n\t\t\tif (!navProperties.includes(navigationPropertyPath)) {\n\t\t\t\tnavProperties.push(navigationPropertyPath);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Gets used navigation properties for available dataField.\n * @param navProperties The list of navigation properties\n * @param dataField The data field to be considered\n * @param converterContext The converter context\n * @returns The list of navigation properties\n */\nconst getNavigationPropertiesRecursively = function (\n\tnavProperties: string[],\n\tdataField: DataFieldAbstractTypes,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): string[] {\n\tswitch (dataField.$Type) {\n\t\tcase UIAnnotationTypes.DataFieldForAnnotation:\n\t\t\tif (dataField.Target?.$target?.$Type === UIAnnotationTypes.FieldGroupType) {\n\t\t\t\tdataField.Target.$target.Data?.forEach((innerDataField: DataFieldAbstractTypes) => {\n\t\t\t\t\tgetNavigationPropertiesRecursively(navProperties, innerDataField, converterContext);\n\t\t\t\t});\n\t\t\t}\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataField:\n\t\tcase UIAnnotationTypes.DataFieldWithUrl:\n\t\tcase UIAnnotationTypes.DataFieldWithNavigationPath:\n\t\t\tif (_isFilterableNavigationProperty(dataField)) {\n\t\t\t\tconst navigationPropertyPath = getRelativePaths(\n\t\t\t\t\tenhanceDataModelPath(converterContext.getDataModelObjectPath(), dataField.Value.path),\n\t\t\t\t\ttrue\n\t\t\t\t).join(\"/\");\n\t\t\t\tif (!navProperties.includes(navigationPropertyPath)) {\n\t\t\t\t\tnavProperties.push(navigationPropertyPath);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Additional property from text arrangement/units/currencies/timezone...\n\t\t\taddChildNavigationProperties(dataField, converterContext, navProperties);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t// Other types are not supported\n\t\t\tbreak;\n\t}\n\treturn navProperties;\n};\n\nconst getAnnotatedSelectionFieldData = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tlrTables: TableVisualization[] = [],\n\tannotationPath = \"\",\n\tincludeHidden = false,\n\tlineItemTerm?: string\n): {\n\texcludedFilterProperties: Set<string>;\n\tentityType: EntityType;\n\tannotatedSelectionFields: PropertyPath[];\n\tfilterFields: Record<string, FilterField>;\n\tpropertyInfoFields: FilterField[];\n\tdefaultFilterFields: FilterField[];\n} {\n\t// create a map of properties to be used in selection variants defined in the different visualizations and different views (multi table mode)\n\tconst excludedFilterProperties = getExcludedFilterProperties(lrTables, converterContext);\n\tconst entityType = converterContext.getEntityType();\n\t//Filters which has to be added which is part of SV/Default annotations but not present in the SelectionFields\n\tconst annotatedSelectionFields = ((annotationPath && converterContext.getEntityTypeAnnotation(annotationPath)?.annotation) ||\n\t\tentityType.annotations?.UI?.SelectionFields ||\n\t\t[]) as PropertyPath[];\n\n\tlet navProperties: string[] = [];\n\tif (lrTables.length === 0 && !!lineItemTerm) {\n\t\t(converterContext.getEntityTypeAnnotation(lineItemTerm).annotation as LineItem)?.forEach((dataField: DataFieldAbstractTypes) => {\n\t\t\tnavProperties = getNavigationPropertiesRecursively(navProperties, dataField, converterContext);\n\t\t});\n\t}\n\n\tif (ModelHelper.isDraftRoot(converterContext.getEntitySet())) {\n\t\tnavProperties.push(\n\t\t\t\"DraftAdministrativeData/CreationDateTime\",\n\t\t\t\"DraftAdministrativeData/CreatedByUser\",\n\t\t\t\"DraftAdministrativeData/LastChangeDateTime\",\n\t\t\t\"DraftAdministrativeData/LastChangedByUser\"\n\t\t);\n\t}\n\n\t// create a map of all potential filter fields based on...\n\tconst filterFields: Record<string, FilterField> = {\n\t\t// ...non hidden properties of the entity\n\t\t..._getSelectionFields(entityType, \"\", entityType.entityProperties, includeHidden, converterContext),\n\t\t// ... non hidden properties of navigation properties\n\t\t..._getSelectionFieldsByPath(entityType, navProperties, false, converterContext),\n\t\t// ...additional manifest defined navigation properties\n\t\t..._getSelectionFieldsByPath(\n\t\t\tentityType,\n\t\t\tconverterContext.getManifestWrapper().getFilterConfiguration().navigationProperties,\n\t\t\tincludeHidden,\n\t\t\tconverterContext\n\t\t)\n\t};\n\tlet aSelectOptions: SelectOptionType[] = [];\n\tconst selectionVariant = getSelectionVariant(entityType, converterContext);\n\tif (selectionVariant) {\n\t\taSelectOptions = selectionVariant.SelectOptions;\n\t}\n\n\tconst propertyInfoFields: FilterField[] =\n\t\tannotatedSelectionFields?.reduce((selectionFields: FilterField[], selectionField) => {\n\t\t\tconst propertyPath = selectionField.value;\n\t\t\tif (!excludedFilterProperties.has(propertyPath)) {\n\t\t\t\tlet navigationPath: string;\n\t\t\t\tif (annotationPath?.startsWith(\"@com.sap.vocabularies.UI.v1.SelectionFields\")) {\n\t\t\t\t\tnavigationPath = \"\";\n\t\t\t\t} else {\n\t\t\t\t\tnavigationPath = annotationPath?.split(\"/@com.sap.vocabularies.UI.v1.SelectionFields\")[0];\n\t\t\t\t}\n\n\t\t\t\tconst filterPropertyPath = navigationPath ? navigationPath + \"/\" + propertyPath : propertyPath;\n\t\t\t\tconst filterField: FilterField | undefined = _getFilterField(\n\t\t\t\t\tfilterFields,\n\t\t\t\t\tfilterPropertyPath,\n\t\t\t\t\tconverterContext,\n\t\t\t\t\tentityType\n\t\t\t\t);\n\t\t\t\tif (filterField) {\n\t\t\t\t\tfilterField.group = \"\";\n\t\t\t\t\tfilterField.groupLabel = \"\";\n\t\t\t\t\tselectionFields.push(filterField);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn selectionFields;\n\t\t}, []) || [];\n\n\tconst defaultFilterFields = _getDefaultFilterFields(\n\t\taSelectOptions,\n\t\tentityType,\n\t\tconverterContext,\n\t\texcludedFilterProperties,\n\t\tannotatedSelectionFields\n\t);\n\n\treturn {\n\t\texcludedFilterProperties: excludedFilterProperties,\n\t\tentityType: entityType,\n\t\tannotatedSelectionFields: annotatedSelectionFields,\n\t\tfilterFields: filterFields,\n\t\tpropertyInfoFields: propertyInfoFields,\n\t\tdefaultFilterFields: defaultFilterFields\n\t};\n};\n\nexport const fetchTypeConfig = function (property?: Property): PropertyTypeConfig {\n\tconst oTypeConfig = getTypeConfig(property, property?.type);\n\tif (property?.type === sEdmString && (oTypeConfig.constraints.nullable === undefined || oTypeConfig.constraints.nullable === true)) {\n\t\toTypeConfig.formatOptions.parseKeepsEmptyString = false;\n\t}\n\treturn oTypeConfig;\n};\n\nexport const assignDataTypeToPropertyInfo = function (\n\tpropertyInfoField: FilterField | PropertyInfo,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\taRequiredProps: unknown[],\n\taTypeConfig: Record<string, Partial<PropertyTypeConfig>>\n): PropertyInfo {\n\tlet oPropertyInfo = fetchPropertyInfo(converterContext, propertyInfoField, aTypeConfig[propertyInfoField.key!]),\n\t\tsPropertyPath = \"\";\n\tif (propertyInfoField.conditionPath) {\n\t\tsPropertyPath = propertyInfoField.conditionPath.replace(/\\+|\\*/g, \"\");\n\t}\n\tif (oPropertyInfo) {\n\t\toPropertyInfo = Object.assign(oPropertyInfo, {\n\t\t\tmaxConditions: !oPropertyInfo.isParameter && isMultiValue(oPropertyInfo) ? -1 : 1,\n\t\t\trequired: propertyInfoField.required ?? (oPropertyInfo.isParameter || aRequiredProps.includes(sPropertyPath)),\n\t\t\tcaseSensitive: isFilteringCaseSensitive(converterContext),\n\t\t\tdataType: aTypeConfig[propertyInfoField.key!].type\n\t\t});\n\t}\n\treturn oPropertyInfo;\n};\n\nexport const processSelectionFields = function (\n\tpropertyInfoFields: FilterField[],\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tdefaultValuePropertyFields?: FilterField[]\n): PropertyInfo[] {\n\t//get TypeConfig function\n\tconst aTypeConfig: Record<string, Partial<PropertyTypeConfig>> = {};\n\n\tif (defaultValuePropertyFields) {\n\t\tpropertyInfoFields = propertyInfoFields.concat(defaultValuePropertyFields);\n\t}\n\t//add typeConfig\n\tpropertyInfoFields.forEach(function (parameterField) {\n\t\tif (parameterField.annotationPath) {\n\t\t\tconst propertyConvertyContext = converterContext.getConverterContextFor<Property>(parameterField.annotationPath);\n\t\t\tconst propertyTargetObject = propertyConvertyContext.getDataModelObjectPath().targetObject;\n\t\t\tconst oTypeConfig = fetchTypeConfig(propertyTargetObject);\n\t\t\taTypeConfig[parameterField.key] = oTypeConfig;\n\t\t} else {\n\t\t\taTypeConfig[parameterField.key] = { type: sStringDataType };\n\t\t}\n\t});\n\n\t// filterRestrictions\n\tconst entitySet = converterContext.getEntitySet();\n\tconst oFilterRestrictions = isEntitySet(entitySet) ? entitySet.annotations.Capabilities?.FilterRestrictions : undefined;\n\tconst oRet: {\n\t\tRequiredProperties?: string[];\n\t\tNonFilterableProperties?: string[];\n\t\tFilterAllowedExpressions?: Record<string, FilterExpressionType[]>;\n\t} = {};\n\toRet.RequiredProperties = getFilterRestrictions(oFilterRestrictions, \"RequiredProperties\") || [];\n\toRet.NonFilterableProperties = getFilterRestrictions(oFilterRestrictions, \"NonFilterableProperties\") || [];\n\toRet.FilterAllowedExpressions = getFilterAllowedExpression(oFilterRestrictions);\n\n\tconst sEntitySetPath = converterContext.getContextPath();\n\tconst aPathParts = sEntitySetPath.split(\"/\");\n\tif (aPathParts.length > 2) {\n\t\tconst sNavigationPath = aPathParts[aPathParts.length - 1];\n\t\taPathParts.splice(-1, 1);\n\t\tconst oNavigationRestrictions = getNavigationRestrictions(converterContext, sNavigationPath);\n\t\tconst oNavigationFilterRestrictions = oNavigationRestrictions && oNavigationRestrictions.FilterRestrictions;\n\t\toRet.RequiredProperties = oRet.RequiredProperties.concat(\n\t\t\tgetFilterRestrictions(oNavigationFilterRestrictions, \"RequiredProperties\") || []\n\t\t);\n\t\toRet.NonFilterableProperties = oRet.NonFilterableProperties.concat(\n\t\t\tgetFilterRestrictions(oNavigationFilterRestrictions, \"NonFilterableProperties\") || []\n\t\t);\n\t\toRet.FilterAllowedExpressions = {\n\t\t\t...(getFilterAllowedExpression(oNavigationFilterRestrictions) || {}),\n\t\t\t...oRet.FilterAllowedExpressions\n\t\t};\n\t}\n\tconst aRequiredProps = oRet.RequiredProperties;\n\tconst aNonFilterableProps = oRet.NonFilterableProperties;\n\tconst aFetchedProperties: PropertyInfo[] = [];\n\n\t// process the fields to add necessary properties\n\tpropertyInfoFields.forEach(function (propertyInfoField) {\n\t\tconst sPropertyPath = propertyInfoField.conditionPath.replace(/[+*]/g, \"\");\n\t\tif (!aNonFilterableProps.includes(sPropertyPath)) {\n\t\t\tconst oPropertyInfo = assignDataTypeToPropertyInfo(propertyInfoField, converterContext, aRequiredProps, aTypeConfig);\n\t\t\taFetchedProperties.push(oPropertyInfo);\n\t\t}\n\t});\n\n\t//add edit\n\tconst dataModelObjectPath = converterContext.getDataModelObjectPath();\n\tif (ModelHelper.isObjectPathDraftSupported(dataModelObjectPath)) {\n\t\taFetchedProperties.push(getEditStateFilterPropertyInfo());\n\t}\n\t// add search\n\tconst searchRestrictions = getSearchRestrictions(converterContext);\n\tconst hideBasicSearch = Boolean(searchRestrictions && !searchRestrictions.Searchable);\n\tif (sEntitySetPath && hideBasicSearch !== true) {\n\t\tif (!searchRestrictions || searchRestrictions?.Searchable) {\n\t\t\taFetchedProperties.push(getSearchFilterPropertyInfo());\n\t\t}\n\t}\n\n\treturn aFetchedProperties;\n};\n\nexport const insertCustomManifestElements = function (\n\tfilterFields: ManifestFilterField[],\n\tentityType: EntityType,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tannotationPath: string\n): ManifestFilterField[] {\n\tconst manifestFilterFields = getManifestFilterFields(entityType, converterContext, annotationPath);\n\t_getMissingLabelForManifestFilterFields(filterFields, manifestFilterFields);\n\treturn insertCustomElements(filterFields, manifestFilterFields, {\n\t\tavailability: OverrideType.overwrite,\n\t\tlabel: OverrideType.overwrite,\n\t\ttype: OverrideType.overwrite,\n\t\tposition: OverrideType.overwrite,\n\t\tslotName: OverrideType.overwrite,\n\t\tdocumentRefText: OverrideType.overwrite,\n\t\ttemplate: OverrideType.overwrite,\n\t\tsettings: OverrideType.overwrite,\n\t\tvisualFilter: OverrideType.overwrite,\n\t\trequired: OverrideType.overwrite\n\t});\n};\n\nexport const sortPropertyInfosByGroupLabel = (propertyInfos: PropertyInfo[]): void => {\n\tpropertyInfos.sort(function (a: FilterGroup, b: FilterGroup) {\n\t\tconst aGroupLabelIsSet = a.groupLabel !== undefined && a.groupLabel !== null;\n\t\tconst bGroupLabelIsSet = b.groupLabel !== undefined && b.groupLabel !== null;\n\t\tif (!aGroupLabelIsSet && !bGroupLabelIsSet) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (aGroupLabelIsSet && !bGroupLabelIsSet) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (!aGroupLabelIsSet && bGroupLabelIsSet) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn a.groupLabel!.localeCompare(b.groupLabel!);\n\t});\n};\n\n/**\n * Retrieve the configuration for the selection fields that will be used within the filter bar\n * This configuration takes into account the annotation and the selection variants.\n * @param converterContext\n * @param lrTables\n * @param annotationPath\n * @param [includeHidden]\n * @param [lineItemTerm]\n * @returns An array of selection fields\n */\nexport const getSelectionFields = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tlrTables: TableVisualization[] = [],\n\tannotationPath = \"\",\n\tincludeHidden?: boolean,\n\tlineItemTerm?: string\n): { selectionFields: FilterField[]; sPropertyInfo: string } {\n\tconst oAnnotatedSelectionFieldData = getAnnotatedSelectionFieldData(\n\t\tconverterContext,\n\t\tlrTables,\n\t\tannotationPath,\n\t\tincludeHidden,\n\t\tlineItemTerm\n\t);\n\tconst parameterFields = _getParameterFields(converterContext);\n\tlet propertyInfoFields: FilterField[] = oAnnotatedSelectionFieldData.propertyInfoFields;\n\tconst entityType = oAnnotatedSelectionFieldData.entityType;\n\n\tpropertyInfoFields = parameterFields.concat(propertyInfoFields);\n\n\tpropertyInfoFields = insertCustomManifestElements(propertyInfoFields, entityType, converterContext, annotationPath);\n\n\tconst aFetchedProperties = processSelectionFields(\n\t\tpropertyInfoFields,\n\t\tconverterContext,\n\t\toAnnotatedSelectionFieldData.defaultFilterFields\n\t);\n\tsortPropertyInfosByGroupLabel(aFetchedProperties);\n\n\tlet sFetchProperties = JSON.stringify(aFetchedProperties);\n\tsFetchProperties = sFetchProperties.replace(/\\{/g, \"\\\\{\");\n\tsFetchProperties = sFetchProperties.replace(/\\}/g, \"\\\\}\");\n\tconst sPropertyInfo = sFetchProperties;\n\t// end of propertyFields processing\n\n\t// to populate selection fields\n\tlet propSelectionFields: FilterField[] = JSON.parse(JSON.stringify(oAnnotatedSelectionFieldData.propertyInfoFields));\n\tpropSelectionFields = parameterFields.concat(propSelectionFields);\n\t// create a map of properties to be used in selection variants\n\tconst excludedFilterProperties = oAnnotatedSelectionFieldData.excludedFilterProperties;\n\tconst filterFacets = entityType?.annotations?.UI?.FilterFacets;\n\tlet filterFacetMap: Record<string, FilterGroup> = {};\n\n\tconst aFieldGroups = converterContext.getAnnotationsByTerm(\"UI\", UIAnnotationTerms.FieldGroup) as FieldGroup[];\n\n\tif (filterFacets === undefined || filterFacets.length < 0) {\n\t\tfor (const i in aFieldGroups) {\n\t\t\tfilterFacetMap = {\n\t\t\t\t...filterFacetMap,\n\t\t\t\t...getFieldGroupFilterGroups(aFieldGroups[i])\n\t\t\t};\n\t\t}\n\t} else {\n\t\tfilterFacetMap = filterFacets.reduce((previousValue: Record<string, FilterGroup>, filterFacet: ReferenceFacetTypes) => {\n\t\t\tfor (let i = 0; i < (filterFacet?.Target?.$target as FieldGroup)?.Data?.length; i++) {\n\t\t\t\tpreviousValue[((filterFacet?.Target?.$target as FieldGroup)?.Data[i] as DataFieldTypes)?.Value?.path] = {\n\t\t\t\t\tgroup: filterFacet?.ID?.toString(),\n\t\t\t\t\tgroupLabel: filterFacet?.Label?.toString()\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn previousValue;\n\t\t}, {});\n\t}\n\n\t// create a map of all potential filter fields based on...\n\tconst filterFields: Record<string, FilterField> = oAnnotatedSelectionFieldData.filterFields;\n\n\t// finally create final list of filter fields by adding the SelectionFields first (order matters)...\n\tconst allFilters = propSelectionFields\n\n\t\t// ...and adding remaining filter fields, that are not used in a SelectionVariant (order doesn't matter)\n\t\t.concat(\n\t\t\tObject.keys(filterFields)\n\t\t\t\t.filter((propertyPath) => !excludedFilterProperties.has(propertyPath))\n\t\t\t\t.map((propertyPath) => {\n\t\t\t\t\treturn Object.assign(filterFields[propertyPath], filterFacetMap[propertyPath]);\n\t\t\t\t})\n\t\t);\n\n\tconst selectionFields = insertCustomManifestElements(allFilters, entityType, converterContext, annotationPath);\n\n\t// Add caseSensitive property to all selection fields.\n\tconst isCaseSensitive = isFilteringCaseSensitive(converterContext);\n\tselectionFields.forEach((filterField) => {\n\t\tfilterField.caseSensitive = isCaseSensitive;\n\t});\n\n\treturn { selectionFields, sPropertyInfo };\n};\n\n/**\n * Determines whether the filter bar inside a value help dialog should be expanded. This is true if one of the following conditions hold:\n * (1) a filter property is mandatory,\n * (2) no search field exists (entity isn't search enabled),\n * (3) when the data isn't loaded by default (annotation FetchValues = 2).\n * @param converterContext The converter context\n * @param filterRestrictionsAnnotation The FilterRestriction annotation\n * @param valueList The ValueList annotation\n * @returns The value for expandFilterFields\n */\nexport const getExpandFilterFields = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tfilterRestrictionsAnnotation: FilterRestrictions | undefined,\n\tvalueList: MetaModelType<ValueList>\n): boolean {\n\tconst requiredProperties = getFilterRestrictions(filterRestrictionsAnnotation, \"RequiredProperties\");\n\tconst searchRestrictions = getSearchRestrictions(converterContext);\n\tconst hideBasicSearch = Boolean(searchRestrictions && !searchRestrictions.Searchable);\n\tif (requiredProperties.length > 0 || hideBasicSearch || valueList?.FetchValues === 2) {\n\t\treturn true;\n\t}\n\treturn false;\n};\n"],"mappings":"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","ignoreList":[]}