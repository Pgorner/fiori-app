{"version":3,"file":"ManifestWrapper.js","names":["ensureAnnotationPath","obj","property","propertyValue","Array","isArray","forEach","entry","includes","ManifestWrapper","oManifestSettings","mergeFn","this","views","paths","path","controlConfiguration","Object","values","quickVariantSelection","tableSettings","_proto","prototype","getSapFeManifestConfiguration","sapFeManifestConfiguration","getTemplateType","converterType","isFilterBarHidden","hideFilterBar","useHiddenFilterBar","isDesktop","isPhone","getFormContainer","facetTarget","getHeaderFacets","facets","content","header","getHeaderActions","actions","getFooterActions","footer","getVariantManagement","variantManagement","VariantManagementType","None","getDefaultTemplateAnnotationPath","defaultTemplateAnnotationPath","getControlConfiguration","sAnnotationPath","getNavigationConfiguration","navigationOrCollectionName","navigation","getViewLevel","viewLevel","getContentDensities","contentDensities","cozy","compact","isFclEnabled","fclEnabled","isCondensedLayoutCompliant","manifestContentDensity","shellContentDensity","isSmallDevice","Device","system","desktop","resize","width","isCompactType","getSectionLayout","sectionLayout","getSections","sections","body","isHeaderEditable","getShowObjectPageHeader","editableHeaderContent","getUseTextForNoDataMessages","useTextForNoDataMessages","getShowAnchorBar","anchorBarVisible","undefined","useIconTabBar","visible","getEnableLazyLoading","enableLazyLoading","getTransportSelection","transportSelection","getViewConfiguration","getStickyMultiTabHeaderConfiguration","bStickyMultiTabHeader","stickyMultiTabHeader","getKPIConfiguration","keyPerformanceIndicators","getFilterConfiguration","configPath","arguments","length","hasMultipleEntitySets","viewConfig","manifestEntitySet","entitySet","find","template","hasMultipleVisualizations","primary","secondary","some","primaryPath","secondaryPath","getContextPath","contextPath","isViewPathConfiguration","isCombinedViewConfiguration","isCustomViewConfiguration","multipleViewsConfiguration","getEntitySet"],"sources":["./ManifestWrapper.ts"],"sourcesContent":["import type {\n\tBaseManifestSettings,\n\tCombinedViewPathConfiguration,\n\tContentDensitiesType,\n\tControlManifestConfiguration,\n\tCustomViewTemplateConfiguration,\n\tFilterManifestConfiguration,\n\tFormManifestConfiguration,\n\tKPIConfiguration,\n\tListReportManifestSettings,\n\tManifestAction,\n\tManifestHeaderFacet,\n\tManifestSection,\n\tMultipleViewsConfiguration,\n\tNavigationSettingsConfiguration,\n\tObjectPageManifestSettings,\n\tSingleViewPathConfiguration,\n\tTableManifestConfiguration,\n\tTemplateType,\n\tTransportSelectionDefinition,\n\tViewConfiguration\n} from \"sap/fe/core/converters/ManifestSettings\";\nimport { VariantManagementType } from \"sap/fe/core/converters/ManifestSettings\";\nimport type { ConfigurableRecord } from \"sap/fe/core/converters/helpers/ConfigurableObject\";\nimport Device from \"sap/ui/Device\";\nimport type { ManifestContent } from \"sap/ui/core/Manifest\";\n\nfunction ensureAnnotationPath<T extends object>(obj: T | undefined, property: keyof T): void {\n\tconst propertyValue = obj?.[property];\n\tif (Array.isArray(propertyValue)) {\n\t\tpropertyValue.forEach((entry) => ensureAnnotationPath(entry, \"annotationPath\"));\n\t} else if (propertyValue && typeof propertyValue === \"string\" && !propertyValue.includes(\"@\")) {\n\t\tobj[property] = (\"@\" + propertyValue) as T[keyof T];\n\t}\n}\n\n/**\n *\n */\nclass ManifestWrapper {\n\t/**\n\t * Creates a wrapper object to ensure the data returned from the manifest is consistent and everything is merged correctly.\n\t * @param oManifestSettings The manifest settings for the current page\n\t * @param mergeFn A function that will be used to perform the merge\n\t * @returns The manifest wrapper object\n\t */\n\tconstructor(\n\t\tprivate oManifestSettings: BaseManifestSettings,\n\t\tprivate mergeFn: Function\n\t) {\n\t\t// Ensure that properties which are meant to contain an *annotation* path contain a '@'\n\t\tensureAnnotationPath(this.oManifestSettings, \"defaultTemplateAnnotationPath\");\n\n\t\t(this.oManifestSettings as ListReportManifestSettings).views?.paths.forEach((path) => {\n\t\t\tensureAnnotationPath(path as SingleViewPathConfiguration, \"annotationPath\");\n\t\t\tensureAnnotationPath(path as CombinedViewPathConfiguration, \"primary\");\n\t\t\tensureAnnotationPath(path as CombinedViewPathConfiguration, \"secondary\");\n\t\t});\n\n\t\tif (this.oManifestSettings.controlConfiguration) {\n\t\t\tfor (const controlConfiguration of Object.values(this.oManifestSettings.controlConfiguration)) {\n\t\t\t\tconst quickVariantSelection = (controlConfiguration as TableManifestConfiguration).tableSettings?.quickVariantSelection;\n\t\t\t\tensureAnnotationPath(quickVariantSelection, \"paths\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the global manifest content sap.fe.\n\t * @returns The Object manifest sap.fe\n\t */\n\tgetSapFeManifestConfiguration(): ManifestContent[\"sap.fe\"] | undefined {\n\t\treturn this.oManifestSettings.sapFeManifestConfiguration;\n\t}\n\n\t/**\n\t * Returns the current template type.\n\t * @returns The type of the current template\n\t */\n\tgetTemplateType(): TemplateType {\n\t\treturn this.oManifestSettings.converterType;\n\t}\n\n\t/**\n\t * Checks whether the current template should display the filter bar.\n\t * @returns `true` if the filter bar should be hidden\n\t */\n\tisFilterBarHidden(): boolean {\n\t\treturn !!(this.oManifestSettings as ListReportManifestSettings)?.hideFilterBar;\n\t}\n\n\tuseHiddenFilterBar(): boolean {\n\t\treturn !!(this.oManifestSettings as ListReportManifestSettings)?.useHiddenFilterBar;\n\t}\n\n\t/**\n\t * Checks whether the current environment is a desktop or not.\n\t * @returns `true` if we are on a desktop\n\t */\n\tisDesktop(): boolean {\n\t\treturn !!this.oManifestSettings.isDesktop;\n\t}\n\n\t/**\n\t * Checks whether the current environment is a mobile phone or not.\n\t * @returns `true` if we are on a mobile phone\n\t */\n\tisPhone(): boolean {\n\t\treturn !!this.oManifestSettings.isPhone;\n\t}\n\n\t/**\n\t * Retrieves the form containers (field groups or identification) defined in the manifest.\n\t * @param facetTarget The target annotation path for this form\n\t * @returns A set of form containers defined in the manifest indexed by an iterable key\n\t */\n\tgetFormContainer(facetTarget: string): FormManifestConfiguration {\n\t\treturn this.oManifestSettings.controlConfiguration?.[facetTarget] as FormManifestConfiguration;\n\t}\n\n\t/**\n\t * Retrieves the header facets defined in the manifest.\n\t * @returns A set of header facets defined in the manifest indexed by an iterable key\n\t */\n\tgetHeaderFacets(): ConfigurableRecord<ManifestHeaderFacet> {\n\t\treturn this.mergeFn(\n\t\t\t{},\n\t\t\tthis.oManifestSettings.controlConfiguration?.[\"@com.sap.vocabularies.UI.v1.HeaderFacets\"]?.facets,\n\t\t\t(this.oManifestSettings as ObjectPageManifestSettings).content?.header?.facets\n\t\t);\n\t}\n\n\t/**\n\t * Retrieves the header actions defined in the manifest.\n\t * @returns A set of actions defined in the manifest indexed by an iterable key\n\t */\n\tgetHeaderActions(): ConfigurableRecord<ManifestAction> {\n\t\treturn this.oManifestSettings.content?.header?.actions || {};\n\t}\n\n\t/**\n\t * Retrieves the footer actions defined in the manifest.\n\t * @returns A set of actions defined in the manifest indexed by an iterable key\n\t */\n\tgetFooterActions(): ConfigurableRecord<ManifestAction> {\n\t\treturn this.oManifestSettings.content?.footer?.actions || {};\n\t}\n\n\t/**\n\t * Retrieves the variant management as defined in the manifest.\n\t * @returns A type of variant management\n\t */\n\tgetVariantManagement(): VariantManagementType {\n\t\treturn this.oManifestSettings.variantManagement || VariantManagementType.None;\n\t}\n\n\t/**\n\t * Retrieves the annotation Path for the SPV in the manifest.\n\t * @returns The annotation path for the default SPV or undefined.\n\t */\n\tgetDefaultTemplateAnnotationPath(): string | undefined {\n\t\treturn this.oManifestSettings.defaultTemplateAnnotationPath;\n\t}\n\n\t/**\n\t * Retrieves the control configuration as defined in the manifest for a specific annotation path.\n\t * @param sAnnotationPath The relative annotation path\n\t * @returns The control configuration\n\t */\n\tgetControlConfiguration<T = ControlManifestConfiguration>(sAnnotationPath: string): T {\n\t\treturn (this.oManifestSettings?.controlConfiguration?.[sAnnotationPath] || {}) as T;\n\t}\n\n\t/**\n\t * Retrieves the configured settings for a given navigation target.\n\t * @param navigationOrCollectionName The name of the navigation to check\n\t * @returns The navigation settings configuration\n\t */\n\tgetNavigationConfiguration(navigationOrCollectionName: string): NavigationSettingsConfiguration {\n\t\treturn this.oManifestSettings?.navigation?.[navigationOrCollectionName] || {};\n\t}\n\n\t/**\n\t * Retrieves the view level.\n\t * @returns The current view level\n\t */\n\tgetViewLevel(): number {\n\t\treturn this.oManifestSettings?.viewLevel || -1;\n\t}\n\n\t/**\n\t * Retrieves the contentDensities setting of the application.\n\t * @returns The current content density\n\t */\n\tgetContentDensities(): ContentDensitiesType {\n\t\treturn (\n\t\t\tthis.oManifestSettings?.contentDensities || {\n\t\t\t\tcozy: false,\n\t\t\t\tcompact: false\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * Checks whether we are in FCL mode or not.\n\t * @returns `true` if we are in FCL\n\t */\n\tisFclEnabled(): boolean {\n\t\treturn !!this.oManifestSettings?.fclEnabled;\n\t}\n\n\t/**\n\t * Checks whether the current settings (application / shell) allows us to use condensed layout.\n\t * @returns `true` if we can use the condensed layout, false otherwise\n\t */\n\tisCondensedLayoutCompliant(): boolean {\n\t\tconst manifestContentDensity = this.oManifestSettings?.contentDensities || {\n\t\t\tcozy: false,\n\t\t\tcompact: false\n\t\t};\n\t\tconst shellContentDensity = this.oManifestSettings?.shellContentDensity || \"compact\";\n\t\tlet isCondensedLayoutCompliant = true;\n\t\tconst isSmallDevice = !Device.system.desktop || Device.resize.width <= 320;\n\t\tif (\n\t\t\t(manifestContentDensity?.cozy === true && manifestContentDensity?.compact !== true) ||\n\t\t\tshellContentDensity === \"cozy\" ||\n\t\t\tisSmallDevice\n\t\t) {\n\t\t\tisCondensedLayoutCompliant = false;\n\t\t}\n\t\treturn isCondensedLayoutCompliant;\n\t}\n\n\t/**\n\t * Checks whether the current settings (application / shell) uses compact mode as content density.\n\t * @returns `true` if compact mode is set as content density, false otherwise\n\t */\n\tisCompactType(): boolean {\n\t\tconst manifestContentDensity = this.getContentDensities();\n\t\tconst shellContentDensity = this.oManifestSettings?.shellContentDensity || \"compact\";\n\t\treturn manifestContentDensity.compact !== false || shellContentDensity === \"compact\" ? true : false;\n\t}\n\n\t//region OP Specific\n\n\t/**\n\t * Retrieves the section layout defined in the manifest.\n\t * @returns The type of section layout of the object page\n\t */\n\tgetSectionLayout(): string {\n\t\treturn (this.oManifestSettings as ObjectPageManifestSettings).sectionLayout ?? \"Tabs\";\n\t}\n\n\t/**\n\t * Retrieves the sections defined in the manifest.\n\t * @returns A set of manifest sections indexed by an iterable key\n\t */\n\tgetSections(): ConfigurableRecord<ManifestSection> {\n\t\treturn this.mergeFn(\n\t\t\t{},\n\t\t\tthis.oManifestSettings.controlConfiguration?.[\"@com.sap.vocabularies.UI.v1.Facets\"]?.sections,\n\t\t\t(this.oManifestSettings as ObjectPageManifestSettings).content?.body?.sections\n\t\t);\n\t}\n\n\t/**\n\t * Returns true of the header of the application is editable and should appear in the facets.\n\t * @returns `true` if the header if editable\n\t */\n\tisHeaderEditable(): boolean {\n\t\treturn this.getShowObjectPageHeader() && !!(this.oManifestSettings as ObjectPageManifestSettings).editableHeaderContent;\n\t}\n\n\t/**\n\t * Returns true if we should use text instead of IllustratedMessage for the noData aggregation in the whole page.\n\t * @returns `true` if we should use text for noData aggregation\n\t */\n\tgetUseTextForNoDataMessages(): boolean {\n\t\treturn (this.oManifestSettings as ObjectPageManifestSettings).useTextForNoDataMessages ?? false;\n\t}\n\n\t/**\n\t * Returns true if we should show the object page header.\n\t * @returns `true` if the header should be displayed\n\t */\n\tgetShowAnchorBar(): boolean {\n\t\treturn (this.oManifestSettings as ObjectPageManifestSettings).content?.header?.anchorBarVisible !== undefined\n\t\t\t? !!(this.oManifestSettings as ObjectPageManifestSettings).content?.header?.anchorBarVisible\n\t\t\t: true;\n\t}\n\n\t/**\n\t * Defines whether or not the section will be displayed in different tabs.\n\t * @returns `true` if the icon tab bar should be used instead of scrolling\n\t */\n\tuseIconTabBar(): boolean {\n\t\treturn this.getShowAnchorBar() && (this.oManifestSettings as ObjectPageManifestSettings).sectionLayout === \"Tabs\";\n\t}\n\n\t/**\n\t * Returns true if the object page header is to be shown.\n\t * @returns `true` if the object page header is to be displayed\n\t */\n\tgetShowObjectPageHeader(): boolean {\n\t\treturn (this.oManifestSettings as ObjectPageManifestSettings).content?.header?.visible !== undefined\n\t\t\t? !!(this.oManifestSettings as ObjectPageManifestSettings).content?.header?.visible\n\t\t\t: true;\n\t}\n\n\t/**\n\t * Returns whether the lazy loader should be enabled for this page or not.\n\t * @returns `true` if the lazy loader should be enabled\n\t */\n\tgetEnableLazyLoading(): boolean {\n\t\treturn this.oManifestSettings.enableLazyLoading ?? false;\n\t}\n\n\t/**\n\t * Returns the transport selection definition.\n\t * @returns Definition with transport property and select action\n\t */\n\tgetTransportSelection(): TransportSelectionDefinition | undefined {\n\t\treturn (this.oManifestSettings as ObjectPageManifestSettings).content?.transportSelection;\n\t}\n\n\t//endregion OP Specific\n\n\t//region LR Specific\n\n\t/**\n\t * Retrieves the multiple view configuration from the manifest.\n\t * @returns The views that represent the manifest object\n\t */\n\tgetViewConfiguration(): MultipleViewsConfiguration | undefined {\n\t\treturn (this.oManifestSettings as ListReportManifestSettings).views;\n\t}\n\n\t/**\n\t * Retrieves the stickyMultiTabHeader configuration from the manifest.\n\t * @returns Returns True if stickyMultiTabHeader is enabled or undefined\n\t */\n\tgetStickyMultiTabHeaderConfiguration(): boolean {\n\t\tconst bStickyMultiTabHeader = (this.oManifestSettings as ListReportManifestSettings).stickyMultiTabHeader;\n\t\treturn bStickyMultiTabHeader !== undefined ? bStickyMultiTabHeader : true;\n\t}\n\n\t/**\n\t * Retrieves the KPI configuration from the manifest.\n\t * @returns Returns a map between KPI names and their respective configuration\n\t */\n\tgetKPIConfiguration(): { [kpiName: string]: KPIConfiguration } {\n\t\treturn (this.oManifestSettings as ListReportManifestSettings).keyPerformanceIndicators || {};\n\t}\n\n\t/**\n\t * Retrieves the filter configuration from the manifest.\n\t * @param configPath\n\t * @returns The filter configuration from the manifest\n\t */\n\tgetFilterConfiguration(configPath = \"@com.sap.vocabularies.UI.v1.SelectionFields\"): FilterManifestConfiguration {\n\t\treturn this.getControlConfiguration<FilterManifestConfiguration>(configPath);\n\t}\n\n\t/**\n\t * Returns true if there are multiple entity sets to be displayed.\n\t * @returns `true` if there are multiple entity sets\n\t */\n\thasMultipleEntitySets(): boolean {\n\t\tconst viewConfig = this.getViewConfiguration() || { paths: [] };\n\t\tconst manifestEntitySet = this.oManifestSettings.entitySet;\n\t\treturn (\n\t\t\tviewConfig.paths.find((path: ViewConfiguration) => {\n\t\t\t\tif ((path as CustomViewTemplateConfiguration)?.template) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t} else if (this.hasMultipleVisualizations(path as CombinedViewPathConfiguration)) {\n\t\t\t\t\tconst { primary, secondary } = path as CombinedViewPathConfiguration;\n\t\t\t\t\treturn (\n\t\t\t\t\t\tprimary.some((primaryPath) => primaryPath.entitySet && primaryPath.entitySet !== manifestEntitySet) ||\n\t\t\t\t\t\tsecondary.some((secondaryPath) => secondaryPath.entitySet && secondaryPath.entitySet !== manifestEntitySet)\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tpath = path as SingleViewPathConfiguration;\n\t\t\t\t\treturn path.entitySet && path.entitySet !== manifestEntitySet;\n\t\t\t\t}\n\t\t\t}) !== undefined\n\t\t);\n\t}\n\n\t/**\n\t * Returns the context path for the template if it is specified in the manifest.\n\t * @returns The context path for the template\n\t */\n\tgetContextPath(): string | undefined {\n\t\treturn this.oManifestSettings?.contextPath;\n\t}\n\n\t/**\n\t * Returns true if the configuration is a single path configuration.\n\t * @param viewConfig The view configuration\n\t * @returns `true` if this is a single path configuration\n\t */\n\tisViewPathConfiguration(viewConfig: ViewConfiguration): viewConfig is SingleViewPathConfiguration {\n\t\treturn \"annotationPath\" in viewConfig && !(\"primary\" in viewConfig) && !(\"secondary\" in viewConfig);\n\t}\n\n\t/**\n\t * Returns true if the configuration is a combined configuration.\n\t * @param viewConfig The view configuration\n\t * @returns `true` if this is a combined configuration\n\t */\n\tisCombinedViewConfiguration(viewConfig: ViewConfiguration): viewConfig is CombinedViewPathConfiguration {\n\t\treturn !this.isCustomViewConfiguration(viewConfig) && !this.isViewPathConfiguration(viewConfig)\n\t\t\t? viewConfig.primary?.length > 0 && viewConfig.secondary?.length > 0\n\t\t\t: false;\n\t}\n\n\t/**\n\t * Returns true if the configuration is a custom configuration.\n\t * @param viewConfig The view configuration\n\t * @returns `true` if this is a custom configuration\n\t */\n\tisCustomViewConfiguration(viewConfig: ViewConfiguration): viewConfig is CustomViewTemplateConfiguration {\n\t\treturn \"template\" in viewConfig;\n\t}\n\n\t/**\n\t * Returns true if there are multiple visualizations.\n\t * @param viewConfig The path from the view\n\t * @returns `true` if there are multiple visualizations\n\t */\n\thasMultipleVisualizations(viewConfig?: ViewConfiguration): boolean {\n\t\tif (!viewConfig) {\n\t\t\tconst multipleViewsConfiguration = this.getViewConfiguration() || { paths: [] };\n\t\t\treturn multipleViewsConfiguration.paths.some((path) => this.isCombinedViewConfiguration(path));\n\t\t}\n\t\treturn this.isCombinedViewConfiguration(viewConfig);\n\t}\n\n\t/**\n\t * Retrieves the entity set defined in the manifest.\n\t * @returns The entity set defined in the manifest\n\t */\n\tgetEntitySet(): string | undefined {\n\t\treturn this.oManifestSettings.entitySet;\n\t}\n\n\t//end region LR Specific\n}\n\nexport default ManifestWrapper;\n"],"mappings":"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","ignoreList":[]}