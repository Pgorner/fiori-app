{"version":3,"file":"ObjectPageConverter.js","names":["getSectionKey","facetDefinition","fallback","ID","toString","Label","createEditableHeaderSection","converterContext","allHeaderFacets","editableHeaderSectionID","getEditableHeaderSectionID","headerFacets","getEntityType","annotations","UI","HeaderFacets","headerfacetSubSections","createSubSections","customHeaderFacetSubSections","createCustomHeaderFacetSubSections","allHeaderFacetsSubSections","length","i","forEach","item","visible","push","key","slice","lastIndexOf","customItem","headerSection","id","title","compileExpression","IsEditable","subSections","_exports","getSectionsFromAnnotation","entityType","objectPageSections","Facets","map","getSectionFromAnnotation","getUseSingleTextAreaFieldAsNotes","manifestWrapper","sectionKey","sectionsInManifest","getSections","sectionSettings","useSingleTextAreaFieldAsNotes","facet","sectionID","getSectionID","hiddenExpression","getExpressionFromAnnotation","Hidden","path","singletonPathVisitor","getConvertedTypes","getManifestWrapper","section","undefined","showTitle","not","equal","getSectionsFromManifest","manifestSections","sections","Object","keys","manifestSectionKey","getSectionFromManifest","customSectionDefinition","customSectionID","getCustomSectionID","position","placement","Placement","After","manifestSubSections","createCustomSubSections","customSection","onSectionLoaded","getHeaderActions","annotationHeaderActions","getHeaderDefaultActions","actionOverwriteConfig","isNavigable","OverrideType","overwrite","enabled","defaultValuesExtensionFunction","command","menu","manifestActions","getActionsFromManifest","getHiddenHeaderActions","annotationMenuActionItems","getAnnotationMenuActionItems","matchingManifestActions","getMatchingManifestAction","actions","overwrittenMenuActionItems","insertCustomElements","headerActions","prepareMenuActions","removeDuplicateActions","getVisibilityEnablementMenuActions","commandActions","getFooterActions","aAnnotationFooterActions","getFooterDefaultActions","getViewLevel","footerActions","_getSubSectionVisualization","subSection","presentation","visualizations","_isFacetHasNonResponsiveTableVisible","dataVisualizationSubSection","subSectionVisualization","type","control","_setNonResponsiveTableVisualizationInformation","sectionLayout","tableControlConfiguration","dataVisualizationOptions","rowCountMode","useCondensedTableLayout","_setNonResponsiveTableWithMixFacetsInformation","firstSection","content","SubSectionType","DataVisualization","tableControl","_setNonResponsiveTableSubSectionControlConfiguration","_removeCondensedFromSubSections","singleVisualization","VisualizationType","Table","singleContent","merge","sideContent","objectPageLazyLoaderEnabled","getSectionLayout","firstForm","find","element","Form","hasHeaderContent","getHeaderFacets","getShowHeaderContentExpression","ifElse","constant","isHeaderEditable","getShowHeaderContent","getExpandedImageVisible","convertPage","getHeaderFacetsFromAnnotations","getHeaderFacetsFromManifest","HeaderInfo","template","TemplateType","ObjectPage","header","getShowObjectPageHeader","facets","showContent","hasContent","avatar","getAvatar","expandedImageVisible","headerCommandActions","footerCommandActions","showAnchorBar","getShowAnchorBar","useIconTabBar","transportSelection","getTransportSelection"],"sources":["./ObjectPageConverter.ts"],"sourcesContent":["import type { EntityType } from \"@sap-ux/vocabularies-types\";\nimport type { FacetTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport type { BindingToolkitExpression, CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { compileExpression, constant, equal, getExpressionFromAnnotation, ifElse, not } from \"sap/fe/base/BindingToolkit\";\nimport type { BaseAction, CombinedAction, CustomAction, OverrideTypeAction } from \"sap/fe/core/converters/controls/Common/Action\";\nimport {\n\tgetActionsFromManifest,\n\tgetAnnotationMenuActionItems,\n\tgetMatchingManifestAction,\n\tgetVisibilityEnablementMenuActions,\n\tprepareMenuActions,\n\tremoveDuplicateActions\n} from \"sap/fe/core/converters/controls/Common/Action\";\nimport type { TableVisualization } from \"sap/fe/core/converters/controls/Common/Table\";\nimport {\n\tgetFooterDefaultActions,\n\tgetHeaderDefaultActions,\n\tgetHiddenHeaderActions\n} from \"sap/fe/core/converters/objectPage/HeaderAndFooterAction\";\nimport { UI, singletonPathVisitor } from \"../../helpers/BindingHelper\";\nimport type ConverterContext from \"../ConverterContext\";\nimport type { ManifestSection, ManifestSubSection, TransportSelectionDefinition } from \"../ManifestSettings\";\nimport { TemplateType, VisualizationType } from \"../ManifestSettings\";\nimport type ManifestWrapper from \"../ManifestWrapper\";\nimport type { PageContextPathTarget, PageDefinition } from \"../TemplateConverter\";\nimport type { Avatar } from \"../controls/ObjectPage/Avatar\";\nimport { getAvatar } from \"../controls/ObjectPage/Avatar\";\nimport type { ObjectPageHeaderFacet } from \"../controls/ObjectPage/HeaderFacet\";\nimport { getHeaderFacetsFromAnnotations, getHeaderFacetsFromManifest } from \"../controls/ObjectPage/HeaderFacet\";\nimport type {\n\tCustomObjectPageSection,\n\tDataVisualizationSubSection,\n\tFormSubSection,\n\tMixedSubSection,\n\tObjectPageSection,\n\tObjectPageSubSection\n} from \"../controls/ObjectPage/SubSection\";\nimport {\n\tSubSectionType,\n\tcreateCustomHeaderFacetSubSections,\n\tcreateCustomSubSections,\n\tcreateSubSections\n} from \"../controls/ObjectPage/SubSection\";\nimport type { ConfigurableRecord, Position } from \"../helpers/ConfigurableObject\";\nimport { OverrideType, Placement, insertCustomElements } from \"../helpers/ConfigurableObject\";\nimport { getCustomSectionID, getEditableHeaderSectionID, getSectionID } from \"../helpers/ID\";\n\nexport type ObjectPageDefinition = PageDefinition & {\n\theader: {\n\t\tvisible: boolean;\n\t\tsection?: ObjectPageSection;\n\t\tfacets: ObjectPageHeaderFacet[];\n\t\tactions: BaseAction[];\n\t\tshowContent: CompiledBindingToolkitExpression;\n\t\thasContent: boolean;\n\t\tavatar?: Avatar;\n\t\ttitle: {\n\t\t\texpandedImageVisible: CompiledBindingToolkitExpression;\n\t\t};\n\t};\n\tsections: ObjectPageSection[];\n\tfooterActions: BaseAction[];\n\theaderCommandActions: Record<string, CustomAction>;\n\tfooterCommandActions: Record<string, CustomAction>;\n\tshowAnchorBar: boolean;\n\tuseIconTabBar: boolean;\n\ttransportSelection?: TransportSelectionDefinition;\n};\n\nconst getSectionKey = (facetDefinition: FacetTypes, fallback: string): string => {\n\treturn facetDefinition.ID?.toString() || facetDefinition.Label?.toString() || fallback;\n};\n\n/**\n * Creates a section that represents the editable header part; it is only visible in edit mode.\n * @param converterContext The converter context\n * @param allHeaderFacets The converter context\n * @returns The section representing the editable header parts\n */\nexport function createEditableHeaderSection(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tallHeaderFacets: ObjectPageHeaderFacet[]\n): ObjectPageSection {\n\tconst editableHeaderSectionID = getEditableHeaderSectionID();\n\tconst headerFacets = converterContext.getEntityType().annotations?.UI?.HeaderFacets;\n\tconst headerfacetSubSections = headerFacets ? createSubSections(headerFacets, converterContext, true) : [];\n\tconst customHeaderFacetSubSections = createCustomHeaderFacetSubSections(converterContext);\n\tlet allHeaderFacetsSubSections: ObjectPageSubSection[] = [];\n\tif (customHeaderFacetSubSections.length > 0) {\n\t\t// merge annotation based header facets and custom header facets in the right order\n\t\tlet i = 0;\n\t\tallHeaderFacets.forEach(function (item) {\n\t\t\t// hidden header facets are not included in allHeaderFacets array => add them anyway\n\t\t\twhile (headerfacetSubSections.length > i && headerfacetSubSections[i].visible === \"false\") {\n\t\t\t\tallHeaderFacetsSubSections.push(headerfacetSubSections[i]);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif (\n\t\t\t\theaderfacetSubSections.length > i &&\n\t\t\t\t(item.key === headerfacetSubSections[i].key ||\n\t\t\t\t\t// for header facets with no id the keys of header facet and subsection are different => check only the last part\n\t\t\t\t\titem.key.slice(item.key.lastIndexOf(\"::\") + 2) ===\n\t\t\t\t\t\theaderfacetSubSections[i].key.slice(headerfacetSubSections[i].key.lastIndexOf(\"::\") + 2))\n\t\t\t) {\n\t\t\t\tallHeaderFacetsSubSections.push(headerfacetSubSections[i]);\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tcustomHeaderFacetSubSections.forEach(function (customItem) {\n\t\t\t\t\tif (item.key === customItem.key) {\n\t\t\t\t\t\tallHeaderFacetsSubSections.push(customItem);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t} else {\n\t\tallHeaderFacetsSubSections = headerfacetSubSections;\n\t}\n\tconst headerSection: ObjectPageSection = {\n\t\tid: editableHeaderSectionID,\n\t\tkey: \"EditableHeaderContent\",\n\t\ttitle: \"{sap.fe.i18n>T_COMMON_OBJECT_PAGE_HEADER_SECTION}\",\n\t\tvisible: compileExpression(UI.IsEditable),\n\t\tsubSections: allHeaderFacetsSubSections\n\t};\n\treturn headerSection;\n}\n\n/**\n * Creates a definition for a section based on the Facet annotation.\n * @param converterContext The converter context\n * @returns All sections\n */\nfunction getSectionsFromAnnotation(converterContext: ConverterContext<PageContextPathTarget>): ObjectPageSection[] {\n\tconst entityType = converterContext.getEntityType();\n\tconst objectPageSections: ObjectPageSection[] =\n\t\tentityType.annotations?.UI?.Facets?.map((facetDefinition: FacetTypes) =>\n\t\t\tgetSectionFromAnnotation(facetDefinition, converterContext)\n\t\t) || [];\n\treturn objectPageSections;\n}\n\n/**\n * Check manifest for setting 'useSingleTextAreaFieldAsNotes'.\n * If this setting is true, then the label of the single text-area field in a form container will be hidden.\n * @param manifestWrapper\n * @param sectionKey\n * @returns If the form element's label needs to be hidden.\n */\nfunction getUseSingleTextAreaFieldAsNotes(manifestWrapper: ManifestWrapper, sectionKey: string): boolean {\n\tconst sectionsInManifest = manifestWrapper.getSections();\n\tconst sectionSettings = sectionsInManifest?.[sectionKey];\n\treturn sectionSettings?.useSingleTextAreaFieldAsNotes ?? false;\n}\n\n/**\n * Create an annotation based section.\n * @param facet\n * @param converterContext\n * @returns The current section\n */\nfunction getSectionFromAnnotation(facet: FacetTypes, converterContext: ConverterContext<PageContextPathTarget>): ObjectPageSection {\n\tconst sectionID = getSectionID(facet);\n\tconst sectionKey = getSectionKey(facet, sectionID);\n\t// Set absolute binding path for Singleton references, otherwise the configured annotation path itself.\n\tconst hiddenExpression = getExpressionFromAnnotation(facet.annotations?.UI?.Hidden, [], false, (path: string) =>\n\t\tsingletonPathVisitor(path, converterContext.getConvertedTypes(), [])\n\t);\n\tconst useSingleTextAreaFieldAsNotes = getUseSingleTextAreaFieldAsNotes(converterContext.getManifestWrapper(), sectionKey);\n\tconst section: ObjectPageSection = {\n\t\tid: sectionID,\n\t\tkey: sectionKey,\n\t\ttitle: facet.Label ? compileExpression(getExpressionFromAnnotation(facet.Label)) : undefined,\n\t\tshowTitle: !!facet.Label,\n\t\tvisible: compileExpression(not(equal(hiddenExpression, true))),\n\t\tsubSections: createSubSections([facet], converterContext, undefined, useSingleTextAreaFieldAsNotes),\n\t\tuseSingleTextAreaFieldAsNotes: useSingleTextAreaFieldAsNotes\n\t};\n\treturn section;\n}\n\n/**\n * Creates section definitions based on the manifest definitions.\n * @param manifestSections The sections defined in the manifest\n * @param converterContext\n * @returns The sections defined in the manifest\n */\nfunction getSectionsFromManifest(\n\tmanifestSections: ConfigurableRecord<ManifestSection>,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): Record<string, CustomObjectPageSection> {\n\tconst sections: Record<string, CustomObjectPageSection> = {};\n\tObject.keys(manifestSections).forEach((manifestSectionKey) => {\n\t\tsections[manifestSectionKey] = getSectionFromManifest(manifestSections[manifestSectionKey], manifestSectionKey, converterContext);\n\t});\n\treturn sections;\n}\n\n/**\n * Create a manifest-based custom section.\n * @param customSectionDefinition\n * @param sectionKey\n * @param converterContext\n * @returns The current custom section\n */\nfunction getSectionFromManifest(\n\tcustomSectionDefinition: ManifestSection,\n\tsectionKey: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): CustomObjectPageSection {\n\tconst customSectionID = customSectionDefinition.id || getCustomSectionID(sectionKey);\n\tlet position: Position | undefined = customSectionDefinition.position;\n\tif (!position) {\n\t\tposition = {\n\t\t\tplacement: Placement.After\n\t\t};\n\t}\n\tlet manifestSubSections: Record<string, ManifestSubSection>;\n\tif (!customSectionDefinition.subSections) {\n\t\t// If there is no subSection defined, we add the content of the custom section as subsections\n\t\t// and make sure to set the visibility to 'true', as the actual visibility is handled by the section itself\n\t\tmanifestSubSections = {\n\t\t\t[sectionKey]: {\n\t\t\t\t...customSectionDefinition,\n\t\t\t\tposition: undefined,\n\t\t\t\tvisible: \"true\"\n\t\t\t}\n\t\t};\n\t} else {\n\t\tmanifestSubSections = customSectionDefinition.subSections;\n\t}\n\tconst subSections = createCustomSubSections(manifestSubSections, converterContext);\n\n\tconst customSection: CustomObjectPageSection = {\n\t\tid: customSectionID,\n\t\tkey: sectionKey,\n\t\ttitle: customSectionDefinition.title,\n\t\tshowTitle: !!customSectionDefinition.title,\n\t\tvisible: customSectionDefinition.visible !== undefined ? customSectionDefinition.visible : \"true\",\n\t\tposition: position,\n\t\tsubSections: subSections,\n\t\tonSectionLoaded: customSectionDefinition.onSectionLoaded\n\t};\n\treturn customSection;\n}\n\n/**\n * Retrieves the ObjectPage header actions (both the default ones and the custom ones defined in the manifest).\n * @param converterContext The converter context\n * @returns An array containing all the actions for this ObjectPage header\n */\nexport const getHeaderActions = function (converterContext: ConverterContext<PageContextPathTarget>): CombinedAction {\n\t// 1. Get actions from annotations\n\tconst annotationHeaderActions: BaseAction[] = getHeaderDefaultActions(converterContext);\n\tconst manifestWrapper = converterContext.getManifestWrapper();\n\tconst actionOverwriteConfig: OverrideTypeAction = {\n\t\tisNavigable: OverrideType.overwrite,\n\t\tenabled: OverrideType.overwrite,\n\t\tvisible: OverrideType.overwrite,\n\t\tdefaultValuesExtensionFunction: OverrideType.overwrite,\n\t\tcommand: OverrideType.overwrite,\n\t\tposition: OverrideType.overwrite,\n\t\tmenu: OverrideType.overwrite\n\t};\n\t// 2. Get actions from manifest\n\tconst manifestActions = getActionsFromManifest(\n\t\tmanifestWrapper.getHeaderActions(),\n\t\tconverterContext,\n\t\tannotationHeaderActions,\n\t\tundefined,\n\t\tundefined,\n\t\tgetHiddenHeaderActions(converterContext)\n\t);\n\t// 3. Get all annotation menu items\n\tconst annotationMenuActionItems = getAnnotationMenuActionItems(annotationHeaderActions);\n\t// 4. Find manifest actions which override any annotation menu items\n\tconst matchingManifestActions = getMatchingManifestAction(annotationMenuActionItems, manifestActions.actions);\n\t// 5. Get overridden annotation menu items\n\tconst overwrittenMenuActionItems = insertCustomElements(annotationMenuActionItems, matchingManifestActions, actionOverwriteConfig);\n\t// 6. Override all actions\n\tlet headerActions = insertCustomElements(annotationHeaderActions, manifestActions.actions, actionOverwriteConfig) as CustomAction[];\n\t// 7. Replace original menu items with their corresponding overridden menu items\n\tprepareMenuActions(headerActions, overwrittenMenuActionItems);\n\t// 8. Remove duplicate actions which are menu items\n\theaderActions = removeDuplicateActions(headerActions);\n\t// 9. Hide menus where all menu items are hidden\n\theaderActions = getVisibilityEnablementMenuActions(headerActions);\n\treturn {\n\t\tactions: headerActions,\n\t\tcommandActions: manifestActions.commandActions\n\t};\n};\n\n/**\n * Retrieves the ObjectPage footer actions (both the default ones and the custom ones defined in the manifest).\n * @param converterContext The converter context\n * @returns An array containing all the actions for this ObjectPage footer\n */\nexport const getFooterActions = function (converterContext: ConverterContext<PageContextPathTarget>): CombinedAction {\n\tconst manifestWrapper = converterContext.getManifestWrapper();\n\tconst aAnnotationFooterActions: BaseAction[] = getFooterDefaultActions(manifestWrapper.getViewLevel(), converterContext);\n\tconst manifestActions = getActionsFromManifest(manifestWrapper.getFooterActions(), converterContext, aAnnotationFooterActions);\n\n\tconst actionOverwriteConfig: OverrideTypeAction = {\n\t\tisNavigable: OverrideType.overwrite,\n\t\tenabled: OverrideType.overwrite,\n\t\tvisible: OverrideType.overwrite,\n\t\tdefaultValuesExtensionFunction: OverrideType.overwrite,\n\t\tcommand: OverrideType.overwrite,\n\t\tposition: OverrideType.overwrite\n\t};\n\tconst footerActions = insertCustomElements(aAnnotationFooterActions, manifestActions.actions, actionOverwriteConfig);\n\treturn {\n\t\tactions: footerActions,\n\t\tcommandActions: manifestActions.commandActions\n\t};\n};\n\nfunction _getSubSectionVisualization(subSection: DataVisualizationSubSection): TableVisualization {\n\treturn (subSection?.presentation?.visualizations[0] ? subSection.presentation.visualizations[0] : undefined) as TableVisualization;\n}\n\nfunction _isFacetHasNonResponsiveTableVisible(\n\tdataVisualizationSubSection: DataVisualizationSubSection,\n\tsubSectionVisualization: TableVisualization\n): boolean {\n\treturn (\n\t\tdataVisualizationSubSection.visible === \"true\" &&\n\t\tdataVisualizationSubSection?.presentation?.visualizations &&\n\t\tsubSectionVisualization?.type === \"Table\" &&\n\t\tsubSectionVisualization?.control?.type !== \"ResponsiveTable\"\n\t);\n}\n\nfunction _setNonResponsiveTableVisualizationInformation(\n\tsections: ObjectPageSection[],\n\tdataVisualizationSubSection: DataVisualizationSubSection,\n\tsubSectionVisualization: TableVisualization,\n\tsectionLayout: string\n): void {\n\tif (_isFacetHasNonResponsiveTableVisible(dataVisualizationSubSection, subSectionVisualization)) {\n\t\tconst tableControlConfiguration = subSectionVisualization.control;\n\t\tdataVisualizationSubSection.dataVisualizationOptions ??= {};\n\t\tif (!(sectionLayout === \"Page\" && sections.length > 1)) {\n\t\t\tdataVisualizationSubSection.dataVisualizationOptions[\"rowCountMode\"] = \"Auto\";\n\t\t\ttableControlConfiguration.rowCountMode = \"Auto\";\n\t\t}\n\t\tif (sectionLayout !== \"Tabs\") {\n\t\t\tdataVisualizationSubSection.dataVisualizationOptions[\"useCondensedTableLayout\"] = false;\n\t\t\ttableControlConfiguration.useCondensedTableLayout = false;\n\t\t}\n\t}\n}\n\nfunction _setNonResponsiveTableWithMixFacetsInformation(subSection: MixedSubSection, sectionLayout: string): void {\n\tconst firstSection = subSection?.content?.length === 1 ? subSection.content[0] : undefined;\n\tif (firstSection?.type === SubSectionType.DataVisualization) {\n\t\tconst tableControl = (firstSection.presentation?.visualizations[0] as TableVisualization).control;\n\t\tif (tableControl.type !== \"ResponsiveTable\") {\n\t\t\tfirstSection.dataVisualizationOptions ??= {};\n\t\t\tfirstSection.dataVisualizationOptions[\"rowCountMode\"] = \"Auto\";\n\t\t\ttableControl.rowCountMode = \"Auto\";\n\t\t\tif (sectionLayout !== \"Tabs\") {\n\t\t\t\tfirstSection.dataVisualizationOptions[\"useCondensedTableLayout\"] = false;\n\t\t\t\ttableControl.useCondensedTableLayout = false;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Set the NonResponsive Table (grid, tree, analytical) display information.\n * @param sections The ObjectPage sections\n * @param section The current ObjectPage section processed\n * @param sectionLayout\n */\nfunction _setNonResponsiveTableSubSectionControlConfiguration(\n\tsections: ObjectPageSection[],\n\tsection: ObjectPageSection,\n\tsectionLayout: string\n): void {\n\tlet subSectionVisualization: TableVisualization;\n\tconst subSections = section.subSections;\n\tif (subSections.length === 1) {\n\t\tconst subSection = subSections[0];\n\t\tswitch (subSection.type) {\n\t\t\tcase \"DataVisualization\":\n\t\t\t\tsubSectionVisualization = _getSubSectionVisualization(subSection);\n\t\t\t\t_setNonResponsiveTableVisualizationInformation(sections, subSection, subSectionVisualization, sectionLayout);\n\t\t\t\tbreak;\n\t\t\tcase \"Mixed\":\n\t\t\t\t_setNonResponsiveTableWithMixFacetsInformation(subSection, sectionLayout);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\treturn;\n\t}\n\t_removeCondensedFromSubSections(subSections);\n}\n\n/**\n * Remove the condense layout mode from the subsections.\n * @param subSections The subSections where we need to remove the condensed layout\n */\nfunction _removeCondensedFromSubSections(subSections: ObjectPageSubSection[]): void {\n\tlet dataVisualizationSubSection: DataVisualizationSubSection;\n\t// We check in each subsection if there is visualizations\n\tsubSections.forEach((subSection) => {\n\t\tdataVisualizationSubSection = subSection as DataVisualizationSubSection;\n\t\tif (dataVisualizationSubSection?.presentation?.visualizations) {\n\t\t\tdataVisualizationSubSection?.presentation?.visualizations.forEach((singleVisualization) => {\n\t\t\t\tif (singleVisualization.type === VisualizationType.Table) {\n\t\t\t\t\tsingleVisualization.control.useCondensedTableLayout = false;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t// Then we check the content of the subsection, and in each content we check if there is a table to set its condensed layout to false\n\t\tif (dataVisualizationSubSection?.content) {\n\t\t\tdataVisualizationSubSection.content.forEach((singleContent) => {\n\t\t\t\t(singleContent as DataVisualizationSubSection).presentation?.visualizations.forEach((singleVisualization) => {\n\t\t\t\t\tif (singleVisualization.type === VisualizationType.Table) {\n\t\t\t\t\t\tsingleVisualization.control.useCondensedTableLayout = false;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t});\n}\n/**\n * Retrieves and merges the ObjectPage sections defined in the annotation and in the manifest.\n * @param converterContext The converter context\n * @returns An array of sections.\n */\n\nexport const getSections = function (converterContext: ConverterContext<PageContextPathTarget>): ObjectPageSection[] {\n\tconst manifestWrapper = converterContext.getManifestWrapper();\n\tconst sections = insertCustomElements(\n\t\tgetSectionsFromAnnotation(converterContext),\n\t\tgetSectionsFromManifest(manifestWrapper.getSections(), converterContext),\n\t\t{\n\t\t\ttitle: OverrideType.overwrite,\n\t\t\tvisible: OverrideType.overwrite,\n\t\t\tsubSections: {\n\t\t\t\tactions: OverrideType.merge,\n\t\t\t\ttitle: OverrideType.overwrite,\n\t\t\t\tsideContent: OverrideType.overwrite,\n\t\t\t\tobjectPageLazyLoaderEnabled: OverrideType.overwrite\n\t\t\t}\n\t\t}\n\t);\n\t// Level Adjustment for \"Mixed\" Collection Facets:\n\t// ==============================================\n\t// The manifest definition of custom side contents and actions still needs to be aligned for \"Mixed\" collection facets:\n\t// Collection facets containing tables gain an extra reference facet as a table wrapper to ensure, that the table is always\n\t// placed in an own individual Object Page Block; this additional hierarchy level is unknown to app developers, which are\n\t// defining the side content and actions in the manifest at collection facet level; now, since the sideContent always needs\n\t// to be assigned to a block, and actions always need to be assigned to a form,\n\t// we need to move the sideContent and actions from a mixed collection facet to its content.\n\t// ==============================================\n\tsections.forEach(function (section) {\n\t\t_setNonResponsiveTableSubSectionControlConfiguration(sections, section, manifestWrapper.getSectionLayout());\n\t\tsection.subSections?.forEach(function (subSection) {\n\t\t\tsubSection.title = subSection.title === \"undefined\" ? undefined : subSection.title;\n\t\t\tif (subSection.type === \"Mixed\") {\n\t\t\t\tsubSection.content?.forEach((content) => {\n\t\t\t\t\tcontent.objectPageLazyLoaderEnabled = subSection.objectPageLazyLoaderEnabled;\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (subSection.type === \"Mixed\" && subSection.content?.length) {\n\t\t\t\tconst firstForm = subSection.content.find(\n\t\t\t\t\t(element) => (element as FormSubSection).type === SubSectionType.Form\n\t\t\t\t) as FormSubSection;\n\n\t\t\t\t// 1. Copy sideContent to the SubSection's first form; or -- if unavailable -- to its first content\n\t\t\t\t// 2. Copy actions to the first form of the SubSection's content\n\t\t\t\t// 3. Delete sideContent / actions at the (invalid) manifest level\n\n\t\t\t\tif (subSection.sideContent) {\n\t\t\t\t\tif (firstForm) {\n\t\t\t\t\t\t// If there is a form, it always needs to be attached to the form, as the form inherits the ID of the SubSection\n\t\t\t\t\t\tfirstForm.sideContent = subSection.sideContent;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsubSection.content[0].sideContent = subSection.sideContent;\n\t\t\t\t\t}\n\t\t\t\t\tsubSection.sideContent = undefined;\n\t\t\t\t}\n\n\t\t\t\tif (firstForm && (subSection as unknown as FormSubSection).actions?.length) {\n\t\t\t\t\tfirstForm.actions = (subSection as unknown as FormSubSection).actions;\n\t\t\t\t\t(subSection as unknown as FormSubSection).actions = [];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\treturn sections;\n};\n\n/**\n * Determines if the ObjectPage has header content.\n * @param converterContext The instance of the converter context\n * @returns `true` if there is at least on header facet\n */\nfunction hasHeaderContent(converterContext: ConverterContext<PageContextPathTarget>): boolean {\n\tconst manifestWrapper = converterContext.getManifestWrapper();\n\treturn (\n\t\t(converterContext.getEntityType().annotations?.UI?.HeaderFacets || []).length > 0 ||\n\t\tObject.keys(manifestWrapper.getHeaderFacets()).length > 0\n\t);\n}\n\n/**\n * Gets the expression to evaluate the visibility of the header content.\n * @param converterContext The instance of the converter context\n * @returns The binding expression for the Delete button\n */\nfunction getShowHeaderContentExpression(converterContext: ConverterContext<PageContextPathTarget>): BindingToolkitExpression<boolean> {\n\tconst manifestWrapper = converterContext.getManifestWrapper();\n\treturn ifElse(\n\t\t!hasHeaderContent(converterContext),\n\t\tconstant(false),\n\t\tifElse(equal(manifestWrapper.isHeaderEditable(), false), constant(true), not(UI.IsEditable))\n\t);\n}\n\n/**\n * Gets the binding expression to evaluate the visibility of the header content.\n * @param converterContext The instance of the converter context\n * @returns The binding expression for the Delete button\n */\nexport const getShowHeaderContent = function (converterContext: ConverterContext<PageContextPathTarget>): CompiledBindingToolkitExpression {\n\treturn compileExpression(getShowHeaderContentExpression(converterContext));\n};\n\n/**\n * Gets the binding expression to evaluate the visibility of the avatar when the header is in expanded state.\n * @param converterContext The instance of the converter context\n * @returns The binding expression for the Delete button\n */\nexport const getExpandedImageVisible = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): CompiledBindingToolkitExpression {\n\treturn compileExpression(not(getShowHeaderContentExpression(converterContext)));\n};\n\nexport const convertPage = function (converterContext: ConverterContext<PageContextPathTarget>): ObjectPageDefinition {\n\tconst manifestWrapper = converterContext.getManifestWrapper();\n\tlet headerSection: ObjectPageSection | undefined;\n\tconst entityType: EntityType = converterContext.getEntityType();\n\n\t// Retrieve all header facets (from annotations & custom)\n\tconst headerFacets = insertCustomElements(\n\t\tgetHeaderFacetsFromAnnotations(converterContext),\n\t\tgetHeaderFacetsFromManifest(manifestWrapper.getHeaderFacets())\n\t);\n\n\t// Retrieve the page header actions\n\tconst headerActions = getHeaderActions(converterContext);\n\n\t// Retrieve the page footer actions\n\tconst footerActions = getFooterActions(converterContext);\n\n\tif (manifestWrapper.isHeaderEditable() && (entityType.annotations.UI?.HeaderFacets || entityType.annotations.UI?.HeaderInfo)) {\n\t\theaderSection = createEditableHeaderSection(converterContext, headerFacets);\n\t}\n\n\tconst sections = getSections(converterContext);\n\n\treturn {\n\t\ttemplate: TemplateType.ObjectPage,\n\t\theader: {\n\t\t\tvisible: manifestWrapper.getShowObjectPageHeader(),\n\t\t\tsection: headerSection,\n\t\t\tfacets: headerFacets,\n\t\t\tactions: headerActions.actions,\n\t\t\tshowContent: getShowHeaderContent(converterContext),\n\t\t\thasContent: hasHeaderContent(converterContext),\n\t\t\tavatar: getAvatar(converterContext),\n\t\t\ttitle: {\n\t\t\t\texpandedImageVisible: getExpandedImageVisible(converterContext)\n\t\t\t}\n\t\t},\n\t\tsections: sections,\n\t\tfooterActions: footerActions.actions,\n\t\theaderCommandActions: headerActions.commandActions,\n\t\tfooterCommandActions: footerActions.commandActions,\n\t\tshowAnchorBar: manifestWrapper.getShowAnchorBar(),\n\t\tuseIconTabBar: manifestWrapper.useIconTabBar(),\n\t\ttransportSelection: manifestWrapper.getTransportSelection()\n\t};\n};\n"],"mappings":"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","ignoreList":[]}