{"version":3,"names":["LOGGER_SCOPE","XMLTEMPLATING_NS","DOMParserInstance","DOMParser","validateMacroMetadataContext","sName","mContexts","oContextSettings","sKey","oContext","oContextObject","getObject","required","Error","hasOwnProperty","$kind","undefined","expectedTypes","includes","getPath","$Type","expectedAnnotationTypes","validateMacroSignature","oMetadata","oNode","aMetadataContextKeys","metadataContexts","Object","keys","aProperties","properties","oAttributeNames","attributeNames","getAttributeNames","attributeName","forEach","oPropertySettings","hasAttribute","startsWith","Log","warning","_exports","SAP_UI_CORE_ELEMENT","SAP_UI_MODEL_CONTEXT","transformMetadata","buildingBlockMetadata","class","type","isPublic","aggregations","dependents","slot","customData","layoutData","propertyName","propertyType","_checkAbsoluteAndContextPaths","oSettings","sAttributeValue","sMetaPath","sContextPath","currentContextPath","endsWith","model","path","_createInitialMetadataContext","sAttributeName","returnContext","models","converterContext","getProperty","data","unstoreObjectValue","setProperty","bindingContexts","entitySet","_getMetadataContext","oVisitor","bDoNotResolve","isOpen","oMetadataContext","getAttribute","BindingParser","complexParser","getContext","e","processProperties","definitionProperties","aDefinitionPropertiesKeys","propertyValues","sKeyValue","defaultValue","deepClone","error","visitAttribute","attributes","getNamedItem","value","Number","processContexts","contextPath","mMissingContext","oDefinitionContexts","aDefinitionContextsKeys","contextPathIndex","indexOf","contextPathDefinition","splice","propertyValue","length","name","addSingleContext","parseAggregation","oAggregation","processAggregations","oOutObjects","children","childIdx","childDefinition","childKey","setAttribute","aggregationObject","key","position","placement","Placement","After","anchor","tagName","nodeName","processObject","element","myArray","myObject","childNodeNames","map","localName","childIsArray","Set","size","push","processChildren","oAggregations","firstElementChild","oFirstElementChild","namespaceURI","oParent","parentNode","iChildIndex","Array","from","visitNode","nextElementSibling","sChildName","sAggregationName","toUpperCase","defaultAggregation","aggregationDefinition","parsedAggregation","parsedAggregationKey","oNextChild","nextChild","hasVirtualNode","childWrapper","document","createElementNS","appendChild","removeAttribute","oNewChild","cloneNode","aggregationPropertyValues","myChild","processSlots","oMetadataAggregations","processCustomData","arguments","oAggregationElement","oElementChild","sSlotName","oTargetElement","querySelector","prepareAggregationElement","replaceWith","replace","processBuildingBlock","BuildingBlockClass","metadata","sFragmentName","fragment","namespace","publicNamespace","xmlTag","getSettings","JSONModel","initialKeys","oControlConfig","viewData","processedPropertyValues","propName","oData","originalDefinition","validate","isA","getModel","oInstance","getProperties","sContextName","targetObject","isContext","attributeValue","storeObjectValue","newContext","createBindingContext","oAttributesModel","AttributeModel","oPreviousMacroInfo","coreRequire","TraceInfo","isTraceInfoActive","oTraceInfo","traceMacroCalls","macroInfo","oContextVisitor","with","oPromise","insertFragment","oldKeys","temporaryObjectStore","templateString","getRuntimeBuildingBlockTemplate","jsx","renderAsXML","getTemplate","isRuntime","storeKey","hasError","hasParseError","parsedTemplate","parseXMLString","iter","createNodeIterator","NodeFilter","SHOW_TEXT","textnode","nextNode","textContent","trim","processXmlInTrace","initialTemplate","oErrorText","createErrorXML","template","outerHTML","join","visitedNodes","internalNode","Promise","all","remove","resolve","oMacroElement","oRemainingSlots","querySelectorAll","oSlotElement","requireOnMacro","getAttributeNS","substring","setAttributeNS","classList","add","traceDetails","initialProperties","resolvedProperties","missingContexts","oError","stack","oTemplate","oCtx","mSetting","ex","registerBuildingBlock","XMLPreprocessor","plugIn","unregisterBuildingBlock","errorMessages","xmlFragment","additionalData","errorLabels","errorMessage","xml","escapeXMLAttributeValue","errorStack","stackFormatted","btoa","additionalText","JSON","stringify","replaceAll","propertyUID","uid","processNextXmlInTrace","method","returnValue","xmlString","addDefaultNamespaces","xmlDocument","parseFromString","output","parentElement","renderInTraceMode","outStr","xmlResult","innerText","innerHTML","split","strings","i","_len","values","_key","isArray","flat","isFunctionArray","valuefn","isBindingToolkitExpression","compiledExpression","compileExpression","propertyUId","addConditionallyToXML","condition","partToAdd","addAttributeToXML","isUndefinedExpression"],"sourceRoot":".","sources":["BuildingBlockTemplateProcessor.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport deepClone from \"sap/base/util/deepClone\";\nimport uid from \"sap/base/util/uid\";\nimport type { BindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { compileExpression, isBindingToolkitExpression, isUndefinedExpression } from \"sap/fe/base/BindingToolkit\";\nimport jsx from \"sap/fe/base/jsx-runtime/jsx\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport type ResourceModel from \"sap/fe/core/ResourceModel\";\nimport AttributeModel from \"sap/fe/core/buildingBlocks/templating/AttributeModel\";\nimport type {\n\tBuildingBlockAggregationDefinition,\n\tBuildingBlockMetadata,\n\tBuildingBlockMetadataContextDefinition,\n\tBuildingBlockPropertyDefinition,\n\tObjectValue,\n\tObjectValue2\n} from \"sap/fe/core/buildingBlocks/templating/BuildingBlockSupport\";\nimport type BuildingBlockTemplatingBase from \"sap/fe/core/buildingBlocks/templating/BuildingBlockTemplatingBase\";\nimport type RuntimeBuildingBlock from \"sap/fe/core/buildingBlocks/templating/RuntimeBuildingBlock\";\nimport type { Position } from \"sap/fe/core/converters/helpers/ConfigurableObject\";\nimport { Placement } from \"sap/fe/core/converters/helpers/ConfigurableObject\";\nimport type { DefinitionContext, DefinitionPage } from \"sap/fe/core/definition/FEDefinition\";\nimport { isContext, isFunctionArray } from \"sap/fe/core/helpers/TypeGuards\";\nimport BindingParser from \"sap/ui/base/BindingParser\";\nimport type Control from \"sap/ui/core/Control\";\nimport XMLPreprocessor from \"sap/ui/core/util/XMLPreprocessor\";\nimport type Context from \"sap/ui/model/Context\";\nimport type Model from \"sap/ui/model/Model\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type { MacroInfo } from \"../TraceInfo\";\nimport TraceInfo from \"../TraceInfo\";\n\nconst LOGGER_SCOPE = \"sap.fe.core.buildingBlocks.templating.BuildingBlockTemplateProcessor\";\nconst XMLTEMPLATING_NS = \"http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1\";\nconst DOMParserInstance = new DOMParser();\n\nexport type TransformedBuildingBlockMetadata = BuildingBlockMetadata & {\n\tmetadataContexts: Record<string, BuildingBlockMetadataContextDefinition>;\n};\n\n/**\n * Definition of a meta data context\n */\ntype MetaDataContext = {\n\tname?: string;\n\tmodel: string;\n\tpath: string;\n};\n\nexport type TemplateProcessorSettings = {\n\tcurrentContextPath: Context;\n\tisPublic: boolean;\n\tappComponent: AppComponent;\n\tisRuntimeInstantiation?: boolean;\n\tmodels: Record<string, Model> & {\n\t\tconverterContext: JSONModel;\n\t\tviewData: JSONModel;\n\t\tmetaModel: ODataMetaModel;\n\t\t\"sap.fe.i18n\"?: ResourceModel;\n\t};\n\tgetDefinitionContext(): DefinitionContext;\n\tgetDefinitionForPage(): DefinitionPage;\n\tbindingContexts: Record<string, Context>;\n\t_macroInfo?: MacroInfo;\n\t[k: string]: unknown;\n};\n\nexport type IVisitorCallback = {\n\tgetSettings(): TemplateProcessorSettings;\n\t/**\n\t * Visits the given node and either processes a template instruction, calls\n\t * a visitor, or simply calls both {@link\n\t * sap.ui.core.util.XMLPreprocessor.ICallback.visitAttributes visitAttributes}\n\t * and {@link sap.ui.core.util.XMLPreprocessor.ICallback.visitChildNodes\n\t * visitChildNodes}.\n\t * @param oNode\n\t *   The XML DOM node\n\t * @returns\n\t *   A thenable which resolves with <code>undefined</code> as soon as visiting\n\t *   is done, or is rejected with a corresponding error if visiting fails\n\t */\n\tvisitNode(oNode: Node): Promise<void>;\n\n\t/**\n\t * Inserts the fragment with the given name in place of the given element. Loads the\n\t * fragment, takes care of caching (for the current pre-processor run) and visits the\n\t * fragment's content once it has been imported into the element's owner document and\n\t * put into place. Loading of fragments is asynchronous if the template view is\n\t * asynchronous.\n\t * @param sFragment\n\t *   the fragment's resolved name\n\t * @param oElement\n\t *   the XML DOM element, e.g. <sap.ui.core:Fragment> or <core:ExtensionPoint>\n\t * @param oWith\n\t *   the parent's \"with\" control\n\t * @returns\n\t * A sync promise which resolves with <code>undefined</code> as soon as the fragment\n\t *   has been inserted, or is rejected with a corresponding error if loading or visiting\n\t *   fails.\n\t */\n\tinsertFragment(sFragment: string, oElement: Element, oWith?: Control): Promise<void>;\n\tvisitAttribute(oNode: Element, oAttribute: Attr): Promise<void>;\n\tvisitAttributes(oNode: Element): Promise<void>;\n\tgetViewInfo(): Promise<unknown>;\n\tvisitChildNodes(oNode: Node): Promise<void>;\n\t/**\n\t * Interprets the given XML DOM attribute value as a binding and returns the\n\t * resulting value.\n\t * @param sValue\n\t *   An XML DOM attribute value\n\t * @param [element]\n\t *   The XML DOM element the attribute value belongs to (needed only for\n\t *   warnings which are logged to the console)\n\t * @returns\n\t *   A thenable which resolves with the resulting value, or is rejected with a\n\t *   corresponding error (for example, an error thrown by a formatter) or\n\t *   <code>null</code> in case the binding is not ready (because it refers to a\n\t *   model which is not available) (since 1.57.0)\n\t */\n\tgetResult(sValue: string, element?: Element): Promise<Context> | null;\n\tgetContext(sPath?: string): Context | undefined;\n\t/**\n\t * Returns a callback interface instance for the given map of variables which\n\t * override currently known variables of the same name in <code>this</code>\n\t * parent interface or replace them altogether. Each variable name becomes a\n\t * named model with a corresponding object binding and can be used inside the\n\t * XML template in the usual way, that is, with a binding expression like\n\t * <code>\"{var>some/relative/path}\"</code> (see example).\n\t * @param [mVariables={}]\n\t *   Map from variable name (string) to value\n\t * @param [bReplace]\n\t *   Whether only the given variables are known in the new callback interface\n\t *   instance, no inherited ones\n\t * @returns\n\t *   A callback interface instance\n\t * @param mVariables\n\t * @param bReplace\n\t */\n\t\"with\"(mVariables?: Record<string, Context>, bReplace?: boolean): IVisitorCallback;\n};\n\nfunction validateMacroMetadataContext(\n\tsName: string,\n\tmContexts: Record<string, Context>,\n\toContextSettings: BuildingBlockMetadataContextDefinition,\n\tsKey: string\n): void {\n\tconst oContext = mContexts[sKey];\n\tconst oContextObject = oContext?.getObject() as {\n\t\t$Type?: string;\n\t\t$kind?: string;\n\t};\n\n\tif (oContextSettings.required === true && (!oContext || oContextObject === null)) {\n\t\tthrow new Error(`${sName}: Required metadataContext '${sKey}' is missing`);\n\t} else if (oContextObject) {\n\t\t// If context object has $kind property, $Type should not be checked\n\t\t// Therefore remove from context settings\n\t\tif (oContextObject.hasOwnProperty(\"$kind\") && oContextObject.$kind !== undefined && oContextSettings.expectedTypes !== undefined) {\n\t\t\t// Check if the $kind is part of the allowed ones\n\t\t\tif (!oContextSettings.expectedTypes.includes(oContextObject.$kind)) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`${sName}: '${sKey}' must be '$kind' '${oContextSettings.expectedTypes}' but is '${\n\t\t\t\t\t\toContextObject.$kind\n\t\t\t\t\t}': ${oContext.getPath()}`\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (\n\t\t\toContextObject.hasOwnProperty(\"$Type\") &&\n\t\t\toContextObject.$Type !== undefined &&\n\t\t\toContextSettings.expectedAnnotationTypes\n\t\t) {\n\t\t\t// Check only $Type\n\t\t\tif (!oContextSettings.expectedAnnotationTypes.includes(oContextObject.$Type)) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`${sName}: '${sKey}' must be '$Type' '${oContextSettings.expectedAnnotationTypes}' but is '${\n\t\t\t\t\t\toContextObject.$Type\n\t\t\t\t\t}': ${oContext.getPath()}`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\nexport function validateMacroSignature(\n\tsName: string,\n\toMetadata: TransformedBuildingBlockMetadata,\n\tmContexts: Record<string, Context>,\n\toNode: Element\n): void {\n\tconst aMetadataContextKeys = (oMetadata.metadataContexts && Object.keys(oMetadata.metadataContexts)) || [],\n\t\taProperties = (oMetadata.properties && Object.keys(oMetadata.properties)) || [],\n\t\toAttributeNames: Record<string, boolean> = {};\n\n\t// collect all attributes to find unchecked properties\n\tconst attributeNames = oNode.getAttributeNames();\n\tfor (const attributeName of attributeNames) {\n\t\toAttributeNames[attributeName] = true;\n\t}\n\n\t//Check metadataContexts\n\taMetadataContextKeys.forEach(function (sKey) {\n\t\tconst oContextSettings = oMetadata.metadataContexts[sKey];\n\n\t\tvalidateMacroMetadataContext(sName, mContexts, oContextSettings, sKey);\n\t\tdelete oAttributeNames[sKey];\n\t});\n\t//Check properties\n\taProperties.forEach(function (sKey) {\n\t\tconst oPropertySettings = oMetadata.properties[sKey];\n\t\tif (!oNode.hasAttribute(sKey)) {\n\t\t\tif (oPropertySettings.required && !oPropertySettings.hasOwnProperty(\"defaultValue\")) {\n\t\t\t\tthrow new Error(`${sName}: ` + `Required property '${sKey}' is missing`);\n\t\t\t}\n\t\t} else {\n\t\t\tdelete oAttributeNames[sKey];\n\t\t}\n\t});\n\n\t// Unchecked properties\n\tObject.keys(oAttributeNames).forEach(function (sKey: string) {\n\t\t// no check for properties which contain a colon \":\" (different namespace), e.g. xmlns:trace, trace:macroID, unittest:id\n\t\tif (!sKey.includes(\":\") && !sKey.startsWith(\"xmlns\")) {\n\t\t\tLog.warning(`Unchecked parameter: ${sName}: ${sKey}`, undefined, LOGGER_SCOPE);\n\t\t}\n\t});\n}\n\nconst SAP_UI_CORE_ELEMENT = \"sap.ui.core.Element\";\n\nexport const SAP_UI_MODEL_CONTEXT = \"sap.ui.model.Context\";\n\n/**\n * Transforms the metadata of a building block by adding additional aggregations,\n * and splitting properties into actual properties and metadata contexts.\n * @param buildingBlockMetadata The metadata received from the input\n * @returns The transformed metadata\n */\nfunction transformMetadata(buildingBlockMetadata: BuildingBlockMetadata): TransformedBuildingBlockMetadata {\n\tconst properties: Record<string, BuildingBlockPropertyDefinition> = {\n\t\tclass: {\n\t\t\ttype: \"string\",\n\t\t\tisPublic: true\n\t\t}\n\t};\n\tconst aggregations: Record<string, BuildingBlockAggregationDefinition> = {\n\t\tdependents: {\n\t\t\ttype: SAP_UI_CORE_ELEMENT,\n\t\t\tslot: \"dependents\",\n\t\t\tisPublic: true\n\t\t},\n\t\tcustomData: {\n\t\t\ttype: SAP_UI_CORE_ELEMENT,\n\t\t\tslot: \"customData\",\n\t\t\tisPublic: true\n\t\t},\n\t\tlayoutData: {\n\t\t\ttype: SAP_UI_CORE_ELEMENT,\n\t\t\tslot: \"layoutData\",\n\t\t\tisPublic: true\n\t\t},\n\t\t...buildingBlockMetadata.aggregations\n\t};\n\tconst metadataContexts: Record<string, BuildingBlockMetadataContextDefinition> = {};\n\n\tfor (const propertyName of Object.keys(buildingBlockMetadata.properties)) {\n\t\tconst propertyType = buildingBlockMetadata.properties[propertyName].type;\n\n\t\tif (propertyType !== SAP_UI_MODEL_CONTEXT) {\n\t\t\tproperties[propertyName] = buildingBlockMetadata.properties[propertyName];\n\t\t}\n\n\t\tif ([SAP_UI_MODEL_CONTEXT, \"object\", \"array\"].includes(propertyType)) {\n\t\t\t// Explicitly defined contexts, objects, and arrays may come from the metadataContext\n\t\t\tmetadataContexts[propertyName] = buildingBlockMetadata.properties[propertyName] as BuildingBlockMetadataContextDefinition;\n\t\t}\n\t}\n\n\treturn {\n\t\t...buildingBlockMetadata,\n\t\tproperties,\n\t\tmetadataContexts,\n\t\taggregations\n\t};\n}\n\n/**\n * Checks the absolute or context paths and returns an appropriate MetaContext.\n * @param oSettings Additional settings\n * @param sAttributeValue The attribute value\n * @returns The meta data context object\n */\nfunction _checkAbsoluteAndContextPaths(oSettings: TemplateProcessorSettings, sAttributeValue: string): MetaDataContext {\n\tlet sMetaPath: string;\n\tif (sAttributeValue && sAttributeValue.startsWith(\"/\")) {\n\t\t// absolute path - we just use this one\n\t\tsMetaPath = sAttributeValue;\n\t} else {\n\t\tlet sContextPath = oSettings.currentContextPath.getPath();\n\t\tif (!sContextPath.endsWith(\"/\")) {\n\t\t\tsContextPath += \"/\";\n\t\t}\n\t\tsMetaPath = sContextPath + sAttributeValue;\n\t}\n\treturn {\n\t\tmodel: \"metaModel\",\n\t\tpath: sMetaPath\n\t};\n}\n\n/**\n * This method helps to create the metadata context in case it is not yet available in the store.\n * @param oSettings Additional settings\n * @param sAttributeName The attribute name\n * @param sAttributeValue The attribute value\n * @returns The meta data context object\n */\nfunction _createInitialMetadataContext(\n\toSettings: TemplateProcessorSettings,\n\tsAttributeName: string,\n\tsAttributeValue: string\n): MetaDataContext {\n\tlet returnContext: MetaDataContext;\n\tif (sAttributeValue.startsWith(\"/uid--\") && !oSettings.models.converterContext.getProperty(sAttributeValue)) {\n\t\tconst data = unstoreObjectValue(sAttributeValue);\n\t\toSettings.models.converterContext.setProperty(sAttributeValue, data);\n\t\treturnContext = {\n\t\t\tmodel: \"converterContext\",\n\t\t\tpath: sAttributeValue\n\t\t};\n\t} else if ((sAttributeName === \"metaPath\" && oSettings.currentContextPath) || sAttributeName === \"contextPath\") {\n\t\treturnContext = _checkAbsoluteAndContextPaths(oSettings, sAttributeValue);\n\t} else if (sAttributeValue && sAttributeValue.startsWith(\"/\")) {\n\t\t// absolute path - we just use this one\n\t\treturnContext = {\n\t\t\tmodel: \"metaModel\",\n\t\t\tpath: sAttributeValue\n\t\t};\n\t} else {\n\t\treturnContext = {\n\t\t\tmodel: \"metaModel\",\n\t\t\tpath: oSettings.bindingContexts.entitySet ? oSettings.bindingContexts.entitySet.getPath(sAttributeValue) : sAttributeValue\n\t\t};\n\t}\n\treturn returnContext;\n}\n\nfunction _getMetadataContext(\n\toSettings: TemplateProcessorSettings,\n\toNode: Element,\n\tsAttributeName: string,\n\toVisitor: IVisitorCallback,\n\tbDoNotResolve: boolean,\n\tisOpen: boolean\n): MetaDataContext | undefined {\n\tlet oMetadataContext: MetaDataContext | undefined;\n\tif (!bDoNotResolve && oNode.hasAttribute(sAttributeName)) {\n\t\tconst sAttributeValue = oNode.getAttribute(sAttributeName) as string;\n\t\toMetadataContext = BindingParser.complexParser(sAttributeValue);\n\t\tif (!oMetadataContext) {\n\t\t\toMetadataContext = _createInitialMetadataContext(oSettings, sAttributeName, sAttributeValue);\n\t\t}\n\t} else if (oSettings.bindingContexts.hasOwnProperty(sAttributeName)) {\n\t\toMetadataContext = {\n\t\t\tmodel: sAttributeName,\n\t\t\tpath: \"\"\n\t\t};\n\t} else if (isOpen) {\n\t\ttry {\n\t\t\tif (oVisitor.getContext(`${sAttributeName}>`)) {\n\t\t\t\toMetadataContext = {\n\t\t\t\t\tmodel: sAttributeName,\n\t\t\t\t\tpath: \"\"\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\treturn oMetadataContext;\n}\n\n/**\n * Parse the incoming XML node and try to resolve the properties defined there.\n * @param oMetadata The metadata for the building block\n * @param oNode The XML node to parse\n * @param isPublic Whether the building block is used in a public context or not\n * @param oVisitor The visitor instance\n * @returns The processed properties\n */\nasync function processProperties(\n\toMetadata: TransformedBuildingBlockMetadata,\n\toNode: Element,\n\tisPublic: boolean,\n\toVisitor: IVisitorCallback\n): Promise<Record<string, ObjectValue>> {\n\tconst definitionProperties = oMetadata.properties;\n\n\t// Retrieve properties values\n\tconst aDefinitionPropertiesKeys = Object.keys(definitionProperties);\n\n\tconst propertyValues: Record<string, ObjectValue> = {};\n\tfor (const sKeyValue of aDefinitionPropertiesKeys) {\n\t\tif (definitionProperties[sKeyValue].type === \"object\") {\n\t\t\tpropertyValues[sKeyValue] =\n\t\t\t\tdefinitionProperties[sKeyValue].defaultValue && deepClone(definitionProperties[sKeyValue].defaultValue); // To avoid values being reused across macros\n\t\t} else {\n\t\t\tpropertyValues[sKeyValue] = definitionProperties[sKeyValue].defaultValue as string | boolean | number;\n\t\t}\n\n\t\tif (oNode.hasAttribute(sKeyValue) && isPublic && definitionProperties[sKeyValue].isPublic !== true) {\n\t\t\tLog.error(`Property ${sKeyValue} was ignored as it is not intended for public usage`);\n\t\t} else if (oNode.hasAttribute(sKeyValue)) {\n\t\t\tawait oVisitor.visitAttribute(oNode, oNode.attributes.getNamedItem(sKeyValue) as Attr);\n\t\t\tlet value: string | boolean | number | null | undefined = oNode.getAttribute(sKeyValue);\n\t\t\tif (value !== undefined && value !== null) {\n\t\t\t\tif (typeof value === \"string\" && !value.startsWith(\"{\")) {\n\t\t\t\t\tswitch (definitionProperties[sKeyValue].type) {\n\t\t\t\t\t\tcase \"boolean\":\n\t\t\t\t\t\t\tvalue = value === \"true\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"number\":\n\t\t\t\t\t\t\tvalue = Number(value);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvalue = value === null ? undefined : value;\n\t\t\t\tpropertyValues[sKeyValue] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn propertyValues;\n}\n\n/**\n * Parse the incoming XML node and try to resolve the binding contexts defined inside.\n * @param oMetadata The metadata for the building block\n * @param oSettings The settings object\n * @param oNode The XML node to parse\n * @param isPublic Whether the building block is used in a public context or not\n * @param oVisitor The visitor instance\n * @param mContexts The contexts to be used\n * @param propertyValues The current property values\n * @returns The processed and missing contexts\n */\nfunction processContexts(\n\toMetadata: TransformedBuildingBlockMetadata,\n\toSettings: TemplateProcessorSettings,\n\toNode: Element,\n\tisPublic: boolean,\n\toVisitor: IVisitorCallback,\n\tmContexts: Record<string, Context>,\n\tpropertyValues: Record<string, ObjectValue>\n): Record<string, boolean> {\n\toSettings.currentContextPath = oSettings.bindingContexts.contextPath;\n\tconst mMissingContext: Record<string, boolean> = {};\n\tconst oDefinitionContexts = oMetadata.metadataContexts;\n\tconst aDefinitionContextsKeys = Object.keys(oDefinitionContexts);\n\t// Since the metaPath and other property can be relative to the contextPath we need to evaluate the current contextPath first\n\tconst contextPathIndex = aDefinitionContextsKeys.indexOf(\"contextPath\");\n\tif (contextPathIndex !== -1) {\n\t\t// If it is defined we extract it and reinsert it in the first position of the array\n\t\tconst contextPathDefinition = aDefinitionContextsKeys.splice(contextPathIndex, 1);\n\t\taDefinitionContextsKeys.splice(0, 0, contextPathDefinition[0]);\n\t}\n\tfor (const sAttributeName of aDefinitionContextsKeys) {\n\t\t// If the context was resolved as a property (binding / xml aggregation) then we don't need to resolve it here.\n\t\tconst propertyValue = propertyValues[sAttributeName];\n\t\tif (propertyValue !== undefined && typeof propertyValue === \"object\" && Object.keys(propertyValue as object).length > 0) {\n\t\t\tdelete oMetadata.metadataContexts[sAttributeName];\n\t\t\tcontinue;\n\t\t}\n\t\tconst bDoNotResolve = isPublic && oDefinitionContexts[sAttributeName].isPublic === false && oNode.hasAttribute(sAttributeName);\n\t\tconst oMetadataContext = _getMetadataContext(oSettings, oNode, sAttributeName, oVisitor, bDoNotResolve, oMetadata.isOpen ?? false);\n\t\tif (oMetadataContext) {\n\t\t\toMetadataContext.name = sAttributeName;\n\t\t\taddSingleContext(mContexts, oVisitor, oMetadataContext);\n\t\t\tif (\n\t\t\t\t(sAttributeName === \"entitySet\" || sAttributeName === \"contextPath\") &&\n\t\t\t\t!oSettings.bindingContexts.hasOwnProperty(sAttributeName)\n\t\t\t) {\n\t\t\t\toSettings.bindingContexts[sAttributeName] = mContexts[sAttributeName];\n\t\t\t}\n\t\t\tif (sAttributeName === \"contextPath\") {\n\t\t\t\toSettings.currentContextPath = mContexts[sAttributeName];\n\t\t\t}\n\t\t\tif (mContexts[sAttributeName] !== undefined) {\n\t\t\t\tpropertyValues[sAttributeName] = mContexts[sAttributeName];\n\t\t\t} else if (typeof propertyValues[sAttributeName] === \"string\") {\n\t\t\t\t// If the binding couldn't be resolved consider that there was no value here\n\t\t\t\tdelete oMetadata.metadataContexts[sAttributeName];\n\t\t\t}\n\t\t} else {\n\t\t\tmMissingContext[sAttributeName] = true;\n\t\t}\n\t}\n\treturn mMissingContext;\n}\n\nexport type BuildingBlockAggregation = {\n\tkey: string;\n\tposition: Position;\n\ttype: \"Slot\";\n};\nfunction parseAggregation(oAggregation?: Element, processAggregations?: Function): Record<string, BuildingBlockAggregation> {\n\tconst oOutObjects: Record<string, BuildingBlockAggregation> = {};\n\tif (oAggregation && oAggregation.children.length > 0) {\n\t\tconst children = oAggregation.children;\n\t\tfor (let childIdx = 0; childIdx < children.length; childIdx++) {\n\t\t\tconst childDefinition = children[childIdx];\n\t\t\tlet childKey = childDefinition.getAttribute(\"key\") || childDefinition.getAttribute(\"id\");\n\t\t\tif (childKey) {\n\t\t\t\tchildKey = `InlineXML_${childKey}`;\n\t\t\t\tchildDefinition.setAttribute(\"key\", childKey);\n\t\t\t\tlet aggregationObject: BuildingBlockAggregation = {\n\t\t\t\t\tkey: childKey,\n\t\t\t\t\tposition: {\n\t\t\t\t\t\tplacement: (childDefinition.getAttribute(\"placement\") as Placement) || Placement.After,\n\t\t\t\t\t\tanchor: childDefinition.getAttribute(\"anchor\") || undefined\n\t\t\t\t\t},\n\t\t\t\t\ttype: \"Slot\"\n\t\t\t\t};\n\t\t\t\tif (processAggregations) {\n\t\t\t\t\taggregationObject = processAggregations(childDefinition, aggregationObject);\n\t\t\t\t}\n\t\t\t\toOutObjects[aggregationObject.key] = aggregationObject;\n\t\t\t} else if (childDefinition.tagName !== \"slot\") {\n\t\t\t\tLog.error(`The aggregation ${childDefinition.nodeName} is missing a Key attribute. It is not displayed`);\n\t\t\t}\n\t\t}\n\t}\n\treturn oOutObjects;\n}\n\n/**\n * Processes the child nodes of the building block properties when the type is an object.\n * @param element The XML element to parse\n * @returns The processed object\n */\nfunction processObject(element: Element): object {\n\tconst children = element.children;\n\tconst myArray: Array<unknown> = [];\n\tconst myObject: Record<string, unknown> = {};\n\tfor (const attributeName of element.getAttributeNames()) {\n\t\tmyObject[attributeName] = element.getAttribute(attributeName);\n\t}\n\tif (children.length > 0) {\n\t\tconst childNodeNames = Object.keys(children).map((key) => children[key as unknown as number].localName);\n\t\tconst childIsArray = childNodeNames.length !== new Set(childNodeNames).size;\n\t\tfor (const childDefinition of children as unknown as Array<Element>) {\n\t\t\tif (childIsArray) {\n\t\t\t\tmyArray.push(processObject(childDefinition));\n\t\t\t} else {\n\t\t\t\tmyObject[childDefinition.localName] = processObject(childDefinition);\n\t\t\t}\n\t\t}\n\t\tif (childIsArray) {\n\t\t\treturn myArray;\n\t\t}\n\t}\n\treturn myObject;\n}\n\n/**\n * Processes the child nodes of the building block and parses them as either aggregations or object-/array-based values.\n * @param oNode The XML node for which to process the children\n * @param oVisitor The visitor instance\n * @param oMetadata The metadata for the building block\n * @param isPublic Whether the building block is used in a public context or not\n * @param propertyValues The values of already parsed property\n * @returns The processed children\n */\nasync function processChildren(\n\toNode: Element,\n\toVisitor: IVisitorCallback,\n\toMetadata: TransformedBuildingBlockMetadata,\n\tisPublic: boolean,\n\tpropertyValues: Record<string, ObjectValue>\n): Promise<Record<string, Element>> {\n\tconst oAggregations: Record<string, Element> = {};\n\tif (oNode.firstElementChild !== null) {\n\t\tlet oFirstElementChild: Element | null = oNode.firstElementChild as Element | null;\n\n\t\twhile (oFirstElementChild !== null) {\n\t\t\tif (oFirstElementChild.namespaceURI === XMLTEMPLATING_NS) {\n\t\t\t\t// In case we encounter a templating tag, run the visitor on it and continue with the resulting child\n\t\t\t\tconst oParent = oFirstElementChild.parentNode;\n\t\t\t\tif (oParent) {\n\t\t\t\t\tconst iChildIndex = Array.from(oParent.children).indexOf(oFirstElementChild);\n\t\t\t\t\tawait oVisitor.visitNode(oFirstElementChild);\n\t\t\t\t\toFirstElementChild = oParent.children[iChildIndex] ? oParent.children[iChildIndex] : null;\n\t\t\t\t} else {\n\t\t\t\t\t// Not sure how this could happen but I also don't want to create infinite loops\n\t\t\t\t\toFirstElementChild = oFirstElementChild.nextElementSibling;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst sChildName = oFirstElementChild.localName;\n\t\t\t\tlet sAggregationName = sChildName;\n\t\t\t\tif (sAggregationName[0].toUpperCase() === sAggregationName[0]) {\n\t\t\t\t\t// not a sub aggregation, go back to default Aggregation\n\t\t\t\t\tsAggregationName = oMetadata.defaultAggregation || \"\";\n\t\t\t\t}\n\t\t\t\tconst aggregationDefinition = oMetadata.aggregations[sAggregationName];\n\t\t\t\tif (aggregationDefinition !== undefined && !aggregationDefinition.slot) {\n\t\t\t\t\tconst parsedAggregation = parseAggregation(oFirstElementChild, aggregationDefinition.processAggregations);\n\t\t\t\t\tpropertyValues[sAggregationName] = parsedAggregation;\n\t\t\t\t\tfor (const parsedAggregationKey in parsedAggregation) {\n\t\t\t\t\t\toMetadata.aggregations[parsedAggregationKey] = parsedAggregation[parsedAggregationKey];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\toFirstElementChild = oFirstElementChild.nextElementSibling;\n\t\t\t}\n\t\t}\n\n\t\toFirstElementChild = oNode.firstElementChild;\n\t\twhile (oFirstElementChild !== null) {\n\t\t\tconst oNextChild: Element | null = oFirstElementChild.nextElementSibling;\n\t\t\tconst sChildName = oFirstElementChild.localName;\n\t\t\tlet sAggregationName = sChildName;\n\t\t\tif (sAggregationName[0].toUpperCase() === sAggregationName[0]) {\n\t\t\t\t// not a sub aggregation, go back to default Aggregation\n\t\t\t\tsAggregationName = oMetadata.defaultAggregation || \"\";\n\t\t\t}\n\t\t\tif (\n\t\t\t\tObject.keys(oMetadata.aggregations).includes(sAggregationName) &&\n\t\t\t\t(!isPublic || oMetadata.aggregations[sAggregationName].isPublic === true)\n\t\t\t) {\n\t\t\t\tconst aggregationDefinition = oMetadata.aggregations[sAggregationName];\n\t\t\t\tif (!aggregationDefinition.slot && oFirstElementChild !== null && oFirstElementChild.children.length > 0) {\n\t\t\t\t\tawait oVisitor.visitNode(oFirstElementChild);\n\t\t\t\t\tlet childDefinition = oFirstElementChild.firstElementChild;\n\t\t\t\t\twhile (childDefinition) {\n\t\t\t\t\t\tconst nextChild = childDefinition.nextElementSibling;\n\t\t\t\t\t\tif (!aggregationDefinition.hasVirtualNode) {\n\t\t\t\t\t\t\tconst childWrapper = document.createElementNS(oNode.namespaceURI, childDefinition.getAttribute(\"key\")!);\n\t\t\t\t\t\t\tchildWrapper.appendChild(childDefinition);\n\t\t\t\t\t\t\toAggregations[childDefinition.getAttribute(\"key\")!] = childWrapper;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toAggregations[childDefinition.getAttribute(\"key\")!] = childDefinition;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tchildDefinition.removeAttribute(\"key\");\n\t\t\t\t\t\tchildDefinition = nextChild;\n\t\t\t\t\t}\n\t\t\t\t} else if (aggregationDefinition.slot) {\n\t\t\t\t\tawait oVisitor.visitNode(oFirstElementChild);\n\t\t\t\t\tif (sAggregationName !== sChildName) {\n\t\t\t\t\t\tif (!oAggregations[sAggregationName]) {\n\t\t\t\t\t\t\tconst oNewChild = document.createElementNS(oNode.namespaceURI, sAggregationName);\n\t\t\t\t\t\t\toAggregations[sAggregationName] = oNewChild;\n\t\t\t\t\t\t}\n\t\t\t\t\t\toAggregations[sAggregationName].appendChild(oFirstElementChild.cloneNode(true) as Element);\n\t\t\t\t\t} else {\n\t\t\t\t\t\toAggregations[sAggregationName] = oFirstElementChild.cloneNode(true) as Element;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (Object.keys(oMetadata.properties).includes(sAggregationName)) {\n\t\t\t\tawait oVisitor.visitNode(oFirstElementChild);\n\t\t\t\tif (oMetadata.properties[sAggregationName].type === \"object\") {\n\t\t\t\t\tconst aggregationPropertyValues = processObject(oFirstElementChild);\n\t\t\t\t\tpropertyValues[sAggregationName] = aggregationPropertyValues;\n\t\t\t\t} else if (oMetadata.properties[sAggregationName].type === \"array\") {\n\t\t\t\t\tif (oFirstElementChild !== null && oFirstElementChild.children.length > 0) {\n\t\t\t\t\t\tconst children = oFirstElementChild.children;\n\t\t\t\t\t\tconst oOutObjects: Record<string, ObjectValue2>[] = [];\n\t\t\t\t\t\tfor (let childIdx = 0; childIdx < children.length; childIdx++) {\n\t\t\t\t\t\t\tconst childDefinition = children[childIdx];\n\t\t\t\t\t\t\t// non keyed child, just add it to the aggregation\n\t\t\t\t\t\t\tconst myChild: Record<string, ObjectValue2> = {};\n\t\t\t\t\t\t\tconst attributeNames = childDefinition.getAttributeNames();\n\t\t\t\t\t\t\tfor (const attributeName of attributeNames) {\n\t\t\t\t\t\t\t\tmyChild[attributeName] = childDefinition.getAttribute(attributeName);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\toOutObjects.push(myChild);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpropertyValues[sAggregationName] = oOutObjects;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toFirstElementChild = oNextChild;\n\t\t}\n\t}\n\treturn oAggregations;\n}\n\nfunction processSlots(\n\toAggregations: Record<string, Element>,\n\toMetadataAggregations: Record<string, BuildingBlockAggregationDefinition>,\n\toNode: Element,\n\tprocessCustomData = false\n): void {\n\tif (Object.keys(oAggregations).length > 0) {\n\t\tObject.keys(oAggregations).forEach(function (sAggregationName: string) {\n\t\t\tconst oAggregationElement = oAggregations[sAggregationName];\n\t\t\tif (oNode !== null && oNode !== undefined && oAggregationElement) {\n\t\t\t\t// slots can have :: as keys which is not a valid aggregation name therefore replacing them\n\t\t\t\tconst oElementChild = oAggregationElement.firstElementChild;\n\t\t\t\tif (![\"dependents\", \"customData\", \"layoutData\"].includes(sAggregationName)) {\n\t\t\t\t\tconst sSlotName =\n\t\t\t\t\t\t(oMetadataAggregations[sAggregationName] !== undefined && oMetadataAggregations[sAggregationName].slot) ||\n\t\t\t\t\t\tsAggregationName;\n\t\t\t\t\tconst oTargetElement = oNode.querySelector(`slot[name='${sSlotName}']`);\n\t\t\t\t\tif (oTargetElement !== null) {\n\t\t\t\t\t\tconst oNewChild = prepareAggregationElement(oNode, sAggregationName, oElementChild);\n\t\t\t\t\t\toTargetElement.replaceWith(...(oNewChild.children as unknown as Node[])); // Somehow TS doesn't like this but the documentation says is should work\n\t\t\t\t\t}\n\t\t\t\t} else if (processCustomData && oElementChild !== null) {\n\t\t\t\t\tconst sSlotName =\n\t\t\t\t\t\t(oMetadataAggregations[sAggregationName] !== undefined && oMetadataAggregations[sAggregationName].slot) ||\n\t\t\t\t\t\tsAggregationName;\n\t\t\t\t\tconst oTargetElement = oNode.querySelector(`slot[name='${sSlotName}']`);\n\t\t\t\t\tconst oNewChild = prepareAggregationElement(oNode, sAggregationName, oElementChild);\n\t\t\t\t\tif (oTargetElement !== null) {\n\t\t\t\t\t\toTargetElement.replaceWith(...(oNewChild.children as unknown as Node[])); // Somehow TS doesn't like this but the documentation says is should work\n\t\t\t\t\t} else {\n\t\t\t\t\t\toNode.appendChild(oNewChild);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction prepareAggregationElement(oNode: Element, sAggregationName: string, oElementChild: Element | null): Element {\n\tconst oNewChild = document.createElementNS(oNode.namespaceURI, sAggregationName.replace(/:/gi, \"_\"));\n\twhile (oElementChild) {\n\t\tconst oNextChild = oElementChild.nextElementSibling;\n\t\toNewChild.appendChild(oElementChild);\n\t\toElementChild = oNextChild;\n\t}\n\treturn oNewChild;\n}\n\nasync function processBuildingBlock(\n\tBuildingBlockClass: typeof BuildingBlockTemplatingBase,\n\toNode: Element,\n\toVisitor: IVisitorCallback,\n\tisPublic = false\n): Promise<void> {\n\tconst oMetadata = transformMetadata(BuildingBlockClass.metadata);\n\n\tconst sFragmentName = oMetadata.fragment ?? `${oMetadata.namespace ?? oMetadata.publicNamespace}.${oMetadata.xmlTag ?? oMetadata.name}`;\n\n\tconst mContexts: Record<string, Context> = {};\n\tconst oSettings = oVisitor.getSettings();\n\n\t// Add an empty converter context if there is none in order to have a place to store object values\n\toSettings.models.converterContext ??= new JSONModel();\n\n\t//Inject storage for macros\n\tif (!oSettings[sFragmentName]) {\n\t\toSettings[sFragmentName] = {};\n\t}\n\n\t// First of all we need to visit the attributes to resolve the properties and the metadata contexts\n\tconst propertyValues = await processProperties(oMetadata, oNode, isPublic, oVisitor);\n\tconst initialKeys = Object.keys(propertyValues);\n\tconst mMissingContext = processContexts(oMetadata, oSettings, oNode, isPublic, oVisitor, mContexts, propertyValues);\n\n\ttry {\n\t\t// Aggregation and complex type support\n\t\tconst oAggregations = await processChildren(oNode, oVisitor, oMetadata, isPublic, propertyValues);\n\t\tlet oControlConfig = {};\n\n\t\tif (oSettings.models.viewData) {\n\t\t\t// Only used in the Field macro and even then maybe not really useful\n\t\t\toControlConfig = oSettings.models.viewData.getProperty(\"/controlConfiguration\");\n\t\t}\n\t\tlet processedPropertyValues = propertyValues;\n\n\t\tObject.keys(propertyValues).forEach((propName) => {\n\t\t\tlet oData = propertyValues[propName] as unknown as Context;\n\t\t\t//check for additional processing function to validate / overwrite parameters\n\t\t\tconst originalDefinition = BuildingBlockClass?.metadata?.properties[propName];\n\t\t\tif (originalDefinition?.validate) {\n\t\t\t\toData = originalDefinition.validate(oData) || oData;\n\t\t\t}\n\t\t\tif (oData?.isA?.(SAP_UI_MODEL_CONTEXT) && !oData.getModel().isA(\"sap.ui.model.odata.v4.ODataMetaModel\")) {\n\t\t\t\tpropertyValues[propName] = oData.getObject();\n\t\t\t}\n\t\t});\n\t\tpropertyValues.isPublic = isPublic;\n\n\t\tconst oInstance = new BuildingBlockClass({ ...propertyValues, ...oAggregations }, oControlConfig, oSettings);\n\t\tprocessedPropertyValues = oInstance.getProperties();\n\t\tObject.keys(oMetadata.metadataContexts).forEach(function (sContextName: string) {\n\t\t\tif (processedPropertyValues.hasOwnProperty(sContextName)) {\n\t\t\t\tconst targetObject = processedPropertyValues[sContextName];\n\t\t\t\tif (isContext(targetObject)) {\n\t\t\t\t\tmContexts[sContextName] = targetObject as Context;\n\t\t\t\t} else if (typeof targetObject === \"object\") {\n\t\t\t\t\tconst attributeValue = storeObjectValue(targetObject);\n\t\t\t\t\toSettings.models.converterContext.setProperty(attributeValue, targetObject);\n\t\t\t\t\tconst newContext = oSettings.models.converterContext.createBindingContext(attributeValue)!;\n\t\t\t\t\tunstoreObjectValue(attributeValue);\n\t\t\t\t\tmContexts[sContextName] = newContext;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst oAttributesModel: JSONModel = new AttributeModel(oNode, processedPropertyValues, BuildingBlockClass);\n\t\tmContexts[\"this\"] = oAttributesModel.createBindingContext(\"/\");\n\t\tlet oPreviousMacroInfo: MacroInfo | undefined;\n\t\t// core:require need to be defined on the node itself to be picked up due to the templating step\n\t\tconst coreRequire = oNode?.getAttribute(\"core:require\") || undefined;\n\n\t\t// Keep track\n\t\tif (TraceInfo.isTraceInfoActive()) {\n\t\t\tconst oTraceInfo = TraceInfo.traceMacroCalls(sFragmentName, oMetadata, mContexts, oNode, oVisitor);\n\t\t\tif (oTraceInfo?.macroInfo) {\n\t\t\t\toPreviousMacroInfo = oSettings[\"_macroInfo\"];\n\t\t\t\toSettings[\"_macroInfo\"] = oTraceInfo.macroInfo;\n\t\t\t}\n\t\t}\n\t\tvalidateMacroSignature(sFragmentName, oMetadata, mContexts, oNode);\n\n\t\tconst oContextVisitor = oVisitor.with(mContexts, oMetadata.isOpen !== undefined ? !oMetadata.isOpen : true);\n\t\tconst oParent = oNode.parentNode;\n\n\t\tlet iChildIndex: number;\n\t\tlet oPromise;\n\t\tif (oParent) {\n\t\t\tiChildIndex = Array.from(oParent.children).indexOf(oNode);\n\n\t\t\tif (oMetadata.fragment) {\n\t\t\t\toPromise = oContextVisitor.insertFragment(sFragmentName, oNode);\n\t\t\t} else {\n\t\t\t\tconst oldKeys = Object.keys(temporaryObjectStore);\n\t\t\t\tlet templateString;\n\t\t\t\tif ((oInstance as RuntimeBuildingBlock).getRuntimeBuildingBlockTemplate) {\n\t\t\t\t\ttemplateString = await jsx.renderAsXML(async () =>\n\t\t\t\t\t\t(oInstance as RuntimeBuildingBlock).getRuntimeBuildingBlockTemplate(oNode)\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\ttemplateString = await jsx.renderAsXML(async () => oInstance.getTemplate!(oNode));\n\t\t\t\t}\n\n\t\t\t\tif (BuildingBlockClass.isRuntime) {\n\t\t\t\t\t// For runtime building blocks, we need to attach all objects to the converterContext directly, as the actual rendering takes place at runtime\n\t\t\t\t\tfor (const storeKey in temporaryObjectStore) {\n\t\t\t\t\t\tif (!oldKeys.includes(storeKey)) {\n\t\t\t\t\t\t\tconst data = unstoreObjectValue(storeKey);\n\t\t\t\t\t\t\toSettings.models.converterContext.setProperty(storeKey, data);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet hasError = \"\";\n\t\t\t\tif (templateString) {\n\t\t\t\t\tlet hasParseError = false;\n\t\t\t\t\tlet parsedTemplate = parseXMLString(templateString, true);\n\t\t\t\t\t// For safety purpose we try to detect trailing text in between XML Tags\n\t\t\t\t\tfor (const element of parsedTemplate) {\n\t\t\t\t\t\tconst iter = document.createNodeIterator(element, NodeFilter.SHOW_TEXT);\n\t\t\t\t\t\tlet textnode = iter.nextNode();\n\t\t\t\t\t\tif (element.localName === \"parsererror\") {\n\t\t\t\t\t\t\thasParseError = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile (textnode) {\n\t\t\t\t\t\t\tif (textnode.textContent && textnode.textContent.trim().length > 0) {\n\t\t\t\t\t\t\t\thasError = textnode.textContent;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttextnode = iter.nextNode();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (hasParseError) {\n\t\t\t\t\t\t// If there is a parseerror while processing the XML it means the XML itself is malformed, as such we rerun the template process\n\t\t\t\t\t\t// Setting isTraceMode true will make it so that each xml` expression is checked for validity from XML perspective\n\t\t\t\t\t\t// If an error is found it's returned instead of the normal fragment\n\t\t\t\t\t\tLog.error(`Error while processing building block ${oMetadata.xmlTag || oMetadata.name}`, hasError);\n\t\t\t\t\t\tparsedTemplate = (await processXmlInTrace(async () => {\n\t\t\t\t\t\t\tlet initialTemplate;\n\t\t\t\t\t\t\tif ((oInstance as RuntimeBuildingBlock).getRuntimeBuildingBlockTemplate) {\n\t\t\t\t\t\t\t\tinitialTemplate = await jsx.renderAsXML(async () =>\n\t\t\t\t\t\t\t\t\t(oInstance as RuntimeBuildingBlock).getRuntimeBuildingBlockTemplate(oNode)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tinitialTemplate = await jsx.renderAsXML(async () => oInstance.getTemplate!(oNode));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn parseXMLString(initialTemplate ?? \"\", true);\n\t\t\t\t\t\t})) as Element[];\n\t\t\t\t\t} else if (hasError.length > 0) {\n\t\t\t\t\t\t// If there is trailing text we create a standard error and display it.\n\t\t\t\t\t\tLog.error(`Error while processing building block ${oMetadata.xmlTag || oMetadata.name}`);\n\t\t\t\t\t\tconst oErrorText = createErrorXML(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t`Error while processing building block ${oMetadata.xmlTag || oMetadata.name}`,\n\t\t\t\t\t\t\t\t`Trailing text was found in the XML: ${hasError}`\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tparsedTemplate.map((template) => template.outerHTML).join(\"\\n\")\n\t\t\t\t\t\t);\n\t\t\t\t\t\tparsedTemplate = parseXMLString(oErrorText, true);\n\t\t\t\t\t}\n\t\t\t\t\toNode.replaceWith(...parsedTemplate);\n\n\t\t\t\t\tconst visitedNodes = parsedTemplate.map(async (internalNode) => {\n\t\t\t\t\t\tprocessSlots(oAggregations, oMetadata.aggregations, internalNode, false);\n\t\t\t\t\t\treturn oContextVisitor.visitNode(internalNode);\n\t\t\t\t\t});\n\t\t\t\t\toPromise = Promise.all(visitedNodes);\n\t\t\t\t} else {\n\t\t\t\t\toNode.remove();\n\t\t\t\t\toPromise = Promise.resolve();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait oPromise;\n\t\t\tconst oMacroElement = oParent.children[iChildIndex];\n\t\t\tprocessSlots(oAggregations, oMetadata.aggregations, oMacroElement, true);\n\t\t\tif (oMacroElement !== undefined) {\n\t\t\t\tconst oRemainingSlots = oMacroElement.querySelectorAll(\"slot\");\n\t\t\t\toRemainingSlots.forEach(function (oSlotElement) {\n\t\t\t\t\toSlotElement.remove();\n\t\t\t\t});\n\t\t\t\tif (coreRequire) {\n\t\t\t\t\tlet requireOnMacro = oMacroElement.getAttributeNS(\"sap.ui.core\", \"require\");\n\t\t\t\t\tif (requireOnMacro) {\n\t\t\t\t\t\trequireOnMacro = requireOnMacro.substring(0, requireOnMacro.length - 1) + \",\" + coreRequire.substring(1); // Remove last } and first {\n\t\t\t\t\t} else {\n\t\t\t\t\t\trequireOnMacro = coreRequire;\n\t\t\t\t\t}\n\t\t\t\t\toMacroElement.setAttributeNS(\"sap.ui.core\", \"core:require\", requireOnMacro);\n\t\t\t\t}\n\t\t\t\tif (propertyValues.class && !BuildingBlockClass.isRuntime) {\n\t\t\t\t\toMacroElement.classList.add(propertyValues.class as string);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (oPreviousMacroInfo) {\n\t\t\t//restore macro info if available\n\t\t\toSettings[\"_macroInfo\"] = oPreviousMacroInfo;\n\t\t} else {\n\t\t\tdelete oSettings[\"_macroInfo\"];\n\t\t}\n\t} catch (e: unknown) {\n\t\t// In case there is a generic error (usually code error), we retrieve the current context information and create a dedicated error message\n\n\t\tconst traceDetails = {\n\t\t\tinitialProperties: {} as Record<string, unknown>,\n\t\t\tresolvedProperties: {} as Record<string, unknown>,\n\t\t\tmissingContexts: mMissingContext\n\t\t};\n\t\tfor (const propertyName of initialKeys) {\n\t\t\tconst propertyValue = propertyValues[propertyName];\n\t\t\tif (isContext(propertyValue)) {\n\t\t\t\ttraceDetails.initialProperties[propertyName] = {\n\t\t\t\t\tpath: propertyValue.getPath(),\n\t\t\t\t\tvalue: propertyValue.getObject()\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\ttraceDetails.initialProperties[propertyName] = propertyValue;\n\t\t\t}\n\t\t}\n\t\tfor (const propertyName in propertyValues) {\n\t\t\tconst propertyValue = propertyValues[propertyName];\n\t\t\tif (!initialKeys.includes(propertyName)) {\n\t\t\t\tif (isContext(propertyValue)) {\n\t\t\t\t\ttraceDetails.resolvedProperties[propertyName] = {\n\t\t\t\t\t\tpath: propertyValue.getPath(),\n\t\t\t\t\t\tvalue: propertyValue.getObject()\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\ttraceDetails.resolvedProperties[propertyName] = propertyValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tLog.error(e as string);\n\t\tconst oError = createErrorXML(\n\t\t\t[`Error while processing building block ${oMetadata.name}`],\n\t\t\toNode.outerHTML,\n\t\t\ttraceDetails,\n\t\t\t(e as Error).stack\n\t\t);\n\t\tconst oTemplate = parseXMLString(oError, true);\n\t\toNode.replaceWith(...oTemplate);\n\t}\n}\nfunction addSingleContext(\n\tmContexts: Record<string, Context | undefined>,\n\toVisitor: IVisitorCallback,\n\toCtx: {\n\t\tname?: string;\n\t\tpath: string;\n\t\tmodel?: string;\n\t}\n): void {\n\tconst sKey = (oCtx.name || oCtx.model || undefined) as string;\n\tif (mContexts[sKey]) {\n\t\treturn; // do not add twice\n\t}\n\ttry {\n\t\tlet sContextPath = oCtx.path;\n\t\tif (oCtx.model !== null) {\n\t\t\tsContextPath = `${oCtx.model}>${sContextPath}`;\n\t\t}\n\t\tconst mSetting = oVisitor.getSettings();\n\t\tif (oCtx.model === \"converterContext\" && oCtx.path.length > 0) {\n\t\t\tmContexts[sKey] = mSetting.models[oCtx.model].getContext(oCtx.path /*, mSetting.bindingContexts[oCtx.model]*/); // add the context to the visitor\n\t\t} else if (!mSetting.bindingContexts[oCtx.model!] && mSetting.models[oCtx.model!]) {\n\t\t\tmContexts[sKey] = mSetting.models[oCtx.model!].getContext(oCtx.path); // add the context to the visitor\n\t\t} else {\n\t\t\tmContexts[sKey] = oVisitor.getContext(sContextPath); // add the context to the visitor\n\t\t}\n\t} catch (ex) {\n\t\t// ignore the context as this can only be the case if the model is not ready,\n\t\t// i.e. not a preprocessing model but maybe a model for providing afterwards\n\t}\n}\n\n/**\n * Register a building block definition to be used inside the xml template processor.\n * @param BuildingBlockClass The building block definition\n */\nexport function registerBuildingBlock(BuildingBlockClass: typeof BuildingBlockTemplatingBase): void {\n\tif (BuildingBlockClass.metadata.namespace !== undefined) {\n\t\tXMLPreprocessor.plugIn(\n\t\t\tasync (oNode: Element, oVisitor: IVisitorCallback) => processBuildingBlock(BuildingBlockClass, oNode, oVisitor),\n\t\t\tBuildingBlockClass.metadata.namespace,\n\t\t\tBuildingBlockClass.metadata.xmlTag || BuildingBlockClass.metadata.name\n\t\t);\n\t}\n\tif (BuildingBlockClass.metadata.publicNamespace !== undefined) {\n\t\tXMLPreprocessor.plugIn(\n\t\t\tasync (oNode: Element, oVisitor: IVisitorCallback) => processBuildingBlock(BuildingBlockClass, oNode, oVisitor, true),\n\t\t\tBuildingBlockClass.metadata.publicNamespace,\n\t\t\tBuildingBlockClass.metadata.xmlTag || BuildingBlockClass.metadata.name\n\t\t);\n\t}\n}\n\n/**\n * UnRegister a building block definition so that it is no longer used inside the xml template processor.\n * @param BuildingBlockClass The building block definition\n */\nexport function unregisterBuildingBlock(BuildingBlockClass: typeof BuildingBlockTemplatingBase): void {\n\tif (BuildingBlockClass.metadata.namespace !== undefined) {\n\t\tXMLPreprocessor.plugIn(\n\t\t\tnull,\n\t\t\tBuildingBlockClass.metadata.namespace,\n\t\t\tBuildingBlockClass.metadata.xmlTag || BuildingBlockClass.metadata.name\n\t\t);\n\t}\n\tif (BuildingBlockClass.metadata.publicNamespace !== undefined) {\n\t\tXMLPreprocessor.plugIn(\n\t\t\tnull,\n\t\t\tBuildingBlockClass.metadata.publicNamespace,\n\t\t\tBuildingBlockClass.metadata.xmlTag || BuildingBlockClass.metadata.name\n\t\t);\n\t}\n}\n\nfunction createErrorXML(errorMessages: string[], xmlFragment: string, additionalData?: object, stack?: string): string {\n\tconst errorLabels = errorMessages.map((errorMessage) => xml`<m:Label text=\"${escapeXMLAttributeValue(errorMessage)}\"/>`);\n\tlet errorStack = \"\";\n\tif (stack) {\n\t\tconst stackFormatted = btoa(`<pre>${stack}</pre>`);\n\t\terrorStack = xml`<m:FormattedText htmlText=\"{= BBF.base64Decode('${stackFormatted}') }\" />`;\n\t}\n\tlet additionalText = \"\";\n\tif (additionalData) {\n\t\tadditionalText = xml`<m:VBox>\n\t\t\t\t\t\t<m:Label text=\"Trace Info\"/>\n\t\t\t\t\t\t<code:CodeEditor type=\"json\"  value=\"${`{= BBF.base64Decode('${btoa(JSON.stringify(additionalData, null, 4))}') }`}\" height=\"300px\" />\n\t\t\t\t\t</m:VBox>`;\n\t}\n\treturn xml`<controls:FormElementWrapper xmlns:controls=\"sap.fe.core.controls\">\n\t\t\t\t\t<m:VBox xmlns:m=\"sap.m\" xmlns:code=\"sap.ui.codeeditor\" core:require=\"{BBF:'sap/fe/core/buildingBlocks/templating/BuildingBlockFormatter'}\">\n\t\t\t\t\t${errorLabels}\n\t\t\t\t\t${errorStack}\n\t\t\t\t\t\t<grid:CSSGrid gridTemplateRows=\"fr\" gridTemplateColumns=\"repeat(2,1fr)\" gridGap=\"1rem\" xmlns:grid=\"sap.ui.layout.cssgrid\" >\n\t\t\t\t\t\t\t<m:VBox>\n\t\t\t\t\t\t\t\t<m:Label text=\"How the building block was called\"/>\n\t\t\t\t\t\t\t\t<code:CodeEditor type=\"xml\" value=\"${`{= BBF.base64Decode('${btoa(xmlFragment.replaceAll(\"&gt;\", \">\"))}') }`}\" height=\"300px\" />\n\t\t\t\t\t\t\t</m:VBox>\n\t\t\t\t\t\t\t${additionalText}\n\t\t\t\t\t\t</grid:CSSGrid>\n\t\t\t\t\t</m:VBox>\n\t\t\t\t</controls:FormElementWrapper>`;\n}\n\nconst temporaryObjectStore: Record<string, unknown> = {};\n\n/**\n * Stores an object value in a temporary storage and returns an ID used to retrieve this value at a later point in time.\n *\n * Required as there is functionality like the xml` function, which might take objects as parameters but needs to return a serialized string.\n * @param value Value to store\n * @returns ID to retrieve this value\n */\nexport function storeObjectValue(value: unknown): string {\n\tconst propertyUID = `/uid--${uid()}`;\n\ttemporaryObjectStore[propertyUID] = value;\n\treturn propertyUID;\n}\n\n/**\n * Unstores an object from a temporary store by removing it and returning its object value.\n * @param propertyUID ID to retrieve this value\n * @returns Object value\n */\nfunction unstoreObjectValue(propertyUID: string): unknown {\n\tconst value = temporaryObjectStore[propertyUID];\n\tdelete temporaryObjectStore[propertyUID];\n\treturn value;\n}\n\nlet processNextXmlInTrace = false;\n/**\n * Makes sure that all xml` calls inside the given method are processed in trace mode.\n * @param method The method to execute\n * @returns The return value of the given method\n */\nconst processXmlInTrace = async function (method: (...args: unknown[]) => Promise<unknown>): Promise<unknown> {\n\tprocessNextXmlInTrace = true;\n\tlet returnValue;\n\ttry {\n\t\treturnValue = method();\n\t} finally {\n\t\tprocessNextXmlInTrace = false;\n\t}\n\treturn returnValue;\n};\n\n/**\n * Parse an XML string and return the associated document.\n * @param xmlString The xml string\n * @param [addDefaultNamespaces] Whether or not default namespaces should be added\n * @returns The XML document.\n */\nexport function parseXMLString(xmlString: string, addDefaultNamespaces = false): Element[] {\n\tif (addDefaultNamespaces) {\n\t\txmlString = `<template\n\t\t\t\t\t\txmlns:template=\"http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1\"\n\t\t\t\t\t\txmlns:m=\"sap.m\"\n\t\t\t\t\t\txmlns:macros=\"sap.fe.macros\"\n\t\t\t\t\t\txmlns:core=\"sap.ui.core\"\n\t\t\t\t\t\txmlns:mdc=\"sap.ui.mdc\"\n\t\t\t\t\t\txmlns:customData=\"http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1\">${xmlString}</template>`;\n\t}\n\tconst xmlDocument = DOMParserInstance.parseFromString(xmlString, \"text/xml\");\n\tlet output = xmlDocument.firstElementChild;\n\twhile (output?.localName === \"template\") {\n\t\toutput = output.firstElementChild;\n\t}\n\tconst children = output?.parentElement ? output?.parentElement.children : [output as Element];\n\treturn Array.from(children);\n}\n\n/**\n * Escape an XML attribute value.\n * @param value The attribute value to escape.\n * @returns The escaped string.\n */\nexport function escapeXMLAttributeValue(value?: string): string | undefined {\n\treturn value?.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&apos;\");\n}\n\nfunction renderInTraceMode(outStr: string): string {\n\tconst xmlResult = parseXMLString(outStr, true);\n\tif (xmlResult?.length > 0 && xmlResult[0]?.localName === \"parsererror\") {\n\t\tconst errorMessage = (xmlResult[0] as HTMLElement).innerText || (xmlResult[0] as HTMLElement).innerHTML;\n\t\treturn createErrorXML([errorMessage.split(\"\\n\")[0]], outStr);\n\t} else {\n\t\treturn outStr;\n\t}\n}\n\nexport type XMLProcessorTypeValue =\n\t| string\n\t| boolean\n\t| number\n\t| undefined\n\t| null\n\t| object\n\t| Record<string, unknown>\n\t| BindingToolkitExpression<string | boolean | number>\n\t| Array<string>\n\t| Array<Function>\n\t| Function\n\t| Context;\n/**\n * Create a string representation of the template literal while handling special object case.\n * @param strings The string parts of the template literal\n * @param values The values part of the template literal\n * @returns The XML string document representing the string that was used.\n */\nexport const xml = (strings: TemplateStringsArray, ...values: XMLProcessorTypeValue[]): string => {\n\tlet outStr = \"\";\n\tlet i;\n\tfor (i = 0; i < values.length; i++) {\n\t\toutStr += strings[i];\n\n\t\t// Handle the different case of object, if it's an array we join them, if it's a binding expression then we compile it.\n\t\tconst value = values[i];\n\n\t\tif (Array.isArray(value) && value.length > 0 && typeof value[0] === \"string\") {\n\t\t\toutStr += value.flat(5).join(\"\\n\").trim();\n\t\t} else if (isFunctionArray(value)) {\n\t\t\toutStr += value.map((valuefn) => valuefn()).join(\"\\n\");\n\t\t} else if (isBindingToolkitExpression(value)) {\n\t\t\tconst compiledExpression = compileExpression(value);\n\t\t\toutStr += escapeXMLAttributeValue(compiledExpression);\n\t\t} else if (typeof value === \"undefined\") {\n\t\t\toutStr += \"{this>undefinedValue}\";\n\t\t} else if (typeof value === \"function\") {\n\t\t\toutStr += value();\n\t\t} else if (typeof value === \"object\" && value !== null) {\n\t\t\tif (isContext(value)) {\n\t\t\t\toutStr += value.getPath();\n\t\t\t} else {\n\t\t\t\tconst propertyUId = storeObjectValue(value);\n\t\t\t\toutStr += `${propertyUId}`;\n\t\t\t}\n\t\t} else if (value && typeof value === \"string\" && !value.startsWith(\"<\") && !value.startsWith(\"&lt;\")) {\n\t\t\toutStr += escapeXMLAttributeValue(value);\n\t\t} else {\n\t\t\toutStr += value;\n\t\t}\n\t}\n\toutStr += strings[i];\n\toutStr = outStr.trim();\n\tif (processNextXmlInTrace) {\n\t\treturn renderInTraceMode(outStr);\n\t}\n\treturn outStr;\n};\n\nexport const addConditionallyToXML = function (condition: boolean, partToAdd: string): string {\n\tif (condition) {\n\t\treturn partToAdd;\n\t} else {\n\t\treturn \"\";\n\t}\n};\n\n/**\n * Add an attribute depending on the current value of the property.\n * If it's undefined the attribute is not added.\n * @param attributeName\n * @param value\n * @returns The attribute to add if the value is not undefined, otherwise an empty string\n */\nexport const addAttributeToXML = function (attributeName: string, value?: XMLProcessorTypeValue): () => string {\n\tif (value !== undefined && !isUndefinedExpression(value)) {\n\t\treturn () => xml`${attributeName}=\"${value}\"`;\n\t} else {\n\t\treturn () => \"\";\n\t}\n};\n"],"mappings":"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","ignoreList":[],"file":"BuildingBlockTemplateProcessor-dbg.js"}