{"version":3,"file":"RuntimeBuildingBlockFragment.js","names":["RuntimeBuildingBlockFragment","_dec","defineUI5Class","_dec2","event","_dec3","aggregation","type","_dec4","multiple","_dec5","_dec6","_class","_class2","_Fragment","_this","_len","arguments","length","args","Array","_key","call","this","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_exports","_inheritsLoose","Fragment","_applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer","RUNTIME_BLOCKS","storeRuntimeBlock","BuildingBlockClass","metadata","namespace","publicNamespace","name","registerType","load","async","mSettings","buildingBlockDetail","fragmentName","e","loadErrorMessage","init","Label","text","fragmentContent","undefined","Error","classSettings","feCustomData","customData","mProperties","value","functionHolder","containingView","getController","getView","pageComponent","Component","getOwnerComponentFor","appComponent","CommonUtils","getAppComponent","metaModel","getMetaModel","pageModel","getModel","functionStringInOrder","split","propertiesAssignedToFunction","propertyName","properties","propertyMetadata","pageModelContext","createBindingContext","bindable","Number","resolveBindingString","functionIndex","indexOf","functionString","targetFunction","find","functionDef","_sapui_handlerName","bind","getObject","ManagedObject","runWithPreprocessors","renderedControl","jsx","withContext","view","templateProcessingSettings","models","converterContext","JSONModel","isRuntimeInstantiation","buildingBlockInstance","initControllerExtensionHookHandlers","fragmentXML","dependents","dependent","addDependent","customDataHolder","addCustomData","layoutData","setAggregation","getContent","_bAsync","_aContent","id","sId","createId","settings","controlSettings","allAssociations","getMetadata","getAllAssociations","associationDetailName","Object","keys","associations","isArray","map","association","singleAssociationValue"],"sources":["./RuntimeBuildingBlockFragment.ts"],"sourcesContent":["import type { BindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { resolveBindingString } from \"sap/fe/base/BindingToolkit\";\nimport type { UI5AssociationMetadata } from \"sap/fe/base/ClassSupport\";\nimport { aggregation, defineUI5Class, event } from \"sap/fe/base/ClassSupport\";\nimport { initControllerExtensionHookHandlers } from \"sap/fe/base/HookSupport\";\nimport jsx from \"sap/fe/base/jsx-runtime/jsx\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type ExtensionAPI from \"sap/fe/core/ExtensionAPI\";\nimport type PageController from \"sap/fe/core/PageController\";\nimport type ResourceModel from \"sap/fe/core/ResourceModel\";\nimport type TemplateComponent from \"sap/fe/core/TemplateComponent\";\nimport type { TemplateProcessorSettings } from \"sap/fe/core/buildingBlocks/templating/BuildingBlockTemplateProcessor\";\nimport type RuntimeBuildingBlock from \"sap/fe/core/buildingBlocks/templating/RuntimeBuildingBlock\";\nimport Label from \"sap/m/Label\";\nimport ManagedObject from \"sap/ui/base/ManagedObject\";\nimport Component from \"sap/ui/core/Component\";\nimport type Control from \"sap/ui/core/Control\";\nimport type CustomData from \"sap/ui/core/CustomData\";\nimport type UI5Element from \"sap/ui/core/Element\";\nimport Fragment from \"sap/ui/core/Fragment\";\nimport type LayoutData from \"sap/ui/core/LayoutData\";\nimport type View from \"sap/ui/core/mvc/View\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type { ManagedObjectEx } from \"types/extension_types\";\n\n/**\n * Internal extension to the Fragment class in order to add some place to hold functions for runtime building blocks\n */\n@defineUI5Class(\"sap.fe.core.buildingBlocks.templating.RuntimeBuildingBlockFragment\")\nexport default class RuntimeBuildingBlockFragment extends Fragment {\n\t/*\n\t * Event to hold and resolve functions for runtime building blocks\n\t */\n\t@event()\n\tfunctionHolder!: Function;\n\n\t@aggregation({ type: \"sap.ui.core.Control\" })\n\tfragmentXML?: Control;\n\n\t@aggregation({ type: \"sap.ui.core.Control[]\", multiple: true })\n\tdependents!: Control[];\n\n\t@aggregation({ type: \"sap.ui.core.CustomData[]\", multiple: true })\n\tcustomDataHolder!: CustomData[];\n\n\t@aggregation({ type: \"sap.ui.core.LayoutData\" })\n\tlayoutData!: LayoutData;\n}\n\ntype FragmentCustomData = {\n\tmProperties: {\n\t\tvalue: {\n\t\t\t\"sap.fe.core.buildingBlocks.templating\"?: Record<string, string>;\n\t\t};\n\t};\n};\n\nexport type RuntimeBuildingBlockFragmentSettings = {\n\tfragmentName: string;\n\tfragmentContent?: typeof RuntimeBuildingBlock;\n\tcontainingView: View;\n\tcustomData?: FragmentCustomData[];\n\tdependents?: UI5Element[];\n\tcustomDataHolder?: CustomData[];\n\tlayoutData?: LayoutData;\n\tfragmentXML?: Control;\n\tfunctionHolder?: FunctionWithHandler[][];\n\tloadErrorMessage?: string;\n};\n\ntype FunctionWithHandler = Function & {\n\t_sapui_handlerName?: string;\n};\ntype FragmentWithInternals = {\n\t_bAsync: boolean;\n\t_aContent: Control | Control[] | undefined;\n};\n\nconst RUNTIME_BLOCKS: Record<string, typeof RuntimeBuildingBlock> = {};\n/**\n * Stores the class of a runtime building block to be loaded whenever the building block is used at runtime.\n * @param BuildingBlockClass\n */\nexport function storeRuntimeBlock(BuildingBlockClass: typeof RuntimeBuildingBlock): void {\n\tRUNTIME_BLOCKS[\n\t\t`${BuildingBlockClass.metadata.namespace ?? BuildingBlockClass.metadata.publicNamespace}.${BuildingBlockClass.metadata.name}`\n\t] = BuildingBlockClass;\n}\n\nRuntimeBuildingBlockFragment.registerType(\"FE_COMPONENTS\", {\n\tload: async function (mSettings: RuntimeBuildingBlockFragmentSettings) {\n\t\tlet buildingBlockDetail;\n\t\ttry {\n\t\t\tbuildingBlockDetail = await RUNTIME_BLOCKS[mSettings.fragmentName].load();\n\t\t} catch (e) {\n\t\t\tmSettings.loadErrorMessage = e as string;\n\t\t}\n\t\treturn buildingBlockDetail;\n\t},\n\tinit: function (this: FragmentWithInternals, mSettings: RuntimeBuildingBlockFragmentSettings) {\n\t\t// In case there was an error during the load process, exit early\n\t\tif (mSettings.loadErrorMessage) {\n\t\t\treturn new Label({ text: mSettings.loadErrorMessage });\n\t\t}\n\t\tlet BuildingBlockClass = mSettings.fragmentContent;\n\t\tif (BuildingBlockClass === undefined) {\n\t\t\t// In some case we might have been called here synchronously (unstash case for instance), which means we didn't go through the load function\n\t\t\tBuildingBlockClass = RUNTIME_BLOCKS[mSettings.fragmentName];\n\t\t}\n\t\tif (BuildingBlockClass === undefined) {\n\t\t\tthrow new Error(`No building block class for runtime building block ${mSettings.fragmentName} found`);\n\t\t}\n\n\t\tconst classSettings: Record<string, unknown> = {};\n\t\tconst feCustomData: Record<string, string> =\n\t\t\tmSettings.customData?.[0]?.mProperties?.value?.[\"sap.fe.core.buildingBlocks.templating\"] || {};\n\t\tdelete mSettings.customData;\n\t\tconst functionHolder: FunctionWithHandler[][] = mSettings.functionHolder ?? [];\n\t\tdelete mSettings.functionHolder;\n\n\t\t// containingView can also be a fragment, so we have to use the controller (which could also be an ExtensionAPI) get the actual view\n\t\tconst containingView =\n\t\t\tmSettings.containingView.getController?.()?.getView?.() ??\n\t\t\t(mSettings.containingView.getController?.() as unknown as ExtensionAPI)?.[\"_view\"] ??\n\t\t\tmSettings.containingView;\n\t\tconst pageComponent = Component.getOwnerComponentFor(containingView) as TemplateComponent;\n\t\tconst appComponent = CommonUtils.getAppComponent(containingView);\n\n\t\tconst metaModel = appComponent.getMetaModel();\n\t\tconst pageModel = pageComponent.getModel(\"_pageModel\");\n\n\t\tconst functionStringInOrder: string[] | undefined = feCustomData.functionStringInOrder?.split(\",\");\n\t\tconst propertiesAssignedToFunction: string[] | undefined = feCustomData.propertiesAssignedToFunction?.split(\",\") ?? [];\n\t\tfor (const propertyName in BuildingBlockClass.metadata.properties) {\n\t\t\tconst propertyMetadata = BuildingBlockClass.metadata.properties[propertyName];\n\t\t\tconst pageModelContext = pageModel.createBindingContext(feCustomData[propertyName]);\n\n\t\t\tif (pageModelContext === null) {\n\t\t\t\t// value cannot be resolved, so it is either a runtime binding or a constant\n\t\t\t\tlet value: string | boolean | number | BindingToolkitExpression<string | boolean | number> | undefined =\n\t\t\t\t\tfeCustomData[propertyName];\n\n\t\t\t\tif (typeof value === \"string\") {\n\t\t\t\t\tif (propertyMetadata.bindable !== true) {\n\t\t\t\t\t\t// runtime bindings are not allowed, so convert strings into actual primitive types\n\t\t\t\t\t\tswitch (propertyMetadata.type) {\n\t\t\t\t\t\t\tcase \"boolean\":\n\t\t\t\t\t\t\t\tvalue = value === \"true\";\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"number\":\n\t\t\t\t\t\t\t\tvalue = Number(value);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// runtime bindings are allowed, so resolve the values as BindingToolkit expressions\n\t\t\t\t\t\tvalue = resolveBindingString(value, propertyMetadata.type);\n\t\t\t\t\t}\n\t\t\t\t} else if (propertyMetadata.type === \"function\") {\n\t\t\t\t\tconst functionIndex = propertiesAssignedToFunction.indexOf(propertyName);\n\t\t\t\t\tif (functionIndex > -1) {\n\t\t\t\t\t\tconst functionString = functionStringInOrder[functionIndex];\n\t\t\t\t\t\tconst targetFunction = functionHolder?.find((functionDef) => functionDef[0]?._sapui_handlerName === functionString);\n\t\t\t\t\t\t// We use the _sapui_handlerName to identify which function is the one we want to bind here\n\t\t\t\t\t\tif (targetFunction && targetFunction.length > 1) {\n\t\t\t\t\t\t\tvalue = targetFunction[0].bind(targetFunction[1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tclassSettings[propertyName] = value;\n\t\t\t} else if (pageModelContext.getObject() !== undefined && propertyName !== \"contextPath\" && propertyName !== \"metaPath\") {\n\t\t\t\t// get value from page model\n\t\t\t\tclassSettings[propertyName] = pageModelContext.getObject();\n\t\t\t} else {\n\t\t\t\t// bind to metamodel\n\t\t\t\tclassSettings[propertyName] = metaModel.createBindingContext(feCustomData[propertyName]);\n\t\t\t}\n\t\t}\n\n\t\treturn (ManagedObject as ManagedObjectEx).runWithPreprocessors(\n\t\t\t() => {\n\t\t\t\tconst renderedControl = jsx.withContext({ view: containingView, appComponent: appComponent }, () => {\n\t\t\t\t\tconst templateProcessingSettings = {\n\t\t\t\t\t\tmodels: {\n\t\t\t\t\t\t\t\"sap.fe.i18n\": containingView.getModel(\"sap.fe.i18n\") as ResourceModel,\n\t\t\t\t\t\t\tconverterContext: (containingView.getModel(\"_pageModel\") ?? new JSONModel()) as JSONModel\n\t\t\t\t\t\t},\n\t\t\t\t\t\tappComponent: appComponent,\n\t\t\t\t\t\tisRuntimeInstantiation: true\n\t\t\t\t\t} as TemplateProcessorSettings;\n\n\t\t\t\t\tconst buildingBlockInstance = new BuildingBlockClass!(classSettings, {}, templateProcessingSettings);\n\t\t\t\t\tinitControllerExtensionHookHandlers(buildingBlockInstance, containingView.getController() as PageController);\n\t\t\t\t\tif (mSettings.fragmentXML) {\n\t\t\t\t\t\tif (mSettings.dependents) {\n\t\t\t\t\t\t\tfor (const dependent of mSettings.dependents) {\n\t\t\t\t\t\t\t\tmSettings.fragmentXML.addDependent(dependent);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdelete mSettings.dependents;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (mSettings.customDataHolder) {\n\t\t\t\t\t\t\tfor (const customDataHolder of mSettings.customDataHolder) {\n\t\t\t\t\t\t\t\tmSettings.fragmentXML.addCustomData(customDataHolder);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdelete mSettings.customDataHolder;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (mSettings.layoutData) {\n\t\t\t\t\t\t\tmSettings.fragmentXML.setAggregation(\"layoutData\", mSettings.layoutData);\n\t\t\t\t\t\t\tdelete mSettings.layoutData;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn buildingBlockInstance.getContent?.(containingView, appComponent, mSettings.fragmentXML);\n\t\t\t\t});\n\t\t\t\tif (!this._bAsync) {\n\t\t\t\t\tthis._aContent = renderedControl;\n\t\t\t\t}\n\t\t\t\treturn renderedControl;\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: function (sId: string) {\n\t\t\t\t\treturn mSettings.containingView.createId(sId);\n\t\t\t\t},\n\t\t\t\tsettings: function (controlSettings: Record<string, string | ManagedObject | (string | ManagedObject)[]>) {\n\t\t\t\t\tconst allAssociations = this.getMetadata().getAllAssociations();\n\t\t\t\t\tfor (const associationDetailName of Object.keys(allAssociations)) {\n\t\t\t\t\t\tif (controlSettings[associationDetailName] !== undefined) {\n\t\t\t\t\t\t\tif ((allAssociations[associationDetailName] as UI5AssociationMetadata).multiple) {\n\t\t\t\t\t\t\t\t// Multiple association\n\t\t\t\t\t\t\t\t// The associated elements are indicated via local IDs; we need to change the references to global ones\n\t\t\t\t\t\t\t\tconst associations = (\n\t\t\t\t\t\t\t\t\tArray.isArray(controlSettings[associationDetailName])\n\t\t\t\t\t\t\t\t\t\t? controlSettings[associationDetailName]\n\t\t\t\t\t\t\t\t\t\t: [controlSettings[associationDetailName]]\n\t\t\t\t\t\t\t\t) as (string | ManagedObject)[];\n\n\t\t\t\t\t\t\t\t// Create global IDs for associations given as strings, not for already resolved ManagedObjects\n\t\t\t\t\t\t\t\tcontrolSettings[associationDetailName] = associations.map((association: string | ManagedObject) =>\n\t\t\t\t\t\t\t\t\ttypeof association === \"string\" ? mSettings.containingView.createId(association) : association\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Single association\n\t\t\t\t\t\t\t\tconst singleAssociationValue = controlSettings[associationDetailName];\n\t\t\t\t\t\t\t\tcontrolSettings[associationDetailName] =\n\t\t\t\t\t\t\t\t\ttypeof singleAssociationValue === \"string\"\n\t\t\t\t\t\t\t\t\t\t? mSettings.containingView.createId(singleAssociationValue)\n\t\t\t\t\t\t\t\t\t\t: singleAssociationValue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn controlSettings;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n});\n"],"mappings":"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","ignoreList":[]}