{"version":3,"file":"RoutingServiceFactory.js","names":["RoutingServiceEventing","_dec","defineUI5Class","_dec2","event","_dec3","_class","_class2","_EventProvider","_this","_len","arguments","length","args","Array","_key","call","this","_initializerDefineProperty","_descriptor","_descriptor2","_inheritsLoose","EventProvider","_applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer","RoutingService","_Service","_this2","_len2","_key2","navigationInfoQueue","enabled","_exports","_proto","init","oContext","getContext","scopeType","oAppComponent","scopeObject","oModel","getModel","oMetaModel","getMetaModel","oRouter","getRouter","oRouterProxy","getRouterProxy","eventProvider","oRoutingConfig","getManifestEntry","routing","_parseRoutingConfiguration","oAppConfig","outbounds","crossNavigation","initPromise","Promise","resolve","beforeExit","detachRouteMatched","_fnOnRouteMatched","fireEvent","exit","destroy","isFCL","config","routerClass","_mTargets","targets","sTargetName","Object","keys","assign","targetName","contextPattern","undefined","viewLevel","_getViewLevelFromPattern","_mRoutes","routes","oRouteManifestInfo","aRouteTargets","getRouteTargetNames","target","sRouteName","name","sRoutePattern","pattern","indexOf","Log","warning","iRouteLevel","routeLevel","item","sParentTargetName","parent","push","FCLLevel","controlAggregation","forEach","aLevel0RouteNames","aLevel1RouteNames","sDefaultRouteName","sName","iLevel","sDefaultTargetName","slice","sContextPath","oSettings","options","settings","contextPath","entitySet","map","sTargetKey","sort","a","b","fullContextPath","navigation","sNavName","targetRoute","detail","route","startsWith","sPattern","replace","regex","RegExp","match","_getRouteInformation","_getTargetInformation","_getComponentId","sOwnerId","sComponentId","substring","getTargetInformationFor","oComponentInstance","sTargetComponentId","_sOwnerId","getId","sCorrectTargetName","id","viewId","getLastSemanticMapping","oLastSemanticMapping","setLastSemanticMapping","oMapping","getHashFromRoute","async","context","routeName","parameterMapping","targetURLPromise","SemanticKeyHelper","getSemanticPath","prepareParameters","then","parameters","getURL","navigateTo","mParameterMapping","bPreserveHistory","delayedUsage","sTargetURLPromise","bIsStickyMode","ModelHelper","isStickySessionSupported","mParameters","targetUrl","navigateFunction","navToHash","sTargetRoute","oParametersPromise","getPath","aContextPathParts","split","aAllResolvedParameterPromises","sParameterMappingExpression","sParameterKey","oParsedExpression","BindingParser","complexParser","aParts","parts","aResolvedParameterPromises","oPathPart","aRelativeParts","path","aLocalParts","localContextPath","join","localContext","bindContext","getBoundContext","oMetaContext","getMetaContext","requestProperty","oValue","oPropertyInfo","getObject","sEdmType","$Type","ODataUtils","formatLiteral","all","aResolvedParameters","value","formatter","apply","key","aAllResolvedParameters","oParameters","oResolvedParameter","oError","error","_fireRouteMatchEvents","EditState","cleanProcessedEditState","navigateToContext","viewData","currentTargetInfo","routeParametersPromise","isStickyMode","targetPath","navigationInfo","oRouteDetail","isA","sTargetPath","_getPathFromContext","bExitOnNavigateBackToRoot","exitFromApp","createOnNavigateParameters","sLayout","_calculateLayout","oNavigationInfo","bTargetEditable","editable","bPersistOPScroll","persistOPScroll","bShowPlaceholder","showPlaceholder","reason","redirectedToNonDraft","updateFCLLevel","recreateContext","useContext","checkNoHashChange","sCurrentHashNoAppState","getHash","routeInfoByHash","getRouteInfoByHash","mEventParameters","routeInformation","sCurrentRouteName","routePattern","sCurrentRoutePattern","views","aCurrentViews","setFocusForced","forceFocus","transient","includes","navMode","sap","ui","require","shellServiceHelper","getShellServices","parsedUrl","parseShellHash","document","location","hash","navigationService","Container","getServiceAsync","href","getHref","semanticObject","action","applicationUrlBasedOnIframe","getInframeUrl","url","URL","encodeURI","window","origin","pathname","openWindow","oRouteInfo","oRoute","sLastTargetName","oTarget","messageHandling","removeUnboundTransitionMessages","oRouteParameters","navTo","preserveHistory","noPreservationCache","bNavigated","pop","navigateToRoute","sTargetRouteName","sTargetURL","isCurrentStateImpactedBy","sPath","test","sSemanticPath","technicalPath","semanticPath","_findPathToNavigate","_checkIfContextSupportsSemanticPath","metaModel","MetaModelConverter","getInvolvedDataModelObjects","targetObject","isDraftRoot","getProperty","entitySetName","getSemanticKeys","getHeaderContext","layout","findLayoutForHash","getRootViewController","calculateLayout","keepCurrentLayout","_beforeRouteMatched","bPlaceholderEnabled","Placeholder","isPlaceholderEnabled","oRootView","getRootControl","BusyLocker","lock","_isNavigationTriggeredByRouterProxy","history","state","feLevel","_onRouteMatched","oEvent","oAppStateHandler","getAppStateHandler","isLocked","unlock","getParameters","checkIfRouteChangedByIApp","NavigationReason","AppStateChanged","resetRouteChangedByIApp","checkRestoreHistoryWasTriggered","RestoreHistory","resetRestoreHistoryFlag","getParameter","restoreHistory","resolveRouteMatch","catch","attachRouteMatched","oData","fnFunction","oListener","attachEvent","detachEvent","attachAfterRouteMatched","detachAfterRouteMatched","initializeRouting","getEnvironmentCapabilities","getCapabilities","Collaboration","default","CollaborationHelper","__ui5_require_async","processAndExpandHash","bind","attachBeforeRouteMatched","resetEditState","manageStartupMode","onRestore","bIsIappState","getHashChanger","oStartupParameters","getStartupParameters","bHasStartUpParameters","sHash","preferredMode","toUpperCase","_manageCreateStartup","_manageDeepLinkStartup","_managedPreferredModeEdit","getDefaultCreateHash","AppStartupHelper","getContextPath","getCreateStartupHash","sNewHash","replaceHash","setStartupModeAutoCreate","setStartupModeCreate","getDeepLinkStartupHash","oDeepLink","sTechnicalPath","setStartupModeDeeplink","startupParameters","resultingHash","shouldEdit","verifyEditAnnotations","parameter","getOutbounds","getInterface","Service","RoutingServiceFactory","_ServiceFactory","_proto2","createInstance","oServiceContext","oRoutingService","ServiceFactory"],"sources":["./RoutingServiceFactory.ts"],"sourcesContent":["import type { EntitySet } from \"@sap-ux/vocabularies-types/Edm\";\nimport Log from \"sap/base/Log\";\n\nimport { defineUI5Class, event } from \"sap/fe/base/ClassSupport\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport type { StartupParameters } from \"sap/fe/core/AppComponent\";\nimport type { NavigationConfiguration } from \"sap/fe/core/TemplateComponent\";\nimport BusyLocker from \"sap/fe/core/controllerextensions/BusyLocker\";\nimport Placeholder from \"sap/fe/core/controllerextensions/Placeholder\";\nimport messageHandling from \"sap/fe/core/controllerextensions/messageHandler/messageHandling\";\nimport NavigationReason from \"sap/fe/core/controllerextensions/routing/NavigationReason\";\nimport type RouterProxy from \"sap/fe/core/controllerextensions/routing/RouterProxy\";\nimport AppStartupHelper from \"sap/fe/core/helpers/AppStartupHelper\";\nimport EditState from \"sap/fe/core/helpers/EditState\";\nimport { getRouteTargetNames } from \"sap/fe/core/helpers/ManifestHelper\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport SemanticKeyHelper from \"sap/fe/core/helpers/SemanticKeyHelper\";\nimport BindingParser from \"sap/ui/base/BindingParser\";\nimport EventProvider from \"sap/ui/base/EventProvider\";\nimport type { PropertyBindingInfo } from \"sap/ui/base/ManagedObject\";\nimport type Component from \"sap/ui/core/Component\";\nimport type ComponentContainer from \"sap/ui/core/ComponentContainer\";\nimport type { ManifestOutboundEntry, RoutingConfiguration, RoutingTarget } from \"sap/ui/core/Manifest\";\nimport type View from \"sap/ui/core/mvc/View\";\nimport type { Route$MatchedEventParameters } from \"sap/ui/core/routing/Route\";\nimport type Router from \"sap/ui/core/routing/Router\";\nimport type { Router$RouteMatchedEvent } from \"sap/ui/core/routing/Router\";\nimport Service from \"sap/ui/core/service/Service\";\nimport ServiceFactory from \"sap/ui/core/service/ServiceFactory\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataListBinding from \"sap/ui/model/odata/v4/ODataListBinding\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport ODataUtils from \"sap/ui/model/odata/v4/ODataUtils\";\nimport openWindow from \"sap/ui/util/openWindow\";\nimport type Container from \"sap/ushell/Container\";\nimport type Navigation from \"sap/ushell/services/Navigation\";\nimport type { ServiceContext } from \"types/metamodel_types\";\nimport * as MetaModelConverter from \"../converters/MetaModelConverter\";\n\ntype RoutingServiceSettings = {};\n@defineUI5Class(\"sap.fe.core.services.RoutingServiceEventing\")\nclass RoutingServiceEventing extends EventProvider {\n\t@event()\n\trouteMatched!: Function;\n\n\t@event()\n\tafterRouteMatched!: Function;\n}\n\nexport type RoutingEventParameters = Route$MatchedEventParameters & {\n\tnavigationInfo?: { reason?: NavigationReason };\n\trouteInformation?: unknown;\n\troutePattern?: string;\n\tconfig: { pattern?: string };\n};\n\nexport type CreateOnNavigateParameters =\n\t| { mode: \"Async\"; createContextPromise: Promise<Context> }\n\t| { mode: \"Deferred\"; listBinding: ODataListBinding; parentContext?: Context; data?: object };\n\nexport type RoutingNavigationInfo = {\n\tcreateOnNavigateParameters?: CreateOnNavigateParameters;\n\tbTargetEditable?: boolean;\n\tbPersistOPScroll?: boolean;\n\tbShowPlaceholder?: boolean;\n\tuseContext?: Context;\n\treason?: NavigationReason;\n\tredirectedToNonDraft?: string;\n\tbActionCreate?: boolean;\n};\n\nexport type RoutingNavigationParameters = {\n\tcheckNoHashChange?: boolean;\n\tcreateOnNavigateParameters?: CreateOnNavigateParameters;\n\teditable?: boolean;\n\ttransient?: boolean;\n\tpersistOPScroll?: boolean;\n\tFCLLevel?: number;\n\tupdateFCLLevel?: number;\n\tpreserveHistory?: boolean;\n\tnoPreservationCache?: boolean;\n\trecreateContext?: boolean;\n\tforceFocus?: boolean;\n\ttargetPath?: string;\n\tshowPlaceholder?: boolean;\n\treason?: NavigationReason;\n\tcallExtension?: boolean;\n\tlayout?: string;\n\tkeepCurrentLayout?: boolean;\n\tnavMode?: string;\n\tredirectedToNonDraft?: string;\n};\n\nexport type RoutingParameterMap = {\n\t[k: string]: unknown;\n};\n\nexport type SemanticMapping = {\n\tsemanticPath: string;\n\ttechnicalPath: string;\n};\ntype MinimalPageSetting = {\n\tcontextPath?: string;\n\tentitySet?: string;\n\tfullContextPath?: string;\n\tnavigation?: Record<string, NavigationConfiguration>;\n};\n\ntype InternalRouteDefinition = {\n\tname: string;\n\tpattern: string;\n\ttargets: string[];\n\trouteLevel: number;\n};\n\ntype ResolvedParameters = { key: string; value: unknown };\n\nexport class RoutingService extends Service<RoutingServiceSettings> {\n\toAppComponent!: AppComponent;\n\n\toModel!: ODataModel;\n\n\toMetaModel!: ODataMetaModel;\n\n\toRouter!: Router;\n\n\toRouterProxy!: RouterProxy;\n\n\teventProvider!: EventProvider;\n\n\tinitPromise!: Promise<RoutingService>;\n\n\toutbounds!: Record<string, ManifestOutboundEntry>;\n\n\t_mTargets!: Record<string, RoutingTarget>;\n\n\t_mRoutes!: Record<string, InternalRouteDefinition>;\n\n\toLastSemanticMapping?: SemanticMapping;\n\n\tbExitOnNavigateBackToRoot?: boolean;\n\n\tsCurrentRouteName?: string;\n\n\tsCurrentRoutePattern?: string;\n\n\taCurrentViews?: (View | ComponentContainer)[];\n\n\tnavigationInfoQueue: RoutingNavigationInfo[] = [];\n\n\tsContextPath!: string;\n\n\t_fnOnRouteMatched!: (ev: Router$RouteMatchedEvent) => void;\n\n\tenabled = false;\n\n\tinit(): void {\n\t\tconst oContext = this.getContext();\n\t\tif (oContext.scopeType === \"component\") {\n\t\t\tthis.oAppComponent = oContext.scopeObject;\n\t\t\tthis.oModel = this.oAppComponent.getModel();\n\t\t\tthis.oMetaModel = this.oModel?.getMetaModel();\n\t\t\tthis.oRouter = this.oAppComponent.getRouter();\n\t\t\tthis.oRouterProxy = this.oAppComponent.getRouterProxy();\n\t\t\tthis.eventProvider = new RoutingServiceEventing();\n\n\t\t\tconst oRoutingConfig = this.oAppComponent.getManifestEntry(\"sap.ui5\").routing;\n\t\t\tthis._parseRoutingConfiguration(oRoutingConfig!);\n\n\t\t\tconst oAppConfig = this.oAppComponent.getManifestEntry(\"sap.app\");\n\t\t\tthis.outbounds = oAppConfig.crossNavigation?.outbounds ?? {};\n\t\t}\n\n\t\tthis.initPromise = Promise.resolve(this);\n\t}\n\n\tbeforeExit(): void {\n\t\tthis.enabled = false;\n\t\tthis.oRouter.detachRouteMatched(this._fnOnRouteMatched, this);\n\t\tthis.eventProvider.fireEvent(\"routeMatched\", {});\n\t}\n\n\texit(): void {\n\t\tthis.eventProvider.destroy();\n\t}\n\n\t/**\n\t * Parse a manifest routing configuration for internal usage.\n\t * @param oRoutingConfig The routing configuration from the manifest\n\t */\n\t_parseRoutingConfiguration(oRoutingConfig: RoutingConfiguration): void {\n\t\tconst isFCL = oRoutingConfig?.config?.routerClass === \"sap.f.routing.Router\";\n\n\t\t// Information of targets\n\t\tthis._mTargets = {};\n\t\tif (oRoutingConfig?.targets) {\n\t\t\tfor (const sTargetName of Object.keys(oRoutingConfig.targets)) {\n\t\t\t\tthis._mTargets[sTargetName] = Object.assign({ targetName: sTargetName }, oRoutingConfig.targets[sTargetName]);\n\n\t\t\t\t// View level for FCL cases is calculated from the target pattern\n\t\t\t\tconst contextPattern = this._mTargets[sTargetName].contextPattern;\n\t\t\t\tif (contextPattern !== undefined) {\n\t\t\t\t\tthis._mTargets[sTargetName].viewLevel = this._getViewLevelFromPattern(contextPattern, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Information of routes\n\t\tthis._mRoutes = {};\n\t\tif (oRoutingConfig?.routes) {\n\t\t\tfor (const oRouteManifestInfo of oRoutingConfig.routes) {\n\t\t\t\tconst aRouteTargets = getRouteTargetNames(oRouteManifestInfo.target),\n\t\t\t\t\tsRouteName = oRouteManifestInfo.name,\n\t\t\t\t\tsRoutePattern = oRouteManifestInfo.pattern;\n\t\t\t\tif (!sRoutePattern) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// Check route pattern: all patterns need to end with ':?query:', that we use for parameters\n\t\t\t\tif (sRoutePattern.length < 8 || sRoutePattern.indexOf(\":?query:\") !== sRoutePattern.length - 8) {\n\t\t\t\t\tLog.warning(`Pattern for route ${sRouteName} doesn't end with ':?query:' : ${sRoutePattern}`);\n\t\t\t\t}\n\t\t\t\tconst iRouteLevel = this._getViewLevelFromPattern(sRoutePattern, 0);\n\t\t\t\tthis._mRoutes[sRouteName] = {\n\t\t\t\t\tname: sRouteName,\n\t\t\t\t\tpattern: sRoutePattern,\n\t\t\t\t\ttargets: aRouteTargets,\n\t\t\t\t\trouteLevel: iRouteLevel\n\t\t\t\t};\n\n\t\t\t\t// Add the parent targets in the list of targets for the route\n\t\t\t\tfor (const item of aRouteTargets) {\n\t\t\t\t\tconst sParentTargetName = this._mTargets[item].parent;\n\t\t\t\t\tif (sParentTargetName) {\n\t\t\t\t\t\taRouteTargets.push(sParentTargetName);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!isFCL) {\n\t\t\t\t\t// View level for non-FCL cases is calculated from the route pattern\n\t\t\t\t\tconst viewLevel = this._mTargets[aRouteTargets[0]].viewLevel;\n\t\t\t\t\tif (viewLevel === undefined || viewLevel < iRouteLevel) {\n\t\t\t\t\t\t// There are cases when different routes point to the same target. We take the\n\t\t\t\t\t\t// largest viewLevel in that case.\n\t\t\t\t\t\tthis._mTargets[aRouteTargets[0]].viewLevel = iRouteLevel;\n\t\t\t\t\t}\n\n\t\t\t\t\t// FCL level for non-FCL cases is equal to -1\n\t\t\t\t\tthis._mTargets[aRouteTargets[0]].FCLLevel = -1;\n\t\t\t\t} else if (aRouteTargets.length === 1 && this._mTargets[aRouteTargets[0]].controlAggregation !== \"beginColumnPages\") {\n\t\t\t\t\t// We're in the case where there's only 1 target for the route, and it's not in the first column\n\t\t\t\t\t// --> this is a fullscreen column after all columns in the FCL have been used\n\t\t\t\t\tthis._mTargets[aRouteTargets[0]].FCLLevel = 3;\n\t\t\t\t} else {\n\t\t\t\t\t// Other FCL cases\n\t\t\t\t\taRouteTargets.forEach((sTargetName) => {\n\t\t\t\t\t\tswitch (this._mTargets[sTargetName].controlAggregation) {\n\t\t\t\t\t\t\tcase \"beginColumnPages\":\n\t\t\t\t\t\t\t\tthis._mTargets[sTargetName].FCLLevel = 0;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"midColumnPages\":\n\t\t\t\t\t\t\t\tthis._mTargets[sTargetName].FCLLevel = 1;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthis._mTargets[sTargetName].FCLLevel = 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Propagate viewLevel, contextPattern, FCLLevel and controlAggregation to parent targets\n\t\tObject.keys(this._mTargets).forEach((sTargetName: string) => {\n\t\t\tlet sParentTargetName = this._mTargets[sTargetName].parent;\n\t\t\twhile (sParentTargetName) {\n\t\t\t\tthis._mTargets[sParentTargetName].viewLevel =\n\t\t\t\t\tthis._mTargets[sParentTargetName].viewLevel || this._mTargets[sTargetName].viewLevel;\n\t\t\t\tthis._mTargets[sParentTargetName].contextPattern =\n\t\t\t\t\tthis._mTargets[sParentTargetName].contextPattern || this._mTargets[sTargetName].contextPattern;\n\t\t\t\tthis._mTargets[sParentTargetName].FCLLevel =\n\t\t\t\t\tthis._mTargets[sParentTargetName].FCLLevel || this._mTargets[sTargetName].FCLLevel;\n\t\t\t\tthis._mTargets[sParentTargetName].controlAggregation =\n\t\t\t\t\tthis._mTargets[sParentTargetName].controlAggregation || this._mTargets[sTargetName].controlAggregation;\n\t\t\t\tsTargetName = sParentTargetName;\n\t\t\t\tsParentTargetName = this._mTargets[sTargetName].parent;\n\t\t\t}\n\t\t});\n\n\t\t// Determine the root entity for the app\n\t\tconst aLevel0RouteNames = [];\n\t\tconst aLevel1RouteNames = [];\n\t\tlet sDefaultRouteName;\n\n\t\tfor (const sName in this._mRoutes) {\n\t\t\tconst iLevel = this._mRoutes[sName].routeLevel;\n\t\t\tif (iLevel === 0) {\n\t\t\t\taLevel0RouteNames.push(sName);\n\t\t\t} else if (iLevel === 1) {\n\t\t\t\taLevel1RouteNames.push(sName);\n\t\t\t}\n\t\t}\n\n\t\tif (aLevel0RouteNames.length === 1) {\n\t\t\tsDefaultRouteName = aLevel0RouteNames[0];\n\t\t} else if (aLevel1RouteNames.length === 1) {\n\t\t\tsDefaultRouteName = aLevel1RouteNames[0];\n\t\t}\n\n\t\tif (sDefaultRouteName) {\n\t\t\tconst sDefaultTargetName = this._mRoutes[sDefaultRouteName].targets.slice(-1)[0];\n\t\t\tthis.sContextPath = \"\";\n\t\t\tconst oSettings = this._mTargets[sDefaultTargetName].options?.settings as MinimalPageSetting | undefined;\n\t\t\tif (oSettings) {\n\t\t\t\tthis.sContextPath = oSettings.contextPath || `/${oSettings.entitySet}`;\n\t\t\t}\n\t\t\tif (!this.sContextPath) {\n\t\t\t\tLog.warning(\n\t\t\t\t\t`Cannot determine default contextPath: contextPath or entitySet missing in default target: ${sDefaultTargetName}`\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tLog.warning(\"Cannot determine default contextPath: no default route found.\");\n\t\t}\n\n\t\t// We need to establish the correct path to the different pages, including the navigation properties\n\t\tObject.keys(this._mTargets)\n\t\t\t.map((sTargetKey: string) => {\n\t\t\t\treturn this._mTargets[sTargetKey];\n\t\t\t})\n\t\t\t.sort((a: RoutingTarget, b: RoutingTarget) => {\n\t\t\t\treturn a.viewLevel !== undefined && b.viewLevel !== undefined && a.viewLevel < b.viewLevel ? -1 : 1;\n\t\t\t})\n\t\t\t.forEach((target: RoutingTarget) => {\n\t\t\t\t// After sorting the targets per level we can then go through their navigation object and update the paths accordingly.\n\t\t\t\tif (target.options) {\n\t\t\t\t\tconst settings = target.options.settings as MinimalPageSetting;\n\t\t\t\t\tconst sContextPath = settings.contextPath || (settings.entitySet ? `/${settings.entitySet}` : \"\");\n\t\t\t\t\tif (!settings.fullContextPath && sContextPath) {\n\t\t\t\t\t\tsettings.fullContextPath = `${sContextPath}/`;\n\t\t\t\t\t}\n\t\t\t\t\tObject.keys(settings.navigation || {}).forEach((sNavName: string) => {\n\t\t\t\t\t\t// Check if it's a navigation property\n\t\t\t\t\t\tconst targetRoute = this._mRoutes[settings.navigation![sNavName].detail?.route];\n\t\t\t\t\t\tif (targetRoute && targetRoute.targets) {\n\t\t\t\t\t\t\ttargetRoute.targets.forEach((sTargetName: string) => {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tthis._mTargets[sTargetName].options?.settings &&\n\t\t\t\t\t\t\t\t\t!this._mTargets[sTargetName].options?.settings?.fullContextPath\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tif (this._mTargets[sTargetName].options!.settings!.contextPath) {\n\t\t\t\t\t\t\t\t\t\tthis._mTargets[sTargetName].options!.settings!.fullContextPath =\n\t\t\t\t\t\t\t\t\t\t\tthis._mTargets[sTargetName].options!.settings!.contextPath + \"/\";\n\t\t\t\t\t\t\t\t\t} else if (target.viewLevel === 0) {\n\t\t\t\t\t\t\t\t\t\tthis._mTargets[sTargetName].options!.settings!.fullContextPath = `${\n\t\t\t\t\t\t\t\t\t\t\t(sNavName.startsWith(\"/\") ? \"\" : \"/\") + sNavName\n\t\t\t\t\t\t\t\t\t\t}/`;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tthis._mTargets[sTargetName].options!.settings!.fullContextPath = `${\n\t\t\t\t\t\t\t\t\t\t\tsettings.fullContextPath + sNavName\n\t\t\t\t\t\t\t\t\t\t}/`;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * Calculates a view level from a pattern by counting the number of segments.\n\t * @param sPattern The pattern\n\t * @param viewLevel The current level of view\n\t * @returns The level\n\t */\n\t_getViewLevelFromPattern(sPattern: string, viewLevel: number): number {\n\t\tsPattern = sPattern.replace(\":?query:\", \"\");\n\t\tconst regex = new RegExp(\"/[^/]*$\");\n\t\tif (sPattern && sPattern[0] !== \"/\" && sPattern[0] !== \"?\") {\n\t\t\tsPattern = `/${sPattern}`;\n\t\t}\n\t\tif (sPattern.length) {\n\t\t\tsPattern = sPattern.replace(regex, \"\");\n\t\t\tif (this.oRouter.match(sPattern) || sPattern === \"\") {\n\t\t\t\treturn this._getViewLevelFromPattern(sPattern, ++viewLevel);\n\t\t\t} else {\n\t\t\t\treturn this._getViewLevelFromPattern(sPattern, viewLevel);\n\t\t\t}\n\t\t} else {\n\t\t\treturn viewLevel;\n\t\t}\n\t}\n\n\t_getRouteInformation(sRouteName?: string): InternalRouteDefinition | undefined {\n\t\tif (sRouteName === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this._mRoutes[sRouteName];\n\t}\n\n\t_getTargetInformation(sTargetName?: string): RoutingTarget | undefined {\n\t\tif (sTargetName === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this._mTargets[sTargetName];\n\t}\n\n\t_getComponentId(sOwnerId: string, sComponentId: string): string {\n\t\tif (sComponentId.indexOf(`${sOwnerId}---`) === 0) {\n\t\t\treturn sComponentId.substring(sOwnerId.length + 3);\n\t\t}\n\t\treturn sComponentId;\n\t}\n\n\t/**\n\t * Get target information for a given component.\n\t * @param oComponentInstance Instance of the component\n\t * @param oComponentInstance._sOwnerId\n\t * @param oComponentInstance.getId\n\t * @returns The configuration for the target\n\t */\n\tgetTargetInformationFor(oComponentInstance: Component | View): RoutingTarget | undefined {\n\t\tconst sTargetComponentId = this._getComponentId(\n\t\t\t(oComponentInstance as unknown as { _sOwnerId: string })._sOwnerId,\n\t\t\toComponentInstance.getId()\n\t\t);\n\t\tlet sCorrectTargetName: string | undefined;\n\t\tObject.keys(this._mTargets).forEach((sTargetName: string) => {\n\t\t\tif (this._mTargets[sTargetName].id === sTargetComponentId || this._mTargets[sTargetName].viewId === sTargetComponentId) {\n\t\t\t\tsCorrectTargetName = sTargetName;\n\t\t\t}\n\t\t});\n\t\treturn this._getTargetInformation(sCorrectTargetName);\n\t}\n\n\tgetLastSemanticMapping(): SemanticMapping | undefined {\n\t\treturn this.oLastSemanticMapping;\n\t}\n\n\tsetLastSemanticMapping(oMapping?: SemanticMapping): void {\n\t\tthis.oLastSemanticMapping = oMapping;\n\t}\n\n\tasync getHashFromRoute(context: Context, routeName: string | null, parameterMapping?: unknown): Promise<string> {\n\t\tif (!this.enabled) {\n\t\t\treturn Promise.resolve(\"\");\n\t\t}\n\t\tlet targetURLPromise: Promise<string | undefined>;\n\t\tif (!parameterMapping) {\n\t\t\t// if there is no parameter mapping define this mean we rely entirely on the binding context path\n\t\t\ttargetURLPromise = Promise.resolve(SemanticKeyHelper.getSemanticPath(context));\n\t\t} else {\n\t\t\ttargetURLPromise = this.prepareParameters(parameterMapping as RoutingParameterMap, routeName, context).then(\n\t\t\t\t(parameters: object | undefined) => {\n\t\t\t\t\treturn this.oRouter.getURL(routeName!, parameters);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\treturn (await targetURLPromise) as string;\n\t}\n\n\tasync navigateTo(\n\t\toContext: Context,\n\t\tsRouteName: string | null,\n\t\tmParameterMapping: unknown,\n\t\tbPreserveHistory?: boolean,\n\t\tdelayedUsage?: false\n\t): Promise<void>;\n\n\tasync navigateTo(\n\t\toContext: Context,\n\t\tsRouteName: string | null,\n\t\tmParameterMapping: unknown,\n\t\tbPreserveHistory?: boolean,\n\t\tdelayedUsage?: true\n\t): Promise<() => void>;\n\n\tasync navigateTo(\n\t\toContext: Context,\n\t\tsRouteName: string | null,\n\t\tmParameterMapping: unknown,\n\t\tbPreserveHistory?: boolean,\n\t\tdelayedUsage?: boolean\n\t): Promise<(() => void) | void>;\n\n\tasync navigateTo(\n\t\toContext: Context,\n\t\tsRouteName: string | null,\n\t\tmParameterMapping: unknown,\n\t\tbPreserveHistory?: boolean,\n\t\tdelayedUsage?: boolean\n\t): Promise<(() => void) | void> {\n\t\tif (!this.enabled) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\tlet sTargetURLPromise, bIsStickyMode: boolean;\n\t\tif (oContext.getModel() && oContext.getModel().getMetaModel && oContext.getModel().getMetaModel()) {\n\t\t\tbIsStickyMode = ModelHelper.isStickySessionSupported(oContext.getModel().getMetaModel());\n\t\t}\n\t\tif (!mParameterMapping) {\n\t\t\t// if there is no parameter mapping define this mean we rely entirely on the binding context path\n\t\t\tsTargetURLPromise = Promise.resolve(SemanticKeyHelper.getSemanticPath(oContext));\n\t\t} else {\n\t\t\tsTargetURLPromise = this.prepareParameters(mParameterMapping as RoutingParameterMap, sRouteName, oContext).then(\n\t\t\t\t(mParameters: object | undefined) => {\n\t\t\t\t\treturn this.oRouter.getURL(sRouteName!, mParameters);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\tconst targetUrl = await sTargetURLPromise;\n\t\tconst navigateFunction = (): void => {\n\t\t\tthis.oRouterProxy.navToHash(targetUrl!, bPreserveHistory, false, false, !bIsStickyMode);\n\t\t};\n\t\tif (delayedUsage === true) {\n\t\t\treturn navigateFunction; // wrong but somehow the types are annoying\n\t\t} else {\n\t\t\treturn navigateFunction();\n\t\t}\n\t}\n\n\t/**\n\t * Method to return a map of routing target parameters where the binding syntax is resolved to the current model.\n\t * @param mParameters Parameters map in the format [k: string] : ComplexBindingSyntax\n\t * @param sTargetRoute Name of the target route\n\t * @param oContext The instance of the binding context\n\t * @returns A promise which resolves to the routing target parameters\n\t */\n\tasync prepareParameters(mParameters: RoutingParameterMap, sTargetRoute: string | null, oContext: Context): Promise<object> {\n\t\tlet oParametersPromise;\n\t\ttry {\n\t\t\tconst sContextPath = oContext.getPath();\n\t\t\tconst oMetaModel: ODataMetaModel = oContext.getModel().getMetaModel();\n\t\t\tconst aContextPathParts = sContextPath.split(\"/\");\n\t\t\tconst aAllResolvedParameterPromises = Object.keys(mParameters).map(async (sParameterKey: string) => {\n\t\t\t\tconst sParameterMappingExpression = mParameters[sParameterKey];\n\t\t\t\t// We assume the defined parameters will be compatible with a binding expression\n\t\t\t\tconst oParsedExpression = BindingParser.complexParser(sParameterMappingExpression);\n\t\t\t\tconst aParts = oParsedExpression.parts || [oParsedExpression];\n\t\t\t\tconst aResolvedParameterPromises = aParts.map(async function (oPathPart: PropertyBindingInfo) {\n\t\t\t\t\tconst aRelativeParts = oPathPart.path.split(\"../\");\n\t\t\t\t\t// We go up the current context path as many times as necessary\n\t\t\t\t\tconst aLocalParts = aContextPathParts.slice(0, aContextPathParts.length - aRelativeParts.length + 1);\n\t\t\t\t\tconst localContextPath = aLocalParts.join(\"/\");\n\t\t\t\t\tconst localContext =\n\t\t\t\t\t\tlocalContextPath === oContext.getPath()\n\t\t\t\t\t\t\t? oContext\n\t\t\t\t\t\t\t: oContext.getModel().bindContext(localContextPath).getBoundContext();\n\n\t\t\t\t\tconst oMetaContext = oMetaModel.getMetaContext(localContextPath + \"/\" + aRelativeParts[aRelativeParts.length - 1]);\n\t\t\t\t\treturn localContext.requestProperty(aRelativeParts[aRelativeParts.length - 1]).then(function (oValue) {\n\t\t\t\t\t\tconst oPropertyInfo = oMetaContext.getObject();\n\t\t\t\t\t\tconst sEdmType = oPropertyInfo.$Type;\n\t\t\t\t\t\treturn ODataUtils.formatLiteral(oValue, sEdmType);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\treturn Promise.all(aResolvedParameterPromises).then((aResolvedParameters: PropertyBindingInfo) => {\n\t\t\t\t\tconst value = oParsedExpression.formatter\n\t\t\t\t\t\t? oParsedExpression.formatter.apply(this, aResolvedParameters)\n\t\t\t\t\t\t: aResolvedParameters.join(\"\");\n\t\t\t\t\treturn { key: sParameterKey, value: value };\n\t\t\t\t});\n\t\t\t});\n\n\t\t\toParametersPromise = Promise.all(aAllResolvedParameterPromises).then(function (aAllResolvedParameters: ResolvedParameters[]) {\n\t\t\t\tconst oParameters: Record<string, unknown> = {};\n\t\t\t\taAllResolvedParameters.forEach(function (oResolvedParameter: ResolvedParameters) {\n\t\t\t\t\toParameters[oResolvedParameter.key] = oResolvedParameter.value;\n\t\t\t\t});\n\t\t\t\treturn oParameters;\n\t\t\t});\n\t\t} catch (oError) {\n\t\t\tLog.error(`Could not parse the parameters for the navigation to route ${sTargetRoute}`);\n\t\t\toParametersPromise = Promise.resolve({});\n\t\t}\n\t\treturn oParametersPromise;\n\t}\n\n\t_fireRouteMatchEvents(mParameters: Route$MatchedEventParameters): void {\n\t\tthis.eventProvider.fireEvent(\"routeMatched\", mParameters);\n\t\tthis.eventProvider.fireEvent(\"afterRouteMatched\", mParameters);\n\n\t\tEditState.cleanProcessedEditState(); // Reset UI state when all bindings have been refreshed\n\t}\n\n\t/**\n\t * Navigates to a context.\n\t * @param context The Context to be navigated to, or the list binding for creation (deferred creation)\n\t * @param [parameters] Optional, map containing the following attributes:\n\t * @param [parameters.checkNoHashChange] Navigate to the context without changing the URL\n\t * @param [parameters.asyncContext] The context is created async, navigate to (...) and\n\t *                    wait for Promise to be resolved and then navigate into the context\n\t * @param [parameters.bDeferredContext] The context shall be created deferred at the target page\n\t * @param [parameters.editable] The target page shall be immediately in the edit mode to avoid flickering\n\t * @param [parameters.bPersistOPScroll] The bPersistOPScroll will be used for scrolling to first tab\n\t * @param [parameters.updateFCLLevel] `+1` if we add a column in FCL, `-1` to remove a column, 0 to stay on the same column\n\t * @param [parameters.noPreservationCache] Do navigation without taking into account the preserved cache mechanism\n\t * @param [parameters.bRecreateContext] Force re-creation of the context instead of using the one passed as parameter\n\t * @param [parameters.bForceFocus] Forces focus selection after navigation\n\t * @param [viewData] View data\n\t * @param [viewData.navigation]\n\t * @param [currentTargetInfo] The target information from which the navigation is triggered\n\t * @param [currentTargetInfo.name]\n\t * @returns Promise which is resolved once the navigation is triggered\n\t * @final\n\t */\n\tasync navigateToContext(\n\t\tcontext: Context | ODataListBinding,\n\t\tparameters: RoutingNavigationParameters = {},\n\t\tviewData?: { navigation?: object },\n\t\tcurrentTargetInfo?: { name: string }\n\t): Promise<boolean> {\n\t\tif (!this.enabled) {\n\t\t\treturn Promise.resolve(false);\n\t\t}\n\n\t\tlet targetRoute = \"\";\n\t\tlet routeParametersPromise: Promise<object> | undefined;\n\t\tconst isStickyMode = ModelHelper.isStickySessionSupported(this.oMetaModel);\n\n\t\t// Manage parameter mapping\n\t\tif (parameters?.targetPath && viewData?.navigation) {\n\t\t\tconst navigationInfo = viewData.navigation as Record<string, { detail: { route: string; parameters: object } }>;\n\t\t\tconst oRouteDetail = navigationInfo[parameters.targetPath].detail;\n\t\t\ttargetRoute = oRouteDetail.route;\n\n\t\t\tif (oRouteDetail.parameters && context.isA<Context>(\"sap.ui.model.odata.v4.Context\")) {\n\t\t\t\trouteParametersPromise = this.prepareParameters(\n\t\t\t\t\toRouteDetail.parameters as unknown as RoutingParameterMap,\n\t\t\t\t\ttargetRoute,\n\t\t\t\t\tcontext\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tlet sTargetPath = this._getPathFromContext(context, parameters);\n\t\t// If the path is empty, we're supposed to navigate to the first page of the app\n\t\t// Check if we need to exit from the app instead\n\t\tif (sTargetPath.length === 0 && this.bExitOnNavigateBackToRoot) {\n\t\t\tthis.oRouterProxy.exitFromApp();\n\t\t\treturn Promise.resolve(true);\n\t\t}\n\n\t\t// If the navigation goes with a creation, we add (...) to the path (expecting context is an ODataListBinding)\n\t\tif (parameters?.createOnNavigateParameters) {\n\t\t\tsTargetPath += \"(...)\";\n\t\t}\n\n\t\t// Add layout parameter if needed\n\t\tconst sLayout = this._calculateLayout(sTargetPath, parameters);\n\t\tif (sLayout) {\n\t\t\tsTargetPath += `?layout=${sLayout}`;\n\t\t}\n\n\t\t// Navigation parameters for later usage\n\t\tconst oNavigationInfo: RoutingNavigationInfo = {\n\t\t\tcreateOnNavigateParameters: parameters.createOnNavigateParameters,\n\t\t\tbTargetEditable: parameters?.editable,\n\t\t\tbPersistOPScroll: parameters?.persistOPScroll,\n\t\t\tbShowPlaceholder: parameters?.showPlaceholder !== undefined ? parameters?.showPlaceholder : true,\n\t\t\treason: parameters?.reason,\n\t\t\tredirectedToNonDraft: parameters.redirectedToNonDraft\n\t\t};\n\n\t\tif (parameters?.updateFCLLevel !== -1 && parameters?.recreateContext !== true) {\n\t\t\tif (context.isA<Context>(\"sap.ui.model.odata.v4.Context\")) {\n\t\t\t\toNavigationInfo.useContext = context;\n\t\t\t}\n\t\t}\n\n\t\tif (parameters?.checkNoHashChange) {\n\t\t\t// Check if the new hash is different from the current one\n\t\t\tconst sCurrentHashNoAppState = this.oRouterProxy.getHash().replace(/[&?]{1}sap-iapp-state=[A-Z0-9]+/, \"\");\n\t\t\tif (sTargetPath === sCurrentHashNoAppState) {\n\t\t\t\t// The hash doesn't change, but we fire the routeMatch event to trigger page refresh / binding\n\t\t\t\tconst routeInfoByHash = this.oRouter.getRouteInfoByHash(this.oRouterProxy.getHash());\n\t\t\t\tlet mEventParameters: RoutingEventParameters = { config: {} };\n\t\t\t\tif (routeInfoByHash) {\n\t\t\t\t\tmEventParameters = { ...routeInfoByHash, config: {} };\n\t\t\t\t\tmEventParameters.navigationInfo = oNavigationInfo;\n\t\t\t\t\tmEventParameters.routeInformation = this._getRouteInformation(this.sCurrentRouteName);\n\t\t\t\t\tmEventParameters.routePattern = this.sCurrentRoutePattern;\n\t\t\t\t\tmEventParameters.views = this.aCurrentViews;\n\t\t\t\t}\n\n\t\t\t\tthis.oRouterProxy.setFocusForced(!!parameters.forceFocus);\n\n\t\t\t\tthis._fireRouteMatchEvents(mEventParameters);\n\n\t\t\t\treturn Promise.resolve(true);\n\t\t\t}\n\t\t}\n\n\t\tif (parameters?.transient && !!parameters.editable && !sTargetPath.includes(\"(...)\")) {\n\t\t\tif (sTargetPath.includes(\"?\")) {\n\t\t\t\tsTargetPath += \"&i-action=create\";\n\t\t\t} else {\n\t\t\t\tsTargetPath += \"?i-action=create\";\n\t\t\t}\n\t\t}\n\n\t\tif (parameters.navMode === \"openInNewTab\") {\n\t\t\t// Navigate to new tab/ window\n\t\t\tsap.ui.require([\"sap/ushell/Container\"], async (Container: Container) => {\n\t\t\t\tconst shellServiceHelper = this.oAppComponent.getShellServices();\n\t\t\t\tconst parsedUrl = shellServiceHelper.parseShellHash(document.location.hash);\n\t\t\t\tconst navigationService = (await Container.getServiceAsync(\"Navigation\")) as Navigation;\n\t\t\t\tconst href = await navigationService.getHref({\n\t\t\t\t\ttarget: {\n\t\t\t\t\t\tsemanticObject: parsedUrl.semanticObject,\n\t\t\t\t\t\taction: parsedUrl.action\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tconst applicationUrlBasedOnIframe = await shellServiceHelper.getInframeUrl();\n\t\t\t\tlet url, targetUrl: string;\n\t\t\t\tif (applicationUrlBasedOnIframe) {\n\t\t\t\t\turl = new URL(applicationUrlBasedOnIframe);\n\t\t\t\t\ttargetUrl = applicationUrlBasedOnIframe.replace(url.hash, `${href}&/${encodeURI(sTargetPath)}`);\n\t\t\t\t} else {\n\t\t\t\t\turl = new URL(window.location.href);\n\t\t\t\t\ttargetUrl = `${url.origin}${url.pathname}${href}&/${encodeURI(sTargetPath)}`;\n\t\t\t\t}\n\t\t\t\topenWindow(targetUrl);\n\t\t\t});\n\t\t\treturn Promise.resolve(true);\n\t\t} else {\n\t\t\t// Clear unbound messages upon navigating from LR to OP\n\t\t\t// This is to ensure stale error messages from LR are not shown to the user after navigation to OP.\n\t\t\tif (currentTargetInfo?.name === \"sap.fe.templates.ListReport\") {\n\t\t\t\tconst oRouteInfo = this.oRouter.getRouteInfoByHash(sTargetPath);\n\t\t\t\tif (oRouteInfo) {\n\t\t\t\t\tconst oRoute = this._getRouteInformation(oRouteInfo.name);\n\t\t\t\t\tif (oRoute && oRoute.targets && oRoute.targets.length > 0) {\n\t\t\t\t\t\tconst sLastTargetName = oRoute.targets[oRoute.targets.length - 1];\n\t\t\t\t\t\tconst oTarget = this._getTargetInformation(sLastTargetName);\n\t\t\t\t\t\tif (oTarget && oTarget.name === \"sap.fe.templates.ObjectPage\") {\n\t\t\t\t\t\t\tmessageHandling.removeUnboundTransitionMessages();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add the navigation parameters in the queue\n\t\t\tthis.navigationInfoQueue.push(oNavigationInfo);\n\n\t\t\tif (targetRoute && routeParametersPromise) {\n\t\t\t\treturn routeParametersPromise.then((oRouteParameters: object) => {\n\t\t\t\t\tObject.assign(oRouteParameters, { bIsStickyMode: isStickyMode });\n\t\t\t\t\tthis.oRouter.navTo(targetRoute, oRouteParameters);\n\t\t\t\t\treturn true;\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn this.oRouterProxy\n\t\t\t\t.navToHash(\n\t\t\t\t\tsTargetPath,\n\t\t\t\t\t!!parameters.preserveHistory,\n\t\t\t\t\tparameters?.noPreservationCache,\n\t\t\t\t\tparameters?.forceFocus,\n\t\t\t\t\t!isStickyMode\n\t\t\t\t)\n\t\t\t\t.then((bNavigated) => {\n\t\t\t\t\tif (!bNavigated) {\n\t\t\t\t\t\t// The navigation did not happen --> remove the navigation parameters from the queue as they shouldn't be used\n\t\t\t\t\t\tthis.navigationInfoQueue.pop();\n\t\t\t\t\t}\n\t\t\t\t\treturn bNavigated;\n\t\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Navigates to a route.\n\t * @param sTargetRouteName Name of the target route\n\t * @param [oRouteParameters] Parameters to be used with route to create the target hash\n\t * @param oRouteParameters.bIsStickyMode\n\t * @returns Promise that is resolved when the navigation is finalized\n\t * @final\n\t */\n\tasync navigateToRoute(sTargetRouteName: string, oRouteParameters?: { bIsStickyMode?: boolean }): Promise<boolean> {\n\t\tif (!this.enabled) {\n\t\t\treturn Promise.resolve(false);\n\t\t}\n\t\tthis.setLastSemanticMapping(undefined);\n\t\tconst sTargetURL = this.oRouter.getURL(sTargetRouteName, oRouteParameters);\n\t\treturn this.oRouterProxy.navToHash(sTargetURL!, undefined, undefined, undefined, !oRouteParameters?.bIsStickyMode);\n\t}\n\n\t/**\n\t * Checks if one of the current views on the screen is bound to a given context.\n\t * @param oContext The context\n\t * @returns `true` or `false` if the current state is impacted or not\n\t */\n\tisCurrentStateImpactedBy(oContext: Context): boolean {\n\t\tconst sPath = oContext.getPath();\n\n\t\t// First, check with the technical path. We have to try it, because for level > 1, we\n\t\t// uses technical keys even if Semantic keys are enabled\n\t\tif (this.oRouterProxy.isCurrentStateImpactedBy(sPath)) {\n\t\t\treturn true;\n\t\t} else if (/^[^()]+\\([^()]+\\)$/.test(sPath)) {\n\t\t\t// If the current path can be semantic (i.e. is like xxx(yyy))\n\t\t\t// check with the semantic path if we can find it\n\t\t\tlet sSemanticPath;\n\t\t\tif (this.oLastSemanticMapping && this.oLastSemanticMapping.technicalPath === sPath) {\n\t\t\t\t// We have already resolved this semantic path\n\t\t\t\tsSemanticPath = this.oLastSemanticMapping.semanticPath;\n\t\t\t} else {\n\t\t\t\tsSemanticPath = SemanticKeyHelper.getSemanticPath(oContext)!;\n\t\t\t}\n\n\t\t\treturn sSemanticPath != sPath ? this.oRouterProxy.isCurrentStateImpactedBy(sSemanticPath) : false;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t_findPathToNavigate(sPath: string): string {\n\t\tconst regex = new RegExp(\"/[^/]*$\");\n\t\tsPath = sPath.replace(regex, \"\");\n\t\tif (this.oRouter.match(sPath) || sPath === \"\") {\n\t\t\treturn sPath;\n\t\t} else {\n\t\t\treturn this._findPathToNavigate(sPath);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if a semantic path shall be used to navigate to a given context.\n\t * @param context The context to navigate to\n\t * @returns True if semantic path shall be sued, false otherwise\n\t */\n\t_checkIfContextSupportsSemanticPath(context: Context): boolean {\n\t\t// First, check if this is a level-1 object (path = /aaa(bbb))\n\t\tif (!/^\\/[^(]+\\([^)]+\\)$/.test(context.getPath())) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Then check if the entity is a draft root\n\t\tconst metaModel = context.getModel().getMetaModel();\n\t\tconst entitySet = MetaModelConverter.getInvolvedDataModelObjects(metaModel.getMetaContext(context.getPath()))\n\t\t\t.targetObject as EntitySet;\n\n\t\tif (!ModelHelper.isDraftRoot(entitySet)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// We don't support semantic path for newly created objects\n\t\tif (context.getProperty(\"IsActiveEntity\") === false && context.getProperty(\"HasActiveEntity\") === false) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Finally, check if the entity has semantic keys\n\t\tconst entitySetName = entitySet.name;\n\t\treturn SemanticKeyHelper.getSemanticKeys(metaModel, entitySetName) !== undefined;\n\t}\n\n\t_getPathFromContext(context: Context | ODataListBinding, parameters: RoutingNavigationParameters): string {\n\t\tlet sPath = \"\";\n\n\t\tif (context.isA<ODataListBinding>(\"sap.ui.model.odata.v4.ODataListBinding\")) {\n\t\t\tsPath = context.getHeaderContext()?.getPath() ?? \"\";\n\t\t} else {\n\t\t\tsPath = context.getPath();\n\n\t\t\tif (parameters.updateFCLLevel === -1) {\n\t\t\t\t// When navigating back from a context, we need to remove the last component of the path\n\t\t\t\tsPath = this._findPathToNavigate(sPath);\n\n\t\t\t\t// Check if we're navigating back to a semantic path that was previously resolved\n\t\t\t\tif (this.oLastSemanticMapping?.technicalPath === sPath) {\n\t\t\t\t\tsPath = this.oLastSemanticMapping.semanticPath;\n\t\t\t\t}\n\t\t\t} else if (this._checkIfContextSupportsSemanticPath(context)) {\n\t\t\t\t// We check if we have to use a semantic path\n\t\t\t\tconst sSemanticPath = SemanticKeyHelper.getSemanticPath(context, true);\n\n\t\t\t\tif (!sSemanticPath) {\n\t\t\t\t\t// We were not able to build the semantic path --> Use the technical path and\n\t\t\t\t\t// clear the previous mapping, otherwise the old mapping is used in EditFlow#updateDocument\n\t\t\t\t\t// and it leads to unwanted page reloads\n\t\t\t\t\tthis.setLastSemanticMapping(undefined);\n\t\t\t\t} else if (sSemanticPath !== sPath) {\n\t\t\t\t\t// Store the mapping technical <-> semantic path to avoid recalculating it later\n\t\t\t\t\t// and use the semantic path instead of the technical one\n\t\t\t\t\tthis.setLastSemanticMapping({ technicalPath: sPath, semanticPath: sSemanticPath });\n\t\t\t\t\tsPath = sSemanticPath;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// remove extra '/' at the beginning of path\n\t\tif (sPath[0] === \"/\") {\n\t\t\tsPath = sPath.substring(1);\n\t\t}\n\n\t\treturn sPath;\n\t}\n\n\t_calculateLayout(hash: string, parameters: RoutingNavigationParameters): string {\n\t\t// Open in full screen mode when opening in new tab/ window\n\t\tif (parameters.navMode === \"openInNewTab\" && parameters.FCLLevel !== -1) {\n\t\t\treturn parameters.FCLLevel === 0 ? \"MidColumnFullScreen\" : \"EndColumnFullScreen\";\n\t\t}\n\t\tlet FCLLevel = parameters.FCLLevel ?? 0;\n\t\tif (parameters.updateFCLLevel) {\n\t\t\tFCLLevel += parameters.updateFCLLevel;\n\t\t\tif (FCLLevel < 0) {\n\t\t\t\tFCLLevel = 0;\n\t\t\t}\n\t\t}\n\n\t\t// When navigating back, try to find the layout in the navigation history if it's not provided as parameter\n\t\t// (layout calculation is not handled properly by the FlexibleColumnLayoutSemanticHelper in this case)\n\t\tif (parameters.updateFCLLevel !== undefined && parameters.updateFCLLevel < 0 && !parameters.layout) {\n\t\t\tparameters.layout = this.oRouterProxy.findLayoutForHash(hash);\n\t\t}\n\n\t\treturn this.oAppComponent.getRootViewController().calculateLayout(FCLLevel, hash, parameters.layout, parameters.keepCurrentLayout);\n\t}\n\n\t/**\n\t * Event handler before a route is matched.\n\t * Displays a busy indicator.\n\t *\n\t */\n\t_beforeRouteMatched(/*oEvent: Event*/): void {\n\t\tconst bPlaceholderEnabled = new Placeholder().isPlaceholderEnabled();\n\t\tif (!bPlaceholderEnabled) {\n\t\t\tconst oRootView = this.oAppComponent.getRootControl();\n\t\t\tBusyLocker.lock(oRootView);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the current navigation has been triggered by the RouterProxy.\n\t * @returns True if the current navigation has been triggered by the RouterProxy.\n\t */\n\t_isNavigationTriggeredByRouterProxy(): boolean {\n\t\t// The RouterProxy sets a 'feLevel' property on the history.state object\n\t\treturn history.state?.feLevel !== undefined;\n\t}\n\n\t/**\n\t * Event handler when a route is matched.\n\t * Hides the busy indicator and fires its own 'routematched' event.\n\t * @param oEvent The event\n\t */\n\t_onRouteMatched(oEvent: Router$RouteMatchedEvent): void {\n\t\tconst oAppStateHandler = this.oAppComponent.getAppStateHandler(),\n\t\t\toRootView = this.oAppComponent.getRootControl();\n\t\tconst bPlaceholderEnabled = new Placeholder().isPlaceholderEnabled();\n\t\tif (BusyLocker.isLocked(oRootView) && !bPlaceholderEnabled) {\n\t\t\tBusyLocker.unlock(oRootView);\n\t\t}\n\t\tconst mParameters: RoutingEventParameters = oEvent.getParameters() as RoutingEventParameters;\n\t\tif (this.navigationInfoQueue.length) {\n\t\t\tmParameters.navigationInfo = this.navigationInfoQueue[0];\n\t\t\tthis.navigationInfoQueue = this.navigationInfoQueue.slice(1);\n\t\t} else {\n\t\t\tmParameters.navigationInfo = {};\n\t\t}\n\t\tif (oAppStateHandler.checkIfRouteChangedByIApp()) {\n\t\t\tmParameters.navigationInfo.reason = NavigationReason.AppStateChanged;\n\t\t\toAppStateHandler.resetRouteChangedByIApp();\n\t\t} else if (this.oRouterProxy.checkRestoreHistoryWasTriggered()) {\n\t\t\tmParameters.navigationInfo.reason = NavigationReason.RestoreHistory;\n\t\t\tthis.oRouterProxy.resetRestoreHistoryFlag();\n\t\t}\n\n\t\tthis.sCurrentRouteName = oEvent.getParameter(\"name\");\n\t\tthis.sCurrentRoutePattern = mParameters.config.pattern;\n\t\tthis.aCurrentViews = oEvent.getParameter(\"views\");\n\n\t\tmParameters.routeInformation = this._getRouteInformation(this.sCurrentRouteName);\n\t\tmParameters.routePattern = this.sCurrentRoutePattern;\n\n\t\tthis._fireRouteMatchEvents(mParameters);\n\n\t\t// Check if current hash has been set by the routerProxy.navToHash function\n\t\t// If not, rebuild history properly (both in the browser and the RouterProxy)\n\t\tif (!this._isNavigationTriggeredByRouterProxy()) {\n\t\t\tthis.oRouterProxy\n\t\t\t\t.restoreHistory()\n\t\t\t\t.then((): void => {\n\t\t\t\t\tthis.oRouterProxy.resolveRouteMatch();\n\t\t\t\t\treturn;\n\t\t\t\t})\n\t\t\t\t.catch(function (oError: unknown) {\n\t\t\t\t\tLog.error(\"Error while restoring history\", oError as string);\n\t\t\t\t});\n\t\t} else {\n\t\t\tthis.oRouterProxy.resolveRouteMatch();\n\t\t}\n\t}\n\n\tattachRouteMatched(oData: object, fnFunction: Function, oListener?: object): void {\n\t\tthis.eventProvider.attachEvent(\"routeMatched\", oData, fnFunction, oListener);\n\t}\n\n\tdetachRouteMatched(fnFunction: Function, oListener?: object): void {\n\t\tthis.eventProvider.detachEvent(\"routeMatched\", fnFunction, oListener);\n\t}\n\n\tattachAfterRouteMatched(oData: object, fnFunction: Function, oListener?: object): void {\n\t\tthis.eventProvider.attachEvent(\"afterRouteMatched\", oData, fnFunction, oListener);\n\t}\n\n\tdetachAfterRouteMatched(fnFunction: Function, oListener: object): void {\n\t\tthis.eventProvider.detachEvent(\"afterRouteMatched\", fnFunction, oListener);\n\t}\n\n\tasync initializeRouting(): Promise<void> {\n\t\tthis.enabled = true;\n\n\t\tif (this.oAppComponent.getEnvironmentCapabilities().getCapabilities().Collaboration) {\n\t\t\tconst { default: CollaborationHelper } = await import(\"sap/suite/ui/commons/collaboration/CollaborationHelper\");\n\t\t\tawait CollaborationHelper.processAndExpandHash();\n\t\t}\n\t\t// Attach router handlers\n\n\t\tthis._fnOnRouteMatched = this._onRouteMatched.bind(this);\n\t\tthis.oRouter.attachRouteMatched(this._fnOnRouteMatched, this);\n\t\tconst bPlaceholderEnabled = new Placeholder().isPlaceholderEnabled();\n\t\tif (!bPlaceholderEnabled) {\n\t\t\tthis.oRouter.attachBeforeRouteMatched(this._beforeRouteMatched.bind(this));\n\t\t}\n\t\t// Reset internal state\n\t\tthis.navigationInfoQueue = [];\n\t\tEditState.resetEditState();\n\t\tthis.bExitOnNavigateBackToRoot = !this.oRouter.match(\"\");\n\n\t\tawait this.manageStartupMode();\n\t}\n\n\tonRestore(): void {\n\t\tthis.manageStartupMode();\n\t}\n\n\tasync manageStartupMode(): Promise<void> {\n\t\tconst bIsIappState = this.oRouter.getHashChanger().getHash().includes(\"sap-iapp-state\");\n\t\ttry {\n\t\t\tconst oStartupParameters = await this.oAppComponent.getStartupParameters();\n\t\t\tconst bHasStartUpParameters = oStartupParameters !== undefined && Object.keys(oStartupParameters).length !== 0;\n\t\t\tconst sHash = this.oRouter.getHashChanger().getHash();\n\t\t\t// Manage startup parameters (in case of no iapp-state)\n\t\t\tif (!bIsIappState && bHasStartUpParameters && !sHash) {\n\t\t\t\tif (oStartupParameters.preferredMode && oStartupParameters.preferredMode[0].toUpperCase().includes(\"CREATE\")) {\n\t\t\t\t\t// Create mode\n\t\t\t\t\t// This check will catch multiple modes like create, createWith and autoCreateWith which all need\n\t\t\t\t\t// to be handled like create startup!\n\t\t\t\t\tawait this._manageCreateStartup(oStartupParameters);\n\t\t\t\t} else {\n\t\t\t\t\t// Deep link\n\t\t\t\t\tawait this._manageDeepLinkStartup(oStartupParameters);\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait this._managedPreferredModeEdit(oStartupParameters);\n\t\t} catch (oError: unknown) {\n\t\t\tLog.error(\"Error during routing initialization\", oError as string);\n\t\t}\n\t}\n\n\tgetDefaultCreateHash(oStartupParameters?: StartupParameters): string {\n\t\treturn AppStartupHelper.getDefaultCreateHash(oStartupParameters, this.getContextPath(), this.oRouter);\n\t}\n\n\tasync _manageCreateStartup(oStartupParameters: StartupParameters): Promise<void> {\n\t\treturn AppStartupHelper.getCreateStartupHash(oStartupParameters, this.getContextPath(), this.oRouter, this.oMetaModel).then(\n\t\t\t(sNewHash: string): void => {\n\t\t\t\tif (sNewHash) {\n\t\t\t\t\t(this.oRouter.getHashChanger().replaceHash as Function)(sNewHash);\n\t\t\t\t\tif (oStartupParameters?.preferredMode && oStartupParameters.preferredMode[0].toUpperCase().includes(\"AUTOCREATE\")) {\n\t\t\t\t\t\tthis.oAppComponent.setStartupModeAutoCreate();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.oAppComponent.setStartupModeCreate();\n\t\t\t\t\t}\n\t\t\t\t\tthis.bExitOnNavigateBackToRoot = true;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t);\n\t}\n\n\tasync _manageDeepLinkStartup(oStartupParameters: StartupParameters | null): Promise<void> {\n\t\treturn AppStartupHelper.getDeepLinkStartupHash(\n\t\t\tthis.oAppComponent.getManifestEntry(\"sap.ui5\").routing,\n\t\t\toStartupParameters,\n\t\t\tthis.oModel\n\t\t).then((oDeepLink) => {\n\t\t\tlet sHash;\n\t\t\tif (oDeepLink.context) {\n\t\t\t\tconst sTechnicalPath = oDeepLink.context.getPath();\n\t\t\t\tconst sSemanticPath = this._checkIfContextSupportsSemanticPath(oDeepLink.context)\n\t\t\t\t\t? SemanticKeyHelper.getSemanticPath(oDeepLink.context, false)!\n\t\t\t\t\t: sTechnicalPath;\n\n\t\t\t\tif (sSemanticPath !== sTechnicalPath) {\n\t\t\t\t\t// Store the mapping technical <-> semantic path to avoid recalculating it later\n\t\t\t\t\t// and use the semantic path instead of the technical one\n\t\t\t\t\tthis.setLastSemanticMapping({ technicalPath: sTechnicalPath, semanticPath: sSemanticPath });\n\t\t\t\t}\n\n\t\t\t\tsHash = sSemanticPath.substring(1); // To remove the leading '/'\n\t\t\t} else if (oDeepLink.hash) {\n\t\t\t\tsHash = oDeepLink.hash;\n\t\t\t}\n\n\t\t\tif (sHash) {\n\t\t\t\t//Replace the hash with newly created hash\n\t\t\t\t(this.oRouter.getHashChanger().replaceHash as Function)(sHash);\n\t\t\t\tthis.oAppComponent.setStartupModeDeeplink();\n\t\t\t}\n\t\t\treturn;\n\t\t});\n\t}\n\n\t/**\n\t * Manages the preferred mode edit by appending \"[&|?]i-action=edit\" to the hash if:\n\t * - There is a resulting hash from the previous logic,\n\t * - The preferred mode is edit, and\n\t * - The entity is editable\n\t * This works for both deep-link startup (#App?ID=myId&preferredMode=edit) and object page routing (#App?preferredMode=edit&/Entity(ID)).\n\t * @param startupParameters\n\t * @param startupParameters.preferredMode\n\t */\n\tasync _managedPreferredModeEdit(startupParameters: { preferredMode?: string[] }): Promise<void> {\n\t\tconst resultingHash = this.oRouter.getHashChanger().getHash();\n\t\tconst shouldEdit = !!startupParameters.preferredMode?.[0]?.toUpperCase()?.includes(\"EDIT\");\n\t\tconst editable = await AppStartupHelper.verifyEditAnnotations(this.getContextPath(), this.oMetaModel);\n\t\tif (resultingHash && shouldEdit && editable) {\n\t\t\tconst parameter = (resultingHash.includes(\"?\") ? \"&\" : \"?\") + \"i-action=edit\";\n\t\t\t(this.oRouter.getHashChanger().replaceHash as (hash: string) => void)(resultingHash + parameter);\n\t\t}\n\t}\n\n\tgetOutbounds(): Record<string, ManifestOutboundEntry> {\n\t\treturn this.outbounds;\n\t}\n\n\t/**\n\t * Gets the name of the Draft root entity set or the sticky-enabled entity set.\n\t * @returns The name of the root EntitySet\n\t */\n\tgetContextPath(): string {\n\t\treturn this.sContextPath;\n\t}\n\n\tgetInterface(): this {\n\t\treturn this;\n\t}\n}\n\nclass RoutingServiceFactory extends ServiceFactory<RoutingServiceSettings> {\n\tasync createInstance(oServiceContext: ServiceContext<RoutingServiceSettings>): Promise<RoutingService> {\n\t\tconst oRoutingService = new RoutingService(oServiceContext);\n\t\treturn oRoutingService.initPromise;\n\t}\n}\n\nexport default RoutingServiceFactory;\n"],"mappings":"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","ignoreList":[]}