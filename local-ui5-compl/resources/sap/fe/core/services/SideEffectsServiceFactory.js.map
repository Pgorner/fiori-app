{"version":3,"file":"SideEffectsServiceFactory.js","names":["SideEffectsService","_Service","apply","this","arguments","_exports","_inheritsLoose","_proto","prototype","init","context","getContext","appComponent","scopeObject","sideEffectsRegistry","oData","entities","actions","boundActions","unBoundActions","control","recommendationRegistry","roles","targetCallbacks","initializeWebSocketConnection","model","getModel","url","getWebSocketBaseUrl","channel","getWebSocketChannelUrl","ChannelType","SideEffectsEvents","webSocket","createWebSocket","attachMessage","onSideEffectsEventReceived","bind","async","event","message","getParameter","serverAction","sideEffectEventName","sideEffectSource","metaPath","getMetaModel","getMetaContext","dataModel","MetaModelConverter","getInvolvedDataModelObjects","relevantSideEffects","getSideEffectWhereEventIsSource","targetEntityType","fullyQualifiedName","length","relevantPages","pages","getRootViewController","getVisibleViews","page","pageController","getController","isA","_sideEffects","isDataPathRelevant","push","sideEffectsControllerExtension","onlyRecommendations","isOnlyRecommendations","interactionType","getSideEffectsInteractionType","confirmDataRefresh","error","notifyDataRefresh","requestSideEffectsForEvent","recommendationPath","annotations","UI","Recommendations","path","sideEffect","annotation","entity","qualifier","targetProperties","targetEntities","undefined","interactionTypeDefinition","getManifestEntry","app","sideEffectsEventsInteractionType","events","default","addControlSideEffects","entityType","sourceControlId","controlSideEffect","entityControlSideEffects","executeAction","triggerAction","groupId","action","bindContext","getBinding","getUpdateGroupId","submitBatch","execute","getConvertedMetaModel","convertTypes","capabilities","getEntityTypeFromContext","metaModel","getMetaPath","getPath","getObject","getODataEntitySideEffects","entityTypeName","isControlSideEffects","sideEffects","getGlobalODataEntitySideEffects","entitySideEffects","globalSideEffects","key","sourceEntities","sourceProperties","sourceEvents","getODataActionSideEffects","actionName","getODataSideEffectsFromContextEvent","sideEffectsInfo","map","initialize","sideEffectSources","properties","environmentCapabilitiesService","getService","requestObject","getCapabilities","convertedMetaModel","entityTypes","forEach","mapFieldAnnotations","retrieveODataEntitySideEffects","mapSideEffectSources","isBound","sourceEntityType","retrieveODataActionsSideEffects","Object","keys","sourcesToSideEffectMappings","source","addRecommendationRoles","sourceName","hasOwnProperty","input","output","entityProperties","property","commonAnno","Common","RecommendationRole","roleType","valueOf","includes","name","getRecommendationsMapping","checkIfFieldIsRecommendationRelevant","field","getBindingContext","propertyName","data","sourcePath","split","pop","metaContext","targetDataModelObject","targetObject","targetEntityTypeName","isEntitySet","isNavigationProperty","targetType","recommendationRolesForEntity","getRecommendationOutputFields","removeControlSideEffects","controlId","sEntityType","requestSideEffects","pathExpressions","logRequest","requestSideEffectsForODataAction","promises","triggerActions","Promise","all","resolve","requestSideEffectsForNavigationProperty","navigationProperty","ignoreTriggerActions","baseEntityType","navigationPath","sideEffectsTargets","filter","annotationName","some","navigation","$NavigationPropertyPath","propertyPath","startsWith","replace","sAnnotationName","concat","sideEffectsTargetDefinition","removeDuplicateTargets","catch","Log","getControlEntitySideEffects","getSideEffectWhereEntityIsSource","eventName","computeFieldGroupIds","sourceProperty","entityFieldGroupIds","sideEffectInfo","getFieldGroupIdForSideEffect","getSideEffectWherePropertyIsSource","registerTargetCallback","target","callback","deregisterTargetCallback","getRegisteredCallback","addTextProperties","setOfProperties","Set","setOfEntities","dataModelPropertyPath","getDataModelPropertiesFromAPath","associatedTextPath","getAssociatedTextPropertyPath","addTextProperty","Array","from","dataModelTextPath","enhanceDataModelPath","relativeNavigation","targetEntitySet","getTargetNavigationPath","targetPath","getTargetObjectPath","isAssociatedTextListedInSideEffectTargets","isPropertyAssociatedTextOnDifferentEntitySet","add","isProperty","has","navigationProperties","convertSideEffects","bindingParameter","TriggerAction","newSideEffects","convertSideEffectsFormat","removeBindingParameter","formatProperties","reduce","isPropertyPathExpression","value","formatEntities","targetEntity","SourceProperties","SourceEntities","SourceEvents","TargetProperties","TargetEntities","dataModelObjectPaths","containerName","entityContainer","propertyRelativePath","testEntityTypeName","regexPattern","match","RegExp","testEntityType","resolvePath","entitySet","entitySets","find","relatedEntitySet","singletons","singleton","entitySetContext","createBindingContext","dataModelEntitySet","dataModelObjectPath","isComplexType","isEntityType","entityProperty","destroy","getSideEffectsFromSource","bindingAlias","isSourceEntityType","commonAnnotation","parameters","parameter","type","getSideEffectsAnnotationFromSource","sideEffectAnno","isSideEffectsAnnotation","$Type","targetPaths","paths","debug","bindingParameterName","replaceBindingParameter","targetProperty","targetEntitiesPaths","uniqueTargetedEntitiesPath","uniqueTargetProperties","uniqueTargetedEntities","entityPath","oDataSideEffect","sideEffectsSources","sideEffectDefinition","mapSideEffectSourceEntities","mapSideEffectSourceProperties","mapSideEffectSourceEvents","sourceEntity","$target","hasUniqueSourceProperty","sourceEvent","toString","isImmediate","sideEffectWithQualifier","getInterface","Service","SideEffectsServiceFactory","_ServiceFactory","_proto2","createInstance","oServiceContext","SideEffectsServiceService","ServiceFactory"],"sources":["./SideEffectsServiceFactory.ts"],"sourcesContent":["import type {\n\tAction,\n\tConvertedMetadata,\n\tEntitySet,\n\tEntityType,\n\tNavigationProperty,\n\tNavigationPropertyPath,\n\tProperty,\n\tPropertyPath\n} from \"@sap-ux/vocabularies-types\";\nimport type * as Edm from \"@sap-ux/vocabularies-types/Edm\";\nimport type { PathAnnotationExpression } from \"@sap-ux/vocabularies-types/Edm\";\nimport type { SideEffectsType as CommonSideEffectsType } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport { CommonAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport type { PropertyAnnotations_Common } from \"@sap-ux/vocabularies-types/vocabularies/Common_Edm\";\nimport Log from \"sap/base/Log\";\nimport type PageController from \"sap/fe/core/PageController\";\nimport type {\n\tSideEffectsEventsInteractionManifestSetting,\n\tSideEffectsEventsInteractionType\n} from \"sap/fe/core/converters/ManifestSettings\";\nimport * as MetaModelConverter from \"sap/fe/core/converters/MetaModelConverter\";\nimport { convertTypes, getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport {\n\tisComplexType,\n\tisEntitySet,\n\tisEntityType,\n\tisNavigationProperty,\n\tisProperty,\n\tisPropertyPathExpression\n} from \"sap/fe/core/helpers/TypeGuards\";\nimport { ChannelType, createWebSocket, getWebSocketBaseUrl, getWebSocketChannelUrl } from \"sap/fe/core/helpers/WebSocket\";\nimport { getAssociatedTextPropertyPath } from \"sap/fe/core/templating/PropertyHelper\";\nimport type Event from \"sap/ui/base/Event\";\nimport type Control from \"sap/ui/core/Control\";\nimport Service from \"sap/ui/core/service/Service\";\nimport ServiceFactory from \"sap/ui/core/service/ServiceFactory\";\nimport type SapPcpWebSocket from \"sap/ui/core/ws/SapPcpWebSocket\";\nimport type { WebSocket$MessageEvent } from \"sap/ui/core/ws/WebSocket\";\nimport type { default as Context } from \"sap/ui/model/odata/v4/Context\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type { ServiceContext } from \"types/metamodel_types\";\nimport type AppComponent from \"../AppComponent\";\nimport type { DataModelObjectPath } from \"../templating/DataModelPathHelper\";\nimport { enhanceDataModelPath, getTargetNavigationPath, getTargetObjectPath } from \"../templating/DataModelPathHelper\";\nimport type { EnvironmentCapabilities, EnvironmentCapabilitiesService } from \"./EnvironmentServiceFactory\";\n\nexport type PropertyAnnotationsWithRecommendation = PropertyAnnotations_Common & {\n\tRecommendationRole?: string;\n};\n\ntype SideEffectsSettings = {};\n\nexport type SideEffectsEntityType = {\n\t$NavigationPropertyPath: string;\n};\nexport type SideEffectsTarget = SideEffectsEntityType | string;\n\nexport type SideEffectsTargetType = {\n\ttargetProperties: string[];\n\ttargetEntities: SideEffectsEntityType[];\n};\n\ntype BaseSideEffectsType = {\n\tsourceProperties?: string[];\n\tsourceEntities?: SideEffectsEntityType[];\n\tsourceEvents?: string[];\n\tfullyQualifiedName: string;\n} & SideEffectsTargetType;\n\nexport type ODataSideEffectsType = BaseSideEffectsType & {\n\ttriggerAction?: string;\n};\n\nexport type ActionSideEffectsType = {\n\tpathExpressions?: SideEffectsTarget[];\n\ttriggerActions?: string[];\n};\n\nexport type ControlSideEffectsType = Partial<BaseSideEffectsType> & {\n\tfullyQualifiedName: string;\n\tsourceProperties: string[];\n\tsourceControlId: string;\n};\n\nexport type SideEffectsType = ControlSideEffectsType | ODataSideEffectsType;\n\n//TODO fix this type in the ux vocabularies\n//TODO: Source Events are still experimental, remove once public\ntype CommonSideEffectTypeWithQualifier = CommonSideEffectsType & { qualifier?: string; SourceEvents?: Edm.String[] };\n\nexport type SideEffectInfoForSource = { entity: string; qualifier?: string; hasUniqueSourceProperty?: boolean };\n\ntype SideEffectsOriginRegistry = {\n\toData: {\n\t\tentities: {\n\t\t\t[entity: string]: Record<string, ODataSideEffectsType>;\n\t\t};\n\t\tactions: {\n\t\t\tboundActions: {\n\t\t\t\t[entity: string]: Record<string, ActionSideEffectsType>;\n\t\t\t};\n\t\t\tunBoundActions: {\n\t\t\t\t[action: string]: ActionSideEffectsType;\n\t\t\t};\n\t\t};\n\t};\n\tcontrol: {\n\t\t[entity: string]: Record<string, ControlSideEffectsType>;\n\t};\n};\n\ntype RecommendationsRoles = {\n\tinput: string[];\n\toutput: string[];\n\trequired?: string[];\n};\n\nexport type RecommendationsRegistry = {\n\troles: Record<string, RecommendationsRoles>;\n};\n\ntype WebSocketMessage = {\n\tserverAction: \"RaiseSideEffect\";\n\tsideEffectEventName: string;\n\tsideEffectSource: string;\n};\n\nexport class SideEffectsService extends Service<SideEffectsSettings> {\n\tappComponent!: AppComponent;\n\n\tprivate sideEffectsRegistry!: SideEffectsOriginRegistry;\n\n\tprivate recommendationRegistry!: RecommendationsRegistry;\n\n\tprivate capabilities!: EnvironmentCapabilities | undefined;\n\n\tprivate sourcesToSideEffectMappings!: {\n\t\tentities: Record<string, SideEffectInfoForSource[]>;\n\t\tproperties: Record<string, SideEffectInfoForSource[]>;\n\t\tevents: Record<string, SideEffectInfoForSource[]>;\n\t};\n\n\t// Callback methods to be called whenever a side effect target is hit\n\tprivate targetCallbacks!: Record<string, Function>;\n\n\t// WebSocket connection to retrieve SideEffects events\n\tprivate webSocket?: SapPcpWebSocket;\n\n\t// Interaction type for SideEffects events\n\tprivate interactionTypeDefinition?: SideEffectsEventsInteractionManifestSetting;\n\n\t// !: means that we know it will be assigned before usage\n\tinit(): void {\n\t\tconst context = this.getContext();\n\t\tthis.appComponent = context?.scopeObject as AppComponent;\n\t\tthis.sideEffectsRegistry = {\n\t\t\toData: {\n\t\t\t\tentities: {},\n\t\t\t\tactions: {\n\t\t\t\t\tboundActions: {},\n\t\t\t\t\tunBoundActions: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tcontrol: {}\n\t\t};\n\n\t\tthis.recommendationRegistry = {\n\t\t\troles: {}\n\t\t};\n\t\tthis.targetCallbacks = {};\n\t}\n\n\t/**\n\t * Connects to a given WebSocket connection to retrieve SideEffects events.\n\t *\n\t */\n\tinitializeWebSocketConnection(): void {\n\t\tconst model = this.appComponent.getModel();\n\t\tconst url = getWebSocketBaseUrl(model);\n\t\tconst channel = getWebSocketChannelUrl(ChannelType.SideEffectsEvents, model);\n\n\t\tif (url && channel) {\n\t\t\tthis.webSocket = createWebSocket(ChannelType.SideEffectsEvents, model);\n\t\t\tthis.webSocket.attachMessage(this.onSideEffectsEventReceived.bind(this));\n\t\t}\n\t\treturn;\n\t}\n\n\t/**\n\t * This method is called whenever the connected WebSocket sends a message.\n\t * @param event The event with the relevant sideEffect information\n\t */\n\tasync onSideEffectsEventReceived(event: WebSocket$MessageEvent & Event<{ pcpFields?: WebSocketMessage }>): Promise<void> {\n\t\tconst message = event.getParameter(\"pcpFields\");\n\n\t\tif (message?.serverAction !== \"RaiseSideEffect\" || !message.sideEffectEventName || !message.sideEffectSource) {\n\t\t\t// message is not relevant\n\t\t\treturn;\n\t\t}\n\n\t\tconst metaPath = this.getMetaModel().getMetaContext(message.sideEffectSource);\n\t\tconst dataModel = MetaModelConverter.getInvolvedDataModelObjects(metaPath);\n\t\tconst relevantSideEffects = this.getSideEffectWhereEventIsSource(\n\t\t\tdataModel.targetEntityType.fullyQualifiedName,\n\t\t\tmessage.sideEffectEventName\n\t\t);\n\n\t\tif (relevantSideEffects.length === 0) {\n\t\t\t// no side effect for this source\n\t\t\treturn;\n\t\t}\n\n\t\tconst relevantPages: PageController[] = [];\n\t\tconst pages = this.appComponent.getRootViewController().getVisibleViews();\n\t\tfor (const page of pages) {\n\t\t\tconst pageController = page.getController();\n\t\t\tif (\n\t\t\t\tpageController.isA<PageController>(\"sap.fe.core.PageController\") &&\n\t\t\t\tpageController._sideEffects.isDataPathRelevant(message.sideEffectSource, message.sideEffectEventName)\n\t\t\t) {\n\t\t\t\trelevantPages.push(pageController);\n\t\t\t}\n\t\t}\n\n\t\tif (relevantPages.length === 0) {\n\t\t\t// no relevant page found for this source\n\t\t\treturn;\n\t\t}\n\n\t\t// we ask the user to confirm the refresh or notify the user, we use the most specific page\n\t\tconst sideEffectsControllerExtension = relevantPages[relevantPages.length - 1]._sideEffects;\n\t\tconst onlyRecommendations = this.isOnlyRecommendations(dataModel, relevantSideEffects);\n\t\tconst interactionType = this.getSideEffectsInteractionType(message.sideEffectEventName, onlyRecommendations);\n\n\t\tswitch (interactionType) {\n\t\t\tcase \"Confirmation\":\n\t\t\t\ttry {\n\t\t\t\t\tawait sideEffectsControllerExtension.confirmDataRefresh();\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"Notification\":\n\t\t\t\tsideEffectsControllerExtension.notifyDataRefresh();\n\t\t\t\tbreak;\n\t\t\tcase \"None\":\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// now refresh the pages, forward this task to the side effects controller extensions to allow overriding per page (i.e. LR)\n\t\tfor (const page of relevantPages) {\n\t\t\tawait page._sideEffects.requestSideEffectsForEvent(message.sideEffectEventName, message.sideEffectSource);\n\t\t}\n\t}\n\n\t/**\n\t * Check if only recommendations are defined for a specific event.\n\t * @param dataModel The data model object path\n\t * @param relevantSideEffects The relevant side effects for the source\n\t * @returns True if only recommendations are defined for the event\n\t */\n\tisOnlyRecommendations(dataModel: DataModelObjectPath<unknown>, relevantSideEffects: SideEffectInfoForSource[]): boolean {\n\t\tconst recommendationPath = (\n\t\t\tdataModel.targetEntityType.annotations.UI?.Recommendations as PathAnnotationExpression<string> | undefined\n\t\t)?.path;\n\t\tfor (const sideEffect of relevantSideEffects) {\n\t\t\tconst annotation =\n\t\t\t\tthis.sideEffectsRegistry.oData.entities[dataModel.targetEntityType.fullyQualifiedName]?.[\n\t\t\t\t\t`${sideEffect.entity}@com.sap.vocabularies.Common.v1.SideEffects#${sideEffect.qualifier}`\n\t\t\t\t];\n\t\t\t// check if the side effect is only a recommendation\n\t\t\tif (\n\t\t\t\tannotation?.targetProperties.length === 1 &&\n\t\t\t\tannotation?.targetEntities.length === 0 &&\n\t\t\t\tannotation?.targetProperties[0] === recommendationPath\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Retrieve the side effects interaction type from the manifest.\n\t *  @param event The side effects event name\n\t *  @param onlyRecommendations Indicator if only recommendations are shown\n\t * @returns The side effects interaction type\n\t */\n\tgetSideEffectsInteractionType(event: string, onlyRecommendations = false): SideEffectsEventsInteractionType {\n\t\tif (!this.interactionTypeDefinition) {\n\t\t\tthis.interactionTypeDefinition = this.appComponent.getManifestEntry(\"sap.fe\")?.app?.sideEffectsEventsInteractionType;\n\t\t}\n\t\tif (onlyRecommendations) {\n\t\t\t// In case of only recommendations, we do not show any notification\n\t\t\treturn \"None\";\n\t\t}\n\n\t\tif (typeof this.interactionTypeDefinition === \"string\") {\n\t\t\t// a global interaction type is defined\n\t\t\treturn this.interactionTypeDefinition;\n\t\t}\n\n\t\tif (event && this.interactionTypeDefinition?.events?.[event]) {\n\t\t\t// an interaction type is defined for the event\n\t\t\treturn this.interactionTypeDefinition.events[event];\n\t\t}\n\n\t\tif (this.interactionTypeDefinition?.default) {\n\t\t\t// a default interaction type is defined for the event\n\t\t\treturn this.interactionTypeDefinition.default;\n\t\t}\n\n\t\treturn \"Notification\";\n\t}\n\n\t/**\n\t * Adds a SideEffects control\n\t * SideEffects definition is added by a control to keep data up to date\n\t * These SideEffects get limited scope compared with SideEffects coming from an OData service:\n\t * - Only one SideEffects definition can be defined for the combination entity type - control Id\n\t * - Only SideEffects source properties are recognized and used to trigger SideEffects\n\t *\n\t * Ensure the sourceControlId matches the associated SAPUI5 control ID.\n\t * @param entityType Name of the entity type\n\t * @param sideEffect SideEffects definition\n\t */\n\tpublic addControlSideEffects(entityType: string, sideEffect: Omit<ControlSideEffectsType, \"fullyQualifiedName\">): void {\n\t\tif (sideEffect.sourceControlId) {\n\t\t\tconst controlSideEffect: ControlSideEffectsType = {\n\t\t\t\t...sideEffect,\n\t\t\t\tfullyQualifiedName: `${entityType}/SideEffectsForControl/${sideEffect.sourceControlId}`\n\t\t\t};\n\t\t\tconst entityControlSideEffects = this.sideEffectsRegistry.control[entityType] || {};\n\t\t\tentityControlSideEffects[controlSideEffect.sourceControlId] = controlSideEffect;\n\t\t\tthis.sideEffectsRegistry.control[entityType] = entityControlSideEffects;\n\t\t}\n\t}\n\n\t/**\n\t * Executes SideEffects action.\n\t * @param triggerAction Name of the action\n\t * @param context Context\n\t * @param groupId The group ID to be used for the request\n\t * @returns A promise that is resolved without data or with a return value context when the action call succeeds\n\t */\n\tpublic async executeAction(triggerAction: string, context: Context, groupId?: string): Promise<void> {\n\t\tconst action = context.getModel().bindContext(`${triggerAction}(...)`, context);\n\t\tgroupId = groupId || context.getBinding().getUpdateGroupId();\n\t\t// the triggerAction is executed in same $batch but different changeset\n\t\tcontext.getModel().submitBatch(groupId);\n\t\tawait action.execute(groupId, true);\n\t}\n\n\t/**\n\t * Gets converted OData metaModel.\n\t * @returns Converted OData metaModel\n\t */\n\tpublic getConvertedMetaModel(): ConvertedMetadata {\n\t\treturn convertTypes(this.getMetaModel(), this.capabilities);\n\t}\n\n\t/**\n\t * Gets the entity type of a context.\n\t * @param context Context\n\t * @returns Entity Type\n\t */\n\tpublic getEntityTypeFromContext(context: Context): string | undefined {\n\t\tconst metaModel = context.getModel().getMetaModel(),\n\t\t\tmetaPath = metaModel.getMetaPath(context.getPath()),\n\t\t\tentityType = metaModel.getObject(metaPath)[\"$Type\"];\n\t\treturn entityType;\n\t}\n\n\t/**\n\t * Gets the SideEffects that come from an OData service.\n\t * @param entityTypeName Name of the entity type\n\t * @returns SideEffects dictionary\n\t */\n\tpublic getODataEntitySideEffects(entityTypeName: string): Record<string, ODataSideEffectsType> {\n\t\treturn this.sideEffectsRegistry.oData.entities[entityTypeName] || {};\n\t}\n\n\t/**\n\t * Is a SideEffects generated by a control.\n\t * @param sideEffects The SideEffects\n\t * @returns True if the SideEffects is generated by a control, otherwise false\n\t */\n\tpublic isControlSideEffects(sideEffects: SideEffectsType): sideEffects is ControlSideEffectsType {\n\t\treturn !!(sideEffects as ControlSideEffectsType).sourceControlId;\n\t}\n\n\t/**\n\t * Gets the global SideEffects that come from an OData service.\n\t * @param entityTypeName Name of the entity type\n\t * @returns Global SideEffects\n\t */\n\tpublic getGlobalODataEntitySideEffects(entityTypeName: string): ODataSideEffectsType[] {\n\t\tconst entitySideEffects = this.getODataEntitySideEffects(entityTypeName);\n\t\tconst globalSideEffects: ODataSideEffectsType[] = [];\n\t\tfor (const key in entitySideEffects) {\n\t\t\tconst sideEffects = entitySideEffects[key];\n\t\t\tif (!sideEffects.sourceEntities && !sideEffects.sourceProperties && !sideEffects.sourceEvents) {\n\t\t\t\tglobalSideEffects.push(sideEffects);\n\t\t\t}\n\t\t}\n\t\treturn globalSideEffects;\n\t}\n\n\t/**\n\t * Gets the SideEffects that come from an OData service.\n\t * @param actionName Name of the action\n\t * @param context Context\n\t * @returns SideEffects definition\n\t */\n\tpublic getODataActionSideEffects(actionName: string, context?: Context): ActionSideEffectsType | undefined {\n\t\tif (context) {\n\t\t\tconst entityType = this.getEntityTypeFromContext(context);\n\t\t\tif (entityType) {\n\t\t\t\treturn this.sideEffectsRegistry.oData.actions.boundActions[entityType]?.[actionName];\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.sideEffectsRegistry.oData.actions.unBoundActions?.[actionName];\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Gets the SideEffects for the context and the event.\n\t * @param context The context of the SideEffects\n\t * @param event The SideEffects of the event\n\t * @returns An array containing the SideEffects matching with the context and the event\n\t */\n\tpublic getODataSideEffectsFromContextEvent(context: Context, event: string): ODataSideEffectsType[] {\n\t\tconst metaPath = context.getModel().getMetaModel().getMetaContext(context.getPath());\n\t\tconst dataModel = getInvolvedDataModelObjects(metaPath);\n\t\tconst sideEffectsInfo = this.getSideEffectWhereEventIsSource(dataModel.targetEntityType.fullyQualifiedName, event);\n\t\treturn sideEffectsInfo.map(\n\t\t\t(sideEffect) =>\n\t\t\t\tthis.sideEffectsRegistry.oData.entities[dataModel.targetEntityType.fullyQualifiedName]?.[\n\t\t\t\t\t`${sideEffect.entity}@com.sap.vocabularies.Common.v1.SideEffects#${sideEffect.qualifier}`\n\t\t\t\t]\n\t\t);\n\t}\n\n\t/**\n\t * Generates the dictionary for the SideEffects.\n\t *  @returns Promise resolving with the SideEffects service once data has been written\n\t */\n\tasync initialize(): Promise<this> {\n\t\tconst sideEffectSources: {\n\t\t\tentities: Record<string, SideEffectInfoForSource[]>;\n\t\t\tproperties: Record<string, SideEffectInfoForSource[]>;\n\t\t\tevents: Record<string, SideEffectInfoForSource[]>;\n\t\t} = {\n\t\t\tentities: {},\n\t\t\tproperties: {},\n\t\t\tevents: {}\n\t\t};\n\t\tconst environmentCapabilitiesService = (await this.appComponent.getService(\n\t\t\t\"environmentCapabilities\"\n\t\t)) as EnvironmentCapabilitiesService;\n\t\tconst model = this.appComponent.getModel();\n\t\tif (model?.isA?.<ODataModel>(\"sap.ui.model.odata.v4.ODataModel\")) {\n\t\t\t// We need to wait for the MetaModel to be requested\n\t\t\tawait model.getMetaModel().requestObject(\"/$EntityContainer/\");\n\t\t\tthis.capabilities = environmentCapabilitiesService.getCapabilities();\n\n\t\t\tconst convertedMetaModel = this.getConvertedMetaModel();\n\t\t\tconvertedMetaModel.entityTypes.forEach((entityType: EntityType) => {\n\t\t\t\tthis.mapFieldAnnotations(entityType);\n\t\t\t\tthis.sideEffectsRegistry.oData.entities[entityType.fullyQualifiedName] = this.retrieveODataEntitySideEffects(entityType);\n\t\t\t\tthis.mapSideEffectSources(entityType, sideEffectSources);\n\t\t\t});\n\t\t\tconvertedMetaModel.actions.forEach((action: Action) => {\n\t\t\t\tif (action.isBound) {\n\t\t\t\t\tthis.sideEffectsRegistry.oData.actions.boundActions[action.sourceEntityType!.fullyQualifiedName] = {\n\t\t\t\t\t\t...this.sideEffectsRegistry.oData.actions.boundActions[action.sourceEntityType!.fullyQualifiedName],\n\t\t\t\t\t\t...this.retrieveODataActionsSideEffects(action)\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tthis.sideEffectsRegistry.oData.actions.unBoundActions = {\n\t\t\t\t\t\t...this.sideEffectsRegistry.oData.actions.unBoundActions,\n\t\t\t\t\t\t...this.retrieveODataActionsSideEffects(action)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (Object.keys(sideEffectSources.events).length > 0) {\n\t\t\t\tthis.initializeWebSocketConnection();\n\t\t\t}\n\t\t}\n\t\tthis.sourcesToSideEffectMappings = sideEffectSources;\n\t\treturn this;\n\t}\n\n\tprivate mapFieldAnnotations(source: EntityType): void {\n\t\tconst addRecommendationRoles = (sourceName: string): void => {\n\t\t\tif (!this.recommendationRegistry.roles.hasOwnProperty(`${sourceName}`)) {\n\t\t\t\tthis.recommendationRegistry.roles[`${sourceName}`] = {\n\t\t\t\t\tinput: [],\n\t\t\t\t\toutput: []\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tsource.entityProperties.forEach((property) => {\n\t\t\tconst commonAnno = property.annotations.Common as PropertyAnnotationsWithRecommendation;\n\t\t\tif (commonAnno?.RecommendationRole) {\n\t\t\t\tconst roleType = commonAnno.RecommendationRole;\n\t\t\t\tif (roleType.valueOf().includes(\"Input\")) {\n\t\t\t\t\taddRecommendationRoles(`${source.name}`);\n\t\t\t\t\tthis.recommendationRegistry.roles[`${source.name}`].input.push(property.name);\n\t\t\t\t}\n\t\t\t\tif (roleType.valueOf().includes(\"Output\")) {\n\t\t\t\t\taddRecommendationRoles(`${source.name}`);\n\t\t\t\t\tthis.recommendationRegistry.roles[`${source.name}`].output.push(property.name);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic getRecommendationsMapping(): RecommendationsRegistry {\n\t\treturn this.recommendationRegistry;\n\t}\n\n\t/**\n\t * This function will return true if field is part of Recommendation's input mapping and from the same entity.\n\t * Otherwise return false.\n\t * @param field\n\t * @returns True if field is has recommendation role - Input annotation\n\t */\n\tpublic checkIfFieldIsRecommendationRelevant(field: Control): boolean {\n\t\tconst context = field.getBindingContext();\n\t\tconst propertyName = field.data().sourcePath.split(\"/\").pop();\n\t\tif (context) {\n\t\t\tconst metaModel = context?.getModel().getMetaModel();\n\t\t\tconst metaContext = (metaModel as ODataMetaModel)?.getMetaContext(context.getPath());\n\t\t\tconst targetDataModelObject = MetaModelConverter.getInvolvedDataModelObjects<EntitySet | NavigationProperty>(metaContext)\n\t\t\t\t.targetObject!;\n\t\t\tlet targetEntityTypeName;\n\t\t\tif (isEntitySet(targetDataModelObject)) {\n\t\t\t\ttargetEntityTypeName = targetDataModelObject.entityType?.name;\n\t\t\t} else if (isNavigationProperty(targetDataModelObject)) {\n\t\t\t\ttargetEntityTypeName = targetDataModelObject.targetType?.name;\n\t\t\t}\n\t\t\tconst recommendationRolesForEntity = targetEntityTypeName && this.recommendationRegistry.roles[targetEntityTypeName];\n\t\t\tif (recommendationRolesForEntity && recommendationRolesForEntity?.input?.includes(propertyName)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Method returns the properties in a specific entity type which are marked as RecommendationRole Output.\n\t * @param entityTypeName Entity type for which recommendation Output fields needs to be figured\n\t * @returns Array of property names which are marked RecommendationRole Output\n\t */\n\tpublic getRecommendationOutputFields(entityTypeName: string): string[] {\n\t\t//TODO: We have to consider 1:1 navigation properties as well.\n\t\tconst recommendationRolesForEntity = this.recommendationRegistry.roles[entityTypeName];\n\t\tif (recommendationRolesForEntity?.output?.length > 0) {\n\t\t\treturn recommendationRolesForEntity.output;\n\t\t}\n\n\t\treturn [];\n\t}\n\n\t/**\n\t * Removes all SideEffects related to a control.\n\t * @param controlId Control Id\n\t */\n\tpublic removeControlSideEffects(controlId: string): void {\n\t\tObject.keys(this.sideEffectsRegistry.control).forEach((sEntityType) => {\n\t\t\tif (this.sideEffectsRegistry.control[sEntityType][controlId]) {\n\t\t\t\tdelete this.sideEffectsRegistry.control[sEntityType][controlId];\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Requests the SideEffects on a specific context.\n\t * @param pathExpressions Targets of SideEffects to be executed\n\t * @param context Context where SideEffects need to be executed\n\t * @param groupId The group ID to be used for the request\n\t * @returns Promise on SideEffects request\n\t */\n\tpublic async requestSideEffects(pathExpressions: SideEffectsTarget[], context: Context, groupId?: string): Promise<void> {\n\t\tif (pathExpressions.length) {\n\t\t\tthis.logRequest(pathExpressions, context);\n\t\t\tawait context.requestSideEffects(pathExpressions, groupId);\n\t\t}\n\t}\n\n\t/**\n\t * Requests the SideEffects for an OData action.\n\t * @param sideEffects SideEffects definition\n\t * @param context Context where SideEffects need to be executed\n\t * @returns Promise on SideEffects requests and action execution\n\t */\n\tpublic async requestSideEffectsForODataAction(sideEffects: ActionSideEffectsType, context: Context): Promise<(void | undefined)[]> {\n\t\tlet promises: Promise<void | undefined>[];\n\n\t\tif (sideEffects.triggerActions?.length) {\n\t\t\tpromises = sideEffects.triggerActions.map(async (actionName): Promise<void> => {\n\t\t\t\treturn this.executeAction(actionName, context);\n\t\t\t});\n\t\t} else {\n\t\t\tpromises = [];\n\t\t}\n\n\t\tif (sideEffects.pathExpressions?.length) {\n\t\t\tpromises.push(this.requestSideEffects(sideEffects.pathExpressions, context));\n\t\t}\n\n\t\treturn promises.length ? Promise.all(promises) : Promise.resolve([]);\n\t}\n\n\t/**\n\t * Requests the SideEffects for a navigation property on a specific context.\n\t * @param navigationProperty Navigation property\n\t * @param context Context where SideEffects need to be executed\n\t * @param groupId Batch group for the query\n\t * @param ignoreTriggerActions If true, we do not trigger actions defined in the side effect\n\t * @returns SideEffects request on SAPUI5 context\n\t */\n\tpublic async requestSideEffectsForNavigationProperty(\n\t\tnavigationProperty: string,\n\t\tcontext: Context,\n\t\tgroupId?: string,\n\t\tignoreTriggerActions = false\n\t): Promise<void | undefined> {\n\t\tconst baseEntityType = this.getEntityTypeFromContext(context);\n\t\tif (baseEntityType) {\n\t\t\tconst navigationPath = `${navigationProperty}/`;\n\t\t\tconst entitySideEffects = this.getODataEntitySideEffects(baseEntityType);\n\t\t\tlet targetProperties: string[] = [];\n\t\t\tlet targetEntities: SideEffectsEntityType[] = [];\n\t\t\tlet sideEffectsTargets: SideEffectsTarget[] = [];\n\t\t\tObject.keys(entitySideEffects)\n\t\t\t\t.filter(\n\t\t\t\t\t// Keep relevant SideEffects\n\t\t\t\t\t// 1. SourceEntities match OR\n\t\t\t\t\t// 2. Only 1 SourceProperties and match\n\t\t\t\t\t(annotationName) => {\n\t\t\t\t\t\tconst sideEffects: ODataSideEffectsType = entitySideEffects[annotationName];\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t(sideEffects.sourceEntities || []).some(\n\t\t\t\t\t\t\t\t(navigation) => navigation.$NavigationPropertyPath === navigationProperty\n\t\t\t\t\t\t\t) ||\n\t\t\t\t\t\t\t(sideEffects.sourceProperties?.length === 1 &&\n\t\t\t\t\t\t\t\tsideEffects.sourceProperties.some(\n\t\t\t\t\t\t\t\t\t(propertyPath) =>\n\t\t\t\t\t\t\t\t\t\tpropertyPath.startsWith(navigationPath) && !propertyPath.replace(navigationPath, \"\").includes(\"/\")\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\t.forEach((sAnnotationName) => {\n\t\t\t\t\tconst sideEffects = entitySideEffects[sAnnotationName];\n\t\t\t\t\tif (sideEffects.triggerAction && !ignoreTriggerActions) {\n\t\t\t\t\t\tthis.executeAction(sideEffects.triggerAction, context, groupId);\n\t\t\t\t\t}\n\t\t\t\t\ttargetProperties = targetProperties.concat(sideEffects.targetProperties);\n\t\t\t\t\ttargetEntities = targetEntities.concat(sideEffects.targetEntities);\n\t\t\t\t});\n\t\t\t// Remove duplicate targets\n\t\t\tconst sideEffectsTargetDefinition = this.removeDuplicateTargets({\n\t\t\t\ttargetProperties: targetProperties,\n\t\t\t\ttargetEntities: targetEntities\n\t\t\t});\n\t\t\tsideEffectsTargets = [...sideEffectsTargetDefinition.targetProperties, ...sideEffectsTargetDefinition.targetEntities];\n\t\t\tif (sideEffectsTargets.length) {\n\t\t\t\treturn this.requestSideEffects(sideEffectsTargets, context, groupId).catch((error) =>\n\t\t\t\t\tLog.error(`SideEffects - Error while processing SideEffects for Navigation Property ${navigationProperty}`, error)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Gets the SideEffects that come from controls.\n\t * @param entityTypeName Entity type Name\n\t * @returns SideEffects dictionary\n\t */\n\tpublic getControlEntitySideEffects(entityTypeName: string): Record<string, ControlSideEffectsType> {\n\t\treturn this.sideEffectsRegistry.control[entityTypeName] || {};\n\t}\n\n\t/**\n\t * Gets SideEffects' qualifier and owner entity where this entity is used as source.\n\t * @param entityTypeName Entity type fully qualified name\n\t * @returns Array of sideEffects info\n\t */\n\tpublic getSideEffectWhereEntityIsSource(entityTypeName: string): SideEffectInfoForSource[] {\n\t\treturn this.sourcesToSideEffectMappings.entities[entityTypeName] || [];\n\t}\n\n\t/**\n\t * Gets SideEffects' qualifiers where this event is used as source.\n\t * @param entityTypeName Entity type fully qualified\n\t * @param eventName Side Effect event name\n\t * @returns Array of sideEffects info\n\t */\n\tpublic getSideEffectWhereEventIsSource(entityTypeName: string, eventName: string): SideEffectInfoForSource[] {\n\t\treturn this.sourcesToSideEffectMappings.events[eventName]?.filter((event) => event.entity === entityTypeName) || [];\n\t}\n\n\t/**\n\t * Requests the SideEffects for a sideEffect event on a specific context.\n\t * @param event SideEffects event which should be\n\t * @param context Context where SideEffects need to be executed\n\t * @param groupId The group ID to be used for the request\n\t * @returns Promise on SideEffects request\n\t */\n\tasync requestSideEffectsForEvent(event: string, context: Context, groupId?: string): Promise<undefined> {\n\t\tconst sideEffects = this.getODataSideEffectsFromContextEvent(context, event);\n\t\tlet targetProperties: string[] = [];\n\t\tlet targetEntities: SideEffectsEntityType[] = [];\n\n\t\tsideEffects.forEach((sideEffect) => {\n\t\t\ttargetProperties = targetProperties.concat(sideEffect.targetProperties);\n\t\t\ttargetEntities = targetEntities.concat(sideEffect.targetEntities);\n\t\t});\n\n\t\tconst sideEffectsTargetDefinition = this.removeDuplicateTargets({\n\t\t\ttargetProperties: targetProperties,\n\t\t\ttargetEntities: targetEntities\n\t\t});\n\t\tconst sideEffectsTargets = [...sideEffectsTargetDefinition.targetProperties, ...sideEffectsTargetDefinition.targetEntities];\n\t\tif (sideEffectsTargets.length) {\n\t\t\ttry {\n\t\t\t\tawait this.requestSideEffects(sideEffectsTargets, context, groupId);\n\t\t\t} catch (error) {\n\t\t\t\tLog.error(`SideEffects - Error while processing SideEffects for Event ${event}`, error as string);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Common method to get the field groupIds for a source entity and a source property.\n\t * @param sourceEntityType\n\t * @param sourceProperty\n\t * @returns A collection of fieldGroupIds\n\t */\n\tpublic computeFieldGroupIds(sourceEntityType: string, sourceProperty: string): string[] {\n\t\tconst entityFieldGroupIds = this.getSideEffectWhereEntityIsSource(sourceEntityType).map((sideEffectInfo) =>\n\t\t\tthis.getFieldGroupIdForSideEffect(sideEffectInfo, true)\n\t\t);\n\t\treturn entityFieldGroupIds.concat(\n\t\t\tthis.getSideEffectWherePropertyIsSource(sourceProperty).map((sideEffectInfo) =>\n\t\t\t\tthis.getFieldGroupIdForSideEffect(sideEffectInfo)\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * Gets SideEffects' qualifier and owner entity where this property is used as source.\n\t * @param propertyName Property fully qualified name\n\t * @returns Array of sideEffects info\n\t */\n\tpublic getSideEffectWherePropertyIsSource(propertyName: string): SideEffectInfoForSource[] {\n\t\treturn this.sourcesToSideEffectMappings.properties[propertyName] || [];\n\t}\n\n\t// check if can define whether callbacks are async. Otherwise comment\n\t// only one callback for one target\n\tpublic registerTargetCallback(target: string, callback: Function): void {\n\t\tthis.targetCallbacks[target] = callback;\n\t}\n\n\tpublic deregisterTargetCallback(target: string): void {\n\t\tdelete this.targetCallbacks[target];\n\t}\n\n\t// pass parameter\n\tpublic getRegisteredCallback(target: string): Function | undefined {\n\t\treturn this.targetCallbacks[target];\n\t}\n\n\t/**\n\t * Returns updated side effects definition with all text related properties.\n\t * @param sideEffectsTargets The targets of the side effect\n\t * @param entityType Name of the entity where the side effect is registered\n\t * @returns Updated side effects' targets with added text properties or entities\n\t */\n\tprivate addTextProperties(sideEffectsTargets: SideEffectsTargetType, entityType?: EntityType): SideEffectsTargetType {\n\t\tconst setOfProperties = new Set(sideEffectsTargets.targetProperties);\n\t\tconst setOfEntities = new Set(sideEffectsTargets.targetEntities.map((target) => target.$NavigationPropertyPath));\n\t\t// Generate all paths related to the text properties and not already covered by the SideEffects\n\t\tfor (const propertyPath of sideEffectsTargets.targetProperties) {\n\t\t\tfor (const dataModelPropertyPath of this.getDataModelPropertiesFromAPath(propertyPath, entityType)) {\n\t\t\t\tconst associatedTextPath = getAssociatedTextPropertyPath(dataModelPropertyPath.targetObject);\n\t\t\t\tif (associatedTextPath) {\n\t\t\t\t\tthis.addTextProperty(dataModelPropertyPath, propertyPath, associatedTextPath, setOfProperties, setOfEntities);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\ttargetProperties: Array.from(setOfProperties),\n\t\t\ttargetEntities: Array.from(setOfEntities).map((navigation) => {\n\t\t\t\treturn { $NavigationPropertyPath: navigation };\n\t\t\t})\n\t\t};\n\t}\n\n\t/**\n\t * Adds text related property to the side effects targets\n\t * If the property has an associated text then this text needs to be added if it's not already reflected in the side effects definition:\n\t * - as targetProperties if the property and its associated text are on the same entitySet\n\t * - as targetEntities if they are defined on different entitySets.\n\t * @param dataModelPropertyPath The model object path of the property\n\t * @param propertyPath The property path\n\t * @param associatedTextPath The associated text property path\n\t * @param setOfProperties Set of existing sideEffect's target properties\n\t * @param setOfEntities Set of existing sideEffect's target entities\n\t */\n\tprivate addTextProperty(\n\t\tdataModelPropertyPath: DataModelObjectPath<Property>,\n\t\tpropertyPath: string,\n\t\tassociatedTextPath: string,\n\t\tsetOfProperties: Set<string>,\n\t\tsetOfEntities: Set<string>\n\t): void {\n\t\tconst dataModelTextPath = enhanceDataModelPath<Property>(dataModelPropertyPath, associatedTextPath);\n\t\tconst relativeNavigation =\n\t\t\tpropertyPath.startsWith(\"/\") &&\n\t\t\tdataModelTextPath.targetEntitySet &&\n\t\t\tdataModelTextPath.targetEntitySet.name !== dataModelPropertyPath.targetEntitySet?.name\n\t\t\t\t? `/${dataModelTextPath.targetEntitySet?.fullyQualifiedName}`\n\t\t\t\t: getTargetNavigationPath(dataModelTextPath, true);\n\t\tconst targetPath = propertyPath.startsWith(\"/\")\n\t\t\t? `/${dataModelTextPath.targetEntitySet?.fullyQualifiedName}/${dataModelTextPath.targetObject!.name}`\n\t\t\t: getTargetObjectPath(dataModelTextPath, true);\n\t\tif (\n\t\t\tthis.isAssociatedTextListedInSideEffectTargets(\n\t\t\t\tdataModelTextPath,\n\t\t\t\trelativeNavigation,\n\t\t\t\ttargetPath,\n\t\t\t\tsetOfProperties,\n\t\t\t\tsetOfEntities\n\t\t\t)\n\t\t) {\n\t\t\tif (this.isPropertyAssociatedTextOnDifferentEntitySet(dataModelPropertyPath, dataModelTextPath)) {\n\t\t\t\tsetOfEntities.add(relativeNavigation);\n\t\t\t} else {\n\t\t\t\tsetOfProperties.add(targetPath);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the associated text property needs to be added if it's not already reflected in the side effects definition:\n\t * - as targetProperties if the property and its associated text are on the same entitySet\n\t * - as targetEntities if they are defined on different entitySets.\n\t * @param dataModelTextPath The model object path of the associated text\n\t * @param relativeNavigation The navigation to the text property\n\t * @param targetPath The associated text property path\n\t * @param setOfProperties Set of existing sideEffect's target properties\n\t * @param setOfEntities Set of existing sideEffect's target entities\n\t * @returns Updated side effects' targets with added text property or entity\n\t */\n\tprivate isAssociatedTextListedInSideEffectTargets(\n\t\tdataModelTextPath: DataModelObjectPath<Property>,\n\t\trelativeNavigation: string,\n\t\ttargetPath: string,\n\t\tsetOfProperties: Set<string>,\n\t\tsetOfEntities: Set<string>\n\t): boolean {\n\t\treturn (\n\t\t\tisProperty(dataModelTextPath.targetObject) &&\n\t\t\t!setOfProperties.has(targetPath) && // the property is already listed\n\t\t\t!setOfProperties.has(`${relativeNavigation}${dataModelTextPath.navigationProperties.length ? \"/\" : \"\"}*`) && // the property is already listed thanks to the \"*\"\n\t\t\t!setOfEntities.has(`${relativeNavigation}`) // the property is not part of a TargetEntities\n\t\t);\n\t}\n\n\t/**\n\t * Checks if the property and its associated text property are on different entitySet.\n\t * @param dataModelPropertyPath The model object path of the property\n\t * @param dataModelTextPath The model object path of the associated text property\n\t * @returns True if the entitySet is different\n\t */\n\tprivate isPropertyAssociatedTextOnDifferentEntitySet(\n\t\tdataModelPropertyPath: DataModelObjectPath<Property>,\n\t\tdataModelTextPath: DataModelObjectPath<Property>\n\t): boolean {\n\t\treturn (\n\t\t\tdataModelPropertyPath.targetEntitySet !== dataModelTextPath.targetEntitySet &&\n\t\t\t!!dataModelTextPath.navigationProperties &&\n\t\t\t!!dataModelTextPath.targetEntityType\n\t\t);\n\t}\n\n\t/**\n\t * Converts the SideEffects to expected format\n\t * - Set TriggerAction as string\n\t * - Converts SideEffects targets to expected format\n\t * - Removes binding parameter from SideEffects targets properties\n\t * - Adds the text properties\n\t * - Replaces TargetProperties having reference to Source Properties for a SideEffects.\n\t * @param sideEffects SideEffects definition\n\t * @param entityType Entity type\n\t * @param bindingParameter Name of the binding parameter\n\t * @returns SideEffects definition\n\t */\n\tprivate convertSideEffects(\n\t\tsideEffects: CommonSideEffectsType,\n\t\tentityType?: EntityType,\n\t\tbindingParameter?: string\n\t): ODataSideEffectsType {\n\t\tconst triggerAction = sideEffects.TriggerAction as string;\n\t\tconst newSideEffects = this.convertSideEffectsFormat(sideEffects);\n\t\tlet sideEffectsTargets = { targetProperties: newSideEffects.targetProperties, targetEntities: newSideEffects.targetEntities };\n\t\tsideEffectsTargets = this.removeBindingParameter(sideEffectsTargets, bindingParameter);\n\t\tsideEffectsTargets = this.addTextProperties(sideEffectsTargets, entityType);\n\t\tsideEffectsTargets = this.removeDuplicateTargets(sideEffectsTargets);\n\t\treturn {\n\t\t\t...newSideEffects,\n\t\t\t...{ targetEntities: sideEffectsTargets.targetEntities, targetProperties: sideEffectsTargets.targetProperties, triggerAction }\n\t\t};\n\t}\n\n\t/**\n\t * Converts the SideEffects targets (TargetEntities and TargetProperties) to expected format\n\t * - TargetProperties as array of string\n\t * - TargetEntities as array of object with property $NavigationPropertyPath.\n\t * @param sideEffects SideEffects definition\n\t * @returns Converted SideEffects\n\t */\n\tprivate convertSideEffectsFormat(sideEffects: CommonSideEffectsType): ODataSideEffectsType {\n\t\tconst formatProperties = (properties?: (string | PropertyPath)[]): string[] | undefined => {\n\t\t\treturn properties\n\t\t\t\t? properties.reduce((targetProperties: string[], target) => {\n\t\t\t\t\t\tlet path = \"\";\n\t\t\t\t\t\tif (isPropertyPathExpression(target)) {\n\t\t\t\t\t\t\tpath = target.value;\n\t\t\t\t\t\t} else if (typeof target === \"string\") {\n\t\t\t\t\t\t\tpath = target;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (path) {\n\t\t\t\t\t\t\ttargetProperties.push(path);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tLog.error(\n\t\t\t\t\t\t\t\t`SideEffects - Error while processing TargetProperties for SideEffects ${sideEffects.fullyQualifiedName}`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn targetProperties;\n\t\t\t\t  }, [])\n\t\t\t\t: properties;\n\t\t};\n\t\tconst formatEntities = (entities?: NavigationPropertyPath[]): { $NavigationPropertyPath: string }[] | undefined => {\n\t\t\treturn entities\n\t\t\t\t? entities.map((targetEntity) => {\n\t\t\t\t\t\treturn { $NavigationPropertyPath: targetEntity.value };\n\t\t\t\t  })\n\t\t\t\t: entities;\n\t\t};\n\n\t\t// TODO: SourceEvents are still experimental, remove once public\n\t\ttype CommonSideEffectTypeWithSourceEvents = CommonSideEffectsType & { SourceEvents?: Edm.String[] };\n\n\t\treturn {\n\t\t\tfullyQualifiedName: sideEffects.fullyQualifiedName,\n\t\t\tsourceProperties: formatProperties(sideEffects.SourceProperties),\n\t\t\tsourceEntities: formatEntities(sideEffects.SourceEntities),\n\t\t\tsourceEvents: (sideEffects as CommonSideEffectTypeWithSourceEvents).SourceEvents as string[],\n\t\t\ttargetProperties: formatProperties(sideEffects.TargetProperties as (string | PropertyPath)[]) ?? [],\n\t\t\ttargetEntities: formatEntities(sideEffects.TargetEntities) ?? []\n\t\t};\n\t}\n\n\t/**\n\t * Gets all dataModelObjectPath related to properties listed by a path\n\t *\n\t * The path can be:\n\t * - a path targeting a property on a complexType or an EntityType\n\t * - a path with a star targeting all properties on a complexType or an EntityType.\n\t * - absolute.\n\t * @param propertyPath The path to analyze\n\t * @param entityType Entity type\n\t * @returns Array of dataModelObjectPath representing the properties\n\t */\n\tprivate getDataModelPropertiesFromAPath(propertyPath: string, entityType?: EntityType): DataModelObjectPath<Property>[] {\n\t\tlet dataModelObjectPaths: DataModelObjectPath<Property>[] = [];\n\t\tconst convertedMetaModel = this.getConvertedMetaModel();\n\t\tconst containerName = convertedMetaModel.entityContainer.fullyQualifiedName;\n\t\tlet propertyRelativePath: string | undefined,\n\t\t\ttestEntityTypeName: string | undefined,\n\t\t\tregexPattern: RegExp,\n\t\t\tmatch: RegExpMatchArray | null;\n\t\tif (propertyPath.startsWith(`/${containerName}/`)) {\n\t\t\tregexPattern = new RegExp(`^\\\\/${containerName}\\\\/[^/]+\\\\/(.+)?$`);\n\t\t\tmatch = propertyPath.match(regexPattern);\n\t\t\tpropertyRelativePath = match ? match[1] : undefined;\n\t\t}\n\t\tif (!entityType) {\n\t\t\tregexPattern = new RegExp(`^/${containerName}/([^/]+)`);\n\t\t\tmatch = propertyPath.match(regexPattern);\n\t\t\ttestEntityTypeName = match ? match[1] : undefined;\n\t\t}\n\t\tconst testEntityType =\n\t\t\tentityType ??\n\t\t\t((testEntityTypeName ? convertedMetaModel.resolvePath(`/${testEntityTypeName}/`).target : undefined) as EntityType | undefined);\n\t\tconst entitySet =\n\t\t\tconvertedMetaModel.entitySets.find((relatedEntitySet) => relatedEntitySet.entityType === testEntityType) ??\n\t\t\tconvertedMetaModel.singletons.find((singleton) => singleton.entityType === testEntityType);\n\t\tif (entitySet) {\n\t\t\tconst metaModel = this.getMetaModel(),\n\t\t\t\tentitySetContext = metaModel.createBindingContext(`/${entitySet.name}`);\n\t\t\tif (entitySetContext) {\n\t\t\t\tconst dataModelEntitySet = getInvolvedDataModelObjects(entitySetContext);\n\t\t\t\tconst dataModelObjectPath = enhanceDataModelPath<Property | EntityType>(\n\t\t\t\t\t\tdataModelEntitySet,\n\t\t\t\t\t\t(propertyRelativePath || propertyPath).replace(\"*\", \"\") || \"/\"\n\t\t\t\t\t), // \"*\" is replaced by \"/\" to target the current EntityType\n\t\t\t\t\ttargetObject = dataModelObjectPath.targetObject;\n\t\t\t\tif (isProperty(targetObject)) {\n\t\t\t\t\tif (isComplexType(targetObject.targetType)) {\n\t\t\t\t\t\tdataModelObjectPaths = dataModelObjectPaths.concat(\n\t\t\t\t\t\t\ttargetObject.targetType.properties.map((property) =>\n\t\t\t\t\t\t\t\tenhanceDataModelPath<Property>(dataModelObjectPath, property.name)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdataModelObjectPaths.push(dataModelObjectPath as DataModelObjectPath<Property>);\n\t\t\t\t\t}\n\t\t\t\t} else if (isEntityType(targetObject)) {\n\t\t\t\t\tdataModelObjectPaths = dataModelObjectPaths.concat(\n\t\t\t\t\t\tdataModelObjectPath.targetEntityType.entityProperties.map((entityProperty) => {\n\t\t\t\t\t\t\treturn enhanceDataModelPath<Property>(dataModelObjectPath, entityProperty.name);\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tentitySetContext.destroy();\n\t\t\t}\n\t\t}\n\t\treturn dataModelObjectPaths.filter((dataModelObjectPath) => dataModelObjectPath.targetObject);\n\t}\n\n\t/**\n\t * Gets the Odata metamodel.\n\t * @returns The OData metamodel\n\t */\n\tprivate getMetaModel(): ODataMetaModel {\n\t\treturn this.appComponent.getModel().getMetaModel();\n\t}\n\n\t/**\n\t * Gets the SideEffects related to an entity type or action that come from an OData Service\n\t * Internal routine to get, from converted oData metaModel, SideEffects related to a specific entity type or action\n\t * and to convert these SideEffects with expected format.\n\t * @param source Entity type or action\n\t * @returns Array of SideEffects\n\t */\n\tprivate getSideEffectsFromSource(source: EntityType | Action): ODataSideEffectsType[] {\n\t\tlet bindingAlias = \"\";\n\t\tconst isSourceEntityType = isEntityType(source);\n\t\tconst entityType: EntityType | undefined = isSourceEntityType ? source : source.sourceEntityType;\n\t\tconst commonAnnotation = source.annotations?.Common as undefined | unknown as Record<string, CommonAnnotationTypes>;\n\t\tif (commonAnnotation) {\n\t\t\tif (entityType && !isSourceEntityType) {\n\t\t\t\tconst bindingParameter = source.parameters?.find((parameter) => parameter.type === entityType.fullyQualifiedName);\n\t\t\t\tbindingAlias = bindingParameter?.fullyQualifiedName.split(\"/\")[1] ?? \"\";\n\t\t\t}\n\t\t\treturn this.getSideEffectsAnnotationFromSource(source).map((sideEffectAnno) =>\n\t\t\t\tthis.convertSideEffects(sideEffectAnno, entityType, bindingAlias)\n\t\t\t);\n\t\t}\n\t\treturn [];\n\t}\n\n\t/**\n\t * Gets the SideEffects related to an entity type or action that come from an OData Service\n\t * Internal routine to get, from converted oData metaModel, SideEffects related to a specific entity type or action.\n\t * @param source Entity type or action\n\t * @returns Array of SideEffects\n\t */\n\tprivate getSideEffectsAnnotationFromSource(source: EntityType | Action): CommonSideEffectTypeWithQualifier[] {\n\t\tconst sideEffects: CommonSideEffectsType[] = [];\n\t\tconst commonAnnotation = source.annotations?.Common as undefined | unknown as Record<string, CommonSideEffectTypeWithQualifier>;\n\t\tfor (const key in commonAnnotation) {\n\t\t\tconst annotation = commonAnnotation[key];\n\t\t\tif (this.isSideEffectsAnnotation(annotation)) {\n\t\t\t\tsideEffects.push(annotation);\n\t\t\t}\n\t\t}\n\t\treturn sideEffects;\n\t}\n\n\t/**\n\t * Checks if the annotation is a SideEffects annotation.\n\t * @param annotation Annotation\n\t * @returns Boolean\n\t */\n\tprivate isSideEffectsAnnotation(annotation: unknown): annotation is CommonSideEffectsType {\n\t\treturn (annotation as CommonSideEffectsType)?.$Type === CommonAnnotationTypes.SideEffectsType;\n\t}\n\n\t/**\n\t * Logs the SideEffects request.\n\t * @param pathExpressions SideEffects targets\n\t * @param context Context\n\t */\n\tprivate logRequest(pathExpressions: SideEffectsTarget[], context: Context): void {\n\t\tconst targetPaths = pathExpressions.reduce(function (paths, target) {\n\t\t\treturn `${paths}\\n\\t\\t${(target as SideEffectsEntityType).$NavigationPropertyPath || target || \"\"}`;\n\t\t}, \"\");\n\t\tLog.debug(`SideEffects - Request:\\n\\tContext path : ${context.getPath()}\\n\\tProperty paths :${targetPaths}`);\n\t}\n\n\t/**\n\t * Removes the name of the binding parameter on the SideEffects targets.\n\t * @param sideEffectsTargets SideEffects Targets\n\t * @param bindingParameterName Name of binding parameter\n\t * @returns SideEffects definition\n\t */\n\tprivate removeBindingParameter(sideEffectsTargets: SideEffectsTargetType, bindingParameterName?: string): SideEffectsTargetType {\n\t\tif (bindingParameterName) {\n\t\t\tconst replaceBindingParameter = function (value: string): string {\n\t\t\t\treturn value.replace(new RegExp(`^${bindingParameterName}/?`), \"\");\n\t\t\t};\n\t\t\treturn {\n\t\t\t\ttargetProperties: sideEffectsTargets.targetProperties.map((targetProperty) => replaceBindingParameter(targetProperty)),\n\t\t\t\ttargetEntities: sideEffectsTargets.targetEntities.map((targetEntity) => {\n\t\t\t\t\treturn { $NavigationPropertyPath: replaceBindingParameter(targetEntity.$NavigationPropertyPath) };\n\t\t\t\t})\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\ttargetProperties: sideEffectsTargets.targetProperties,\n\t\t\ttargetEntities: sideEffectsTargets.targetEntities\n\t\t};\n\t}\n\n\t/**\n\t * Remove duplicates in SideEffects targets.\n\t * @param sideEffectsTargets SideEffects Targets\n\t * @returns SideEffects targets without duplicates\n\t */\n\tprivate removeDuplicateTargets(sideEffectsTargets: SideEffectsTargetType): SideEffectsTargetType {\n\t\tconst targetEntitiesPaths = sideEffectsTargets.targetEntities.map((targetEntity) => targetEntity.$NavigationPropertyPath);\n\t\tconst uniqueTargetedEntitiesPath = new Set<string>(targetEntitiesPaths);\n\t\tconst uniqueTargetProperties = new Set<string>(sideEffectsTargets.targetProperties);\n\n\t\tconst uniqueTargetedEntities = Array.from(uniqueTargetedEntitiesPath).map((entityPath) => {\n\t\t\treturn {\n\t\t\t\t$NavigationPropertyPath: entityPath\n\t\t\t};\n\t\t});\n\n\t\treturn { targetProperties: Array.from(uniqueTargetProperties), targetEntities: uniqueTargetedEntities };\n\t}\n\n\t/**\n\t * Gets SideEffects action type that come from an OData Service\n\t * Internal routine to get, from converted oData metaModel, SideEffects on actions\n\t * related to a specific entity type and to convert these SideEffects with\n\t * expected format.\n\t * @param action Action\n\t * @returns Entity type SideEffects dictionary\n\t */\n\tprivate retrieveODataActionsSideEffects(action: Action): Record<string, ActionSideEffectsType> {\n\t\tconst sideEffects: Record<string, ActionSideEffectsType> = {};\n\t\tconst triggerActions = new Set<string>();\n\t\tlet targetProperties: string[] = [];\n\t\tlet targetEntities: SideEffectsEntityType[] = [];\n\n\t\tthis.getSideEffectsFromSource(action).forEach((oDataSideEffect) => {\n\t\t\tconst triggerAction = oDataSideEffect.triggerAction;\n\t\t\ttargetProperties = targetProperties.concat(oDataSideEffect.targetProperties);\n\t\t\ttargetEntities = targetEntities.concat(oDataSideEffect.targetEntities);\n\t\t\tif (triggerAction) {\n\t\t\t\ttriggerActions.add(triggerAction);\n\t\t\t}\n\t\t});\n\t\tconst sideEffectsTargets = this.removeDuplicateTargets({ targetProperties, targetEntities });\n\t\tconst actionName = action.isBound ? action.fullyQualifiedName.match(/^[^(]+/)?.[0] : action.name;\n\t\tsideEffects[actionName!] = {\n\t\t\tpathExpressions: [...sideEffectsTargets.targetProperties, ...sideEffectsTargets.targetEntities],\n\t\t\ttriggerActions: Array.from(triggerActions)\n\t\t};\n\t\treturn sideEffects;\n\t}\n\n\t/**\n\t * Gets SideEffects entity type that come from an OData Service\n\t * Internal routine to get, from converted oData metaModel, SideEffects\n\t * related to a specific entity type and to convert these SideEffects with\n\t * expected format.\n\t * @param entityType Entity type\n\t * @returns Entity type SideEffects dictionary\n\t */\n\tprivate retrieveODataEntitySideEffects(entityType: EntityType): Record<string, ODataSideEffectsType> {\n\t\tconst entitySideEffects: Record<string, ODataSideEffectsType> = {};\n\t\tthis.getSideEffectsFromSource(entityType).forEach((sideEffects) => {\n\t\t\tentitySideEffects[sideEffects.fullyQualifiedName] = sideEffects;\n\t\t});\n\t\treturn entitySideEffects;\n\t}\n\n\t/**\n\t * Defines a map for the Sources of sideEffect on the entity to track where those sources are used in SideEffects annotation.\n\t * @param entityType The entityType we look for side Effects annotation\n\t * @param sideEffectsSources The mapping object in construction\n\t * @param sideEffectsSources.entities\n\t * @param sideEffectsSources.properties\n\t * @param sideEffectsSources.events\n\t */\n\tprivate mapSideEffectSources(\n\t\tentityType: EntityType,\n\t\tsideEffectsSources: {\n\t\t\tentities: Record<string, SideEffectInfoForSource[]>;\n\t\t\tproperties: Record<string, SideEffectInfoForSource[]>;\n\t\t\tevents: Record<string, SideEffectInfoForSource[]>;\n\t\t}\n\t): void {\n\t\tfor (const sideEffectDefinition of this.getSideEffectsAnnotationFromSource(entityType)) {\n\t\t\tthis.mapSideEffectSourceEntities(entityType, sideEffectsSources, sideEffectDefinition);\n\t\t\tthis.mapSideEffectSourceProperties(entityType, sideEffectsSources, sideEffectDefinition);\n\t\t\tthis.mapSideEffectSourceEvents(entityType, sideEffectsSources, sideEffectDefinition);\n\t\t}\n\t}\n\n\t/**\n\t * Fills the map for the Sources of sideEffect with source entities.\n\t * @param entityType The entityType we look for side Effects annotation\n\t * @param sideEffectsSources The mapping object in construction\n\t * @param sideEffectsSources.entities\n\t * @param sideEffectsSources.properties\n\t * @param sideEffectsSources.events\n\t * @param sideEffectDefinition The side effect definition to be evaluated\n\t */\n\tprivate mapSideEffectSourceEntities(\n\t\tentityType: EntityType,\n\t\tsideEffectsSources: {\n\t\t\tentities: Record<string, SideEffectInfoForSource[]>;\n\t\t\tproperties: Record<string, SideEffectInfoForSource[]>;\n\t\t\tevents: Record<string, SideEffectInfoForSource[]>;\n\t\t},\n\t\tsideEffectDefinition: CommonSideEffectTypeWithQualifier\n\t): void {\n\t\tfor (const sourceEntity of sideEffectDefinition.SourceEntities ?? []) {\n\t\t\tconst targetEntityType = sourceEntity.value ? sourceEntity.$target?.targetType : entityType;\n\t\t\tif (targetEntityType) {\n\t\t\t\tif (!sideEffectsSources.entities[targetEntityType.fullyQualifiedName]) {\n\t\t\t\t\tsideEffectsSources.entities[targetEntityType.fullyQualifiedName] = [];\n\t\t\t\t}\n\t\t\t\tsideEffectsSources.entities[targetEntityType.fullyQualifiedName].push({\n\t\t\t\t\tentity: entityType.fullyQualifiedName,\n\t\t\t\t\tqualifier: sideEffectDefinition.qualifier\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Fills the map for the Sources of sideEffect with source properties.\n\t * @param entityType The entityType we look for side Effects annotation\n\t * @param sideEffectsSources The mapping object in construction\n\t * @param sideEffectsSources.entities\n\t * @param sideEffectsSources.properties\n\t * @param sideEffectsSources.events\n\t * @param sideEffectDefinition The side effect definition to be evaluated\n\t */\n\tprivate mapSideEffectSourceProperties(\n\t\tentityType: EntityType,\n\t\tsideEffectsSources: {\n\t\t\tentities: Record<string, SideEffectInfoForSource[]>;\n\t\t\tproperties: Record<string, SideEffectInfoForSource[]>;\n\t\t\tevents: Record<string, SideEffectInfoForSource[]>;\n\t\t},\n\t\tsideEffectDefinition: CommonSideEffectTypeWithQualifier\n\t): void {\n\t\tconst hasUniqueSourceProperty = sideEffectDefinition.SourceProperties?.length === 1;\n\t\tfor (const sourceProperty of sideEffectDefinition.SourceProperties ?? []) {\n\t\t\tif (sourceProperty.$target) {\n\t\t\t\tif (!sideEffectsSources.properties[sourceProperty.$target.fullyQualifiedName]) {\n\t\t\t\t\tsideEffectsSources.properties[sourceProperty.$target.fullyQualifiedName] = [];\n\t\t\t\t}\n\t\t\t\tsideEffectsSources.properties[sourceProperty.$target.fullyQualifiedName].push({\n\t\t\t\t\tentity: entityType.fullyQualifiedName,\n\t\t\t\t\tqualifier: sideEffectDefinition.qualifier,\n\t\t\t\t\thasUniqueSourceProperty\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Fills the map for the Sources of sideEffect with source events.\n\t * @param entityType The entityType we look for side Effects annotation\n\t * @param sideEffectsSources The mapping object in construction\n\t * @param sideEffectsSources.entities\n\t * @param sideEffectsSources.properties\n\t * @param sideEffectsSources.events\n\t * @param sideEffectDefinition The side effect definition to be evaluated\n\t */\n\tprivate mapSideEffectSourceEvents(\n\t\tentityType: EntityType,\n\t\tsideEffectsSources: {\n\t\t\tentities: Record<string, SideEffectInfoForSource[]>;\n\t\t\tproperties: Record<string, SideEffectInfoForSource[]>;\n\t\t\tevents: Record<string, SideEffectInfoForSource[]>;\n\t\t},\n\t\tsideEffectDefinition: CommonSideEffectTypeWithQualifier\n\t): void {\n\t\tfor (const sourceEvent of sideEffectDefinition.SourceEvents ?? []) {\n\t\t\tif (!sideEffectsSources.events[sourceEvent.toString()]) {\n\t\t\t\tsideEffectsSources.events[sourceEvent.toString()] = [];\n\t\t\t}\n\t\t\tsideEffectsSources.events[sourceEvent.toString()].push({\n\t\t\t\tentity: entityType.fullyQualifiedName,\n\t\t\t\tqualifier: sideEffectDefinition.qualifier\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Get the fieldGroupId based on the stored information on th side effect.\n\t * @param sideEffectInfo\n\t * @param isImmediate\n\t * @returns A string for the fieldGroupId.\n\t */\n\tprivate getFieldGroupIdForSideEffect(sideEffectInfo: SideEffectInfoForSource, isImmediate = false): string {\n\t\tconst sideEffectWithQualifier = sideEffectInfo.qualifier\n\t\t\t? `${sideEffectInfo.entity}#${sideEffectInfo.qualifier}`\n\t\t\t: sideEffectInfo.entity;\n\t\treturn isImmediate || sideEffectInfo.hasUniqueSourceProperty === true\n\t\t\t? `${sideEffectWithQualifier}$$ImmediateRequest`\n\t\t\t: sideEffectWithQualifier;\n\t}\n\n\tgetInterface(): SideEffectsService {\n\t\treturn this;\n\t}\n}\n\nclass SideEffectsServiceFactory extends ServiceFactory<SideEffectsSettings> {\n\tasync createInstance(oServiceContext: ServiceContext<SideEffectsSettings>): Promise<SideEffectsService> {\n\t\tconst SideEffectsServiceService = new SideEffectsService(oServiceContext);\n\t\treturn SideEffectsServiceService.initialize();\n\t}\n}\n\nexport default SideEffectsServiceFactory;\n"],"mappings":"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","ignoreList":[]}