{"version":3,"names":["registeredInstances","registeredHandlers","hookable","execution","target","propertyKey","descriptor","indexableTarget","toString","fn","cExTInstanceHookMap","hookedHandlers","push","handlers","index","indexOf","splice","oldValue","value","returnValue","bind","arguments","handler","_exports","isAlreadyRegistered","existingRegistrations","newRegistration","find","r","name","method","targetMethod","controllerExtensionHandler","String","constructor","initControllerExtensionHookHandlers","controller","indexableController","registeredHandler","handlerFunction","getView","attachBeforeExit","xmlViewPreprocessor","source","_caller","_settings","sourceView","getController","macroAPIChild","findAggregatedObjects","s","isA","managedObject"],"sourceRoot":".","sources":["HookSupport.ts"],"sourcesContent":["import type { ExtensionOverrideExecution } from \"sap/fe/base/ClassSupport\";\nimport type Controller from \"sap/ui/core/mvc/Controller\";\nimport type XMLView from \"sap/ui/core/mvc/XMLView\";\n\n/**\n * This type is to be extended with all controller extensions and methods that are hookable.\n */\ntype HookableControllerExtensions = {\n\teditFlow: {\n\t\tonAfterSave: true;\n\t\tonBeforeSave: true;\n\t};\n\tcollaborationManager: {\n\t\tcollectAvailableCards: true;\n\t};\n\tpaginator: {\n\t\tinitialize: true;\n\t};\n\trouting: {\n\t\tonAfterBinding: true;\n\t};\n};\n\ntype HandlerConfiguration<CExtName extends keyof HookableControllerExtensions> = {\n\tname: CExtName;\n\tmethod: keyof HookableControllerExtensions[CExtName];\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype HandlerRegistration = HandlerConfiguration<any> & { targetMethod: string };\n\ntype FunctionMap = {\n\t[key: string]: Function;\n};\ntype DeepFunctionMap = {\n\t[key: string]: FunctionMap;\n};\ntype HookMap = {\n\thookedHandlers: {\n\t\t[key: string]: Function[];\n\t};\n};\n\n// Use two arrays as we cannot index a map through an arbitrary object instance\nconst registeredInstances: Function[] = [];\nconst registeredHandlers: HandlerRegistration[][] = [];\n\n/**\n * Marks a controller extension method to be hookable by generating additional methods that can be used to attach and detach handlers at runtime.\n * @param execution\n * @returns A method decorator\n */\nexport function hookable(execution: ExtensionOverrideExecution): MethodDecorator {\n\treturn function (target: unknown, propertyKey: string | symbol, descriptor: PropertyDescriptor) {\n\t\tconst indexableTarget = target as FunctionMap;\n\n\t\tindexableTarget[`attach${propertyKey.toString()}`] = function (fn: Function): void {\n\t\t\tconst cExTInstanceHookMap = this as unknown as HookMap;\n\t\t\tif (!cExTInstanceHookMap.hookedHandlers) {\n\t\t\t\tcExTInstanceHookMap.hookedHandlers = {};\n\t\t\t}\n\t\t\tif (!cExTInstanceHookMap.hookedHandlers[propertyKey.toString()]) {\n\t\t\t\tcExTInstanceHookMap.hookedHandlers[propertyKey.toString()] = [];\n\t\t\t}\n\t\t\tcExTInstanceHookMap.hookedHandlers[propertyKey.toString()].push(fn);\n\t\t};\n\t\tindexableTarget[`detach${propertyKey.toString()}`] = function (fn: Function): void {\n\t\t\tconst cExTInstanceHookMap = this as unknown as HookMap;\n\t\t\tconst handlers = cExTInstanceHookMap.hookedHandlers[propertyKey.toString()];\n\t\t\tconst index = handlers.indexOf(fn);\n\t\t\tif (index !== -1) {\n\t\t\t\thandlers.splice(index, 1);\n\t\t\t}\n\t\t};\n\n\t\tconst oldValue = descriptor.value;\n\t\tif (execution === \"BeforeAsync\" || execution === \"AfterAsync\") {\n\t\t\tdescriptor.value = async function (...args: unknown[]): Promise<unknown> {\n\t\t\t\tconst cExTInstanceHookMap = this as unknown as HookMap;\n\t\t\t\tconst handlers = (cExTInstanceHookMap?.hookedHandlers && cExTInstanceHookMap?.hookedHandlers[propertyKey.toString()]) || [];\n\t\t\t\tlet returnValue: unknown;\n\t\t\t\tif (execution === \"AfterAsync\") {\n\t\t\t\t\treturnValue = await oldValue.bind(this)(...args);\n\t\t\t\t}\n\t\t\t\tfor (const handler of handlers) {\n\t\t\t\t\tawait handler.bind(this)(...args);\n\t\t\t\t}\n\t\t\t\tif (execution === \"BeforeAsync\") {\n\t\t\t\t\treturnValue = await oldValue.bind(this)(...args);\n\t\t\t\t}\n\t\t\t\treturn returnValue;\n\t\t\t};\n\t\t} else {\n\t\t\tdescriptor.value = function (...args: unknown[]): unknown {\n\t\t\t\tconst cExTInstanceHookMap = this as unknown as HookMap;\n\t\t\t\tconst handlers = (cExTInstanceHookMap?.hookedHandlers && cExTInstanceHookMap?.hookedHandlers[propertyKey.toString()]) || [];\n\t\t\t\tlet returnValue: unknown;\n\t\t\t\tif (execution === \"After\") {\n\t\t\t\t\treturnValue = oldValue.bind(this)(...args);\n\t\t\t\t}\n\t\t\t\tfor (const handler of handlers) {\n\t\t\t\t\thandler.bind(this)(...args);\n\t\t\t\t}\n\t\t\t\tif (execution === \"Before\") {\n\t\t\t\t\treturnValue = oldValue.bind(this)(...args);\n\t\t\t\t}\n\t\t\t\treturn returnValue;\n\t\t\t};\n\t\t}\n\t};\n}\n\n/**\n * Checks whether a newRegistration is already included in some existingRegistrations by comparing all relevant attributes.\n * @param existingRegistrations\n * @param newRegistration\n * @returns Result of the check\n */\nfunction isAlreadyRegistered(existingRegistrations: HandlerRegistration[], newRegistration: HandlerRegistration): boolean {\n\treturn !!existingRegistrations.find(\n\t\t(r) => r.name === newRegistration.name && r.method === newRegistration.method && r.targetMethod === newRegistration.targetMethod\n\t);\n}\n\n/**\n * Registers a method as controller extension hook handler.\n *\n * Currently, only methods of runtime building blocks are supported.\n * @param name Controller extension to hook into\n * @param method Method to hook into\n * @returns A method decorator\n */\nexport function controllerExtensionHandler<CExtName extends keyof HookableControllerExtensions>(\n\tname: CExtName,\n\tmethod: keyof HookableControllerExtensions[CExtName]\n): MethodDecorator {\n\treturn function (target: { constructor: Function }, propertyKey: string) {\n\t\tconst newRegistration = { name, method: String(method), targetMethod: propertyKey };\n\t\tconst index = registeredInstances.indexOf(target.constructor);\n\n\t\t// We need to check if this exact handler is already registered as handlers are registered statically (on the constructor)\n\t\tif (index !== -1 && !isAlreadyRegistered(registeredHandlers[index], newRegistration)) {\n\t\t\tregisteredHandlers[index].push(newRegistration);\n\t\t} else {\n\t\t\tregisteredInstances.push(target.constructor);\n\t\t\tregisteredHandlers.push([newRegistration]);\n\t\t}\n\t} as MethodDecorator;\n}\n\n/**\n * Initializes all controller extension handlers registered for a given target.\n * @param target Target class to initialize the handlers for\n * @param target.constructor\n * @param controller PageController instance to get the controller extensions instances from\n */\nexport function initControllerExtensionHookHandlers(target: { constructor: Function }, controller: Controller): void {\n\tconst index = registeredInstances.indexOf(target.constructor);\n\tif (index !== -1) {\n\t\tconst indexableController = controller as unknown as DeepFunctionMap;\n\t\tconst indexableTarget = target as unknown as FunctionMap;\n\n\t\tfor (const registeredHandler of registeredHandlers[index]) {\n\t\t\tconst handlerFunction = indexableTarget[registeredHandler.targetMethod].bind(target);\n\n\t\t\tindexableController[registeredHandler.name][`attach${String(registeredHandler.method)}`](handlerFunction);\n\t\t\tcontroller.getView()?.attachBeforeExit(() => {\n\t\t\t\tindexableController[registeredHandler.name][`detach${String(registeredHandler.method)}`](handlerFunction);\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport function xmlViewPreprocessor(source: object, _caller?: unknown, _settings?: object): void {\n\tconst sourceView = source as XMLView;\n\tconst controller = sourceView.getController() as Controller | undefined;\n\tif (controller) {\n\t\tconst macroAPIChild = sourceView.findAggregatedObjects(true, (s) => s.isA(\"sap.fe.macros.MacroAPI\"));\n\t\tfor (const managedObject of macroAPIChild) {\n\t\t\tinitControllerExtensionHookHandlers(managedObject, controller);\n\t\t}\n\t}\n}\n"],"mappings":";;;;;;;;EAIA;AACA;AACA;EAqBA;EAeA;EACA,MAAMA,mBAA+B,GAAG,EAAE;EAC1C,MAAMC,kBAA2C,GAAG,EAAE;;EAEtD;AACA;AACA;AACA;AACA;EACO,SAASC,QAAQA,CAACC,SAAqC,EAAmB;IAChF,OAAO,UAAUC,MAAe,EAAEC,WAA4B,EAAEC,UAA8B,EAAE;MAC/F,MAAMC,eAAe,GAAGH,MAAqB;MAE7CG,eAAe,CAAC,SAASF,WAAW,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,GAAG,UAAUC,EAAY,EAAQ;QAClF,MAAMC,mBAAmB,GAAG,IAA0B;QACtD,IAAI,CAACA,mBAAmB,CAACC,cAAc,EAAE;UACxCD,mBAAmB,CAACC,cAAc,GAAG,CAAC,CAAC;QACxC;QACA,IAAI,CAACD,mBAAmB,CAACC,cAAc,CAACN,WAAW,CAACG,QAAQ,CAAC,CAAC,CAAC,EAAE;UAChEE,mBAAmB,CAACC,cAAc,CAACN,WAAW,CAACG,QAAQ,CAAC,CAAC,CAAC,GAAG,EAAE;QAChE;QACAE,mBAAmB,CAACC,cAAc,CAACN,WAAW,CAACG,QAAQ,CAAC,CAAC,CAAC,CAACI,IAAI,CAACH,EAAE,CAAC;MACpE,CAAC;MACDF,eAAe,CAAC,SAASF,WAAW,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,GAAG,UAAUC,EAAY,EAAQ;QAClF,MAAMC,mBAAmB,GAAG,IAA0B;QACtD,MAAMG,QAAQ,GAAGH,mBAAmB,CAACC,cAAc,CAACN,WAAW,CAACG,QAAQ,CAAC,CAAC,CAAC;QAC3E,MAAMM,KAAK,GAAGD,QAAQ,CAACE,OAAO,CAACN,EAAE,CAAC;QAClC,IAAIK,KAAK,KAAK,CAAC,CAAC,EAAE;UACjBD,QAAQ,CAACG,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;QAC1B;MACD,CAAC;MAED,MAAMG,QAAQ,GAAGX,UAAU,CAACY,KAAK;MACjC,IAAIf,SAAS,KAAK,aAAa,IAAIA,SAAS,KAAK,YAAY,EAAE;QAC9DG,UAAU,CAACY,KAAK,GAAG,kBAAsD;UACxE,MAAMR,mBAAmB,GAAG,IAA0B;UACtD,MAAMG,QAAQ,GAAIH,mBAAmB,EAAEC,cAAc,IAAID,mBAAmB,EAAEC,cAAc,CAACN,WAAW,CAACG,QAAQ,CAAC,CAAC,CAAC,IAAK,EAAE;UAC3H,IAAIW,WAAoB;UACxB,IAAIhB,SAAS,KAAK,YAAY,EAAE;YAC/BgB,WAAW,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAAC,SAAO,CAAC;UACjD;UACA,KAAK,MAAMC,OAAO,IAAIT,QAAQ,EAAE;YAC/B,MAAMS,OAAO,CAACF,IAAI,CAAC,IAAI,CAAC,CAAC,GAAAC,SAAO,CAAC;UAClC;UACA,IAAIlB,SAAS,KAAK,aAAa,EAAE;YAChCgB,WAAW,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAAC,SAAO,CAAC;UACjD;UACA,OAAOF,WAAW;QACnB,CAAC;MACF,CAAC,MAAM;QACNb,UAAU,CAACY,KAAK,GAAG,YAAuC;UACzD,MAAMR,mBAAmB,GAAG,IAA0B;UACtD,MAAMG,QAAQ,GAAIH,mBAAmB,EAAEC,cAAc,IAAID,mBAAmB,EAAEC,cAAc,CAACN,WAAW,CAACG,QAAQ,CAAC,CAAC,CAAC,IAAK,EAAE;UAC3H,IAAIW,WAAoB;UACxB,IAAIhB,SAAS,KAAK,OAAO,EAAE;YAC1BgB,WAAW,GAAGF,QAAQ,CAACG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAAC,SAAO,CAAC;UAC3C;UACA,KAAK,MAAMC,OAAO,IAAIT,QAAQ,EAAE;YAC/BS,OAAO,CAACF,IAAI,CAAC,IAAI,CAAC,CAAC,GAAAC,SAAO,CAAC;UAC5B;UACA,IAAIlB,SAAS,KAAK,QAAQ,EAAE;YAC3BgB,WAAW,GAAGF,QAAQ,CAACG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAAC,SAAO,CAAC;UAC3C;UACA,OAAOF,WAAW;QACnB,CAAC;MACF;IACD,CAAC;EACF;;EAEA;AACA;AACA;AACA;AACA;AACA;EALAI,QAAA,CAAArB,QAAA,GAAAA,QAAA;EAMA,SAASsB,mBAAmBA,CAACC,qBAA4C,EAAEC,eAAoC,EAAW;IACzH,OAAO,CAAC,CAACD,qBAAqB,CAACE,IAAI,CACjCC,CAAC,IAAKA,CAAC,CAACC,IAAI,KAAKH,eAAe,CAACG,IAAI,IAAID,CAAC,CAACE,MAAM,KAAKJ,eAAe,CAACI,MAAM,IAAIF,CAAC,CAACG,YAAY,KAAKL,eAAe,CAACK,YACrH,CAAC;EACF;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACO,SAASC,0BAA0BA,CACzCH,IAAc,EACdC,MAAoD,EAClC;IAClB,OAAO,UAAU1B,MAAiC,EAAEC,WAAmB,EAAE;MACxE,MAAMqB,eAAe,GAAG;QAAEG,IAAI;QAAEC,MAAM,EAAEG,MAAM,CAACH,MAAM,CAAC;QAAEC,YAAY,EAAE1B;MAAY,CAAC;MACnF,MAAMS,KAAK,GAAGd,mBAAmB,CAACe,OAAO,CAACX,MAAM,CAAC8B,WAAW,CAAC;;MAE7D;MACA,IAAIpB,KAAK,KAAK,CAAC,CAAC,IAAI,CAACU,mBAAmB,CAACvB,kBAAkB,CAACa,KAAK,CAAC,EAAEY,eAAe,CAAC,EAAE;QACrFzB,kBAAkB,CAACa,KAAK,CAAC,CAACF,IAAI,CAACc,eAAe,CAAC;MAChD,CAAC,MAAM;QACN1B,mBAAmB,CAACY,IAAI,CAACR,MAAM,CAAC8B,WAAW,CAAC;QAC5CjC,kBAAkB,CAACW,IAAI,CAAC,CAACc,eAAe,CAAC,CAAC;MAC3C;IACD,CAAC;EACF;;EAEA;AACA;AACA;AACA;AACA;AACA;EALAH,QAAA,CAAAS,0BAAA,GAAAA,0BAAA;EAMO,SAASG,mCAAmCA,CAAC/B,MAAiC,EAAEgC,UAAsB,EAAQ;IACpH,MAAMtB,KAAK,GAAGd,mBAAmB,CAACe,OAAO,CAACX,MAAM,CAAC8B,WAAW,CAAC;IAC7D,IAAIpB,KAAK,KAAK,CAAC,CAAC,EAAE;MACjB,MAAMuB,mBAAmB,GAAGD,UAAwC;MACpE,MAAM7B,eAAe,GAAGH,MAAgC;MAExD,KAAK,MAAMkC,iBAAiB,IAAIrC,kBAAkB,CAACa,KAAK,CAAC,EAAE;QAC1D,MAAMyB,eAAe,GAAGhC,eAAe,CAAC+B,iBAAiB,CAACP,YAAY,CAAC,CAACX,IAAI,CAAChB,MAAM,CAAC;QAEpFiC,mBAAmB,CAACC,iBAAiB,CAACT,IAAI,CAAC,CAAC,SAASI,MAAM,CAACK,iBAAiB,CAACR,MAAM,CAAC,EAAE,CAAC,CAACS,eAAe,CAAC;QACzGH,UAAU,CAACI,OAAO,CAAC,CAAC,EAAEC,gBAAgB,CAAC,MAAM;UAC5CJ,mBAAmB,CAACC,iBAAiB,CAACT,IAAI,CAAC,CAAC,SAASI,MAAM,CAACK,iBAAiB,CAACR,MAAM,CAAC,EAAE,CAAC,CAACS,eAAe,CAAC;QAC1G,CAAC,CAAC;MACH;IACD;EACD;EAAChB,QAAA,CAAAY,mCAAA,GAAAA,mCAAA;EAEM,SAASO,mBAAmBA,CAACC,MAAc,EAAEC,OAAiB,EAAEC,SAAkB,EAAQ;IAChG,MAAMC,UAAU,GAAGH,MAAiB;IACpC,MAAMP,UAAU,GAAGU,UAAU,CAACC,aAAa,CAAC,CAA2B;IACvE,IAAIX,UAAU,EAAE;MACf,MAAMY,aAAa,GAAGF,UAAU,CAACG,qBAAqB,CAAC,IAAI,EAAGC,CAAC,IAAKA,CAAC,CAACC,GAAG,CAAC,wBAAwB,CAAC,CAAC;MACpG,KAAK,MAAMC,aAAa,IAAIJ,aAAa,EAAE;QAC1Cb,mCAAmC,CAACiB,aAAa,EAAEhB,UAAU,CAAC;MAC/D;IACD;EACD;EAACb,QAAA,CAAAmB,mBAAA,GAAAA,mBAAA;EAAA,OAAAnB,QAAA;AAAA","ignoreList":[],"file":"HookSupport-dbg.js"}