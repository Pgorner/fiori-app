/*!
 * SAPUI5
    (c) Copyright 2009-2021 SAP SE. All rights reserved
  
 */
/*global sap*/
sap.ui.define(
[
"sap/sac/df/firefly/ff4205.olap.api.base"
],
function(oFF)
{
"use strict";

oFF.ErrorMessages = {

	BLENDING_CONDITIONS_NOT_FULFILLED:"Blending conditions not fulfilled. Either no dimension in drill or useEmptyAllMemberMeasureFilter is set to false but the dynamic filter does not include any member(s) from the leading measure structure.",
	BLENDING_INVALID_MODEL_LINK:"Blending is not supported due to an invalid model link. Please see \"Link Dimensions\" for more details.",
	BLENDING_PRIMARY_CALCULATION_DIMENSION_NOT_IN_DRILL:"No primary calculation dimension found in drill.",
	BW_DATE_TIME_DIMENSION_UNSUPPORTED_AS_LINKED_DIMENSION:"{\"msg\":\"SAP BW date/time dimension is not supported as a linked dimension for a blended widget.\", \"args\":[]}",
	CALCULATED_DIMENSIONS_CAPABILITY_NOT_SUPPORTED_DESERIALIZE:"calculated dimensions were deserialized but the system does not support them",
	DYNAMIC_TIME_MEASURE_INVALID_DEPENDENCY:"{\"msg\":\"{0} is invalid because it depends on invalid calculation {1}.\", \"args\":[\"{0}\",\"{1}\"], \"measure\":\"{measureName}\"}",
	DYNAMIC_TIME_MEASURE_INVALID_DRILL_LEVEL:"{\"msg\":\"Invalid drill level, time dimension must be drilled down for dynamic time calculation.\", \"args\":[], \"measure\":\"{measureName}\"}",
	DYNAMIC_TIME_MEASURE_INVALID_DRILL_PATH_VALUE:"{\"msg\":\"{0} is invalid because {1} has invalid drill.\", \"args\":[\"{0}\",\"{1}\"], \"measure\":\"{measureName}\", \"timeDimensionName\": \"{timeDimensionName}\"}",
	DYNAMIC_TIME_MEASURE_INVALID_DYNAMIC_TIME_CALCULATION:"{\"msg\":\"Invalid dynamic time calculation.\", \"args\":[], \"measure\":\"{measureName}\", \"timeDimensionName\": \"{timeDimensionName}\"}",
	DYNAMIC_TIME_MEASURE_INVALID_FILTER_VALUE:"{\"msg\":\"{0} is invalid because {1} has invalid filter value.\", \"args\":[\"{0}\",\"{1}\"], \"measure\":\"{measureName}\", \"timeDimensionName\": \"{timeDimensionName}\"}",
	DYNAMIC_TIME_MEASURE_INVALID_FINEST_DRILL_LEVEL:"{\"msg\":\"Invalid finest drill level.\", \"args\":[], \"measure\":\"{measureName}\"}",
	DYNAMIC_TIME_MEASURE_INVALID_MEMBER_NAVIGATION_WITH_FLAT_AND_HIERARCHICAL_FILTER:"{\"msg\":\"Time calculations do not support having a story/page/group filter and a widget filter defined on the {0} dimension at the same time.\", \"args\":[\"{0}\"], \"measure\":\"{measureName}\", \"timeDimensionName\": \"{timeDimensionName}\"}",
	DYNAMIC_TIME_MEASURE_INVALID_MULTIPLE_TIME_DIMENSION_IN_CARTESIAN_PRODUCT:"{\"msg\":\"Invalid time operation, cannot have multiple cartesian list of the same dimension.\", \"args\":[], \"measure\":\"{measureName}\"}",
	DYNAMIC_TIME_MEASURE_INVALID_PREVIOUS_PERIOD_NOT_DRILLED:"{\"msg\":\"The {0} dimension must be drilled for {1} to appear.\", \"args\":[\"{0}\",\"{1}\"], \"measure\":\"{measureName}\", \"timeDimensionName\": \"{timeDimensionName}\"}",
	DYNAMIC_TIME_MEASURE_INVALID_TIME_DIMENSION:"{\"msg\":\"Invalid time dimension.\", \"args\":[], \"measure\":\"{measureName}\"}",
	DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_FUNCTION:"{\"msg\":\"Invalid dynamic time calculation function.\", \"args\":[], \"measure\":\"{measureName}\"}",
	DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY:"{\"msg\":\"Invalid time operation granularity.\", \"args\":[], \"measure\":\"{measureName}\"}",
	DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY_IS_FINER_THAN_DRILL_LEVEL:"{\"msg\":\"The {0} dimension must be drilled to {1} or lower for {2} to appear.\", \"args\":[\"{0}\",\"{1}\",\"{2}\"], \"measure\":\"{measureName}\", \"timeDimensionName\": \"{timeDimensionName}\"}",
	DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY_IS_FINER_THAN_FILTER_LEVEL:"{\"msg\":\"The {0} dimension must be filtered on a single value on {1} or lower level for {2} to appear.\", \"args\":[\"{0}\",\"{1}\",\"{2}\"], \"measure\":\"{measureName}\", \"timeDimensionName\": \"{timeDimensionName}\"}",
	DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY_NOT_IN_HIERARCHY:"{\"msg\":\"A time hierarchy type with {0} granularity must be selected for {1} to appear.\", \"args\":[\"{0}\",\"{1}\"], \"measure\":\"{measureName}\"}",
	DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY_ON_DAY_DRILL_LEVEL:"{\"msg\":\"The {0} dimension must be drilled to Week or higher level for {1} to appear.\", \"args\":[\"{0}\",\"{1}\"], \"measure\":\"{measureName}\", \"timeDimensionName\": \"{timeDimensionName}\"}",
	DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY_ON_DAY_FILTER_LEVEL:"{\"msg\":\"The {0} dimension must be filtered on a single value on Week or higher level for {1} to appear.\", \"args\":[\"{0}\",\"{1}\"], \"measure\":\"{measureName}\", \"timeDimensionName\": \"{timeDimensionName}\"}",
	DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY_ON_WEEK_DAY_DRILL_LEVEL:"{\"msg\":\"The {0} dimension must be drilled to Month or higher level for {1} to appear.\", \"args\":[\"{0}\",\"{1}\"], \"measure\":\"{measureName}\", \"timeDimensionName\": \"{timeDimensionName}\"}",
	DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY_ON_WEEK_DAY_FILTER_LEVEL:"{\"msg\":\"The {0} dimension must be filtered on a single value on Month or higher level for {1} to appear.\", \"args\":[\"{0}\",\"{1}\"], \"measure\":\"{measureName}\", \"timeDimensionName\": \"{timeDimensionName}\"}",
	DYNAMIC_TIME_MEASURE_INVALID_TO_DATE_ACROSS_MULTIPLE_VALUES:"{\"msg\":\"{0} doesn't support values that span across {1}s.\", \"args\":[\"{0}\",\"{1}\"], \"measure\":\"{measureName}\"}",
	DYNAMIC_TIME_MEASURE_INVALID_TO_DATE_FUNCTION_GRANULARITY:"{\"msg\":\"Invalid dynamic time calculation granularity for TO DATE function.\", \"args\":[], \"measure\":\"{measureName}\"}",
	DYNAMIC_TIME_MEASURE_INVALID_WEEK_ACROSS_YEAR_SINGLE_VALUE_FILTER:"{\"msg\":\"Dynamic time calculation does not support single value filter that selects a week which spans two years.\", \"args\":[], \"measure\":\"{measureName}\"}",
	DYNAMIC_TIME_MEASURE_NOT_SUPPORTED:"{\"msg\":\"Dynamic time measure is not supported.\", \"args\":[], \"measure\":\"{measureName}\"}",
	DYNAMIC_TIME_MEASURE_NO_TIME_IN_AXIS_OR_SINGLE_VALUE_FILTER:"{\"msg\":\"Add the {0} dimension to the widget or create a single value filter on {1} for {2} to appear.\", \"args\":[\"{0}\",\"{1}\",\"{2}\"], \"measure\":\"{measureName}\", \"timeDimensionName\": \"{timeDimensionName}\"}",
	DYNAMIC_TIME_MEASURE_OUT_OF_BOUND_MEMBER_NAVIGATION_WITH_FLAT_FILTER:"{\"msg\":\"Time calculations do not include values outside of the data filter on the {0} dimension.\", \"args\":[\"{0}\"], \"measure\":\"{measureName}\", \"timeDimensionName\":\"{timeDimensionName}\"}",
	FILTER_ACROSS_MODEL_BLEND_CALC_MEASURE_CONTEXT_IGNORED:"Measure context for the following blended calculations are not respected due to filtering across models",
	FILTER_ACROSS_MODEL_COMPOUND_PART_KEYS_NON_MATCHING:"Some source filters could not be propagated because dimensions with compound keys cannot be linked if their compound keys do not have the same number of key columns.",
	FILTER_ACROSS_MODEL_DEPENDENT_QUERY_FAILED:"dependent lov query for filter across models failed",
	FILTER_ACROSS_MODEL_EMPTY_TARGET_FILTER:"{\"msg\":\"The target transient filter is empty.\", \"args\":[]}",
	FILTER_ACROSS_MODEL_FTD_RANGE_FILTER_DIRECT_INCOMPATIBLE_HIERARCHY:"some flexible time range filters cannot be propagated direct due to the absence of a compatible hierarchy on the target",
	FILTER_ACROSS_MODEL_INCOMPLETE_RESULT_WARNING:"{\"msg\":\"Dependent lov query contains more than 10,000 members.\", \"args\":[\"{0}\"]}",
	FILTER_ACROSS_MODEL_INCOMPLETE_TARGET_RESULT_WARNING:"{\"msg\":\"Hierarchy validation query contains more than 10,000 members.\", \"args\":[\"{0}\"]}",
	FILTER_ACROSS_MODEL_INVALID_DIMENSION_HIERARCHY:"{\"msg\":\"filter across models contains an invalid dimension or hierarchy.\", \"args\":[]}",
	FILTER_ACROSS_MODEL_INVALID_LINK_DISPLAY_ATTRIBUTE:"Filter across models does not support links on display attributes",
	FILTER_ACROSS_MODEL_INVALID_MODEL_LINK:"Filters couldn't be propagated across models due to an invalid model link. Please see \"Link Dimensions\" for more details.",
	FILTER_ACROSS_MODEL_LINKED_CONTEXT_UNSUPPORTED:"Linked Context doesn't support Filtering Across Models!",
	FILTER_ACROSS_MODEL_LINK_COMPOUND_FLAT_AND_HIERARCHY:"Some source filters could not be propagated because dimensions with compound keys cannot be linked if one dimension has no hierarchies and the other dimension has hierarchies.",
	FILTER_ACROSS_MODEL_LINK_COMPOUND_INTERNAL_AND_EXTERNAL_HIERARCHY:"Some source filters could not be propagated because dimensions with compound keys cannot be linked if one dimension has external hierarchies and the other dimension has regular hierarchies.",
	FILTER_ACROSS_MODEL_LINK_COMPOUND_KEY_VALUE_TYPE_MISMATCH:"Some source filters could not be propagated because dimensions with compound keys cannot be linked if the data type of their key columns do not match.",
	FILTER_ACROSS_MODEL_LINK_COMPOUND_NON_COMPOUND:"Some source filters could not be propagated because dimensions with compound keys cannot be linked to dimensions without compound keys.",
	FILTER_ACROSS_MODEL_LOV_BASED_FAILED:"lov based filter across model transient filter generation failed",
	FILTER_ACROSS_MODEL_LOV_INVALID_DRILL_LEVEL_REST_NODE_DOES_NOT_EXIST:"{\"msg\":\"Source filters could not be propagated because one or more of the following dimension hierarchies do not have a rest node: {0}. Please check the hierarchy definitions and update them as necessary.\", \"args\":[\"{0}\"]}",
	FILTER_ACROSS_MODEL_LOV_MISSING:"LOV data is missing for LOV based filter across models",
	FILTER_ACROSS_MODEL_TARGET_MISSING_COMPLEX_FILTER_CAPABILITY:"Source filters couldn't be propagated because the target model is on a system which doesn't support complex filters.",
	FILTER_ACROSS_MODEL_TARGET_MISSING_EXCLUDE_FILTER_CAPABILITY:"Some source filters couldn't be propagated because a target linked dimension doesn't support exclude filters.",
	FILTER_ACROSS_MODEL_TARGET_RANGE_FILTER_MISSING_RANGE_FILTER_CAPABILITY:"Some source filters couldn't be propagated because the target linked dimension doesn't support range filters.",
	FILTER_ACROSS_MODEL_TARGET_TIME_HIERARCHY:"{\"msg\":\"Cannot find a compatible target time hierarchy.\", \"args\":[]}",
	FORMULA_EXCEPTION_INVALID_DISPLAY_MEASURE:"{\"msg\":\"Invalid display measure\", \"args\":[]}",
	FORMULA_MEASURE_MISSING_REQUIRED_DIMENSION:"{\"msg\":\"{0} has the following required dimensions: {1}.\", \"args\":[\"{0}\",\"{1}\"], \"measure\":\"{measureName}\"}",
	FREE_PLACEHOLDER_NOT_FOUND:"{\"msg\":\"The query has exceeded the maximum number of calculations allowed.\", \"args\":[]}",
	LINKED_HIERARCHY_DIMENSION_ALL_DATA:"A widget with an active linked hierarchy dimension cannot set its link type to \"All data\".",
	LINK_DIMENSION_NOT_IN_DRILL:"{\"msg\":\"No link dimension found in drill.\", \"args\":[\"{0}\"]}",
	MAXIMUM_NUMBER_OF_CURRENCY_TRANSLATIONS_EXCEEDED:"{\"msg\":\"Maximum number of {0} currency translations exceeded when trying to add measure {1}.\", \"args\":[\"{0}\",\"{1}\"], \"measure\":\"{measureName}\"}",
	MEASURE_CONTEXT_RELEASED:"{\"msg\":\"Shared measure context has been released.\", \"args\":[\"{0}\"]}, \"measure\":\"{measureName}\"}",
	MEASURE_CYCLICAL_DEPENDENCY:"{\"msg\":\"A cyclical dependency was found in the measure.\", \"args\":[]}",
	MEASURE_CYCLICAL_DEPENDENCY_2:"A cyclical dependency was found in the measure",
	MEASURE_INVALID_DEPENDENCY:"{\"msg\":\"{0} is invalid because it depends on invalid calculation {1}.\", \"args\":[\"{0}\",\"{1}\"], \"measure\":\"{measureName}\"}",
	MEASURE_MISSING_DEPENDENT:"{\"msg\":\"This measure is invalid because it depends on missing measure\", \"args\":[\"{0}\"], \"measure\":\"{measureName}\"}",
	MEASURE_MISSING_REQUIRED_FIELD:"{\"msg\":\"{0} has the following required fields: {1}.\", \"args\":[\"{0}\",\"{1}\"], \"measure\":\"{measureName}\"}",
	NO_DIMENSION_LINKS:"{\"msg\":\"No link dimensions found.\", \"args\":[]}",
	QUERYMODEL_NOT_IN_USE:"{\"msg\":\"Query model not in use.\", \"args\":[\"{0}\"]}",
	SECONDARY_LINK_DIMENSION_IN_DRILL:"{\"msg\":\"link dimension is found in secondary model.\", \"args\":[\"{0}\"]}",
	TIME_RANGE_FILTER_INVALID_DIMENSION_HIERARCHY:"{\"msg\":\"time range filter contains an invalid dimension or hierarchy.\", \"args\":[]}",
	TIME_RANGE_FILTER_INVALID_HIERARCHY_LEVEL:"{\"msg\":\"time range filter uses an invalid hierarchy level.\", \"args\":[\"{0}\"]}",
	VERSION_INVALID_NO_VERSION_IN_AXIS_OR_SINGLE_VALUE_FILTER:"{\"msg\":\"Add the {0} dimension to the widget or create a single value filter on it.\", \"args\":[\"{0}\"], \"datasetId\":\"{1}\"}",
	VIRTUAL_VERSION_INVALID_NO_VERSION_IN_AXIS_OR_SINGLE_VALUE_FILTER:"{\"msg\":\"Missing single value filter on virtual version dimension {0}.\", \"args\":[\"{0}\"], \"datasetId\":\"{1}\"}",
	getText:function(message, args, measureName, timeDimensionName)
	{
			let text = message;
		if (oFF.XStringUtils.isNotNullAndNotEmpty(measureName))
		{
			text = oFF.XString.replace(text, "{measureName}", measureName);
		}
		if (oFF.XStringUtils.isNotNullAndNotEmpty(timeDimensionName))
		{
			text = oFF.XString.replace(text, "{timeDimensionName}", timeDimensionName);
		}
		for (let i = 0; i < args.size(); i++)
		{
			text = oFF.XString.replace(text, oFF.XStringUtils.concatenate3("{", oFF.XInteger.convertToString(i), "}"), args.get(i));
		}
		return text;
	}
};

oFF.BlendableCustomSortMember = function() {};
oFF.BlendableCustomSortMember.prototype = new oFF.XObject();
oFF.BlendableCustomSortMember.prototype._ff_c = "BlendableCustomSortMember";

oFF.BlendableCustomSortMember.create = function(name, datasetId)
{
	let customSortMember = new oFF.BlendableCustomSortMember();
	customSortMember.m_name = name;
	customSortMember.m_datasetId = datasetId;
	return customSortMember;
};
oFF.BlendableCustomSortMember.prototype.m_datasetId = null;
oFF.BlendableCustomSortMember.prototype.m_name = null;
oFF.BlendableCustomSortMember.prototype.cloneExt = function(flags)
{
	let copyBlendableCustomSortMember = new oFF.BlendableCustomSortMember();
	copyBlendableCustomSortMember.copyFrom(this, null);
	return copyBlendableCustomSortMember;
};
oFF.BlendableCustomSortMember.prototype.copyFrom = function(other, flags)
{
	oFF.XObject.prototype.copyFrom.call( this , other, flags);
	let copyBlendableCustomSortMember = other;
	this.m_name = copyBlendableCustomSortMember.getName();
	this.m_datasetId = copyBlendableCustomSortMember.getDatasetId();
};
oFF.BlendableCustomSortMember.prototype.getDatasetId = function()
{
	return this.m_datasetId;
};
oFF.BlendableCustomSortMember.prototype.getName = function()
{
	return this.m_name;
};
oFF.BlendableCustomSortMember.prototype.releaseObject = function()
{
	this.m_name = null;
	this.m_datasetId = null;
};

oFF.BlendableMeasureSortRelatedElement = function() {};
oFF.BlendableMeasureSortRelatedElement.prototype = new oFF.XObject();
oFF.BlendableMeasureSortRelatedElement.prototype._ff_c = "BlendableMeasureSortRelatedElement";

oFF.BlendableMeasureSortRelatedElement.createBlendableRelatedElementsSort = function(datasetId, dimensionId, memberId)
{
	let blendableRelatedElementsSort = new oFF.BlendableMeasureSortRelatedElement();
	blendableRelatedElementsSort.m_datasetId = datasetId;
	blendableRelatedElementsSort.m_dimensionId = dimensionId;
	blendableRelatedElementsSort.m_memberId = memberId;
	return blendableRelatedElementsSort;
};
oFF.BlendableMeasureSortRelatedElement.prototype.m_datasetId = null;
oFF.BlendableMeasureSortRelatedElement.prototype.m_dimensionId = null;
oFF.BlendableMeasureSortRelatedElement.prototype.m_memberId = null;
oFF.BlendableMeasureSortRelatedElement.prototype.cloneExt = function(flags)
{
	return oFF.BlendableMeasureSortRelatedElement.createBlendableRelatedElementsSort(this.getDatasetId(), this.getDimensionId(), this.getMemberId());
};
oFF.BlendableMeasureSortRelatedElement.prototype.copyFrom = function(other, flags)
{
	oFF.XObject.prototype.copyFrom.call( this , other, flags);
	let otherBlendableRelatedElementsSort = other;
	this.m_datasetId = otherBlendableRelatedElementsSort.getDatasetId();
	this.m_dimensionId = otherBlendableRelatedElementsSort.getDimensionId();
	this.m_memberId = otherBlendableRelatedElementsSort.getMemberId();
};
oFF.BlendableMeasureSortRelatedElement.prototype.getDatasetId = function()
{
	return this.m_datasetId;
};
oFF.BlendableMeasureSortRelatedElement.prototype.getDimensionId = function()
{
	return this.m_dimensionId;
};
oFF.BlendableMeasureSortRelatedElement.prototype.getMemberId = function()
{
	return this.m_memberId;
};
oFF.BlendableMeasureSortRelatedElement.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_datasetId = null;
	this.m_dimensionId = null;
	this.m_memberId = null;
};

oFF.BlendingUtils = {

	CUSTOM_DIMENSION1:"CustomDimension1",
	CUSTOM_DIMENSION1_DISPLAY_KEY_ATTRIBUTE_NAME:"[Measures].[Name]",
	_getAliasPrefixFromQueryModel:function(sourceQueryModel, targetQueryModel, aliasPrefix)
	{
			if (sourceQueryModel.isBlendingModel())
		{
			let blendingSources = sourceQueryModel.getBlendingSources();
			for (let i = 0; i < blendingSources.size(); i++)
			{
				let blendingSource = blendingSources.get(i);
				let childQueryModel = blendingSource.getQueryModel();
				let newAliasPrefix = oFF.XStringUtils.concatenate3(aliasPrefix, oFF.BlendingUtils.getQueryAliasName(childQueryModel.getQueryManager()), ".");
				let completeAliasPrefix = oFF.BlendingUtils._getAliasPrefixFromQueryModel(childQueryModel, targetQueryModel, newAliasPrefix);
				if (oFF.notNull(completeAliasPrefix))
				{
					return completeAliasPrefix;
				}
			}
		}
		else
		{
			let datasetId = sourceQueryModel.getDatasetId();
			let targetDatasetId = targetQueryModel.getDatasetId();
			if (oFF.XString.isEqual(datasetId, targetDatasetId))
			{
				return aliasPrefix;
			}
		}
		return null;
	},
	_getBlendedFieldFromLeafField:function(fieldName, targetQueryModel, topBlendedQueryModel, queryModel, aliasPrefix)
	{
			if (queryModel.isBlendingModel())
		{
			let blendingSources = queryModel.getBlendingSources();
			if (blendingSources.size() === 2)
			{
				let childQueryModel = blendingSources.get(0).getQueryModel();
				let newAliasPrefix = oFF.XStringUtils.concatenate3(aliasPrefix, oFF.BlendingUtils.getQueryAliasName(targetQueryModel.getQueryManager()), ".");
				let blendedField = topBlendedQueryModel.getFieldByName(oFF.XStringUtils.concatenate2(newAliasPrefix, fieldName));
				if (oFF.notNull(blendedField))
				{
					return blendedField;
				}
				newAliasPrefix = oFF.XStringUtils.concatenate3(aliasPrefix, oFF.BlendingUtils.getQueryAliasName(childQueryModel.getQueryManager()), ".");
				blendedField = topBlendedQueryModel.getFieldByName(oFF.XStringUtils.concatenate2(newAliasPrefix, fieldName));
				if (oFF.notNull(blendedField))
				{
					return blendedField;
				}
				return oFF.BlendingUtils._getBlendedFieldFromLeafField(fieldName, targetQueryModel, topBlendedQueryModel, childQueryModel, newAliasPrefix);
			}
		}
		return null;
	},
	_getBlendedFieldFromLeafFieldWithLeafQueryModel:function(fieldName, leafQueryModel, blendedQueryModel)
	{
			let blendedField = null;
		blendedField = oFF.BlendingUtils._getOverdefinedField(fieldName, leafQueryModel, blendedQueryModel);
		if (oFF.notNull(blendedField))
		{
			return blendedField;
		}
		let aliasPrefix = oFF.BlendingUtils.getLeafQueryAliasPrefix(leafQueryModel.getDatasetId(), blendedQueryModel);
		blendedField = blendedQueryModel.getFieldByName(oFF.XStringUtils.concatenate2(aliasPrefix, fieldName));
		if (oFF.notNull(blendedField))
		{
			return blendedField;
		}
		blendedField = oFF.BlendingUtils._getBlendedFieldFromLeafField(fieldName, leafQueryModel, blendedQueryModel, blendedQueryModel, "");
		if (oFF.notNull(blendedField))
		{
			return blendedField;
		}
		if (blendedQueryModel.getSession().hasFeature(oFF.FeatureToggleOlap.BLENDABLE_QUERY_ALIAS_PREFIXING) && oFF.XString.startsWith(fieldName, "[") && oFF.XString.containsString(fieldName, "]."))
		{
			blendedField = blendedQueryModel.getFieldByName(oFF.XStringUtils.concatenate3("[", aliasPrefix, oFF.XString.substring(fieldName, 1, -1)));
		}
		if (oFF.notNull(blendedField))
		{
			return blendedField;
		}
		blendedField = blendedQueryModel.getFieldByName(fieldName);
		return blendedField;
	},
	_getOverdefinedField:function(fieldName, leafQueryModel, blendedQueryModel)
	{
			let blendedField = null;
		let blendedDimension = null;
		let leafField = leafQueryModel.getFieldByName(fieldName);
		if (oFF.notNull(leafField))
		{
			let leafDimension = leafField.getDimension();
			if (leafQueryModel.getConvenienceCommands().isTypeOfBw())
			{
				if (leafDimension.getDimensionType() === oFF.DimensionType.MEASURE_STRUCTURE)
				{
					blendedDimension = oFF.BlendingUtils.getBlendedDimensionFromLeafDimension(leafDimension.getName(), leafDimension.getQueryModel().getDatasetId(), blendedQueryModel);
					if (oFF.notNull(blendedDimension))
					{
						let leafFieldPresentationtype = leafField.getPresentationType();
						if (leafFieldPresentationtype === oFF.PresentationType.DISPLAY_KEY)
						{
							blendedField = oFF.BlendingUtils.getDisplayKeyFieldWithFallBack(blendedDimension);
						}
						else
						{
							blendedField = blendedDimension.getFieldContainer().getFieldByPresentationType(leafFieldPresentationtype);
							if (oFF.isNull(blendedField) && leafFieldPresentationtype.isTypeOf(oFF.PresentationType.TEXT))
							{
								blendedField = blendedDimension.getFieldContainer().getFieldByPresentationType(oFF.PresentationType.TEXT);
							}
						}
					}
				}
				else if (leafField.getPresentationType() === oFF.PresentationType.DISPLAY_KEY)
				{
					blendedDimension = oFF.BlendingUtils.getBlendedDimensionFromLeafDimension(leafDimension.getName(), leafDimension.getQueryModel().getDatasetId(), blendedQueryModel);
					blendedField = oFF.BlendingUtils.getDisplayKeyFieldWithFallBack(blendedDimension);
					if (oFF.notNull(blendedField))
					{
						let blendedAttributeName = blendedField.getAttribute().getName();
						if (oFF.XString.endsWith(blendedAttributeName, "].name"))
						{
							let preOverdefinedAttributeName = oFF.XStringUtils.stripRight(oFF.XStringUtils.stripStart(blendedAttributeName, "["), oFF.XString.size("].name"));
							if (!oFF.XString.isEqual(preOverdefinedAttributeName, leafField.getAttribute().getName()))
							{
								blendedField = null;
							}
						}
						else if (!oFF.XString.isEqual(blendedAttributeName, leafField.getAttribute().getName()))
						{
							blendedField = null;
						}
					}
				}
			}
			else if (oFF.XString.isEqual(leafField.getName(), oFF.BlendingUtils.CUSTOM_DIMENSION1_DISPLAY_KEY_ATTRIBUTE_NAME))
			{
				blendedDimension = oFF.BlendingUtils.getBlendedDimensionFromLeafDimension(leafDimension.getName(), leafDimension.getQueryModel().getDatasetId(), blendedQueryModel);
				blendedField = oFF.BlendingUtils.getDisplayKeyFieldWithFallBack(blendedDimension);
			}
		}
		return blendedField;
	},
	activateBlendedDimensionHierarchies:function(blendedQueryManager, linkedTimeDimensionNames, blendingProcess, isIntermediateNode)
	{
			let blendedQueryModel = blendedQueryManager.getQueryModel();
		let dimensionsInDrill = oFF.XList.create();
		dimensionsInDrill.addAll(blendedQueryModel.getColumnsAxis());
		dimensionsInDrill.addAll(blendedQueryModel.getRowsAxis());
		let leafQueryModels = oFF.BlendingUtils.getLeafQueryModels(blendedQueryManager);
		oFF.XCollectionUtils.forEach(leafQueryModels, (leafQueryModel) => {
			leafQueryModel.stopEventing();
		});
		let blendableQueryManager = blendingProcess.getBlendableQueryManager();
		for (let i = 0; i < dimensionsInDrill.size(); i++)
		{
			let dimensionInDrill = dimensionsInDrill.get(i);
			let leafDimension = oFF.BlendingUtils.findLeafDimensionFromBlendedDimension(leafQueryModels, dimensionInDrill);
			if (oFF.isNull(leafDimension))
			{
				continue;
			}
			if (dimensionInDrill.supportsHierarchy())
			{
				oFF.BlendingUtils.setHierarchyNameAndActivate(dimensionInDrill);
				if ((dimensionInDrill.getDimensionType() !== oFF.DimensionType.ACCOUNT || blendableQueryManager.supportsDrillOnBlendNodeOnly()) && leafDimension.isHierarchyActive())
				{
					dimensionInDrill.setHierarchyName(leafDimension.getHierarchyName());
					if (blendableQueryManager.supportsDrillOnBlendNodeOnly())
					{
						let initialDrillLevel = leafDimension.getTagging().containsKey("transientInitialDrillLevel") ? oFF.XInteger.convertFromString(leafDimension.getTagging().getByKey("transientInitialDrillLevel")) : leafDimension.getInitialDrillLevel();
						dimensionInDrill.setInitialDrillLevel(initialDrillLevel);
					}
					else
					{
						dimensionInDrill.setInitialDrillLevel(leafDimension.getQueryModel().getConvenienceCommands().isBw() && !isIntermediateNode ? 0 : -1);
					}
					dimensionInDrill.setInitialDrillOffset(leafDimension.getInitialDrillOffset());
					dimensionInDrill.setHierarchyActive(true);
					let hierarchyManager = dimensionInDrill.getHierarchyManager();
					hierarchyManager.setMaxDrillLevel(leafDimension.getMaxDrillLevel());
				}
			}
			let resultSetFields = dimensionInDrill.getResultSetFields();
			if (blendableQueryManager.isPreserveAttributeLayout())
			{
				let originalDimensionResultSetFields;
				let originalDimensionResultSetFieldsIter;
				let fieldLayoutType = dimensionInDrill.getFieldLayoutTypeExt(oFF.QContextType.RESULT_SET);
				if (fieldLayoutType === oFF.FieldLayoutType.ATTRIBUTE_BASED)
				{
					let originalDimensionResultSetAttributeFields = blendingProcess.getOriginalDimensionResultSetAttributeFields(leafDimension);
					if (oFF.notNull(originalDimensionResultSetAttributeFields))
					{
						let resultSetAttributeIter = dimensionInDrill.getResultSetAttributes().getIterator();
						while (resultSetAttributeIter.hasNext())
						{
							let resultSetAttribute = resultSetAttributeIter.next();
							originalDimensionResultSetFields = originalDimensionResultSetAttributeFields.getByKey(resultSetAttribute.getName());
							if (oFF.notNull(originalDimensionResultSetFields))
							{
								resultSetAttribute.getResultSetFields().clear();
								originalDimensionResultSetFieldsIter = originalDimensionResultSetFields.getIterator();
								while (originalDimensionResultSetFieldsIter.hasNext())
								{
									let originalDimensionResultSetAttributeFieldName = originalDimensionResultSetFieldsIter.next();
									let leafField = leafDimension.getFieldByName(originalDimensionResultSetAttributeFieldName);
									if (oFF.notNull(leafField))
									{
										let blendedField = oFF.BlendingUtils.getBlendedFieldFromLeafField(originalDimensionResultSetAttributeFieldName, leafDimension.getQueryModel().getDatasetId(), blendableQueryManager, blendedQueryModel);
										if (oFF.notNull(blendedField))
										{
											resultSetAttribute.getResultSetFields().add(blendedField);
										}
										else if (leafField.getPresentationType() === oFF.PresentationType.QUERY_TEXT)
										{
											oFF.BlendingUtils.addDefaultTextToResultSetFields(dimensionInDrill, leafDimension, blendableQueryManager, blendedQueryModel, true);
										}
									}
								}
							}
						}
					}
				}
				else if (fieldLayoutType === oFF.FieldLayoutType.FIELD_BASED)
				{
					resultSetFields.clear();
					originalDimensionResultSetFields = blendingProcess.getOriginalDimensionResultSetFields(leafDimension);
					if (oFF.notNull(originalDimensionResultSetFields))
					{
						originalDimensionResultSetFieldsIter = originalDimensionResultSetFields.getIterator();
						while (originalDimensionResultSetFieldsIter.hasNext())
						{
							let originalDimensionResultSetFieldName = originalDimensionResultSetFieldsIter.next();
							let leafField = leafDimension.getFieldByName(originalDimensionResultSetFieldName);
							if (oFF.notNull(leafField) && (leafDimension.getDimensionType() !== oFF.DimensionType.ACCOUNT || leafField.getPresentationType() !== oFF.PresentationType.HIERARCHY_PATH))
							{
								let blendedField = oFF.BlendingUtils.getBlendedFieldFromLeafField(originalDimensionResultSetFieldName, leafDimension.getQueryModel().getDatasetId(), blendableQueryManager, blendedQueryModel);
								if (oFF.notNull(blendedField))
								{
									resultSetFields.add(blendedField);
								}
								else if (leafField.getPresentationType() === oFF.PresentationType.QUERY_TEXT)
								{
									oFF.BlendingUtils.addDefaultTextToResultSetFields(dimensionInDrill, leafDimension, blendableQueryManager, blendedQueryModel, false);
								}
							}
						}
					}
				}
			}
			else if (dimensionInDrill.getDimensionType() !== oFF.DimensionType.ACCOUNT)
			{
				let isLinkedTimeDimension = oFF.notNull(linkedTimeDimensionNames) && linkedTimeDimensionNames.contains(dimensionInDrill.getName());
				if (isLinkedTimeDimension)
				{
					resultSetFields.clear();
				}
				if (leafDimension.isHierarchyActive())
				{
					if (oFF.HierarchyPathUtil.getPathField(blendedQueryModel, dimensionInDrill.getName()) !== null)
					{
						oFF.HierarchyPathUtil.addPathFieldToResultSet(blendedQueryModel, dimensionInDrill.getName(), false);
						oFF.HierarchyPathUtil.addPathFieldToResultSet(leafDimension.getQueryModel(), leafDimension.getName(), false);
					}
					if (!isLinkedTimeDimension)
					{
						let hierarchyDisplayKeyField = dimensionInDrill.getHierarchyDisplayKeyField();
						if (oFF.notNull(hierarchyDisplayKeyField) && resultSetFields.getFieldByName(hierarchyDisplayKeyField.getName()) === null)
						{
							resultSetFields.add(hierarchyDisplayKeyField);
						}
					}
				}
				if (isLinkedTimeDimension)
				{
					resultSetFields.add(dimensionInDrill.getKeyField());
					resultSetFields.add(dimensionInDrill.getTextField());
				}
			}
		}
		oFF.XCollectionUtils.forEach(leafQueryModels, (leafQueryModel) => {
			leafQueryModel.resumeEventing();
		});
	},
	addDefaultTextToResultSetFields:function(blendedDimension, leafDimension, blendableQueryManager, blendedQueryModel, isAttributeBased)
	{
			if (leafDimension.getTagging().containsKey(oFF.QTransientConstants.TAG_REPLACE_QUERY_TEXT_WITH_DEFAULT_TEXT))
		{
			let defaultTextField = leafDimension.getDefaultResultSetTextField();
			if (oFF.notNull(defaultTextField))
			{
				let blendedDefaultTextField = oFF.BlendingUtils.getBlendedFieldFromLeafField(defaultTextField.getName(), leafDimension.getQueryModel().getDatasetId(), blendableQueryManager, blendedQueryModel);
				if (oFF.notNull(blendedDefaultTextField))
				{
					if (isAttributeBased)
					{
						if (!blendedDimension.getMainAttribute().getResultSetFields().contains(blendedDefaultTextField))
						{
							blendedDimension.getMainAttribute().getResultSetFields().add(blendedDefaultTextField);
						}
					}
					else
					{
						if (!blendedDimension.getResultSetFields().contains(blendedDefaultTextField))
						{
							blendedDimension.getResultSetFields().add(blendedDefaultTextField);
						}
					}
				}
			}
		}
	},
	addDisplayKeyToResultSetFields:function(leafDimension, blendedQueryModel, blendedDimension)
	{
			let blendedDisplayKeyField = null;
		let flatDisplayKeyField = leafDimension.getFlatDisplayKeyField();
		if (oFF.notNull(flatDisplayKeyField))
		{
			blendedDisplayKeyField = oFF.BlendingUtils._getBlendedFieldFromLeafFieldWithLeafQueryModel(flatDisplayKeyField.getName(), leafDimension.getQueryModel(), blendedQueryModel);
		}
		if (oFF.isNull(blendedDisplayKeyField))
		{
			let mixedDisplayKeyField = leafDimension.getMixedDisplayKeyField();
			if (oFF.notNull(mixedDisplayKeyField))
			{
				blendedDisplayKeyField = oFF.BlendingUtils._getBlendedFieldFromLeafFieldWithLeafQueryModel(mixedDisplayKeyField.getName(), leafDimension.getQueryModel(), blendedQueryModel);
			}
		}
		if (oFF.notNull(blendedDisplayKeyField))
		{
			blendedDimension.getResultSetFields().add(blendedDisplayKeyField);
		}
	},
	addTextToResultSetFields:function(leafDimension, blendedQueryModel, blendedDimension)
	{
			let blendedResultSetFields = blendedDimension.getResultSetFields();
		let leafResultSetFieldsIterator = leafDimension.getResultSetFields().getIterator();
		while (leafResultSetFieldsIterator.hasNext())
		{
			let leafField = leafResultSetFieldsIterator.next();
			if (leafField.getPresentationType().isTypeOf(oFF.PresentationType.TEXT))
			{
				let blendedField = oFF.BlendingUtils._getBlendedFieldFromLeafFieldWithLeafQueryModel(leafField.getName(), leafDimension.getQueryModel(), blendedQueryModel);
				if (oFF.notNull(blendedField) && !blendedResultSetFields.contains(blendedField))
				{
					blendedResultSetFields.add(blendedField);
				}
			}
		}
	},
	collectLeafBlendingSources:function(blendingDefinition, blendingSources)
	{
			oFF.XCollectionUtils.forEach(blendingDefinition.getSources(), (source) => {
			if (source.getQueryManager().getInitSettings().getMode() === oFF.QueryManagerMode.BLENDING)
			{
				oFF.BlendingUtils.collectLeafBlendingSources(source.getQueryModel().getDataSource().getBlendingDefinition(), blendingSources);
			}
			else
			{
				blendingSources.add(source);
			}
		});
	},
	containsFilterAcrossModels:function(blendableQueryManager)
	{
			return oFF.XCollectionUtils.contains(blendableQueryManager.getAllQueryManagers(), (queryManager) => {
			let filterAcrossModels = oFF.QFilterUtil.collectFilterAcrossModels(queryManager.getQueryModel());
			return filterAcrossModels.size() > 0;
		});
	},
	convertToBlendedFormula:function(formulaItem, parentMeasure)
	{
			let newFormulaItem = null;
		let aliasPrefixName;
		if (formulaItem.getOlapComponentType() === oFF.OlapComponentType.FORMULA_ITEM_ATTRIBUTE)
		{
			let formulaItemAttribute = formulaItem;
			let newFormulaItemAttribute = formulaItemAttribute.cloneOlapComponent(parentMeasure.getQueryModel(), parentMeasure);
			aliasPrefixName = oFF.BlendingUtils.getQueryAliasName(parentMeasure.getQueryManager());
			newFormulaItemAttribute.setFieldByName(oFF.XStringUtils.concatenate3(aliasPrefixName, ".", formulaItemAttribute.getFieldName()));
			newFormulaItem = newFormulaItemAttribute;
		}
		else if (formulaItem.getOlapComponentType() === oFF.OlapComponentType.FORMULA_ITEM_MEMBER)
		{
			let formulaItemMember = formulaItem;
			let newFormulaItemMember = formulaItemMember.cloneOlapComponent(parentMeasure.getQueryModel(), parentMeasure);
			let dimensionContext = formulaItemMember.getDimensionContext();
			let structureMember;
			if (oFF.notNull(dimensionContext))
			{
				structureMember = dimensionContext.getStructureMember(formulaItemMember.getMemberName());
				if (oFF.isNull(structureMember))
				{
					structureMember = dimensionContext.getOlapEnv().getClientQueryObjectManager().getStructuredMember(formulaItemMember.getMemberName(), parentMeasure.getQueryManager().getClientQueryObjectStorageName(), true);
				}
				if (oFF.notNull(structureMember))
				{
					let blendedMember = oFF.BlendingUtils.getMatchingBlendedMemberFromLeafMember(parentMeasure.getQueryModel(), structureMember);
					newFormulaItemMember.setMemberName(blendedMember.getName());
					if (formulaItemMember.getDimensionName() !== null)
					{
						newFormulaItemMember.setDimensionName(blendedMember.getDimension().getName());
					}
				}
			}
			else
			{
				structureMember = parentMeasure.getDimension().getStructureMember(formulaItemMember.getMemberName());
				newFormulaItemMember.setMemberName(formulaItemMember.getMemberName());
			}
			newFormulaItem = newFormulaItemMember;
		}
		else if (formulaItem.getOlapComponentType() === oFF.OlapComponentType.FORMULA_FUNCTION)
		{
			let formulaFunction = formulaItem;
			newFormulaItem = oFF.QFactory.createFormulaFunctionWithName(parentMeasure, formulaFunction.getFunctionName());
			for (let i = 0; i < formulaFunction.size(); i++)
			{
				newFormulaItem.add(oFF.BlendingUtils.convertToBlendedFormula(formulaFunction.get(i), parentMeasure));
			}
		}
		else if (formulaItem.getOlapComponentType() === oFF.OlapComponentType.FORMULA_CONSTANT)
		{
			newFormulaItem = formulaItem.cloneOlapComponent(parentMeasure.getQueryModel(), parentMeasure);
		}
		return newFormulaItem;
	},
	createOverDefinedDisplayKeyAttributeName:function(dimension)
	{
			return oFF.XStringUtils.concatenate3("[", dimension.getName(), "].name");
	},
	doesLinkPartMatchDatasetAndDimension:function(dimensionLinkPart, datasetId, dimensionName)
	{
			return oFF.XString.isEqual(datasetId, dimensionLinkPart.getQueryModel().getDatasetId()) && oFF.XString.isEqual(dimensionName, dimensionLinkPart.getDimensionName());
	},
	findContextDimensionFromDrillDimension:function(queryManager, dimensionName, datasetId)
	{
			let operationLeafQueryModel = oFF.BlendingUtils.getQueryModelFromDatasetId(queryManager, datasetId);
		let aliasPrefix = oFF.BlendingUtils.getLeafQueryAliasPrefix(datasetId, queryManager.getQueryModel());
		let dimension = queryManager.getQueryModel().getDimensionByName(oFF.XStringUtils.concatenate2(aliasPrefix, dimensionName));
		if (oFF.isNull(dimension))
		{
			dimension = queryManager.getQueryModel().getDimensionByName(dimensionName);
		}
		if (oFF.isNull(dimension))
		{
			let operationDimension = operationLeafQueryModel.getDimensionByName(dimensionName);
			if (operationDimension === operationLeafQueryModel.getPrimaryCalculationDimension())
			{
				dimension = queryManager.getQueryModel().getPrimaryCalculationDimension();
			}
			else if (operationDimension === operationLeafQueryModel.getSecondaryCalculationDimension())
			{
				dimension = queryManager.getQueryModel().getSecondaryCalculationDimension();
			}
		}
		return dimension;
	},
	findLeafDimensionFromBlendedDimension:function(leafQueryModels, dimension)
	{
			return oFF.BlendingBaseUtils.findLeafDimensionFromBlendedDimension(leafQueryModels, dimension);
	},
	getAliasPrefixFromQueryModel:function(sourceQueryModel, targetQueryModel)
	{
			return oFF.BlendingUtils._getAliasPrefixFromQueryModel(sourceQueryModel, targetQueryModel, "");
	},
	getBlendedDimensionFromLeafDimension:function(dimensionName, datasetId, blendedQueryModel)
	{
			let dimensionNameWithAliasPrefix = oFF.BlendingUtils.getDimensionNameWithQueryAliasPrefix(dimensionName, datasetId, blendedQueryModel);
		let blendedDimension = blendedQueryModel.getDimensionByName(dimensionNameWithAliasPrefix);
		if (oFF.isNull(blendedDimension))
		{
			blendedDimension = blendedQueryModel.getDimensionByName(dimensionName);
			if (oFF.isNull(blendedDimension))
			{
				let leafQueryModels = oFF.BlendingUtils.getLeafQueryModels(blendedQueryModel.getQueryManager());
				let queryModel = oFF.XCollectionUtils.findFirst(leafQueryModels, (leafQueryModel) => {
					return oFF.XString.isEqual(leafQueryModel.getDatasetId(), datasetId);
				});
				let leafDimension = queryModel.getDimensionByName(dimensionName);
				if (oFF.notNull(leafDimension) && leafDimension === leafDimension.getQueryModel().getPrimaryCalculationDimension())
				{
					blendedDimension = blendedQueryModel.getPrimaryCalculationDimension();
				}
			}
		}
		return blendedDimension;
	},
	getBlendedFieldFromLeafField:function(fieldName, datasetId, blendableQueryManager, blendedQueryModel)
	{
			let leafQueryManager = blendableQueryManager.getQueryManagerByDatasetId(datasetId);
		let leafQueryModel = leafQueryManager.getQueryModel();
		return oFF.BlendingUtils._getBlendedFieldFromLeafFieldWithLeafQueryModel(fieldName, leafQueryModel, blendedQueryModel);
	},
	getBlendedMeasureMemberFromLeafMeasureMember:function(measureMemberName, isPrimaryMeasure, datasetId, blendableQueryManager, blendedQueryModel)
	{
			let structureMember = null;
		let leafQueryManager = blendableQueryManager.getQueryManagerByDatasetId(datasetId);
		let leafQueryModel = leafQueryManager.getQueryModel();
		let aliasPrefix = oFF.BlendingUtils.getAliasPrefixFromQueryModel(blendedQueryModel, leafQueryModel);
		let dimension = isPrimaryMeasure ? blendedQueryModel.getPrimaryCalculationDimension() : blendedQueryModel.getSecondaryCalculationDimension();
		if (oFF.notNull(dimension))
		{
			structureMember = dimension.getStructureMember(oFF.XStringUtils.concatenate2(aliasPrefix, measureMemberName));
			if (oFF.isNull(structureMember))
			{
				let leafDimension = isPrimaryMeasure ? leafQueryModel.getPrimaryCalculationDimension() : leafQueryModel.getSecondaryCalculationDimension();
				let leafStructureMember = leafDimension.getStructureMember(measureMemberName);
				if (oFF.notNull(leafStructureMember) && leafStructureMember.getAliasName() !== null)
				{
					let placeholderId = leafDimension.getRuntimePlaceholderIdByAlias(leafStructureMember.getAliasName());
					if (oFF.notNull(placeholderId))
					{
						structureMember = dimension.getStructureMember(oFF.XStringUtils.concatenate2(aliasPrefix, placeholderId));
					}
				}
			}
		}
		return structureMember;
	},
	getBlendedQueryModelByBlendDefinition:function(queryManager, blendingDefinition)
	{
			let foundQueryManager = null;
		if (oFF.notNull(queryManager) && queryManager.getInitSettings() !== null && queryManager.getInitSettings().getMode() === oFF.QueryManagerMode.BLENDING)
		{
			let runtimeBlendDefinition = queryManager.getInitSettings().getBlendingDefinition();
			let bContainsReleasedQueryModel = oFF.XCollectionUtils.contains(runtimeBlendDefinition.getSources(), (source) => {
				return source.getQueryModel().isReleased();
			});
			if (!bContainsReleasedQueryModel && runtimeBlendDefinition.isEqualTo(blendingDefinition) && !runtimeBlendDefinition.isRemoteBlending())
			{
				foundQueryManager = queryManager;
			}
			else if (!bContainsReleasedQueryModel && runtimeBlendDefinition.getMappings().isEqualTo(blendingDefinition.getMappings()) && runtimeBlendDefinition.isRemoteBlending())
			{
				let blendingHost = runtimeBlendDefinition.getBlendingHost();
				if (!oFF.XCollectionUtils.contains(runtimeBlendDefinition.getSources(), (source) => {
					return source.isRemoteSource() && !source.isRemoteQueryPersistenceIdentifierUpToDate(blendingHost);
				}))
				{
					foundQueryManager = queryManager;
				}
			}
			if (oFF.isNull(foundQueryManager))
			{
				let sourcesIter = runtimeBlendDefinition.getSources().getIterator();
				while (sourcesIter.hasNext())
				{
					foundQueryManager = oFF.BlendingUtils.getBlendedQueryModelByBlendDefinition(sourcesIter.next().getQueryManager(), blendingDefinition);
					if (oFF.notNull(foundQueryManager))
					{
						break;
					}
				}
			}
		}
		return foundQueryManager;
	},
	getDatasetIdsFromQueryModel:function(queryModel)
	{
			let datasetIds = oFF.XHashSetOfString.create();
		if (queryModel.isBlendingModel())
		{
			let blendingSources = queryModel.getBlendingSources();
			for (let i = 0; i < blendingSources.size(); i++)
			{
				let blendingSource = blendingSources.get(i);
				datasetIds.addAll(oFF.BlendingUtils.getDatasetIdsFromQueryModel(blendingSource.getQueryModel()));
			}
		}
		else
		{
			datasetIds.add(queryModel.getDatasetId());
		}
		return datasetIds;
	},
	getDimensionNameWithQueryAliasPrefix:function(dimensionName, datasetId, queryModel)
	{
			let leafQueryAliasPrefix = oFF.BlendingUtils.getLeafQueryAliasPrefix(datasetId, queryModel);
		if (oFF.notNull(leafQueryAliasPrefix))
		{
			return oFF.XStringUtils.concatenate2(leafQueryAliasPrefix, dimensionName);
		}
		return null;
	},
	getDisplayKeyFieldWithFallBack:function(dimension)
	{
			let displayKeyField = null;
		if (oFF.notNull(dimension))
		{
			displayKeyField = dimension.getDisplayKeyField();
			if (oFF.isNull(displayKeyField) || displayKeyField.getPresentationType() !== oFF.PresentationType.DISPLAY_KEY && displayKeyField.getPresentationType() !== oFF.PresentationType.HIERARCHY_DISPLAY_KEY)
			{
				displayKeyField = dimension.getFieldContainer().getFieldByPresentationType(oFF.PresentationType.DISPLAY_KEY);
				if (oFF.isNull(displayKeyField))
				{
					displayKeyField = dimension.getFieldContainer().getFieldByPresentationType(oFF.PresentationType.HIERARCHY_DISPLAY_KEY);
				}
				if (oFF.isNull(displayKeyField))
				{
					displayKeyField = dimension.getFieldByName(oFF.BlendingUtils.CUSTOM_DIMENSION1_DISPLAY_KEY_ATTRIBUTE_NAME);
				}
			}
		}
		return displayKeyField;
	},
	getFormulaItemDimensionContexts:function(structureMember)
	{
			return oFF.BlendingUtils.getFormulaItemDimensionContextsInternal(structureMember, oFF.XHashSetOfString.create());
	},
	getFormulaItemDimensionContextsInternal:function(structureMember, visitedMembers)
	{
			if (structureMember.isReleased() || structureMember.getMemberType() !== oFF.MemberType.FORMULA)
		{
			return oFF.XList.create();
		}
		let formulaMeasure = structureMember;
		let clientQueryObjectManager = formulaMeasure.getOlapEnv().getClientQueryObjectManager();
		let clientQueryObjectStorageName = formulaMeasure.getQueryManager().getClientQueryObjectStorageName();
		let dimensions = oFF.XList.create();
		let formulaItemMembers = oFF.FormulaItemUtils.getFormulaMembers(formulaMeasure.getFormula());
		let formulaItemMembersIter = formulaItemMembers.getIterator();
		while (formulaItemMembersIter.hasNext())
		{
			let formulaItemMember = formulaItemMembersIter.next();
			let formulaItemMemberNameWithDatasetId = formulaItemMember.getMemberName();
			let dimensionContext = formulaItemMember.getDimensionContext();
			if (oFF.notNull(dimensionContext) && oFF.XStringUtils.isNotNullAndNotEmpty(formulaItemMemberNameWithDatasetId))
			{
				formulaItemMemberNameWithDatasetId = oFF.XStringUtils.concatenate3(dimensionContext.getQueryModel().getDatasetId(), "~", formulaItemMemberNameWithDatasetId);
			}
			if (oFF.XStringUtils.isNullOrEmpty(formulaItemMemberNameWithDatasetId) || visitedMembers.contains(formulaItemMemberNameWithDatasetId))
			{
				continue;
			}
			else
			{
				visitedMembers.add(formulaItemMemberNameWithDatasetId);
			}
			if (oFF.isNull(dimensionContext))
			{
				let nestedStructureMember = clientQueryObjectManager.getStructuredMember(formulaItemMember.getMemberName(), clientQueryObjectStorageName, true);
				if (oFF.notNull(nestedStructureMember))
				{
					let nestedDimensionContexts = oFF.BlendingUtils.getFormulaItemDimensionContextsInternal(nestedStructureMember, visitedMembers);
					oFF.XCollectionUtils.addAllIfNotPresent(dimensions, nestedDimensionContexts);
				}
			}
			else
			{
				oFF.XCollectionUtils.addIfNotPresent(dimensions, dimensionContext);
			}
		}
		return dimensions;
	},
	getHierarchiesFromSharedQueryManager:function(olapEnv, dimension)
	{
			let result = oFF.XList.create();
		let sharedQueryManagerHierarchyManager = oFF.BlendingUtils.getHierarchyManagerFromSharedQueryManager(olapEnv, dimension);
		let hierarchyCatalogResult = oFF.notNull(sharedQueryManagerHierarchyManager) ? sharedQueryManagerHierarchyManager.getHierarchies() : null;
		if (oFF.notNull(hierarchyCatalogResult))
		{
			result.addAll(hierarchyCatalogResult.getObjects());
		}
		let customHierarchyRepo = olapEnv.getCustomHierarchyRepository();
		if (oFF.notNull(customHierarchyRepo))
		{
			result.addAll(customHierarchyRepo.getCustomHierarchyCatalogItems(dimension, null));
		}
		return result;
	},
	getHierarchyManagerFromSharedQueryManager:function(olapEnv, dimension)
	{
			let sharedQueryManagerDimension = null;
		let sharedQueryManager = oFF.BlendingUtils.getSharedQueryManagerByDatasetId(olapEnv, dimension.getQueryModel().getDatasetId());
		if (oFF.notNull(sharedQueryManager))
		{
			sharedQueryManagerDimension = sharedQueryManager.getQueryModel().getDimensionByName(dimension.getName());
		}
		return oFF.notNull(sharedQueryManagerDimension) ? sharedQueryManagerDimension.getHierarchyManager() : null;
	},
	getLeafBlendingSources:function(blendingDefinition)
	{
			let sources = oFF.XList.create();
		oFF.BlendingUtils.collectLeafBlendingSources(blendingDefinition, sources);
		return sources;
	},
	getLeafDimensionNameAndDatasetId:function(leafQueryModels, dimension)
	{
			for (let i = 0; i < leafQueryModels.size(); i++)
		{
			let leafQueryModel = leafQueryModels.get(i);
			let unAliasedDimensionNameFound = null;
			if (oFF.XString.startsWith(dimension.getName(), leafQueryModel.getDatasetEpmObject().getCubeId()))
			{
				let unAliasedDimensionName = oFF.XString.substring(dimension.getName(), oFF.XString.size(leafQueryModel.getDatasetEpmObject().getCubeId()) + 1, oFF.XString.size(dimension.getName()) - 1);
				unAliasedDimensionNameFound = leafQueryModel.getDimensionByName(unAliasedDimensionName) !== null ? unAliasedDimensionName : null;
			}
			else if (leafQueryModel.getDimensionByName(dimension.getName()) !== null)
			{
				unAliasedDimensionNameFound = dimension.getName();
			}
			if (oFF.notNull(unAliasedDimensionNameFound))
			{
				return oFF.XPairOfString.create(unAliasedDimensionNameFound, leafQueryModel.getDatasetId());
			}
		}
		return null;
	},
	getLeafQueryAliasPrefix:function(datasetId, queryModel)
	{
			if (queryModel.isBlendingModel())
		{
			let blendingSources = queryModel.getBlendingSources();
			for (let i = 0; i < blendingSources.size(); i++)
			{
				let blendingSource = blendingSources.get(i);
				let childQueryModel = blendingSource.getQueryModel();
				if (childQueryModel.isBlendingModel())
				{
					let dimensionNameWithPrefix = oFF.BlendingUtils.getLeafQueryAliasPrefix(datasetId, childQueryModel);
					if (oFF.notNull(dimensionNameWithPrefix))
					{
						return dimensionNameWithPrefix;
					}
				}
				else if (oFF.XString.isEqual(datasetId, childQueryModel.getDatasetId()))
				{
					return oFF.XStringUtils.concatenate2(blendingSource.getQueryAliasName(), ".");
				}
			}
		}
		return null;
	},
	getLeafQueryModels:function(queryManager)
	{
			return oFF.BlendingBaseUtils.getLeafQueryModels(queryManager);
	},
	getLinkedDimensionInfo:function(queryManager, dimensionName, datasetId)
	{
			let dimensionLinks = queryManager.getOlapEnv().getModelLinkManager().getDimensionLinksByDatasetId(queryManager.getClientQueryObjectStorageName(), datasetId, false);
		let dimensionLinksIterator = dimensionLinks.getIterator();
		while (dimensionLinksIterator.hasNext())
		{
			let dimensionLink = dimensionLinksIterator.next();
			let primaryDatasetId = oFF.BlendingUtils.getPrimaryQueryManager(queryManager).getQueryModel().getDatasetId();
			if (oFF.BlendingUtils.doesLinkPartMatchDatasetAndDimension(dimensionLink.getFirstPart(), datasetId, dimensionName) || oFF.BlendingUtils.doesLinkPartMatchDatasetAndDimension(dimensionLink.getSecondPart(), datasetId, dimensionName))
			{
				if (oFF.XString.isEqual(datasetId, primaryDatasetId))
				{
					let secondaryQueryManagers = oFF.BlendingUtils.getSecondaryQueryManagers(queryManager);
					for (let i = 0; i < secondaryQueryManagers.size(); i++)
					{
						let secondaryDatasetId = secondaryQueryManagers.get(i).getQueryModel().getDatasetId();
						let linkPart1 = oFF.BlendingUtils.getMatchingLinkPartForDatasetAndDimension(dimensionLink, datasetId, dimensionName, secondaryDatasetId, true);
						if (oFF.notNull(linkPart1))
						{
							return oFF.XPairOfString.create(linkPart1.getQueryModel().getDatasetId(), linkPart1.getDimensionName());
						}
					}
				}
				else
				{
					let linkPart2 = oFF.BlendingUtils.getMatchingLinkPartForDatasetAndDimension(dimensionLink, datasetId, dimensionName, primaryDatasetId, true);
					if (oFF.notNull(linkPart2))
					{
						return oFF.XPairOfString.create(linkPart2.getQueryModel().getDatasetId(), linkPart2.getDimensionName());
					}
				}
			}
		}
		return null;
	},
	getMatchingBlendedMemberFromLeafMember:function(queryModel, leafMember)
	{
			let allStructureMembers = queryModel.getPrimaryCalculationDimension().getAllStructureMembers();
		let runtimePlaceholderId = leafMember.getDimension().getRuntimePlaceholderIdByAlias(leafMember.getAliasName());
		let leafMemberNameToMatch = oFF.notNull(runtimePlaceholderId) ? runtimePlaceholderId : leafMember.getName();
		let aliasPrefix = oFF.BlendingUtils.getAliasPrefixFromQueryModel(queryModel, leafMember.getQueryModel());
		for (let i = 0; i < allStructureMembers.size(); i++)
		{
			let structureMember = allStructureMembers.get(i);
			if (oFF.notNull(structureMember) && !structureMember.isReleased())
			{
				let structureMemberNameOrAlias = structureMember.getName();
				let memberNameToMatch = oFF.XStringUtils.concatenate2(aliasPrefix, leafMemberNameToMatch);
				let isMatch = oFF.XString.isEqual(memberNameToMatch, structureMember.getName());
				if (!isMatch && oFF.XStringUtils.isNotNullAndNotEmpty(structureMember.getAliasName()))
				{
					isMatch = oFF.XString.isEqual(structureMember.getAliasName(), leafMemberNameToMatch);
					structureMemberNameOrAlias = structureMember.getAliasName();
				}
				if (isMatch)
				{
					let leafMemberFound = oFF.BlendingUtils.getMatchingLeafMemberFromBlendedMember(queryModel, structureMemberNameOrAlias, true);
					if (oFF.notNull(leafMemberFound) && oFF.XString.isEqual(leafMemberFound.getQueryModel().getDatasetId(), leafMember.getQueryModel().getDatasetId()))
					{
						return structureMember;
					}
				}
			}
		}
		return null;
	},
	getMatchingLeafMemberFromBlendedAliasName:function(queryModel, blendedMemberName, isPrimaryCalculationDimension)
	{
			let leafQueryModels = oFF.BlendingUtils.getLeafQueryModels(queryModel.getQueryManager());
		let leafQueryModelsIter = leafQueryModels.getIterator();
		while (leafQueryModelsIter.hasNext())
		{
			let leafQueryModel = leafQueryModelsIter.next();
			let calculationDimension = isPrimaryCalculationDimension ? leafQueryModel.getPrimaryCalculationDimension() : leafQueryModel.getSecondaryCalculationDimension();
			let aliasStructureMember = calculationDimension.getStructureMemberByAlias(blendedMemberName);
			if (oFF.notNull(aliasStructureMember))
			{
				return aliasStructureMember;
			}
		}
		return null;
	},
	getMatchingLeafMemberFromBlendedMember:function(queryModel, blendedMemberName, isPrimaryCalculationDimension)
	{
			return oFF.BlendingUtils.getMatchingLeafMemberFromBlendedMemberInternal(queryModel, blendedMemberName, isPrimaryCalculationDimension, false);
	},
	getMatchingLeafMemberFromBlendedMemberInternal:function(queryModel, blendedMemberName, isPrimaryCalculationDimension, bFromLoadedStructureMember)
	{
			let memberToFind = null;
		let queryManager = queryModel.getQueryManager();
		if (queryManager.getMode() === oFF.QueryManagerMode.BLENDING)
		{
			let calculationDimension = isPrimaryCalculationDimension ? queryModel.getPrimaryCalculationDimension() : queryModel.getSecondaryCalculationDimension();
			let aliasStructureMember = calculationDimension.getStructureMemberByAlias(blendedMemberName);
			if (oFF.notNull(aliasStructureMember))
			{
				memberToFind = oFF.BlendingUtils.getMatchingLeafMemberFromBlendedAliasName(queryModel, blendedMemberName, isPrimaryCalculationDimension);
			}
			else
			{
				memberToFind = oFF.BlendingUtils.getMatchingLeafMemberFromBlendedMemberName(queryModel, blendedMemberName, isPrimaryCalculationDimension, bFromLoadedStructureMember);
			}
		}
		return memberToFind;
	},
	getMatchingLeafMemberFromBlendedMemberName:function(queryModel, blendedMemberName, isPrimaryCalculationDimension, bFromLoadedStructureMember)
	{
			let memberToFind = null;
		let queryManager = queryModel.getQueryManager();
		if (queryManager.getMode() === oFF.QueryManagerMode.BLENDING)
		{
			let blendingSources = queryManager.getQueryModel().getBlendingSources();
			for (let i = 0; i < blendingSources.size(); i++)
			{
				let blendingSource = blendingSources.get(i);
				let leafQueryModel = blendingSource.getQueryModel();
				let prefix = oFF.XStringUtils.concatenate2(blendingSource.getQueryAliasName(), ".");
				if (oFF.XString.startsWith(blendedMemberName, prefix))
				{
					let memberNameWithoutPrefix = oFF.XString.replace(blendedMemberName, prefix, "");
					memberToFind = oFF.BlendingUtils.getMatchingLeafMemberFromBlendedMemberName(leafQueryModel, memberNameWithoutPrefix, isPrimaryCalculationDimension, bFromLoadedStructureMember);
					if (oFF.notNull(memberToFind))
					{
						break;
					}
				}
			}
		}
		else
		{
			let dimension = isPrimaryCalculationDimension ? queryModel.getPrimaryCalculationDimension() : queryModel.getSecondaryCalculationDimension();
			if (oFF.notNull(dimension))
			{
				if (dimension.getRuntimePlaceholderIdMemberMap() !== null && dimension.getRuntimePlaceholderIdMemberMap().containsKey(blendedMemberName))
				{
					memberToFind = dimension.getRuntimePlaceholderIdMemberMap().getByKey(blendedMemberName);
				}
				else
				{
					if (bFromLoadedStructureMember)
					{
						memberToFind = dimension.getLoadedStructureMember(blendedMemberName);
					}
					else
					{
						memberToFind = dimension.getStructureMember(blendedMemberName);
					}
				}
			}
		}
		return memberToFind;
	},
	getMatchingLeafMemberFromLoadedBlendedMember:function(queryModel, blendedMemberName, isPrimaryCalculationDimension)
	{
			return oFF.BlendingUtils.getMatchingLeafMemberFromBlendedMemberInternal(queryModel, blendedMemberName, isPrimaryCalculationDimension, true);
	},
	getMatchingLinkPartForDatasetAndDimension:function(dimensionLink, datasetId, dimensionName, linkedDatasetId, isReturnLinkedDatasetPart)
	{
			let firstPart = dimensionLink.getFirstPart();
		let secondPart = dimensionLink.getSecondPart();
		let isFirstPartMatched = oFF.BlendingUtils.doesLinkPartMatchDatasetAndDimension(firstPart, datasetId, dimensionName) && oFF.XString.isEqual(linkedDatasetId, secondPart.getQueryModel().getDatasetId());
		if (isFirstPartMatched)
		{
			return isReturnLinkedDatasetPart ? secondPart : firstPart;
		}
		let isSecondPartMatched = oFF.BlendingUtils.doesLinkPartMatchDatasetAndDimension(secondPart, datasetId, dimensionName) && oFF.XString.isEqual(linkedDatasetId, firstPart.getQueryModel().getDatasetId());
		if (isSecondPartMatched)
		{
			return isReturnLinkedDatasetPart ? firstPart : secondPart;
		}
		return null;
	},
	getPrimaryMeasuresFromFilters:function(blendableQueryManager, isBlendedMeasureOnly)
	{
			let primaryMeasures = oFF.XListOfNameObject.create();
		primaryMeasures.addAll(blendableQueryManager.getPrimaryBlendedMeasures());
		if (blendableQueryManager.getSession().hasFeature(oFF.FeatureToggleOlap.MERGABLE_MEASURE_FILTER))
		{
			oFF.XCollectionUtils.forEach(blendableQueryManager.getAllQueryManagers(), (leafQueryManager) => {
				let primaryCalculationDimension = leafQueryManager.getQueryModel().getPrimaryCalculationDimension();
				let measureFilter = oFF.QFilterUtil.getLinkedFilterOrDynamicFilterForDimension(primaryCalculationDimension);
				if (oFF.notNull(measureFilter))
				{
					for (let i = 0; i < measureFilter.size(); i++)
					{
						let element = measureFilter.getCartesianElement(i);
						oFF.XCollectionUtils.addIfNotNull(primaryMeasures, oFF.BlendingUtils.getPrimaryStructureMemberByName(primaryCalculationDimension, element.getLow().getString(), isBlendedMeasureOnly, true));
					}
					let removedFiltersTag = measureFilter.getTagging().getByKey(oFF.QTransientConstants.TAG_TRANSIENT_REMOVED_BLENDED_CALCULATION_FILTERS);
					if (oFF.XStringUtils.isNotNullAndNotEmpty(removedFiltersTag))
					{
						let removedFilters = oFF.JsonParserFactory.createFromSafeString(removedFiltersTag).asList();
						for (let j = 0; j < removedFilters.size(); j++)
						{
							oFF.XCollectionUtils.addIfNotNull(primaryMeasures, oFF.BlendingUtils.getPrimaryStructureMemberByName(primaryCalculationDimension, removedFilters.getStringAt(j), isBlendedMeasureOnly, true));
						}
					}
				}
			});
		}
		return primaryMeasures;
	},
	getPrimaryQueryManager:function(queryManager)
	{
			if (queryManager.getOlapComponentType() === oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER)
		{
			return queryManager.getPrimaryQueryManager();
		}
		else if (queryManager.getInitSettings().getMode() === oFF.QueryManagerMode.BLENDING)
		{
			return oFF.BlendingUtils.getLeafQueryModels(queryManager).get(0).getQueryManager();
		}
		return queryManager;
	},
	getPrimaryStructureMemberByName:function(dimension, memberName, isBlendedMeasureOnly, isCalculationOnly)
	{
			let queryManager = dimension.getQueryManager();
		let structureMember = null;
		if (!isCalculationOnly)
		{
			structureMember = dimension.getStructureMemberByAliasOrMember(memberName);
		}
		if (oFF.isNull(structureMember))
		{
			structureMember = queryManager.getOlapEnv().getClientQueryObjectManager().getStructuredMember(memberName, queryManager.getClientQueryObjectStorageName(), true);
		}
		if (oFF.notNull(structureMember) && (!isBlendedMeasureOnly || structureMember.isMultiDataSourceMember()))
		{
			return structureMember;
		}
		return null;
	},
	getQueryAliasName:function(queryManager)
	{
			let aliasName = null;
		if (queryManager.getInitSettings().getMode() === oFF.QueryManagerMode.BLENDING)
		{
			let blendingDatasources = queryManager.getQueryModel().getBlendingSources();
			if (oFF.notNull(blendingDatasources) && blendingDatasources.size() > 0)
			{
				aliasName = blendingDatasources.get(0).getQueryAliasName();
				for (let i = 1; i < blendingDatasources.size(); i++)
				{
					let blendingDatasource = blendingDatasources.get(i);
					aliasName = oFF.XStringUtils.concatenate3(aliasName, "AND", blendingDatasource.getQueryAliasName());
				}
			}
		}
		else
		{
			let datasetEpmObject = queryManager.getQueryModel().getDatasetEpmObject();
			aliasName = oFF.notNull(datasetEpmObject) ? datasetEpmObject.getCubeId() : queryManager.getDataSource().getFullQualifiedName();
		}
		return aliasName;
	},
	getQueryManagerContextForMember:function(context, member)
	{
			let queryModelContext = null;
		let isMultiDataSourceMember = member.isMultiDataSourceMember();
		if (context.getComponentType() === oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER)
		{
			if (isMultiDataSourceMember)
			{
				return context;
			}
			else
			{
				queryModelContext = oFF.BlendingUtils.getQueryModelFromDatasetId(context, member.getQueryModel().getDatasetId());
			}
		}
		else if (context.getQueryManager().getInitSettings().getMode() === oFF.QueryManagerMode.BLENDING)
		{
			if (!isMultiDataSourceMember)
			{
				queryModelContext = oFF.BlendingUtils.getQueryModelFromDatasetId(context.getQueryManager(), member.getQueryModel().getDatasetId());
			}
		}
		else if (!isMultiDataSourceMember)
		{
			queryModelContext = oFF.BlendingUtils.getQueryModelFromDatasetId(context.getQueryManager(), member.getQueryModel().getDatasetId());
		}
		if (oFF.notNull(queryModelContext))
		{
			return queryModelContext.getQueryManager();
		}
		return context.getQueryManager();
	},
	getQueryModelFromDatasetId:function(queryManager, datasetId)
	{
			if (queryManager.getOlapComponentType() === oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER)
		{
			let leafQueryManagers = queryManager.getAllQueryManagers();
			let foundQueryManager = oFF.XCollectionUtils.findFirst(leafQueryManagers, (qm) => {
				return oFF.XString.isEqual(qm.getQueryModel().getDatasetId(), datasetId);
			});
			if (oFF.notNull(foundQueryManager))
			{
				return foundQueryManager.getQueryModel();
			}
		}
		else if (queryManager.getInitSettings().getMode() === oFF.QueryManagerMode.BLENDING)
		{
			let blendingSources = queryManager.getQueryModel().getBlendingSources();
			for (let i = 0; i < blendingSources.size(); i++)
			{
				let blendingSource = blendingSources.get(i);
				let leafQueryManager = blendingSource.getQueryManager();
				let foundQueryModel = oFF.BlendingUtils.getQueryModelFromDatasetId(leafQueryManager, datasetId);
				if (oFF.notNull(foundQueryModel))
				{
					return foundQueryModel;
				}
			}
		}
		else
		{
			if (oFF.XString.isEqual(queryManager.getQueryModel().getDatasetId(), datasetId))
			{
				return queryManager.getQueryModel();
			}
		}
		return null;
	},
	getSecondaryQueryManagers:function(queryManager)
	{
			if (queryManager.getOlapComponentType() === oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER)
		{
			return queryManager.getSecondaryQueryManagers();
		}
		else if (queryManager.getInitSettings().getMode() === oFF.QueryManagerMode.BLENDING)
		{
			let queryModels = oFF.BlendingUtils.getLeafQueryModels(queryManager);
			queryModels.removeAt(0);
			return oFF.XCollectionUtils.map(queryModels, (queryModel) => {
				return queryModel.getQueryManager();
			});
		}
		return oFF.XList.create();
	},
	getSharedQueryManagerByDatasetId:function(olapEnv, datasetId)
	{
			let queryManager = null;
		if (oFF.notNull(olapEnv) && oFF.XStringUtils.isNotNullAndNotEmpty(datasetId))
		{
			let sharedQueryManager = olapEnv.getSharedQueryManager(datasetId);
			if (oFF.notNull(sharedQueryManager) && !sharedQueryManager.isReleased())
			{
				queryManager = sharedQueryManager;
			}
		}
		return queryManager;
	},
	isDimensionFromLinkedDimension:function(blendableQueryManager, dimensionName, datasetId)
	{
			return oFF.BlendingUtils.getLinkedDimensionInfo(blendableQueryManager, dimensionName, datasetId) !== null;
	},
	isQueryModelInUseForBlending:function(queryModel, blendableQueryManager)
	{
			let dimensionInList = oFF.XList.create();
		let rowDimensions = queryModel.getRowsAxis().getDimensions();
		for (let i = 0; i < rowDimensions.size(); i++)
		{
			let rowDimension = rowDimensions.get(i);
			if (!rowDimension.supportsBasicStructureMembers())
			{
				dimensionInList.add(rowDimension);
			}
		}
		let columnDimensions = queryModel.getColumnsAxis().getDimensions();
		for (let j = 0; j < columnDimensions.size(); j++)
		{
			let columnDimension = columnDimensions.get(j);
			if (!columnDimension.supportsBasicStructureMembers())
			{
				dimensionInList.add(columnDimension);
			}
		}
		let hasDimensionsInDrill = !dimensionInList.isEmpty();
		let primaryCalculationDimension = queryModel.getPrimaryCalculationDimension();
		let isBlendingRestrictionsEnabled = blendableQueryManager.isBlendingRestrictionsEnabled();
		let hasFilters = isBlendingRestrictionsEnabled ? oFF.QFilterUtil.hasNonEmptyFilter(queryModel.getFilter(), true) : oFF.QFilterUtil.hasNonEmptyFilterForDimension(queryModel.getFilter(), primaryCalculationDimension.getName(), true);
		let hasCalculationUsingQueryModel = oFF.XCollectionUtils.contains(oFF.BlendingUtils.getPrimaryMeasuresFromFilters(blendableQueryManager, false), (primaryMeasure) => {
			let formulaItemDimensionContexts = oFF.BlendingUtils.getFormulaItemDimensionContexts(primaryMeasure);
			return !formulaItemDimensionContexts.isEmpty() ? oFF.XCollectionUtils.contains(formulaItemDimensionContexts, (dimensionContext) => {
				return oFF.XString.isEqual(dimensionContext.getQueryModel().getDatasetId(), queryModel.getDatasetId());
			}) : oFF.XString.isEqual(primaryMeasure.getQueryModel().getDatasetId(), queryModel.getDatasetId());
		});
		return hasDimensionsInDrill || hasCalculationUsingQueryModel || (blendableQueryManager.isUseEmptyAllMemberMeasureFilter() || blendableQueryManager.skipFilterValidationByDatasetId(queryModel.getDatasetId()) ? true : hasFilters);
	},
	migrateAxis:function(blendableQueryManager, originalBlendedQueryManager, axisType)
	{
			if (originalBlendedQueryManager.getInitSettings().getMode() !== oFF.QueryManagerMode.BLENDING)
		{
			return;
		}
		let leafQueryModels = oFF.BlendingUtils.getLeafQueryModels(originalBlendedQueryManager);
		let dimsIterator = originalBlendedQueryManager.getQueryModel().getAxis(axisType).getIterator();
		while (dimsIterator.hasNext())
		{
			let dimension = dimsIterator.next();
			let leafDimNameAndDatasetId = oFF.BlendingUtils.getLeafDimensionNameAndDatasetId(leafQueryModels, dimension);
			if (oFF.notNull(leafDimNameAndDatasetId))
			{
				let blendedDimensionInfoToAxis = blendableQueryManager.addBlendedDimensionInfoToAxis(axisType, leafDimNameAndDatasetId.getSecondString(), dimension.getName());
				blendedDimensionInfoToAxis.setInitialDrillLevel(dimension.getInitialDrillLevel());
			}
		}
	},
	migrateDrillManager:function(blendableQueryManager, originalBlendedQueryManager)
	{
			if (originalBlendedQueryManager.getInitSettings().getMode() !== oFF.QueryManagerMode.BLENDING)
		{
			return;
		}
		let leafQueryModels = oFF.BlendingUtils.getLeafQueryModels(originalBlendedQueryManager);
		let allDrillOperations = originalBlendedQueryManager.getDrillManager().getAllDrillOperations();
		oFF.XCollectionUtils.forEach(allDrillOperations, (drillOperation) => {
			let leafTargetDimNameAndDatasetId = oFF.BlendingUtils.getLeafDimensionNameAndDatasetId(leafQueryModels, drillOperation.getTargetDimension());
			if (oFF.notNull(leafTargetDimNameAndDatasetId))
			{
				let blendedDrillInfo = blendableQueryManager.addNewBlendedDrillOperation(leafTargetDimNameAndDatasetId.getSecondString(), leafTargetDimNameAndDatasetId.getFirstString());
				blendedDrillInfo.setDrillState(drillOperation.getDrillState());
				let drillPathElements = drillOperation.getDrillPath();
				let isPrimaryCalculationDimension = drillOperation.getTargetDimension() === originalBlendedQueryManager.getQueryModel().getPrimaryCalculationDimension();
				for (let k = 0; k < drillPathElements.size(); k++)
				{
					let drillPathElement = drillPathElements.get(k);
					let memberContext = drillPathElement.getSelectValue();
					let dimensionContextNameAndDatasetId = null;
					if (isPrimaryCalculationDimension)
					{
						let leafMember = oFF.BlendingUtils.getMatchingLeafMemberFromBlendedMember(originalBlendedQueryManager.getQueryModel(), memberContext, true);
						if (oFF.notNull(leafMember))
						{
							dimensionContextNameAndDatasetId = oFF.XPairOfString.create(leafMember.getDimension().getName(), leafMember.getQueryModel().getDatasetId());
						}
					}
					if (oFF.isNull(dimensionContextNameAndDatasetId))
					{
						dimensionContextNameAndDatasetId = oFF.BlendingUtils.getLeafDimensionNameAndDatasetId(leafQueryModels, drillPathElement.getDimension());
					}
					if (oFF.notNull(dimensionContextNameAndDatasetId))
					{
						blendedDrillInfo.addBlendedDrillPathElementInfo(dimensionContextNameAndDatasetId.getSecondString(), dimensionContextNameAndDatasetId.getFirstString(), drillPathElement.getSelectValue());
					}
				}
			}
		});
	},
	removeExtraFlatKeyForHierarchyDimension:function(blendedDimension)
	{
			if (blendedDimension.isHierarchyActive())
		{
			let resultSetFields = blendedDimension.getResultSetFields();
			let flatKeyField = blendedDimension.getFlatKeyField();
			if (flatKeyField !== blendedDimension.getKeyField() && resultSetFields.contains(flatKeyField))
			{
				resultSetFields.removeElement(flatKeyField);
			}
		}
	},
	removeLinkedDimensionsInAxis:function(dimensionNames, datasetId, queryManager)
	{
			if (queryManager.getOlapComponentType() === oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER || queryManager.getInitSettings().getMode() === oFF.QueryManagerMode.BLENDING)
		{
			return oFF.XStream.ofString(dimensionNames).filter((requiredDimensionName) => {
				let datasetIdAndDimensionName = oFF.BlendingUtils.getLinkedDimensionInfo(queryManager, requiredDimensionName.getString(), datasetId);
				if (oFF.notNull(datasetIdAndDimensionName))
				{
					let linkedQueryModel = oFF.BlendingUtils.getQueryModelFromDatasetId(queryManager, datasetIdAndDimensionName.getFirstString());
					let isInRows = oFF.XCollectionUtils.contains(linkedQueryModel.getRowsAxis(), (rowDimension) => {
						return oFF.XString.isEqual(rowDimension.getName(), datasetIdAndDimensionName.getSecondString());
					});
					let isInCols = oFF.XCollectionUtils.contains(linkedQueryModel.getColumnsAxis(), (colDimension) => {
						return oFF.XString.isEqual(colDimension.getName(), datasetIdAndDimensionName.getSecondString());
					});
					return !isInRows && !isInCols;
				}
				return true;
			}).collect(oFF.XStreamCollector.toSetOfString((str) => {
				return str.getStringRepresentation();
			}));
		}
		else
		{
			return dimensionNames;
		}
	},
	setHierarchyNameAndActivate:function(dimension)
	{
			if (dimension.supportsHierarchy() && !dimension.isHierarchyActive())
		{
			if (dimension.getHierarchyName() === null)
			{
				if (oFF.XStringUtils.isNotNullAndNotEmpty(dimension.getDefaultHierarchyName()))
				{
					dimension.setHierarchyName(dimension.getDefaultHierarchyName());
				}
				else
				{
					let hierarchies = oFF.BlendingUtils.getHierarchiesFromSharedQueryManager(dimension.getOlapEnv(), dimension);
					if (hierarchies.size() > 0)
					{
						dimension.setHierarchyName(hierarchies.get(0).getHierarchyName());
					}
				}
			}
			if (dimension.getHierarchyName() !== null)
			{
				dimension.setHierarchyActive(true);
			}
		}
	},
	updateDimensionResultSetFields:function(blendedQueryManager)
	{
			let blendedQueryModel = blendedQueryManager.getQueryModel();
		let leafQueryModels = oFF.BlendingUtils.getLeafQueryModels(blendedQueryManager);
		let dimensionsIterator = blendedQueryModel.getDimensions().getIterator();
		while (dimensionsIterator.hasNext())
		{
			let blendedDimension = dimensionsIterator.next();
			let leafDimension = oFF.BlendingUtils.findLeafDimensionFromBlendedDimension(leafQueryModels, blendedDimension);
			if (oFF.notNull(leafDimension) && leafDimension.getQueryModel().getConvenienceCommands().isBw())
			{
				oFF.BlendingUtils.addDisplayKeyToResultSetFields(leafDimension, blendedQueryModel, blendedDimension);
				oFF.BlendingUtils.addTextToResultSetFields(leafDimension, blendedQueryModel, blendedDimension);
			}
			oFF.BlendingUtils.removeExtraFlatKeyForHierarchyDimension(blendedDimension);
		}
	}
};

oFF.QCanonicalDate = function() {};
oFF.QCanonicalDate.prototype = new oFF.XObject();
oFF.QCanonicalDate.prototype._ff_c = "QCanonicalDate";

oFF.QCanonicalDate.create = function(year, member, timestamp, granularity)
{
	let canonicalDate = new oFF.QCanonicalDate();
	canonicalDate.m_year = year;
	canonicalDate.m_member = member;
	canonicalDate.m_timestamp = timestamp;
	canonicalDate.m_granularity = granularity;
	return canonicalDate;
};
oFF.QCanonicalDate.prototype.m_granularity = null;
oFF.QCanonicalDate.prototype.m_member = 0;
oFF.QCanonicalDate.prototype.m_timestamp = null;
oFF.QCanonicalDate.prototype.m_year = 0;
oFF.QCanonicalDate.prototype.getGranularity = function()
{
	return this.m_granularity;
};
oFF.QCanonicalDate.prototype.getMember = function()
{
	return this.m_member;
};
oFF.QCanonicalDate.prototype.getTimestamp = function()
{
	return this.m_timestamp;
};
oFF.QCanonicalDate.prototype.getYear = function()
{
	return this.m_year;
};
oFF.QCanonicalDate.prototype.releaseObject = function()
{
	this.m_granularity = null;
	oFF.XObject.prototype.releaseObject.call( this );
};

oFF.QCanonicalDateContext = function() {};
oFF.QCanonicalDateContext.prototype = new oFF.XObject();
oFF.QCanonicalDateContext.prototype._ff_c = "QCanonicalDateContext";

oFF.QCanonicalDateContext.create = function(queryModel, timeDimension, hierarchyName)
{
	let isBW = queryModel.getSystemType().isTypeOf(oFF.SystemType.BW);
	let datasetId = null;
	if (queryModel.getMetadataProperties() !== null)
	{
		datasetId = queryModel.getDatasetId();
	}
	if (oFF.XStringUtils.isNullOrEmpty(datasetId))
	{
		datasetId = queryModel.getName();
	}
	let dimensionId = timeDimension.getName();
	let hierarchyId = hierarchyName;
	let hasDayTimeYYYYMMDDFormat = isBW;
	let isEnrichedTime = false;
	let groupingDimensionId = timeDimension.getName();
	let extendedDimensions = queryModel.getExtendedDimensions();
	if (oFF.notNull(extendedDimensions))
	{
		for (let idxExtendedDim = 0; idxExtendedDim < extendedDimensions.size(); idxExtendedDim++)
		{
			let extendedDimension = extendedDimensions.get(idxExtendedDim);
			if (oFF.XString.isEqual(extendedDimension.getName(), timeDimension.getName()))
			{
				isEnrichedTime = true;
				groupingDimensionId = extendedDimension.getDataSource().getObjectName();
				break;
			}
		}
	}
	let finestGranularity = null;
	let dimensionLevels = oFF.XList.create();
	let granularityToAttributeMap = oFF.XHashMapByString.create();
	let entityValueGranularityMap = oFF.XHashMapByString.create();
	let fieldNameToValueTypeMap = oFF.XHashMapByString.create();
	let granularityToLevelMap = oFF.XHashMapByString.create();
	fieldNameToValueTypeMap.put("flatDisplayKeyField", timeDimension.getFlatDisplayKeyField().getValueType().getName());
	fieldNameToValueTypeMap.put("flatKeyField", timeDimension.getFlatKeyField().getValueType().getName());
	if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyName))
	{
		let hierarchy = timeDimension.getLeveledHierarchy(hierarchyName);
		if (oFF.notNull(hierarchy))
		{
			let levels = hierarchy.getHierarchyLevels();
			if (oFF.notNull(levels))
			{
				for (let idxLevel = 0; idxLevel < levels.size(); idxLevel++)
				{
					let level = levels.get(idxLevel);
					let levelType = level.getLevelType();
					if (levelType !== oFF.HierarchyLevelType.ALL)
					{
						let levelName = level.getLevelName();
						if (isBW)
						{
							levelName = levelType.getName();
						}
						dimensionLevels.add(levelName);
						let granularity = oFF.QCanonicalDateUtil.convertHierarchyLevelTypeToDateTimeGranularity(levelType);
						if (oFF.notNull(granularity))
						{
							granularityToAttributeMap.put(granularity.getName(), level.getLevelDimensionName());
							entityValueGranularityMap.put(levelType.getName(), granularity.getName());
							entityValueGranularityMap.put(level.getLevelDimensionName(), granularity.getName());
							entityValueGranularityMap.put(level.getLevelName(), granularity.getName());
							let levelInfo = oFF.XHashMapByString.create();
							levelInfo.put("levelName", level.getLevelName());
							levelInfo.put("levelDimensionName", level.getLevelDimensionName());
							levelInfo.put("levelTypeName", levelType.getName());
							granularityToLevelMap.put(granularity.getName(), levelInfo);
							let levelField = timeDimension.getFieldByNameOrAlias(levelName);
							if (oFF.notNull(levelField))
							{
								fieldNameToValueTypeMap.put(levelName, levelField.getValueType().getName());
							}
							else if (isBW)
							{
								let levelDimensionName = level.getLevelDimensionName();
								let levelDimension = queryModel.getDimensionByName(levelDimensionName);
								if (oFF.notNull(levelDimension) && levelDimension !== timeDimension)
								{
									fieldNameToValueTypeMap.put(oFF.XStringUtils.concatenate2(levelDimensionName, ".flatDisplayKeyField"), levelDimension.getFlatDisplayKeyField().getValueType().getName());
									fieldNameToValueTypeMap.put(oFF.XStringUtils.concatenate2(levelDimensionName, ".flatKeyField"), levelDimension.getFlatKeyField().getValueType().getName());
								}
							}
							if (idxLevel === levels.size() - 1)
							{
								finestGranularity = granularity.getName();
								if (levelType === oFF.HierarchyLevelType.TIME_DAY && !isBW)
								{
									let dayLevelDimension = queryModel.getDimensionByName(level.getLevelDimensionName());
									hasDayTimeYYYYMMDDFormat = oFF.XString.isEqual(dayLevelDimension.getKeyField().getSqlType(), "NVARCHAR(8)");
								}
							}
						}
					}
				}
			}
		}
	}
	else
	{
		finestGranularity = oFF.DateTimeGranularityType.DAY.getName();
		if (timeDimension.getKeyField().getValueType() === oFF.XValueType.DATE_TIME)
		{
			finestGranularity = oFF.DateTimeGranularityType.MILLISECOND.getName();
		}
	}
	let canonicalDateContext = new oFF.QCanonicalDateContext();
	canonicalDateContext.m_datasetId = datasetId;
	canonicalDateContext.m_dimensionId = dimensionId;
	canonicalDateContext.m_finestGranularity = finestGranularity;
	canonicalDateContext.m_isEnrichedTime = isEnrichedTime;
	canonicalDateContext.m_hierarchyId = hierarchyId;
	canonicalDateContext.m_groupingDimensionId = groupingDimensionId;
	canonicalDateContext.m_dimensionLevels = dimensionLevels;
	canonicalDateContext.m_granularityToAttributeMap = granularityToAttributeMap;
	canonicalDateContext.m_entityValueGranularityMap = entityValueGranularityMap;
	canonicalDateContext.m_fieldNameToValueTypeMap = fieldNameToValueTypeMap;
	canonicalDateContext.m_granularityToLevelMap = granularityToLevelMap;
	canonicalDateContext.m_hasDayTimeYYYYMMDDFormat = hasDayTimeYYYYMMDDFormat;
	canonicalDateContext.m_isFromBW = isBW;
	canonicalDateContext.m_fiscalEnabled = timeDimension.getFiscalEnabled();
	canonicalDateContext.m_fiscalDisplayPeriod = timeDimension.getFiscalDisplayPeriod();
	canonicalDateContext.m_fiscalPeriodPrefix = timeDimension.getFiscalPeriodPrefix();
	canonicalDateContext.m_fiscalShift = timeDimension.getFiscalShift();
	canonicalDateContext.m_additionalPeriods = timeDimension.getAdditionalPeriods();
	canonicalDateContext.m_timeConfigEnablePattern = timeDimension.isTimeConfigEnablePattern();
	canonicalDateContext.m_isUserManaged = timeDimension.isUserManaged();
	canonicalDateContext.m_useMonthLabel = timeDimension.getUseMonthLabel();
	canonicalDateContext.m_periodPrefix = timeDimension.getPeriodPrefix();
	return canonicalDateContext;
};
oFF.QCanonicalDateContext.prototype.m_additionalPeriods = 0;
oFF.QCanonicalDateContext.prototype.m_datasetId = null;
oFF.QCanonicalDateContext.prototype.m_dimensionId = null;
oFF.QCanonicalDateContext.prototype.m_dimensionLevels = null;
oFF.QCanonicalDateContext.prototype.m_entityValueGranularityMap = null;
oFF.QCanonicalDateContext.prototype.m_fieldNameToValueTypeMap = null;
oFF.QCanonicalDateContext.prototype.m_finestGranularity = null;
oFF.QCanonicalDateContext.prototype.m_fiscalDisplayPeriod = null;
oFF.QCanonicalDateContext.prototype.m_fiscalEnabled = false;
oFF.QCanonicalDateContext.prototype.m_fiscalPeriodPrefix = null;
oFF.QCanonicalDateContext.prototype.m_fiscalShift = 0;
oFF.QCanonicalDateContext.prototype.m_granularityToAttributeMap = null;
oFF.QCanonicalDateContext.prototype.m_granularityToLevelMap = null;
oFF.QCanonicalDateContext.prototype.m_groupingDimensionId = null;
oFF.QCanonicalDateContext.prototype.m_hasDayTimeYYYYMMDDFormat = false;
oFF.QCanonicalDateContext.prototype.m_hierarchyId = null;
oFF.QCanonicalDateContext.prototype.m_isEnrichedTime = false;
oFF.QCanonicalDateContext.prototype.m_isFromBW = false;
oFF.QCanonicalDateContext.prototype.m_isUserManaged = false;
oFF.QCanonicalDateContext.prototype.m_periodPrefix = null;
oFF.QCanonicalDateContext.prototype.m_timeConfigEnablePattern = false;
oFF.QCanonicalDateContext.prototype.m_useMonthLabel = false;
oFF.QCanonicalDateContext.prototype.getAdditionalPeriods = function()
{
	return this.m_additionalPeriods;
};
oFF.QCanonicalDateContext.prototype.getDatasetId = function()
{
	return this.m_datasetId;
};
oFF.QCanonicalDateContext.prototype.getDimensionId = function()
{
	return this.m_dimensionId;
};
oFF.QCanonicalDateContext.prototype.getDimensionLevels = function()
{
	return this.m_dimensionLevels;
};
oFF.QCanonicalDateContext.prototype.getEntityValueGranularityMap = function()
{
	return this.m_entityValueGranularityMap;
};
oFF.QCanonicalDateContext.prototype.getFieldToValueTypeMap = function()
{
	return this.m_fieldNameToValueTypeMap;
};
oFF.QCanonicalDateContext.prototype.getFinestGranularity = function()
{
	return this.m_finestGranularity;
};
oFF.QCanonicalDateContext.prototype.getFiscalDisplayPeriod = function()
{
	return this.m_fiscalDisplayPeriod;
};
oFF.QCanonicalDateContext.prototype.getFiscalEnabled = function()
{
	return this.m_fiscalEnabled;
};
oFF.QCanonicalDateContext.prototype.getFiscalPeriodPrefix = function()
{
	return this.m_fiscalPeriodPrefix;
};
oFF.QCanonicalDateContext.prototype.getFiscalShift = function()
{
	return this.m_fiscalShift;
};
oFF.QCanonicalDateContext.prototype.getGranularityToAttributeMap = function()
{
	return this.m_granularityToAttributeMap;
};
oFF.QCanonicalDateContext.prototype.getGranularityToLevelMap = function()
{
	return this.m_granularityToLevelMap;
};
oFF.QCanonicalDateContext.prototype.getGroupingDimensionId = function()
{
	return this.m_groupingDimensionId;
};
oFF.QCanonicalDateContext.prototype.getHasDayTimeYYYYMMDDFormat = function()
{
	return this.m_hasDayTimeYYYYMMDDFormat;
};
oFF.QCanonicalDateContext.prototype.getHierarchyId = function()
{
	return this.m_hierarchyId;
};
oFF.QCanonicalDateContext.prototype.getIsEnrichedTime = function()
{
	return this.m_isEnrichedTime;
};
oFF.QCanonicalDateContext.prototype.getIsFromBW = function()
{
	return this.m_isFromBW;
};
oFF.QCanonicalDateContext.prototype.getPeriodPrefix = function()
{
	return this.m_periodPrefix;
};
oFF.QCanonicalDateContext.prototype.getUseMonthLabel = function()
{
	return this.m_useMonthLabel;
};
oFF.QCanonicalDateContext.prototype.isTimeConfigEnablePattern = function()
{
	return this.m_timeConfigEnablePattern;
};
oFF.QCanonicalDateContext.prototype.isUserManaged = function()
{
	return this.m_isUserManaged;
};
oFF.QCanonicalDateContext.prototype.releaseObject = function()
{
	this.m_datasetId = null;
	this.m_dimensionId = null;
	this.m_finestGranularity = null;
	this.m_hierarchyId = null;
	this.m_groupingDimensionId = null;
	this.m_dimensionLevels = oFF.XObjectExt.release(this.m_dimensionLevels);
	this.m_granularityToAttributeMap = oFF.XObjectExt.release(this.m_granularityToAttributeMap);
	this.m_entityValueGranularityMap = oFF.XObjectExt.release(this.m_entityValueGranularityMap);
	this.m_fieldNameToValueTypeMap = oFF.XObjectExt.release(this.m_fieldNameToValueTypeMap);
	this.m_granularityToLevelMap = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_granularityToLevelMap);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.QCanonicalDateContext.prototype.serializeMap = function(structure, map)
{
	let keys = map.getKeysAsReadOnlyList();
	for (let idx = 0; idx < keys.size(); idx++)
	{
		let key = keys.get(idx);
		structure.putString(key, map.getByKey(key));
	}
	return structure;
};
oFF.QCanonicalDateContext.prototype.serializeToJson = function()
{
	let canonicalDateContextJson = oFF.PrFactory.createStructure();
	canonicalDateContextJson.putString("m_datasetId", this.getDatasetId());
	canonicalDateContextJson.putString("m_dimensionId", this.getDimensionId());
	canonicalDateContextJson.putString("m_finestGranularity", this.getFinestGranularity());
	canonicalDateContextJson.putBoolean("m_isEnrichedTime", this.getIsEnrichedTime());
	canonicalDateContextJson.putString("m_hierarchyId", this.getHierarchyId());
	canonicalDateContextJson.putString("m_groupingDimensionId", this.getGroupingDimensionId());
	let dimensionLevelsJson = canonicalDateContextJson.putNewList("m_dimensionLevels");
	dimensionLevelsJson.addAllStrings(this.getDimensionLevels());
	this.serializeMap(canonicalDateContextJson.putNewStructure("m_granularityToAttributeMap"), this.getGranularityToAttributeMap());
	this.serializeMap(canonicalDateContextJson.putNewStructure("m_entityValueGranularityMap"), this.getEntityValueGranularityMap());
	let granularityToLevelMapJson = canonicalDateContextJson.putNewStructure("m_granularityToLevelMap");
	let granularityToLevelMap = this.getGranularityToLevelMap();
	let granularityToLevelMapKeys = granularityToLevelMap.getKeysAsReadOnlyList();
	for (let idx = 0; idx < granularityToLevelMapKeys.size(); idx++)
	{
		let key = granularityToLevelMapKeys.get(idx);
		this.serializeMap(granularityToLevelMapJson.putNewStructure(key), granularityToLevelMap.getByKey(key));
	}
	canonicalDateContextJson.putBoolean("m_fiscalEnabled", this.getFiscalEnabled());
	canonicalDateContextJson.putString("m_fiscalDisplayPeriod", this.getFiscalDisplayPeriod());
	canonicalDateContextJson.putString("m_fiscalPeriodPrefix", this.getFiscalPeriodPrefix());
	canonicalDateContextJson.putInteger("m_fiscalShift", this.getFiscalShift());
	canonicalDateContextJson.putInteger("m_additionalPeriods", this.getAdditionalPeriods());
	canonicalDateContextJson.putBoolean("m_timeConfigEnablePattern", this.isTimeConfigEnablePattern());
	canonicalDateContextJson.putBoolean("m_isUserManaged", this.isUserManaged());
	canonicalDateContextJson.putBoolean("m_useMonthLabel", this.getUseMonthLabel());
	canonicalDateContextJson.putString("m_periodPrefix", this.getPeriodPrefix());
	canonicalDateContextJson.putBoolean("m_hasDayTimeYYYYMMDDFormat", this.getHasDayTimeYYYYMMDDFormat());
	canonicalDateContextJson.putBoolean("m_isFromBW", this.getIsFromBW());
	return canonicalDateContextJson;
};

oFF.ServerVersionComparator = {

	compare:function(version1, version2)
	{
			let versions1 = oFF.ServerVersionComparator.splitVersion(version1);
		let versions2 = oFF.ServerVersionComparator.splitVersion(version2);
		let size = oFF.XMath.max(versions1.size(), versions2.size());
		for (let i = 0; i < size; i++)
		{
			let v1 = oFF.ServerVersionComparator.getVersionPart(versions1, i);
			let v2 = oFF.ServerVersionComparator.getVersionPart(versions2, i);
			if (v1 > v2)
			{
				return -1;
			}
			if (v1 < v2)
			{
				return 1;
			}
		}
		return 0;
	},
	getVersionPart:function(versions, i)
	{
			if (i < versions.size())
		{
			return oFF.XInteger.convertFromStringWithDefault(versions.get(i), 0);
		}
		return 0;
	},
	splitVersion:function(version)
	{
			if (oFF.isNull(version))
		{
			return oFF.XList.create();
		}
		return oFF.XStringTokenizer.splitString(version, ".");
	}
};

oFF.OlapClientQueryObjectManagerUtils = {

	getRemappedStorageObjectName:function(queryModel, name, memberType)
	{
			let datasetId = queryModel.getDatasetId();
		if (oFF.notNull(datasetId))
		{
			let currencyTranslationManager = queryModel.getCurrencyTranslationManager();
			if ((oFF.isNull(memberType) || memberType.isEqualTo(oFF.MemberType.CURRENCY_MEASURE)) && oFF.notNull(currencyTranslationManager) && (oFF.XString.isEqual(name, oFF.CurrencyConstants.DEFAULT_CURRENCY) || oFF.XString.isEqual(name, oFF.CurrencyConstants.LOCAL_CURRENCY)))
			{
				return oFF.XStringUtils.concatenate3(datasetId, "-", name);
			}
			else if ((oFF.isNull(memberType) || memberType.isEqualTo(oFF.MemberType.RESTRICTED_MEASURE)) && queryModel.getDimensionByType(oFF.DimensionType.SECONDARY_STRUCTURE) !== null && oFF.XString.isEqual(name, oFF.MeasureModelConstants.DEFAULT_CUSTOMDIMENSION2_MEMBER))
			{
				return oFF.XStringUtils.concatenate3(datasetId, "-", name);
			}
		}
		return null;
	},
	getShareableObjectFromStorage:function(queryModel, memberName, isPrimaryStructure)
	{
			let structureMember = null;
		let storageName = queryModel.getQueryManager().getClientQueryObjectStorageName();
		if (oFF.notNull(storageName))
		{
			structureMember = queryModel.getOlapEnv().getClientQueryObjectManager().getStructuredMember(memberName, storageName, isPrimaryStructure);
			if (oFF.isNull(structureMember) && !isPrimaryStructure)
			{
				let remappedObjectName = oFF.OlapClientQueryObjectManagerUtils.getRemappedStorageObjectName(queryModel, memberName, null);
				if (oFF.notNull(remappedObjectName))
				{
					structureMember = queryModel.getOlapEnv().getClientQueryObjectManager().getStructuredMember(remappedObjectName, storageName, isPrimaryStructure);
				}
			}
		}
		return structureMember;
	}
};

oFF.CmdResetConfiguration = function() {};
oFF.CmdResetConfiguration.prototype = new oFF.XObject();
oFF.CmdResetConfiguration.prototype._ff_c = "CmdResetConfiguration";

oFF.CmdResetConfiguration.create = function()
{
	let configuration = new oFF.CmdResetConfiguration();
	configuration.skipResetCustomMembers = false;
	configuration.skipResetCalculatedDimensions = false;
	configuration.skipResetConditions = false;
	return configuration;
};
oFF.CmdResetConfiguration.prototype.skipResetCalculatedDimensions = false;
oFF.CmdResetConfiguration.prototype.skipResetConditions = false;
oFF.CmdResetConfiguration.prototype.skipResetCustomMembers = false;
oFF.CmdResetConfiguration.prototype.isSkipResetCalculatedDimensions = function()
{
	return this.skipResetCalculatedDimensions;
};
oFF.CmdResetConfiguration.prototype.isSkipResetConditions = function()
{
	return this.skipResetConditions;
};
oFF.CmdResetConfiguration.prototype.isSkipResetCustomMembers = function()
{
	return this.skipResetCustomMembers;
};
oFF.CmdResetConfiguration.prototype.setSkipResetCalculatedDimensions = function(value)
{
	this.skipResetCalculatedDimensions = value;
};
oFF.CmdResetConfiguration.prototype.setSkipResetConditions = function(value)
{
	this.skipResetConditions = value;
};
oFF.CmdResetConfiguration.prototype.setSkipResetCustomMembers = function(value)
{
	this.skipResetCustomMembers = value;
};

oFF.CommandSpaceFactoryImpl = function() {};
oFF.CommandSpaceFactoryImpl.prototype = new oFF.XObject();
oFF.CommandSpaceFactoryImpl.prototype._ff_c = "CommandSpaceFactoryImpl";

oFF.CommandSpaceFactoryImpl.prototype.createCommandSpaceWithElement = function(application, modelComponent)
{
	return oFF.QCmdSpace.createWithElement(application, modelComponent);
};
oFF.CommandSpaceFactoryImpl.prototype.createCommandSpaceWithSelection = function(application, sigSelExpression)
{
	return oFF.QCmdSpace.createBySelection(application, sigSelExpression);
};
oFF.CommandSpaceFactoryImpl.prototype.newSpacer = function(session)
{
	return oFF.QCmdSpace.createWithElement(null, null);
};

oFF.QCmdContextFactory = function() {};
oFF.QCmdContextFactory.prototype = new oFF.XObject();
oFF.QCmdContextFactory.prototype._ff_c = "QCmdContextFactory";

oFF.QCmdContextFactory.s_cmdFactoryList = null;
oFF.QCmdContextFactory.createCmdContext = function(olapApplication, component)
{
	if (oFF.notNull(component))
	{
		let size = oFF.QCmdContextFactory.s_cmdFactoryList.size();
		for (let i = 0; i < size; i++)
		{
			let factory = oFF.QCmdContextFactory.s_cmdFactoryList.get(i);
			let cmdContext = factory.newCmdContext(olapApplication, component);
			if (oFF.notNull(cmdContext))
			{
				return cmdContext;
			}
		}
	}
	return null;
};
oFF.QCmdContextFactory.register = function(factory)
{
	oFF.QCmdContextFactory.s_cmdFactoryList.add(factory);
};
oFF.QCmdContextFactory.staticSetup = function()
{
	oFF.QCmdContextFactory.s_cmdFactoryList = oFF.XList.create();
};

oFF.QChangedListenerPair = function() {};
oFF.QChangedListenerPair.prototype = new oFF.XObject();
oFF.QChangedListenerPair.prototype._ff_c = "QChangedListenerPair";

oFF.QChangedListenerPair.create = function(listener, customIdentifier)
{
	let element = new oFF.QChangedListenerPair();
	element.setupExt(listener, customIdentifier);
	return element;
};
oFF.QChangedListenerPair.prototype.m_customIdentifier = null;
oFF.QChangedListenerPair.prototype.m_listenerWeakReference = null;
oFF.QChangedListenerPair.prototype.getCustomIdentifier = function()
{
	return this.m_customIdentifier;
};
oFF.QChangedListenerPair.prototype.getListener = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_listenerWeakReference);
};
oFF.QChangedListenerPair.prototype.hasWeakReference = function()
{
	return oFF.notNull(this.m_listenerWeakReference);
};
oFF.QChangedListenerPair.prototype.releaseObject = function()
{
	this.m_listenerWeakReference = oFF.XObjectExt.release(this.m_listenerWeakReference);
	this.m_customIdentifier = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.QChangedListenerPair.prototype.setCustomIdentifier = function(customIdentifier)
{
	this.m_customIdentifier = customIdentifier;
};
oFF.QChangedListenerPair.prototype.setupExt = function(listener, customIdentifier)
{
	this.m_listenerWeakReference = oFF.XWeakReferenceUtil.getWeakRef(listener);
	this.m_customIdentifier = customIdentifier;
};
oFF.QChangedListenerPair.prototype.toString = function()
{
	if (oFF.isNull(this.m_listenerWeakReference))
	{
		return "[Empty]";
	}
	return this.m_listenerWeakReference.toString();
};

oFF.QDeserializeListenerPair = function() {};
oFF.QDeserializeListenerPair.prototype = new oFF.XObject();
oFF.QDeserializeListenerPair.prototype._ff_c = "QDeserializeListenerPair";

oFF.QDeserializeListenerPair.create = function(listener, customIdentifier)
{
	let element = new oFF.QDeserializeListenerPair();
	element.setupExt(listener, customIdentifier);
	return element;
};
oFF.QDeserializeListenerPair.prototype.m_customIdentifier = null;
oFF.QDeserializeListenerPair.prototype.m_listenerWeakReference = null;
oFF.QDeserializeListenerPair.prototype.getCustomIdentifier = function()
{
	return this.m_customIdentifier;
};
oFF.QDeserializeListenerPair.prototype.getListener = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_listenerWeakReference);
};
oFF.QDeserializeListenerPair.prototype.hasWeakReference = function()
{
	return oFF.notNull(this.m_listenerWeakReference);
};
oFF.QDeserializeListenerPair.prototype.releaseObject = function()
{
	this.m_listenerWeakReference = oFF.XObjectExt.release(this.m_listenerWeakReference);
	this.m_customIdentifier = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.QDeserializeListenerPair.prototype.setCustomIdentifier = function(customIdentifier)
{
	this.m_customIdentifier = customIdentifier;
};
oFF.QDeserializeListenerPair.prototype.setupExt = function(listener, customIdentifier)
{
	this.m_listenerWeakReference = oFF.XWeakReferenceUtil.getWeakRef(listener);
	this.m_customIdentifier = customIdentifier;
};
oFF.QDeserializeListenerPair.prototype.toString = function()
{
	if (oFF.isNull(this.m_listenerWeakReference))
	{
		return "[Empty]";
	}
	return this.m_listenerWeakReference.toString();
};

oFF.QQueryCellPosition = function() {};
oFF.QQueryCellPosition.prototype = new oFF.XObject();
oFF.QQueryCellPosition.prototype._ff_c = "QQueryCellPosition";

oFF.QQueryCellPosition.createCellPosition = function(member)
{
	let queryCellPosition = new oFF.QQueryCellPosition();
	queryCellPosition.m_member = member;
	return queryCellPosition;
};
oFF.QQueryCellPosition.prototype.m_member = null;
oFF.QQueryCellPosition.prototype.getDimensionName = function()
{
	return this.m_member.getDimension().getName();
};
oFF.QQueryCellPosition.prototype.getMemberName = function()
{
	return this.m_member.getName();
};
oFF.QQueryCellPosition.prototype.releaseObject = function()
{
	this.m_member = null;
	oFF.XObject.prototype.releaseObject.call( this );
};

oFF.OlapDimensionGroupInfo = function() {};
oFF.OlapDimensionGroupInfo.prototype = new oFF.XObject();
oFF.OlapDimensionGroupInfo.prototype._ff_c = "OlapDimensionGroupInfo";

oFF.OlapDimensionGroupInfo.createInfo = function(internalName, displayName, displayText)
{
	let obj = new oFF.OlapDimensionGroupInfo();
	obj.m_internalName = internalName;
	obj.m_displayName = displayName;
	obj.m_displayText = displayText;
	obj.m_children = oFF.XList.create();
	return obj;
};
oFF.OlapDimensionGroupInfo.prototype.m_children = null;
oFF.OlapDimensionGroupInfo.prototype.m_displayName = null;
oFF.OlapDimensionGroupInfo.prototype.m_displayText = null;
oFF.OlapDimensionGroupInfo.prototype.m_internalName = null;
oFF.OlapDimensionGroupInfo.prototype.m_isDimension = false;
oFF.OlapDimensionGroupInfo.prototype.addChild = function(info)
{
	this.m_children.add(info);
};
oFF.OlapDimensionGroupInfo.prototype.getChildren = function()
{
	return this.m_children;
};
oFF.OlapDimensionGroupInfo.prototype.getDisplayName = function()
{
	return this.m_displayName;
};
oFF.OlapDimensionGroupInfo.prototype.getDisplayText = function()
{
	return this.m_displayText;
};
oFF.OlapDimensionGroupInfo.prototype.getInternalName = function()
{
	return this.m_internalName;
};
oFF.OlapDimensionGroupInfo.prototype.isDimension = function()
{
	return this.m_isDimension;
};
oFF.OlapDimensionGroupInfo.prototype.releaseObject = function()
{
	this.m_isDimension = false;
	this.m_displayName = null;
	this.m_displayText = null;
	this.m_children = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_children);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.OlapDimensionGroupInfo.prototype.setIsDimension = function(isDimension)
{
	this.m_isDimension = isDimension;
};
oFF.OlapDimensionGroupInfo.prototype.toString = function()
{
	return this.getDisplayName();
};

oFF.CalculatedDimensionPrequeryBuilder = {

	FAM_MEASURE_FILTER:"fam_measure_filter",
	FAM_SECONDARY_MEASURE_FILTER:"fam_secondary_measure_filter",
	addPartKeysToResultSetFields:function(dimension, field)
	{
			if (oFF.notNull(dimension) && dimension.isCompound() && oFF.notNull(field) && (field.isKeyField() || field.isDefaultTextField()))
		{
			oFF.XStream.ofString(dimension.getKeyAttributesNames()).map((partKey) => {
				return dimension.getFieldByName(partKey.getString());
			}).filterNullValues().forEach((partKeyField) => {
				dimension.getResultSetFields().add(partKeyField);
			});
		}
	},
	addSSFAMMeasureContextFilter:function(accountOrMeasureDimension, measureContext, filterName)
	{
			let cartesianList = oFF.QFactory.createFilterCartesianListWithField(accountOrMeasureDimension, accountOrMeasureDimension.getKeyField());
		let iterator = measureContext.getIterator();
		while (iterator.hasNext())
		{
			let measureFilter = cartesianList.addNewCartesianElement();
			measureFilter.configureSingleParameterExpression(oFF.XStringValue.create(iterator.next()), oFF.ComparisonOperator.EQUAL);
		}
		cartesianList.setHierarchyName(accountOrMeasureDimension.getHierarchyName());
		accountOrMeasureDimension.getQueryModel().getFilter().linkFilterElement(filterName, cartesianList);
	},
	applyFiltersFromMainQuery:function(context, preQueryModel, calculatedDimension, isMBCD)
	{
			let calcDimType = calculatedDimension.getDimensionType();
		if ((calcDimType !== oFF.DimensionType.FORMULA_CALCULATED_DIMENSION || isMBCD) && !calculatedDimension.isApplyParentExternalFilters())
		{
			return;
		}
		let baseQueryModel = context.getQueryManager().getQueryModel();
		if (baseQueryModel.getQueryManager().getPreQueryName() === null)
		{
			let allDimensionsIter = baseQueryModel.getLoadedDimensions().getIterator();
			while (allDimensionsIter.hasNext())
			{
				let dimension = allDimensionsIter.next();
				if (dimension.getDimensionType().isTypeOf(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION))
				{
					let dependentCalcDimsIter = dimension.getDependentCalculatedDimensions().getIterator();
					while (dependentCalcDimsIter.hasNext())
					{
						let dependentCalcDim = dependentCalcDimsIter.next();
						if (oFF.XString.isEqual(dependentCalcDim.getName(), calculatedDimension.getName()))
						{
							return;
						}
					}
				}
			}
		}
		else
		{
			return;
		}
		let structureMembers = oFF.XListOfNameObject.create();
		let accountDimension = baseQueryModel.getAccountDimension();
		structureMembers.addAll(baseQueryModel.getPrimaryCalculationDimension().getLoadedStructureMembers());
		if (oFF.notNull(accountDimension))
		{
			structureMembers.addAll(baseQueryModel.getSecondaryCalculationDimension().getLoadedStructureMembers());
		}
		let structureMembersIter = structureMembers.getIterator();
		while (structureMembersIter.hasNext())
		{
			let structureMember = structureMembersIter.next();
			if (oFF.isNull(structureMember) || structureMember.isReleased())
			{
				continue;
			}
			let hasIgnoreExternalDimensions = structureMember.getIgnoredExternalDimensions().size() > 0;
			if (structureMember.getMemberType() === oFF.MemberType.VARIANCE && !hasIgnoreExternalDimensions)
			{
				hasIgnoreExternalDimensions = structureMember.getBaseIgnoredExternalDimensions().size() > 0 || structureMember.getReferenceIgnoredExternalDimensions().size() > 0;
			}
			if (hasIgnoreExternalDimensions)
			{
				let structureMemberDependencies = oFF.XHashSetOfString.create();
				structureMemberDependencies.add(structureMember.getAliasOrMemberName());
				structureMemberDependencies.addAll(structureMember.getNestedDependentMemberNames(context, null, false));
				let structureMemberDependenciesIter = structureMemberDependencies.getIterator();
				while (structureMemberDependenciesIter.hasNext())
				{
					let structureMemberDependencyName = structureMemberDependenciesIter.next();
					let structureMemberDependency = baseQueryModel.getPrimaryCalculationDimension().getStructureMemberByAliasOrMember(structureMemberDependencyName);
					if (oFF.isNull(structureMemberDependency))
					{
						structureMemberDependency = baseQueryModel.getOlapEnv().getClientQueryObjectManager().getStructuredMember(structureMemberDependencyName, structureMember.getStorageName(), true);
					}
					if (oFF.isNull(structureMemberDependency) && oFF.notNull(accountDimension))
					{
						structureMemberDependency = baseQueryModel.getSecondaryCalculationDimension().getStructureMemberByAliasOrMember(structureMemberDependencyName);
						if (oFF.isNull(structureMemberDependency))
						{
							structureMemberDependency = baseQueryModel.getOlapEnv().getClientQueryObjectManager().getStructuredMember(structureMemberDependencyName, structureMember.getStorageName(), false);
						}
					}
					if (oFF.notNull(structureMemberDependency))
					{
						let topLevelDependentFieldNames = structureMemberDependency.getTopLevelDependentFieldNames(context);
						let topLevelDependentFieldNamesIter = topLevelDependentFieldNames.getIterator();
						while (topLevelDependentFieldNamesIter.hasNext())
						{
							let topLevelDependentFieldName = topLevelDependentFieldNamesIter.next();
							let dependentDimension = baseQueryModel.getFieldByName(topLevelDependentFieldName).getDimension();
							if (oFF.isNull(dependentDimension))
							{
								dependentDimension = baseQueryModel.getOlapEnv().getClientQueryObjectManager().getFormulaCalcDimProperties(topLevelDependentFieldName, structureMemberDependency.getStorageName());
							}
							if (oFF.notNull(dependentDimension) && dependentDimension.getDimensionType() === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION && oFF.XString.isEqual(dependentDimension.getName(), calculatedDimension.getName()))
							{
								return;
							}
						}
					}
				}
			}
		}
		let baseQueryFilter = baseQueryModel.getFilter();
		let preQueryFilter = preQueryModel.getFilter();
		if (baseQueryFilter.isTmpFilterInitialized())
		{
			let baseQueryTmpFilter = baseQueryFilter.getTmpFilter();
			if (oFF.CalculatedDimensionPrequeryBuilder.canApplyFilterFromMainQuery(preQueryModel, baseQueryTmpFilter))
			{
				if (baseQueryTmpFilter.isComplexFilter())
				{
					preQueryFilter.getTmpFilter().setComplexRoot(baseQueryTmpFilter.getComplexRoot());
				}
				else if (baseQueryTmpFilter.isCartesianProduct())
				{
					preQueryFilter.getTmpFilter().setCartesianProduct(baseQueryTmpFilter.getCartesianProduct());
				}
			}
		}
		if (baseQueryFilter.getLinkedFilters() !== null)
		{
			let backProjectionFilterIds = baseQueryFilter.getBackProjectionFilterIds();
			let linkedFiltersIter = baseQueryFilter.getLinkedFilters().getIterator();
			while (linkedFiltersIter.hasNext())
			{
				let linkedFilter = linkedFiltersIter.next();
				let linkedFilterDimensionsInUse = linkedFilter.getDimensionsUsedInFilter();
				let isAccountDimensionOrMeasureDimensionFilter = false;
				if (oFF.notNull(linkedFilterDimensionsInUse))
				{
					let primaryCalcDimension = baseQueryModel.getPrimaryCalculationDimension();
					let secondaryCalcDimension = baseQueryModel.getSecondaryCalculationDimension();
					isAccountDimensionOrMeasureDimensionFilter = oFF.notNull(primaryCalcDimension) && linkedFilterDimensionsInUse.contains(primaryCalcDimension.getName()) || oFF.notNull(secondaryCalcDimension) && linkedFilterDimensionsInUse.contains(secondaryCalcDimension.getName());
				}
				if (!isAccountDimensionOrMeasureDimensionFilter && (oFF.isNull(backProjectionFilterIds) || !backProjectionFilterIds.contains(linkedFilter.getUniqueId())) && oFF.CalculatedDimensionPrequeryBuilder.canApplyFilterFromMainQuery(preQueryModel, linkedFilter))
				{
					if (linkedFilter.getName() !== null)
					{
						preQueryFilter.linkFilter(linkedFilter.getName(), linkedFilter);
					}
					else
					{
						preQueryFilter.linkFilter(linkedFilter.getUniqueId(), linkedFilter);
					}
				}
			}
		}
	},
	buildCalculatedAttributes:function(queryModel, calculatedAttribute, formulaItemInfo, calcDimType)
	{
			let cmds = queryModel.getConvenienceCommands();
		let fieldNames = formulaItemInfo.getAttributeNames();
		let fieldsIter = fieldNames.getIterator();
		while (fieldsIter.hasNext())
		{
			let fieldName = fieldsIter.next();
			let field = queryModel.getFieldByNameOrAlias(fieldName);
			if (oFF.isNull(field))
			{
				continue;
			}
			let formulaAttributeDim;
			let fieldDimension = field.getDimension();
			if (field.isKeyField() || field.isDefaultTextField())
			{
				formulaAttributeDim = oFF.CalculatedDimensionPrequeryBuilder.moveDimensionToRowsAndFlatten(cmds, fieldDimension);
				oFF.CalculatedDimensionPrequeryBuilder.addPartKeysToResultSetFields(fieldDimension, field);
			}
			else if (oFF.notNull(fieldDimension) && fieldDimension.getDimensionType().isTypeOf(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION))
			{
				formulaAttributeDim = cmds.moveDimensionToRows(fieldDimension.getName());
			}
			else
			{
				formulaAttributeDim = cmds.moveDimensionToRows(fieldName);
			}
			if (oFF.notNull(formulaAttributeDim) && formulaAttributeDim.getTopEntries() > 0)
			{
				formulaAttributeDim.setTopEntries(0);
			}
		}
		let measureDimension = queryModel.getMeasureDimension();
		let calculatedAttributeName = calculatedAttribute.getName();
		if (measureDimension.getStructureMember(calculatedAttributeName) !== null)
		{
			measureDimension.removeMeasure(calculatedAttributeName);
		}
		let attributeFormulaMeasure = measureDimension.addNewFormulaMeasure(calculatedAttributeName, null);
		if (attributeFormulaMeasure.isCustomDefaultSolveOrderApplicable() && queryModel.hasUserDefinedMeasures())
		{
			attributeFormulaMeasure.setSolveOrder(oFF.QStructureMemberSolveOrder.CLIENT_DEFINED_FORMULA_CALCULATED_DIMENSION);
		}
		attributeFormulaMeasure.setNumericScale(7);
		let accountDimension = queryModel.getAccountDimension();
		if (oFF.notNull(accountDimension) && formulaItemInfo.getMemberNames().hasElements())
		{
			let accountDimensionName = accountDimension.getName();
			cmds.moveDimensionToRows(accountDimensionName);
			if (calcDimType === oFF.DimensionType.MEASURE_BASED_FILTER_CALCULATED_DIMENSION)
			{
				let accountMemberName = formulaItemInfo.getMemberNames().get(0);
				let hierarchyAndMemberName = oFF.QDimensionMemberNameUtil.parseHierarchyAndFlatMemberName(accountMemberName);
				if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyAndMemberName.getFirstString()))
				{
					cmds.setDimensionHierarchy(accountDimensionName, hierarchyAndMemberName.getFirstString(), true, 0);
				}
				else
				{
					cmds.setDimensionHierarchy(accountDimensionName, accountDimension.getDefaultHierarchyName(), true, 0);
				}
			}
			else
			{
				let accountMemberName = formulaItemInfo.getMemberNames().get(0);
				let hierarchyAndMemberName = oFF.QDimensionMemberNameUtil.parseHierarchyAndFlatMemberName(accountMemberName);
				let firstStringOfHierarchyName = oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyAndMemberName.getFirstString());
				if (accountDimension.isHierarchyAssignedAndActive() && (!firstStringOfHierarchyName || oFF.XString.isEqual(accountDimension.getHierarchyName(), hierarchyAndMemberName.getFirstString())))
				{
					accountDimension.setInitialDrillLevel(0);
				}
				else
				{
					let hierarchies = accountDimension.getHierarchies();
					if (oFF.notNull(hierarchies))
					{
						let hierarchyObjects = hierarchies.getObjects();
						if (hierarchyObjects.size() > 0)
						{
							if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyAndMemberName.getFirstString()))
							{
								cmds.setDimensionHierarchy(accountDimensionName, hierarchyAndMemberName.getFirstString(), true, 0);
							}
							else
							{
								cmds.setDimensionHierarchy(accountDimensionName, hierarchyObjects.get(0).getHierarchyName(), true, 0);
							}
						}
					}
				}
			}
			let memberName = formulaItemInfo.getMemberNames().get(0);
			let accountMember = accountDimension.getStructureMemberByAliasOrMember(memberName);
			let accountType = null;
			let memberType = null;
			if (oFF.notNull(accountMember))
			{
				accountDimension.getTagging().remove(oFF.QTransientConstants.createIsTransientMemberTag(accountMember.getAliasOrMemberName()));
				accountType = accountMember.getAccountType();
				memberType = accountMember.getMemberType();
				if (oFF.isNull(accountType))
				{
					let dependentMembers = accountMember.getNestedDependentMemberNames(accountMember.getContext(), null, false);
					for (let i = 0; i < dependentMembers.size(); i++)
					{
						let dependentMemberName = dependentMembers.get(i);
						accountMember = accountDimension.getStructureMemberByAliasOrMember(dependentMemberName);
						if (oFF.notNull(accountMember))
						{
							if (oFF.isNull(accountType))
							{
								accountType = accountMember.getAccountType();
							}
							else if (accountMember.getAccountType() !== null && accountMember.getAccountType() !== accountType)
							{
								accountType = null;
								break;
							}
						}
					}
				}
			}
			let signFlipSignedData = calculatedAttribute.isAutoSignFlip() && oFF.notNull(accountType) && (accountType === oFF.AccountType.INC || accountType === oFF.AccountType.LEQ) && oFF.notNull(memberType) && memberType !== oFF.MemberType.FORMULA && memberType !== oFF.MemberType.VARIANCE && memberType !== oFF.MemberType.EXCEPTION_AGGREGATION;
			attributeFormulaMeasure.setFormula(oFF.FormulaItemUtils.convertFormulaMembersToSignedData(calculatedAttribute.getFormulaItem(), signFlipSignedData, calculatedAttribute.getCrossCalculationMeasure()));
			let secondaryMember = queryModel.getSecondaryCalculationDimension() !== null ? queryModel.getSecondaryCalculationDimension().getStructureMemberByAliasOrMember(memberName) : null;
			cmds.addSingleMemberFilterByDimension(oFF.notNull(secondaryMember) ? queryModel.getSecondaryCalculationDimension() : accountDimension, formulaItemInfo.getMemberNames().get(0), oFF.ComparisonOperator.EQUAL);
		}
		else
		{
			attributeFormulaMeasure.setFormula(calculatedAttribute.getFormulaItem());
		}
		cmds.addSingleMemberFilterByDimension(measureDimension, attributeFormulaMeasure.getName(), oFF.ComparisonOperator.EQUAL);
	},
	buildCalculatedDimensionPreQuery:function(context, originalCalculatedDimension)
	{
			let baseQueryManager = originalCalculatedDimension.getQueryManager();
		let preQueryManager = baseQueryManager.cloneQueryManagerExt(oFF.QueryCloneMode.CURRENT_STATE);
		let preQueryModel = preQueryManager.getQueryModel();
		if (originalCalculatedDimension.isDisableSpatialExtendedDimensions())
		{
			let datasource = preQueryModel.getDataSource();
			let extendedDimensions = datasource.getExtendedDimensionsBase();
			for (let i = extendedDimensions.size() - 1; i >= 0; i--)
			{
				if (extendedDimensions.get(i).getDimensionType() === oFF.DimensionType.GIS_DIMENSION)
				{
					extendedDimensions.removeAt(i);
				}
			}
		}
		let cmds = preQueryManager.getConvenienceCommands();
		let calcDimType = originalCalculatedDimension.getDimensionType();
		let primaryMeasureDimension = preQueryModel.getPrimaryCalculationDimension();
		oFF.CalculatedDimensionPrequeryBuilder.removeCustomMembers(originalCalculatedDimension, preQueryModel);
		preQueryManager.setOffsetRows(0);
		preQueryManager.setMaxRows(-1);
		preQueryManager.setOffsetColumns(0);
		preQueryManager.setMaxColumns(-1);
		preQueryManager.resetMaxResultRecords();
		preQueryManager.setResultSetPersistanceTargetTable(null);
		preQueryManager.setResultSetPersistanceTargetSchema(null);
		preQueryManager.getTagging().put(oFF.QStateConstants.TAG_HAS_TRANSIENT_DEPS, "");
		let calculatedDimension = oFF.QFormulaCalculatedDimension.createCopyOfFormulaCalculatedDimension(preQueryModel, originalCalculatedDimension, true, true);
		preQueryModel.getFormulaExceptionManager().clear();
		if (calculatedDimension.getCurrency() !== null)
		{
			oFF.CalculatedDimensionPrequeryBuilder.updateCurrencyInPrequery(calculatedDimension.getCurrency(), preQueryManager);
		}
		preQueryModel.toggleReturnedDataSelection(oFF.ReturnedDataSelection.TUPLE_ELEMENT_IDS, true);
		cmds.moveMeasureDimensionToAxis(oFF.AxisType.COLUMNS);
		oFF.CalculatedDimensionPrequeryBuilder.buildPreQueryFilter(calculatedDimension, preQueryModel);
		let dependentCalculatedDimensions = calculatedDimension.getDependentCalculatedDimensions();
		let dependentCalculatedDimensionsIter = dependentCalculatedDimensions.getIterator();
		while (dependentCalculatedDimensionsIter.hasNext())
		{
			let dependentCalculatedDimension = dependentCalculatedDimensionsIter.next();
			let tagging = dependentCalculatedDimension.getTagging();
			let targetAxis = tagging.getByKey(oFF.QTransientConstants.TAG_TARGET_AXIS);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(targetAxis))
			{
				preQueryModel.addDimension(dependentCalculatedDimension);
			}
			if (oFF.XString.isEqual(targetAxis, oFF.QTransientConstants.TAG_TARGET_AXIS_ROWS))
			{
				preQueryModel.getRowsAxis().add(dependentCalculatedDimension);
			}
			else if (oFF.XString.isEqual(targetAxis, oFF.QTransientConstants.TAG_TARGET_AXIS_COLUMNS))
			{
				preQueryModel.getColumnsAxis().add(dependentCalculatedDimension);
			}
			else
			{
				preQueryModel.getFreeAxis().add(dependentCalculatedDimension);
			}
			if (calculatedDimension.getAggregationFieldNames().isEmpty())
			{
				let joinFields = dependentCalculatedDimension.getJoinFields();
				let joinFieldsIter = joinFields.getIterator();
				while (joinFieldsIter.hasNext())
				{
					let joinField = joinFieldsIter.next();
					let dimension = preQueryModel.getDimensionByName(joinField.getLocaleFieldName());
					oFF.CalculatedDimensionPrequeryBuilder.moveDimensionToRowsAndFlatten(cmds, dimension);
				}
			}
		}
		let isMeasureGroupingCalculatedDimension = false;
		if (calcDimType === oFF.DimensionType.FILTER_ACROSS_MODELS_CALCULATED_DIMENSION)
		{
			oFF.CalculatedDimensionPrequeryBuilder.optimizeSSFAMPreQueryMeasureMember(primaryMeasureDimension, preQueryModel.getSecondaryCalculationDimension(), calculatedDimension);
		}
		else
		{
			let fieldsIter = calculatedDimension.getFieldIterator();
			while (fieldsIter.hasNext())
			{
				let calculatedAttribute = fieldsIter.next();
				let formulaItemInfo = oFF.FormulaItemUtils.getFieldNamesFromFormula(calculatedAttribute.getFormulaItem());
				oFF.CalculatedDimensionPrequeryBuilder.buildCalculatedAttributes(preQueryModel, calculatedAttribute, formulaItemInfo, calcDimType);
				if (formulaItemInfo.getMemberNames().hasElements())
				{
					isMeasureGroupingCalculatedDimension = true;
				}
			}
			if (calcDimType === oFF.DimensionType.MEASURE_BASED_FILTER_CALCULATED_DIMENSION)
			{
				let measureDimension = preQueryModel.getMeasureDimension();
				let structureMember = measureDimension.getStructureMember(calculatedDimension.getName());
				let dependentMeasures = oFF.XHashSetOfString.create();
				if (structureMember.getOlapComponentType() === oFF.MemberType.FORMULA)
				{
					let formulaMeasure = structureMember;
					let formula = formulaMeasure.getFormula();
					oFF.CalculatedDimensionPrequeryBuilder.getDependentCustomMeasures(formula, dependentMeasures, measureDimension);
				}
				dependentMeasures.add(calculatedDimension.getName());
				let dependentMembersIt = calculatedDimension.getDependentCustomMembers().getIterator();
				while (dependentMembersIt.hasNext())
				{
					let depMember = dependentMembersIt.next();
					dependentMeasures.add(depMember.getName());
					let nestedDepMembersIt = depMember.getNestedDependentMemberNames(depMember.getContext(), null, false).getIterator();
					while (nestedDepMembersIt.hasNext())
					{
						let nestedDepMember = nestedDepMembersIt.next();
						dependentMeasures.add(nestedDepMember);
					}
					let nestedDepMeasuresIt = depMember.getNestedDependentCrossCalculationMeasureNames(depMember.getContext()).getIterator();
					while (nestedDepMeasuresIt.hasNext())
					{
						let nestedDepMeasure = nestedDepMeasuresIt.next();
						dependentMeasures.add(nestedDepMeasure);
					}
				}
				let calcFieldsItr = calculatedDimension.getFields().getIterator();
				while (calcFieldsItr.hasNext())
				{
					let calcField = calcFieldsItr.next();
					let crossCalcMeasure = calcField.getCrossCalculationMeasure();
					if (oFF.notNull(crossCalcMeasure))
					{
						dependentMeasures.add(crossCalcMeasure);
					}
				}
				primaryMeasureDimension.removeCustomMembersWithWhiteList(dependentMeasures);
				if (preQueryModel.isUniversalAccountModel())
				{
					oFF.CalculatedDimensionPrequeryBuilder.optimizeMBFPreQueryMeasureMember(preQueryModel.getSecondaryCalculationDimension(), calculatedDimension, dependentMeasures);
				}
				else
				{
					oFF.CalculatedDimensionPrequeryBuilder.optimizeMBFPreQueryMeasureMember(primaryMeasureDimension, calculatedDimension, dependentMeasures);
				}
			}
		}
		oFF.CalculatedDimensionPrequeryBuilder.applyFiltersFromMainQuery(context, preQueryModel, calculatedDimension, isMeasureGroupingCalculatedDimension);
		oFF.CalculatedDimensionPrequeryBuilder.processAggregationDimensions(calculatedDimension, preQueryModel, originalCalculatedDimension);
		oFF.CalculatedDimensionPrequeryBuilder.copyExternalVariableRepresentations(baseQueryManager, preQueryManager);
		let axis = preQueryModel.getAxis(oFF.AxisType.ROWS);
		if (oFF.notNull(axis))
		{
			for (let j = 0; j < axis.size(); j++)
			{
				let dim = axis.get(j);
				dim.setResultVisibilityByElement(oFF.ResultStructureElement.TOTAL, oFF.ResultVisibility.HIDDEN);
			}
		}
		return preQueryModel;
	},
	buildPreQueryFilter:function(calculatedDimension, preQueryModel)
	{
			let filterContext = calculatedDimension.getFilterContext();
		let filterContextRoot = filterContext.getComplexRoot();
		let additionalFilterContext = calculatedDimension.getAdditionalFilterContext();
		let preQueryFilter = preQueryModel.getFilter();
		preQueryFilter.getVisibilityFilter().clearCellValueFilter();
		let calcDimType = calculatedDimension.getDimensionType();
		let calcDimProperties = preQueryModel.getOlapEnv().getClientQueryObjectManager().getFormulaCalcDimProperties(calculatedDimension.getName(), preQueryModel.getQueryManager().getClientQueryObjectStorageName());
		let calcDimParentRootContext = calculatedDimension.getParentRootContext();
		if (calcDimType === oFF.DimensionType.MEASURE_BASED_FILTER_CALCULATED_DIMENSION)
		{
			preQueryFilter.getVisibilityFilter().addNewCellValueFilter("1", null, oFF.ComparisonOperator.EQUAL);
		}
		if (filterContext.isComplexFilter())
		{
			preQueryFilter.getDynamicFilter().setComplexRoot(filterContextRoot);
		}
		else
		{
			preQueryFilter.getDynamicFilter().setCartesianProduct(filterContext.getCartesianProduct());
		}
		preQueryFilter.unlinkFilters();
		let filterLayers = calculatedDimension.getLayeredFilters();
		let filterKeyIterator = filterLayers.toReadOnly().getKeysAsIterator();
		while (filterKeyIterator.hasNext())
		{
			let fKey = filterKeyIterator.next();
			preQueryFilter.linkFilter(fKey, filterLayers.getLayer(fKey));
		}
		if (oFF.notNull(additionalFilterContext) && (oFF.isNull(calcDimProperties) || calcDimProperties.isApplyAdditionalFilterContext() || calculatedDimension.getProperties() !== null && calculatedDimension.getProperties().isApplyAdditionalFilterContext()))
		{
			if (additionalFilterContext.getName() !== null)
			{
				preQueryFilter.linkFilter(additionalFilterContext.getName(), additionalFilterContext);
			}
			else
			{
				preQueryFilter.linkFilter(additionalFilterContext.getUniqueId(), additionalFilterContext);
			}
		}
		else if (oFF.notNull(calcDimProperties) && !calcDimProperties.isApplyAdditionalFilterContext() && oFF.notNull(calcDimParentRootContext))
		{
			let linkedFilters = calcDimParentRootContext.getQueryModel().getFilter().getLinkedFilters();
			let externalFilterKeysList = linkedFilters.getKeysAsReadOnlyList();
			for (let i = 0; i < calcDimProperties.getFilterIdsToApply().size(); i++)
			{
				let externalFilterId = calcDimProperties.getFilterIdsToApply().get(i);
				for (let j = 0; j < externalFilterKeysList.size(); j++)
				{
					let filterKey = externalFilterKeysList.get(j);
					if (oFF.XStringUtils.containsString(filterKey, externalFilterId, false))
					{
						let filterExpressionFromFilterId = linkedFilters.getByKey(filterKey);
						if (oFF.notNull(filterExpressionFromFilterId))
						{
							if (filterExpressionFromFilterId.getName() !== null)
							{
								preQueryFilter.linkFilter(filterExpressionFromFilterId.getName(), filterExpressionFromFilterId);
							}
							else
							{
								preQueryFilter.linkFilter(filterExpressionFromFilterId.getUniqueId(), filterExpressionFromFilterId);
							}
						}
					}
					else if (oFF.XStringUtils.containsString(filterKey, oFF.QTransientConstants.MBF_FILTER_ID, false))
					{
						let filtermbfExpressionFromFilterId = linkedFilters.getByKey(filterKey);
						if (oFF.notNull(filtermbfExpressionFromFilterId))
						{
							if (oFF.XStringUtils.containsString(filtermbfExpressionFromFilterId.getTagging().getByKey(oFF.QTransientConstants.IC_ELEMENT_ID), externalFilterId, false))
							{
								if (filtermbfExpressionFromFilterId.getName() !== null)
								{
									preQueryFilter.linkFilter(filtermbfExpressionFromFilterId.getName(), filtermbfExpressionFromFilterId);
								}
								else
								{
									preQueryFilter.linkFilter(filtermbfExpressionFromFilterId.getUniqueId(), filtermbfExpressionFromFilterId);
								}
							}
						}
					}
				}
			}
		}
	},
	canApplyFilterFromMainQuery:function(preQueryModel, filter)
	{
			if (oFF.QFilterUtil.containsFilterComponentOfType(filter, oFF.FilterComponentType.TRANSIENT_FILTER, true))
		{
			return false;
		}
		let usedDimensions = oFF.XHashSetOfString.create();
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedInContainer(filter, usedDimensions);
		let usedDimensionsIter = usedDimensions.getIterator();
		while (usedDimensionsIter.hasNext())
		{
			let usedDimension = preQueryModel.getDimensionByName(usedDimensionsIter.next());
			if (oFF.isNull(usedDimension) || usedDimension.getDimensionType() === oFF.DimensionType.CALCULATED_DIMENSION)
			{
				return false;
			}
		}
		return true;
	},
	copyExternalVariableRepresentations:function(baseQueryManager, preQueryManager)
	{
			let baseVariables = baseQueryManager.getVariables();
		let prequeryVariables = preQueryManager.getVariables();
		if (oFF.notNull(baseVariables) && oFF.notNull(prequeryVariables))
		{
			let iterator = prequeryVariables.getIterator();
			while (iterator.hasNext())
			{
				let variable = iterator.next();
				let name = variable.getName();
				let baseVariable = baseVariables.getByKey(name);
				if (oFF.notNull(baseVariable) && baseVariable.getExternalRepresentation() !== null)
				{
					variable.setExternalRepresentation(baseVariable.getExternalRepresentation());
				}
			}
		}
	},
	getDependentCustomMeasures:function(formula, dependentMeasures, primaryMeasureDimension)
	{
			if (oFF.notNull(formula))
		{
			let componentType = formula.getComponentType();
			if (componentType === oFF.OlapComponentType.FORMULA_FUNCTION)
			{
				let formulaFunction = formula;
				let childrenIterator = formulaFunction.getChildrenIterator();
				while (childrenIterator.hasNext())
				{
					oFF.CalculatedDimensionPrequeryBuilder.getDependentCustomMeasures(childrenIterator.next(), dependentMeasures, primaryMeasureDimension);
				}
			}
			else if (componentType === oFF.OlapComponentType.FORMULA_ITEM_MEMBER)
			{
				let dependentMemberName = formula.getMemberName();
				let dependentMember = primaryMeasureDimension.getStructureMember(dependentMemberName);
				if (oFF.notNull(dependentMember) && dependentMember.getMemberType().isCustomMember())
				{
					dependentMeasures.add(dependentMemberName);
				}
			}
			else if (componentType === oFF.OlapComponentType.FORMULA_OPERATION)
			{
				let formulaOperation = formula;
				oFF.CalculatedDimensionPrequeryBuilder.getDependentCustomMeasures(formulaOperation.getLeftSide(), dependentMeasures, primaryMeasureDimension);
				oFF.CalculatedDimensionPrequeryBuilder.getDependentCustomMeasures(formulaOperation.getRightSide(), dependentMeasures, primaryMeasureDimension);
			}
		}
		return dependentMeasures;
	},
	moveDimensionToRowsAndFlatten:function(cmds, dimension)
	{
			if (dimension.supportsHierarchy() && dimension.isHierarchyActive() && dimension.getDimensionType() !== oFF.DimensionType.ACCOUNT)
		{
			dimension.setHierarchyActive(false);
			let pathField = dimension.getHierarchyPathField();
			if (oFF.notNull(pathField))
			{
				pathField.setAlwaysRequested(false);
			}
		}
		if (dimension.getTopEntries() > 0)
		{
			dimension.setTopEntries(0);
		}
		return cmds.moveDimensionToRows(dimension.getName());
	},
	optimizeMBFPreQueryMeasureMember:function(measureDimension, calculatedDimension, dependentMeasures)
	{
			let dimensionType = measureDimension.getDimensionType();
		if (dimensionType !== oFF.DimensionType.ACCOUNT)
		{
			let structureLayout = measureDimension.getStructureLayout();
			structureLayout.clear();
			let structureMember = measureDimension.getStructureMember(calculatedDimension.getName());
			if (oFF.notNull(structureMember))
			{
				structureLayout.add(structureMember);
			}
			let dependendMeasureIt = dependentMeasures.getIterator();
			while (dependendMeasureIt.hasNext())
			{
				let dependentStructMember = measureDimension.getStructureMember(dependendMeasureIt.next());
				if (oFF.notNull(dependentStructMember))
				{
					structureLayout.add(dependentStructMember);
				}
			}
			if (dependentMeasures.size() === 1)
			{
				measureDimension.getFilter().clear();
			}
		}
	},
	optimizeSSFAMPreQueryMeasureMember:function(primaryMeasureDimension, secondaryMeasureDimension, calculatedDimension)
	{
			let famCalcDim = calculatedDimension;
		let measuresToRequest = oFF.XList.create();
		let measureContexts = oFF.XList.create();
		measureContexts.addAll(famCalcDim.getMeasureNames());
		let dependentCustomMembers = famCalcDim.getDependentCustomMembers();
		for (let i = 0; i < dependentCustomMembers.size(); i++)
		{
			let dependentCustomMember = dependentCustomMembers.get(i);
			let famCalcDimDataSource = famCalcDim.getDataSource();
			let dependentMemberDataSource = dependentCustomMember.getDataSource();
			let dependentCustomMemberName = dependentCustomMember.getAliasOrMemberName();
			if (famCalcDimDataSource === dependentMemberDataSource && !measureContexts.contains(dependentCustomMemberName))
			{
				measureContexts.add(dependentCustomMemberName);
			}
		}
		let cmds = primaryMeasureDimension.getQueryModel().getConvenienceCommands();
		if (measureContexts.isEmpty())
		{
			if (primaryMeasureDimension.getDimensionType() === oFF.DimensionType.ACCOUNT)
			{
				let measureDimension = primaryMeasureDimension.getQueryModel().getMeasureDimension();
				measuresToRequest.add(measureDimension.getBasicStructureMembers().getByKey("SignedData"));
			}
			else
			{
				let dummyMeasure = primaryMeasureDimension.addNewFormulaMeasure("constant_fam_id", null);
				dummyMeasure.setFormula(oFF.QFactory.createFormulaConstantWithIntValue(null, 1));
				measuresToRequest.add(dummyMeasure);
				cmds.addSingleMemberFilterByDimension(primaryMeasureDimension, "constant_fam_id", oFF.ComparisonOperator.EQUAL);
			}
		}
		else
		{
			if (primaryMeasureDimension.getDimensionType() === oFF.DimensionType.ACCOUNT)
			{
				oFF.CalculatedDimensionPrequeryBuilder.addSSFAMMeasureContextFilter(primaryMeasureDimension, measureContexts, oFF.CalculatedDimensionPrequeryBuilder.FAM_MEASURE_FILTER);
			}
			else
			{
				let measureIt = measureContexts.getIterator();
				while (measureIt.hasNext())
				{
					let measureName = measureIt.next();
					measuresToRequest.add(primaryMeasureDimension.getStructureMember(measureName));
					cmds.addSingleMemberFilterByDimension(primaryMeasureDimension, measureName, oFF.ComparisonOperator.EQUAL);
				}
			}
		}
		if (measuresToRequest.hasElements())
		{
			let structureLayout = primaryMeasureDimension.getStructureLayout();
			structureLayout.clear();
			structureLayout.addAll(measuresToRequest);
		}
		if (oFF.notNull(secondaryMeasureDimension))
		{
			let secondaryMeasureContext = oFF.XList.create();
			secondaryMeasureContext.addAll(famCalcDim.getSecondaryMeasureNames());
			if (secondaryMeasureContext.isEmpty() && secondaryMeasureDimension.getQueryModel().isUniversalAccountModel())
			{
				let dummySecondaryMeasure = secondaryMeasureDimension.addNewFormulaMeasure("constant_secondary_fam_id", null);
				dummySecondaryMeasure.setFormula(oFF.QFactory.createFormulaConstantWithIntValue(null, 1));
				measuresToRequest.add(dummySecondaryMeasure);
				let secondaryStructureLayout = secondaryMeasureDimension.getStructureLayout();
				secondaryStructureLayout.clear();
				secondaryStructureLayout.add(dummySecondaryMeasure);
				secondaryMeasureContext.add(dummySecondaryMeasure.getName());
			}
			if (!secondaryMeasureContext.isEmpty())
			{
				oFF.CalculatedDimensionPrequeryBuilder.addSSFAMMeasureContextFilter(secondaryMeasureDimension, secondaryMeasureContext, oFF.CalculatedDimensionPrequeryBuilder.FAM_SECONDARY_MEASURE_FILTER);
			}
		}
	},
	processAggregationDimensions:function(calculatedDimension, preQueryModel, originalCalculatedDimension)
	{
			let aggregationFieldNamesIter = calculatedDimension.getAggregationFieldNames().getIterator();
		while (aggregationFieldNamesIter.hasNext())
		{
			let aggregationFieldName = aggregationFieldNamesIter.next();
			let aggregationField = preQueryModel.getFieldByNameOrAlias(aggregationFieldName);
			let aggregationDimension;
			if (oFF.notNull(aggregationField) && aggregationField.isKeyField())
			{
				aggregationDimension = aggregationField.getDimension();
			}
			else
			{
				aggregationDimension = preQueryModel.getDimensionByName(aggregationFieldName);
			}
			if (oFF.notNull(aggregationDimension))
			{
				oFF.CalculatedDimensionPrequeryBuilder.moveDimensionToRowsAndFlatten(preQueryModel.getConvenienceCommands(), aggregationDimension);
				oFF.CalculatedDimensionPrequeryBuilder.addPartKeysToResultSetFields(aggregationDimension, aggregationField);
			}
		}
		let additionalAggregationDimensionsIter = calculatedDimension.getAdditionalAggregationDimensions().getIterator();
		while (additionalAggregationDimensionsIter.hasNext())
		{
			let additionalAggregationDimension = additionalAggregationDimensionsIter.next();
			let dimension = preQueryModel.getDimensionByName(additionalAggregationDimension.getDimensionName());
			if (oFF.notNull(dimension))
			{
				if (dimension.supportsHierarchy() && additionalAggregationDimension.getHierarchyName() !== null)
				{
					dimension.setHierarchyName(additionalAggregationDimension.getHierarchyName());
					dimension.setHierarchyActive(additionalAggregationDimension.activateHierarchy());
				}
				preQueryModel.getRowsAxis().add(dimension);
			}
		}
	},
	removeCustomMembers:function(originalCalculatedDimension, preQueryModel)
	{
			let calcDimType = originalCalculatedDimension.getDimensionType();
		let cmds = preQueryModel.getConvenienceCommands();
		let cmdResetConfiguration = cmds.createResetConfiguration();
		if (calcDimType === oFF.DimensionType.FILTER_ACROSS_MODELS_CALCULATED_DIMENSION)
		{
			cmdResetConfiguration.setSkipResetCustomMembers(true);
			cmdResetConfiguration.setSkipResetCalculatedDimensions(true);
			cmds.resetWithOptions(cmdResetConfiguration);
			let measureNames = originalCalculatedDimension.getMeasureNames();
			preQueryModel.getPrimaryCalculationDimension().removeCustomMembersWithWhiteList(oFF.notNull(measureNames) ? measureNames.createListCopy() : null);
			let secondaryDimension = preQueryModel.getSecondaryCalculationDimension();
			if (oFF.notNull(secondaryDimension))
			{
				let secondaryMeasureNames = originalCalculatedDimension.getSecondaryMeasureNames();
				secondaryDimension.removeCustomMembersWithWhiteList(oFF.notNull(secondaryMeasureNames) ? secondaryMeasureNames.createListCopy() : null);
			}
		}
		else
		{
			cmdResetConfiguration.setSkipResetCustomMembers(true);
			cmds.resetWithOptions(cmdResetConfiguration);
			if (calcDimType !== oFF.DimensionType.MEASURE_BASED_FILTER_CALCULATED_DIMENSION)
			{
				let primaryMeasureDimension = preQueryModel.getPrimaryCalculationDimension();
				if (oFF.notNull(primaryMeasureDimension))
				{
					primaryMeasureDimension.removeCustomMembers();
				}
				let secondaryMeasureDimension = preQueryModel.getSecondaryCalculationDimension();
				if (oFF.notNull(secondaryMeasureDimension))
				{
					secondaryMeasureDimension.removeCustomMembers();
				}
			}
		}
	},
	updateCurrencyInPrequery:function(currencyName, preQueryManager)
	{
			let preQueryModel = preQueryManager.getQueryModel();
		let currencyTranslationManager = preQueryModel.getCurrencyTranslationManager();
		let queryCurrencyTranslation = null;
		if (oFF.notNull(currencyTranslationManager))
		{
			queryCurrencyTranslation = currencyTranslationManager.getQueryCurrencyTranslation();
		}
		if (oFF.notNull(currencyTranslationManager) && oFF.notNull(queryCurrencyTranslation) && currencyTranslationManager.supportsGlobalQueryCurrencyTranslation() && currencyTranslationManager.isLegacyMeasureCurrencyTranslationAccountModel() && !queryCurrencyTranslation.requiresReferenceDate() && !queryCurrencyTranslation.requiresRateName())
		{
			queryCurrencyTranslation.setApplyDefinedCurrencyTranslation(true);
			queryCurrencyTranslation.setFixedTargetCurrencyByString(currencyName);
		}
		else
		{
			let currencyVariable = preQueryManager.getVariable("SignedData.Currency");
			if (oFF.notNull(currencyVariable))
			{
				currencyVariable.setValueByString(currencyName);
			}
		}
	}
};

oFF.QAggregationDimension = function() {};
oFF.QAggregationDimension.prototype = new oFF.XObject();
oFF.QAggregationDimension.prototype._ff_c = "QAggregationDimension";

oFF.QAggregationDimension.createAggregationDimension = function(dimensionName, hierarchyName, activateHierarchy)
{
	let aggregationDimension = new oFF.QAggregationDimension();
	aggregationDimension.m_dimensionName = dimensionName;
	aggregationDimension.m_hierarchyName = hierarchyName;
	aggregationDimension.m_activateHierarchy = activateHierarchy;
	return aggregationDimension;
};
oFF.QAggregationDimension.prototype.m_activateHierarchy = false;
oFF.QAggregationDimension.prototype.m_dimensionName = null;
oFF.QAggregationDimension.prototype.m_hierarchyName = null;
oFF.QAggregationDimension.prototype.activateHierarchy = function()
{
	return this.m_activateHierarchy;
};
oFF.QAggregationDimension.prototype.getDimensionName = function()
{
	return this.m_dimensionName;
};
oFF.QAggregationDimension.prototype.getHierarchyName = function()
{
	return this.m_hierarchyName;
};

oFF.QDimensionReadMode = function() {};
oFF.QDimensionReadMode.prototype = new oFF.XObject();
oFF.QDimensionReadMode.prototype._ff_c = "QDimensionReadMode";

oFF.QDimensionReadMode.create = function(readModeManager)
{
	let object = new oFF.QDimensionReadMode();
	object.m_supportedReadModes = oFF.XSetOfNameObject.create();
	object.m_readModeManager = readModeManager;
	return object;
};
oFF.QDimensionReadMode.prototype.m_activeReadMode = null;
oFF.QDimensionReadMode.prototype.m_defaultReadMode = null;
oFF.QDimensionReadMode.prototype.m_hasReadModeDefault = false;
oFF.QDimensionReadMode.prototype.m_readModeManager = null;
oFF.QDimensionReadMode.prototype.m_supportedReadModes = null;
oFF.QDimensionReadMode.prototype.addSupportedReadMode = function(readMode)
{
	this.m_supportedReadModes.add(readMode);
};
oFF.QDimensionReadMode.prototype.assertSupportsReadMode = function(readMode)
{
	if (oFF.notNull(readMode) && !this.supportsReadMode(readMode))
	{
		let dimension = this.m_readModeManager.getParent();
		throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate5("Unsupported read mode '", readMode.getName(), "' for dimension '", dimension.getName(), "'"));
	}
};
oFF.QDimensionReadMode.prototype.clearReadmode = function()
{
	this.m_supportedReadModes.clear();
	this.m_defaultReadMode = null;
	this.m_activeReadMode = null;
	this.m_hasReadModeDefault = false;
};
oFF.QDimensionReadMode.prototype.copyDimensionReadMode = function(origin)
{
	this.m_activeReadMode = origin.m_activeReadMode;
	this.m_defaultReadMode = origin.m_defaultReadMode;
	this.m_hasReadModeDefault = origin.m_hasReadModeDefault;
	this.m_supportedReadModes = origin.m_supportedReadModes.createSetCopy();
};
oFF.QDimensionReadMode.prototype.determineBestReadMode = function(mode)
{
	let matchingMode = this.determineBestReadModeSingleSide(mode);
	if (oFF.isNull(matchingMode))
	{
		matchingMode = this.determineBestReadModeSingleSide(mode.getSibling());
	}
	return oFF.isNull(matchingMode) ? this.getDefaultReadMode() : matchingMode;
};
oFF.QDimensionReadMode.prototype.determineBestReadModeSingleSide = function(mode)
{
	let current = mode;
	while (oFF.notNull(current))
	{
		if (this.supportsReadMode(current))
		{
			return current;
		}
		current = current.getParent();
	}
	if (oFF.notNull(mode))
	{
		current = mode.getChild();
		while (oFF.notNull(current))
		{
			if (this.supportsReadMode(current))
			{
				return current;
			}
			current = current.getChild();
		}
	}
	return null;
};
oFF.QDimensionReadMode.prototype.getActiveReadMode = function()
{
	return this.m_activeReadMode;
};
oFF.QDimensionReadMode.prototype.getDefaultReadMode = function()
{
	return this.m_defaultReadMode;
};
oFF.QDimensionReadMode.prototype.getSupportedReadModes = function()
{
	return this.m_supportedReadModes;
};
oFF.QDimensionReadMode.prototype.hasReadModeDefault = function()
{
	return this.m_hasReadModeDefault;
};
oFF.QDimensionReadMode.prototype.releaseObject = function()
{
	this.m_supportedReadModes = oFF.XObjectExt.release(this.m_supportedReadModes);
	this.m_defaultReadMode = null;
	this.m_activeReadMode = null;
	this.m_readModeManager = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.QDimensionReadMode.prototype.setActiveReadMode = function(activeReadMode)
{
	this.assertSupportsReadMode(activeReadMode);
	this.m_activeReadMode = activeReadMode;
};
oFF.QDimensionReadMode.prototype.setDefaultReadMode = function(defaultReadMode, modeIsDefinedByDimensionMetadata)
{
	this.assertSupportsReadMode(defaultReadMode);
	this.m_defaultReadMode = defaultReadMode;
	this.m_hasReadModeDefault = modeIsDefinedByDimensionMetadata;
};
oFF.QDimensionReadMode.prototype.supportsReadMode = function(readMode)
{
	return this.m_supportedReadModes.contains(readMode) || readMode === oFF.QMemberReadMode.DEFAULT_VALUE;
};

oFF.QDimensionUtil = {

	ACCOUNT_TYPE_SUFFIX:".accType",
	canBeSatisfiedBySingleValueFilter:function(queryModel, requiredDimensionName, minimumDrillState)
	{
			if (oFF.XString.isEqual(requiredDimensionName, queryModel.getVersionDimensionName()))
		{
			return true;
		}
		return oFF.notNull(minimumDrillState) && minimumDrillState.contains(requiredDimensionName);
	},
	createDimensionGroupInfo:function(dim)
	{
			let dimInfo = oFF.OlapDimensionGroupInfo.createInfo(dim.getName(), dim.getDisplayName(), dim.getDisplayDescription());
		dimInfo.setIsDimension(true);
		return dimInfo;
	},
	getClientDefaultTextField:function(fieldContainer, dimension)
	{
			if (!fieldContainer.isUseServerDefaultTextField())
		{
			return fieldContainer.getClientDefaultTextField();
		}
		return oFF.notNull(dimension) && fieldContainer !== dimension && !dimension.isUseServerDefaultTextField() ? dimension.getClientDefaultTextField() : null;
	},
	getDefaultResultSetTextField:function(fieldContainer, dimension)
	{
			let field = oFF.XCollectionUtils.findFirst(fieldContainer.getDefaultResultSetFields(), (f1) => {
			return f1.getPresentationType().isTypeOf(oFF.PresentationType.TEXT);
		});
		if (oFF.isNull(field) && oFF.notNull(dimension) && dimension.getMainAttribute() !== null && dimension.getMainAttribute() !== fieldContainer)
		{
			field = oFF.XCollectionUtils.findFirst(dimension.getMainAttribute().getDefaultResultSetFields(), (f2) => {
				return f2.getPresentationType().isTypeOf(oFF.PresentationType.TEXT);
			});
		}
		return field;
	},
	getDimensionGroupInfo:function(queryManager)
	{
			return oFF.QDimensionUtil.getDimensionGroupInfoInternal(queryManager, (dim) => {
			return true;
		});
	},
	getDimensionGroupInfoFilteredWithoutStructures:function(queryManager)
	{
			return oFF.QDimensionUtil.getDimensionGroupInfoInternal(queryManager, (dim) => {
			return !oFF.QDimensionUtil.isStructureLike(dim) && oFF.QDimensionUtil.shouldDimensionBeShownForRowsOrColumns(dim, true);
		});
	},
	getDimensionGroupInfoInternal:function(queryManager, dimFilter)
	{
			let dimensions = queryManager.getQueryModel().getDimensions();
		let hasRuntimeGroups = queryManager.getQueryModel().hasRuntimeDimensionGroupName();
		let allDimensionGroups = oFF.XHashMapByString.create();
		let allDisplayGroups = oFF.XHashMapByString.create();
		let result = oFF.XList.create();
		for (let i = 0; i < dimensions.size(); i++)
		{
			let dimension = dimensions.get(i);
			if (!dimFilter(dimension))
			{
				continue;
			}
			let groupName;
			let groupText;
			if (hasRuntimeGroups)
			{
				groupName = dimension.getRuntimeDisplayGroupName();
				groupText = dimension.getRuntimeDisplayGroupText();
			}
			else
			{
				groupName = dimension.getDesignDisplayGroupName();
				groupText = dimension.getDesignDisplayGroupText();
			}
			let dimensionGroupInfo = oFF.XCollectionUtils.getByKeyWithDefault(allDimensionGroups, dimension.getName(), () => {
				return oFF.QDimensionUtil.createDimensionGroupInfo(dimension);
			});
			if (oFF.XStringUtils.isNotNullAndNotEmpty(groupName))
			{
				let uniqueName = oFF.XStringUtils.concatenate2("DimUtils.", groupName);
				let displayGroup = allDisplayGroups.getByKey(uniqueName);
				if (oFF.isNull(displayGroup))
				{
					displayGroup = oFF.OlapDimensionGroupInfo.createInfo(groupName, groupName, groupText);
					allDisplayGroups.put(uniqueName, displayGroup);
					result.add(displayGroup);
				}
				displayGroup.addChild(dimensionGroupInfo);
				continue;
			}
			if (!hasRuntimeGroups)
			{
				let groupingDimensions = dimension.getGroupingDimensions();
				if (oFF.XCollectionUtils.hasElements(groupingDimensions))
				{
					let parent = groupingDimensions.get(0);
					if (dimFilter(parent))
					{
						let parentDimensionGroupInfo = oFF.XCollectionUtils.getByKeyWithDefault(allDimensionGroups, parent.getName(), () => {
							return oFF.QDimensionUtil.createDimensionGroupInfo(parent);
						});
						parentDimensionGroupInfo.addChild(dimensionGroupInfo);
						continue;
					}
				}
			}
			result.add(dimensionGroupInfo);
		}
		if (result.size() === 1)
		{
			let root = result.get(0);
			if (!root.isDimension())
			{
				return root.getChildren();
			}
		}
		return result;
	},
	getRuntimePlaceholderIdMappingsFromDimension:function(dimension, placeholderIdPrefix)
	{
			let mappings = oFF.XHashMapByString.create();
		let placeholderIdMemberMap = dimension.getRuntimePlaceholderIdMemberMap();
		if (oFF.notNull(placeholderIdMemberMap))
		{
			let iterator = placeholderIdMemberMap.getKeysAsIterator();
			while (iterator.hasNext())
			{
				let placeholderId = iterator.next();
				let aliasName = placeholderIdMemberMap.getByKey(placeholderId).getAliasName();
				if (oFF.XStringUtils.isNotNullAndNotEmpty(placeholderIdPrefix))
				{
					placeholderId = oFF.XStringUtils.concatenate2(placeholderIdPrefix, placeholderId);
				}
				mappings.put(placeholderId, aliasName);
			}
		}
		return mappings;
	},
	getRuntimePlaceholderIdMappingsInternal:function(queryModel, primaryDimensionName, placeholderIdPrefix)
	{
			let placeholderMappings = oFF.XHashMapByString.create();
		if (queryModel.getQueryManager().getInitSettings().getMode() === oFF.QueryManagerMode.BLENDING)
		{
			let primaryDimName = primaryDimensionName;
			if (oFF.XStringUtils.isNullOrEmpty(primaryDimName))
			{
				let primaryCalculationDimension = queryModel.getPrimaryCalculationDimension();
				if (oFF.notNull(primaryCalculationDimension))
				{
					primaryDimName = primaryCalculationDimension.getName();
				}
			}
			let mappingsForPrimaryDim = oFF.XHashMapByString.create();
			placeholderMappings.put(primaryDimName, mappingsForPrimaryDim);
			let sourceIterator = queryModel.getBlendingSources().getIterator();
			while (sourceIterator.hasNext())
			{
				let blendingSource = sourceIterator.next();
				let blendedQueryAlias = oFF.XStringUtils.concatenate2(blendingSource.getQueryAliasName(), ".");
				if (oFF.XStringUtils.isNotNullAndNotEmpty(placeholderIdPrefix))
				{
					blendedQueryAlias = oFF.XStringUtils.concatenate2(placeholderIdPrefix, blendedQueryAlias);
				}
				let subQueryModel = blendingSource.getQueryModel();
				let subQueryAccountDimension = subQueryModel.getAccountDimension();
				let subQueryAccountDimensionName = oFF.notNull(subQueryAccountDimension) ? subQueryAccountDimension.getName() : null;
				let subQueryPlaceholderMappings = oFF.QDimensionUtil.getRuntimePlaceholderIdMappingsInternal(subQueryModel, primaryDimName, blendedQueryAlias);
				if (oFF.notNull(subQueryPlaceholderMappings))
				{
					let iterator = subQueryPlaceholderMappings.getKeysAsIterator();
					while (iterator.hasNext())
					{
						let dimensionName = iterator.next();
						if (oFF.XString.isEqual(dimensionName, primaryDimName) || oFF.XString.isEqual(dimensionName, subQueryAccountDimensionName))
						{
							mappingsForPrimaryDim.putAll(subQueryPlaceholderMappings.getByKey(dimensionName));
						}
						else
						{
							placeholderMappings.put(dimensionName, subQueryPlaceholderMappings.getByKey(dimensionName));
						}
					}
				}
			}
		}
		else
		{
			let accountDimension = queryModel.getAccountDimension();
			let measureDimension = queryModel.getMeasureDimension();
			if (oFF.isNull(accountDimension) || oFF.isNull(measureDimension))
			{
				return null;
			}
			try
			{
				queryModel.generateTransientObjects();
				placeholderMappings.put(accountDimension.getName(), oFF.QDimensionUtil.getRuntimePlaceholderIdMappingsFromDimension(accountDimension, placeholderIdPrefix));
				placeholderMappings.put(measureDimension.getName(), oFF.QDimensionUtil.getRuntimePlaceholderIdMappingsFromDimension(measureDimension, null));
			}
			catch (t)
			{
				queryModel.destroyTransientObjects();
				return null;
			}
			queryModel.destroyTransientObjects();
		}
		return placeholderMappings;
	},
	getTextFieldUsedInResultSet:function(fieldContainer, hierarchyTextField)
	{
			let systemType = fieldContainer.getDimension().getQueryManager().getSystemType();
		if (oFF.notNull(systemType) && systemType.isTypeOf(oFF.SystemType.ABAP))
		{
			let container = fieldContainer;
			let dimension = fieldContainer.getOlapComponentType().isTypeOf(oFF.OlapComponentType.ABSTRACT_DIMENSION) ? fieldContainer : null;
			if (oFF.notNull(dimension) && dimension.getFieldLayoutType() === oFF.FieldLayoutType.ATTRIBUTE_BASED && dimension.getMainAttribute() !== null)
			{
				container = dimension.getMainAttribute();
			}
			let field = oFF.XCollectionUtils.findFirst(container.getResultSetFields(), (field1) => {
				return field1.getPresentationType().isTypeOf(oFF.PresentationType.TEXT);
			});
			if (oFF.isNull(field))
			{
				field = oFF.QDimensionUtil.getClientDefaultTextField(container, dimension);
			}
			if (oFF.isNull(field))
			{
				field = oFF.QDimensionUtil.getDefaultResultSetTextField(fieldContainer, dimension);
			}
			if (oFF.notNull(field))
			{
				return field;
			}
		}
		return hierarchyTextField ? fieldContainer.getHierarchyTextField() : fieldContainer.getFlatTextField();
	},
	getUnsatisfiedRequiredDimensionNames:function(context, messageManager, allRequiredDimensionNames, storageName, exceptionAggregationDimensions, minimumDrillState, skipNavigationalFieldCheck)
	{
			let requiredDimensionNamesIterator = allRequiredDimensionNames.getIterator();
		let missingRequiredDimensionNames = oFF.XHashSetOfString.create();
		let queryModel = context.getQueryModel();
		while (requiredDimensionNamesIterator.hasNext())
		{
			let requiredDimensionName = requiredDimensionNamesIterator.next();
			if (oFF.notNull(exceptionAggregationDimensions) && exceptionAggregationDimensions.contains(requiredDimensionName))
			{
				continue;
			}
			let requiredDimension = queryModel.getDimensionByName(requiredDimensionName);
			if (oFF.isNull(requiredDimension))
			{
				let calcDimProperties = queryModel.getOlapEnv().getClientQueryObjectManager().getFormulaCalcDimProperties(requiredDimensionName, storageName);
				if (oFF.notNull(calcDimProperties))
				{
					requiredDimension = calcDimProperties.getFormulaCalcFields().getFirstFieldByType(oFF.PresentationType.KEY).getDimension();
				}
			}
			let isRequiredDimensionInAxis = oFF.QDimensionUtil.isDimensionInRowsOrCols(requiredDimension);
			if (!isRequiredDimensionInAxis && !skipNavigationalFieldCheck)
			{
				let requiredDimensionField = queryModel.getFieldByNameOrAlias(requiredDimensionName);
				if (oFF.notNull(requiredDimensionField))
				{
					isRequiredDimensionInAxis = oFF.QDimensionUtil.isDimensionInRowsOrCols(requiredDimensionField.getDimension());
				}
			}
			if (oFF.notNull(requiredDimension) && !isRequiredDimensionInAxis)
			{
				if (oFF.QDimensionUtil.canBeSatisfiedBySingleValueFilter(queryModel, requiredDimensionName, minimumDrillState) && (oFF.QFilterUtil.hasSingleValueFilterForDimension(queryModel.getFilter(), requiredDimensionName) || oFF.QVariableUtils.hasSingleValueFilterOnDimension(queryModel.getVariables(), requiredDimensionName)) && (!requiredDimension.isHierarchyActive() || oFF.HierarchyCatalogUtil.getHierarchyLevelCount(requiredDimension.getHierarchies(), requiredDimension.getHierarchyName()) <= 1))
				{
					continue;
				}
				let name = requiredDimension.getText();
				if (oFF.XStringUtils.isNullOrEmpty(name) || context.getSession().hasFeature(oFF.FeatureToggleOlap.SFX_MINIMUM_DRILL_STATE))
				{
					name = requiredDimension.getName();
				}
				missingRequiredDimensionNames.add(name);
			}
		}
		return missingRequiredDimensionNames;
	},
	isAccountType:function(dimension)
	{
			let accountDimension = dimension.getQueryModel().getAccountDimension();
		if (oFF.isNull(accountDimension))
		{
			return false;
		}
		return oFF.XString.isEqual(dimension.getName(), oFF.XStringUtils.concatenate2(accountDimension.getName(), oFF.QDimensionUtil.ACCOUNT_TYPE_SUFFIX));
	},
	isDimensionInRowsOrCols:function(dimension)
	{
			return oFF.notNull(dimension) && dimension.getAxis() !== null && (dimension.getAxisType() === oFF.AxisType.ROWS || dimension.getAxisType() === oFF.AxisType.COLUMNS);
	},
	isStructureLike:function(dimension)
	{
			return dimension.isStructure() || dimension.getDimensionType() === oFF.DimensionType.ACCOUNT;
	},
	isVirtualVersionDimension:function(dimension)
	{
			return oFF.notNull(dimension) && dimension.getQueryModel().getModelCapabilities().supportsDimensionVisibility() && dimension.getVisibility() === oFF.DimensionVisibility.METADATA && dimension.getDimensionType().isTypeOf(oFF.DimensionType.GENERAL_VERSION);
	},
	shouldDimensionBeShown:function(dim, supportsDimensionGrouping)
	{
			if (dim.isTechnicalDimension())
		{
			return false;
		}
		if (dim.getVisibility() !== null && dim.getVisibility() !== oFF.DimensionVisibility.VISIBLE)
		{
			return false;
		}
		if (dim.getAxisType() === oFF.AxisType.REPOSITORY)
		{
			return false;
		}
		let dimName = dim.getName();
		if (oFF.XString.startsWith(dimName, "$$") && oFF.XString.endsWith(dimName, "$$"))
		{
			return false;
		}
		if (dim.getDataSource().getType() === oFF.MetaObjectType.PLANNING)
		{
			if (oFF.XString.startsWith(dimName, "_") && oFF.XString.endsWith(dimName, "_"))
			{
				return false;
			}
			let groupingDimensions = dim.getGroupingDimensions();
			for (let i = 0; i < groupingDimensions.size(); i++)
			{
				let groupingDim = groupingDimensions.get(i);
				if (!supportsDimensionGrouping && groupingDim.getDimensionType() === oFF.DimensionType.TIME)
				{
					return false;
				}
				if (groupingDim.getDimensionType() === oFF.DimensionType.VERSION_EPM)
				{
					return false;
				}
			}
		}
		else
		{
			return supportsDimensionGrouping || !dim.isGroupingDimension() || oFF.QDimensionUtil.isStructureLike(dim);
		}
		return true;
	},
	shouldDimensionBeShownForRowsOrColumns:function(dim, supportsDimensionGrouping)
	{
			if (!dim.getConvenienceCommands().isDimensionSupportingRowsOrColumns(dim.getName()))
		{
			return false;
		}
		return oFF.QDimensionUtil.shouldDimensionBeShown(dim, supportsDimensionGrouping);
	}
};

oFF.QValueHelpWizard = function() {};
oFF.QValueHelpWizard.prototype = new oFF.XObject();
oFF.QValueHelpWizard.prototype._ff_c = "QValueHelpWizard";

oFF.QValueHelpWizard.createDimensionValueHelpWizard = function(dimension)
{
	oFF.XObjectExt.assertNotNull(dimension);
	let dimensionWizard = new oFF.QValueHelpWizard();
	dimensionWizard.setupWizard(dimension, null);
	return dimensionWizard;
};
oFF.QValueHelpWizard.createVariableValueHelpWizard = function(variable)
{
	oFF.XObjectExt.assertNotNull(variable);
	let variableWizard = new oFF.QValueHelpWizard();
	variableWizard.setupWizard(null, variable);
	return variableWizard;
};
oFF.QValueHelpWizard.prototype.m_customIdentifier = null;
oFF.QValueHelpWizard.prototype.m_dimension = null;
oFF.QValueHelpWizard.prototype.m_listener = null;
oFF.QValueHelpWizard.prototype.m_syncType = null;
oFF.QValueHelpWizard.prototype.m_variable = null;
oFF.QValueHelpWizard.prototype._processVariableValueHelp = function(valuehelpSupplier)
{
	if (this.m_variable.getQueryManager() !== null && this.m_variable.getQueryManager().isReinitNeeded())
	{
		if (this.m_syncType === oFF.SyncType.NON_BLOCKING)
		{
			this.m_variable.getQueryManager().reInitVariablesAfterSubmit(this.m_syncType, oFF.VariableProcessorCallbackLambda.createSingleUse((result) => {
				if (this.getReinitErrorResult(result) === null)
				{
					valuehelpSupplier();
				}
			}), null);
			return null;
		}
		else
		{
			let reinitResult = this.m_variable.getQueryManager().reInitVariablesAfterSubmit(this.m_syncType, null, null);
			let errorResult = this.getReinitErrorResult(reinitResult);
			if (oFF.notNull(errorResult))
			{
				return errorResult;
			}
		}
	}
	return valuehelpSupplier();
};
oFF.QValueHelpWizard.prototype.blocking = function()
{
	this.m_syncType = oFF.SyncType.BLOCKING;
	return this;
};
oFF.QValueHelpWizard.prototype.flat = function()
{
	this.getSelector().setSelectorHierarchy(false, null, 0);
	return this;
};
oFF.QValueHelpWizard.prototype.getChildren = function(node)
{
	if (this.isDimensionValueHelp())
	{
		return node.processValueHelpChildFetch(this.m_syncType, this.m_listener, this.m_customIdentifier);
	}
	else if (this.getDimension().getDataSource().getType() === oFF.MetaObjectType.DIMENSION)
	{
		return node.processVarHelpChildFetchWithVariable(this.m_variable, this.m_syncType, this.m_listener, this.m_customIdentifier);
	}
	else
	{
		return this._processVariableValueHelp(() => {
			return node.processVarHelpChildFetch(this.m_variable.getName(), this.m_syncType, this.m_listener, this.m_customIdentifier);
		});
	}
};
oFF.QValueHelpWizard.prototype.getChildrenPromise = function(node)
{
	return this.processWithPromise(() => {
		this.getChildren(node);
	});
};
oFF.QValueHelpWizard.prototype.getContextType = function()
{
	if (this.isVariableValueHelp())
	{
		let dimension = this.getDimension();
		let queryModel = dimension.getQueryModel();
		let application = dimension.getApplication();
		let dataSource = dimension.getDataSource();
		let systemType = oFF.notNull(queryModel) ? queryModel.getSystemType() : oFF.notNull(application) && oFF.notNull(dataSource) ? application.getSystemLandscape().getSystemDescription(dataSource.getSystemName()).getSystemType() : null;
		if (oFF.notNull(systemType) && systemType.isTypeOf(oFF.SystemType.ABAP))
		{
			return oFF.QContextType.VARIABLE;
		}
	}
	return oFF.QContextType.SELECTOR;
};
oFF.QValueHelpWizard.prototype.getDimension = function()
{
	return this.m_dimension;
};
oFF.QValueHelpWizard.prototype.getRange = function()
{
	this.flat();
	let dimension = this.getDimension();
	dimension.setSelectorGettingInterval(true);
	if (dimension.getSelectorKeyField().getValueType().isDateBased())
	{
		dimension.addSelectorFilterForKey("0001-01-01", oFF.ComparisonOperator.GREATER_THAN);
	}
	this.withPaging(0, -1);
	return this.process();
};
oFF.QValueHelpWizard.prototype.getRangePromise = function()
{
	return this.processWithPromise(() => {
		this.getRange();
	});
};
oFF.QValueHelpWizard.prototype.getReinitErrorResult = function(reinitResult)
{
	let result = null;
	if (oFF.notNull(reinitResult) && reinitResult.hasErrors())
	{
		result = oFF.ExtResult.create(null, reinitResult);
		if (oFF.notNull(this.m_listener))
		{
			this.m_listener.onValuehelpExecuted(result, null, this.m_customIdentifier);
		}
	}
	return result;
};
oFF.QValueHelpWizard.prototype.getSelector = function()
{
	return this.getDimension().getSelector();
};
oFF.QValueHelpWizard.prototype.isDimensionValueHelp = function()
{
	return oFF.isNull(this.m_variable);
};
oFF.QValueHelpWizard.prototype.isVariableValueHelp = function()
{
	return oFF.notNull(this.m_variable);
};
oFF.QValueHelpWizard.prototype.nonBlocking = function(listener, customIdentifier)
{
	this.m_syncType = oFF.SyncType.NON_BLOCKING;
	this.m_listener = listener;
	this.m_customIdentifier = customIdentifier;
	return this;
};
oFF.QValueHelpWizard.prototype.prepareSearchOnKeys = function()
{
	this.withReadMode(oFF.QMemberReadMode.MASTER);
	this.withPaging(0, -1);
	this.getDimension().clearSelectorFilter();
};
oFF.QValueHelpWizard.prototype.process = function()
{
	let dimension = this.getDimension();
	if (this.isDimensionValueHelp())
	{
		return dimension.processValueHelp(this.m_syncType, this.m_listener, this.m_customIdentifier);
	}
	return dimension.processVarHelpWithVariable(this.m_variable, this.m_syncType, this.m_listener, this.m_customIdentifier);
};
oFF.QValueHelpWizard.prototype.processPromise = function()
{
	return this.processWithPromise(() => {
		this.process();
	});
};
oFF.QValueHelpWizard.prototype.processWithPromise = function(valueHelpProcedure)
{
	return oFF.XPromise.create((resolve, reject) => {
		this.m_syncType = oFF.SyncType.NON_BLOCKING;
		this.m_listener = oFF.QValueHelpExecutedListenerLambda.createSingleUse((result) => {
			if (result.isValid())
			{
				resolve(result.getData());
			}
			else
			{
				reject(oFF.XError.createWithMessage(result.getFirstError()));
			}
		});
		valueHelpProcedure();
	});
};
oFF.QValueHelpWizard.prototype.promise = function()
{
	return this;
};
oFF.QValueHelpWizard.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_dimension = null;
	this.m_variable = null;
	this.m_syncType = null;
	this.m_listener = null;
	this.m_customIdentifier = null;
};
oFF.QValueHelpWizard.prototype.search = function(searchPattern, searchOnDisplayKey, searchOnText, requestParents, doWildcardSearch)
{
	let dimension = this.getDimension();
	let searchFields = oFF.XList.create();
	if (searchOnDisplayKey)
	{
		oFF.XCollectionUtils.addIfNotNull(searchFields, dimension.getSelectorDisplayKeyField());
	}
	if (searchOnText)
	{
		oFF.XCollectionUtils.addIfNotNull(searchFields, dimension.getSelectorTextField());
	}
	if (!dimension.addSelectorFilterForFields(searchPattern, searchFields, oFF.ComparisonOperator.MATCH, requestParents, doWildcardSearch))
	{
		let result = oFF.ExtResult.create(oFF.XList.create(), null);
		if (oFF.notNull(this.m_listener))
		{
			this.m_listener.onValuehelpExecuted(result, null, this.m_customIdentifier);
		}
		return result;
	}
	return this.process();
};
oFF.QValueHelpWizard.prototype.searchDisplayKeys = function(displayKeys)
{
	this.prepareSearchOnKeys();
	this.getDimension().addSelectorFilterForSpecificKeys(null, displayKeys);
	return this.process();
};
oFF.QValueHelpWizard.prototype.searchDisplayKeysPromise = function(displayKeys)
{
	return this.processWithPromise(() => {
		this.searchDisplayKeys(displayKeys);
	});
};
oFF.QValueHelpWizard.prototype.searchKeys = function(keys)
{
	this.prepareSearchOnKeys();
	this.getDimension().addSelectorFilterForSpecificKeys(keys, null);
	return this.process();
};
oFF.QValueHelpWizard.prototype.searchKeysPromise = function(keys)
{
	return this.processWithPromise(() => {
		this.searchKeys(keys);
	});
};
oFF.QValueHelpWizard.prototype.searchPromise = function(searchPattern, searchOnDisplayKey, searchOnText, requestParents, doWildcardSearch)
{
	return this.processWithPromise(() => {
		this.search(searchPattern, searchOnDisplayKey, searchOnText, requestParents, doWildcardSearch);
	});
};
oFF.QValueHelpWizard.prototype.setupWizard = function(dimension, variable)
{
	this.m_syncType = oFF.SyncType.NON_BLOCKING;
	this.m_dimension = dimension;
	this.m_variable = variable;
	if (this.isVariableValueHelp())
	{
		this.m_dimension = this.m_variable.getDimension();
		if (this.m_dimension.getDataSource().getType() === oFF.MetaObjectType.PLANNING_SEQUENCE)
		{
			let dimQm = this.m_dimension.getContext().getQueryManagerForDimension(this.m_dimension);
			this.m_dimension = dimQm.getQueryModel().getDimensionByName(this.m_dimension.getName());
		}
	}
	this.m_dimension.clearSelectorSettings();
	this.m_dimension.resetToDefaultReadMode(this.getContextType());
	if (this.isVariableValueHelp())
	{
		let varType = this.m_variable.getVariableType();
		let hierarchyName = oFF.notNull(varType) && varType.isTypeOf(oFF.VariableType.HIERARCHY_NODE_VARIABLE) ? this.m_variable.getHierarchyName() : null;
		this.getSelector().setSelectorHierarchy(oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyName), hierarchyName, 0);
	}
};
oFF.QValueHelpWizard.prototype.withDimensionDisplaySetting = function()
{
	let dimension = this.getDimension();
	let hierarchyActive = dimension.isHierarchyActive() && oFF.XStringUtils.isNotNullAndNotEmpty(dimension.getHierarchyName());
	this.getSelector().setSelectorHierarchy(hierarchyActive, hierarchyActive ? dimension.getHierarchyName() : null, 0);
	return this;
};
oFF.QValueHelpWizard.prototype.withFields = function(fields)
{
	this.getSelector().setSelectorFields(fields, false);
	return this;
};
oFF.QValueHelpWizard.prototype.withHierarchy = function(hierarchyName, initialDrillLevel)
{
	this.getSelector().setSelectorHierarchy(oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyName), hierarchyName, initialDrillLevel);
	return this;
};
oFF.QValueHelpWizard.prototype.withMainKeyAndResultSetTextFields = function()
{
	this.getSelector().setSelectorCustomTextField(oFF.QDimensionUtil.getTextFieldUsedInResultSet(this.m_dimension, this.getSelector().isSelectorHierarchyActive()));
	return this.withMainKeyAndTextFields();
};
oFF.QValueHelpWizard.prototype.withMainKeyAndTextFields = function()
{
	this.getSelector().setSelectorFields(null, true);
	return this;
};
oFF.QValueHelpWizard.prototype.withPaging = function(start, end)
{
	this.getSelector().setSelectorPaging(start, end);
	return this;
};
oFF.QValueHelpWizard.prototype.withReadMode = function(readMode)
{
	this.getDimension().setReadModeGraceful(this.getContextType(), readMode);
	return this;
};
oFF.QValueHelpWizard.prototype.withReadModeCascading = function()
{
	this.getSelector().setSelectorCascadingReadModeAndFilter();
	return this;
};

oFF.QMemberManagerResult = function() {};
oFF.QMemberManagerResult.prototype = new oFF.XObject();
oFF.QMemberManagerResult.prototype._ff_c = "QMemberManagerResult";

oFF.QMemberManagerResult.createResult = function(dimension)
{
	let obj = new oFF.QMemberManagerResult();
	obj.setupExt(dimension);
	return obj;
};
oFF.QMemberManagerResult.prototype.m_customNodes = null;
oFF.QMemberManagerResult.prototype.m_dimension = null;
oFF.QMemberManagerResult.prototype.m_hierarchyName = null;
oFF.QMemberManagerResult.prototype.m_readMode = null;
oFF.QMemberManagerResult.prototype.m_valueHelpNodes = null;
oFF.QMemberManagerResult.prototype.cloneExt = function(flags)
{
	let clone = oFF.QMemberManagerResult.createResult(this.m_dimension);
	clone.setReadMode(this.m_readMode);
	clone.setHierarchyName(this.m_hierarchyName);
	clone.setValueHelpNodes(oFF.XCollectionUtils.createListOfNameObjectCopy(this.m_valueHelpNodes));
	clone.setCustomNodes(oFF.XCollectionUtils.createListOfNameObjectCopy(this.m_customNodes));
	return clone;
};
oFF.QMemberManagerResult.prototype.getAllNodes = function()
{
	let all = oFF.XListOfNameObject.create();
	oFF.XCollectionUtils.addAll(all, this.m_customNodes);
	oFF.XCollectionUtils.addAll(all, this.m_valueHelpNodes);
	return all;
};
oFF.QMemberManagerResult.prototype.getCustomNodes = function()
{
	return this.m_customNodes;
};
oFF.QMemberManagerResult.prototype.getDimension = function()
{
	return this.m_dimension;
};
oFF.QMemberManagerResult.prototype.getHierarchyName = function()
{
	return this.m_hierarchyName;
};
oFF.QMemberManagerResult.prototype.getReadMode = function()
{
	return this.m_readMode;
};
oFF.QMemberManagerResult.prototype.getValueHelpNodes = function()
{
	return this.m_valueHelpNodes;
};
oFF.QMemberManagerResult.prototype.releaseObject = function()
{
	this.m_dimension = null;
	this.m_valueHelpNodes = null;
	this.m_customNodes = null;
	this.m_hierarchyName = null;
	this.m_readMode = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.QMemberManagerResult.prototype.setCustomNodes = function(customNodes)
{
	this.m_customNodes = customNodes;
};
oFF.QMemberManagerResult.prototype.setHierarchyName = function(hierarchyName)
{
	this.m_hierarchyName = hierarchyName;
};
oFF.QMemberManagerResult.prototype.setReadMode = function(readMode)
{
	this.m_readMode = readMode;
};
oFF.QMemberManagerResult.prototype.setValueHelpNodes = function(valueHelpNodes)
{
	this.m_valueHelpNodes = valueHelpNodes;
};
oFF.QMemberManagerResult.prototype.setupExt = function(dimension)
{
	this.m_dimension = dimension;
	this.m_valueHelpNodes = oFF.XListOfNameObject.create();
	this.m_customNodes = oFF.XListOfNameObject.create();
};
oFF.QMemberManagerResult.prototype.toString = function()
{
	if (this.isReleased())
	{
		return null;
	}
	let buffer = oFF.XStringBuffer.create();
	buffer.append(this.m_dimension.getName());
	buffer.append("(").append(this.m_dimension.getText()).append(")");
	buffer.append("~");
	buffer.append(oFF.XCollectionUtils.createListOfNames(this.getAllNodes()).toString());
	return buffer.toString();
};

oFF.DocumentFileAbstract = function() {};
oFF.DocumentFileAbstract.prototype = new oFF.XObject();
oFF.DocumentFileAbstract.prototype._ff_c = "DocumentFileAbstract";

oFF.DocumentFileAbstract.prototype.m_name = null;
oFF.DocumentFileAbstract.prototype.getName = function()
{
	return this.m_name;
};
oFF.DocumentFileAbstract.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_name = null;
};
oFF.DocumentFileAbstract.prototype.setName = function(name)
{
	this.m_name = name;
};

oFF.DocumentsDirectoryRequest = function() {};
oFF.DocumentsDirectoryRequest.prototype = new oFF.XObject();
oFF.DocumentsDirectoryRequest.prototype._ff_c = "DocumentsDirectoryRequest";

oFF.DocumentsDirectoryRequest.createWithPath = function(path)
{
	let instance = new oFF.DocumentsDirectoryRequest();
	instance.m_documentRequests = oFF.XSimpleMap.create();
	instance.m_path = path;
	return instance;
};
oFF.DocumentsDirectoryRequest.prototype.m_documentRequests = null;
oFF.DocumentsDirectoryRequest.prototype.m_path = null;
oFF.DocumentsDirectoryRequest.prototype.addDocumentsRequestByType = function(action)
{
	let documentsRequest = oFF.DocumentsRequest.createWithAction(action);
	this.m_documentRequests.put(action, documentsRequest);
	return documentsRequest;
};
oFF.DocumentsDirectoryRequest.prototype.getDocumentsRequests = function()
{
	return this.m_documentRequests.getValuesAsReadOnlyList();
};
oFF.DocumentsDirectoryRequest.prototype.getPath = function()
{
	return this.m_path;
};
oFF.DocumentsDirectoryRequest.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_path = null;
	this.m_documentRequests = oFF.XObjectExt.release(this.m_documentRequests);
};
oFF.DocumentsDirectoryRequest.prototype.setPath = function(path)
{
	this.m_path = path;
};

oFF.DocumentsRequest = function() {};
oFF.DocumentsRequest.prototype = new oFF.XObject();
oFF.DocumentsRequest.prototype._ff_c = "DocumentsRequest";

oFF.DocumentsRequest.createWithAction = function(action)
{
	let instance = new oFF.DocumentsRequest();
	instance.m_requestAction = action;
	instance.m_documentFiles = oFF.XHashMapByString.create();
	return instance;
};
oFF.DocumentsRequest.prototype.m_documentFiles = null;
oFF.DocumentsRequest.prototype.m_requestAction = null;
oFF.DocumentsRequest.prototype.m_withVersions = false;
oFF.DocumentsRequest.prototype.addDocumentFileByName = function(name)
{
	let newDocumentFile = oFF.DocumentFileSimple.createWithName(name);
	this.m_documentFiles.put(name, newDocumentFile);
	return newDocumentFile;
};
oFF.DocumentsRequest.prototype.getDocumentRequestAction = function()
{
	return this.m_requestAction;
};
oFF.DocumentsRequest.prototype.getDocuments = function()
{
	return this.m_documentFiles.getValuesAsReadOnlyList();
};
oFF.DocumentsRequest.prototype.isWithVersions = function()
{
	return this.m_withVersions;
};
oFF.DocumentsRequest.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_withVersions = false;
	this.m_requestAction = null;
	this.m_documentFiles = oFF.XObjectExt.release(this.m_documentFiles);
};
oFF.DocumentsRequest.prototype.setDocumentRequestAction = function(action)
{
	this.m_requestAction = action;
};
oFF.DocumentsRequest.prototype.setWithVersions = function(withVersions)
{
	this.m_withVersions = withVersions;
};

oFF.DocumentsServiceRequest = function() {};
oFF.DocumentsServiceRequest.prototype = new oFF.XObject();
oFF.DocumentsServiceRequest.prototype._ff_c = "DocumentsServiceRequest";

oFF.DocumentsServiceRequest.create = function()
{
	let instance = new oFF.DocumentsServiceRequest();
	instance.m_directoryRequests = oFF.XHashMapByString.create();
	return instance;
};
oFF.DocumentsServiceRequest.prototype.m_dataArea = null;
oFF.DocumentsServiceRequest.prototype.m_directoryRequests = null;
oFF.DocumentsServiceRequest.prototype.m_instanceId = null;
oFF.DocumentsServiceRequest.prototype.addDocumentsDirectoryRequestByPath = function(path)
{
	let newDirectoryRequest = oFF.DocumentsDirectoryRequest.createWithPath(path);
	this.m_directoryRequests.put(path, newDirectoryRequest);
	return newDirectoryRequest;
};
oFF.DocumentsServiceRequest.prototype.getDataArea = function()
{
	return this.m_dataArea;
};
oFF.DocumentsServiceRequest.prototype.getDocumentsDirectoryRequests = function()
{
	return this.m_directoryRequests.getValuesAsReadOnlyList();
};
oFF.DocumentsServiceRequest.prototype.getInstanceId = function()
{
	return this.m_instanceId;
};
oFF.DocumentsServiceRequest.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_dataArea = null;
	this.m_instanceId = null;
	this.m_directoryRequests = oFF.XObjectExt.release(this.m_directoryRequests);
};
oFF.DocumentsServiceRequest.prototype.setDataArea = function(dataArea)
{
	this.m_dataArea = dataArea;
};
oFF.DocumentsServiceRequest.prototype.setInstanceId = function(instanceId)
{
	this.m_instanceId = instanceId;
};

oFF.DocumentsStoreServiceFactory = {

	s_factory:null,
	createDocumentStore:function(queryManager, withVersions, dataArea)
	{
			return oFF.DocumentsStoreServiceFactory.s_factory.newDocumentStore(queryManager, withVersions, dataArea);
	},
	createDocumentStoreForShallowQueryManager:function(queryManager, instanceId, rsDocumentServicePath, withVersions, rsDataArea)
	{
			return oFF.DocumentsStoreServiceFactory.s_factory.newDocumentStoreForShallowQueryManager(queryManager, instanceId, rsDocumentServicePath, withVersions, rsDataArea);
	},
	setInstance:function(factory)
	{
			oFF.DocumentsStoreServiceFactory.s_factory = factory;
	}
};

oFF.XComparatorDrill = function() {};
oFF.XComparatorDrill.prototype = new oFF.XObject();
oFF.XComparatorDrill.prototype._ff_c = "XComparatorDrill";

oFF.XComparatorDrill.create = function()
{
	return new oFF.XComparatorDrill();
};
oFF.XComparatorDrill.prototype.compare = function(o1, o2)
{
	let drillstate1 = o1.getDrillState();
	if (drillstate1 !== o2.getDrillState())
	{
		if (drillstate1 === oFF.DrillState.EXPANDED)
		{
			return -1;
		}
		else if (drillstate1 === oFF.DrillState.COLLAPSED)
		{
			return 1;
		}
	}
	return oFF.XString.compare(o1.getPathUniqueName(), o2.getPathUniqueName());
};

oFF.QFieldNamePair = function() {};
oFF.QFieldNamePair.prototype = new oFF.XObject();
oFF.QFieldNamePair.prototype._ff_c = "QFieldNamePair";

oFF.QFieldNamePair.create = function(localeFieldName, referencedFieldName)
{
	let fieldNamePair = new oFF.QFieldNamePair();
	fieldNamePair.m_localeFieldName = localeFieldName;
	fieldNamePair.m_referencedFieldName = referencedFieldName;
	return fieldNamePair;
};
oFF.QFieldNamePair.prototype.m_localeFieldName = null;
oFF.QFieldNamePair.prototype.m_referencedFieldName = null;
oFF.QFieldNamePair.prototype.getLocaleFieldName = function()
{
	return this.m_localeFieldName;
};
oFF.QFieldNamePair.prototype.getReferencedFieldName = function()
{
	return this.m_referencedFieldName;
};
oFF.QFieldNamePair.prototype.isEqualTo = function(other)
{
	if (other === this)
	{
		return true;
	}
	if (oFF.isNull(other))
	{
		return false;
	}
	let xOther = other;
	if (!oFF.XString.isEqual(this.m_localeFieldName, xOther.getLocaleFieldName()))
	{
		return false;
	}
	if (!oFF.XString.isEqual(this.m_referencedFieldName, xOther.getReferencedFieldName()))
	{
		return false;
	}
	return true;
};
oFF.QFieldNamePair.prototype.releaseObject = function()
{
	this.m_localeFieldName = null;
	this.m_referencedFieldName = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.QFieldNamePair.prototype.setLocaleFieldName = function(localeFieldName)
{
	this.m_localeFieldName = localeFieldName;
};
oFF.QFieldNamePair.prototype.setReferencedFieldName = function(referencedFieldName)
{
	this.m_referencedFieldName = referencedFieldName;
};

oFF.QFilterAcrossModelsDimensionUtil = {

	areDimensionsFromSameBWSystem:function(dim1, dim2)
	{
			return dim1.getConvenienceCommands().isTypeOfBw() && dim2.getConvenienceCommands().isTypeOfBw() && oFF.XString.isEqual(dim1.getSystemName(), dim2.getSystemName()) && oFF.XString.isEqual(dim1.getName(), dim2.getName());
	},
	getDimensionOrCalcDim:function(context, dimensionName, storageName)
	{
			let accessor = context.getDimensionAccessor();
		let dimension = accessor.getDimensionByName(dimensionName);
		if (oFF.isNull(dimension) && oFF.notNull(storageName))
		{
			let calcDimProps = context.getOlapEnv().getClientQueryObjectManager().getFormulaCalcDimProperties(dimensionName, storageName);
			if (oFF.notNull(calcDimProps))
			{
				return calcDimProps.getParent();
			}
		}
		return dimension;
	},
	getEffectiveMeasureNames:function(measureNames, queryModel, messageManager, storageName)
	{
			let effectiveMeasureNames = oFF.XHashSetOfString.create();
		let blendedMeasureNames = oFF.XHashSetOfString.create();
		let calculationDimension = queryModel.getPrimaryCalculationDimension();
		let measureNamesIt = measureNames.getIterator();
		while (measureNamesIt.hasNext())
		{
			let measureName = measureNamesIt.next();
			let measureMember = calculationDimension.getStructureMemberByAliasOrMember(measureName);
			if (oFF.isNull(measureMember))
			{
				measureMember = queryModel.getOlapEnv().getClientQueryObjectManager().getStructuredMember(measureName, storageName, true);
			}
			if (oFF.notNull(measureMember) && measureMember.isMultiDataSourceMember())
			{
				blendedMeasureNames.add(measureMember.getText());
			}
			else
			{
				effectiveMeasureNames.add(measureName);
			}
		}
		if (blendedMeasureNames.size() > 0)
		{
			let message = messageManager.getMessage(oFF.Severity.WARNING, oFF.ErrorCodes.BLEND_CALC_MEASURE_CONTEXT_IGNORED);
			if (oFF.isNull(message))
			{
				messageManager.addWarningExtWithExtendedInfo(oFF.OriginLayer.APPLICATION, oFF.ErrorCodes.BLEND_CALC_MEASURE_CONTEXT_IGNORED, oFF.ErrorMessages.FILTER_ACROSS_MODEL_BLEND_CALC_MEASURE_CONTEXT_IGNORED, blendedMeasureNames);
			}
			else
			{
				let existingBlendedMeasureNames = message.getExtendedInfo();
				existingBlendedMeasureNames.addAll(blendedMeasureNames);
			}
		}
		return effectiveMeasureNames;
	},
	getFieldOrCalcDimField:function(context, fieldName, storageName)
	{
			let accessor = context.getFieldAccessorSingle();
		let field = accessor.getFieldByNameOrAlias(fieldName);
		if (oFF.isNull(field) && oFF.notNull(storageName))
		{
			let calcDimProps = context.getOlapEnv().getClientQueryObjectManager().getFormulaCalcDimPropertiesByFieldName(fieldName, storageName);
			if (oFF.notNull(calcDimProps))
			{
				return calcDimProps.getFormulaCalcFields().getFieldByName(fieldName);
			}
		}
		return field;
	},
	getHierarchyLevelCount:function(dimension, hierarchyName)
	{
			let hierarchyResult = dimension.getHierarchies();
		if (oFF.isNull(hierarchyResult))
		{
			return -1;
		}
		return oFF.HierarchyCatalogUtil.getHierarchyLevelCount(hierarchyResult, hierarchyName);
	},
	isNonTimeLevelBasedHierarchy:function(dimension, hierarchyName)
	{
			if (!dimension.supportsHierarchy() || oFF.QTimeDimensionUtil.isDateOrTimeLikeDimension(dimension) || oFF.isNull(hierarchyName) || dimension.getHierarchies() === null)
		{
			return false;
		}
		let hierarchyIterator = dimension.getHierarchies().getObjectsIterator();
		let isFullyBalancedHierarchy = false;
		let isDimensionNameEqualToLevelDimensionName = false;
		while (hierarchyIterator.hasNext())
		{
			let hierarchy = hierarchyIterator.next();
			if (oFF.XString.isEqual(hierarchy.getHierarchyName(), hierarchyName) && hierarchy.getHierarchyType() === oFF.HierarchyType.FULLY_BALANCED)
			{
				isFullyBalancedHierarchy = true;
				let hierarchyLevels = hierarchy.getHierarchyLevels();
				if (oFF.notNull(hierarchyLevels))
				{
					let levelsIterator = hierarchyLevels.getIterator();
					while (levelsIterator.hasNext())
					{
						let level = levelsIterator.next();
						let levelDimensionName = level.getLevelDimensionName();
						if (oFF.XString.isEqual(levelDimensionName, dimension.getName()))
						{
							isDimensionNameEqualToLevelDimensionName = true;
						}
					}
				}
			}
		}
		return isFullyBalancedHierarchy && !isDimensionNameEqualToLevelDimensionName;
	},
	isTimeStampDimension:function(dimension)
	{
			let fieldValueType = dimension.getKeyField().getValueType();
		if (fieldValueType === oFF.XValueType.UNSUPPORTED)
		{
			fieldValueType = dimension.getValueType();
		}
		return fieldValueType === oFF.XValueType.DATE_TIME;
	}
};

oFF.QFilterAcrossModelsFilterUtil = {

	FTD_RANGE_INDIRECT_REASON_INCOMPATIBLE_HIERARCHY:"ftdIncompatibleHierarchy",
	FTD_RANGE_INDIRECT_REASON_PROPAGATE_INDIRECT:"ftdPropagateIndirect",
	FTD_RANGE_INDIRECT_REASON_UNLINKED:"ftdUnlinked",
	LEVELS_AND_STRUCTURE_MATCH:"levelsAndStructure",
	LEVELS_MATCH:"levels",
	NO_MATCH:"noMatch",
	OPEN_ENDED_RANGE_LOW_VALUE:"0002",
	_collectRelevantFilterNodes:function(filterElementRoot, result)
	{
			if (filterElementRoot.getOlapComponentType().isTypeOf(oFF.FilterComponentType.FILTER_MEASURE_BASED) || filterElementRoot.getOlapComponentType().isTypeOf(oFF.FilterComponentType.FILTER_TIME_RANGE) || filterElementRoot.getOlapComponentType().isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST) || filterElementRoot.getOlapComponentType().isTypeOf(oFF.FilterComponentType.OPERATION) && filterElementRoot.getComparisonOperator().isTypeOf(oFF.SpatialComparisonOperator._SPATIAL))
		{
			result.add(filterElementRoot);
			return;
		}
		let childrenIterator = filterElementRoot.getChildrenIterator();
		while (childrenIterator.hasNext())
		{
			let filterRootChild = childrenIterator.next();
			oFF.QFilterAcrossModelsFilterUtil._collectRelevantFilterNodes(filterRootChild, result);
		}
	},
	areAllFiltersDirect:function(sourceContext, targetContext, links, filters)
	{
			for (let i = 0; i < filters.size(); i++)
		{
			let filterExpression = filters.get(i);
			if (!oFF.QFilterUtil.isFilterNullOrEmpty(filterExpression) && !oFF.QFilterAcrossModelsFilterUtil.isDirectFilterElement(sourceContext, targetContext, links, filterExpression.getFilterRootElement()))
			{
				return false;
			}
		}
		return true;
	},
	areAllLinksAndFiltersFlexibleTime:function(context, links, sourceFilters)
	{
			if (!context.getQueryModel().getSession().hasFeature(oFF.FeatureToggleOlap.FLEXIBLE_TIME_DYNAMIC_TIME))
		{
			return false;
		}
		let linkedDimensionNames = oFF.QFilterAcrossModelsLinkUtil.getAllDimensionNamesForContext(links, context);
		let groupingDimensionNames = oFF.XHashSetOfString.create();
		for (let i = 0; i < linkedDimensionNames.size(); i++)
		{
			let linkedDimensionName = linkedDimensionNames.get(i);
			let linkedDimension = context.getQueryModel().getDimensionByName(linkedDimensionName);
			if (oFF.notNull(linkedDimension))
			{
				let hasFlexibleTime = oFF.XCollectionUtils.contains(linkedDimension.getGroupingDimensions(), (groupingDimension) => {
					if (oFF.QTimeDimensionUtil.isFlexibleTimeDimension(groupingDimension))
					{
						groupingDimensionNames.add(groupingDimension.getName());
						return true;
					}
					return false;
				});
				if (!hasFlexibleTime)
				{
					return false;
				}
			}
		}
		let iterator = sourceFilters.getKeysAsIterator();
		while (iterator.hasNext())
		{
			let sourceFilter = sourceFilters.getByKey(iterator.next());
			let filters = oFF.QFilterAcrossModelsFilterUtil.collectApplicableSourceFilters(sourceFilter.getFilterRootElement());
			for (let filterIdx = 0; filterIdx < filters.size(); filterIdx++)
			{
				let filter = filters.get(filterIdx);
				let sourceDimension = oFF.QFilterAcrossModelsFilterUtil.getDimensionFromFilterElement(context, links, filter);
				if (oFF.isNull(sourceDimension) || !groupingDimensionNames.contains(sourceDimension.getName()) && !linkedDimensionNames.contains(sourceDimension.getName()))
				{
					return false;
				}
			}
		}
		return true;
	},
	collectApplicableSourceFilters:function(filterElementRoot)
	{
			let filters = oFF.XList.create();
		oFF.QFilterAcrossModelsFilterUtil._collectRelevantFilterNodes(filterElementRoot, filters);
		return filters;
	},
	determineTupleIndicesWithUniqueValues:function(filterOr)
	{
			let prevValueAndIsUniquePairs = oFF.XList.create();
		let nonUniqueIndices = oFF.XHashSetOfString.create();
		let result = oFF.XList.create();
		for (let i = 0; i < filterOr.size(); i++)
		{
			if (filterOr.get(i).getOlapComponentType() !== oFF.FilterComponentType.AND)
			{
				return null;
			}
			let tupleFilter = filterOr.get(i);
			if (tupleFilter.size() <= 2)
			{
				return null;
			}
			for (let j = 0; j < tupleFilter.size(); j++)
			{
				if (!tupleFilter.get(j).getOlapComponentType().isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
				{
					return null;
				}
				let tupleElementFilter = tupleFilter.get(j);
				if (tupleElementFilter.size() !== 1)
				{
					return null;
				}
				let cartesianElement = tupleElementFilter.getCartesianElement(0);
				if (cartesianElement.getLow() === null || !cartesianElement.getLow().hasValue())
				{
					return null;
				}
				let filteredValue = cartesianElement.getLow().getString();
				if (i === 0)
				{
					prevValueAndIsUniquePairs.add(oFF.XPair.create(oFF.XStringValue.create(filteredValue), oFF.XBooleanValue.create(true)));
				}
				let prevFilteredValueAndIsUnique = prevValueAndIsUniquePairs.get(j);
				if (!oFF.XString.isEqual(prevFilteredValueAndIsUnique.getFirstObject().getString(), filteredValue))
				{
					prevFilteredValueAndIsUnique.getSecondObject().setBoolean(false);
					nonUniqueIndices.add(oFF.XInteger.convertToString(j));
					if (nonUniqueIndices.size() === tupleFilter.size())
					{
						return result;
					}
				}
			}
		}
		for (let k = 0; k < prevValueAndIsUniquePairs.size(); k++)
		{
			let previousFilteredValueAndIsUnique = prevValueAndIsUniquePairs.get(k);
			if (previousFilteredValueAndIsUnique.getSecondObject().getBoolean())
			{
				result.add(oFF.XIntegerValue.create(k));
			}
		}
		return result;
	},
	findCompatibleHierarchyFromLinksAndLevels:function(links, sourceTimeDimension, sourceHierarchy, sourceLevelNames, targetTimeDimension)
	{
			let levelNumberComparator = (levelA, levelB) => {
			return oFF.XIntegerValue.create(levelA.getLevelNumber() - levelB.getLevelNumber());
		};
		let uniqueSourceLevelNames = oFF.XHashSetOfString.create();
		uniqueSourceLevelNames.addAll(sourceLevelNames);
		let orderedTargetLevelDimensionNames = oFF.XStream.ofString(uniqueSourceLevelNames).map((sourceLevelName) => {
			return sourceHierarchy.getLevelByName(sourceLevelName.getString());
		}).sorted(oFF.XComparatorLambda.create(levelNumberComparator)).mapToString((sourceLevel) => {
			return oFF.QFilterAcrossModelsLinkUtil.getLinkCounterPartDimensionName(links, sourceTimeDimension.getQueryModel(), sourceLevel.getLevelDimensionName());
		}).collect(oFF.XStreamCollector.toListOfString((boxedLevelName) => {
			return boxedLevelName.getString();
		}));
		let compatibleHierarchy = oFF.QTimeDimensionUtil.findHierarchyWithAllMatchingOrderedLevels(targetTimeDimension.getLeveledHierarchies(), sourceTimeDimension.getLeveledHierarchy(sourceHierarchy.getName()), orderedTargetLevelDimensionNames);
		let matchLevel;
		if (oFF.isNull(compatibleHierarchy))
		{
			matchLevel = oFF.QFilterAcrossModelsFilterUtil.NO_MATCH;
		}
		else if (oFF.QTimeDimensionUtil.areHierarchyLevelsStructureSimilar(sourceHierarchy, compatibleHierarchy))
		{
			matchLevel = oFF.QFilterAcrossModelsFilterUtil.LEVELS_AND_STRUCTURE_MATCH;
		}
		else
		{
			matchLevel = oFF.QFilterAcrossModelsFilterUtil.LEVELS_MATCH;
		}
		return oFF.XPair.create(compatibleHierarchy, oFF.XStringValue.create(matchLevel));
	},
	getDimensionFromFilterContext:function(context, links, filter)
	{
			return oFF.QFilterAcrossModelsDimensionUtil.getDimensionOrCalcDim(context, filter.getDimensionName(), oFF.QFilterAcrossModelsLinkUtil.getAnySharedLinkStorageName(links));
	},
	getDimensionFromFilterElement:function(context, links, filter)
	{
			let filterType = filter.getOlapComponentType();
		let dimensionName = null;
		if (filterType.isTypeOf(oFF.FilterComponentType.FILTER_TIME_RANGE))
		{
			dimensionName = filter.getTimeDimensionName();
		}
		else if (filterType.isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST) || filterType.isTypeOf(oFF.FilterComponentType.OPERATION))
		{
			dimensionName = filter.getDimensionName();
		}
		return oFF.QFilterAcrossModelsDimensionUtil.getDimensionOrCalcDim(context, dimensionName, oFF.QFilterAcrossModelsLinkUtil.getAnySharedLinkStorageName(links));
	},
	getDirectFlexibleTimeRangeFiltersWithIncompatibleTargetHierarchy:function(sourceContext, targetContext, links, filters)
	{
			let result = oFF.XList.create();
		for (let i = 0; i < filters.size(); i++)
		{
			let filterExpression = filters.get(i);
			if (oFF.QFilterUtil.isFilterNullOrEmpty(filterExpression))
			{
				continue;
			}
			let filterElement = filterExpression.getFilterRootElement();
			let isDirectAndReason = oFF.QFilterAcrossModelsFilterUtil.isDirectFilterElementWithReason(sourceContext, targetContext, links, filterElement);
			if (!isDirectAndReason.getFirstObject().getBoolean() && oFF.XString.isEqual(isDirectAndReason.getSecondObject().getString(), oFF.QFilterAcrossModelsFilterUtil.FTD_RANGE_INDIRECT_REASON_INCOMPATIBLE_HIERARCHY))
			{
				result.add(filterExpression);
			}
		}
		return result;
	},
	hasSourceFilterLinkedOnDescription:function(context, links, filterExpressions)
	{
			for (let i = 0; i < filterExpressions.size(); i++)
		{
			let filterExpression = filterExpressions.get(i);
			if (oFF.QFilterUtil.isFilterNullOrEmpty(filterExpression))
			{
				continue;
			}
			let filters = oFF.QFilterAcrossModelsFilterUtil.collectApplicableSourceFilters(filterExpressions.get(i));
			for (let j = 0; j < filters.size(); j++)
			{
				let filter = filters.get(j);
				let isFilterWithContext = filter.getOlapComponentType().isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST) || filter.getOlapComponentType().isTypeOf(oFF.FilterComponentType.OPERATION);
				if (isFilterWithContext && oFF.QFilterAcrossModelsFilterUtil.isFilterDimensionLinkedOnFlatDescription(context, links, filter))
				{
					return true;
				}
			}
		}
		return false;
	},
	isDateOrTimeLikeDimensionAndHierarchyName:function(filterDimension, filterHierarchyName)
	{
			return oFF.QTimeDimensionUtil.isDateOrTimeLikeDimension(filterDimension) && (oFF.XStringUtils.isNullOrEmpty(filterHierarchyName) || filterDimension.getLeveledHierarchy(filterHierarchyName) !== null);
	},
	isDirectFilterContextWithReason:function(sourceContext, targetContext, links, filter)
	{
			let sourceDimension = oFF.QFilterAcrossModelsFilterUtil.getDimensionFromFilterContext(sourceContext, links, filter);
		if (oFF.isNull(sourceDimension))
		{
			return oFF.XPair.create(oFF.XBooleanValue.create(false), oFF.XStringValue.create(null));
		}
		if (sourceContext.getSession().hasFeature(oFF.FeatureToggleOlap.FLEXIBLE_TIME_DYNAMIC_TIME) && oFF.QTimeDimensionUtil.isFlexibleTimeDimension(sourceDimension))
		{
			if (oFF.XStringUtils.isNotNullAndNotEmpty(filter.getHierarchyName()))
			{
				return oFF.QFilterAcrossModelsFilterUtil.isDirectHierarchicalFlexibleTimeFilter(sourceContext, targetContext, links, filter);
			}
			let flexibleTimeLevelDimension = sourceContext.getQueryModel().getDimensionByName(filter.getFieldMetadata().getName());
			if (oFF.notNull(flexibleTimeLevelDimension))
			{
				sourceDimension = flexibleTimeLevelDimension;
			}
		}
		let linkPartForFilterDimension = oFF.QFilterAcrossModelsLinkUtil.getLinkPartFromDimensionOrFieldKey(links, sourceDimension);
		if (oFF.isNull(linkPartForFilterDimension))
		{
			return oFF.XPair.create(oFF.XBooleanValue.create(false), oFF.XStringValue.create(null));
		}
		if (oFF.QFilterAcrossModelsFilterUtil.isDateOrTimeLikeDimensionAndHierarchyName(sourceDimension, filter.getHierarchyName()))
		{
			return oFF.XPair.create(oFF.XBooleanValue.create(true), oFF.XStringValue.create(null));
		}
		if (!oFF.XString.isEqual(linkPartForFilterDimension.getHierarchyName(), filter.getHierarchyName()))
		{
			return oFF.XPair.create(oFF.XBooleanValue.create(false), oFF.XStringValue.create(null));
		}
		if (sourceDimension.getQueryModel().getConvenienceCommands().isTypeOfBw() && linkPartForFilterDimension.isHierarchical())
		{
			let linkCounterPartForFilterDimension = oFF.QFilterAcrossModelsLinkUtil.getLinkCounterPartFromDimensionOrFieldKey(links, sourceDimension);
			let targetIsTypeOfBw = targetContext.getQueryModel().getConvenienceCommands().isTypeOfBw();
			if (oFF.isNull(linkCounterPartForFilterDimension) || !linkCounterPartForFilterDimension.isHierarchical() || targetIsTypeOfBw && !oFF.XString.isEqual(linkPartForFilterDimension.getHierId(), linkCounterPartForFilterDimension.getHierId()))
			{
				return oFF.XPair.create(oFF.XBooleanValue.create(false), oFF.XStringValue.create(null));
			}
		}
		return oFF.XPair.create(oFF.XBooleanValue.create(true), oFF.XStringValue.create(null));
	},
	isDirectFilterElement:function(sourceContext, targetContext, links, filterElement)
	{
			return oFF.QFilterAcrossModelsFilterUtil.isDirectFilterElementWithReason(sourceContext, targetContext, links, filterElement).getFirstObject().getBoolean();
	},
	isDirectFilterElementWithReason:function(sourceContext, targetContext, links, filterElement)
	{
			if (oFF.isNull(filterElement) || filterElement.getOlapComponentType().isTypeOf(oFF.FilterComponentType.FILTER_MEASURE_BASED))
		{
			return oFF.XPair.create(oFF.XBooleanValue.create(false), oFF.XStringValue.create(null));
		}
		else if (filterElement.getOlapComponentType().isTypeOf(oFF.FilterComponentType.FILTER_TIME_RANGE))
		{
			let timeDimensionName = filterElement.getTimeDimensionName();
			let timeDimension = sourceContext.getQueryModel().getDimensionByName(timeDimensionName);
			if (oFF.QTimeDimensionUtil.isFlexibleTimeDimension(timeDimension))
			{
				return oFF.QFilterAcrossModelsFilterUtil.isDirectFlexibleTimeRangeFilter(sourceContext, targetContext, links, filterElement);
			}
			else
			{
				oFF.noSupport();
			}
		}
		else if (filterElement.getOlapComponentType().isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST) || filterElement.getOlapComponentType().isTypeOf(oFF.FilterComponentType.OPERATION) && filterElement.getComparisonOperator().isTypeOf(oFF.SpatialComparisonOperator._SPATIAL))
		{
			return oFF.QFilterAcrossModelsFilterUtil.isDirectFilterContextWithReason(sourceContext, targetContext, links, filterElement);
		}
		let childrenIterator = filterElement.getChildrenIterator();
		while (childrenIterator.hasNext())
		{
			let filterRootChild = childrenIterator.next();
			let isDirectAndReason = oFF.QFilterAcrossModelsFilterUtil.isDirectFilterElementWithReason(sourceContext, targetContext, links, filterRootChild);
			if (!isDirectAndReason.getFirstObject().getBoolean())
			{
				return isDirectAndReason;
			}
		}
		return oFF.XPair.create(oFF.XBooleanValue.create(true), oFF.XStringValue.create(null));
	},
	isDirectFlexibleTimeRangeFilter:function(sourceContext, targetContext, links, filter)
	{
			let timeRangeFilter = filter;
		if (!oFF.QFilterAcrossModelsLinkUtil.shouldPropagateTimeRangeFiltersDirect(links, sourceContext, timeRangeFilter.getTimeDimensionName()))
		{
			return oFF.XPair.create(oFF.XBooleanValue.create(false), oFF.XStringValue.create(oFF.QFilterAcrossModelsFilterUtil.FTD_RANGE_INDIRECT_REASON_PROPAGATE_INDIRECT));
		}
		let linkedDimensionNames = oFF.XHashSetOfString.create();
		linkedDimensionNames.addAll(oFF.QFilterAcrossModelsLinkUtil.getAllDimensionNamesForContext(links, sourceContext));
		let levelNames = timeRangeFilter.getAllLevelNames(sourceContext);
		for (let j = 0; j < levelNames.size(); j++)
		{
			if (!linkedDimensionNames.contains(levelNames.get(j)))
			{
				return oFF.XPair.create(oFF.XBooleanValue.create(false), oFF.XStringValue.create(oFF.QFilterAcrossModelsFilterUtil.FTD_RANGE_INDIRECT_REASON_UNLINKED));
			}
		}
		if (!oFF.QFilterAcrossModelsFilterUtil.isTargetHierarchyWithLevelAndStructureMatchAvailable(sourceContext, targetContext, links, timeRangeFilter.getTimeDimensionName(), timeRangeFilter.getHierarchyName(), levelNames))
		{
			return oFF.XPair.create(oFF.XBooleanValue.create(false), oFF.XStringValue.create(oFF.QFilterAcrossModelsFilterUtil.FTD_RANGE_INDIRECT_REASON_INCOMPATIBLE_HIERARCHY));
		}
		return oFF.XPair.create(oFF.XBooleanValue.create(true), oFF.XStringValue.create(null));
	},
	isDirectHierarchicalFlexibleTimeFilter:function(sourceContext, targetContext, links, filter)
	{
			let linkedDimensionNames = oFF.XHashSetOfString.create();
		linkedDimensionNames.addAll(oFF.QFilterAcrossModelsLinkUtil.getAllDimensionNamesForContext(links, sourceContext));
		let cartesianList = filter;
		let levels = null;
		let isRange = false;
		for (let i = 0; i < cartesianList.size(); i++)
		{
			let elem = cartesianList.getCartesianElement(i);
			if (elem.getComparisonOperator().isRange())
			{
				isRange = true;
			}
			let memberKey = elem.getLow().getString();
			levels = oFF.QFilterUtil.getHierarchyLevelsFromEntityValue(sourceContext.getQueryModel().getDimensionByName(filter.getDimensionName()), filter.getHierarchyName(), memberKey);
			if (oFF.XCollectionUtils.contains(levels, (level1) => {
				return !linkedDimensionNames.contains(level1.getLevelDimensionName());
			}))
			{
				return oFF.XPair.create(oFF.XBooleanValue.create(false), oFF.XStringValue.create(oFF.QFilterAcrossModelsFilterUtil.FTD_RANGE_INDIRECT_REASON_UNLINKED));
			}
		}
		if (isRange && oFF.notNull(levels))
		{
			let levelNames = oFF.XStream.of(levels).mapToString((level2) => {
				return level2.getLevelName();
			}).collect(oFF.XStreamCollector.toListOfString((boxedLevelName) => {
				return boxedLevelName.getString();
			}));
			if (!oFF.QFilterAcrossModelsLinkUtil.shouldPropagateTimeRangeFiltersDirect(links, sourceContext, cartesianList.getDimensionName()))
			{
				return oFF.XPair.create(oFF.XBooleanValue.create(false), oFF.XStringValue.create(oFF.QFilterAcrossModelsFilterUtil.FTD_RANGE_INDIRECT_REASON_PROPAGATE_INDIRECT));
			}
			if (!oFF.QFilterAcrossModelsFilterUtil.isTargetHierarchyWithLevelAndStructureMatchAvailable(sourceContext, targetContext, links, cartesianList.getDimensionName(), cartesianList.getHierarchyName(), levelNames))
			{
				return oFF.XPair.create(oFF.XBooleanValue.create(false), oFF.XStringValue.create(oFF.QFilterAcrossModelsFilterUtil.FTD_RANGE_INDIRECT_REASON_INCOMPATIBLE_HIERARCHY));
			}
		}
		return oFF.XPair.create(oFF.XBooleanValue.create(true), oFF.XStringValue.create(null));
	},
	isFilterAllIncludeOrAllExclude:function(filterElement, setSign)
	{
			if (oFF.isNull(filterElement))
		{
			return false;
		}
		if (filterElement.getOlapComponentType().isTypeOf(oFF.FilterComponentType.OPERATION))
		{
			let filterOp = filterElement;
			return setSign === oFF.SetSign.EXCLUDING && filterOp.getSetSign() === oFF.SetSign.EXCLUDING || setSign === oFF.SetSign.INCLUDING && filterOp.getSetSign() === oFF.SetSign.INCLUDING;
		}
		else if (filterElement.getOlapComponentType().isTypeOf(oFF.FilterComponentType.TRANSIENT_FILTER))
		{
			return setSign === oFF.SetSign.INCLUDING;
		}
		let childrenIterator = filterElement.getChildrenIterator();
		while (childrenIterator.hasNext())
		{
			let child = childrenIterator.next();
			if (filterElement.getOlapComponentType() !== oFF.FilterComponentType.NOT && !oFF.QFilterAcrossModelsFilterUtil.isFilterAllIncludeOrAllExclude(child, setSign) || filterElement.getOlapComponentType() === oFF.FilterComponentType.NOT && !oFF.QFilterAcrossModelsFilterUtil.isFilterAllIncludeOrAllExclude(child, setSign === oFF.SetSign.EXCLUDING ? oFF.SetSign.INCLUDING : oFF.SetSign.EXCLUDING))
			{
				return false;
			}
		}
		return true;
	},
	isFilterDimensionLinkedOnFlatDescription:function(context, links, filterContext)
	{
			let sourceFilterDimensionName = filterContext.getDimensionName();
		if (oFF.XStringUtils.isNullOrEmpty(sourceFilterDimensionName))
		{
			return false;
		}
		let sourceFilterDimension = oFF.QFilterAcrossModelsDimensionUtil.getDimensionOrCalcDim(context, sourceFilterDimensionName, oFF.QFilterAcrossModelsLinkUtil.getAnySharedLinkStorageName(links));
		let linkPartForFilterDimension = oFF.QFilterAcrossModelsLinkUtil.getLinkPartFromDimensionOrFieldKey(links, sourceFilterDimension);
		if (oFF.isNull(linkPartForFilterDimension) || linkPartForFilterDimension.isHierarchical())
		{
			return false;
		}
		let flatTextField = sourceFilterDimension.getFlatTextField();
		if (oFF.isNull(flatTextField))
		{
			return false;
		}
		return oFF.XString.isEqual(flatTextField.getName(), linkPartForFilterDimension.getFieldName());
	},
	isFilterDimensionLinkedWithIncludeHierarchyNodeChildrenSettingOn:function(context, links, filterContext)
	{
			let filterDimension = oFF.QFilterAcrossModelsFilterUtil.getDimensionFromFilterContext(context, links, filterContext);
		if (oFF.isNull(filterDimension))
		{
			return false;
		}
		let linkPart = oFF.QFilterAcrossModelsLinkUtil.getLinkPartFromDimensionOrFieldKey(links, filterDimension);
		return oFF.notNull(linkPart) && linkPart.isIncludeHierarchyNodeChildren();
	},
	isOpenEndedTimeCartesianList:function(context, links, cartesianList)
	{
			let sourceDimension = oFF.QFilterAcrossModelsFilterUtil.getDimensionFromFilterContext(context, links, cartesianList);
		if (oFF.isNull(sourceDimension) || !oFF.QTimeDimensionUtil.isDateOrTimeLikeDimension(sourceDimension))
		{
			return false;
		}
		for (let i = 0; i < cartesianList.size(); i++)
		{
			let cartesianElement = cartesianList.getCartesianElement(i);
			if (!oFF.QFilterAcrossModelsFilterUtil.isOpenEndedTimeRangeFilterElement(cartesianElement))
			{
				return false;
			}
		}
		return true;
	},
	isOpenEndedTimeRangeFilterElement:function(filterElement)
	{
			return filterElement.getComparisonOperator() === oFF.ComparisonOperator.GREATER_EQUAL || filterElement.getComparisonOperator() === oFF.ComparisonOperator.GREATER_THAN || filterElement.getComparisonOperator() === oFF.ComparisonOperator.BETWEEN && oFF.QFilterAcrossModelsFilterUtil.isOpenEndedTimeRangeFilterLowValue(filterElement.getLow().getString());
	},
	isOpenEndedTimeRangeFilterLowValue:function(lowValue)
	{
			return oFF.XString.startsWith(lowValue, oFF.QFilterAcrossModelsFilterUtil.OPEN_ENDED_RANGE_LOW_VALUE);
	},
	isTargetHierarchyWithLevelAndStructureMatchAvailable:function(sourceContext, targetContext, links, sourceTimeDimensionName, sourceHierarchyName, sourceLevelNames)
	{
			let sourceTimeDimension = sourceContext.getQueryModel().getDimensionByName(sourceTimeDimensionName);
		let targetLevelName = oFF.QFilterAcrossModelsLinkUtil.getLinkCounterPartDimensionName(links, sourceContext, sourceLevelNames.getIterator().next());
		let targetLevelDimension = targetContext.getQueryModel().getDimensionByName(targetLevelName);
		let targetTimeDimension = targetLevelDimension.getGroupingDimensions().get(0);
		let compatibleHierarchyAndMatchLevel = oFF.QFilterAcrossModelsFilterUtil.findCompatibleHierarchyFromLinksAndLevels(links, sourceTimeDimension, sourceTimeDimension.getLeveledHierarchy(sourceHierarchyName), sourceLevelNames, targetTimeDimension);
		return oFF.XString.isEqual(compatibleHierarchyAndMatchLevel.getSecondObject().getString(), oFF.QFilterAcrossModelsFilterUtil.LEVELS_AND_STRUCTURE_MATCH);
	},
	mergeFilterOrCartesianListsIfApplicable:function(filterOr)
	{
			let result = oFF.QFactory.createFilterCartesianList(filterOr.getContext());
		let lastFilterFieldMetadata = null;
		let lastFilterHierarchyName = null;
		for (let i = 0; i < filterOr.size(); i++)
		{
			let element = filterOr.get(i);
			if (!element.getOlapComponentType().isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
			{
				return filterOr;
			}
			let cartesianListFromFilterOr = element;
			if (oFF.isNull(lastFilterFieldMetadata))
			{
				lastFilterFieldMetadata = cartesianListFromFilterOr.getFieldMetadata();
				result.setFieldMetadata(lastFilterFieldMetadata);
			}
			if (oFF.isNull(lastFilterHierarchyName))
			{
				lastFilterHierarchyName = cartesianListFromFilterOr.getHierarchyName();
				result.setHierarchyName(lastFilterHierarchyName);
			}
			if (lastFilterFieldMetadata !== cartesianListFromFilterOr.getFieldMetadata() || !oFF.XString.isEqual(lastFilterHierarchyName, cartesianListFromFilterOr.getHierarchyName()))
			{
				return filterOr;
			}
			result.setConvertToFlatFilter(cartesianListFromFilterOr.isConvertToFlatFilter());
			for (let j = 0; j < cartesianListFromFilterOr.size(); j++)
			{
				let cartesianElementFromFilterOr = cartesianListFromFilterOr.getCartesianElement(j);
				if (cartesianElementFromFilterOr.getSetSign() === oFF.SetSign.EXCLUDING)
				{
					return filterOr;
				}
				result.add(cartesianElementFromFilterOr);
			}
		}
		return result;
	},
	negateExcludeFilter:function(filter)
	{
			if (oFF.isNull(filter))
		{
			return filter;
		}
		let negatedFilter = null;
		if (oFF.QFilterAcrossModelsFilterUtil.isFilterAllIncludeOrAllExclude(filter, oFF.SetSign.EXCLUDING))
		{
			negatedFilter = oFF.QFilterAcrossModelsFilterUtil.negateFilter(filter);
		}
		else
		{
			negatedFilter = filter;
		}
		return negatedFilter;
	},
	negateFilter:function(filterElement)
	{
			if (filterElement.getOlapComponentType().isTypeOf(oFF.FilterComponentType.OPERATION))
		{
			let filterOp = filterElement;
			let newFilterOp = oFF.QFactory.createFilterOperation(filterElement.getContext(), filterOp.getField());
			newFilterOp.copyFrom(filterOp, null);
			newFilterOp.setSetSign(filterOp.getSetSign() === oFF.SetSign.EXCLUDING ? oFF.SetSign.INCLUDING : oFF.SetSign.EXCLUDING);
			return newFilterOp;
		}
		if (filterElement.getOlapComponentType() === oFF.FilterComponentType.NOT)
		{
			let filterNot = filterElement;
			return filterNot.size() > 0 ? filterNot.get(0) : null;
		}
		let newFilterAlgebra = null;
		if (filterElement.getOlapComponentType().isTypeOf(oFF.FilterComponentType.AND))
		{
			newFilterAlgebra = oFF.QFactory.createFilterOr(filterElement.getContext());
		}
		else if (filterElement.getOlapComponentType() === oFF.FilterComponentType.OR)
		{
			newFilterAlgebra = oFF.QFactory.createFilterAnd(filterElement.getContext());
		}
		else if (filterElement.getOlapComponentType() === oFF.FilterComponentType.CARTESIAN_LIST)
		{
			let cartesianList = filterElement;
			newFilterAlgebra = oFF.QFactory.createFilterCartesianList(filterElement.getContext());
			newFilterAlgebra.copyFrom(cartesianList, null);
			newFilterAlgebra.clear();
		}
		if (oFF.isNull(newFilterAlgebra))
		{
			return null;
		}
		let childrenIterator = filterElement.getChildrenIterator();
		while (childrenIterator.hasNext())
		{
			let child = childrenIterator.next();
			let negatedElement = oFF.QFilterAcrossModelsFilterUtil.negateFilter(child);
			if (oFF.notNull(negatedElement))
			{
				newFilterAlgebra.add(negatedElement);
			}
		}
		return newFilterAlgebra;
	},
	optimizeTupleFilterIfApplicable:function(filterRoot)
	{
			let result = filterRoot;
		let tupleIndicesToFactor = oFF.QFilterAcrossModelsFilterUtil.determineTupleIndicesWithUniqueValues(filterRoot);
		if (oFF.isNull(tupleIndicesToFactor) || tupleIndicesToFactor.size() === 0)
		{
			return result;
		}
		let filtersToFactor = oFF.XList.create();
		for (let i = 0; i < filterRoot.size(); i++)
		{
			let tupleFilter = filterRoot.get(i);
			for (let j = tupleFilter.size() - 1; j >= 0; j--)
			{
				let tupleFilterIndex = j;
				if (oFF.XCollectionUtils.contains(tupleIndicesToFactor, (tupleIndex) => {
					return tupleIndex.getInteger() === tupleFilterIndex;
				}))
				{
					let removedElem = tupleFilter.removeAt(tupleFilterIndex);
					if (i === 0)
					{
						filtersToFactor.add(removedElem);
					}
				}
			}
		}
		if (filtersToFactor.size() > 0)
		{
			result = oFF.QFactory.createFilterAnd(filterRoot.getContext());
			result.add(filterRoot);
			for (let k = 0; k < filtersToFactor.size(); k++)
			{
				result.add(filtersToFactor.get(k));
			}
		}
		return result;
	},
	processRangeFilterMessagesForTargetDirectFilter:function(sourceContext, targetContext, links, targetDirectFilter, messageManager)
	{
			let operationFilterComponents = oFF.QFilterUtil.collectFilterComponentOfType(targetDirectFilter, oFF.FilterComponentType.OPERATION, false);
		for (let i = 0; i < operationFilterComponents.size(); i++)
		{
			let operation = operationFilterComponents.get(i);
			if (!operation.getComparisonOperator().isRange())
			{
				continue;
			}
			let targetDimension = targetContext.getDimensionAccessor().getDimensionByName(operation.getDimensionName());
			let targetDimensionLinkCounterPart = oFF.QFilterAcrossModelsLinkUtil.getLinkCounterPartFromDimensionOrFieldKey(links, targetDimension);
			let sourceDimension = sourceContext.getDimensionAccessor().getDimensionByName(targetDimensionLinkCounterPart.getDimensionName());
			let supportsRangeFilterCapability = false;
			let field = targetContext.getFieldAccessorSingle().getFieldByName(operation.getFieldMetadata().getName());
			if (oFF.notNull(targetDimension) && oFF.notNull(field) && !targetDimension.isCompound())
			{
				let filterCapability = targetDimension.getFilterCapabilities().getFilterCapabilitiesByField(field);
				if (oFF.notNull(filterCapability) && filterCapability.isFilterCapabilityGroup())
				{
					let filterCapabilityGroup = filterCapability.getGroup();
					supportsRangeFilterCapability = filterCapabilityGroup === oFF.QSetSignComparisonOperatorGroup.RANGE || filterCapabilityGroup === oFF.QSetSignComparisonOperatorGroup.RANGE_INCLUDE_ONLY;
				}
			}
			let existingMessage;
			if (!supportsRangeFilterCapability)
			{
				existingMessage = messageManager.getMessage(oFF.Severity.WARNING, oFF.ErrorCodes.FILTER_ACROSS_MODEL_TARGET_RANGE_FILTER_MISSING_RANGE_FILTER_CAPABILITY);
				if (oFF.isNull(existingMessage))
				{
					messageManager.addWarning(oFF.ErrorCodes.FILTER_ACROSS_MODEL_TARGET_RANGE_FILTER_MISSING_RANGE_FILTER_CAPABILITY, oFF.ErrorMessages.FILTER_ACROSS_MODEL_TARGET_RANGE_FILTER_MISSING_RANGE_FILTER_CAPABILITY);
				}
				return true;
			}
			if (!oFF.QTimeDimensionUtil.isDateOrTimeLikeDimension(sourceDimension) && !oFF.QFilterAcrossModelsDimensionUtil.areDimensionsFromSameBWSystem(sourceDimension, targetDimension))
			{
				existingMessage = messageManager.getMessage(oFF.Severity.INFO, oFF.ErrorCodes.FILTER_ACROSS_MODEL_DIRECT_BW_RANGE_FILTER_POSSIBLE_QUERY_FAILURE);
				if (oFF.isNull(existingMessage))
				{
					messageManager.addInfoExt(oFF.OriginLayer.APPLICATION, oFF.ErrorCodes.FILTER_ACROSS_MODEL_DIRECT_BW_RANGE_FILTER_POSSIBLE_QUERY_FAILURE, "");
				}
			}
		}
		return false;
	},
	reduceAndCreateFinalFilterAcrossModelsRootFilterElement:function(directFilterRoot, indirectFilterRoot, useFilterAndAsRoot)
	{
			let reducedDirectFilterRoot = directFilterRoot;
		if (directFilterRoot.size() === 1 && (directFilterRoot.getOlapComponentType() === oFF.FilterComponentType.AND || directFilterRoot.getOlapComponentType() === oFF.FilterComponentType.OR))
		{
			reducedDirectFilterRoot = directFilterRoot.get(0);
		}
		let reducedIndirectFilterRoot = indirectFilterRoot;
		if (indirectFilterRoot.size() === 1 && (indirectFilterRoot.getOlapComponentType() === oFF.FilterComponentType.AND || indirectFilterRoot.getOlapComponentType() === oFF.FilterComponentType.OR))
		{
			reducedIndirectFilterRoot = indirectFilterRoot.get(0);
		}
		let filterElementRoot;
		if (directFilterRoot.size() > 0 && indirectFilterRoot.size() > 0)
		{
			let filterAnd = oFF.QFactory.createFilterAnd(directFilterRoot.getContext());
			filterAnd.add(reducedDirectFilterRoot);
			filterAnd.add(reducedIndirectFilterRoot);
			filterElementRoot = filterAnd;
		}
		else if (directFilterRoot.size() > 0)
		{
			filterElementRoot = reducedDirectFilterRoot;
		}
		else
		{
			filterElementRoot = reducedIndirectFilterRoot;
		}
		if (useFilterAndAsRoot && !filterElementRoot.getOlapComponentType().isTypeOf(oFF.FilterComponentType.AND))
		{
			let newFilterAndRoot = oFF.QFactory.createFilterAnd(filterElementRoot.getContext());
			newFilterAndRoot.add(filterElementRoot);
			filterElementRoot = newFilterAndRoot;
		}
		return filterElementRoot;
	},
	setCartesianElementValues:function(cartesianElement, lowValue, highValue, field)
	{
			if (oFF.notNull(lowValue))
		{
			oFF.QFilterAcrossModelsFilterUtil.setValueBagValue(cartesianElement.getLow(), field.getValueType(), lowValue);
		}
		if (oFF.notNull(highValue))
		{
			oFF.QFilterAcrossModelsFilterUtil.setValueBagValue(cartesianElement.getHigh(), field.getValueType(), highValue);
		}
	},
	setValueBagValue:function(valueBag, valueType, value)
	{
			oFF.XObjectExt.assertNotNull(valueBag);
		oFF.XObjectExt.assertNotNull(valueType);
		if (valueType === oFF.XValueType.DATE_TIME)
		{
			valueBag.setDateTime(oFF.XDateTime.createDateTimeFromIsoFormat(value));
		}
		else if (valueType === oFF.XValueType.DECIMAL_FLOAT)
		{
			valueBag.setDouble(oFF.XDouble.convertFromString(value));
		}
		else
		{
			valueBag.setValue(oFF.XValueUtil.getValueFromString(value, valueType));
		}
	}
};

oFF.QFilterAcrossModelsLinkUtil = {

	buildError:function(errorCode, errorMessage)
	{
			let error = oFF.XPair.create(oFF.XIntegerValue.create(errorCode), oFF.XStringValue.create(errorMessage));
		return oFF.XCollectionUtils.singletonList(error);
	},
	doAllLinkedDimensionsSupportExcludeFilters:function(links, context)
	{
			let supportExcludeFilters = true;
		let linkParts = oFF.QFilterAcrossModelsLinkUtil.getAllLinkPartsForContext(links, context);
		for (let i = 0; i < linkParts.size(); i++)
		{
			let linkPart = linkParts.get(i);
			let storageName = oFF.QFilterAcrossModelsLinkUtil.getStorageNameForLinkComponent(linkPart);
			let linkedDimension = oFF.QFilterAcrossModelsDimensionUtil.getDimensionOrCalcDim(context, linkPart.getDimensionName(), storageName);
			if (oFF.notNull(linkedDimension))
			{
				let cmds = linkedDimension.getQueryManager().getConvenienceCommands();
				let linkedField;
				if (cmds.isTypeOfBw())
				{
					linkedField = linkPart.isHierarchical() ? linkedDimension.getHierarchyKeyField() : linkedDimension.getFlatKeyField();
				}
				else
				{
					linkedField = oFF.QFilterAcrossModelsDimensionUtil.getFieldOrCalcDimField(context, linkPart.getFieldName(), storageName);
				}
				if (oFF.notNull(linkedField))
				{
					let filterCapability = linkedDimension.getFilterCapabilities().getFilterCapabilitiesByField(linkedField);
					if (oFF.notNull(filterCapability) && !filterCapability.supportsSetSign(oFF.SetSign.EXCLUDING))
					{
						supportExcludeFilters = false;
						break;
					}
				}
			}
		}
		return supportExcludeFilters;
	},
	doesCompoundDimensionHaveHierarchies:function(dimension)
	{
			let hasHierarchies = false;
		if (oFF.notNull(dimension) && dimension.isCompound() && dimension.supportsHierarchy())
		{
			if (dimension.hasExternalHierarchies())
			{
				hasHierarchies = true;
			}
			else
			{
				let hierarchies = dimension.getHierarchies();
				if (oFF.notNull(hierarchies))
				{
					let hierarchyItems = hierarchies.getObjects();
					hasHierarchies = oFF.notNull(hierarchyItems) && hierarchyItems.size() > 0;
				}
			}
		}
		return hasHierarchies;
	},
	getAllDimensionNamesForContext:function(links, context)
	{
			let linkParts = oFF.QFilterAcrossModelsLinkUtil.getAllLinkPartsForContext(links, context);
		let result = oFF.XList.create();
		for (let i = 0; i < linkParts.size(); i++)
		{
			let dimensionName = linkParts.get(i).getDimensionName();
			if (oFF.notNull(dimensionName))
			{
				result.add(dimensionName);
			}
		}
		return result;
	},
	getAllLinkPartsForContext:function(links, context)
	{
			let result = oFF.XList.create();
		for (let i = 0; i < links.size(); i++)
		{
			let link = links.get(i);
			if (link.getFirstPart().isSameDataSourceOrDatasetIdAsContext(context))
			{
				result.add(link.getFirstPart());
			}
			else if (link.getSecondPart().isSameDataSourceOrDatasetIdAsContext(context))
			{
				result.add(link.getSecondPart());
			}
			else
			{
				throw oFF.XException.createIllegalArgumentException("context provided is not linked");
			}
		}
		return result;
	},
	getAnySharedLinkStorageName:function(links)
	{
			for (let i = 0; i < links.size(); i++)
		{
			let link = links.get(i);
			let storageName = oFF.QFilterAcrossModelsLinkUtil.getStorageNameForLinkComponent(link.getFirstPart());
			if (oFF.notNull(storageName))
			{
				return storageName;
			}
			storageName = oFF.QFilterAcrossModelsLinkUtil.getStorageNameForLinkComponent(link.getSecondPart());
			if (oFF.notNull(storageName))
			{
				return storageName;
			}
		}
		return null;
	},
	getFirstLinkPartForContext:function(links, context)
	{
			return oFF.QFilterAcrossModelsLinkUtil.getFirstLinkPartForContextWithOptions(links, context, false);
	},
	getFirstLinkPartForContextWithOptions:function(links, context, isSecondary)
	{
			let dimensionLink = links.get(0);
		if (dimensionLink.getFirstPart().isSameDataSourceOrDatasetIdAsContext(context) && !isSecondary || dimensionLink.getSecondPart().isSameDataSourceOrDatasetIdAsContext(context) && isSecondary)
		{
			return dimensionLink.getFirstPart();
		}
		return dimensionLink.getSecondPart();
	},
	getFirstSecondaryLinkPartForContext:function(links, context)
	{
			return oFF.QFilterAcrossModelsLinkUtil.getFirstLinkPartForContextWithOptions(links, context, true);
	},
	getLinkCounterPartDimensionName:function(links, context, dimensionName)
	{
			let sourceLevelDimension = oFF.QFilterAcrossModelsDimensionUtil.getDimensionOrCalcDim(context, dimensionName, null);
		let targetLinkPart = oFF.QFilterAcrossModelsLinkUtil.getLinkCounterPartFromDimensionOrFieldKey(links, sourceLevelDimension);
		return targetLinkPart.getDimensionName();
	},
	getLinkCounterPartFromDimensionOrFieldKey:function(links, dimension)
	{
			return oFF.QFilterAcrossModelsLinkUtil.getLinkPartForDimensionOrFieldKeyWithOptions(links, dimension, true);
	},
	getLinkPartForDimensionOrFieldKeyWithOptions:function(links, dimension, returnOtherPart)
	{
			for (let i = 0; i < links.size(); i++)
		{
			let link = links.get(i);
			if (link.getFirstPart().isSameDimension(dimension))
			{
				return returnOtherPart ? link.getSecondPart() : link.getFirstPart();
			}
			else if (link.getSecondPart().isSameDimension(dimension))
			{
				return returnOtherPart ? link.getFirstPart() : link.getSecondPart();
			}
		}
		return null;
	},
	getLinkPartFromDimensionOrFieldKey:function(links, dimension)
	{
			return oFF.QFilterAcrossModelsLinkUtil.getLinkPartForDimensionOrFieldKeyWithOptions(links, dimension, false);
	},
	getLinkedDimensionsForContext:function(links, context)
	{
			let dimensions = oFF.XList.create();
		for (let i = 0; i < links.size(); i++)
		{
			let link = links.get(i);
			let firstPart = link.getFirstPart();
			let secondPart = link.getSecondPart();
			if (firstPart === context)
			{
				dimensions.add(firstPart.getDimensionName());
			}
			else if (secondPart === context)
			{
				dimensions.add(secondPart.getDimensionName());
			}
			else if (oFF.QFilterAcrossModelsLinkUtil.isSameDatasourceKeys(firstPart, context.getFieldKey()))
			{
				dimensions.add(firstPart.getDimensionName());
			}
			else if (oFF.QFilterAcrossModelsLinkUtil.isSameDatasourceKeys(secondPart, context.getFieldKey()))
			{
				dimensions.add(secondPart.getDimensionName());
			}
		}
		return dimensions;
	},
	getSharedLinkPartContext:function(linkPart, linkPartContext)
	{
			if (oFF.XStringUtils.isNotNullAndNotEmpty(linkPart.getQueryManagerKey()))
		{
			let sharedLinkPartContext = linkPartContext.getOlapEnv().getSharedQueryManager(linkPart.getQueryManagerKey());
			if (oFF.notNull(sharedLinkPartContext))
			{
				return sharedLinkPartContext;
			}
		}
		return linkPartContext;
	},
	getSharedLinkStorageName:function(links, linkPart)
	{
			let storageName = oFF.QFilterAcrossModelsLinkUtil.getStorageNameForLinkComponent(linkPart);
		if (oFF.notNull(storageName))
		{
			return storageName;
		}
		for (let i = 0; i < links.size(); i++)
		{
			let link = links.get(i);
			storageName = oFF.QFilterAcrossModelsLinkUtil.getStorageNameForLinkComponent(link);
			if (oFF.notNull(storageName))
			{
				return storageName;
			}
		}
		return null;
	},
	getStorageNameForLinkComponent:function(linkComponent)
	{
			if (linkComponent.getContext() !== null && linkComponent.getContext().getComponentType() === oFF.OlapComponentType.KEY_REF_STORE_CONTEXT)
		{
			return linkComponent.getStorageName();
		}
		return null;
	},
	groupLinksByGroupingDimension:function(links, context)
	{
			let groupingDimensionToLinks = oFF.XHashMapByString.create();
		let queryModel = context.getQueryModel();
		for (let i = 0; i < links.size(); i++)
		{
			let link = links.get(i);
			let linkedDimensionName;
			if (link.getFirstPart().isSameDataSourceOrDatasetIdAsContext(context))
			{
				linkedDimensionName = link.getFirstPart().getDimensionName();
			}
			else
			{
				linkedDimensionName = link.getSecondPart().getDimensionName();
			}
			let linkedDimension = queryModel.getDimensionByName(linkedDimensionName);
			let key = linkedDimensionName;
			if (oFF.notNull(linkedDimension) && linkedDimension.getGroupingDimensions().size() > 0)
			{
				let groupingDimension = linkedDimension.getGroupingDimensions().get(0);
				key = groupingDimension.getName();
			}
			if (!groupingDimensionToLinks.containsKey(key))
			{
				groupingDimensionToLinks.put(key, oFF.XList.create());
			}
			groupingDimensionToLinks.getByKey(key).add(link);
		}
		return groupingDimensionToLinks;
	},
	isSameDatasourceKeys:function(first, second)
	{
			return oFF.XString.isEqual(first.getSystemName(), second.getSystemName()) && oFF.XString.isEqual(first.getDataSourceHashKey(), second.getDataSourceHashKey());
	},
	reduceLinksBasedOnPropagateDefaultHierarchyKey:function(links, context)
	{
			let reducedLinks = oFF.XList.create();
		let groupingDimensionToLinks = oFF.QFilterAcrossModelsLinkUtil.groupLinksByGroupingDimension(links, context);
		let iterator = groupingDimensionToLinks.getKeysAsIterator();
		while (iterator.hasNext())
		{
			let groupingDimName = iterator.next();
			let groupingDimLinks = groupingDimensionToLinks.getByKey(groupingDimName);
			let linkWithPropagateOnDefaultHierarchyKey = oFF.XCollectionUtils.findFirst(groupingDimLinks, (link) => {
				let linkPart = link.getFirstPart().isSameDataSourceOrDatasetIdAsContext(context) ? link.getFirstPart() : link.getSecondPart();
				return linkPart.getPropagateOnDefaultHierarchyKey();
			});
			if (oFF.notNull(linkWithPropagateOnDefaultHierarchyKey))
			{
				groupingDimLinks.clear();
				groupingDimLinks.add(linkWithPropagateOnDefaultHierarchyKey);
			}
			reducedLinks.addAll(groupingDimLinks);
		}
		return reducedLinks;
	},
	shouldPropagateDirectFlexibleTimeMemberFiltersUsingHierarchy:function(links, context, timeDimensionName)
	{
			return oFF.QFilterAcrossModelsLinkUtil.shouldPropagateFlexibleTimeLinkProperty(links, context, timeDimensionName, (linkPart) => {
			return linkPart.getPropagateDirectFlexibleTimeMemberFiltersUsingHierarchy();
		});
	},
	shouldPropagateFlexibleTimeLinkProperty:function(links, context, timeDimensionName, predicate)
	{
			let linkParts = oFF.QFilterAcrossModelsLinkUtil.getAllLinkPartsForContext(links, context);
		for (let i = 0; i < linkParts.size(); i++)
		{
			let linkPart = linkParts.get(i);
			let linkPartDimension = context.getQueryModel().getDimensionByName(linkPart.getDimensionName());
			if (linkPartDimension.getGroupingDimensions().size() > 0)
			{
				let linkPartGroupingDimension = linkPartDimension.getGroupingDimensions().get(0);
				if (oFF.XString.isEqual(linkPartGroupingDimension.getName(), timeDimensionName) && predicate(linkPart))
				{
					return true;
				}
			}
		}
		return false;
	},
	shouldPropagateTimeRangeFiltersDirect:function(links, context, timeDimensionName)
	{
			return oFF.QFilterAcrossModelsLinkUtil.shouldPropagateFlexibleTimeLinkProperty(links, context, timeDimensionName, (linkPart) => {
			return linkPart.getPropagateFlexibleTimeRangeFiltersDirect();
		});
	},
	validateLink:function(link, sourceContext, targetContext)
	{
			let sourcePart = null;
		let targetPart = null;
		if (link.getFirstPart().isSameDataSourceOrDatasetIdAsContext(sourceContext))
		{
			sourcePart = link.getFirstPart();
			targetPart = link.getSecondPart();
		}
		else
		{
			sourcePart = link.getSecondPart();
			targetPart = link.getFirstPart();
		}
		let sharedSourceContext = oFF.QFilterAcrossModelsLinkUtil.getSharedLinkPartContext(sourcePart, sourceContext);
		let sharedTargetContext = oFF.QFilterAcrossModelsLinkUtil.getSharedLinkPartContext(targetPart, targetContext);
		let sourceLinkPartErrors = oFF.QFilterAcrossModelsLinkUtil.validateLinkPart(sourcePart, sharedSourceContext);
		if (sourceLinkPartErrors.size() > 0)
		{
			return sourceLinkPartErrors;
		}
		let targetLinkPartErrors = oFF.QFilterAcrossModelsLinkUtil.validateLinkPart(targetPart, sharedTargetContext);
		if (targetLinkPartErrors.size() > 0)
		{
			return targetLinkPartErrors;
		}
		let sourceStorageName = oFF.QFilterAcrossModelsLinkUtil.getStorageNameForLinkComponent(sourcePart);
		let sourceDimension = oFF.QFilterAcrossModelsDimensionUtil.getDimensionOrCalcDim(sharedSourceContext, sourcePart.getDimensionName(), sourceStorageName);
		let targetStorageName = oFF.QFilterAcrossModelsLinkUtil.getStorageNameForLinkComponent(targetPart);
		let targetDimension = oFF.QFilterAcrossModelsDimensionUtil.getDimensionOrCalcDim(sharedTargetContext, targetPart.getDimensionName(), targetStorageName);
		if (oFF.notNull(sourceDimension) && oFF.notNull(targetDimension) && !sourceContext.getQueryModel().getConvenienceCommands().isTypeOfBw() && !targetContext.getQueryModel().getConvenienceCommands().isTypeOfBw())
		{
			if (sourceDimension.isCompound() !== targetDimension.isCompound())
			{
				return oFF.QFilterAcrossModelsLinkUtil.buildError(oFF.ErrorCodes.FILTER_ACROSS_MODEL_LINK_COMPOUND_NON_COMPOUND, oFF.ErrorMessages.FILTER_ACROSS_MODEL_LINK_COMPOUND_NON_COMPOUND);
			}
			else if (sourceDimension.isCompound() && targetDimension.isCompound())
			{
				let sourceHasHierarchies = oFF.QFilterAcrossModelsLinkUtil.doesCompoundDimensionHaveHierarchies(sourceDimension);
				let targetHasHierarchies = oFF.QFilterAcrossModelsLinkUtil.doesCompoundDimensionHaveHierarchies(targetDimension);
				if (sourceDimension.getKeyAttributesNames().size() !== targetDimension.getKeyAttributesNames().size())
				{
					return oFF.QFilterAcrossModelsLinkUtil.buildError(oFF.ErrorCodes.FILTER_ACROSS_MODEL_COMPOUND_PART_KEYS_NON_MATCHING, oFF.ErrorMessages.FILTER_ACROSS_MODEL_COMPOUND_PART_KEYS_NON_MATCHING);
				}
				else if (sourceHasHierarchies !== targetHasHierarchies)
				{
					return oFF.QFilterAcrossModelsLinkUtil.buildError(oFF.ErrorCodes.FILTER_ACROSS_MODEL_LINK_COMPOUND_FLAT_AND_HIERARCHY, oFF.ErrorMessages.FILTER_ACROSS_MODEL_LINK_COMPOUND_FLAT_AND_HIERARCHY);
				}
				else if (sourceHasHierarchies && targetHasHierarchies)
				{
					if (sourceDimension.hasExternalHierarchies() !== targetDimension.hasExternalHierarchies())
					{
						return oFF.QFilterAcrossModelsLinkUtil.buildError(oFF.ErrorCodes.FILTER_ACROSS_MODEL_LINK_COMPOUND_INTERNAL_AND_EXTERNAL_HIERARCHY, oFF.ErrorMessages.FILTER_ACROSS_MODEL_LINK_COMPOUND_INTERNAL_AND_EXTERNAL_HIERARCHY);
					}
					else if (sourceDimension.getKeyAttributesNames().size() > 0 && targetDimension.getKeyAttributesNames().size() > 0)
					{
						let sourcePartFieldValueType = sourceDimension.getFieldByNameOrAlias(sourceDimension.getKeyAttributesNames().get(0)).getValueType();
						let targetPartFieldValueType = targetDimension.getFieldByNameOrAlias(targetDimension.getKeyAttributesNames().get(0)).getValueType();
						if (sourcePartFieldValueType !== targetPartFieldValueType)
						{
							return oFF.QFilterAcrossModelsLinkUtil.buildError(oFF.ErrorCodes.FILTER_ACROSS_MODEL_LINK_COMPOUND_KEY_VALUE_TYPE_MISMATCH, oFF.ErrorMessages.FILTER_ACROSS_MODEL_LINK_COMPOUND_KEY_VALUE_TYPE_MISMATCH);
						}
					}
				}
			}
		}
		return oFF.XList.create();
	},
	validateLinkPart:function(linkPart, linkPartContext)
	{
			let storageName = oFF.QFilterAcrossModelsLinkUtil.getStorageNameForLinkComponent(linkPart);
		let linkedDimension = oFF.QFilterAcrossModelsDimensionUtil.getDimensionOrCalcDim(linkPartContext, linkPart.getDimensionName(), storageName);
		if (oFF.isNull(linkedDimension))
		{
			return oFF.QFilterAcrossModelsLinkUtil.buildError(oFF.ErrorCodes.FILTER_ACROSS_MODEL_INVALID_DIMENSION_HIERARCHY, oFF.ErrorMessages.FILTER_ACROSS_MODEL_INVALID_DIMENSION_HIERARCHY);
		}
		let linkedField = oFF.QFilterAcrossModelsDimensionUtil.getFieldOrCalcDimField(linkPartContext, linkPart.getFieldName(), storageName);
		if (oFF.isNull(linkedField))
		{
			return oFF.QFilterAcrossModelsLinkUtil.buildError(oFF.ErrorCodes.FILTER_ACROSS_MODEL_INVALID_DIMENSION_HIERARCHY, oFF.ErrorMessages.FILTER_ACROSS_MODEL_INVALID_DIMENSION_HIERARCHY);
		}
		if (linkPartContext.getModelCapabilities().supportsDisplayAttributes() && !linkedField.isFilterableForValueHelpAndReadMode(oFF.QMemberReadMode.BOOKED))
		{
			return oFF.QFilterAcrossModelsLinkUtil.buildError(oFF.ErrorCodes.FILTER_ACROSS_MODEL_INVALID_LINK_DISPLAY_ATTRIBUTE, oFF.ErrorMessages.FILTER_ACROSS_MODEL_INVALID_LINK_DISPLAY_ATTRIBUTE);
		}
		if (linkPart.isHierarchical())
		{
			let hierarchies = linkedDimension.getHierarchies();
			if (oFF.notNull(hierarchies))
			{
				let hierarchyItems = hierarchies.getObjects();
				let doesHierarchyExist = hierarchyItems.size() > 0 && oFF.XCollectionUtils.contains(hierarchyItems, (hierarchy) => {
					return oFF.XString.isEqual(hierarchy.getHierarchyName(), linkPart.getHierarchyName());
				}) || linkedDimension.getLeveledHierarchy(linkPart.getHierarchyName()) !== null;
				if (!doesHierarchyExist)
				{
					return oFF.QFilterAcrossModelsLinkUtil.buildError(oFF.ErrorCodes.FILTER_ACROSS_MODEL_INVALID_DIMENSION_HIERARCHY, oFF.ErrorMessages.FILTER_ACROSS_MODEL_INVALID_DIMENSION_HIERARCHY);
				}
			}
		}
		return oFF.XList.create();
	},
	validateLinks:function(links, sourceContext, targetContext)
	{
			let cmds = sourceContext.getQueryManager().getConvenienceCommands();
		if (cmds.isLinkingToQueryManagerUnsupported(targetContext.getQueryManager()))
		{
			return oFF.QFilterAcrossModelsLinkUtil.buildError(oFF.ErrorCodes.FILTER_ACROSS_MODEL_INVALID_MODEL_LINK, oFF.ErrorMessages.FILTER_ACROSS_MODEL_INVALID_MODEL_LINK);
		}
		for (let i = 0; i < links.size(); i++)
		{
			let linkInvalidErrors = oFF.QFilterAcrossModelsLinkUtil.validateLink(links.get(i), sourceContext, targetContext);
			if (linkInvalidErrors.size() > 0)
			{
				return linkInvalidErrors;
			}
		}
		return oFF.XList.create();
	}
};

oFF.QFilterUtil = {

	LBH_MEMBER_LOWEST_LEVEL_PATTERN:"^\\[[\\s\\S]*\\]\\.\\[[\\s\\S]*\\]\\.&\\[([\\s\\S]*)\\]$",
	LBH_MEMBER_NODE_PATH_PATTERN:"^\\[[\\s\\S]*\\]\\.\\[[\\s\\S]*\\]\\.\\[\\(all\\)\\]\\.\\[([\\s\\S]*)\\]$",
	LBH_MEMBER_SPECIFIC_LEVEL_PATTERN:"^\\[[\\s\\S]*\\]\\.\\[[\\s\\S]*\\]\\.\\[([\\s\\S]*)\\]\\.\\[([\\s\\S]*)\\]$",
	LEAVES:"LEAVES",
	_collectAllCartesianLists:function(filterElementRoot, resultCartesianLists)
	{
			if (filterElementRoot.getOlapComponentType().isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
		{
			resultCartesianLists.add(filterElementRoot);
			return;
		}
		let childrenIterator = filterElementRoot.getChildrenIterator();
		while (childrenIterator.hasNext())
		{
			let filterRootChild = childrenIterator.next();
			oFF.QFilterUtil._collectAllCartesianLists(filterRootChild, resultCartesianLists);
		}
	},
	_collectAllDynamicTimeRegularRangeFilters:function(filterElementRoot, timeDimension, resultDynamicTimeRangeFilters)
	{
			if (filterElementRoot.getOlapComponentType().isTypeOf(oFF.FilterComponentType.FILTER_DYNAMIC_TIME_REGULAR_RANGE))
		{
			let filter = filterElementRoot;
			if (oFF.XString.isEqual(filter.getTimeDimensionName(), timeDimension.getName()))
			{
				resultDynamicTimeRangeFilters.add(filter);
			}
			return;
		}
		let childrenIterator = filterElementRoot.getChildrenIterator();
		while (childrenIterator.hasNext())
		{
			let filterRootChild = childrenIterator.next();
			oFF.QFilterUtil._collectAllDynamicTimeRegularRangeFilters(filterRootChild, timeDimension, resultDynamicTimeRangeFilters);
		}
	},
	_isFilterElementApplicable:function(filterElement, modelCapabilities)
	{
			let componentType = filterElement.getComponentType();
		if (componentType === oFF.FilterComponentType.OPERATION)
		{
			let filterOperation = filterElement;
			if (filterOperation.hasLevelOffset() && !(modelCapabilities.supportsHierarchyLevelOffsetFilter() || modelCapabilities.supportsHierarchyTrapezoidFilter()))
			{
				return false;
			}
			if (filterOperation.hasDepth() && !modelCapabilities.supportsHierarchyTrapezoidFilter())
			{
				return false;
			}
		}
		else if (componentType.isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA))
		{
			let filterAlgebra = filterElement;
			let iterator = filterAlgebra.getIterator();
			while (iterator.hasNext())
			{
				let _isFilterElementApplicable = oFF.QFilterUtil._isFilterElementApplicable(iterator.next(), modelCapabilities);
				if (!_isFilterElementApplicable)
				{
					return false;
				}
			}
		}
		else if (componentType === oFF.FilterComponentType.FILTER_MEASURE_BASED && !modelCapabilities.supportsFilterMeasureBased())
		{
			return false;
		}
		else if (componentType === oFF.FilterComponentType.VIRTUAL_DATASOURCE && !modelCapabilities.supportsDynamicVariableRefresh())
		{
			return false;
		}
		else if (componentType === oFF.FilterComponentType.TUPLE && !modelCapabilities.supportsTuplesOperand())
		{
			return false;
		}
		return true;
	},
	addAndToCartesian:function(cartesianProduct, andFilters, acceptCartesianIntersect)
	{
			let sizeAnd = andFilters.size();
		for (let idxAnd = 0; idxAnd < sizeAnd; idxAnd++)
		{
			let andFilterOperand = andFilters.get(idxAnd);
			let typeAnd = andFilterOperand.getComponentType();
			if (typeAnd.isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
			{
				if (acceptCartesianIntersect || cartesianProduct.getCartesianListByDimensionName(andFilterOperand.getDimensionName()) === null)
				{
					cartesianProduct.add(andFilterOperand);
				}
				else
				{
					return false;
				}
			}
			else if (typeAnd.isTypeOf(oFF.FilterComponentType.OR))
			{
				if (oFF.QFilterUtil.addOrToCartesian(cartesianProduct, andFilterOperand) === null)
				{
					return false;
				}
			}
			else if (typeAnd.isTypeOf(oFF.FilterComponentType.AND))
			{
				if (!oFF.QFilterUtil.addAndToCartesian(cartesianProduct, andFilterOperand, acceptCartesianIntersect))
				{
					return false;
				}
			}
			else if (typeAnd === oFF.FilterComponentType.OPERATION)
			{
				let operation = andFilterOperand;
				if (operation.getComparisonOperator().isTypeOf(oFF.SpatialComparisonOperator._SPATIAL))
				{
					return false;
				}
				if (!oFF.QFilterUtil.addOperationToCartesian(cartesianProduct, operation, true, acceptCartesianIntersect))
				{
					return false;
				}
			}
			else
			{
				return false;
			}
		}
		return true;
	},
	addOperationToCartesian:function(cartesianProduct, operation, checkExistence, acceptCartesianIntersect)
	{
			let cartesianElement = oFF.QFactory.createFilterCartesianElement(cartesianProduct);
		cartesianElement.getLow().setValue(operation.getLow().getValue());
		if (operation.getHigh() !== null)
		{
			cartesianElement.getHigh().setValue(operation.getHigh().getValue());
		}
		if (operation.getThird() !== null)
		{
			cartesianElement.getThird().setValue(operation.getThird().getValue());
		}
		cartesianElement.setComparisonOperator(operation.getComparisonOperator());
		let dimensionMetadata = operation.getFieldMetadata().getDimensionMetadata();
		let cartesianList;
		if (!acceptCartesianIntersect)
		{
			cartesianList = cartesianProduct.getCartesianListByDimensionMdWithDefault(dimensionMetadata);
			if (!cartesianList.hasElements())
			{
				oFF.QFilterUtil.applyOperationPropertiesToList(operation, cartesianList);
			}
			else if (checkExistence || !oFF.XString.isEqual(cartesianList.getFieldMetadata().getName(), operation.getFieldMetadata().getName()))
			{
				return false;
			}
		}
		else
		{
			cartesianList = oFF.QFactory.createFilterCartesianList(cartesianProduct.getContext());
			oFF.QFilterUtil.applyOperationPropertiesToList(operation, cartesianList);
			cartesianProduct.add(cartesianList);
		}
		cartesianList.add(cartesianElement);
		return true;
	},
	addOrToCartesian:function(cartesianProduct, orFilters)
	{
			let cartesianList = null;
		let sizeOr = orFilters.size();
		let setSign = null;
		for (let idxOr = 0; idxOr < sizeOr; idxOr++)
		{
			let orFilter = orFilters.get(idxOr);
			let typeOr = orFilter.getComponentType();
			if (typeOr.isTypeOf(oFF.FilterComponentType.OPERATION))
			{
				let operation = orFilter;
				if (idxOr === 0)
				{
					setSign = operation.getSetSign();
				}
				else if (setSign !== operation.getSetSign())
				{
					cartesianList = null;
					break;
				}
				if (operation.getComparisonOperator().isTypeOf(oFF.SpatialComparisonOperator._SPATIAL))
				{
					cartesianList = null;
					break;
				}
				if (oFF.isNull(cartesianList))
				{
					cartesianList = cartesianProduct.getCartesianListByDimensionMdWithDefault(operation.getFieldMetadata().getDimensionMetadata());
					cartesianList.setFieldMetadata(operation.getFieldMetadata());
					oFF.QFilterUtil.applyOperationPropertiesToList(operation, cartesianList);
				}
				else if (!oFF.XString.isEqual(cartesianList.getDimensionName(), operation.getDimensionName()) || !oFF.XString.isEqual(cartesianList.getFieldMetadata().getName(), operation.getFieldMetadata().getName()))
				{
					cartesianList = null;
					break;
				}
				cartesianList.add(operation);
			}
			else if (typeOr.isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
			{
				let list = orFilter;
				if (!oFF.XCollectionUtils.hasElements(list))
				{
					continue;
				}
				if (idxOr === 0)
				{
					setSign = list.getCartesianElement(0).getSetSign();
				}
				else if (setSign !== list.getCartesianElement(0).getSetSign())
				{
					cartesianList = null;
					break;
				}
				if (oFF.isNull(cartesianList))
				{
					cartesianList = cartesianProduct.getCartesianListByDimensionMdWithDefault(list.getFieldMetadata().getDimensionMetadata());
					oFF.QFilterUtil.applyOperationPropertiesToList(list, cartesianList);
				}
				else if (!oFF.XString.isEqual(cartesianList.getDimensionName(), list.getDimensionName()) || !oFF.XString.isEqual(cartesianList.getFieldMetadata().getName(), list.getFieldMetadata().getName()))
				{
					cartesianList = null;
					break;
				}
				cartesianList.addAll(list);
			}
			else
			{
				cartesianList = null;
				break;
			}
		}
		return cartesianList;
	},
	addSecondaryMeasuresIntoFilter:function(queryModel, filterContainer, secondaryMeasureNames, taggingKey)
	{
			if (oFF.notNull(filterContainer))
		{
			let secondaryMeasureDimension = queryModel.getSecondaryCalculationDimension();
			if (oFF.notNull(secondaryMeasureDimension))
			{
				let iterator = secondaryMeasureNames.getIterator();
				while (iterator.hasNext())
				{
					let filterElement = filterContainer.addSingleMemberFilterByDimension(secondaryMeasureDimension, iterator.next(), oFF.ComparisonOperator.EQUAL);
					if (oFF.notNull(taggingKey) && oFF.notNull(filterElement))
					{
						filterElement.getTagging().put(taggingKey, "");
					}
				}
			}
		}
	},
	applyOperationPropertiesToList:function(operation, cartesianList)
	{
			cartesianList.setFieldMetadata(operation.getFieldMetadata());
		if (operation.isConvertToFlatFilter())
		{
			cartesianList.setConvertToFlatFilter(operation.isConvertToFlatFilter());
		}
		if (oFF.XStringUtils.isNotNullAndNotEmpty(operation.getHierarchyName()))
		{
			cartesianList.setHierarchyName(operation.getHierarchyName());
		}
		if (operation.getHierarchyDueDate() !== null)
		{
			cartesianList.setHierarchyDueDate(operation.getHierarchyDueDate());
		}
		if (oFF.XStringUtils.isNotNullAndNotEmpty(operation.getHierarchyVersion()))
		{
			cartesianList.setHierarchyVersion(operation.getHierarchyVersion());
		}
	},
	clearSelectionsInContainerByDimension:function(dimName, container)
	{
			let cartesianProduct = container.getCartesianProduct();
		if (oFF.isNull(cartesianProduct))
		{
			let complexSelectionRoot = container.getComplexRoot();
			if (oFF.notNull(complexSelectionRoot))
			{
				let componentType = complexSelectionRoot.getComponentType();
				if (componentType === oFF.FilterComponentType.OPERATION)
				{
					let filterOp = complexSelectionRoot;
					if (oFF.XString.isEqual(dimName, filterOp.getDimensionName()))
					{
						container.setComplexRoot(null);
					}
				}
				else if (componentType === oFF.FilterComponentType.AND || componentType === oFF.FilterComponentType.OR)
				{
					oFF.QFilterUtil.removeComplexSelectionByDimensionName(complexSelectionRoot, dimName);
				}
				else if (componentType.isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
				{
					let complexCartesianList = complexSelectionRoot;
					if (oFF.XString.isEqual(complexCartesianList.getDimensionName(), dimName))
					{
						complexCartesianList.clear();
					}
				}
			}
		}
		else
		{
			let memberSelection = cartesianProduct.getCartesianListByDimensionName(dimName);
			if (oFF.notNull(memberSelection))
			{
				memberSelection.clear();
				cartesianProduct.removeByDimensionName(dimName);
			}
		}
	},
	collectAllCartesianLists:function(filterElementRoot)
	{
			let cartesianLists = oFF.XList.create();
		oFF.QFilterUtil._collectAllCartesianLists(filterElementRoot, cartesianLists);
		return cartesianLists;
	},
	collectAllCartesianListsUsingDimensionNames:function(filterElementRoot, dimensionNames, resultCartesianLists)
	{
			let filters = oFF.XList.create();
		let requestedFilterTypes = oFF.XList.create();
		requestedFilterTypes.add(oFF.FilterComponentType.CARTESIAN_LIST);
		oFF.QFilterUtil.collectAllFiltersWithContextByTypeUsingDimensionNames(filterElementRoot, dimensionNames, requestedFilterTypes, filters);
		oFF.XCollectionUtils.forEach(filters, (filter) => {
			resultCartesianLists.add(filter);
		});
	},
	collectAllDynamicTimeRegularRangeFilters:function(filterElementRoot, timeDimension)
	{
			let dynamicTimeRangeFilters = oFF.XList.create();
		oFF.QFilterUtil._collectAllDynamicTimeRegularRangeFilters(filterElementRoot, timeDimension, dynamicTimeRangeFilters);
		return dynamicTimeRangeFilters;
	},
	collectAllFiltersWithContextByTypeUsingDimensionNames:function(filterElementRoot, dimensionNames, requestedFilterTypes, resultFilterContexts)
	{
			if (oFF.XCollectionUtils.findFirst(requestedFilterTypes, (filterType) => {
			return filterElementRoot.getOlapComponentType().isTypeOf(filterType);
		}) !== null)
		{
			let filterContext = filterElementRoot;
			if (dimensionNames.contains(filterContext.getDimensionName()))
			{
				resultFilterContexts.add(filterContext);
			}
			return;
		}
		let childrenIterator = filterElementRoot.getChildrenIterator();
		while (childrenIterator.hasNext())
		{
			let filterRootChild = childrenIterator.next();
			oFF.QFilterUtil.collectAllFiltersWithContextByTypeUsingDimensionNames(filterRootChild, dimensionNames, requestedFilterTypes, resultFilterContexts);
		}
	},
	collectAllTimeCartesianLists:function(filterElementRoot, timeDimension)
	{
			let requestedFilterTypes = oFF.XList.create();
		requestedFilterTypes.add(oFF.FilterComponentType.CARTESIAN_LIST);
		let filters = oFF.QFilterUtil.collectAllTimeFiltersWithContext(filterElementRoot, timeDimension, requestedFilterTypes);
		let cartesianLists = oFF.XListOfNameObject.create();
		oFF.XCollectionUtils.forEach(filters, (filter) => {
			cartesianLists.add(filter);
		});
		return cartesianLists;
	},
	collectAllTimeCartesianListsAndOperations:function(filterElementRoot, timeDimension)
	{
			let requestedFilterTypes = oFF.XList.create();
		requestedFilterTypes.add(oFF.FilterComponentType.CARTESIAN_LIST);
		requestedFilterTypes.add(oFF.FilterComponentType.OPERATION);
		return oFF.QFilterUtil.collectAllTimeFiltersWithContext(filterElementRoot, timeDimension, requestedFilterTypes);
	},
	collectAllTimeFiltersWithContext:function(filterElementRoot, timeDimension, requestedFilterTypes)
	{
			let levelDimensionNames = oFF.QTimeDimensionUtil.getAllLevelNamesFilterLevelTypeAll(timeDimension);
		let dimensionNames = oFF.XHashSetOfString.create();
		dimensionNames.add(timeDimension.getName());
		dimensionNames.addAll(levelDimensionNames);
		let filters = oFF.XList.create();
		if (oFF.notNull(filterElementRoot))
		{
			oFF.QFilterUtil.collectAllFiltersWithContextByTypeUsingDimensionNames(filterElementRoot, dimensionNames, requestedFilterTypes, filters);
		}
		return filters;
	},
	collectFilterAcrossModels:function(queryModel)
	{
			let filterAcrossModels = oFF.XList.create();
		if (oFF.isNull(queryModel))
		{
			return filterAcrossModels;
		}
		let filterContainer = queryModel.getFilter();
		if (filterContainer.isDynamicFilterInitialized())
		{
			filterAcrossModels.addAll(oFF.QFilterUtil.collectFilterComponentOfType(queryModel.getFilter().getDynamicFilter(), oFF.FilterComponentType.FILTER_ACROSS_MODELS, true));
		}
		let layeredFilters = filterContainer.getLinkedFilters().getValuesAsReadOnlyList();
		for (let i = 0; i < layeredFilters.size(); i++)
		{
			filterAcrossModels.addAll(oFF.QFilterUtil.collectFilterComponentOfType(layeredFilters.get(i), oFF.FilterComponentType.FILTER_ACROSS_MODELS, true));
		}
		return filterAcrossModels;
	},
	collectFilterComponentOfType:function(filterElement, filterComponentType, matchChildTypes)
	{
			let result = oFF.XList.create();
		if (oFF.notNull(filterElement))
		{
			let rootElement = filterElement.getOlapComponentType() === oFF.OlapComponentType.FILTER_EXPRESSION ? filterElement.getFilterRootElement() : filterElement;
			oFF.QFilterUtil.collectFilterComponentOfTypeInternal(rootElement, filterComponentType, matchChildTypes, result);
		}
		return result;
	},
	collectFilterComponentOfTypeInternal:function(rootElement, filterComponentType, matchChildTypes, result)
	{
			if (oFF.isNull(rootElement))
		{
			return;
		}
		if (rootElement.getOlapComponentType() === filterComponentType || matchChildTypes && rootElement.getOlapComponentType().isTypeOf(filterComponentType))
		{
			result.add(rootElement);
		}
		if (rootElement.getOlapComponentType().isTypeOf(oFF.FilterComponentType.TRANSIENT_FILTER))
		{
			let transientFilter = rootElement;
			oFF.XCollectionUtils.forEach(transientFilter.getLinkedFilters().getValuesAsReadOnlyList(), (filterExpression) => {
				oFF.QFilterUtil.collectFilterComponentOfTypeInternal(filterExpression.getFilterRootElement(), filterComponentType, matchChildTypes, result);
			});
		}
		let childrenIterator = rootElement.getChildrenIterator();
		while (childrenIterator.hasNext())
		{
			let filterRootChild = childrenIterator.next();
			oFF.QFilterUtil.collectFilterComponentOfTypeInternal(filterRootChild, filterComponentType, matchChildTypes, result);
		}
	},
	collectLevelTypesFromTimeCartesianList:function(cartesianList, cartesianListContext)
	{
			let levelTypesInCartesianList = oFF.XSetOfNameObject.create();
		let timeDimension = cartesianListContext.getDimensionAccessor().getDimensionByName(cartesianList.getDimensionName());
		oFF.XObjectExt.assertNotNullExt(timeDimension, "cartesian list dimension cannot be null");
		for (let i = 0; i < cartesianList.size(); i++)
		{
			let cartesianElement = cartesianList.getCartesianElement(i);
			let levelType = null;
			if (cartesianList.getHierarchyName() === null)
			{
				let level = oFF.QTimeDimensionUtil.findAnyHierarchyLevelMatchingField(timeDimension, cartesianList.getFieldMetadata());
				oFF.XObjectExt.assertNotNullExt(level, "unable to find a matching time hierarchy level for the cartesian list field");
				levelType = level.getLevelType();
			}
			else
			{
				levelType = oFF.QFilterUtil.getHierarchyLevelTypeFromTimeValueBag(cartesianElement.getLow(), cartesianElement.getHierarchyName(), cartesianListContext, timeDimension);
			}
			if (oFF.notNull(levelType))
			{
				levelTypesInCartesianList.add(levelType);
			}
		}
		return levelTypesInCartesianList;
	},
	containsFilterComponentOfType:function(filterExpression, filterComponentType, matchChildTypes)
	{
			return oFF.QFilterUtil.collectFilterComponentOfType(filterExpression, filterComponentType, matchChildTypes).size() > 0;
	},
	convertAnd:function(complexSelection, acceptCartesianIntersect)
	{
			let cartesianProduct = oFF.QFactory.createFilterCartesianProduct(complexSelection);
		if (oFF.QFilterUtil.addAndToCartesian(cartesianProduct, complexSelection, acceptCartesianIntersect))
		{
			return cartesianProduct;
		}
		return null;
	},
	convertComplexFilterToCartesian:function(complexSelection)
	{
			return oFF.QFilterUtil.convertComplexFilterToCartesianExt(complexSelection, false);
	},
	convertComplexFilterToCartesianExt:function(complexSelection, acceptCartesianIntersect)
	{
			if (oFF.isNull(complexSelection))
		{
			return null;
		}
		let selectionComponentType = complexSelection.getComponentType();
		if (selectionComponentType === oFF.FilterComponentType.AND)
		{
			return oFF.QFilterUtil.convertAnd(complexSelection, acceptCartesianIntersect);
		}
		else if (selectionComponentType === oFF.FilterComponentType.OR)
		{
			return oFF.QFilterUtil.convertOr(complexSelection);
		}
		else if (selectionComponentType.isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
		{
			return oFF.QFilterUtil.wrapCartesianList(complexSelection);
		}
		else if (selectionComponentType === oFF.FilterComponentType.OPERATION)
		{
			return oFF.QFilterUtil.wrapFilterOperation(complexSelection);
		}
		return null;
	},
	convertFilterValueToCanonicalDate:function(queryModel, timeDimension, filterLevelType, filterValue, filterHierarchyName, isFlat)
	{
			let filterValueCanonicalDate;
		if (!isFlat)
		{
			filterValueCanonicalDate = oFF.QCanonicalDateUtil.createCanonicalDateFromEntityValue(queryModel, timeDimension, filterHierarchyName, filterValue);
		}
		else
		{
			filterValueCanonicalDate = oFF.QCanonicalDateUtil.createCanonicalDateFromEntityValueInfo(queryModel, timeDimension, filterHierarchyName, filterValue, filterLevelType);
		}
		return filterValueCanonicalDate;
	},
	convertFilterValueToCanonicalDateWithCompatibleHierarchyIfNecessary:function(queryModel, timeDimension, parentCartesianList, filterElementFieldMetadata, filterValue)
	{
			let filterHierarchyName = parentCartesianList.getHierarchyName();
		let filterLevelType = null;
		if (oFF.isNull(filterHierarchyName))
		{
			let hierarchyNameAndLevelTypeName = oFF.QFilterUtil.getCompatibleFilterHierarchyNameAndLevelTypeName(queryModel, timeDimension, filterElementFieldMetadata, oFF.XList.create());
			if (oFF.notNull(hierarchyNameAndLevelTypeName))
			{
				filterHierarchyName = hierarchyNameAndLevelTypeName.getFirstString();
				filterLevelType = oFF.HierarchyLevelType.lookup(hierarchyNameAndLevelTypeName.getSecondString());
			}
		}
		if (oFF.isNull(filterHierarchyName))
		{
			return null;
		}
		return oFF.QFilterUtil.convertFilterValueToCanonicalDate(queryModel, timeDimension, filterLevelType, filterValue, filterHierarchyName, oFF.notNull(filterLevelType));
	},
	convertOr:function(complexSelection)
	{
			let cartesianProduct = oFF.QFactory.createFilterCartesianProduct(complexSelection);
		if (oFF.QFilterUtil.addOrToCartesian(cartesianProduct, complexSelection) !== null)
		{
			return cartesianProduct;
		}
		return null;
	},
	convertTrapezoidFilterToSimpleFilter:function(filterElement)
	{
			if (filterElement.getOlapComponentType().isTypeOf(oFF.FilterComponentType.OPERATION))
		{
			let filterOperation = filterElement;
			if (filterOperation.hasDepth())
			{
				filterOperation.resetDepth();
			}
			if (filterOperation.hasLevelOffset())
			{
				filterOperation.resetLevelOffset();
			}
			return;
		}
		let childrenIterator = filterElement.getChildrenIterator();
		while (childrenIterator.hasNext())
		{
			let filterRootChild = childrenIterator.next();
			oFF.QFilterUtil.convertTrapezoidFilterToSimpleFilter(filterRootChild);
		}
	},
	createComplexFilterFromCartesianProduct:function(cartesianProduct)
	{
			let filterAnd = oFF.QFactory.createFilterAnd(cartesianProduct.getContext());
		for (let i = 0; i < cartesianProduct.size(); i++)
		{
			let cartesianListCopy = oFF.QFactory.createFilterCartesianList(filterAnd);
			cartesianListCopy.copyFrom(cartesianProduct.getCartesianChild(i), null);
			filterAnd.add(cartesianListCopy);
		}
		return filterAnd;
	},
	createFilterElementFromOrigin:function(origin, context)
	{
			let newFilterElement = null;
		let theContext = null;
		if (oFF.notNull(context))
		{
			theContext = context;
		}
		let originType = origin.getOlapComponentType();
		if (originType === oFF.FilterComponentType.CARTESIAN_PRODUCT)
		{
			newFilterElement = oFF.QFilterCartesianProduct._create(theContext, theContext);
		}
		else if (originType === oFF.FilterComponentType.CARTESIAN_LIST)
		{
			let originList = origin;
			newFilterElement = oFF.QFilterCartesianList._createMd(theContext, theContext, originList.getFieldMetadata(), originList.getHierarchyName());
		}
		else if (originType === oFF.FilterComponentType.CONVERTED_TIME_CARTESIAN_LIST)
		{
			let originConvertedTimeCartesianList = origin;
			newFilterElement = oFF.QFilterConvertedTimeCartesianList._create(theContext, theContext, originConvertedTimeCartesianList.getFieldMetadata(), originConvertedTimeCartesianList.getHierarchyName());
		}
		else if (originType === oFF.FilterComponentType.OPERATION)
		{
			newFilterElement = oFF.QFilterOperation._create(theContext, theContext, theContext);
		}
		else if (originType === oFF.FilterComponentType.DATE_RANGE_OPERATION)
		{
			newFilterElement = oFF.QFilterDateRange.create(theContext, theContext);
		}
		else if (originType === oFF.OlapComponentType.FILTER_CELL_VALUE_OPERAND)
		{
			newFilterElement = oFF.QFilterCellValueOperand.createWithExpression(theContext, theContext, theContext);
		}
		else if (originType === oFF.FilterComponentType.TUPLE)
		{
			if (origin.hasTuples())
			{
				newFilterElement = oFF.QFactory.createFilterTuple(theContext);
			}
			if (origin.hasDataSourceColumns())
			{
				newFilterElement = oFF.QFactory.createTupleFilterFromDataSource(theContext);
			}
		}
		else if (originType === oFF.FilterComponentType.FILTER_MEASURE_BASED)
		{
			newFilterElement = oFF.QFactory.createFilterMeasureBased(theContext, origin.getName());
		}
		else if (originType === oFF.FilterComponentType.FILTER_ACROSS_MODELS)
		{
			newFilterElement = oFF.QFactory.createFilterAcrossModels(theContext, origin.getName());
		}
		else if (originType === oFF.FilterComponentType.FILTER_ASYMMETRIC_VISIBILITY)
		{
			newFilterElement = oFF.QFactory.createFilterAsymmetricVisibility(theContext, origin.getName(), theContext);
		}
		else if (originType === oFF.FilterComponentType.FILTER_DYNAMIC_TIME_REGULAR_RANGE)
		{
			newFilterElement = oFF.QFactory.createFilterDynamicTimeRegularRange(theContext, origin.getName());
		}
		else if (originType === oFF.FilterComponentType.FILTER_DYNAMIC_TIME_TO_DATE_RANGE)
		{
			newFilterElement = oFF.QFactory.createFilterDynamicTimeToDateRange(theContext, origin.getName());
		}
		else if (originType === oFF.FilterComponentType.FILTER_FIXED_TIME_RANGE)
		{
			newFilterElement = oFF.QFactory.createFilterFixedTimeRange(theContext, origin.getName());
		}
		else if (originType === oFF.FilterComponentType.AND)
		{
			newFilterElement = oFF.QFactory.createFilterAnd(theContext);
		}
		else if (originType === oFF.FilterComponentType.OR)
		{
			newFilterElement = oFF.QFactory.createFilterOr(theContext);
		}
		else if (originType === oFF.FilterComponentType.NOT)
		{
			newFilterElement = oFF.QFactory.createFilterNot(theContext);
		}
		else if (originType === oFF.FilterComponentType.VIRTUAL_DATASOURCE)
		{
			newFilterElement = oFF.QFactory.createFilterDynamicVariables(theContext, null);
		}
		else
		{
			throw oFF.XException.createRuntimeException(originType.getName());
		}
		newFilterElement.copyFrom(origin, null);
		return newFilterElement;
	},
	deepApplyConvertToFlatFilterToHierarchicalFilters:function(filterElement, convertToFlat)
	{
			if (filterElement.getOlapComponentType().isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
		{
			let filterContext = filterElement;
			if (filterContext.getHierarchyName() !== null)
			{
				filterContext.setConvertToFlatFilter(convertToFlat);
			}
			return;
		}
		let childrenIterator = filterElement.getChildrenIterator();
		while (childrenIterator.hasNext())
		{
			let filterRootChild = childrenIterator.next();
			oFF.QFilterUtil.deepApplyConvertToFlatFilterToHierarchicalFilters(filterRootChild, convertToFlat);
		}
	},
	doesMultiValueTimeCartesianListConflictWithFinestSingleValueCartesianList:function(queryModel, timeDimension, finestSingleValueCanonicalDate, multiValueTimeCartesianList)
	{
			let finestSingleValueCartesianListLevelType = oFF.QCanonicalDateUtil.convertDateTimeGranularityToHierarchyLevelType(finestSingleValueCanonicalDate.getGranularity());
		let lowestMultiValueCartesianListLevelType = oFF.QFilterUtil.getLowestHierarchyLevelTypeFromCartesianList(multiValueTimeCartesianList, queryModel, timeDimension);
		if (lowestMultiValueCartesianListLevelType.getLevelIndex() <= finestSingleValueCartesianListLevelType.getLevelIndex())
		{
			return false;
		}
		for (let elemIdx = 0; elemIdx < multiValueTimeCartesianList.size(); elemIdx++)
		{
			let cartesianElement = multiValueTimeCartesianList.getCartesianElement(elemIdx);
			let filterHierarchyName = multiValueTimeCartesianList.getHierarchyName();
			if (oFF.isNull(filterHierarchyName))
			{
				let compatibleHierarchyLevelTypesToSearch = oFF.XList.create();
				compatibleHierarchyLevelTypesToSearch.add(oFF.QCanonicalDateUtil.convertDateTimeGranularityToHierarchyLevelType(finestSingleValueCanonicalDate.getGranularity()));
				let hierarchyNameAndLevelTypeName = oFF.QFilterUtil.getCompatibleFilterHierarchyNameAndLevelTypeName(queryModel, timeDimension, cartesianElement.getFieldMetadata(), compatibleHierarchyLevelTypesToSearch);
				if (oFF.notNull(hierarchyNameAndLevelTypeName))
				{
					filterHierarchyName = hierarchyNameAndLevelTypeName.getFirstString();
				}
			}
			if (oFF.isNull(filterHierarchyName))
			{
				return false;
			}
			let filterCanonicalDateA = oFF.QFilterUtil.convertFilterValueToCanonicalDateWithCompatibleHierarchyIfNecessary(queryModel, timeDimension, multiValueTimeCartesianList, cartesianElement.getFieldMetadata(), cartesianElement.getLow().getString());
			if (oFF.isNull(filterCanonicalDateA))
			{
				return false;
			}
			filterCanonicalDateA = oFF.QCanonicalDateUtil.castCanonicalDateToLevel(queryModel, timeDimension, filterHierarchyName, filterCanonicalDateA, oFF.QCanonicalDateUtil.convertDateTimeGranularityToHierarchyLevelType(finestSingleValueCanonicalDate.getGranularity()), false);
			let filterCanonicalDateB = null;
			if (cartesianElement.getHigh() !== null && cartesianElement.getHigh().getString() !== null)
			{
				filterCanonicalDateB = oFF.QFilterUtil.convertFilterValueToCanonicalDateWithCompatibleHierarchyIfNecessary(queryModel, timeDimension, multiValueTimeCartesianList, cartesianElement.getFieldMetadata(), cartesianElement.getHigh().getString());
				if (oFF.notNull(filterCanonicalDateB))
				{
					filterCanonicalDateB = oFF.QCanonicalDateUtil.castCanonicalDateToLevel(queryModel, timeDimension, filterHierarchyName, filterCanonicalDateB, oFF.QCanonicalDateUtil.convertDateTimeGranularityToHierarchyLevelType(finestSingleValueCanonicalDate.getGranularity()), false);
				}
			}
			if (oFF.QCanonicalDateUtil.isEqual(finestSingleValueCanonicalDate, filterCanonicalDateA) || oFF.notNull(filterCanonicalDateB) && oFF.QCanonicalDateUtil.isEqual(finestSingleValueCanonicalDate, filterCanonicalDateB))
			{
				return true;
			}
		}
		return false;
	},
	findFinestSingleValueTimeCartesianList:function(queryModel, timeDimension, filterElementContext)
	{
			let timeCartesianLists = oFF.QFilterUtil.collectAllTimeCartesianLists(filterElementContext, timeDimension);
		let multiValueTimeCartesianLists = oFF.XListOfNameObject.create();
		let finestSingleValueTimeCartesianList = null;
		let singleValueLowestLevelTypeIndex = 1;
		for (let timeCartesianListIdx = 0; timeCartesianListIdx < timeCartesianLists.size(); timeCartesianListIdx++)
		{
			let timeCartesianList = timeCartesianLists.get(timeCartesianListIdx);
			if (oFF.isNull(timeCartesianList))
			{
				continue;
			}
			if (!oFF.QFilterUtil.isSingleValueSourceCartesianList(timeCartesianList) && (timeCartesianList.size() > 1 || !oFF.QFilterUtil.isSingleValueFilterElement(timeCartesianList.getCartesianElement(0))))
			{
				multiValueTimeCartesianLists.add(timeCartesianList);
				continue;
			}
			let levelType = oFF.QFilterUtil.getLowestHierarchyLevelTypeFromCartesianList(timeCartesianList, queryModel, timeDimension);
			let levelTypeIndex = levelType.getLevelIndex();
			if (levelTypeIndex > singleValueLowestLevelTypeIndex && levelType !== oFF.HierarchyLevelType.ALL)
			{
				singleValueLowestLevelTypeIndex = levelTypeIndex;
				finestSingleValueTimeCartesianList = timeCartesianList;
			}
		}
		if (oFF.isNull(finestSingleValueTimeCartesianList))
		{
			return null;
		}
		let finestSingleValueTimeCartesianElement = finestSingleValueTimeCartesianList.getCartesianElement(0);
		let filterValue = oFF.QFilterUtil.getValueFromValueBag(finestSingleValueTimeCartesianElement.getLow());
		let finestSingleValueCanonicalDate = oFF.QFilterUtil.convertFilterValueToCanonicalDateWithCompatibleHierarchyIfNecessary(queryModel, timeDimension, finestSingleValueTimeCartesianList, finestSingleValueTimeCartesianElement.getFieldMetadata(), filterValue);
		if (oFF.isNull(finestSingleValueCanonicalDate))
		{
			return null;
		}
		for (let multiValueTimeCartesianListIdx = 0; multiValueTimeCartesianListIdx < multiValueTimeCartesianLists.size(); multiValueTimeCartesianListIdx++)
		{
			let multiValueTimeCartesianList = multiValueTimeCartesianLists.get(multiValueTimeCartesianListIdx);
			if (oFF.QFilterUtil.doesMultiValueTimeCartesianListConflictWithFinestSingleValueCartesianList(queryModel, timeDimension, finestSingleValueCanonicalDate, multiValueTimeCartesianList))
			{
				return null;
			}
		}
		return finestSingleValueTimeCartesianList;
	},
	findFinestSingleValueTimeCartesianListByHierarchyLevel:function(queryModel, timeDimension, filterElementContext)
	{
			let timeCartesianLists = oFF.QFilterUtil.collectAllTimeCartesianLists(filterElementContext, timeDimension);
		let sameLevelFilterValues = oFF.XHashSetOfString.create();
		let lowestLevelValue = null;
		let finestSingleValueTimeCartesianList = null;
		for (let timeCartesianListIdx = 0; timeCartesianListIdx < timeCartesianLists.size(); timeCartesianListIdx++)
		{
			let timeCartesianList = timeCartesianLists.get(timeCartesianListIdx);
			if (oFF.isNull(timeCartesianList) || timeCartesianList.getTagging().containsKey(oFF.QTransientConstants.TAG_IS_TRANSIENT) || timeCartesianList.getFieldMetadata().getPresentationType() === oFF.PresentationType.HIERARCHY_DISPLAY_KEY)
			{
				continue;
			}
			if (timeCartesianList.getCartesianElement(0).getLow().getValueType() === oFF.XValueType.VARIABLE)
			{
				finestSingleValueTimeCartesianList = timeCartesianList;
				sameLevelFilterValues.add(oFF.XValueType.VARIABLE.getName());
			}
			else
			{
				let level = oFF.QFilterUtil.getHierarchyLevelFromCartesianElement(timeDimension, timeCartesianList.getHierarchyName(), timeCartesianList.getCartesianElement(0));
				if (oFF.notNull(level))
				{
					if (oFF.QFilterUtil.isSingleValueSourceCartesianList(timeCartesianList) || timeCartesianList.size() === 1 && oFF.QFilterUtil.isSingleValueFilterElement(timeCartesianList.getCartesianElement(0)))
					{
						if (oFF.isNull(lowestLevelValue) || level.getLevelNumber() > lowestLevelValue.getInteger())
						{
							lowestLevelValue = oFF.XIntegerValue.create(level.getLevelNumber());
							finestSingleValueTimeCartesianList = timeCartesianList;
							sameLevelFilterValues.clear();
							sameLevelFilterValues.add(timeCartesianList.getCartesianElement(0).getLow().getFieldValue().getString());
						}
						else if (level.getLevelNumber() === lowestLevelValue.getInteger())
						{
							sameLevelFilterValues.add(timeCartesianList.getCartesianElement(0).getLow().getFieldValue().getString());
						}
					}
					else if (oFF.notNull(lowestLevelValue) && level.getLevelNumber() >= lowestLevelValue.getInteger())
					{
						sameLevelFilterValues.clear();
						lowestLevelValue = oFF.XIntegerValue.create(level.getLevelNumber());
					}
				}
			}
		}
		let lowestDynamicTimeRangeFilter = null;
		let dynamicTimeRangeFilters = oFF.QFilterUtil.collectAllDynamicTimeRegularRangeFilters(filterElementContext, timeDimension);
		for (let timeRangeFiltersIdx = 0; timeRangeFiltersIdx < dynamicTimeRangeFilters.size(); timeRangeFiltersIdx++)
		{
			let dynamicTimeRangeFilter = dynamicTimeRangeFilters.get(timeRangeFiltersIdx);
			let leveledHierarchy = timeDimension.getLeveledHierarchy(dynamicTimeRangeFilter.getHierarchyName());
			if (oFF.notNull(leveledHierarchy))
			{
				let rangeLevel = leveledHierarchy.getLevelByName(dynamicTimeRangeFilter.getLevelName());
				if (dynamicTimeRangeFilter.isSingleValueDynamicRangeFilter())
				{
					if (oFF.isNull(lowestLevelValue) || rangeLevel.getLevelNumber() > lowestLevelValue.getInteger())
					{
						lowestLevelValue = oFF.XIntegerValue.create(rangeLevel.getLevelNumber());
						lowestDynamicTimeRangeFilter = dynamicTimeRangeFilter;
					}
					else if (rangeLevel.getLevelNumber() === lowestLevelValue.getInteger())
					{
						sameLevelFilterValues.clear();
						if (oFF.notNull(lowestDynamicTimeRangeFilter) && (!oFF.XString.isEqual(dynamicTimeRangeFilter.getLowValue(), lowestDynamicTimeRangeFilter.getLowValue()) || !oFF.XString.isEqual(dynamicTimeRangeFilter.getOffsetLevelName(), lowestDynamicTimeRangeFilter.getOffsetLevelName()) || dynamicTimeRangeFilter.getOffsetFunction() !== lowestDynamicTimeRangeFilter.getOffsetFunction() || dynamicTimeRangeFilter.getOffsetAmount() !== lowestDynamicTimeRangeFilter.getOffsetAmount()))
						{
							lowestDynamicTimeRangeFilter = null;
						}
					}
				}
				else if (oFF.notNull(lowestLevelValue) && rangeLevel.getLevelNumber() >= lowestLevelValue.getInteger())
				{
					lowestLevelValue = oFF.XIntegerValue.create(rangeLevel.getLevelNumber());
					lowestDynamicTimeRangeFilter = null;
				}
			}
		}
		if (oFF.notNull(lowestDynamicTimeRangeFilter))
		{
			return lowestDynamicTimeRangeFilter.getLowestLevelRuntimeCartesianList(queryModel);
		}
		return sameLevelFilterValues.size() === 1 ? finestSingleValueTimeCartesianList : null;
	},
	getCompatibleFilterHierarchyNameAndLevelTypeName:function(queryModel, timeDimension, filterElementFieldMetadata, levelTypesToSearch)
	{
			let leveledHierarchies = timeDimension.getLeveledHierarchies();
		for (let idxLeveledHierarchy = 0; idxLeveledHierarchy < leveledHierarchies.size(); idxLeveledHierarchy++)
		{
			let hierarchy = leveledHierarchies.get(idxLeveledHierarchy);
			let hierarchyContainsAllLevelTypesToCheck = true;
			for (let iterator = levelTypesToSearch.getIterator(); iterator.hasNext(); )
			{
				if (hierarchy.getLevelByType(iterator.next()) === null)
				{
					hierarchyContainsAllLevelTypesToCheck = false;
				}
			}
			if (levelTypesToSearch.size() === 0 || hierarchyContainsAllLevelTypesToCheck)
			{
				let level = oFF.QTimeDimensionUtil.getHierarchyLevelMatchingField(queryModel, hierarchy, filterElementFieldMetadata);
				if (oFF.notNull(level))
				{
					return oFF.XPairOfString.create(hierarchy.getName(), level.getLevelType().getName());
				}
			}
		}
		return null;
	},
	getFieldNamesFromFilter:function(filterElement)
	{
			if (oFF.isNull(filterElement))
		{
			return null;
		}
		let fieldNames = oFF.XHashSetOfString.create();
		if (filterElement.getOlapComponentType().isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
		{
			let cartesianList = filterElement;
			fieldNames.add(cartesianList.getFieldMetadata().getName());
			return fieldNames.getValuesAsReadOnlyList();
		}
		let childrenIterator = filterElement.getChildrenIterator();
		while (childrenIterator.hasNext())
		{
			let filterRootChild = childrenIterator.next();
			fieldNames.addAll(oFF.QFilterUtil.getFieldNamesFromFilter(filterRootChild));
		}
		return fieldNames.getValuesAsReadOnlyList();
	},
	getFilterTimeRangeLowValueLevel:function(filterContext, filterTimeRange)
	{
			let queryModel = filterContext.getQueryModel();
		let timeDimension = queryModel.getDimensionByName(filterTimeRange.getTimeDimensionName());
		let hierarchyName = filterTimeRange.getHierarchyName();
		let result = oFF.XList.create();
		if (oFF.notNull(timeDimension) && oFF.XStringUtils.isNotNullAndNotEmpty(filterTimeRange.getLowValue()))
		{
			if (filterTimeRange.getLowValueType() === oFF.XValueType.VARIABLE)
			{
				let hierarchy = timeDimension.getLeveledHierarchy(hierarchyName);
				if (oFF.notNull(hierarchy))
				{
					result.add(hierarchy.getMostGranularLevel());
				}
			}
			else
			{
				result = oFF.QFilterUtil.getHierarchyLevelsFromEntityValue(timeDimension, hierarchyName, filterTimeRange.getLowValue());
			}
		}
		return result;
	},
	getFirstMemberNameFromSecondaryCalculationDimensionDynamicFilter:function(queryModel)
	{
			let secondaryMeasureDimension = queryModel.getSecondaryCalculationDimension();
		if (oFF.notNull(secondaryMeasureDimension))
		{
			let dynamicFilterContainer = queryModel.getFilter().getDynamicFilter();
			if (oFF.notNull(dynamicFilterContainer))
			{
				let memberNames = oFF.QFilterUtil.getMemberNamesFromFilter(dynamicFilterContainer.getFilterRootElement(), secondaryMeasureDimension.getName());
				if (memberNames.size() > 0)
				{
					return memberNames.get(0);
				}
				else if (queryModel.getAccountDimension() !== null && !queryModel.hasUserDefinedMeasures())
				{
					return oFF.QModelConstants.MEASURE_SIGNED_DATA;
				}
			}
		}
		else if (queryModel.getQueryManager().getInitSettings().getMode() === oFF.QueryManagerMode.BLENDING && queryModel.getDimensionByName("SignedData") !== null)
		{
			let blendingSources = queryModel.getBlendingSources();
			for (let i = 0; i < blendingSources.size(); i++)
			{
				let memberName = oFF.QFilterUtil.getFirstMemberNameFromSecondaryCalculationDimensionDynamicFilter(blendingSources.get(i).getQueryModel());
				if (oFF.notNull(memberName))
				{
					return memberName;
				}
			}
		}
		return null;
	},
	getHierarchyLevelFromCartesianElement:function(timeDimension, hierarchyName, cartesianElement)
	{
			if (oFF.QTimeDimensionUtil.isFlexibleTimeDimension(timeDimension) && timeDimension.getSession().hasFeature(oFF.FeatureToggleOlap.FLEXIBLE_TIME_DYNAMIC_TIME) && cartesianElement.getLow().getValueType() === oFF.XValueType.VARIABLE)
		{
			let leveledHierarchy = timeDimension.getLeveledHierarchy(hierarchyName);
			return leveledHierarchy.getMostGranularLevel();
		}
		return oFF.QFilterUtil.getHierarchyLevelFromEntityValue(timeDimension, hierarchyName, cartesianElement.getLow().getFieldValue().getString());
	},
	getHierarchyLevelFromEntityValue:function(timeDimension, hierarchyName, entityValue)
	{
			let levels = oFF.QFilterUtil.getHierarchyLevelsFromEntityValue(timeDimension, hierarchyName, entityValue);
		return levels.size() > 0 ? levels.get(levels.size() - 1) : null;
	},
	getHierarchyLevelTypeFromTimeValueBag:function(valueBag, hierarchyName, queryContext, dimension)
	{
			if (oFF.notNull(valueBag) && oFF.XStringUtils.isNotNullAndNotEmpty(valueBag.getString()))
		{
			return oFF.QCanonicalDateUtil.getHierarchyLevelTypeFromEntityValue(queryContext.getQueryModel(), dimension, hierarchyName, valueBag.getString());
		}
		return null;
	},
	getHierarchyLevelsFromEntityValue:function(timeDimension, hierarchyName, entityValue)
	{
			let leveledHierarchy = timeDimension.getLeveledHierarchy(hierarchyName);
		let levels = oFF.XList.create();
		let lbhMemberKeyLevelName;
		if (oFF.notNull(leveledHierarchy))
		{
			if (oFF.XString.match(entityValue, oFF.QFilterUtil.LBH_MEMBER_NODE_PATH_PATTERN))
			{
				let lbhMemberKeyNodePathTokens = oFF.XStringTokenizer.splitString(entityValue, "].[");
				if (lbhMemberKeyNodePathTokens.size() < 4)
				{
					throw oFF.XException.createRuntimeException("LBH member key with node path pattern has less than 4 tokens");
				}
				let levelValueOffset = 3;
				for (let i = levelValueOffset; i < lbhMemberKeyNodePathTokens.size(); i++)
				{
					levels.add(leveledHierarchy.getLevel(i - levelValueOffset + 1));
				}
			}
			else if (oFF.XString.match(entityValue, oFF.QFilterUtil.LBH_MEMBER_SPECIFIC_LEVEL_PATTERN))
			{
				let lbhMemberKeyLevelTokens = oFF.XStringTokenizer.splitString(entityValue, "].[");
				if (lbhMemberKeyLevelTokens.size() < 4)
				{
					throw oFF.XException.createRuntimeException("LBH member key with specific level pattern has less than 4 tokens");
				}
				lbhMemberKeyLevelName = lbhMemberKeyLevelTokens.get(lbhMemberKeyLevelTokens.size() - 2);
				levels.add(leveledHierarchy.getLevelByName(lbhMemberKeyLevelName));
			}
			else if (oFF.XString.match(entityValue, oFF.QFilterUtil.LBH_MEMBER_LOWEST_LEVEL_PATTERN))
			{
				let lbhMemberKeyLowestLevelTokens = oFF.XStringTokenizer.splitString(entityValue, "].&[");
				if (lbhMemberKeyLowestLevelTokens.size() !== 2)
				{
					throw oFF.XException.createRuntimeException("LBH member key with lowest level pattern does not have 2 tokens");
				}
				levels.add(leveledHierarchy.getMostGranularLevel());
			}
			else if (oFF.XString.isEqual(entityValue, "(MDS-all)"))
			{
				levels.add(leveledHierarchy.getLevel(0));
			}
			else
			{
				throw oFF.XException.createRuntimeException("LBH member key does not match any known patterns");
			}
		}
		return levels;
	},
	getLinkedFilterOrDynamicFilterForDimension:function(dimension)
	{
			if (oFF.notNull(dimension))
		{
			let queryModel = dimension.getQueryModel();
			let linkedFilters = queryModel.getFilter().getLinkedFilters().getValuesAsReadOnlyList();
			if (!linkedFilters.isEmpty())
			{
				for (let i = 0; i < linkedFilters.size(); i++)
				{
					let linkedFilter = linkedFilters.get(i);
					let dimensionNames = linkedFilter.getDimensionsUsedInFilter().getValuesAsReadOnlyList();
					if (dimensionNames.contains(dimension.getName()))
					{
						let dimensionFilter = linkedFilter.getCartesianList(dimension);
						if (oFF.notNull(dimensionFilter) && (!dimensionFilter.isEmpty() || dimensionFilter.getTagging().containsKey(oFF.QTransientConstants.TAG_TRANSIENT_REMOVED_BLENDED_CALCULATION_FILTERS)))
						{
							return dimensionFilter;
						}
					}
				}
			}
			return queryModel.getFilter().isDynamicFilterInitialized() ? dimension.getFilter() : null;
		}
		return null;
	},
	getLowestHierarchyLevelTypeFromCartesianList:function(timeCartesianList, queryModel, timeDimension)
	{
			if (oFF.QFilterUtil.isSingleValueSourceCartesianList(timeCartesianList))
		{
			let convertedTimeCartesianListHierarchyLevelType = timeCartesianList.getHierarchyLevelType();
			if (oFF.notNull(convertedTimeCartesianListHierarchyLevelType))
			{
				return convertedTimeCartesianListHierarchyLevelType;
			}
		}
		let lowestLevelType = oFF.HierarchyLevelType.ALL;
		for (let i = 0; i < timeCartesianList.size(); i++)
		{
			let filterElement = timeCartesianList.getCartesianElement(i);
			let filterLevelType = null;
			let filterHierarchyName = timeCartesianList.getHierarchyName();
			if (oFF.isNull(filterHierarchyName))
			{
				let leveledHierarchies = timeDimension.getLeveledHierarchies();
				for (let idxLeveledHierarchy = 0; idxLeveledHierarchy < leveledHierarchies.size(); idxLeveledHierarchy++)
				{
					let hierarchy = leveledHierarchies.get(idxLeveledHierarchy);
					let level = oFF.QTimeDimensionUtil.getHierarchyLevelMatchingField(queryModel, hierarchy, filterElement.getFieldMetadata());
					if (oFF.notNull(level))
					{
						filterLevelType = level.getLevelType();
						break;
					}
				}
			}
			else
			{
				filterLevelType = oFF.QCanonicalDateUtil.getHierarchyLevelTypeFromEntityValue(queryModel, timeDimension, filterHierarchyName, filterElement.getLow().getString());
			}
			if (oFF.notNull(filterLevelType))
			{
				if (filterLevelType.getLevelIndex() > lowestLevelType.getLevelIndex())
				{
					lowestLevelType = filterLevelType;
				}
			}
		}
		return lowestLevelType;
	},
	getMemberNamesFromFilter:function(filterElement, dimName)
	{
			return oFF.QFilterUtilBase.getMemberNamesFromFilter(filterElement, dimName);
	},
	getValueFromValueBag:function(valueBag)
	{
			if (valueBag.getValueType() === oFF.XValueType.VARIABLE)
		{
			let variable = valueBag.getVariableValue();
			if (variable.getVariableType() === oFF.VariableType.DIMENSION_MEMBER_VARIABLE)
			{
				let memberFilter = variable.getMemberFilter();
				if (oFF.XCollectionUtils.hasElements(memberFilter))
				{
					return memberFilter.getCartesianElement(0).getLow().getString();
				}
			}
		}
		return valueBag.getString();
	},
	hasCartesianListForDimensionInternal:function(filterRootElement, dimensionName, checkIfFilterIsNotEmpty)
	{
			if (oFF.notNull(filterRootElement))
		{
			let allLists = oFF.QFilterUtil.collectAllCartesianLists(filterRootElement);
			return oFF.XCollectionUtils.contains(allLists, (cartesianList) => {
				if (oFF.XStringUtils.isNullOrEmpty(dimensionName) || oFF.XString.isEqual(cartesianList.getDimensionName(), dimensionName))
				{
					if (!checkIfFilterIsNotEmpty || !cartesianList.isEmpty())
					{
						return true;
					}
				}
				return false;
			});
		}
		return false;
	},
	hasEmptyFilterExpressionForDimension:function(filterExpression, dimensionName)
	{
			let filterRootElement = filterExpression.getFilterRootElement();
		if (oFF.notNull(filterRootElement))
		{
			let allLists = oFF.QFilterUtil.collectAllCartesianLists(filterRootElement);
			return oFF.XCollectionUtils.contains(allLists, (cartesianList) => {
				if (oFF.XStringUtils.isNullOrEmpty(dimensionName) || oFF.XString.isEqual(cartesianList.getDimensionName(), dimensionName))
				{
					if (cartesianList.isEmpty())
					{
						return true;
					}
				}
				return false;
			});
		}
		return false;
	},
	hasFilterForDimension:function(filterContainer, dimensionName)
	{
			return oFF.QFilterUtil.hasFilterForDimensionInternal(filterContainer, dimensionName, false, false);
	},
	hasFilterForDimensionInternal:function(filterContainer, dimensionName, checkIfFilterIsNotEmpty, backProjectionOnly)
	{
			let dynamicFilterRootElement = filterContainer.getDynamicFilter().getFilterRootElement();
		if (oFF.QFilterUtil.hasCartesianListForDimensionInternal(dynamicFilterRootElement, dimensionName, checkIfFilterIsNotEmpty))
		{
			return true;
		}
		let backProjectionFilterIds = filterContainer.getBackProjectionFilterIds().getValuesAsReadOnlyList();
		let layeredFilters = filterContainer.getLinkedFilters().getValuesAsReadOnlyList();
		let dimensionsAffectingDynamicFilter = filterContainer.getQueryModel().getVariableManagerBase().getDimensionMemberVariablesAffectingDynamicFilterByDimension().getKeysAsReadOnlyList();
		if (filterContainer.getQueryManager().getVariableProcessorState() !== oFF.VariableProcessorState.SUBMITTED && dimensionsAffectingDynamicFilter.size() > 0)
		{
			return true;
		}
		for (let i = 0; i < layeredFilters.size(); i++)
		{
			let layeredFilter = layeredFilters.get(i);
			let skipForBackProjection = backProjectionOnly && !backProjectionFilterIds.contains(layeredFilter.getUniqueId());
			if (!skipForBackProjection && oFF.QFilterUtil.hasCartesianListForDimensionInternal(layeredFilter.getFilterRootElement(), dimensionName, checkIfFilterIsNotEmpty))
			{
				return true;
			}
		}
		return false;
	},
	hasNonEmptyFilter:function(filterContainer, backProjectionOnly)
	{
			return oFF.QFilterUtil.hasFilterForDimensionInternal(filterContainer, null, true, backProjectionOnly);
	},
	hasNonEmptyFilterForDimension:function(filterContainer, dimensionName, backProjectionOnly)
	{
			return oFF.QFilterUtil.hasFilterForDimensionInternal(filterContainer, dimensionName, true, backProjectionOnly);
	},
	hasSingleValueFilterForDimension:function(filterContainer, dimensionName)
	{
			let layeredFilters = filterContainer.getLinkedFilters().getValuesAsReadOnlyList();
		if (layeredFilters.isEmpty())
		{
			let effectiveRootElement = filterContainer.getEffectiveFilter().getFilterRootElement();
			if (oFF.notNull(effectiveRootElement))
			{
				let allLists = oFF.QFilterUtil.collectAllCartesianLists(effectiveRootElement);
				let svList = oFF.XCollectionUtils.findFirst(allLists, (cartesianList) => {
					return oFF.XString.isEqual(cartesianList.getDimensionName(), dimensionName) && oFF.QFilterUtil.isSingleValueFilterCartesianList(cartesianList);
				});
				if (oFF.notNull(svList))
				{
					return true;
				}
			}
		}
		else
		{
			for (let i = 0; i < layeredFilters.size(); i++)
			{
				let filterRootElement = layeredFilters.get(i).getFilterRootElement();
				if (oFF.notNull(filterRootElement))
				{
					let cartesianLists = oFF.QFilterUtil.collectAllCartesianLists(filterRootElement);
					if (cartesianLists.size() === 1 && oFF.XString.isEqual(cartesianLists.get(0).getDimensionName(), dimensionName) && oFF.QFilterUtil.isSingleValueFilterCartesianList(cartesianLists.get(0)))
					{
						return true;
					}
				}
			}
		}
		return false;
	},
	isFilterApplicable:function(filter, modelCapabilities)
	{
			if (oFF.isNull(modelCapabilities) || oFF.isNull(filter))
		{
			return false;
		}
		let filterRootElement = filter.getFilterRootElement();
		if (oFF.isNull(filterRootElement))
		{
			return false;
		}
		let isComplexFilter = filter.isComplexFilter();
		if (isComplexFilter && !modelCapabilities.supportsMultiComplexFilter() && filterRootElement.getOlapComponentType() !== oFF.FilterComponentType.FILTER_ACROSS_MODELS)
		{
			return false;
		}
		if (filter.getModelCapabilities().supportsCellValueOperand())
		{
			if (oFF.XCollectionUtils.hasElements(filter.getCellValueOperands()) && !modelCapabilities.supportsCellValueOperand())
			{
				return false;
			}
		}
		return oFF.QFilterUtil._isFilterElementApplicable(filterRootElement, modelCapabilities);
	},
	isFilterIsSetWithShowOnlyLeaves:function(filterOperation)
	{
			let memberNavigations = filterOperation.getLow().getMemberNavigations();
		if (oFF.notNull(memberNavigations))
		{
			for (let mnIdx = 0; mnIdx < memberNavigations.size(); mnIdx++)
			{
				let memberNav = memberNavigations.get(mnIdx);
				if (memberNav.getMemberFunction() === oFF.CurrentMemberFunction.LEAVES)
				{
					return true;
				}
				if (memberNav.getMemberFunction() === oFF.CurrentMemberFunction.DESCENDANTS)
				{
					let params = memberNav.getParameters();
					for (let i = 0; i < params.size(); i++)
					{
						let constantValue = params.get(i).getConstantValue();
						if (oFF.notNull(constantValue) && oFF.XString.isEqual(constantValue.getString(), oFF.QFilterUtil.LEAVES))
						{
							return true;
						}
					}
				}
			}
		}
		return false;
	},
	isFilterNullOrEmpty:function(filterElement)
	{
			let isEmpty = true;
		if (oFF.notNull(filterElement))
		{
			let componentType = filterElement.getOlapComponentType();
			if (componentType === oFF.OlapComponentType.FILTER_EXPRESSION)
			{
				isEmpty = oFF.QFilterUtil.isFilterNullOrEmpty(filterElement.getFilterRootElement());
			}
			else if (componentType === oFF.FilterComponentType.OPERATION)
			{
				isEmpty = false;
			}
			else if (componentType.isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA))
			{
				isEmpty = oFF.XStream.of(filterElement).allMatch((subElement) => {
					return oFF.QFilterUtil.isFilterNullOrEmpty(subElement);
				});
			}
			else if (componentType === oFF.FilterComponentType.FILTER_MEASURE_BASED)
			{
				let measureBased = filterElement;
				let formula = measureBased.getFormula();
				isEmpty = oFF.isNull(formula);
			}
			else if (componentType.isTypeOf(oFF.FilterComponentType.FILTER_TIME_RANGE))
			{
				let dynamicTime = filterElement;
				isEmpty = oFF.XStringUtils.isNullOrEmpty(dynamicTime.getTimeDimensionName());
			}
		}
		return isEmpty;
	},
	isMatchingMemberName:function(queryModel, memberNames, targetElementName)
	{
			if (memberNames.contains(targetElementName))
		{
			return true;
		}
		let targetMemberName = queryModel.getConvenienceCommands().getMeasureMemberNameByAlias(queryModel, targetElementName);
		if (oFF.XStringUtils.isNotNullAndNotEmpty(targetMemberName) && memberNames.contains(targetMemberName))
		{
			return true;
		}
		return false;
	},
	isSingleValueFilterCartesianList:function(cartesianList)
	{
			if (oFF.notNull(cartesianList) && cartesianList.size() === 1)
		{
			let cartesianElement = cartesianList.getCartesianElement(0);
			if (oFF.QFilterUtil.isSingleValueFilterElement(cartesianElement))
			{
				return true;
			}
		}
		return false;
	},
	isSingleValueFilterElement:function(filterElement)
	{
			return filterElement.getSetSign() === oFF.SetSign.INCLUDING && (filterElement.getComparisonOperator() === oFF.ComparisonOperator.EQUAL || oFF.XString.isEqual(filterElement.getLow().getString(), filterElement.getHigh().getString()));
	},
	isSingleValueSourceCartesianList:function(cartesianList)
	{
			if (cartesianList.getOlapComponentType() === oFF.FilterComponentType.CONVERTED_TIME_CARTESIAN_LIST)
		{
			return cartesianList.isSingleValueSourceCartesianList();
		}
		return false;
	},
	linkFiltersIfApplicableAppend:function(container, filters)
	{
			let iterator = filters.getKeysAsIterator();
		while (iterator.hasNext())
		{
			let key = iterator.next();
			container.linkFilterIfApplicable(key, filters.getByKey(key));
		}
	},
	removeComplexSelectionByDimensionName:function(filterElement, dimName)
	{
			let componentType = filterElement.getComponentType();
		if (componentType === oFF.FilterComponentType.OPERATION)
		{
			let filterOp = filterElement;
			return oFF.XString.isEqual(dimName, filterOp.getDimensionName());
		}
		else if (componentType.isTypeOf(oFF.FilterComponentType.AND) || componentType === oFF.FilterComponentType.OR)
		{
			let filterAlgebra = filterElement;
			let idxFilterOp = 0;
			while (idxFilterOp < filterAlgebra.size())
			{
				let iqFilterElement = filterAlgebra.get(idxFilterOp);
				let removeComplexSelectionByDimensionName = oFF.QFilterUtil.removeComplexSelectionByDimensionName(iqFilterElement, dimName);
				if (removeComplexSelectionByDimensionName)
				{
					filterAlgebra.removeAt(idxFilterOp);
				}
				else
				{
					idxFilterOp++;
				}
			}
		}
		else if (componentType.isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
		{
			let complexCartesianList = filterElement;
			return oFF.XString.isEqual(complexCartesianList.getDimensionName(), dimName);
		}
		return false;
	},
	setCurrentDateVariable:function(queryModel)
	{
			let currentDateVariable = oFF.QVariableUtils.getCurrentDateVariable(queryModel);
		let currentSystemDate = queryModel.getProcess().getDateTimeProvider().getCurrentDateTime().toIsoFormat();
		if (oFF.notNull(currentDateVariable) && oFF.XStringUtils.isNotNullAndNotEmpty(currentSystemDate))
		{
			currentDateVariable.setValueByString(currentSystemDate);
			currentDateVariable.getTagging().put(oFF.QPersistedPlaceholderTag.PERSISTED_QUERY_PLACEHOLDER, oFF.XStringUtils.concatenate3(oFF.QPersistedPlaceholderTag.PERSISTED_QUERY_PLACEHOLDER, "|", oFF.QPersistedPlaceholderTagType.CURRENT_DATE_VARIABLE.getName()));
		}
	},
	supportsDateRangeFilter:function(field)
	{
			if (oFF.notNull(field))
		{
			let dimension = field.getDimension();
			return oFF.notNull(dimension) && !dimension.getFiscalEnabled() && !oFF.QTimeDimensionUtil.isFlexibleTimeDimension(dimension) && (field.getValueType().isDateBased() || oFF.HierarchyLevelType.getHighestDateRangeGranularity(dimension) !== null);
		}
		return false;
	},
	wrapCartesianList:function(complexSelection)
	{
			let cartesianProduct = oFF.QFactory.createFilterCartesianProduct(complexSelection);
		let signedSetComplex = complexSelection;
		cartesianProduct.add(signedSetComplex);
		return cartesianProduct;
	},
	wrapFilterOperation:function(complexSelection)
	{
			let operation = complexSelection;
		if (operation.getComparisonOperator().isTypeOf(oFF.SpatialComparisonOperator._SPATIAL))
		{
			return null;
		}
		let cartesianProduct = oFF.QFactory.createFilterCartesianProduct(complexSelection);
		oFF.QFilterUtil.addOperationToCartesian(cartesianProduct, operation, false, false);
		return cartesianProduct;
	}
};

oFF.QMemberNavigation = function() {};
oFF.QMemberNavigation.prototype = new oFF.XObject();
oFF.QMemberNavigation.prototype._ff_c = "QMemberNavigation";

oFF.QMemberNavigation.prototype.m_memberFunction = null;
oFF.QMemberNavigation.prototype.m_navigations = null;
oFF.QMemberNavigation.prototype.m_parameters = null;
oFF.QMemberNavigation.prototype.addNavigation = function(navigation)
{
	if (oFF.isNull(this.m_navigations))
	{
		this.m_navigations = oFF.XList.create();
	}
	this.m_navigations.add(navigation);
};
oFF.QMemberNavigation.prototype.addParameter = function(parameter)
{
	if (oFF.isNull(this.m_parameters))
	{
		this.m_parameters = oFF.XList.create();
	}
	this.m_parameters.add(parameter);
};
oFF.QMemberNavigation.prototype.getMemberFunction = function()
{
	return this.m_memberFunction;
};
oFF.QMemberNavigation.prototype.getNavigations = function()
{
	return this.m_navigations;
};
oFF.QMemberNavigation.prototype.getParameters = function()
{
	return this.m_parameters;
};
oFF.QMemberNavigation.prototype.releaseObject = function()
{
	this.m_parameters = oFF.XObjectExt.release(this.m_parameters);
	this.m_navigations = oFF.XObjectExt.release(this.m_navigations);
	this.m_memberFunction = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.QMemberNavigation.prototype.setMemberFunction = function(memberfunction)
{
	this.m_memberFunction = memberfunction;
};

oFF.QMemberNavigationParameter = function() {};
oFF.QMemberNavigationParameter.prototype = new oFF.XObject();
oFF.QMemberNavigationParameter.prototype._ff_c = "QMemberNavigationParameter";

oFF.QMemberNavigationParameter.create = function()
{
	let parameter = new oFF.QMemberNavigationParameter();
	return parameter;
};
oFF.QMemberNavigationParameter.prototype.m_constantValue = null;
oFF.QMemberNavigationParameter.prototype.m_fqnName = null;
oFF.QMemberNavigationParameter.prototype.m_levelValue = null;
oFF.QMemberNavigationParameter.prototype.m_memberNavigationType = null;
oFF.QMemberNavigationParameter.prototype.m_offsetHigh = null;
oFF.QMemberNavigationParameter.prototype.m_offsetLow = null;
oFF.QMemberNavigationParameter.prototype.getConstantValue = function()
{
	return this.m_constantValue;
};
oFF.QMemberNavigationParameter.prototype.getFunctionName = function()
{
	return this.m_fqnName;
};
oFF.QMemberNavigationParameter.prototype.getLevelValue = function()
{
	return this.m_levelValue;
};
oFF.QMemberNavigationParameter.prototype.getMemberNavigationType = function()
{
	return this.m_memberNavigationType;
};
oFF.QMemberNavigationParameter.prototype.getOffSetLow = function()
{
	return this.m_offsetLow;
};
oFF.QMemberNavigationParameter.prototype.getOffsetHigh = function()
{
	return this.m_offsetHigh;
};
oFF.QMemberNavigationParameter.prototype.getParameterType = function()
{
	return this.m_memberNavigationType.getName();
};
oFF.QMemberNavigationParameter.prototype.getValue = function()
{
	if (this.m_memberNavigationType === oFF.MemberNavigationType.FUNCTION_PARAM_CONSTANT)
	{
		return this.m_constantValue;
	}
	else if (this.m_memberNavigationType === oFF.MemberNavigationType.FUNCTION_PARAM_LEVEL || this.m_memberNavigationType === oFF.MemberNavigationType.FUNCTION_PARAM_NO_VALUES_ABOVE_LEVEL || this.m_memberNavigationType === oFF.MemberNavigationType.FUNCTION_PARAM_ERROR_ABOVE_LEVEL)
	{
		return this.m_levelValue;
	}
	else if (this.m_memberNavigationType === oFF.MemberNavigationType.FUNCTION_PARAM_MEMBER)
	{
		return this.m_fqnName;
	}
	return null;
};
oFF.QMemberNavigationParameter.prototype.releaseObject = function()
{
	this.m_memberNavigationType = null;
	this.m_levelValue = oFF.XObjectExt.release(this.m_levelValue);
	this.m_constantValue = oFF.XObjectExt.release(this.m_constantValue);
	this.m_fqnName = oFF.XObjectExt.release(this.m_fqnName);
	this.m_offsetLow = oFF.XObjectExt.release(this.m_offsetLow);
	this.m_offsetHigh = oFF.XObjectExt.release(this.m_offsetHigh);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.QMemberNavigationParameter.prototype.setConstantValue = function(constantValue)
{
	this.m_memberNavigationType = oFF.MemberNavigationType.FUNCTION_PARAM_CONSTANT;
	this.m_constantValue = oFF.XValueAccess.createWithValue(constantValue);
};
oFF.QMemberNavigationParameter.prototype.setErrorAboveLevel = function(level)
{
	this.m_memberNavigationType = oFF.MemberNavigationType.FUNCTION_PARAM_ERROR_ABOVE_LEVEL;
	this.m_levelValue = oFF.XValueAccess.createWithValue(oFF.XStringValue.create(level));
};
oFF.QMemberNavigationParameter.prototype.setLevelValue = function(levelValue)
{
	this.m_memberNavigationType = oFF.MemberNavigationType.FUNCTION_PARAM_LEVEL;
	this.m_levelValue = oFF.XValueAccess.createWithValue(levelValue);
};
oFF.QMemberNavigationParameter.prototype.setMemberValue = function(fqnName)
{
	this.m_memberNavigationType = oFF.MemberNavigationType.FUNCTION_PARAM_MEMBER;
	this.m_fqnName = oFF.XValueAccess.createWithValue(oFF.XStringValue.create(fqnName));
};
oFF.QMemberNavigationParameter.prototype.setNoValuesAboveLevel = function(level)
{
	this.m_memberNavigationType = oFF.MemberNavigationType.FUNCTION_PARAM_NO_VALUES_ABOVE_LEVEL;
	this.m_levelValue = oFF.XValueAccess.createWithValue(oFF.XStringValue.create(level));
};
oFF.QMemberNavigationParameter.prototype.setRange = function(levelValue, offsetLow, offsetHigh)
{
	this.m_memberNavigationType = oFF.MemberNavigationType.FUNCTION_PARAM_RANGE;
	this.m_levelValue = oFF.XValueAccess.createWithValue(levelValue);
	this.m_offsetLow = oFF.XValueAccess.createWithValue(oFF.XIntegerValue.create(offsetLow));
	this.m_offsetHigh = oFF.XValueAccess.createWithValue(oFF.XIntegerValue.create(offsetHigh));
};
oFF.QMemberNavigationParameter.prototype.setShift = function(levelValue, constantValue)
{
	this.m_memberNavigationType = oFF.MemberNavigationType.FUNCTION_PARAM_SHIFT;
	this.m_levelValue = oFF.XValueAccess.createWithValue(levelValue);
	this.m_constantValue = oFF.XValueAccess.createWithValue(constantValue);
};

oFF.QGeoChoroplethDrillPath = function() {};
oFF.QGeoChoroplethDrillPath.prototype = new oFF.XObject();
oFF.QGeoChoroplethDrillPath.prototype._ff_c = "QGeoChoroplethDrillPath";

oFF.QGeoChoroplethDrillPath.create = function()
{
	let newarea = new oFF.QGeoChoroplethDrillPath();
	newarea.setupExt();
	return newarea;
};
oFF.QGeoChoroplethDrillPath.prototype.m_areaId = null;
oFF.QGeoChoroplethDrillPath.prototype.m_areaName = null;
oFF.QGeoChoroplethDrillPath.prototype.m_levelId = null;
oFF.QGeoChoroplethDrillPath.prototype.m_shape = null;
oFF.QGeoChoroplethDrillPath.prototype.m_srid = 0;
oFF.QGeoChoroplethDrillPath.prototype.getAreaId = function()
{
	return this.m_areaId;
};
oFF.QGeoChoroplethDrillPath.prototype.getAreaName = function()
{
	return this.m_areaName;
};
oFF.QGeoChoroplethDrillPath.prototype.getLevelId = function()
{
	return this.m_levelId;
};
oFF.QGeoChoroplethDrillPath.prototype.getSRID = function()
{
	return this.m_srid;
};
oFF.QGeoChoroplethDrillPath.prototype.getShape = function()
{
	return this.m_shape;
};
oFF.QGeoChoroplethDrillPath.prototype.releaseObject = function()
{
	this.m_levelId = null;
	this.m_areaId = null;
	this.m_areaName = null;
	this.m_shape = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.QGeoChoroplethDrillPath.prototype.setAreaId = function(areaId)
{
	this.m_areaId = areaId;
};
oFF.QGeoChoroplethDrillPath.prototype.setAreaName = function(areaName)
{
	this.m_areaName = areaName;
};
oFF.QGeoChoroplethDrillPath.prototype.setLevelId = function(levelId)
{
	this.m_levelId = levelId;
};
oFF.QGeoChoroplethDrillPath.prototype.setSRID = function(srid)
{
	this.m_srid = srid;
};
oFF.QGeoChoroplethDrillPath.prototype.setShape = function(shape)
{
	this.m_shape = shape;
};
oFF.QGeoChoroplethDrillPath.prototype.setupExt = function()
{
	this.m_levelId = null;
	this.m_areaId = null;
	this.m_areaName = null;
	this.m_shape = null;
	this.m_srid = oFF.QGeoConstants.SPATIAL_REFERENCE_WGS_1984_WEB_MERCATOR_AUXILIARY_SPHERE;
};

oFF.QGeoChoroplethDrillPathComparatorAsc = function() {};
oFF.QGeoChoroplethDrillPathComparatorAsc.prototype = new oFF.XObject();
oFF.QGeoChoroplethDrillPathComparatorAsc.prototype._ff_c = "QGeoChoroplethDrillPathComparatorAsc";

oFF.QGeoChoroplethDrillPathComparatorAsc.create = function()
{
	return new oFF.QGeoChoroplethDrillPathComparatorAsc();
};
oFF.QGeoChoroplethDrillPathComparatorAsc.prototype.compare = function(o1, o2)
{
	let s1 = o1.getLevelId();
	let s2 = o2.getLevelId();
	return oFF.XString.compare(s1, s2);
};

oFF.QGeoChoroplethHierarchy = function() {};
oFF.QGeoChoroplethHierarchy.prototype = new oFF.XObject();
oFF.QGeoChoroplethHierarchy.prototype._ff_c = "QGeoChoroplethHierarchy";

oFF.QGeoChoroplethHierarchy.create = function(hierarchyId, name)
{
	let newObject = new oFF.QGeoChoroplethHierarchy();
	newObject.setupExt(hierarchyId, name);
	return newObject;
};
oFF.QGeoChoroplethHierarchy.prototype.m_hierarchyId = null;
oFF.QGeoChoroplethHierarchy.prototype.m_hierarchyName = null;
oFF.QGeoChoroplethHierarchy.prototype.m_levelIds = null;
oFF.QGeoChoroplethHierarchy.prototype.m_levels = null;
oFF.QGeoChoroplethHierarchy.prototype.addLevel = function(level)
{
	if (oFF.notNull(level))
	{
		let levelId = level.getLevelId();
		this.m_levels.put(levelId, level);
		this.m_levelIds.add(levelId);
	}
};
oFF.QGeoChoroplethHierarchy.prototype.getHierarchyId = function()
{
	return this.m_hierarchyId;
};
oFF.QGeoChoroplethHierarchy.prototype.getHierarchyName = function()
{
	return this.m_hierarchyName;
};
oFF.QGeoChoroplethHierarchy.prototype.getLevelById = function(levelId)
{
	if (oFF.notNull(levelId) && this.m_levels.containsKey(levelId))
	{
		return this.m_levels.getByKey(levelId);
	}
	return null;
};
oFF.QGeoChoroplethHierarchy.prototype.getLevelIds = function()
{
	return this.m_levelIds;
};
oFF.QGeoChoroplethHierarchy.prototype.getLevels = function()
{
	return this.m_levels;
};
oFF.QGeoChoroplethHierarchy.prototype.releaseObject = function()
{
	this.m_hierarchyId = null;
	this.m_hierarchyName = null;
	this.m_levels = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_levels);
	this.m_levelIds = oFF.XObjectExt.release(this.m_levelIds);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.QGeoChoroplethHierarchy.prototype.setupExt = function(hierarchyId, name)
{
	this.m_hierarchyId = hierarchyId;
	this.m_hierarchyName = name;
	this.m_levels = oFF.XHashMapByString.create();
	this.m_levelIds = oFF.XList.create();
};

oFF.QGeoChoroplethHierarchyLevel = function() {};
oFF.QGeoChoroplethHierarchyLevel.prototype = new oFF.XObject();
oFF.QGeoChoroplethHierarchyLevel.prototype._ff_c = "QGeoChoroplethHierarchyLevel";

oFF.QGeoChoroplethHierarchyLevel.create = function(levelId, name)
{
	let newObject = new oFF.QGeoChoroplethHierarchyLevel();
	newObject.setupExt(levelId, name);
	return newObject;
};
oFF.QGeoChoroplethHierarchyLevel.prototype.m_columns = null;
oFF.QGeoChoroplethHierarchyLevel.prototype.m_isCustom = false;
oFF.QGeoChoroplethHierarchyLevel.prototype.m_levelId = null;
oFF.QGeoChoroplethHierarchyLevel.prototype.m_levelName = null;
oFF.QGeoChoroplethHierarchyLevel.prototype.m_location = null;
oFF.QGeoChoroplethHierarchyLevel.prototype.m_objectName = null;
oFF.QGeoChoroplethHierarchyLevel.prototype.m_packageName = null;
oFF.QGeoChoroplethHierarchyLevel.prototype.m_schemaName = null;
oFF.QGeoChoroplethHierarchyLevel.prototype.addColumn = function(column)
{
	if (oFF.notNull(column))
	{
		this.m_columns.add(column);
	}
};
oFF.QGeoChoroplethHierarchyLevel.prototype.getColumns = function()
{
	return this.m_columns;
};
oFF.QGeoChoroplethHierarchyLevel.prototype.getLevelId = function()
{
	return this.m_levelId;
};
oFF.QGeoChoroplethHierarchyLevel.prototype.getLevelName = function()
{
	return this.m_levelName;
};
oFF.QGeoChoroplethHierarchyLevel.prototype.getLocation = function()
{
	return this.m_location;
};
oFF.QGeoChoroplethHierarchyLevel.prototype.getObjectName = function()
{
	return this.m_objectName;
};
oFF.QGeoChoroplethHierarchyLevel.prototype.getPackageName = function()
{
	return this.m_packageName;
};
oFF.QGeoChoroplethHierarchyLevel.prototype.getSchemaName = function()
{
	return this.m_schemaName;
};
oFF.QGeoChoroplethHierarchyLevel.prototype.isCustom = function()
{
	return this.m_isCustom;
};
oFF.QGeoChoroplethHierarchyLevel.prototype.releaseObject = function()
{
	this.m_levelId = null;
	this.m_levelName = null;
	this.m_location = null;
	this.m_packageName = null;
	this.m_objectName = null;
	this.m_schemaName = null;
	this.m_isCustom = false;
	this.m_columns = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_columns);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.QGeoChoroplethHierarchyLevel.prototype.setIsCustom = function(isCustom)
{
	this.m_isCustom = isCustom;
};
oFF.QGeoChoroplethHierarchyLevel.prototype.setLocation = function(location)
{
	this.m_location = location;
};
oFF.QGeoChoroplethHierarchyLevel.prototype.setObjectName = function(objectName)
{
	this.m_objectName = objectName;
};
oFF.QGeoChoroplethHierarchyLevel.prototype.setPackageName = function(packageName)
{
	this.m_packageName = packageName;
};
oFF.QGeoChoroplethHierarchyLevel.prototype.setSchemaName = function(schemaName)
{
	this.m_schemaName = schemaName;
};
oFF.QGeoChoroplethHierarchyLevel.prototype.setupExt = function(levelId, name)
{
	this.m_levelId = levelId;
	this.m_levelName = name;
	this.m_location = null;
	this.m_packageName = null;
	this.m_objectName = null;
	this.m_schemaName = null;
	this.m_isCustom = false;
	this.m_columns = oFF.XList.create();
};

oFF.HierarchyCatalogLevel = function() {};
oFF.HierarchyCatalogLevel.prototype = new oFF.XObject();
oFF.HierarchyCatalogLevel.prototype._ff_c = "HierarchyCatalogLevel";

oFF.HierarchyCatalogLevel.createCatalogLevel = function()
{
	return new oFF.HierarchyCatalogLevel();
};
oFF.HierarchyCatalogLevel.createCopy = function(item)
{
	if (oFF.isNull(item))
	{
		return null;
	}
	let copy = oFF.HierarchyCatalogLevel.createCatalogLevel();
	copy.setLevel(item.getLevel());
	copy.setLevelName(item.getLevelName());
	copy.setLevelDescription(item.getLevelDescription());
	copy.setLevelUniqueName(item.getLevelUniqueName());
	copy.setLevelDimensionName(item.getLevelDimensionName());
	copy.setLevelType(item.getLevelType());
	return copy;
};
oFF.HierarchyCatalogLevel.prototype.m_level = 0;
oFF.HierarchyCatalogLevel.prototype.m_levelDescription = null;
oFF.HierarchyCatalogLevel.prototype.m_levelDimensionName = null;
oFF.HierarchyCatalogLevel.prototype.m_levelName = null;
oFF.HierarchyCatalogLevel.prototype.m_levelType = null;
oFF.HierarchyCatalogLevel.prototype.m_levelUniqueName = null;
oFF.HierarchyCatalogLevel.prototype.getLevel = function()
{
	return this.m_level;
};
oFF.HierarchyCatalogLevel.prototype.getLevelDescription = function()
{
	return this.m_levelDescription;
};
oFF.HierarchyCatalogLevel.prototype.getLevelDimensionName = function()
{
	return this.m_levelDimensionName;
};
oFF.HierarchyCatalogLevel.prototype.getLevelName = function()
{
	return this.m_levelName;
};
oFF.HierarchyCatalogLevel.prototype.getLevelType = function()
{
	return this.m_levelType;
};
oFF.HierarchyCatalogLevel.prototype.getLevelUniqueName = function()
{
	return this.m_levelUniqueName;
};
oFF.HierarchyCatalogLevel.prototype.releaseObject = function()
{
	this.m_levelName = null;
	this.m_levelDescription = null;
	this.m_levelUniqueName = null;
	this.m_levelDimensionName = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.HierarchyCatalogLevel.prototype.setLevel = function(level)
{
	this.m_level = level;
};
oFF.HierarchyCatalogLevel.prototype.setLevelDescription = function(levelDescription)
{
	this.m_levelDescription = levelDescription;
};
oFF.HierarchyCatalogLevel.prototype.setLevelDimensionName = function(levelDimensionName)
{
	this.m_levelDimensionName = levelDimensionName;
};
oFF.HierarchyCatalogLevel.prototype.setLevelName = function(levelName)
{
	this.m_levelName = levelName;
};
oFF.HierarchyCatalogLevel.prototype.setLevelType = function(levelType)
{
	this.m_levelType = levelType;
};
oFF.HierarchyCatalogLevel.prototype.setLevelUniqueName = function(levelUniqueName)
{
	this.m_levelUniqueName = levelUniqueName;
};
oFF.HierarchyCatalogLevel.prototype.toString = function()
{
	let sb = oFF.XStringBuffer.create();
	sb.append("Level[");
	sb.appendInt(this.m_level);
	sb.append("]");
	sb.append(" Name[");
	sb.append(this.m_levelName);
	sb.append("]");
	sb.append(" Description[");
	sb.append(this.m_levelDescription);
	sb.append("]");
	sb.append(" UniqueName[");
	sb.append(this.m_levelUniqueName);
	sb.append("]");
	sb.append(" DimensionName[");
	sb.append(this.m_levelDimensionName);
	sb.append("]");
	return sb.toString();
};

oFF.QHierarchyLevel = function() {};
oFF.QHierarchyLevel.prototype = new oFF.XObject();
oFF.QHierarchyLevel.prototype._ff_c = "QHierarchyLevel";

oFF.QHierarchyLevel.create = function(hierarchy, uniqueName, level)
{
	let object = new oFF.QHierarchyLevel();
	object.setupHierarchyLevel(hierarchy, uniqueName, level);
	return object;
};
oFF.QHierarchyLevel.prototype.m_hierarchy = null;
oFF.QHierarchyLevel.prototype.m_level = 0;
oFF.QHierarchyLevel.prototype.m_levelDimensionName = null;
oFF.QHierarchyLevel.prototype.m_levelName = null;
oFF.QHierarchyLevel.prototype.m_levelText = null;
oFF.QHierarchyLevel.prototype.m_levelType = null;
oFF.QHierarchyLevel.prototype.m_levelUniqueName = null;
oFF.QHierarchyLevel.prototype.m_navigationAttribute = null;
oFF.QHierarchyLevel.prototype.cloneExt = function(flags)
{
	let clone = oFF.QHierarchyLevel.create(this.getHierarchy(), this.getLevelUniqueName(), this.getLevelNumber());
	clone.setLevelName(this.getLevelName());
	clone.setLevelText(this.getLevelText());
	clone.setLevelType(this.getLevelType());
	clone.setLevelDimensionName(this.getLevelDimensionName());
	clone.setNavigationAttribute(this.m_navigationAttribute);
	return clone;
};
oFF.QHierarchyLevel.prototype.getHierarchy = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_hierarchy);
};
oFF.QHierarchyLevel.prototype.getLevelDimensionName = function()
{
	return this.m_levelDimensionName;
};
oFF.QHierarchyLevel.prototype.getLevelName = function()
{
	return this.m_levelName;
};
oFF.QHierarchyLevel.prototype.getLevelNumber = function()
{
	return this.m_level;
};
oFF.QHierarchyLevel.prototype.getLevelText = function()
{
	return this.m_levelText;
};
oFF.QHierarchyLevel.prototype.getLevelType = function()
{
	return this.m_levelType;
};
oFF.QHierarchyLevel.prototype.getLevelUniqueName = function()
{
	return this.m_levelUniqueName;
};
oFF.QHierarchyLevel.prototype.getNavigationAttribute = function()
{
	return this.m_navigationAttribute;
};
oFF.QHierarchyLevel.prototype.releaseObject = function()
{
	this.m_levelText = null;
	this.m_levelName = null;
	this.m_levelUniqueName = null;
	this.m_hierarchy = null;
	this.m_levelType = null;
	this.m_navigationAttribute = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.QHierarchyLevel.prototype.setLevelDimensionName = function(levelDimensionName)
{
	this.m_levelDimensionName = levelDimensionName;
};
oFF.QHierarchyLevel.prototype.setLevelName = function(levelName)
{
	this.m_levelName = levelName;
};
oFF.QHierarchyLevel.prototype.setLevelText = function(text)
{
	this.m_levelText = text;
};
oFF.QHierarchyLevel.prototype.setLevelType = function(levelType)
{
	this.m_levelType = levelType;
};
oFF.QHierarchyLevel.prototype.setNavigationAttribute = function(navigationAttribute)
{
	this.m_navigationAttribute = navigationAttribute;
};
oFF.QHierarchyLevel.prototype.setupHierarchyLevel = function(hierarchy, uniqueName, level)
{
	this.m_level = level;
	this.m_levelName = uniqueName;
	this.m_levelUniqueName = uniqueName;
	this.m_hierarchy = oFF.XWeakReferenceUtil.getWeakRef(hierarchy);
	if (level === 0)
	{
		this.m_levelType = oFF.HierarchyLevelType.ALL;
	}
	else
	{
		this.m_levelType = oFF.HierarchyLevelType.REGULAR;
	}
};
oFF.QHierarchyLevel.prototype.toString = function()
{
	let sb = oFF.XStringBuffer.create();
	sb.append(this.m_levelUniqueName);
	sb.append(": ");
	sb.append(this.m_levelText);
	return sb.toString();
};

oFF.QTimeHierarchyLevelName = {

	FISCAL_HIERARCHY_PREFIX:"FY",
	FISCAL_HIERARCHY_WEEK_PATTERN_PREFIX:"PATTERN_FISC_",
	FYP:"FYP",
	FYPD:"FYPD",
	FYQP:"FYQP",
	FYQPD:"FYQPD",
	YHM:"YHM",
	YHMD:"YHMD",
	YHQ:"YHQ",
	YHQM:"YHQM",
	YHQMD:"YHQMD",
	YM:"YM",
	YMD:"YMD",
	YQM:"YQM"
};

oFF.InputReadinessFilterState = function() {};
oFF.InputReadinessFilterState.prototype = new oFF.XObject();
oFF.InputReadinessFilterState.prototype._ff_c = "InputReadinessFilterState";

oFF.InputReadinessFilterState.create = function(flag, parameter)
{
	let obj = new oFF.InputReadinessFilterState();
	obj.m_flag = flag;
	obj.m_parameter = parameter;
	return obj;
};
oFF.InputReadinessFilterState.prototype.m_flag = null;
oFF.InputReadinessFilterState.prototype.m_parameter = null;
oFF.InputReadinessFilterState.prototype.cloneExt = function(flags)
{
	return oFF.InputReadinessFilterState.create(this.m_flag, this.m_parameter);
};
oFF.InputReadinessFilterState.prototype.getFlag = function()
{
	return this.m_flag;
};
oFF.InputReadinessFilterState.prototype.getParameter = function()
{
	return this.m_parameter;
};
oFF.InputReadinessFilterState.prototype.releaseObject = function()
{
	this.m_flag = null;
	this.m_parameter = null;
	oFF.XObject.prototype.releaseObject.call( this );
};

oFF.QKeyRefComparator = function() {};
oFF.QKeyRefComparator.prototype = new oFF.XObject();
oFF.QKeyRefComparator.prototype._ff_c = "QKeyRefComparator";

oFF.QKeyRefComparator.create = function(comparator)
{
	let newObj = new oFF.QKeyRefComparator();
	newObj.m_comparator = comparator;
	return newObj;
};
oFF.QKeyRefComparator.prototype.m_comparator = null;
oFF.QKeyRefComparator.prototype.compare = function(o1, o2)
{
	let l1 = o1.get();
	let l2 = o2.get();
	return this.m_comparator.compare(l1, l2);
};

oFF.DimensionUsageAnalyzer2 = {

	_addNotNull:function(usedDimensions, name)
	{
			if (oFF.notNull(name))
		{
			usedDimensions.add(name);
		}
	},
	addDimensionUsedInFormulaCalcFields:function(queryModel, usedDimensions, calculatedDimension)
	{
			let fieldIterator = calculatedDimension.getFieldIterator();
		while (fieldIterator.hasNext())
		{
			let formulaCalcField = fieldIterator.next();
			let formulaItemInfo = oFF.FormulaItemUtils.getFieldNamesFromFormula(formulaCalcField.getFormulaItem());
			let fieldNames = formulaItemInfo.getAttributeNames();
			oFF.DimensionUsageAnalyzer2.addUsedDimensionFromFieldNames(queryModel, usedDimensions, fieldNames);
		}
	},
	addDimensionsUsedByFormulaCalculatedDimensions:function(queryModel, usedDimensions)
	{
			let dimensions = queryModel.getLoadedDimensions();
		for (let i = dimensions.size() - 1; i >= 0; i--)
		{
			let dimension = dimensions.get(i);
			if (dimension.getDimensionType() === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
			{
				let formulaCalcDim = dimension;
				oFF.DimensionUsageAnalyzer2.addDimensionUsedInFormulaCalcFields(queryModel, usedDimensions, formulaCalcDim);
				let dependentCalculatedDimensions = formulaCalcDim.getDependentCalculatedDimensions();
				let dependentCalculatedDimensionsIter = dependentCalculatedDimensions.getIterator();
				while (dependentCalculatedDimensionsIter.hasNext())
				{
					let dependentCalculatedDimension = dependentCalculatedDimensionsIter.next();
					oFF.DimensionUsageAnalyzer2.addDimensionUsedInFormulaCalcFields(queryModel, usedDimensions, dependentCalculatedDimension);
				}
				oFF.DimensionUsageAnalyzer2.addUsedDimensionFromFieldNames(queryModel, usedDimensions, formulaCalcDim.getAggregationFieldNames());
			}
		}
	},
	addDimensionsUsedByFormulaMember:function(formula, usedDimensions, queryModel, visitedMembers)
	{
			if (oFF.isNull(formula))
		{
			return;
		}
		let formulaType = formula.getOlapComponentType();
		if (formulaType === oFF.OlapComponentType.FORMULA_ITEM_ATTRIBUTE)
		{
			let fieldName = formula.getFieldName();
			let field = queryModel.getFieldByName(fieldName);
			if (oFF.notNull(field))
			{
				oFF.DimensionUsageAnalyzer2._addNotNull(usedDimensions, field.getDimension().getName());
			}
		}
		else if (formulaType === oFF.OlapComponentType.FORMULA_ITEM_MEMBER)
		{
			let dimensionName = formula.getDimensionName();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(dimensionName))
			{
				oFF.DimensionUsageAnalyzer2._addNotNull(usedDimensions, dimensionName);
			}
			else
			{
				let dimensionMember = null;
				let measureDimension = queryModel.getMeasureDimension();
				let memberName = formula.getMemberName();
				if (oFF.notNull(measureDimension))
				{
					dimensionMember = measureDimension.getStructureMemberByAliasOrMember(memberName);
				}
				if (oFF.isNull(dimensionMember))
				{
					let clientQueryObjectManager = queryModel.getOlapEnv().getClientQueryObjectManager();
					let keyRefStorage = clientQueryObjectManager.getKeyRefStorage();
					let subStores = keyRefStorage.getAllSubStores();
					for (let j = 0; j < subStores.size(); j++)
					{
						let storageName = subStores.get(j).getName();
						dimensionMember = clientQueryObjectManager.getStructuredMember(memberName, storageName, true);
						if (oFF.isNull(dimensionMember))
						{
							dimensionMember = clientQueryObjectManager.getStructuredMember(memberName, storageName, false);
						}
						if (oFF.notNull(dimensionMember))
						{
							break;
						}
					}
				}
				if (oFF.notNull(dimensionMember))
				{
					oFF.DimensionUsageAnalyzer2.addDimensionsUsedByMemberInternal(usedDimensions, dimensionMember, queryModel, visitedMembers);
				}
			}
		}
		else if (formulaType === oFF.OlapComponentType.FORMULA_FUNCTION)
		{
			let formulaFunction = formula;
			let size = formulaFunction.size();
			for (let i = 0; i < size; i++)
			{
				oFF.DimensionUsageAnalyzer2.addDimensionsUsedByFormulaMember(formulaFunction.get(i), usedDimensions, queryModel, visitedMembers);
			}
		}
		else if (formulaType === oFF.OlapComponentType.FORMULA_OPERATION)
		{
			let formulaOp = formula;
			if (formulaOp.getRightSide() !== null)
			{
				oFF.DimensionUsageAnalyzer2.addDimensionsUsedByFormulaMember(formulaOp.getRightSide(), usedDimensions, queryModel, visitedMembers);
			}
			if (formulaOp.getLeftSide() !== null)
			{
				oFF.DimensionUsageAnalyzer2.addDimensionsUsedByFormulaMember(formulaOp.getLeftSide(), usedDimensions, queryModel, visitedMembers);
			}
		}
	},
	addDimensionsUsedByLeveledHierarchies:function(queryModel, usedDimensions)
	{
			let referenceSet = usedDimensions.createSetOfStringCopy();
		let dimensionNames = referenceSet.getValuesAsReadOnlyList();
		let loadedDimensions = queryModel.getLoadedDimensions();
		let numberOfDims = dimensionNames.size();
		for (let i = 0; i < numberOfDims; i++)
		{
			let dimName = dimensionNames.get(i);
			let dimAccessor = loadedDimensions;
			let dimension = dimAccessor.getDimensionByNameInternal(dimName);
			if (oFF.notNull(dimension) && oFF.XCollectionUtils.hasElements(dimension.getLeveledHierarchies()))
			{
				let leveledHierarchies = dimension.getLeveledHierarchies();
				let numberOfHierarchies = leveledHierarchies.size();
				for (let hierarchy = 0; hierarchy < numberOfHierarchies; hierarchy++)
				{
					let leveledHierarchy = leveledHierarchies.get(hierarchy);
					let allLevel = leveledHierarchy.getAllLevel();
					let numberOfLevels = allLevel.size();
					for (let level = 0; level < numberOfLevels; level++)
					{
						let hierarchyLevel = allLevel.get(level);
						oFF.DimensionUsageAnalyzer2._addNotNull(usedDimensions, hierarchyLevel.getLevelDimensionName());
					}
				}
			}
		}
	},
	addDimensionsUsedByMember:function(usedDimensions, member, queryModel)
	{
			oFF.DimensionUsageAnalyzer2.addDimensionsUsedByMemberInternal(usedDimensions, member, queryModel, oFF.XHashSetOfString.create());
	},
	addDimensionsUsedByMemberInternal:function(usedDimensions, member, queryModel, visitedMembers)
	{
			if (visitedMembers.contains(member.getName()))
		{
			return;
		}
		visitedMembers.add(member.getName());
		usedDimensions.addAll(member.getDefaultSelectedDimensionNames());
		if (member.getMemberType() === oFF.MemberType.RESTRICTED_MEASURE)
		{
			let filter = member.getFilter();
			if (oFF.notNull(filter))
			{
				if (filter.isComplexFilter())
				{
					oFF.DimensionUsageAnalyzer2.addDimensionsUsedByRestrictedMember(filter.getComplexRoot(), usedDimensions);
				}
				else if (filter.isCartesianProduct())
				{
					oFF.DimensionUsageAnalyzer2.addDimensionsUsedByRestrictedMember(filter.getCartesianProduct(), usedDimensions);
				}
			}
		}
		else if (member.getMemberType() === oFF.MemberType.FORMULA)
		{
			oFF.DimensionUsageAnalyzer2.addDimensionsUsedByFormulaMember(member.getFormula(), usedDimensions, queryModel, visitedMembers);
		}
		else if (member.getMemberType() === oFF.MemberType.EXCEPTION_AGGREGATION)
		{
			if (member.getExceptionAggregationDimensions() !== null)
			{
				usedDimensions.addAll(member.getExceptionAggregationDimensions());
			}
		}
	},
	addDimensionsUsedByMembers:function(usedDimensions, dimension)
	{
			if (oFF.notNull(dimension))
		{
			let allStructureMembers = dimension.getLoadedStructureMembers();
			if (oFF.notNull(allStructureMembers))
			{
				let size = allStructureMembers.size();
				for (let i = 0; i < size; i++)
				{
					let member = allStructureMembers.get(i);
					if (oFF.notNull(member) && !member.isReleased())
					{
						oFF.DimensionUsageAnalyzer2.addDimensionsUsedByMember(usedDimensions, member, dimension.getQueryModel());
					}
				}
			}
		}
	},
	addDimensionsUsedByRestrictedMember:function(complexSelectionRoot, usedDimensions)
	{
			let componentType = complexSelectionRoot.getComponentType();
		if (componentType === oFF.FilterComponentType.OPERATION)
		{
			let filterOp = complexSelectionRoot;
			oFF.DimensionUsageAnalyzer2._addNotNull(usedDimensions, filterOp.getDimensionName());
		}
		else if (componentType === oFF.FilterComponentType.OR || componentType === oFF.FilterComponentType.AND)
		{
			let filterAlgebra = complexSelectionRoot;
			let filterSize = filterAlgebra.size();
			for (let idxAnd = 0; idxAnd < filterSize; idxAnd++)
			{
				oFF.DimensionUsageAnalyzer2.addDimensionsUsedByRestrictedMember(filterAlgebra.get(idxAnd), usedDimensions);
			}
		}
		else if (componentType === oFF.FilterComponentType.CARTESIAN_LIST)
		{
			let complexCartesianList = complexSelectionRoot;
			oFF.DimensionUsageAnalyzer2._addNotNull(usedDimensions, complexCartesianList.getDimensionName());
		}
		else if (componentType === oFF.FilterComponentType.CARTESIAN_PRODUCT)
		{
			let cartesianProduct = complexSelectionRoot;
			let productSize = cartesianProduct.size();
			for (let idxProduct = 0; idxProduct < productSize; idxProduct++)
			{
				oFF.DimensionUsageAnalyzer2.addDimensionsUsedByRestrictedMember(cartesianProduct.get(idxProduct), usedDimensions);
			}
		}
	},
	addDimensionsUsedBySorting:function(queryModel, usedDimensions)
	{
			let sortingManager = queryModel.getSortingManager();
		let sortingOperations = sortingManager.getSortingOperations();
		let size = sortingOperations.size();
		for (let i = 0; i < size; i++)
		{
			let genericSorting = sortingOperations.get(i);
			let sortingType = genericSorting.getSortingType();
			if (sortingType === oFF.SortType.MEASURE || sortingType === oFF.SortType.DATA_CELL_VALUE || genericSorting.getOlapComponentType().isTypeOf(oFF.OlapComponentType.DIMENSION_SORTING))
			{
				let dimension = sortingOperations.get(i).getDimension();
				if (oFF.notNull(dimension))
				{
					oFF.DimensionUsageAnalyzer2._addNotNull(usedDimensions, dimension.getName());
				}
			}
		}
	},
	addDimensionsUsedBySpatialClustering:function(queryModel, usedDimensions)
	{
			let spatialClusterSettings = queryModel.getSpatialClusterSettings();
		if (oFF.notNull(spatialClusterSettings) && spatialClusterSettings.isActive())
		{
			let clusterField = spatialClusterSettings.getClusterField();
			if (oFF.notNull(clusterField) && clusterField.getDimension() !== null)
			{
				oFF.DimensionUsageAnalyzer2._addNotNull(usedDimensions, clusterField.getDimension().getName());
			}
		}
	},
	addDimensionsUsedByVariables:function(queryModel, usedDimensions)
	{
			let variables = queryModel.getVariables();
		let sizeVar = variables.size();
		for (let idxVar = 0; idxVar < sizeVar; idxVar++)
		{
			let curVar = variables.get(idxVar);
			if (curVar.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
			{
				let dimMemberVar = curVar;
				oFF.DimensionUsageAnalyzer2._addNotNull(usedDimensions, dimMemberVar.getDimension().getName());
				let runtimeReferences = dimMemberVar.getRuntimeReferences();
				for (let i = 0; i < runtimeReferences.size(); i++)
				{
					oFF.DimensionUsageAnalyzer2._addNotNull(usedDimensions, runtimeReferences.get(i));
				}
				if (curVar.getVariableType() === oFF.VariableType.HIERARCHY_NAME_VARIABLE)
				{
					oFF.DimensionUsageAnalyzer2._addNotNull(usedDimensions, curVar.getHierarchyNameDimension().getName());
				}
			}
		}
	},
	addDimensionsUsedInCartesianProduct:function(cartesianProduct, dimensions)
	{
			let size = cartesianProduct.size();
		for (let i = 0; i < size; i++)
		{
			oFF.DimensionUsageAnalyzer2._addNotNull(dimensions, cartesianProduct.getCartesianChild(i).getDimensionName());
		}
	},
	addDimensionsUsedInComplexContainer:function(complexSelectionRoot, usedDimensions)
	{
			let componentType = complexSelectionRoot.getComponentType();
		if (componentType === oFF.FilterComponentType.OPERATION)
		{
			oFF.DimensionUsageAnalyzer2._addNotNull(usedDimensions, complexSelectionRoot.getDimensionName());
		}
		else if (componentType === oFF.FilterComponentType.CARTESIAN_PRODUCT)
		{
			oFF.DimensionUsageAnalyzer2.addDimensionsUsedInCartesianProduct(complexSelectionRoot, usedDimensions);
		}
		else if (componentType === oFF.FilterComponentType.CARTESIAN_LIST)
		{
			oFF.DimensionUsageAnalyzer2._addNotNull(usedDimensions, complexSelectionRoot.getDimensionName());
		}
		else if (componentType === oFF.FilterComponentType.FILTER_ACROSS_MODELS)
		{
			oFF.DimensionUsageAnalyzer2.addDimensionsUsedInFilterAcrossModel(complexSelectionRoot, usedDimensions);
		}
		else if (componentType.isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA))
		{
			let filterAlgebra = complexSelectionRoot;
			let filterSize = filterAlgebra.size();
			for (let i = 0; i < filterSize; i++)
			{
				oFF.DimensionUsageAnalyzer2.addDimensionsUsedInComplexContainer(filterAlgebra.get(i), usedDimensions);
			}
		}
		else if (componentType.isTypeOf(oFF.FilterComponentType.FILTER_TIME_RANGE))
		{
			oFF.DimensionUsageAnalyzer2._addNotNull(usedDimensions, complexSelectionRoot.getTimeDimensionName());
		}
	},
	addDimensionsUsedInConditions:function(queryModel, usedDimensions)
	{
			let conditionManager = queryModel.getConditionManager();
		if (oFF.isNull(conditionManager))
		{
			return;
		}
		for (let conditionsIndex = 0; conditionsIndex < conditionManager.size(); conditionsIndex++)
		{
			let condition = conditionManager.get(conditionsIndex);
			let evaluationDimensions = condition.getEvaluationDimensions();
			if (oFF.XCollectionUtils.hasElements(evaluationDimensions))
			{
				let numberOfEvaluationDimensions = evaluationDimensions.size();
				for (let dimensionIndex = 0; dimensionIndex < numberOfEvaluationDimensions; dimensionIndex++)
				{
					let dimension = evaluationDimensions.get(dimensionIndex);
					oFF.DimensionUsageAnalyzer2._addNotNull(usedDimensions, dimension.getName());
				}
			}
		}
	},
	addDimensionsUsedInContainer:function(container, usedDimensions)
	{
			let dimensions = oFF.notNull(usedDimensions) ? usedDimensions : oFF.XHashSetOfString.create();
		if (oFF.isNull(container))
		{
			return dimensions;
		}
		let cartesianProduct = container.getCartesianProduct();
		let complexSelectionRoot = container.getComplexRoot();
		if (oFF.notNull(cartesianProduct))
		{
			oFF.DimensionUsageAnalyzer2.addDimensionsUsedInCartesianProduct(cartesianProduct, dimensions);
		}
		else if (oFF.notNull(complexSelectionRoot))
		{
			oFF.DimensionUsageAnalyzer2.addDimensionsUsedInComplexContainer(complexSelectionRoot, dimensions);
		}
		return dimensions;
	},
	addDimensionsUsedInDrillNavigations:function(queryModel, usedDimensions)
	{
			let drillOperations = queryModel.getDrillManager().getDrillOperations();
		let size = drillOperations.size();
		for (let i = 0; i < size; i++)
		{
			let targetDimension = drillOperations.get(i).getTargetDimension();
			if (oFF.notNull(targetDimension))
			{
				oFF.DimensionUsageAnalyzer2._addNotNull(usedDimensions, targetDimension.getName());
			}
		}
	},
	addDimensionsUsedInExceptions:function(queryModel, usedDimensions)
	{
			let exceptionManager = queryModel.getExceptionManager();
		let sizeEx = exceptionManager.size();
		for (let idxEx = 0; idxEx < sizeEx; idxEx++)
		{
			let exception = exceptionManager.get(idxEx);
			let measure = exception.getMeasure();
			if (oFF.notNull(measure))
			{
				oFF.DimensionUsageAnalyzer2._addNotNull(usedDimensions, measure.getDimension().getName());
			}
			let structure = exception.getStructure();
			if (oFF.notNull(structure))
			{
				oFF.DimensionUsageAnalyzer2._addNotNull(usedDimensions, structure.getDimension().getName());
			}
			let evaluates = exception.getEvaluates();
			let sizeEva = evaluates.size();
			for (let idxEva = 0; idxEva < sizeEva; idxEva++)
			{
				oFF.DimensionUsageAnalyzer2._addNotNull(usedDimensions, evaluates.get(idxEva).getDimension().getName());
			}
		}
	},
	addDimensionsUsedInFilterAcrossModel:function(filterAcrossModel, usedDimensions)
	{
			let famContext = filterAcrossModel.getContext();
		if (oFF.notNull(famContext))
		{
			let famTargetQm = famContext.getQueryModel();
			if (oFF.notNull(famTargetQm))
			{
				usedDimensions.addAll(oFF.QFilterAcrossModelsLinkUtil.getAllDimensionNamesForContext(filterAcrossModel.getLinks(), famTargetQm));
			}
		}
	},
	addDimensionsUsedInFilters:function(queryModel, usedDimensions)
	{
			let filter = queryModel.getFilter();
		if (filter.isFixedFilterInitialized())
		{
			oFF.DimensionUsageAnalyzer2.addDimensionsUsedInContainer(filter.getFixedFilter(), usedDimensions);
		}
		if (filter.isDynamicFilterInitialized())
		{
			oFF.DimensionUsageAnalyzer2.addDimensionsUsedInContainer(filter.getDynamicFilter(), usedDimensions);
		}
		usedDimensions.addAll(oFF.DimensionUsageAnalyzer2.getDimensionsUsedInLinkedFilters(queryModel));
		if (filter.isVisibilityFilterInitialized())
		{
			oFF.DimensionUsageAnalyzer2.addDimensionsUsedInContainer(filter.getVisibilityFilter(), usedDimensions);
		}
		let layeredVisibilityFilters = filter.getLinkedVisibilityFilters().getIterator();
		while (layeredVisibilityFilters.hasNext())
		{
			oFF.DimensionUsageAnalyzer2.addDimensionsUsedInContainer(layeredVisibilityFilters.next(), usedDimensions);
		}
	},
	addDimensionsUsedInUniversalDisplayHierarchies:function(queryModel, usedDimensions)
	{
			let universalDisplayHierarchies = queryModel.getUniversalDisplayHierarchies();
		let hierarchies = universalDisplayHierarchies.getHierarchies();
		let loadedDimensions = queryModel.getLoadedDimensions();
		let size = hierarchies.size();
		for (let i = 0; i < size; i++)
		{
			let udh = hierarchies.get(i);
			let targetDimension = loadedDimensions.getDimensionByName(udh.getName());
			if (oFF.notNull(targetDimension))
			{
				oFF.DimensionUsageAnalyzer2._addNotNull(usedDimensions, targetDimension.getName());
				usedDimensions.addAll(udh.getDimensionNames());
			}
		}
	},
	addDimensionsWithResultStructureModified:function(queryModel, usedDimensions)
	{
			let freeAxis = queryModel.getFreeAxis();
		let dimCount = freeAxis.getDimensionCount();
		for (let idxEx = 0; idxEx < dimCount; idxEx++)
		{
			let dimension = freeAxis.get(idxEx);
			if (dimension.isTotalsModified())
			{
				oFF.DimensionUsageAnalyzer2._addNotNull(usedDimensions, dimension.getName());
			}
		}
	},
	addUsedDimensionFromFieldNames:function(queryModel, usedDimensions, fieldNames)
	{
			let fieldNamesIter = fieldNames.getIterator();
		while (fieldNamesIter.hasNext())
		{
			let fieldName = fieldNamesIter.next();
			let field = queryModel.getFieldByNameOrAlias(fieldName);
			if (oFF.notNull(field))
			{
				oFF.DimensionUsageAnalyzer2._addNotNull(usedDimensions, fieldName);
				oFF.DimensionUsageAnalyzer2._addNotNull(usedDimensions, field.getDimension().getName());
			}
		}
	},
	containsCalculatedDimension:function(queryModel, dimensions)
	{
			if (oFF.notNull(dimensions))
		{
			let dimensionIterator = dimensions.getIterator();
			while (dimensionIterator.hasNext())
			{
				let dimension = queryModel.getDimensionByName(dimensionIterator.next());
				if (oFF.notNull(dimension) && dimension.getDimensionType().isTypeOf(oFF.DimensionType.CALCULATED_DIMENSION))
				{
					return true;
				}
			}
		}
		return false;
	},
	filterContainsCalculatedDimension:function(filterExpression)
	{
			return oFF.DimensionUsageAnalyzer2.containsCalculatedDimension(filterExpression.getQueryModel(), oFF.DimensionUsageAnalyzer2.getDimensionsUsedInFilter(filterExpression));
	},
	getDimensionsUsedInFilter:function(filterExpression)
	{
			return oFF.DimensionUsageAnalyzer2.addDimensionsUsedInContainer(filterExpression, null);
	},
	getDimensionsUsedInLinkedFilters:function(queryModel)
	{
			let usedDimensions = oFF.XHashSetOfString.create();
		let linkedFilters = queryModel.getFilter().getLinkedFilters().getIterator();
		while (linkedFilters.hasNext())
		{
			oFF.DimensionUsageAnalyzer2.addDimensionsUsedInContainer(linkedFilters.next(), usedDimensions);
		}
		return usedDimensions;
	},
	hasComplexDimensionSelection:function(filterExpression)
	{
			return oFF.DimensionUsageAnalyzer2.getDimensionsUsedInFilter(filterExpression).size() > 1;
	},
	setupHeuristic:function(queryModel, usedDimensions)
	{
			oFF.DimensionUsageAnalyzer2.addDimensionsUsedInExceptions(queryModel, usedDimensions);
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedByVariables(queryModel, usedDimensions);
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedBySorting(queryModel, usedDimensions);
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedByMembers(usedDimensions, queryModel.getMeasureDimension());
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedByMembers(usedDimensions, queryModel.getNonMeasureDimension());
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedByMembers(usedDimensions, queryModel.getNonMeasureDimension2());
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedByMembers(usedDimensions, queryModel.getAccountDimension());
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedInDrillNavigations(queryModel, usedDimensions);
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedInFilters(queryModel, usedDimensions);
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedInUniversalDisplayHierarchies(queryModel, usedDimensions);
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedByLeveledHierarchies(queryModel, usedDimensions);
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedByFormulaCalculatedDimensions(queryModel, usedDimensions);
		oFF.DimensionUsageAnalyzer2.addDimensionsWithResultStructureModified(queryModel, usedDimensions);
	}
};

oFF.QInAExportFactory = function() {};
oFF.QInAExportFactory.prototype = new oFF.XObject();
oFF.QInAExportFactory.prototype._ff_c = "QInAExportFactory";

oFF.QInAExportFactory.s_factories = null;
oFF.QInAExportFactory.create = function(application, modelFormat, capabilities, memberReadModeContext)
{
	let formatToSerialize = modelFormat;
	if (formatToSerialize === oFF.QModelFormat.INA_REPOSITORY_DELTA && !application.getSession().hasFeature(oFF.FeatureToggleOlap.INA_REPOSITORY_DELTA))
	{
		formatToSerialize = formatToSerialize.getParent();
	}
	let factory = oFF.QInAExportFactory.s_factories.getByKey(formatToSerialize.getName());
	if (oFF.isNull(factory))
	{
		return null;
	}
	return factory.createExporter(application, formatToSerialize, capabilities, memberReadModeContext);
};
oFF.QInAExportFactory.createForBlending = function(application)
{
	return oFF.QInAExportFactory.create(application, oFF.QModelFormat.INA_METADATA_BLENDING, null, null);
};
oFF.QInAExportFactory.createForCloning = function(application, capabilities)
{
	return oFF.QInAExportFactory.create(application, oFF.QModelFormat.INA_CLONE, capabilities, null);
};
oFF.QInAExportFactory.createForData = function(application, capabilities)
{
	return oFF.QInAExportFactory.create(application, oFF.QModelFormat.INA_DATA, capabilities, oFF.QContextType.RESULT_SET);
};
oFF.QInAExportFactory.createForDataMergeProcessing = function(application, capabilities)
{
	return oFF.QInAExportFactory.create(application, oFF.QModelFormat.INA_DATA_MERGE_PROCESSING, capabilities, oFF.QContextType.RESULT_SET);
};
oFF.QInAExportFactory.createForFunctionalVariablesValueHelp = function(application, capabilities)
{
	return oFF.QInAExportFactory.create(application, oFF.QModelFormat.INA_FUNCTIONAL_VARIABLES_VALUE_HELP, capabilities, oFF.QContextType.SELECTOR);
};
oFF.QInAExportFactory.createForLayer = function(application, capabilities)
{
	return oFF.QInAExportFactory.create(application, oFF.QModelFormat.LAYER, capabilities, null);
};
oFF.QInAExportFactory.createForPersistedQueryData = function(application, capabilities)
{
	return oFF.QInAExportFactory.create(application, oFF.QModelFormat.INA_PERSISTED_QUERY_DATA, capabilities, oFF.QContextType.RESULT_SET);
};
oFF.QInAExportFactory.createForRepository = function(application, capabilities)
{
	return oFF.QInAExportFactory.create(application, oFF.QModelFormat.INA_REPOSITORY, capabilities, null);
};
oFF.QInAExportFactory.createForValueHelp = function(application, capabilities)
{
	return oFF.QInAExportFactory.create(application, oFF.QModelFormat.INA_VALUE_HELP, capabilities, oFF.QContextType.SELECTOR);
};
oFF.QInAExportFactory.put = function(modelFormat, factory)
{
	oFF.QInAExportFactory.s_factories.put(modelFormat.getName(), factory);
};
oFF.QInAExportFactory.staticSetup = function()
{
	oFF.QInAExportFactory.s_factories = oFF.XHashMapByString.create();
};

oFF.QInAImportFactory = function() {};
oFF.QInAImportFactory.prototype = new oFF.XObject();
oFF.QInAImportFactory.prototype._ff_c = "QInAImportFactory";

oFF.QInAImportFactory.s_factories = null;
oFF.QInAImportFactory.create = function(application, modelFormat, capabilities)
{
	let formatToDeSerialize = modelFormat;
	if (formatToDeSerialize === oFF.QModelFormat.INA_REPOSITORY_DELTA && !application.getSession().hasFeature(oFF.FeatureToggleOlap.INA_REPOSITORY_DELTA))
	{
		formatToDeSerialize = formatToDeSerialize.getParent();
	}
	let factory = oFF.QInAImportFactory.s_factories.getByKey(formatToDeSerialize.getName());
	if (oFF.isNull(factory))
	{
		return null;
	}
	return factory.createImporter(application, formatToDeSerialize, capabilities);
};
oFF.QInAImportFactory.createForCloning = function(application, capabilities)
{
	return oFF.QInAImportFactory.create(application, oFF.QModelFormat.INA_CLONE, capabilities);
};
oFF.QInAImportFactory.createForData = function(application, capabilities)
{
	return oFF.QInAImportFactory.create(application, oFF.QModelFormat.INA_DATA, capabilities);
};
oFF.QInAImportFactory.createForDataReinit = function(application, capabilities)
{
	return oFF.QInAImportFactory.create(application, oFF.QModelFormat.INA_DATA_REINIT, capabilities);
};
oFF.QInAImportFactory.createForLayer = function(application, capabilities)
{
	return oFF.QInAImportFactory.create(application, oFF.QModelFormat.LAYER, capabilities);
};
oFF.QInAImportFactory.createForMetadata = function(application, capabilities)
{
	return oFF.QInAImportFactory.create(application, oFF.QModelFormat.INA_METADATA, capabilities);
};
oFF.QInAImportFactory.createForMetadataCore = function(application, capabilities)
{
	return oFF.QInAImportFactory.create(application, oFF.QModelFormat.INA_METADATA_CORE, capabilities);
};
oFF.QInAImportFactory.createForRepository = function(application, capabilities)
{
	return oFF.QInAImportFactory.create(application, oFF.QModelFormat.INA_REPOSITORY, capabilities);
};
oFF.QInAImportFactory.createWithQueryManagerCapabilities = function(application, modelFormat, queryManager)
{
	let factory = oFF.QInAImportFactory.s_factories.getByKey(modelFormat.getName());
	if (oFF.isNull(factory))
	{
		return null;
	}
	return factory.createImporterWithQueryManagerCapabilities(application, modelFormat, queryManager);
};
oFF.QInAImportFactory.put = function(modelFormat, factory)
{
	oFF.QInAImportFactory.s_factories.put(modelFormat.getName(), factory);
};
oFF.QInAImportFactory.staticSetup = function()
{
	oFF.QInAImportFactory.s_factories = oFF.XHashMapByString.create();
};

oFF.FieldContainerPresentationHelper = function() {};
oFF.FieldContainerPresentationHelper.prototype = new oFF.XObject();
oFF.FieldContainerPresentationHelper.prototype._ff_c = "FieldContainerPresentationHelper";

oFF.FieldContainerPresentationHelper.applyDefaultClientTextFields = function(dimension)
{
	if (dimension.getFieldLayoutType() === oFF.FieldLayoutType.ATTRIBUTE_BASED)
	{
		let mainAttribute = dimension.getMainAttribute();
		if (oFF.notNull(mainAttribute))
		{
			dimension.setClientDefaultTextField(mainAttribute.getDefaultResultSetTextField());
		}
	}
	else
	{
		dimension.setClientDefaultTextField(dimension.getDefaultResultSetTextField());
	}
};
oFF.FieldContainerPresentationHelper.createFromFieldContainer = function(fieldContainer)
{
	let instance = new oFF.FieldContainerPresentationHelper();
	instance.setupExt(fieldContainer);
	return instance;
};
oFF.FieldContainerPresentationHelper.createFromSingleField = function(field)
{
	let instance = new oFF.FieldContainerPresentationHelper();
	instance.setupExtFromField(field);
	return instance;
};
oFF.FieldContainerPresentationHelper.enforceKeyDisplayForDimension = function(dimension, keyDisplay, includeAttributes)
{
	oFF.FieldContainerPresentationHelper.setDefaultKeyDisplayForFieldContainer(dimension, keyDisplay);
	if (includeAttributes)
	{
		let attributes = dimension.getAttributes();
		for (let i = 0; i < attributes.size(); i++)
		{
			let attribute = attributes.getAttributeAt(i);
			oFF.FieldContainerPresentationHelper.setDefaultKeyDisplayForFieldContainer(attribute, keyDisplay);
		}
	}
	else
	{
		let mainAttribute = dimension.getMainAttribute();
		if (oFF.notNull(mainAttribute))
		{
			oFF.FieldContainerPresentationHelper.setDefaultKeyDisplayForFieldContainer(mainAttribute, keyDisplay);
		}
	}
};
oFF.FieldContainerPresentationHelper.filterOnSameAttribute = function(fieldContainer)
{
	return (fi) => {
		return fi.getAttribute() === fieldContainer || fi.getAttribute() === fieldContainer.getDimension().getMainAttribute() && fieldContainer === fieldContainer.getDimension();
	};
};
oFF.FieldContainerPresentationHelper.filterOnType = function(presentationType)
{
	return (fi) => {
		return fi.getPresentationType().isTypeOf(presentationType);
	};
};
oFF.FieldContainerPresentationHelper.flattenKeyView = function(keyView)
{
	let result = keyView;
	if (keyView === oFF.PresentationType.HIERARCHY_DISPLAY_KEY)
	{
		result = oFF.PresentationType.DISPLAY_KEY;
	}
	else if (keyView === oFF.PresentationType.HIERARCHY_KEY)
	{
		result = oFF.PresentationType.KEY;
	}
	return result;
};
oFF.FieldContainerPresentationHelper.getFallbackKeyField = function(fieldContainer)
{
	let fallbackField = oFF.XStream.of(fieldContainer.getDefaultResultSetFields()).find(oFF.FieldContainerPresentationHelper.filterOnType(oFF.PresentationType.DISPLAY_KEY_MIXED_COMPOUNDMENT)).orElse(null);
	if (oFF.isNull(fallbackField))
	{
		fallbackField = oFF.XStream.of(fieldContainer.getDefaultResultSetFields()).find(oFF.FieldContainerPresentationHelper.filterOnType(oFF.PresentationType.DISPLAY_KEY_NOT_COMPOUND)).orElse(null);
	}
	if (oFF.isNull(fallbackField))
	{
		fallbackField = oFF.XStream.of(fieldContainer.getDefaultResultSetFields()).find(oFF.FieldContainerPresentationHelper.filterOnType(oFF.PresentationType.DISPLAY_KEY)).orElse(null);
	}
	if (oFF.isNull(fallbackField))
	{
		fallbackField = oFF.XStream.of(fieldContainer.getDefaultResultSetFields()).find(oFF.FieldContainerPresentationHelper.filterOnType(oFF.PresentationType.KEY_NOT_COMPOUND)).orElse(null);
	}
	if (oFF.isNull(fallbackField))
	{
		fallbackField = oFF.XStream.of(fieldContainer.getDefaultResultSetFields()).find(oFF.FieldContainerPresentationHelper.filterOnType(oFF.PresentationType.ABSTRACT_KEY)).orElse(null);
	}
	let keyField = fieldContainer.getKeyField();
	if (oFF.notNull(keyField) && oFF.notNull(fallbackField) && fallbackField !== keyField && fallbackField.getPresentationType() === oFF.FieldContainerPresentationHelper.flattenKeyView(keyField.getPresentationType()))
	{
		fallbackField = null;
	}
	if (oFF.isNull(fallbackField))
	{
		fallbackField = fieldContainer.getFieldByPresentationType(oFF.PresentationType.DISPLAY_KEY_MIXED_COMPOUNDMENT);
	}
	if (oFF.isNull(fallbackField))
	{
		fallbackField = fieldContainer.getFieldByPresentationType(oFF.PresentationType.DISPLAY_KEY_NOT_COMPOUND);
	}
	if (oFF.isNull(fallbackField))
	{
		fallbackField = fieldContainer.getDisplayKeyField();
	}
	if (oFF.isNull(fallbackField))
	{
		fallbackField = fieldContainer.getFieldByPresentationType(oFF.PresentationType.KEY_NOT_COMPOUND);
	}
	if (oFF.isNull(fallbackField))
	{
		fallbackField = fieldContainer.getKeyField();
	}
	return fallbackField;
};
oFF.FieldContainerPresentationHelper.getFallbackTextField = function(fieldContainer)
{
	let fallbackField = fieldContainer.getDefaultResultSetTextField();
	if (oFF.isNull(fallbackField))
	{
		fallbackField = oFF.XStream.of(fieldContainer.getDefaultResultSetFields()).find(oFF.FieldContainerPresentationHelper.filterOnType(oFF.PresentationType.ABSTRACT_TEXT)).orElse(null);
	}
	if (oFF.isNull(fallbackField))
	{
		fallbackField = fieldContainer.getTextField();
	}
	return fallbackField;
};
oFF.FieldContainerPresentationHelper.getNonMainAttributeRsFields = function(dimension)
{
	let mainAttribute = dimension.getMainAttribute();
	return oFF.XStream.of(dimension.getResultSetFields()).filter((fi) => {
		return !oFF.FieldContainerPresentationHelper.isMainAttributeField(fi, mainAttribute, dimension);
	}).collect(oFF.XStreamCollector.toList());
};
oFF.FieldContainerPresentationHelper.getResultSetTextField = function(fieldContainer)
{
	return oFF.XStream.of(fieldContainer.getResultSetFields()).filter(oFF.FieldContainerPresentationHelper.filterOnSameAttribute(fieldContainer)).find(oFF.FieldContainerPresentationHelper.filterOnType(oFF.PresentationType.ABSTRACT_TEXT)).orElse(fieldContainer === fieldContainer.getDimension().getMainAttribute() ? fieldContainer.getDimension().getClientDefaultTextField() : fieldContainer.getClientDefaultTextField());
};
oFF.FieldContainerPresentationHelper.isMainAttributeField = function(field, mainAttribute, dimension)
{
	if (oFF.notNull(mainAttribute) && field.getAttribute() !== null)
	{
		return mainAttribute === field.getAttribute();
	}
	return field === dimension.getKeyField() || field === dimension.getFlatKeyField() || field === dimension.getHierarchyKeyField() || field === dimension.getDisplayKeyField() || field === dimension.getHierarchyDisplayKeyField() || field === dimension.getTextField() || field === dimension.getHierarchyTextField();
};
oFF.FieldContainerPresentationHelper.refreshDisplayAttributesForDimension = function(dimension)
{
	oFF.FieldContainerPresentationHelper.refreshDisplayAttributesForDimensionExt(dimension, null);
};
oFF.FieldContainerPresentationHelper.refreshDisplayAttributesForDimensionExt = function(dimension, displayAs)
{
	let selectPresentationHelper;
	let fieldLayoutType = dimension.getFieldLayoutType();
	let mainAttribute = dimension.getMainAttribute();
	let defaultKeyField;
	let defaultTextField;
	if (oFF.isNull(mainAttribute))
	{
		selectPresentationHelper = oFF.FieldContainerPresentationHelper.createFromFieldContainer(dimension);
		selectPresentationHelper.setKeyView(dimension.getClientDefaultKeyField().getPresentationType());
		defaultKeyField = dimension.getClientDefaultKeyField();
		defaultTextField = oFF.FieldContainerPresentationHelper.getResultSetTextField(dimension);
	}
	else
	{
		selectPresentationHelper = oFF.FieldContainerPresentationHelper.createFromFieldContainer(mainAttribute);
		let mainRsAttribute = oFF.XStream.of(dimension.getResultSetAttributes()).filter((a) => {
			return oFF.XString.isEqual(a.getName(), mainAttribute.getName());
		}).findAny();
		mainRsAttribute.ifPresent((att) => {
			selectPresentationHelper.applyResultSetSettings(att);
		});
		defaultKeyField = dimension.getClientDefaultKeyField();
		defaultTextField = oFF.FieldContainerPresentationHelper.getResultSetTextField(mainAttribute);
	}
	if (oFF.notNull(defaultKeyField))
	{
		selectPresentationHelper.setKeyView(defaultKeyField.getPresentationType());
	}
	if (oFF.notNull(defaultTextField))
	{
		selectPresentationHelper.setTextView(defaultTextField.getPresentationType());
	}
	if (oFF.notNull(displayAs) && selectPresentationHelper.getAvailableDisplayAs().contains(displayAs))
	{
		selectPresentationHelper.setDisplayAs(displayAs);
	}
	let queryModel = dimension.getQueryModel();
	queryModel.getConvenienceCommands().clearAllAttributeFields(dimension.getName(), dimension.getName(), oFF.QContextType.RESULT_SET);
	selectPresentationHelper.applyToQueryModel(queryModel, dimension.getName());
	if (fieldLayoutType === oFF.FieldLayoutType.FIELD_BASED)
	{
		selectPresentationHelper.applyMainAttributeForFieldLayout(dimension);
	}
};
oFF.FieldContainerPresentationHelper.setDefaultKeyDisplayForFieldContainer = function(fieldContainer, keyDisplay)
{
	let field = null;
	if (keyDisplay === oFF.FieldContainerKeyDisplay.INTERNAL_KEY)
	{
		field = fieldContainer.getKeyField();
	}
	if (keyDisplay === oFF.FieldContainerKeyDisplay.EXTERNAL_KEY)
	{
		field = fieldContainer.getMixedDisplayKeyField();
		if (oFF.isNull(field))
		{
			field = fieldContainer.getDisplayKeyField();
		}
		if (oFF.isNull(field))
		{
			field = fieldContainer.getKeyField();
		}
	}
	if (keyDisplay === oFF.FieldContainerKeyDisplay.COMPOUNDED_KEY)
	{
		field = fieldContainer.getDisplayKeyField();
		if (oFF.isNull(field))
		{
			field = fieldContainer.getKeyField();
		}
	}
	if (keyDisplay === oFF.FieldContainerKeyDisplay.NON_COMPOUNDED_KEY)
	{
		field = fieldContainer.getFieldByPresentationType(oFF.PresentationType.DISPLAY_KEY_NOT_COMPOUND);
		if (oFF.isNull(field))
		{
			field = fieldContainer.getFieldByPresentationType(oFF.PresentationType.KEY_NOT_COMPOUND);
		}
	}
	if (oFF.notNull(field))
	{
		fieldContainer.setClientDefaultKeyField(field);
	}
};
oFF.FieldContainerPresentationHelper.prototype.m_componentName = null;
oFF.FieldContainerPresentationHelper.prototype.m_componentText = null;
oFF.FieldContainerPresentationHelper.prototype.m_displayKey = false;
oFF.FieldContainerPresentationHelper.prototype.m_displayKeyBeforeText = false;
oFF.FieldContainerPresentationHelper.prototype.m_displayText = false;
oFF.FieldContainerPresentationHelper.prototype.m_displayUseDimensionSetting = false;
oFF.FieldContainerPresentationHelper.prototype.m_fieldBased = false;
oFF.FieldContainerPresentationHelper.prototype.m_hierarchicalKeyPresentationAsymmetry = false;
oFF.FieldContainerPresentationHelper.prototype.m_hierarchyChanged = false;
oFF.FieldContainerPresentationHelper.prototype.m_keyView = null;
oFF.FieldContainerPresentationHelper.prototype.m_keyViewDefault = null;
oFF.FieldContainerPresentationHelper.prototype.m_keyViewsAvailable = null;
oFF.FieldContainerPresentationHelper.prototype.m_mayDisplayKey = false;
oFF.FieldContainerPresentationHelper.prototype.m_mayDisplayText = false;
oFF.FieldContainerPresentationHelper.prototype.m_textView = null;
oFF.FieldContainerPresentationHelper.prototype.m_textViewDefault = null;
oFF.FieldContainerPresentationHelper.prototype.m_textViewsAvailable = null;
oFF.FieldContainerPresentationHelper.prototype.addAttributeField = function(queryModel, convenienceCommands, dimensionName, componentName, presentationType1)
{
	let field;
	if (this.worksWithAttributes(queryModel, dimensionName))
	{
		field = convenienceCommands.addAttributeField(null, dimensionName, componentName, presentationType1, null, oFF.QContextType.RESULT_SET);
	}
	else
	{
		field = convenienceCommands.addFieldToResultSetExt(null, dimensionName, presentationType1, null);
	}
	return field;
};
oFF.FieldContainerPresentationHelper.prototype.applyMainAttributeForFieldLayout = function(dimension)
{
	let mainAttribute = dimension.getMainAttribute();
	if (oFF.notNull(mainAttribute))
	{
		dimension.setFieldLayoutType(oFF.FieldLayoutType.FIELD_BASED);
		let mainAttributeFields = mainAttribute.getResultSetFields();
		let nmarfs = oFF.FieldContainerPresentationHelper.getNonMainAttributeRsFields(dimension);
		let convenienceCommands = dimension.getQueryModel().getConvenienceCommands();
		convenienceCommands.clearAllResultSetFields(dimension.getName());
		let i;
		for (i = 0; i < mainAttributeFields.size(); i++)
		{
			convenienceCommands.addFieldToResultSetExt(null, dimension.getName(), null, mainAttributeFields.get(i).getName());
		}
		for (i = 0; i < nmarfs.size(); i++)
		{
			convenienceCommands.addFieldToResultSetExt(null, dimension.getName(), null, nmarfs.get(i).getName());
		}
	}
};
oFF.FieldContainerPresentationHelper.prototype.applyResultSetSettings = function(resultSetAttribute)
{
	let i;
	let rsf;
	this.m_displayKey = false;
	this.m_displayText = false;
	let dimension = resultSetAttribute.getDimension();
	let hierarchyDisplayKeyField = dimension.getHierarchyDisplayKeyField();
	let flatDisplayKeyField = dimension.getFlatDisplayKeyField();
	let hierarchyKeyField = dimension.getHierarchyKeyField();
	let flatKeyField = dimension.getFlatKeyField();
	let hierarchyActive = dimension.isHierarchyActive();
	let resultSetFields = resultSetAttribute.getResultSetFields();
	let internalKeyFields = oFF.XList.create();
	internalKeyFields.add(flatKeyField);
	internalKeyFields.add(hierarchyKeyField);
	let externalKeyFields = oFF.XList.create();
	externalKeyFields.add(flatDisplayKeyField);
	externalKeyFields.add(hierarchyDisplayKeyField);
	let mixedKeyField = resultSetAttribute.getMixedDisplayKeyField();
	let nonTextFieldsWithPotentialTextPresentation = oFF.XList.create();
	nonTextFieldsWithPotentialTextPresentation.addAll(internalKeyFields);
	nonTextFieldsWithPotentialTextPresentation.addAll(externalKeyFields);
	nonTextFieldsWithPotentialTextPresentation.add(mixedKeyField);
	nonTextFieldsWithPotentialTextPresentation.add(resultSetAttribute.getHierarchyNavigationField());
	for (i = 0; i < resultSetFields.size(); i++)
	{
		rsf = resultSetFields.get(i);
		let presentationType = rsf.getPresentationType();
		let obtainability = rsf.getObtainability();
		if (oFF.notNull(obtainability) && obtainability !== oFF.ObtainabilityType.ALWAYS)
		{
			continue;
		}
		if (presentationType.isTypeOf(oFF.PresentationType.ABSTRACT_TEXT) && !nonTextFieldsWithPotentialTextPresentation.contains(rsf))
		{
			if (this.m_displayKey)
			{
				this.m_displayKeyBeforeText = true;
				this.m_displayText = true;
				this.m_textView = presentationType;
				return;
			}
			if (!this.m_displayText)
			{
				this.m_displayText = true;
				this.m_textView = presentationType;
			}
		}
		else if (presentationType.isTypeOf(oFF.PresentationType.ABSTRACT_KEY) || internalKeyFields.contains(rsf) || externalKeyFields.contains(rsf) || mixedKeyField === rsf)
		{
			if (hierarchyActive && (rsf === flatKeyField && flatKeyField !== hierarchyKeyField || rsf === flatDisplayKeyField && hierarchyDisplayKeyField !== flatDisplayKeyField) || !hierarchyActive && (rsf === hierarchyDisplayKeyField && hierarchyDisplayKeyField !== flatDisplayKeyField || rsf === hierarchyKeyField && flatKeyField !== hierarchyKeyField))
			{
				this.m_hierarchyChanged = true;
			}
			if (!presentationType.isTypeOf(oFF.PresentationType.ABSTRACT_KEY))
			{
				if (rsf === mixedKeyField)
				{
					presentationType = oFF.PresentationType.DISPLAY_KEY_MIXED_COMPOUNDMENT;
				}
				else if (externalKeyFields.contains(rsf))
				{
					presentationType = oFF.PresentationType.DISPLAY_KEY;
				}
				else if (internalKeyFields.contains(rsf))
				{
					presentationType = oFF.PresentationType.KEY;
				}
			}
			if (this.m_displayText)
			{
				this.m_displayKeyBeforeText = false;
				this.m_displayKey = true;
				this.m_keyView = oFF.FieldContainerPresentationHelper.flattenKeyView(presentationType);
				return;
			}
			if (!this.m_displayKey)
			{
				this.m_displayKey = true;
				this.m_keyView = oFF.FieldContainerPresentationHelper.flattenKeyView(presentationType);
			}
		}
	}
	if (!oFF.XCollectionUtils.hasElements(resultSetFields) && !oFF.XCollectionUtils.hasElements(dimension.getResultSetAttributes()) && dimension.getMainAttribute() === resultSetAttribute)
	{
		resultSetFields = dimension.getResultSetFields();
		for (i = 0; i < resultSetFields.size(); i++)
		{
			rsf = resultSetFields.get(i);
			if (rsf === resultSetAttribute.getFlatTextField() || rsf === resultSetAttribute.getHierarchyTextField())
			{
				if (this.m_displayKey)
				{
					this.m_displayKeyBeforeText = true;
					this.m_displayText = true;
					return;
				}
				if (!this.m_displayText)
				{
					this.m_displayText = true;
					this.m_textView = rsf.getPresentationType();
				}
			}
			else if (rsf === resultSetAttribute.getFlatKeyField() || rsf === resultSetAttribute.getHierarchyKeyField() || rsf === resultSetAttribute.getFlatDisplayKeyField() || rsf === resultSetAttribute.getHierarchyDisplayKeyField())
			{
				if (this.m_displayText)
				{
					this.m_displayKeyBeforeText = false;
					this.m_displayKey = true;
					return;
				}
				if (!this.m_displayKey)
				{
					this.m_displayKey = true;
					this.m_keyView = rsf.getPresentationType();
				}
			}
		}
	}
};
oFF.FieldContainerPresentationHelper.prototype.applyToQueryModel = function(queryModel, dimensionName)
{
	let convenienceCommands = queryModel.getConvenienceCommands();
	let nmarfs = null;
	if (this.m_displayKey || this.m_displayText)
	{
		if (this.worksWithAttributes(queryModel, dimensionName))
		{
			if (!oFF.XStream.of(queryModel.getDimensionByName(dimensionName).getResultSetAttributes()).anyMatch((rsa) => {
				return oFF.XString.isEqual(rsa.getName(), this.getComponentName());
			}))
			{
				convenienceCommands.addAttributeToResultSet(dimensionName, this.getComponentName());
			}
			convenienceCommands.clearAllAttributeFields(dimensionName, this.getComponentName(), oFF.QContextType.RESULT_SET);
		}
		else
		{
			nmarfs = oFF.FieldContainerPresentationHelper.getNonMainAttributeRsFields(queryModel.getDimensionByName(dimensionName));
			convenienceCommands.clearAllFields(dimensionName, oFF.QContextType.RESULT_SET);
		}
	}
	let presentationType1 = null;
	let presentationType2 = null;
	if (this.m_displayKey && this.m_displayText && !this.m_displayKeyBeforeText)
	{
		presentationType1 = this.getTextViewCorrected();
		presentationType2 = this.getKeyViewCorrected();
	}
	else if (this.m_displayKey && this.m_displayText)
	{
		presentationType1 = this.getKeyViewCorrected();
		presentationType2 = this.getTextViewCorrected();
	}
	else if (this.m_displayKey)
	{
		presentationType1 = this.getKeyViewCorrected();
	}
	else if (this.m_displayText)
	{
		presentationType1 = this.getTextViewCorrected();
	}
	if (oFF.notNull(presentationType1))
	{
		let field1 = this.addAttributeField(queryModel, convenienceCommands, dimensionName, this.getComponentName(), presentationType1);
		if (oFF.isNull(field1) && oFF.isNull(presentationType2) && this.m_displayText)
		{
			presentationType1 = this.getKeyViewCorrected();
			field1 = this.addAttributeField(queryModel, convenienceCommands, dimensionName, this.getComponentName(), presentationType1);
		}
		if (oFF.notNull(field1))
		{
			field1.setObtainability(oFF.ObtainabilityType.ALWAYS);
			this.submitDefaultPresentation(field1, presentationType1);
		}
	}
	if (oFF.notNull(presentationType2))
	{
		let field2 = this.addAttributeField(queryModel, convenienceCommands, dimensionName, this.getComponentName(), presentationType2);
		if (oFF.notNull(field2))
		{
			field2.setObtainability(oFF.ObtainabilityType.ALWAYS);
			this.submitDefaultPresentation(field2, presentationType2);
		}
	}
	if (oFF.XCollectionUtils.hasElements(nmarfs))
	{
		for (let i = 0; i < nmarfs.size(); i++)
		{
			convenienceCommands.addFieldToResultSetExt(null, dimensionName, null, nmarfs.get(i).getName());
		}
	}
	if (!this.m_displayKey || this.getKeyViewCorrected() !== oFF.PresentationType.ACTIVE_DISPLAY_KEY && this.m_keyView !== oFF.PresentationType.DISPLAY_KEY && this.m_keyView !== oFF.PresentationType.HIERARCHY_DISPLAY_KEY && this.m_keyView !== oFF.PresentationType.DISPLAY_KEY_NOT_COMPOUND && this.m_keyView !== oFF.PresentationType.DISPLAY_KEY_MIXED_COMPOUNDMENT)
	{
		this.ensureDisplayKeyField(queryModel, dimensionName);
	}
	this.ensureHierarchyNavigationField(queryModel, dimensionName);
	this.ensureSemanticFields(queryModel, dimensionName);
};
oFF.FieldContainerPresentationHelper.prototype.ensureDisplayKeyField = function(queryModel, dimensionName)
{
	let dimension = queryModel.getDimensionByName(dimensionName);
	if (oFF.notNull(dimension))
	{
		let attribute = dimension.getAttributeByName(this.getComponentName());
		let newField;
		let newRsField;
		if (this.getComponentName() !== null && oFF.notNull(attribute))
		{
			newField = attribute.getFieldByPresentationType(oFF.PresentationType.ACTIVE_DISPLAY_KEY);
			if (oFF.notNull(newField) && !attribute.getResultSetFields().contains(newField))
			{
				newRsField = queryModel.getConvenienceCommands().addAttributeField(null, dimensionName, this.getComponentName(), oFF.PresentationType.ACTIVE_DISPLAY_KEY, newField.getName(), oFF.QContextType.RESULT_SET);
				if (oFF.notNull(newRsField))
				{
					newRsField.setObtainability(oFF.ObtainabilityType.USER_INTERFACE);
				}
			}
		}
		else
		{
			newField = dimension.getFieldByPresentationType(oFF.PresentationType.ACTIVE_DISPLAY_KEY);
			if (oFF.notNull(newField) && !dimension.getResultSetFields().contains(newField))
			{
				newRsField = queryModel.getConvenienceCommands().addFieldToResultSetExt(null, dimensionName, oFF.PresentationType.ACTIVE_DISPLAY_KEY, newField.getName());
				if (oFF.notNull(newRsField))
				{
					newRsField.setObtainability(oFF.ObtainabilityType.USER_INTERFACE);
				}
			}
		}
	}
};
oFF.FieldContainerPresentationHelper.prototype.ensureHierarchyNavigationField = function(queryModel, dimensionName)
{
	let dimension = queryModel.getDimensionByName(dimensionName);
	if (oFF.notNull(dimension) && queryModel.getModelCapabilities().supportsSidPresentation() && dimension.isHierarchyActive())
	{
		let attribute = dimension.getAttributeByName(this.getComponentName());
		let newField;
		let newRsField;
		if (this.getComponentName() !== null && oFF.notNull(attribute))
		{
			newField = attribute.getHierarchyNavigationField();
			if (oFF.notNull(newField) && !attribute.getResultSetFields().contains(newField))
			{
				newRsField = queryModel.getConvenienceCommands().addAttributeField(null, dimensionName, this.getComponentName(), null, newField.getName(), oFF.QContextType.RESULT_SET);
				if (oFF.notNull(newRsField))
				{
					newRsField.setObtainability(oFF.ObtainabilityType.USER_INTERFACE);
				}
			}
		}
		else
		{
			newField = dimension.getHierarchyNavigationField();
			if (oFF.notNull(newField) && !dimension.getResultSetFields().contains(newField))
			{
				newRsField = queryModel.getConvenienceCommands().addFieldToResultSetExt(null, dimensionName, null, newField.getName());
				if (oFF.notNull(newRsField))
				{
					newRsField.setObtainability(oFF.ObtainabilityType.USER_INTERFACE);
				}
			}
		}
	}
};
oFF.FieldContainerPresentationHelper.prototype.ensureSemanticFields = function(queryModel, dimensionName)
{
	let dimension = queryModel.getDimensionByName(dimensionName);
	if (oFF.notNull(dimension))
	{
		let attribute = dimension.getAttributeByName(this.getComponentName());
		if (this.getComponentName() !== null && oFF.notNull(attribute))
		{
			oFF.XCollectionUtils.forEach(dimension.getFields(), (newAttrField) => {
				if (oFF.XStringUtils.isNotNullAndNotEmpty(newAttrField.getSemanticType()) && !attribute.getResultSetFields().contains(newAttrField) && !dimension.getResultSetFields().contains(newAttrField))
				{
					let newRsAttrField = queryModel.getConvenienceCommands().addAttributeField(null, dimensionName, this.getComponentName(), null, newAttrField.getName(), oFF.QContextType.RESULT_SET);
					if (oFF.notNull(newRsAttrField))
					{
						newRsAttrField.setObtainability(oFF.ObtainabilityType.USER_INTERFACE);
					}
				}
			});
		}
		else
		{
			oFF.XCollectionUtils.forEach(dimension.getFields(), (newField) => {
				if (oFF.XStringUtils.isNotNullAndNotEmpty(newField.getSemanticType()) && !dimension.getResultSetFields().contains(newField))
				{
					let newRsField = queryModel.getConvenienceCommands().addFieldToResultSetExt(null, dimensionName, null, newField.getName());
					if (oFF.notNull(newRsField))
					{
						newRsField.setObtainability(oFF.ObtainabilityType.USER_INTERFACE);
					}
				}
			});
		}
	}
};
oFF.FieldContainerPresentationHelper.prototype.getAvailableDisplayAs = function()
{
	let displayAs = oFF.XList.create();
	displayAs.add(oFF.FieldContainerDisplay.NO_DISPLAY);
	if (this.isMayDisplayKey())
	{
		displayAs.add(oFF.FieldContainerDisplay.KEY);
	}
	if (this.isMayDisplayText())
	{
		displayAs.add(oFF.FieldContainerDisplay.TEXT);
	}
	if (this.isMayDisplayText() && this.isMayDisplayKey())
	{
		displayAs.add(oFF.FieldContainerDisplay.KEY_AND_TEXT);
		displayAs.add(oFF.FieldContainerDisplay.TEXT_AND_KEY);
	}
	return displayAs;
};
oFF.FieldContainerPresentationHelper.prototype.getComponentName = function()
{
	return this.m_componentName;
};
oFF.FieldContainerPresentationHelper.prototype.getComponentText = function()
{
	return this.m_componentText;
};
oFF.FieldContainerPresentationHelper.prototype.getDisplayAs = function()
{
	if (this.m_displayText && this.m_displayKey && this.m_displayKeyBeforeText)
	{
		return oFF.FieldContainerDisplay.KEY_AND_TEXT;
	}
	if (this.m_displayText && this.m_displayKey)
	{
		return oFF.FieldContainerDisplay.TEXT_AND_KEY;
	}
	if (this.m_displayText)
	{
		return oFF.FieldContainerDisplay.TEXT;
	}
	if (this.m_displayKey)
	{
		return oFF.FieldContainerDisplay.KEY;
	}
	return oFF.FieldContainerDisplay.NO_DISPLAY;
};
oFF.FieldContainerPresentationHelper.prototype.getKeyDisplay = function()
{
	return this.mapKeyPresentation(this.m_keyView);
};
oFF.FieldContainerPresentationHelper.prototype.getKeyDisplayDefault = function()
{
	return this.mapKeyPresentation(this.m_keyViewDefault);
};
oFF.FieldContainerPresentationHelper.prototype.getKeyDisplaysAvailable = function()
{
	return this.m_hierarchicalKeyPresentationAsymmetry ? null : oFF.XStream.of(this.m_keyViewsAvailable).map((kv) => {
		return this.mapKeyPresentation(kv);
	}).collect(oFF.XStreamCollector.toList());
};
oFF.FieldContainerPresentationHelper.prototype.getKeyView = function()
{
	return this.m_keyView;
};
oFF.FieldContainerPresentationHelper.prototype.getKeyViewCorrected = function()
{
	let newKeyView = this.m_keyView;
	if (this.m_hierarchyChanged && this.m_hierarchicalKeyPresentationAsymmetry)
	{
		newKeyView = this.m_keyViewDefault;
	}
	if (!this.m_keyViewsAvailable.contains(newKeyView))
	{
		newKeyView = this.m_keyViewDefault;
	}
	if (newKeyView === oFF.PresentationType.HIERARCHY_KEY || newKeyView === oFF.PresentationType.KEY)
	{
		newKeyView = oFF.PresentationType.ACTIVE_KEY;
	}
	else if (newKeyView === oFF.PresentationType.HIERARCHY_DISPLAY_KEY || newKeyView === oFF.PresentationType.DISPLAY_KEY)
	{
		newKeyView = oFF.PresentationType.ACTIVE_DISPLAY_KEY;
	}
	return newKeyView;
};
oFF.FieldContainerPresentationHelper.prototype.getKeyViewDefault = function()
{
	return this.m_keyViewDefault;
};
oFF.FieldContainerPresentationHelper.prototype.getKeyViewsAvailable = function()
{
	return this.m_keyViewsAvailable;
};
oFF.FieldContainerPresentationHelper.prototype.getTextView = function()
{
	return this.m_textView;
};
oFF.FieldContainerPresentationHelper.prototype.getTextViewCorrected = function()
{
	if (this.m_textView === oFF.PresentationType.HIERARCHY_TEXT || this.m_textView === oFF.PresentationType.TEXT)
	{
		return oFF.PresentationType.ACTIVE_TEXT;
	}
	return this.m_textView;
};
oFF.FieldContainerPresentationHelper.prototype.getTextViewDefault = function()
{
	return this.m_textViewDefault;
};
oFF.FieldContainerPresentationHelper.prototype.getTextViewsAvailable = function()
{
	return this.m_textViewsAvailable;
};
oFF.FieldContainerPresentationHelper.prototype.isDisplayKey = function()
{
	return this.m_displayKey;
};
oFF.FieldContainerPresentationHelper.prototype.isDisplayKeyBeforeText = function()
{
	return this.m_displayKeyBeforeText;
};
oFF.FieldContainerPresentationHelper.prototype.isDisplayText = function()
{
	return this.m_displayText;
};
oFF.FieldContainerPresentationHelper.prototype.isDisplayUseDimensionSetting = function()
{
	return this.m_displayUseDimensionSetting;
};
oFF.FieldContainerPresentationHelper.prototype.isFieldBased = function()
{
	return this.m_fieldBased;
};
oFF.FieldContainerPresentationHelper.prototype.isMayDisplayKey = function()
{
	return this.m_mayDisplayKey;
};
oFF.FieldContainerPresentationHelper.prototype.isMayDisplayText = function()
{
	return this.m_mayDisplayText;
};
oFF.FieldContainerPresentationHelper.prototype.mapKeyPresentation = function(keyPresentation)
{
	let resultDisplay = oFF.FieldContainerKeyDisplay.EXTERNAL_KEY;
	if (keyPresentation === oFF.PresentationType.DISPLAY_KEY_MIXED_COMPOUNDMENT)
	{
		resultDisplay = oFF.FieldContainerKeyDisplay.EXTERNAL_KEY;
	}
	else if (keyPresentation === oFF.PresentationType.DISPLAY_KEY_NOT_COMPOUND || keyPresentation === oFF.PresentationType.KEY_NOT_COMPOUND)
	{
		resultDisplay = oFF.FieldContainerKeyDisplay.NON_COMPOUNDED_KEY;
	}
	else if (keyPresentation === oFF.PresentationType.DISPLAY_KEY || keyPresentation === oFF.PresentationType.HIERARCHY_DISPLAY_KEY)
	{
		if (this.m_keyViewsAvailable.contains(oFF.PresentationType.DISPLAY_KEY_NOT_COMPOUND) || this.m_keyViewsAvailable.contains(oFF.PresentationType.KEY_NOT_COMPOUND))
		{
			resultDisplay = oFF.FieldContainerKeyDisplay.COMPOUNDED_KEY;
		}
		else
		{
			resultDisplay = oFF.FieldContainerKeyDisplay.EXTERNAL_KEY;
		}
	}
	else if (keyPresentation === oFF.PresentationType.KEY || keyPresentation === oFF.PresentationType.HIERARCHY_KEY)
	{
		if (this.m_keyViewsAvailable.contains(oFF.PresentationType.DISPLAY_KEY))
		{
			resultDisplay = oFF.FieldContainerKeyDisplay.INTERNAL_KEY;
		}
		else if (this.m_keyViewsAvailable.contains(oFF.PresentationType.KEY_NOT_COMPOUND))
		{
			resultDisplay = oFF.FieldContainerKeyDisplay.COMPOUNDED_KEY;
		}
		else
		{
			resultDisplay = oFF.FieldContainerKeyDisplay.EXTERNAL_KEY;
		}
	}
	return resultDisplay;
};
oFF.FieldContainerPresentationHelper.prototype.reloadFieldContainerLayout = function(fieldContainer)
{
	this.m_textViewsAvailable = oFF.XList.create();
	this.m_keyViewsAvailable = oFF.XList.create();
	let presentationType;
	let hierarchyActive = fieldContainer.getDimension().isHierarchyActive();
	let hasHierarchyKey = false;
	let hasHierarchyDisplayKey = false;
	let hasFlatKey = false;
	let hasFlatDisplayKey = false;
	let i;
	if (fieldContainer.getComponentType() === oFF.OlapComponentType.ATTRIBUTE)
	{
		let myFields = fieldContainer.getFields();
		for (i = 0; i < myFields.size(); i++)
		{
			let field = myFields.get(i);
			presentationType = field.getPresentationType();
			if (presentationType === oFF.PresentationType.HIERARCHY_KEY)
			{
				hasHierarchyKey = true;
			}
			else if (presentationType === oFF.PresentationType.KEY)
			{
				hasFlatKey = true;
			}
			else if (presentationType === oFF.PresentationType.HIERARCHY_DISPLAY_KEY)
			{
				hasHierarchyDisplayKey = true;
			}
			else if (presentationType === oFF.PresentationType.DISPLAY_KEY)
			{
				hasFlatDisplayKey = true;
			}
			if (presentationType.isTypeOf(oFF.PresentationType.TEXT) && presentationType !== oFF.PresentationType.TEXT && !this.m_textViewsAvailable.contains(presentationType))
			{
				this.m_textViewsAvailable.add(presentationType);
			}
			else if (presentationType.isTypeOf(oFF.PresentationType.ABSTRACT_KEY) && !this.m_keyViewsAvailable.contains(presentationType))
			{
				if (presentationType === oFF.PresentationType.HIERARCHY_KEY && hierarchyActive)
				{
					this.m_keyViewsAvailable.removeElement(oFF.PresentationType.KEY);
					this.m_keyViewsAvailable.add(oFF.PresentationType.KEY);
				}
				else if (presentationType === oFF.PresentationType.HIERARCHY_DISPLAY_KEY && hierarchyActive)
				{
					this.m_keyViewsAvailable.removeElement(oFF.PresentationType.DISPLAY_KEY);
					this.m_keyViewsAvailable.add(oFF.PresentationType.DISPLAY_KEY);
				}
				else if (!this.m_keyViewsAvailable.contains(presentationType))
				{
					this.m_keyViewsAvailable.add(presentationType);
				}
			}
		}
	}
	else
	{
		let pts = oFF.XList.create();
		let adder = (fi) => {
			if (oFF.notNull(fi))
			{
				pts.add(fi.getPresentationType());
			}
		};
		adder(fieldContainer.getFlatKeyField());
		adder(fieldContainer.getFlatDisplayKeyField());
		adder(fieldContainer.getHierarchyKeyField());
		adder(fieldContainer.getHierarchyDisplayKeyField());
		for (i = 0; i < pts.size(); i++)
		{
			let pt = pts.get(i);
			if (pt === oFF.PresentationType.HIERARCHY_KEY)
			{
				hasHierarchyKey = true;
			}
			else if (pt === oFF.PresentationType.KEY)
			{
				hasFlatKey = true;
			}
			else if (pt === oFF.PresentationType.HIERARCHY_DISPLAY_KEY)
			{
				hasHierarchyDisplayKey = true;
			}
			else if (pt === oFF.PresentationType.DISPLAY_KEY)
			{
				hasFlatDisplayKey = true;
			}
		}
	}
	if (fieldContainer.getTextField() !== null)
	{
		presentationType = fieldContainer.getTextField().getPresentationType();
		this.m_textViewsAvailable.removeElement(presentationType);
		this.m_textViewsAvailable.insert(0, presentationType);
	}
	if (fieldContainer.getKeyField() !== null)
	{
		presentationType = fieldContainer.getKeyField().getPresentationType();
		this.m_keyViewsAvailable.removeElement(presentationType);
		this.m_keyViewsAvailable.insert(0, presentationType);
	}
	if (fieldContainer.getDisplayKeyField() !== null)
	{
		presentationType = fieldContainer.getDisplayKeyField().getPresentationType();
		this.m_keyViewsAvailable.removeElement(presentationType);
		this.m_keyViewsAvailable.insert(0, presentationType);
	}
	this.m_hierarchicalKeyPresentationAsymmetry = (hasHierarchyDisplayKey || hasHierarchyKey) && (hasHierarchyKey && !hasFlatKey || hasHierarchyDisplayKey && !hasFlatDisplayKey || hasFlatKey && !hasHierarchyKey || !hasFlatDisplayKey && !hasHierarchyDisplayKey);
};
oFF.FieldContainerPresentationHelper.prototype.setComponentName = function(componentName)
{
	this.m_componentName = componentName;
};
oFF.FieldContainerPresentationHelper.prototype.setDisplayAs = function(displayAs)
{
	if (oFF.notNull(displayAs))
	{
		this.m_displayKey = displayAs.isKey();
		this.m_displayText = displayAs.isText();
	}
	if (displayAs === oFF.FieldContainerDisplay.KEY_AND_TEXT)
	{
		this.m_displayKeyBeforeText = true;
	}
	else if (displayAs === oFF.FieldContainerDisplay.TEXT_AND_KEY)
	{
		this.m_displayKeyBeforeText = false;
	}
};
oFF.FieldContainerPresentationHelper.prototype.setDisplayKey = function(displayKey)
{
	this.m_displayKey = displayKey;
};
oFF.FieldContainerPresentationHelper.prototype.setDisplayKeyBeforeText = function(displayKeyBeforeText)
{
	this.m_displayKeyBeforeText = displayKeyBeforeText;
};
oFF.FieldContainerPresentationHelper.prototype.setDisplayText = function(displayText)
{
	this.m_displayText = displayText;
};
oFF.FieldContainerPresentationHelper.prototype.setDisplayUseDimensionSetting = function(displayUseDimensionSetting)
{
	this.m_displayUseDimensionSetting = displayUseDimensionSetting;
};
oFF.FieldContainerPresentationHelper.prototype.setKeyDisplay = function(keyDisplay)
{
	if (keyDisplay === oFF.FieldContainerKeyDisplay.INTERNAL_KEY)
	{
		this.m_keyView = oFF.PresentationType.KEY;
	}
	if (keyDisplay === oFF.FieldContainerKeyDisplay.EXTERNAL_KEY)
	{
		if (this.m_keyViewsAvailable.contains(oFF.PresentationType.DISPLAY_KEY_MIXED_COMPOUNDMENT))
		{
			this.m_keyView = oFF.PresentationType.DISPLAY_KEY_MIXED_COMPOUNDMENT;
		}
		else if (this.m_keyViewsAvailable.contains(oFF.PresentationType.DISPLAY_KEY))
		{
			this.m_keyView = oFF.PresentationType.DISPLAY_KEY;
		}
		else if (this.m_keyViewsAvailable.contains(oFF.PresentationType.KEY))
		{
			this.m_keyView = oFF.PresentationType.KEY;
		}
	}
	if (keyDisplay === oFF.FieldContainerKeyDisplay.COMPOUNDED_KEY)
	{
		if (this.m_keyViewsAvailable.contains(oFF.PresentationType.DISPLAY_KEY))
		{
			this.m_keyView = oFF.PresentationType.DISPLAY_KEY;
		}
		else if (this.m_keyViewsAvailable.contains(oFF.PresentationType.KEY))
		{
			this.m_keyView = oFF.PresentationType.KEY;
		}
	}
	if (keyDisplay === oFF.FieldContainerKeyDisplay.NON_COMPOUNDED_KEY)
	{
		if (this.m_keyViewsAvailable.contains(oFF.PresentationType.DISPLAY_KEY_NOT_COMPOUND))
		{
			this.m_keyView = oFF.PresentationType.DISPLAY_KEY_NOT_COMPOUND;
		}
		else if (this.m_keyViewsAvailable.contains(oFF.PresentationType.KEY_NOT_COMPOUND))
		{
			this.m_keyView = oFF.PresentationType.KEY_NOT_COMPOUND;
		}
	}
};
oFF.FieldContainerPresentationHelper.prototype.setKeyView = function(keyView)
{
	this.m_keyView = keyView;
};
oFF.FieldContainerPresentationHelper.prototype.setKeyViewsAvailable = function(keyViewsAvailable)
{
	this.m_keyViewsAvailable = keyViewsAvailable;
};
oFF.FieldContainerPresentationHelper.prototype.setTextView = function(textView)
{
	this.m_textView = textView;
};
oFF.FieldContainerPresentationHelper.prototype.setTextViewsAvailable = function(textViewsAvailable)
{
	this.m_textViewsAvailable = textViewsAvailable;
};
oFF.FieldContainerPresentationHelper.prototype.setupExt = function(fieldContainer)
{
	this.m_componentName = fieldContainer.getName();
	this.m_componentText = fieldContainer.getText();
	if (oFF.XStringUtils.isNullOrEmpty(this.m_componentText))
	{
		this.m_componentText = this.m_componentName;
	}
	this.m_fieldBased = false;
	this.reloadFieldContainerLayout(fieldContainer);
	this.m_mayDisplayKey = oFF.XCollectionUtils.hasElements(this.m_keyViewsAvailable);
	this.m_mayDisplayText = oFF.XCollectionUtils.hasElements(this.m_textViewsAvailable);
	let fallBackField;
	if (this.m_mayDisplayText)
	{
		let resultTextField = oFF.FieldContainerPresentationHelper.getResultSetTextField(fieldContainer);
		if (oFF.notNull(resultTextField))
		{
			this.m_textView = resultTextField.getPresentationType();
		}
		else
		{
			this.m_textView = this.m_textViewsAvailable.get(0);
		}
		fallBackField = oFF.FieldContainerPresentationHelper.getFallbackTextField(fieldContainer);
		if (oFF.isNull(fallBackField))
		{
			this.m_textViewDefault = this.m_textView;
		}
		else
		{
			this.m_textViewDefault = fallBackField.getPresentationType();
		}
	}
	if (this.m_mayDisplayKey)
	{
		let resultKeyField = fieldContainer.getClientDefaultKeyField();
		if (oFF.notNull(resultKeyField))
		{
			this.m_keyView = oFF.FieldContainerPresentationHelper.flattenKeyView(resultKeyField.getPresentationType());
		}
		else
		{
			this.m_keyView = oFF.FieldContainerPresentationHelper.flattenKeyView(this.m_keyViewsAvailable.get(0));
		}
		fallBackField = oFF.FieldContainerPresentationHelper.getFallbackKeyField(fieldContainer);
		if (oFF.isNull(fallBackField))
		{
			this.m_keyViewDefault = this.m_keyView;
		}
		else
		{
			this.m_keyViewDefault = oFF.FieldContainerPresentationHelper.flattenKeyView(fallBackField.getPresentationType());
		}
	}
};
oFF.FieldContainerPresentationHelper.prototype.setupExtFromField = function(field)
{
	this.m_componentName = field.getName();
	this.m_componentText = field.getText();
	if (oFF.XStringUtils.isNullOrEmpty(this.m_componentText))
	{
		this.m_componentText = this.m_componentName;
	}
	this.m_fieldBased = true;
};
oFF.FieldContainerPresentationHelper.prototype.submitDefaultPresentation = function(field, presentationType)
{
	let attribute = field.getAttribute();
	this.submitDefaultPresentationToFieldContainer(attribute, field, presentationType);
	let dimension = field.getDimension();
	if (dimension.getMainAttribute() === attribute || oFF.isNull(attribute))
	{
		this.submitDefaultPresentationToFieldContainer(dimension, field, presentationType);
	}
};
oFF.FieldContainerPresentationHelper.prototype.submitDefaultPresentationToFieldContainer = function(attribute, field, presentationType)
{
	if (oFF.notNull(attribute))
	{
		if (presentationType.isTypeOf(oFF.PresentationType.ABSTRACT_TEXT) && presentationType !== oFF.PresentationType.ACTIVE_TEXT)
		{
			attribute.setClientDefaultTextField(field);
		}
		else if (presentationType.isTypeOf(oFF.PresentationType.ABSTRACT_KEY) && attribute.getClientDefaultKeyField() !== field)
		{
			attribute.setClientDefaultKeyField(field);
		}
	}
};
oFF.FieldContainerPresentationHelper.prototype.worksWithAttributes = function(queryModel, dimensionName)
{
	return queryModel.getDimensionByName(dimensionName) !== null && queryModel.getDimensionByName(dimensionName).supportsFieldLayoutType(oFF.FieldLayoutType.ATTRIBUTE_BASED);
};

oFF.QRankingUtil = {

	MAX:10000,
	NO_LIMIT:-1,
	applyRankings:function(queryModel, rankSettings)
	{
			if (oFF.isNull(rankSettings) || rankSettings.size() === 0)
		{
			return;
		}
		let isApplyRankingsWithoutReset = false;
		let isRankOnAllDimensionsExist = false;
		let preserveSort = false;
		for (let i = 0; i < rankSettings.size(); i++)
		{
			let rankSetting = rankSettings.get(i);
			if (rankSetting.isRankOnAllDimensions())
			{
				isRankOnAllDimensionsExist = true;
			}
			if (rankSetting.isApplyRankingsWithoutReset())
			{
				isApplyRankingsWithoutReset = true;
			}
			if (rankSetting.isPreserveSort())
			{
				preserveSort = true;
			}
		}
		if (oFF.QRankingUtil.isRankOnAllDimensionsExists(queryModel))
		{
			isRankOnAllDimensionsExist = true;
		}
		if (isApplyRankingsWithoutReset)
		{
			if (isRankOnAllDimensionsExist)
			{
				oFF.QRankingUtil.resetRanksAndSorts(queryModel, preserveSort);
			}
			for (let k = 0; k < rankSettings.size(); k++)
			{
				let currentRankSetting = rankSettings.get(k);
				let matchingExistingRank = oFF.QRankingUtil.getMatchingExistingRank(queryModel, currentRankSetting);
				if (oFF.notNull(matchingExistingRank))
				{
					if (matchingExistingRank.getConditionName() === null)
					{
						oFF.QRankingUtil.resetRanksAndSorts(queryModel, preserveSort);
					}
					else
					{
						queryModel.getConvenienceCommands().clearRank(matchingExistingRank.getConditionName());
					}
				}
				if (queryModel.getQueryManager().getConvenienceCommands().getAllRanks().size() > 0)
				{
					currentRankSetting.setUseDefaultSort(false);
				}
				else
				{
					if (!preserveSort)
					{
						let sortingManager = queryModel.getSortingManager();
						sortingManager.getSortingOperations().clear();
					}
				}
				let newRankSettings = oFF.XList.create();
				newRankSettings.add(currentRankSetting);
				oFF.QRankingUtil.applyRankingsWithoutReset(queryModel, newRankSettings);
			}
		}
		else
		{
			oFF.QRankingUtil.resetRanksAndSorts(queryModel, preserveSort);
			oFF.QRankingUtil.applyRankingsWithoutReset(queryModel, rankSettings);
		}
	},
	applyRankingsWithoutReset:function(queryModel, rankSettings)
	{
			if (oFF.isNull(rankSettings) || rankSettings.size() === 0)
		{
			return;
		}
		let queryManager = queryModel.getQueryManager();
		let convenienceCommands = queryModel.getConvenienceCommands();
		let useConditions = false;
		for (let i = 0; i < rankSettings.size(); i++)
		{
			let rankSetting = rankSettings.get(i);
			useConditions = useConditions || queryModel.getModelCapabilities().supportsConditions() && rankSetting.useRankConditions();
			let limit = rankSetting.isUseClientSideRanking() ? useConditions ? rankSetting.getMaxRows() : oFF.QRankingUtil.MAX : rankSetting.getMaxRows();
			if (rankSetting.getMaxRows() === oFF.QRankingUtil.NO_LIMIT)
			{
				continue;
			}
			else
			{
				let appliedDimensionNames = oFF.XList.create();
				if (useConditions && rankSetting.getAppliedDimensions().size() > 0)
				{
					oFF.XCollectionUtils.forEach(rankSetting.getAppliedDimensions(), (appliedDimension) => {
						if (rankSetting.getVersionDimension() === null || !oFF.XString.isEqual(appliedDimension.getName(), rankSetting.getVersionDimension().getName()) || queryManager.getSystemType() === oFF.SystemType.BW)
						{
							appliedDimensionNames.add(appliedDimension.getName());
						}
					});
				}
				let versionDimension = rankSetting.getVersionDimension();
				let versionElementId = rankSetting.getVersionElementId();
				if (!queryManager.getConvenienceCommands().isTypeOfBw())
				{
					let hasVersionMapping = false;
					if (oFF.notNull(versionDimension))
					{
						hasVersionMapping = !versionDimension.getDimensionType().isTypeOf(oFF.DimensionType.VERSION);
					}
					if (useConditions && hasVersionMapping)
					{
						versionElementId = null;
						versionDimension = null;
					}
				}
				if (!useConditions && queryModel.getModelCapabilities().supportsConditions())
				{
					queryModel.getModelCapabilities().setSupportsConditions(false);
					convenienceCommands.buildRank(limit, rankSetting.getMeasure(), rankSetting.getSecondaryMeasure(), appliedDimensionNames, rankSetting.getComparisonOperator(), versionElementId, versionDimension);
					queryModel.getModelCapabilities().setSupportsConditions(true);
				}
				else
				{
					if (queryModel.getSession().hasFeature(oFF.FeatureToggleOlap.SORT_AND_RANK_WITH_DIMENSIONS_ON_COLUMN))
					{
						let isRankOnAllDimensions = rankSetting.isRankOnAllDimensions();
						if (useConditions && isRankOnAllDimensions)
						{
							let appliedDimensionsOnRow = oFF.XList.create();
							let appliedDimensionsOnColumn = oFF.XList.create();
							for (let j = 0; j < appliedDimensionNames.size(); j++)
							{
								let dimensionName = appliedDimensionNames.get(j);
								let dimensionAxisType = queryModel.getDimensionByName(dimensionName).getAxisType();
								if (dimensionAxisType === oFF.AxisType.ROWS)
								{
									appliedDimensionsOnRow.add(dimensionName);
								}
								else if (dimensionAxisType === oFF.AxisType.COLUMNS)
								{
									appliedDimensionsOnColumn.add(dimensionName);
								}
							}
							if (oFF.XCollectionUtils.hasElements(appliedDimensionsOnRow))
							{
								oFF.QRankingUtil.buildSingleRank(limit, rankSetting, appliedDimensionsOnRow, versionElementId, versionDimension, useConditions, convenienceCommands);
							}
							if (oFF.XCollectionUtils.hasElements(appliedDimensionsOnColumn))
							{
								oFF.QRankingUtil.buildSingleRank(limit, rankSetting, appliedDimensionsOnColumn, versionElementId, versionDimension, useConditions, convenienceCommands);
							}
						}
						else
						{
							oFF.QRankingUtil.buildSingleRank(limit, rankSetting, appliedDimensionNames, versionElementId, versionDimension, useConditions, convenienceCommands);
						}
					}
					else
					{
						oFF.QRankingUtil.buildSingleRank(limit, rankSetting, appliedDimensionNames, versionElementId, versionDimension, useConditions, convenienceCommands);
					}
				}
			}
		}
		if (useConditions)
		{
			let lastRankSetting = rankSettings.get(rankSettings.size() - 1);
			if (lastRankSetting.useDefaultSort())
			{
				oFF.QSortUtils.removeAllSortsByMeasure(queryModel);
				let direction = lastRankSetting.getComparisonOperator() === oFF.ConditionComparisonOperator.TOP_N ? oFF.XSortDirection.DESCENDING : oFF.XSortDirection.ASCENDING;
				oFF.QSortUtils.addSortByMeasureEx(queryModel, lastRankSetting.getMeasure(), lastRankSetting.getSecondaryMeasure(), direction, lastRankSetting.isBreakGrouping(), lastRankSetting.getVersionElementId(), lastRankSetting.getVersionDimension(), lastRankSetting.getRelatedElements());
			}
		}
	},
	buildSingleRank:function(limit, rankSetting, appliedDimensions, versionElementId, versionDimension, useConditions, convenienceCommands)
	{
			let rankCondition = convenienceCommands.buildRank(limit, rankSetting.getMeasure(), rankSetting.getSecondaryMeasure(), appliedDimensions, rankSetting.getComparisonOperator(), versionElementId, versionDimension);
		if (useConditions && !(oFF.isNull(rankCondition)))
		{
			rankCondition.setApplyConditionAfterVisibilityFilter(true);
		}
	},
	getMatchingExistingRank:function(queryModel, rankSetting)
	{
			let existingRanks = queryModel.getQueryManager().getConvenienceCommands().getAllRanks();
		let matchingExistingRank = null;
		for (let i = 0; i < existingRanks.size(); i++)
		{
			let currentExistingRank = existingRanks.get(i);
			if (currentExistingRank.getAppliedDimensions().size() === 1 && rankSetting.getAppliedDimensions().size() === 1 && oFF.XString.isEqual(currentExistingRank.getAppliedDimensions().get(0), rankSetting.getAppliedDimensions().get(0).getName()))
			{
				matchingExistingRank = currentExistingRank;
			}
		}
		return matchingExistingRank;
	},
	isRankOnAllDimensionsExists:function(queryModel)
	{
			let existingRanks = queryModel.getQueryManager().getConvenienceCommands().getAllRanks();
		if (existingRanks.isEmpty())
		{
			return false;
		}
		let columnsDimensions = oFF.XCollectionUtils.filter(queryModel.getColumnsAxis().getDimensions(), (columnDimension) => {
			return columnDimension !== queryModel.getPrimaryCalculationDimension() && columnDimension !== queryModel.getSecondaryCalculationDimension();
		});
		let rowsDimensions = oFF.XCollectionUtils.filter(queryModel.getRowsAxis().getDimensions(), (rowDimension) => {
			return rowDimension !== queryModel.getPrimaryCalculationDimension() && rowDimension !== queryModel.getSecondaryCalculationDimension();
		});
		let rankableDimensions = oFF.XList.create();
		let isRankOnVersion = false;
		let versionDimension = queryModel.getVersionDimension();
		if (existingRanks.size() === 1 && existingRanks.get(0).getAppliedDimensions().size() === 1 && oFF.notNull(versionDimension))
		{
			isRankOnVersion = oFF.XString.isEqual(versionDimension.getName(), existingRanks.get(0).getAppliedDimensions().get(0));
		}
		if (!isRankOnVersion && oFF.notNull(versionDimension))
		{
			columnsDimensions = oFF.XCollectionUtils.filter(columnsDimensions, (dimension) => {
				return !dimension.getDimensionType().isTypeOf(oFF.DimensionType.VERSION);
			});
			rowsDimensions = oFF.XCollectionUtils.filter(rowsDimensions, (dimension) => {
				return !dimension.getDimensionType().isTypeOf(oFF.DimensionType.VERSION);
			});
		}
		oFF.XCollectionUtils.addAll(rankableDimensions, columnsDimensions);
		oFF.XCollectionUtils.addAll(rankableDimensions, rowsDimensions);
		for (let i = 0; i < existingRanks.size(); i++)
		{
			let currentExistingRank = existingRanks.get(i);
			if (currentExistingRank.getAppliedDimensions().size() === 1 && !(columnsDimensions.size() === 1 && oFF.XString.isEqual(currentExistingRank.getAppliedDimensions().get(0), columnsDimensions.get(0).getName()) || rowsDimensions.size() === 1 && oFF.XString.isEqual(currentExistingRank.getAppliedDimensions().get(0), rowsDimensions.get(0).getName())))
			{
				return false;
			}
			if (!currentExistingRank.isEqualTo(existingRanks.get(0)))
			{
				return false;
			}
			for (let j = 0; j < currentExistingRank.getAppliedDimensions().size(); j++)
			{
				let appliedDimension = currentExistingRank.getAppliedDimensions().get(j);
				oFF.XCollectionUtils.removeIf(rankableDimensions, (rankableDimension) => {
					return oFF.XString.isEqual(rankableDimension.getName(), appliedDimension);
				});
			}
		}
		if (rankableDimensions.hasElements())
		{
			return false;
		}
		return true;
	},
	resetRanksAndSorts:function(queryModel, preserveSort)
	{
			if (!preserveSort)
		{
			let sortingManager = queryModel.getSortingManager();
			sortingManager.getSortingOperations().clear();
		}
		let convenienceCommands = queryModel.getConvenienceCommands();
		convenienceCommands.clearRank("");
	}
};

oFF.QStructureMemberSolveOrder = {

	CLIENT_DEFINED_CUSTOM_MEMBER_HIGH:1000001,
	CLIENT_DEFINED_CUSTOM_MEMBER_LOW:1000000,
	CLIENT_DEFINED_FORMULA_CALCULATED_DIMENSION:1000002,
	CLIENT_DEFINED_RESTRICTED_MEASURE_ON_MEASURE_STRUCTURE:-1,
	CURRENCY_MEASURE_UNIVERSAL_MEASURE:1,
	CURRENCY_MEASURE_WITH_ACCOUNT:-1,
	DEFAULT_SOLVE_ORDER:0,
	RESTRICTED_MEASURE_UNIVERSAL_MEASURE:1,
	RESTRICTED_MEASURE_UNIVERSAL_MEASURE_ON_MODEL_DEFINED_MEMBERS:10,
	RESTRICTED_MEASURE_WITH_ACCOUNT:-1
};

oFF.QCanonicalDateUtil = {

	castAndCreateEntityValueFromEntityValueKey:function(queryModel, timeDimension, hierarchyName, entityKeyValue, entityKeyLevelType, targetLevelType, useLast)
	{
			let canonicalDate = oFF.QCanonicalDateUtil.createCanonicalDateFromEntityValueInfo(queryModel, timeDimension, hierarchyName, entityKeyValue, entityKeyLevelType);
		canonicalDate = oFF.QCanonicalDateUtil.castCanonicalDateToLevel(queryModel, timeDimension, hierarchyName, canonicalDate, targetLevelType, useLast);
		return oFF.QCanonicalDateUtil.createEntityValueFromCanonicalDate(queryModel, timeDimension, hierarchyName, canonicalDate);
	},
	castCanonicalDateToLevel:function(queryModel, timeDimension, hierarchyName, canonicalDate, targetLevelType, useLast)
	{
			let canonicalDateContext = oFF.QFactory.createCanonicalDateContext(queryModel, timeDimension, hierarchyName);
		let provider = oFF.QCanonicalDateProvider.getInstance();
		return provider.castCanonicalDateToLevel(canonicalDateContext, canonicalDate, oFF.QCanonicalDateUtil.convertHierarchyLevelTypeToDateTimeGranularity(targetLevelType), useLast);
	},
	convertCanonicalDateToTargetLevelAndFiscalSpace:function(sourceQueryModel, sourceTimeDimension, sourceHierarchyName, sourceCanonicalDate, targetLevel, targetFiscalSpace)
	{
			let canonicalDateContext = oFF.QFactory.createCanonicalDateContext(sourceQueryModel, sourceTimeDimension, sourceHierarchyName);
		let provider = oFF.QCanonicalDateProvider.getInstance();
		return provider.convertCanonicalDateToTargetLevelAndFiscalSpace(canonicalDateContext, sourceCanonicalDate, oFF.QCanonicalDateUtil.convertHierarchyLevelTypeToDateTimeGranularity(targetLevel), targetFiscalSpace);
	},
	convertDateTimeGranularityToHierarchyLevelType:function(granularity)
	{
			if (granularity === oFF.DateTimeGranularityType.ALL)
		{
			return oFF.HierarchyLevelType.ALL;
		}
		else if (granularity === oFF.DateTimeGranularityType.YEAR)
		{
			return oFF.HierarchyLevelType.TIME_YEAR;
		}
		else if (granularity === oFF.DateTimeGranularityType.HALFYEAR)
		{
			return oFF.HierarchyLevelType.TIME_HALF_YEAR;
		}
		else if (granularity === oFF.DateTimeGranularityType.CALQUARTER)
		{
			return oFF.HierarchyLevelType.TIME_QUARTER;
		}
		else if (granularity === oFF.DateTimeGranularityType.CALMONTH)
		{
			return oFF.HierarchyLevelType.TIME_MONTH;
		}
		else if (granularity === oFF.DateTimeGranularityType.WEEK)
		{
			return oFF.HierarchyLevelType.TIME_WEEK;
		}
		else if (granularity === oFF.DateTimeGranularityType.DAY)
		{
			return oFF.HierarchyLevelType.TIME_DAY;
		}
		else if (granularity === oFF.DateTimeGranularityType.HOUR)
		{
			return oFF.HierarchyLevelType.TIME_HOUR;
		}
		else if (granularity === oFF.DateTimeGranularityType.MINUTE)
		{
			return oFF.HierarchyLevelType.TIME_MINUTE;
		}
		else if (granularity === oFF.DateTimeGranularityType.SECOND)
		{
			return oFF.HierarchyLevelType.TIME_SECOND;
		}
		return null;
	},
	convertHierarchyLevelTypeToDateTimeGranularity:function(levelType)
	{
			if (levelType === oFF.HierarchyLevelType.ALL)
		{
			return oFF.DateTimeGranularityType.ALL;
		}
		else if (levelType === oFF.HierarchyLevelType.TIME_YEAR)
		{
			return oFF.DateTimeGranularityType.YEAR;
		}
		else if (levelType === oFF.HierarchyLevelType.TIME_HALF_YEAR)
		{
			return oFF.DateTimeGranularityType.HALFYEAR;
		}
		else if (levelType === oFF.HierarchyLevelType.TIME_QUARTER)
		{
			return oFF.DateTimeGranularityType.CALQUARTER;
		}
		else if (levelType === oFF.HierarchyLevelType.TIME_MONTH)
		{
			return oFF.DateTimeGranularityType.CALMONTH;
		}
		else if (levelType === oFF.HierarchyLevelType.TIME_WEEK)
		{
			return oFF.DateTimeGranularityType.WEEK;
		}
		else if (levelType === oFF.HierarchyLevelType.TIME_DAY)
		{
			return oFF.DateTimeGranularityType.DAY;
		}
		else if (levelType === oFF.HierarchyLevelType.TIME_HOUR)
		{
			return oFF.DateTimeGranularityType.HOUR;
		}
		else if (levelType === oFF.HierarchyLevelType.TIME_MINUTE)
		{
			return oFF.DateTimeGranularityType.MINUTE;
		}
		else if (levelType === oFF.HierarchyLevelType.TIME_SECOND)
		{
			return oFF.DateTimeGranularityType.SECOND;
		}
		return null;
	},
	convertHierarchyLevelTypeToTimeOperationGranularity:function(hierarchyLevelType)
	{
			if (hierarchyLevelType === oFF.HierarchyLevelType.TIME_YEAR)
		{
			return oFF.QTimeOperationGranularity.YEAR;
		}
		else if (hierarchyLevelType === oFF.HierarchyLevelType.TIME_HALF_YEAR)
		{
			return oFF.QTimeOperationGranularity.HALF_YEAR;
		}
		else if (hierarchyLevelType === oFF.HierarchyLevelType.TIME_QUARTER)
		{
			return oFF.QTimeOperationGranularity.QUARTER;
		}
		else if (hierarchyLevelType === oFF.HierarchyLevelType.TIME_MONTH)
		{
			return oFF.QTimeOperationGranularity.MONTH;
		}
		else if (hierarchyLevelType === oFF.HierarchyLevelType.TIME_WEEK)
		{
			return oFF.QTimeOperationGranularity.WEEK;
		}
		else if (hierarchyLevelType === oFF.HierarchyLevelType.TIME_DAY)
		{
			return oFF.QTimeOperationGranularity.DAY;
		}
		else if (hierarchyLevelType === oFF.HierarchyLevelType.REGULAR)
		{
			return oFF.QTimeOperationGranularity.OTHER;
		}
		return null;
	},
	convertTimeOperationGranularityToHierarchyLevelType:function(granularity)
	{
			if (granularity === oFF.QTimeOperationGranularity.YEAR)
		{
			return oFF.HierarchyLevelType.TIME_YEAR;
		}
		else if (granularity === oFF.QTimeOperationGranularity.HALF_YEAR)
		{
			return oFF.HierarchyLevelType.TIME_HALF_YEAR;
		}
		else if (granularity === oFF.QTimeOperationGranularity.QUARTER)
		{
			return oFF.HierarchyLevelType.TIME_QUARTER;
		}
		else if (granularity === oFF.QTimeOperationGranularity.MONTH)
		{
			return oFF.HierarchyLevelType.TIME_MONTH;
		}
		else if (granularity === oFF.QTimeOperationGranularity.WEEK)
		{
			return oFF.HierarchyLevelType.TIME_WEEK;
		}
		else if (granularity === oFF.QTimeOperationGranularity.DAY)
		{
			return oFF.HierarchyLevelType.TIME_DAY;
		}
		return null;
	},
	createCanonicalDateFromEntityValue:function(queryModel, timeDimension, hierarchyName, entityValue)
	{
			let entityValues = oFF.XList.create();
		entityValues.add(entityValue);
		let canonicalDates = oFF.QCanonicalDateUtil.createCanonicalDatesFromEntityValues(queryModel, timeDimension, hierarchyName, entityValues);
		return canonicalDates.get(0);
	},
	createCanonicalDateFromEntityValueInfo:function(queryModel, timeDimension, hierarchyName, entityKeyValue, levelType)
	{
			let canonicalDateContext = oFF.QFactory.createCanonicalDateContext(queryModel, timeDimension, hierarchyName);
		let provider = oFF.QCanonicalDateProvider.getInstance();
		return provider.createCanonicalDateFromEntityValueInfo(canonicalDateContext, entityKeyValue, oFF.QCanonicalDateUtil.convertHierarchyLevelTypeToDateTimeGranularity(levelType));
	},
	createCanonicalDatesFromEntityValues:function(queryModel, timeDimension, hierarchyName, entityValues)
	{
			let canonicalDateContext = oFF.QFactory.createCanonicalDateContext(queryModel, timeDimension, hierarchyName);
		let provider = oFF.QCanonicalDateProvider.getInstance();
		return provider.createCanonicalDatesFromEntityValues(canonicalDateContext, entityValues);
	},
	createCurrentCanonicalDate:function(queryModel, timeDimension, hierarchyName)
	{
			let provider = oFF.QCanonicalDateProvider.getInstance();
		return provider.createCurrentCanonicalDate(oFF.QFactory.createCanonicalDateContext(queryModel, timeDimension, hierarchyName), oFF.QCanonicalDateUtil.convertHierarchyLevelTypeToDateTimeGranularity(oFF.HierarchyLevelType.TIME_DAY));
	},
	createCurrentCanonicalDateWithTimeZoneOffset:function(queryModel, timeDimension, hierarchyName, timeZoneOffsetInMinutes)
	{
			let provider = oFF.QCanonicalDateProvider.getInstance();
		return provider.createCurrentCanonicalDateWithTimeZoneOffset(oFF.QFactory.createCanonicalDateContext(queryModel, timeDimension, hierarchyName), oFF.QCanonicalDateUtil.convertHierarchyLevelTypeToDateTimeGranularity(oFF.HierarchyLevelType.TIME_DAY), timeZoneOffsetInMinutes);
	},
	createEntityValueFromCanonicalDate:function(queryModel, timeDimension, hierarchyName, canonicalDate)
	{
			let canonicalDateContext = oFF.QFactory.createCanonicalDateContext(queryModel, timeDimension, hierarchyName);
		let provider = oFF.QCanonicalDateProvider.getInstance();
		return provider.createEntityValueFromCanonicalDate(canonicalDateContext, canonicalDate);
	},
	doesCanonicalDateSpanAcrossYears:function(queryModel, timeDimension, hierarchyName, canonicalDate)
	{
			if (canonicalDate.getGranularity() === oFF.DateTimeGranularityType.WEEK)
		{
			let startOfWeek = oFF.QCanonicalDateUtil.castCanonicalDateToLevel(queryModel, timeDimension, hierarchyName, canonicalDate, oFF.HierarchyLevelType.TIME_DAY, false);
			let endOfWeek = oFF.QCanonicalDateUtil.castCanonicalDateToLevel(queryModel, timeDimension, hierarchyName, canonicalDate, oFF.HierarchyLevelType.TIME_DAY, true);
			return startOfWeek.getYear() !== endOfWeek.getYear();
		}
		return false;
	},
	getAncestorEntityValues:function(queryModel, timeDimension, hierarchyName, memberId)
	{
			let queryManager = queryModel.getQueryManager();
		let canonicalDateContext = oFF.QFactory.createCanonicalDateContext(queryModel, timeDimension, hierarchyName);
		let provider = oFF.QCanonicalDateProvider.getInstance();
		let ancestors = provider.getAncestorEntityValues(queryManager, canonicalDateContext, memberId);
		return ancestors;
	},
	getDifferenceBetweenCanonicalDates:function(queryModel, timeDimension, hierarchyName, canonicalDate1, canonicalDate2, differenceLevelType)
	{
			let startCanonicalDate = canonicalDate2;
		if (oFF.QCanonicalDateUtil.convertDateTimeGranularityToHierarchyLevelType(startCanonicalDate.getGranularity()) !== differenceLevelType)
		{
			startCanonicalDate = oFF.QCanonicalDateUtil.castCanonicalDateToLevel(queryModel, timeDimension, hierarchyName, startCanonicalDate, differenceLevelType, false);
		}
		let endCanonicalDate = canonicalDate1;
		if (oFF.QCanonicalDateUtil.convertDateTimeGranularityToHierarchyLevelType(endCanonicalDate.getGranularity()) !== differenceLevelType)
		{
			endCanonicalDate = oFF.QCanonicalDateUtil.castCanonicalDateToLevel(queryModel, timeDimension, hierarchyName, endCanonicalDate, differenceLevelType, false);
		}
		let increment = 1;
		if (startCanonicalDate.getYear() > endCanonicalDate.getYear() || startCanonicalDate.getYear() === endCanonicalDate.getYear() && startCanonicalDate.getMember() >= endCanonicalDate.getMember())
		{
			increment = -1;
		}
		let difference = 0;
		while (!oFF.QCanonicalDateUtil.isEqual(startCanonicalDate, endCanonicalDate))
		{
			difference = difference + increment;
			startCanonicalDate = oFF.QCanonicalDateUtil.incrementCanonicalDate(queryModel, timeDimension, hierarchyName, startCanonicalDate, increment, differenceLevelType);
		}
		return difference;
	},
	getEntityValueKeyFromCanonicalDate:function(queryModel, timeDimension, hierarchyName, canonicalDate)
	{
			let canonicalDateContext = oFF.QFactory.createCanonicalDateContext(queryModel, timeDimension, hierarchyName);
		let provider = oFF.QCanonicalDateProvider.getInstance();
		return provider.getEntityValueKeyFromCanonicalDate(canonicalDateContext, canonicalDate);
	},
	getGranularityFromEntityValue:function(queryModel, timeDimension, hierarchyName, entityValue)
	{
			let provider = oFF.QCanonicalDateProvider.getInstance();
		let canonicalDateContext = oFF.QFactory.createCanonicalDateContext(queryModel, timeDimension, hierarchyName);
		if (oFF.QTimeDimensionUtil.isFlexibleTimeDimension(timeDimension))
		{
			return provider.getGranularityFromEntityValueWithFlexibleSupport(queryModel.getQueryManager(), canonicalDateContext, entityValue);
		}
		return provider.getGranularityFromEntityValue(canonicalDateContext, entityValue);
	},
	getHierarchyLevelFromEntityValue:function(queryModel, timeDimension, hierarchyName, entityValue)
	{
			let granularity = null;
		let provider = oFF.QCanonicalDateProvider.getInstance();
		let canonicalDateContext = oFF.QFactory.createCanonicalDateContext(queryModel, timeDimension, hierarchyName);
		let hierarchyLevel = null;
		if (oFF.QTimeDimensionUtil.isFlexibleTimeDimension(timeDimension) && queryModel.getSession().hasFeature(oFF.FeatureToggleOlap.FLEXIBLE_TIME_DYNAMIC_TIME))
		{
			hierarchyLevel = oFF.QFilterUtil.getHierarchyLevelFromEntityValue(timeDimension, hierarchyName, entityValue);
		}
		else if (oFF.QTimeDimensionUtil.isFlexibleTimeDimension(timeDimension))
		{
			granularity = provider.getGranularityFromEntityValueWithFlexibleSupport(queryModel.getQueryManager(), canonicalDateContext, entityValue);
		}
		else
		{
			granularity = provider.getGranularityFromEntityValue(canonicalDateContext, entityValue);
		}
		if (oFF.notNull(granularity))
		{
			let hierarchyLevelType = oFF.QCanonicalDateUtil.convertDateTimeGranularityToHierarchyLevelType(granularity);
			let leveledHierarchy = timeDimension.getLeveledHierarchy(hierarchyName);
			hierarchyLevel = leveledHierarchy.getLevelByType(hierarchyLevelType);
		}
		return hierarchyLevel;
	},
	getHierarchyLevelTypeFromEntityValue:function(queryModel, timeDimension, hierarchyName, entityValue)
	{
			let hierarchyLevel = oFF.QCanonicalDateUtil.getHierarchyLevelFromEntityValue(queryModel, timeDimension, hierarchyName, entityValue);
		return oFF.notNull(hierarchyLevel) ? hierarchyLevel.getLevelType() : null;
	},
	getLowestHierarchyLevelType:function(queryModel, timeDimension, hierarchyName, entityValues)
	{
			let lowestLevel = oFF.HierarchyLevelType.ALL;
		let iterator = entityValues.getIterator();
		while (iterator.hasNext())
		{
			let entityValueLevelType = null;
			let entityValue = iterator.next();
			if (oFF.QTimeDimensionUtil.isFlexibleTimeDimension(timeDimension) && queryModel.getSession().hasFeature(oFF.FeatureToggleOlap.FLEXIBLE_TIME_DYNAMIC_TIME))
			{
				let hierarchyLevel = oFF.QFilterUtil.getHierarchyLevelFromEntityValue(timeDimension, hierarchyName, entityValue);
				if (oFF.notNull(hierarchyLevel))
				{
					entityValueLevelType = hierarchyLevel.getLevelType();
				}
			}
			else
			{
				let entityValueGranularity = oFF.QCanonicalDateUtil.getGranularityFromEntityValue(queryModel, timeDimension, hierarchyName, entityValue);
				entityValueLevelType = oFF.QCanonicalDateUtil.convertDateTimeGranularityToHierarchyLevelType(entityValueGranularity);
			}
			if (oFF.notNull(entityValueLevelType))
			{
				if (entityValueLevelType.getLevelIndex() > lowestLevel.getLevelIndex())
				{
					lowestLevel = entityValueLevelType;
				}
			}
		}
		return lowestLevel;
	},
	getMoreGranularConvertibleLevelType:function(levelType)
	{
			if (levelType === oFF.HierarchyLevelType.TIME_YEAR)
		{
			return oFF.HierarchyLevelType.TIME_HALF_YEAR;
		}
		else if (levelType === oFF.HierarchyLevelType.TIME_HALF_YEAR)
		{
			return oFF.HierarchyLevelType.TIME_QUARTER;
		}
		else if (levelType === oFF.HierarchyLevelType.TIME_QUARTER)
		{
			return oFF.HierarchyLevelType.TIME_MONTH;
		}
		else if (levelType === oFF.HierarchyLevelType.TIME_MONTH)
		{
			return oFF.HierarchyLevelType.TIME_DAY;
		}
		else if (levelType === oFF.HierarchyLevelType.TIME_WEEK)
		{
			return oFF.HierarchyLevelType.TIME_DAY;
		}
		else
		{
			return null;
		}
	},
	incrementCanonicalDate:function(queryModel, timeDimension, hierarchyName, canonicalDate, increments, incrementLevelType)
	{
			let canonicalDateContext = oFF.QFactory.createCanonicalDateContext(queryModel, timeDimension, hierarchyName);
		let provider = oFF.QCanonicalDateProvider.getInstance();
		return provider.incrementCanonicalDate(canonicalDateContext, canonicalDate, increments, oFF.QCanonicalDateUtil.convertHierarchyLevelTypeToDateTimeGranularity(incrementLevelType));
	},
	isAfter:function(queryModel, timeDimension, hierarchyName, firstCanonicalDate, secondCanonicalDate)
	{
			let provider = oFF.QCanonicalDateProvider.getInstance();
		return provider.isAfter(oFF.QFactory.createCanonicalDateContext(queryModel, timeDimension, hierarchyName), firstCanonicalDate, secondCanonicalDate);
	},
	isBefore:function(queryModel, timeDimension, hierarchyName, firstCanonicalDate, secondCanonicalDate)
	{
			let provider = oFF.QCanonicalDateProvider.getInstance();
		return provider.isBefore(oFF.QFactory.createCanonicalDateContext(queryModel, timeDimension, hierarchyName), firstCanonicalDate, secondCanonicalDate);
	},
	isEqual:function(firstCanonicalDate, secondCanonicalDate)
	{
			return firstCanonicalDate.getGranularity() === secondCanonicalDate.getGranularity() && firstCanonicalDate.getYear() === secondCanonicalDate.getYear() && firstCanonicalDate.getMember() === secondCanonicalDate.getMember();
	},
	isSameOrAfter:function(queryModel, timeDimension, hierarchyName, firstCanonicalDate, secondCanonicalDate)
	{
			let provider = oFF.QCanonicalDateProvider.getInstance();
		return provider.isSameOrAfter(oFF.QFactory.createCanonicalDateContext(queryModel, timeDimension, hierarchyName), firstCanonicalDate, secondCanonicalDate);
	},
	isSameOrBefore:function(queryModel, timeDimension, hierarchyName, firstCanonicalDate, secondCanonicalDate)
	{
			let provider = oFF.QCanonicalDateProvider.getInstance();
		return provider.isSameOrBefore(oFF.QFactory.createCanonicalDateContext(queryModel, timeDimension, hierarchyName), firstCanonicalDate, secondCanonicalDate);
	}
};

oFF.QSelectionPlaceholder = function() {};
oFF.QSelectionPlaceholder.prototype = new oFF.XObject();
oFF.QSelectionPlaceholder.prototype._ff_c = "QSelectionPlaceholder";

oFF.QSelectionPlaceholder.ORIGINAL_LOW_VALUE = "originalLowValue";
oFF.QSelectionPlaceholder.prototype.m_originalLowValue = null;
oFF.QSelectionPlaceholder.prototype.getOriginalLowValue = function()
{
	return this.m_originalLowValue;
};
oFF.QSelectionPlaceholder.prototype.getStringRepresentation = function()
{
	return this.serializeToJson().getStringRepresentation();
};
oFF.QSelectionPlaceholder.prototype.serializeToJson = function()
{
	let selectionPlaceholderJson = oFF.PrFactory.createStructure();
	selectionPlaceholderJson.putString(oFF.QSelectionPlaceholder.ORIGINAL_LOW_VALUE, this.m_originalLowValue);
	return selectionPlaceholderJson;
};
oFF.QSelectionPlaceholder.prototype.setOriginalLowValue = function(originalLowValue)
{
	this.m_originalLowValue = originalLowValue;
};
oFF.QSelectionPlaceholder.prototype.setupSelectionPlaceholderFromStructure = function(selectionPlaceholderStructure)
{
	this.m_originalLowValue = selectionPlaceholderStructure.getStringByKey(oFF.QSelectionPlaceholder.ORIGINAL_LOW_VALUE);
};

oFF.QTimeDimensionUtil = {

	areFiscalEnabledAndCompatible:function(timeDim1, timeDim2)
	{
			return timeDim1.getFiscalEnabled() && timeDim2.getFiscalEnabled() && timeDim1.getFiscalShift() === timeDim2.getFiscalShift();
	},
	areHierarchyLevelsStructureSimilar:function(hier1, hier2)
	{
			let hier1Levels = hier1.getAllLevel();
		let hier2Levels = hier2.getAllLevel();
		if (hier1Levels.size() !== hier2Levels.size())
		{
			return false;
		}
		for (let i = 0; i < hier1Levels.size(); i++)
		{
			let hier1Level = hier1Levels.get(i);
			let hier2Level = hier2Levels.get(i);
			if (hier1Level.getLevelType() !== hier2Level.getLevelType())
			{
				return false;
			}
		}
		return true;
	},
	findAnyHierarchyLevelMatchingField:function(timeDimension, fieldMetadata)
	{
			let timeHierarchies = timeDimension.getLeveledHierarchies();
		if (timeHierarchies.size() === 0)
		{
			let iterator = timeDimension.getGroupingDimensions().getIterator();
			while (iterator.hasNext() && timeHierarchies.size() === 0)
			{
				let dimension = iterator.next();
				timeHierarchies = dimension.getLeveledHierarchies();
			}
		}
		for (let i = 0; i < timeHierarchies.size(); i++)
		{
			let matchingLevel = oFF.QTimeDimensionUtil.getHierarchyLevelMatchingField(timeDimension.getDimensionAccessor(), timeHierarchies.get(i), fieldMetadata);
			if (oFF.notNull(matchingLevel))
			{
				return matchingLevel;
			}
		}
		return null;
	},
	findFirstLeveledHierarchyWithLevelName:function(timeDimension, levelNameToFind)
	{
			let leveledHierarchies = timeDimension.getLeveledHierarchies();
		if (oFF.isNull(leveledHierarchies))
		{
			return null;
		}
		let leveledHierarchiesIterator = leveledHierarchies.getIterator();
		while (leveledHierarchiesIterator.hasNext())
		{
			let leveledHierarchy = leveledHierarchiesIterator.next();
			if (leveledHierarchy.getLevelByName(levelNameToFind) !== null)
			{
				return leveledHierarchy;
			}
		}
		return null;
	},
	findFirstLeveledHierarchyWithLevelType:function(timeDimension, levelTypeToFind)
	{
			let leveledHierarchies = timeDimension.getLeveledHierarchies();
		if (oFF.isNull(leveledHierarchies))
		{
			return null;
		}
		let leveledHierarchiesIterator = leveledHierarchies.getIterator();
		while (leveledHierarchiesIterator.hasNext())
		{
			let leveledHierarchy = leveledHierarchiesIterator.next();
			if (leveledHierarchy.getLevelByType(levelTypeToFind) !== null)
			{
				return leveledHierarchy;
			}
		}
		return null;
	},
	findHierarchiesWithMostMatchingLevelsByLevelType:function(candidateHierarchies, levelTypesToSearch)
	{
			let hierarchiesWithMostMatchingLevels = oFF.XList.create();
		let levelTypes = levelTypesToSearch.getValuesAsReadOnlyList();
		let maxNumOfMatchingevels = 0;
		for (let idxLeveledHierarchy = 0; idxLeveledHierarchy < candidateHierarchies.size(); idxLeveledHierarchy++)
		{
			let hierarchy = candidateHierarchies.get(idxLeveledHierarchy);
			let numOfMatchingLevels = 0;
			for (let i = 0; i < levelTypes.size(); i++)
			{
				if (hierarchy.getLevelByType(levelTypes.get(i)) !== null)
				{
					numOfMatchingLevels++;
				}
			}
			if (numOfMatchingLevels > maxNumOfMatchingevels)
			{
				hierarchiesWithMostMatchingLevels = oFF.XList.create();
				hierarchiesWithMostMatchingLevels.add(hierarchy);
				maxNumOfMatchingevels = numOfMatchingLevels;
			}
			else if (numOfMatchingLevels > 0 && numOfMatchingLevels === maxNumOfMatchingevels)
			{
				hierarchiesWithMostMatchingLevels.add(hierarchy);
			}
		}
		return hierarchiesWithMostMatchingLevels;
	},
	findHierarchyWithAllMatchingOrderedLevels:function(candidateHierarchies, hierarchyToMatch, orderedRequiredLevelNames)
	{
			let compatibleHierarchy = null;
		for (let idxLeveledHierarchy = 0; idxLeveledHierarchy < candidateHierarchies.size(); idxLeveledHierarchy++)
		{
			let candidateHierarchy = candidateHierarchies.get(idxLeveledHierarchy);
			let candidateHierarchyLevels = candidateHierarchy.getAllLevel();
			let numOfMatchingLevels = 0;
			for (let candidateIdx = 0; candidateIdx < candidateHierarchyLevels.size(); candidateIdx++)
			{
				let candidateHierarchyLevel = candidateHierarchyLevels.get(candidateIdx);
				if (oFF.XString.isEqual(candidateHierarchyLevel.getLevelDimensionName(), orderedRequiredLevelNames.get(numOfMatchingLevels)))
				{
					numOfMatchingLevels++;
				}
				if (numOfMatchingLevels === orderedRequiredLevelNames.size())
				{
					if (orderedRequiredLevelNames.size() === candidateHierarchyLevels.size() - 1 || oFF.QTimeDimensionUtil.areHierarchyLevelsStructureSimilar(hierarchyToMatch, candidateHierarchy))
					{
						return candidateHierarchy;
					}
					compatibleHierarchy = candidateHierarchy;
					break;
				}
			}
		}
		return compatibleHierarchy;
	},
	findHierarchyWithMostGranularLevel:function(leveledHierarchies)
	{
			let lowestLevelIndex = -1;
		let result = null;
		for (let i = 0; i < leveledHierarchies.size(); i++)
		{
			let leveledHierarchy = leveledHierarchies.get(i);
			if (leveledHierarchy.getMostGranularLevel().getLevelType().getLevelIndex() > lowestLevelIndex)
			{
				result = leveledHierarchy;
				lowestLevelIndex = result.getMostGranularLevel().getLevelType().getLevelIndex();
			}
		}
		return result;
	},
	findMostCompatibleHierarchy:function(timeDimension, levelTypesToMatch, fiscalSpaceType, matchBySameLevelCount)
	{
			let mostCompatibleHierarchy = null;
		let candidateHierarchies = oFF.XList.create();
		let levelTypesToSearch = levelTypesToMatch;
		let timeHierarchies = timeDimension.getLeveledHierarchies();
		let timeHierarchiesWithFiscalSpaceType = oFF.XList.create();
		for (let i = 0; i < timeHierarchies.size(); i++)
		{
			let timeHierarchy = timeHierarchies.get(i);
			if (fiscalSpaceType === oFF.FiscalSpaceType.FISCAL && oFF.QTimeDimensionUtil.isFiscalTimeHierarchy(timeHierarchy) || fiscalSpaceType === oFF.FiscalSpaceType.CALENDAR && !oFF.QTimeDimensionUtil.isFiscalTimeHierarchy(timeHierarchy))
			{
				timeHierarchiesWithFiscalSpaceType.add(timeHierarchy);
			}
		}
		while (candidateHierarchies.size() === 0 && levelTypesToSearch.size() > 0)
		{
			candidateHierarchies.addAll(oFF.QTimeDimensionUtil.findHierarchiesWithMostMatchingLevelsByLevelType(timeHierarchiesWithFiscalSpaceType, levelTypesToSearch));
			if (candidateHierarchies.size() === 0)
			{
				levelTypesToSearch = oFF.QTimeDimensionUtil.increaseGranularityOfLevelTypes(levelTypesToSearch);
			}
		}
		let candidateHierarchiesWithHighestLevelCount = oFF.XList.create();
		let matchingLevelSizeCandidate = null;
		if (matchBySameLevelCount)
		{
			let levelsTypesToMatchWithoutAll = oFF.XList.create();
			levelsTypesToMatchWithoutAll.addAll(levelTypesToMatch);
			levelsTypesToMatchWithoutAll.removeElement(oFF.HierarchyLevelType.ALL);
			matchingLevelSizeCandidate = oFF.XCollectionUtils.findFirst(candidateHierarchies, (candidateHierarchy) => {
				let candidateHierarchyLevelsWithoutAll = oFF.XList.create();
				candidateHierarchyLevelsWithoutAll.addAll(candidateHierarchy.getAllLevel());
				candidateHierarchyLevelsWithoutAll.removeElement(candidateHierarchy.getLevelByType(oFF.HierarchyLevelType.ALL));
				return candidateHierarchyLevelsWithoutAll.size() === levelsTypesToMatchWithoutAll.size();
			});
		}
		if (oFF.notNull(matchingLevelSizeCandidate))
		{
			candidateHierarchiesWithHighestLevelCount.add(matchingLevelSizeCandidate);
		}
		else
		{
			candidateHierarchiesWithHighestLevelCount.addAll(oFF.QTimeDimensionUtil.getHierarchiesWithHighestLevelCount(candidateHierarchies));
		}
		if (candidateHierarchiesWithHighestLevelCount.size() === 1)
		{
			mostCompatibleHierarchy = candidateHierarchiesWithHighestLevelCount.get(0);
		}
		else
		{
			mostCompatibleHierarchy = oFF.QTimeDimensionUtil.findHierarchyWithMostGranularLevel(candidateHierarchiesWithHighestLevelCount);
		}
		return mostCompatibleHierarchy;
	},
	getAllLevelNamesFilterLevelTypeAll:function(timeDimension)
	{
			let dimensionLevelNames = oFF.XHashSetOfString.create();
		let excludedLevelTypes = oFF.XList.create();
		excludedLevelTypes.add(oFF.HierarchyLevelType.ALL);
		let leveledHierarchies = timeDimension.getLeveledHierarchies();
		if (oFF.isNull(leveledHierarchies))
		{
			return dimensionLevelNames;
		}
		let levelHierarchyIterator = leveledHierarchies.getIterator();
		while (levelHierarchyIterator.hasNext())
		{
			let hierarchy = levelHierarchyIterator.next();
			dimensionLevelNames.addAll(hierarchy.getAllHierarchyLevelNames(excludedLevelTypes));
		}
		return dimensionLevelNames;
	},
	getFiscalSpaceType:function(sourceTimeDimension, sourceTimeDimensionHierarchyName, targetTimeDimension)
	{
			if (oFF.QTimeDimensionUtil.isFiscalTimeHierarchyName(sourceTimeDimensionHierarchyName) && oFF.QTimeDimensionUtil.areFiscalEnabledAndCompatible(sourceTimeDimension, targetTimeDimension))
		{
			return oFF.FiscalSpaceType.FISCAL;
		}
		else
		{
			return oFF.FiscalSpaceType.CALENDAR;
		}
	},
	getHierarchiesWithHighestLevelCount:function(leveledHierarchies)
	{
			let result = oFF.XList.create();
		let maxNumofLevels = 0;
		for (let i = 0; i < leveledHierarchies.size(); i++)
		{
			let leveledHierarchy = leveledHierarchies.get(i);
			let numOfLevels = leveledHierarchy.getAllLevel().size();
			if (numOfLevels >= maxNumofLevels)
			{
				if (numOfLevels > maxNumofLevels)
				{
					result = oFF.XList.create();
					maxNumofLevels = numOfLevels;
				}
				result.add(leveledHierarchy);
			}
		}
		return result;
	},
	getHierarchyLevelMatchingField:function(dimensionAccessor, hierarchy, fieldMetadata)
	{
			let levels = hierarchy.getHierarchyLevels();
		if (oFF.notNull(levels))
		{
			for (let idxLevel = 0; idxLevel < levels.size(); idxLevel++)
			{
				let level = levels.get(idxLevel);
				let levelName = level.getLevelName();
				let levelDimension = dimensionAccessor.getDimensionByName(levelName);
				let levelFlatKeyFieldName = null;
				let levelHierarchyKeyFieldName = null;
				if (oFF.notNull(levelDimension))
				{
					levelFlatKeyFieldName = levelDimension.getFlatKeyField().getName();
					levelHierarchyKeyFieldName = levelDimension.getHierarchyKeyField().getName();
				}
				if (oFF.XString.isEqual(levelName, fieldMetadata.getName()) || oFF.XString.isEqual(levelFlatKeyFieldName, fieldMetadata.getName()) || oFF.XString.isEqual(levelHierarchyKeyFieldName, fieldMetadata.getName()) || oFF.XStringUtils.isNotNullAndNotEmpty(fieldMetadata.getAliasName()) && (oFF.XString.isEqual(levelName, fieldMetadata.getAliasName()) || oFF.XString.isEqual(levelFlatKeyFieldName, fieldMetadata.getAliasName()) || oFF.XString.isEqual(levelHierarchyKeyFieldName, fieldMetadata.getAliasName())))
				{
					return level;
				}
			}
		}
		return null;
	},
	getTimeOperationGranularityFromHierarchyLevelName:function(queryModel, dimensionName, hierarchyLevelName)
	{
			let timeGranularity = null;
		let timeDimension = queryModel.getDimensionByName(dimensionName);
		let hierarchyLevel = null;
		if (oFF.isNull(timeDimension))
		{
			throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate3("Time dimension '", dimensionName, "' not found."));
		}
		if (oFF.isNull(hierarchyLevelName))
		{
			return oFF.QTimeOperationGranularity.PERIOD;
		}
		let leveledHierarchies = timeDimension.getLeveledHierarchies();
		if (oFF.notNull(leveledHierarchies))
		{
			let levelHierarchiesIter = leveledHierarchies.getIterator();
			while (levelHierarchiesIter.hasNext())
			{
				let leveledHierarchy = levelHierarchiesIter.next();
				hierarchyLevel = leveledHierarchy.getLevelByName(hierarchyLevelName);
				if (oFF.notNull(hierarchyLevel))
				{
					break;
				}
			}
		}
		else
		{
			throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate2(dimensionName, " dimension contains no leveled hierarchies"));
		}
		if (oFF.notNull(hierarchyLevel))
		{
			let levelType = hierarchyLevel.getLevelType();
			timeGranularity = oFF.QCanonicalDateUtil.convertHierarchyLevelTypeToTimeOperationGranularity(levelType);
		}
		else
		{
			throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate2("Invalid hierarchy level: ", hierarchyLevelName));
		}
		return timeGranularity;
	},
	hasFlexibleTimeGroupingDimension:function(dimension)
	{
			return oFF.XCollectionUtils.contains(dimension.getGroupingDimensions(), (groupingDimension) => {
			return oFF.QTimeDimensionUtil.isFlexibleTimeDimension(dimension);
		});
	},
	increaseGranularityOfLevelTypes:function(levelTypes)
	{
			let result = oFF.XSetOfNameObject.create();
		for (let iterator = levelTypes.getIterator(); iterator.hasNext(); )
		{
			let levelType = iterator.next();
			let moreGranularLevelType = oFF.QCanonicalDateUtil.getMoreGranularConvertibleLevelType(levelType);
			if (oFF.notNull(moreGranularLevelType))
			{
				result.add(moreGranularLevelType);
			}
		}
		return result;
	},
	isDateOrTimeLikeDimension:function(dimension)
	{
			if (dimension.getQueryModel().getSystemType() !== oFF.SystemType.BW && (dimension.getDimensionType() === oFF.DimensionType.TIME || dimension.getDimensionType() === oFF.DimensionType.DATE))
		{
			return true;
		}
		if (dimension.getQueryModel().getSystemType() === oFF.SystemType.BW && dimension.getLeveledHierarchies() !== null && !dimension.isCompound())
		{
			let leveledHierarchyIterator = dimension.getLeveledHierarchies().getIterator();
			while (leveledHierarchyIterator.hasNext())
			{
				let leveledHierarchy = leveledHierarchyIterator.next();
				let hierarchyLevels = leveledHierarchy.getHierarchyLevels();
				if (oFF.notNull(hierarchyLevels))
				{
					let hierarchyLevelIterator = hierarchyLevels.getIterator();
					while (hierarchyLevelIterator.hasNext())
					{
						let hierarchyLevel = hierarchyLevelIterator.next();
						let hierarchyLevelType = hierarchyLevel.getLevelType();
						if (hierarchyLevelType === oFF.HierarchyLevelType.TIME_YEAR || hierarchyLevelType === oFF.HierarchyLevelType.TIME_HALF_YEAR || hierarchyLevelType === oFF.HierarchyLevelType.TIME_QUARTER || hierarchyLevelType === oFF.HierarchyLevelType.TIME_MONTH || hierarchyLevelType === oFF.HierarchyLevelType.TIME_WEEK || hierarchyLevelType === oFF.HierarchyLevelType.TIME_DAY)
						{
							return true;
						}
					}
				}
			}
		}
		if (dimension.getModelCapabilities().supportsHierarchyMetadata() && dimension.getHierarchies() !== null)
		{
			let hierarchyIterator = dimension.getHierarchies().getObjectsIterator();
			while (hierarchyIterator.hasNext())
			{
				let levelHasTheSameNameAsDimensionName = false;
				let hasValidHierarchyLevelType = false;
				let hierarchy = hierarchyIterator.next();
				let levels = hierarchy.getHierarchyLevels();
				if (oFF.notNull(levels))
				{
					let levelIterator = levels.getIterator();
					while (levelIterator.hasNext())
					{
						let level = levelIterator.next();
						if (oFF.XString.isEqual(level.getLevelDimensionName(), dimension.getName()))
						{
							levelHasTheSameNameAsDimensionName = true;
						}
						let levelType = level.getLevelType();
						if (levelType === oFF.HierarchyLevelType.TIME_YEAR || levelType === oFF.HierarchyLevelType.TIME_HALF_YEAR || levelType === oFF.HierarchyLevelType.TIME_QUARTER || levelType === oFF.HierarchyLevelType.TIME_MONTH || levelType === oFF.HierarchyLevelType.TIME_WEEK || levelType === oFF.HierarchyLevelType.TIME_DAY)
						{
							hasValidHierarchyLevelType = true;
						}
					}
					if (!levelHasTheSameNameAsDimensionName && hasValidHierarchyLevelType)
					{
						return true;
					}
				}
			}
		}
		return false;
	},
	isFiscalTimeHierarchy:function(hierarchy)
	{
			return oFF.QTimeDimensionUtil.isFiscalTimeHierarchyName(hierarchy.getName());
	},
	isFiscalTimeHierarchyName:function(hierarchyName)
	{
			return oFF.notNull(hierarchyName) && (oFF.XString.startsWith(hierarchyName, oFF.QTimeHierarchyLevelName.FISCAL_HIERARCHY_PREFIX) || oFF.XString.startsWith(hierarchyName, oFF.QTimeHierarchyLevelName.FISCAL_HIERARCHY_WEEK_PATTERN_PREFIX));
	},
	isFiscalTimeWithRegularPeriod:function(dimension)
	{
			return oFF.notNull(dimension) && dimension.getSession().hasFeature(oFF.FeatureToggleOlap.DWC_FISCAL_TIME) && dimension.getDimensionType() === oFF.DimensionType.TIME && dimension.getLeveledHierarchies() !== null && dimension.getLeveledHierarchies().size() > 0 && dimension.getFieldBySemanticType("Semantics::fiscal.year") !== null && dimension.getFieldBySemanticType("Semantics::fiscal.yearPeriod.regular") !== null;
	},
	isFlexibleTimeDimension:function(timeDimension)
	{
			return timeDimension.isUserManaged() || timeDimension.isTimeConfigEnablePattern() || oFF.QTimeDimensionUtil.isFiscalTimeWithRegularPeriod(timeDimension);
	},
	mapFiscalHierarchyNameToCompatibleCalendarHierarchyName:function(fiscalHierarchyName)
	{
			if (oFF.XString.isEqual(fiscalHierarchyName, oFF.QTimeHierarchyLevelName.FYQP) || oFF.XString.isEqual(fiscalHierarchyName, oFF.QTimeHierarchyLevelName.FYP))
		{
			return oFF.QTimeHierarchyLevelName.YM;
		}
		else if (oFF.XString.isEqual(fiscalHierarchyName, oFF.QTimeHierarchyLevelName.FYQPD) || oFF.XString.isEqual(fiscalHierarchyName, oFF.QTimeHierarchyLevelName.FYPD))
		{
			return oFF.QTimeHierarchyLevelName.YMD;
		}
		throw oFF.XException.createIllegalArgumentException("fiscal hierarchy name provided is not supported");
	},
	setCartesianElementValues:function(cartesianElement, lowValue, highValue, field)
	{
			if (field.getValueType() === oFF.XValueType.DATE)
		{
			cartesianElement.getLow().setDate(oFF.XDate.createDateSafe(lowValue));
			if (oFF.XStringUtils.isNotNullAndNotEmpty(highValue))
			{
				cartesianElement.getHigh().setDate(oFF.XDate.createDateSafe(highValue));
			}
		}
		else
		{
			cartesianElement.setLowString(lowValue);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(highValue))
			{
				cartesianElement.setHighString(highValue);
			}
		}
	}
};

oFF.QTimeMemberKeyConversionResult = function() {};
oFF.QTimeMemberKeyConversionResult.prototype = new oFF.XObject();
oFF.QTimeMemberKeyConversionResult.prototype._ff_c = "QTimeMemberKeyConversionResult";

oFF.QTimeMemberKeyConversionResult.createFromMultiKeys = function(convertedKeys, hierarchyName, levelType)
{
	let result = new oFF.QTimeMemberKeyConversionResult();
	result.setupTimeMemberKeyConversionResult(hierarchyName, levelType);
	result.m_convertedKeys.addAll(convertedKeys);
	return result;
};
oFF.QTimeMemberKeyConversionResult.createFromRangeKeys = function(convertedStartKey, convertedEndKey, hierarchyName, levelType)
{
	let result = new oFF.QTimeMemberKeyConversionResult();
	result.setupTimeMemberKeyConversionResult(hierarchyName, levelType);
	result.m_convertedKeys.add(convertedStartKey);
	result.m_convertedKeys.add(convertedEndKey);
	result.m_isRange = true;
	return result;
};
oFF.QTimeMemberKeyConversionResult.createFromSingleKey = function(convertedKey, hierarchyName, levelType)
{
	let result = new oFF.QTimeMemberKeyConversionResult();
	result.setupTimeMemberKeyConversionResult(hierarchyName, levelType);
	result.m_convertedKeys.add(convertedKey);
	return result;
};
oFF.QTimeMemberKeyConversionResult.prototype.m_convertedKeys = null;
oFF.QTimeMemberKeyConversionResult.prototype.m_hierarchyName = null;
oFF.QTimeMemberKeyConversionResult.prototype.m_isRange = false;
oFF.QTimeMemberKeyConversionResult.prototype.m_levelType = null;
oFF.QTimeMemberKeyConversionResult.prototype.copyFrom = function(other, flags)
{
	let otherResult = other;
	this.m_convertedKeys.copyFrom(otherResult.m_convertedKeys, null);
	this.m_hierarchyName = otherResult.m_hierarchyName;
	this.m_levelType = otherResult.m_levelType;
	this.m_isRange = otherResult.m_isRange;
};
oFF.QTimeMemberKeyConversionResult.prototype.getFirstKey = function()
{
	if (this.m_convertedKeys.size() === 0)
	{
		return null;
	}
	return this.m_convertedKeys.get(0);
};
oFF.QTimeMemberKeyConversionResult.prototype.getHierarchyName = function()
{
	return this.m_hierarchyName;
};
oFF.QTimeMemberKeyConversionResult.prototype.getLevelType = function()
{
	return this.m_levelType;
};
oFF.QTimeMemberKeyConversionResult.prototype.getList = function()
{
	return this.m_convertedKeys;
};
oFF.QTimeMemberKeyConversionResult.prototype.getSecondKey = function()
{
	if (this.m_convertedKeys.size() > 1)
	{
		return this.m_convertedKeys.get(1);
	}
	else
	{
		return null;
	}
};
oFF.QTimeMemberKeyConversionResult.prototype.isFlat = function()
{
	return oFF.isNull(this.m_hierarchyName);
};
oFF.QTimeMemberKeyConversionResult.prototype.isRange = function()
{
	return this.m_isRange;
};
oFF.QTimeMemberKeyConversionResult.prototype.releaseObject = function()
{
	oFF.XObjectExt.release(this.m_convertedKeys);
	this.m_hierarchyName = null;
	this.m_levelType = null;
};
oFF.QTimeMemberKeyConversionResult.prototype.setupTimeMemberKeyConversionResult = function(hierarchyName, levelType)
{
	this.m_hierarchyName = hierarchyName;
	this.m_levelType = levelType;
	this.m_convertedKeys = oFF.XList.create();
	this.m_isRange = false;
};

oFF.QTimeMemberKeyConverter = function() {};
oFF.QTimeMemberKeyConverter.prototype = new oFF.XObject();
oFF.QTimeMemberKeyConverter.prototype._ff_c = "QTimeMemberKeyConverter";

oFF.QTimeMemberKeyConverter.create = function(sourceQueryModel, sourceTimeDimension, targetQueryModel, targetTimeDimension)
{
	let converter = new oFF.QTimeMemberKeyConverter();
	converter.m_sourceQueryModel = sourceQueryModel;
	converter.m_sourceTimeDimension = sourceTimeDimension;
	converter.m_targetQueryModel = targetQueryModel;
	converter.m_targetTimeDimension = targetTimeDimension;
	return converter;
};
oFF.QTimeMemberKeyConverter.prototype.m_sourceQueryModel = null;
oFF.QTimeMemberKeyConverter.prototype.m_sourceTimeDimension = null;
oFF.QTimeMemberKeyConverter.prototype.m_targetQueryModel = null;
oFF.QTimeMemberKeyConverter.prototype.m_targetTimeDimension = null;
oFF.QTimeMemberKeyConverter.prototype.convertAndFlattenRangeEndPoint = function(memberKey, memberKeyHierarchyName, memberKeyFieldMetadata, targetKeyFieldMetadata, targetHierarchyName, comparisonOperator, isRangeEnd)
{
	let canonicalDate;
	if (oFF.isNull(memberKeyHierarchyName))
	{
		let level = oFF.QTimeDimensionUtil.findAnyHierarchyLevelMatchingField(this.m_sourceTimeDimension, memberKeyFieldMetadata);
		canonicalDate = oFF.QCanonicalDateUtil.createCanonicalDateFromEntityValueInfo(this.m_sourceQueryModel, this.m_sourceTimeDimension, null, memberKey, level.getLevelType());
	}
	else
	{
		canonicalDate = oFF.QCanonicalDateUtil.createCanonicalDateFromEntityValue(this.m_sourceQueryModel, this.m_sourceTimeDimension, memberKeyHierarchyName, memberKey);
	}
	let originalLevelType = oFF.QCanonicalDateUtil.convertDateTimeGranularityToHierarchyLevelType(canonicalDate.getGranularity());
	let targetLevelType = originalLevelType;
	if (memberKeyFieldMetadata !== targetKeyFieldMetadata)
	{
		targetLevelType = oFF.QTimeDimensionUtil.findAnyHierarchyLevelMatchingField(this.m_sourceTimeDimension, targetKeyFieldMetadata).getLevelType();
	}
	let mostCompatibleTargetTimeHierarchy = this.m_targetTimeDimension.getLeveledHierarchy(targetHierarchyName);
	while (this.shouldIncreaseLevelGranularity(memberKeyHierarchyName, targetLevelType, canonicalDate, mostCompatibleTargetTimeHierarchy))
	{
		targetLevelType = oFF.QCanonicalDateUtil.getMoreGranularConvertibleLevelType(targetLevelType);
	}
	if (oFF.notNull(memberKeyHierarchyName) || originalLevelType !== targetLevelType)
	{
		let useLast = comparisonOperator === oFF.ComparisonOperator.LESS_EQUAL || comparisonOperator === oFF.ComparisonOperator.LESS_THAN || comparisonOperator === oFF.ComparisonOperator.BETWEEN && isRangeEnd;
		let convertedCanonicalDate = oFF.QCanonicalDateUtil.castCanonicalDateToLevel(this.m_sourceQueryModel, this.m_sourceTimeDimension, memberKeyHierarchyName, canonicalDate, targetLevelType, useLast);
		let convertedMemberKey = oFF.QCanonicalDateUtil.getEntityValueKeyFromCanonicalDate(this.m_targetQueryModel, this.m_targetTimeDimension, targetHierarchyName, convertedCanonicalDate);
		return oFF.QTimeMemberKeyConversionResult.createFromSingleKey(convertedMemberKey, null, targetLevelType);
	}
	return oFF.QTimeMemberKeyConversionResult.createFromSingleKey(memberKey, null, targetLevelType);
};
oFF.QTimeMemberKeyConverter.prototype.convertFiscalMemberKeyToCalendar = function(memberKey, memberKeyHierarchyName, memberKeyFieldMetadata, compatibleTargetCalendarHierarchyName)
{
	return this.convertFiscalMemberKeyToCalendarParams(memberKey, memberKeyHierarchyName, memberKeyFieldMetadata, compatibleTargetCalendarHierarchyName, false, false);
};
oFF.QTimeMemberKeyConverter.prototype.convertFiscalMemberKeyToCalendarParams = function(memberKey, memberKeyHierarchyName, memberKeyFieldMetadata, compatibleTargetCalendarHierarchyName, isRangeEndpoint, isRangeEnd)
{
	let canonicalDate;
	let hierarchyName = memberKeyHierarchyName;
	if (oFF.isNull(hierarchyName))
	{
		let level = oFF.QTimeDimensionUtil.findAnyHierarchyLevelMatchingField(this.m_sourceTimeDimension, memberKeyFieldMetadata);
		canonicalDate = oFF.QCanonicalDateUtil.createCanonicalDateFromEntityValueInfo(this.m_sourceQueryModel, this.m_sourceTimeDimension, null, memberKey, level.getLevelType());
		hierarchyName = level.getHierarchy().getName();
	}
	else
	{
		canonicalDate = oFF.QCanonicalDateUtil.createCanonicalDateFromEntityValue(this.m_sourceQueryModel, this.m_sourceTimeDimension, hierarchyName, memberKey);
	}
	let canonicalDateLevelType = oFF.QCanonicalDateUtil.convertDateTimeGranularityToHierarchyLevelType(canonicalDate.getGranularity());
	let fiscalCanonicalDatesToConvert = oFF.XList.create();
	if (canonicalDateLevelType === oFF.HierarchyLevelType.TIME_YEAR || canonicalDateLevelType === oFF.HierarchyLevelType.TIME_QUARTER)
	{
		let startMonthCanonicalDate = oFF.QCanonicalDateUtil.castCanonicalDateToLevel(this.m_sourceQueryModel, this.m_sourceTimeDimension, hierarchyName, canonicalDate, oFF.HierarchyLevelType.TIME_MONTH, isRangeEndpoint && isRangeEnd);
		fiscalCanonicalDatesToConvert.add(startMonthCanonicalDate);
		if (!isRangeEndpoint)
		{
			let endMonthCanonicalDate = oFF.QCanonicalDateUtil.castCanonicalDateToLevel(this.m_sourceQueryModel, this.m_sourceTimeDimension, hierarchyName, canonicalDate, oFF.HierarchyLevelType.TIME_MONTH, true);
			fiscalCanonicalDatesToConvert.add(endMonthCanonicalDate);
		}
	}
	else
	{
		fiscalCanonicalDatesToConvert.add(canonicalDate);
	}
	let calendarCanonicalDates = oFF.XList.create();
	for (let i = 0; i < fiscalCanonicalDatesToConvert.size(); i++)
	{
		let fiscalCanonicalDateToConvert = fiscalCanonicalDatesToConvert.get(i);
		let fiscalCanonicalDateToConvertLevelType = oFF.QCanonicalDateUtil.convertDateTimeGranularityToHierarchyLevelType(fiscalCanonicalDateToConvert.getGranularity());
		calendarCanonicalDates.add(oFF.QCanonicalDateUtil.convertCanonicalDateToTargetLevelAndFiscalSpace(this.m_sourceQueryModel, this.m_sourceTimeDimension, hierarchyName, fiscalCanonicalDateToConvert, fiscalCanonicalDateToConvertLevelType, oFF.FiscalSpaceType.CALENDAR));
	}
	let convertedCalendarSpaceMemberKeys = oFF.XList.create();
	let isFlatOutput = oFF.isNull(hierarchyName);
	if (calendarCanonicalDates.size() === 1)
	{
		convertedCalendarSpaceMemberKeys.add(this.createMemberKeyFromCanonicalDate(this.m_sourceQueryModel, this.m_sourceTimeDimension, compatibleTargetCalendarHierarchyName, calendarCanonicalDates.get(0), isFlatOutput));
	}
	else
	{
		let startCalendarCanonicalDate = calendarCanonicalDates.get(0);
		let endCalendarCanonicalDate = calendarCanonicalDates.get(1);
		let startCalendarCanonicalDateLevelType = oFF.QCanonicalDateUtil.convertDateTimeGranularityToHierarchyLevelType(startCalendarCanonicalDate.getGranularity());
		while (!oFF.QCanonicalDateUtil.isEqual(startCalendarCanonicalDate, endCalendarCanonicalDate))
		{
			convertedCalendarSpaceMemberKeys.add(this.createMemberKeyFromCanonicalDate(this.m_sourceQueryModel, this.m_sourceTimeDimension, compatibleTargetCalendarHierarchyName, startCalendarCanonicalDate, isFlatOutput));
			startCalendarCanonicalDate = oFF.QCanonicalDateUtil.incrementCanonicalDate(this.m_sourceQueryModel, this.m_sourceTimeDimension, compatibleTargetCalendarHierarchyName, startCalendarCanonicalDate, 1, startCalendarCanonicalDateLevelType);
		}
		convertedCalendarSpaceMemberKeys.add(this.createMemberKeyFromCanonicalDate(this.m_sourceQueryModel, this.m_sourceTimeDimension, compatibleTargetCalendarHierarchyName, startCalendarCanonicalDate, isFlatOutput));
	}
	let resultLevelType = oFF.QCanonicalDateUtil.convertDateTimeGranularityToHierarchyLevelType(calendarCanonicalDates.get(0).getGranularity());
	return oFF.QTimeMemberKeyConversionResult.createFromMultiKeys(convertedCalendarSpaceMemberKeys, isFlatOutput ? null : compatibleTargetCalendarHierarchyName, resultLevelType);
};
oFF.QTimeMemberKeyConverter.prototype.convertFiscalRangeEndPointToCalendar = function(memberKey, memberKeyHierarchyName, memberKeyFieldMetadata, compatibleTargetCalendarHierarchyName, isRangeEnd)
{
	return this.convertFiscalMemberKeyToCalendarParams(memberKey, memberKeyHierarchyName, memberKeyFieldMetadata, compatibleTargetCalendarHierarchyName, true, isRangeEnd);
};
oFF.QTimeMemberKeyConverter.prototype.convertToFlatMemberKey = function(memberKey, memberKeyHierarchyName, memberKeyFieldMetadata, targetFlatLevelType, targetHierarchyName)
{
	let canonicalDate = this.getCanonicalDateFromMemberKey(memberKey, memberKeyHierarchyName, memberKeyFieldMetadata);
	let canonicalDateLevelType = oFF.QCanonicalDateUtil.convertDateTimeGranularityToHierarchyLevelType(canonicalDate.getGranularity());
	if (targetFlatLevelType.getLevelIndex() === canonicalDateLevelType.getLevelIndex())
	{
		let flatTargetTimeMemberKey = oFF.QCanonicalDateUtil.getEntityValueKeyFromCanonicalDate(this.m_targetQueryModel, this.m_targetTimeDimension, targetHierarchyName, canonicalDate);
		return oFF.QTimeMemberKeyConversionResult.createFromSingleKey(flatTargetTimeMemberKey, null, canonicalDateLevelType);
	}
	else if (targetFlatLevelType.getLevelIndex() > canonicalDateLevelType.getLevelIndex())
	{
		let startCanonicalDateFlat = oFF.QCanonicalDateUtil.castCanonicalDateToLevel(this.m_sourceQueryModel, this.m_sourceTimeDimension, memberKeyHierarchyName, canonicalDate, targetFlatLevelType, false);
		let endCanonicalDateFlat = oFF.QCanonicalDateUtil.castCanonicalDateToLevel(this.m_sourceQueryModel, this.m_sourceTimeDimension, memberKeyHierarchyName, canonicalDate, targetFlatLevelType, true);
		let startFlatTargetTimeMemberKey = oFF.QCanonicalDateUtil.getEntityValueKeyFromCanonicalDate(this.m_targetQueryModel, this.m_targetTimeDimension, targetHierarchyName, startCanonicalDateFlat);
		let endFlatTargetTimeMemberKey = oFF.QCanonicalDateUtil.getEntityValueKeyFromCanonicalDate(this.m_targetQueryModel, this.m_targetTimeDimension, targetHierarchyName, endCanonicalDateFlat);
		return oFF.QTimeMemberKeyConversionResult.createFromRangeKeys(startFlatTargetTimeMemberKey, endFlatTargetTimeMemberKey, null, targetFlatLevelType);
	}
	return null;
};
oFF.QTimeMemberKeyConverter.prototype.convertToHierarchyMemberKey = function(memberKey, memberKeyHierarchyName, memberKeyFieldMetadata, targetHierarchyName)
{
	let canonicalDate = this.getCanonicalDateFromMemberKey(memberKey, memberKeyHierarchyName, memberKeyFieldMetadata);
	let canonicalDateLevelType = oFF.QCanonicalDateUtil.convertDateTimeGranularityToHierarchyLevelType(canonicalDate.getGranularity());
	let targetHierarchy = this.m_targetTimeDimension.getLeveledHierarchy(targetHierarchyName);
	if (targetHierarchy.getLevelByType(canonicalDateLevelType) !== null)
	{
		let targetTimeMemberKey = oFF.QCanonicalDateUtil.createEntityValueFromCanonicalDate(this.m_targetQueryModel, this.m_targetTimeDimension, targetHierarchyName, canonicalDate);
		return oFF.QTimeMemberKeyConversionResult.createFromSingleKey(targetTimeMemberKey, targetHierarchyName, canonicalDateLevelType);
	}
	else if (targetHierarchy.getMostGranularLevel().getLevelType().getLevelIndex() > canonicalDateLevelType.getLevelIndex())
	{
		let targetLevelType = oFF.QCanonicalDateUtil.getMoreGranularConvertibleLevelType(canonicalDateLevelType);
		while (oFF.notNull(targetLevelType) && targetHierarchy.getMostGranularLevel().getLevelType().getLevelIndex() > targetLevelType.getLevelIndex() && targetHierarchy.getLevelByType(targetLevelType) === null)
		{
			targetLevelType = oFF.QCanonicalDateUtil.getMoreGranularConvertibleLevelType(targetLevelType);
		}
		if (oFF.notNull(targetLevelType) && targetHierarchy.getLevelByType(targetLevelType) !== null)
		{
			let startCanonicalDate = oFF.QCanonicalDateUtil.castCanonicalDateToLevel(this.m_sourceQueryModel, this.m_sourceTimeDimension, memberKeyHierarchyName, canonicalDate, targetLevelType, false);
			let endCanonicalDate = oFF.QCanonicalDateUtil.castCanonicalDateToLevel(this.m_sourceQueryModel, this.m_sourceTimeDimension, memberKeyHierarchyName, canonicalDate, targetLevelType, true);
			let startTargetTimeMemberKey = oFF.QCanonicalDateUtil.getEntityValueKeyFromCanonicalDate(this.m_targetQueryModel, this.m_targetTimeDimension, targetHierarchyName, startCanonicalDate);
			let endTargetTimeMemberKey = oFF.QCanonicalDateUtil.getEntityValueKeyFromCanonicalDate(this.m_targetQueryModel, this.m_targetTimeDimension, targetHierarchyName, endCanonicalDate);
			return oFF.QTimeMemberKeyConversionResult.createFromRangeKeys(startTargetTimeMemberKey, endTargetTimeMemberKey, null, targetLevelType);
		}
	}
	return null;
};
oFF.QTimeMemberKeyConverter.prototype.copyFrom = function(other, flags)
{
	let xOther = other;
	this.m_sourceQueryModel = xOther.m_sourceQueryModel;
	this.m_sourceTimeDimension = xOther.m_sourceTimeDimension;
	this.m_targetQueryModel = xOther.m_targetQueryModel;
	this.m_targetTimeDimension = xOther.m_targetTimeDimension;
};
oFF.QTimeMemberKeyConverter.prototype.createMemberKeyFromCanonicalDate = function(queryModel, timeDimension, hierarchyName, canonicalDate, shouldCreateFlatKey)
{
	if (shouldCreateFlatKey)
	{
		return oFF.QCanonicalDateUtil.getEntityValueKeyFromCanonicalDate(queryModel, timeDimension, hierarchyName, canonicalDate);
	}
	else
	{
		return oFF.QCanonicalDateUtil.createEntityValueFromCanonicalDate(queryModel, timeDimension, hierarchyName, canonicalDate);
	}
};
oFF.QTimeMemberKeyConverter.prototype.getCanonicalDateFromMemberKey = function(memberKey, memberKeyHierarchyName, memberKeyFieldMetadata)
{
	if (oFF.isNull(memberKeyHierarchyName))
	{
		let level = oFF.QTimeDimensionUtil.findAnyHierarchyLevelMatchingField(this.m_sourceTimeDimension, memberKeyFieldMetadata);
		return oFF.QCanonicalDateUtil.createCanonicalDateFromEntityValueInfo(this.m_sourceQueryModel, this.m_sourceTimeDimension, memberKeyHierarchyName, memberKey, level.getLevelType());
	}
	else
	{
		return oFF.QCanonicalDateUtil.createCanonicalDateFromEntityValue(this.m_sourceQueryModel, this.m_sourceTimeDimension, memberKeyHierarchyName, memberKey);
	}
};
oFF.QTimeMemberKeyConverter.prototype.releaseObject = function()
{
	this.m_sourceQueryModel = null;
	this.m_sourceTimeDimension = null;
	this.m_targetQueryModel = null;
	this.m_targetTimeDimension = null;
};
oFF.QTimeMemberKeyConverter.prototype.shouldIncreaseLevelGranularity = function(hierarchyName, levelType, canonicalDate, hierarchyToCheck)
{
	return hierarchyToCheck.getLevelByType(levelType) === null || levelType === oFF.HierarchyLevelType.TIME_HALF_YEAR || levelType === oFF.HierarchyLevelType.TIME_WEEK && oFF.QCanonicalDateUtil.doesCanonicalDateSpanAcrossYears(this.m_sourceQueryModel, this.m_sourceTimeDimension, hierarchyName, canonicalDate);
};

oFF.QRequestSettings = function() {};
oFF.QRequestSettings.prototype = new oFF.XObject();
oFF.QRequestSettings.prototype._ff_c = "QRequestSettings";

oFF.QRequestSettings.create = function(offset, windowSize, isHierarchyShot)
{
	let newObj = new oFF.QRequestSettings();
	newObj.m_offset = offset;
	newObj.m_windowSize = windowSize;
	newObj.m_isHierarchyShot = isHierarchyShot;
	return newObj;
};
oFF.QRequestSettings.prototype.m_isDeltaDrill = false;
oFF.QRequestSettings.prototype.m_isHierarchyShot = false;
oFF.QRequestSettings.prototype.m_offset = 0;
oFF.QRequestSettings.prototype.m_windowSize = 0;
oFF.QRequestSettings.prototype.getOffset = function()
{
	return this.m_offset;
};
oFF.QRequestSettings.prototype.getWindowSize = function()
{
	return this.m_windowSize;
};
oFF.QRequestSettings.prototype.isDeltaDrill = function()
{
	return this.m_isDeltaDrill;
};
oFF.QRequestSettings.prototype.isHierarchyAssignedAndActive = function()
{
	return this.m_isHierarchyShot;
};
oFF.QRequestSettings.prototype.setDeltaDrill = function(isDeltaDrill)
{
	this.m_isDeltaDrill = isDeltaDrill;
};

oFF.QCustomVariableConfig = function() {};
oFF.QCustomVariableConfig.prototype = new oFF.XObject();
oFF.QCustomVariableConfig.prototype._ff_c = "QCustomVariableConfig";

oFF.QCustomVariableConfig.createConfig = function(queryManager)
{
	let obj = new oFF.QCustomVariableConfig();
	obj.m_queryManager = queryManager;
	return obj;
};
oFF.QCustomVariableConfig.prototype.m_defaultValues = null;
oFF.QCustomVariableConfig.prototype.m_isMandatory = false;
oFF.QCustomVariableConfig.prototype.m_queryManager = null;
oFF.QCustomVariableConfig.prototype.m_supportsMultipleValues = false;
oFF.QCustomVariableConfig.prototype.createOptionsListVariable = function(name, text, options)
{
	if (this.m_queryManager.getVariable(name) !== null)
	{
		throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate3("variable with name ", name, " already exists"));
	}
	let variableContainer = this.m_queryManager.getVariableContainer();
	let variable = oFF.QSimpleTypeVariable.createOptionListVariable(variableContainer, variableContainer, name, text, this.m_supportsMultipleValues);
	for (let i = 0; i < options.size(); i++)
	{
		let option = options.get(i);
		variable.createAndAddOption(option.getFirstString(), option.getSecondString());
	}
	if (oFF.XCollectionUtils.hasElements(this.m_defaultValues))
	{
		for (let j = 0; j < this.m_defaultValues.size(); j++)
		{
			let value = this.m_defaultValues.get(j);
			variable.addOptionByName(value.getStringRepresentation());
		}
	}
	this.finalizeVariable(variableContainer, variable);
	return variable;
};
oFF.QCustomVariableConfig.prototype.finalizeVariable = function(variableManager, variableBase)
{
	variableBase.setCustomVariable(true);
	variableBase.setInputEnabled(true);
	variableBase.setMandatory(this.m_isMandatory);
	variableManager.addVariable(variableBase);
};
oFF.QCustomVariableConfig.prototype.releaseObject = function()
{
	this.m_queryManager = null;
	this.m_defaultValues = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.QCustomVariableConfig.prototype.setDefaultValues = function(defaultValues)
{
	this.m_defaultValues = defaultValues;
};
oFF.QCustomVariableConfig.prototype.setMandatory = function(mandatory)
{
	this.m_isMandatory = mandatory;
};
oFF.QCustomVariableConfig.prototype.setSupportsMultipleValues = function(supportsMultipleValues)
{
	this.m_supportsMultipleValues = supportsMultipleValues;
};

oFF.QTechnicalVariableNames = {

	NAMES:null,
	TECHNICAL_SUFFIXES:null,
	TECHNICAL_VARIABLES_CURRENT_DATE:"Current.Date",
	TECHNICAL_VARIABLES_HIERARCHY_DEFAULT_DUE_DATE:"0DAT",
	TECHNICAL_VARIABLES_INPUTSCHEDULE_FILTER:"InputSchedule.Filter",
	TECHNICAL_VARIABLES_PREFIX_SIGNEDDATA:"SignedData",
	TECHNICAL_VARIABLES_PREFIX_SIGNEDDATA_MISSING_RATE:"SignedDataMissingRate",
	TECHNICAL_VARIABLES_PREFIX_SIGNEDDATA_OTHER:"SignedDataOther",
	TECHNICAL_VARIABLES_SUFFIX_CATEGORY:".Category",
	TECHNICAL_VARIABLES_SUFFIX_CURRENCY:".Currency",
	TECHNICAL_VARIABLES_SUFFIX_CURRENT_PERIOD:".Current.Period",
	TECHNICAL_VARIABLES_SUFFIX_DATE:".Date",
	TECHNICAL_VARIABLES_SUFFIX_MONTHDELTA:".MonthDelta",
	TECHNICAL_VARIABLES_SUFFIX_RATETYPE:".RateType",
	TECHNICAL_VARIABLES_SUFFIX_RATEVERSION:".RateVersion",
	TECHNICAL_VARIABLES_SUFFIX_USEPRECONVERTED:".UsePreConverted",
	addTechnicalVariables:function(list, prefix)
	{
			for (let i = 0; i < oFF.QTechnicalVariableNames.TECHNICAL_SUFFIXES.size(); i++)
		{
			list.add(oFF.XStringUtils.concatenate2(prefix, oFF.QTechnicalVariableNames.TECHNICAL_SUFFIXES.get(i)));
		}
	},
	isTechnicalVariableName:function(name)
	{
			if (oFF.XStringUtils.isNullOrEmpty(name))
		{
			return false;
		}
		if (oFF.QTechnicalVariableNames.NAMES.contains(name))
		{
			return true;
		}
		if (oFF.XString.startsWith(name, oFF.QTechnicalVariableNames.TECHNICAL_VARIABLES_PREFIX_SIGNEDDATA_OTHER))
		{
			for (let i = 0; i < oFF.QTechnicalVariableNames.TECHNICAL_SUFFIXES.size(); i++)
			{
				if (oFF.XString.endsWith(name, oFF.QTechnicalVariableNames.TECHNICAL_SUFFIXES.get(i)))
				{
					let nameWithoutPreAndSuffix = oFF.XString.replace(oFF.XString.replace(name, oFF.QTechnicalVariableNames.TECHNICAL_VARIABLES_PREFIX_SIGNEDDATA_OTHER, ""), oFF.QTechnicalVariableNames.TECHNICAL_SUFFIXES.get(i), "");
					if (oFF.XInteger.convertFromStringWithDefault(nameWithoutPreAndSuffix, -1) !== -1)
					{
						return true;
					}
				}
			}
		}
		if (oFF.XString.endsWith(name, oFF.QTechnicalVariableNames.TECHNICAL_VARIABLES_SUFFIX_CURRENT_PERIOD))
		{
			return true;
		}
		return false;
	},
	staticSetup:function()
	{
			oFF.QTechnicalVariableNames.TECHNICAL_SUFFIXES = oFF.XList.create();
		oFF.QTechnicalVariableNames.TECHNICAL_SUFFIXES.add(oFF.QTechnicalVariableNames.TECHNICAL_VARIABLES_SUFFIX_CURRENCY);
		oFF.QTechnicalVariableNames.TECHNICAL_SUFFIXES.add(oFF.QTechnicalVariableNames.TECHNICAL_VARIABLES_SUFFIX_DATE);
		oFF.QTechnicalVariableNames.TECHNICAL_SUFFIXES.add(oFF.QTechnicalVariableNames.TECHNICAL_VARIABLES_SUFFIX_MONTHDELTA);
		oFF.QTechnicalVariableNames.TECHNICAL_SUFFIXES.add(oFF.QTechnicalVariableNames.TECHNICAL_VARIABLES_SUFFIX_RATETYPE);
		oFF.QTechnicalVariableNames.TECHNICAL_SUFFIXES.add(oFF.QTechnicalVariableNames.TECHNICAL_VARIABLES_SUFFIX_CATEGORY);
		oFF.QTechnicalVariableNames.TECHNICAL_SUFFIXES.add(oFF.QTechnicalVariableNames.TECHNICAL_VARIABLES_SUFFIX_USEPRECONVERTED);
		oFF.QTechnicalVariableNames.TECHNICAL_SUFFIXES.add(oFF.QTechnicalVariableNames.TECHNICAL_VARIABLES_SUFFIX_RATEVERSION);
		oFF.QTechnicalVariableNames.NAMES = oFF.XList.create();
		oFF.QTechnicalVariableNames.NAMES.add(oFF.QTechnicalVariableNames.TECHNICAL_VARIABLES_INPUTSCHEDULE_FILTER);
		oFF.QTechnicalVariableNames.NAMES.add(oFF.QTechnicalVariableNames.TECHNICAL_VARIABLES_CURRENT_DATE);
		oFF.QTechnicalVariableNames.NAMES.add(oFF.QTechnicalVariableNames.TECHNICAL_VARIABLES_HIERARCHY_DEFAULT_DUE_DATE);
		oFF.QTechnicalVariableNames.addTechnicalVariables(oFF.QTechnicalVariableNames.NAMES, oFF.QTechnicalVariableNames.TECHNICAL_VARIABLES_PREFIX_SIGNEDDATA);
		oFF.QTechnicalVariableNames.addTechnicalVariables(oFF.QTechnicalVariableNames.NAMES, oFF.QTechnicalVariableNames.TECHNICAL_VARIABLES_PREFIX_SIGNEDDATA_MISSING_RATE);
		oFF.QTechnicalVariableNames.addTechnicalVariables(oFF.QTechnicalVariableNames.NAMES, oFF.QTechnicalVariableNames.TECHNICAL_VARIABLES_PREFIX_SIGNEDDATA_OTHER);
	}
};

oFF.XTransientVisualizationApplicationSettings = function() {};
oFF.XTransientVisualizationApplicationSettings.prototype = new oFF.XObject();
oFF.XTransientVisualizationApplicationSettings.prototype._ff_c = "XTransientVisualizationApplicationSettings";

oFF.XTransientVisualizationApplicationSettings.MEMBER_SORT_ICONS_EXTENSIVE = 1;
oFF.XTransientVisualizationApplicationSettings.MEMBER_SORT_ICONS_MAXIMAL = 2;
oFF.XTransientVisualizationApplicationSettings.MEMBER_SORT_ICONS_MINIMAL = 0;
oFF.XTransientVisualizationApplicationSettings.MEMBER_SORT_ICONS_NONE = -1;
oFF.XTransientVisualizationApplicationSettings.create = function()
{
	let instance = new oFF.XTransientVisualizationApplicationSettings();
	instance.setup();
	return instance;
};
oFF.XTransientVisualizationApplicationSettings.prototype.m_derivePercentageFromShift = false;
oFF.XTransientVisualizationApplicationSettings.prototype.m_maxColumns = 0;
oFF.XTransientVisualizationApplicationSettings.prototype.m_maxRows = 0;
oFF.XTransientVisualizationApplicationSettings.prototype.m_memberSortIcons = 0;
oFF.XTransientVisualizationApplicationSettings.prototype.m_minColumnsFetch = 0;
oFF.XTransientVisualizationApplicationSettings.prototype.m_minRowsFetch = 0;
oFF.XTransientVisualizationApplicationSettings.prototype.m_optimizedTableDragDropExperience = false;
oFF.XTransientVisualizationApplicationSettings.prototype.m_overwriteTexts = null;
oFF.XTransientVisualizationApplicationSettings.prototype.m_showCommentIcons = false;
oFF.XTransientVisualizationApplicationSettings.prototype.m_showHyperlinks = false;
oFF.XTransientVisualizationApplicationSettings.prototype.m_showImages = false;
oFF.XTransientVisualizationApplicationSettings.prototype.m_skipTableCellWidthCalc = false;
oFF.XTransientVisualizationApplicationSettings.prototype.m_supportCommentDocuments = false;
oFF.XTransientVisualizationApplicationSettings.prototype.m_tileColumnsPadding = 0;
oFF.XTransientVisualizationApplicationSettings.prototype.m_tileRowsPadding = 0;
oFF.XTransientVisualizationApplicationSettings.prototype.m_userProfile = null;
oFF.XTransientVisualizationApplicationSettings.prototype.m_widgetHeight = 0;
oFF.XTransientVisualizationApplicationSettings.prototype.m_widgetWidth = 0;
oFF.XTransientVisualizationApplicationSettings.prototype.copyFrom = function(other, flags)
{
	let origObj = other;
	this.m_widgetHeight = origObj.m_widgetHeight;
	this.m_widgetWidth = origObj.m_widgetWidth;
	this.m_userProfile = origObj.m_userProfile;
	this.m_showHyperlinks = origObj.m_showHyperlinks;
	this.m_showImages = origObj.m_showImages;
	this.m_showCommentIcons = origObj.m_showCommentIcons;
	this.m_overwriteTexts = origObj.m_overwriteTexts.createMapByStringCopy();
	this.m_maxColumns = origObj.m_maxColumns;
	this.m_maxRows = origObj.m_maxRows;
	this.m_minColumnsFetch = origObj.m_minColumnsFetch;
	this.m_minRowsFetch = origObj.m_minRowsFetch;
	this.m_tileColumnsPadding = origObj.m_tileColumnsPadding;
	this.m_tileRowsPadding = origObj.m_tileRowsPadding;
	this.m_memberSortIcons = origObj.m_memberSortIcons;
	this.m_supportCommentDocuments = origObj.m_supportCommentDocuments;
	this.m_derivePercentageFromShift = origObj.m_derivePercentageFromShift;
	this.m_optimizedTableDragDropExperience = origObj.m_optimizedTableDragDropExperience;
	this.m_skipTableCellWidthCalc = origObj.m_skipTableCellWidthCalc;
};
oFF.XTransientVisualizationApplicationSettings.prototype.getMaxColumns = function()
{
	return this.m_maxColumns;
};
oFF.XTransientVisualizationApplicationSettings.prototype.getMaxRows = function()
{
	return this.m_maxRows;
};
oFF.XTransientVisualizationApplicationSettings.prototype.getMemberSortIconsLevel = function()
{
	return this.m_memberSortIcons;
};
oFF.XTransientVisualizationApplicationSettings.prototype.getMinColumnsFetch = function()
{
	return this.m_minColumnsFetch;
};
oFF.XTransientVisualizationApplicationSettings.prototype.getMinRowsFetch = function()
{
	return this.m_minRowsFetch;
};
oFF.XTransientVisualizationApplicationSettings.prototype.getOverwriteTexts = function()
{
	return this.m_overwriteTexts;
};
oFF.XTransientVisualizationApplicationSettings.prototype.getTileColumnsPadding = function()
{
	return this.m_tileColumnsPadding;
};
oFF.XTransientVisualizationApplicationSettings.prototype.getTileRowsPadding = function()
{
	return this.m_tileRowsPadding;
};
oFF.XTransientVisualizationApplicationSettings.prototype.getUserProfile = function()
{
	return this.m_userProfile;
};
oFF.XTransientVisualizationApplicationSettings.prototype.getWidgetHeight = function()
{
	return this.m_widgetHeight;
};
oFF.XTransientVisualizationApplicationSettings.prototype.getWidgetWidth = function()
{
	return this.m_widgetWidth;
};
oFF.XTransientVisualizationApplicationSettings.prototype.isDerivePercentageFromShift = function()
{
	return this.m_derivePercentageFromShift;
};
oFF.XTransientVisualizationApplicationSettings.prototype.isMemberSortIconsExtensive = function()
{
	return this.m_memberSortIcons === oFF.XTransientVisualizationApplicationSettings.MEMBER_SORT_ICONS_EXTENSIVE;
};
oFF.XTransientVisualizationApplicationSettings.prototype.isMemberSortIconsMaximal = function()
{
	return this.m_memberSortIcons === oFF.XTransientVisualizationApplicationSettings.MEMBER_SORT_ICONS_MAXIMAL;
};
oFF.XTransientVisualizationApplicationSettings.prototype.isMemberSortIconsMinimal = function()
{
	return this.m_memberSortIcons === oFF.XTransientVisualizationApplicationSettings.MEMBER_SORT_ICONS_MINIMAL;
};
oFF.XTransientVisualizationApplicationSettings.prototype.isMemberSortIconsNone = function()
{
	return this.m_memberSortIcons === oFF.XTransientVisualizationApplicationSettings.MEMBER_SORT_ICONS_NONE;
};
oFF.XTransientVisualizationApplicationSettings.prototype.isOptimizedTableDragDropExperience = function()
{
	return this.m_optimizedTableDragDropExperience;
};
oFF.XTransientVisualizationApplicationSettings.prototype.isShowCommentIcons = function()
{
	return this.m_showCommentIcons;
};
oFF.XTransientVisualizationApplicationSettings.prototype.isShowHyperlinks = function()
{
	return this.m_showHyperlinks;
};
oFF.XTransientVisualizationApplicationSettings.prototype.isShowImages = function()
{
	return this.m_showImages;
};
oFF.XTransientVisualizationApplicationSettings.prototype.isSupportCommentDocuments = function()
{
	return this.m_supportCommentDocuments;
};
oFF.XTransientVisualizationApplicationSettings.prototype.putOverwriteText = function(key, value)
{
	this.m_overwriteTexts.put(key, value);
};
oFF.XTransientVisualizationApplicationSettings.prototype.setDerivePercentageFromShift = function(derivePercentageFromShift)
{
	this.m_derivePercentageFromShift = derivePercentageFromShift;
};
oFF.XTransientVisualizationApplicationSettings.prototype.setMaxColumns = function(maxColumns)
{
	this.m_maxColumns = maxColumns;
};
oFF.XTransientVisualizationApplicationSettings.prototype.setMaxRows = function(maxRows)
{
	this.m_maxRows = maxRows;
};
oFF.XTransientVisualizationApplicationSettings.prototype.setMemberSortIconsExtensive = function()
{
	this.m_memberSortIcons = oFF.XTransientVisualizationApplicationSettings.MEMBER_SORT_ICONS_EXTENSIVE;
};
oFF.XTransientVisualizationApplicationSettings.prototype.setMemberSortIconsMaximal = function()
{
	this.m_memberSortIcons = oFF.XTransientVisualizationApplicationSettings.MEMBER_SORT_ICONS_MAXIMAL;
};
oFF.XTransientVisualizationApplicationSettings.prototype.setMemberSortIconsMinimal = function()
{
	this.m_memberSortIcons = oFF.XTransientVisualizationApplicationSettings.MEMBER_SORT_ICONS_MINIMAL;
};
oFF.XTransientVisualizationApplicationSettings.prototype.setMemberSortIconsNone = function()
{
	this.m_memberSortIcons = oFF.XTransientVisualizationApplicationSettings.MEMBER_SORT_ICONS_NONE;
};
oFF.XTransientVisualizationApplicationSettings.prototype.setMinColumnsFetch = function(minColumnsFetch)
{
	this.m_minColumnsFetch = minColumnsFetch;
};
oFF.XTransientVisualizationApplicationSettings.prototype.setMinRowsFetch = function(minRowsFetch)
{
	this.m_minRowsFetch = minRowsFetch;
};
oFF.XTransientVisualizationApplicationSettings.prototype.setOptimizedTableDragDropExperience = function(optimizedTableDragDropExperience)
{
	this.m_optimizedTableDragDropExperience = optimizedTableDragDropExperience;
};
oFF.XTransientVisualizationApplicationSettings.prototype.setShowCommentIcons = function(showCommentIcons)
{
	this.m_showCommentIcons = showCommentIcons;
};
oFF.XTransientVisualizationApplicationSettings.prototype.setShowHyperlinks = function(showHyperlinks)
{
	this.m_showHyperlinks = showHyperlinks;
};
oFF.XTransientVisualizationApplicationSettings.prototype.setShowImages = function(showImages)
{
	this.m_showImages = showImages;
};
oFF.XTransientVisualizationApplicationSettings.prototype.setSkipTableCellWidthCalc = function(skipCellWidthCalc)
{
	this.m_skipTableCellWidthCalc = skipCellWidthCalc;
};
oFF.XTransientVisualizationApplicationSettings.prototype.setSupportCommentDocuments = function(supportCommentDocuments)
{
	this.m_supportCommentDocuments = supportCommentDocuments;
};
oFF.XTransientVisualizationApplicationSettings.prototype.setTileColumnsPadding = function(tileColumnsPadding)
{
	this.m_tileColumnsPadding = tileColumnsPadding;
};
oFF.XTransientVisualizationApplicationSettings.prototype.setTileRowsPadding = function(tileRowsPadding)
{
	this.m_tileRowsPadding = tileRowsPadding;
};
oFF.XTransientVisualizationApplicationSettings.prototype.setUserProfile = function(userProfile)
{
	this.m_userProfile = userProfile;
};
oFF.XTransientVisualizationApplicationSettings.prototype.setWidgetHeight = function(widgetHeight)
{
	this.m_widgetHeight = widgetHeight;
};
oFF.XTransientVisualizationApplicationSettings.prototype.setWidgetWidth = function(widgetWidth)
{
	this.m_widgetWidth = widgetWidth;
};
oFF.XTransientVisualizationApplicationSettings.prototype.setup = function()
{
	oFF.XObject.prototype.setup.call( this );
	this.m_overwriteTexts = oFF.XHashMapByString.create();
};
oFF.XTransientVisualizationApplicationSettings.prototype.skipTableCellWidthCalc = function()
{
	return this.m_skipTableCellWidthCalc;
};

oFF.QDataPointMatcher = function() {};
oFF.QDataPointMatcher.prototype = new oFF.XObject();
oFF.QDataPointMatcher.prototype._ff_c = "QDataPointMatcher";

oFF.QDataPointMatcher.create = function()
{
	let instance = new oFF.QDataPointMatcher();
	instance.setup();
	return instance;
};
oFF.QDataPointMatcher.matchesPath = function(pathReference, exceptionInfo)
{
	return oFF.XStream.of(pathReference).allMatch((dpr) => {
		return oFF.XStream.of(exceptionInfo.getDataSectionInfoTags()).anyMatch((dpt) => {
			return dpt.matches(dpr);
		});
	});
};
oFF.QDataPointMatcher.matchesTag = function(tags, exceptionInfo)
{
	return oFF.XStream.ofString(tags).allMatch((tag) => {
		return exceptionInfo.getTags().contains(tag.getString());
	});
};
oFF.QDataPointMatcher.prototype.m_matchedAlertLevels = null;
oFF.QDataPointMatcher.prototype.m_matchedAlertLevelsByException = null;
oFF.QDataPointMatcher.prototype.m_matchedExceptionNames = null;
oFF.QDataPointMatcher.prototype.m_matchedPathElements = null;
oFF.QDataPointMatcher.prototype.m_matchedValueSigns = null;
oFF.QDataPointMatcher.prototype.m_matchedValueSignsByPath = null;
oFF.QDataPointMatcher.prototype.applyDataSectionInfoFromViz = function(axisPathElement, sacDataSectionInfo)
{
	let groupName = null;
	let field = axisPathElement.getField();
	if (oFF.isNull(field))
	{
		let attribute = axisPathElement.getAttribute();
		let dimension = axisPathElement.getDimension();
		let dimensionType = axisPathElement.getDimensionType();
		let presentationType = axisPathElement.getPresentationType();
		let semanticType = axisPathElement.getSemanticType();
		if (oFF.isNull(dimension) && oFF.notNull(dimensionType))
		{
			dimension = axisPathElement.getQueryModel().getDimensionByType(dimensionType);
		}
		if (oFF.notNull(dimension))
		{
			groupName = dimension.getName();
		}
		if (oFF.notNull(presentationType))
		{
			if (oFF.notNull(attribute))
			{
				groupName = attribute.getName();
				if (presentationType === oFF.PresentationType.ACTIVE_KEY)
				{
					field = attribute.getKeyField();
				}
				else if (presentationType === oFF.PresentationType.ACTIVE_TEXT)
				{
					field = attribute.getTextField();
				}
				else if (presentationType === oFF.PresentationType.ACTIVE_DISPLAY_KEY)
				{
					field = attribute.getHierarchyTextField();
				}
				else
				{
					field = attribute.getFieldByPresentationType(presentationType);
				}
			}
			else if (oFF.notNull(dimension))
			{
				if (presentationType === oFF.PresentationType.ACTIVE_KEY)
				{
					field = dimension.getKeyField();
				}
				else if (presentationType === oFF.PresentationType.ACTIVE_TEXT)
				{
					field = dimension.getTextField();
				}
				else if (presentationType === oFF.PresentationType.ACTIVE_DISPLAY_KEY)
				{
					field = dimension.getHierarchyTextField();
				}
				else
				{
					field = dimension.getFieldByPresentationType(presentationType);
				}
			}
		}
		else if (oFF.notNull(dimension) && oFF.XStringUtils.isNotNullAndNotEmpty(semanticType))
		{
			field = dimension.getFieldBySemanticType(semanticType);
		}
	}
	if (oFF.notNull(field))
	{
		groupName = field.getName();
	}
	sacDataSectionInfo.setGroupName(groupName);
	sacDataSectionInfo.setSectionLevelName(axisPathElement.getHierarchyLevelName());
	sacDataSectionInfo.clearSectionNodeNames();
	oFF.XCollectionUtils.forEach(axisPathElement.getMemberNames(), (snn) => {
		sacDataSectionInfo.addSectionNodeName(snn);
	});
	sacDataSectionInfo.setGroupLevel(axisPathElement.getAxisLevel());
	sacDataSectionInfo.setSectionLevel(axisPathElement.getHierarchyLevel());
	sacDataSectionInfo.setExactSectionLevel(axisPathElement.isExactHierarchyLevel());
	sacDataSectionInfo.setIncludeHeaderBand(axisPathElement.isIncludeHeaderBand());
	sacDataSectionInfo.setIncludeTotalsBand(axisPathElement.isIncludeTotalsBand());
	sacDataSectionInfo.setIncludeInnerBands(axisPathElement.isIncludeSubDrills());
	sacDataSectionInfo.setMatchesExpanded(axisPathElement.isMatchesExpanded());
	if (axisPathElement.getHierarchyAlignment() === oFF.Alignment.CHILDREN_ABOVE_PARENT)
	{
		sacDataSectionInfo.setMatchesHierarchyBottomUp(oFF.TriStateBool._TRUE);
	}
	else if (axisPathElement.getHierarchyAlignment() === oFF.Alignment.CHILDREN_BELOW_PARENT)
	{
		sacDataSectionInfo.setMatchesHierarchyBottomUp(oFF.TriStateBool._FALSE);
	}
	sacDataSectionInfo.setMatchesLeaves(axisPathElement.isMatchesLeaves());
	sacDataSectionInfo.setMatchesTotals(axisPathElement.isMatchesTotals());
};
oFF.QDataPointMatcher.prototype.complementMatchingAlertLevels = function(matchedAlertLevels, alertLevelMin, alertLevelMax)
{
	if (oFF.notNull(alertLevelMin) || oFF.notNull(alertLevelMax))
	{
		for (let i = oFF.isNull(alertLevelMin) ? 0 : alertLevelMin.getLevel(); i <= (oFF.isNull(alertLevelMax) ? 9 : alertLevelMax.getLevel()); i++)
		{
			matchedAlertLevels.add(oFF.AlertLevel.getByLevelValue(i));
		}
	}
};
oFF.QDataPointMatcher.prototype.matchesStyleCriterion = function(dataPointContext, exceptionInfo, elementSupplier)
{
	let exceptionName = exceptionInfo.getExceptionName();
	let valueSign = oFF.ValueSign.get(exceptionInfo.getValueSign().getName());
	let alertLevel = oFF.AlertLevel.getByLevelValue(exceptionInfo.getLevel().getLevel());
	let exceptionNameReference = dataPointContext.getExceptionName();
	let valueSignReference = dataPointContext.getValueSign();
	let alertLevelMin = dataPointContext.getAlertLevelMin();
	let alertLevelMax = dataPointContext.getAlertLevelMax();
	let pathReference = dataPointContext.getPathElements();
	let hasPathElement = oFF.XCollectionUtils.hasElements(pathReference);
	let mappedPathReferenceList = oFF.XList.create();
	oFF.XCollectionUtils.forEach(pathReference, (pe) => {
		let mpe = elementSupplier();
		this.applyDataSectionInfoFromViz(pe, mpe);
		mappedPathReferenceList.add(mpe);
	});
	let tags = dataPointContext.getTags();
	let hasTags = oFF.XCollectionUtils.hasElements(tags);
	let hasColor = oFF.XStringUtils.isNotNullAndNotEmpty(exceptionInfo.getColor());
	let exceptionAlertLevels = oFF.isNull(exceptionNameReference) ? this.m_matchedAlertLevels : this.m_matchedAlertLevelsByException.getByKey(exceptionNameReference);
	let valueSigns = hasPathElement ? this.m_matchedValueSignsByPath.getByKey(pathReference) : this.m_matchedValueSigns;
	let matchesException = !dataPointContext.isUnmatchedExceptions() && oFF.XStringUtils.isNullOrEmpty(exceptionNameReference) || oFF.XString.isEqual(exceptionNameReference, exceptionName);
	let matchesRemainingExceptions = !hasColor && !hasPathElement && dataPointContext.isUnmatchedExceptions() && !this.m_matchedExceptionNames.contains(exceptionName) && oFF.isNull(valueSignReference);
	let fitsLowerBound = !dataPointContext.isUnmatchedAlertLevels() && oFF.isNull(alertLevelMin) || oFF.notNull(alertLevelMin) && alertLevelMin.getLevel() <= alertLevel.getLevel();
	let fitsUpperBound = !dataPointContext.isUnmatchedAlertLevels() && oFF.isNull(alertLevelMax) || oFF.notNull(alertLevelMax) && alertLevelMax.getLevel() >= alertLevel.getLevel();
	let fitsRemainingLevels = !hasColor && !hasPathElement && dataPointContext.isUnmatchedAlertLevels() && oFF.isNull(valueSignReference) && (oFF.isNull(exceptionAlertLevels) || !exceptionAlertLevels.contains(alertLevel));
	let matchesValueSign = !dataPointContext.isUnmatchedValueSigns() && oFF.isNull(valueSignReference) || valueSignReference === valueSign;
	let matchesRemainingValueSign = !hasPathElement && dataPointContext.isUnmatchedValueSigns() && !valueSigns.contains(valueSign) && oFF.isNull(exceptionName) && oFF.isNull(alertLevelMax) && oFF.isNull(alertLevelMin);
	let matchesPathReference = oFF.QDataPointMatcher.matchesPath(mappedPathReferenceList, exceptionInfo);
	let matchesPathElement = !dataPointContext.isUnmatchedPathElements() && !hasPathElement || matchesPathReference;
	let matchesRemainingPathElement = dataPointContext.isUnmatchedPathElements() && !matchesPathReference;
	let matchesTags = oFF.QDataPointMatcher.matchesTag(tags, exceptionInfo);
	let matchesTag = !dataPointContext.isUnmatchedTags() && !hasTags || matchesTags;
	let matchesRemainingTag = dataPointContext.isUnmatchedTags() && !matchesTags;
	return (matchesException || matchesRemainingExceptions) && (fitsLowerBound && fitsUpperBound || fitsRemainingLevels) && (matchesValueSign || matchesRemainingValueSign) && (matchesPathElement || matchesRemainingPathElement) && (matchesTag || matchesRemainingTag);
};
oFF.QDataPointMatcher.prototype.releaseObject = function()
{
	this.m_matchedValueSigns = oFF.XObjectExt.release(this.m_matchedValueSigns);
	this.m_matchedExceptionNames = oFF.XObjectExt.release(this.m_matchedExceptionNames);
	this.m_matchedAlertLevelsByException = oFF.XObjectExt.release(this.m_matchedAlertLevelsByException);
	this.m_matchedAlertLevels = oFF.XObjectExt.release(this.m_matchedAlertLevels);
	this.m_matchedPathElements = oFF.XObjectExt.release(this.m_matchedPathElements);
	this.m_matchedValueSignsByPath = oFF.XObjectExt.release(this.m_matchedValueSignsByPath);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.QDataPointMatcher.prototype.setup = function()
{
	oFF.XObject.prototype.setup.call( this );
	this.m_matchedValueSigns = oFF.XSetOfNameObject.create();
	this.m_matchedExceptionNames = oFF.XHashSetOfString.create();
	this.m_matchedAlertLevelsByException = oFF.XHashMapByString.create();
	this.m_matchedAlertLevels = oFF.XSetOfNameObject.create();
	this.m_matchedValueSignsByPath = oFF.XSimpleMap.create();
	this.m_matchedPathElements = oFF.XList.create();
};
oFF.QDataPointMatcher.prototype.tagMatchingStyleCriteria = function(dataPointContext)
{
	let valueSign = dataPointContext.getValueSign();
	let exceptionName = dataPointContext.getExceptionName();
	let alertLevelMin = dataPointContext.getAlertLevelMin();
	let alertLevelMax = dataPointContext.getAlertLevelMax();
	let pathElements = dataPointContext.getPathElements();
	let hasPathElements = oFF.XCollectionUtils.hasElements(pathElements);
	if (oFF.notNull(valueSign) && !hasPathElements && oFF.isNull(exceptionName) && oFF.isNull(alertLevelMax) && oFF.isNull(alertLevelMin))
	{
		oFF.XCollectionUtils.addIfNotPresent(this.m_matchedValueSigns, valueSign);
	}
	if (hasPathElements && oFF.isNull(exceptionName) && oFF.isNull(alertLevelMax) && oFF.isNull(alertLevelMin))
	{
		oFF.XCollectionUtils.addIfNotPresent(this.m_matchedPathElements, pathElements);
		if (oFF.notNull(valueSign))
		{
			if (!this.m_matchedValueSignsByPath.containsKey(pathElements))
			{
				this.m_matchedValueSignsByPath.put(pathElements, oFF.XSetOfNameObject.create());
			}
			this.m_matchedValueSignsByPath.getByKey(pathElements).add(valueSign);
		}
	}
	if (oFF.notNull(exceptionName) && oFF.isNull(valueSign) && !hasPathElements)
	{
		oFF.XCollectionUtils.addIfNotPresent(this.m_matchedExceptionNames, exceptionName);
		if (!this.m_matchedAlertLevelsByException.containsKey(exceptionName))
		{
			this.m_matchedAlertLevelsByException.put(exceptionName, oFF.XSetOfNameObject.create());
		}
		this.complementMatchingAlertLevels(this.m_matchedAlertLevelsByException.getByKey(exceptionName), alertLevelMin, alertLevelMax);
	}
	if (oFF.isNull(exceptionName) && oFF.isNull(valueSign) && !hasPathElements)
	{
		this.complementMatchingAlertLevels(this.m_matchedAlertLevels, alertLevelMin, alertLevelMax);
	}
};

oFF.QTablePageBreakHandling = function() {};
oFF.QTablePageBreakHandling.prototype = new oFF.XObject();
oFF.QTablePageBreakHandling.prototype._ff_c = "QTablePageBreakHandling";

oFF.QTablePageBreakHandling.create = function()
{
	return new oFF.QTablePageBreakHandling();
};
oFF.QTablePageBreakHandling.prototype.m_breakAfter = false;
oFF.QTablePageBreakHandling.prototype.m_breakBefore = false;
oFF.QTablePageBreakHandling.prototype.m_keepTogether = false;
oFF.QTablePageBreakHandling.prototype.copyFrom = function(other, flags)
{
	let orig = other;
	this.m_breakBefore = orig.m_breakBefore;
	this.m_breakAfter = orig.m_breakAfter;
	this.m_keepTogether = orig.m_keepTogether;
};
oFF.QTablePageBreakHandling.prototype.isBreakAfter = function()
{
	return this.m_breakAfter;
};
oFF.QTablePageBreakHandling.prototype.isBreakBefore = function()
{
	return this.m_breakBefore;
};
oFF.QTablePageBreakHandling.prototype.isKeepTogether = function()
{
	return this.m_keepTogether;
};
oFF.QTablePageBreakHandling.prototype.isSet = function()
{
	return this.m_breakAfter || this.m_breakBefore || this.m_keepTogether;
};
oFF.QTablePageBreakHandling.prototype.setBreakAfter = function(breakAfter)
{
	this.m_breakAfter = breakAfter;
};
oFF.QTablePageBreakHandling.prototype.setBreakBefore = function(breakBefore)
{
	this.m_breakBefore = breakBefore;
};
oFF.QTablePageBreakHandling.prototype.setKeepTogether = function(keepTogether)
{
	this.m_keepTogether = keepTogether;
};

oFF.QFrame = function() {};
oFF.QFrame.prototype = new oFF.XObject();
oFF.QFrame.prototype._ff_c = "QFrame";

oFF.QFrame._createFrame = function(start, startPreceding, end, endFollowing)
{
	let frame = new oFF.QFrame();
	frame.setStart(start);
	frame.setStartPreceding(startPreceding);
	frame.setEnd(end);
	frame.setEndFollowing(endFollowing);
	return frame;
};
oFF.QFrame.prototype.m_end = null;
oFF.QFrame.prototype.m_endFollowing = 0;
oFF.QFrame.prototype.m_start = null;
oFF.QFrame.prototype.m_startPreceding = 0;
oFF.QFrame.prototype.cloneExt = function(flags)
{
	let targetFrame = oFF.QFrame._createFrame(this.getStart(), this.getStartPreceding(), this.getEnd(), this.getEndFollowing());
	return targetFrame;
};
oFF.QFrame.prototype.getEnd = function()
{
	return this.m_end;
};
oFF.QFrame.prototype.getEndFollowing = function()
{
	return this.m_endFollowing;
};
oFF.QFrame.prototype.getStart = function()
{
	return this.m_start;
};
oFF.QFrame.prototype.getStartPreceding = function()
{
	return this.m_startPreceding;
};
oFF.QFrame.prototype.releaseObject = function()
{
	this.m_start = null;
	this.m_end = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.QFrame.prototype.setEnd = function(end)
{
	this.m_end = end;
};
oFF.QFrame.prototype.setEndFollowing = function(endFollowing)
{
	this.m_endFollowing = endFollowing;
};
oFF.QFrame.prototype.setStart = function(start)
{
	this.m_start = start;
};
oFF.QFrame.prototype.setStartPreceding = function(startPreceding)
{
	this.m_startPreceding = startPreceding;
};

oFF.QBindingFactory = function() {};
oFF.QBindingFactory.prototype = new oFF.DpBindingFactory();
oFF.QBindingFactory.prototype._ff_c = "QBindingFactory";

oFF.QBindingFactory.staticSetupOlapBindingFactory = function()
{
	oFF.DpBindingFactory.registerFactory(oFF.OlapComponentType.QUERY_SERVICE_CONFIG, new oFF.QBindingFactory());
};
oFF.QBindingFactory.prototype.newBindingProvider = function(component, path)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(path))
	{
		return oFF.QBindingProviderForAttributes.create(component, path);
	}
	else
	{
		return oFF.QBindingProviderForStd.create(component, path);
	}
};

oFF.QBindingProviderForAttributes = function() {};
oFF.QBindingProviderForAttributes.prototype = new oFF.XObject();
oFF.QBindingProviderForAttributes.prototype._ff_c = "QBindingProviderForAttributes";

oFF.QBindingProviderForAttributes.create = function(component, path)
{
	let newObj = new oFF.QBindingProviderForAttributes();
	newObj.m_component = component;
	newObj.m_path = path;
	return newObj;
};
oFF.QBindingProviderForAttributes.prototype.m_component = null;
oFF.QBindingProviderForAttributes.prototype.m_path = null;
oFF.QBindingProviderForAttributes.prototype.getReceiverBindings = function()
{
	let list = oFF.XList.create();
	if (oFF.XString.startsWith(this.m_path, "cmds/all"))
	{
		list.add(oFF.SemanticBindingType.JSON);
	}
	else
	{
		list.add(oFF.SemanticBindingType.STRING);
	}
	return list;
};
oFF.QBindingProviderForAttributes.prototype.getReceiverProtocolBindings = function(type)
{
	let list = oFF.XList.create();
	if (oFF.XString.startsWith(this.m_path, "cmds/all"))
	{
		list.add(oFF.ProtocolBindingType.JSON);
	}
	else
	{
		list.add(oFF.ProtocolBindingType.STRING);
	}
	return list;
};
oFF.QBindingProviderForAttributes.prototype.getSenderBindings = function()
{
	let list = oFF.XList.create();
	if (oFF.XString.startsWith(this.m_path, "cmds/all"))
	{
		list.add(oFF.SemanticBindingType.JSON);
	}
	else
	{
		list.add(oFF.SemanticBindingType.STRING);
	}
	return list;
};
oFF.QBindingProviderForAttributes.prototype.getSenderProtocolBindings = function(type)
{
	let list = oFF.XList.create();
	if (oFF.XString.startsWith(this.m_path, "cmds/all"))
	{
		list.add(oFF.ProtocolBindingType.JSON);
	}
	else
	{
		list.add(oFF.ProtocolBindingType.STRING);
	}
	return list;
};
oFF.QBindingProviderForAttributes.prototype.newReceiverBinding = function(type, protocol)
{
	let receiverBinding = null;
	let dp = this.m_component;
	if (oFF.XString.startsWith(this.m_path, "model/Presentation/setting"))
	{
		receiverBinding = oFF.QBindingAttributePresentation.create(dp, type, protocol, this.m_path);
	}
	return receiverBinding;
};
oFF.QBindingProviderForAttributes.prototype.newSenderBinding = function(type, protocol)
{
	let dp = this.m_component;
	let senderBinding = null;
	if (oFF.XString.startsWith(this.m_path, "model/filters/") && oFF.XString.endsWith(this.m_path, "/description"))
	{
		senderBinding = oFF.QBindingAttributeFilterDescription.create(dp, type, protocol, this.m_path);
	}
	else if (oFF.XString.startsWith(this.m_path, "model/filters/SingleMemberSelection/"))
	{
		senderBinding = oFF.QBindingAttributeFilterSingleMemberSelection.create(dp, type, protocol, this.m_path);
	}
	else if (oFF.XString.startsWith(this.m_path, "model/Presentation/setting"))
	{
		senderBinding = oFF.QBindingAttributePresentation.create(dp, type, protocol, this.m_path);
	}
	else if (oFF.XString.startsWith(this.m_path, "model/Presentation/valuehelp"))
	{
		senderBinding = oFF.QBindingAttributePresentationValueHelp.create(dp, type, protocol, this.m_path);
	}
	else if (oFF.XString.startsWith(this.m_path, "cmds/all"))
	{
		senderBinding = oFF.QBindingMenu.create(dp, type, protocol, this.m_path);
	}
	return senderBinding;
};
oFF.QBindingProviderForAttributes.prototype.toString = function()
{
	return this.m_path;
};

oFF.QBindingProviderForStd = function() {};
oFF.QBindingProviderForStd.prototype = new oFF.XObject();
oFF.QBindingProviderForStd.prototype._ff_c = "QBindingProviderForStd";

oFF.QBindingProviderForStd.create = function(component, path)
{
	let newObj = new oFF.QBindingProviderForStd();
	newObj.m_component = component;
	newObj.m_path = path;
	return newObj;
};
oFF.QBindingProviderForStd.prototype.m_component = null;
oFF.QBindingProviderForStd.prototype.m_path = null;
oFF.QBindingProviderForStd.prototype.getReceiverBindings = function()
{
	return oFF.XList.create();
};
oFF.QBindingProviderForStd.prototype.getReceiverProtocolBindings = function(type)
{
	return oFF.XList.create();
};
oFF.QBindingProviderForStd.prototype.getSenderBindings = function()
{
	let list = oFF.XList.create();
	list.add(oFF.SemanticBindingType.PIE);
	list.add(oFF.SemanticBindingType.LINE);
	list.add(oFF.SemanticBindingType.COLUMN);
	list.add(oFF.SemanticBindingType.BAR);
	list.add(oFF.SemanticBindingType.TIMESERIES);
	list.add(oFF.SemanticBindingType.BOXPLOT);
	list.add(oFF.SemanticBindingType.COMBBCL);
	list.add(oFF.SemanticBindingType.TABLE);
	list.add(oFF.SemanticBindingType.AREA);
	list.add(oFF.SemanticBindingType.SCATTER);
	list.add(oFF.SemanticBindingType.BUBBLE);
	list.add(oFF.SemanticBindingType.SPLINE);
	list.add(oFF.SemanticBindingType.VARIABLEPIE);
	list.add(oFF.SemanticBindingType.HEATMAP);
	list.add(oFF.SemanticBindingType.TREEMAP);
	list.add(oFF.SemanticBindingType.VARIWIDE);
	list.add(oFF.SemanticBindingType.WORDCLOUD);
	list.add(oFF.SemanticBindingType.BELLCURVE);
	list.add(oFF.SemanticBindingType.SCATTER);
	list.add(oFF.SemanticBindingType.BUBBLE);
	list.add(oFF.SemanticBindingType.CHART);
	list.add(oFF.SemanticBindingType.JSON);
	list.add(oFF.SemanticBindingType.STRING);
	list.add(oFF.SemanticBindingType.KPI);
	list.add(oFF.SemanticBindingType.KPI);
	return list;
};
oFF.QBindingProviderForStd.prototype.getSenderProtocolBindings = function(type)
{
	let list = oFF.XList.create();
	list.add(oFF.ProtocolBindingType.GOOGLE_CHART_PROTOCOL);
	list.add(oFF.ProtocolBindingType.HIGH_CHART_PROTOCOL);
	list.add(oFF.ProtocolBindingType.VIZ_FRAME_PROTOCOL);
	list.add(oFF.ProtocolBindingType.MICRO_CHART_PROTOCOL);
	list.add(oFF.ProtocolBindingType.SAP_KPI_PROTOCOL);
	list.add(oFF.ProtocolBindingType.PLAIN_GRID);
	list.add(oFF.ProtocolBindingType.STRING);
	list.add(oFF.ProtocolBindingType.INTEGER);
	list.add(oFF.ProtocolBindingType.JSON);
	return list;
};
oFF.QBindingProviderForStd.prototype.newReceiverBinding = function(type, protocol)
{
	return null;
};
oFF.QBindingProviderForStd.prototype.newSenderBinding = function(type, protocol)
{
	let dp = this.m_component;
	let senderBinding = oFF.QBindingResultset.create(dp, type, protocol);
	return senderBinding;
};
oFF.QBindingProviderForStd.prototype.toString = function()
{
	return this.m_path;
};

oFF.AbstractBlendingMapping = function() {};
oFF.AbstractBlendingMapping.prototype = new oFF.XObject();
oFF.AbstractBlendingMapping.prototype._ff_c = "AbstractBlendingMapping";

oFF.AbstractBlendingMapping.prototype.m_blendingDefinition = null;
oFF.AbstractBlendingMapping.prototype.m_mappingDefinitionType = null;
oFF.AbstractBlendingMapping.prototype.copyFrom = function(other, flags)
{
	oFF.XObject.prototype.copyFrom.call( this , other, flags);
	let otherObj = other;
	this.m_mappingDefinitionType = otherObj.getMappingDefinitionType();
	this.m_blendingDefinition = otherObj.getBlendingDefinition();
};
oFF.AbstractBlendingMapping.prototype.getBlendingDefinition = function()
{
	return this.m_blendingDefinition;
};
oFF.AbstractBlendingMapping.prototype.getMappingDefinitionType = function()
{
	return this.m_mappingDefinitionType;
};
oFF.AbstractBlendingMapping.prototype.releaseObject = function()
{
	this.m_mappingDefinitionType = null;
	this.m_blendingDefinition = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.AbstractBlendingMapping.prototype.setBlendingDefinition = function(blendingDefinition)
{
	this.m_blendingDefinition = blendingDefinition;
};
oFF.AbstractBlendingMapping.prototype.setupAbstractMapping = function(mappingType, blendingDefinition)
{
	this.m_mappingDefinitionType = mappingType;
	this.m_blendingDefinition = blendingDefinition;
};

oFF.BlendingHost = function() {};
oFF.BlendingHost.prototype = new oFF.XObject();
oFF.BlendingHost.prototype._ff_c = "BlendingHost";

oFF.BlendingHost.createWithSource = function(source)
{
	let queryModel = source.getQueryModel();
	let capabilities = queryModel.getModelCapabilities();
	let blendingHost = new oFF.BlendingHost();
	blendingHost.setupBlendingHost(queryModel.getQueryManager().getSystemDescription(), capabilities);
	blendingHost.m_blendingSource = source;
	return blendingHost;
};
oFF.BlendingHost.createWithSystemName = function(systemName, application)
{
	let olapEnvironment = application.getOlapEnvironment();
	let analyticCapabilities = olapEnvironment.getSystemContainer(systemName).getServiceCapabilities(oFF.ServerService.ANALYTIC);
	let systemDescription = application.getSystemLandscape().getSystemDescription(systemName);
	let blendingHost = new oFF.BlendingHost();
	blendingHost.setupBlendingHost(systemDescription, analyticCapabilities);
	return blendingHost;
};
oFF.BlendingHost.prototype.m_blendingSource = null;
oFF.BlendingHost.prototype.m_supportsCubeBlending = false;
oFF.BlendingHost.prototype.m_supportsRemoteBlending = false;
oFF.BlendingHost.prototype.m_supportsRemoteBlendingBW = false;
oFF.BlendingHost.prototype.m_systemDescription = null;
oFF.BlendingHost.prototype.getSource = function()
{
	return this.m_blendingSource;
};
oFF.BlendingHost.prototype.getSystemDescription = function()
{
	return this.m_systemDescription;
};
oFF.BlendingHost.prototype.getSystemName = function()
{
	return this.m_systemDescription.getSystemName();
};
oFF.BlendingHost.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let xOther = other;
	if (!this.getSource().isEqualTo(xOther.getSource()))
	{
		return false;
	}
	if (!this.getSystemDescription().isEqualTo(xOther.getSystemDescription()))
	{
		return false;
	}
	if (this.supportsCubeBlending() !== xOther.supportsCubeBlending())
	{
		return false;
	}
	if (this.supportsRemoteBlending() !== xOther.supportsRemoteBlending())
	{
		return false;
	}
	if (this.supportsRemoteBlendingBW() !== xOther.supportsRemoteBlendingBW())
	{
		return false;
	}
	return true;
};
oFF.BlendingHost.prototype.isSystemMappingValid = function(remoteQueryManager)
{
	return this.m_systemDescription.isSystemMappingValid(remoteQueryManager.getSystemDescription());
};
oFF.BlendingHost.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_blendingSource = null;
	this.m_systemDescription = null;
};
oFF.BlendingHost.prototype.setupBlendingHost = function(systemDescription, capability)
{
	this.m_systemDescription = systemDescription;
	this.m_supportsCubeBlending = capability.supportsCubeBlending();
	this.m_supportsRemoteBlending = capability.supportsRemoteBlending();
	this.m_supportsRemoteBlendingBW = capability.supportsRemoteBlendingBW();
};
oFF.BlendingHost.prototype.supportsCubeBlending = function()
{
	return this.m_supportsCubeBlending;
};
oFF.BlendingHost.prototype.supportsRemoteBlending = function()
{
	return this.m_supportsRemoteBlending;
};
oFF.BlendingHost.prototype.supportsRemoteBlendingBW = function()
{
	return this.m_supportsRemoteBlendingBW;
};

oFF.BlendingHostManager = function() {};
oFF.BlendingHostManager.prototype = new oFF.XObject();
oFF.BlendingHostManager.prototype._ff_c = "BlendingHostManager";

oFF.BlendingHostManager.create = function(blendingDefinition)
{
	let blendingHostManager = new oFF.BlendingHostManager();
	blendingHostManager.m_blendingDefinition = blendingDefinition;
	return blendingHostManager;
};
oFF.BlendingHostManager.prototype.m_application = null;
oFF.BlendingHostManager.prototype.m_blendingDefinition = null;
oFF.BlendingHostManager.prototype.m_blendingHost = null;
oFF.BlendingHostManager.prototype.findBlendingHost = function(minBlendingCapability)
{
	let primary = this.m_blendingDefinition.getSources().get(0);
	if (oFF.XString.isEqual(this.getMasterSystem(), this.getSystemName(primary)))
	{
		if (oFF.BlendingCapabilities.sourceSupportsCapability(primary, minBlendingCapability))
		{
			return oFF.BlendingHost.createWithSource(primary);
		}
		return null;
	}
	let systemsByMappingCount = this.getSystemsByMappingCount();
	let mappingCounts = oFF.XCollectionUtils.sortListAsIntegers(systemsByMappingCount.getKeysAsReadOnlyList(), oFF.XSortDirection.DESCENDING);
	let numberOfDifferentMappingsCounts = mappingCounts.size();
	for (let i = 0; i < numberOfDifferentMappingsCounts; i++)
	{
		let systems = systemsByMappingCount.getByKey(mappingCounts.get(i));
		let blendingHost = this.getBlendingSourceFromList(systems, minBlendingCapability);
		if (oFF.notNull(blendingHost))
		{
			return blendingHost;
		}
		if (i === numberOfDifferentMappingsCounts - 1)
		{
			let defaultBlendingSystem = this.getDefaultBlendingSystem();
			let metadata = this.getServerMetadata(defaultBlendingSystem);
			if (oFF.notNull(metadata) && metadata.supportsCapability(oFF.ServerService.ANALYTIC, minBlendingCapability))
			{
				return oFF.BlendingHost.createWithSystemName(defaultBlendingSystem, this.getApplication());
			}
		}
		let systemName = this.getBestBlendingHostFromList(systems, minBlendingCapability);
		if (oFF.notNull(systemName))
		{
			return oFF.BlendingHost.createWithSystemName(systemName, this.getApplication());
		}
	}
	return null;
};
oFF.BlendingHostManager.prototype.getApplication = function()
{
	if (oFF.isNull(this.m_application))
	{
		let sources = this.m_blendingDefinition.getSources();
		let queryModel = sources.get(0).getQueryModel();
		this.m_application = queryModel.getApplication();
	}
	return this.m_application;
};
oFF.BlendingHostManager.prototype.getAssociatedSystemName = function(source)
{
	let systemLandscape = this.getApplication().getSystemLandscape();
	let systemDescription = systemLandscape.getSystemDescription(this.getSystemName(source));
	if (oFF.notNull(systemDescription))
	{
		let associatedHanaSystem = systemDescription.getAssociatedHanaSystem();
		if (systemLandscape.getSystemDescription(associatedHanaSystem) !== null)
		{
			return associatedHanaSystem;
		}
	}
	return null;
};
oFF.BlendingHostManager.prototype.getBestBlendingHostFromList = function(systemNames, minBlendingCapability)
{
	let name = null;
	let version = null;
	let size = systemNames.size();
	for (let i = 0; i < size; i++)
	{
		let system = systemNames.get(i);
		let serverMetadata = this.getServerMetadata(system);
		if (oFF.notNull(serverMetadata) && serverMetadata.supportsCapability(oFF.ServerService.ANALYTIC, minBlendingCapability))
		{
			let serverVersion = serverMetadata.getVersion();
			if (oFF.isNull(name) || oFF.ServerVersionComparator.compare(version, serverVersion) === 1)
			{
				name = system;
				version = serverVersion;
			}
		}
	}
	return name;
};
oFF.BlendingHostManager.prototype.getBlendingHost = function()
{
	this.updateBlendingHost();
	return this.m_blendingHost;
};
oFF.BlendingHostManager.prototype.getBlendingSourceFromList = function(systemNames, minBlendingCapability)
{
	let system = null;
	let systemVersion = null;
	let blendingSource = null;
	let blendingSources = this.m_blendingDefinition.getSources();
	let size = blendingSources.size();
	for (let i = 0; i < size; i++)
	{
		let source = blendingSources.get(i);
		let systemName = this.getSystemName(source);
		if (systemNames.contains(systemName) && oFF.BlendingCapabilities.sourceSupportsCapability(source, minBlendingCapability))
		{
			let version = this.getVersion(source);
			if (oFF.isNull(system) || oFF.ServerVersionComparator.compare(systemVersion, version) === 1)
			{
				system = systemName;
				systemVersion = version;
				blendingSource = source;
			}
		}
		let associatedHanaSystem = this.getAssociatedSystemName(source);
		if (oFF.XStringUtils.isNotNullAndNotEmpty(associatedHanaSystem))
		{
			let serverMetadata = this.getServerMetadata(associatedHanaSystem);
			if (oFF.notNull(serverMetadata) && serverMetadata.supportsCapability(oFF.ServerService.ANALYTIC, minBlendingCapability))
			{
				let associatedHanaSystemVersion = serverMetadata.getVersion();
				if (oFF.isNull(system) || oFF.ServerVersionComparator.compare(systemVersion, associatedHanaSystemVersion) === 1)
				{
					system = associatedHanaSystem;
					systemVersion = associatedHanaSystemVersion;
					blendingSource = null;
				}
			}
		}
	}
	if (oFF.notNull(blendingSource))
	{
		return oFF.BlendingHost.createWithSource(blendingSource);
	}
	return oFF.notNull(system) ? oFF.BlendingHost.createWithSystemName(system, this.getApplication()) : null;
};
oFF.BlendingHostManager.prototype.getDefaultBlendingSystem = function()
{
	let systemLandscape = this.getApplication().getSystemLandscape();
	return systemLandscape.getDefaultSystemName(oFF.SystemRole.PRIMARY_BLENDING_HOST);
};
oFF.BlendingHostManager.prototype.getMappingCount = function(systemName, blendingSources, systemLandscape)
{
	let systemDescription = systemLandscape.getSystemDescription(systemName);
	let mappings = 0;
	let size = blendingSources.size();
	for (let k = 0; k < size; k++)
	{
		let blendingSource = blendingSources.get(k);
		let blendingSourceQM = blendingSource.getQueryModel().getQueryManager();
		if (oFF.XString.isEqual(systemName, blendingSourceQM.getSystemName()) || systemDescription.isSystemMappingValid(blendingSourceQM.getSystemDescription()))
		{
			mappings++;
			continue;
		}
		let associatedSystem = this.getAssociatedSystemName(blendingSource);
		if (oFF.XStringUtils.isNotNullAndNotEmpty(associatedSystem))
		{
			let associatedSystemDescription = systemLandscape.getSystemDescription(associatedSystem);
			if (oFF.XString.isEqual(systemName, associatedSystem) || systemDescription.isSystemMappingValid(associatedSystemDescription))
			{
				mappings++;
			}
		}
	}
	return mappings;
};
oFF.BlendingHostManager.prototype.getMasterSystem = function()
{
	let systemLandscape = this.getApplication().getSystemLandscape();
	return systemLandscape.getMasterSystemName();
};
oFF.BlendingHostManager.prototype.getServerMetadata = function(systemName)
{
	if (oFF.notNull(systemName))
	{
		let application = this.getApplication();
		let systemConnect = application.getConnectionPool().getSystemConnect(systemName);
		if (oFF.notNull(systemConnect))
		{
			return systemConnect.getServerMetadata();
		}
	}
	return null;
};
oFF.BlendingHostManager.prototype.getSystemName = function(source)
{
	return source.getQueryModel().getQueryManager().getSystemName();
};
oFF.BlendingHostManager.prototype.getSystemsByMappingCount = function()
{
	let map = oFF.XHashMapByString.create();
	let blendingSources = this.m_blendingDefinition.getSources();
	let systemLandscape = this.getApplication().getSystemLandscape();
	let systemNames = systemLandscape.getSystemNames();
	let size = systemNames.size();
	for (let i = 0; i < size; i++)
	{
		let systemName = systemNames.get(i);
		let mappings = oFF.XInteger.convertToString(this.getMappingCount(systemName, blendingSources, systemLandscape));
		let systemsWithSameMappingCount = map.getByKey(mappings);
		if (oFF.notNull(systemsWithSameMappingCount))
		{
			systemsWithSameMappingCount.add(systemName);
		}
		else
		{
			let systems = oFF.XList.create();
			systems.add(systemName);
			map.put(mappings, systems);
		}
	}
	return map;
};
oFF.BlendingHostManager.prototype.getVersion = function(source)
{
	let queryManager = source.getQueryModel().getQueryManager();
	let serverMetadata = this.getServerMetadata(queryManager.getSystemName());
	if (oFF.notNull(serverMetadata))
	{
		return serverMetadata.getVersion();
	}
	return null;
};
oFF.BlendingHostManager.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_blendingHost = oFF.XObjectExt.release(this.m_blendingHost);
	this.m_blendingDefinition = null;
	this.m_application = null;
};
oFF.BlendingHostManager.prototype.setBlendingHost = function(blendingHost)
{
	this.m_blendingHost = blendingHost;
};
oFF.BlendingHostManager.prototype.setSourceAsBlendingHost = function(source)
{
	this.m_blendingHost = oFF.XObjectExt.release(this.m_blendingHost);
	if (oFF.notNull(source))
	{
		this.m_blendingHost = oFF.BlendingHost.createWithSource(source);
	}
};
oFF.BlendingHostManager.prototype.updateBlendingHost = function()
{
	let minBlendingCapability = oFF.BlendingCapabilities.getMinCapabilityForBlendingHost(this.m_blendingDefinition.getSources());
	if (oFF.isNull(minBlendingCapability))
	{
		this.setBlendingHost(null);
	}
	else if (oFF.XString.isEqual(minBlendingCapability, oFF.BlendingCapabilities.BLENDING_CAPABILITY_LOCAL))
	{
		if (oFF.isNull(this.m_blendingHost))
		{
			this.setSourceAsBlendingHost(this.m_blendingDefinition.getSources().get(0));
		}
	}
	else if (!oFF.BlendingCapabilities.blendingHostSupportsCapability(this.m_blendingHost, minBlendingCapability))
	{
		this.setBlendingHost(this.findBlendingHost(minBlendingCapability));
	}
};

oFF.QCapabilitiesDecorator = function() {};
oFF.QCapabilitiesDecorator.prototype = new oFF.XObject();
oFF.QCapabilitiesDecorator.prototype._ff_c = "QCapabilitiesDecorator";

oFF.QCapabilitiesDecorator.create = function(parent)
{
	let newObj = new oFF.QCapabilitiesDecorator();
	if (oFF.notNull(parent))
	{
		newObj.updateContext(parent);
	}
	newObj.m_supportsCellValueOperand = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsIntersectLayers = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsComplexFilter = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsVisibilityFilter = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsComplexTupleFilter = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsSetOperand = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsSpatialFilter = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsSpatialFilterSrid = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsConvertToFlatFilter = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsCurrentMemberFilterExtension = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsSetOperandCurrentMemberSingleNavigation = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsUniversalDisplayHierarchiesZeroBased = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsUniversalDisplayHierarchiesCustomDimensions = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsUniversalDisplayHierarchies = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsHierarchyPath = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsUniqueHierarchyPath = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsValueHelpHierarchyPath = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsHierarchyVirtualRootNode = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsHierarchyRestNode = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsHierarchyNavigationDeltaMode = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsHierNavCounter = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsHierarchyMetadata = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsHierarchyLevelMetadata = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsHierCarryingDim = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsHierAttHierFields = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsFixMetadataHierarchyAttributes = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsFixHierarchyFlagKeys = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsExpandBottomUp = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsDimensionHierarchyLevels = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsCustomHierarchy = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsDimensionHierarchyMetadata = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsCalculatedDimensions = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsFormulaMeasures = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsResultSetCache = oFF.TriStateBool._DEFAULT;
	newObj.m_supportsOthersFromConditions = oFF.TriStateBool._DEFAULT;
	return newObj;
};
oFF.QCapabilitiesDecorator.prototype.m_parentCapabilities = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsCalculatedDimensions = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsCellValueOperand = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsComplexFilter = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsComplexTupleFilter = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsConvertToFlatFilter = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsCurrentMemberFilterExtension = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsCustomHierarchy = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsDimensionHierarchyLevels = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsDimensionHierarchyMetadata = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsExpandBottomUp = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsFixHierarchyFlagKeys = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsFixMetadataHierarchyAttributes = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsFormulaMeasures = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsHierAttHierFields = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsHierCarryingDim = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsHierNavCounter = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsHierarchyLevelMetadata = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsHierarchyMetadata = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsHierarchyNavigationDeltaMode = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsHierarchyPath = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsHierarchyRestNode = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsHierarchyVirtualRootNode = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsIntersectLayers = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsOthersFromConditions = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsResultSetCache = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsSetOperand = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsSetOperandCurrentMemberSingleNavigation = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsSpatialFilter = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsSpatialFilterSrid = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsUniqueHierarchyPath = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsUniversalDisplayHierarchies = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsUniversalDisplayHierarchiesCustomDimensions = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsUniversalDisplayHierarchiesZeroBased = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsValueHelpHierarchyPath = null;
oFF.QCapabilitiesDecorator.prototype.m_supportsVisibilityFilter = null;
oFF.QCapabilitiesDecorator.prototype.cloneExt = function(flags)
{
	let target = oFF.QCapabilitiesDecorator.create(null);
	target.copyFrom(this, null);
	return target;
};
oFF.QCapabilitiesDecorator.prototype.copyFrom = function(other, flags)
{
	let objToCopy = other;
	if (oFF.notNull(objToCopy.m_parentCapabilities))
	{
		this.m_parentCapabilities = objToCopy.m_parentCapabilities.cloneExt(null);
	}
	this.m_supportsCellValueOperand = objToCopy.m_supportsCellValueOperand;
	this.m_supportsIntersectLayers = objToCopy.m_supportsIntersectLayers;
	this.m_supportsComplexFilter = objToCopy.m_supportsComplexFilter;
	this.m_supportsVisibilityFilter = objToCopy.m_supportsVisibilityFilter;
	this.m_supportsComplexTupleFilter = objToCopy.m_supportsComplexTupleFilter;
	this.m_supportsSetOperand = objToCopy.m_supportsComplexTupleFilter;
	this.m_supportsSpatialFilter = objToCopy.m_supportsSpatialFilter;
	this.m_supportsSpatialFilterSrid = objToCopy.m_supportsSpatialFilterSrid;
	this.m_supportsConvertToFlatFilter = objToCopy.m_supportsConvertToFlatFilter;
	this.m_supportsCurrentMemberFilterExtension = objToCopy.m_supportsCurrentMemberFilterExtension;
	this.m_supportsSetOperandCurrentMemberSingleNavigation = objToCopy.m_supportsSetOperandCurrentMemberSingleNavigation;
	this.m_supportsUniversalDisplayHierarchiesZeroBased = objToCopy.m_supportsUniversalDisplayHierarchiesZeroBased;
	this.m_supportsUniversalDisplayHierarchiesCustomDimensions = objToCopy.m_supportsUniversalDisplayHierarchiesCustomDimensions;
	this.m_supportsUniversalDisplayHierarchies = objToCopy.m_supportsUniversalDisplayHierarchies;
	this.m_supportsHierarchyPath = objToCopy.m_supportsHierarchyPath;
	this.m_supportsUniqueHierarchyPath = objToCopy.m_supportsUniqueHierarchyPath;
	this.m_supportsValueHelpHierarchyPath = objToCopy.m_supportsValueHelpHierarchyPath;
	this.m_supportsHierarchyVirtualRootNode = objToCopy.m_supportsHierarchyVirtualRootNode;
	this.m_supportsHierarchyRestNode = objToCopy.m_supportsHierarchyRestNode;
	this.m_supportsHierarchyNavigationDeltaMode = objToCopy.m_supportsHierarchyNavigationDeltaMode;
	this.m_supportsHierNavCounter = objToCopy.m_supportsHierNavCounter;
	this.m_supportsHierarchyMetadata = objToCopy.m_supportsHierarchyMetadata;
	this.m_supportsHierarchyLevelMetadata = objToCopy.m_supportsHierarchyLevelMetadata;
	this.m_supportsHierCarryingDim = objToCopy.m_supportsHierCarryingDim;
	this.m_supportsHierAttHierFields = objToCopy.m_supportsHierAttHierFields;
	this.m_supportsFixMetadataHierarchyAttributes = objToCopy.m_supportsFixMetadataHierarchyAttributes;
	this.m_supportsFixHierarchyFlagKeys = objToCopy.m_supportsFixHierarchyFlagKeys;
	this.m_supportsExpandBottomUp = objToCopy.m_supportsExpandBottomUp;
	this.m_supportsDimensionHierarchyLevels = objToCopy.m_supportsDimensionHierarchyLevels;
	this.m_supportsCustomHierarchy = objToCopy.m_supportsCustomHierarchy;
	this.m_supportsCalculatedDimensions = objToCopy.m_supportsCalculatedDimensions;
	this.m_supportsFormulaMeasures = objToCopy.m_supportsFormulaMeasures;
	this.m_supportsResultSetCache = objToCopy.m_supportsResultSetCache;
};
oFF.QCapabilitiesDecorator.prototype.getResultStructureReorderingCapability = function()
{
	return oFF.isNull(this.m_parentCapabilities) ? oFF.ReorderingCapability.NONE : this.m_parentCapabilities.getResultStructureReorderingCapability();
};
oFF.QCapabilitiesDecorator.prototype.getServerMetadataVersion = function()
{
	return oFF.isNull(this.m_parentCapabilities) ? null : this.m_parentCapabilities.getServerMetadataVersion();
};
oFF.QCapabilitiesDecorator.prototype.getSupportedConditionalResults = function()
{
	return oFF.isNull(this.m_parentCapabilities) ? null : this.m_parentCapabilities.getSupportedConditionalResults();
};
oFF.QCapabilitiesDecorator.prototype.getSupportedResultAlignmentLevel = function()
{
	return oFF.isNull(this.m_parentCapabilities) ? oFF.QModelLevel.NONE : this.m_parentCapabilities.getSupportedResultAlignmentLevel();
};
oFF.QCapabilitiesDecorator.prototype.getSupportedResultAlignments = function()
{
	return oFF.isNull(this.m_parentCapabilities) ? null : this.m_parentCapabilities.getSupportedResultAlignments();
};
oFF.QCapabilitiesDecorator.prototype.getSupportedResultVisibilityLevel = function()
{
	return oFF.isNull(this.m_parentCapabilities) ? oFF.QModelLevel.NONE : this.m_parentCapabilities.getSupportedResultVisibilityLevel();
};
oFF.QCapabilitiesDecorator.prototype.getSystemName = function()
{
	return oFF.isNull(this.m_parentCapabilities) ? null : this.m_parentCapabilities.getSystemName();
};
oFF.QCapabilitiesDecorator.prototype.getSystemType = function()
{
	return oFF.isNull(this.m_parentCapabilities) ? null : this.m_parentCapabilities.getSystemType();
};
oFF.QCapabilitiesDecorator.prototype.releaseObject = function()
{
	this.m_parentCapabilities = null;
	this.m_supportsCellValueOperand = null;
	this.m_supportsIntersectLayers = null;
	this.m_supportsComplexFilter = null;
	this.m_supportsVisibilityFilter = null;
	this.m_supportsComplexTupleFilter = null;
	this.m_supportsSetOperand = null;
	this.m_supportsSpatialFilter = null;
	this.m_supportsSpatialFilterSrid = null;
	this.m_supportsConvertToFlatFilter = null;
	this.m_supportsCurrentMemberFilterExtension = null;
	this.m_supportsSetOperandCurrentMemberSingleNavigation = null;
	this.m_supportsUniversalDisplayHierarchiesZeroBased = null;
	this.m_supportsUniversalDisplayHierarchiesCustomDimensions = null;
	this.m_supportsUniversalDisplayHierarchies = null;
	this.m_supportsHierarchyPath = null;
	this.m_supportsUniqueHierarchyPath = null;
	this.m_supportsValueHelpHierarchyPath = null;
	this.m_supportsHierarchyVirtualRootNode = null;
	this.m_supportsHierarchyRestNode = null;
	this.m_supportsHierarchyNavigationDeltaMode = null;
	this.m_supportsHierNavCounter = null;
	this.m_supportsHierarchyMetadata = null;
	this.m_supportsHierarchyLevelMetadata = null;
	this.m_supportsHierCarryingDim = null;
	this.m_supportsHierAttHierFields = null;
	this.m_supportsFixMetadataHierarchyAttributes = null;
	this.m_supportsFixHierarchyFlagKeys = null;
	this.m_supportsExpandBottomUp = null;
	this.m_supportsDimensionHierarchyLevels = null;
	this.m_supportsCustomHierarchy = null;
	this.m_supportsCalculatedDimensions = null;
	this.m_supportsFormulaMeasures = null;
	this.m_supportsResultSetCache = null;
	this.m_supportsOthersFromConditions = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.QCapabilitiesDecorator.prototype.setSupportsCalculatedDimensions = function(supportsCalculatedDimensions)
{
	this.m_supportsCalculatedDimensions = oFF.TriStateBool.lookup(supportsCalculatedDimensions);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsCellValueOperand = function(supportsCellValueOperand)
{
	this.m_supportsCellValueOperand = oFF.TriStateBool.lookup(supportsCellValueOperand);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsComplexFilter = function(supportsComplexFilter)
{
	this.m_supportsComplexFilter = oFF.TriStateBool.lookup(supportsComplexFilter);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsComplexTupleFilter = function(supportsComplexTupleFilter)
{
	this.m_supportsComplexTupleFilter = oFF.TriStateBool.lookup(supportsComplexTupleFilter);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsConvertToFlatFilter = function(supportsConvertToFlatFilter)
{
	this.m_supportsConvertToFlatFilter = oFF.TriStateBool.lookup(supportsConvertToFlatFilter);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsCurrentMemberFilterExtension = function(supportsCurrentMemberFilterExtension)
{
	this.m_supportsCurrentMemberFilterExtension = oFF.TriStateBool.lookup(supportsCurrentMemberFilterExtension);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsCustomHierarchy = function(supportsCustomHierarchy)
{
	this.m_supportsCustomHierarchy = oFF.TriStateBool.lookup(supportsCustomHierarchy);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsDimensionHierarchyLevels = function(supportsDimensionHierarchyLevels)
{
	this.m_supportsDimensionHierarchyLevels = oFF.TriStateBool.lookup(supportsDimensionHierarchyLevels);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsExpandBottomUp = function(supportsExpandBottomUp)
{
	this.m_supportsExpandBottomUp = oFF.TriStateBool.lookup(supportsExpandBottomUp);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsFixHierarchyFlatKeys = function(supportsFixHierarchyFlatKeys)
{
	this.m_supportsFixHierarchyFlagKeys = oFF.TriStateBool.lookup(supportsFixHierarchyFlatKeys);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsFixMetadataHierarchyAttributes = function(supportsFixMetadataHierarchyAttributes)
{
	this.m_supportsFixMetadataHierarchyAttributes = oFF.TriStateBool.lookup(supportsFixMetadataHierarchyAttributes);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsFormulaMeasures = function(supportsFormulaMeasures)
{
	this.m_supportsFormulaMeasures = oFF.TriStateBool.lookup(supportsFormulaMeasures);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsHierarchyAttHierFields = function(supportsHierAttHierFields)
{
	this.m_supportsHierAttHierFields = oFF.TriStateBool.lookup(supportsHierAttHierFields);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsHierarchyCarryingDim = function(supportsHierCarryingDim)
{
	this.m_supportsHierCarryingDim = oFF.TriStateBool.lookup(supportsHierCarryingDim);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsHierarchyLevelMetadata = function(supportsHierarchyLevelMetadata)
{
	this.m_supportsHierarchyLevelMetadata = oFF.TriStateBool.lookup(supportsHierarchyLevelMetadata);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsHierarchyMetadata = function(supportsHierarchyMetadata)
{
	this.m_supportsHierarchyMetadata = oFF.TriStateBool.lookup(supportsHierarchyMetadata);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsHierarchyNavCounter = function(supportsHierarchyNavCounter)
{
	this.m_supportsHierNavCounter = oFF.TriStateBool.lookup(supportsHierarchyNavCounter);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsHierarchyNavigationDeltaMode = function(supportsHierarchyNavigationDeltaMode)
{
	this.m_supportsHierarchyNavigationDeltaMode = oFF.TriStateBool.lookup(supportsHierarchyNavigationDeltaMode);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsHierarchyPath = function(supportsHierarchyPath)
{
	this.m_supportsHierarchyPath = oFF.TriStateBool.lookup(supportsHierarchyPath);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsHierarchyRestNode = function(supportsHierarchyRestNode)
{
	this.m_supportsHierarchyRestNode = oFF.TriStateBool.lookup(supportsHierarchyRestNode);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsHierarchyVirtualRootNode = function(supportsHierarchyVirtualRootNode)
{
	this.m_supportsHierarchyVirtualRootNode = oFF.TriStateBool.lookup(supportsHierarchyVirtualRootNode);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsIntersectLayers = function(supportsIntersectLayers)
{
	this.m_supportsIntersectLayers = oFF.TriStateBool.lookup(supportsIntersectLayers);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsSetOperand = function(supportsSetOperand)
{
	this.m_supportsSetOperand = oFF.TriStateBool.lookup(supportsSetOperand);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsSetOperandCurrentMemberSingleNavigation = function(supportsSetOperandCurrentMemberSingleNavigation)
{
	this.m_supportsSetOperandCurrentMemberSingleNavigation = oFF.TriStateBool.lookup(supportsSetOperandCurrentMemberSingleNavigation);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsSpatialFilter = function(supportsSpatialFilter)
{
	this.m_supportsSpatialFilter = oFF.TriStateBool.lookup(supportsSpatialFilter);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsSpatialFilterSrid = function(supportsSpatialFilterSrid)
{
	this.m_supportsSpatialFilterSrid = oFF.TriStateBool.lookup(supportsSpatialFilterSrid);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsUniqueHierarchyPath = function(supportsUniqueHierarchyPath)
{
	this.m_supportsUniqueHierarchyPath = oFF.TriStateBool.lookup(supportsUniqueHierarchyPath);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsUniversalDisplayHierarchies = function(supportsUniversalDisplayHierarchies)
{
	this.m_supportsUniversalDisplayHierarchies = oFF.TriStateBool.lookup(supportsUniversalDisplayHierarchies);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsUniversalDisplayHierarchiesCustomDimensions = function(supportsUniversalDisplayHierarchiesCustomDimensions)
{
	this.m_supportsUniversalDisplayHierarchiesCustomDimensions = oFF.TriStateBool.lookup(supportsUniversalDisplayHierarchiesCustomDimensions);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsUniversalDisplayHierarchiesZeroBased = function(supportsUniversalDisplayHierarchiesZeroBased)
{
	this.m_supportsUniversalDisplayHierarchiesZeroBased = oFF.TriStateBool.lookup(supportsUniversalDisplayHierarchiesZeroBased);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsValueHelpHierarchyPath = function(supportsValueHelpHierarchyPath)
{
	this.m_supportsValueHelpHierarchyPath = oFF.TriStateBool.lookup(supportsValueHelpHierarchyPath);
};
oFF.QCapabilitiesDecorator.prototype.setSupportsVisibilityFilter = function(supportsVisibilityFilter)
{
	this.m_supportsVisibilityFilter = oFF.TriStateBool.lookup(supportsVisibilityFilter);
};
oFF.QCapabilitiesDecorator.prototype.supportsAggregationNopNull = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsAggregationNopNull();
};
oFF.QCapabilitiesDecorator.prototype.supportsAggregationNopNullExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsAggregationNopNullExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsAggregationNopNullZero = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsAggregationNopNullZero();
};
oFF.QCapabilitiesDecorator.prototype.supportsAggregationNopNullZeroExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsAggregationNopNullZeroExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsAggregationsFirstLastAverageOfDimension = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsAggregationsFirstLastAverageOfDimension();
};
oFF.QCapabilitiesDecorator.prototype.supportsAsyncRemoteModelValidation = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsAsyncRemoteModelValidation();
};
oFF.QCapabilitiesDecorator.prototype.supportsAttributeValueLookupExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsAttributeValueLookupExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsAutoVariableSubmit = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsAutoVariableSubmit();
};
oFF.QCapabilitiesDecorator.prototype.supportsAverageCountNullZero = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsAverageCountNullZero();
};
oFF.QCapabilitiesDecorator.prototype.supportsBreakGrouping = function(sortType)
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsBreakGrouping(sortType);
};
oFF.QCapabilitiesDecorator.prototype.supportsCDSProjectionViews = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCDSProjectionViews();
};
oFF.QCapabilitiesDecorator.prototype.supportsCalculateWithNullCellsUnitType = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCalculateWithNullCellsUnitType();
};
oFF.QCapabilitiesDecorator.prototype.supportsCalculatedDimensions = function()
{
	let result;
	if (this.m_supportsCalculatedDimensions === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCalculatedDimensions();
	}
	else
	{
		result = this.m_supportsCalculatedDimensions.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsCalculatedDimensionsExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCalculatedDimensionsExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsCalculatedDimensionsExt2 = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCalculatedDimensionsExt2();
};
oFF.QCapabilitiesDecorator.prototype.supportsCartesianFilterIntersect = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCartesianFilterIntersect();
};
oFF.QCapabilitiesDecorator.prototype.supportsCatalogServiceV2 = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCatalogServiceV2();
};
oFF.QCapabilitiesDecorator.prototype.supportsCeScenarioParams = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCeScenarioParams();
};
oFF.QCapabilitiesDecorator.prototype.supportsCellDocumentId = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCellDocumentId();
};
oFF.QCapabilitiesDecorator.prototype.supportsCellValueOperand = function()
{
	let result;
	if (this.m_supportsCellValueOperand === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCellValueOperand();
	}
	else
	{
		result = this.m_supportsCellValueOperand.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsCellValueOperandExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCellValueOperandExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsClientInfo = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsClientInfo();
};
oFF.QCapabilitiesDecorator.prototype.supportsComplexFilter = function()
{
	let result;
	if (this.m_supportsComplexFilter === oFF.TriStateBool._DEFAULT)
	{
		result = this.m_parentCapabilities.supportsComplexFilter();
	}
	else
	{
		result = this.m_supportsComplexFilter.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsComplexSorting = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsComplexSorting();
};
oFF.QCapabilitiesDecorator.prototype.supportsComplexTupleFilter = function()
{
	let result;
	if (this.m_supportsComplexTupleFilter === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsComplexTupleFilter();
	}
	else
	{
		result = this.m_supportsComplexTupleFilter.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsCompoundGrowthRate = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCompoundGrowthRate();
};
oFF.QCapabilitiesDecorator.prototype.supportsConditionalResultVisibility = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsConditionalResultVisibility();
};
oFF.QCapabilitiesDecorator.prototype.supportsConditionalResults = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsConditionalResults();
};
oFF.QCapabilitiesDecorator.prototype.supportsConditions = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsConditions();
};
oFF.QCapabilitiesDecorator.prototype.supportsConditionsOverride = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsConditionsOverride();
};
oFF.QCapabilitiesDecorator.prototype.supportsConditionsWithHiddenMeasures = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsConditionsWithHiddenMeasures();
};
oFF.QCapabilitiesDecorator.prototype.supportsConditionsWithVersions = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsConditionsWithVersions();
};
oFF.QCapabilitiesDecorator.prototype.supportsConvertToFlatFilter = function()
{
	let result;
	if (this.m_supportsConvertToFlatFilter === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsConvertToFlatFilter();
	}
	else
	{
		result = this.m_supportsConvertToFlatFilter.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsCorrectDimensionDescription = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCorrectDimensionDescription();
};
oFF.QCapabilitiesDecorator.prototype.supportsCorrectDimensionDescriptionExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCorrectDimensionDescriptionExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsCubeBlending = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCubeBlending();
};
oFF.QCapabilitiesDecorator.prototype.supportsCubeBlendingAggregation = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCubeBlendingAggregation();
};
oFF.QCapabilitiesDecorator.prototype.supportsCubeBlendingAggregationExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCubeBlendingAggregationExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsCubeBlendingCustomMember = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCubeBlendingCustomMember();
};
oFF.QCapabilitiesDecorator.prototype.supportsCubeBlendingCustomMemberExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCubeBlendingCustomMemberExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsCubeBlendingExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCubeBlendingExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsCubeBlendingOutOfContext = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCubeBlendingOutOfContext();
};
oFF.QCapabilitiesDecorator.prototype.supportsCubeBlendingOutOfContextExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCubeBlendingOutOfContextExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsCubeBlendingProperties = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCubeBlendingProperties();
};
oFF.QCapabilitiesDecorator.prototype.supportsCubeBlendingPropertiesExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCubeBlendingPropertiesExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsCubeBlendingReadmode = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCubeBlendingReadmode();
};
oFF.QCapabilitiesDecorator.prototype.supportsCubeBlendingReadmodeExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCubeBlendingReadmodeExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsCubeBlendingSorting = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCubeBlendingSorting();
};
oFF.QCapabilitiesDecorator.prototype.supportsCubeBlendingSortingExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCubeBlendingSortingExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsCubeBlendingWithNSubqueries = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCubeBlendingWithNSubqueries();
};
oFF.QCapabilitiesDecorator.prototype.supportsCubeCache = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCubeCache();
};
oFF.QCapabilitiesDecorator.prototype.supportsCummulative = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCummulative();
};
oFF.QCapabilitiesDecorator.prototype.supportsCurrencyTranslation = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCurrencyTranslation();
};
oFF.QCapabilitiesDecorator.prototype.supportsCurrentMemberFilterExtension = function()
{
	let result;
	if (this.m_supportsCurrentMemberFilterExtension === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCurrentMemberFilterExtension();
	}
	else
	{
		result = this.m_supportsCurrentMemberFilterExtension.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsCurrentMemberFilterExtensionExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCurrentMemberFilterExtensionExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsCustomDimension2 = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCustomDimension2();
};
oFF.QCapabilitiesDecorator.prototype.supportsCustomDimension2Ext = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCustomDimension2Ext();
};
oFF.QCapabilitiesDecorator.prototype.supportsCustomDimension2MemberMetadata = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCustomDimension2MemberMetadata();
};
oFF.QCapabilitiesDecorator.prototype.supportsCustomDimensionFilterCapability = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCustomDimensionFilterCapability();
};
oFF.QCapabilitiesDecorator.prototype.supportsCustomDimensionMemberExecutionStep = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCustomDimensionMemberExecutionStep();
};
oFF.QCapabilitiesDecorator.prototype.supportsCustomHierarchy = function()
{
	let result;
	if (this.m_supportsCustomHierarchy === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCustomHierarchy();
	}
	else
	{
		result = this.m_supportsCustomHierarchy.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsCustomMeasureSortOrder = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCustomMeasureSortOrder();
};
oFF.QCapabilitiesDecorator.prototype.supportsCustomMeasuresInMetadata = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCustomMeasuresInMetadata();
};
oFF.QCapabilitiesDecorator.prototype.supportsCustomMemberKeySortOrder = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCustomMemberKeySortOrder();
};
oFF.QCapabilitiesDecorator.prototype.supportsCustomMemberKeySortOrderExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCustomMemberKeySortOrderExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsCustomMemberKeySortOrderExt2 = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCustomMemberKeySortOrderExt2();
};
oFF.QCapabilitiesDecorator.prototype.supportsCustomSort = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCustomSort();
};
oFF.QCapabilitiesDecorator.prototype.supportsCustomSortingExtended = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsCustomSortingExtended();
};
oFF.QCapabilitiesDecorator.prototype.supportsDataCellContexts = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsDataCellContexts();
};
oFF.QCapabilitiesDecorator.prototype.supportsDataCellSorting = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsDataCellSorting();
};
oFF.QCapabilitiesDecorator.prototype.supportsDataCells = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsDataCells();
};
oFF.QCapabilitiesDecorator.prototype.supportsDataRefreshAndDataTopicality = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsDataRefreshAndDataTopicality();
};
oFF.QCapabilitiesDecorator.prototype.supportsDefaultMeasureAddedForClustering = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsDefaultMeasureAddedForClustering();
};
oFF.QCapabilitiesDecorator.prototype.supportsDefaultResultSetAttributes = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsDefaultResultSetAttributes();
};
oFF.QCapabilitiesDecorator.prototype.supportsDetailedResponseExpansion = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsDetailedResponseExpansion();
};
oFF.QCapabilitiesDecorator.prototype.supportsDifferenceFromCalculationExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsDifferenceFromCalculationExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsDimensionDefaultMember = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsDimensionDefaultMember();
};
oFF.QCapabilitiesDecorator.prototype.supportsDimensionHierarchyLevels = function()
{
	let result;
	if (this.m_supportsDimensionHierarchyLevels === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsDimensionHierarchyLevels();
	}
	else
	{
		result = this.m_supportsDimensionHierarchyLevels.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsDimensionHierarchyMetadata = function()
{
	let result;
	if (this.m_supportsDimensionHierarchyMetadata === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsDimensionHierarchyMetadata();
	}
	else
	{
		result = this.m_supportsDimensionHierarchyMetadata.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsDimensionKeyAttributes = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsDimensionKeyAttributes();
};
oFF.QCapabilitiesDecorator.prototype.supportsDimensionSorting = function(dimension, sortType)
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsDimensionSorting(dimension, sortType);
};
oFF.QCapabilitiesDecorator.prototype.supportsDimensionToMeasureCalculationExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsDimensionToMeasureCalculationExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsDimensionVisibility = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsDimensionVisibility();
};
oFF.QCapabilitiesDecorator.prototype.supportsDisplayAttributes = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsDisplayAttributes();
};
oFF.QCapabilitiesDecorator.prototype.supportsDisplayHierarchyFixInFilter = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsDisplayHierarchyFixInFilter();
};
oFF.QCapabilitiesDecorator.prototype.supportsDisplayIdFormat = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsDisplayIdFormat();
};
oFF.QCapabilitiesDecorator.prototype.supportsDisplayShortMediumLongText = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsDisplayShortMediumLongText();
};
oFF.QCapabilitiesDecorator.prototype.supportsDynamicRestrictionOnFormula = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsDynamicRestrictionOnFormula();
};
oFF.QCapabilitiesDecorator.prototype.supportsDynamicTimeMeasure = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsDynamicTimeMeasure();
};
oFF.QCapabilitiesDecorator.prototype.supportsDynamicVariableRefresh = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsDynamicVariableRefresh();
};
oFF.QCapabilitiesDecorator.prototype.supportsErrorAboveLevel = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsErrorAboveLevel();
};
oFF.QCapabilitiesDecorator.prototype.supportsExceptionAggregationAvgNullSelectionMember = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExceptionAggregationAvgNullSelectionMember();
};
oFF.QCapabilitiesDecorator.prototype.supportsExceptionAggregationAvgNullSelectionMemberExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExceptionAggregationAvgNullSelectionMemberExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsExceptionAggregationCountNullSelectionMember = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExceptionAggregationCountNullSelectionMember();
};
oFF.QCapabilitiesDecorator.prototype.supportsExceptionAggregationCountNullSelectionMemberExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExceptionAggregationCountNullSelectionMemberExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsExceptionAggregationDimsFormulas = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExceptionAggregationDimsFormulas();
};
oFF.QCapabilitiesDecorator.prototype.supportsExceptionAggregationDimsFormulasExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExceptionAggregationDimsFormulasExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsExceptionAggregationFirstLastSelectionMember = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExceptionAggregationFirstLastSelectionMember();
};
oFF.QCapabilitiesDecorator.prototype.supportsExceptionAggregationFirstLastSelectionMemberExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExceptionAggregationFirstLastSelectionMemberExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsExceptionAggregationOnSelectionExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExceptionAggregationOnSelectionExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsExceptionSettings = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExceptionSettings();
};
oFF.QCapabilitiesDecorator.prototype.supportsExceptionSettingsExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExceptionSettingsExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsExceptionThresholdNoPrec = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExceptionThresholdNoPrec();
};
oFF.QCapabilitiesDecorator.prototype.supportsExceptions = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExceptions();
};
oFF.QCapabilitiesDecorator.prototype.supportsExceptionsSingleMemberFilterValidation = function()
{
	return oFF.isNull(this.m_parentCapabilities) ? false : this.m_parentCapabilities.supportsExceptionsSingleMemberFilterValidation();
};
oFF.QCapabilitiesDecorator.prototype.supportsExceptionsV2 = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExceptionsV2();
};
oFF.QCapabilitiesDecorator.prototype.supportsExcludeNodeInComplexFilter = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExcludeNodeInComplexFilter();
};
oFF.QCapabilitiesDecorator.prototype.supportsExcludeOnHierarchy = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExcludeOnHierarchy();
};
oFF.QCapabilitiesDecorator.prototype.supportsExpandBottomUp = function()
{
	let result;
	if (this.m_supportsExpandBottomUp === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExpandBottomUp();
	}
	else
	{
		result = this.m_supportsExpandBottomUp.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsExplicitDrillOnFilteredNodes = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExplicitDrillOnFilteredNodes();
};
oFF.QCapabilitiesDecorator.prototype.supportsExtendedDimensionVisibility = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExtendedDimensionVisibility();
};
oFF.QCapabilitiesDecorator.prototype.supportsExtendedDimensions = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExtendedDimensions();
};
oFF.QCapabilitiesDecorator.prototype.supportsExtendedDimensionsChangeDefaultRenamingAndDescription = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExtendedDimensionsChangeDefaultRenamingAndDescription();
};
oFF.QCapabilitiesDecorator.prototype.supportsExtendedDimensionsChangeDefaultRenamingAndDescriptionExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExtendedDimensionsChangeDefaultRenamingAndDescriptionExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsExtendedDimensionsCopyAllHierarchies = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExtendedDimensionsCopyAllHierarchies();
};
oFF.QCapabilitiesDecorator.prototype.supportsExtendedDimensionsCopyAllHierarchiesExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExtendedDimensionsCopyAllHierarchiesExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsExtendedDimensionsFieldMapping = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExtendedDimensionsFieldMapping();
};
oFF.QCapabilitiesDecorator.prototype.supportsExtendedDimensionsJoinCardinality = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExtendedDimensionsJoinCardinality();
};
oFF.QCapabilitiesDecorator.prototype.supportsExtendedDimensionsJoinColumns = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExtendedDimensionsJoinColumns();
};
oFF.QCapabilitiesDecorator.prototype.supportsExtendedDimensionsOuterJoin = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExtendedDimensionsOuterJoin();
};
oFF.QCapabilitiesDecorator.prototype.supportsExtendedDimensionsSkip = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExtendedDimensionsSkip();
};
oFF.QCapabilitiesDecorator.prototype.supportsExtendedKeyFigureProperties = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExtendedKeyFigureProperties();
};
oFF.QCapabilitiesDecorator.prototype.supportsExtendedSort = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExtendedSort();
};
oFF.QCapabilitiesDecorator.prototype.supportsExtendedVariableDefinition = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsExtendedVariableDefinition();
};
oFF.QCapabilitiesDecorator.prototype.supportsF4FilterForTextField = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsF4FilterForTextField();
};
oFF.QCapabilitiesDecorator.prototype.supportsFieldSorting = function(field)
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsFieldSorting(field);
};
oFF.QCapabilitiesDecorator.prototype.supportsFilterAsymmetricVisibility = function()
{
	return this.supportsComplexFilter() && this.supportsVisibilityFilter();
};
oFF.QCapabilitiesDecorator.prototype.supportsFilterCapabilityExtended = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsFilterCapabilityExtended();
};
oFF.QCapabilitiesDecorator.prototype.supportsFilterCascading = function(session)
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsFilterCascading(session);
};
oFF.QCapabilitiesDecorator.prototype.supportsFilterMeasureBased = function()
{
	return this.supportsCalculatedDimensions() && this.supportsFormulaMeasures();
};
oFF.QCapabilitiesDecorator.prototype.supportsFilterStateInFirefly = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsFilterStateInFirefly();
};
oFF.QCapabilitiesDecorator.prototype.supportsFilteringAcrossModels = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsFilteringAcrossModels();
};
oFF.QCapabilitiesDecorator.prototype.supportsFixHierarchyFlatKeys = function()
{
	let result;
	if (this.m_supportsFixHierarchyFlagKeys === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsFixHierarchyFlatKeys();
	}
	else
	{
		result = this.m_supportsFixHierarchyFlagKeys.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsFixMetadataHierarchyAttributes = function()
{
	let result;
	if (this.m_supportsFixMetadataHierarchyAttributes === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsFixMetadataHierarchyAttributes();
	}
	else
	{
		result = this.m_supportsFixMetadataHierarchyAttributes.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsFixMetadataHierarchyAttributesExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsFixMetadataHierarchyAttributesExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsFlatTimeDisambiguation = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsFlatTimeDisambiguation();
};
oFF.QCapabilitiesDecorator.prototype.supportsFlattenDynamicFilter = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsFlattenDynamicFilter();
};
oFF.QCapabilitiesDecorator.prototype.supportsFlexibleClientInfo = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsFlexibleClientInfo();
};
oFF.QCapabilitiesDecorator.prototype.supportsFlexibleTimeMemberNavFeatures = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsFlexibleTimeMemberNavFeatures();
};
oFF.QCapabilitiesDecorator.prototype.supportsFormulaMeasures = function()
{
	let result;
	if (this.m_supportsFormulaMeasures === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsFormulaMeasures();
	}
	else
	{
		result = this.m_supportsFormulaMeasures.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsFunctionalVariables = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsFunctionalVariables();
};
oFF.QCapabilitiesDecorator.prototype.supportsGeoSuffix = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsGeoSuffix();
};
oFF.QCapabilitiesDecorator.prototype.supportsHierarchyAttHierFields = function()
{
	let result;
	if (this.m_supportsHierAttHierFields === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsHierarchyAttHierFields();
	}
	else
	{
		result = this.m_supportsHierAttHierFields.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsHierarchyCarryingDim = function()
{
	let result;
	if (this.m_supportsHierCarryingDim === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsHierarchyCarryingDim();
	}
	else
	{
		result = this.m_supportsHierCarryingDim.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsHierarchyDefaults = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsHierarchyDefaults();
};
oFF.QCapabilitiesDecorator.prototype.supportsHierarchyLevelDrilling = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsHierarchyLevelDrilling();
};
oFF.QCapabilitiesDecorator.prototype.supportsHierarchyLevelMetadata = function()
{
	let result;
	if (this.m_supportsHierarchyLevelMetadata === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsHierarchyLevelMetadata();
	}
	else
	{
		result = this.m_supportsHierarchyLevelMetadata.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsHierarchyLevelOffsetFilter = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsHierarchyLevelOffsetFilter();
};
oFF.QCapabilitiesDecorator.prototype.supportsHierarchyMetadata = function()
{
	let result;
	if (this.m_supportsHierarchyMetadata === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsHierarchyMetadata();
	}
	else
	{
		result = this.m_supportsHierarchyMetadata.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsHierarchyNavCounter = function()
{
	let result;
	if (this.m_supportsHierNavCounter === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsHierarchyNavCounter();
	}
	else
	{
		result = this.m_supportsHierNavCounter.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsHierarchyNavigationDeltaMode = function()
{
	let result;
	if (this.m_supportsHierarchyNavigationDeltaMode === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsHierarchyNavigationDeltaMode();
	}
	else
	{
		result = this.m_supportsHierarchyNavigationDeltaMode.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsHierarchyPath = function()
{
	let result;
	if (this.m_supportsHierarchyPath === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsHierarchyPath();
	}
	else
	{
		result = this.m_supportsHierarchyPath.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsHierarchyPathPresentationType = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsHierarchyPathPresentationType();
};
oFF.QCapabilitiesDecorator.prototype.supportsHierarchyRestNode = function()
{
	let result;
	if (this.m_supportsHierarchyRestNode === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsHierarchyRestNode();
	}
	else
	{
		result = this.m_supportsHierarchyRestNode.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsHierarchyTrapezoidFilter = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsHierarchyTrapezoidFilter();
};
oFF.QCapabilitiesDecorator.prototype.supportsHierarchyVirtualRootNode = function()
{
	let result;
	if (this.m_supportsHierarchyVirtualRootNode === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsHierarchyVirtualRootNode();
	}
	else
	{
		result = this.m_supportsHierarchyVirtualRootNode.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsIDAttributeForMeasureDimension = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsIDAttributeForMeasureDimension();
};
oFF.QCapabilitiesDecorator.prototype.supportsIgnoreExternalDimensions = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsIgnoreExternalDimensions();
};
oFF.QCapabilitiesDecorator.prototype.supportsIgnoreExternalDimensionsExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsIgnoreExternalDimensionsExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsIgnoreUnitOfZeroValueInAggregation = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsIgnoreUnitOfZeroValueInAggregation();
};
oFF.QCapabilitiesDecorator.prototype.supportsInAModelExternalDimension = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsInAModelExternalDimension();
};
oFF.QCapabilitiesDecorator.prototype.supportsInAModelExternalValuehelp = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsInAModelExternalValuehelp();
};
oFF.QCapabilitiesDecorator.prototype.supportsInaCurrentMember = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsInaCurrentMember();
};
oFF.QCapabilitiesDecorator.prototype.supportsInputEnablementFilterSettings = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsInputEnablementFilterSettings();
};
oFF.QCapabilitiesDecorator.prototype.supportsInputReadinessFilter = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsInputReadinessFilter();
};
oFF.QCapabilitiesDecorator.prototype.supportsInputReadinessWithNavigationalAttributes = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsInputReadinessWithNavigationalAttributes();
};
oFF.QCapabilitiesDecorator.prototype.supportsIntersectLayers = function()
{
	let result;
	if (this.m_supportsIntersectLayers === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsIntersectLayers();
	}
	else
	{
		result = this.m_supportsIntersectLayers.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsIteratedFormula = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsIteratedFormula();
};
oFF.QCapabilitiesDecorator.prototype.supportsKeepOriginalTexts = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsKeepOriginalTexts();
};
oFF.QCapabilitiesDecorator.prototype.supportsLevelNavigationDisabled = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsLevelNavigationDisabled();
};
oFF.QCapabilitiesDecorator.prototype.supportsLightweightMetadata = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsLightweightMetadata();
};
oFF.QCapabilitiesDecorator.prototype.supportsLocaleSorting = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsLocaleSorting();
};
oFF.QCapabilitiesDecorator.prototype.supportsLowerLevelNodeAlignment = function(alignment)
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsLowerLevelNodeAlignment(alignment);
};
oFF.QCapabilitiesDecorator.prototype.supportsMaxDrillLevel = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsMaxDrillLevel();
};
oFF.QCapabilitiesDecorator.prototype.supportsMeasureBasedVariance = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsMeasureBasedVariance();
};
oFF.QCapabilitiesDecorator.prototype.supportsMeasureMemberCurrencyTranslations = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsMeasureMemberCurrencyTranslations();
};
oFF.QCapabilitiesDecorator.prototype.supportsMeasureMemberDefinition = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsMeasureMemberDefinition();
};
oFF.QCapabilitiesDecorator.prototype.supportsMeasureMemberDetails = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsMeasureMemberDetails();
};
oFF.QCapabilitiesDecorator.prototype.supportsMeasureMemberType = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsMeasureMemberType();
};
oFF.QCapabilitiesDecorator.prototype.supportsMeasureMemberUnitTranslations = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsMeasureMemberUnitTranslations();
};
oFF.QCapabilitiesDecorator.prototype.supportsMeasureSorting = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsMeasureSorting();
};
oFF.QCapabilitiesDecorator.prototype.supportsMemberUniqueNamesCompatibility = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsMemberUniqueNamesCompatibility();
};
oFF.QCapabilitiesDecorator.prototype.supportsMemberVisibility = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsMemberVisibility();
};
oFF.QCapabilitiesDecorator.prototype.supportsMetadataDataCategory = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsMetadataDataCategory();
};
oFF.QCapabilitiesDecorator.prototype.supportsMetadataDimensionOthers = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsMetadataDimensionOthers();
};
oFF.QCapabilitiesDecorator.prototype.supportsMetadataHasExternalHierarchies = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsMetadataHasExternalHierarchies();
};
oFF.QCapabilitiesDecorator.prototype.supportsMetadataResultFormatOptions = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsMetadataResultFormatOptions();
};
oFF.QCapabilitiesDecorator.prototype.supportsMixedDisplayKey = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsMixedDisplayKey();
};
oFF.QCapabilitiesDecorator.prototype.supportsMultiComplexFilter = function()
{
	return this.supportsComplexFilter() || this.supportsComplexTupleFilter();
};
oFF.QCapabilitiesDecorator.prototype.supportsMultiSource = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsMultiSource();
};
oFF.QCapabilitiesDecorator.prototype.supportsMultipleExAggDimsInCalcPlanExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsMultipleExAggDimsInCalcPlanExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsMultipleFiltersOnSameDimension = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsMultipleFiltersOnSameDimension();
};
oFF.QCapabilitiesDecorator.prototype.supportsMultipleNonFlatFiltersOnHierarchy = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsMultipleNonFlatFiltersOnHierarchy();
};
oFF.QCapabilitiesDecorator.prototype.supportsNamePath = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsNamePath();
};
oFF.QCapabilitiesDecorator.prototype.supportsNamedCustomMember = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsNamedCustomMember();
};
oFF.QCapabilitiesDecorator.prototype.supportsNoDataActions = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsNoDataActions();
};
oFF.QCapabilitiesDecorator.prototype.supportsNonNodePath = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsNonNodePath();
};
oFF.QCapabilitiesDecorator.prototype.supportsNormalizePercentageInterval = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsNormalizePercentageInterval();
};
oFF.QCapabilitiesDecorator.prototype.supportsNullFilter = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsNullFilter();
};
oFF.QCapabilitiesDecorator.prototype.supportsNullZeroSuppression = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsNullZeroSuppression();
};
oFF.QCapabilitiesDecorator.prototype.supportsNumberAsString = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsNumberAsString();
};
oFF.QCapabilitiesDecorator.prototype.supportsNumericShiftPercent = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsNumericShiftPercent();
};
oFF.QCapabilitiesDecorator.prototype.supportsOptimizeSelectAllInRM = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsOptimizeSelectAllInRM();
};
oFF.QCapabilitiesDecorator.prototype.supportsOthersDetailsFromConditions = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsOthersDetailsFromConditions();
};
oFF.QCapabilitiesDecorator.prototype.supportsOthersFromConditions = function()
{
	let result;
	if (this.m_supportsOthersFromConditions === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsOthersFromConditions();
	}
	else
	{
		result = this.m_supportsOthersFromConditions.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsPagingTupleCountBeforeSlicing = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsPagingTupleCountBeforeSlicing();
};
oFF.QCapabilitiesDecorator.prototype.supportsPersistedInA = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsPersistedInA();
};
oFF.QCapabilitiesDecorator.prototype.supportsPlanningOnCalculatedDimensions = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsPlanningOnCalculatedDimensions();
};
oFF.QCapabilitiesDecorator.prototype.supportsPlanningOnCalculatedDimensionsExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsPlanningOnCalculatedDimensionsExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsPrequeryBasedFilteringAcrossModels = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsPrequeryBasedFilteringAcrossModels();
};
oFF.QCapabilitiesDecorator.prototype.supportsPrequeryBasedFilteringAcrossModelsExt = function(other)
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsPrequeryBasedFilteringAcrossModelsExt(other);
};
oFF.QCapabilitiesDecorator.prototype.supportsPreserveGrouping = function(sortType)
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsPreserveGrouping(sortType);
};
oFF.QCapabilitiesDecorator.prototype.supportsQueryCurrencyTranslation = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsQueryCurrencyTranslation();
};
oFF.QCapabilitiesDecorator.prototype.supportsQueryDataCellModelDefaults = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsQueryDataCellModelDefaults();
};
oFF.QCapabilitiesDecorator.prototype.supportsQueryDefinedMemberAccess = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsQueryDefinedMemberAccess();
};
oFF.QCapabilitiesDecorator.prototype.supportsRRI3 = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsRRI3();
};
oFF.QCapabilitiesDecorator.prototype.supportsRSCellFormatTypeSpecific = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsRSCellFormatTypeSpecific();
};
oFF.QCapabilitiesDecorator.prototype.supportsRangeFilterOnTimeBasedDimension = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsRangeFilterOnTimeBasedDimension();
};
oFF.QCapabilitiesDecorator.prototype.supportsRankForTopN = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsRankForTopN();
};
oFF.QCapabilitiesDecorator.prototype.supportsReadModeBookedWithoutMeasureContext = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsReadModeBookedWithoutMeasureContext();
};
oFF.QCapabilitiesDecorator.prototype.supportsRemoteBlending = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsRemoteBlending();
};
oFF.QCapabilitiesDecorator.prototype.supportsRemoteBlendingBW = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsRemoteBlendingBW();
};
oFF.QCapabilitiesDecorator.prototype.supportsRemoteBlendingExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsRemoteBlendingExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsRemoteBlendingWithSplittedSerializationRequests = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsRemoteBlendingWithSplittedSerializationRequests();
};
oFF.QCapabilitiesDecorator.prototype.supportsRemoteFilter = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsRemoteFilter();
};
oFF.QCapabilitiesDecorator.prototype.supportsRemoteFilterExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsRemoteFilterExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsReportReportInterface = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsReportReportInterface();
};
oFF.QCapabilitiesDecorator.prototype.supportsRequestTimezone = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsRequestTimezone();
};
oFF.QCapabilitiesDecorator.prototype.supportsRestrictedMeasureDynamicTimeExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsRestrictedMeasureDynamicTimeExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsRestrictedMeasures = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsRestrictedMeasures();
};
oFF.QCapabilitiesDecorator.prototype.supportsResultAlignmentType = function(resultAlignment)
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsResultAlignmentType(resultAlignment);
};
oFF.QCapabilitiesDecorator.prototype.supportsResultAlignmentWithActiveHierarchies = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsResultAlignmentWithActiveHierarchies();
};
oFF.QCapabilitiesDecorator.prototype.supportsResultSetCache = function()
{
	let result;
	if (this.m_supportsResultSetCache === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsResultSetCache();
	}
	else
	{
		result = this.m_supportsResultSetCache.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsResultSetCellExplain = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsResultSetCellExplain();
};
oFF.QCapabilitiesDecorator.prototype.supportsResultSetCellExplainExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsResultSetCellExplainExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsResultSetHierarchyLevel = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsResultSetHierarchyLevel();
};
oFF.QCapabilitiesDecorator.prototype.supportsResultSetInterval = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsResultSetInterval();
};
oFF.QCapabilitiesDecorator.prototype.supportsResultSetNumericValueWithInternalPrecision = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsResultSetNumericValueWithInternalPrecision();
};
oFF.QCapabilitiesDecorator.prototype.supportsResultSetUnitIndex = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsResultSetUnitIndex();
};
oFF.QCapabilitiesDecorator.prototype.supportsResultSetUnitIndexExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsResultSetUnitIndexExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsResultSetV2MetadataExtension1 = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsResultSetV2MetadataExtension1();
};
oFF.QCapabilitiesDecorator.prototype.supportsResultsetFacets = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsResultsetFacets();
};
oFF.QCapabilitiesDecorator.prototype.supportsReturnMetadataExtensions = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsReturnMetadataExtensions();
};
oFF.QCapabilitiesDecorator.prototype.supportsReturnMissingShape = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsReturnMissingShape();
};
oFF.QCapabilitiesDecorator.prototype.supportsRootOrphansAfterVisibilityFilter = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsRootOrphansAfterVisibilityFilter();
};
oFF.QCapabilitiesDecorator.prototype.supportsSapBWWorldHierarchy = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSapBWWorldHierarchy();
};
oFF.QCapabilitiesDecorator.prototype.supportsSapDate = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSapDate();
};
oFF.QCapabilitiesDecorator.prototype.supportsSemanticObject = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSemanticObject();
};
oFF.QCapabilitiesDecorator.prototype.supportsServerSideSorts = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsServerSideSorts();
};
oFF.QCapabilitiesDecorator.prototype.supportsSetOperand = function()
{
	let result;
	if (this.m_supportsSetOperand === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSetOperand();
	}
	else
	{
		result = this.m_supportsSetOperand.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsSetOperandCurrentMemberSingleNavigation = function()
{
	let result;
	if (this.m_supportsSetOperandCurrentMemberSingleNavigation === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSetOperandCurrentMemberSingleNavigation();
	}
	else
	{
		result = this.m_supportsSetOperandCurrentMemberSingleNavigation.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsSetOperandCurrentMemberSingleNavigationExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSetOperandCurrentMemberSingleNavigationExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsSidPresentation = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSidPresentation();
};
oFF.QCapabilitiesDecorator.prototype.supportsSimulation = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSimulation();
};
oFF.QCapabilitiesDecorator.prototype.supportsSortDirectionForHierarchySortType = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSortDirectionForHierarchySortType();
};
oFF.QCapabilitiesDecorator.prototype.supportsSortNewValues = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSortNewValues();
};
oFF.QCapabilitiesDecorator.prototype.supportsSortTupleMemberType = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSortTupleMemberType();
};
oFF.QCapabilitiesDecorator.prototype.supportsSortType = function(sortType)
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSortType(sortType);
};
oFF.QCapabilitiesDecorator.prototype.supportsSortingDefaults = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSortingDefaults();
};
oFF.QCapabilitiesDecorator.prototype.supportsSortingOnValueHelpQuery = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSortingOnValueHelpQuery();
};
oFF.QCapabilitiesDecorator.prototype.supportsSourceDescription = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSourceDescription();
};
oFF.QCapabilitiesDecorator.prototype.supportsSourceName = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSourceName();
};
oFF.QCapabilitiesDecorator.prototype.supportsSpatialChoropleth = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSpatialChoropleth();
};
oFF.QCapabilitiesDecorator.prototype.supportsSpatialClustering = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSpatialClustering();
};
oFF.QCapabilitiesDecorator.prototype.supportsSpatialFilter = function()
{
	let result;
	if (this.m_supportsSpatialFilter === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSpatialFilter();
	}
	else
	{
		result = this.m_supportsSpatialFilter.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsSpatialFilterSrid = function()
{
	let result;
	if (this.m_supportsSpatialFilterSrid === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSpatialFilterSrid();
	}
	else
	{
		result = this.m_supportsSpatialFilterSrid.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsSpatialTransformDistanceFilter = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSpatialTransformDistanceFilter();
};
oFF.QCapabilitiesDecorator.prototype.supportsSpatialTransformation = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSpatialTransformation();
};
oFF.QCapabilitiesDecorator.prototype.supportsSqlTypeBoolean = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSqlTypeBoolean();
};
oFF.QCapabilitiesDecorator.prototype.supportsStatisticalAggregations = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsStatisticalAggregations();
};
oFF.QCapabilitiesDecorator.prototype.supportsStatisticalAggregationsExt = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsStatisticalAggregationsExt();
};
oFF.QCapabilitiesDecorator.prototype.supportsStringsForNumericValues = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsStringsForNumericValues();
};
oFF.QCapabilitiesDecorator.prototype.supportsStructureOnFreeAxis = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsStructureOnFreeAxis();
};
oFF.QCapabilitiesDecorator.prototype.supportsStructureRestrictionsInValueHelp = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsStructureRestrictionsInValueHelp();
};
oFF.QCapabilitiesDecorator.prototype.supportsSupplements = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSupplements();
};
oFF.QCapabilitiesDecorator.prototype.supportsSupportsRunningAggregation = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSupportsRunningAggregation();
};
oFF.QCapabilitiesDecorator.prototype.supportsSuppressKeyfigureCalculation = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSuppressKeyfigureCalculation();
};
oFF.QCapabilitiesDecorator.prototype.supportsSuppressSupplements = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsSuppressSupplements();
};
oFF.QCapabilitiesDecorator.prototype.supportsTechnicalAxis = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsTechnicalAxis();
};
oFF.QCapabilitiesDecorator.prototype.supportsTextInHierarchyForCharacteristicsWithoutText = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsTextInHierarchyForCharacteristicsWithoutText();
};
oFF.QCapabilitiesDecorator.prototype.supportsTimeBasedVariance = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsTimeBasedVariance();
};
oFF.QCapabilitiesDecorator.prototype.supportsTimeBasedVarianceInBlending = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsTimeBasedVarianceInBlending();
};
oFF.QCapabilitiesDecorator.prototype.supportsTimeBasedVarianceShowAllLevels = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsTimeBasedVarianceShowAllLevels();
};
oFF.QCapabilitiesDecorator.prototype.supportsTimeBasedVarianceWithFilterClosureUnderDisplayDrill = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsTimeBasedVarianceWithFilterClosureUnderDisplayDrill();
};
oFF.QCapabilitiesDecorator.prototype.supportsTimeBasedVarianceWithMultipleTime = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsTimeBasedVarianceWithMultipleTime();
};
oFF.QCapabilitiesDecorator.prototype.supportsTimeBasedVarianceWithNavigationAndExternalFilter = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsTimeBasedVarianceWithNavigationAndExternalFilter();
};
oFF.QCapabilitiesDecorator.prototype.supportsTimeBasedVarianceWithNestedSelectionsOnTime = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsTimeBasedVarianceWithNestedSelectionsOnTime();
};
oFF.QCapabilitiesDecorator.prototype.supportsTimestampDimensions = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsTimestampDimensions();
};
oFF.QCapabilitiesDecorator.prototype.supportsTotalOperator = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsTotalOperator();
};
oFF.QCapabilitiesDecorator.prototype.supportsTuplesOperand = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsTuplesOperand();
};
oFF.QCapabilitiesDecorator.prototype.supportsTuplesOperandFromDataSource = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsTuplesOperandFromDataSource();
};
oFF.QCapabilitiesDecorator.prototype.supportsTwoStructures = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsTwoStructures();
};
oFF.QCapabilitiesDecorator.prototype.supportsUdhAlignment = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsUdhAlignment();
};
oFF.QCapabilitiesDecorator.prototype.supportsUdhKey = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsUdhKey();
};
oFF.QCapabilitiesDecorator.prototype.supportsUndefinedTupleCountTotals = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsUndefinedTupleCountTotals();
};
oFF.QCapabilitiesDecorator.prototype.supportsUnifiedDataCells = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsUnifiedDataCells();
};
oFF.QCapabilitiesDecorator.prototype.supportsUniqueAxisProperties = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsUniqueAxisProperties();
};
oFF.QCapabilitiesDecorator.prototype.supportsUniqueHierarchyPath = function()
{
	let result;
	if (this.m_supportsUniqueHierarchyPath === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsUniqueHierarchyPath();
	}
	else
	{
		result = this.m_supportsUniqueHierarchyPath.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsUnitTranslation = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsUnitTranslation();
};
oFF.QCapabilitiesDecorator.prototype.supportsUniversalDisplayHierarchies = function()
{
	let result;
	if (this.m_supportsUniversalDisplayHierarchies === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsUniversalDisplayHierarchies();
	}
	else
	{
		result = this.m_supportsUniversalDisplayHierarchies.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsUniversalDisplayHierarchiesCustomDimensions = function()
{
	let result;
	if (this.m_supportsUniversalDisplayHierarchiesCustomDimensions === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsUniversalDisplayHierarchiesCustomDimensions();
	}
	else
	{
		result = this.m_supportsUniversalDisplayHierarchiesCustomDimensions.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsUniversalDisplayHierarchiesZeroBased = function()
{
	let result;
	if (this.m_supportsUniversalDisplayHierarchiesZeroBased === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsUniversalDisplayHierarchiesZeroBased();
	}
	else
	{
		result = this.m_supportsUniversalDisplayHierarchiesZeroBased.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsUniversalModel = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsUniversalModel();
};
oFF.QCapabilitiesDecorator.prototype.supportsUpdatedBy = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsUpdatedBy();
};
oFF.QCapabilitiesDecorator.prototype.supportsUpdatedOn = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsUpdatedOn();
};
oFF.QCapabilitiesDecorator.prototype.supportsValueHelpHierarchyPath = function()
{
	let result;
	if (this.m_supportsValueHelpHierarchyPath === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsValueHelpHierarchyPath();
	}
	else
	{
		result = this.m_supportsValueHelpHierarchyPath.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsValueHelpWithAttributes = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsValueHelpWithAttributes();
};
oFF.QCapabilitiesDecorator.prototype.supportsVariableVariants = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsVariableVariants();
};
oFF.QCapabilitiesDecorator.prototype.supportsVarianceOperator = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsVarianceOperator();
};
oFF.QCapabilitiesDecorator.prototype.supportsVersionBasedVariance = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsVersionBasedVariance();
};
oFF.QCapabilitiesDecorator.prototype.supportsVirtualDataSourceTypeColumns = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsVirtualDataSourceTypeColumns();
};
oFF.QCapabilitiesDecorator.prototype.supportsVirtualDescription = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsVirtualDescription();
};
oFF.QCapabilitiesDecorator.prototype.supportsVisibilityFilter = function()
{
	let result;
	if (this.m_supportsVisibilityFilter === oFF.TriStateBool._DEFAULT)
	{
		result = oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsVisibilityFilter();
	}
	else
	{
		result = this.m_supportsVisibilityFilter.getBoolean();
	}
	return result;
};
oFF.QCapabilitiesDecorator.prototype.supportsVisualAggregation = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsVisualAggregation();
};
oFF.QCapabilitiesDecorator.prototype.supportsWildcardFilterOnResultSet = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsWildcardFilterOnResultSet();
};
oFF.QCapabilitiesDecorator.prototype.supportsWindowFunctions = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsWindowFunctions();
};
oFF.QCapabilitiesDecorator.prototype.supportsZeroSuppression = function()
{
	return oFF.notNull(this.m_parentCapabilities) && this.m_parentCapabilities.supportsZeroSuppression();
};
oFF.QCapabilitiesDecorator.prototype.updateContext = function(parent)
{
	if (parent.getComponentType() === oFF.OlapComponentType.QUERY_MODEL)
	{
		this.m_parentCapabilities = parent.getModelCapabilities();
	}
	else
	{
		let parentParent = parent.getParent();
		this.m_parentCapabilities = oFF.isNull(parentParent) ? null : parentParent.getModelCapabilities();
	}
};

oFF.XCommand = function() {};
oFF.XCommand.prototype = new oFF.XObject();
oFF.XCommand.prototype._ff_c = "XCommand";

oFF.XCommand.prototype.m_commandContext = null;
oFF.XCommand.prototype.m_final = false;
oFF.XCommand.prototype.m_followUpCommandParameterMappings = null;
oFF.XCommand.prototype.m_followUpCommands = null;
oFF.XCommand.prototype.m_parameters = null;
oFF.XCommand.prototype.addParameter = function(parameterName, parameterValue)
{
	this.assertFinal(false);
	oFF.XStringUtils.checkStringNotEmpty(parameterName, "illegal parameter name");
	this.m_parameters.put(parameterName, parameterValue);
	return this;
};
oFF.XCommand.prototype.addParameterBoolean = function(parameterName, parameterValue)
{
	return this.addParameter(parameterName, oFF.XBooleanValue.create(parameterValue));
};
oFF.XCommand.prototype.addParameterInteger = function(parameterName, parameterValue)
{
	return this.addParameter(parameterName, oFF.XIntegerValue.create(parameterValue));
};
oFF.XCommand.prototype.addParameterString = function(parameterName, parameterValue)
{
	return this.addParameter(parameterName, oFF.XStringValue.create(parameterValue));
};
oFF.XCommand.prototype.assertFinal = function(shouldBeFinal)
{
	if (this.m_final !== shouldBeFinal)
	{
		throw oFF.XException.createIllegalStateException("final");
	}
};
oFF.XCommand.prototype.getCommandContext = function()
{
	return this.m_commandContext;
};
oFF.XCommand.prototype.getFollowUpCommand = function(followUpType)
{
	return this.m_followUpCommands.getByKey(followUpType.getName());
};
oFF.XCommand.prototype.getFollowUpParameterMappings = function(followUpType)
{
	this.assertFinal(true);
	return this.m_followUpCommandParameterMappings.getByKey(followUpType.getName());
};
oFF.XCommand.prototype.getParameter = function(parameterName)
{
	oFF.XStringUtils.checkStringNotEmpty(parameterName, "illegal parameter name");
	return this.m_parameters.getByKey(parameterName);
};
oFF.XCommand.prototype.processCommand = function(syncType, commandListener, customIdentifier)
{
	this.m_final = true;
	let commandResultClass = this.getCommandResultClass();
	let newInstance = commandResultClass.newInstance(this);
	let commandResult = newInstance;
	return commandResult.processCommand(this, syncType, commandListener, customIdentifier);
};
oFF.XCommand.prototype.releaseObject = function()
{
	this.m_parameters = oFF.XObjectExt.release(this.m_parameters);
	this.m_followUpCommands = oFF.XObjectExt.release(this.m_followUpCommands);
	this.m_followUpCommandParameterMappings = oFF.XObjectExt.release(this.m_followUpCommandParameterMappings);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.XCommand.prototype.setFollowUpCommand = function(followUpType, command)
{
	this.assertFinal(false);
	if (oFF.isNull(command))
	{
		this.m_followUpCommands.remove(followUpType.getName());
	}
	else
	{
		this.m_followUpCommands.put(followUpType.getName(), command);
	}
	return this;
};
oFF.XCommand.prototype.setFollowUpCommandParameterMapping = function(followUpType, followUpParameterName, resultParameterName)
{
	this.assertFinal(false);
	oFF.XStringUtils.checkStringNotEmpty(followUpParameterName, "illegal parameter name");
	let deleteParameter = oFF.XStringUtils.isNullOrEmpty(resultParameterName);
	let parameterMappings = this.m_followUpCommandParameterMappings.getByKey(followUpType.getName());
	if (oFF.isNull(parameterMappings))
	{
		if (!deleteParameter)
		{
			parameterMappings = oFF.XHashMapByString.create();
			this.m_followUpCommandParameterMappings.put(followUpType.getName(), parameterMappings);
			parameterMappings.put(followUpParameterName, resultParameterName);
		}
	}
	else
	{
		if (deleteParameter)
		{
			parameterMappings.remove(followUpParameterName);
			if (parameterMappings.isEmpty())
			{
				this.m_followUpCommandParameterMappings.remove(followUpType.getName());
			}
		}
		else
		{
			parameterMappings.put(followUpParameterName, resultParameterName);
		}
	}
	return this;
};
oFF.XCommand.prototype.setupCommand = function(commandContext)
{
	this.m_commandContext = commandContext;
	this.m_final = false;
	this.m_parameters = oFF.XHashMapByString.create();
	this.m_followUpCommands = oFF.XHashMapByString.create();
	this.m_followUpCommandParameterMappings = oFF.XHashMapByString.create();
};

oFF.XCommandResult = function() {};
oFF.XCommandResult.prototype = new oFF.XObject();
oFF.XCommandResult.prototype._ff_c = "XCommandResult";

oFF.XCommandResult.prototype.m_command = null;
oFF.XCommandResult.prototype.m_commandListener = null;
oFF.XCommandResult.prototype.m_customIdentifier = null;
oFF.XCommandResult.prototype.m_extResult = null;
oFF.XCommandResult.prototype.m_followUpCommandResults = null;
oFF.XCommandResult.prototype.m_followUpCommandsProcessed = 0;
oFF.XCommandResult.prototype.m_followUpCommandsSize = 0;
oFF.XCommandResult.prototype.m_followUpFinished = false;
oFF.XCommandResult.prototype.m_messageManager = null;
oFF.XCommandResult.prototype.m_processFinished = false;
oFF.XCommandResult.prototype.m_resultParameters = null;
oFF.XCommandResult.prototype.m_syncType = null;
oFF.XCommandResult.prototype.addFollowUpCommandResult = function(followUpType, commandResult)
{
	this.assertFollowUpFinished(false);
	if (oFF.isNull(commandResult))
	{
		this.m_followUpCommandResults.remove(followUpType.getName());
	}
	else
	{
		this.m_followUpCommandResults.put(followUpType.getName(), commandResult);
	}
};
oFF.XCommandResult.prototype.addResultParameter = function(parameterName, parameterValue)
{
	this.assertProcessFinished(false);
	oFF.XStringUtils.checkStringNotEmpty(parameterName, "illegal parameter name");
	this.m_resultParameters.put(parameterName, parameterValue);
	return this;
};
oFF.XCommandResult.prototype.assertFollowUpFinished = function(shouldBeFinished)
{
	if (this.m_followUpFinished !== shouldBeFinished)
	{
		throw oFF.XException.createIllegalStateException("FollowUp state is not as expected");
	}
};
oFF.XCommandResult.prototype.assertProcessFinished = function(shouldBeFinished)
{
	if (this.m_processFinished !== shouldBeFinished)
	{
		throw oFF.XException.createIllegalStateException("Processing state is not as expected");
	}
};
oFF.XCommandResult.prototype.getCommand = function()
{
	return this.m_command;
};
oFF.XCommandResult.prototype.getCommandBase = function()
{
	return this.m_command;
};
oFF.XCommandResult.prototype.getFollowUpCommand = function(followUpType)
{
	return this.getCommandBase().getFollowUpCommand(followUpType);
};
oFF.XCommandResult.prototype.getFollowUpCommandResult = function(followUpType)
{
	this.assertFollowUpFinished(true);
	return this.m_followUpCommandResults.getByKey(followUpType.getName());
};
oFF.XCommandResult.prototype.getFollowUpParameterValuesEffective = function(followUpType)
{
	this.assertProcessFinished(true);
	let resultParameterValues = null;
	let parameterMappings = this.getCommandBase().getFollowUpParameterMappings(followUpType);
	if (oFF.notNull(parameterMappings))
	{
		let mappingKeys = parameterMappings.getKeysAsReadOnlyList();
		for (let mappingIndex = 0; mappingIndex < mappingKeys.size(); mappingIndex++)
		{
			let targetParameterName = mappingKeys.get(mappingIndex);
			let sourceParameterName = parameterMappings.getByKey(targetParameterName);
			let sourceResultValue = this.getResultParameter(sourceParameterName);
			if (oFF.notNull(sourceResultValue))
			{
				if (oFF.isNull(resultParameterValues))
				{
					resultParameterValues = oFF.XHashMapByString.create();
				}
				resultParameterValues.put(targetParameterName, sourceResultValue);
			}
		}
	}
	return resultParameterValues;
};
oFF.XCommandResult.prototype.getFollowUpTypesToProcess = function()
{
	this.assertProcessFinished(true);
	this.assertFollowUpFinished(false);
	let followUpTypes = oFF.XList.create();
	if (this.getFollowUpCommand(oFF.XCommandFollowUpType.ALWAYS) !== null)
	{
		followUpTypes.add(oFF.XCommandFollowUpType.ALWAYS);
	}
	if (this.getMessageManager().hasErrors())
	{
		if (this.getFollowUpCommand(oFF.XCommandFollowUpType.ERROR) !== null)
		{
			followUpTypes.add(oFF.XCommandFollowUpType.ERROR);
		}
	}
	else
	{
		if (this.getFollowUpCommand(oFF.XCommandFollowUpType.SUCCESS) !== null)
		{
			followUpTypes.add(oFF.XCommandFollowUpType.SUCCESS);
		}
	}
	return followUpTypes;
};
oFF.XCommandResult.prototype.getMessageManager = function()
{
	return this.m_messageManager;
};
oFF.XCommandResult.prototype.getParameter = function(parameterName)
{
	let parameterValue = this.getCommandBase().getParameter(parameterName);
	if (oFF.isNull(parameterValue))
	{
		return null;
	}
	return parameterValue;
};
oFF.XCommandResult.prototype.getParameterStrict = function(parameterName)
{
	let parameterValue = this.getCommandBase().getParameter(parameterName);
	oFF.XObjectExt.assertNotNullExt(parameterValue, "parameter null");
	return parameterValue;
};
oFF.XCommandResult.prototype.getParameterString = function(parameterName)
{
	let parameterValue = this.getCommandBase().getParameter(parameterName);
	if (oFF.isNull(parameterValue))
	{
		return null;
	}
	return parameterValue.getString();
};
oFF.XCommandResult.prototype.getParameterStringStrict = function(parameterName)
{
	let parameterValue = this.getCommandBase().getParameter(parameterName);
	oFF.XObjectExt.assertNotNullExt(parameterValue, "parameter null");
	return parameterValue.getString();
};
oFF.XCommandResult.prototype.getResultParameter = function(parameterName)
{
	this.assertProcessFinished(true);
	oFF.XStringUtils.checkStringNotEmpty(parameterName, "illegal parameter name");
	return this.m_resultParameters.getByKey(parameterName);
};
oFF.XCommandResult.prototype.getSyncType = function()
{
	return this.m_syncType;
};
oFF.XCommandResult.prototype.onCommandProcessed = function(extResult, commandResult, customIdentifier)
{
	this.assertFollowUpFinished(false);
	if (this.m_followUpCommandsProcessed >= this.m_followUpCommandsSize)
	{
		throw oFF.XException.createIllegalStateException("internal error");
	}
	oFF.MessageUtil.checkNoError(extResult);
	let followUpType = customIdentifier;
	this.addFollowUpCommandResult(followUpType, commandResult);
	this.m_followUpCommandsProcessed++;
	if (this.m_followUpCommandsProcessed === this.m_followUpCommandsSize)
	{
		this.m_followUpFinished = true;
		this.onNotifyListener();
	}
};
oFF.XCommandResult.prototype.onNotifyListener = function()
{
	if (oFF.notNull(this.m_commandListener))
	{
		this.m_commandListener.onCommandProcessed(this.m_extResult, this, this.m_customIdentifier);
	}
};
oFF.XCommandResult.prototype.onProcessFinished = function()
{
	this.m_processFinished = true;
	let followUpTypesToProcess = this.getFollowUpTypesToProcess();
	this.m_followUpCommandsSize = followUpTypesToProcess.size();
	if (this.m_followUpCommandsSize > 0)
	{
		this.processFollowUpCommands(followUpTypesToProcess);
	}
	else
	{
		this.m_followUpFinished = true;
		this.onNotifyListener();
	}
};
oFF.XCommandResult.prototype.processCommand = function(command, syncType, commandListener, customIdentifier)
{
	this.m_command = command;
	this.m_syncType = syncType;
	this.m_commandListener = commandListener;
	this.m_customIdentifier = customIdentifier;
	this.m_messageManager = oFF.MessageManagerSimple.createMessageManager();
	this.m_extResult = oFF.ExtResult.createWithExternalMessages(this, this.m_messageManager);
	this.m_resultParameters = oFF.XHashMapByString.create();
	this.m_followUpCommandResults = oFF.XHashMapByString.create();
	this.m_processFinished = false;
	this.m_followUpFinished = false;
	this.m_followUpCommandsSize = 0;
	this.m_followUpCommandsProcessed = 0;
	this.process();
	return this.m_extResult;
};
oFF.XCommandResult.prototype.processFollowUpCommands = function(followUpTypesToProcess)
{
	for (let typesIndex = 0; typesIndex < followUpTypesToProcess.size(); typesIndex++)
	{
		let followUpType = followUpTypesToProcess.get(typesIndex);
		let followUpCommand = this.getFollowUpCommand(followUpType);
		let parameterValuesEffective = this.getFollowUpParameterValuesEffective(followUpType);
		if (oFF.notNull(parameterValuesEffective))
		{
			let parameterNames = parameterValuesEffective.getKeysAsReadOnlyList();
			for (let namesIndex = 0; namesIndex < parameterNames.size(); namesIndex++)
			{
				let parameterName = parameterNames.get(namesIndex);
				let parameterValue = parameterValuesEffective.getByKey(parameterName);
				followUpCommand.addParameter(parameterName, parameterValue);
			}
		}
		followUpCommand.processCommand(this.getSyncType(), this, followUpType);
	}
};
oFF.XCommandResult.prototype.releaseObject = function()
{
	this.m_command = null;
	this.m_syncType = null;
	this.m_commandListener = null;
	this.m_customIdentifier = null;
	this.m_messageManager = oFF.XObjectExt.release(this.m_messageManager);
	this.m_extResult = oFF.XObjectExt.release(this.m_extResult);
	this.m_resultParameters = oFF.XObjectExt.release(this.m_resultParameters);
	this.m_followUpCommandResults = oFF.XObjectExt.release(this.m_followUpCommandResults);
	oFF.XObject.prototype.releaseObject.call( this );
};

oFF.QCmdContextOlapFactory = function() {};
oFF.QCmdContextOlapFactory.prototype = new oFF.QCmdContextFactory();
oFF.QCmdContextOlapFactory.prototype._ff_c = "QCmdContextOlapFactory";

oFF.QCmdContextOlapFactory.staticSetupOlapFactory = function()
{
	let factory = new oFF.QCmdContextOlapFactory();
	oFF.QCmdContextFactory.register(factory);
};
oFF.QCmdContextOlapFactory.prototype.newCmdContext = function(olapApplication, component)
{
	let olapComponentType = component.getComponentType();
	if (olapComponentType === oFF.OlapComponentType.QUERY_MODEL || olapComponentType === oFF.OlapComponentType.QUERY_MANAGER || olapComponentType === oFF.OlapComponentType.QUERY_SERVICE_CONFIG)
	{
		return oFF.QConvenienceCommands.create(olapApplication, component);
	}
	return null;
};

oFF.QCommandsChart = function() {};
oFF.QCommandsChart.prototype = new oFF.XObject();
oFF.QCommandsChart.prototype._ff_c = "QCommandsChart";

oFF.QCommandsChart.create = function(chartDefinition)
{
	let instance = new oFF.QCommandsChart();
	instance.m_chartDefinition = chartDefinition;
	instance.m_queryModel = chartDefinition.getQueryModel();
	return instance;
};
oFF.QCommandsChart.prototype.m_chartDefinition = null;
oFF.QCommandsChart.prototype.m_queryModel = null;
oFF.QCommandsChart.prototype.createValueMapping = function(valueType, dimensionMember, dropIndex)
{
	let synchronizationMode = this.getSynchronizationMode();
	let measureDimension = dimensionMember.getDimension();
	let primaryMeasure = measureDimension.getDimensionType() === oFF.DimensionType.MEASURE_STRUCTURE;
	let convenienceCommands = this.m_queryModel.getConvenienceCommands();
	if (synchronizationMode === oFF.Viz2QmSynchronizationMode.MAXIMAL_CONSISTENCY && primaryMeasure && !measureDimension.getAxisType().isEqualTo(oFF.AxisType.COLUMNS) && !this.m_queryModel.isAccountModel())
	{
		convenienceCommands.moveDimensionToColumns(dimensionMember.getDimension().getName());
	}
	let chartSetting = this.m_chartDefinition.getChartSetting();
	let chartType = chartSetting.getChartType();
	let typedValueSelections = chartSetting.getTypedValueSelectionsForType(valueType);
	if (chartType.isSingleMeasureChartType() && valueType === oFF.VisualizationValueType.SIZE)
	{
		let previousSelectedMember = typedValueSelections.get(0).getDimensionMember();
		chartSetting.clearTypedValueSelectionsForType(valueType);
		if (synchronizationMode === oFF.Viz2QmSynchronizationMode.MAXIMAL_CONSISTENCY)
		{
			convenienceCommands.clearSingleMemberFilter(previousSelectedMember, oFF.ComparisonOperator.EQUAL);
		}
	}
	else if (chartType === oFF.ChartType.LINE)
	{
		if (valueType === oFF.VisualizationValueType.VALUE)
		{
			chartSetting.removeTypedValueSelectionForDimensionMember(dimensionMember, oFF.VisualizationValueType.VALUE_B);
		}
		else
		{
			chartSetting.removeTypedValueSelectionForDimensionMember(dimensionMember, oFF.VisualizationValueType.VALUE);
		}
	}
	let alreadyPresent = oFF.XStream.of(typedValueSelections).anyMatch((kfSelection) => {
		return oFF.XString.isEqual(kfSelection.getName(), dimensionMember.getName());
	});
	if (alreadyPresent)
	{
		chartSetting.removeTypedValueSelectionForDimensionMember(dimensionMember, valueType);
	}
	if (!alreadyPresent)
	{
		let newKeyfigureSelection = oFF.QKeyFigureSelection.create(this.m_queryModel, dimensionMember, this.m_chartDefinition, valueType);
		if (dropIndex === -1)
		{
			chartSetting.addTypedValueSelection(valueType, newKeyfigureSelection);
		}
		else
		{
			chartSetting.insertTypedValueSelection(valueType, dropIndex, newKeyfigureSelection);
		}
	}
	if (synchronizationMode !== oFF.Viz2QmSynchronizationMode.NONE)
	{
		convenienceCommands.clearSingleMemberFilterByDimension(measureDimension, dimensionMember.getName(), oFF.ComparisonOperator.EQUAL);
		convenienceCommands.addSingleMemberFilter(oFF.FilterLayer.DYNAMIC, measureDimension.getDimensionType(), null, dimensionMember.getName(), oFF.ComparisonOperator.EQUAL);
	}
};
oFF.QCommandsChart.prototype.getChartOrientation = function()
{
	return this.m_chartDefinition.getChartSetting().getChartOrientation();
};
oFF.QCommandsChart.prototype.getChartType = function()
{
	return this.m_chartDefinition.getChartSetting().getChartType();
};
oFF.QCommandsChart.prototype.getColorPallette = function()
{
	let colorScheme = this.m_chartDefinition.getChartSetting().getColorScheme();
	if (oFF.notNull(colorScheme))
	{
		return colorScheme.getColors();
	}
	return null;
};
oFF.QCommandsChart.prototype.getDimensionInFeed = function(valueType)
{
	let keyFigureList = this.m_chartDefinition.getChartSetting().getTypedValueSelectionsForType(valueType);
	let dimensions = oFF.XList.create();
	for (let i = 0; i < keyFigureList.size(); i++)
	{
		let dimension = keyFigureList.get(i).getDimensionMember().getDimension();
		if (!dimensions.contains(dimension))
		{
			dimensions.add(dimension);
		}
	}
	return dimensions;
};
oFF.QCommandsChart.prototype.getMeasures = function(valueType)
{
	let keyFigureList = this.m_chartDefinition.getChartSetting().getTypedValueSelectionsForType(valueType);
	let measures = oFF.XStream.of(keyFigureList).map((keyFigure) => {
		return keyFigure.getDimensionMember();
	}).collect(oFF.XStreamCollector.toList());
	return measures;
};
oFF.QCommandsChart.prototype.getMeasuresForDimension = function(valueType, dimension)
{
	let keyFigureList = this.m_chartDefinition.getChartSetting().getTypedValueSelectionsForType(valueType);
	let measures = oFF.XStream.of(keyFigureList).map((keyFigure) => {
		return keyFigure.getDimensionMember();
	}).filter((dimensionMember) => {
		return dimensionMember.getDimension().isEqualTo(dimension);
	}).collect(oFF.XStreamCollector.toList());
	return measures;
};
oFF.QCommandsChart.prototype.getQueryManager = function()
{
	return this.m_chartDefinition.getQueryManager();
};
oFF.QCommandsChart.prototype.getSynchronizationMode = function()
{
	return this.getQueryManager().getQueryModel().getVisualizationManager().getViz2QmSynchronizer().getMode();
};
oFF.QCommandsChart.prototype.moveDimensionToFeed = function(dimension, valueType)
{
	this.moveDimensionToFeedAtIndex(dimension, valueType, -1);
};
oFF.QCommandsChart.prototype.moveDimensionToFeedAtIndex = function(dimension, valueType, dropIndex)
{
	let queryModelAxis = this.getChartType().getQueryModelAxisForFeed(valueType);
	this.m_queryModel.getConvenienceCommands().moveDimensionExt(null, dimension.getName(), queryModelAxis, dropIndex);
	if (dimension.isStructure())
	{
		let chartSetting = this.m_chartDefinition.getChartSetting();
		chartSetting.addStructureToFeed(this.m_queryModel, dimension, valueType, valueType);
	}
	else
	{
		this.m_chartDefinition.getChartSetting().insertTypedValueSelection(valueType, dropIndex, oFF.QKeyFigureSelection.create(this.m_queryModel, dimension.getDimensionMember(dimension.getDefaultMemberValue()), this.m_chartDefinition, valueType));
	}
};
oFF.QCommandsChart.prototype.removeDimensionFromFeed = function(dimension, valueType)
{
	this.m_queryModel.getConvenienceCommands().moveDimensionToFree(dimension.getName());
	let chartSetting = this.m_chartDefinition.getChartSetting();
	if (dimension.isMeasureStructure() || dimension.isStructure())
	{
		oFF.XCollectionUtils.forEach(dimension.getAllStructureMembers(), (member) => {
			chartSetting.removeTypedValueSelectionForDimensionMember(member, valueType);
		});
	}
	else
	{
		chartSetting.removeTypedValueSelectionForDimensionMember(dimension.getDimensionMember(dimension.getDefaultMemberValue()), valueType);
	}
};
oFF.QCommandsChart.prototype.removeValueMapping = function(valueType, dimensionMember)
{
	let chartSetting = this.m_chartDefinition.getChartSetting();
	chartSetting.removeTypedValueSelectionForDimensionMember(dimensionMember, valueType);
};
oFF.QCommandsChart.prototype.setChartOrientation = function(chartOrientation)
{
	this.m_chartDefinition.getChartSetting().setChartOrientation(chartOrientation);
};
oFF.QCommandsChart.prototype.setChartType = function(chartType)
{
	this.m_chartDefinition.getChartSetting().setChartType(chartType);
};
oFF.QCommandsChart.prototype.setColorPallette = function(colorPallette)
{
	let chartSetting = this.m_chartDefinition.getChartSetting();
	let colorScheme = chartSetting.getColorScheme();
	if (oFF.isNull(colorScheme))
	{
		colorScheme = oFF.QChartColorScheme.create(chartSetting.getContext(), chartSetting);
		chartSetting.setColorScheme(colorScheme);
	}
	colorScheme.setColors(colorPallette);
};

oFF.AbstractCommentingEntity = function() {};
oFF.AbstractCommentingEntity.prototype = new oFF.XObject();
oFF.AbstractCommentingEntity.prototype._ff_c = "AbstractCommentingEntity";

oFF.AbstractCommentingEntity.AC_COMMENTS = "Comments";
oFF.AbstractCommentingEntity.AC_CREATED_DATE = "CreatedDate";
oFF.AbstractCommentingEntity.AC_CREATOR_ID = "CreatorId";
oFF.AbstractCommentingEntity.AC_MODIFIED_DATE = "ModifiedDate";
oFF.AbstractCommentingEntity.prototype.m_comments = null;
oFF.AbstractCommentingEntity.prototype.m_createdDate = null;
oFF.AbstractCommentingEntity.prototype.m_creatorId = null;
oFF.AbstractCommentingEntity.prototype.m_isModified = false;
oFF.AbstractCommentingEntity.prototype.m_modifiedDate = null;
oFF.AbstractCommentingEntity.prototype.addNewCommentForUser = function(user)
{
	let message = oFF.CommentingMessage.create(this, user);
	this.m_comments.add(message);
	return message;
};
oFF.AbstractCommentingEntity.prototype.asStructure = function()
{
	let result = oFF.PrFactory.createStructure();
	this.writeToStructure(result);
	return result;
};
oFF.AbstractCommentingEntity.prototype.getComments = function()
{
	return this.m_comments;
};
oFF.AbstractCommentingEntity.prototype.getCreatedDate = function()
{
	return this.m_createdDate;
};
oFF.AbstractCommentingEntity.prototype.getCreatorId = function()
{
	return this.m_creatorId;
};
oFF.AbstractCommentingEntity.prototype.getModifiedDate = function()
{
	return this.m_modifiedDate;
};
oFF.AbstractCommentingEntity.prototype.isModified = function()
{
	return this.m_isModified;
};
oFF.AbstractCommentingEntity.prototype.readFromStructure = function(parent, structure)
{
	this.m_comments = oFF.XList.create();
	this.setCreatedDate(oFF.XDateTime.createDateTimeFromIsoFormat(structure.getStringByKey(oFF.AbstractCommentingEntity.AC_CREATED_DATE)));
	this.setModifiedDateInternal(oFF.XDateTime.createDateTimeFromIsoFormat(structure.getStringByKey(oFF.AbstractCommentingEntity.AC_MODIFIED_DATE)));
	this.setCreatorId(structure.getStringByKey(oFF.AbstractCommentingEntity.AC_CREATOR_ID));
	if (structure.containsKey(oFF.AbstractCommentingEntity.AC_COMMENTS))
	{
		let list = structure.getListByKey(oFF.AbstractCommentingEntity.AC_COMMENTS);
		for (let i = 0; i < list.size(); i++)
		{
			this.m_comments.add(oFF.CommentingMessage.createFromStructure(this, list.getStructureAt(i)));
		}
	}
};
oFF.AbstractCommentingEntity.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_creatorId = null;
	this.m_createdDate = null;
	this.m_modifiedDate = null;
	this.m_comments = oFF.XObjectExt.release(this.m_comments);
	this.m_isModified = false;
};
oFF.AbstractCommentingEntity.prototype.removeComment = function(comment)
{
	this.m_comments.removeElement(comment);
};
oFF.AbstractCommentingEntity.prototype.setComments = function(comments)
{
	this.m_comments = comments;
};
oFF.AbstractCommentingEntity.prototype.setCreatedDate = function(createdDate)
{
	this.m_createdDate = createdDate;
};
oFF.AbstractCommentingEntity.prototype.setCreatorId = function(creatorId)
{
	this.m_creatorId = creatorId;
};
oFF.AbstractCommentingEntity.prototype.setModifiedDate = function(modifiedDate)
{
	this.m_modifiedDate = modifiedDate;
	this.m_isModified = true;
};
oFF.AbstractCommentingEntity.prototype.setModifiedDateInternal = function(modifiedDateInternal)
{
	this.m_modifiedDate = modifiedDateInternal;
};
oFF.AbstractCommentingEntity.prototype.setupCommentingEntity = function()
{
	this.m_createdDate = oFF.XDateTime.createCurrentLocalDateTime();
	this.setModifiedDate(this.m_createdDate);
	this.m_comments = oFF.XList.create();
};
oFF.AbstractCommentingEntity.prototype.writeToStructure = function(structure)
{
	structure.putStringNotNullAndNotEmpty(oFF.AbstractCommentingEntity.AC_CREATOR_ID, this.getCreatorId());
	structure.putStringNotNullAndNotEmpty(oFF.AbstractCommentingEntity.AC_CREATED_DATE, this.getCreatedDate().toIsoFormat());
	structure.putStringNotNullAndNotEmpty(oFF.AbstractCommentingEntity.AC_MODIFIED_DATE, this.getModifiedDate().toIsoFormat());
	if (oFF.XCollectionUtils.hasElements(this.m_comments))
	{
		let list = structure.putNewList(oFF.AbstractCommentingEntity.AC_COMMENTS);
		for (let i = 0; i < this.m_comments.size(); i++)
		{
			this.m_comments.get(i).writeToStructure(list.addNewStructure());
		}
	}
};

oFF.QCurrencyObject = function() {};
oFF.QCurrencyObject.prototype = new oFF.XObject();
oFF.QCurrencyObject.prototype._ff_c = "QCurrencyObject";

oFF.QCurrencyObject.create = function(name, text)
{
	let result = new oFF.QCurrencyObject();
	result.setName(name);
	result.setText(text);
	return result;
};
oFF.QCurrencyObject.prototype.m_name = null;
oFF.QCurrencyObject.prototype.m_text = null;
oFF.QCurrencyObject.prototype.getName = function()
{
	return this.m_name;
};
oFF.QCurrencyObject.prototype.getText = function()
{
	return this.m_text;
};
oFF.QCurrencyObject.prototype.setName = function(name)
{
	this.m_name = name;
};
oFF.QCurrencyObject.prototype.setText = function(text)
{
	this.m_text = text;
};

oFF.DocumentDirectory = function() {};
oFF.DocumentDirectory.prototype = new oFF.XObject();
oFF.DocumentDirectory.prototype._ff_c = "DocumentDirectory";

oFF.DocumentDirectory.createWithPath = function(path)
{
	let instance = new oFF.DocumentDirectory();
	instance.m_fileWithVersions = oFF.XHashMapByString.create();
	instance.m_path = path;
	return instance;
};
oFF.DocumentDirectory.prototype.m_fileWithVersions = null;
oFF.DocumentDirectory.prototype.m_path = null;
oFF.DocumentDirectory.prototype.addFileByName = function(name)
{
	let newFile = oFF.DocumentFileWithVersions.createWithName(name);
	this.m_fileWithVersions.put(name, newFile);
	return newFile;
};
oFF.DocumentDirectory.prototype.clearFilesWithoutReleasing = function()
{
	this.m_fileWithVersions.clear();
};
oFF.DocumentDirectory.prototype.getDocumentFiles = function()
{
	return this.m_fileWithVersions.getValuesAsReadOnlyList();
};
oFF.DocumentDirectory.prototype.getPath = function()
{
	return this.m_path;
};
oFF.DocumentDirectory.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_path = null;
	this.m_fileWithVersions = oFF.XObjectExt.release(this.m_fileWithVersions);
};
oFF.DocumentDirectory.prototype.setPath = function(path)
{
	this.m_path = path;
};

oFF.DocumentFileSimple = function() {};
oFF.DocumentFileSimple.prototype = new oFF.DocumentFileAbstract();
oFF.DocumentFileSimple.prototype._ff_c = "DocumentFileSimple";

oFF.DocumentFileSimple.createWithName = function(name)
{
	let instance = new oFF.DocumentFileSimple();
	instance.setName(name);
	return instance;
};
oFF.DocumentFileSimple.prototype.m_content = null;
oFF.DocumentFileSimple.prototype.m_properties = null;
oFF.DocumentFileSimple.prototype.getContent = function()
{
	return this.m_content;
};
oFF.DocumentFileSimple.prototype.getProperties = function()
{
	return this.m_properties;
};
oFF.DocumentFileSimple.prototype.releaseObject = function()
{
	oFF.DocumentFileAbstract.prototype.releaseObject.call( this );
	this.m_content = oFF.XObjectExt.release(this.m_content);
	this.m_properties = oFF.XObjectExt.release(this.m_properties);
};
oFF.DocumentFileSimple.prototype.setContent = function(content)
{
	this.m_content = content;
};
oFF.DocumentFileSimple.prototype.setProperties = function(properties)
{
	this.m_properties = properties;
};

oFF.DocumentVersion = function() {};
oFF.DocumentVersion.prototype = new oFF.XObject();
oFF.DocumentVersion.prototype._ff_c = "DocumentVersion";

oFF.DocumentVersion.create = function()
{
	return new oFF.DocumentVersion();
};
oFF.DocumentVersion.prototype.m_content = null;
oFF.DocumentVersion.prototype.m_owner = null;
oFF.DocumentVersion.prototype.m_properties = null;
oFF.DocumentVersion.prototype.m_timeStamp = null;
oFF.DocumentVersion.prototype.m_version = null;
oFF.DocumentVersion.prototype.getContent = function()
{
	return this.m_content;
};
oFF.DocumentVersion.prototype.getOwner = function()
{
	return this.m_owner;
};
oFF.DocumentVersion.prototype.getProperties = function()
{
	return this.m_properties;
};
oFF.DocumentVersion.prototype.getTimeStamp = function()
{
	return this.m_timeStamp;
};
oFF.DocumentVersion.prototype.getVersion = function()
{
	return this.m_version;
};
oFF.DocumentVersion.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_version = null;
	this.m_owner = null;
	this.m_timeStamp = null;
	this.m_content = oFF.XObjectExt.release(this.m_content);
	this.m_properties = oFF.XObjectExt.release(this.m_properties);
};
oFF.DocumentVersion.prototype.setContent = function(content)
{
	this.m_content = content;
};
oFF.DocumentVersion.prototype.setOwner = function(owner)
{
	this.m_owner = owner;
};
oFF.DocumentVersion.prototype.setProperties = function(properties)
{
	this.m_properties = properties;
};
oFF.DocumentVersion.prototype.setTimestamp = function(dateTime)
{
	this.m_timeStamp = dateTime;
};
oFF.DocumentVersion.prototype.setVersion = function(version)
{
	this.m_version = version;
};

oFF.DocumentsServiceResponse = function() {};
oFF.DocumentsServiceResponse.prototype = new oFF.XObject();
oFF.DocumentsServiceResponse.prototype._ff_c = "DocumentsServiceResponse";

oFF.DocumentsServiceResponse.create = function()
{
	let instance = new oFF.DocumentsServiceResponse();
	instance.m_documentDirectories = oFF.XHashMapByString.create();
	return instance;
};
oFF.DocumentsServiceResponse.prototype.m_documentDirectories = null;
oFF.DocumentsServiceResponse.prototype.addDirectoryByPath = function(path)
{
	let directory = oFF.DocumentDirectory.createWithPath(path);
	this.m_documentDirectories.put(path, directory);
	return directory;
};
oFF.DocumentsServiceResponse.prototype.getDocumentDirectories = function()
{
	return this.m_documentDirectories.getValuesAsReadOnlyList();
};
oFF.DocumentsServiceResponse.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_documentDirectories = oFF.XObjectExt.release(this.m_documentDirectories);
};

oFF.QMeasureHelpMetadataSelector = function() {};
oFF.QMeasureHelpMetadataSelector.prototype = new oFF.XObject();
oFF.QMeasureHelpMetadataSelector.prototype._ff_c = "QMeasureHelpMetadataSelector";

oFF.QMeasureHelpMetadataSelector.createMeasureHelpMetadataSelector = function()
{
	return new oFF.QMeasureHelpMetadataSelector();
};
oFF.QMeasureHelpMetadataSelector.prototype.m_dataType = null;
oFF.QMeasureHelpMetadataSelector.prototype.m_dataTypeInternal = null;
oFF.QMeasureHelpMetadataSelector.prototype.m_dataTypePrecision = null;
oFF.QMeasureHelpMetadataSelector.prototype.m_dataTypeScale = null;
oFF.QMeasureHelpMetadataSelector.prototype.m_measureType = null;
oFF.QMeasureHelpMetadataSelector.prototype.m_numericPrecision = null;
oFF.QMeasureHelpMetadataSelector.prototype.m_numericScale = null;
oFF.QMeasureHelpMetadataSelector.prototype.m_numericShift = null;
oFF.QMeasureHelpMetadataSelector.prototype.m_rateType = null;
oFF.QMeasureHelpMetadataSelector.prototype.m_unitDimensionName = null;
oFF.QMeasureHelpMetadataSelector.prototype.m_unitDimensionProperty = null;
oFF.QMeasureHelpMetadataSelector.prototype.m_unitFixed = null;
oFF.QMeasureHelpMetadataSelector.prototype.m_unitName = null;
oFF.QMeasureHelpMetadataSelector.prototype.m_unitTextName = null;
oFF.QMeasureHelpMetadataSelector.prototype.m_unitType = null;
oFF.QMeasureHelpMetadataSelector.prototype.m_visibleMeasuresOnly = false;
oFF.QMeasureHelpMetadataSelector.prototype.getDataType = function()
{
	return this.m_dataType;
};
oFF.QMeasureHelpMetadataSelector.prototype.getDataTypeInternal = function()
{
	return this.m_dataTypeInternal;
};
oFF.QMeasureHelpMetadataSelector.prototype.getDataTypePrecision = function()
{
	return this.m_dataTypePrecision;
};
oFF.QMeasureHelpMetadataSelector.prototype.getDataTypeScale = function()
{
	return this.m_dataTypeScale;
};
oFF.QMeasureHelpMetadataSelector.prototype.getMeasureType = function()
{
	return this.m_measureType;
};
oFF.QMeasureHelpMetadataSelector.prototype.getNumericPrecision = function()
{
	return this.m_numericPrecision;
};
oFF.QMeasureHelpMetadataSelector.prototype.getNumericScale = function()
{
	return this.m_numericScale;
};
oFF.QMeasureHelpMetadataSelector.prototype.getNumericShift = function()
{
	return this.m_numericShift;
};
oFF.QMeasureHelpMetadataSelector.prototype.getRateType = function()
{
	return this.m_rateType;
};
oFF.QMeasureHelpMetadataSelector.prototype.getUnitDimensionName = function()
{
	return this.m_unitDimensionName;
};
oFF.QMeasureHelpMetadataSelector.prototype.getUnitDimensionProperty = function()
{
	return this.m_unitDimensionProperty;
};
oFF.QMeasureHelpMetadataSelector.prototype.getUnitFixed = function()
{
	return this.m_unitFixed;
};
oFF.QMeasureHelpMetadataSelector.prototype.getUnitName = function()
{
	return this.m_unitName;
};
oFF.QMeasureHelpMetadataSelector.prototype.getUnitTextName = function()
{
	return this.m_unitTextName;
};
oFF.QMeasureHelpMetadataSelector.prototype.getUnitType = function()
{
	return this.m_unitType;
};
oFF.QMeasureHelpMetadataSelector.prototype.isVisibleMeasuresOnly = function()
{
	return this.m_visibleMeasuresOnly;
};
oFF.QMeasureHelpMetadataSelector.prototype.releaseObject = function()
{
	this.m_numericScale = oFF.XObjectExt.release(this.m_numericScale);
	this.m_numericPrecision = oFF.XObjectExt.release(this.m_numericPrecision);
	this.m_numericShift = oFF.XObjectExt.release(this.m_numericShift);
	this.m_dataTypeScale = oFF.XObjectExt.release(this.m_dataTypeScale);
	this.m_dataTypePrecision = oFF.XObjectExt.release(this.m_dataTypePrecision);
	this.m_unitType = null;
	this.m_unitFixed = null;
	this.m_unitName = null;
	this.m_unitTextName = null;
	this.m_dataType = null;
	this.m_dataTypeInternal = null;
	this.m_rateType = null;
	this.m_unitDimensionName = null;
	this.m_unitDimensionProperty = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.QMeasureHelpMetadataSelector.prototype.resetDataTypePrecision = function()
{
	this.m_dataTypePrecision = null;
};
oFF.QMeasureHelpMetadataSelector.prototype.resetDataTypeScale = function()
{
	this.m_dataTypeScale = null;
};
oFF.QMeasureHelpMetadataSelector.prototype.resetNumericPrecision = function()
{
	this.m_numericPrecision = null;
};
oFF.QMeasureHelpMetadataSelector.prototype.resetNumericScale = function()
{
	this.m_numericScale = null;
};
oFF.QMeasureHelpMetadataSelector.prototype.resetNumericShift = function()
{
	this.m_numericShift = null;
};
oFF.QMeasureHelpMetadataSelector.prototype.setDataType = function(dataType)
{
	this.m_dataType = dataType;
};
oFF.QMeasureHelpMetadataSelector.prototype.setDataTypeInternal = function(dataType)
{
	this.m_dataTypeInternal = dataType;
};
oFF.QMeasureHelpMetadataSelector.prototype.setDataTypePrecision = function(precision)
{
	this.m_dataTypePrecision = oFF.XIntegerValue.create(precision);
};
oFF.QMeasureHelpMetadataSelector.prototype.setDataTypeScale = function(scale)
{
	this.m_dataTypeScale = oFF.XIntegerValue.create(scale);
};
oFF.QMeasureHelpMetadataSelector.prototype.setMeasureType = function(measureType)
{
	this.m_measureType = measureType;
};
oFF.QMeasureHelpMetadataSelector.prototype.setNumericPrecision = function(precision)
{
	this.m_numericPrecision = oFF.XIntegerValue.create(precision);
};
oFF.QMeasureHelpMetadataSelector.prototype.setNumericScale = function(scale)
{
	this.m_numericScale = oFF.XIntegerValue.create(scale);
};
oFF.QMeasureHelpMetadataSelector.prototype.setNumericShift = function(shift)
{
	this.m_numericShift = oFF.XIntegerValue.create(shift);
};
oFF.QMeasureHelpMetadataSelector.prototype.setRateType = function(rateType)
{
	this.m_rateType = rateType;
};
oFF.QMeasureHelpMetadataSelector.prototype.setUnitDimensionName = function(unitDimensionName)
{
	this.m_unitDimensionName = unitDimensionName;
};
oFF.QMeasureHelpMetadataSelector.prototype.setUnitDimensionProperty = function(unitDimensionProperty)
{
	this.m_unitDimensionProperty = unitDimensionProperty;
};
oFF.QMeasureHelpMetadataSelector.prototype.setUnitFixed = function(unitFixed)
{
	this.m_unitFixed = unitFixed;
};
oFF.QMeasureHelpMetadataSelector.prototype.setUnitName = function(unitName)
{
	this.m_unitName = unitName;
};
oFF.QMeasureHelpMetadataSelector.prototype.setUnitTextName = function(unitTextName)
{
	this.m_unitTextName = unitTextName;
};
oFF.QMeasureHelpMetadataSelector.prototype.setUnitType = function(unitType)
{
	this.m_unitType = unitType;
};
oFF.QMeasureHelpMetadataSelector.prototype.setVisibleMeasuresOnly = function(visibleMeasuresOnly)
{
	this.m_visibleMeasuresOnly = visibleMeasuresOnly;
};

oFF.HierarchyCatalogItem = function() {};
oFF.HierarchyCatalogItem.prototype = new oFF.XObject();
oFF.HierarchyCatalogItem.prototype._ff_c = "HierarchyCatalogItem";

oFF.HierarchyCatalogItem.createCatalogItem = function()
{
	let catalogItem = new oFF.HierarchyCatalogItem();
	catalogItem.setHierarchyType(oFF.HierarchyType.UNKNOWN);
	return catalogItem;
};
oFF.HierarchyCatalogItem.createCopy = function(item)
{
	if (oFF.isNull(item))
	{
		return null;
	}
	let copy = oFF.HierarchyCatalogItem.createCatalogItem();
	copy.setHierarchyName(item.getHierarchyName());
	copy.setDimensionName(item.getDimensionName());
	copy.setHierarchyUniqueName(item.getHierarchyUniqueName());
	if (item.hasHierarchyLongText())
	{
		copy.setHierarchyLongText(item.getHierarchyLongText());
	}
	if (item.hasHierarchyMediumText())
	{
		copy.setHierarchyMediumText(item.getHierarchyMediumText());
	}
	if (item.hasHierarchyShortText())
	{
		copy.setHierarchyShortText(item.getHierarchyShortText());
	}
	if (item.hasVersionName())
	{
		copy.setVersionName(item.getVersionName());
	}
	if (item.hasVersionDisplayKey())
	{
		copy.setVersionDisplayKey(item.getVersionDisplayKey());
	}
	if (item.hasVersionDescription())
	{
		copy.setVersionDescription(item.getVersionDescription());
	}
	copy.setDateTo(oFF.XObjectExt.cloneIfNotNull(item.getDateTo()));
	copy.setDateFrom(oFF.XObjectExt.cloneIfNotNull(item.getDateFrom()));
	if (item.hasOwner())
	{
		copy.setOwner(item.getOwner());
	}
	if (item.hasHierId())
	{
		copy.setHierId(item.getHierId());
	}
	if (item.hasHierType())
	{
		copy.setHierType(item.getHierType());
	}
	if (item.hasObjectVersion())
	{
		copy.setObjectVersion(item.getObjectVersion());
	}
	copy.setIsRemote(item.isRemote());
	copy.setIsModeled(item.isModeled());
	if (item.supportsHierarchyLevels())
	{
		copy.setSupportsHierarchyLevels(true);
		let hierarchyLevelsCopy = oFF.XList.create();
		let hierarchyLevels = item.getHierarchyLevels();
		if (oFF.notNull(hierarchyLevels))
		{
			for (let levelIndex = 0; levelIndex < hierarchyLevels.size(); levelIndex++)
			{
				let hierarchyLevel = hierarchyLevels.get(levelIndex);
				hierarchyLevelsCopy.add(oFF.HierarchyCatalogLevel.createCopy(hierarchyLevel));
			}
		}
		copy.setHierarchyLevels(hierarchyLevelsCopy);
	}
	copy.setHierarchyType(item.getHierarchyType());
	copy.setRestNode(item.getRestNode());
	copy.setVirtualRootNode(item.getVirtualRootNode());
	copy.setCustomHierarchyDefinition(item.getCustomHierarchyDefinition());
	return copy;
};
oFF.HierarchyCatalogItem.prototype.m_customHierarchyDefinition = null;
oFF.HierarchyCatalogItem.prototype.m_dateFrom = null;
oFF.HierarchyCatalogItem.prototype.m_dateTo = null;
oFF.HierarchyCatalogItem.prototype.m_dimensionName = null;
oFF.HierarchyCatalogItem.prototype.m_fetchLevelsListeners = null;
oFF.HierarchyCatalogItem.prototype.m_hasHierId = false;
oFF.HierarchyCatalogItem.prototype.m_hasHierType = false;
oFF.HierarchyCatalogItem.prototype.m_hasHierarchyLongText = false;
oFF.HierarchyCatalogItem.prototype.m_hasHierarchyMediumText = false;
oFF.HierarchyCatalogItem.prototype.m_hasHierarchyShortText = false;
oFF.HierarchyCatalogItem.prototype.m_hasObjectVersion = false;
oFF.HierarchyCatalogItem.prototype.m_hasOwner = false;
oFF.HierarchyCatalogItem.prototype.m_hasVersionDescription = false;
oFF.HierarchyCatalogItem.prototype.m_hasVersionDisplayKey = false;
oFF.HierarchyCatalogItem.prototype.m_hasVersionName = false;
oFF.HierarchyCatalogItem.prototype.m_hierId = null;
oFF.HierarchyCatalogItem.prototype.m_hierType = null;
oFF.HierarchyCatalogItem.prototype.m_hierarchyLevels = null;
oFF.HierarchyCatalogItem.prototype.m_hierarchyLongText = null;
oFF.HierarchyCatalogItem.prototype.m_hierarchyMediumText = null;
oFF.HierarchyCatalogItem.prototype.m_hierarchyName = null;
oFF.HierarchyCatalogItem.prototype.m_hierarchyShortText = null;
oFF.HierarchyCatalogItem.prototype.m_hierarchyType = null;
oFF.HierarchyCatalogItem.prototype.m_hierarchyUniqueName = null;
oFF.HierarchyCatalogItem.prototype.m_isModeled = false;
oFF.HierarchyCatalogItem.prototype.m_isRemote = false;
oFF.HierarchyCatalogItem.prototype.m_objectVersion = null;
oFF.HierarchyCatalogItem.prototype.m_owner = null;
oFF.HierarchyCatalogItem.prototype.m_restNode = null;
oFF.HierarchyCatalogItem.prototype.m_supportsHierarchyLevels = false;
oFF.HierarchyCatalogItem.prototype.m_versionDescription = null;
oFF.HierarchyCatalogItem.prototype.m_versionDisplayKey = null;
oFF.HierarchyCatalogItem.prototype.m_versionName = null;
oFF.HierarchyCatalogItem.prototype.m_virtualRootNode = null;
oFF.HierarchyCatalogItem.prototype.appendDecoratedObject = function(buffer, object)
{
	if (oFF.isNull(object))
	{
		this.appendDecoratedString(buffer, null);
	}
	else
	{
		this.appendDecoratedString(buffer, object.toString());
	}
};
oFF.HierarchyCatalogItem.prototype.appendDecoratedString = function(buffer, value)
{
	buffer.append("[");
	if (oFF.notNull(value))
	{
		buffer.append(value);
	}
	buffer.append("]");
};
oFF.HierarchyCatalogItem.prototype.appendDecoratedStringIfTrue = function(buffer, value, condition)
{
	if (condition)
	{
		this.appendDecoratedString(buffer, value);
	}
	else
	{
		this.appendDecoratedString(buffer, null);
	}
};
oFF.HierarchyCatalogItem.prototype.assertSupportsHierarchyLevels = function()
{
	if (!this.supportsHierarchyLevels())
	{
		return;
	}
};
oFF.HierarchyCatalogItem.prototype.cloneExt = function(flags)
{
	return oFF.HierarchyCatalogItem.createCopy(this);
};
oFF.HierarchyCatalogItem.prototype.fetchHierarchyLevels = function(queryModel, syncType, listener, customIdentifier)
{
	this.m_fetchLevelsListeners = listener;
	if (oFF.isNull(this.m_hierarchyLevels) && oFF.notNull(queryModel))
	{
		this.m_hierarchyLevels = oFF.XList.create();
		let dimension = queryModel.getDimensionByName(this.m_dimensionName);
		if (oFF.notNull(dimension))
		{
			let hierarchyUniqueName = oFF.XStringUtils.isNotNullAndNotEmpty(this.m_hierarchyUniqueName) ? this.m_hierarchyUniqueName : dimension.getHierarchyUniqueName(this.getHierarchyName());
			dimension.fetchHierarchyLevels(syncType, this, customIdentifier, hierarchyUniqueName);
			if (syncType === oFF.SyncType.NON_BLOCKING)
			{
				return oFF.ExtResult.create(null, oFF.MessageManagerSimple.createMessageManager());
			}
		}
	}
	let result = oFF.ExtResult.create(this.m_hierarchyLevels, oFF.MessageManagerSimple.createMessageManager());
	if (oFF.notNull(this.m_fetchLevelsListeners))
	{
		this.m_fetchLevelsListeners.onHierarchyLevelsResult(result, this.m_hierarchyLevels, customIdentifier);
		this.m_fetchLevelsListeners = null;
	}
	return result;
};
oFF.HierarchyCatalogItem.prototype.getCustomHierarchyDefinition = function()
{
	return this.m_customHierarchyDefinition;
};
oFF.HierarchyCatalogItem.prototype.getDateFrom = function()
{
	return this.m_dateFrom;
};
oFF.HierarchyCatalogItem.prototype.getDateTo = function()
{
	return this.m_dateTo;
};
oFF.HierarchyCatalogItem.prototype.getDimensionName = function()
{
	return this.m_dimensionName;
};
oFF.HierarchyCatalogItem.prototype.getHierId = function()
{
	return this.m_hierId;
};
oFF.HierarchyCatalogItem.prototype.getHierType = function()
{
	return this.m_hierType;
};
oFF.HierarchyCatalogItem.prototype.getHierarchyDescription = function()
{
	if (this.hasHierarchyShortText() && oFF.XStringUtils.isNotNullAndNotEmpty(this.m_hierarchyShortText))
	{
		return this.m_hierarchyShortText;
	}
	else if (this.hasHierarchyMediumText() && oFF.XStringUtils.isNotNullAndNotEmpty(this.m_hierarchyMediumText))
	{
		return this.m_hierarchyMediumText;
	}
	else if (this.hasHierarchyLongText() && oFF.XStringUtils.isNotNullAndNotEmpty(this.m_hierarchyLongText))
	{
		return this.m_hierarchyLongText;
	}
	return null;
};
oFF.HierarchyCatalogItem.prototype.getHierarchyLevels = function()
{
	this.assertSupportsHierarchyLevels();
	return this.m_hierarchyLevels;
};
oFF.HierarchyCatalogItem.prototype.getHierarchyLongText = function()
{
	return this.m_hierarchyLongText;
};
oFF.HierarchyCatalogItem.prototype.getHierarchyMediumText = function()
{
	return this.m_hierarchyMediumText;
};
oFF.HierarchyCatalogItem.prototype.getHierarchyName = function()
{
	return this.m_hierarchyName;
};
oFF.HierarchyCatalogItem.prototype.getHierarchyShortText = function()
{
	return this.m_hierarchyShortText;
};
oFF.HierarchyCatalogItem.prototype.getHierarchyType = function()
{
	return this.m_hierarchyType;
};
oFF.HierarchyCatalogItem.prototype.getHierarchyUniqueName = function()
{
	return this.m_hierarchyUniqueName;
};
oFF.HierarchyCatalogItem.prototype.getObjectVersion = function()
{
	return this.m_objectVersion;
};
oFF.HierarchyCatalogItem.prototype.getOwner = function()
{
	return this.m_owner;
};
oFF.HierarchyCatalogItem.prototype.getRestNode = function()
{
	return this.m_restNode;
};
oFF.HierarchyCatalogItem.prototype.getVersionDescription = function()
{
	return this.m_versionDescription;
};
oFF.HierarchyCatalogItem.prototype.getVersionDisplayKey = function()
{
	return this.m_versionDisplayKey;
};
oFF.HierarchyCatalogItem.prototype.getVersionName = function()
{
	return this.m_versionName;
};
oFF.HierarchyCatalogItem.prototype.getVirtualRootNode = function()
{
	return this.m_virtualRootNode;
};
oFF.HierarchyCatalogItem.prototype.hasHierId = function()
{
	return this.m_hasHierId;
};
oFF.HierarchyCatalogItem.prototype.hasHierType = function()
{
	return this.m_hasHierType;
};
oFF.HierarchyCatalogItem.prototype.hasHierarchyLongText = function()
{
	return this.m_hasHierarchyLongText;
};
oFF.HierarchyCatalogItem.prototype.hasHierarchyMediumText = function()
{
	return this.m_hasHierarchyMediumText;
};
oFF.HierarchyCatalogItem.prototype.hasHierarchyShortText = function()
{
	return this.m_hasHierarchyShortText;
};
oFF.HierarchyCatalogItem.prototype.hasObjectVersion = function()
{
	return this.m_hasObjectVersion;
};
oFF.HierarchyCatalogItem.prototype.hasOwner = function()
{
	return this.m_hasOwner;
};
oFF.HierarchyCatalogItem.prototype.hasVersionDescription = function()
{
	return this.m_hasVersionDescription;
};
oFF.HierarchyCatalogItem.prototype.hasVersionDisplayKey = function()
{
	return this.m_hasVersionDisplayKey;
};
oFF.HierarchyCatalogItem.prototype.hasVersionName = function()
{
	return this.m_hasVersionName;
};
oFF.HierarchyCatalogItem.prototype.isCustomHierarchy = function()
{
	return oFF.notNull(this.m_customHierarchyDefinition);
};
oFF.HierarchyCatalogItem.prototype.isModeled = function()
{
	return this.m_isModeled;
};
oFF.HierarchyCatalogItem.prototype.isRemote = function()
{
	return this.m_isRemote;
};
oFF.HierarchyCatalogItem.prototype.onHierarchyCatalogResult = function(extResult, result, customIdentifier)
{
	if (extResult.isValid())
	{
		let catalogItem = oFF.notNull(result) && result.getObjects().size() === 1 ? result.getObjects().get(0) : null;
		let supportsHierarchyLevels = oFF.notNull(catalogItem) && catalogItem.supportsHierarchyLevels();
		this.setSupportsHierarchyLevels(supportsHierarchyLevels);
		if (supportsHierarchyLevels && catalogItem !== this)
		{
			this.m_hierarchyLevels.clear();
			this.m_hierarchyLevels.addAll(catalogItem.getHierarchyLevels());
		}
	}
	else
	{
		this.m_hierarchyLevels = null;
	}
	if (oFF.notNull(this.m_fetchLevelsListeners))
	{
		this.m_fetchLevelsListeners.onHierarchyLevelsResult(oFF.ExtResult.create(this.m_hierarchyLevels, extResult), this.m_hierarchyLevels, customIdentifier);
	}
	this.m_fetchLevelsListeners = null;
};
oFF.HierarchyCatalogItem.prototype.releaseObject = function()
{
	this.m_hierarchyName = null;
	this.m_hierarchyUniqueName = null;
	this.m_dimensionName = null;
	this.m_hierarchyShortText = null;
	this.m_hierarchyMediumText = null;
	this.m_hierarchyLongText = null;
	this.m_versionName = null;
	this.m_versionDisplayKey = null;
	this.m_versionDescription = null;
	this.m_dateTo = oFF.XObjectExt.release(this.m_dateTo);
	this.m_dateFrom = oFF.XObjectExt.release(this.m_dateFrom);
	this.m_owner = null;
	this.m_hierId = null;
	this.m_hierType = null;
	this.m_objectVersion = null;
	this.m_hierarchyLevels = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_hierarchyLevels);
	this.m_hierarchyType = null;
	this.m_restNode = null;
	this.m_virtualRootNode = null;
	this.m_customHierarchyDefinition = null;
	this.m_fetchLevelsListeners = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.HierarchyCatalogItem.prototype.setCustomHierarchyDefinition = function(customHierarchyDefinition)
{
	this.m_customHierarchyDefinition = customHierarchyDefinition;
};
oFF.HierarchyCatalogItem.prototype.setDateFrom = function(dateFrom)
{
	this.m_dateFrom = dateFrom;
};
oFF.HierarchyCatalogItem.prototype.setDateTo = function(dateTo)
{
	this.m_dateTo = dateTo;
};
oFF.HierarchyCatalogItem.prototype.setDimensionName = function(dimensionName)
{
	this.m_dimensionName = dimensionName;
};
oFF.HierarchyCatalogItem.prototype.setHierId = function(hierId)
{
	this.m_hierId = hierId;
	this.m_hasHierId = true;
};
oFF.HierarchyCatalogItem.prototype.setHierType = function(hierType)
{
	this.m_hierType = hierType;
	this.m_hasHierType = true;
};
oFF.HierarchyCatalogItem.prototype.setHierarchyLevels = function(hierarchyLevels)
{
	this.assertSupportsHierarchyLevels();
	this.m_hierarchyLevels = hierarchyLevels;
};
oFF.HierarchyCatalogItem.prototype.setHierarchyLongText = function(hierarchyLongText)
{
	this.m_hierarchyLongText = hierarchyLongText;
	this.m_hasHierarchyLongText = true;
};
oFF.HierarchyCatalogItem.prototype.setHierarchyMediumText = function(hierarchyMediumText)
{
	this.m_hierarchyMediumText = hierarchyMediumText;
	this.m_hasHierarchyMediumText = true;
};
oFF.HierarchyCatalogItem.prototype.setHierarchyName = function(hierarchyName)
{
	this.m_hierarchyName = hierarchyName;
};
oFF.HierarchyCatalogItem.prototype.setHierarchyShortText = function(hierarchyShortText)
{
	this.m_hierarchyShortText = hierarchyShortText;
	this.m_hasHierarchyShortText = true;
};
oFF.HierarchyCatalogItem.prototype.setHierarchyType = function(hierarchyType)
{
	this.m_hierarchyType = hierarchyType;
};
oFF.HierarchyCatalogItem.prototype.setHierarchyUniqueName = function(hierarchyUniqueName)
{
	this.m_hierarchyUniqueName = hierarchyUniqueName;
};
oFF.HierarchyCatalogItem.prototype.setIsModeled = function(isModeled)
{
	this.m_isModeled = isModeled;
};
oFF.HierarchyCatalogItem.prototype.setIsRemote = function(isRemote)
{
	this.m_isRemote = isRemote;
};
oFF.HierarchyCatalogItem.prototype.setObjectVersion = function(objectVersion)
{
	this.m_objectVersion = objectVersion;
	this.m_hasObjectVersion = true;
};
oFF.HierarchyCatalogItem.prototype.setOwner = function(owner)
{
	this.m_owner = owner;
	this.m_hasOwner = true;
};
oFF.HierarchyCatalogItem.prototype.setRestNode = function(restNode)
{
	this.m_restNode = restNode;
};
oFF.HierarchyCatalogItem.prototype.setSupportsHierarchyLevels = function(supportsHierarchyLevels)
{
	this.m_supportsHierarchyLevels = supportsHierarchyLevels;
};
oFF.HierarchyCatalogItem.prototype.setVersionDescription = function(versionDescription)
{
	this.m_versionDescription = versionDescription;
	this.m_hasVersionDescription = true;
};
oFF.HierarchyCatalogItem.prototype.setVersionDisplayKey = function(versionDisplayKey)
{
	this.m_versionDisplayKey = versionDisplayKey;
	this.m_hasVersionDisplayKey = true;
};
oFF.HierarchyCatalogItem.prototype.setVersionName = function(versionName)
{
	this.m_versionName = versionName;
	this.m_hasVersionName = true;
};
oFF.HierarchyCatalogItem.prototype.setVirtualRootNode = function(virtualRootNode)
{
	this.m_virtualRootNode = virtualRootNode;
};
oFF.HierarchyCatalogItem.prototype.supportsHierarchyLevels = function()
{
	return this.m_supportsHierarchyLevels;
};
oFF.HierarchyCatalogItem.prototype.toString = function()
{
	let sb = oFF.XStringBuffer.create();
	this.appendDecoratedString(sb, this.m_dimensionName);
	sb.append(" - ");
	this.appendDecoratedString(sb, this.m_hierarchyName);
	sb.append("[");
	if (this.hasHierarchyLongText())
	{
		sb.append(this.getHierarchyLongText());
	}
	else
	{
		sb.append("<null>");
	}
	sb.append("|");
	if (this.hasHierarchyMediumText())
	{
		sb.append(this.getHierarchyMediumText());
	}
	else
	{
		sb.append("<null>");
	}
	sb.append("|");
	if (this.hasHierarchyShortText())
	{
		sb.append(this.getHierarchyShortText());
	}
	else
	{
		sb.append("<null>");
	}
	sb.append("]");
	this.appendDecoratedStringIfTrue(sb, this.m_versionName, this.hasVersionName());
	this.appendDecoratedStringIfTrue(sb, this.m_versionDescription, this.hasVersionDescription());
	this.appendDecoratedObject(sb, this.m_dateTo);
	this.appendDecoratedObject(sb, this.m_dateFrom);
	this.appendDecoratedStringIfTrue(sb, this.m_owner, this.hasOwner());
	this.appendDecoratedStringIfTrue(sb, this.m_hierId, this.hasHierId());
	sb.append("[").appendBoolean(this.m_isRemote).append("]");
	sb.append("[").appendBoolean(this.m_isModeled).append("]");
	sb.append("[").appendBoolean(this.isCustomHierarchy()).append("]");
	if (oFF.notNull(this.m_hierarchyType) && this.m_hierarchyType !== oFF.HierarchyType.UNKNOWN)
	{
		this.appendDecoratedObject(sb, this.m_hierarchyType);
		if (this.m_hierarchyType.isLeveledHierarchy())
		{
			sb.append("[Is Leveled Hierarchy]");
		}
	}
	if (this.supportsHierarchyLevels())
	{
		let levels = this.getHierarchyLevels();
		if (oFF.XCollectionUtils.hasElements(levels))
		{
			for (let i = 0; i < levels.size(); i++)
			{
				sb.appendNewLine().append(levels.get(i).toString());
			}
		}
	}
	return sb.toString();
};

oFF.HierarchyCatalogResult = function() {};
oFF.HierarchyCatalogResult.prototype = new oFF.XObject();
oFF.HierarchyCatalogResult.prototype._ff_c = "HierarchyCatalogResult";

oFF.HierarchyCatalogResult.create = function()
{
	let object = new oFF.HierarchyCatalogResult();
	object.m_items = oFF.XList.create();
	return object;
};
oFF.HierarchyCatalogResult.prototype.m_items = null;
oFF.HierarchyCatalogResult.prototype.addAllItems = function(items)
{
	this.m_items.addAll(items);
};
oFF.HierarchyCatalogResult.prototype.addItem = function(item)
{
	this.m_items.add(item);
};
oFF.HierarchyCatalogResult.prototype.cloneExt = function(flags)
{
	let copy = new oFF.HierarchyCatalogResult();
	copy.m_items = oFF.XCollectionUtils.createListOfClones(this.m_items);
	return copy;
};
oFF.HierarchyCatalogResult.prototype.containsHierarchy = function(name)
{
	let size = this.m_items.size();
	for (let i = 0; i < size; i++)
	{
		if (oFF.XString.isEqual(this.m_items.get(i).getHierarchyName(), name))
		{
			return true;
		}
	}
	return false;
};
oFF.HierarchyCatalogResult.prototype.getObjects = function()
{
	return this.m_items;
};
oFF.HierarchyCatalogResult.prototype.getObjectsIterator = function()
{
	return this.m_items.getIterator();
};
oFF.HierarchyCatalogResult.prototype.releaseObject = function()
{
	this.m_items = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_items);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.HierarchyCatalogResult.prototype.toString = function()
{
	let sb = oFF.XStringBuffer.create();
	if (oFF.notNull(this.m_items))
	{
		for (let i = 0; i < this.m_items.size(); i++)
		{
			if (i > 0)
			{
				sb.appendNewLine();
			}
			sb.append(this.m_items.get(i).toString());
		}
	}
	return sb.toString();
};

oFF.QRankInfo = function() {};
oFF.QRankInfo.prototype = new oFF.XObject();
oFF.QRankInfo.prototype._ff_c = "QRankInfo";

oFF.QRankInfo.create = function(maxRows, complexSortForRank, conditionForRank)
{
	let rankInfo = new oFF.QRankInfo();
	rankInfo.m_maxRows = maxRows;
	rankInfo.m_complexSorting = oFF.XWeakReferenceUtil.getWeakRef(complexSortForRank);
	rankInfo.m_condition = oFF.XWeakReferenceUtil.getWeakRef(conditionForRank);
	rankInfo.setMeasuresAndVersion();
	rankInfo.setComparisonOperator();
	rankInfo.setAppliedDimensions();
	return rankInfo;
};
oFF.QRankInfo.prototype.m_appliedDimensions = null;
oFF.QRankInfo.prototype.m_complexSorting = null;
oFF.QRankInfo.prototype.m_condition = null;
oFF.QRankInfo.prototype.m_conditionComparisonOperator = null;
oFF.QRankInfo.prototype.m_maxRows = 0;
oFF.QRankInfo.prototype.m_measure = null;
oFF.QRankInfo.prototype.m_secondaryMeasure = null;
oFF.QRankInfo.prototype.m_versionDimension = null;
oFF.QRankInfo.prototype.m_versionElementId = null;
oFF.QRankInfo.prototype.accountDimensionExists = function(elementPath)
{
	let numberOfPathElements = elementPath.size();
	if (numberOfPathElements === 1)
	{
		return false;
	}
	for (let i = 0; i < numberOfPathElements; i++)
	{
		if (elementPath.get(i).getDimension().getDimensionType() === oFF.DimensionType.ACCOUNT)
		{
			return true;
		}
	}
	return false;
};
oFF.QRankInfo.prototype.getAppliedDimensions = function()
{
	return this.m_appliedDimensions;
};
oFF.QRankInfo.prototype.getComparisonOperator = function()
{
	return this.m_conditionComparisonOperator;
};
oFF.QRankInfo.prototype.getComplexSorting = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_complexSorting);
};
oFF.QRankInfo.prototype.getCondition = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_condition);
};
oFF.QRankInfo.prototype.getConditionName = function()
{
	let conditionName = null;
	if (this.getCondition() !== null)
	{
		conditionName = this.getCondition().getName();
	}
	return conditionName;
};
oFF.QRankInfo.prototype.getMaxRows = function()
{
	return this.m_maxRows;
};
oFF.QRankInfo.prototype.getMeasure = function()
{
	return this.m_measure;
};
oFF.QRankInfo.prototype.getMeasureDimensions = function(thresholdZeroIndex)
{
	let measureCoordinates = thresholdZeroIndex.getMeasureCoordinates();
	let numberOfMeasures = measureCoordinates.size();
	let secondaryMeasureDimension = null;
	let measureDimension = null;
	let accountDimension = null;
	for (let j = 0; j < numberOfMeasures; j++)
	{
		let member = measureCoordinates.get(j);
		let dimension = member.getDimension();
		if (oFF.isNull(dimension))
		{
			continue;
		}
		if (dimension.getDimensionType() === oFF.DimensionType.SECONDARY_STRUCTURE)
		{
			secondaryMeasureDimension = dimension;
		}
		else if (dimension.getDimensionType() === oFF.DimensionType.MEASURE_STRUCTURE)
		{
			measureDimension = dimension;
		}
		else if (dimension.getDimensionType() === oFF.DimensionType.ACCOUNT)
		{
			accountDimension = dimension;
		}
	}
	let primaryAndSecondaryMeasures = oFF.XList.create();
	primaryAndSecondaryMeasures.add(oFF.notNull(accountDimension) ? accountDimension : measureDimension);
	primaryAndSecondaryMeasures.add(oFF.notNull(accountDimension) ? measureDimension : secondaryMeasureDimension);
	return primaryAndSecondaryMeasures;
};
oFF.QRankInfo.prototype.getMeasureDimensionsFromSortPath = function(elementPath)
{
	let customDimension2 = null;
	let customDimension1 = null;
	let accountDimension = null;
	for (let i = 0; i < elementPath.size(); i++)
	{
		let pathElement = elementPath.get(i);
		if (oFF.notNull(pathElement))
		{
			let dimension = pathElement.getDimension();
			if (oFF.notNull(dimension))
			{
				if (dimension.getDimensionType() === oFF.DimensionType.SECONDARY_STRUCTURE)
				{
					customDimension2 = dimension;
				}
				else if (dimension.getDimensionType() === oFF.DimensionType.MEASURE_STRUCTURE)
				{
					customDimension1 = dimension;
				}
				else if (dimension.getDimensionType() === oFF.DimensionType.ACCOUNT)
				{
					accountDimension = dimension;
				}
			}
		}
	}
	let primaryAndSecondaryDimensions = oFF.XList.create();
	primaryAndSecondaryDimensions.add(oFF.notNull(accountDimension) ? accountDimension : customDimension1);
	primaryAndSecondaryDimensions.add(oFF.notNull(accountDimension) ? customDimension1 : customDimension2);
	return primaryAndSecondaryDimensions;
};
oFF.QRankInfo.prototype.getSecondaryMeasure = function()
{
	return this.m_secondaryMeasure;
};
oFF.QRankInfo.prototype.getVersionDimension = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_versionDimension);
};
oFF.QRankInfo.prototype.getVersionElementId = function()
{
	return this.m_versionElementId;
};
oFF.QRankInfo.prototype.isEqualTo = function(other)
{
	let otherRank = other;
	return this.getMaxRows() === otherRank.getMaxRows() && oFF.XString.isEqual(this.getMeasure(), otherRank.getMeasure()) && oFF.XString.isEqual(this.getSecondaryMeasure(), otherRank.getSecondaryMeasure()) && oFF.XString.isEqual(this.getVersionElementId(), otherRank.getVersionElementId()) && this.getVersionDimension() === otherRank.getVersionDimension() && this.getComparisonOperator() === otherRank.getComparisonOperator();
};
oFF.QRankInfo.prototype.setAppliedDimensions = function()
{
	let appliedDimensions = oFF.XList.create();
	let complexSorting = this.getComplexSorting();
	let condition = this.getCondition();
	if (oFF.notNull(complexSorting) && complexSorting.appliedTopOnIndividualDimension())
	{
		let queryModel = complexSorting.getQueryModel();
		let measureDimensionName = queryModel.getMeasureDimension().getName();
		appliedDimensions = oFF.XStream.of(queryModel.getRowsAxis().getDimensions()).mapToString((rowDim) => {
			return rowDim.getName();
		}).filter((s3) => {
			return !oFF.XString.isEqual(s3.getString(), measureDimensionName);
		}).collect(oFF.XStreamCollector.toListOfString((s4) => {
			return s4.getString();
		}));
		let dimensionsOnColumns = oFF.XStream.of(queryModel.getColumnsAxis().getDimensions()).mapToString((colDim) => {
			return colDim.getName();
		}).filter((s5) => {
			return !oFF.XString.isEqual(s5.getString(), measureDimensionName);
		}).collect(oFF.XStreamCollector.toListOfString((s6) => {
			return s6.getString();
		}));
		appliedDimensions.addAll(dimensionsOnColumns);
	}
	else if (oFF.notNull(condition))
	{
		appliedDimensions = oFF.XStream.of(condition.getEvaluationDimensions()).collect(oFF.XStreamCollector.toListOfString((dimension) => {
			return dimension.getName();
		}));
	}
	this.m_appliedDimensions = appliedDimensions;
};
oFF.QRankInfo.prototype.setComparisonOperator = function()
{
	let complexSorting = this.getComplexSorting();
	if (oFF.notNull(complexSorting) && complexSorting.getDirection() === oFF.XSortDirection.DESCENDING)
	{
		this.m_conditionComparisonOperator = oFF.ConditionComparisonOperator.TOP_N;
	}
	else if (oFF.notNull(complexSorting) && complexSorting.getDirection() === oFF.XSortDirection.ASCENDING)
	{
		this.m_conditionComparisonOperator = oFF.ConditionComparisonOperator.BOTTOM_N;
	}
	let condition = this.getCondition();
	if (oFF.notNull(condition))
	{
		let thresholdZeroIndex = condition.getThresholds().get(0);
		this.m_conditionComparisonOperator = thresholdZeroIndex.getComparisonOperator();
	}
};
oFF.QRankInfo.prototype.setMeasuresAndVersion = function()
{
	let complexSorting = this.getComplexSorting();
	let condition = this.getCondition();
	if (oFF.notNull(complexSorting))
	{
		this.setMeasuresFromSort(complexSorting);
	}
	else if (oFF.notNull(condition))
	{
		this.setMeasuresFromCondition(condition);
	}
};
oFF.QRankInfo.prototype.setMeasuresFromCondition = function(condition)
{
	let thresholdZeroIndex = condition.getThresholds().get(0);
	let queryModel = condition.getQueryModel();
	let primaryAndSecondaryMeasures = this.getMeasureDimensions(thresholdZeroIndex);
	let primaryDimension = primaryAndSecondaryMeasures.get(0);
	let secondaryDimension = primaryAndSecondaryMeasures.get(1);
	let conditionComparisonOperator = thresholdZeroIndex.getComparisonOperator();
	if (conditionComparisonOperator === oFF.ConditionComparisonOperator.TOP_N || conditionComparisonOperator === oFF.ConditionComparisonOperator.BOTTOM_N)
	{
		let measureCoordinates = thresholdZeroIndex.getMeasureCoordinates();
		let numberOfMeasures = measureCoordinates.size();
		for (let j = 0; j < numberOfMeasures; j++)
		{
			let member = measureCoordinates.get(j);
			let dimension2 = member.getDimension();
			if (oFF.isNull(dimension2))
			{
				continue;
			}
			let dimensionType2 = dimension2.getDimensionType();
			if (!dimensionType2.isTypeOf(oFF.DimensionType.ABSTRACT_STRUCTURE) && dimensionType2 !== oFF.DimensionType.ACCOUNT)
			{
				this.m_versionElementId = member.getName();
				this.m_versionDimension = oFF.XWeakReferenceUtil.getWeakRef(dimension2);
			}
			if (oFF.XString.isEqual(dimension2.getName(), primaryDimension.getName()))
			{
				this.m_measure = member.getName();
			}
			else if (oFF.notNull(secondaryDimension) && oFF.XString.isEqual(dimension2.getName(), secondaryDimension.getName()) && (queryModel.getSession().hasFeature(oFF.FeatureToggleOlap.SORT_AND_RANK_BY_SECONDARY_MEASURE_ENHANCEMENT) || !oFF.XString.isEqual(member.getName(), oFF.QModelConstants.MEASURE_SIGNED_DATA)))
			{
				this.m_secondaryMeasure = member.getName();
			}
		}
	}
};
oFF.QRankInfo.prototype.setMeasuresFromSort = function(complexSorting)
{
	let elementPath = complexSorting.getElementPath();
	let queryModel = complexSorting.getQueryModel();
	let numberOfElements = elementPath.size();
	for (let i = 0; i < numberOfElements; i++)
	{
		let pathElement = elementPath.get(i);
		let dimension = pathElement.getDimension();
		let dimensionType = dimension.getDimensionType();
		if (!dimensionType.isTypeOf(oFF.DimensionType.ABSTRACT_STRUCTURE) && dimensionType !== oFF.DimensionType.ACCOUNT)
		{
			this.m_versionElementId = pathElement.getSelectValue();
			this.m_versionDimension = oFF.XWeakReferenceUtil.getWeakRef(dimension);
		}
		if (queryModel.getSession().hasFeature(oFF.FeatureToggleOlap.SORT_AND_RANK_BY_SECONDARY_MEASURE_ENHANCEMENT))
		{
			let primaryAndSecondaryDimensions = this.getMeasureDimensionsFromSortPath(elementPath);
			let primaryDimension = primaryAndSecondaryDimensions.get(0);
			let secondaryDimension = primaryAndSecondaryDimensions.get(1);
			if (dimensionType === primaryDimension.getDimensionType())
			{
				this.m_measure = pathElement.getSelectValue();
			}
			else if (oFF.notNull(secondaryDimension) && dimensionType === secondaryDimension.getDimensionType())
			{
				this.m_secondaryMeasure = pathElement.getSelectValue();
			}
		}
		else
		{
			let accountDimensionExists = this.accountDimensionExists(elementPath);
			if (accountDimensionExists)
			{
				if (dimensionType === oFF.DimensionType.ACCOUNT)
				{
					this.m_measure = pathElement.getSelectValue();
				}
				else if (dimensionType === oFF.DimensionType.MEASURE_STRUCTURE)
				{
					let secondaryMeasureName = pathElement.getSelectValue();
					if (!oFF.XString.isEqual(secondaryMeasureName, oFF.QModelConstants.MEASURE_SIGNED_DATA))
					{
						this.m_secondaryMeasure = secondaryMeasureName;
					}
				}
			}
			else
			{
				if (dimension.isMeasureStructure())
				{
					this.m_measure = pathElement.getSelectValue();
				}
				else if (dimensionType === oFF.DimensionType.SECONDARY_STRUCTURE)
				{
					let secondaryMeasureName2 = pathElement.getSelectValue();
					if (!oFF.XString.isEqual(secondaryMeasureName2, oFF.QModelConstants.MEASURE_SIGNED_DATA))
					{
						this.m_secondaryMeasure = secondaryMeasureName2;
					}
				}
			}
		}
	}
};

oFF.QCalculationManager = function() {};
oFF.QCalculationManager.prototype = new oFF.XObject();
oFF.QCalculationManager.prototype._ff_c = "QCalculationManager";

oFF.QCalculationManager.createCalculationManager = function(dimension)
{
	let calculationManager = new oFF.QCalculationManager();
	calculationManager.m_dimension = oFF.XWeakReferenceUtil.getWeakRef(dimension);
	return calculationManager;
};
oFF.QCalculationManager.prototype.m_dimension = null;
oFF.QCalculationManager.prototype.addNewExceptionAggregationMeasure = function(name, text)
{
	return this.getDimension().addNewExceptionAggregationMeasure(name, text);
};
oFF.QCalculationManager.prototype.addNewFormulaMeasure = function(name, text)
{
	return this.getDimension().addNewFormulaMeasure(name, text);
};
oFF.QCalculationManager.prototype.addNewRestrictedMeasure = function(name, text)
{
	return this.getDimension().addNewRestrictedMeasure(name, text);
};
oFF.QCalculationManager.prototype.addNewVarianceMeasure = function(name, text)
{
	return this.getDimension().addNewVarianceMeasure(name, text);
};
oFF.QCalculationManager.prototype.getDimension = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_dimension);
};
oFF.QCalculationManager.prototype.getMaxNumberOfDimensionsForExceptionAggregation = function(memberType, aggrType)
{
	return this.getDimension().getConvenienceCommands().getMaxNumberOfDimensionsForExceptionAggregation(memberType, aggrType);
};
oFF.QCalculationManager.prototype.getSupportedDimensionsForExceptionAggregation = function(memberType, aggrType)
{
	return this.getDimension().getConvenienceCommands().getSupportedDimensionsForExceptionAggregation(memberType, aggrType);
};
oFF.QCalculationManager.prototype.getSupportedExceptionAggregationTypes = function(memberType)
{
	return this.getDimension().getConvenienceCommands().getSupportedExceptionAggregationTypes(memberType);
};
oFF.QCalculationManager.prototype.getSupportedFormulaOperators = function()
{
	let olapSystemContainer = this.getDimension().getQueryManager().getOlapSystemContainer();
	let formulaOperators = olapSystemContainer.processSupportedFormulaOperators(oFF.SyncType.BLOCKING, null, null);
	if (formulaOperators.hasErrors())
	{
		return null;
	}
	let supportedFormulaOperators = formulaOperators.getData();
	oFF.XObjectExt.release(formulaOperators);
	let allowedFormulaOperatorList = this.getDimension().getOlapEnv().getAllowedFormulaOperatorList();
	if (oFF.XCollectionUtils.hasElements(allowedFormulaOperatorList))
	{
		let allowedFormulaOperators = oFF.XList.create();
		let supportedFormulaOperatorIt = supportedFormulaOperators.getIterator();
		while (supportedFormulaOperatorIt.hasNext())
		{
			let supportedFormulaOperator = supportedFormulaOperatorIt.next();
			if (allowedFormulaOperatorList.contains(supportedFormulaOperator))
			{
				allowedFormulaOperators.add(supportedFormulaOperator);
			}
		}
		return allowedFormulaOperators;
	}
	return supportedFormulaOperators;
};
oFF.QCalculationManager.prototype.releaseObject = function()
{
	this.m_dimension = oFF.XObjectExt.release(this.m_dimension);
	oFF.XObject.prototype.releaseObject.call( this );
};

oFF.QTimeConvertedFAMSelectionPlaceholder = function() {};
oFF.QTimeConvertedFAMSelectionPlaceholder.prototype = new oFF.QSelectionPlaceholder();
oFF.QTimeConvertedFAMSelectionPlaceholder.prototype._ff_c = "QTimeConvertedFAMSelectionPlaceholder";

oFF.QTimeConvertedFAMSelectionPlaceholder.QM_FILTER_MODEL = "qmFilterModel";
oFF.QTimeConvertedFAMSelectionPlaceholder.SOURCE_CANONICAL_DATE_CONTEXT = "sourceCanonicalDateContext";
oFF.QTimeConvertedFAMSelectionPlaceholder.TARGET_GRANULARITY = "targetGranularity";
oFF.QTimeConvertedFAMSelectionPlaceholder.createTimeConvertedFAMSelectionPlaceholder = function(queryModel, timeDimension, filterOp, qmFilterModel, sourceDatasetId, sourceTimeDimensionName, sourceHierarchyName)
{
	let timeSelectionPlaceholder = new oFF.QTimeConvertedFAMSelectionPlaceholder();
	let flatHierarchylevel = oFF.QTimeDimensionUtil.findAnyHierarchyLevelMatchingField(timeDimension, filterOp.getFieldMetadata());
	let levelType = flatHierarchylevel.getLevelType();
	timeSelectionPlaceholder.setTargetGranularity(oFF.QCanonicalDateUtil.convertHierarchyLevelTypeToDateTimeGranularity(levelType));
	timeSelectionPlaceholder.setQmFilterModel(qmFilterModel);
	timeSelectionPlaceholder.setOriginalLowValue(filterOp.getLow().getString());
	let iterator = queryModel.getOlapEnv().getAllAreaQueryManager().getIterator();
	while (iterator.hasNext())
	{
		let sourceQueryModel = iterator.next().getQueryModel();
		if (oFF.XString.isEqual(sourceQueryModel.getDatasetId(), sourceDatasetId))
		{
			let sourceTimeDimension = sourceQueryModel.getDimensionByName(sourceTimeDimensionName);
			if (oFF.notNull(sourceTimeDimension))
			{
				let sourceCanonicalDateContext = oFF.QFactory.createCanonicalDateContext(sourceQueryModel, sourceTimeDimension, sourceHierarchyName);
				timeSelectionPlaceholder.setSourceCanonicalDateContext(sourceCanonicalDateContext.serializeToJson().getStringRepresentation());
			}
			break;
		}
	}
	return timeSelectionPlaceholder;
};
oFF.QTimeConvertedFAMSelectionPlaceholder.createTimeConvertedFAMSelectionPlaceholderFromPlaceholderString = function(selectionPlaceholderString)
{
	try
	{
		let selectionPlaceholderJson = oFF.JsonParserFactory.createFromString(selectionPlaceholderString);
		let selectionPlaceholderStructure = selectionPlaceholderJson.asStructure();
		let timeSelectionPlaceholder = new oFF.QTimeConvertedFAMSelectionPlaceholder();
		timeSelectionPlaceholder.setupSelectionPlaceholderFromStructure(selectionPlaceholderStructure);
		return timeSelectionPlaceholder;
	}
	catch (e)
	{
		return null;
	}
};
oFF.QTimeConvertedFAMSelectionPlaceholder.prototype.m_qmFilterModel = null;
oFF.QTimeConvertedFAMSelectionPlaceholder.prototype.m_sourceCanonicalDateContext = null;
oFF.QTimeConvertedFAMSelectionPlaceholder.prototype.m_targetGranularity = null;
oFF.QTimeConvertedFAMSelectionPlaceholder.prototype.getQmFilterModel = function()
{
	return this.m_qmFilterModel;
};
oFF.QTimeConvertedFAMSelectionPlaceholder.prototype.getSourceCanonicalDateContext = function()
{
	return this.m_sourceCanonicalDateContext;
};
oFF.QTimeConvertedFAMSelectionPlaceholder.prototype.getTargetGranularity = function()
{
	return this.m_targetGranularity;
};
oFF.QTimeConvertedFAMSelectionPlaceholder.prototype.serializeToJson = function()
{
	let selectionPlaceholderJson = oFF.QSelectionPlaceholder.prototype.serializeToJson.call( this );
	if (oFF.notNull(this.m_targetGranularity))
	{
		selectionPlaceholderJson.putString(oFF.QTimeConvertedFAMSelectionPlaceholder.TARGET_GRANULARITY, this.m_targetGranularity.getName());
	}
	selectionPlaceholderJson.putString(oFF.QTimeConvertedFAMSelectionPlaceholder.QM_FILTER_MODEL, this.m_qmFilterModel);
	selectionPlaceholderJson.putString(oFF.QTimeConvertedFAMSelectionPlaceholder.SOURCE_CANONICAL_DATE_CONTEXT, this.m_sourceCanonicalDateContext);
	return selectionPlaceholderJson;
};
oFF.QTimeConvertedFAMSelectionPlaceholder.prototype.setQmFilterModel = function(qmFilterModel)
{
	this.m_qmFilterModel = qmFilterModel;
};
oFF.QTimeConvertedFAMSelectionPlaceholder.prototype.setSourceCanonicalDateContext = function(sourceCanonicalDateContext)
{
	this.m_sourceCanonicalDateContext = sourceCanonicalDateContext;
};
oFF.QTimeConvertedFAMSelectionPlaceholder.prototype.setTargetGranularity = function(granularity)
{
	this.m_targetGranularity = granularity;
};
oFF.QTimeConvertedFAMSelectionPlaceholder.prototype.setupSelectionPlaceholderFromStructure = function(selectionPlaceholderStructure)
{
	oFF.QSelectionPlaceholder.prototype.setupSelectionPlaceholderFromStructure.call( this , selectionPlaceholderStructure);
	this.m_targetGranularity = oFF.DateTimeGranularityType.lookup(selectionPlaceholderStructure.getStringByKey(oFF.QTimeConvertedFAMSelectionPlaceholder.TARGET_GRANULARITY));
	this.m_qmFilterModel = selectionPlaceholderStructure.getStringByKey(oFF.QTimeConvertedFAMSelectionPlaceholder.QM_FILTER_MODEL);
	this.m_sourceCanonicalDateContext = selectionPlaceholderStructure.getStringByKey(oFF.QTimeConvertedFAMSelectionPlaceholder.SOURCE_CANONICAL_DATE_CONTEXT);
};

oFF.QTimeSelectionPlaceholder = function() {};
oFF.QTimeSelectionPlaceholder.prototype = new oFF.QSelectionPlaceholder();
oFF.QTimeSelectionPlaceholder.prototype._ff_c = "QTimeSelectionPlaceholder";

oFF.QTimeSelectionPlaceholder.CCD_ID = "ccdId";
oFF.QTimeSelectionPlaceholder.GRANULARITY = "granularity";
oFF.QTimeSelectionPlaceholder.SHIFT = "shift";
oFF.QTimeSelectionPlaceholder.createTimeSelectionPlaceholderFromPlaceholderString = function(selectionPlaceholderString)
{
	try
	{
		let selectionPlaceholderJson = oFF.JsonParserFactory.createFromString(selectionPlaceholderString);
		let selectionPlaceholderStructure = selectionPlaceholderJson.asStructure();
		let timeSelectionPlaceholder = new oFF.QTimeSelectionPlaceholder();
		timeSelectionPlaceholder.setupSelectionPlaceholderFromStructure(selectionPlaceholderStructure);
		return timeSelectionPlaceholder;
	}
	catch (e)
	{
		return null;
	}
};
oFF.QTimeSelectionPlaceholder.prototype.m_ccdId = null;
oFF.QTimeSelectionPlaceholder.prototype.m_granularity = null;
oFF.QTimeSelectionPlaceholder.prototype.m_shift = 0;
oFF.QTimeSelectionPlaceholder.prototype.getCcdId = function()
{
	return this.m_ccdId;
};
oFF.QTimeSelectionPlaceholder.prototype.getGranularity = function()
{
	return this.m_granularity;
};
oFF.QTimeSelectionPlaceholder.prototype.getShift = function()
{
	return this.m_shift;
};
oFF.QTimeSelectionPlaceholder.prototype.serializeToJson = function()
{
	let selectionPlaceholderJson = oFF.QSelectionPlaceholder.prototype.serializeToJson.call( this );
	if (oFF.notNull(this.m_granularity))
	{
		selectionPlaceholderJson.putString(oFF.QTimeSelectionPlaceholder.GRANULARITY, this.m_granularity.getName());
	}
	selectionPlaceholderJson.putInteger(oFF.QTimeSelectionPlaceholder.SHIFT, this.m_shift);
	if (oFF.notNull(this.m_ccdId))
	{
		selectionPlaceholderJson.putString(oFF.QTimeSelectionPlaceholder.CCD_ID, this.m_ccdId);
	}
	return selectionPlaceholderJson;
};
oFF.QTimeSelectionPlaceholder.prototype.setCcdId = function(ccdId)
{
	this.m_ccdId = ccdId;
};
oFF.QTimeSelectionPlaceholder.prototype.setGranularity = function(granularity)
{
	this.m_granularity = granularity;
};
oFF.QTimeSelectionPlaceholder.prototype.setShift = function(shift)
{
	this.m_shift = shift;
};
oFF.QTimeSelectionPlaceholder.prototype.setupSelectionPlaceholderFromStructure = function(selectionPlaceholderStructure)
{
	oFF.QSelectionPlaceholder.prototype.setupSelectionPlaceholderFromStructure.call( this , selectionPlaceholderStructure);
	this.m_granularity = oFF.DateTimeGranularityType.lookup(selectionPlaceholderStructure.getStringByKey(oFF.QTimeSelectionPlaceholder.GRANULARITY));
	this.m_shift = selectionPlaceholderStructure.getIntegerByKey(oFF.QTimeSelectionPlaceholder.SHIFT);
	this.m_ccdId = selectionPlaceholderStructure.getStringByKey(oFF.QTimeSelectionPlaceholder.CCD_ID);
};

oFF.QBindingAttribute = function() {};
oFF.QBindingAttribute.prototype = new oFF.XObjectExt();
oFF.QBindingAttribute.prototype._ff_c = "QBindingAttribute";

oFF.QBindingAttribute.prototype.m_cmds = null;
oFF.QBindingAttribute.prototype.m_customIdentifier = null;
oFF.QBindingAttribute.prototype.m_dataManifest = null;
oFF.QBindingAttribute.prototype.m_isAttachedToServiceConfig = false;
oFF.QBindingAttribute.prototype.m_isProcessingServiceConfig = false;
oFF.QBindingAttribute.prototype.m_listenerSender = null;
oFF.QBindingAttribute.prototype.m_splittedPath = null;
oFF.QBindingAttribute.prototype.getComponentType = function()
{
	return oFF.IoComponentType.BINDING_SENDER;
};
oFF.QBindingAttribute.prototype.getConvenienceCommands = function()
{
	let queryManager = this.getQueryManager();
	return oFF.isNull(queryManager) ? null : queryManager.getConvenienceCommands();
};
oFF.QBindingAttribute.prototype.getDataManifest = function()
{
	return this.m_dataManifest;
};
oFF.QBindingAttribute.prototype.getElement = function()
{
	let result = null;
	return result;
};
oFF.QBindingAttribute.prototype.getQueryManager = function()
{
	return oFF.isNull(this.m_cmds) ? null : this.m_cmds.getQueryManager();
};
oFF.QBindingAttribute.prototype.getSession = function()
{
	return oFF.isNull(this.m_cmds) ? null : this.m_cmds.getSession();
};
oFF.QBindingAttribute.prototype.getString = function()
{
	if (oFF.notNull(this.m_cmds))
	{
		let queryManager = this.m_cmds.getQueryManager();
		if (oFF.notNull(queryManager))
		{
			let text = queryManager.getQueryModel().getText();
			return text;
		}
	}
	return null;
};
oFF.QBindingAttribute.prototype.isReceiverReady = function()
{
	return this.isSenderValueReady();
};
oFF.QBindingAttribute.prototype.isSenderValueReady = function()
{
	this.log("isSenderValueReady");
	let isSenderValueReady = false;
	if (oFF.notNull(this.m_cmds))
	{
		let queryManager = this.m_cmds.getQueryManager();
		isSenderValueReady = oFF.notNull(queryManager);
	}
	return isSenderValueReady;
};
oFF.QBindingAttribute.prototype.onCmdContextChanged = function()
{
	this.log("onCmdContextChanged");
};
oFF.QBindingAttribute.prototype.onModelComponentChanged = function(modelComponent, customIdentifier)
{
	if (oFF.notNull(this.m_listenerSender))
	{
		this.m_listenerSender.onSenderValueChanged(this, this.m_customIdentifier);
	}
};
oFF.QBindingAttribute.prototype.onQueryManagerCreated = function(extResult, queryManager, customIdentifier)
{
	this.log("onQueryManagerCreated");
	this.m_dataManifest = oFF.DpDataManifestFactory.createByMessages(extResult);
	if (oFF.notNull(this.m_listenerSender))
	{
		this.m_listenerSender.onSenderValueChanged(this, this.m_customIdentifier);
	}
	if (extResult.isValid())
	{
		let queryModel = queryManager.getQueryModel();
		queryModel.registerChangedListener(this, null);
	}
};
oFF.QBindingAttribute.prototype.processSenderUpdate = function()
{
	this.log("processSenderUpdate");
	if (oFF.notNull(this.m_cmds))
	{
		this.tryAttachingToServiceConfig();
		this.tryProcessingServiceConfig();
	}
};
oFF.QBindingAttribute.prototype.registerReceiverReadyListener = function(listener, customIdentifier)
{
	this.m_customIdentifier = customIdentifier;
};
oFF.QBindingAttribute.prototype.registerValueChangedListener = function(listener, customIdentifier)
{
	this.m_listenerSender = listener;
	this.m_customIdentifier = customIdentifier;
};
oFF.QBindingAttribute.prototype.releaseObject = function()
{
	this.m_cmds = null;
	this.m_listenerSender = null;
	this.m_customIdentifier = null;
	oFF.XObjectExt.prototype.releaseObject.call( this );
};
oFF.QBindingAttribute.prototype.setDataManifest = function(dataManifest)
{
	this.m_dataManifest = dataManifest;
};
oFF.QBindingAttribute.prototype.setElement = function(element) {};
oFF.QBindingAttribute.prototype.setString = function(value) {};
oFF.QBindingAttribute.prototype.setupBind = function(cmds, type, protocol, path)
{
	this.setup();
	this.m_cmds = cmds;
	this.m_splittedPath = oFF.XStringTokenizer.splitString(path, "/");
	this.tryAttachingToServiceConfig();
};
oFF.QBindingAttribute.prototype.tryAttachingToServiceConfig = function()
{
	this.log("tryAttachingToServiceConfig()");
	if (oFF.notNull(this.m_cmds))
	{
		if (!this.m_isAttachedToServiceConfig)
		{
			let serviceConfig = this.m_cmds.getQueryServiceConfig();
			if (oFF.notNull(serviceConfig))
			{
				this.m_isAttachedToServiceConfig = true;
				serviceConfig.processQueryManagerCreation(oFF.SyncType.REGISTER, this, null);
			}
		}
	}
};
oFF.QBindingAttribute.prototype.tryProcessingServiceConfig = function()
{
	this.log("tryProcessingServiceConfig");
	if (oFF.notNull(this.m_cmds))
	{
		if (this.m_isAttachedToServiceConfig && !this.m_isProcessingServiceConfig)
		{
			let serviceConfig = this.m_cmds.getQueryServiceConfig();
			if (oFF.notNull(serviceConfig))
			{
				this.m_isProcessingServiceConfig = true;
				serviceConfig.processQueryManagerCreation(null, null, null);
			}
		}
	}
};
oFF.QBindingAttribute.prototype.unregisterReceiverReadyListener = function(listener)
{
	this.m_customIdentifier = null;
};
oFF.QBindingAttribute.prototype.unregisterValueChangedListener = function(listener)
{
	this.m_listenerSender = null;
	this.m_customIdentifier = null;
};

oFF.QBindingResultset = function() {};
oFF.QBindingResultset.prototype = new oFF.XObjectExt();
oFF.QBindingResultset.prototype._ff_c = "QBindingResultset";

oFF.QBindingResultset.m_prompting = false;
oFF.QBindingResultset.create = function(cmds, type, protocol)
{
	let newObj = new oFF.QBindingResultset();
	newObj.setupBind(cmds, type, protocol);
	return newObj;
};
oFF.QBindingResultset.prototype.m_cmds = null;
oFF.QBindingResultset.prototype.m_customIdentifier = null;
oFF.QBindingResultset.prototype.m_dataManifest = null;
oFF.QBindingResultset.prototype.m_isAttachedToQueryManager = false;
oFF.QBindingResultset.prototype.m_isAttachedToServiceConfig = false;
oFF.QBindingResultset.prototype.m_isProcessingServiceConfig = false;
oFF.QBindingResultset.prototype.m_listener = null;
oFF.QBindingResultset.prototype.m_protocol = null;
oFF.QBindingResultset.prototype.m_requestCounter = 0;
oFF.QBindingResultset.prototype.m_tryProcessingQueryManager = false;
oFF.QBindingResultset.prototype.m_type = null;
oFF.QBindingResultset.prototype.getComponentType = function()
{
	return oFF.IoComponentType.BINDING_SENDER;
};
oFF.QBindingResultset.prototype.getDataManifest = function()
{
	return this.m_dataManifest;
};
oFF.QBindingResultset.prototype.getElement = function()
{
	let result = null;
	if (oFF.notNull(this.m_cmds))
	{
		let queryManager = this.m_cmds.getQueryManager();
		if (oFF.notNull(queryManager))
		{
			result = queryManager.getAbstractRendering(this.m_type, this.m_protocol);
		}
	}
	return result;
};
oFF.QBindingResultset.prototype.getSession = function()
{
	if (oFF.notNull(this.m_cmds))
	{
		return this.m_cmds.getSession();
	}
	else
	{
		return null;
	}
};
oFF.QBindingResultset.prototype.getString = function()
{
	if (oFF.notNull(this.m_cmds))
	{
		let grid = null;
		let queryManager = this.m_cmds.getQueryManager();
		if (oFF.notNull(queryManager))
		{
			let rs = queryManager.getClassicResultSet();
			grid = oFF.ReferenceGridFactory.createReferenceGridSimple(rs);
		}
		if (oFF.notNull(grid))
		{
			let gridValue = grid.exportToAscii(50);
			this.log(gridValue);
			return gridValue;
		}
	}
	return null;
};
oFF.QBindingResultset.prototype.isSenderValueReady = function()
{
	this.log("isSenderValueReady");
	let isSenderValueReady = false;
	if (oFF.notNull(this.m_cmds))
	{
		let queryManager = this.m_cmds.getQueryManager();
		if (oFF.notNull(queryManager))
		{
			let syncState = queryManager.getResultSetSyncState();
			isSenderValueReady = syncState.isInSync();
		}
	}
	return isSenderValueReady;
};
oFF.QBindingResultset.prototype.onCmdContextChanged = function()
{
	this.log("onCmdContextChanged");
};
oFF.QBindingResultset.prototype.onModelComponentChanged = function(modelComponent, customIdentifier)
{
	this.tryProcessingQueryManager();
};
oFF.QBindingResultset.prototype.onQueryExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	this.m_dataManifest = oFF.DpDataManifestFactory.createByMessages(extResult);
	this.log("onQueryExecuted");
	if (oFF.notNull(this.m_listener))
	{
		this.m_listener.onSenderValueChanged(this, this.m_customIdentifier);
	}
};
oFF.QBindingResultset.prototype.onQueryManagerCreated = function(extResult, queryManager, customIdentifier)
{
	this.log("onQueryManagerCreated");
	this.m_dataManifest = oFF.DpDataManifestFactory.createByMessages(extResult);
	this.tryAttachingToQueryExecution();
};
oFF.QBindingResultset.prototype.processSenderUpdate = function()
{
	this.log("processSenderUpdate");
	if (oFF.notNull(this.m_cmds))
	{
		this.tryAttachingToServiceConfig();
		this.tryProcessingServiceConfig();
		this.tryAttachingToQueryExecution();
		this.tryProcessingQueryManager();
	}
};
oFF.QBindingResultset.prototype.registerValueChangedListener = function(listener, customIdentifier)
{
	this.log("registerValueChangedListener");
	this.m_listener = listener;
	this.m_customIdentifier = customIdentifier;
};
oFF.QBindingResultset.prototype.releaseControl = function()
{
	oFF.QBindingResultset.m_prompting = false;
};
oFF.QBindingResultset.prototype.releaseObject = function()
{
	this.m_cmds = null;
	this.m_listener = null;
	this.m_customIdentifier = null;
	oFF.XObjectExt.prototype.releaseObject.call( this );
};
oFF.QBindingResultset.prototype.setupBind = function(cmds, type, protocol)
{
	this.m_cmds = cmds;
	this.m_type = type;
	this.m_protocol = protocol;
	this.tryAttachingToServiceConfig();
	this.tryAttachingToQueryExecution();
};
oFF.QBindingResultset.prototype.tryAttachingToQueryExecution = function()
{
	this.log("tryAttachingToQueryManager");
	if (oFF.notNull(this.m_cmds))
	{
		if (this.m_isAttachedToServiceConfig && !this.m_isAttachedToQueryManager)
		{
			let queryManager = this.m_cmds.getQueryManager();
			if (oFF.notNull(queryManager))
			{
				this.m_isAttachedToQueryManager = true;
				if (queryManager.getInitSettings().getMode() !== oFF.QueryManagerMode.RAW_QUERY)
				{
					queryManager.getQueryModel().registerChangedListener(this, null);
				}
				queryManager.processQueryExecution(oFF.SyncType.REGISTER, this, null);
				if (this.m_tryProcessingQueryManager)
				{
					this.tryProcessingQueryManager();
				}
			}
		}
	}
};
oFF.QBindingResultset.prototype.tryAttachingToServiceConfig = function()
{
	this.log("tryAttachingToServiceConfig()");
	if (oFF.notNull(this.m_cmds))
	{
		if (!this.m_isAttachedToServiceConfig)
		{
			let serviceConfig = this.m_cmds.getQueryServiceConfig();
			if (oFF.notNull(serviceConfig))
			{
				this.m_isAttachedToServiceConfig = true;
				serviceConfig.processQueryManagerCreation(oFF.SyncType.REGISTER, this, null);
			}
		}
	}
};
oFF.QBindingResultset.prototype.tryProcessingQueryManager = function()
{
	this.log("tryProcessingQueryManager");
	this.m_tryProcessingQueryManager = true;
	if (oFF.notNull(this.m_cmds))
	{
		if (this.m_isAttachedToServiceConfig && this.m_isAttachedToQueryManager)
		{
			let queryManager = this.m_cmds.getQueryManager();
			if (oFF.notNull(queryManager))
			{
				this.m_tryProcessingQueryManager = false;
				this.m_requestCounter++;
				if (queryManager.hasVariables())
				{
					let initSettings = queryManager.getInitSettings();
					let definitionType = initSettings.getDefinitionType();
					let definitionAsStructure = initSettings.getDefinitionAsStructure();
					if (oFF.notNull(definitionType) && oFF.notNull(definitionAsStructure))
					{
						let preparator = oFF.QueryPreparatorFactory.newInstance(definitionType);
						if (oFF.notNull(preparator))
						{
							preparator.prepareAfterMetadataBeforeVariables(queryManager, definitionAsStructure);
						}
					}
				}
				this.log(oFF.XStringBuffer.create().append("Request Counter: ").appendInt(this.m_requestCounter).toString());
				let aExit = this.getSession().getSessionSingletons().getByKey("variable_exit");
				if (queryManager.hasVariables() && oFF.notNull(aExit))
				{
					if (oFF.QBindingResultset.m_prompting)
					{
						return;
					}
					oFF.QBindingResultset.m_prompting = true;
					aExit.replaceVariables(queryManager, this);
				}
				else
				{
					queryManager.processQueryExecution(null, null, null);
				}
			}
		}
	}
};
oFF.QBindingResultset.prototype.tryProcessingServiceConfig = function()
{
	this.log("tryProcessingServiceConfig");
	if (oFF.notNull(this.m_cmds))
	{
		if (this.m_isAttachedToServiceConfig && !this.m_isProcessingServiceConfig)
		{
			let serviceConfig = this.m_cmds.getQueryServiceConfig();
			if (oFF.notNull(serviceConfig))
			{
				this.m_isProcessingServiceConfig = true;
				serviceConfig.processQueryManagerCreation(null, null, null);
			}
		}
	}
};
oFF.QBindingResultset.prototype.unregisterValueChangedListener = function(listener)
{
	this.log("unregisterValueChangedListener");
	this.m_listener = null;
	this.m_customIdentifier = null;
};

oFF.BlendingAttributeMapping = function() {};
oFF.BlendingAttributeMapping.prototype = new oFF.AbstractBlendingMapping();
oFF.BlendingAttributeMapping.prototype._ff_c = "BlendingAttributeMapping";

oFF.BlendingAttributeMapping.create = function(attributeName, isLinkKey, blendingDefinition)
{
	let mapping = new oFF.BlendingAttributeMapping();
	mapping.setupExt(attributeName, isLinkKey, blendingDefinition);
	return mapping;
};
oFF.BlendingAttributeMapping.prototype.m_attributeMappings = null;
oFF.BlendingAttributeMapping.prototype.m_attributeName = null;
oFF.BlendingAttributeMapping.prototype.m_constantMappings = null;
oFF.BlendingAttributeMapping.prototype.m_isLinkKey = false;
oFF.BlendingAttributeMapping.prototype.addAttributeMappingDefinition = function(attributeMappingDefinition)
{
	this.m_attributeMappings.add(attributeMappingDefinition);
};
oFF.BlendingAttributeMapping.prototype.addConstantMapping = function(constantMapping)
{
	this.m_constantMappings.add(constantMapping);
};
oFF.BlendingAttributeMapping.prototype.addNewAttributeDimensionMappingDefinition = function(field, queryAliasName)
{
	let attributeMappingDefinition = this.newAttributeMappingDefinition(field, queryAliasName);
	this.addAttributeMappingDefinition(attributeMappingDefinition);
	return attributeMappingDefinition;
};
oFF.BlendingAttributeMapping.prototype.addNewAttributeDimensionMappingDefinitionByName = function(fieldName, queryAliasName)
{
	let attributeMappingDefinitionByName = this.newAttributeMappingDefinitionByName(fieldName, queryAliasName);
	this.addAttributeMappingDefinition(attributeMappingDefinitionByName);
	return attributeMappingDefinitionByName;
};
oFF.BlendingAttributeMapping.prototype.addNewAttributeDimensionMappingDefinitionByObject = function(field)
{
	let attributeMappingDefinition = this.newAttributeMappingDefinitionByObject(field);
	this.addAttributeMappingDefinition(attributeMappingDefinition);
	return attributeMappingDefinition;
};
oFF.BlendingAttributeMapping.prototype.addNewConstantMapping = function(memberKey, queryAliasName)
{
	let blendingQueryModel = this.getBlendingDefinition().getBlendingSourceByAlias(queryAliasName);
	oFF.XObjectExt.assertNotNullExt(blendingQueryModel, oFF.XStringUtils.concatenate3("No Blending source found for alias '", queryAliasName, "'!"));
	let newConstantMapping = oFF.BlendingConstantMapping.createConstantMapping(memberKey, queryAliasName);
	this.addConstantMapping(newConstantMapping);
	return newConstantMapping;
};
oFF.BlendingAttributeMapping.prototype.cloneExt = function(flags)
{
	return this.cloneMapping();
};
oFF.BlendingAttributeMapping.prototype.cloneMapping = function()
{
	let blendingDefinition = this.getBlendingDefinition();
	let clone = blendingDefinition.newAttributeMapping(this.getAttributeName(), this.isLinkKey());
	let iterator = this.getAttributeMappingDefinitions().getIterator();
	while (iterator.hasNext())
	{
		let mappingDefinition = iterator.next();
		clone.addAttributeMappingDefinition(mappingDefinition.cloneMappingDefinition());
	}
	oFF.XObjectExt.release(iterator);
	let constantMappingIterator = this.getConstantMappings().getIterator();
	while (constantMappingIterator.hasNext())
	{
		let constantMapping = constantMappingIterator.next();
		clone.addConstantMapping(constantMapping.cloneMappingDefinition());
	}
	oFF.XObjectExt.release(constantMappingIterator);
	return clone;
};
oFF.BlendingAttributeMapping.prototype.getAttributeMappingDefinitions = function()
{
	return this.m_attributeMappings;
};
oFF.BlendingAttributeMapping.prototype.getAttributeName = function()
{
	return this.m_attributeName;
};
oFF.BlendingAttributeMapping.prototype.getConstantMappings = function()
{
	return this.m_constantMappings;
};
oFF.BlendingAttributeMapping.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let otherGeneral = other;
	if (this.getMappingDefinitionType() !== otherGeneral.getMappingDefinitionType())
	{
		return false;
	}
	let xOther = other;
	if (!oFF.XString.isEqual(this.getAttributeName(), xOther.getAttributeName()))
	{
		return false;
	}
	if (this.isLinkKey() !== xOther.isLinkKey())
	{
		return false;
	}
	if (!this.getAttributeMappingDefinitions().isEqualTo(xOther.getAttributeMappingDefinitions()))
	{
		return false;
	}
	return true;
};
oFF.BlendingAttributeMapping.prototype.isLinkKey = function()
{
	return this.m_isLinkKey;
};
oFF.BlendingAttributeMapping.prototype.newAttributeMappingDefinition = function(field, queryAliasName)
{
	oFF.BlendingValidation.isFieldValidForBlending(field, null, true);
	return oFF.BlendingMappingDefinition.createAttributeMapping(field.getName(), queryAliasName);
};
oFF.BlendingAttributeMapping.prototype.newAttributeMappingDefinitionByName = function(fieldName, queryAliasName)
{
	let blendingQueryModel = this.getBlendingDefinition().getBlendingSourceByAlias(queryAliasName);
	oFF.XObjectExt.assertNotNullExt(blendingQueryModel, oFF.XStringUtils.concatenate3("No Blending source found for alias '", queryAliasName, "'!"));
	let fieldByName = blendingQueryModel.getFieldByName(fieldName);
	return this.newAttributeMappingDefinition(fieldByName, queryAliasName);
};
oFF.BlendingAttributeMapping.prototype.newAttributeMappingDefinitionByObject = function(field)
{
	let queryAliasName = this.getBlendingDefinition().getBlendingAliasByQueryModel(field.getContext().getQueryModel());
	return this.newAttributeMappingDefinition(field, queryAliasName);
};
oFF.BlendingAttributeMapping.prototype.releaseObject = function()
{
	this.m_attributeMappings = oFF.XObjectExt.release(this.m_attributeMappings);
	this.m_constantMappings = oFF.XObjectExt.release(this.m_constantMappings);
	this.m_attributeName = null;
	oFF.AbstractBlendingMapping.prototype.releaseObject.call( this );
};
oFF.BlendingAttributeMapping.prototype.removeAttributeMappingDefinitionAt = function(indexToRemove)
{
	this.m_attributeMappings.removeAt(indexToRemove);
};
oFF.BlendingAttributeMapping.prototype.setAttributeName = function(attributeName)
{
	this.m_attributeName = attributeName;
};
oFF.BlendingAttributeMapping.prototype.setIsLinkKey = function(isLinkKey)
{
	this.m_isLinkKey = isLinkKey;
};
oFF.BlendingAttributeMapping.prototype.setupExt = function(attributeName, isLinkKey, blendingDefinition)
{
	oFF.XStringUtils.checkStringNotEmpty(attributeName, "The attribute name must not be null!");
	oFF.XObjectExt.assertNotNullExt(blendingDefinition, "Blending definition must not be null!");
	this.m_attributeMappings = oFF.XList.create();
	this.m_constantMappings = oFF.XList.create();
	this.m_attributeName = attributeName;
	this.m_isLinkKey = isLinkKey;
	oFF.AbstractBlendingMapping.prototype.setupAbstractMapping.call( this , oFF.BlendingMappingDefinitionType.ATTRIBUTE, blendingDefinition);
};

oFF.BlendingConstantMapping = function() {};
oFF.BlendingConstantMapping.prototype = new oFF.AbstractBlendingMapping();
oFF.BlendingConstantMapping.prototype._ff_c = "BlendingConstantMapping";

oFF.BlendingConstantMapping.createConstantMapping = function(memberKey, queryAliasName)
{
	let constantMappingDefinition = new oFF.BlendingConstantMapping();
	constantMappingDefinition.setupExt(queryAliasName, memberKey, oFF.BlendingMappingDefinitionType.CONSTANT);
	return constantMappingDefinition;
};
oFF.BlendingConstantMapping.prototype.m_memberKey = null;
oFF.BlendingConstantMapping.prototype.m_queryAliasName = null;
oFF.BlendingConstantMapping.prototype.m_valueType = null;
oFF.BlendingConstantMapping.prototype.cloneExt = function(flags)
{
	return this.cloneMappingDefinition();
};
oFF.BlendingConstantMapping.prototype.cloneMappingDefinition = function()
{
	return oFF.BlendingConstantMapping.createConstantMapping(this.getMemberName(), this.getQueryAliasName());
};
oFF.BlendingConstantMapping.prototype.getMemberName = function()
{
	return this.m_memberKey;
};
oFF.BlendingConstantMapping.prototype.getQueryAliasName = function()
{
	return this.m_queryAliasName;
};
oFF.BlendingConstantMapping.prototype.getValueType = function()
{
	return this.m_valueType;
};
oFF.BlendingConstantMapping.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let otherGeneral = other;
	if (this.getMappingDefinitionType() !== otherGeneral.getMappingDefinitionType())
	{
		return false;
	}
	let xOther = other;
	if (!oFF.XString.isEqual(this.getMemberName(), xOther.getMemberName()))
	{
		return false;
	}
	if (!oFF.XString.isEqual(this.getQueryAliasName(), xOther.getQueryAliasName()))
	{
		return false;
	}
	if (this.getValueType() !== xOther.getValueType())
	{
		return false;
	}
	return true;
};
oFF.BlendingConstantMapping.prototype.releaseObject = function()
{
	this.m_queryAliasName = null;
	this.m_valueType = null;
	this.m_memberKey = null;
	oFF.AbstractBlendingMapping.prototype.releaseObject.call( this );
};
oFF.BlendingConstantMapping.prototype.setupExt = function(queryAliasName, memberKey, mappingType)
{
	oFF.XStringUtils.checkStringNotEmpty(queryAliasName, "Query Alias name is null!");
	oFF.AbstractBlendingMapping.prototype.setupAbstractMapping.call( this , mappingType, null);
	this.m_queryAliasName = queryAliasName;
	this.m_memberKey = memberKey;
	this.m_valueType = oFF.XValueType.STRING;
};
oFF.BlendingConstantMapping.prototype.toString = function()
{
	let sb = oFF.XStringBuffer.create();
	sb.append(this.m_queryAliasName).append(".");
	sb.append(this.m_memberKey);
	sb.append("(").append(this.getMappingDefinitionType().getName()).append(")");
	return sb.toString();
};

oFF.BlendingDefinition = function() {};
oFF.BlendingDefinition.prototype = new oFF.XObject();
oFF.BlendingDefinition.prototype._ff_c = "BlendingDefinition";

oFF.BlendingDefinition.create = function()
{
	let blending = new oFF.BlendingDefinition();
	blending.m_mappings = oFF.XLinkedHashMapByString.create();
	blending.m_sources = oFF.XLinkedHashMapByString.create();
	blending.m_blendingHostManager = oFF.BlendingHostManager.create(blending);
	return blending;
};
oFF.BlendingDefinition.prototype.m_blendingHostManager = null;
oFF.BlendingDefinition.prototype.m_mappings = null;
oFF.BlendingDefinition.prototype.m_sources = null;
oFF.BlendingDefinition.prototype.addMapping = function(mapping)
{
	oFF.XObjectExt.assertNotNullExt(mapping, "Mapping is null");
	this.m_mappings.put(mapping.getMemberName(), mapping);
	return this;
};
oFF.BlendingDefinition.prototype.addNewDimensionMapping = function(linkType, aliasName)
{
	let dimensionMapping = this.newDimensionMapping(linkType, aliasName);
	this.addMapping(dimensionMapping);
	return dimensionMapping;
};
oFF.BlendingDefinition.prototype.addNewSource = function(queryModel, queryAliasName)
{
	let newSource = this.newSource(queryModel, queryAliasName);
	this.addSource(newSource);
	return newSource;
};
oFF.BlendingDefinition.prototype.addSingleMemberFilterByDimensionNameToSourceQueryByAlias = function(sourceQueryAlias, sourceDimensionName, sourceMemberName, comparisonOperator)
{
	let sourceQuery = this.getBlendingSourceByAlias(sourceQueryAlias);
	oFF.XObjectExt.assertNotNullExt(sourceQuery, oFF.XStringUtils.concatenate3("No Source Query for Alias '", sourceQueryAlias, "' was found!"));
	let addSingleMemberFilterByDimensionName = sourceQuery.getConvenienceCommands().addSingleMemberFilterByDimensionName(sourceDimensionName, sourceMemberName, comparisonOperator);
	return addSingleMemberFilterByDimensionName;
};
oFF.BlendingDefinition.prototype.addSource = function(source)
{
	oFF.XObjectExt.assertNotNullExt(source, "Source is null");
	let queryModel = source.getQueryModel();
	let capabilities = queryModel.getModelCapabilities();
	oFF.XBooleanUtils.checkTrue(capabilities.supportsCubeBlending(), "The backend is not capable of blending!");
	if (!capabilities.supportsCubeBlendingWithNSubqueries() && this.m_sources.size() >= oFF.BlendingCapabilities.getMaxNumberOfBlendingQueries())
	{
		throw oFF.XException.createRuntimeException("Currently only 2 sources are allowed");
	}
	if (this.m_sources.containsKey(source.getQueryAliasName()))
	{
		throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate3("The query alias '", source.getQueryAliasName(), "' is not unique!"));
	}
	oFF.BlendingValidation.isQueryModelValidForBlending(queryModel, null);
	this.m_sources.put(source.getQueryAliasName(), source);
	return this;
};
oFF.BlendingDefinition.prototype.cloneBlendingDefinition = function()
{
	return this.cloneExt(null);
};
oFF.BlendingDefinition.prototype.cloneExt = function(flags)
{
	let clone = oFF.BlendingDefinition.create();
	clone.copyFrom(this, flags);
	return clone;
};
oFF.BlendingDefinition.prototype.copyFrom = function(other, flags)
{
	oFF.XObject.prototype.copyFrom.call( this , other, flags);
	let otherObject = other;
	let blendingHost = otherObject.getBlendingHost();
	let sourceIterator = otherObject.getSources().getIterator();
	while (sourceIterator.hasNext())
	{
		let source = sourceIterator.next();
		let sourceClone = source.cloneExt(flags);
		this.addSource(sourceClone);
		if (oFF.notNull(blendingHost) && source === blendingHost.getSource())
		{
			this.setSourceAsBlendingHost(sourceClone);
		}
	}
	oFF.XObjectExt.release(sourceIterator);
	let mappingIterator = otherObject.getMappings().getIterator();
	while (mappingIterator.hasNext())
	{
		let mapping = mappingIterator.next();
		let cloneMapping = mapping.cloneExt(flags);
		cloneMapping.setBlendingDefinition(this);
		this.addMapping(cloneMapping);
	}
	oFF.XObjectExt.release(mappingIterator);
};
oFF.BlendingDefinition.prototype.getBlendingAliasByQueryModel = function(queryModel)
{
	if (oFF.isNull(queryModel))
	{
		return null;
	}
	let sourceIterator = this.getSources().getIterator();
	while (sourceIterator.hasNext())
	{
		let blendingSource = sourceIterator.next();
		if (blendingSource.getQueryModel() === queryModel)
		{
			oFF.XObjectExt.release(sourceIterator);
			return blendingSource.getQueryAliasName();
		}
	}
	oFF.XObjectExt.release(sourceIterator);
	return null;
};
oFF.BlendingDefinition.prototype.getBlendingHost = function()
{
	return this.m_blendingHostManager.getBlendingHost();
};
oFF.BlendingDefinition.prototype.getBlendingSourceByAlias = function(queryAliasName)
{
	let blendingSource = this.m_sources.getByKey(queryAliasName);
	if (oFF.isNull(blendingSource))
	{
		return null;
	}
	return blendingSource.getQueryModel();
};
oFF.BlendingDefinition.prototype.getMappingByAliasName = function(aliasName)
{
	return this.m_mappings.getByKey(aliasName);
};
oFF.BlendingDefinition.prototype.getMappings = function()
{
	return this.m_mappings.getValuesAsReadOnlyList();
};
oFF.BlendingDefinition.prototype.getSources = function()
{
	return this.m_sources.getValuesAsReadOnlyList();
};
oFF.BlendingDefinition.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let xOther = other;
	if (!this.getMappings().isEqualTo(xOther.getMappings()))
	{
		return false;
	}
	if (!this.getSources().isEqualTo(xOther.getSources()))
	{
		return false;
	}
	if (!(this.getBlendingHost() === null && xOther.getBlendingHost() === null) && this.getBlendingHost() !== null && xOther.getBlendingHost() !== null && !this.getBlendingHost().isEqualTo(xOther.getBlendingHost()))
	{
		return false;
	}
	return true;
};
oFF.BlendingDefinition.prototype.isRemoteBlending = function()
{
	let blendingHost = this.getBlendingHost();
	let blendingHostSystemName = blendingHost.getSystemName();
	let iterator = this.m_sources.getIterator();
	while (iterator.hasNext())
	{
		let queryModel = iterator.next().getQueryModel();
		let systemName = queryModel.getQueryManager().getSystemName();
		if (!oFF.XString.isEqual(blendingHostSystemName, systemName))
		{
			return true;
		}
	}
	return false;
};
oFF.BlendingDefinition.prototype.newAttributeMapping = function(attributeName, isLinkKey)
{
	return oFF.BlendingAttributeMapping.create(attributeName, isLinkKey, this);
};
oFF.BlendingDefinition.prototype.newDimensionMapping = function(linkType, aliasName)
{
	oFF.XStringUtils.checkStringNotEmpty(aliasName, "The member alias must not be empty or null!");
	let dimensionMapping = this.newMapping(linkType);
	dimensionMapping.setMemberName(aliasName);
	return dimensionMapping;
};
oFF.BlendingDefinition.prototype.newMapping = function(linkType)
{
	return oFF.BlendingMapping.create(linkType, this);
};
oFF.BlendingDefinition.prototype.newSource = function(queryModel, queryAliasName)
{
	oFF.XStringUtils.checkStringNotEmpty(queryAliasName, "The query alias must not be empty or null!");
	oFF.BlendingValidation.isQueryModelValidForBlending(queryModel, null);
	return oFF.BlendingSource.create(queryModel, queryAliasName);
};
oFF.BlendingDefinition.prototype.releaseObject = function()
{
	this.m_mappings = oFF.XObjectExt.release(this.m_mappings);
	this.m_sources = oFF.XObjectExt.release(this.m_sources);
	this.m_blendingHostManager = oFF.XObjectExt.release(this.m_blendingHostManager);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.BlendingDefinition.prototype.removeMappingByName = function(memberAliasName)
{
	this.m_mappings.remove(memberAliasName);
	return this;
};
oFF.BlendingDefinition.prototype.removeSourceByName = function(queryAliasName)
{
	let source = this.m_sources.getByKey(queryAliasName);
	this.m_sources.remove(queryAliasName);
	let blendingHost = this.getBlendingHost();
	if (oFF.notNull(blendingHost) && blendingHost.getSource() === source)
	{
		this.setBlendingHost(null);
	}
	return this;
};
oFF.BlendingDefinition.prototype.setBlendingHost = function(blendingHost)
{
	this.m_blendingHostManager.setBlendingHost(blendingHost);
};
oFF.BlendingDefinition.prototype.setSourceAsBlendingHost = function(source)
{
	this.m_blendingHostManager.setSourceAsBlendingHost(source);
};

oFF.BlendingMapping = function() {};
oFF.BlendingMapping.prototype = new oFF.AbstractBlendingMapping();
oFF.BlendingMapping.prototype._ff_c = "BlendingMapping";

oFF.BlendingMapping.create = function(linkType, blendingDefinition)
{
	oFF.XObjectExt.assertNotNullExt(linkType, "Blending link type is null");
	oFF.XObjectExt.assertNotNullExt(blendingDefinition, "Blending definition is null");
	let mapping = new oFF.BlendingMapping();
	mapping.setupExt(linkType, blendingDefinition);
	return mapping;
};
oFF.BlendingMapping.prototype.m_attributeMappings = null;
oFF.BlendingMapping.prototype.m_constantMappings = null;
oFF.BlendingMapping.prototype.m_dimensionMappingDefinitions = null;
oFF.BlendingMapping.prototype.m_isPreservingMembers = false;
oFF.BlendingMapping.prototype.m_isReturningOriginKeys = false;
oFF.BlendingMapping.prototype.m_linkType = null;
oFF.BlendingMapping.prototype.m_memberName = null;
oFF.BlendingMapping.prototype.addAttributeMapping = function(attributeMapping)
{
	this.m_attributeMappings.add(attributeMapping);
};
oFF.BlendingMapping.prototype.addConstantMapping = function(constantMapping)
{
	this.m_constantMappings.add(constantMapping);
};
oFF.BlendingMapping.prototype.addMappingDefinition = function(mappingDefinition)
{
	oFF.XObjectExt.assertNotNullExt(mappingDefinition, "Mapping definition is null");
	if (this.getBlendingDefinition() !== null)
	{
		if (this.m_dimensionMappingDefinitions.size() >= this.getBlendingDefinition().getSources().size())
		{
			throw oFF.XException.createIllegalArgumentException("Cannot add more dimension mappings than blending sources");
		}
	}
	this.m_dimensionMappingDefinitions.add(mappingDefinition);
	return this;
};
oFF.BlendingMapping.prototype.addNewAttributeMappingByName = function(attributeName, isLinkKey)
{
	let attributeMapping = this.newAttributeMappingByName(attributeName, isLinkKey);
	this.addAttributeMapping(attributeMapping);
	return attributeMapping;
};
oFF.BlendingMapping.prototype.addNewConstantMapping = function(memberKey, queryAliasName)
{
	let newConstantMapping = this.newConstantMapping(memberKey, queryAliasName);
	this.addConstantMapping(newConstantMapping);
	return newConstantMapping;
};
oFF.BlendingMapping.prototype.addNewDimensionMappingDefinition = function(dimension, queryAliasName)
{
	let dimensionBlendingMappingDefinition = this.newDimensionMappingDefinition(dimension, queryAliasName);
	this.addMappingDefinition(dimensionBlendingMappingDefinition);
	return dimensionBlendingMappingDefinition;
};
oFF.BlendingMapping.prototype.addNewDimensionMappingDefinitionByName = function(dimensionName, queryAliasName)
{
	let dimensionMappingDefinition = this.newDimensionMappingDefinitionByName(dimensionName, queryAliasName);
	this.addMappingDefinition(dimensionMappingDefinition);
	return dimensionMappingDefinition;
};
oFF.BlendingMapping.prototype.addNewDimensionMappingDefinitionByObject = function(dimension)
{
	let dimensionMappingDefinition = this.newDimensionMappingDefinitionByObject(dimension);
	this.addMappingDefinition(dimensionMappingDefinition);
	return dimensionMappingDefinition;
};
oFF.BlendingMapping.prototype.cloneExt = function(flags)
{
	let newObj = new oFF.BlendingMapping();
	newObj.copyFrom(this, flags);
	return newObj;
};
oFF.BlendingMapping.prototype.cloneMapping = function()
{
	return this.cloneExt(null);
};
oFF.BlendingMapping.prototype.copyFrom = function(other, flags)
{
	oFF.AbstractBlendingMapping.prototype.copyFrom.call( this , other, flags);
	let otherMapping = other;
	this.m_linkType = otherMapping.getLinkType();
	this.m_memberName = otherMapping.getMemberName();
	this.m_isPreservingMembers = otherMapping.isPreservingMembers();
	this.m_isReturningOriginKeys = otherMapping.isReturningOriginKeys();
	this.m_dimensionMappingDefinitions = oFF.XList.create();
	this.m_attributeMappings = oFF.XList.create();
	this.m_constantMappings = oFF.XList.create();
	let definitionIterator = otherMapping.getMappingDefinitions().getIterator();
	while (definitionIterator.hasNext())
	{
		let definition = definitionIterator.next();
		let cloneDef = definition.cloneMappingDefinition();
		this.addMappingDefinition(cloneDef);
	}
	let attributeMappingIterator = otherMapping.getAttributeMappings().getIterator();
	while (attributeMappingIterator.hasNext())
	{
		let attributeMapping = attributeMappingIterator.next();
		let cloneAttributeMapping = attributeMapping.clone();
		this.addAttributeMapping(cloneAttributeMapping);
	}
	let constantMappingIterator = otherMapping.getConstantMappings().getIterator();
	while (constantMappingIterator.hasNext())
	{
		let constantMapping = constantMappingIterator.next();
		let cloneConstantMapping = constantMapping.cloneMappingDefinition();
		this.addConstantMapping(cloneConstantMapping);
	}
};
oFF.BlendingMapping.prototype.getAttributeMappings = function()
{
	return this.m_attributeMappings;
};
oFF.BlendingMapping.prototype.getConstantMappings = function()
{
	return this.m_constantMappings;
};
oFF.BlendingMapping.prototype.getLinkType = function()
{
	return this.m_linkType;
};
oFF.BlendingMapping.prototype.getMappingDefinitions = function()
{
	return this.m_dimensionMappingDefinitions;
};
oFF.BlendingMapping.prototype.getMemberName = function()
{
	return this.m_memberName;
};
oFF.BlendingMapping.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let otherGeneral = other;
	if (this.getMappingDefinitionType() !== otherGeneral.getMappingDefinitionType())
	{
		return false;
	}
	let xOther = other;
	if (!oFF.XString.isEqual(this.getMemberName(), xOther.getMemberName()))
	{
		return false;
	}
	if (!this.getMappingDefinitions().isEqualTo(xOther.getMappingDefinitions()))
	{
		return false;
	}
	if (!this.getConstantMappings().isEqualTo(xOther.getConstantMappings()))
	{
		return false;
	}
	if (!this.getAttributeMappings().isEqualTo(xOther.getAttributeMappings()))
	{
		return false;
	}
	if (this.getLinkType() !== xOther.getLinkType())
	{
		return false;
	}
	if (this.isPreservingMembers() !== xOther.isPreservingMembers())
	{
		return false;
	}
	if (this.isReturningOriginKeys() !== xOther.isReturningOriginKeys())
	{
		return false;
	}
	return true;
};
oFF.BlendingMapping.prototype.isPreservingMembers = function()
{
	return this.m_isPreservingMembers;
};
oFF.BlendingMapping.prototype.isReturningOriginKeys = function()
{
	return this.m_isReturningOriginKeys;
};
oFF.BlendingMapping.prototype.newAttributeMappingByName = function(attributeName, isLinkKey)
{
	oFF.XStringUtils.checkStringNotEmpty(attributeName, "The attribute name must not be empty!");
	let blendingDefinition = this.getBlendingDefinition();
	return blendingDefinition.newAttributeMapping(attributeName, isLinkKey);
};
oFF.BlendingMapping.prototype.newConstantMapping = function(memberKey, queryAliasName)
{
	let blendingQueryModel = this.getBlendingDefinition().getBlendingSourceByAlias(queryAliasName);
	oFF.XObjectExt.assertNotNullExt(blendingQueryModel, oFF.XStringUtils.concatenate3("No Blending source found for alias '", queryAliasName, "'!"));
	return oFF.BlendingConstantMapping.createConstantMapping(memberKey, queryAliasName);
};
oFF.BlendingMapping.prototype.newDimensionMappingDefinition = function(dimension, queryAliasName)
{
	oFF.XObjectExt.assertNotNullExt(dimension, "The dimension must not be null!");
	oFF.XStringUtils.checkStringNotEmpty(queryAliasName, "The query alias name must not be null or empty!");
	oFF.BlendingValidation.isDimensionValidForBlending(dimension, null, false);
	return oFF.BlendingMappingDefinition.createDimensionMapping(dimension.getName(), queryAliasName);
};
oFF.BlendingMapping.prototype.newDimensionMappingDefinitionByName = function(dimensionName, queryAliasName)
{
	let blendingQueryModel = this.getBlendingDefinition().getBlendingSourceByAlias(queryAliasName);
	oFF.XObjectExt.assertNotNullExt(blendingQueryModel, oFF.XStringUtils.concatenate3("No Blending source found for alias '", queryAliasName, "'!"));
	let dimension = blendingQueryModel.getDimensionByName(dimensionName);
	return this.newDimensionMappingDefinition(dimension, queryAliasName);
};
oFF.BlendingMapping.prototype.newDimensionMappingDefinitionByObject = function(dimension)
{
	oFF.XObjectExt.assertNotNullExt(dimension, "The dimension must not be null!");
	let queryAliasName = this.getBlendingDefinition().getBlendingAliasByQueryModel(dimension.getQueryModel());
	return this.newDimensionMappingDefinition(dimension, queryAliasName);
};
oFF.BlendingMapping.prototype.releaseObject = function()
{
	this.m_dimensionMappingDefinitions = oFF.XObjectExt.release(this.m_dimensionMappingDefinitions);
	this.m_attributeMappings = oFF.XObjectExt.release(this.m_attributeMappings);
	this.m_constantMappings = oFF.XObjectExt.release(this.m_constantMappings);
	this.m_linkType = null;
	this.m_memberName = null;
	oFF.AbstractBlendingMapping.prototype.releaseObject.call( this );
};
oFF.BlendingMapping.prototype.removeAttributeMappingAt = function(indexToRemove)
{
	this.m_attributeMappings.removeAt(indexToRemove);
};
oFF.BlendingMapping.prototype.removeMappingDefinitionAt = function(indexToRemove)
{
	this.m_dimensionMappingDefinitions.removeAt(indexToRemove);
	return this;
};
oFF.BlendingMapping.prototype.setIsPreservingMembers = function(isPreserving)
{
	if (this.m_isPreservingMembers !== isPreserving)
	{
		this.m_isPreservingMembers = isPreserving;
	}
};
oFF.BlendingMapping.prototype.setIsReturningOriginKeys = function(isReturningOriginKeys)
{
	if (this.m_isReturningOriginKeys !== isReturningOriginKeys)
	{
		this.m_isReturningOriginKeys = isReturningOriginKeys;
	}
};
oFF.BlendingMapping.prototype.setLinkType = function(linkType)
{
	this.m_linkType = linkType;
};
oFF.BlendingMapping.prototype.setMemberName = function(memberName)
{
	if (!oFF.XString.isEqual(this.m_memberName, memberName))
	{
		this.m_memberName = memberName;
	}
};
oFF.BlendingMapping.prototype.setupExt = function(linkType, blendingDefinition)
{
	oFF.AbstractBlendingMapping.prototype.setupAbstractMapping.call( this , oFF.BlendingMappingDefinitionType.DIMENSION, blendingDefinition);
	this.m_linkType = linkType;
	this.m_dimensionMappingDefinitions = oFF.XList.create();
	this.m_attributeMappings = oFF.XList.create();
	this.m_constantMappings = oFF.XList.create();
	this.m_isPreservingMembers = false;
	this.m_isReturningOriginKeys = true;
};
oFF.BlendingMapping.prototype.toString = function()
{
	let sb = oFF.XStringBuffer.create();
	if (oFF.notNull(this.m_dimensionMappingDefinitions))
	{
		sb.append(this.m_dimensionMappingDefinitions.toString());
	}
	sb.append("\n\tLinked with: ").append(this.m_linkType.getName());
	sb.append("\n\tDefinition Type: ").append(this.getMappingDefinitionType().getName());
	sb.append("\n\tMember Alias: ").append(this.m_memberName);
	if (this.m_linkType === oFF.BlendingLinkType.NONE)
	{
		sb.append("\n\tIs Preserving Members: ");
		sb.appendBoolean(this.m_isPreservingMembers);
		sb.append("\n\tIs Returning Folding Keys:");
		sb.appendBoolean(this.m_isReturningOriginKeys);
	}
	return sb.toString();
};

oFF.BlendingMappingDefinition = function() {};
oFF.BlendingMappingDefinition.prototype = new oFF.AbstractBlendingMapping();
oFF.BlendingMappingDefinition.prototype._ff_c = "BlendingMappingDefinition";

oFF.BlendingMappingDefinition.createAttributeMapping = function(attributeName, queryAliasName)
{
	let dimensionMappingDefinition = new oFF.BlendingMappingDefinition();
	dimensionMappingDefinition.setupExt(queryAliasName, attributeName, oFF.BlendingMappingDefinitionType.ATTRIBUTE);
	return dimensionMappingDefinition;
};
oFF.BlendingMappingDefinition.createConstantMapping = function(memberKey, queryAliasName)
{
	let dimensionMappingDefinition = new oFF.BlendingMappingDefinition();
	dimensionMappingDefinition.setupExt(queryAliasName, memberKey, oFF.BlendingMappingDefinitionType.CONSTANT);
	return dimensionMappingDefinition;
};
oFF.BlendingMappingDefinition.createDimensionMapping = function(dimensionName, queryAliasName)
{
	let dimensionMappingDefinition = new oFF.BlendingMappingDefinition();
	dimensionMappingDefinition.setupExt(queryAliasName, dimensionName, oFF.BlendingMappingDefinitionType.DIMENSION);
	return dimensionMappingDefinition;
};
oFF.BlendingMappingDefinition.prototype.m_memberName = null;
oFF.BlendingMappingDefinition.prototype.m_queryAliasName = null;
oFF.BlendingMappingDefinition.prototype.cloneExt = function(flags)
{
	return this.cloneMappingDefinition();
};
oFF.BlendingMappingDefinition.prototype.cloneMappingDefinition = function()
{
	if (this.getMappingDefinitionType() === oFF.BlendingMappingDefinitionType.ATTRIBUTE)
	{
		return oFF.BlendingMappingDefinition.createAttributeMapping(this.getMemberName(), this.getQueryAliasName());
	}
	if (this.getMappingDefinitionType() === oFF.BlendingMappingDefinitionType.CONSTANT)
	{
		return oFF.BlendingMappingDefinition.createConstantMapping(this.getMemberName(), this.getQueryAliasName());
	}
	return oFF.BlendingMappingDefinition.createDimensionMapping(this.getMemberName(), this.getQueryAliasName());
};
oFF.BlendingMappingDefinition.prototype.getMemberName = function()
{
	return this.m_memberName;
};
oFF.BlendingMappingDefinition.prototype.getQueryAliasName = function()
{
	return this.m_queryAliasName;
};
oFF.BlendingMappingDefinition.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let otherGeneral = other;
	if (this.getMappingDefinitionType() !== otherGeneral.getMappingDefinitionType())
	{
		return false;
	}
	let xOther = other;
	if (!oFF.XString.isEqual(this.getMemberName(), xOther.getMemberName()))
	{
		return false;
	}
	if (!oFF.XString.isEqual(this.getQueryAliasName(), xOther.getQueryAliasName()))
	{
		return false;
	}
	return true;
};
oFF.BlendingMappingDefinition.prototype.releaseObject = function()
{
	this.m_queryAliasName = null;
	this.m_memberName = null;
	oFF.AbstractBlendingMapping.prototype.releaseObject.call( this );
};
oFF.BlendingMappingDefinition.prototype.setupExt = function(queryAliasName, memberName, mappingType)
{
	oFF.XStringUtils.checkStringNotEmpty(queryAliasName, "Query alias name is null");
	oFF.XStringUtils.checkStringNotEmpty(memberName, "Member name is null");
	oFF.AbstractBlendingMapping.prototype.setupAbstractMapping.call( this , mappingType, null);
	this.m_queryAliasName = queryAliasName;
	this.m_memberName = memberName;
};
oFF.BlendingMappingDefinition.prototype.toString = function()
{
	let sb = oFF.XStringBuffer.create();
	sb.append(this.m_queryAliasName).append(".");
	sb.append(this.m_memberName);
	sb.append("(").append(this.getMappingDefinitionType().getName()).append(")");
	return sb.toString();
};

oFF.BlendingProcessConfig = function() {};
oFF.BlendingProcessConfig.prototype = new oFF.XObjectExt();
oFF.BlendingProcessConfig.prototype._ff_c = "BlendingProcessConfig";

oFF.BlendingProcessConfig.create = function(primaryQueryManager, secondaryQueryManager, modelDimensionLinks, queryModelLinkSettings)
{
	let config = new oFF.BlendingProcessConfig();
	config.m_primaryQueryManager = primaryQueryManager;
	config.m_secondaryQueryManager = secondaryQueryManager;
	config.m_modelDimensionLinks = modelDimensionLinks;
	config.m_queryModelLinkSettings = queryModelLinkSettings;
	return config;
};
oFF.BlendingProcessConfig.prototype.m_modelDimensionLinks = null;
oFF.BlendingProcessConfig.prototype.m_primaryQueryManager = null;
oFF.BlendingProcessConfig.prototype.m_queryModelLinkSettings = null;
oFF.BlendingProcessConfig.prototype.m_secondaryQueryManager = null;
oFF.BlendingProcessConfig.prototype.getModelDimensionLinks = function()
{
	return this.m_modelDimensionLinks;
};
oFF.BlendingProcessConfig.prototype.getPrimaryQueryManager = function()
{
	return this.m_primaryQueryManager;
};
oFF.BlendingProcessConfig.prototype.getQueryModelLinkSettings = function()
{
	return this.m_queryModelLinkSettings;
};
oFF.BlendingProcessConfig.prototype.getSecondaryQueryManager = function()
{
	return this.m_secondaryQueryManager;
};
oFF.BlendingProcessConfig.prototype.releaseObject = function()
{
	this.m_primaryQueryManager = null;
	this.m_secondaryQueryManager = null;
	this.m_modelDimensionLinks = null;
	this.m_queryModelLinkSettings = oFF.XObjectExt.release(this.m_queryModelLinkSettings);
};
oFF.BlendingProcessConfig.prototype.setFirstQueryManager = function(queryManager)
{
	this.m_primaryQueryManager = queryManager;
};

oFF.QCmdBindResultset = function() {};
oFF.QCmdBindResultset.prototype = new oFF.XObjectExt();
oFF.QCmdBindResultset.prototype._ff_c = "QCmdBindResultset";

oFF.QCmdBindResultset.create = function(cmds, type, protocol)
{
	let newObj = new oFF.QCmdBindResultset();
	newObj.setupBind(cmds, type, protocol);
	return newObj;
};
oFF.QCmdBindResultset.prototype.m_cmds = null;
oFF.QCmdBindResultset.prototype.m_customIdentifier = null;
oFF.QCmdBindResultset.prototype.m_dataManifest = null;
oFF.QCmdBindResultset.prototype.m_isAttachedToQueryManager = false;
oFF.QCmdBindResultset.prototype.m_isAttachedToServiceConfig = false;
oFF.QCmdBindResultset.prototype.m_isProcessingServiceConfig = false;
oFF.QCmdBindResultset.prototype.m_listener = null;
oFF.QCmdBindResultset.prototype.m_protocol = null;
oFF.QCmdBindResultset.prototype.m_requestCounter = 0;
oFF.QCmdBindResultset.prototype.m_tryProcessingQueryManager = false;
oFF.QCmdBindResultset.prototype.m_type = null;
oFF.QCmdBindResultset.prototype.getComponentType = function()
{
	return oFF.IoComponentType.BINDING_SENDER;
};
oFF.QCmdBindResultset.prototype.getDataManifest = function()
{
	return this.m_dataManifest;
};
oFF.QCmdBindResultset.prototype.getElement = function()
{
	return oFF.isNull(this.m_cmds) ? null : this.m_cmds.getAbstractRendering(this.m_type, this.m_protocol);
};
oFF.QCmdBindResultset.prototype.getLogWriter = function()
{
	let session = this.getSession();
	if (oFF.notNull(session))
	{
		return session.getLogWriter();
	}
	else
	{
		return null;
	}
};
oFF.QCmdBindResultset.prototype.getSession = function()
{
	if (oFF.notNull(this.m_cmds))
	{
		return this.m_cmds.getSession();
	}
	else
	{
		return null;
	}
};
oFF.QCmdBindResultset.prototype.getString = function()
{
	if (oFF.notNull(this.m_cmds))
	{
		let grid = this.m_cmds.getReferenceGrid(false);
		if (oFF.notNull(grid))
		{
			let gridValue = grid.exportToAscii(50);
			this.log(gridValue);
			return gridValue;
		}
	}
	return null;
};
oFF.QCmdBindResultset.prototype.isSenderValueReady = function()
{
	this.log("isSenderValueReady");
	let isSenderValueReady = false;
	if (oFF.notNull(this.m_cmds))
	{
		let queryManager = this.m_cmds.getQueryManager();
		if (oFF.notNull(queryManager))
		{
			let syncState = queryManager.getResultSetSyncState();
			isSenderValueReady = syncState.isInSync();
		}
	}
	return isSenderValueReady;
};
oFF.QCmdBindResultset.prototype.onCmdContextChanged = function()
{
	this.log("onCmdContextChanged");
};
oFF.QCmdBindResultset.prototype.onModelComponentChanged = function(modelComponent, customIdentifier)
{
	this.tryProcessingQueryManager();
};
oFF.QCmdBindResultset.prototype.onQueryExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	this.m_dataManifest = oFF.DpDataManifestFactory.createByMessages(extResult);
	this.log("onQueryExecuted");
	if (oFF.notNull(this.m_listener))
	{
		this.m_listener.onSenderValueChanged(this, this.m_customIdentifier);
	}
};
oFF.QCmdBindResultset.prototype.onQueryManagerCreated = function(extResult, queryManager, customIdentifier)
{
	this.log("onQueryManagerCreated");
	this.m_dataManifest = oFF.DpDataManifestFactory.createByMessages(extResult);
	this.tryAttachingToQueryExecution();
};
oFF.QCmdBindResultset.prototype.processSenderUpdate = function()
{
	this.log("processSenderUpdate");
	if (oFF.notNull(this.m_cmds))
	{
		this.tryAttachingToServiceConfig();
		this.tryProcessingServiceConfig();
		this.tryAttachingToQueryExecution();
		this.tryProcessingQueryManager();
	}
};
oFF.QCmdBindResultset.prototype.registerValueChangedListener = function(listener, customIdentifier)
{
	this.log("registerValueChangedListener");
	this.m_listener = listener;
	this.m_customIdentifier = customIdentifier;
};
oFF.QCmdBindResultset.prototype.releaseObject = function()
{
	this.m_cmds = null;
	this.m_listener = null;
	this.m_customIdentifier = null;
	oFF.XObjectExt.prototype.releaseObject.call( this );
};
oFF.QCmdBindResultset.prototype.setupBind = function(cmds, type, protocol)
{
	this.m_cmds = cmds;
	this.m_type = type;
	this.m_protocol = protocol;
	this.tryAttachingToServiceConfig();
	this.tryAttachingToQueryExecution();
};
oFF.QCmdBindResultset.prototype.tryAttachingToQueryExecution = function()
{
	this.log("tryAttachingToQueryManager");
	if (oFF.notNull(this.m_cmds))
	{
		if (this.m_isAttachedToServiceConfig && !this.m_isAttachedToQueryManager)
		{
			let queryManager = this.m_cmds.getQueryManager();
			if (oFF.notNull(queryManager))
			{
				this.m_isAttachedToQueryManager = true;
				queryManager.getQueryModel().registerChangedListener(this, null);
				queryManager.processQueryExecution(oFF.SyncType.REGISTER, this, null);
				if (this.m_tryProcessingQueryManager)
				{
					this.tryProcessingQueryManager();
				}
			}
		}
	}
};
oFF.QCmdBindResultset.prototype.tryAttachingToServiceConfig = function()
{
	this.log("tryAttachingToServiceConfig()");
	if (oFF.notNull(this.m_cmds))
	{
		if (!this.m_isAttachedToServiceConfig)
		{
			let serviceConfig = this.m_cmds.getQueryServiceConfig();
			if (oFF.notNull(serviceConfig))
			{
				this.m_isAttachedToServiceConfig = true;
				serviceConfig.processQueryManagerCreation(oFF.SyncType.REGISTER, this, null);
			}
		}
	}
};
oFF.QCmdBindResultset.prototype.tryProcessingQueryManager = function()
{
	this.log("tryProcessingQueryManager");
	this.m_tryProcessingQueryManager = true;
	if (oFF.notNull(this.m_cmds))
	{
		if (this.m_isAttachedToServiceConfig && this.m_isAttachedToQueryManager)
		{
			let queryManager = this.m_cmds.getQueryManager();
			if (oFF.notNull(queryManager))
			{
				this.m_tryProcessingQueryManager = false;
				this.m_requestCounter++;
				this.log(oFF.XStringBuffer.create().append("Request Counter: ").appendInt(this.m_requestCounter).toString());
				queryManager.processQueryExecution(null, null, null);
			}
		}
	}
};
oFF.QCmdBindResultset.prototype.tryProcessingServiceConfig = function()
{
	this.log("tryProcessingServiceConfig");
	if (oFF.notNull(this.m_cmds))
	{
		if (this.m_isAttachedToServiceConfig && !this.m_isProcessingServiceConfig)
		{
			let serviceConfig = this.m_cmds.getQueryServiceConfig();
			if (oFF.notNull(serviceConfig))
			{
				this.m_isProcessingServiceConfig = true;
				serviceConfig.processQueryManagerCreation(null, null, null);
			}
		}
	}
};
oFF.QCmdBindResultset.prototype.unregisterValueChangedListener = function(listener)
{
	this.log("unregisterValueChangedListener");
	this.m_listener = null;
	this.m_customIdentifier = null;
};

oFF.CommentingMessage = function() {};
oFF.CommentingMessage.prototype = new oFF.AbstractCommentingEntity();
oFF.CommentingMessage.prototype._ff_c = "CommentingMessage";

oFF.CommentingMessage.CM_LIKING_USERS = "LikingUsers";
oFF.CommentingMessage.CM_MESSAGE = "Message";
oFF.CommentingMessage.create = function(parent, creator)
{
	let newInstance = new oFF.CommentingMessage();
	newInstance.setupCommentingMessage(parent, creator);
	return newInstance;
};
oFF.CommentingMessage.createFromStructure = function(parent, structure)
{
	let newInstance = new oFF.CommentingMessage();
	newInstance.readFromStructure(parent, structure);
	return newInstance;
};
oFF.CommentingMessage.prototype.m_likingUsers = null;
oFF.CommentingMessage.prototype.m_message = null;
oFF.CommentingMessage.prototype.m_parent = null;
oFF.CommentingMessage.prototype.addLikingUser = function(likingUser)
{
	this.m_likingUsers.add(likingUser);
};
oFF.CommentingMessage.prototype.clearLikes = function()
{
	this.m_likingUsers.clear();
};
oFF.CommentingMessage.prototype.getLikingUsers = function()
{
	return this.m_likingUsers;
};
oFF.CommentingMessage.prototype.getMessage = function()
{
	return this.m_message;
};
oFF.CommentingMessage.prototype.getNumberOfLikes = function()
{
	return this.m_likingUsers.size();
};
oFF.CommentingMessage.prototype.getParent = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_parent);
};
oFF.CommentingMessage.prototype.readFromStructure = function(parent, structure)
{
	this.m_parent = oFF.XWeakReferenceUtil.getWeakRef(parent);
	this.m_likingUsers = oFF.XHashSetOfString.create();
	this.setMessageInternal(structure.getStringByKey(oFF.CommentingMessage.CM_MESSAGE));
	if (structure.containsKey(oFF.CommentingMessage.CM_LIKING_USERS))
	{
		this.m_likingUsers.addAll(oFF.XStream.of(structure.getListByKey(oFF.CommentingMessage.CM_LIKING_USERS)).collect(oFF.XStreamCollector.toListOfString((el) => {
			return el.asString().getString();
		})));
	}
	oFF.AbstractCommentingEntity.prototype.readFromStructure.call( this , parent, structure);
};
oFF.CommentingMessage.prototype.releaseObject = function()
{
	oFF.AbstractCommentingEntity.prototype.releaseObject.call( this );
	this.m_message = null;
	oFF.XObjectExt.release(this.m_likingUsers);
	this.m_parent = null;
};
oFF.CommentingMessage.prototype.removeFromParent = function()
{
	this.getParent().removeComment(this);
};
oFF.CommentingMessage.prototype.removeLikingUser = function(likingUser)
{
	this.m_likingUsers.removeElement(likingUser);
};
oFF.CommentingMessage.prototype.setMessage = function(message)
{
	this.m_message = message;
	this.setModifiedDate(oFF.XDateTime.createCurrentLocalDateTime());
};
oFF.CommentingMessage.prototype.setMessageInternal = function(messageInternal)
{
	this.m_message = messageInternal;
};
oFF.CommentingMessage.prototype.setModifiedDate = function(modifiedDate)
{
	oFF.AbstractCommentingEntity.prototype.setModifiedDate.call( this , modifiedDate);
	this.getParent().setModifiedDate(this.getModifiedDate());
};
oFF.CommentingMessage.prototype.setupCommentingMessage = function(parent, creator)
{
	this.setCreatorId(creator);
	this.m_parent = oFF.XWeakReferenceUtil.getWeakRef(parent);
	this.m_likingUsers = oFF.XHashSetOfString.create();
	this.setupCommentingEntity();
};
oFF.CommentingMessage.prototype.writeToStructure = function(structure)
{
	structure.putStringNotNullAndNotEmpty(oFF.CommentingMessage.CM_MESSAGE, this.getMessage());
	if (oFF.XCollectionUtils.hasElements(this.m_likingUsers))
	{
		structure.putNewList(oFF.CommentingMessage.CM_LIKING_USERS).addAllStrings(this.m_likingUsers.getValuesAsReadOnlyList());
	}
	oFF.AbstractCommentingEntity.prototype.writeToStructure.call( this , structure);
};

oFF.CommentingThread = function() {};
oFF.CommentingThread.prototype = new oFF.AbstractCommentingEntity();
oFF.CommentingThread.prototype._ff_c = "CommentingThread";

oFF.CommentingThread.create = function(creator)
{
	let newInstance = new oFF.CommentingThread();
	newInstance.setCreatorId(creator);
	newInstance.setupCommentingEntity();
	return newInstance;
};
oFF.CommentingThread.createFromStructure = function(structure)
{
	let newInstance = new oFF.CommentingThread();
	newInstance.readFromStructure(null, structure);
	return newInstance;
};

oFF.QCurrencyTranslationObject = function() {};
oFF.QCurrencyTranslationObject.prototype = new oFF.XObject();
oFF.QCurrencyTranslationObject.prototype._ff_c = "QCurrencyTranslationObject";

oFF.QCurrencyTranslationObject.create = function(name, text, targetCurrency)
{
	let result = new oFF.QCurrencyTranslationObject();
	result.setName(name);
	result.setText(text);
	result.setTargetCurrency(targetCurrency);
	return result;
};
oFF.QCurrencyTranslationObject.prototype.m_name = null;
oFF.QCurrencyTranslationObject.prototype.m_targetCurrency = null;
oFF.QCurrencyTranslationObject.prototype.m_text = null;
oFF.QCurrencyTranslationObject.prototype.getDateOffset = function()
{
	return 0;
};
oFF.QCurrencyTranslationObject.prototype.getDateOffsetGranularity = function()
{
	return null;
};
oFF.QCurrencyTranslationObject.prototype.getErrorHandling = function()
{
	return null;
};
oFF.QCurrencyTranslationObject.prototype.getFixedCategory = function()
{
	return null;
};
oFF.QCurrencyTranslationObject.prototype.getFixedRateName = function()
{
	return null;
};
oFF.QCurrencyTranslationObject.prototype.getFixedRateType = function()
{
	return null;
};
oFF.QCurrencyTranslationObject.prototype.getFixedRateVersion = function()
{
	return null;
};
oFF.QCurrencyTranslationObject.prototype.getFixedReferenceDate = function()
{
	return null;
};
oFF.QCurrencyTranslationObject.prototype.getFixedReferenceDateAsString = function()
{
	return null;
};
oFF.QCurrencyTranslationObject.prototype.getFixedTargetCurrency = function()
{
	return this.m_targetCurrency;
};
oFF.QCurrencyTranslationObject.prototype.getName = function()
{
	return this.m_name;
};
oFF.QCurrencyTranslationObject.prototype.getRateNameField = function()
{
	return null;
};
oFF.QCurrencyTranslationObject.prototype.getRateNameFieldName = function()
{
	return null;
};
oFF.QCurrencyTranslationObject.prototype.getReferenceDateField = function()
{
	return null;
};
oFF.QCurrencyTranslationObject.prototype.getReferenceDateFieldName = function()
{
	return null;
};
oFF.QCurrencyTranslationObject.prototype.getTargetCurrencyField = function()
{
	return null;
};
oFF.QCurrencyTranslationObject.prototype.getTargetCurrencyFieldName = function()
{
	return null;
};
oFF.QCurrencyTranslationObject.prototype.getTargetCurrencyVariable = function()
{
	return null;
};
oFF.QCurrencyTranslationObject.prototype.getTargetCurrencyVariableName = function()
{
	return null;
};
oFF.QCurrencyTranslationObject.prototype.getText = function()
{
	return this.m_text;
};
oFF.QCurrencyTranslationObject.prototype.isDefaultCurrency = function()
{
	return false;
};
oFF.QCurrencyTranslationObject.prototype.isFixedRateName = function()
{
	return false;
};
oFF.QCurrencyTranslationObject.prototype.isMissingRateName = function()
{
	return false;
};
oFF.QCurrencyTranslationObject.prototype.isMissingReferenceDate = function()
{
	return false;
};
oFF.QCurrencyTranslationObject.prototype.isMissingTargetCurrency = function()
{
	return false;
};
oFF.QCurrencyTranslationObject.prototype.isParametersComplete = function()
{
	return false;
};
oFF.QCurrencyTranslationObject.prototype.isRateNameField = function()
{
	return false;
};
oFF.QCurrencyTranslationObject.prototype.isReferenceDateField = function()
{
	return false;
};
oFF.QCurrencyTranslationObject.prototype.isReferenceDateFixed = function()
{
	return false;
};
oFF.QCurrencyTranslationObject.prototype.isTargetCurrencyField = function()
{
	return false;
};
oFF.QCurrencyTranslationObject.prototype.isTargetCurrencyFixed = function()
{
	return false;
};
oFF.QCurrencyTranslationObject.prototype.isTargetCurrencyVariable = function()
{
	return false;
};
oFF.QCurrencyTranslationObject.prototype.requiresRateName = function()
{
	return false;
};
oFF.QCurrencyTranslationObject.prototype.requiresReferenceDate = function()
{
	return false;
};
oFF.QCurrencyTranslationObject.prototype.requiresTargetCurrency = function()
{
	return oFF.XStringUtils.isNullOrEmpty(this.m_targetCurrency);
};
oFF.QCurrencyTranslationObject.prototype.setDefaultCurrency = oFF.noSupport;
oFF.QCurrencyTranslationObject.prototype.setDynamicRateType = oFF.noSupport;
oFF.QCurrencyTranslationObject.prototype.setDynamicRateVersionAndCategory = oFF.noSupport;
oFF.QCurrencyTranslationObject.prototype.setDynamicReferenceDate = oFF.noSupport;
oFF.QCurrencyTranslationObject.prototype.setDynamicReferenceDateWithOffsetAndGranularity = oFF.noSupport;
oFF.QCurrencyTranslationObject.prototype.setErrorHandling = oFF.noSupport;
oFF.QCurrencyTranslationObject.prototype.setFixedCategory = oFF.noSupport;
oFF.QCurrencyTranslationObject.prototype.setFixedRateNameByString = oFF.noSupport;
oFF.QCurrencyTranslationObject.prototype.setFixedRateType = oFF.noSupport;
oFF.QCurrencyTranslationObject.prototype.setFixedRateVersion = oFF.noSupport;
oFF.QCurrencyTranslationObject.prototype.setFixedReferenceDateByDateValue = oFF.noSupport;
oFF.QCurrencyTranslationObject.prototype.setFixedReferenceDateByString = oFF.noSupport;
oFF.QCurrencyTranslationObject.prototype.setFixedTargetCurrencyByString = oFF.noSupport;
oFF.QCurrencyTranslationObject.prototype.setName = function(name)
{
	this.m_name = name;
};
oFF.QCurrencyTranslationObject.prototype.setRateNameByField = oFF.noSupport;
oFF.QCurrencyTranslationObject.prototype.setRateNameByFieldName = oFF.noSupport;
oFF.QCurrencyTranslationObject.prototype.setReferenceDateByField = oFF.noSupport;
oFF.QCurrencyTranslationObject.prototype.setReferenceDateByFieldName = oFF.noSupport;
oFF.QCurrencyTranslationObject.prototype.setReferenceDateByFieldNameOffsetAndGranularity = oFF.noSupport;
oFF.QCurrencyTranslationObject.prototype.setReferenceDateByFieldOffsetAndGranularity = oFF.noSupport;
oFF.QCurrencyTranslationObject.prototype.setTargetCurrency = function(targetCurrency)
{
	this.m_targetCurrency = targetCurrency;
};
oFF.QCurrencyTranslationObject.prototype.setTargetCurrencyByField = oFF.noSupport;
oFF.QCurrencyTranslationObject.prototype.setTargetCurrencyByFieldName = oFF.noSupport;
oFF.QCurrencyTranslationObject.prototype.setTargetCurrencyByVariable = oFF.noSupport;
oFF.QCurrencyTranslationObject.prototype.setTargetCurrencyByVariableName = oFF.noSupport;
oFF.QCurrencyTranslationObject.prototype.setText = function(text)
{
	this.m_text = text;
};
oFF.QCurrencyTranslationObject.prototype.supportsDefaultCurrency = function()
{
	return false;
};
oFF.QCurrencyTranslationObject.prototype.supportsErrorHandling = function()
{
	return false;
};
oFF.QCurrencyTranslationObject.prototype.supportsOffsetInDays = function()
{
	return false;
};
oFF.QCurrencyTranslationObject.prototype.supportsOffsetInMonths = function()
{
	return false;
};
oFF.QCurrencyTranslationObject.prototype.supportsPlanningParameters = function()
{
	return false;
};
oFF.QCurrencyTranslationObject.prototype.supportsRateName = function()
{
	return false;
};
oFF.QCurrencyTranslationObject.prototype.supportsReferenceDate = function()
{
	return false;
};
oFF.QCurrencyTranslationObject.prototype.supportsReferenceDateAsField = function()
{
	return false;
};
oFF.QCurrencyTranslationObject.prototype.supportsTargetCurrency = function()
{
	return oFF.XStringUtils.isNullOrEmpty(this.m_targetCurrency);
};
oFF.QCurrencyTranslationObject.prototype.supportsTargetCurrencyAsField = function()
{
	return false;
};
oFF.QCurrencyTranslationObject.prototype.supportsTargetCurrencyAsVariable = function()
{
	return false;
};

oFF.DocumentFileWithVersions = function() {};
oFF.DocumentFileWithVersions.prototype = new oFF.DocumentFileAbstract();
oFF.DocumentFileWithVersions.prototype._ff_c = "DocumentFileWithVersions";

oFF.DocumentFileWithVersions.createWithName = function(name)
{
	let instance = new oFF.DocumentFileWithVersions();
	instance.setName(name);
	instance.m_versions = oFF.XHashMapByString.create();
	return instance;
};
oFF.DocumentFileWithVersions.prototype.m_activeVersion = null;
oFF.DocumentFileWithVersions.prototype.m_versions = null;
oFF.DocumentFileWithVersions.prototype.addVersionByName = function(version)
{
	let newVersion = oFF.DocumentVersion.create();
	newVersion.setVersion(version);
	this.m_versions.put(version, newVersion);
	return newVersion;
};
oFF.DocumentFileWithVersions.prototype.getActiveDocumentVersion = function()
{
	return this.m_versions.getByKey(this.m_activeVersion);
};
oFF.DocumentFileWithVersions.prototype.getActiveVersion = function()
{
	return this.m_activeVersion;
};
oFF.DocumentFileWithVersions.prototype.getContent = function()
{
	return this.m_versions.containsKey(this.m_activeVersion) ? this.m_versions.getByKey(this.m_activeVersion).getContent() : null;
};
oFF.DocumentFileWithVersions.prototype.getProperties = function()
{
	return this.m_versions.containsKey(this.m_activeVersion) ? this.m_versions.getByKey(this.m_activeVersion).getProperties() : null;
};
oFF.DocumentFileWithVersions.prototype.getVersionByName = function(version)
{
	return this.m_versions.getByKey(version);
};
oFF.DocumentFileWithVersions.prototype.getVersionNames = function()
{
	return this.m_versions.getKeysAsReadOnlyList();
};
oFF.DocumentFileWithVersions.prototype.getVersions = function()
{
	return this.m_versions.getValuesAsReadOnlyList();
};
oFF.DocumentFileWithVersions.prototype.releaseObject = function()
{
	oFF.DocumentFileAbstract.prototype.releaseObject.call( this );
	this.m_activeVersion = null;
	this.m_versions = oFF.XObjectExt.release(this.m_versions);
};
oFF.DocumentFileWithVersions.prototype.setActiveVersion = function(version)
{
	this.m_activeVersion = version;
};

oFF.QFilterAcrossModelsLovConfig = function() {};
oFF.QFilterAcrossModelsLovConfig.prototype = new oFF.XObjectExt();
oFF.QFilterAcrossModelsLovConfig.prototype._ff_c = "QFilterAcrossModelsLovConfig";

oFF.QFilterAcrossModelsLovConfig.DEFAULT_MAX_LOV_ROWS = 10000;
oFF.QFilterAcrossModelsLovConfig.augmentAndMapToFilterElements = function(filters)
{
	let result = oFF.XList.create();
	let filtersList = filters.getValuesAsReadOnlyList();
	for (let i = 0; i < filtersList.size(); i++)
	{
		let originalLovFilter = filtersList.get(i);
		let modifiedLovFilter = oFF.QFactory.createFilterExpression(originalLovFilter.getContext(), null);
		modifiedLovFilter.copyFrom(originalLovFilter, null);
		if (!modifiedLovFilter.isComplexFilter())
		{
			oFF.QFilterUtil.deepApplyConvertToFlatFilterToHierarchicalFilters(modifiedLovFilter.getFilterRootElement(), false);
		}
		result.add(modifiedLovFilter.getFilterRootElement());
	}
	return result;
};
oFF.QFilterAcrossModelsLovConfig.create = function(dimensionLinks, sourceQueryManager, sourceFilters, targetQueryManager, sourceMeasureNames, sourceSecondaryMeasureNames, maxLovRows)
{
	let config = new oFF.QFilterAcrossModelsLovConfig();
	config.setupFilterAcrossModelsLovConfig(dimensionLinks, sourceQueryManager, sourceFilters, targetQueryManager, sourceMeasureNames, sourceSecondaryMeasureNames, maxLovRows);
	return config;
};
oFF.QFilterAcrossModelsLovConfig.removeEmptyFilters = function(filters)
{
	let nonEmptyFilters = oFF.XLinkedHashMapByString.create();
	let iterator = filters.getKeysAsIterator();
	while (iterator.hasNext())
	{
		let key = iterator.next();
		let filter = filters.getByKey(key);
		if (!oFF.QFilterUtil.isFilterNullOrEmpty(filter))
		{
			nonEmptyFilters.put(key, filter);
		}
	}
	return nonEmptyFilters;
};
oFF.QFilterAcrossModelsLovConfig.prototype.m_dimensionLinks = null;
oFF.QFilterAcrossModelsLovConfig.prototype.m_lovFilters = null;
oFF.QFilterAcrossModelsLovConfig.prototype.m_maxLovRows = 0;
oFF.QFilterAcrossModelsLovConfig.prototype.m_measureNames = null;
oFF.QFilterAcrossModelsLovConfig.prototype.m_secondaryMeasureNames = null;
oFF.QFilterAcrossModelsLovConfig.prototype.m_sourceFilters = null;
oFF.QFilterAcrossModelsLovConfig.prototype.m_sourceQueryManager = null;
oFF.QFilterAcrossModelsLovConfig.prototype.m_targetQueryManager = null;
oFF.QFilterAcrossModelsLovConfig.prototype.copyFromInternal = function(other, flags)
{
	oFF.XObjectExt.prototype.copyFrom.call( this , other, flags);
	let originFilterAcrossModelsLov = other;
	this.m_sourceQueryManager = originFilterAcrossModelsLov.m_sourceQueryManager;
	this.m_targetQueryManager = originFilterAcrossModelsLov.m_targetQueryManager;
	let temp = oFF.XLinkedHashMapByString.create();
	oFF.XMapUtils.putAllObjectsByString(originFilterAcrossModelsLov.m_sourceFilters, temp);
	this.m_sourceFilters = temp;
	this.m_lovFilters = oFF.XStream.of(originFilterAcrossModelsLov.m_lovFilters).map((filterElement) => {
		return oFF.QFilterUtil.createFilterElementFromOrigin(filterElement, null);
	}).collect(oFF.XStreamCollector.toList());
	this.m_dimensionLinks = originFilterAcrossModelsLov.m_dimensionLinks;
	this.m_measureNames = originFilterAcrossModelsLov.m_measureNames;
	this.m_secondaryMeasureNames = originFilterAcrossModelsLov.m_secondaryMeasureNames;
};
oFF.QFilterAcrossModelsLovConfig.prototype.getDimensionLinks = function()
{
	return this.m_dimensionLinks;
};
oFF.QFilterAcrossModelsLovConfig.prototype.getMaxLovRows = function()
{
	return this.m_maxLovRows;
};
oFF.QFilterAcrossModelsLovConfig.prototype.getMeasureNames = function()
{
	return this.m_measureNames;
};
oFF.QFilterAcrossModelsLovConfig.prototype.getNonEmptySourceFilters = function()
{
	return this.m_sourceFilters;
};
oFF.QFilterAcrossModelsLovConfig.prototype.getSecondaryMeasureNames = function()
{
	return this.m_secondaryMeasureNames;
};
oFF.QFilterAcrossModelsLovConfig.prototype.getSourceQueryManager = function()
{
	return this.m_sourceQueryManager;
};
oFF.QFilterAcrossModelsLovConfig.prototype.getTargetQueryManager = function()
{
	return this.m_targetQueryManager;
};
oFF.QFilterAcrossModelsLovConfig.prototype.getTransformedSourceFiltersForLov = function()
{
	return this.m_lovFilters;
};
oFF.QFilterAcrossModelsLovConfig.prototype.releaseObject = function()
{
	this.m_sourceQueryManager = null;
	this.m_targetQueryManager = null;
	this.m_dimensionLinks = null;
	this.m_measureNames = null;
	this.m_secondaryMeasureNames = null;
	this.m_lovFilters = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_lovFilters);
	this.m_sourceFilters = oFF.XObjectExt.release(this.m_sourceFilters);
	oFF.XObjectExt.prototype.releaseObject.call( this );
};
oFF.QFilterAcrossModelsLovConfig.prototype.setupFilterAcrossModelsLovConfig = function(dimensionLinks, sourceQueryManager, sourceFilters, targetQueryManager, sourceMeasureNames, sourceSecondaryMeasureNames, maxLovRows)
{
	this.m_dimensionLinks = dimensionLinks;
	this.m_sourceQueryManager = sourceQueryManager;
	this.m_maxLovRows = oFF.QFilterAcrossModelsLovConfig.DEFAULT_MAX_LOV_ROWS;
	if (oFF.notNull(maxLovRows))
	{
		this.m_maxLovRows = maxLovRows.getInteger();
	}
	this.m_targetQueryManager = targetQueryManager;
	let nonEmptySourceFilters = oFF.QFilterAcrossModelsLovConfig.removeEmptyFilters(sourceFilters);
	this.m_sourceFilters = nonEmptySourceFilters;
	this.m_lovFilters = oFF.QFilterAcrossModelsLovConfig.augmentAndMapToFilterElements(nonEmptySourceFilters);
	this.m_measureNames = sourceMeasureNames;
	this.m_secondaryMeasureNames = sourceSecondaryMeasureNames;
};

oFF.QFilterAcrossModelsTransientObjectGenerator = function() {};
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype = new oFF.XObjectExt();
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype._ff_c = "QFilterAcrossModelsTransientObjectGenerator";

oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.m_links = null;
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.m_measureNames = null;
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.m_messageManager = null;
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.m_name = null;
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.m_parent = null;
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.m_secondaryMeasureNames = null;
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.m_sourceContext = null;
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.m_sourceFilters = null;
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.m_targetContext = null;
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.addFlexibleTimeRangeFiltersWarnings = function()
{
	let ftdFilters = oFF.QFilterAcrossModelsFilterUtil.getDirectFlexibleTimeRangeFiltersWithIncompatibleTargetHierarchy(this.getSourceContext(), this.getTargetContext(), this.getLinks(), this.getSourceFilters().toReadOnly().getValuesAsReadOnlyList());
	if (ftdFilters.size() > 0)
	{
		this.getMessageManager().addWarningExtWithExtendedInfo(oFF.OriginLayer.APPLICATION, oFF.ErrorCodes.FILTER_ACROSS_MODEL_FTD_RANGE_FILTER_DIRECT_INCOMPATIBLE_HIERARCHY, oFF.ErrorMessages.FILTER_ACROSS_MODEL_FTD_RANGE_FILTER_DIRECT_INCOMPATIBLE_HIERARCHY, ftdFilters);
	}
};
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.createKeyRefForFirstSharedLink = function(linkPart)
{
	let storageName = oFF.QFilterAcrossModelsLinkUtil.getSharedLinkStorageName(this.m_links, linkPart);
	if (oFF.isNull(storageName))
	{
		return null;
	}
	else
	{
		return oFF.QFactory.createKeyRef(storageName, null, this.getName());
	}
};
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.generateTransientDimensions = function()
{
	return oFF.XList.create();
};
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.generateTransientFilters = function()
{
	return oFF.XList.create();
};
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.getFirstSecondaryFieldLink = function(context)
{
	return oFF.QFilterAcrossModelsLinkUtil.getFirstSecondaryLinkPartForContext(this.m_links, context);
};
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.getLinks = function()
{
	return this.m_links;
};
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.getMeasureNames = function()
{
	return this.m_measureNames;
};
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.getMessageManager = function()
{
	return this.m_messageManager;
};
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.getName = function()
{
	return this.m_name;
};
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.getParent = function()
{
	return this.m_parent;
};
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.getSecondaryMeasureNames = function()
{
	return this.m_secondaryMeasureNames;
};
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.getSourceContext = function()
{
	return this.m_sourceContext;
};
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.getSourceFilters = function()
{
	return this.m_sourceFilters;
};
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.getTargetContext = function()
{
	return this.m_targetContext;
};
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.isContextTypeOfBw = function(context)
{
	return context.getQueryModel().getConvenienceCommands().isTypeOfBw();
};
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.releaseObject = function()
{
	this.m_name = null;
	this.m_targetContext = null;
	this.m_sourceContext = null;
	this.m_links = null;
	this.m_measureNames = null;
	this.m_secondaryMeasureNames = null;
	this.m_sourceFilters = null;
	this.m_parent = null;
	this.m_messageManager = null;
	oFF.XObjectExt.prototype.releaseObject.call( this );
};
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.setLinks = function(links)
{
	this.m_links = links;
};
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.setMeasureNames = function(measureNames)
{
	this.m_measureNames = measureNames;
};
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.setMessageManager = function(messageManager)
{
	this.m_messageManager = messageManager;
};
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.setName = function(name)
{
	this.m_name = name;
};
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.setSecondaryMeasureNames = function(measureNames)
{
	this.m_secondaryMeasureNames = measureNames;
};
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.setSourceContext = function(context)
{
	this.m_sourceContext = context;
};
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.setSourceFilters = function(sourceFilters)
{
	this.m_sourceFilters = sourceFilters;
};
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.setTargetContext = function(context)
{
	this.m_targetContext = context;
};
oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.setupFilterAcrossModelsTransientObjectGenerator = function(parent, name, sourceContext, targetContext, messageManager, links, sourceFilters, measureNames, secondaryMeasureNames)
{
	this.m_parent = parent;
	this.m_name = name;
	this.m_sourceContext = sourceContext;
	this.m_targetContext = targetContext;
	this.m_messageManager = messageManager;
	this.m_links = links;
	this.m_sourceFilters = sourceFilters;
	this.m_measureNames = measureNames;
	this.m_secondaryMeasureNames = secondaryMeasureNames;
};

oFF.CustomHierarchyElement = function() {};
oFF.CustomHierarchyElement.prototype = new oFF.XObject();
oFF.CustomHierarchyElement.prototype._ff_c = "CustomHierarchyElement";

oFF.CustomHierarchyElement.prototype.m_name = null;
oFF.CustomHierarchyElement.prototype.getName = function()
{
	return this.m_name;
};
oFF.CustomHierarchyElement.prototype.isEqualTo = function(other)
{
	if (this === other)
	{
		return true;
	}
	if (oFF.isNull(other))
	{
		return false;
	}
	let otherElement = other;
	return oFF.XString.isEqual(this.getName(), otherElement.getName()) && this.isMemberElement() === otherElement.isMemberElement();
};
oFF.CustomHierarchyElement.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_name = null;
};
oFF.CustomHierarchyElement.prototype.setName = function(name)
{
	this.m_name = name;
};
oFF.CustomHierarchyElement.prototype.toString = function()
{
	return this.getName();
};

oFF.LovManager = function() {};
oFF.LovManager.prototype = new oFF.XObject();
oFF.LovManager.prototype._ff_c = "LovManager";

oFF.LovManager.create = function(queryManager)
{
	let lovManager = new oFF.LovManager();
	lovManager.m_queryManager = queryManager;
	lovManager.m_processes = oFF.XList.create();
	lovManager.resetState();
	return lovManager;
};
oFF.LovManager.prototype.m_automaticVhDrillLevelConfigEnabled = false;
oFF.LovManager.prototype.m_automaticVhReadModeConfigEnabled = false;
oFF.LovManager.prototype.m_forceValueHelpForPathField = false;
oFF.LovManager.prototype.m_hasUserDefinedSort = false;
oFF.LovManager.prototype.m_ignoreMultipleDrillsInVh = false;
oFF.LovManager.prototype.m_includeMeasures = false;
oFF.LovManager.prototype.m_lovAbstractionEnabled = false;
oFF.LovManager.prototype.m_processes = null;
oFF.LovManager.prototype.m_queryManager = null;
oFF.LovManager.prototype.m_restoreSettingsAfterImplicitSubmit = false;
oFF.LovManager.prototype.copyFrom = function(other, flags)
{
	oFF.XObject.prototype.copyFrom.call( this , other, flags);
	let otherLovManager = other;
	this.m_lovAbstractionEnabled = otherLovManager.isLovAbstractionEnabled();
	this.m_includeMeasures = otherLovManager.isIncludeMeasures();
	this.m_automaticVhReadModeConfigEnabled = otherLovManager.isAutomaticValueHelpReadModeConfigurationEnabled();
	this.m_automaticVhDrillLevelConfigEnabled = otherLovManager.isAutomaticValueHelpDrillLevelConfigurationEnabled();
	this.m_ignoreMultipleDrillsInVh = otherLovManager.isIgnoreMultipleDrillsInValueHelp();
	this.m_restoreSettingsAfterImplicitSubmit = otherLovManager.isRestoreSettingsAfterImplicitSubmit();
	this.m_hasUserDefinedSort = otherLovManager.hasUserDefinedSort();
};
oFF.LovManager.prototype.createConfigForActiveResultSetContainer = function(resultSetContainer)
{
	let config = this.createLovConfig(null, this.m_includeMeasures);
	config.setUseActiveResultSetContainer(true);
	this.setKeyFigureCalculation(resultSetContainer, config);
	return config;
};
oFF.LovManager.prototype.createLovCapabilities = function(dimension, includeMeasures)
{
	return this.createLovConfig(dimension, includeMeasures);
};
oFF.LovManager.prototype.createLovConfig = function(dimension, includeMeasures)
{
	let processConfig = oFF.LovProcessConfig.create(this.m_queryManager.getQueryModel(), dimension, includeMeasures, this.m_ignoreMultipleDrillsInVh, this.m_hasUserDefinedSort, this.m_forceValueHelpForPathField);
	processConfig.setAutomaticValueHelpReadModeConfigurationEnabled(this.m_automaticVhReadModeConfigEnabled);
	processConfig.setAutomaticValueHelpDrillLevelConfigurationEnabled(this.m_automaticVhDrillLevelConfigEnabled);
	processConfig.setRestoreSettingsAfterImplicitSubmit(this.m_restoreSettingsAfterImplicitSubmit);
	return processConfig;
};
oFF.LovManager.prototype.deactivateZeroSuppression = function(axis)
{
	if (axis.supportsZeroSuppression())
	{
		axis.setZeroSuppressionType(oFF.ZeroSuppressionType.NONE);
	}
};
oFF.LovManager.prototype.deserializeExt = oFF.noSupport;
oFF.LovManager.prototype.deserializeFromContent = oFF.noSupport;
oFF.LovManager.prototype.deserializeFromElementExt = oFF.noSupport;
oFF.LovManager.prototype.deserializeNewComponentExt = oFF.noSupport;
oFF.LovManager.prototype.deserializeNewComponentFromElementExt = oFF.noSupport;
oFF.LovManager.prototype.hasUserDefinedSort = function()
{
	return this.m_hasUserDefinedSort;
};
oFF.LovManager.prototype.isAutomaticValueHelpDrillLevelConfigurationEnabled = function()
{
	return this.m_automaticVhDrillLevelConfigEnabled;
};
oFF.LovManager.prototype.isAutomaticValueHelpReadModeConfigurationEnabled = function()
{
	return this.m_automaticVhReadModeConfigEnabled;
};
oFF.LovManager.prototype.isIgnoreMultipleDrillsInValueHelp = function()
{
	return this.m_ignoreMultipleDrillsInVh;
};
oFF.LovManager.prototype.isIncludeMeasures = function()
{
	return this.m_includeMeasures;
};
oFF.LovManager.prototype.isLovAbstractionEnabled = function()
{
	return this.m_lovAbstractionEnabled;
};
oFF.LovManager.prototype.isRestoreSettingsAfterImplicitSubmit = function()
{
	return this.m_restoreSettingsAfterImplicitSubmit;
};
oFF.LovManager.prototype.notifyNodeChanged = function()
{
	if (this.m_lovAbstractionEnabled)
	{
		let queryModel = this.m_queryManager.getQueryModel();
		queryModel.notifyNodeChanged();
	}
};
oFF.LovManager.prototype.processDeserializeExt = oFF.noSupport;
oFF.LovManager.prototype.processListOfValues = function(dimension, includeMeasures, syncType, listener, customIdentifier)
{
	return this.processListOfValuesByConfig(this.createLovConfig(dimension, includeMeasures), syncType, listener, customIdentifier);
};
oFF.LovManager.prototype.processListOfValuesByConfig = function(config, syncType, listener, customIdentifier)
{
	let lovProcess = oFF.QFactory.createLovProcess(this.m_queryManager, config);
	this.m_processes.add(lovProcess);
	lovProcess.execute(syncType, listener, customIdentifier);
	return lovProcess;
};
oFF.LovManager.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_queryManager = null;
	this.m_processes = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_processes);
};
oFF.LovManager.prototype.resetState = function()
{
	this.m_includeMeasures = false;
	this.m_automaticVhReadModeConfigEnabled = true;
	this.m_automaticVhDrillLevelConfigEnabled = true;
	this.m_ignoreMultipleDrillsInVh = false;
	this.m_restoreSettingsAfterImplicitSubmit = false;
	this.m_hasUserDefinedSort = false;
	this.m_forceValueHelpForPathField = false;
};
oFF.LovManager.prototype.serialize = function(modelFormat, capabilities)
{
	return this.serializeToElementExt(modelFormat, capabilities).toString();
};
oFF.LovManager.prototype.serializeToContent = function(modelFormat)
{
	return this.serializeToContentExt(modelFormat, null);
};
oFF.LovManager.prototype.serializeToContentExt = function(modelFormat, capabilities)
{
	let element = this.serializeToElementExt(modelFormat, capabilities);
	return oFF.XContent.createJsonObjectContent(modelFormat, element);
};
oFF.LovManager.prototype.serializeToElement = function(modelFormat)
{
	return this.serializeToElementExt(modelFormat, null);
};
oFF.LovManager.prototype.serializeToElementExt = function(modelFormat, capabilities)
{
	let lovAbstractionEnabled = this.m_lovAbstractionEnabled;
	this.m_lovAbstractionEnabled = false;
	let element;
	if (oFF.XCollectionUtils.hasElements(this.m_processes))
	{
		element = this.m_processes.get(this.m_processes.size() - 1).serializeToElementExt(modelFormat, capabilities);
	}
	else
	{
		let lovProcessConfig = this.createConfigForActiveResultSetContainer(this.m_queryManager.getActiveResultSetContainer());
		let lovProcess = oFF.QFactory.createLovProcess(this.m_queryManager, lovProcessConfig);
		element = lovProcess.serializeToElementExt(modelFormat, capabilities);
	}
	this.m_lovAbstractionEnabled = lovAbstractionEnabled;
	return element;
};
oFF.LovManager.prototype.serializeToFormat = function(modelFormat)
{
	return this.serializeToElementExt(modelFormat, null).toString();
};
oFF.LovManager.prototype.serializeToString = function(modelFormat)
{
	return this.serializeToElementExt(modelFormat, null).toString();
};
oFF.LovManager.prototype.serializeToStringExt = function(modelFormat, capabilities)
{
	return this.serializeToElementExt(modelFormat, capabilities).toString();
};
oFF.LovManager.prototype.setAutomaticValueHelpDrillLevelConfigurationEnabled = function(automaticValueHelpDrillLevelConfigurationEnabled)
{
	if (this.m_automaticVhDrillLevelConfigEnabled !== automaticValueHelpDrillLevelConfigurationEnabled)
	{
		this.m_automaticVhDrillLevelConfigEnabled = automaticValueHelpDrillLevelConfigurationEnabled;
		this.notifyNodeChanged();
	}
};
oFF.LovManager.prototype.setAutomaticValueHelpReadModeConfigurationEnabled = function(automaticValueHelpReadModeConfigurationEnabled)
{
	if (this.m_automaticVhReadModeConfigEnabled !== automaticValueHelpReadModeConfigurationEnabled)
	{
		this.m_automaticVhReadModeConfigEnabled = automaticValueHelpReadModeConfigurationEnabled;
		this.notifyNodeChanged();
	}
};
oFF.LovManager.prototype.setForceValueHelpForPathField = function(forceValueHelpForPathField)
{
	if (this.m_forceValueHelpForPathField !== forceValueHelpForPathField)
	{
		this.m_forceValueHelpForPathField = forceValueHelpForPathField;
		this.notifyNodeChanged();
	}
};
oFF.LovManager.prototype.setHasUserDefinedSort = function(hasUserDefinedSort)
{
	if (this.m_hasUserDefinedSort !== hasUserDefinedSort)
	{
		this.m_hasUserDefinedSort = hasUserDefinedSort;
		this.notifyNodeChanged();
	}
};
oFF.LovManager.prototype.setIgnoreMultipleDrillsInValueHelp = function(ignoreMultipleDrillsInValueHelp)
{
	if (this.m_ignoreMultipleDrillsInVh !== ignoreMultipleDrillsInValueHelp)
	{
		this.m_ignoreMultipleDrillsInVh = ignoreMultipleDrillsInValueHelp;
		this.notifyNodeChanged();
	}
};
oFF.LovManager.prototype.setIncludeMeasures = function(includeMeasures)
{
	if (this.m_includeMeasures !== includeMeasures)
	{
		this.m_includeMeasures = includeMeasures;
		this.notifyNodeChanged();
	}
};
oFF.LovManager.prototype.setKeyFigureCalculation = function(resultSetContainer, config)
{
	resultSetContainer.setSuppressKeyfigureCalculation(!config.isIncludeMeasures());
	if (resultSetContainer.isKeyfigureCalculationSuppressed())
	{
		let queryModel = resultSetContainer.getQueryModel();
		this.deactivateZeroSuppression(queryModel.getRowsAxis());
		this.deactivateZeroSuppression(queryModel.getColumnsAxis());
		let measureStructure = queryModel.getDimensionByType(oFF.DimensionType.MEASURE_STRUCTURE);
		if (oFF.notNull(measureStructure) && measureStructure.getAxisType() !== oFF.AxisType.COLUMNS && config.getDimension() !== measureStructure)
		{
			queryModel.getColumnsAxis().add(measureStructure);
		}
		let secondaryStructure = queryModel.getDimensionByType(oFF.DimensionType.SECONDARY_STRUCTURE);
		if (oFF.notNull(secondaryStructure) && secondaryStructure.getAxisType() !== oFF.AxisType.COLUMNS && config.getDimension() !== secondaryStructure)
		{
			queryModel.getColumnsAxis().add(secondaryStructure);
		}
	}
};
oFF.LovManager.prototype.setLovAbstractionEnabled = function(lovAbstractionEnabled, resetState)
{
	this.m_lovAbstractionEnabled = lovAbstractionEnabled;
	if (resetState)
	{
		this.resetState();
	}
	if (lovAbstractionEnabled)
	{
		this.notifyNodeChanged();
	}
};
oFF.LovManager.prototype.setRestoreSettingsAfterImplicitSubmit = function(restoreSettingsAfterImplicitSubmit)
{
	this.m_restoreSettingsAfterImplicitSubmit = restoreSettingsAfterImplicitSubmit;
};

oFF.QSortUtils = function() {};
oFF.QSortUtils.prototype = new oFF.XObjectExt();
oFF.QSortUtils.prototype._ff_c = "QSortUtils";

oFF.QSortUtils.SORT_OPERATION_INFO_INDEX = 0;
oFF.QSortUtils.SORT_OPERATION_INFO_PREFIX = "BOC_SORT_OPERATION__";
oFF.QSortUtils.addDataCellOrComplexSorting = function(queryModel, sortType, primaryMeasureName, secondaryMeasureName, direction, breakGrouping, versionElementId, versionDimension)
{
	let relatedElements = oFF.XList.create();
	oFF.QSortUtils.addDataCellOrComplexSortingEx(queryModel, sortType, primaryMeasureName, secondaryMeasureName, direction, breakGrouping, versionElementId, versionDimension, relatedElements);
};
oFF.QSortUtils.addDataCellOrComplexSortingEx = function(queryModel, sortType, primaryMeasureName, secondaryMeasureName, direction, breakGrouping, versionElementId, versionDimension, relatedElements)
{
	let path = oFF.XList.create();
	let primaryCalculationDimension = queryModel.getPrimaryCalculationDimension();
	let secondaryCalculationDimension = null;
	if (queryModel.getQueryManager().getSystemType() !== oFF.SystemType.BW && queryModel.getQueryManager().getSystemType() !== oFF.SystemType.BPCE)
	{
		secondaryCalculationDimension = queryModel.getSecondaryCalculationDimension();
	}
	if (oFF.isNull(secondaryCalculationDimension) && queryModel.getQueryManager().getInitSettings().getMode() === oFF.QueryManagerMode.BLENDING)
	{
		secondaryCalculationDimension = queryModel.getDimensionByName("SignedData");
	}
	if (oFF.notNull(secondaryMeasureName) && oFF.notNull(secondaryCalculationDimension))
	{
		let secondaryMeasureDimElement = oFF.QFactory.createDimensionElement(secondaryCalculationDimension.getKeyField(), "", secondaryMeasureName);
		path.add(secondaryMeasureDimElement);
	}
	if (oFF.notNull(primaryMeasureName))
	{
		let primaryMeasureDimElement;
		if (primaryCalculationDimension.areHierarchicalDimensionMemberNamesStoredAsFlat() && primaryCalculationDimension.isHierarchyActive() && oFF.QDimensionMemberNameUtil.isMDXHierarchyKey(primaryMeasureName))
		{
			let hierarchyAndMemberName = oFF.QDimensionMemberNameUtil.parseHierarchyAndFlatMemberName(primaryMeasureName);
			primaryMeasureDimElement = oFF.QFactory.createDimensionElement(primaryCalculationDimension.getKeyField(), "", hierarchyAndMemberName.getSecondString());
		}
		else
		{
			primaryMeasureDimElement = oFF.QFactory.createDimensionElement(primaryCalculationDimension.getKeyField(), "", primaryMeasureName);
		}
		path.add(primaryMeasureDimElement);
	}
	if (oFF.notNull(versionElementId))
	{
		let versionSortDim = versionDimension;
		if (oFF.isNull(versionSortDim))
		{
			versionSortDim = queryModel.getVersionDimension();
		}
		if (oFF.notNull(versionSortDim))
		{
			let dimensionElementVersion = oFF.QFactory.createDimensionElement(versionSortDim.getKeyField(), "", versionElementId);
			path.add(dimensionElementVersion);
		}
	}
	if (relatedElements.size() > 0)
	{
		path.addAll(relatedElements);
	}
	let sortingManager = queryModel.getSortingManager();
	let sortingObject;
	if (sortType === oFF.SortType.COMPLEX)
	{
		sortingObject = sortingManager.getComplexSorting(path, true);
	}
	else
	{
		sortingObject = sortingManager.getDataCellSorting(path, true);
	}
	oFF.QSortUtils.addSortDirectionAndBreakGrouping(sortingManager, sortingObject, sortType, breakGrouping, direction);
};
oFF.QSortUtils.addMeasureSorting = function(queryModel, measureName, secondaryMeasureName, direction, breakGrouping)
{
	let measureStructure = queryModel.getMeasureDimension();
	let structureMember = measureStructure.getStructureMember(measureName);
	if (oFF.isNull(structureMember))
	{
		structureMember = queryModel.getOlapEnv().getClientQueryObjectManager().getStructuredMember(measureName, queryModel.getQueryManager().getClientQueryObjectStorageName(), true);
	}
	if (oFF.isNull(structureMember))
	{
		return;
	}
	let sortingManager = queryModel.getSortingManager();
	let sortingObject = sortingManager.getMeasureSorting(structureMember, true);
	oFF.QSortUtils.addSortDirectionAndBreakGrouping(sortingManager, sortingObject, oFF.SortType.MEASURE, breakGrouping, direction);
	if (oFF.notNull(secondaryMeasureName))
	{
		let secondaryCalculationDimension = queryModel.getSecondaryCalculationDimension();
		let secondaryStructureMemberName = secondaryCalculationDimension.getStructureMember(secondaryMeasureName);
		sortingObject.setSecondaryMeasure(secondaryStructureMemberName);
	}
};
oFF.QSortUtils.addSortByMeasure = function(queryModel, measure, secondaryMeasure, direction, breakGrouping, versionElementId, versionDimension)
{
	let relatedElements = oFF.XList.create();
	oFF.QSortUtils.addSortByMeasureEx(queryModel, measure, secondaryMeasure, direction, breakGrouping, versionElementId, versionDimension, relatedElements);
};
oFF.QSortUtils.addSortByMeasureEx = function(queryModel, measure, secondaryMeasure, direction, breakGrouping, versionElementId, versionDimension, relatedElements)
{
	let isAccountMember = oFF.notNull(measure) && queryModel.getAccountDimension() !== null;
	let useDataCellSorting;
	let restrictedSorting = oFF.notNull(versionElementId) || relatedElements.size() > 0;
	let filtersOnDimension = queryModel.getPrimaryCalculationDimension().getFilterConsideringLinkedFilters();
	let measuresUsed = oFF.XList.create();
	oFF.XStream.of(filtersOnDimension).forEach((filter) => {
		measuresUsed.addAll(oFF.QFilterUtil.getMemberNamesFromFilter(filter, queryModel.getPrimaryCalculationDimension().getName()));
	});
	if (restrictedSorting)
	{
		useDataCellSorting = false;
	}
	else if (isAccountMember)
	{
		useDataCellSorting = oFF.QSortUtils.isSortTupleValidForDataCellSort(queryModel);
	}
	else if (measuresUsed.isEmpty() && queryModel.getQueryManager().getInitSettings().getMode() === oFF.QueryManagerMode.BLENDING)
	{
		useDataCellSorting = oFF.notNull(measure) && queryModel.getPrimaryCalculationDimension().getStructureMember(measure) !== null && queryModel.getPrimaryCalculationDimension().getStructureMember(measure).getResultVisibility() === oFF.ResultVisibility.HIDDEN ? isAccountMember : true;
	}
	else
	{
		useDataCellSorting = oFF.notNull(measure) && !measuresUsed.contains(measure) ? isAccountMember : true;
	}
	let sortingManager = queryModel.getSortingManager();
	let useComplexSortForDimensionsOnColumn = queryModel.getSession().hasFeature(oFF.FeatureToggleOlap.SORT_AND_RANK_WITH_DIMENSIONS_ON_COLUMN) && sortingManager.supportsComplexSorting() && oFF.QSortUtils.hasNonAccountOrMeasureDimensionOnColumn(queryModel) && (useDataCellSorting || isAccountMember);
	if (useComplexSortForDimensionsOnColumn)
	{
		oFF.QSortUtils.addDataCellOrComplexSortingEx(queryModel, oFF.SortType.COMPLEX, measure, secondaryMeasure, direction, breakGrouping, versionElementId, versionDimension, relatedElements);
	}
	else if (useDataCellSorting && sortingManager.supportsDataCellSorting())
	{
		oFF.QSortUtils.addDataCellOrComplexSortingEx(queryModel, oFF.SortType.DATA_CELL_VALUE, measure, secondaryMeasure, direction, breakGrouping, versionElementId, versionDimension, relatedElements);
	}
	else if ((isAccountMember || restrictedSorting) && sortingManager.supportsComplexSorting())
	{
		oFF.QSortUtils.addDataCellOrComplexSortingEx(queryModel, oFF.SortType.COMPLEX, measure, secondaryMeasure, direction, breakGrouping, versionElementId, versionDimension, relatedElements);
	}
	else if (sortingManager.supportsMeasureSorting())
	{
		oFF.QSortUtils.addMeasureSorting(queryModel, measure, secondaryMeasure, direction, breakGrouping);
	}
};
oFF.QSortUtils.addSortDirectionAndBreakGrouping = function(sortingManager, sortingObject, sortType, breakGrouping, direction)
{
	sortingObject.setDirection(direction);
	if (breakGrouping)
	{
		if (sortingManager.supportsBreakGrouping(sortType))
		{
			sortingObject.setBreakGrouping(true);
		}
	}
	else
	{
		if (sortingManager.supportsPreserveGrouping(sortType))
		{
			sortingObject.setPreserveGrouping(true);
		}
	}
};
oFF.QSortUtils.adjustMeasureSortTypeOnDimensionAxisChange = function(queryModel)
{
	let sortingManager = queryModel.getSortingManager();
	let sortingOperations = sortingManager.getSortingOperations();
	let shouldUseComplexSort = oFF.QSortUtils.hasNonAccountOrMeasureDimensionOnColumn(queryModel) && sortingManager.supportsComplexSorting();
	for (let index = sortingOperations.size() - 1; index >= 0; index--)
	{
		let sortingOperation = sortingOperations.get(index);
		let sortType = sortingOperation.getSortingType();
		let shouldAdjustSortType = shouldUseComplexSort && sortType === oFF.SortType.DATA_CELL_VALUE || !shouldUseComplexSort && sortType === oFF.SortType.COMPLEX;
		if (shouldAdjustSortType)
		{
			let complexAndDataCellSortingOperation = sortingOperation;
			let direction = complexAndDataCellSortingOperation.getDirection();
			let isBreakGroupingEnabled = complexAndDataCellSortingOperation.isBreakGroupingEnabled();
			let isPreserveGroupingEnabled = complexAndDataCellSortingOperation.isPreserveGroupingEnabled();
			let sortPath = complexAndDataCellSortingOperation.getElementPath();
			sortingOperations.removeAt(index);
			let sortingObject;
			if (sortType === oFF.SortType.DATA_CELL_VALUE)
			{
				sortingObject = sortingManager.getComplexSorting(sortPath, true);
			}
			else
			{
				sortingObject = sortingManager.getDataCellSorting(sortPath, true);
			}
			sortingObject.setBreakGrouping(isBreakGroupingEnabled);
			sortingObject.setDirection(direction);
			sortingObject.setPreserveGrouping(isPreserveGroupingEnabled);
		}
	}
};
oFF.QSortUtils.applyCustomSortToSortingObject = function(customSortOrder, customSortPosition, sortingObject)
{
	if (oFF.notNull(customSortOrder) && oFF.notNull(customSortPosition) && oFF.notNull(sortingObject))
	{
		sortingObject.setCustomSort(customSortOrder);
		sortingObject.setCustomSortPosition(customSortPosition);
	}
};
oFF.QSortUtils.getBlendableDimensionSortMapKey = function(fieldName, datasetId)
{
	return oFF.XStringUtils.concatenate3(datasetId, ".", fieldName);
};
oFF.QSortUtils.getDefaultDimensionSortType = function(dimension)
{
	let keyField = dimension.getKeyField();
	let valueType = keyField.getValueType();
	if (valueType === oFF.XValueType.DATE || valueType === oFF.XValueType.DATE_TIME || valueType === oFF.XValueType.TIME)
	{
		return oFF.SortType.MEMBER_KEY;
	}
	return oFF.SortType.MEMBER_TEXT;
};
oFF.QSortUtils.getNewSortingObject = function(sortingManager, sortDimension)
{
	if (oFF.isNull(sortingManager) || oFF.isNull(sortDimension))
	{
		return null;
	}
	let sortingObject = sortingManager.newDimensionSorting(sortDimension);
	let modelComponent = sortingObject;
	if (oFF.notNull(modelComponent))
	{
		let stringBuffer = new oFF.XStringBuffer();
		stringBuffer.append(oFF.QSortUtils.SORT_OPERATION_INFO_PREFIX);
		stringBuffer.appendInt(oFF.QSortUtils.SORT_OPERATION_INFO_INDEX);
		modelComponent.setName(stringBuffer.toString());
		sortingManager.getDimensionSorting(sortDimension, true);
	}
	return sortingObject;
};
oFF.QSortUtils.getSortType = function(sortingObject, sortField, supportsSortDirectionForHierarchySortType, isHierarchyActive)
{
	let sortType = null;
	if (!supportsSortDirectionForHierarchySortType && isHierarchyActive && (sortingObject.getSortingType().isEqualTo(oFF.SortType.HIERARCHY) || sortingObject.getSortingType().isEqualTo(oFF.SortType.MEMBER_KEY)))
	{
		sortingObject.setSortByPresentation(sortField.getPresentationType());
		sortType = sortingObject.getSortingType();
	}
	else if (isHierarchyActive)
	{
		sortType = oFF.SortType.HIERARCHY;
		sortingObject.setSortType(sortType);
	}
	else if (sortField.isKeyField())
	{
		sortType = oFF.SortType.MEMBER_KEY;
		sortingObject.setSortType(sortType);
	}
	else
	{
		sortingObject.setSortByPresentation(sortField.getPresentationType());
		sortType = sortingObject.getSortingType();
	}
	return sortType;
};
oFF.QSortUtils.hasNonAccountOrMeasureDimensionOnColumn = function(queryModel)
{
	let columnDimensions = queryModel.getColumnsAxis().getDimensions();
	return oFF.XCollectionUtils.contains(columnDimensions, (dimension) => {
		return dimension !== queryModel.getPrimaryCalculationDimension() && dimension !== queryModel.getSecondaryCalculationDimension();
	});
};
oFF.QSortUtils.isSortTupleValidForDataCellSort = function(queryModel)
{
	let measureDimension = queryModel.getDimensionByType(oFF.DimensionType.MEASURE_STRUCTURE);
	let accountDimension = queryModel.getDimensionByType(oFF.DimensionType.ACCOUNT);
	let measureDimensionAxisType = oFF.notNull(measureDimension) ? measureDimension.getAxisType() : null;
	let accountDimensionAxisType = oFF.notNull(accountDimension) ? accountDimension.getAxisType() : null;
	if (measureDimensionAxisType === oFF.AxisType.ROWS || measureDimensionAxisType === oFF.AxisType.COLUMNS && (accountDimensionAxisType === oFF.AxisType.ROWS || accountDimensionAxisType === oFF.AxisType.COLUMNS))
	{
		return measureDimensionAxisType === accountDimensionAxisType;
	}
	return true;
};
oFF.QSortUtils.mapSortDirection = function(direction)
{
	switch (direction)
	{
		case "ASCENDING":
			return oFF.XSortDirection.ASCENDING;

		case "DESCENDING":
			return oFF.XSortDirection.DESCENDING;

		case "NONE":
			return oFF.XSortDirection.NONE;

		default:
			return oFF.XSortDirection.DEFAULT_VALUE;
	}
};
oFF.QSortUtils.removeAllSortsByMeasure = function(queryModel)
{
	let sortingManager = queryModel.getSortingManager();
	let sortingOperations = sortingManager.getSortingOperations();
	for (let index = sortingOperations.size() - 1; index >= 0; index--)
	{
		let sortingOperation = sortingOperations.get(index);
		let sortType = sortingOperation.getSortingType();
		let isMeasureSort = sortType === oFF.SortType.DATA_CELL_VALUE || sortType === oFF.SortType.COMPLEX || sortType === oFF.SortType.MEASURE;
		if (isMeasureSort)
		{
			sortingOperations.removeAt(index);
		}
	}
};

oFF.QPersistedPlaceholderTag = function() {};
oFF.QPersistedPlaceholderTag.prototype = new oFF.XObject();
oFF.QPersistedPlaceholderTag.prototype._ff_c = "QPersistedPlaceholderTag";

oFF.QPersistedPlaceholderTag.PERSISTED_QUERY_PLACEHOLDER = "PersistedQueryPlaceholder";
oFF.QPersistedPlaceholderTag.prototype.m_canonicalDateContext = null;
oFF.QPersistedPlaceholderTag.prototype.m_name = null;
oFF.QPersistedPlaceholderTag.prototype.getCanonicalDateContext = function()
{
	return this.m_canonicalDateContext;
};
oFF.QPersistedPlaceholderTag.prototype.getName = function()
{
	return this.m_name;
};
oFF.QPersistedPlaceholderTag.prototype.setCanonicalDateContext = function(canonicalDateContext)
{
	this.m_canonicalDateContext = canonicalDateContext;
};
oFF.QPersistedPlaceholderTag.prototype.setName = function(name)
{
	this.m_name = name;
};
oFF.QPersistedPlaceholderTag.prototype.setupPersistedPlaceholderTag = function(name, canonicalDateContext)
{
	this.m_name = name;
	this.m_canonicalDateContext = canonicalDateContext;
};

oFF.QTimeSelectionPlaceholderToDate = function() {};
oFF.QTimeSelectionPlaceholderToDate.prototype = new oFF.QTimeSelectionPlaceholder();
oFF.QTimeSelectionPlaceholderToDate.prototype._ff_c = "QTimeSelectionPlaceholderToDate";

oFF.QTimeSelectionPlaceholderToDate.TIME_OPERATION_GRANULARITY = "timeOperationGranularity";
oFF.QTimeSelectionPlaceholderToDate.createTimeSelectionPlaceholderToDateFromPlaceholderString = function(selectionPlaceholderString)
{
	try
	{
		let selectionPlaceholderJson = oFF.JsonParserFactory.createFromString(selectionPlaceholderString);
		let selectionPlaceholderStructure = selectionPlaceholderJson.asStructure();
		let timeSelectionPlaceholder = new oFF.QTimeSelectionPlaceholderToDate();
		timeSelectionPlaceholder.setupSelectionPlaceholderToDateFromStructure(selectionPlaceholderStructure);
		return timeSelectionPlaceholder;
	}
	catch (e)
	{
		return null;
	}
};
oFF.QTimeSelectionPlaceholderToDate.prototype.m_timeOperationGranularity = null;
oFF.QTimeSelectionPlaceholderToDate.prototype.getTimeOperationGranularity = function()
{
	return this.m_timeOperationGranularity;
};
oFF.QTimeSelectionPlaceholderToDate.prototype.serializeToJson = function()
{
	let selectionPlaceholderJson = oFF.QTimeSelectionPlaceholder.prototype.serializeToJson.call( this );
	if (oFF.notNull(this.m_timeOperationGranularity))
	{
		selectionPlaceholderJson.putString(oFF.QTimeSelectionPlaceholderToDate.TIME_OPERATION_GRANULARITY, this.m_timeOperationGranularity.getName());
	}
	return selectionPlaceholderJson;
};
oFF.QTimeSelectionPlaceholderToDate.prototype.setTimeOperationGranularity = function(timeOperationGranularity)
{
	this.m_timeOperationGranularity = timeOperationGranularity;
};
oFF.QTimeSelectionPlaceholderToDate.prototype.setupSelectionPlaceholderToDateFromStructure = function(selectionPlaceholderStructure)
{
	oFF.QTimeSelectionPlaceholder.prototype.setupSelectionPlaceholderFromStructure.call( this , selectionPlaceholderStructure);
	this.m_timeOperationGranularity = oFF.DateTimeGranularityType.lookup(selectionPlaceholderStructure.getStringByKey(oFF.QTimeSelectionPlaceholderToDate.TIME_OPERATION_GRANULARITY));
};

oFF.ValueHelpListenerDecorator = function() {};
oFF.ValueHelpListenerDecorator.prototype = new oFF.XObject();
oFF.ValueHelpListenerDecorator.prototype._ff_c = "ValueHelpListenerDecorator";

oFF.ValueHelpListenerDecorator.create = function(originalListener)
{
	let wrapper = new oFF.ValueHelpListenerDecorator();
	wrapper.m_originalListener = originalListener;
	return wrapper;
};
oFF.ValueHelpListenerDecorator.prototype.m_originalListener = null;
oFF.ValueHelpListenerDecorator.prototype.m_result = null;
oFF.ValueHelpListenerDecorator.prototype.getResult = function()
{
	return this.m_result;
};
oFF.ValueHelpListenerDecorator.prototype.onValuehelpExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	this.m_result = this.rewriteToNodeResponse(extResult);
	if (oFF.notNull(this.m_originalListener))
	{
		this.m_originalListener.onValuehelpExecuted(this.m_result, resultSetContainer, customIdentifier);
	}
};
oFF.ValueHelpListenerDecorator.prototype.releaseObject = function()
{
	this.m_originalListener = null;
	this.m_result = null;
};
oFF.ValueHelpListenerDecorator.prototype.rewriteToNodeResponse = function(result)
{
	let nodes = null;
	let data = result.getData();
	if (oFF.notNull(data))
	{
		nodes = oFF.XList.create();
		let size = data.size();
		for (let i = 0; i < size; i++)
		{
			nodes.add(data.get(i));
		}
	}
	return oFF.ExtResult.create(nodes, result);
};

oFF.QFunctionalVariableParameter = function() {};
oFF.QFunctionalVariableParameter.prototype = new oFF.XObject();
oFF.QFunctionalVariableParameter.prototype._ff_c = "QFunctionalVariableParameter";

oFF.QFunctionalVariableParameter.createParameter = function(name, description, parameterValues, variable)
{
	let parameterValue = new oFF.QFunctionalVariableParameter();
	parameterValue.m_id = oFF.XStringUtils.isNotNullAndNotEmpty(name) ? name : oFF.XStringUtils.concatenate2(variable.getName(), "-Parameter");
	parameterValue.m_name = name;
	parameterValue.m_description = description;
	parameterValue.m_parameterValues = parameterValues;
	return parameterValue;
};
oFF.QFunctionalVariableParameter.prototype.m_description = null;
oFF.QFunctionalVariableParameter.prototype.m_id = null;
oFF.QFunctionalVariableParameter.prototype.m_name = null;
oFF.QFunctionalVariableParameter.prototype.m_parameterValues = null;
oFF.QFunctionalVariableParameter.prototype.cloneExt = function(flags)
{
	let parameterValue = new oFF.QFunctionalVariableParameter();
	parameterValue.m_id = this.m_id;
	parameterValue.m_name = this.m_name;
	parameterValue.m_description = this.m_description;
	parameterValue.m_parameterValues = oFF.XCollectionUtils.createListOfClones(this.m_parameterValues);
	return parameterValue;
};
oFF.QFunctionalVariableParameter.prototype.copyFrom = function(other, flags)
{
	oFF.XObject.prototype.copyFrom.call( this , other, flags);
	let originParameter = other;
	this.m_name = originParameter.m_name;
	this.m_description = originParameter.m_description;
	if (oFF.notNull(originParameter.m_parameterValues))
	{
		this.m_parameterValues = oFF.XCollectionUtils.createListOfClones(originParameter.m_parameterValues);
	}
};
oFF.QFunctionalVariableParameter.prototype.getName = function()
{
	return this.m_name;
};
oFF.QFunctionalVariableParameter.prototype.getParameterValues = function()
{
	return this.m_parameterValues;
};
oFF.QFunctionalVariableParameter.prototype.getText = function()
{
	return this.m_description;
};
oFF.QFunctionalVariableParameter.prototype.isEqualTo = function(other)
{
	if (this === other)
	{
		return true;
	}
	if (oFF.isNull(other))
	{
		return false;
	}
	return oFF.XString.isEqual(this.m_id, other.m_id);
};
oFF.QFunctionalVariableParameter.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_parameterValues = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_parameterValues);
};

oFF.QBindingAttributeFilterDescription = function() {};
oFF.QBindingAttributeFilterDescription.prototype = new oFF.QBindingAttribute();
oFF.QBindingAttributeFilterDescription.prototype._ff_c = "QBindingAttributeFilterDescription";

oFF.QBindingAttributeFilterDescription.create = function(cmds, type, protocol, path)
{
	let newObj = new oFF.QBindingAttributeFilterDescription();
	newObj.setupBind(cmds, type, protocol, path);
	return newObj;
};
oFF.QBindingAttributeFilterDescription.prototype.getString = function()
{
	if (oFF.notNull(this.m_cmds))
	{
		let queryManager = this.m_cmds.getQueryManager();
		if (oFF.notNull(queryManager))
		{
			let filterType = this.m_splittedPath.get(2);
			let filter = queryManager.getQueryModel().getFilter();
			let expression = null;
			if (oFF.XString.isEqual(filterType, "dynamic"))
			{
				expression = filter.getDynamicFilter();
			}
			else if (oFF.XString.isEqual(filterType, "fixed"))
			{
				expression = filter.getFixedFilter();
			}
			let text = null;
			if (oFF.notNull(expression))
			{
				text = expression.serializeToString(oFF.QModelFormat.INA_REPOSITORY);
			}
			return text;
		}
	}
	return null;
};

oFF.QBindingAttributeFilterSingleMemberSelection = function() {};
oFF.QBindingAttributeFilterSingleMemberSelection.prototype = new oFF.QBindingAttribute();
oFF.QBindingAttributeFilterSingleMemberSelection.prototype._ff_c = "QBindingAttributeFilterSingleMemberSelection";

oFF.QBindingAttributeFilterSingleMemberSelection.create = function(cmds, type, protocol, path)
{
	let newObj = new oFF.QBindingAttributeFilterSingleMemberSelection();
	newObj.setupBind(cmds, type, protocol, path);
	return newObj;
};
oFF.QBindingAttributeFilterSingleMemberSelection.prototype.getString = function()
{
	return null;
};
oFF.QBindingAttributeFilterSingleMemberSelection.prototype.setString = function(value)
{
	oFF.QBindingAttribute.prototype.setString.call( this , value);
};

oFF.QBindingAttributePresentation = function() {};
oFF.QBindingAttributePresentation.prototype = new oFF.QBindingAttribute();
oFF.QBindingAttributePresentation.prototype._ff_c = "QBindingAttributePresentation";

oFF.QBindingAttributePresentation.create = function(cmds, type, protocol, path)
{
	let newObj = new oFF.QBindingAttributePresentation();
	newObj.setupBind(cmds, type, protocol, path);
	newObj.m_dimName = newObj.m_splittedPath.get(3);
	return newObj;
};
oFF.QBindingAttributePresentation.prototype.m_dimName = null;
oFF.QBindingAttributePresentation.prototype.getString = function()
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		let dimension = queryManager.getQueryModel().getDimensionByName(this.m_dimName);
		if (oFF.notNull(dimension))
		{
			let resultSetFields = dimension.getResultSetFields();
			if (resultSetFields.size() === 1)
			{
				let field = resultSetFields.get(0);
				let presentationType = field.getPresentationType();
				return presentationType.getName();
			}
		}
	}
	return null;
};
oFF.QBindingAttributePresentation.prototype.setString = function(value)
{
	let cmds = this.getConvenienceCommands();
	if (oFF.notNull(cmds) && oFF.notNull(value))
	{
		let presentationType = oFF.PresentationType.lookup(value);
		if (oFF.notNull(presentationType))
		{
			cmds.setField(null, this.m_dimName, presentationType, null, oFF.QContextType.RESULT_SET);
		}
	}
};

oFF.QBindingAttributePresentationValueHelp = function() {};
oFF.QBindingAttributePresentationValueHelp.prototype = new oFF.QBindingAttribute();
oFF.QBindingAttributePresentationValueHelp.prototype._ff_c = "QBindingAttributePresentationValueHelp";

oFF.QBindingAttributePresentationValueHelp.create = function(cmds, type, protocol, path)
{
	let newObj = new oFF.QBindingAttributePresentationValueHelp();
	newObj.setupBind(cmds, type, protocol, path);
	return newObj;
};
oFF.QBindingAttributePresentationValueHelp.prototype.getString = function()
{
	return null;
};
oFF.QBindingAttributePresentationValueHelp.prototype.setString = function(value)
{
	oFF.QBindingAttribute.prototype.setString.call( this , value);
};

oFF.QBindingMenu = function() {};
oFF.QBindingMenu.prototype = new oFF.QBindingAttribute();
oFF.QBindingMenu.prototype._ff_c = "QBindingMenu";

oFF.QBindingMenu.ITEMS = "Items";
oFF.QBindingMenu.NAME = "Name";
oFF.QBindingMenu.SCRIPT = "Script";
oFF.QBindingMenu.TEXT = "Text";
oFF.QBindingMenu.create = function(cmds, type, protocol, path)
{
	let newObj = new oFF.QBindingMenu();
	newObj.setupBind(cmds, type, protocol, path);
	return newObj;
};
oFF.QBindingMenu.prototype.addAxisOperations = function(dpName, parentList, axisType)
{
	let axesItems = this.addNode(parentList, axisType.getName(), axisType.getName());
	let theScript = oFF.XStringBuffer.create().append("$('dp:").append(dpName).append("').clearAxisStr('").append(axisType.getName()).append("');").toString();
	this.addLeaf(axesItems, oFF.XStringUtils.concatenate2("ClearAxis", axisType.getName()), "Clear", theScript);
};
oFF.QBindingMenu.prototype.addLeaf = function(items, name, text, script)
{
	let theStructure = items.addNewStructure();
	theStructure.putString(oFF.QBindingMenu.NAME, name);
	theStructure.putString(oFF.QBindingMenu.TEXT, text);
	theStructure.putString(oFF.QBindingMenu.SCRIPT, script);
	return theStructure;
};
oFF.QBindingMenu.prototype.addMoveToOp = function(dpName, axisOp, currentDim, axisType)
{
	if (currentDim.getAxisType() !== axisType && currentDim.supportsAxis(axisType))
	{
		let theScript = oFF.XStringBuffer.create().append("$('dp:").append(dpName).append("').moveDimensionToAxisStr('").append(currentDim.getName()).append("','").append(axisType.getName()).append("');").toString();
		this.addLeaf(axisOp, axisType.getName(), axisType.getName(), theScript);
	}
};
oFF.QBindingMenu.prototype.addNode = function(items, name, text)
{
	let theStructure = items.addNewStructure();
	theStructure.putString(oFF.QBindingMenu.NAME, name);
	theStructure.putString(oFF.QBindingMenu.TEXT, text);
	let theItems = theStructure.putNewList(oFF.QBindingMenu.ITEMS);
	return theItems;
};
oFF.QBindingMenu.prototype.getElement = function()
{
	let root = null;
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		let model = queryManager.getQueryModel();
		root = oFF.PrFactory.createStructure();
		let dpName = "DP1";
		let items = root.putNewList(oFF.QBindingMenu.ITEMS);
		let queryList = this.addNode(items, "Query", "Query");
		let bufferVar = oFF.XStringBuffer.create().append("$('dialog:variablescreen')");
		bufferVar.append(".setDataProvider('").append(dpName).append("').open();");
		this.addLeaf(queryList, "VariableScreen", "Variable Screen", bufferVar.toString());
		let dimItems = this.addNode(items, "Dims", "Dimensions");
		let dimensions = model.getDimensions();
		for (let i = 0; i < dimensions.size(); i++)
		{
			let currentDim = dimensions.get(i);
			let dimPropItems = this.addNode(dimItems, currentDim.getName(), this.getText(currentDim));
			let currentPresentations = this.addNode(dimPropItems, "SetPresentation", "Set Presentation");
			let fields = currentDim.getFields();
			for (let k = 0; k < fields.size(); k++)
			{
				let field = fields.getFieldAt(k);
				let presentationType = field.getPresentationType();
				let buffer = oFF.XStringBuffer.create().append("$('dp:").append(dpName).append("')");
				buffer.append(".clearAllResultSetFields('").append(currentDim.getName()).append("')");
				buffer.append(".addFieldByTypeToResultSetStr('").append(currentDim.getName()).append("','").append(presentationType.getName()).append("');");
				let theScript = buffer.toString();
				this.addLeaf(currentPresentations, presentationType.getName(), presentationType.getName(), theScript);
			}
			if (currentPresentations.size() === 0)
			{
				dimPropItems.removeAt(dimPropItems.size() - 1);
			}
			let axisOp = this.addNode(dimPropItems, "MoveTo", "Move to axis...");
			this.addMoveToOp(dpName, axisOp, currentDim, oFF.AxisType.COLUMNS);
			this.addMoveToOp(dpName, axisOp, currentDim, oFF.AxisType.ROWS);
			this.addMoveToOp(dpName, axisOp, currentDim, oFF.AxisType.FREE);
			if (axisOp.size() === 0)
			{
				dimPropItems.removeAt(dimPropItems.size() - 1);
			}
		}
		let axesItems = this.addNode(items, "Axes", "Axes");
		this.addAxisOperations(dpName, axesItems, oFF.AxisType.ROWS);
		this.addAxisOperations(dpName, axesItems, oFF.AxisType.COLUMNS);
	}
	return root;
};
oFF.QBindingMenu.prototype.getText = function(nameTextObj)
{
	let text = nameTextObj.getText();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(text))
	{
		return text;
	}
	else
	{
		return nameTextObj.getName();
	}
};
oFF.QBindingMenu.prototype.onModelComponentChanged = function(modelComponent, customIdentifier)
{
	oFF.QBindingAttribute.prototype.onModelComponentChanged.call( this , modelComponent, customIdentifier);
};

oFF.QCapabilities = function() {};
oFF.QCapabilities.prototype = new oFF.XObject();
oFF.QCapabilities.prototype._ff_c = "QCapabilities";

oFF.QCapabilities.create = function()
{
	let newObj = new oFF.QCapabilities();
	newObj.m_supportedResultAlignmentLevel = oFF.QModelLevel.NONE;
	newObj.m_supportedVisibilityLocation = oFF.QModelLevel.NONE;
	newObj.m_supportedReorderingCapability = oFF.ReorderingCapability.NONE;
	newObj.m_supportedResultAlignment = oFF.XList.create();
	newObj.m_supportedConditionalResults = oFF.XList.create();
	newObj.m_supportedSortingTypes = oFF.XSetOfNameObject.create();
	newObj.m_supportedBreakGrouping = oFF.XSetOfNameObject.create();
	return newObj;
};
oFF.QCapabilities.prototype.m_serverMetadataVersion = null;
oFF.QCapabilities.prototype.m_supportedBreakGrouping = null;
oFF.QCapabilities.prototype.m_supportedConditionalResults = null;
oFF.QCapabilities.prototype.m_supportedReorderingCapability = null;
oFF.QCapabilities.prototype.m_supportedResultAlignment = null;
oFF.QCapabilities.prototype.m_supportedResultAlignmentLevel = null;
oFF.QCapabilities.prototype.m_supportedSortingTypes = null;
oFF.QCapabilities.prototype.m_supportedVisibilityLocation = null;
oFF.QCapabilities.prototype.m_supportsAggregationNopNull = false;
oFF.QCapabilities.prototype.m_supportsAggregationNopNullZero = false;
oFF.QCapabilities.prototype.m_supportsAggregationsFirstLastAverageOfDimension = false;
oFF.QCapabilities.prototype.m_supportsAsyncBatchRequests = false;
oFF.QCapabilities.prototype.m_supportsAsyncRemoteModelValidation = false;
oFF.QCapabilities.prototype.m_supportsAttributeValueLookup = false;
oFF.QCapabilities.prototype.m_supportsAutomaticVariableSubmit = false;
oFF.QCapabilities.prototype.m_supportsAverageCountNullZero = false;
oFF.QCapabilities.prototype.m_supportsBatchBlendingRsStreaming = false;
oFF.QCapabilities.prototype.m_supportsBatchRsStreaming = false;
oFF.QCapabilities.prototype.m_supportsCDSProjectionViews = false;
oFF.QCapabilities.prototype.m_supportsCalculateWithNullCellsUnitType = false;
oFF.QCapabilities.prototype.m_supportsCalculatedDimensions = false;
oFF.QCapabilities.prototype.m_supportsCancelRunningQueries = false;
oFF.QCapabilities.prototype.m_supportsCartesianFilterIntersect = false;
oFF.QCapabilities.prototype.m_supportsCatalogServiceV2 = false;
oFF.QCapabilities.prototype.m_supportsCeScenarioParams = false;
oFF.QCapabilities.prototype.m_supportsCellDocumentId = false;
oFF.QCapabilities.prototype.m_supportsCellValueOperand = false;
oFF.QCapabilities.prototype.m_supportsCheckVariables = false;
oFF.QCapabilities.prototype.m_supportsClientInfo = false;
oFF.QCapabilities.prototype.m_supportsComplexFilter = false;
oFF.QCapabilities.prototype.m_supportsComplexTupleFilter = false;
oFF.QCapabilities.prototype.m_supportsConditionalResultVisibility = false;
oFF.QCapabilities.prototype.m_supportsConditionalResults = false;
oFF.QCapabilities.prototype.m_supportsConditions = false;
oFF.QCapabilities.prototype.m_supportsConditionsWithHiddenMeasures = false;
oFF.QCapabilities.prototype.m_supportsConditionsWithVersions = false;
oFF.QCapabilities.prototype.m_supportsConvertToFlatFilter = false;
oFF.QCapabilities.prototype.m_supportsCorrectDimensionDescription = false;
oFF.QCapabilities.prototype.m_supportsCubeBlending = false;
oFF.QCapabilities.prototype.m_supportsCubeBlendingAggregation = false;
oFF.QCapabilities.prototype.m_supportsCubeBlendingCustomMember = false;
oFF.QCapabilities.prototype.m_supportsCubeBlendingOutOfContext = false;
oFF.QCapabilities.prototype.m_supportsCubeBlendingPersistanceType = false;
oFF.QCapabilities.prototype.m_supportsCubeBlendingProperties = false;
oFF.QCapabilities.prototype.m_supportsCubeBlendingReadmode = false;
oFF.QCapabilities.prototype.m_supportsCubeBlendingSorting = false;
oFF.QCapabilities.prototype.m_supportsCubeBlendingWithNSubqueries = false;
oFF.QCapabilities.prototype.m_supportsCubeCache = false;
oFF.QCapabilities.prototype.m_supportsCummulative = false;
oFF.QCapabilities.prototype.m_supportsCurrencyTranslation = false;
oFF.QCapabilities.prototype.m_supportsCurrentMemberFilterExtension = false;
oFF.QCapabilities.prototype.m_supportsCustomDimension2 = false;
oFF.QCapabilities.prototype.m_supportsCustomDimension2MemberMetadata = false;
oFF.QCapabilities.prototype.m_supportsCustomDimensionFilterCapability = false;
oFF.QCapabilities.prototype.m_supportsCustomDimensionMemberExecutionStep = false;
oFF.QCapabilities.prototype.m_supportsCustomHierarchy = false;
oFF.QCapabilities.prototype.m_supportsCustomMeasureSortOrder = false;
oFF.QCapabilities.prototype.m_supportsCustomMemberKeySortOrder = false;
oFF.QCapabilities.prototype.m_supportsCustomSort = false;
oFF.QCapabilities.prototype.m_supportsDataCellContexts = false;
oFF.QCapabilities.prototype.m_supportsDataCellMixedValues = false;
oFF.QCapabilities.prototype.m_supportsDataCells = false;
oFF.QCapabilities.prototype.m_supportsDataRefreshAndDataTopicality = false;
oFF.QCapabilities.prototype.m_supportsDetailedResponseExpansion = false;
oFF.QCapabilities.prototype.m_supportsDimensionDefaultMember = false;
oFF.QCapabilities.prototype.m_supportsDimensionHierarchyLevels = false;
oFF.QCapabilities.prototype.m_supportsDimensionHierarchyMetadata = false;
oFF.QCapabilities.prototype.m_supportsDimensionKeyAttributes = false;
oFF.QCapabilities.prototype.m_supportsDimensionVisibility = false;
oFF.QCapabilities.prototype.m_supportsDirectVariableTransfer = false;
oFF.QCapabilities.prototype.m_supportsDisplayAttributes = false;
oFF.QCapabilities.prototype.m_supportsDisplayHierarchyFixInFilter = false;
oFF.QCapabilities.prototype.m_supportsDynamicRestrictionOnFormula = false;
oFF.QCapabilities.prototype.m_supportsDynamicVariableRefresh = false;
oFF.QCapabilities.prototype.m_supportsEncodedResultset = false;
oFF.QCapabilities.prototype.m_supportsErrorAboveLevel = false;
oFF.QCapabilities.prototype.m_supportsExceptionAggregationAvgNullSelectionMember = false;
oFF.QCapabilities.prototype.m_supportsExceptionAggregationCountNullSelectionMember = false;
oFF.QCapabilities.prototype.m_supportsExceptionAggregationDimsFormulas = false;
oFF.QCapabilities.prototype.m_supportsExceptionAggregationFirstLastSelectionMember = false;
oFF.QCapabilities.prototype.m_supportsExceptionSettings = false;
oFF.QCapabilities.prototype.m_supportsExceptionThresholdNoPrec = false;
oFF.QCapabilities.prototype.m_supportsExceptions = false;
oFF.QCapabilities.prototype.m_supportsExceptionsV2 = false;
oFF.QCapabilities.prototype.m_supportsExpandBottomUp = false;
oFF.QCapabilities.prototype.m_supportsExtendedDimensionVisibility = false;
oFF.QCapabilities.prototype.m_supportsExtendedDimensions = false;
oFF.QCapabilities.prototype.m_supportsExtendedDimensionsChangeDefaultRenamingAndDescription = false;
oFF.QCapabilities.prototype.m_supportsExtendedDimensionsCopyAllHierarchies = false;
oFF.QCapabilities.prototype.m_supportsExtendedDimensionsFieldMapping = false;
oFF.QCapabilities.prototype.m_supportsExtendedDimensionsJoinCardinality = false;
oFF.QCapabilities.prototype.m_supportsExtendedDimensionsJoinColumns = false;
oFF.QCapabilities.prototype.m_supportsExtendedDimensionsOuterJoin = false;
oFF.QCapabilities.prototype.m_supportsExtendedDimensionsSkip = false;
oFF.QCapabilities.prototype.m_supportsExtendedKeyFigureProperties = false;
oFF.QCapabilities.prototype.m_supportsExtendedSort = false;
oFF.QCapabilities.prototype.m_supportsExtendedVariableDefinition = false;
oFF.QCapabilities.prototype.m_supportsF4FilterForTextField = false;
oFF.QCapabilities.prototype.m_supportsFilterCapabilityExtended = false;
oFF.QCapabilities.prototype.m_supportsFixHierarchyFlagKeys = false;
oFF.QCapabilities.prototype.m_supportsFixMetadataHierarchyAttributes = false;
oFF.QCapabilities.prototype.m_supportsFlexibleClientInfo = false;
oFF.QCapabilities.prototype.m_supportsFormulaMeasures = false;
oFF.QCapabilities.prototype.m_supportsFunctionalVariables = false;
oFF.QCapabilities.prototype.m_supportsHierAttHierFields = false;
oFF.QCapabilities.prototype.m_supportsHierCarryingDim = false;
oFF.QCapabilities.prototype.m_supportsHierNavCounter = false;
oFF.QCapabilities.prototype.m_supportsHierarchyCatalog = false;
oFF.QCapabilities.prototype.m_supportsHierarchyDefaults = false;
oFF.QCapabilities.prototype.m_supportsHierarchyLevelMetadata = false;
oFF.QCapabilities.prototype.m_supportsHierarchyLevelOffsetFilter = false;
oFF.QCapabilities.prototype.m_supportsHierarchyMetadata = false;
oFF.QCapabilities.prototype.m_supportsHierarchyNavigationDeltaMode = false;
oFF.QCapabilities.prototype.m_supportsHierarchyPath = false;
oFF.QCapabilities.prototype.m_supportsHierarchyPathPresentationType = false;
oFF.QCapabilities.prototype.m_supportsHierarchyRestNode = false;
oFF.QCapabilities.prototype.m_supportsHierarchyTrapezoidFilter = false;
oFF.QCapabilities.prototype.m_supportsHierarchyVirtualRootNode = false;
oFF.QCapabilities.prototype.m_supportsIDAttributeForMeasureDimension = false;
oFF.QCapabilities.prototype.m_supportsIgnoreExternalDimensions = false;
oFF.QCapabilities.prototype.m_supportsIgnoreUnitOfZeroValueInAggregation = false;
oFF.QCapabilities.prototype.m_supportsInAModelExternalDimension = false;
oFF.QCapabilities.prototype.m_supportsInAModelExternalValuehelp = false;
oFF.QCapabilities.prototype.m_supportsInaCurrentMember = false;
oFF.QCapabilities.prototype.m_supportsInputEnablementFilterSettings = false;
oFF.QCapabilities.prototype.m_supportsInputReadinessFilter = false;
oFF.QCapabilities.prototype.m_supportsInputReadinessStates = false;
oFF.QCapabilities.prototype.m_supportsInputReadinessWithNavigationalAttributes = false;
oFF.QCapabilities.prototype.m_supportsIntersectLayers = false;
oFF.QCapabilities.prototype.m_supportsIteratedFormula = false;
oFF.QCapabilities.prototype.m_supportsKeepOriginalTexts = false;
oFF.QCapabilities.prototype.m_supportsLightweightMetadata = false;
oFF.QCapabilities.prototype.m_supportsLocaleSorting = false;
oFF.QCapabilities.prototype.m_supportsMaintainsVariableVariants = false;
oFF.QCapabilities.prototype.m_supportsMaxDrillLevel = false;
oFF.QCapabilities.prototype.m_supportsMeasureMemberCurrencyTranslatons = false;
oFF.QCapabilities.prototype.m_supportsMeasureMemberDefinition = false;
oFF.QCapabilities.prototype.m_supportsMeasureMemberDetails = false;
oFF.QCapabilities.prototype.m_supportsMeasureMemberType = false;
oFF.QCapabilities.prototype.m_supportsMeasureMemberUnitTranslations = false;
oFF.QCapabilities.prototype.m_supportsMemberUniqueNamesCompatibility = false;
oFF.QCapabilities.prototype.m_supportsMemberVisibility = false;
oFF.QCapabilities.prototype.m_supportsMetadataDataCategory = false;
oFF.QCapabilities.prototype.m_supportsMetadataDataSourceDefinitionValidation = false;
oFF.QCapabilities.prototype.m_supportsMetadataDimensionOthers = false;
oFF.QCapabilities.prototype.m_supportsMetadataHasExternalHierarchies = false;
oFF.QCapabilities.prototype.m_supportsMetadataResultFormatOptions = false;
oFF.QCapabilities.prototype.m_supportsMixedDisplayKey = false;
oFF.QCapabilities.prototype.m_supportsMultiSource = false;
oFF.QCapabilities.prototype.m_supportsMultipleExAggDimsInCalcPlan = false;
oFF.QCapabilities.prototype.m_supportsNamePath = false;
oFF.QCapabilities.prototype.m_supportsNamedCustomMember = false;
oFF.QCapabilities.prototype.m_supportsNewValuesExtendedFormat = false;
oFF.QCapabilities.prototype.m_supportsNewValuesImplicitUnlock = false;
oFF.QCapabilities.prototype.m_supportsNoDataActions = false;
oFF.QCapabilities.prototype.m_supportsNullZeroSuppression = false;
oFF.QCapabilities.prototype.m_supportsNumberAsString = false;
oFF.QCapabilities.prototype.m_supportsNumericShiftPercent = false;
oFF.QCapabilities.prototype.m_supportsObtainability = false;
oFF.QCapabilities.prototype.m_supportsOthersDetailsFromConditions = false;
oFF.QCapabilities.prototype.m_supportsOthersFromConditions = false;
oFF.QCapabilities.prototype.m_supportsPagingTupleCountBeforeSlicing = false;
oFF.QCapabilities.prototype.m_supportsPersistedInA = false;
oFF.QCapabilities.prototype.m_supportsPlanningOnCalculatedDimensions = false;
oFF.QCapabilities.prototype.m_supportsQueryCurrencyTranslation = false;
oFF.QCapabilities.prototype.m_supportsQueryDataCellModelDefaults = false;
oFF.QCapabilities.prototype.m_supportsRRI3 = false;
oFF.QCapabilities.prototype.m_supportsRSCellFormatTypeSpecific = false;
oFF.QCapabilities.prototype.m_supportsReinitVariables = false;
oFF.QCapabilities.prototype.m_supportsRemoteBlending = false;
oFF.QCapabilities.prototype.m_supportsRemoteBlendingBW = false;
oFF.QCapabilities.prototype.m_supportsRemoteFilter = false;
oFF.QCapabilities.prototype.m_supportsReportReportInterface = false;
oFF.QCapabilities.prototype.m_supportsRequestTimezone = false;
oFF.QCapabilities.prototype.m_supportsRestrictedMeasures = false;
oFF.QCapabilities.prototype.m_supportsResultSetCache = false;
oFF.QCapabilities.prototype.m_supportsResultSetCellExplain = false;
oFF.QCapabilities.prototype.m_supportsResultSetEffectiveFilter = false;
oFF.QCapabilities.prototype.m_supportsResultSetHierarchyLevel = false;
oFF.QCapabilities.prototype.m_supportsResultSetInterval = false;
oFF.QCapabilities.prototype.m_supportsResultSetNumericValueWithInternalPrecision = false;
oFF.QCapabilities.prototype.m_supportsResultSetUnitIndex = false;
oFF.QCapabilities.prototype.m_supportsResultSetV2MetadataExtension1 = false;
oFF.QCapabilities.prototype.m_supportsResultsetFacets = false;
oFF.QCapabilities.prototype.m_supportsReturnMetadataExtensions = false;
oFF.QCapabilities.prototype.m_supportsReturnedDataSelection = false;
oFF.QCapabilities.prototype.m_supportsRootOrphansAfterVisibilityFilter = false;
oFF.QCapabilities.prototype.m_supportsRunAsUser = false;
oFF.QCapabilities.prototype.m_supportsSapDate = false;
oFF.QCapabilities.prototype.m_supportsSemanticObject = false;
oFF.QCapabilities.prototype.m_supportsServerState = false;
oFF.QCapabilities.prototype.m_supportsSetOperand = false;
oFF.QCapabilities.prototype.m_supportsSetOperandCurrentMemberSingleNavigation = false;
oFF.QCapabilities.prototype.m_supportsShutdown = false;
oFF.QCapabilities.prototype.m_supportsSidPresentation = false;
oFF.QCapabilities.prototype.m_supportsSimulation = false;
oFF.QCapabilities.prototype.m_supportsSortNewValues = false;
oFF.QCapabilities.prototype.m_supportsSortTupleMemberType = false;
oFF.QCapabilities.prototype.m_supportsSortTypes = false;
oFF.QCapabilities.prototype.m_supportsSortingDefaults = false;
oFF.QCapabilities.prototype.m_supportsSpatialChoropleth = false;
oFF.QCapabilities.prototype.m_supportsSpatialClustering = false;
oFF.QCapabilities.prototype.m_supportsSpatialFilter = false;
oFF.QCapabilities.prototype.m_supportsSpatialFilterSrid = false;
oFF.QCapabilities.prototype.m_supportsSpatialTransformDistanceFilter = false;
oFF.QCapabilities.prototype.m_supportsSpatialTransformation = false;
oFF.QCapabilities.prototype.m_supportsSqlTypeBoolean = false;
oFF.QCapabilities.prototype.m_supportsStatisticalAggregations = false;
oFF.QCapabilities.prototype.m_supportsStructureOnFreeAxis = false;
oFF.QCapabilities.prototype.m_supportsStructureRestrictionsInValueHelp = false;
oFF.QCapabilities.prototype.m_supportsSupplements = false;
oFF.QCapabilities.prototype.m_supportsSupportsRunningAggregation = false;
oFF.QCapabilities.prototype.m_supportsSuppressKeyfigureCalculation = false;
oFF.QCapabilities.prototype.m_supportsSuppressSupplements = false;
oFF.QCapabilities.prototype.m_supportsTechnicalAxis = false;
oFF.QCapabilities.prototype.m_supportsTextInHierarchyForCharacteristicsWithoutText = false;
oFF.QCapabilities.prototype.m_supportsTotalOperator = false;
oFF.QCapabilities.prototype.m_supportsTuplesOperand = false;
oFF.QCapabilities.prototype.m_supportsTuplesOperandFromDataSource = false;
oFF.QCapabilities.prototype.m_supportsUdhAlignment = false;
oFF.QCapabilities.prototype.m_supportsUdhKey = false;
oFF.QCapabilities.prototype.m_supportsUndefinedTupleCountTotals = false;
oFF.QCapabilities.prototype.m_supportsUnifiedDataCells = false;
oFF.QCapabilities.prototype.m_supportsUniqueAxisProperties = false;
oFF.QCapabilities.prototype.m_supportsUniqueHierarchyPath = false;
oFF.QCapabilities.prototype.m_supportsUnitTranslation = false;
oFF.QCapabilities.prototype.m_supportsUniversalDisplayHierarchies = false;
oFF.QCapabilities.prototype.m_supportsUniversalDisplayHierarchiesCustomDimensions = false;
oFF.QCapabilities.prototype.m_supportsUniversalDisplayHierarchiesZeroBased = false;
oFF.QCapabilities.prototype.m_supportsUniversalModel = false;
oFF.QCapabilities.prototype.m_supportsValueHelpHierarchyPath = false;
oFF.QCapabilities.prototype.m_supportsValueHelpWithAttributes = false;
oFF.QCapabilities.prototype.m_supportsVariableMasking = false;
oFF.QCapabilities.prototype.m_supportsVariableVariants = false;
oFF.QCapabilities.prototype.m_supportsVarianceOperator = false;
oFF.QCapabilities.prototype.m_supportsVersionParameters = false;
oFF.QCapabilities.prototype.m_supportsVersionPrivileges = false;
oFF.QCapabilities.prototype.m_supportsVirtualDataSourceTypeColumns = false;
oFF.QCapabilities.prototype.m_supportsVirtualDescription = false;
oFF.QCapabilities.prototype.m_supportsVisibilityFilter = false;
oFF.QCapabilities.prototype.m_supportsVisualAggregation = false;
oFF.QCapabilities.prototype.m_supportsWindowFunction = false;
oFF.QCapabilities.prototype.m_supportsZeroSuppression = false;
oFF.QCapabilities.prototype.m_systemName = null;
oFF.QCapabilities.prototype.m_systemType = null;
oFF.QCapabilities.prototype.addSupportedBreakGrouping = function(sortType)
{
	if (oFF.notNull(sortType))
	{
		this.m_supportedBreakGrouping.add(sortType);
	}
};
oFF.QCapabilities.prototype.addSupportedConditionalElement = function(element)
{
	this.m_supportedConditionalResults.add(element);
};
oFF.QCapabilities.prototype.addSupportedResultAlignment = function(supportedResultAlignment)
{
	this.m_supportedResultAlignment.add(supportedResultAlignment);
};
oFF.QCapabilities.prototype.addSupportedSortType = function(sortType)
{
	if (oFF.notNull(sortType))
	{
		this.m_supportedSortingTypes.add(sortType);
	}
};
oFF.QCapabilities.prototype.clearSupportedResultAlignment = function()
{
	this.m_supportedResultAlignment.clear();
};
oFF.QCapabilities.prototype.clearSupportedSortType = function()
{
	this.m_supportedSortingTypes.clear();
};
oFF.QCapabilities.prototype.cloneExt = function(flags)
{
	let target = new oFF.QCapabilities();
	target.m_systemType = this.m_systemType;
	target.m_systemName = this.m_systemName;
	target.m_serverMetadataVersion = this.m_serverMetadataVersion;
	target.m_supportsExtendedVariableDefinition = this.m_supportsExtendedVariableDefinition;
	target.m_supportsCustomDimensionFilterCapability = this.m_supportsCustomDimensionFilterCapability;
	target.m_supportsFormulaMeasures = this.m_supportsFormulaMeasures;
	target.m_supportsRestrictedMeasures = this.m_supportsRestrictedMeasures;
	target.m_supportsResultsetFacets = this.m_supportsResultsetFacets;
	target.m_supportsConditionalResultVisibility = this.m_supportsConditionalResultVisibility;
	target.m_supportsConditionalResults = this.m_supportsConditionalResults;
	target.m_supportsCartesianFilterIntersect = this.m_supportsCartesianFilterIntersect;
	target.m_supportsCheckVariables = this.m_supportsCheckVariables;
	target.m_supportsDirectVariableTransfer = this.m_supportsDirectVariableTransfer;
	target.m_supportsShutdown = this.m_supportsShutdown;
	target.m_supportsCellValueOperand = this.m_supportsCellValueOperand;
	target.m_supportsIntersectLayers = this.m_supportsIntersectLayers;
	target.m_supportsComplexFilter = this.m_supportsComplexFilter;
	target.m_supportsVisibilityFilter = this.m_supportsVisibilityFilter;
	target.m_supportsDataCellMixedValues = this.m_supportsDataCellMixedValues;
	target.m_supportsSetOperand = this.m_supportsSetOperand;
	target.m_supportsConvertToFlatFilter = this.m_supportsConvertToFlatFilter;
	target.m_supportsCummulative = this.m_supportsCummulative;
	target.m_supportsHierNavCounter = this.m_supportsHierNavCounter;
	target.m_supportsHierAttHierFields = this.m_supportsHierAttHierFields;
	target.m_supportsHierCarryingDim = this.m_supportsHierCarryingDim;
	target.m_supportsSortTypes = this.m_supportsSortTypes;
	target.m_supportsSpatialFilter = this.m_supportsSpatialFilter;
	target.m_supportsSpatialFilterSrid = this.m_supportsSpatialFilterSrid;
	target.m_supportsExtendedDimensions = this.m_supportsExtendedDimensions;
	target.m_supportsExtendedDimensionsOuterJoin = this.m_supportsExtendedDimensionsOuterJoin;
	target.m_supportsExtendedDimensionsSkip = this.m_supportsExtendedDimensionsSkip;
	target.m_supportsExtendedDimensionsJoinColumns = this.m_supportsExtendedDimensionsJoinColumns;
	target.m_supportsExtendedDimensionsFieldMapping = this.m_supportsExtendedDimensionsFieldMapping;
	target.m_supportsExtendedDimensionsJoinCardinality = this.m_supportsExtendedDimensionsJoinCardinality;
	target.m_supportsSortNewValues = this.m_supportsSortNewValues;
	target.m_supportsIgnoreUnitOfZeroValueInAggregation = this.m_supportsIgnoreUnitOfZeroValueInAggregation;
	target.m_supportsCubeBlendingWithNSubqueries = this.m_supportsCubeBlendingWithNSubqueries;
	target.m_supportsCubeBlendingPersistanceType = this.m_supportsCubeBlendingPersistanceType;
	target.m_supportsExtendedDimensionsChangeDefaultRenamingAndDescription = this.m_supportsExtendedDimensionsChangeDefaultRenamingAndDescription;
	target.m_supportsExtendedDimensionsCopyAllHierarchies = this.m_supportsExtendedDimensionsCopyAllHierarchies;
	target.m_supportsFixMetadataHierarchyAttributes = this.m_supportsFixMetadataHierarchyAttributes;
	target.m_supportsUniversalDisplayHierarchies = this.m_supportsUniversalDisplayHierarchies;
	target.m_supportsUniversalDisplayHierarchiesCustomDimensions = this.m_supportsUniversalDisplayHierarchiesCustomDimensions;
	target.m_supportsUniversalDisplayHierarchiesZeroBased = this.m_supportsUniversalDisplayHierarchiesZeroBased;
	target.m_supportsRemoteBlending = this.m_supportsRemoteBlending;
	target.m_supportsCubeCache = this.m_supportsCubeCache;
	target.m_supportsCatalogServiceV2 = this.m_supportsCatalogServiceV2;
	target.m_supportsCustomSort = this.m_supportsCustomSort;
	target.m_supportsDataRefreshAndDataTopicality = this.m_supportsDataRefreshAndDataTopicality;
	target.m_supportsRemoteBlendingBW = this.m_supportsRemoteBlendingBW;
	target.m_supportsTuplesOperand = this.m_supportsTuplesOperand;
	target.m_supportsCustomMeasureSortOrder = this.m_supportsCustomMeasureSortOrder;
	target.m_supportsComplexTupleFilter = this.m_supportsComplexTupleFilter;
	target.m_supportsF4FilterForTextField = this.m_supportsF4FilterForTextField;
	target.m_supportsSidPresentation = this.m_supportsSidPresentation;
	target.m_supportsExceptionAggregationAvgNullSelectionMember = this.m_supportsExceptionAggregationAvgNullSelectionMember;
	target.m_supportsExceptionAggregationCountNullSelectionMember = this.m_supportsExceptionAggregationCountNullSelectionMember;
	target.m_supportsStatisticalAggregations = this.m_supportsStatisticalAggregations;
	target.m_supportsVarianceOperator = this.m_supportsVarianceOperator;
	target.m_supportsTotalOperator = this.m_supportsTotalOperator;
	target.m_supportsAsyncRemoteModelValidation = this.m_supportsAsyncRemoteModelValidation;
	target.m_supportsExtendedKeyFigureProperties = this.m_supportsExtendedKeyFigureProperties;
	target.m_supportsDetailedResponseExpansion = this.m_supportsDetailedResponseExpansion;
	target.m_supportsDynamicVariableRefresh = this.m_supportsDynamicVariableRefresh;
	target.m_supportsQueryCurrencyTranslation = this.m_supportsQueryCurrencyTranslation;
	target.m_supportsCurrencyTranslation = this.m_supportsCurrencyTranslation;
	target.m_supportsMeasureMemberCurrencyTranslatons = this.m_supportsMeasureMemberCurrencyTranslatons;
	target.m_supportsStructureRestrictionsInValueHelp = this.m_supportsStructureRestrictionsInValueHelp;
	target.m_supportsSpatialChoropleth = this.m_supportsSpatialChoropleth;
	target.m_supportsCustomHierarchy = this.m_supportsCustomHierarchy;
	target.m_supportsRSCellFormatTypeSpecific = this.m_supportsRSCellFormatTypeSpecific;
	target.m_supportsMetadataDimensionOthers = this.m_supportsMetadataDimensionOthers;
	target.m_supportsInaCurrentMember = this.m_supportsInaCurrentMember;
	target.m_supportsDimensionVisibility = this.m_supportsDimensionVisibility;
	target.m_supportsDimensionDefaultMember = this.m_supportsDimensionDefaultMember;
	target.m_supportsDisplayHierarchyFixInFilter = this.m_supportsDisplayHierarchyFixInFilter;
	target.m_supportsCustomMemberKeySortOrder = this.m_supportsCustomMemberKeySortOrder;
	target.m_supportsSpatialTransformation = this.m_supportsSpatialTransformation;
	target.m_supportsMemberVisibility = this.m_supportsMemberVisibility;
	target.m_supportsHierarchyMetadata = this.m_supportsHierarchyMetadata;
	target.m_supportsDimensionHierarchyLevels = this.m_supportsDimensionHierarchyLevels;
	target.m_supportsHierarchyLevelMetadata = this.m_supportsHierarchyLevelMetadata;
	target.m_supportsHierarchyNavigationDeltaMode = this.m_supportsHierarchyNavigationDeltaMode;
	target.m_supportsCeScenarioParams = this.m_supportsCeScenarioParams;
	target.m_supportsLocaleSorting = this.m_supportsLocaleSorting;
	target.m_supportsHierarchyLevelOffsetFilter = this.m_supportsHierarchyLevelOffsetFilter;
	target.m_supportsHierarchyTrapezoidFilter = this.m_supportsHierarchyTrapezoidFilter;
	target.m_supportsUnifiedDataCells = this.m_supportsUnifiedDataCells;
	target.m_supportsAverageCountNullZero = this.m_supportsAverageCountNullZero;
	target.m_supportsExceptionsV2 = this.m_supportsExceptionsV2;
	target.m_supportsSpatialClustering = this.m_supportsSpatialClustering;
	target.m_supportsKeepOriginalTexts = this.m_supportsKeepOriginalTexts;
	target.m_supportsConditions = this.m_supportsConditions;
	target.m_supportsConditionsWithVersions = this.m_supportsConditionsWithVersions;
	target.m_supportsExtendedSort = this.m_supportsExtendedSort;
	target.m_supportsDataCells = this.m_supportsDataCells;
	target.m_supportsExpandBottomUp = this.m_supportsExpandBottomUp;
	target.m_supportsIgnoreExternalDimensions = this.m_supportsIgnoreExternalDimensions;
	target.m_supportsExceptionAggregationDimsFormulas = this.m_supportsExceptionAggregationDimsFormulas;
	target.m_supportsExceptionSettings = this.m_supportsExceptionSettings;
	target.m_supportsExceptions = this.m_supportsExceptions;
	target.m_supportsHierarchyVirtualRootNode = this.m_supportsHierarchyVirtualRootNode;
	target.m_supportsHierarchyRestNode = this.m_supportsHierarchyRestNode;
	target.m_supportsCubeBlending = this.m_supportsCubeBlending;
	target.m_supportsCubeBlendingProperties = this.m_supportsCubeBlendingProperties;
	target.m_supportsCubeBlendingOutOfContext = this.m_supportsCubeBlendingOutOfContext;
	target.m_supportsCubeBlendingAggregation = this.m_supportsCubeBlendingAggregation;
	target.m_supportsCubeBlendingReadmode = this.m_supportsCubeBlendingReadmode;
	target.m_supportsCubeBlendingSorting = this.m_supportsCubeBlendingSorting;
	target.m_supportsCubeBlendingCustomMember = this.m_supportsCubeBlendingCustomMember;
	target.m_supportsMetadataDataCategory = this.m_supportsMetadataDataCategory;
	target.m_supportsHierarchyPath = this.m_supportsHierarchyPath;
	target.m_supportsUniqueHierarchyPath = this.m_supportsUniqueHierarchyPath;
	target.m_supportsValueHelpHierarchyPath = this.m_supportsValueHelpHierarchyPath;
	target.m_supportsExtendedDimensionVisibility = this.m_supportsExtendedDimensionVisibility;
	target.m_supportsResultSetUnitIndex = this.m_supportsResultSetUnitIndex;
	target.m_supportsMetadataDataSourceDefinitionValidation = this.m_supportsMetadataDataSourceDefinitionValidation;
	target.m_supportsAsyncBatchRequests = this.m_supportsAsyncBatchRequests;
	target.m_supportsVariableVariants = this.m_supportsVariableVariants;
	target.m_supportsCalculatedDimensions = this.m_supportsCalculatedDimensions;
	target.m_supportsPlanningOnCalculatedDimensions = this.m_supportsPlanningOnCalculatedDimensions;
	target.m_supportsZeroSuppression = this.m_supportsZeroSuppression;
	target.m_supportsResultSetInterval = this.m_supportsResultSetInterval;
	target.m_supportsSapDate = this.m_supportsSapDate;
	target.m_supportsSupplements = this.m_supportsSupplements;
	target.m_supportsSuppressSupplements = this.m_supportsSuppressSupplements;
	target.m_supportsNumberAsString = this.m_supportsNumberAsString;
	target.m_supportsCustomDimensionMemberExecutionStep = this.m_supportsCustomDimensionMemberExecutionStep;
	target.m_supportsFixHierarchyFlagKeys = this.m_supportsFixHierarchyFlagKeys;
	target.m_supportsAttributeValueLookup = this.m_supportsAttributeValueLookup;
	target.m_supportsAggregationNopNull = this.m_supportsAggregationNopNull;
	target.m_supportsAggregationNopNullZero = this.m_supportsAggregationNopNullZero;
	target.m_supportsCustomDimension2 = this.m_supportsCustomDimension2;
	target.m_supportsWindowFunction = this.m_supportsWindowFunction;
	target.m_supportsMultipleExAggDimsInCalcPlan = this.m_supportsMultipleExAggDimsInCalcPlan;
	target.m_supportsSetOperandCurrentMemberSingleNavigation = this.m_supportsSetOperandCurrentMemberSingleNavigation;
	target.m_supportsCurrentMemberFilterExtension = this.m_supportsCurrentMemberFilterExtension;
	target.m_supportsClientInfo = this.m_supportsClientInfo;
	target.m_supportsRemoteFilter = this.m_supportsRemoteFilter;
	target.m_supportsDynamicRestrictionOnFormula = this.m_supportsDynamicRestrictionOnFormula;
	target.m_supportsNamedCustomMember = this.m_supportsNamedCustomMember;
	target.m_supportsVersionParameters = this.m_supportsVersionParameters;
	target.m_supportsVersionPrivileges = this.m_supportsVersionPrivileges;
	target.m_supportsSuppressKeyfigureCalculation = this.m_supportsSuppressKeyfigureCalculation;
	target.m_supportsReinitVariables = this.m_supportsReinitVariables;
	target.m_supportsVariableMasking = this.m_supportsVariableMasking;
	target.m_supportsRequestTimezone = this.m_supportsRequestTimezone;
	target.m_supportsMultiSource = this.m_supportsMultiSource;
	target.m_supportsServerState = this.m_supportsServerState;
	target.m_supportsHierarchyCatalog = this.m_supportsHierarchyCatalog;
	target.m_supportsInputReadinessStates = this.m_supportsInputReadinessStates;
	target.m_supportsReturnedDataSelection = this.m_supportsReturnedDataSelection;
	target.m_supportsVirtualDescription = this.m_supportsVirtualDescription;
	target.m_supportsMeasureMemberDefinition = this.m_supportsMeasureMemberDefinition;
	target.m_supportsMeasureMemberDetails = this.m_supportsMeasureMemberDetails;
	target.m_supportsMeasureMemberType = this.m_supportsMeasureMemberType;
	target.m_supportsValueHelpWithAttributes = this.m_supportsValueHelpWithAttributes;
	target.m_supportsEncodedResultset = this.m_supportsEncodedResultset;
	target.m_supportsVisualAggregation = this.m_supportsVisualAggregation;
	target.m_supportsRunAsUser = this.m_supportsRunAsUser;
	target.m_supportsNewValuesImplicitUnlock = this.m_supportsNewValuesImplicitUnlock;
	target.m_supportsNewValuesExtendedFormat = this.m_supportsNewValuesExtendedFormat;
	target.m_supportsReportReportInterface = this.m_supportsReportReportInterface;
	target.m_supportsCancelRunningQueries = this.m_supportsCancelRunningQueries;
	target.m_supportsObtainability = this.m_supportsObtainability;
	target.m_supportsResultSetHierarchyLevel = this.m_supportsResultSetHierarchyLevel;
	target.m_supportsQueryDataCellModelDefaults = this.m_supportsQueryDataCellModelDefaults;
	target.m_supportsUniversalModel = this.m_supportsUniversalModel;
	target.m_supportsTechnicalAxis = this.m_supportsTechnicalAxis;
	target.m_supportsBatchRsStreaming = this.m_supportsBatchRsStreaming;
	target.m_supportsBatchBlendingRsStreaming = this.m_supportsBatchBlendingRsStreaming;
	target.m_supportsResultSetEffectiveFilter = this.m_supportsResultSetEffectiveFilter;
	target.m_supportsCorrectDimensionDescription = this.m_supportsCorrectDimensionDescription;
	target.m_supportsRootOrphansAfterVisibilityFilter = this.m_supportsRootOrphansAfterVisibilityFilter;
	target.m_supportsAutomaticVariableSubmit = this.m_supportsAutomaticVariableSubmit;
	target.m_supportsExceptionAggregationFirstLastSelectionMember = this.m_supportsExceptionAggregationFirstLastSelectionMember;
	target.m_supportsResultSetCellExplain = this.m_supportsResultSetCellExplain;
	target.m_supportsNullZeroSuppression = this.m_supportsNullZeroSuppression;
	target.m_supportsInputReadinessWithNavigationalAttributes = this.m_supportsInputReadinessWithNavigationalAttributes;
	target.m_supportedResultAlignmentLevel = this.m_supportedResultAlignmentLevel;
	target.m_supportedVisibilityLocation = this.m_supportedVisibilityLocation;
	target.m_supportedReorderingCapability = this.m_supportedReorderingCapability;
	target.m_supportsIteratedFormula = this.m_supportsIteratedFormula;
	target.m_supportsCDSProjectionViews = this.m_supportsCDSProjectionViews;
	target.m_supportsCellDocumentId = this.m_supportsCellDocumentId;
	target.m_supportsDimensionKeyAttributes = this.m_supportsDimensionKeyAttributes;
	target.m_supportsHierarchyPathPresentationType = this.m_supportsHierarchyPathPresentationType;
	target.m_supportsUndefinedTupleCountTotals = this.m_supportsUndefinedTupleCountTotals;
	target.m_supportsTextInHierarchyForCharacteristicsWithoutText = this.m_supportsTextInHierarchyForCharacteristicsWithoutText;
	target.m_supportsPagingTupleCountBeforeSlicing = this.m_supportsPagingTupleCountBeforeSlicing;
	target.m_supportsMaintainsVariableVariants = this.m_supportsMaintainsVariableVariants;
	target.m_supportsDataCellContexts = this.m_supportsDataCellContexts;
	target.m_supportsMixedDisplayKey = this.m_supportsMixedDisplayKey;
	target.m_supportsSemanticObject = this.m_supportsSemanticObject;
	target.m_supportsNamePath = this.m_supportsNamePath;
	target.m_supportsErrorAboveLevel = this.m_supportsErrorAboveLevel;
	target.m_supportsPersistedInA = this.m_supportsPersistedInA;
	target.m_supportsInAModelExternalDimension = this.m_supportsInAModelExternalDimension;
	target.m_supportsInAModelExternalValuehelp = this.m_supportsInAModelExternalValuehelp;
	target.m_supportsMaxDrillLevel = this.m_supportsMaxDrillLevel;
	target.m_supportsSqlTypeBoolean = this.m_supportsSqlTypeBoolean;
	target.m_supportsNoDataActions = this.m_supportsNoDataActions;
	target.m_supportsStructureOnFreeAxis = this.m_supportsStructureOnFreeAxis;
	target.m_supportsMetadataHasExternalHierarchies = this.m_supportsMetadataHasExternalHierarchies;
	target.m_supportsExceptionThresholdNoPrec = this.m_supportsExceptionThresholdNoPrec;
	target.m_supportsReturnMetadataExtensions = this.m_supportsReturnMetadataExtensions;
	target.m_supportsMetadataResultFormatOptions = this.m_supportsMetadataResultFormatOptions;
	target.m_supportsLightweightMetadata = this.m_supportsLightweightMetadata;
	target.m_supportsResultSetV2MetadataExtension1 = this.m_supportsResultSetV2MetadataExtension1;
	target.m_supportsIDAttributeForMeasureDimension = this.m_supportsIDAttributeForMeasureDimension;
	target.m_supportsUniqueAxisProperties = this.m_supportsUniqueAxisProperties;
	target.m_supportsSpatialTransformDistanceFilter = this.m_supportsSpatialTransformDistanceFilter;
	target.m_supportsUdhAlignment = this.m_supportsUdhAlignment;
	target.m_supportsResultSetNumericValueWithInternalPrecision = this.m_supportsResultSetNumericValueWithInternalPrecision;
	target.m_supportsVirtualDataSourceTypeColumns = this.m_supportsVirtualDataSourceTypeColumns;
	target.m_supportsCalculateWithNullCellsUnitType = this.m_supportsCalculateWithNullCellsUnitType;
	target.m_supportedResultAlignment = oFF.XList.create();
	target.m_supportedResultAlignment.addAll(this.getSupportedResultAlignments());
	target.m_supportedConditionalResults = oFF.XList.create();
	target.m_supportedConditionalResults.addAll(this.getSupportedConditionalResults());
	target.m_supportedSortingTypes = oFF.XSetOfNameObject.create();
	target.m_supportedSortingTypes.addAll(this.m_supportedSortingTypes);
	target.m_supportedBreakGrouping = oFF.XSetOfNameObject.create();
	target.m_supportedBreakGrouping.addAll(this.m_supportedBreakGrouping);
	target.m_supportsDimensionHierarchyMetadata = this.m_supportsDimensionHierarchyMetadata;
	target.m_supportsResultSetCache = this.m_supportsResultSetCache;
	target.m_supportsSortingDefaults = this.m_supportsSortingDefaults;
	target.m_supportsOthersFromConditions = this.m_supportsOthersFromConditions;
	target.m_supportsInputEnablementFilterSettings = this.m_supportsInputEnablementFilterSettings;
	target.m_supportsInputReadinessFilter = this.m_supportsInputReadinessFilter;
	target.m_supportsUnitTranslation = this.m_supportsUnitTranslation;
	target.m_supportsMeasureMemberUnitTranslations = this.m_supportsMeasureMemberUnitTranslations;
	target.m_supportsNumericShiftPercent = this.m_supportsNumericShiftPercent;
	target.m_supportsHierarchyDefaults = this.m_supportsHierarchyDefaults;
	target.m_supportsUdhKey = this.m_supportsUdhKey;
	target.m_supportsCustomDimension2MemberMetadata = this.m_supportsCustomDimension2MemberMetadata;
	target.m_supportsMemberUniqueNamesCompatibility = this.m_supportsMemberUniqueNamesCompatibility;
	target.m_supportsConditionsWithHiddenMeasures = this.m_supportsConditionsWithHiddenMeasures;
	target.m_supportsFilterCapabilityExtended = this.m_supportsFilterCapabilityExtended;
	target.m_supportsTuplesOperandFromDataSource = this.m_supportsTuplesOperandFromDataSource;
	target.m_supportsSimulation = this.m_supportsSimulation;
	target.m_supportsOthersDetailsFromConditions = this.m_supportsOthersDetailsFromConditions;
	target.m_supportsFlexibleClientInfo = this.m_supportsFlexibleClientInfo;
	target.m_supportsSortTupleMemberType = this.m_supportsSortTupleMemberType;
	target.m_supportsRRI3 = this.m_supportsRRI3;
	target.m_supportsSupportsRunningAggregation = this.m_supportsSupportsRunningAggregation;
	target.m_supportsFunctionalVariables = this.m_supportsFunctionalVariables;
	target.m_supportsAggregationsFirstLastAverageOfDimension = this.m_supportsAggregationsFirstLastAverageOfDimension;
	return target;
};
oFF.QCapabilities.prototype.getResultStructureReorderingCapability = function()
{
	return this.m_supportedReorderingCapability;
};
oFF.QCapabilities.prototype.getServerMetadataVersion = function()
{
	return this.m_serverMetadataVersion;
};
oFF.QCapabilities.prototype.getSupportedConditionalResults = function()
{
	return this.m_supportedConditionalResults;
};
oFF.QCapabilities.prototype.getSupportedResultAlignmentLevel = function()
{
	return this.m_supportedResultAlignmentLevel;
};
oFF.QCapabilities.prototype.getSupportedResultAlignments = function()
{
	return this.m_supportedResultAlignment;
};
oFF.QCapabilities.prototype.getSupportedResultVisibilityLevel = function()
{
	return this.m_supportedVisibilityLocation;
};
oFF.QCapabilities.prototype.getSystemName = function()
{
	return this.m_systemName;
};
oFF.QCapabilities.prototype.getSystemType = function()
{
	return this.m_systemType;
};
oFF.QCapabilities.prototype.setResultStructureReorderingCapability = function(supportedReorderingCapability)
{
	this.m_supportedReorderingCapability = supportedReorderingCapability;
};
oFF.QCapabilities.prototype.setServerMetadataVersion = function(serverMetadataVersion)
{
	this.m_serverMetadataVersion = serverMetadataVersion;
};
oFF.QCapabilities.prototype.setSupportedResultAlignmentLevel = function(supportedAlignmentLocation)
{
	this.m_supportedResultAlignmentLevel = supportedAlignmentLocation;
};
oFF.QCapabilities.prototype.setSupportedVisibilityLocation = function(supportedVisibilityLocation)
{
	this.m_supportedVisibilityLocation = supportedVisibilityLocation;
};
oFF.QCapabilities.prototype.setSupportsAggregationNopNull = function(supportsAggregationNopNull)
{
	this.m_supportsAggregationNopNull = supportsAggregationNopNull;
};
oFF.QCapabilities.prototype.setSupportsAggregationNopNullZero = function(supportsAggregationNopNullZero)
{
	this.m_supportsAggregationNopNullZero = supportsAggregationNopNullZero;
};
oFF.QCapabilities.prototype.setSupportsAggregationsFirstLastAverageOfDimension = function(supportsAggregationsFirstLastAverageOfDimension)
{
	this.m_supportsAggregationsFirstLastAverageOfDimension = supportsAggregationsFirstLastAverageOfDimension;
};
oFF.QCapabilities.prototype.setSupportsAsyncBatchRequests = function(supportsAsyncBatchRequests)
{
	this.m_supportsAsyncBatchRequests = supportsAsyncBatchRequests;
};
oFF.QCapabilities.prototype.setSupportsAsyncRemoteModelValidation = function(supportsAsyncRemoteModelValidation)
{
	this.m_supportsAsyncRemoteModelValidation = supportsAsyncRemoteModelValidation;
};
oFF.QCapabilities.prototype.setSupportsAttributeValueLookup = function(supportsAttributeValueLookup)
{
	this.m_supportsAttributeValueLookup = supportsAttributeValueLookup;
};
oFF.QCapabilities.prototype.setSupportsAutoVariableSubmit = function(supportsAutoVariableSubmit)
{
	this.m_supportsAutomaticVariableSubmit = supportsAutoVariableSubmit;
};
oFF.QCapabilities.prototype.setSupportsAverageCountNullZero = function(supportsAverageCountNullZero)
{
	this.m_supportsAverageCountNullZero = supportsAverageCountNullZero;
};
oFF.QCapabilities.prototype.setSupportsBatchBlendingRsStreaming = function(supportsBatchBlendingRsStreaming)
{
	this.m_supportsBatchBlendingRsStreaming = supportsBatchBlendingRsStreaming;
};
oFF.QCapabilities.prototype.setSupportsBatchRsStreaming = function(supportsBatchRsStreaming)
{
	this.m_supportsBatchRsStreaming = supportsBatchRsStreaming;
};
oFF.QCapabilities.prototype.setSupportsCDSProjectionViews = function(supportsCDSProjectionViews)
{
	this.m_supportsCDSProjectionViews = supportsCDSProjectionViews;
};
oFF.QCapabilities.prototype.setSupportsCalculateWithNullCellsUnitType = function(supportsCalculateWithNullCellsUnitType)
{
	this.m_supportsCalculateWithNullCellsUnitType = supportsCalculateWithNullCellsUnitType;
};
oFF.QCapabilities.prototype.setSupportsCalculatedDimensions = function(supportsCalculatedDimensions)
{
	this.m_supportsCalculatedDimensions = supportsCalculatedDimensions;
};
oFF.QCapabilities.prototype.setSupportsCancelRunningQueries = function(supportsCancelRunningQueries)
{
	this.m_supportsCancelRunningQueries = supportsCancelRunningQueries;
};
oFF.QCapabilities.prototype.setSupportsCartesianFilterIntersect = function(supportsCartesianFilterIntersect)
{
	this.m_supportsCartesianFilterIntersect = supportsCartesianFilterIntersect;
};
oFF.QCapabilities.prototype.setSupportsCatalogServiceV2 = function(supportsCatalogServiceV2)
{
	this.m_supportsCatalogServiceV2 = supportsCatalogServiceV2;
};
oFF.QCapabilities.prototype.setSupportsCeScenarioParams = function(supportsCeScenarioParams)
{
	this.m_supportsCeScenarioParams = supportsCeScenarioParams;
};
oFF.QCapabilities.prototype.setSupportsCellDocumentId = function(supportsCellDocumentId)
{
	this.m_supportsCellDocumentId = supportsCellDocumentId;
};
oFF.QCapabilities.prototype.setSupportsCellValueOperand = function(supportsCellValueOperand)
{
	this.m_supportsCellValueOperand = supportsCellValueOperand;
};
oFF.QCapabilities.prototype.setSupportsCheckVariables = function(supportsCheckVariables)
{
	this.m_supportsCheckVariables = supportsCheckVariables;
};
oFF.QCapabilities.prototype.setSupportsClientInfo = function(supportsClientInfo)
{
	this.m_supportsClientInfo = supportsClientInfo;
};
oFF.QCapabilities.prototype.setSupportsComplexFilter = function(supportsComplexFilter)
{
	this.m_supportsComplexFilter = supportsComplexFilter;
};
oFF.QCapabilities.prototype.setSupportsComplexTupleFilter = function(supportsComplexTupleFilter)
{
	this.m_supportsComplexTupleFilter = supportsComplexTupleFilter;
};
oFF.QCapabilities.prototype.setSupportsConditionalResult = function(supportsConditionalResults)
{
	this.m_supportsConditionalResults = supportsConditionalResults;
};
oFF.QCapabilities.prototype.setSupportsConditionalResultVisibility = function(supportsConditionalResultVisibility)
{
	this.m_supportsConditionalResultVisibility = supportsConditionalResultVisibility;
};
oFF.QCapabilities.prototype.setSupportsConditions = function(supportsConditions)
{
	this.m_supportsConditions = supportsConditions;
};
oFF.QCapabilities.prototype.setSupportsConditionsWithHiddenMeasures = function(supportsConditionsWithHiddenMeasures)
{
	this.m_supportsConditionsWithHiddenMeasures = supportsConditionsWithHiddenMeasures;
};
oFF.QCapabilities.prototype.setSupportsConditionsWithVersions = function(supportsConditionsWithVersions)
{
	this.m_supportsConditionsWithVersions = supportsConditionsWithVersions;
};
oFF.QCapabilities.prototype.setSupportsConvertToFlatFilter = function(supportsConvertToFlatFilter)
{
	this.m_supportsConvertToFlatFilter = supportsConvertToFlatFilter;
};
oFF.QCapabilities.prototype.setSupportsCorrectDimensionDescription = function(supportsCorrectDimensionDescription)
{
	this.m_supportsCorrectDimensionDescription = supportsCorrectDimensionDescription;
};
oFF.QCapabilities.prototype.setSupportsCubeBlending = function(supportsCubeBlending)
{
	this.m_supportsCubeBlending = supportsCubeBlending;
};
oFF.QCapabilities.prototype.setSupportsCubeBlendingAggregation = function(supportsCubeBlendingAggregation)
{
	this.m_supportsCubeBlendingAggregation = supportsCubeBlendingAggregation;
};
oFF.QCapabilities.prototype.setSupportsCubeBlendingCustomMember = function(supportsCubeBlendingCustomMember)
{
	this.m_supportsCubeBlendingCustomMember = supportsCubeBlendingCustomMember;
};
oFF.QCapabilities.prototype.setSupportsCubeBlendingOutOfContext = function(supportsCubeBlendingOutOfContext)
{
	this.m_supportsCubeBlendingOutOfContext = supportsCubeBlendingOutOfContext;
};
oFF.QCapabilities.prototype.setSupportsCubeBlendingProperties = function(supportsCubeBlendingProperties)
{
	this.m_supportsCubeBlendingProperties = supportsCubeBlendingProperties;
};
oFF.QCapabilities.prototype.setSupportsCubeBlendingReadmode = function(supportsCubeBlendingReadmode)
{
	this.m_supportsCubeBlendingReadmode = supportsCubeBlendingReadmode;
};
oFF.QCapabilities.prototype.setSupportsCubeBlendingSorting = function(supportsCubeBlendingSorting)
{
	this.m_supportsCubeBlendingSorting = supportsCubeBlendingSorting;
};
oFF.QCapabilities.prototype.setSupportsCubeBlendingWithNSubqueries = function(supportsCubeBlendingWithNSubqueries)
{
	this.m_supportsCubeBlendingWithNSubqueries = supportsCubeBlendingWithNSubqueries;
};
oFF.QCapabilities.prototype.setSupportsCubeCache = function(supportsCubeCache)
{
	this.m_supportsCubeCache = supportsCubeCache;
};
oFF.QCapabilities.prototype.setSupportsCummulative = function(supportsCummulative)
{
	this.m_supportsCummulative = supportsCummulative;
};
oFF.QCapabilities.prototype.setSupportsCurrencyTranslation = function(supportsCurrencyTranslation)
{
	this.m_supportsCurrencyTranslation = supportsCurrencyTranslation;
};
oFF.QCapabilities.prototype.setSupportsCurrentMemberFilterExtension = function(supportsCurrentMemberFilterExtension)
{
	this.m_supportsCurrentMemberFilterExtension = supportsCurrentMemberFilterExtension;
};
oFF.QCapabilities.prototype.setSupportsCustomDimension2 = function(supportsCustomDimension2)
{
	this.m_supportsCustomDimension2 = supportsCustomDimension2;
};
oFF.QCapabilities.prototype.setSupportsCustomDimension2MemberMetadata = function(supportsCustomDimension2MemberMetadata)
{
	this.m_supportsCustomDimension2MemberMetadata = supportsCustomDimension2MemberMetadata;
};
oFF.QCapabilities.prototype.setSupportsCustomDimensionFilterCapability = function(supportsCustomDimensionFilter)
{
	this.m_supportsCustomDimensionFilterCapability = supportsCustomDimensionFilter;
};
oFF.QCapabilities.prototype.setSupportsCustomDimensionMemberExecutionStep = function(supportsCustomDimensionMemberExecutionStep)
{
	this.m_supportsCustomDimensionMemberExecutionStep = supportsCustomDimensionMemberExecutionStep;
};
oFF.QCapabilities.prototype.setSupportsCustomHierarchy = function(supportsCustomHierarchy)
{
	this.m_supportsCustomHierarchy = supportsCustomHierarchy;
};
oFF.QCapabilities.prototype.setSupportsCustomMeasureSortOrder = function(supportsCustomMeasureSortOrder)
{
	this.m_supportsCustomMeasureSortOrder = supportsCustomMeasureSortOrder;
};
oFF.QCapabilities.prototype.setSupportsCustomMemberKeySortOrder = function(supportsCustomMemberKeySortOrder)
{
	this.m_supportsCustomMemberKeySortOrder = supportsCustomMemberKeySortOrder;
};
oFF.QCapabilities.prototype.setSupportsCustomSort = function(supportsCustomSort)
{
	this.m_supportsCustomSort = supportsCustomSort;
};
oFF.QCapabilities.prototype.setSupportsDataCellContexts = function(supportsDataCellContexts)
{
	this.m_supportsDataCellContexts = supportsDataCellContexts;
};
oFF.QCapabilities.prototype.setSupportsDataCellMixedValues = function(supportsDataCellMixedValues)
{
	this.m_supportsDataCellMixedValues = supportsDataCellMixedValues;
};
oFF.QCapabilities.prototype.setSupportsDataCells = function(supportsDataCells)
{
	this.m_supportsDataCells = supportsDataCells;
};
oFF.QCapabilities.prototype.setSupportsDataRefreshAndDataTopicality = function(supportsDataRefreshAndDataTopicality)
{
	this.m_supportsDataRefreshAndDataTopicality = supportsDataRefreshAndDataTopicality;
};
oFF.QCapabilities.prototype.setSupportsDetailedResponseExpansion = function(supportsDetailedResponseExpansion)
{
	this.m_supportsDetailedResponseExpansion = supportsDetailedResponseExpansion;
};
oFF.QCapabilities.prototype.setSupportsDimensionDefaultMember = function(supportsDimensionDefaultMember)
{
	this.m_supportsDimensionDefaultMember = supportsDimensionDefaultMember;
};
oFF.QCapabilities.prototype.setSupportsDimensionHierarchyLevels = function(supportsDimensionHierarchyLevels)
{
	this.m_supportsDimensionHierarchyLevels = supportsDimensionHierarchyLevels;
};
oFF.QCapabilities.prototype.setSupportsDimensionHierarchyMetadata = function(supportsDimensionHierarchyMetadata)
{
	this.m_supportsDimensionHierarchyMetadata = supportsDimensionHierarchyMetadata;
};
oFF.QCapabilities.prototype.setSupportsDimensionKeyAttributes = function(supportsDimensionKeyAttributes)
{
	this.m_supportsDimensionKeyAttributes = supportsDimensionKeyAttributes;
};
oFF.QCapabilities.prototype.setSupportsDimensionVisibility = function(supportsDimensionVisibility)
{
	this.m_supportsDimensionVisibility = supportsDimensionVisibility;
};
oFF.QCapabilities.prototype.setSupportsDirectVariableTransfer = function(supportsDirectVariableTransfer)
{
	this.m_supportsDirectVariableTransfer = supportsDirectVariableTransfer;
};
oFF.QCapabilities.prototype.setSupportsDisplayAttributes = function(supportsDisplayAttributes)
{
	this.m_supportsDisplayAttributes = supportsDisplayAttributes;
};
oFF.QCapabilities.prototype.setSupportsDisplayHierarchyFixInFilter = function(supportsDisplayHierarchyFixInFilter)
{
	this.m_supportsDisplayHierarchyFixInFilter = supportsDisplayHierarchyFixInFilter;
};
oFF.QCapabilities.prototype.setSupportsDynamicRestrictionOnFormula = function(supportsDynamicRestrictionOnFormula)
{
	this.m_supportsDynamicRestrictionOnFormula = supportsDynamicRestrictionOnFormula;
};
oFF.QCapabilities.prototype.setSupportsDynamicVariableRefresh = function(supportsDynamicVariableRefresh)
{
	this.m_supportsDynamicVariableRefresh = supportsDynamicVariableRefresh;
};
oFF.QCapabilities.prototype.setSupportsEncodedResultset = function(supportsEncodedResultset)
{
	this.m_supportsEncodedResultset = supportsEncodedResultset;
};
oFF.QCapabilities.prototype.setSupportsErrorAboveLevel = function(supportsErrorAboveLevel)
{
	this.m_supportsErrorAboveLevel = supportsErrorAboveLevel;
};
oFF.QCapabilities.prototype.setSupportsExceptionAggregationAvgNullSelectionMember = function(supportExcepAggAvgNullSelMember)
{
	this.m_supportsExceptionAggregationAvgNullSelectionMember = supportExcepAggAvgNullSelMember;
};
oFF.QCapabilities.prototype.setSupportsExceptionAggregationCountNullSelectionMember = function(supportExcepAggCountNullSelMember)
{
	this.m_supportsExceptionAggregationCountNullSelectionMember = supportExcepAggCountNullSelMember;
};
oFF.QCapabilities.prototype.setSupportsExceptionAggregationDimsFormulas = function(supportsExceptionAggregationDimsFormulas)
{
	this.m_supportsExceptionAggregationDimsFormulas = supportsExceptionAggregationDimsFormulas;
};
oFF.QCapabilities.prototype.setSupportsExceptionAggregationFirstLastSelectionMember = function(supportsExceptionAggregationFirstLastSelectionMember)
{
	this.m_supportsExceptionAggregationFirstLastSelectionMember = supportsExceptionAggregationFirstLastSelectionMember;
};
oFF.QCapabilities.prototype.setSupportsExceptionSettings = function(supportsExceptionSettings)
{
	this.m_supportsExceptionSettings = supportsExceptionSettings;
};
oFF.QCapabilities.prototype.setSupportsExceptionThresholdNoPrec = function(supportsExceptionThresholdNoPrec)
{
	this.m_supportsExceptionThresholdNoPrec = supportsExceptionThresholdNoPrec;
};
oFF.QCapabilities.prototype.setSupportsExceptions = function(supportsExceptions)
{
	this.m_supportsExceptions = supportsExceptions;
};
oFF.QCapabilities.prototype.setSupportsExceptionsV2 = function(supportsExceptionsV2)
{
	this.m_supportsExceptionsV2 = supportsExceptionsV2;
};
oFF.QCapabilities.prototype.setSupportsExpandBottomUp = function(supportsExpandBottomUp)
{
	this.m_supportsExpandBottomUp = supportsExpandBottomUp;
};
oFF.QCapabilities.prototype.setSupportsExtendedDimensionVisibility = function(supportsExtendedDimensionVisibility)
{
	this.m_supportsExtendedDimensionVisibility = supportsExtendedDimensionVisibility;
};
oFF.QCapabilities.prototype.setSupportsExtendedDimensions = function(supportsExtendedDimensions)
{
	this.m_supportsExtendedDimensions = supportsExtendedDimensions;
};
oFF.QCapabilities.prototype.setSupportsExtendedDimensionsChangeDefaultRenamingAndDescription = function(supportsExtDimChangeDefaultRenamingAndDesc)
{
	this.m_supportsExtendedDimensionsChangeDefaultRenamingAndDescription = supportsExtDimChangeDefaultRenamingAndDesc;
};
oFF.QCapabilities.prototype.setSupportsExtendedDimensionsCopyAllHierarchies = function(supportsExtDimCopyAllHierarchies)
{
	this.m_supportsExtendedDimensionsCopyAllHierarchies = supportsExtDimCopyAllHierarchies;
};
oFF.QCapabilities.prototype.setSupportsExtendedDimensionsFieldMapping = function(supportsExtendedDimensionsFieldMapping)
{
	this.m_supportsExtendedDimensionsFieldMapping = supportsExtendedDimensionsFieldMapping;
};
oFF.QCapabilities.prototype.setSupportsExtendedDimensionsJoinCardinality = function(supportsExtendedDimensionsJoinCardinality)
{
	this.m_supportsExtendedDimensionsJoinCardinality = supportsExtendedDimensionsJoinCardinality;
};
oFF.QCapabilities.prototype.setSupportsExtendedDimensionsJoinColumns = function(supportsExtendedDimensionsJoinColumns)
{
	this.m_supportsExtendedDimensionsJoinColumns = supportsExtendedDimensionsJoinColumns;
};
oFF.QCapabilities.prototype.setSupportsExtendedDimensionsOuterJoin = function(supportsExtendedDimensionsOuterJoin)
{
	this.m_supportsExtendedDimensionsOuterJoin = supportsExtendedDimensionsOuterJoin;
};
oFF.QCapabilities.prototype.setSupportsExtendedDimensionsSkip = function(supportsExtendedDimensionsSkip)
{
	this.m_supportsExtendedDimensionsSkip = supportsExtendedDimensionsSkip;
};
oFF.QCapabilities.prototype.setSupportsExtendedKeyFigureProperties = function(supportsExtendedKeyFigureProperties)
{
	this.m_supportsExtendedKeyFigureProperties = supportsExtendedKeyFigureProperties;
};
oFF.QCapabilities.prototype.setSupportsExtendedSort = function(supportsExtendedSort)
{
	this.m_supportsExtendedSort = supportsExtendedSort;
};
oFF.QCapabilities.prototype.setSupportsExtendedVariableDefinition = function(supportsExtendedVariableDefinition)
{
	this.m_supportsExtendedVariableDefinition = supportsExtendedVariableDefinition;
};
oFF.QCapabilities.prototype.setSupportsF4FilterForTextField = function(supportsF4FilterForTextField)
{
	this.m_supportsF4FilterForTextField = supportsF4FilterForTextField;
};
oFF.QCapabilities.prototype.setSupportsFilterCapabilityExtended = function(supportsFilterCapabilityExtended)
{
	this.m_supportsFilterCapabilityExtended = supportsFilterCapabilityExtended;
};
oFF.QCapabilities.prototype.setSupportsFixHierarchyFlatKeys = function(supportsFixHierarchyFlatKeys)
{
	this.m_supportsFixHierarchyFlagKeys = supportsFixHierarchyFlatKeys;
};
oFF.QCapabilities.prototype.setSupportsFixMetadataHierarchyAttributes = function(supportsFixMetadataHierarchyAttributes)
{
	this.m_supportsFixMetadataHierarchyAttributes = supportsFixMetadataHierarchyAttributes;
};
oFF.QCapabilities.prototype.setSupportsFlexibleClientInfo = function(supportsFlexibleClientInfo)
{
	this.m_supportsFlexibleClientInfo = supportsFlexibleClientInfo;
};
oFF.QCapabilities.prototype.setSupportsFormulaMeasures = function(supportsFormulaMeasures)
{
	this.m_supportsFormulaMeasures = supportsFormulaMeasures;
};
oFF.QCapabilities.prototype.setSupportsFunctionalVariables = function(supportsFunctionalVariables)
{
	this.m_supportsFunctionalVariables = supportsFunctionalVariables;
};
oFF.QCapabilities.prototype.setSupportsHierarchyAttHierFields = function(supportsHierAttHierFields)
{
	this.m_supportsHierAttHierFields = supportsHierAttHierFields;
};
oFF.QCapabilities.prototype.setSupportsHierarchyCarryingDim = function(supportsHierCarryingDim)
{
	this.m_supportsHierCarryingDim = supportsHierCarryingDim;
};
oFF.QCapabilities.prototype.setSupportsHierarchyCatalog = function(supportsHierarchyCatalog)
{
	this.m_supportsHierarchyCatalog = supportsHierarchyCatalog;
};
oFF.QCapabilities.prototype.setSupportsHierarchyDefaults = function(supportsHierarchyDefaults)
{
	this.m_supportsHierarchyDefaults = supportsHierarchyDefaults;
};
oFF.QCapabilities.prototype.setSupportsHierarchyLevelMetadata = function(supportsHierarchyLevelMetadata)
{
	this.m_supportsHierarchyLevelMetadata = supportsHierarchyLevelMetadata;
};
oFF.QCapabilities.prototype.setSupportsHierarchyLevelOffsetFilter = function(supportsHierarchyLevelOffsetFilter)
{
	this.m_supportsHierarchyLevelOffsetFilter = supportsHierarchyLevelOffsetFilter;
};
oFF.QCapabilities.prototype.setSupportsHierarchyMetadata = function(supportsHierarchyMetadata)
{
	this.m_supportsHierarchyMetadata = supportsHierarchyMetadata;
};
oFF.QCapabilities.prototype.setSupportsHierarchyNavCounter = function(supportsHierarchyNavCounter)
{
	this.m_supportsHierNavCounter = supportsHierarchyNavCounter;
};
oFF.QCapabilities.prototype.setSupportsHierarchyNavigationDeltaMode = function(supportsHierarchyNavigationDeltaMode)
{
	this.m_supportsHierarchyNavigationDeltaMode = supportsHierarchyNavigationDeltaMode;
};
oFF.QCapabilities.prototype.setSupportsHierarchyPath = function(supportsHierarchyPath)
{
	this.m_supportsHierarchyPath = supportsHierarchyPath;
};
oFF.QCapabilities.prototype.setSupportsHierarchyPathPresentationType = function(supportsHierarchyPathPresentationType)
{
	this.m_supportsHierarchyPathPresentationType = supportsHierarchyPathPresentationType;
};
oFF.QCapabilities.prototype.setSupportsHierarchyRestNode = function(supportsHierarchyRestNode)
{
	this.m_supportsHierarchyRestNode = supportsHierarchyRestNode;
};
oFF.QCapabilities.prototype.setSupportsHierarchyTrapezoidFilter = function(supportsHierarchyTrapezoidFilter)
{
	this.m_supportsHierarchyTrapezoidFilter = supportsHierarchyTrapezoidFilter;
};
oFF.QCapabilities.prototype.setSupportsHierarchyVirtualRootNode = function(supportsHierarchyVirtualRootNode)
{
	this.m_supportsHierarchyVirtualRootNode = supportsHierarchyVirtualRootNode;
};
oFF.QCapabilities.prototype.setSupportsIDAttributeForMeasureDimension = function(supportsIDAttributeForMeasureDimension)
{
	this.m_supportsIDAttributeForMeasureDimension = supportsIDAttributeForMeasureDimension;
};
oFF.QCapabilities.prototype.setSupportsIgnoreExternalDimensions = function(supportsIgnoreExternalDimensions)
{
	this.m_supportsIgnoreExternalDimensions = supportsIgnoreExternalDimensions;
};
oFF.QCapabilities.prototype.setSupportsIgnoreUnitOfZeroValueInAggregation = function(supportsIgnoreUnitOfZeroValueInAggregation)
{
	this.m_supportsIgnoreUnitOfZeroValueInAggregation = supportsIgnoreUnitOfZeroValueInAggregation;
};
oFF.QCapabilities.prototype.setSupportsInAModelExternalDimension = function(supportsInAModelExternalDimension)
{
	this.m_supportsInAModelExternalDimension = supportsInAModelExternalDimension;
};
oFF.QCapabilities.prototype.setSupportsInAModelExternalValuehelp = function(supportsInAModelExternalValuehelp)
{
	this.m_supportsInAModelExternalValuehelp = supportsInAModelExternalValuehelp;
};
oFF.QCapabilities.prototype.setSupportsInaCurrentMember = function(supportsInaCurrentMember)
{
	this.m_supportsInaCurrentMember = supportsInaCurrentMember;
};
oFF.QCapabilities.prototype.setSupportsInputEnablementFilterSettings = function(supportsInputEnablementFilterSettings)
{
	this.m_supportsInputEnablementFilterSettings = supportsInputEnablementFilterSettings;
};
oFF.QCapabilities.prototype.setSupportsInputReadinessFilter = function(supportsInputReadinessFilter)
{
	this.m_supportsInputReadinessFilter = supportsInputReadinessFilter;
};
oFF.QCapabilities.prototype.setSupportsInputReadinessStates = function(supportsInputReadinessStates)
{
	this.m_supportsInputReadinessStates = supportsInputReadinessStates;
};
oFF.QCapabilities.prototype.setSupportsInputReadinessWithNavigationalAttributes = function(supportsInputReadinessWithNavigationalAttributes)
{
	this.m_supportsInputReadinessWithNavigationalAttributes = supportsInputReadinessWithNavigationalAttributes;
};
oFF.QCapabilities.prototype.setSupportsIntersectLayers = function(supportsIntersectLayers)
{
	this.m_supportsIntersectLayers = supportsIntersectLayers;
};
oFF.QCapabilities.prototype.setSupportsIteratedFormula = function(supportsIteratedFormula)
{
	this.m_supportsIteratedFormula = supportsIteratedFormula;
};
oFF.QCapabilities.prototype.setSupportsKeepOriginalTexts = function(supportsKeepOriginalTexts)
{
	this.m_supportsKeepOriginalTexts = supportsKeepOriginalTexts;
};
oFF.QCapabilities.prototype.setSupportsLightweightMetadata = function(supportsLightweightMetadata)
{
	this.m_supportsLightweightMetadata = supportsLightweightMetadata;
};
oFF.QCapabilities.prototype.setSupportsLocaleSorting = function(supportsLocaleSorting)
{
	this.m_supportsLocaleSorting = supportsLocaleSorting;
};
oFF.QCapabilities.prototype.setSupportsMaintainsVariableVariants = function(supportsMaintainsVariableVariants)
{
	this.m_supportsMaintainsVariableVariants = supportsMaintainsVariableVariants;
};
oFF.QCapabilities.prototype.setSupportsMaxDrillLevel = function(supportsMaxDrillLevel)
{
	this.m_supportsMaxDrillLevel = supportsMaxDrillLevel;
};
oFF.QCapabilities.prototype.setSupportsMeasureMemberCurrencyTranslations = function(supportsMeasureMemberCurrencyTranslations)
{
	this.m_supportsMeasureMemberCurrencyTranslatons = supportsMeasureMemberCurrencyTranslations;
};
oFF.QCapabilities.prototype.setSupportsMeasureMemberDefinition = function(supportsMeasureMemberDefinition)
{
	this.m_supportsMeasureMemberDefinition = supportsMeasureMemberDefinition;
};
oFF.QCapabilities.prototype.setSupportsMeasureMemberDetails = function(supportsMeasureMemberDetails)
{
	this.m_supportsMeasureMemberDetails = supportsMeasureMemberDetails;
};
oFF.QCapabilities.prototype.setSupportsMeasureMemberType = function(supportsMeasureMemberType)
{
	this.m_supportsMeasureMemberType = supportsMeasureMemberType;
};
oFF.QCapabilities.prototype.setSupportsMeasureMemberUnitTranslations = function(supportsMeasureMemberUnitTranslations)
{
	this.m_supportsMeasureMemberUnitTranslations = supportsMeasureMemberUnitTranslations;
};
oFF.QCapabilities.prototype.setSupportsMemberUniqueNamesCompatibility = function(supportsMemberUniqueNamesCompatibility)
{
	this.m_supportsMemberUniqueNamesCompatibility = supportsMemberUniqueNamesCompatibility;
};
oFF.QCapabilities.prototype.setSupportsMemberVisibility = function(supportsMemberVisibility)
{
	this.m_supportsMemberVisibility = supportsMemberVisibility;
};
oFF.QCapabilities.prototype.setSupportsMetadataDataCategory = function(supportsMetadataDataCategory)
{
	this.m_supportsMetadataDataCategory = supportsMetadataDataCategory;
};
oFF.QCapabilities.prototype.setSupportsMetadataDataSourceDefinitionValidation = function(supportsMetadataDataSourceDefinitionValidation)
{
	this.m_supportsMetadataDataSourceDefinitionValidation = supportsMetadataDataSourceDefinitionValidation;
};
oFF.QCapabilities.prototype.setSupportsMetadataDimensionOthers = function(supportsMetadataDimensionOthers)
{
	this.m_supportsMetadataDimensionOthers = supportsMetadataDimensionOthers;
};
oFF.QCapabilities.prototype.setSupportsMetadataHasExternalHierarchies = function(supportsMetadataHasExternalHierarchies)
{
	this.m_supportsMetadataHasExternalHierarchies = supportsMetadataHasExternalHierarchies;
};
oFF.QCapabilities.prototype.setSupportsMetadataResultFormatOptions = function(supportsMetadataResultFormatOptions)
{
	this.m_supportsMetadataResultFormatOptions = supportsMetadataResultFormatOptions;
};
oFF.QCapabilities.prototype.setSupportsMixedDisplayKey = function(supportsMixedDisplayKey)
{
	this.m_supportsMixedDisplayKey = supportsMixedDisplayKey;
};
oFF.QCapabilities.prototype.setSupportsMultiSource = function(supportsMultiSource)
{
	this.m_supportsMultiSource = supportsMultiSource;
};
oFF.QCapabilities.prototype.setSupportsMultipleExAggDimsInCalcPlan = function(supportsMultipleExAggDimsInCalcPlan)
{
	this.m_supportsMultipleExAggDimsInCalcPlan = supportsMultipleExAggDimsInCalcPlan;
};
oFF.QCapabilities.prototype.setSupportsNamePath = function(supportsNamePath)
{
	this.m_supportsNamePath = supportsNamePath;
};
oFF.QCapabilities.prototype.setSupportsNamedCustomMember = function(supportsNamedCustomMember)
{
	this.m_supportsNamedCustomMember = supportsNamedCustomMember;
};
oFF.QCapabilities.prototype.setSupportsNewValuesExtendedFormat = function(supportsNewValuesExtendedFormat)
{
	this.m_supportsNewValuesExtendedFormat = supportsNewValuesExtendedFormat;
};
oFF.QCapabilities.prototype.setSupportsNewValuesImplicitUnlock = function(supportsNewValuesImplicitUnlock)
{
	this.m_supportsNewValuesImplicitUnlock = supportsNewValuesImplicitUnlock;
};
oFF.QCapabilities.prototype.setSupportsNoDataActions = function(supportsNoDataActions)
{
	this.m_supportsNoDataActions = supportsNoDataActions;
};
oFF.QCapabilities.prototype.setSupportsNullZeroSuppression = function(supportsNullZeroSuppression)
{
	this.m_supportsNullZeroSuppression = supportsNullZeroSuppression;
};
oFF.QCapabilities.prototype.setSupportsNumberAsString = function(supportsNumberAsString)
{
	this.m_supportsNumberAsString = supportsNumberAsString;
};
oFF.QCapabilities.prototype.setSupportsNumericShiftPercent = function(supportsNumericShiftPercent)
{
	this.m_supportsNumericShiftPercent = supportsNumericShiftPercent;
};
oFF.QCapabilities.prototype.setSupportsObtainability = function(supportsObtainability)
{
	this.m_supportsObtainability = supportsObtainability;
};
oFF.QCapabilities.prototype.setSupportsOthersDetailsFromConditions = function(supportsOthersDetailsFromConditions)
{
	this.m_supportsOthersDetailsFromConditions = supportsOthersDetailsFromConditions;
};
oFF.QCapabilities.prototype.setSupportsOthersFromConditions = function(supportsOthersFromConditions)
{
	this.m_supportsOthersFromConditions = supportsOthersFromConditions;
};
oFF.QCapabilities.prototype.setSupportsPagingTupleCountBeforeSlicing = function(supportsPagingTupleCountBeforeSlicing)
{
	this.m_supportsPagingTupleCountBeforeSlicing = supportsPagingTupleCountBeforeSlicing;
};
oFF.QCapabilities.prototype.setSupportsPersistedInA = function(supportsPersistedInA)
{
	this.m_supportsPersistedInA = supportsPersistedInA;
};
oFF.QCapabilities.prototype.setSupportsPlanningOnCalculatedDimensions = function(supportsPlanningOnCalculatedDimensions)
{
	this.m_supportsPlanningOnCalculatedDimensions = supportsPlanningOnCalculatedDimensions;
};
oFF.QCapabilities.prototype.setSupportsQueryCurrencyTranslation = function(supportsQueryCurrencyTranslation)
{
	this.m_supportsQueryCurrencyTranslation = supportsQueryCurrencyTranslation;
};
oFF.QCapabilities.prototype.setSupportsQueryDataCellModelDefaults = function(supportsQueryDataCellModelDefaults)
{
	this.m_supportsQueryDataCellModelDefaults = supportsQueryDataCellModelDefaults;
};
oFF.QCapabilities.prototype.setSupportsRRI3 = function(supportsRRI3)
{
	this.m_supportsRRI3 = supportsRRI3;
};
oFF.QCapabilities.prototype.setSupportsRSCellFormatTypeSpecific = function(supportsRSCellFormatTypeSpecific)
{
	this.m_supportsRSCellFormatTypeSpecific = supportsRSCellFormatTypeSpecific;
};
oFF.QCapabilities.prototype.setSupportsReinitVariables = function(supportsReinitVariables)
{
	this.m_supportsReinitVariables = supportsReinitVariables;
};
oFF.QCapabilities.prototype.setSupportsRemoteBlending = function(supportsRemoteBlending)
{
	this.m_supportsRemoteBlending = supportsRemoteBlending;
};
oFF.QCapabilities.prototype.setSupportsRemoteBlendingBW = function(supportsRemoteBlendingBW)
{
	this.m_supportsRemoteBlendingBW = supportsRemoteBlendingBW;
};
oFF.QCapabilities.prototype.setSupportsRemoteBlendingWithSplittedSerializationRequests = function(supportsRemoteBlendingWithSplittedSerializationRequests)
{
	this.m_supportsCubeBlendingPersistanceType = supportsRemoteBlendingWithSplittedSerializationRequests;
};
oFF.QCapabilities.prototype.setSupportsRemoteFilter = function(supportsRemoteFilter)
{
	this.m_supportsRemoteFilter = supportsRemoteFilter;
};
oFF.QCapabilities.prototype.setSupportsReportReportInterface = function(supportsReportReportInterface)
{
	this.m_supportsReportReportInterface = supportsReportReportInterface;
};
oFF.QCapabilities.prototype.setSupportsRequestTimezone = function(supportsRequestTimezone)
{
	this.m_supportsRequestTimezone = supportsRequestTimezone;
};
oFF.QCapabilities.prototype.setSupportsRestrictedMeasures = function(supportsRestrictedMeasures)
{
	this.m_supportsRestrictedMeasures = supportsRestrictedMeasures;
};
oFF.QCapabilities.prototype.setSupportsResultSetCache = function(supportsResultSetCache)
{
	this.m_supportsResultSetCache = supportsResultSetCache;
};
oFF.QCapabilities.prototype.setSupportsResultSetCellExplain = function(supportsResultSetCellExplain)
{
	this.m_supportsResultSetCellExplain = supportsResultSetCellExplain;
};
oFF.QCapabilities.prototype.setSupportsResultSetHierarchyLevel = function(supportsResultSetHierarchyLevel)
{
	this.m_supportsResultSetHierarchyLevel = supportsResultSetHierarchyLevel;
};
oFF.QCapabilities.prototype.setSupportsResultSetInterval = function(supportsResultSetInterval)
{
	this.m_supportsResultSetInterval = supportsResultSetInterval;
};
oFF.QCapabilities.prototype.setSupportsResultSetNumericValueWithInternalPrecision = function(supportsResultSetNumericValueWithInternalPrecision)
{
	this.m_supportsResultSetNumericValueWithInternalPrecision = supportsResultSetNumericValueWithInternalPrecision;
};
oFF.QCapabilities.prototype.setSupportsResultSetUnitIndex = function(supportsResultSetUnitIndex)
{
	this.m_supportsResultSetUnitIndex = supportsResultSetUnitIndex;
};
oFF.QCapabilities.prototype.setSupportsResultSetV2MetadataExtension1 = function(supportsResultSetV2MetadataExtension1)
{
	this.m_supportsResultSetV2MetadataExtension1 = supportsResultSetV2MetadataExtension1;
};
oFF.QCapabilities.prototype.setSupportsResultsetEffectiveFilter = function(supportsResultSetEffectiveFilter)
{
	this.m_supportsResultSetEffectiveFilter = supportsResultSetEffectiveFilter;
};
oFF.QCapabilities.prototype.setSupportsResultsetFacets = function(supportsResultsetFacets)
{
	this.m_supportsResultsetFacets = supportsResultsetFacets;
};
oFF.QCapabilities.prototype.setSupportsReturnMetadataExtensions = function(supportsReturnMetadataExtensions)
{
	this.m_supportsReturnMetadataExtensions = supportsReturnMetadataExtensions;
};
oFF.QCapabilities.prototype.setSupportsReturnedDataSelection = function(supportsReturnedDataSelection)
{
	this.m_supportsReturnedDataSelection = supportsReturnedDataSelection;
};
oFF.QCapabilities.prototype.setSupportsRootOrphansAfterVisibilityFilter = function(supportsRootOrphansAfterVisibilityFilter)
{
	this.m_supportsRootOrphansAfterVisibilityFilter = supportsRootOrphansAfterVisibilityFilter;
};
oFF.QCapabilities.prototype.setSupportsRunAsUser = function(supportsRunAsUser)
{
	this.m_supportsRunAsUser = supportsRunAsUser;
};
oFF.QCapabilities.prototype.setSupportsSapDate = function(supportsSapDate)
{
	this.m_supportsSapDate = supportsSapDate;
};
oFF.QCapabilities.prototype.setSupportsSemanticObject = function(supportsSemanticObject)
{
	this.m_supportsSemanticObject = supportsSemanticObject;
};
oFF.QCapabilities.prototype.setSupportsServerState = function(supportsServerState)
{
	this.m_supportsServerState = supportsServerState;
};
oFF.QCapabilities.prototype.setSupportsSetOperand = function(supportsSetOperand)
{
	this.m_supportsSetOperand = supportsSetOperand;
};
oFF.QCapabilities.prototype.setSupportsSetOperandCurrentMemberSingleNavigation = function(supportsSetOperandCurrentMemberSingleNavigation)
{
	this.m_supportsSetOperandCurrentMemberSingleNavigation = supportsSetOperandCurrentMemberSingleNavigation;
};
oFF.QCapabilities.prototype.setSupportsShutdown = function(supportsShutdown)
{
	this.m_supportsShutdown = supportsShutdown;
};
oFF.QCapabilities.prototype.setSupportsSidPresentation = function(supportsSidPresentation)
{
	this.m_supportsSidPresentation = supportsSidPresentation;
};
oFF.QCapabilities.prototype.setSupportsSimulation = function(supportsSimulation)
{
	this.m_supportsSimulation = supportsSimulation;
};
oFF.QCapabilities.prototype.setSupportsSortNewValues = function(supportsSortNewValues)
{
	this.m_supportsSortNewValues = supportsSortNewValues;
};
oFF.QCapabilities.prototype.setSupportsSortTupleMemberType = function(supportsSortTupleMemberType)
{
	this.m_supportsSortTupleMemberType = supportsSortTupleMemberType;
};
oFF.QCapabilities.prototype.setSupportsSortTypes = function(supportsSortTypes)
{
	this.m_supportsSortTypes = supportsSortTypes;
};
oFF.QCapabilities.prototype.setSupportsSortingDefaults = function(supportsSortingDefaults)
{
	this.m_supportsSortingDefaults = supportsSortingDefaults;
};
oFF.QCapabilities.prototype.setSupportsSpatialChoropleth = function(supportsSpatialChoropleth)
{
	this.m_supportsSpatialChoropleth = supportsSpatialChoropleth;
};
oFF.QCapabilities.prototype.setSupportsSpatialClustering = function(supportsSpatialClustering)
{
	this.m_supportsSpatialClustering = supportsSpatialClustering;
};
oFF.QCapabilities.prototype.setSupportsSpatialFilter = function(supportsSpatialFilter)
{
	this.m_supportsSpatialFilter = supportsSpatialFilter;
};
oFF.QCapabilities.prototype.setSupportsSpatialFilterSrid = function(supportsSpatialFilterSrid)
{
	this.m_supportsSpatialFilterSrid = supportsSpatialFilterSrid;
};
oFF.QCapabilities.prototype.setSupportsSpatialTransformDistanceFilter = function(supportsSpatialTransformDistanceFilter)
{
	this.m_supportsSpatialTransformDistanceFilter = supportsSpatialTransformDistanceFilter;
};
oFF.QCapabilities.prototype.setSupportsSpatialTransformation = function(supportsSpatialTransformation)
{
	this.m_supportsSpatialTransformation = supportsSpatialTransformation;
};
oFF.QCapabilities.prototype.setSupportsSqlTypeBoolean = function(supportsSqlTypeBoolean)
{
	this.m_supportsSqlTypeBoolean = supportsSqlTypeBoolean;
};
oFF.QCapabilities.prototype.setSupportsStatisticalAggregations = function(supportStatisticalAggregations)
{
	this.m_supportsStatisticalAggregations = supportStatisticalAggregations;
};
oFF.QCapabilities.prototype.setSupportsStructureOnFreeAxis = function(supportsStructureOnFreeAxis)
{
	this.m_supportsStructureOnFreeAxis = supportsStructureOnFreeAxis;
};
oFF.QCapabilities.prototype.setSupportsStructureRestrictionsInValueHelp = function(supportsStructureRestrictionsInValueHelp)
{
	this.m_supportsStructureRestrictionsInValueHelp = supportsStructureRestrictionsInValueHelp;
};
oFF.QCapabilities.prototype.setSupportsSupplements = function(supportsSupplements)
{
	this.m_supportsSupplements = supportsSupplements;
};
oFF.QCapabilities.prototype.setSupportsSupportsRunningAggregation = function(supportsSupportsRunningAggregation)
{
	this.m_supportsSupportsRunningAggregation = supportsSupportsRunningAggregation;
};
oFF.QCapabilities.prototype.setSupportsSuppressKeyfigureCalculation = function(supportsSuppressKeyfigureCalculation)
{
	this.m_supportsSuppressKeyfigureCalculation = supportsSuppressKeyfigureCalculation;
};
oFF.QCapabilities.prototype.setSupportsSuppressSupplements = function(supportsSuppressSupplements)
{
	this.m_supportsSuppressSupplements = supportsSuppressSupplements;
};
oFF.QCapabilities.prototype.setSupportsTechnicalAxis = function(supportsTechnicalAxis)
{
	this.m_supportsTechnicalAxis = supportsTechnicalAxis;
};
oFF.QCapabilities.prototype.setSupportsTextInHierarchyForCharacteristicsWithoutText = function(supportsTextInHierarchyForCharacteristicsWithoutText)
{
	this.m_supportsTextInHierarchyForCharacteristicsWithoutText = supportsTextInHierarchyForCharacteristicsWithoutText;
};
oFF.QCapabilities.prototype.setSupportsTotalOperator = function(supportsTotalOperator)
{
	this.m_supportsTotalOperator = supportsTotalOperator;
};
oFF.QCapabilities.prototype.setSupportsTuplesOperand = function(supportsTuplesOperand)
{
	this.m_supportsTuplesOperand = supportsTuplesOperand;
};
oFF.QCapabilities.prototype.setSupportsTuplesOperandFromDataSource = function(supportsTuplesOperandFromDataSource)
{
	this.m_supportsTuplesOperandFromDataSource = supportsTuplesOperandFromDataSource;
};
oFF.QCapabilities.prototype.setSupportsUdhAlignment = function(supportsUdhAlignment)
{
	this.m_supportsUdhAlignment = supportsUdhAlignment;
};
oFF.QCapabilities.prototype.setSupportsUdhKey = function(supportsUdhKey)
{
	this.m_supportsUdhKey = supportsUdhKey;
};
oFF.QCapabilities.prototype.setSupportsUndefinedTupleCountTotals = function(supportsUndefinedTupleCountTotals)
{
	this.m_supportsUndefinedTupleCountTotals = supportsUndefinedTupleCountTotals;
};
oFF.QCapabilities.prototype.setSupportsUnifiedDataCells = function(supportsUnifiedDataCells)
{
	this.m_supportsUnifiedDataCells = supportsUnifiedDataCells;
};
oFF.QCapabilities.prototype.setSupportsUniqueAxisProperties = function(supportsUniqueAxisProperties)
{
	this.m_supportsUniqueAxisProperties = supportsUniqueAxisProperties;
};
oFF.QCapabilities.prototype.setSupportsUniqueHierarchyPath = function(supportsUniqueHierarchyPath)
{
	this.m_supportsUniqueHierarchyPath = supportsUniqueHierarchyPath;
};
oFF.QCapabilities.prototype.setSupportsUnitTranslation = function(supportsUnitTranslation)
{
	this.m_supportsUnitTranslation = supportsUnitTranslation;
};
oFF.QCapabilities.prototype.setSupportsUniversalDisplayHierarchies = function(supportsUniversalDisplayHierarchies)
{
	this.m_supportsUniversalDisplayHierarchies = supportsUniversalDisplayHierarchies;
};
oFF.QCapabilities.prototype.setSupportsUniversalDisplayHierarchiesCustomDimensions = function(supportsUniversalDisplayHierarchiesCustomDimensions)
{
	this.m_supportsUniversalDisplayHierarchiesCustomDimensions = supportsUniversalDisplayHierarchiesCustomDimensions;
};
oFF.QCapabilities.prototype.setSupportsUniversalDisplayHierarchiesZeroBased = function(supportsUniversalDisplayHierarchiesZeroBased)
{
	this.m_supportsUniversalDisplayHierarchiesZeroBased = supportsUniversalDisplayHierarchiesZeroBased;
};
oFF.QCapabilities.prototype.setSupportsUniversalModel = function(supportsUniversalModel)
{
	this.m_supportsUniversalModel = supportsUniversalModel;
};
oFF.QCapabilities.prototype.setSupportsValueHelpHierarchyPath = function(supportsValueHelpHierarchyPath)
{
	this.m_supportsValueHelpHierarchyPath = supportsValueHelpHierarchyPath;
};
oFF.QCapabilities.prototype.setSupportsValueHelpWithAttributes = function(supportsValueHelpWithAttributes)
{
	this.m_supportsValueHelpWithAttributes = supportsValueHelpWithAttributes;
};
oFF.QCapabilities.prototype.setSupportsVariableMasking = function(supportsVariableMasking)
{
	this.m_supportsVariableMasking = supportsVariableMasking;
};
oFF.QCapabilities.prototype.setSupportsVariableVariants = function(supportsVariableVariants)
{
	this.m_supportsVariableVariants = supportsVariableVariants;
};
oFF.QCapabilities.prototype.setSupportsVarianceOperator = function(supportsVarianceOperator)
{
	this.m_supportsVarianceOperator = supportsVarianceOperator;
};
oFF.QCapabilities.prototype.setSupportsVersionParameters = function(supportsVersionParameters)
{
	this.m_supportsVersionParameters = supportsVersionParameters;
};
oFF.QCapabilities.prototype.setSupportsVersionPrivileges = function(supportsVersionPrivileges)
{
	this.m_supportsVersionPrivileges = supportsVersionPrivileges;
};
oFF.QCapabilities.prototype.setSupportsVirtualDataSourceTypeColumns = function(supportsVirtualDataSourceTypeColumns)
{
	this.m_supportsVirtualDataSourceTypeColumns = supportsVirtualDataSourceTypeColumns;
};
oFF.QCapabilities.prototype.setSupportsVirtualDescription = function(supportsVirtualDescription)
{
	this.m_supportsVirtualDescription = supportsVirtualDescription;
};
oFF.QCapabilities.prototype.setSupportsVisibilityFilter = function(supportsVisibilityFilter)
{
	this.m_supportsVisibilityFilter = supportsVisibilityFilter;
};
oFF.QCapabilities.prototype.setSupportsVisualAggregation = function(supportsVisualAggregation)
{
	this.m_supportsVisualAggregation = supportsVisualAggregation;
};
oFF.QCapabilities.prototype.setSupportsWindowFunction = function(supportsWindowFunction)
{
	this.m_supportsWindowFunction = supportsWindowFunction;
};
oFF.QCapabilities.prototype.setSupportsZeroSuppression = function(supportsZeroSuppression)
{
	this.m_supportsZeroSuppression = supportsZeroSuppression;
};
oFF.QCapabilities.prototype.setSystemName = function(systemName)
{
	this.m_systemName = systemName;
};
oFF.QCapabilities.prototype.setSystemType = function(systemType)
{
	this.m_systemType = systemType;
};
oFF.QCapabilities.prototype.supportsAggregationNopNull = function()
{
	return this.m_supportsAggregationNopNull;
};
oFF.QCapabilities.prototype.supportsAggregationNopNullExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline1();
		}
	}
	return this.supportsAggregationNopNull();
};
oFF.QCapabilities.prototype.supportsAggregationNopNullZero = function()
{
	return this.m_supportsAggregationNopNullZero;
};
oFF.QCapabilities.prototype.supportsAggregationNopNullZeroExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline1();
		}
	}
	return this.supportsAggregationNopNullZero();
};
oFF.QCapabilities.prototype.supportsAggregationsFirstLastAverageOfDimension = function()
{
	return this.m_supportsAggregationsFirstLastAverageOfDimension;
};
oFF.QCapabilities.prototype.supportsAsyncBatchRequests = function()
{
	return this.m_supportsAsyncBatchRequests;
};
oFF.QCapabilities.prototype.supportsAsyncRemoteModelValidation = function()
{
	return this.m_supportsAsyncRemoteModelValidation;
};
oFF.QCapabilities.prototype.supportsAttributeValueLookup = function()
{
	return this.m_supportsAttributeValueLookup;
};
oFF.QCapabilities.prototype.supportsAttributeValueLookupExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline1();
		}
	}
	return this.supportsAttributeValueLookup();
};
oFF.QCapabilities.prototype.supportsAutoVariableSubmit = function()
{
	return this.m_supportsAutomaticVariableSubmit;
};
oFF.QCapabilities.prototype.supportsAverageCountNullZero = function()
{
	return this.m_supportsAverageCountNullZero;
};
oFF.QCapabilities.prototype.supportsBatchBlendingRsStreaming = function()
{
	return this.m_supportsBatchBlendingRsStreaming;
};
oFF.QCapabilities.prototype.supportsBatchRsStreaming = function()
{
	return this.m_supportsBatchRsStreaming;
};
oFF.QCapabilities.prototype.supportsBreakGrouping = function(sortType)
{
	return this.m_supportedBreakGrouping.contains(sortType);
};
oFF.QCapabilities.prototype.supportsCDSProjectionViews = function()
{
	return this.m_supportsCDSProjectionViews;
};
oFF.QCapabilities.prototype.supportsCalculateWithNullCellsUnitType = function()
{
	return this.m_supportsCalculateWithNullCellsUnitType;
};
oFF.QCapabilities.prototype.supportsCalculatedDimensions = function()
{
	return this.m_supportsCalculatedDimensions;
};
oFF.QCapabilities.prototype.supportsCalculatedDimensionsExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline2();
		}
		if (this.m_systemType.isTypeOf(oFF.SystemType.UNV))
		{
			return this.supportsUnvBaseline3();
		}
	}
	return this.supportsCalculatedDimensions();
};
oFF.QCapabilities.prototype.supportsCalculatedDimensionsExt2 = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline2();
		}
		if (this.m_systemType.isTypeOf(oFF.SystemType.UNV))
		{
			return this.supportsUnvBaseline6();
		}
	}
	return this.supportsCalculatedDimensions();
};
oFF.QCapabilities.prototype.supportsCancelRunningQueries = function()
{
	return this.m_supportsCancelRunningQueries;
};
oFF.QCapabilities.prototype.supportsCartesianFilterIntersect = function()
{
	return this.m_supportsCartesianFilterIntersect;
};
oFF.QCapabilities.prototype.supportsCatalogServiceV2 = function()
{
	return this.m_supportsCatalogServiceV2;
};
oFF.QCapabilities.prototype.supportsCeScenarioParams = function()
{
	return this.m_supportsCeScenarioParams;
};
oFF.QCapabilities.prototype.supportsCellDocumentId = function()
{
	return this.m_supportsCellDocumentId;
};
oFF.QCapabilities.prototype.supportsCellValueOperand = function()
{
	return this.m_supportsCellValueOperand;
};
oFF.QCapabilities.prototype.supportsCellValueOperandExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline1();
		}
	}
	return this.supportsCellValueOperand();
};
oFF.QCapabilities.prototype.supportsCheckVariables = function()
{
	return this.m_supportsCheckVariables;
};
oFF.QCapabilities.prototype.supportsClientInfo = function()
{
	return this.m_supportsClientInfo;
};
oFF.QCapabilities.prototype.supportsComplexFilter = function()
{
	return this.m_supportsComplexFilter;
};
oFF.QCapabilities.prototype.supportsComplexSorting = function()
{
	return this.m_supportedSortingTypes.contains(oFF.SortType.COMPLEX);
};
oFF.QCapabilities.prototype.supportsComplexTupleFilter = function()
{
	return this.m_supportsComplexTupleFilter;
};
oFF.QCapabilities.prototype.supportsCompoundGrowthRate = function()
{
	return oFF.notNull(this.m_systemType) && !this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsConditionalResultVisibility = function()
{
	return this.m_supportsConditionalResultVisibility;
};
oFF.QCapabilities.prototype.supportsConditionalResults = function()
{
	return this.m_supportsConditionalResults;
};
oFF.QCapabilities.prototype.supportsConditions = function()
{
	return this.m_supportsConditions;
};
oFF.QCapabilities.prototype.supportsConditionsOverride = function()
{
	return this.m_supportsConditions && oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.UNV);
};
oFF.QCapabilities.prototype.supportsConditionsWithHiddenMeasures = function()
{
	return this.m_supportsConditionsWithHiddenMeasures;
};
oFF.QCapabilities.prototype.supportsConditionsWithVersions = function()
{
	if (oFF.notNull(this.m_systemType) && this.m_supportsConditions)
	{
		return this.m_systemType.isTypeOf(oFF.SystemType.BW) || this.m_systemType.isTypeOf(oFF.SystemType.HANA) && this.m_supportsConditionsWithVersions;
	}
	return false;
};
oFF.QCapabilities.prototype.supportsConvertToFlatFilter = function()
{
	return this.m_supportsConvertToFlatFilter;
};
oFF.QCapabilities.prototype.supportsCorrectDimensionDescription = function()
{
	return this.m_supportsCorrectDimensionDescription;
};
oFF.QCapabilities.prototype.supportsCorrectDimensionDescriptionExt = function()
{
	return this.supportsCorrectDimensionDescription() || oFF.notNull(this.m_systemType) && !this.m_systemType.isTypeOf(oFF.SystemType.HANA);
};
oFF.QCapabilities.prototype.supportsCubeBlending = function()
{
	return this.m_supportsCubeBlending;
};
oFF.QCapabilities.prototype.supportsCubeBlendingAggregation = function()
{
	return this.m_supportsCubeBlendingAggregation;
};
oFF.QCapabilities.prototype.supportsCubeBlendingAggregationExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline1();
		}
	}
	return this.supportsCubeBlendingAggregation();
};
oFF.QCapabilities.prototype.supportsCubeBlendingCustomMember = function()
{
	return this.m_supportsCubeBlendingCustomMember;
};
oFF.QCapabilities.prototype.supportsCubeBlendingCustomMemberExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline1();
		}
	}
	return this.supportsCubeBlendingCustomMember();
};
oFF.QCapabilities.prototype.supportsCubeBlendingExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline1();
		}
	}
	return this.supportsCubeBlending();
};
oFF.QCapabilities.prototype.supportsCubeBlendingOutOfContext = function()
{
	return this.m_supportsCubeBlendingOutOfContext;
};
oFF.QCapabilities.prototype.supportsCubeBlendingOutOfContextExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline1();
		}
	}
	return this.supportsCubeBlendingOutOfContext();
};
oFF.QCapabilities.prototype.supportsCubeBlendingProperties = function()
{
	return this.m_supportsCubeBlendingProperties;
};
oFF.QCapabilities.prototype.supportsCubeBlendingPropertiesExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline1();
		}
	}
	return this.supportsCubeBlendingProperties();
};
oFF.QCapabilities.prototype.supportsCubeBlendingReadmode = function()
{
	return this.m_supportsCubeBlendingReadmode;
};
oFF.QCapabilities.prototype.supportsCubeBlendingReadmodeExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline1();
		}
	}
	return this.supportsCubeBlendingReadmode();
};
oFF.QCapabilities.prototype.supportsCubeBlendingSorting = function()
{
	return this.m_supportsCubeBlendingSorting;
};
oFF.QCapabilities.prototype.supportsCubeBlendingSortingExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline1();
		}
	}
	return this.supportsCubeBlendingSorting();
};
oFF.QCapabilities.prototype.supportsCubeBlendingWithNSubqueries = function()
{
	return this.m_supportsCubeBlendingWithNSubqueries;
};
oFF.QCapabilities.prototype.supportsCubeCache = function()
{
	return this.m_supportsCubeCache;
};
oFF.QCapabilities.prototype.supportsCummulative = function()
{
	return this.m_supportsCummulative;
};
oFF.QCapabilities.prototype.supportsCurrencyTranslation = function()
{
	return this.m_supportsCurrencyTranslation;
};
oFF.QCapabilities.prototype.supportsCurrentMemberFilterExtension = function()
{
	return this.m_supportsCurrentMemberFilterExtension;
};
oFF.QCapabilities.prototype.supportsCurrentMemberFilterExtensionExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline1();
		}
	}
	return this.supportsCurrentMemberFilterExtension();
};
oFF.QCapabilities.prototype.supportsCustomDimension2 = function()
{
	return this.m_supportsCustomDimension2;
};
oFF.QCapabilities.prototype.supportsCustomDimension2Ext = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline3();
		}
	}
	return this.supportsCustomDimension2();
};
oFF.QCapabilities.prototype.supportsCustomDimension2MemberMetadata = function()
{
	return this.m_supportsCustomDimension2MemberMetadata;
};
oFF.QCapabilities.prototype.supportsCustomDimensionFilterCapability = function()
{
	return this.m_supportsCustomDimensionFilterCapability;
};
oFF.QCapabilities.prototype.supportsCustomDimensionMemberExecutionStep = function()
{
	return this.m_supportsCustomDimensionMemberExecutionStep;
};
oFF.QCapabilities.prototype.supportsCustomHierarchy = function()
{
	return this.m_supportsCustomHierarchy;
};
oFF.QCapabilities.prototype.supportsCustomMeasureSortOrder = function()
{
	return this.m_supportsCustomMeasureSortOrder;
};
oFF.QCapabilities.prototype.supportsCustomMeasuresInMetadata = function()
{
	return this.m_supportsMeasureMemberDefinition && this.m_supportsMeasureMemberDetails && this.m_supportsMeasureMemberType;
};
oFF.QCapabilities.prototype.supportsCustomMemberKeySortOrder = function()
{
	return this.m_supportsCustomMemberKeySortOrder;
};
oFF.QCapabilities.prototype.supportsCustomMemberKeySortOrderExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsCustomSort();
		}
		if (this.m_systemType.isTypeOf(oFF.SystemType.UNV))
		{
			return this.supportsUnvBaseline3();
		}
		if (this.m_systemType.isTypeOf(oFF.SystemType.BW))
		{
			return this.supportsCustomMemberKeySortOrder();
		}
	}
	return false;
};
oFF.QCapabilities.prototype.supportsCustomMemberKeySortOrderExt2 = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsCustomSort();
		}
		if (this.m_systemType.isTypeOf(oFF.SystemType.UNV))
		{
			return this.supportsUnvBaseline6();
		}
		if (this.m_systemType.isTypeOf(oFF.SystemType.BW))
		{
			return this.supportsCustomMemberKeySortOrder();
		}
	}
	return false;
};
oFF.QCapabilities.prototype.supportsCustomSort = function()
{
	return this.m_supportsCustomSort;
};
oFF.QCapabilities.prototype.supportsCustomSortingExtended = function()
{
	return this.m_supportedSortingTypes.contains(oFF.SortType.CUSTOM);
};
oFF.QCapabilities.prototype.supportsDataCellContexts = function()
{
	return this.m_supportsDataCellContexts;
};
oFF.QCapabilities.prototype.supportsDataCellMixedValues = function()
{
	return this.m_supportsDataCellMixedValues;
};
oFF.QCapabilities.prototype.supportsDataCellSorting = function()
{
	return this.m_supportedSortingTypes.contains(oFF.SortType.DATA_CELL_VALUE);
};
oFF.QCapabilities.prototype.supportsDataCells = function()
{
	return this.m_supportsDataCells;
};
oFF.QCapabilities.prototype.supportsDataRefreshAndDataTopicality = function()
{
	return this.m_supportsDataRefreshAndDataTopicality;
};
oFF.QCapabilities.prototype.supportsDefaultMeasureAddedForClustering = function()
{
	return oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsDefaultResultSetAttributes = function()
{
	return oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsDetailedResponseExpansion = function()
{
	return this.m_supportsDetailedResponseExpansion;
};
oFF.QCapabilities.prototype.supportsDifferenceFromCalculationExt = function()
{
	return this.supportsMdsBaseline1();
};
oFF.QCapabilities.prototype.supportsDimensionDefaultMember = function()
{
	return this.m_supportsDimensionDefaultMember;
};
oFF.QCapabilities.prototype.supportsDimensionHierarchyLevels = function()
{
	return this.m_supportsDimensionHierarchyLevels;
};
oFF.QCapabilities.prototype.supportsDimensionHierarchyMetadata = function()
{
	return this.m_supportsDimensionHierarchyMetadata;
};
oFF.QCapabilities.prototype.supportsDimensionKeyAttributes = function()
{
	return this.m_supportsDimensionKeyAttributes;
};
oFF.QCapabilities.prototype.supportsDimensionSorting = function(dimension, sortType)
{
	if (oFF.notNull(dimension))
	{
		return !dimension.isUniversalDisplayHierarchyDimension() && dimension.supportsSorting(sortType);
	}
	if (oFF.isNull(sortType))
	{
		return this.m_supportedSortingTypes.contains(oFF.SortType.FILTER) || this.m_supportedSortingTypes.contains(oFF.SortType.HIERARCHY) || this.m_supportedSortingTypes.contains(oFF.SortType.MEMBER_KEY) || this.m_supportedSortingTypes.contains(oFF.SortType.MEMBER_TEXT);
	}
	if (sortType === oFF.SortType.FILTER || sortType === oFF.SortType.HIERARCHY || sortType === oFF.SortType.MEMBER_KEY || sortType === oFF.SortType.MEMBER_TEXT || sortType === oFF.SortType.CUSTOM)
	{
		return this.m_supportedSortingTypes.contains(sortType);
	}
	return false;
};
oFF.QCapabilities.prototype.supportsDimensionToMeasureCalculationExt = function()
{
	return this.supportsMdsBaseline3();
};
oFF.QCapabilities.prototype.supportsDimensionVisibility = function()
{
	return this.m_supportsDimensionVisibility;
};
oFF.QCapabilities.prototype.supportsDirectVariableTransfer = function()
{
	return this.m_supportsDirectVariableTransfer;
};
oFF.QCapabilities.prototype.supportsDisplayAttributes = function()
{
	return this.m_supportsDisplayAttributes;
};
oFF.QCapabilities.prototype.supportsDisplayHierarchyFixInFilter = function()
{
	return this.m_supportsDisplayHierarchyFixInFilter;
};
oFF.QCapabilities.prototype.supportsDisplayIdFormat = function()
{
	return oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsDisplayShortMediumLongText = function()
{
	return oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsDynamicRestrictionOnFormula = function()
{
	return this.m_supportsDynamicRestrictionOnFormula;
};
oFF.QCapabilities.prototype.supportsDynamicTimeMeasure = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return true;
		}
		else if (this.m_systemType.isTypeOf(oFF.SystemType.BW))
		{
			return this.supportsInaCurrentMember() && this.supportsIgnoreExternalDimensions() && this.supportsUniversalDisplayHierarchiesCustomDimensions();
		}
	}
	return false;
};
oFF.QCapabilities.prototype.supportsDynamicVariableRefresh = function()
{
	return this.m_supportsDynamicVariableRefresh;
};
oFF.QCapabilities.prototype.supportsEncodedResultset = function()
{
	return this.m_supportsEncodedResultset;
};
oFF.QCapabilities.prototype.supportsErrorAboveLevel = function()
{
	return this.m_supportsErrorAboveLevel;
};
oFF.QCapabilities.prototype.supportsExceptionAggregationAvgNullSelectionMember = function()
{
	return this.m_supportsExceptionAggregationAvgNullSelectionMember;
};
oFF.QCapabilities.prototype.supportsExceptionAggregationAvgNullSelectionMemberExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline3();
		}
	}
	return this.supportsExceptionAggregationAvgNullSelectionMember();
};
oFF.QCapabilities.prototype.supportsExceptionAggregationCountNullSelectionMember = function()
{
	return this.m_supportsExceptionAggregationCountNullSelectionMember;
};
oFF.QCapabilities.prototype.supportsExceptionAggregationCountNullSelectionMemberExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline3();
		}
	}
	return this.supportsExceptionAggregationCountNullSelectionMember();
};
oFF.QCapabilities.prototype.supportsExceptionAggregationDimsFormulas = function()
{
	return this.m_supportsExceptionAggregationDimsFormulas;
};
oFF.QCapabilities.prototype.supportsExceptionAggregationDimsFormulasExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline1();
		}
	}
	return this.supportsExceptionAggregationDimsFormulas();
};
oFF.QCapabilities.prototype.supportsExceptionAggregationFirstLastSelectionMember = function()
{
	return this.m_supportsExceptionAggregationFirstLastSelectionMember;
};
oFF.QCapabilities.prototype.supportsExceptionAggregationFirstLastSelectionMemberExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline3();
		}
	}
	return this.supportsExceptionAggregationFirstLastSelectionMember();
};
oFF.QCapabilities.prototype.supportsExceptionAggregationOnSelectionExt = function()
{
	return this.supportsMdsBaseline3();
};
oFF.QCapabilities.prototype.supportsExceptionSettings = function()
{
	return this.m_supportsExceptionSettings;
};
oFF.QCapabilities.prototype.supportsExceptionSettingsExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline1();
		}
	}
	return this.supportsExceptionSettings();
};
oFF.QCapabilities.prototype.supportsExceptionThresholdNoPrec = function()
{
	return this.m_supportsExceptionThresholdNoPrec;
};
oFF.QCapabilities.prototype.supportsExceptions = function()
{
	return this.m_supportsExceptions;
};
oFF.QCapabilities.prototype.supportsExceptionsSingleMemberFilterValidation = function()
{
	return oFF.notNull(this.m_systemType) && !this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsExceptionsV2 = function()
{
	return this.m_supportsExceptionsV2;
};
oFF.QCapabilities.prototype.supportsExcludeNodeInComplexFilter = function()
{
	return oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.HANA);
};
oFF.QCapabilities.prototype.supportsExcludeOnHierarchy = function()
{
	return oFF.notNull(this.m_systemType) && !this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsExpandBottomUp = function()
{
	return this.m_supportsExpandBottomUp;
};
oFF.QCapabilities.prototype.supportsExplicitDrillOnFilteredNodes = function()
{
	return this.m_supportsVisibilityFilter;
};
oFF.QCapabilities.prototype.supportsExtendedDimensionVisibility = function()
{
	return this.m_supportsExtendedDimensionVisibility;
};
oFF.QCapabilities.prototype.supportsExtendedDimensions = function()
{
	return this.m_supportsExtendedDimensions;
};
oFF.QCapabilities.prototype.supportsExtendedDimensionsChangeDefaultRenamingAndDescription = function()
{
	return this.m_supportsExtendedDimensionsChangeDefaultRenamingAndDescription;
};
oFF.QCapabilities.prototype.supportsExtendedDimensionsChangeDefaultRenamingAndDescriptionExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline2();
		}
	}
	return this.supportsExtendedDimensionsChangeDefaultRenamingAndDescription();
};
oFF.QCapabilities.prototype.supportsExtendedDimensionsCopyAllHierarchies = function()
{
	return this.m_supportsExtendedDimensionsCopyAllHierarchies;
};
oFF.QCapabilities.prototype.supportsExtendedDimensionsCopyAllHierarchiesExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline2();
		}
	}
	return this.supportsExtendedDimensionsCopyAllHierarchies();
};
oFF.QCapabilities.prototype.supportsExtendedDimensionsFieldMapping = function()
{
	return this.m_supportsExtendedDimensionsFieldMapping;
};
oFF.QCapabilities.prototype.supportsExtendedDimensionsJoinCardinality = function()
{
	return this.m_supportsExtendedDimensionsJoinCardinality;
};
oFF.QCapabilities.prototype.supportsExtendedDimensionsJoinColumns = function()
{
	return this.m_supportsExtendedDimensionsJoinColumns;
};
oFF.QCapabilities.prototype.supportsExtendedDimensionsOuterJoin = function()
{
	return this.m_supportsExtendedDimensionsOuterJoin;
};
oFF.QCapabilities.prototype.supportsExtendedDimensionsSkip = function()
{
	return this.m_supportsExtendedDimensionsSkip;
};
oFF.QCapabilities.prototype.supportsExtendedKeyFigureProperties = function()
{
	return this.m_supportsExtendedKeyFigureProperties;
};
oFF.QCapabilities.prototype.supportsExtendedSort = function()
{
	return this.m_supportsExtendedSort;
};
oFF.QCapabilities.prototype.supportsExtendedVariableDefinition = function()
{
	return this.m_supportsExtendedVariableDefinition;
};
oFF.QCapabilities.prototype.supportsF4FilterForTextField = function()
{
	return this.m_supportsF4FilterForTextField;
};
oFF.QCapabilities.prototype.supportsFieldSorting = function(field)
{
	return this.m_supportedSortingTypes.contains(oFF.SortType.FIELD);
};
oFF.QCapabilities.prototype.supportsFilterAsymmetricVisibility = function()
{
	return this.supportsComplexFilter() && this.supportsVisibilityFilter();
};
oFF.QCapabilities.prototype.supportsFilterCapabilityExtended = function()
{
	return this.m_supportsFilterCapabilityExtended;
};
oFF.QCapabilities.prototype.supportsFilterCascading = function(session)
{
	return oFF.notNull(this.m_systemType) && (oFF.notNull(session) && session.hasFeature(oFF.FeatureToggleOlap.FILTER_CASCADING_IBP) ? true : !this.m_systemType.isTypeOf(oFF.SystemType.ABAP_MDS));
};
oFF.QCapabilities.prototype.supportsFilterMeasureBased = function()
{
	return this.m_supportsCalculatedDimensions && this.m_supportsFormulaMeasures;
};
oFF.QCapabilities.prototype.supportsFilterStateInFirefly = function()
{
	return oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsFilteringAcrossModels = function()
{
	return this.m_supportsCalculatedDimensions;
};
oFF.QCapabilities.prototype.supportsFixHierarchyFlatKeys = function()
{
	return this.m_supportsFixHierarchyFlagKeys;
};
oFF.QCapabilities.prototype.supportsFixMetadataHierarchyAttributes = function()
{
	return this.m_supportsFixMetadataHierarchyAttributes;
};
oFF.QCapabilities.prototype.supportsFixMetadataHierarchyAttributesExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline2();
		}
	}
	return this.supportsFixMetadataHierarchyAttributes();
};
oFF.QCapabilities.prototype.supportsFlatTimeDisambiguation = function()
{
	return oFF.notNull(this.m_systemType) && !this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsFlattenDynamicFilter = function()
{
	return oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsFlexibleClientInfo = function()
{
	return this.m_supportsFlexibleClientInfo || oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsFlexibleTimeMemberNavFeatures = function()
{
	return this.supportsReturnMetadataExtensions();
};
oFF.QCapabilities.prototype.supportsFormulaMeasures = function()
{
	return this.m_supportsFormulaMeasures;
};
oFF.QCapabilities.prototype.supportsFunctionalVariables = function()
{
	return this.m_supportsFunctionalVariables;
};
oFF.QCapabilities.prototype.supportsGeoSuffix = function()
{
	return oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsHierarchyAttHierFields = function()
{
	return this.m_supportsHierAttHierFields;
};
oFF.QCapabilities.prototype.supportsHierarchyCarryingDim = function()
{
	return this.m_supportsHierCarryingDim;
};
oFF.QCapabilities.prototype.supportsHierarchyCatalog = function()
{
	return this.m_supportsHierarchyCatalog;
};
oFF.QCapabilities.prototype.supportsHierarchyDefaults = function()
{
	return this.m_supportsHierarchyDefaults;
};
oFF.QCapabilities.prototype.supportsHierarchyLevelDrilling = function()
{
	return oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.HANA);
};
oFF.QCapabilities.prototype.supportsHierarchyLevelMetadata = function()
{
	return this.m_supportsHierarchyLevelMetadata;
};
oFF.QCapabilities.prototype.supportsHierarchyLevelOffsetFilter = function()
{
	return this.m_supportsHierarchyLevelOffsetFilter;
};
oFF.QCapabilities.prototype.supportsHierarchyMetadata = function()
{
	return this.m_supportsHierarchyMetadata;
};
oFF.QCapabilities.prototype.supportsHierarchyNavCounter = function()
{
	return this.m_supportsHierNavCounter;
};
oFF.QCapabilities.prototype.supportsHierarchyNavigationDeltaMode = function()
{
	return this.m_supportsHierarchyNavigationDeltaMode;
};
oFF.QCapabilities.prototype.supportsHierarchyPath = function()
{
	return this.m_supportsHierarchyPath;
};
oFF.QCapabilities.prototype.supportsHierarchyPathPresentationType = function()
{
	return this.m_supportsHierarchyPathPresentationType;
};
oFF.QCapabilities.prototype.supportsHierarchyRestNode = function()
{
	return this.m_supportsHierarchyRestNode;
};
oFF.QCapabilities.prototype.supportsHierarchyTrapezoidFilter = function()
{
	return this.m_supportsHierarchyTrapezoidFilter;
};
oFF.QCapabilities.prototype.supportsHierarchyVirtualRootNode = function()
{
	return this.m_supportsHierarchyVirtualRootNode;
};
oFF.QCapabilities.prototype.supportsIDAttributeForMeasureDimension = function()
{
	return this.m_supportsIDAttributeForMeasureDimension;
};
oFF.QCapabilities.prototype.supportsIgnoreExternalDimensions = function()
{
	return this.m_supportsIgnoreExternalDimensions;
};
oFF.QCapabilities.prototype.supportsIgnoreExternalDimensionsExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline1();
		}
	}
	return this.supportsIgnoreExternalDimensions();
};
oFF.QCapabilities.prototype.supportsIgnoreUnitOfZeroValueInAggregation = function()
{
	return this.m_supportsIgnoreUnitOfZeroValueInAggregation;
};
oFF.QCapabilities.prototype.supportsInAModelExternalDimension = function()
{
	return this.m_supportsInAModelExternalDimension;
};
oFF.QCapabilities.prototype.supportsInAModelExternalValuehelp = function()
{
	return this.m_supportsInAModelExternalValuehelp;
};
oFF.QCapabilities.prototype.supportsInaCurrentMember = function()
{
	return this.m_supportsInaCurrentMember;
};
oFF.QCapabilities.prototype.supportsInputEnablementFilterSettings = function()
{
	return this.m_supportsInputEnablementFilterSettings;
};
oFF.QCapabilities.prototype.supportsInputReadinessFilter = function()
{
	return this.m_supportsInputReadinessFilter;
};
oFF.QCapabilities.prototype.supportsInputReadinessStates = function()
{
	return this.m_supportsInputReadinessStates;
};
oFF.QCapabilities.prototype.supportsInputReadinessWithNavigationalAttributes = function()
{
	return this.m_supportsInputReadinessWithNavigationalAttributes;
};
oFF.QCapabilities.prototype.supportsIntersectLayers = function()
{
	return this.m_supportsIntersectLayers;
};
oFF.QCapabilities.prototype.supportsIteratedFormula = function()
{
	return this.m_supportsIteratedFormula;
};
oFF.QCapabilities.prototype.supportsKeepOriginalTexts = function()
{
	return this.m_supportsKeepOriginalTexts;
};
oFF.QCapabilities.prototype.supportsLevelNavigationDisabled = function()
{
	return oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsLightweightMetadata = function()
{
	return this.m_supportsLightweightMetadata || this.supportsPersistedInA();
};
oFF.QCapabilities.prototype.supportsLocaleSorting = function()
{
	return this.m_supportsLocaleSorting;
};
oFF.QCapabilities.prototype.supportsLowerLevelNodeAlignment = function(alignment)
{
	if (alignment === oFF.Alignment.CHILDREN_ABOVE_PARENT)
	{
		return this.m_supportsExpandBottomUp;
	}
	return true;
};
oFF.QCapabilities.prototype.supportsMaintainsVariableVariants = function()
{
	return this.m_supportsMaintainsVariableVariants;
};
oFF.QCapabilities.prototype.supportsMaxDrillLevel = function()
{
	return this.m_supportsMaxDrillLevel;
};
oFF.QCapabilities.prototype.supportsMdsBaseline1 = function()
{
	let mdsMetadataVersion1 = "1.0.122.14.00000000";
	let isValidHanaVersion = oFF.ServerVersionComparator.compare(this.m_serverMetadataVersion, mdsMetadataVersion1) !== 1;
	return isValidHanaVersion && this.supportsAttributeValueLookup() && this.supportsCellValueOperand() && this.supportsIgnoreExternalDimensions() && this.supportsSetOperandCurrentMemberSingleNavigation() && this.supportsCurrentMemberFilterExtension() && this.supportsExceptionAggregationDimsFormulas() && this.supportsCubeBlending() && this.supportsCubeBlendingProperties() && this.supportsCubeBlendingSorting() && this.supportsCubeBlendingCustomMember() && this.supportsCubeBlendingReadmode() && this.supportsCubeBlendingOutOfContext() && this.supportsCubeBlendingAggregation() && this.supportsExceptionSettings() && this.supportsAggregationNopNull() && this.supportsAggregationNopNullZero() && this.supportsMultipleExAggDimsInCalcPlan();
};
oFF.QCapabilities.prototype.supportsMdsBaseline2 = function()
{
	return this.supportsMdsBaseline1() && this.supportsExtendedDimensionsChangeDefaultRenamingAndDescription() && this.supportsExtendedDimensionsCopyAllHierarchies() && this.supportsFixMetadataHierarchyAttributes() && this.supportsRemoteBlending() && this.supportsCalculatedDimensions() && this.supportsPlanningOnCalculatedDimensions();
};
oFF.QCapabilities.prototype.supportsMdsBaseline3 = function()
{
	return this.supportsMdsBaseline2() && this.supportsCustomDimension2() && this.supportsResultSetUnitIndex() && this.supportsExceptionAggregationCountNullSelectionMember() && this.supportsExceptionAggregationAvgNullSelectionMember() && this.supportsExceptionAggregationFirstLastSelectionMember();
};
oFF.QCapabilities.prototype.supportsMdsBaseline4 = function()
{
	return this.supportsMdsBaseline3() && this.supportsRemoteFilter();
};
oFF.QCapabilities.prototype.supportsMdsBaseline5 = function()
{
	return this.supportsMdsBaseline4() && this.supportsStatisticalAggregations();
};
oFF.QCapabilities.prototype.supportsMdsBaseline6 = function()
{
	return this.supportsMdsBaseline5() && this.supportsResultSetCellExplain();
};
oFF.QCapabilities.prototype.supportsMeasureBasedVariance = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.BW))
		{
			return this.supportsVarianceOperator();
		}
		else if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline1();
		}
	}
	return false;
};
oFF.QCapabilities.prototype.supportsMeasureMemberCurrencyTranslations = function()
{
	return this.m_supportsMeasureMemberCurrencyTranslatons;
};
oFF.QCapabilities.prototype.supportsMeasureMemberDefinition = function()
{
	return this.m_supportsMeasureMemberDefinition;
};
oFF.QCapabilities.prototype.supportsMeasureMemberDetails = function()
{
	return this.m_supportsMeasureMemberDetails;
};
oFF.QCapabilities.prototype.supportsMeasureMemberType = function()
{
	return this.m_supportsMeasureMemberType;
};
oFF.QCapabilities.prototype.supportsMeasureMemberUnitTranslations = function()
{
	return this.m_supportsMeasureMemberUnitTranslations;
};
oFF.QCapabilities.prototype.supportsMeasureSorting = function()
{
	return this.m_supportedSortingTypes.contains(oFF.SortType.MEASURE);
};
oFF.QCapabilities.prototype.supportsMemberUniqueNamesCompatibility = function()
{
	return this.m_supportsMemberUniqueNamesCompatibility;
};
oFF.QCapabilities.prototype.supportsMemberVisibility = function()
{
	return this.m_supportsMemberVisibility;
};
oFF.QCapabilities.prototype.supportsMetadataDataCategory = function()
{
	return this.m_supportsMetadataDataCategory;
};
oFF.QCapabilities.prototype.supportsMetadataDataSourceDefinitionValidation = function()
{
	return this.m_supportsMetadataDataSourceDefinitionValidation;
};
oFF.QCapabilities.prototype.supportsMetadataDimensionOthers = function()
{
	return this.m_supportsMetadataDimensionOthers;
};
oFF.QCapabilities.prototype.supportsMetadataHasExternalHierarchies = function()
{
	return this.m_supportsMetadataHasExternalHierarchies;
};
oFF.QCapabilities.prototype.supportsMetadataResultFormatOptions = function()
{
	return this.m_supportsMetadataResultFormatOptions;
};
oFF.QCapabilities.prototype.supportsMixedDisplayKey = function()
{
	return this.m_supportsMixedDisplayKey;
};
oFF.QCapabilities.prototype.supportsMultiComplexFilter = function()
{
	return this.supportsComplexFilter() || this.supportsComplexTupleFilter();
};
oFF.QCapabilities.prototype.supportsMultiSource = function()
{
	return this.m_supportsMultiSource;
};
oFF.QCapabilities.prototype.supportsMultipleExAggDimsInCalcPlan = function()
{
	return this.m_supportsMultipleExAggDimsInCalcPlan;
};
oFF.QCapabilities.prototype.supportsMultipleExAggDimsInCalcPlanExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline1();
		}
	}
	return this.supportsMultipleExAggDimsInCalcPlan();
};
oFF.QCapabilities.prototype.supportsMultipleFiltersOnSameDimension = function()
{
	return oFF.notNull(this.m_systemType) && !this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsMultipleNonFlatFiltersOnHierarchy = function()
{
	return oFF.notNull(this.m_systemType) && !this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsNamePath = function()
{
	return this.m_supportsNamePath;
};
oFF.QCapabilities.prototype.supportsNamedCustomMember = function()
{
	return this.m_supportsNamedCustomMember;
};
oFF.QCapabilities.prototype.supportsNewValuesExtendedFormat = function()
{
	return this.m_supportsNewValuesExtendedFormat;
};
oFF.QCapabilities.prototype.supportsNewValuesImplicitUnlock = function()
{
	return this.m_supportsNewValuesImplicitUnlock;
};
oFF.QCapabilities.prototype.supportsNoDataActions = function()
{
	return this.m_supportsNoDataActions;
};
oFF.QCapabilities.prototype.supportsNonNodePath = function()
{
	return oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsNormalizePercentageInterval = function()
{
	return oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsNullFilter = function()
{
	return oFF.notNull(this.m_systemType) && !this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsNullZeroSuppression = function()
{
	return this.m_supportsNullZeroSuppression;
};
oFF.QCapabilities.prototype.supportsNumberAsString = function()
{
	return this.m_supportsNumberAsString;
};
oFF.QCapabilities.prototype.supportsNumericShiftPercent = function()
{
	return this.m_supportsNumericShiftPercent;
};
oFF.QCapabilities.prototype.supportsObtainability = function()
{
	return this.m_supportsObtainability;
};
oFF.QCapabilities.prototype.supportsOptimizeSelectAllInRM = function()
{
	return oFF.notNull(this.m_systemType) && !this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsOthersDetailsFromConditions = function()
{
	return this.m_supportsOthersDetailsFromConditions;
};
oFF.QCapabilities.prototype.supportsOthersFromConditions = function()
{
	return this.m_supportsOthersFromConditions;
};
oFF.QCapabilities.prototype.supportsPagingTupleCountBeforeSlicing = function()
{
	return this.m_supportsPagingTupleCountBeforeSlicing;
};
oFF.QCapabilities.prototype.supportsPersistedInA = function()
{
	return this.m_supportsPersistedInA;
};
oFF.QCapabilities.prototype.supportsPersistedInaQuery = function()
{
	return this.supportsPersistedInA() || this.supportsResultSetV2MetadataExtension1();
};
oFF.QCapabilities.prototype.supportsPlanningOnCalculatedDimensions = function()
{
	return this.m_supportsPlanningOnCalculatedDimensions;
};
oFF.QCapabilities.prototype.supportsPlanningOnCalculatedDimensionsExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline2();
		}
	}
	return this.supportsPlanningOnCalculatedDimensions();
};
oFF.QCapabilities.prototype.supportsPrequeryBasedFilteringAcrossModels = function()
{
	return this.m_supportsCalculatedDimensions;
};
oFF.QCapabilities.prototype.supportsPrequeryBasedFilteringAcrossModelsExt = function(other)
{
	if (oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.HANA) && other.getSystemType() !== null && other.getSystemType().isTypeOf(oFF.SystemType.HANA) && oFF.XStringUtils.isNotNullAndNotEmpty(this.m_systemName) && oFF.XStringUtils.isNotNullAndNotEmpty(other.getSystemName()))
	{
		if (oFF.XString.isEqual(this.getSystemName(), other.getSystemName()))
		{
			return this.supportsMdsBaseline3();
		}
		else
		{
			return this.supportsMdsBaseline4() && other.supportsMdsBaseline4();
		}
	}
	return false;
};
oFF.QCapabilities.prototype.supportsPreserveGrouping = function(sortType)
{
	return true;
};
oFF.QCapabilities.prototype.supportsProviderClearCache = function()
{
	return oFF.notNull(this.m_systemType) && (this.m_systemType.isTypeOf(oFF.SystemType.HANA) || this.m_systemType.isTypeOf(oFF.SystemType.UNV) || this.m_systemType.isTypeOf(oFF.SystemType.UQAS));
};
oFF.QCapabilities.prototype.supportsQueryBatchingExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline2() && this.supportsBatchRsStreaming();
		}
		if (this.m_systemType.isTypeOf(oFF.SystemType.UNV))
		{
			return this.supportsUnvBaseline3() && this.supportsBatchRsStreaming();
		}
	}
	return false;
};
oFF.QCapabilities.prototype.supportsQueryCurrencyTranslation = function()
{
	return this.m_supportsQueryCurrencyTranslation;
};
oFF.QCapabilities.prototype.supportsQueryDataCellModelDefaults = function()
{
	return this.m_supportsQueryDataCellModelDefaults;
};
oFF.QCapabilities.prototype.supportsQueryDefinedMemberAccess = function()
{
	return oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsRRI3 = function()
{
	return this.m_supportsRRI3;
};
oFF.QCapabilities.prototype.supportsRSCellFormatTypeSpecific = function()
{
	return this.m_supportsRSCellFormatTypeSpecific;
};
oFF.QCapabilities.prototype.supportsRangeFilterOnTimeBasedDimension = function()
{
	return oFF.notNull(this.m_systemType) && !this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsRankForTopN = function()
{
	return oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsReInitVariables = function()
{
	return this.m_supportsReinitVariables;
};
oFF.QCapabilities.prototype.supportsReadModeBookedWithoutMeasureContext = function()
{
	return oFF.notNull(this.m_systemType) && !this.m_systemType.isTypeOf(oFF.SystemType.ABAP_MDS);
};
oFF.QCapabilities.prototype.supportsRemoteBlending = function()
{
	return this.m_supportsRemoteBlending;
};
oFF.QCapabilities.prototype.supportsRemoteBlendingBW = function()
{
	return this.m_supportsRemoteBlendingBW;
};
oFF.QCapabilities.prototype.supportsRemoteBlendingExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline2();
		}
	}
	return this.supportsRemoteBlending();
};
oFF.QCapabilities.prototype.supportsRemoteBlendingWithSplittedSerializationRequests = function()
{
	return this.m_supportsCubeBlendingPersistanceType;
};
oFF.QCapabilities.prototype.supportsRemoteFilter = function()
{
	return this.m_supportsRemoteFilter;
};
oFF.QCapabilities.prototype.supportsRemoteFilterExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline4();
		}
	}
	return this.supportsRemoteFilter();
};
oFF.QCapabilities.prototype.supportsReportReportInterface = function()
{
	return this.m_supportsReportReportInterface;
};
oFF.QCapabilities.prototype.supportsRequestTimezone = function()
{
	return this.m_supportsRequestTimezone;
};
oFF.QCapabilities.prototype.supportsRestrictedMeasureDynamicTimeExt = function()
{
	return this.supportsMdsBaseline1();
};
oFF.QCapabilities.prototype.supportsRestrictedMeasures = function()
{
	return this.m_supportsRestrictedMeasures;
};
oFF.QCapabilities.prototype.supportsResultAlignmentType = function(resultAlignment)
{
	return this.m_supportedResultAlignment.contains(resultAlignment);
};
oFF.QCapabilities.prototype.supportsResultAlignmentWithActiveHierarchies = function()
{
	return oFF.notNull(this.m_systemType) && !this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsResultSetCache = function()
{
	return this.m_supportsResultSetCache;
};
oFF.QCapabilities.prototype.supportsResultSetCellExplain = function()
{
	return this.m_supportsResultSetCellExplain;
};
oFF.QCapabilities.prototype.supportsResultSetCellExplainExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline6();
		}
	}
	return this.supportsResultSetCellExplain();
};
oFF.QCapabilities.prototype.supportsResultSetHierarchyLevel = function()
{
	return this.m_supportsResultSetHierarchyLevel;
};
oFF.QCapabilities.prototype.supportsResultSetInterval = function()
{
	return this.m_supportsResultSetInterval;
};
oFF.QCapabilities.prototype.supportsResultSetNumericValueWithInternalPrecision = function()
{
	return this.m_supportsResultSetNumericValueWithInternalPrecision;
};
oFF.QCapabilities.prototype.supportsResultSetUnitIndex = function()
{
	return this.m_supportsResultSetUnitIndex;
};
oFF.QCapabilities.prototype.supportsResultSetUnitIndexExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline3();
		}
	}
	return this.supportsResultSetUnitIndex();
};
oFF.QCapabilities.prototype.supportsResultSetV2MetadataExtension1 = function()
{
	return this.m_supportsResultSetV2MetadataExtension1;
};
oFF.QCapabilities.prototype.supportsResultsetEffectiveFilter = function()
{
	return this.m_supportsResultSetEffectiveFilter;
};
oFF.QCapabilities.prototype.supportsResultsetFacets = function()
{
	return this.m_supportsResultsetFacets;
};
oFF.QCapabilities.prototype.supportsReturnMetadataExtensions = function()
{
	return this.m_supportsReturnMetadataExtensions;
};
oFF.QCapabilities.prototype.supportsReturnMissingShape = function()
{
	return oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsReturnedDataSelection = function()
{
	return this.m_supportsReturnedDataSelection;
};
oFF.QCapabilities.prototype.supportsRootOrphansAfterVisibilityFilter = function()
{
	return this.m_supportsRootOrphansAfterVisibilityFilter;
};
oFF.QCapabilities.prototype.supportsRunAsUser = function()
{
	return this.m_supportsRunAsUser;
};
oFF.QCapabilities.prototype.supportsSapBWWorldHierarchy = function()
{
	return oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsSapDate = function()
{
	return this.m_supportsSapDate;
};
oFF.QCapabilities.prototype.supportsSemanticObject = function()
{
	return this.m_supportsSemanticObject;
};
oFF.QCapabilities.prototype.supportsServerSideSorts = function()
{
	return oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsServerState = function()
{
	return this.m_supportsServerState;
};
oFF.QCapabilities.prototype.supportsSetOperand = function()
{
	return this.m_supportsSetOperand;
};
oFF.QCapabilities.prototype.supportsSetOperandCurrentMemberSingleNavigation = function()
{
	return this.m_supportsSetOperandCurrentMemberSingleNavigation;
};
oFF.QCapabilities.prototype.supportsSetOperandCurrentMemberSingleNavigationExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline1();
		}
	}
	return this.supportsSetOperandCurrentMemberSingleNavigation();
};
oFF.QCapabilities.prototype.supportsShutdown = function()
{
	return this.m_supportsShutdown;
};
oFF.QCapabilities.prototype.supportsSidPresentation = function()
{
	return this.m_supportsSidPresentation;
};
oFF.QCapabilities.prototype.supportsSimulation = function()
{
	return this.m_supportsSimulation;
};
oFF.QCapabilities.prototype.supportsSortDirectionForHierarchySortType = function()
{
	return oFF.notNull(this.m_systemType) && (this.m_systemType.isTypeOf(oFF.SystemType.HANA) || this.m_systemType.isTypeOf(oFF.SystemType.UNV));
};
oFF.QCapabilities.prototype.supportsSortNewValues = function()
{
	return this.m_supportsSortNewValues;
};
oFF.QCapabilities.prototype.supportsSortTupleMemberType = function()
{
	return this.m_supportsSortTupleMemberType;
};
oFF.QCapabilities.prototype.supportsSortType = function(sortType)
{
	return this.m_supportedSortingTypes.contains(sortType);
};
oFF.QCapabilities.prototype.supportsSortTypes = function()
{
	return this.m_supportsSortTypes;
};
oFF.QCapabilities.prototype.supportsSortingDefaults = function()
{
	return this.m_supportsSortingDefaults;
};
oFF.QCapabilities.prototype.supportsSortingOnValueHelpQuery = function()
{
	return oFF.notNull(this.m_systemType) && !this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsSourceDescription = function()
{
	return oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsSourceName = function()
{
	return oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsSpatialChoropleth = function()
{
	return this.m_supportsSpatialChoropleth;
};
oFF.QCapabilities.prototype.supportsSpatialClustering = function()
{
	return this.m_supportsSpatialClustering;
};
oFF.QCapabilities.prototype.supportsSpatialFilter = function()
{
	return this.m_supportsSpatialFilter;
};
oFF.QCapabilities.prototype.supportsSpatialFilterSrid = function()
{
	return this.m_supportsSpatialFilterSrid;
};
oFF.QCapabilities.prototype.supportsSpatialTransformDistanceFilter = function()
{
	return this.m_supportsSpatialTransformDistanceFilter;
};
oFF.QCapabilities.prototype.supportsSpatialTransformation = function()
{
	return this.m_supportsSpatialTransformation;
};
oFF.QCapabilities.prototype.supportsSqlTypeBoolean = function()
{
	return this.m_supportsSqlTypeBoolean;
};
oFF.QCapabilities.prototype.supportsStatisticalAggregations = function()
{
	return this.m_supportsStatisticalAggregations;
};
oFF.QCapabilities.prototype.supportsStatisticalAggregationsExt = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline5();
		}
	}
	return this.supportsStatisticalAggregations();
};
oFF.QCapabilities.prototype.supportsStringsForNumericValues = function()
{
	return oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.HANA);
};
oFF.QCapabilities.prototype.supportsStructureOnFreeAxis = function()
{
	return this.m_supportsStructureOnFreeAxis;
};
oFF.QCapabilities.prototype.supportsStructureRestrictionsInValueHelp = function()
{
	return this.m_supportsStructureRestrictionsInValueHelp;
};
oFF.QCapabilities.prototype.supportsSupplements = function()
{
	return this.m_supportsSupplements;
};
oFF.QCapabilities.prototype.supportsSupportsRunningAggregation = function()
{
	return this.m_supportsSupportsRunningAggregation;
};
oFF.QCapabilities.prototype.supportsSuppressKeyfigureCalculation = function()
{
	return this.m_supportsSuppressKeyfigureCalculation;
};
oFF.QCapabilities.prototype.supportsSuppressSupplements = function()
{
	return this.m_supportsSuppressSupplements;
};
oFF.QCapabilities.prototype.supportsTechnicalAxis = function()
{
	return this.m_supportsTechnicalAxis;
};
oFF.QCapabilities.prototype.supportsTextInHierarchyForCharacteristicsWithoutText = function()
{
	return this.m_supportsTextInHierarchyForCharacteristicsWithoutText;
};
oFF.QCapabilities.prototype.supportsTimeBasedVariance = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.BW))
		{
			return this.supportsUniversalDisplayHierarchiesCustomDimensions() && this.supportsInaCurrentMember() && this.supportsIgnoreExternalDimensions();
		}
		else if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline1();
		}
	}
	return false;
};
oFF.QCapabilities.prototype.supportsTimeBasedVarianceInBlending = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline2();
		}
	}
	return false;
};
oFF.QCapabilities.prototype.supportsTimeBasedVarianceShowAllLevels = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline1();
		}
	}
	return false;
};
oFF.QCapabilities.prototype.supportsTimeBasedVarianceWithFilterClosureUnderDisplayDrill = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline1();
		}
	}
	return false;
};
oFF.QCapabilities.prototype.supportsTimeBasedVarianceWithMultipleTime = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline1();
		}
	}
	return false;
};
oFF.QCapabilities.prototype.supportsTimeBasedVarianceWithNavigationAndExternalFilter = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.BW))
		{
			return this.supportsInaCurrentMember();
		}
	}
	return false;
};
oFF.QCapabilities.prototype.supportsTimeBasedVarianceWithNestedSelectionsOnTime = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline1();
		}
	}
	return false;
};
oFF.QCapabilities.prototype.supportsTimestampDimensions = function()
{
	return oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.HANA) && (this.supportsMdsBaseline2() || this.m_systemType.isTypeOf(oFF.SystemType.ABAP_MDS));
};
oFF.QCapabilities.prototype.supportsTotalOperator = function()
{
	return this.m_supportsTotalOperator;
};
oFF.QCapabilities.prototype.supportsTuplesOperand = function()
{
	return this.m_supportsTuplesOperand;
};
oFF.QCapabilities.prototype.supportsTuplesOperandFromDataSource = function()
{
	return this.m_supportsTuplesOperandFromDataSource;
};
oFF.QCapabilities.prototype.supportsTwoStructures = function()
{
	return oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsUdhAlignment = function()
{
	return this.m_supportsUdhAlignment;
};
oFF.QCapabilities.prototype.supportsUdhKey = function()
{
	return this.m_supportsUdhKey;
};
oFF.QCapabilities.prototype.supportsUndefinedTupleCountTotals = function()
{
	return this.m_supportsUndefinedTupleCountTotals;
};
oFF.QCapabilities.prototype.supportsUnifiedDataCells = function()
{
	return this.m_supportsUnifiedDataCells;
};
oFF.QCapabilities.prototype.supportsUniqueAxisProperties = function()
{
	return this.m_supportsUniqueAxisProperties;
};
oFF.QCapabilities.prototype.supportsUniqueHierarchyPath = function()
{
	return this.m_supportsUniqueHierarchyPath;
};
oFF.QCapabilities.prototype.supportsUnitTranslation = function()
{
	return this.m_supportsUnitTranslation;
};
oFF.QCapabilities.prototype.supportsUniversalDisplayHierarchies = function()
{
	return this.m_supportsUniversalDisplayHierarchies;
};
oFF.QCapabilities.prototype.supportsUniversalDisplayHierarchiesCustomDimensions = function()
{
	return this.m_supportsUniversalDisplayHierarchiesCustomDimensions;
};
oFF.QCapabilities.prototype.supportsUniversalDisplayHierarchiesZeroBased = function()
{
	return this.m_supportsUniversalDisplayHierarchiesZeroBased;
};
oFF.QCapabilities.prototype.supportsUniversalModel = function()
{
	return this.m_supportsUniversalModel;
};
oFF.QCapabilities.prototype.supportsUnvBaseline1 = function()
{
	let unvMetadataVersion1 = "2.1.0.0";
	let versionComparison = oFF.ServerVersionComparator.compare(this.m_serverMetadataVersion, unvMetadataVersion1);
	let isValidUnvVersion = versionComparison === 0 || versionComparison === -1;
	return isValidUnvVersion;
};
oFF.QCapabilities.prototype.supportsUnvBaseline2 = function()
{
	let unvMetadataVersion2 = "2.4.0.0";
	let versionComparison = oFF.ServerVersionComparator.compare(this.m_serverMetadataVersion, unvMetadataVersion2);
	let isValidUnvVersion = versionComparison === 0 || versionComparison === -1;
	return this.supportsUnvBaseline1() && isValidUnvVersion;
};
oFF.QCapabilities.prototype.supportsUnvBaseline3 = function()
{
	let unvMetadataVersion3 = "3.2.0.0";
	let versionComparison = oFF.ServerVersionComparator.compare(this.m_serverMetadataVersion, unvMetadataVersion3);
	let isValidUnvVersion = versionComparison === 0 || versionComparison === -1;
	return this.supportsUnvBaseline2() && isValidUnvVersion && this.supportsCalculatedDimensions();
};
oFF.QCapabilities.prototype.supportsUnvBaseline4 = function()
{
	let unvMetadataVersion4 = "3.3.0.0";
	let versionComparison = oFF.ServerVersionComparator.compare(this.m_serverMetadataVersion, unvMetadataVersion4);
	let isValidUnvVersion = versionComparison === 0 || versionComparison === -1;
	return this.supportsUnvBaseline3() && isValidUnvVersion;
};
oFF.QCapabilities.prototype.supportsUnvBaseline5 = function()
{
	let unvMetadataVersion5 = "3.3.0.0";
	let versionComparison = oFF.ServerVersionComparator.compare(this.m_serverMetadataVersion, unvMetadataVersion5);
	let isValidUnvVersion = versionComparison === 0 || versionComparison === -1;
	return this.supportsUnvBaseline4() && isValidUnvVersion;
};
oFF.QCapabilities.prototype.supportsUnvBaseline6 = function()
{
	let unvMetadataVersion6 = "3.5.0.0";
	let versionComparison = oFF.ServerVersionComparator.compare(this.m_serverMetadataVersion, unvMetadataVersion6);
	let isValidUnvVersion = versionComparison === 0 || versionComparison === -1;
	return this.supportsUnvBaseline5() && isValidUnvVersion;
};
oFF.QCapabilities.prototype.supportsUpdatedBy = function()
{
	return oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsUpdatedOn = function()
{
	return oFF.notNull(this.m_systemType) && this.m_systemType.isTypeOf(oFF.SystemType.BW);
};
oFF.QCapabilities.prototype.supportsValueHelpHierarchyPath = function()
{
	return this.m_supportsValueHelpHierarchyPath;
};
oFF.QCapabilities.prototype.supportsValueHelpWithAttributes = function()
{
	return this.m_supportsValueHelpWithAttributes;
};
oFF.QCapabilities.prototype.supportsVariableMasking = function()
{
	return this.m_supportsVariableMasking;
};
oFF.QCapabilities.prototype.supportsVariableVariants = function()
{
	return this.m_supportsVariableVariants;
};
oFF.QCapabilities.prototype.supportsVarianceOperator = function()
{
	return this.m_supportsVarianceOperator;
};
oFF.QCapabilities.prototype.supportsVersionBasedVariance = function()
{
	if (oFF.notNull(this.m_systemType))
	{
		if (this.m_systemType.isTypeOf(oFF.SystemType.BW))
		{
			return this.supportsVarianceOperator() && this.supportsIgnoreExternalDimensions();
		}
		else if (this.m_systemType.isTypeOf(oFF.SystemType.HANA))
		{
			return this.supportsMdsBaseline1();
		}
	}
	return false;
};
oFF.QCapabilities.prototype.supportsVersionParameters = function()
{
	return this.m_supportsVersionParameters;
};
oFF.QCapabilities.prototype.supportsVersionPrivileges = function()
{
	return this.m_supportsVersionPrivileges;
};
oFF.QCapabilities.prototype.supportsVirtualDataSourceTypeColumns = function()
{
	return this.m_supportsVirtualDataSourceTypeColumns;
};
oFF.QCapabilities.prototype.supportsVirtualDescription = function()
{
	return this.m_supportsVirtualDescription;
};
oFF.QCapabilities.prototype.supportsVisibilityFilter = function()
{
	return this.m_supportsVisibilityFilter;
};
oFF.QCapabilities.prototype.supportsVisualAggregation = function()
{
	return this.m_supportsVisualAggregation;
};
oFF.QCapabilities.prototype.supportsWildcardFilterOnResultSet = function()
{
	return oFF.notNull(this.m_systemType) && !this.m_systemType.isTypeOf(oFF.SystemType.BW) && !this.m_systemType.isTypeOf(oFF.SystemType.ABAP_MDS);
};
oFF.QCapabilities.prototype.supportsWindowFunctions = function()
{
	return this.m_supportsWindowFunction;
};
oFF.QCapabilities.prototype.supportsZeroSuppression = function()
{
	return this.m_supportsZeroSuppression;
};

oFF.DfCmd = function() {};
oFF.DfCmd.prototype = new oFF.DfNameObject();
oFF.DfCmd.prototype._ff_c = "DfCmd";

oFF.DfCmd.prototype.m_cmds = null;
oFF.DfCmd.prototype.m_params = null;
oFF.DfCmd.prototype.m_ret = null;
oFF.DfCmd.prototype.m_space = null;
oFF.DfCmd.prototype.m_types = null;
oFF.DfCmd.prototype.executeOnContext = function(context, parameters)
{
	this.m_ret = null;
	let size = parameters.size();
	if (size > 0)
	{
		this.m_params = oFF.XList.create();
		this.m_params.add(oFF.XReflectionParam.createString(parameters.get(0).getStringRepresentation()));
	}
	if (size > 1)
	{
		this.m_params.add(oFF.XReflectionParam.createString(parameters.get(1).getStringRepresentation()));
	}
	this.m_cmds = context;
	this.execute();
	this.m_cmds = null;
	return this.m_ret;
};
oFF.DfCmd.prototype.executeOnSpace = function()
{
	let size = this.m_space.sizeElements();
	this.m_ret = null;
	for (let i = 0; i < size; i++)
	{
		this.m_cmds = this.m_space.setActive(i);
		this.execute();
	}
	this.m_cmds = null;
	return this.m_ret;
};
oFF.DfCmd.prototype.getTypes = function()
{
	return this.m_types;
};
oFF.DfCmd.prototype.setupCmd = function(name, space, parameter)
{
	this._setupInternal(name);
	this.m_space = space;
	if (oFF.XCollectionUtils.hasElements(parameter))
	{
		this.m_params = parameter;
	}
};

oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator = function() {};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype = new oFF.QFilterAcrossModelsTransientObjectGenerator();
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype._ff_c = "QFilterAcrossModelsLovBasedTransientObjectGenerator";

oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.createFilterAcrossModelsLovBasedTransientObjectGenerator = function(parent, name, sourceContext, targetContext, messageManager, links, sourceFilters, measureNames, secondaryMeasureNames, lovManager)
{
	let fam = new oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator();
	fam.setupFilterAcrossModelsTransientObjectGenerator(parent, name, sourceContext, targetContext, messageManager, links, sourceFilters, measureNames, secondaryMeasureNames);
	fam.m_lov = lovManager;
	return fam;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.m_convertedMemberKeysCache = null;
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.m_lov = null;
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.m_sourceLevelToTargetFieldCache = null;
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.m_targetFilterExpression = null;
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.buildFlexibleTimeSourceLevelToTargetFieldMap = function(sourceDimension, sourceHierarchyName)
{
	let result = oFF.XHashMapByString.create();
	let sourceLevelDimensionNames = sourceDimension.getLeveledHierarchy(sourceHierarchyName).getAllHierarchyLevelNames(oFF.XCollectionUtils.singletonList(oFF.HierarchyLevelType.ALL));
	for (let i = 0; i < sourceLevelDimensionNames.size(); i++)
	{
		let levelDimension = this.getSourceContext().getQueryModel().getDimensionByName(sourceLevelDimensionNames.get(i));
		if (oFF.notNull(levelDimension))
		{
			let targetLinkPart = oFF.QFilterAcrossModelsLinkUtil.getLinkCounterPartFromDimensionOrFieldKey(this.getLinks(), levelDimension);
			if (oFF.notNull(targetLinkPart))
			{
				result.put(sourceLevelDimensionNames.get(i), this.getFieldOrCalcDimField(this.getTargetContext(), targetLinkPart.getFieldName()));
			}
		}
	}
	return result;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.buildHanaHierarchyValue = function(context, dimensionName, hierarchyName, memberKey)
{
	let primaryModelLinkedDimension = this.getDimensionOrCalcDim(context, dimensionName);
	let targetGroupingDimension = this.getGroupingDimensionWithDefault(primaryModelLinkedDimension);
	let convertedMemberKey = oFF.XStringUtils.concatenate5("[", targetGroupingDimension.getName(), "].[", hierarchyName, "].&[");
	return oFF.XStringUtils.concatenate3(convertedMemberKey, memberKey, "]");
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.buildLevelBasedHierarchySourceLevelToTargetFieldMap = function(sourceDimension, sourceHierarchyName, targetDimension, targetHierarchyName)
{
	let result = oFF.XHashMapByString.create();
	let sourceLevelDimensionNames = sourceDimension.getLeveledHierarchy(sourceHierarchyName).getAllHierarchyLevelNames(oFF.XCollectionUtils.singletonList(oFF.HierarchyLevelType.ALL));
	let targetLevelDimensionKeyFieldNames = this.getAllHierachyLevelDimensionKeyFieldNames(targetDimension, targetHierarchyName);
	for (let i = 0; i < sourceLevelDimensionNames.size(); i++)
	{
		result.put(sourceLevelDimensionNames.get(i), this.getFieldOrCalcDimField(this.getTargetContext(), targetLevelDimensionKeyFieldNames.get(i)));
	}
	return result;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.convertAndFlattenLevelBasedHierarchyOrFlexibleTimeCartesianListToTarget = function(sourceCartesianListToConvert, sourceDimension, sourceLevelToTargetField)
{
	let filterOr = oFF.QFactory.createFilterOr(this.m_targetFilterExpression);
	for (let i = 0; i < sourceCartesianListToConvert.size(); i++)
	{
		let cartesianElement = sourceCartesianListToConvert.getCartesianElement(i);
		let result = this.convertAndFlattenLevelBasedHierarchyOrFlexibleTimeMemberKeyToTarget(cartesianElement.getLow().getString(), sourceDimension, sourceCartesianListToConvert.getHierarchyName(), sourceLevelToTargetField);
		filterOr.add(result);
	}
	let isExcludeSourceFilter = oFF.QFilterAcrossModelsFilterUtil.isFilterAllIncludeOrAllExclude(sourceCartesianListToConvert, oFF.SetSign.EXCLUDING);
	if (isExcludeSourceFilter)
	{
		return oFF.QFilterAcrossModelsFilterUtil.negateFilter(filterOr);
	}
	else
	{
		return filterOr;
	}
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.convertAndFlattenLevelBasedHierarchyOrFlexibleTimeMemberKeyToTarget = function(lbhMemberKey, sourceDimension, sourceDimensionHierarchyName, sourceLevelToTargetField)
{
	let filterAnd = oFF.QFactory.createFilterAnd(this.m_targetFilterExpression);
	let sourceLevelDimensionNames = sourceDimension.getLeveledHierarchy(sourceDimensionHierarchyName).getAllHierarchyLevelNames(oFF.XCollectionUtils.singletonList(oFF.HierarchyLevelType.ALL));
	if (oFF.XString.match(lbhMemberKey, oFF.QFilterUtil.LBH_MEMBER_NODE_PATH_PATTERN))
	{
		let lbhMemberKeyNodePathTokens = oFF.XStringTokenizer.splitString(lbhMemberKey, "].[");
		if (lbhMemberKeyNodePathTokens.size() < 4)
		{
			throw oFF.XException.createRuntimeException("LBH member key with node path pattern has less than 4 tokens");
		}
		let levelValueOffset = 3;
		for (let j = levelValueOffset; j < lbhMemberKeyNodePathTokens.size(); j++)
		{
			let nodePathLevelField = sourceLevelToTargetField.getByKey(sourceLevelDimensionNames.get(j - levelValueOffset));
			if (oFF.isNull(nodePathLevelField))
			{
				continue;
			}
			let nodePathLevelCartesianList = oFF.QFactory.createFilterCartesianListWithField(this.m_targetFilterExpression, nodePathLevelField);
			let nodePathlevelDimensionCartesianElement = nodePathLevelCartesianList.addNewCartesianElement();
			let lbhMemberKeyNodePathLevelValue = lbhMemberKeyNodePathTokens.get(j);
			if (j === lbhMemberKeyNodePathTokens.size() - 1)
			{
				lbhMemberKeyNodePathLevelValue = oFF.XString.substring(lbhMemberKeyNodePathLevelValue, 0, oFF.XString.size(lbhMemberKeyNodePathLevelValue) - 1);
			}
			nodePathlevelDimensionCartesianElement.configureSingleParameterExpression(oFF.XStringValue.create(lbhMemberKeyNodePathLevelValue), oFF.ComparisonOperator.EQUAL);
			filterAnd.add(nodePathLevelCartesianList);
		}
	}
	else
	{
		let lbhMemberKeyLevelName;
		let lbhMemberKeyLevelValue;
		if (oFF.XString.match(lbhMemberKey, oFF.QFilterUtil.LBH_MEMBER_SPECIFIC_LEVEL_PATTERN))
		{
			let lbhMemberKeyLevelTokens = oFF.XStringTokenizer.splitString(lbhMemberKey, "].[");
			if (lbhMemberKeyLevelTokens.size() < 4)
			{
				throw oFF.XException.createRuntimeException("LBH member key with specific level pattern has less than 4 tokens");
			}
			lbhMemberKeyLevelName = lbhMemberKeyLevelTokens.get(lbhMemberKeyLevelTokens.size() - 2);
			lbhMemberKeyLevelValue = lbhMemberKeyLevelTokens.get(lbhMemberKeyLevelTokens.size() - 1);
			lbhMemberKeyLevelValue = oFF.XString.substring(lbhMemberKeyLevelValue, 0, oFF.XString.size(lbhMemberKeyLevelValue) - 1);
		}
		else if (oFF.XString.match(lbhMemberKey, oFF.QFilterUtil.LBH_MEMBER_LOWEST_LEVEL_PATTERN))
		{
			let lbhMemberKeyLowestLevelTokens = oFF.XStringTokenizer.splitString(lbhMemberKey, "].&[");
			if (lbhMemberKeyLowestLevelTokens.size() !== 2)
			{
				throw oFF.XException.createRuntimeException("LBH member key with lowest level pattern does not have 2 tokens");
			}
			lbhMemberKeyLevelName = sourceLevelDimensionNames.get(sourceLevelDimensionNames.size() - 1);
			lbhMemberKeyLevelValue = lbhMemberKeyLowestLevelTokens.get(1);
			lbhMemberKeyLevelValue = oFF.XString.substring(lbhMemberKeyLevelValue, 0, oFF.XString.size(lbhMemberKeyLevelValue) - 1);
		}
		else
		{
			throw oFF.XException.createRuntimeException("LBH member key does not match any known patterns");
		}
		let index = sourceLevelDimensionNames.getIndex(lbhMemberKeyLevelName);
		if (index >= 0 && sourceLevelToTargetField.containsKey(lbhMemberKeyLevelName))
		{
			let levelField = sourceLevelToTargetField.getByKey(lbhMemberKeyLevelName);
			let levelDimensionCartesianList = oFF.QFactory.createFilterCartesianListWithField(this.m_targetFilterExpression, levelField);
			let levelDimensionCartesianElement = levelDimensionCartesianList.addNewCartesianElement();
			levelDimensionCartesianElement.configureSingleParameterExpression(oFF.XStringValue.create(lbhMemberKeyLevelValue), oFF.ComparisonOperator.EQUAL);
			filterAnd.add(levelDimensionCartesianList);
		}
		else
		{
			throw oFF.XException.createRuntimeException("LBH member key level name does not match any level dimension name");
		}
	}
	return filterAnd;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.convertCartesianListToTarget = function(sourceCartesianListToConvert)
{
	this.removeEmptyAndVirtualAllNodeElements(sourceCartesianListToConvert);
	if (sourceCartesianListToConvert.size() === 0)
	{
		return null;
	}
	let resultFilterElement;
	let sourceContext = this.getSourceContext();
	let sourceFilterDimension = this.getDimensionOrCalcDim(sourceContext, sourceCartesianListToConvert.getDimensionName());
	if (!this.getSourceContext().getSession().hasFeature(oFF.FeatureToggleOlap.FLEXIBLE_TIME_DYNAMIC_TIME) && oFF.QTimeDimensionUtil.isFlexibleTimeDimension(sourceFilterDimension))
	{
		return null;
	}
	if (oFF.QTimeDimensionUtil.isFlexibleTimeDimension(sourceFilterDimension) && oFF.XStringUtils.isNotNullAndNotEmpty(sourceCartesianListToConvert.getHierarchyName()))
	{
		resultFilterElement = this.convertLevelBasedHierarchyOrFlexibleTimeCartesianListToTarget(sourceCartesianListToConvert, sourceFilterDimension, this.buildFlexibleTimeSourceLevelToTargetFieldMap(sourceFilterDimension, sourceCartesianListToConvert.getHierarchyName()));
	}
	else
	{
		let sourceDimensionToMatchForLinkPart = sourceFilterDimension;
		if (oFF.QTimeDimensionUtil.isFlexibleTimeDimension(sourceFilterDimension) && oFF.XStringUtils.isNullOrEmpty(sourceCartesianListToConvert.getHierarchyName()))
		{
			let flatFlexibleTimeFilterFieldName = sourceCartesianListToConvert.getFieldMetadata().getName();
			let flexibleTimeLevelDimension = sourceContext.getQueryModel().getDimensionByName(flatFlexibleTimeFilterFieldName);
			if (oFF.notNull(flexibleTimeLevelDimension))
			{
				sourceDimensionToMatchForLinkPart = flexibleTimeLevelDimension;
			}
		}
		let sourceFilterFieldLinkPart = oFF.QFilterAcrossModelsLinkUtil.getLinkPartFromDimensionOrFieldKey(this.getLinks(), sourceDimensionToMatchForLinkPart);
		let sourceField = this.getFieldOrCalcDimField(sourceContext, sourceFilterFieldLinkPart.getFieldName());
		let sourceDimension = sourceField.getDimension();
		let targetLinkPart = oFF.QFilterAcrossModelsLinkUtil.getLinkCounterPartFromDimensionOrFieldKey(this.getLinks(), sourceDimensionToMatchForLinkPart);
		let effectiveTargetField = this.getEffectiveTargetFieldFromTargetLinkPart(targetLinkPart, sourceCartesianListToConvert.getCartesianElement(0));
		let targetDimension = this.getDimensionOrCalcDim(this.getTargetContext(), targetLinkPart.getDimensionName());
		if (oFF.QFilterAcrossModelsFilterUtil.isDateOrTimeLikeDimensionAndHierarchyName(sourceFilterDimension, sourceCartesianListToConvert.getHierarchyName()) && oFF.QTimeDimensionUtil.isDateOrTimeLikeDimension(sourceDimension) && oFF.QTimeDimensionUtil.isDateOrTimeLikeDimension(targetDimension))
		{
			let levelTypesInCartesianList = oFF.QFilterUtil.collectLevelTypesFromTimeCartesianList(sourceCartesianListToConvert, sourceContext);
			let sourceTimeCartesianList = sourceCartesianListToConvert;
			if (oFF.QFilterUtil.isSingleValueFilterCartesianList(sourceCartesianListToConvert))
			{
				let convertedSingleValueSourceCartesianList = oFF.QFactory.createFilterConvertedTimeCartesianList(sourceCartesianListToConvert.getContext());
				convertedSingleValueSourceCartesianList.copyFromCartesianList(sourceTimeCartesianList);
				convertedSingleValueSourceCartesianList.setIsSingleValueSourceCartesianList(true);
				convertedSingleValueSourceCartesianList.setHierarchyLevelType(levelTypesInCartesianList.getValuesAsReadOnlyList().get(0));
				sourceTimeCartesianList = convertedSingleValueSourceCartesianList;
			}
			let sourceHierarchyName = sourceTimeCartesianList.getHierarchyName();
			if (oFF.XStringUtils.isNullOrEmpty(sourceHierarchyName))
			{
				let flatHierarchylevel = oFF.QTimeDimensionUtil.findAnyHierarchyLevelMatchingField(sourceFilterDimension, sourceTimeCartesianList.getFieldMetadata());
				if (flatHierarchylevel.getHierarchy() === null)
				{
					let leveledHierarchy = oFF.QTimeDimensionUtil.findFirstLeveledHierarchyWithLevelType(sourceFilterDimension, flatHierarchylevel.getLevelType());
					if (oFF.notNull(leveledHierarchy))
					{
						sourceHierarchyName = leveledHierarchy.getName();
					}
				}
				else
				{
					sourceHierarchyName = flatHierarchylevel.getHierarchy().getName();
				}
			}
			if (oFF.QTimeDimensionUtil.isFiscalTimeHierarchyName(sourceHierarchyName) && !oFF.QTimeDimensionUtil.areFiscalEnabledAndCompatible(sourceFilterDimension, targetDimension))
			{
				this.convertFiscalTimeCartesianListToCalendar(sourceTimeCartesianList, sourceContext);
			}
			let compatibleHierarchyFiscalSpaceType = oFF.QTimeDimensionUtil.getFiscalSpaceType(sourceFilterDimension, sourceHierarchyName, targetDimension);
			let mostCompatibleTargetTimeHierarchy = oFF.QTimeDimensionUtil.findMostCompatibleHierarchy(targetDimension, levelTypesInCartesianList, compatibleHierarchyFiscalSpaceType, false);
			if (oFF.isNull(mostCompatibleTargetTimeHierarchy))
			{
				this.getMessageManager().addWarning(oFF.ErrorCodes.FILTER_ACROSS_MODEL_TARGET_TIME_HIERARCHY, oFF.ErrorMessages.FILTER_ACROSS_MODEL_TARGET_TIME_HIERARCHY);
				return null;
			}
			let targetFlatLevelType = null;
			if (!targetLinkPart.isHierarchical())
			{
				let targetFlatLevel = oFF.QTimeDimensionUtil.findAnyHierarchyLevelMatchingField(targetDimension, effectiveTargetField.getMetadata());
				targetFlatLevelType = targetFlatLevel.getLevelType();
			}
			else if (this.isContextTypeOfBw(this.getTargetContext()) && targetLinkPart.isHierarchical())
			{
				let isExcludeSourceFilter = oFF.QFilterAcrossModelsFilterUtil.isFilterAllIncludeOrAllExclude(sourceTimeCartesianList, oFF.SetSign.EXCLUDING);
				if (isExcludeSourceFilter)
				{
					let sourceLevel = oFF.QTimeDimensionUtil.findAnyHierarchyLevelMatchingField(sourceFilterDimension, sourceTimeCartesianList.getFieldMetadata());
					let sourceLevelType = sourceLevel.getLevelType();
					let targetHierarchy = targetDimension.getLeveledHierarchy(mostCompatibleTargetTimeHierarchy.getName());
					if (targetHierarchy.getLevelByType(sourceLevelType) !== null)
					{
						targetFlatLevelType = sourceLevelType;
					}
				}
			}
			if (sourceTimeCartesianList.size() === 1 && sourceTimeCartesianList.getCartesianElement(0).getComparisonOperator().isRange())
			{
				resultFilterElement = this.convertSingleElementTimeRangeCartesianListToFlatTarget(sourceTimeCartesianList, sourceContext, targetDimension, mostCompatibleTargetTimeHierarchy.getName());
			}
			else
			{
				resultFilterElement = this.convertTimeMemberCartesianListToTarget(sourceTimeCartesianList, sourceContext, targetDimension, mostCompatibleTargetTimeHierarchy.getName(), targetFlatLevelType);
			}
		}
		else if (oFF.QFilterAcrossModelsDimensionUtil.isNonTimeLevelBasedHierarchy(sourceFilterDimension, sourceCartesianListToConvert.getHierarchyName()))
		{
			resultFilterElement = this.convertLevelBasedHierarchyOrFlexibleTimeCartesianListToTarget(sourceCartesianListToConvert, sourceFilterDimension, this.buildLevelBasedHierarchySourceLevelToTargetFieldMap(sourceDimension, sourceCartesianListToConvert.getHierarchyName(), targetDimension, targetLinkPart.getHierarchyName()));
		}
		else
		{
			let unconvertedValues = oFF.XList.create();
			for (let i = sourceCartesianListToConvert.size() - 1; i >= 0; i--)
			{
				let sourceNonTimeCartesianElement = sourceCartesianListToConvert.getCartesianElement(i);
				let convertResult = this.convertFilterValueBagIfNotNull(sourceNonTimeCartesianElement.getLow(), sourceFilterFieldLinkPart, targetLinkPart, effectiveTargetField);
				if (oFF.isNull(convertResult))
				{
					sourceCartesianListToConvert.removeElement(sourceNonTimeCartesianElement);
				}
				else
				{
					unconvertedValues.addAll(convertResult);
					unconvertedValues.addAll(this.convertFilterValueBagIfNotNull(sourceNonTimeCartesianElement.getHigh(), sourceFilterFieldLinkPart, targetLinkPart, effectiveTargetField));
					sourceNonTimeCartesianElement.setField(effectiveTargetField);
					sourceNonTimeCartesianElement.setHierarchyName(targetLinkPart.getHierarchyName());
				}
			}
			for (let j = 0; j < unconvertedValues.size(); j++)
			{
				let newElem = sourceCartesianListToConvert.addNewCartesianElement();
				newElem.copyFrom(sourceCartesianListToConvert.getCartesianElement(0), null);
				oFF.QFilterAcrossModelsFilterUtil.setCartesianElementValues(newElem, unconvertedValues.get(j), null, effectiveTargetField);
			}
			sourceCartesianListToConvert.setField(effectiveTargetField);
			sourceCartesianListToConvert.setHierarchyName(targetLinkPart.getHierarchyName());
			if (targetLinkPart.isHierarchical())
			{
				sourceCartesianListToConvert.setConvertToFlatFilter(true);
			}
			resultFilterElement = sourceCartesianListToConvert;
		}
	}
	return resultFilterElement;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.convertFilterExpressionFilterElementsToTarget = function(filterElement)
{
	if (filterElement.getOlapComponentType().isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
	{
		let parent = filterElement.getParent();
		let convertedFilterElement = this.convertCartesianListToTarget(filterElement);
		if (parent.getOlapComponentType().isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA))
		{
			let algebraOpParent = parent;
			algebraOpParent.removeElement(filterElement);
			if (oFF.notNull(convertedFilterElement))
			{
				algebraOpParent.add(convertedFilterElement);
			}
		}
		else if (parent.getOlapComponentType() === oFF.OlapComponentType.FILTER_EXPRESSION)
		{
			let filterExpressionParent = parent;
			filterExpressionParent.setComplexRoot(convertedFilterElement);
		}
		return;
	}
	else if (filterElement.getOlapComponentType().isTypeOf(oFF.FilterComponentType.OPERATION) && filterElement.getComparisonOperator().isTypeOf(oFF.SpatialComparisonOperator._SPATIAL))
	{
		let sourceFilterOpToConvert = filterElement;
		let sourceFilterDimension = this.getDimensionOrCalcDim(this.getSourceContext(), sourceFilterOpToConvert.getDimensionName());
		let sourceLinkPart = oFF.QFilterAcrossModelsLinkUtil.getLinkPartFromDimensionOrFieldKey(this.getLinks(), sourceFilterDimension);
		let targetLinkPart = oFF.QFilterAcrossModelsLinkUtil.getLinkCounterPartFromDimensionOrFieldKey(this.getLinks(), sourceFilterDimension);
		let effectiveTargetField = this.getEffectiveTargetFieldFromTargetLinkPart(targetLinkPart, sourceFilterOpToConvert);
		this.convertFilterValueBagIfNotNull(sourceFilterOpToConvert.getLow(), sourceLinkPart, targetLinkPart, effectiveTargetField);
		sourceFilterOpToConvert.setField(effectiveTargetField);
	}
	else if (filterElement.getOlapComponentType().isTypeOf(oFF.FilterComponentType.FILTER_TIME_RANGE))
	{
		this.convertFilterTimeRangeToTarget(filterElement);
	}
	let childrenIterator = filterElement.getChildrenIterator();
	let children = this.createListFromIterator(childrenIterator);
	for (let i = 0, size = children.size(); i < size; i++)
	{
		this.convertFilterExpressionFilterElementsToTarget(children.get(i));
	}
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.convertFilterExpressionToTarget = function(sourceFilterExpression)
{
	let targetFilterExpression = this.getTargetContext().getQueryModel().getFilter().createFilter();
	if (sourceFilterExpression.isComplexFilter())
	{
		targetFilterExpression.copyFrom(sourceFilterExpression, null);
	}
	else
	{
		targetFilterExpression.setComplexRoot(oFF.QFilterUtil.createComplexFilterFromCartesianProduct(sourceFilterExpression.getCartesianProduct()));
	}
	targetFilterExpression.stopEventing();
	this.convertFilterExpressionFilterElementsToTarget(targetFilterExpression.getFilterRootElement());
	targetFilterExpression.resumeEventing();
	return targetFilterExpression;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.convertFilterTimeRangeToTarget = function(timeRangeFilter)
{
	let sourceTimeDimensionName = timeRangeFilter.getTimeDimensionName();
	let sourceTimeDimension = this.getDimensionOrCalcDim(this.getSourceContext(), sourceTimeDimensionName);
	let sourceHierarchyName = timeRangeFilter.getHierarchyName();
	let sourceLevelNames = oFF.XHashSetOfString.create();
	sourceLevelNames.add(timeRangeFilter.getLevelName());
	let targetLevelName = this.getSourceLinkCounterPartDimensionName(timeRangeFilter.getLevelName());
	let targetLevelDimension = this.getDimensionOrCalcDim(this.getTargetContext(), targetLevelName);
	let targetTimeDimension = targetLevelDimension.getGroupingDimensions().get(0);
	timeRangeFilter.setTimeDimensionName(targetTimeDimension.getName());
	timeRangeFilter.setLevelName(targetLevelName);
	if (timeRangeFilter.getOlapComponentType().isTypeOf(oFF.FilterComponentType.FILTER_DYNAMIC_TIME_REGULAR_RANGE) || timeRangeFilter.getOlapComponentType().isTypeOf(oFF.FilterComponentType.FILTER_DYNAMIC_TIME_TO_DATE_RANGE))
	{
		let shiftableTimeRangeFilter = timeRangeFilter;
		if (oFF.XStringUtils.isNotNullAndNotEmpty(shiftableTimeRangeFilter.getOffsetLevelName()))
		{
			sourceLevelNames.add(shiftableTimeRangeFilter.getOffsetLevelName());
			let targetOffsetLevelName = this.getSourceLinkCounterPartDimensionName(shiftableTimeRangeFilter.getOffsetLevelName());
			shiftableTimeRangeFilter.setOffsetLevelName(targetOffsetLevelName);
		}
	}
	let sourceLowValueLevels = null;
	if (oFF.XStringUtils.isNotNullAndNotEmpty(timeRangeFilter.getLowValue()))
	{
		sourceLowValueLevels = oFF.QFilterUtil.getFilterTimeRangeLowValueLevel(this.getSourceContext(), timeRangeFilter);
		for (let i = 0; i < sourceLowValueLevels.size(); i++)
		{
			sourceLevelNames.add(sourceLowValueLevels.get(i).getLevelName());
		}
	}
	if (oFF.XStringUtils.isNotNullAndNotEmpty(timeRangeFilter.getHierarchyName()))
	{
		let sourceHierarchy = this.getDimensionOrCalcDim(this.getSourceContext(), sourceTimeDimensionName).getLeveledHierarchy(sourceHierarchyName);
		let compatibleHierarchyAndMatchLevel = oFF.QFilterAcrossModelsFilterUtil.findCompatibleHierarchyFromLinksAndLevels(this.getLinks(), sourceTimeDimension, sourceHierarchy, sourceLevelNames, targetTimeDimension);
		let compatibleHierarchy = compatibleHierarchyAndMatchLevel.getFirstObject();
		timeRangeFilter.setHierarchyName(compatibleHierarchy.getName());
		if (oFF.notNull(sourceLowValueLevels))
		{
			if (timeRangeFilter.getLowValueType() === oFF.XValueType.VARIABLE)
			{
				let targetVariable = oFF.QVariableUtils.getCurrentPeriodVariableByDimensionAndHierarchyName(this.getTargetContext().getQueryModel(), targetTimeDimension.getName(), compatibleHierarchy.getName());
				if (oFF.notNull(targetVariable))
				{
					timeRangeFilter.setLowValue(targetVariable.getName());
				}
			}
			else
			{
				let targetLowValueLevelName = this.getSourceLinkCounterPartDimensionName(sourceLowValueLevels.get(sourceLowValueLevels.size() - 1).getLevelDimensionName());
				let convertedMemberKey = this.convertFlexibleTimeMemberKey(sourceTimeDimension, sourceHierarchyName, targetTimeDimension, compatibleHierarchy.getName(), targetLowValueLevelName, timeRangeFilter.getLowValue());
				timeRangeFilter.setLowValue(convertedMemberKey);
			}
		}
	}
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.convertFilterValueBagIfNotNull = function(valueBag, sourceModelLinkPart, targetModelLinkPart, effectiveTargetField)
{
	if (oFF.isNull(valueBag) || valueBag.getValueType() !== null && valueBag.getValueType().isSpatial())
	{
		return oFF.XList.create();
	}
	if (valueBag.getString() !== null && !this.isAllNodeMemberKey(valueBag.getString()))
	{
		let convertedValues = this.convertNonTimeMemberKeyToTarget(valueBag.getString(), sourceModelLinkPart, targetModelLinkPart);
		if (oFF.notNull(convertedValues) && !convertedValues.isEmpty())
		{
			oFF.QFilterAcrossModelsFilterUtil.setValueBagValue(valueBag, effectiveTargetField.getValueType(), convertedValues.get(0));
			convertedValues.removeAt(0);
		}
		return convertedValues;
	}
	return oFF.XList.create();
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.convertFiscalTimeCartesianListToCalendar = function(sourceCartesianListToConvert, sourceContext)
{
	if (sourceCartesianListToConvert.size() === 1 && sourceCartesianListToConvert.getCartesianElement(0).getComparisonOperator().isRange())
	{
		this.convertFiscalTimeRangeCartesianListToCalendar(sourceCartesianListToConvert, sourceContext);
	}
	else
	{
		this.convertFiscalTimeMemberCartesianListToCalendar(sourceCartesianListToConvert, sourceContext);
	}
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.convertFiscalTimeMemberCartesianListToCalendar = function(sourceCartesianListToConvert, sourceContext)
{
	let sourceTimeDimension = this.getDimensionOrCalcDim(sourceContext, sourceCartesianListToConvert.getDimensionName());
	let sourceCartesianListHierarchyName = sourceCartesianListToConvert.getHierarchyName();
	let sourceCartesianListFieldMetadata = sourceCartesianListToConvert.getFieldMetadata();
	let compatibleCalendarHierarchyName;
	let flatFiscalHierarchylevel = null;
	if (oFF.isNull(sourceCartesianListHierarchyName))
	{
		flatFiscalHierarchylevel = oFF.QTimeDimensionUtil.findAnyHierarchyLevelMatchingField(sourceTimeDimension, sourceCartesianListFieldMetadata);
		if (oFF.isNull(flatFiscalHierarchylevel))
		{
			this.getMessageManager().addWarning(oFF.ErrorCodes.FILTER_ACROSS_MODEL_TARGET_TIME_HIERARCHY, oFF.ErrorMessages.FILTER_ACROSS_MODEL_TARGET_TIME_HIERARCHY);
			return;
		}
		compatibleCalendarHierarchyName = oFF.QTimeDimensionUtil.mapFiscalHierarchyNameToCompatibleCalendarHierarchyName(flatFiscalHierarchylevel.getHierarchy().getName());
	}
	else
	{
		compatibleCalendarHierarchyName = oFF.QTimeDimensionUtil.mapFiscalHierarchyNameToCompatibleCalendarHierarchyName(sourceCartesianListHierarchyName);
	}
	let newFilterCartesianElements = oFF.XList.create();
	let converter = oFF.QTimeMemberKeyConverter.create(sourceContext.getQueryModel(), sourceTimeDimension, sourceContext.getQueryModel(), sourceTimeDimension);
	for (let i = 0; i < sourceCartesianListToConvert.size(); i++)
	{
		let sourceCartesianElement = sourceCartesianListToConvert.getCartesianElement(i);
		let memberKey = sourceCartesianElement.getLow().getString();
		let result = converter.convertFiscalMemberKeyToCalendar(memberKey, sourceCartesianListHierarchyName, sourceCartesianListFieldMetadata, compatibleCalendarHierarchyName);
		let convertedCalendarSpaceMemberKeys = result.getList();
		for (let j = 0; j < convertedCalendarSpaceMemberKeys.size(); j++)
		{
			let convertedCalendarSpaceMemberKey = convertedCalendarSpaceMemberKeys.get(j);
			let newElem = oFF.QFactory.createFilterCartesianElement(sourceCartesianListToConvert.getFilterExpression());
			newElem.configureSingleParameterExpression(oFF.XStringValue.create(convertedCalendarSpaceMemberKey), sourceCartesianElement.getComparisonOperator());
			newElem.setSetSign(sourceCartesianElement.getSetSign());
			if (result.isFlat())
			{
				let targetField = this.getDimensionFieldOfLeveledHierarchyForLevelType(sourceTimeDimension, compatibleCalendarHierarchyName, result.getLevelType());
				newElem.setField(targetField);
				sourceCartesianListToConvert.setField(targetField);
			}
			else
			{
				newElem.setField(sourceTimeDimension.getHierarchyKeyField());
				sourceCartesianListToConvert.setField(sourceTimeDimension.getHierarchyKeyField());
			}
			newElem.setHierarchyName(result.getHierarchyName());
			sourceCartesianListToConvert.setHierarchyName(result.getHierarchyName());
			newFilterCartesianElements.add(newElem);
		}
	}
	sourceCartesianListToConvert.clear();
	sourceCartesianListToConvert.addAll(newFilterCartesianElements);
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.convertFiscalTimeRangeCartesianListToCalendar = function(sourceCartesianListToConvert, sourceContext)
{
	let sourceTimeDimension = this.getDimensionOrCalcDim(sourceContext, sourceCartesianListToConvert.getDimensionName());
	let sourceCartesianListHierarchyName = sourceCartesianListToConvert.getHierarchyName();
	let sourceCartesianElement = sourceCartesianListToConvert.getCartesianElement(0);
	let sourceCartesianListFieldMetadata = sourceCartesianListToConvert.getFieldMetadata();
	let compatibleCalendarHierarchyName;
	if (oFF.isNull(sourceCartesianListHierarchyName))
	{
		let flatFiscalHierarchylevel = oFF.QTimeDimensionUtil.findAnyHierarchyLevelMatchingField(sourceTimeDimension, sourceCartesianListFieldMetadata);
		compatibleCalendarHierarchyName = oFF.QTimeDimensionUtil.mapFiscalHierarchyNameToCompatibleCalendarHierarchyName(flatFiscalHierarchylevel.getHierarchy().getName());
	}
	else
	{
		compatibleCalendarHierarchyName = oFF.QTimeDimensionUtil.mapFiscalHierarchyNameToCompatibleCalendarHierarchyName(sourceCartesianListHierarchyName);
	}
	let resultLowKey = null;
	let resultHighKey = null;
	let resultHierarchyName = null;
	let resultLevelType = null;
	let converter = oFF.QTimeMemberKeyConverter.create(sourceContext.getQueryModel(), sourceTimeDimension, sourceContext.getQueryModel(), sourceTimeDimension);
	if (sourceCartesianElement.getLow() !== null && sourceCartesianElement.getLow().hasValue() && !(oFF.QFilterAcrossModelsFilterUtil.isOpenEndedTimeRangeFilterElement(sourceCartesianElement) && oFF.QFilterAcrossModelsFilterUtil.isOpenEndedTimeRangeFilterLowValue(sourceCartesianElement.getLow().getString())))
	{
		let resultLow = converter.convertFiscalRangeEndPointToCalendar(sourceCartesianElement.getLow().getString(), sourceCartesianListHierarchyName, sourceCartesianListFieldMetadata, compatibleCalendarHierarchyName, false);
		resultLowKey = resultLow.getFirstKey();
		resultHierarchyName = resultLow.getHierarchyName();
		resultLevelType = resultLow.getLevelType();
	}
	if (sourceCartesianElement.getHigh() !== null && sourceCartesianElement.getHigh().hasValue())
	{
		let resultHigh = converter.convertFiscalRangeEndPointToCalendar(sourceCartesianElement.getHigh().getString(), sourceCartesianListHierarchyName, sourceCartesianListFieldMetadata, compatibleCalendarHierarchyName, true);
		resultHighKey = resultHigh.getFirstKey();
		resultHierarchyName = resultHigh.getHierarchyName();
		resultLevelType = resultHigh.getLevelType();
	}
	if (oFF.XStringUtils.isNotNullAndNotEmpty(resultLowKey) || oFF.XStringUtils.isNotNullAndNotEmpty(resultHighKey))
	{
		let resultRange = oFF.QTimeMemberKeyConversionResult.createFromRangeKeys(resultLowKey, resultHighKey, resultHierarchyName, resultLevelType);
		this.setFilterPropertiesBasedOnTimeConversionResult(resultRange, sourceCartesianListToConvert, sourceCartesianElement, sourceTimeDimension, compatibleCalendarHierarchyName);
	}
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.convertFlexibleTimeMemberCartesianListToTarget = function(sourceCartesianListToConvert, sourceDimension, sourceLevelToTargetField)
{
	let result = null;
	let shouldPropagateUsingHierarchy = oFF.QFilterAcrossModelsLinkUtil.shouldPropagateDirectFlexibleTimeMemberFiltersUsingHierarchy(this.getLinks(), this.getSourceContext(), sourceDimension.getName());
	if (shouldPropagateUsingHierarchy)
	{
		let filterHierarchyName = sourceCartesianListToConvert.getHierarchyName();
		let sourceLevelNames = oFF.XHashSetOfString.create();
		for (let i = 0; i < sourceCartesianListToConvert.size(); i++)
		{
			let elem = sourceCartesianListToConvert.getCartesianElement(i);
			if (elem.getLow().hasValue())
			{
				let levels = oFF.QFilterUtil.getHierarchyLevelsFromEntityValue(sourceDimension, filterHierarchyName, elem.getLow().getString());
				oFF.XCollectionUtils.forEach(levels, (level) => {
					sourceLevelNames.add(level.getLevelName());
				});
			}
		}
		let targetTimeDimension = sourceLevelToTargetField.getIterator().next().getDimension().getGroupingDimensions().get(0);
		let hierarchyAndMatchQuality = oFF.QFilterAcrossModelsFilterUtil.findCompatibleHierarchyFromLinksAndLevels(this.getLinks(), sourceDimension, sourceDimension.getLeveledHierarchy(filterHierarchyName), sourceLevelNames, targetTimeDimension);
		let compatibleHierarchy = hierarchyAndMatchQuality.getFirstObject();
		if (oFF.XString.isEqual(hierarchyAndMatchQuality.getSecondObject().getString(), oFF.QFilterAcrossModelsFilterUtil.LEVELS_AND_STRUCTURE_MATCH))
		{
			for (let j = 0; j < sourceCartesianListToConvert.size(); j++)
			{
				let cartesianElement = sourceCartesianListToConvert.getCartesianElement(j);
				let memberLevel = oFF.QFilterUtil.getHierarchyLevelFromEntityValue(sourceDimension, filterHierarchyName, cartesianElement.getLow().getString());
				let targetLevelName = this.getSourceLinkCounterPartDimensionName(memberLevel.getLevelDimensionName());
				let convertedMemberKey = this.convertFlexibleTimeMemberKey(sourceDimension, filterHierarchyName, targetTimeDimension, compatibleHierarchy.getName(), targetLevelName, cartesianElement.getLow().getString());
				cartesianElement.setLowString(convertedMemberKey);
				cartesianElement.setField(targetTimeDimension.getHierarchyKeyField());
				cartesianElement.setHierarchyName(compatibleHierarchy.getName());
			}
			sourceCartesianListToConvert.setField(targetTimeDimension.getHierarchyKeyField());
			sourceCartesianListToConvert.setHierarchyName(compatibleHierarchy.getName());
			sourceCartesianListToConvert.setConvertToFlatFilter(true);
			result = sourceCartesianListToConvert;
		}
		else
		{
			result = this.convertAndFlattenLevelBasedHierarchyOrFlexibleTimeCartesianListToTarget(sourceCartesianListToConvert, sourceDimension, sourceLevelToTargetField);
			this.getMessageManager().addWarningExtWithExtendedInfo(oFF.OriginLayer.APPLICATION, oFF.ErrorCodes.FILTER_ACROSS_MODEL_FTD_RANGE_FILTER_DIRECT_INCOMPATIBLE_HIERARCHY, oFF.ErrorMessages.FILTER_ACROSS_MODEL_FTD_RANGE_FILTER_DIRECT_INCOMPATIBLE_HIERARCHY, oFF.XList.create());
		}
	}
	else
	{
		result = this.convertAndFlattenLevelBasedHierarchyOrFlexibleTimeCartesianListToTarget(sourceCartesianListToConvert, sourceDimension, sourceLevelToTargetField);
	}
	return result;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.convertFlexibleTimeMemberKey = function(sourceDimension, sourceHierarchyName, targetDimension, targetHierarchyName, targetLevelName, memberKey)
{
	let targetHierarchy = targetDimension.getLeveledHierarchy(targetHierarchyName);
	let allTargetLevels = targetHierarchy.getAllLevel();
	let targetLevel = oFF.XCollectionUtils.findFirst(allTargetLevels, (level) => {
		return oFF.XString.isEqual(level.getLevelName(), targetLevelName);
	});
	let convertedMemberKey = memberKey;
	let keyValue;
	if (oFF.XString.match(memberKey, oFF.QFilterUtil.LBH_MEMBER_LOWEST_LEVEL_PATTERN))
	{
		let lowestLevelTokens = oFF.XStringTokenizer.splitString(memberKey, "].&[");
		keyValue = lowestLevelTokens.get(1);
		keyValue = oFF.XString.substring(keyValue, 0, oFF.XString.size(keyValue) - 1);
	}
	else
	{
		let levelsToken = oFF.XStringTokenizer.splitString(memberKey, "].[");
		keyValue = levelsToken.get(levelsToken.size() - 1);
		keyValue = oFF.XString.substring(keyValue, 0, oFF.XString.size(keyValue) - 1);
	}
	let isTargetLowestLevel = oFF.XString.isEqual(allTargetLevels.get(allTargetLevels.size() - 1).getLevelName(), targetLevel.getLevelName());
	convertedMemberKey = oFF.XStringUtils.concatenate5("[", targetDimension.getName(), "].[", targetHierarchyName, "].");
	if (isTargetLowestLevel)
	{
		convertedMemberKey = oFF.XStringUtils.concatenate4(convertedMemberKey, "&[", keyValue, "]");
	}
	else if (oFF.XString.match(memberKey, oFF.QFilterUtil.LBH_MEMBER_NODE_PATH_PATTERN))
	{
		let sourceDimensionAndHierarchyPrefix = oFF.XStringUtils.concatenate5("[", sourceDimension.getName(), "].[", sourceHierarchyName, "]");
		let targetDimensionAndHierarchyPrefix = oFF.XStringUtils.concatenate5("[", targetDimension.getName(), "].[", targetHierarchyName, "]");
		convertedMemberKey = oFF.XString.replace(memberKey, sourceDimensionAndHierarchyPrefix, targetDimensionAndHierarchyPrefix);
	}
	else
	{
		convertedMemberKey = oFF.XStringUtils.concatenate5(convertedMemberKey, "[", targetLevelName, "].[", keyValue);
		convertedMemberKey = oFF.XStringUtils.concatenate2(convertedMemberKey, "]");
	}
	return convertedMemberKey;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.convertFlexibleTimeRangeCartesianListToTarget = function(sourceCartesianListToConvert, sourceDimension, sourceLevelToTargetField)
{
	let filterHierarchyName = sourceCartesianListToConvert.getHierarchyName();
	let rangeElement = sourceCartesianListToConvert.getCartesianElement(0);
	let sourceLevels = oFF.QFilterUtil.getHierarchyLevelsFromEntityValue(sourceDimension, filterHierarchyName, rangeElement.getLow().getString());
	let targetLevelNames = oFF.XList.create();
	let targetTimeDimension = null;
	for (let i = 0; i < sourceLevels.size(); i++)
	{
		let targetLevelField = sourceLevelToTargetField.getByKey(sourceLevels.get(i).getLevelName());
		let targetLevelDimension = targetLevelField.getDimension();
		if (oFF.notNull(targetLevelDimension))
		{
			targetLevelNames.add(targetLevelDimension.getName());
			if (oFF.isNull(targetTimeDimension))
			{
				targetTimeDimension = targetLevelDimension.getGroupingDimensions().get(0);
			}
		}
	}
	if (oFF.notNull(targetTimeDimension))
	{
		let sourceLevelNames = oFF.XStream.of(sourceLevels).mapToString((level) => {
			return level.getLevelName();
		}).collect(oFF.XStreamCollector.toListOfString((boxedLevelName) => {
			return boxedLevelName.getString();
		}));
		let compatibleHierarchyAndMatchQuality = oFF.QFilterAcrossModelsFilterUtil.findCompatibleHierarchyFromLinksAndLevels(this.getLinks(), sourceDimension, sourceDimension.getLeveledHierarchy(filterHierarchyName), sourceLevelNames, targetTimeDimension);
		let compatibleHierarchy = compatibleHierarchyAndMatchQuality.getFirstObject();
		if (oFF.notNull(compatibleHierarchy))
		{
			let targetLevelName = targetLevelNames.get(targetLevelNames.size() - 1);
			let convertedLowMemberKey = this.convertFlexibleTimeMemberKey(sourceDimension, filterHierarchyName, targetTimeDimension, compatibleHierarchy.getName(), targetLevelName, rangeElement.getLow().getString());
			let convertedHighMemberKey = null;
			if (rangeElement.getHigh().hasValue())
			{
				convertedHighMemberKey = this.convertFlexibleTimeMemberKey(sourceDimension, filterHierarchyName, targetTimeDimension, compatibleHierarchy.getName(), targetLevelName, rangeElement.getHigh().getString());
			}
			sourceCartesianListToConvert.setField(targetTimeDimension.getHierarchyKeyField());
			sourceCartesianListToConvert.setHierarchyName(compatibleHierarchy.getName());
			rangeElement.setField(targetTimeDimension.getHierarchyKeyField());
			rangeElement.setHierarchyName(compatibleHierarchy.getName());
			oFF.QFilterAcrossModelsFilterUtil.setCartesianElementValues(rangeElement, convertedLowMemberKey, convertedHighMemberKey, targetTimeDimension.getHierarchyKeyField());
			return sourceCartesianListToConvert;
		}
	}
	return null;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.convertLevelBasedHierarchyOrFlexibleTimeCartesianListToTarget = function(sourceCartesianListToConvert, sourceDimension, sourceLevelToTargetField)
{
	let result = null;
	if (oFF.QTimeDimensionUtil.isFlexibleTimeDimension(sourceDimension))
	{
		if (sourceCartesianListToConvert.size() === 1 && sourceCartesianListToConvert.getCartesianElement(0).getComparisonOperator().isRange())
		{
			result = this.convertFlexibleTimeRangeCartesianListToTarget(sourceCartesianListToConvert, sourceDimension, sourceLevelToTargetField);
		}
		else
		{
			result = this.convertFlexibleTimeMemberCartesianListToTarget(sourceCartesianListToConvert, sourceDimension, sourceLevelToTargetField);
		}
	}
	else
	{
		result = this.convertAndFlattenLevelBasedHierarchyOrFlexibleTimeCartesianListToTarget(sourceCartesianListToConvert, sourceDimension, sourceLevelToTargetField);
	}
	return result;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.convertNonTimeMemberKeyToTarget = function(memberKey, sourceModelLinkPart, targetModelLinkPart)
{
	let result = oFF.XList.create();
	let cacheKey = this.getMemberKeyCacheKey(sourceModelLinkPart, memberKey);
	if (this.m_convertedMemberKeysCache.containsKey(cacheKey))
	{
		result.add(this.m_convertedMemberKeysCache.getByKey(cacheKey));
		return result;
	}
	if (this.isContextTypeOfBw(this.getTargetContext()))
	{
		let targetField = this.getFieldOrCalcDimField(this.getTargetContext(), targetModelLinkPart.getFieldName());
		if (!targetField.isKeyField())
		{
			let mappedKeys = this.getLovManager().getFlatTargetDimensionMatchingMemberKeysFromText(targetModelLinkPart.getDimensionName(), memberKey);
			if (oFF.isNull(mappedKeys))
			{
				return null;
			}
			else
			{
				return oFF.XList.createWithList(mappedKeys);
			}
		}
	}
	if (this.isContextTypeOfBw(this.getSourceContext()) && this.isContextTypeOfBw(this.getTargetContext()))
	{
		if (oFF.XStringUtils.isNotNullAndNotEmpty(memberKey) && sourceModelLinkPart.isHierarchical() && !targetModelLinkPart.isHierarchical())
		{
			result.add(this.extractBwValueFromFlatOrHierarchyKey(memberKey));
		}
		else if (oFF.XStringUtils.isNotNullAndNotEmpty(memberKey) && !sourceModelLinkPart.isHierarchical() && targetModelLinkPart.isHierarchical())
		{
			result.add(oFF.XStringUtils.concatenate2("!", memberKey));
		}
		else
		{
			result.add(memberKey);
		}
	}
	else if (this.isContextTypeOfBw(this.getSourceContext()) && !targetModelLinkPart.isHierarchical() && this.isBwFlatOrLeafNodeHierarchyKey(memberKey))
	{
		result.add(this.extractBwValueFromFlatOrHierarchyKey(memberKey));
	}
	else if (this.isContextTypeOfBw(this.getSourceContext()) && targetModelLinkPart.isHierarchical())
	{
		let bwKeyValue = this.extractBwValueFromFlatOrHierarchyKey(memberKey);
		let convertedValue = this.buildHanaHierarchyValue(this.getTargetContext(), targetModelLinkPart.getDimensionName(), targetModelLinkPart.getHierarchyName(), bwKeyValue);
		result.add(convertedValue);
	}
	else if (this.isContextTypeOfBw(this.getTargetContext()) && !sourceModelLinkPart.isHierarchical() && targetModelLinkPart.isHierarchical())
	{
		result.add(oFF.XStringUtils.concatenate2("!", memberKey));
	}
	else if (this.isContextTypeOfBw(this.getTargetContext()) && sourceModelLinkPart.isHierarchical())
	{
		let keyValue = this.extractHanaValueFromHierarchyKey(this.getSourceContext(), sourceModelLinkPart.getDimensionName(), sourceModelLinkPart.getHierarchyName(), memberKey);
		result.add(keyValue);
		if (targetModelLinkPart.isHierarchical())
		{
			result.add(oFF.XStringUtils.concatenate2("!", keyValue));
			let targetDimension = this.getDimensionOrCalcDim(this.getTargetContext(), targetModelLinkPart.getDimensionName());
			result.add(oFF.XStringUtils.concatenate3(this.getGroupingDimensionWithDefault(targetDimension).getName(), "!", keyValue));
		}
	}
	else
	{
		let memberKeyValue = memberKey;
		if (sourceModelLinkPart.isHierarchical())
		{
			memberKeyValue = this.extractHanaValueFromHierarchyKey(this.getSourceContext(), sourceModelLinkPart.getDimensionName(), sourceModelLinkPart.getHierarchyName(), memberKey);
		}
		if (targetModelLinkPart.isHierarchical())
		{
			result.add(this.buildHanaHierarchyValue(this.getTargetContext(), targetModelLinkPart.getDimensionName(), targetModelLinkPart.getHierarchyName(), memberKeyValue));
		}
		else
		{
			result.add(memberKeyValue);
		}
	}
	this.m_convertedMemberKeysCache.put(cacheKey, result.get(0));
	return result;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.convertSingleElementTimeRangeCartesianListToFlatTarget = function(rangeCartesianList, rangeCartesianListContext, targetTimeDimension, mostCompatibleTargetTimeHierarchyName)
{
	let rangeElement = rangeCartesianList.getCartesianElement(0);
	let rangeHierarchyName = rangeCartesianList.getHierarchyName();
	let rangeCartesianListFieldMetadata = rangeCartesianList.getFieldMetadata();
	let lowMemberKeyFieldMetadata = rangeCartesianListFieldMetadata;
	let highMemberKeyFieldMetadata = rangeCartesianListFieldMetadata;
	let rangeCartesianListTimeDimension = this.getDimensionOrCalcDim(rangeCartesianListContext, rangeCartesianList.getDimensionName());
	let rangeCartesianListQueryModel = rangeCartesianListContext.getQueryModel();
	let lowValue = rangeElement.getLow().getString();
	let highValue = null;
	if (rangeElement.getHigh() !== null && rangeElement.getHigh().getString() !== null)
	{
		highValue = rangeElement.getHigh().getString();
	}
	if (oFF.QFilterAcrossModelsFilterUtil.isOpenEndedTimeRangeFilterElement(rangeElement))
	{
		let level = oFF.QTimeDimensionUtil.findAnyHierarchyLevelMatchingField(rangeCartesianListTimeDimension, rangeCartesianListTimeDimension.getFlatKeyField().getMetadata());
		let intervalMembers = this.getLovManager().getIntervalTargetDimensionMembersList(level.getLevelDimensionName());
		if (oFF.isNull(intervalMembers))
		{
			intervalMembers = this.getLovManager().getIntervalTargetDimensionMembersList(rangeCartesianListTimeDimension.getName());
		}
		if (oFF.notNull(intervalMembers) && intervalMembers.size() === 2)
		{
			let mostGranularLevel = targetTimeDimension.getLeveledHierarchy(mostCompatibleTargetTimeHierarchyName).getMostGranularLevel();
			if (oFF.QFilterAcrossModelsFilterUtil.isOpenEndedTimeRangeFilterLowValue(lowValue))
			{
				if (oFF.XStringUtils.isNullOrEmpty(rangeHierarchyName))
				{
					lowValue = intervalMembers.get(0);
					lowMemberKeyFieldMetadata = rangeCartesianListTimeDimension.getFlatKeyField().getMetadata();
				}
				else
				{
					lowValue = oFF.QCanonicalDateUtil.castAndCreateEntityValueFromEntityValueKey(rangeCartesianListQueryModel, rangeCartesianListTimeDimension, rangeHierarchyName, intervalMembers.get(0), level.getLevelType(), mostGranularLevel.getLevelType(), false);
				}
			}
			if (rangeElement.getComparisonOperator() === oFF.ComparisonOperator.GREATER_EQUAL)
			{
				rangeElement.setComparisonOperator(oFF.ComparisonOperator.BETWEEN);
				if (oFF.XStringUtils.isNullOrEmpty(rangeHierarchyName))
				{
					highValue = intervalMembers.get(1);
					highMemberKeyFieldMetadata = rangeCartesianListTimeDimension.getFlatKeyField().getMetadata();
				}
				else
				{
					highValue = oFF.QCanonicalDateUtil.castAndCreateEntityValueFromEntityValueKey(rangeCartesianListQueryModel, rangeCartesianListTimeDimension, rangeHierarchyName, intervalMembers.get(1), level.getLevelType(), mostGranularLevel.getLevelType(), true);
				}
			}
		}
	}
	let converter = oFF.QTimeMemberKeyConverter.create(rangeCartesianListQueryModel, rangeCartesianListTimeDimension, this.getTargetContext().getQueryModel(), targetTimeDimension);
	let startResult = converter.convertAndFlattenRangeEndPoint(lowValue, rangeHierarchyName, lowMemberKeyFieldMetadata, rangeCartesianListFieldMetadata, mostCompatibleTargetTimeHierarchyName, rangeElement.getComparisonOperator(), false);
	this.setFilterPropertiesBasedOnTimeConversionResult(startResult, rangeCartesianList, rangeElement, targetTimeDimension, mostCompatibleTargetTimeHierarchyName);
	if (oFF.XStringUtils.isNotNullAndNotEmpty(highValue))
	{
		let endResult = converter.convertAndFlattenRangeEndPoint(highValue, rangeHierarchyName, highMemberKeyFieldMetadata, rangeCartesianListFieldMetadata, mostCompatibleTargetTimeHierarchyName, rangeElement.getComparisonOperator(), true);
		let targetField = this.getDimensionFieldOfLeveledHierarchyForLevelType(targetTimeDimension, mostCompatibleTargetTimeHierarchyName, endResult.getLevelType());
		oFF.QFilterAcrossModelsFilterUtil.setCartesianElementValues(rangeElement, null, endResult.getFirstKey(), targetField);
	}
	return rangeCartesianList;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.convertTimeMemberCartesianListToTarget = function(memberCartesianList, memberCartesianListContext, targetTimeDimension, mostCompatibleTargetTimeHierarchyName, targetFlatLevelType)
{
	let memberCartesianListTimeDimension = this.getDimensionOrCalcDim(memberCartesianListContext, memberCartesianList.getDimensionName());
	let memberCartesianListFieldMetadata = memberCartesianList.getFieldMetadata();
	let memberKeyConverter = oFF.QTimeMemberKeyConverter.create(memberCartesianListContext.getQueryModel(), memberCartesianListTimeDimension, this.getTargetContext().getQueryModel(), targetTimeDimension);
	let flatTimeRangeFilters = oFF.XList.create();
	let isExcludeSourceFilter = oFF.QFilterAcrossModelsFilterUtil.isFilterAllIncludeOrAllExclude(memberCartesianList, oFF.SetSign.EXCLUDING);
	let sourceFilterHierarchyName = memberCartesianList.getHierarchyName();
	for (let j = memberCartesianList.size() - 1; j >= 0; j--)
	{
		let memberCartesianListElement = memberCartesianList.getCartesianElement(j);
		let conversionResult;
		if (oFF.notNull(targetFlatLevelType))
		{
			conversionResult = memberKeyConverter.convertToFlatMemberKey(memberCartesianListElement.getLow().getString(), sourceFilterHierarchyName, memberCartesianListFieldMetadata, targetFlatLevelType, mostCompatibleTargetTimeHierarchyName);
		}
		else
		{
			conversionResult = memberKeyConverter.convertToHierarchyMemberKey(memberCartesianListElement.getLow().getString(), sourceFilterHierarchyName, memberCartesianListFieldMetadata, mostCompatibleTargetTimeHierarchyName);
		}
		if (oFF.notNull(conversionResult))
		{
			if (conversionResult.isRange())
			{
				memberCartesianList.removeElement(memberCartesianListElement);
				let flatTimeRange;
				if (oFF.QFilterUtil.isSingleValueSourceCartesianList(memberCartesianList))
				{
					flatTimeRange = oFF.QFactory.createFilterConvertedTimeCartesianList(this.m_targetFilterExpression);
					flatTimeRange.copyFrom(memberCartesianList, null);
					flatTimeRange.clear();
				}
				else
				{
					flatTimeRange = oFF.QFactory.createFilterCartesianList(this.m_targetFilterExpression);
				}
				this.setFilterPropertiesBasedOnTimeConversionResult(conversionResult, flatTimeRange, null, targetTimeDimension, mostCompatibleTargetTimeHierarchyName);
				if (isExcludeSourceFilter)
				{
					flatTimeRangeFilters.add(oFF.QFilterAcrossModelsFilterUtil.negateFilter(flatTimeRange));
				}
				else
				{
					flatTimeRangeFilters.add(flatTimeRange);
				}
			}
			else
			{
				this.setFilterPropertiesBasedOnTimeConversionResult(conversionResult, memberCartesianList, memberCartesianListElement, targetTimeDimension, mostCompatibleTargetTimeHierarchyName);
			}
			if (!conversionResult.isFlat())
			{
				memberCartesianList.setConvertToFlatFilter(true);
			}
		}
		else
		{
			memberCartesianList.removeElement(memberCartesianListElement);
		}
	}
	if (flatTimeRangeFilters.size() + memberCartesianList.size() > 1)
	{
		let filterAlgebra = null;
		if (isExcludeSourceFilter)
		{
			filterAlgebra = oFF.QFactory.createFilterAnd(this.m_targetFilterExpression);
		}
		else
		{
			filterAlgebra = oFF.QFactory.createFilterOr(this.m_targetFilterExpression);
		}
		filterAlgebra.addAll(flatTimeRangeFilters);
		filterAlgebra.add(memberCartesianList);
		return filterAlgebra;
	}
	else if (flatTimeRangeFilters.size() > 0)
	{
		return flatTimeRangeFilters.get(0);
	}
	else
	{
		return memberCartesianList;
	}
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.createFilterFromResultSet = function(resultSet)
{
	let filterOr = oFF.QFactory.createFilterOr(this.m_targetFilterExpression);
	let rowsAxis = resultSet.getRowsAxis();
	let linkPartDimensionNameToIndexMap = this.getLinkPartDimensionNameToIndexMap();
	for (let i = 0; i < rowsAxis.getTuplesCount(); i++)
	{
		let tuple = rowsAxis.getTupleAt(i);
		if (tuple.hasElements())
		{
			let tupleFilter = this.createFilterFromTuple(tuple, rowsAxis, linkPartDimensionNameToIndexMap);
			if (oFF.notNull(tupleFilter))
			{
				filterOr.add(tupleFilter);
			}
		}
	}
	return oFF.QFilterAcrossModelsFilterUtil.mergeFilterOrCartesianListsIfApplicable(filterOr);
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.createFilterFromTuple = function(tuple, rowsAxis, linkPartDimensionNameToIndexMap)
{
	let rsDimensions = rowsAxis.getRsDimensions();
	let tupleElements = tuple.getElements();
	let tupleAndFilter = oFF.QFactory.createFilterAnd(this.m_targetFilterExpression);
	let linkParts = oFF.QFilterAcrossModelsLinkUtil.getAllLinkPartsForContext(this.getLinks(), this.getSourceContext());
	let tupleElementIndexProcessOrder = oFF.XArrayOfInt.create(linkParts.size());
	for (let i = 0; i < linkParts.size(); i++)
	{
		tupleElementIndexProcessOrder.set(i, -1);
	}
	for (let i = 0; i < tupleElements.size(); i++)
	{
		let tupleElement = tupleElements.get(i);
		let tupleElementDimension = tupleElement.getDimension();
		let linkPartIndex = null;
		if (oFF.notNull(tupleElementDimension))
		{
			linkPartIndex = linkPartDimensionNameToIndexMap.getByKey(tupleElementDimension.getName());
		}
		else if (i < rsDimensions.size())
		{
			let rsDimension = rsDimensions.get(i);
			if (oFF.notNull(rsDimension))
			{
				linkPartIndex = linkPartDimensionNameToIndexMap.getByKey(rsDimension.getName());
			}
		}
		if (oFF.notNull(linkPartIndex))
		{
			tupleElementIndexProcessOrder.set(linkPartIndex.getInteger(), i);
		}
	}
	for (let i = 0; i < tupleElementIndexProcessOrder.size(); i++)
	{
		let tupleElementIndex = tupleElementIndexProcessOrder.get(i);
		if (tupleElementIndex === -1)
		{
			continue;
		}
		let tupleElement = tupleElements.get(tupleElementIndex);
		let tupleElementDimensionMember = tupleElement.getDimensionMember();
		let sourceContext = this.getSourceContext();
		let sourceDimension = this.getDimensionOrCalcDim(sourceContext, linkParts.get(i).getDimensionName());
		let targetModelLinkPart = oFF.QFilterAcrossModelsLinkUtil.getLinkCounterPartFromDimensionOrFieldKey(this.getLinks(), sourceDimension);
		let sourceModelLinkPart = oFF.QFilterAcrossModelsLinkUtil.getLinkPartFromDimensionOrFieldKey(this.getLinks(), sourceDimension);
		let sourceField = this.getFieldOrCalcDimField(sourceContext, sourceModelLinkPart.getFieldName());
		let tupleElementName = null;
		if (sourceField.isKeyField())
		{
			tupleElementName = tupleElementDimensionMember.getName();
		}
		else
		{
			tupleElementName = tupleElementDimensionMember.getText();
		}
		if (this.isAllNodeMemberKey(tupleElementName) || tupleElementDimensionMember.getMemberType() === oFF.MemberType.RESULT)
		{
			return null;
		}
		if (sourceModelLinkPart.isHierarchical() && (this.hasSourceFiltersOnDimensionWithDifferentHierarchy(sourceDimension, sourceModelLinkPart.getHierarchyName()) && !oFF.QTimeDimensionUtil.isDateOrTimeLikeDimension(sourceDimension) || oFF.QFilterAcrossModelsDimensionUtil.isNonTimeLevelBasedHierarchy(sourceDimension, sourceModelLinkPart.getHierarchyName())) && tupleElement.getDrillState() !== oFF.DrillState.LEAF)
		{
			return null;
		}
		let originalTargetLinkField = this.getFieldOrCalcDimField(this.getTargetContext(), targetModelLinkPart.getFieldName());
		let targetDimension = originalTargetLinkField.getDimension();
		if (this.isContextTypeOfBw(this.getSourceContext()) && sourceModelLinkPart.isHierarchical() && !this.isBwFlatOrLeafNodeHierarchyKey(tupleElementName) && (!targetModelLinkPart.isHierarchical() || oFF.QFilterAcrossModelsDimensionUtil.isNonTimeLevelBasedHierarchy(targetDimension, targetModelLinkPart.getHierarchyName())))
		{
			return null;
		}
		let effectiveTargetLinkField = this.getEffectiveTargetFieldFromTargetLinkPart(targetModelLinkPart, null);
		let cartesianListForTupleElement = oFF.QFactory.createFilterCartesianListWithField(this.m_targetFilterExpression, effectiveTargetLinkField);
		if (targetModelLinkPart.isHierarchical())
		{
			cartesianListForTupleElement.setHierarchyName(targetModelLinkPart.getHierarchyName());
		}
		if (oFF.QTimeDimensionUtil.isDateOrTimeLikeDimension(sourceDimension) && sourceModelLinkPart.getHierarchyName() !== null && oFF.QTimeDimensionUtil.isDateOrTimeLikeDimension(targetDimension) && targetModelLinkPart.isHierarchical())
		{
			let activatedHierarchy = sourceDimension.getLeveledHierarchy(sourceModelLinkPart.getHierarchyName());
			let referenceHierarchyForCompatibility = null;
			let memberKeysToConvert = null;
			let memberKeysToConvertHierarchyName = null;
			let memberKeyConverter = oFF.QTimeMemberKeyConverter.create(sourceContext.getQueryModel(), sourceDimension, this.getTargetContext().getQueryModel(), targetDimension);
			if (oFF.QTimeDimensionUtil.isFiscalTimeHierarchyName(activatedHierarchy.getName()) && !oFF.QTimeDimensionUtil.areFiscalEnabledAndCompatible(sourceDimension, targetDimension))
			{
				let compatibleCalendarHierarchyName = oFF.QTimeDimensionUtil.mapFiscalHierarchyNameToCompatibleCalendarHierarchyName(activatedHierarchy.getName());
				referenceHierarchyForCompatibility = sourceDimension.getLeveledHierarchy(compatibleCalendarHierarchyName);
				let resultCalendar = memberKeyConverter.convertFiscalMemberKeyToCalendar(tupleElementName, activatedHierarchy.getName(), sourceDimension.getKeyField().getMetadata(), compatibleCalendarHierarchyName);
				memberKeysToConvertHierarchyName = resultCalendar.getHierarchyName();
				memberKeysToConvert = resultCalendar.getList();
			}
			else
			{
				referenceHierarchyForCompatibility = activatedHierarchy;
				memberKeysToConvertHierarchyName = sourceModelLinkPart.getHierarchyName();
				memberKeysToConvert = oFF.XList.create();
				memberKeysToConvert.add(tupleElementName);
			}
			let compatibleHierarchyFiscalSpaceType = oFF.QTimeDimensionUtil.getFiscalSpaceType(sourceDimension, activatedHierarchy.getName(), targetDimension);
			let mostCompatibleTargetTimeHierarchy = oFF.QTimeDimensionUtil.findMostCompatibleHierarchy(targetDimension, referenceHierarchyForCompatibility.getAllLevelTypes(), compatibleHierarchyFiscalSpaceType, false);
			if (oFF.isNull(mostCompatibleTargetTimeHierarchy))
			{
				this.getMessageManager().addWarning(oFF.ErrorCodes.FILTER_ACROSS_MODEL_TARGET_TIME_HIERARCHY, oFF.ErrorMessages.FILTER_ACROSS_MODEL_TARGET_TIME_HIERARCHY);
				return null;
			}
			for (let j = 0; j < memberKeysToConvert.size(); j++)
			{
				let memberKeyToConvert = memberKeysToConvert.get(j);
				let result = memberKeyConverter.convertToHierarchyMemberKey(memberKeyToConvert, memberKeysToConvertHierarchyName, sourceDimension.getKeyField().getMetadata(), mostCompatibleTargetTimeHierarchy.getName());
				if (oFF.notNull(result))
				{
					this.setFilterPropertiesBasedOnTimeConversionResult(result, cartesianListForTupleElement, null, targetDimension, mostCompatibleTargetTimeHierarchy.getName());
				}
			}
			tupleAndFilter.add(cartesianListForTupleElement);
		}
		else if (oFF.QFilterAcrossModelsDimensionUtil.isNonTimeLevelBasedHierarchy(sourceDimension, sourceModelLinkPart.getHierarchyName()))
		{
			if (oFF.isNull(this.m_sourceLevelToTargetFieldCache))
			{
				this.m_sourceLevelToTargetFieldCache = oFF.XHashMapByString.create();
			}
			if (!this.m_sourceLevelToTargetFieldCache.containsKey(sourceDimension.getName()))
			{
				this.m_sourceLevelToTargetFieldCache.put(sourceDimension.getName(), this.buildLevelBasedHierarchySourceLevelToTargetFieldMap(sourceDimension, sourceModelLinkPart.getHierarchyName(), targetDimension, targetModelLinkPart.getHierarchyName()));
			}
			let lbhFilter = this.convertAndFlattenLevelBasedHierarchyOrFlexibleTimeMemberKeyToTarget(tupleElementName, sourceDimension, sourceModelLinkPart.getHierarchyName(), this.m_sourceLevelToTargetFieldCache.getByKey(sourceDimension.getName()));
			tupleAndFilter.add(lbhFilter);
		}
		else
		{
			let targetMemberKeys = this.convertNonTimeMemberKeyToTarget(tupleElementName, sourceModelLinkPart, targetModelLinkPart);
			if (oFF.isNull(targetMemberKeys))
			{
				return null;
			}
			for (let k = 0; k < targetMemberKeys.size(); k++)
			{
				let nonTimeElem = cartesianListForTupleElement.addNewCartesianElement();
				oFF.QFilterAcrossModelsFilterUtil.setCartesianElementValues(nonTimeElem, targetMemberKeys.get(k), null, effectiveTargetLinkField);
				nonTimeElem.setComparisonOperator(oFF.ComparisonOperator.EQUAL);
				nonTimeElem.setHierarchyName(targetModelLinkPart.getHierarchyName());
			}
			tupleAndFilter.add(cartesianListForTupleElement);
		}
		if (targetModelLinkPart.isHierarchical())
		{
			cartesianListForTupleElement.setConvertToFlatFilter(true);
		}
	}
	if (tupleAndFilter.size() === 1)
	{
		return tupleAndFilter.get(0);
	}
	else
	{
		return tupleAndFilter;
	}
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.createListFromIterator = function(iterator)
{
	let target = oFF.XList.create();
	while (iterator.hasNext())
	{
		target.add(iterator.next());
	}
	return target;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.extractBwValueFromFlatOrHierarchyKey = function(flatOrHierarchyKey)
{
	let tokenizedKey = oFF.XStringTokenizer.splitString(flatOrHierarchyKey, "!");
	return tokenizedKey.get(tokenizedKey.size() - 1);
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.extractHanaValueFromHierarchyKey = function(context, dimensionName, hierarchyName, hierarchyKey)
{
	let sourceModelLinkedDimension = this.getDimensionOrCalcDim(context, dimensionName);
	let sourceGroupingDimension = this.getGroupingDimensionWithDefault(sourceModelLinkedDimension);
	let hierarchyKeyMetadata = oFF.XStringUtils.concatenate5("[", sourceGroupingDimension.getName(), "].[", hierarchyName, "].&[");
	let memberKeyValue = oFF.XString.replace(hierarchyKey, hierarchyKeyMetadata, "");
	if (!oFF.XString.isEqual(memberKeyValue, hierarchyKey))
	{
		memberKeyValue = oFF.XString.substring(memberKeyValue, 0, oFF.XString.size(memberKeyValue) - 1);
	}
	return memberKeyValue;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.generateTransientFilters = function()
{
	let result = oFF.XList.create();
	if (!this.getTargetContext().getSession().hasFeature(oFF.FeatureToggleOlap.LOV_BASED_FILTER_ACROSS_MODELS))
	{
		return result;
	}
	try
	{
		result = this.generateTransientFiltersInternal();
	}
	catch (t)
	{
		this.getMessageManager().addError(oFF.ErrorCodes.FILTER_ACROSS_MODEL_LOV_BASED_FAILED, oFF.ErrorMessages.FILTER_ACROSS_MODEL_LOV_BASED_FAILED);
	}
	return result;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.generateTransientFiltersInternal = function()
{
	let result = oFF.XList.create();
	this.m_convertedMemberKeysCache = oFF.XHashMapByString.create();
	let directFilterExpressions = this.getEffectiveDirectFilters();
	let filterExpression = this.getTargetContext().getQueryModel().getFilter().createFilter();
	this.m_targetFilterExpression = filterExpression;
	this.m_targetFilterExpression.stopEventing();
	let directFilterRoot = oFF.QFactory.createFilterAnd(filterExpression);
	let indirectFilterRoot = oFF.QFactory.createFilterOr(filterExpression);
	let indirectInclusionFilter = null;
	let indirectExclusionFilter = null;
	let skipFilterPropagation = false;
	for (let j = 0; j < directFilterExpressions.size(); j++)
	{
		let sourceModelDirectFilterExpression = directFilterExpressions.get(j);
		let targetModelFilterExpression = this.convertFilterExpressionToTarget(sourceModelDirectFilterExpression);
		directFilterRoot.add(targetModelFilterExpression.getFilterRootElement());
	}
	let sourceFilters = this.getSourceFilters().toReadOnly().getValuesAsReadOnlyList();
	if (!oFF.QFilterAcrossModelsFilterUtil.areAllFiltersDirect(this.getSourceContext(), this.getTargetContext(), this.getLinks(), sourceFilters))
	{
		this.addFlexibleTimeRangeFiltersWarnings();
		let standardLovQueryResult = this.getLovManager().getIndirectFilterStandardLovQueryResult();
		indirectInclusionFilter = this.createFilterFromResultSet(standardLovQueryResult.getData().getClassicResultSet());
		let excludeLovQueryResult = this.getLovManager().getIndirectFilterExcludeScenarioLovQueryResult();
		if (oFF.isNull(excludeLovQueryResult))
		{
			indirectFilterRoot = indirectInclusionFilter;
		}
		else
		{
			indirectExclusionFilter = this.createFilterFromResultSet(excludeLovQueryResult.getData().getClassicResultSet());
			indirectExclusionFilter = oFF.QFilterAcrossModelsFilterUtil.negateFilter(indirectExclusionFilter);
			indirectFilterRoot.add(indirectInclusionFilter);
			indirectFilterRoot.add(indirectExclusionFilter);
		}
	}
	if (this.isContextTypeOfBw(this.getTargetContext()))
	{
		this.removeNodesThatContainInvalidHierarchicalMember(directFilterRoot);
		this.removeNodesThatContainInvalidHierarchicalMember(indirectFilterRoot);
		skipFilterPropagation = oFF.QFilterAcrossModelsFilterUtil.processRangeFilterMessagesForTargetDirectFilter(this.getSourceContext(), this.getTargetContext(), this.getLinks(), directFilterRoot, this.getMessageManager());
	}
	if (!this.isContextTypeOfBw(this.getTargetContext()) && oFF.notNull(indirectInclusionFilter) && oFF.isNull(indirectExclusionFilter) && indirectFilterRoot.getOlapComponentType() === oFF.FilterComponentType.OR)
	{
		indirectFilterRoot = oFF.QFilterAcrossModelsFilterUtil.optimizeTupleFilterIfApplicable(indirectFilterRoot);
	}
	let finalFilter = oFF.QFilterAcrossModelsFilterUtil.reduceAndCreateFinalFilterAcrossModelsRootFilterElement(directFilterRoot, indirectFilterRoot, this.isContextTypeOfBw(this.getTargetContext()));
	if (oFF.QFilterUtil.isFilterNullOrEmpty(finalFilter) || oFF.notNull(indirectInclusionFilter) && oFF.QFilterUtil.isFilterNullOrEmpty(indirectFilterRoot))
	{
		this.getMessageManager().addWarning(oFF.ErrorCodes.FILTER_ACROSS_MODEL_EMPTY_TARGET_FILTER, oFF.ErrorMessages.FILTER_ACROSS_MODEL_EMPTY_TARGET_FILTER);
	}
	else if (!skipFilterPropagation)
	{
		if (finalFilter.getOlapComponentType().isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
		{
			filterExpression.getCartesianProductWithDefault().add(finalFilter);
		}
		else
		{
			filterExpression.setComplexRoot(finalFilter);
		}
		result.add(filterExpression);
	}
	this.m_targetFilterExpression.resumeEventing();
	this.m_convertedMemberKeysCache = oFF.XObjectExt.release(this.m_convertedMemberKeysCache);
	this.m_sourceLevelToTargetFieldCache = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_sourceLevelToTargetFieldCache);
	return result;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.getAllHierachyLevelDimensionKeyFieldNames = function(dimension, hierarchyName)
{
	let levelNames = dimension.getLeveledHierarchy(hierarchyName).getAllHierarchyLevelNames(oFF.XCollectionUtils.singletonList(oFF.HierarchyLevelType.ALL));
	let keyFieldNames = oFF.XList.create();
	for (let i = 0; i < levelNames.size(); i++)
	{
		let levelDimension = dimension.getDimensionAccessor().getDimensionByName(levelNames.get(i));
		keyFieldNames.add(levelDimension.getFlatKeyField().getName());
	}
	return keyFieldNames;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.getDimensionFieldOfLeveledHierarchyForLevelType = function(dimension, leveledHierarchyName, levelType)
{
	let dimensionAccessor = dimension.getDimensionAccessor();
	let hierarchy = dimension.getLeveledHierarchy(leveledHierarchyName);
	let level = hierarchy.getLevelByType(levelType);
	let levelDimension = dimensionAccessor.getDimensionByName(level.getLevelDimensionName());
	let keyFieldAliasName = levelDimension.getFlatKeyField().getAliasName();
	return oFF.XStringUtils.isNotNullAndNotEmpty(keyFieldAliasName) ? dimension.getFieldByNameOrAlias(keyFieldAliasName) : levelDimension.getFlatKeyField();
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.getDimensionOrCalcDim = function(context, dimensionName)
{
	return oFF.QFilterAcrossModelsDimensionUtil.getDimensionOrCalcDim(context, dimensionName, oFF.QFilterAcrossModelsLinkUtil.getAnySharedLinkStorageName(this.getLinks()));
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.getEffectiveDirectFilters = function()
{
	let sourceFilters = this.getSourceFilters().toReadOnly();
	let sourceFilterKeys = sourceFilters.getKeysAsIterator();
	let directFilters = oFF.XList.create();
	while (sourceFilterKeys.hasNext())
	{
		let sourceFilterKey = sourceFilterKeys.next();
		let sourceFilter = sourceFilters.getByKey(sourceFilterKey);
		if (oFF.QFilterUtil.isFilterNullOrEmpty(sourceFilter))
		{
			continue;
		}
		let sourceContext = this.getSourceContext();
		let targetContext = this.getTargetContext();
		if (!oFF.QFilterAcrossModelsFilterUtil.isDirectFilterElement(sourceContext, targetContext, this.getLinks(), sourceFilter.getFilterRootElement()))
		{
			continue;
		}
		if (!this.isLovManagerValid())
		{
			directFilters.add(sourceFilter);
			continue;
		}
		let updatedSourceFilter = oFF.QFactory.createFilterExpression(sourceFilter.getContext(), null);
		updatedSourceFilter.copyFrom(sourceFilter, null);
		let cartesianLists = oFF.QFilterUtil.collectAllCartesianLists(updatedSourceFilter);
		for (let i = 0; i < cartesianLists.size(); i++)
		{
			let cartesianList = cartesianLists.get(i);
			if (!cartesianList.isEmpty())
			{
				this.updateFilterMembersListWithLovList(cartesianList);
			}
		}
		directFilters.add(updatedSourceFilter);
	}
	return directFilters;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.getEffectiveTargetFieldFromTargetLinkPart = function(targetLinkPart, filterOp)
{
	let targetDimension = this.getDimensionOrCalcDim(this.getTargetContext(), targetLinkPart.getDimensionName());
	if (oFF.notNull(filterOp))
	{
		if (filterOp.getComparisonOperator().isTypeOf(oFF.SpatialComparisonOperator._SPATIAL))
		{
			let geoField = targetDimension.getGeoPointField();
			if (oFF.isNull(geoField))
			{
				let geoFields = targetDimension.getConvenienceCommands().getGISAttributesForDimension(targetDimension);
				geoField = geoFields.get(0);
			}
			if (oFF.notNull(geoField))
			{
				return geoField;
			}
		}
	}
	let targetField = this.getFieldOrCalcDimField(this.getTargetContext(), targetLinkPart.getFieldName());
	if (this.isContextTypeOfBw(this.getTargetContext()) && !targetField.isKeyField())
	{
		if (targetLinkPart.isHierarchical())
		{
			targetField = targetDimension.getHierarchyKeyField();
		}
		else
		{
			targetField = targetDimension.getFlatKeyField();
		}
	}
	return targetField;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.getFieldOrCalcDimField = function(context, fieldName)
{
	return oFF.QFilterAcrossModelsDimensionUtil.getFieldOrCalcDimField(context, fieldName, oFF.QFilterAcrossModelsLinkUtil.getAnySharedLinkStorageName(this.getLinks()));
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.getGroupingDimensionWithDefault = function(dimension)
{
	let groupingDimensions = dimension.getGroupingDimensions();
	return oFF.notNull(groupingDimensions) && groupingDimensions.size() > 0 ? groupingDimensions.get(0) : dimension;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.getLinkPartDimensionNameToIndexMap = function()
{
	let sourceContext = this.getSourceContext();
	let linkParts = oFF.QFilterAcrossModelsLinkUtil.getAllLinkPartsForContext(this.getLinks(), sourceContext);
	let linkPartDimensionNameToIndexMap = oFF.XHashMapByString.create();
	for (let i = 0; i < linkParts.size(); i++)
	{
		let linkPartKey = linkParts.get(i).getDimensionName();
		linkPartDimensionNameToIndexMap.put(linkPartKey, oFF.XIntegerValue.create(i));
	}
	return linkPartDimensionNameToIndexMap;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.getLovManager = function()
{
	return this.m_lov;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.getMemberKeyCacheKey = function(memberKeyFieldContext, memberKey)
{
	return oFF.XStringUtils.concatenate3(memberKeyFieldContext.getDimensionName(), "|", memberKey);
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.getSourceLinkCounterPartDimensionName = function(dimensionName)
{
	return oFF.QFilterAcrossModelsLinkUtil.getLinkCounterPartDimensionName(this.getLinks(), this.getSourceContext(), dimensionName);
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.hasSourceFiltersOnDimensionWithDifferentHierarchy = function(dimensionToSearch, hierarchyNameToCompare)
{
	let dimensionNameToSearch = oFF.XHashSetOfString.create();
	dimensionNameToSearch.add(dimensionToSearch.getName());
	let filtersOnSearchedDimension = oFF.XListOfNameObject.create();
	let sourceFiltersIterator = this.getSourceFilters().getIterator();
	while (sourceFiltersIterator.hasNext())
	{
		let filterExpression = sourceFiltersIterator.next();
		if (filterExpression.getFilterRootElement() !== null)
		{
			oFF.QFilterUtil.collectAllCartesianListsUsingDimensionNames(filterExpression.getFilterRootElement(), dimensionNameToSearch, filtersOnSearchedDimension);
		}
	}
	for (let i = 0; i < filtersOnSearchedDimension.size(); i++)
	{
		let filterOnSearchedDimension = filtersOnSearchedDimension.get(i);
		let filterHierarchyName = filterOnSearchedDimension.getHierarchyName();
		if (!oFF.XString.isEqual(filterHierarchyName, hierarchyNameToCompare))
		{
			return true;
		}
	}
	return false;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.isAllNodeMemberKey = function(memberKey)
{
	return oFF.notNull(memberKey) && oFF.XString.containsString(memberKey, "[All].[(all)]");
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.isBwFlatOrLeafNodeHierarchyKey = function(key)
{
	if (oFF.XString.size(oFF.XString.trim(key)) > 0 && !oFF.XString.containsString(key, "!"))
	{
		return true;
	}
	let tokenizedKey = oFF.XStringTokenizer.splitString(key, "!");
	return tokenizedKey.size() === 2 && oFF.XString.size(tokenizedKey.get(0)) === 0;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.isLovManagerValid = function()
{
	return oFF.notNull(this.m_lov) && !this.m_lov.isReleased();
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.isTupleFilterLeaf = function(element)
{
	let parent = element.getParent();
	return oFF.notNull(parent) && parent.getOlapComponentType() === oFF.FilterComponentType.AND && parent.getParent() !== null && parent.getParent().getOlapComponentType() === oFF.FilterComponentType.OR;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.releaseObject = function()
{
	this.m_convertedMemberKeysCache = oFF.XObjectExt.release(this.m_convertedMemberKeysCache);
	this.m_sourceLevelToTargetFieldCache = oFF.XObjectExt.release(this.m_sourceLevelToTargetFieldCache);
	this.m_targetFilterExpression = null;
	this.m_lov = null;
	oFF.QFilterAcrossModelsTransientObjectGenerator.prototype.releaseObject.call( this );
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.removeEmptyAndVirtualAllNodeElements = function(cartesianList)
{
	for (let i = cartesianList.size() - 1; i >= 0; i--)
	{
		let cartesianElement = cartesianList.getCartesianElement(i);
		if (cartesianElement.getComparisonOperator() !== oFF.ComparisonOperator.IS_NULL && (cartesianElement.getLow() === null || !cartesianElement.getLow().hasValue() || this.isAllNodeMemberKey(cartesianElement.getLow().getString())))
		{
			cartesianList.removeAt(i);
		}
	}
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.removeNodesThatContainInvalidHierarchicalMember = function(root)
{
	if (oFF.isNull(root))
	{
		return;
	}
	if (root.getOlapComponentType().isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
	{
		let cartesianList = root;
		for (let i = cartesianList.size() - 1; i >= 0; i--)
		{
			let elem = cartesianList.getCartesianElement(i);
			if (elem.getHierarchyName() === null || elem.getComparisonOperator().isRange())
			{
				continue;
			}
			if (!this.getLovManager().isDimensionMemberListNotAvailableOrHierarchicalMemberExists(cartesianList.getDimensionName(), elem.getLow().getString()))
			{
				if (this.isTupleFilterLeaf(cartesianList))
				{
					let filterOr = cartesianList.getParent().getParent();
					filterOr.removeElement(cartesianList.getParent());
				}
				else
				{
					cartesianList.removeElement(elem);
				}
			}
		}
		return;
	}
	let children = this.createListFromIterator(root.getChildrenIterator());
	for (let j = children.size() - 1; j >= 0; j--)
	{
		this.removeNodesThatContainInvalidHierarchicalMember(children.get(j));
	}
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.setFilterPropertiesBasedOnTimeConversionResult = function(conversionResult, cartesianElementParent, cartesianElement, targetTimeDimension, targetHierarchyName)
{
	let element = cartesianElement;
	let isNewElement = false;
	if (oFF.isNull(element))
	{
		element = cartesianElementParent.addNewCartesianElement();
		isNewElement = true;
	}
	let targetField;
	if (conversionResult.isFlat())
	{
		targetField = this.getDimensionFieldOfLeveledHierarchyForLevelType(targetTimeDimension, targetHierarchyName, conversionResult.getLevelType());
		element.setField(targetField);
		cartesianElementParent.setField(targetField);
		element.setHierarchyName(null);
		cartesianElementParent.setHierarchyName(null);
	}
	else
	{
		targetField = targetTimeDimension.getHierarchyKeyField();
		element.setField(targetField);
		element.setHierarchyName(conversionResult.getHierarchyName());
		cartesianElementParent.setField(targetField);
		cartesianElementParent.setHierarchyName(conversionResult.getHierarchyName());
	}
	if (conversionResult.isRange())
	{
		oFF.QFilterAcrossModelsFilterUtil.setCartesianElementValues(element, conversionResult.getFirstKey(), conversionResult.getSecondKey(), targetField);
		if (isNewElement)
		{
			element.setComparisonOperator(oFF.ComparisonOperator.BETWEEN);
		}
	}
	else
	{
		oFF.QFilterAcrossModelsFilterUtil.setCartesianElementValues(element, conversionResult.getFirstKey(), null, targetField);
		if (isNewElement)
		{
			element.setComparisonOperator(oFF.ComparisonOperator.EQUAL);
		}
	}
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.setLovManager = function(lovManager)
{
	this.m_lov = lovManager;
};
oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.prototype.updateFilterMembersListWithLovList = function(cartesianList)
{
	let filterUpdatedMembers = this.getLovManager().getFilterUpdatedMembersList(cartesianList.getUniqueId());
	if (oFF.isNull(filterUpdatedMembers) || filterUpdatedMembers.isEmpty())
	{
		return;
	}
	let cartesianElementSource = cartesianList.getCartesianElement(0);
	cartesianList.clear();
	for (let i = 0; i < filterUpdatedMembers.size(); i++)
	{
		let member = filterUpdatedMembers.get(i);
		let cartesianElement = cartesianList.addNewCartesianElement();
		cartesianElement.configureSingleParameterExpression(oFF.XStringValue.create(member), cartesianElementSource.getComparisonOperator());
		cartesianElement.setSetSign(cartesianElementSource.getSetSign());
		cartesianElement.setHierarchyName(cartesianElementSource.getHierarchyName());
	}
};

oFF.QFilterAcrossModelsPrequeryBasedTransientObjectGenerator = function() {};
oFF.QFilterAcrossModelsPrequeryBasedTransientObjectGenerator.prototype = new oFF.QFilterAcrossModelsTransientObjectGenerator();
oFF.QFilterAcrossModelsPrequeryBasedTransientObjectGenerator.prototype._ff_c = "QFilterAcrossModelsPrequeryBasedTransientObjectGenerator";

oFF.QFilterAcrossModelsPrequeryBasedTransientObjectGenerator.EXCLUDE_SUFFIX = "_EXCLUDE";
oFF.QFilterAcrossModelsPrequeryBasedTransientObjectGenerator.createFilterAcrossModelsPrequeryBasedTransientObjectGenerator = function(parent, name, sourceContext, targetContext, messageManager, links, sourceFilters, measureNames, secondaryMeasureNames)
{
	let fam = new oFF.QFilterAcrossModelsPrequeryBasedTransientObjectGenerator();
	fam.setupFilterAcrossModelsTransientObjectGenerator(parent, name, sourceContext, targetContext, messageManager, links, sourceFilters, measureNames, secondaryMeasureNames);
	return fam;
};
oFF.QFilterAcrossModelsPrequeryBasedTransientObjectGenerator.prototype.generateExcludeFilter = function(primaryQueryModel, formulaCalcDim, formulaCalcDimIndirectExclude)
{
	if (oFF.notNull(formulaCalcDimIndirectExclude))
	{
		let foCalcDim = oFF.QFactory.createFilterOperationWithOperator(primaryQueryModel, formulaCalcDim.getKeyField(), oFF.ComparisonOperator.IS_NULL);
		foCalcDim.setSetSign(oFF.SetSign.EXCLUDING);
		let foCalcDimExclude = oFF.QFactory.createFilterOperationWithOperator(primaryQueryModel, formulaCalcDimIndirectExclude.getKeyField(), oFF.ComparisonOperator.IS_NULL);
		let primaryExclude = oFF.QFactory.createFilterOr(primaryQueryModel);
		primaryExclude.addInternal(foCalcDim);
		primaryExclude.addInternal(foCalcDimExclude);
		if (primaryQueryModel.getFilter().getLinkedFilter(formulaCalcDimIndirectExclude.getName()) === null)
		{
			primaryQueryModel.getFilter().linkFilterElement(formulaCalcDimIndirectExclude.getName(), primaryExclude);
		}
	}
};
oFF.QFilterAcrossModelsPrequeryBasedTransientObjectGenerator.prototype.generateField = function(link, targetContext, calculatedDimension, forIndirectExclude)
{
	let targetLinkPart;
	let sourceLinkPart;
	if (link.getFirstPart().isSameDataSourceOrDatasetIdAsContext(targetContext))
	{
		targetLinkPart = link.getFirstPart();
		sourceLinkPart = link.getSecondPart();
	}
	else
	{
		sourceLinkPart = link.getFirstPart();
		targetLinkPart = link.getSecondPart();
	}
	let sourceDimension = this.getSourceContext().getQueryModel().getDimensionByName(sourceLinkPart.getDimensionName());
	let targetDimension = targetContext.getQueryModel().getDimensionByName(targetLinkPart.getDimensionName());
	let sourceKeyAttributeNames = oFF.XList.create();
	let targetKeyAttributeNames = oFF.XList.create();
	if (oFF.notNull(sourceDimension) && oFF.notNull(targetDimension))
	{
		sourceKeyAttributeNames = sourceDimension.getKeyAttributesNames();
		targetKeyAttributeNames = targetDimension.getKeyAttributesNames();
	}
	let sourceField = oFF.isNull(sourceDimension) ? null : sourceDimension.getFieldByName(sourceLinkPart.getFieldName());
	if (oFF.notNull(sourceDimension) && sourceDimension.isCompound() && oFF.notNull(sourceField) && sourceField.isFlatKeyField())
	{
		for (let i = 0; i < sourceKeyAttributeNames.size(); i++)
		{
			let sourcePartKeyDimension = this.getSourceContext().getQueryModel().getDimensionByName(sourceKeyAttributeNames.get(i));
			let targetPartKeyDimension = targetContext.getQueryModel().getDimensionByName(targetKeyAttributeNames.get(i));
			if (oFF.notNull(sourcePartKeyDimension) && oFF.notNull(targetPartKeyDimension))
			{
				calculatedDimension.addJoinFieldByString(targetPartKeyDimension.getName(), sourcePartKeyDimension.getName());
			}
		}
	}
	else
	{
		calculatedDimension.addJoinFieldByString(this.getJoinFieldNameForSource(targetLinkPart, targetContext), sourceLinkPart.getFieldName());
	}
};
oFF.QFilterAcrossModelsPrequeryBasedTransientObjectGenerator.prototype.generateFields = function(context, calculatedDimension, forIndirectExclude)
{
	if (oFF.notNull(calculatedDimension))
	{
		let iterator = this.getLinks().getIterator();
		while (iterator.hasNext())
		{
			this.generateField(iterator.next(), context, calculatedDimension, forIndirectExclude);
		}
		let joinTarget;
		if (calculatedDimension.getQueryModel().getPrimaryCalculationDimension().getDimensionType() === oFF.DimensionType.ACCOUNT)
		{
			let secondaryMeasureContext = this.getSecondaryMeasureNames();
			if (secondaryMeasureContext.isEmpty())
			{
				joinTarget = calculatedDimension.getQueryModel().getQueryModel().isUniversalAccountModel() ? "constant_secondary_fam_id" : "SignedData";
			}
			else
			{
				joinTarget = secondaryMeasureContext.getValuesAsReadOnlyList().get(0);
			}
		}
		else
		{
			let measureContext = this.getMeasureNames();
			joinTarget = measureContext.isEmpty() ? "constant_fam_id" : measureContext.getValuesAsReadOnlyList().get(0);
		}
		calculatedDimension.addFieldMappingByString(oFF.XStringUtils.concatenate2(calculatedDimension.getName(), "_ID"), joinTarget);
	}
};
oFF.QFilterAcrossModelsPrequeryBasedTransientObjectGenerator.prototype.generateFormulaCalcDim = function(secondaryQueryModel)
{
	let formulaCalcDim = oFF.QFactory.createFilterAcrossModelsCalculatedDimension(secondaryQueryModel, this.getName());
	formulaCalcDim.setPropertiesKeyRef(this.createKeyRefForFirstSharedLink(this.getFirstSecondaryFieldLink(this.getTargetContext())));
	formulaCalcDim.setMeasureNames(this.getMeasureNames().getValuesAsReadOnlyList());
	formulaCalcDim.setSecondaryMeasureNames(this.getSecondaryMeasureNames().getValuesAsReadOnlyList());
	this.setDimensionContext(secondaryQueryModel, formulaCalcDim, false);
	this.setFilterContext(formulaCalcDim);
	return formulaCalcDim;
};
oFF.QFilterAcrossModelsPrequeryBasedTransientObjectGenerator.prototype.generateFormulaCalcDimExclude = function(secondaryQueryModel, formulaCalculatedDimension)
{
	let invertedFilter = this.getInvertertedIndirectExclude(secondaryQueryModel);
	if (oFF.notNull(invertedFilter))
	{
		formulaCalculatedDimension.setJoinType(oFF.JoinType.LEFT_OUTER);
		let formulaCalcDimIndirectExclude = oFF.QFactory.createFilterAcrossModelsCalculatedDimension(secondaryQueryModel, this.getExcludeCalcDimName());
		formulaCalcDimIndirectExclude.setJoinType(oFF.JoinType.LEFT_OUTER);
		this.setDimensionContext(secondaryQueryModel, formulaCalcDimIndirectExclude, true);
		formulaCalcDimIndirectExclude.setMeasureNames(this.getMeasureNames().getValuesAsReadOnlyList());
		formulaCalcDimIndirectExclude.setSecondaryMeasureNames(this.getSecondaryMeasureNames().getValuesAsReadOnlyList());
		formulaCalcDimIndirectExclude.setPropertiesKeyRef(this.createKeyRefForFirstSharedLink(this.getFirstSecondaryFieldLink(this.getTargetContext())));
		formulaCalcDimIndirectExclude.getFilterContext().setComplexRoot(invertedFilter.getFilterRootElement());
		return formulaCalcDimIndirectExclude;
	}
	return null;
};
oFF.QFilterAcrossModelsPrequeryBasedTransientObjectGenerator.prototype.generateTransientDimensions = function()
{
	let secondaryContext = this.getSourceContext();
	if (oFF.isNull(secondaryContext))
	{
		this.getMessageManager().addError(oFF.ErrorCodes.INVALID_OPERATOR, oFF.ErrorMessages.FILTER_ACROSS_MODEL_LINKED_CONTEXT_UNSUPPORTED);
		return oFF.XList.create();
	}
	let mainQueryModel = this.getTargetContext().getQueryModel();
	let secondaryQueryModel = secondaryContext.getQueryModel();
	let formulaCalcDim = this.generateFormulaCalcDim(secondaryQueryModel);
	let formulaCalcDimIndirectExclude = this.generateFormulaCalcDimExclude(secondaryQueryModel, formulaCalcDim);
	let forIndirectExclude = oFF.notNull(formulaCalcDimIndirectExclude);
	this.generateFields(this.getTargetContext(), formulaCalcDim, forIndirectExclude);
	this.generateFields(this.getTargetContext(), formulaCalcDimIndirectExclude, forIndirectExclude);
	this.generateExcludeFilter(mainQueryModel, formulaCalcDim, formulaCalcDimIndirectExclude);
	let result = oFF.XList.create();
	oFF.XCollectionUtils.addIfNotNull(result, formulaCalcDim);
	oFF.XCollectionUtils.addIfNotNull(result, formulaCalcDimIndirectExclude);
	this.addFlexibleTimeRangeFiltersWarnings();
	return result;
};
oFF.QFilterAcrossModelsPrequeryBasedTransientObjectGenerator.prototype.getExcludeCalcDimName = function()
{
	return oFF.XStringUtils.concatenate2(this.getName(), oFF.QFilterAcrossModelsPrequeryBasedTransientObjectGenerator.EXCLUDE_SUFFIX);
};
oFF.QFilterAcrossModelsPrequeryBasedTransientObjectGenerator.prototype.getInvertertedIndirectExclude = function(secondaryQueryModel)
{
	let secondaryFilter = secondaryQueryModel.getFilter();
	let invertedFilter = secondaryFilter.createFilter();
	let filterOr = oFF.QFactory.createFilterOr(invertedFilter);
	filterOr.setHasChildOwnership(false);
	invertedFilter.setComplexRoot(filterOr);
	let isContainingInclude = false;
	let extFilterIt = this.getSourceFilters().getIterator();
	while (extFilterIt.hasNext())
	{
		let nextFilterRoot = extFilterIt.next().getFilterRootElement();
		if (this.isContainingInclude(nextFilterRoot))
		{
			isContainingInclude = true;
			filterOr.clear();
			break;
		}
		if (oFF.notNull(nextFilterRoot))
		{
			let invertedExternalRoot = oFF.QFilterAcrossModelsFilterUtil.negateFilter(nextFilterRoot);
			if (!oFF.QFilterUtil.isFilterNullOrEmpty(invertedExternalRoot))
			{
				filterOr.addInternal(invertedExternalRoot);
			}
		}
	}
	let dynamicFilterRoot = secondaryQueryModel.getFilter().getDynamicFilter().getFilterRootElement();
	if (!isContainingInclude && oFF.notNull(dynamicFilterRoot) && !this.isContainingInclude(dynamicFilterRoot))
	{
		let invertedInternalRoot = oFF.QFilterAcrossModelsFilterUtil.negateFilter(dynamicFilterRoot);
		if (!oFF.QFilterUtil.isFilterNullOrEmpty(invertedInternalRoot))
		{
			filterOr.addInternal(invertedInternalRoot);
		}
	}
	if (filterOr.hasElements())
	{
		return invertedFilter;
	}
	return null;
};
oFF.QFilterAcrossModelsPrequeryBasedTransientObjectGenerator.prototype.getJoinFieldNameForSource = function(targetLinkPart, context)
{
	let queryModel = context.getQueryModel();
	let field = oFF.notNull(queryModel) ? queryModel.getFieldByName(targetLinkPart.getFieldName()) : null;
	if (oFF.notNull(field) && (field.isFlatKeyField() || field.isHierarchyKeyField()))
	{
		return targetLinkPart.getDimensionName();
	}
	return targetLinkPart.getFieldName();
};
oFF.QFilterAcrossModelsPrequeryBasedTransientObjectGenerator.prototype.isContainingInclude = function(element)
{
	if (oFF.isNull(element))
	{
		return false;
	}
	let filterType = element.getOlapComponentType();
	if (filterType.isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
	{
		let filterList = element;
		let iterator = filterList.getIterator();
		while (iterator.hasNext())
		{
			let next = iterator.next();
			if (next.getSetSign() === oFF.SetSign.INCLUDING)
			{
				return true;
			}
		}
	}
	else if (filterType.isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA))
	{
		let filterAlgebra = element;
		let size = filterAlgebra.size();
		for (let i = 0; i < size; i++)
		{
			if (this.isContainingInclude(filterAlgebra.get(i)))
			{
				return true;
			}
		}
	}
	else if (filterType.isTypeOf(oFF.FilterComponentType.OPERATION))
	{
		let filterOperation = element;
		return filterOperation.getSetSign() === oFF.SetSign.INCLUDING;
	}
	else
	{
		return true;
	}
	return false;
};
oFF.QFilterAcrossModelsPrequeryBasedTransientObjectGenerator.prototype.setDimensionContext = function(secondaryQueryModel, calcDim, isExcludeCalcDim)
{
	let areAllLinksAndFiltersFlexibleTime = oFF.QFilterAcrossModelsFilterUtil.areAllLinksAndFiltersFlexibleTime(secondaryQueryModel, this.getLinks(), this.getSourceFilters().toReadOnly());
	let secondaryLink = this.getFirstSecondaryFieldLink(this.getTargetContext());
	let linkedDimensionNames = oFF.QFilterAcrossModelsLinkUtil.getLinkedDimensionsForContext(this.getLinks(), secondaryLink);
	for (let i = 0; i < linkedDimensionNames.size(); i++)
	{
		let linkedDimensionName = linkedDimensionNames.get(i);
		let linkedDimension = secondaryQueryModel.getDimensionByName(linkedDimensionName);
		let aggregationFieldName = null;
		if (oFF.isNull(linkedDimension))
		{
			let clientQueryObjectManager = this.getTargetContext().getOlapEnv().getClientQueryObjectManager();
			let storageName = oFF.QFilterAcrossModelsLinkUtil.getSharedLinkStorageName(this.getLinks(), secondaryLink);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(storageName))
			{
				let props = clientQueryObjectManager.getFormulaCalcDimProperties(linkedDimensionName, storageName);
				if (oFF.notNull(props))
				{
					aggregationFieldName = props.getFormulaCalcFields().getFirstFieldByType(oFF.PresentationType.KEY).getName();
				}
			}
		}
		else
		{
			if (areAllLinksAndFiltersFlexibleTime)
			{
				linkedDimension.setReadModeGraceful(oFF.QContextType.RESULT_SET, oFF.QMemberReadMode.MASTER);
			}
			else
			{
				linkedDimension.setReadModeGraceful(oFF.QContextType.RESULT_SET, oFF.QMemberReadMode.BOOKED_AND_SPACE_AND_STATE);
			}
			let filter = linkedDimension.getFilter();
			if (isExcludeCalcDim && oFF.XCollectionUtils.hasElements(filter))
			{
				let filterElement = filter.getOp(0);
				if (filterElement.getSetSign() !== oFF.SetSign.EXCLUDING)
				{
					aggregationFieldName = linkedDimension.getKeyField().getName();
				}
			}
			else
			{
				aggregationFieldName = linkedDimension.getKeyField().getName();
			}
		}
		if (oFF.XStringUtils.isNotNullAndNotEmpty(aggregationFieldName))
		{
			calcDim.addAggregationFieldName(aggregationFieldName);
		}
	}
};
oFF.QFilterAcrossModelsPrequeryBasedTransientObjectGenerator.prototype.setFilterContext = function(calcDim)
{
	let layeredFilters = calcDim.getLayeredFilters();
	let sourceFilters = this.getSourceFilters();
	let keyIterator = sourceFilters.toReadOnly().getKeysAsIterator();
	while (keyIterator.hasNext())
	{
		let key = keyIterator.next();
		layeredFilters.putLayer(key, sourceFilters.getLayer(key));
	}
};

oFF.CustomHierarchyMemberElement = function() {};
oFF.CustomHierarchyMemberElement.prototype = new oFF.CustomHierarchyElement();
oFF.CustomHierarchyMemberElement.prototype._ff_c = "CustomHierarchyMemberElement";

oFF.CustomHierarchyMemberElement.create = function(memberName)
{
	let node = new oFF.CustomHierarchyMemberElement();
	node.setName(memberName);
	return node;
};
oFF.CustomHierarchyMemberElement.prototype.cloneExt = function(flags)
{
	return oFF.CustomHierarchyMemberElement.create(this.getName());
};
oFF.CustomHierarchyMemberElement.prototype.isMemberElement = function()
{
	return true;
};
oFF.CustomHierarchyMemberElement.prototype.isNode = function()
{
	return false;
};

oFF.CustomHierarchyTextElement = function() {};
oFF.CustomHierarchyTextElement.prototype = new oFF.CustomHierarchyElement();
oFF.CustomHierarchyTextElement.prototype._ff_c = "CustomHierarchyTextElement";

oFF.CustomHierarchyTextElement.create = function(text)
{
	let node = new oFF.CustomHierarchyTextElement();
	node.setName(text);
	node.m_children = oFF.XList.create();
	return node;
};
oFF.CustomHierarchyTextElement.prototype.m_children = null;
oFF.CustomHierarchyTextElement.prototype.addMemberNode = function(memberName)
{
	let leaf = oFF.CustomHierarchyMemberElement.create(memberName);
	this.m_children.add(leaf);
	return leaf;
};
oFF.CustomHierarchyTextElement.prototype.addTextNode = function(text)
{
	let textNode = oFF.CustomHierarchyTextElement.create(text);
	this.m_children.add(textNode);
	return textNode;
};
oFF.CustomHierarchyTextElement.prototype.clearChildNodes = function()
{
	this.m_children.clear();
};
oFF.CustomHierarchyTextElement.prototype.cloneExt = function(flags)
{
	let textNode = oFF.CustomHierarchyTextElement.create(this.getName());
	oFF.XCollectionUtils.addAllClones(textNode.m_children, this.m_children);
	return textNode;
};
oFF.CustomHierarchyTextElement.prototype.getChildNodes = function()
{
	return this.m_children;
};
oFF.CustomHierarchyTextElement.prototype.isEqualTo = function(other)
{
	return oFF.CustomHierarchyElement.prototype.isEqualTo.call( this , other) && this.m_children.isEqualTo(other.getChildNodes());
};
oFF.CustomHierarchyTextElement.prototype.isMemberElement = function()
{
	return false;
};
oFF.CustomHierarchyTextElement.prototype.isNode = function()
{
	return this.m_children.hasElements();
};
oFF.CustomHierarchyTextElement.prototype.releaseObject = function()
{
	oFF.CustomHierarchyElement.prototype.releaseObject.call( this );
	this.m_children = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_children);
};
oFF.CustomHierarchyTextElement.prototype.removeChildNode = function(childNode)
{
	this.m_children.removeElement(childNode);
};

oFF.QKeyRef = function() {};
oFF.QKeyRef.prototype = new oFF.DfNameObject();
oFF.QKeyRef.prototype._ff_c = "QKeyRef";

oFF.QKeyRef.create = function(storageName, groupName, objectName)
{
	let newObj = new oFF.QKeyRef();
	newObj.setupExt(storageName, groupName, objectName);
	return newObj;
};
oFF.QKeyRef.prototype.m_groupName = null;
oFF.QKeyRef.prototype.m_storageName = null;
oFF.QKeyRef.prototype.getStorageGroupName = function()
{
	return this.m_groupName;
};
oFF.QKeyRef.prototype.getStorageName = function()
{
	return this.m_storageName;
};
oFF.QKeyRef.prototype.getStorageObjectName = function()
{
	return this.m_name;
};
oFF.QKeyRef.prototype.setName = function(name)
{
	this.m_name = name;
};
oFF.QKeyRef.prototype.setStorageGroupName = function(groupName)
{
	this.m_groupName = groupName;
};
oFF.QKeyRef.prototype.setStorageName = function(storageName)
{
	this.m_storageName = storageName;
};
oFF.QKeyRef.prototype.setupExt = function(storageName, groupName, objectName)
{
	this._setupInternal(objectName);
	this.setStorageGroupName(groupName);
	this.m_storageName = storageName;
};
oFF.QKeyRef.prototype.setupExt2 = function(other)
{
	this._setupInternal(other.getStorageObjectName());
	this.setStorageGroupName(other.getStorageGroupName());
	this.m_storageName = other.getStorageName();
};

oFF.QKeyRefStorage = function() {};
oFF.QKeyRefStorage.prototype = new oFF.DfNameObject();
oFF.QKeyRefStorage.prototype._ff_c = "QKeyRefStorage";

oFF.QKeyRefStorage.create = function(name)
{
	let newObj = new oFF.QKeyRefStorage();
	newObj.setupExt(name);
	return newObj;
};
oFF.QKeyRefStorage.prototype.m_myStorage = null;
oFF.QKeyRefStorage.prototype.m_subStorages = null;
oFF.QKeyRefStorage.prototype.generateKeyName = function(groupName, objectName)
{
	return oFF.XStringUtils.concatenate2(this.getGroupNamePrefix(groupName), objectName);
};
oFF.QKeyRefStorage.prototype.generateKeyNameFromKeyRef = function(object)
{
	return oFF.XStringUtils.concatenate3(object.getStorageGroupName(), "~", object.getStorageObjectName());
};
oFF.QKeyRefStorage.prototype.get = function(storageName, groupName, objectName)
{
	let returnObject = null;
	if (oFF.XString.isEqual(storageName, this.getName()))
	{
		returnObject = this.getLocal(groupName, objectName);
	}
	else if (oFF.notNull(storageName))
	{
		let selectedStorage = this.m_subStorages.getByKey(storageName);
		if (oFF.notNull(selectedStorage))
		{
			returnObject = selectedStorage.get(storageName, groupName, objectName);
		}
		else
		{
			let storageIterator = this.m_subStorages.getIterator();
			while (storageIterator.hasNext())
			{
				let storage = storageIterator.next();
				returnObject = storage.get(storageName, groupName, objectName);
				if (oFF.notNull(returnObject))
				{
					return returnObject;
				}
			}
		}
	}
	return returnObject;
};
oFF.QKeyRefStorage.prototype.getAllSubStores = function()
{
	return this.m_subStorages.getValuesAsReadOnlyList();
};
oFF.QKeyRefStorage.prototype.getGroupNamePrefix = function(groupName)
{
	return oFF.XStringUtils.concatenate2(groupName, "~");
};
oFF.QKeyRefStorage.prototype.getLocal = function(groupName, objectName)
{
	let key = this.generateKeyName(groupName, objectName);
	return this.m_myStorage.getByKey(key);
};
oFF.QKeyRefStorage.prototype.getObjectsByGroup = function(storageName, groupName)
{
	if (oFF.XString.isEqual(storageName, this.getName()))
	{
		let keyRefsIter = this.m_myStorage.getValuesAsReadOnlyList().getIterator();
		let matchingObjects = oFF.XList.create();
		while (keyRefsIter.hasNext())
		{
			let keyRef = keyRefsIter.next();
			if (oFF.XString.isEqual(keyRef.getStorageGroupName(), groupName))
			{
				matchingObjects.add(keyRef);
			}
		}
		return matchingObjects;
	}
	let subStore = this.getSubStore(storageName);
	if (oFF.notNull(subStore))
	{
		return subStore.getObjectsByGroup(storageName, groupName);
	}
	return oFF.XList.create();
};
oFF.QKeyRefStorage.prototype.getSubStore = function(storageName)
{
	return this.m_subStorages.getByKey(storageName);
};
oFF.QKeyRefStorage.prototype.put = function(object)
{
	let key = this.generateKeyNameFromKeyRef(object);
	this.m_myStorage.put(key, object);
};
oFF.QKeyRefStorage.prototype.putExt = function(object, groupName, objectName)
{
	let baseObj = object;
	baseObj.setStorageGroupName(groupName);
	baseObj.setName(objectName);
	this.put(baseObj);
};
oFF.QKeyRefStorage.prototype.removeObject = function(storageName, groupName, objectName, releaseObject)
{
	if (oFF.XString.isEqual(storageName, this.getName()))
	{
		let keyRefObject = this.get(storageName, groupName, objectName);
		if (oFF.notNull(keyRefObject))
		{
			this.m_myStorage.remove(this.generateKeyName(groupName, objectName));
			if (releaseObject)
			{
				oFF.XObjectExt.release(keyRefObject);
			}
		}
	}
	else
	{
		let selectedStorage = this.m_subStorages.getByKey(storageName);
		if (oFF.notNull(selectedStorage))
		{
			selectedStorage.removeObject(storageName, groupName, objectName, releaseObject);
		}
	}
};
oFF.QKeyRefStorage.prototype.removeObjectsByGroup = function(storageName, groupName, releaseObjects)
{
	if (oFF.XString.isEqual(storageName, this.getName()))
	{
		let keysIter = this.m_myStorage.getKeysAsIterator();
		while (keysIter.hasNext())
		{
			let key = keysIter.next();
			let groupNamePrefix = this.getGroupNamePrefix(groupName);
			if (oFF.XString.startsWith(key, groupNamePrefix))
			{
				this.removeObject(storageName, groupName, oFF.XString.substring(key, oFF.XString.size(groupNamePrefix), oFF.XString.size(key)), releaseObjects);
			}
		}
	}
	else
	{
		let selectedStorage = this.m_subStorages.getByKey(storageName);
		if (oFF.notNull(selectedStorage))
		{
			selectedStorage.removeObjectsByGroup(storageName, groupName, releaseObjects);
		}
	}
};
oFF.QKeyRefStorage.prototype.removeObjectsByStorage = function(storageName, releaseObjects)
{
	if (oFF.XString.isEqual(storageName, this.getName()))
	{
		if (releaseObjects)
		{
			oFF.XCollectionUtils.releaseEntriesFromCollection(this.m_myStorage);
		}
		this.m_myStorage.clear();
	}
	else
	{
		let selectedStorage = this.m_subStorages.getByKey(storageName);
		if (oFF.notNull(selectedStorage))
		{
			selectedStorage.removeObjectsByStorage(storageName, releaseObjects);
		}
	}
};
oFF.QKeyRefStorage.prototype.removeSubKeyRefStore = function(storageName, releaseObjectsInStorage)
{
	let subStore = this.getSubStore(storageName);
	if (oFF.notNull(subStore))
	{
		if (releaseObjectsInStorage)
		{
			this.removeObjectsByStorage(storageName, true);
		}
		this.m_subStorages.remove(storageName);
		oFF.XObjectExt.release(subStore);
	}
};
oFF.QKeyRefStorage.prototype.setSubKefRefStore = function(storage)
{
	this.m_subStorages.put(storage.getName(), storage);
	let allSubStores = storage.getAllSubStores();
	for (let i = 0; i < allSubStores.size(); i++)
	{
		this.setSubKefRefStore(allSubStores.get(i));
	}
};
oFF.QKeyRefStorage.prototype.setupExt = function(name)
{
	this._setupInternal(name);
	this.m_myStorage = oFF.XHashMapByString.create();
	this.m_subStorages = oFF.XHashMapByString.create();
};

oFF.QCacheKey = function() {};
oFF.QCacheKey.prototype = new oFF.DfNameObject();
oFF.QCacheKey.prototype._ff_c = "QCacheKey";

oFF.QCacheKey.KEY_LIGHTWEIGHT = "Lightweight";
oFF.QCacheKey._createByContextAndDataSource = function(context, key1, key2, dimensionGroupNames, dataSource)
{
	let dataSourceHashKey = dataSource.getCacheKeyName();
	let queryManager = context.getQueryManager();
	let providerType = null;
	let systemName = context.getSystemName();
	if (oFF.notNull(queryManager))
	{
		providerType = queryManager.getInitSettings().getProviderType();
	}
	return oFF.QCacheKey.createExt(context, systemName, dataSourceHashKey, providerType, key1, key2, dataSource.getValidationHash(), dimensionGroupNames);
};
oFF.QCacheKey.createByContext = function(context)
{
	let retObj = null;
	let dataSource = context.getDataSource();
	if (oFF.notNull(dataSource) && dataSource.getType() !== null)
	{
		retObj = oFF.QCacheKey._createByContextAndDataSource(context, null, null, null, dataSource);
	}
	return retObj;
};
oFF.QCacheKey.createByContextForDimension = function(context, dimensionName, dimensionGroupNames)
{
	let cacheKey = null;
	let dataSource = context.getDataSource();
	if (oFF.notNull(dataSource))
	{
		cacheKey = oFF.QCacheKey._createByContextAndDataSource(context, dimensionName, null, dimensionGroupNames, dataSource);
	}
	return cacheKey;
};
oFF.QCacheKey.createByContextForField = function(context, fieldName, dimensionName)
{
	let cacheKey = null;
	let dataSource = context.getDataSource();
	if (oFF.notNull(dataSource))
	{
		cacheKey = oFF.QCacheKey._createByContextAndDataSource(context, fieldName, dimensionName, null, dataSource);
	}
	return cacheKey;
};
oFF.QCacheKey.createCopyExt = function(origin, key1, key2, dimensionGroupNames)
{
	return oFF.QCacheKey.createExt(null, origin.getSystemName(), origin.getDataSourceHashKey(), origin.getProviderType(), key1, key2, origin.getValidationHash(), dimensionGroupNames);
};
oFF.QCacheKey.createCopyWithKey2 = function(origin, key2)
{
	return oFF.QCacheKey.createExt(null, origin.getSystemName(), origin.getDataSourceHashKey(), origin.getProviderType(), origin.getKey1(), key2, origin.getValidationHash(), origin.getDimensionGroupNames());
};
oFF.QCacheKey.createExt = function(context, systemName, dataSourceHashKey, providerType, key1, key2, validationHash, dimensionGroupNames)
{
	let newObj = new oFF.QCacheKey();
	newObj.setupExt(context, systemName, dataSourceHashKey, providerType, key1, key2, validationHash, dimensionGroupNames);
	return newObj;
};
oFF.QCacheKey.prototype.m_cubeSpecificKey = null;
oFF.QCacheKey.prototype.m_dataSourceHashKey = null;
oFF.QCacheKey.prototype.m_dimensionGroupNames = null;
oFF.QCacheKey.prototype.m_key1 = null;
oFF.QCacheKey.prototype.m_key2 = null;
oFF.QCacheKey.prototype.m_providerType = null;
oFF.QCacheKey.prototype.m_systemName = null;
oFF.QCacheKey.prototype.m_systemSpecificKey = null;
oFF.QCacheKey.prototype.m_validationHash = null;
oFF.QCacheKey.prototype.addSeparatorAndAppend = function(keyBuffer, value)
{
	if (keyBuffer.length() > 0)
	{
		keyBuffer.append("~");
	}
	keyBuffer.append(value);
};
oFF.QCacheKey.prototype.cloneExt = function(flags)
{
	return oFF.QCacheKey.createExt(null, this.getSystemName(), this.getDataSourceHashKey(), this.getProviderType(), this.getKey1(), this.getKey2(), this.getValidationHash(), this.getDimensionGroupNames());
};
oFF.QCacheKey.prototype.getCubeSpecificKey = function()
{
	return this.m_cubeSpecificKey;
};
oFF.QCacheKey.prototype.getDataSourceHashKey = function()
{
	return this.m_dataSourceHashKey;
};
oFF.QCacheKey.prototype.getDimensionGroupNames = function()
{
	return this.m_dimensionGroupNames;
};
oFF.QCacheKey.prototype.getKey1 = function()
{
	return this.m_key1;
};
oFF.QCacheKey.prototype.getKey2 = function()
{
	return this.m_key2;
};
oFF.QCacheKey.prototype.getProviderType = function()
{
	return this.m_providerType;
};
oFF.QCacheKey.prototype.getSystemName = function()
{
	return this.m_systemName;
};
oFF.QCacheKey.prototype.getSystemSpecificKey = function()
{
	return this.m_systemSpecificKey;
};
oFF.QCacheKey.prototype.getValidationHash = function()
{
	return this.m_validationHash;
};
oFF.QCacheKey.prototype.isSameDataSourceAsContext = function(context)
{
	let retValue = false;
	let datasource = context.getDataSource();
	if (oFF.notNull(datasource))
	{
		let systemName = datasource.getSystemName();
		if (oFF.XStringUtils.isNullOrEmpty(systemName) && context.getQueryManager() !== null)
		{
			systemName = context.getQueryManager().getSystemName();
		}
		retValue = oFF.XString.isEqual(this.getSystemName(), systemName) && oFF.XString.isEqual(this.getDataSourceHashKey(), datasource.getCacheKeyName());
	}
	return retValue;
};
oFF.QCacheKey.prototype.releaseObject = function()
{
	this.m_systemName = null;
	this.m_dataSourceHashKey = null;
	this.m_systemSpecificKey = null;
	this.m_cubeSpecificKey = null;
	this.m_validationHash = null;
	this.m_key1 = null;
	this.m_key2 = null;
	this.m_providerType = null;
	oFF.DfNameObject.prototype.releaseObject.call( this );
};
oFF.QCacheKey.prototype.setupExt = function(context, systemName, dataSourceHashKey, providerType, key1, key2, validationHash, dimensionGroupNames)
{
	this.m_validationHash = validationHash;
	this.m_providerType = providerType;
	this.m_key1 = key1;
	this.m_key2 = key2;
	this.m_dataSourceHashKey = dataSourceHashKey;
	this.m_systemName = systemName;
	this.m_dimensionGroupNames = dimensionGroupNames;
	if (oFF.notNull(context) && oFF.isNull(systemName))
	{
		this.m_systemName = context.getSystemName();
	}
	let keyBuffer = oFF.XStringBuffer.create();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_key1))
	{
		keyBuffer.append(this.m_key1);
	}
	if (oFF.notNull(this.m_providerType))
	{
		this.addSeparatorAndAppend(keyBuffer, this.m_providerType.getName());
	}
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_key2))
	{
		this.addSeparatorAndAppend(keyBuffer, this.m_key2);
	}
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_validationHash))
	{
		this.addSeparatorAndAppend(keyBuffer, this.m_validationHash);
	}
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_dimensionGroupNames))
	{
		this.addSeparatorAndAppend(keyBuffer, this.m_dimensionGroupNames);
	}
	if (oFF.notNull(context) && context.getQueryManager() !== null)
	{
		let queryManager = context.getQueryManager();
		if (queryManager.getInitSettings().isLightweight())
		{
			this.addSeparatorAndAppend(keyBuffer, oFF.QCacheKey.KEY_LIGHTWEIGHT);
		}
		let requiredDimensions = queryManager.getInitSettings().getRequiredDimensions();
		if (oFF.XCollectionUtils.hasElements(requiredDimensions))
		{
			let requiredDimensionsString = oFF.XCollectionUtils.join(requiredDimensions, ",");
			this.addSeparatorAndAppend(keyBuffer, requiredDimensionsString);
		}
	}
	this.m_cubeSpecificKey = keyBuffer.toString();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_dataSourceHashKey))
	{
		this.m_systemSpecificKey = oFF.XStringUtils.concatenate3(this.m_dataSourceHashKey, "~", this.m_cubeSpecificKey);
	}
	else
	{
		this.m_systemSpecificKey = this.m_cubeSpecificKey;
	}
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_systemName))
	{
		this._setupInternal(oFF.XStringUtils.concatenate3(this.m_systemName, "~", this.m_systemSpecificKey));
	}
	else
	{
		this._setupInternal(this.m_systemSpecificKey);
	}
};

oFF.QDatasetEpmObject = function() {};
oFF.QDatasetEpmObject.prototype = new oFF.DfNameObject();
oFF.QDatasetEpmObject.prototype._ff_c = "QDatasetEpmObject";

oFF.QDatasetEpmObject.CUBE = "CUBE";
oFF.QDatasetEpmObject.DATASET_ID_INTEGRATED_MODE_SCHEMA_NAME = "_SYS_BIC";
oFF.QDatasetEpmObject.DATASET_ID_MODEL_TYPE_PLANNING = "planning";
oFF.QDatasetEpmObject.DATASET_ID_MODEL_TYPE_VIEW = "view";
oFF.QDatasetEpmObject.INTEGRATED = "integrated";
oFF.QDatasetEpmObject.create = function(mode, epmModelName, epmQuerySourceName, schemaName, packageName, name, shortDescription, displayName, description, isEmbedded, isRemote)
{
	let datasetEpmObject = new oFF.QDatasetEpmObject();
	datasetEpmObject.setupExt(mode, epmModelName, epmQuerySourceName, schemaName, packageName, name, shortDescription, displayName, description, isEmbedded, isRemote);
	return datasetEpmObject;
};
oFF.QDatasetEpmObject.prototype.m_cubeId = null;
oFF.QDatasetEpmObject.prototype.m_datasetId = null;
oFF.QDatasetEpmObject.prototype.m_description = null;
oFF.QDatasetEpmObject.prototype.m_displayName = null;
oFF.QDatasetEpmObject.prototype.m_epmModelName = null;
oFF.QDatasetEpmObject.prototype.m_epmQuerySourceName = null;
oFF.QDatasetEpmObject.prototype.m_isEmbedded = false;
oFF.QDatasetEpmObject.prototype.m_isIntegratedMode = false;
oFF.QDatasetEpmObject.prototype.m_isPlanning = false;
oFF.QDatasetEpmObject.prototype.m_isRemote = false;
oFF.QDatasetEpmObject.prototype.m_mode = null;
oFF.QDatasetEpmObject.prototype.m_packageName = null;
oFF.QDatasetEpmObject.prototype.m_schemaName = null;
oFF.QDatasetEpmObject.prototype.m_shortDescription = null;
oFF.QDatasetEpmObject.prototype.cloneExt = function(flags)
{
	return oFF.QDatasetEpmObject.create(this.m_mode, this.m_epmModelName, this.m_epmQuerySourceName, this.m_schemaName, this.m_packageName, this.m_name, this.m_shortDescription, this.m_displayName, this.m_description, this.m_isEmbedded, this.m_isRemote);
};
oFF.QDatasetEpmObject.prototype.createDatasetAndCubeId = function()
{
	this.m_isIntegratedMode = oFF.XString.isEqual(this.m_mode, oFF.QDatasetEpmObject.INTEGRATED);
	let querySource = this.m_epmQuerySourceName;
	let schemaName = this.m_schemaName;
	let packageName = this.m_packageName;
	let objectName = this.m_name;
	let modelType;
	if (this.m_isIntegratedMode)
	{
		schemaName = oFF.QDatasetEpmObject.DATASET_ID_INTEGRATED_MODE_SCHEMA_NAME;
		querySource = objectName;
		modelType = oFF.QDatasetEpmObject.DATASET_ID_MODEL_TYPE_VIEW;
		this.m_isPlanning = false;
	}
	else
	{
		modelType = oFF.QDatasetEpmObject.DATASET_ID_MODEL_TYPE_PLANNING;
		packageName = "";
		this.m_isPlanning = true;
	}
	schemaName = oFF.XStringUtils.concatenate3("[", schemaName, "]");
	packageName = oFF.XStringUtils.concatenate3("[", packageName, "]");
	querySource = oFF.XStringUtils.concatenate3("[", querySource, "]");
	this.m_datasetId = oFF.XStringUtils.concatenate5(modelType, ":", schemaName, packageName, querySource);
	let cubeType = null;
	let cubeDatasourceName = null;
	let cubePackageName = null;
	let dataSource = oFF.QFactory.newDataSourceWithFqn(this.m_datasetId);
	let dataSourceType = dataSource.getType();
	if (oFF.MetaObjectType.DBVIEW === dataSourceType || oFF.MetaObjectType.QUERY === dataSourceType)
	{
		cubeType = oFF.QDatasetEpmObject.CUBE;
		cubeDatasourceName = dataSource.getName();
		cubePackageName = dataSource.getPackageName();
	}
	else if (oFF.MetaObjectType.PLANNING === dataSourceType)
	{
		cubeType = oFF.QDatasetEpmObject.CUBE;
		cubeDatasourceName = this.m_name;
		cubePackageName = this.m_packageName;
	}
	if (oFF.XStringUtils.isNotNullAndNotEmpty(cubeType) && oFF.XStringUtils.isNotNullAndNotEmpty(cubePackageName) && oFF.XStringUtils.isNotNullAndNotEmpty(cubeDatasourceName))
	{
		this.m_cubeId = oFF.XStringUtils.concatenate5(cubeType, ":", cubePackageName, ":", cubeDatasourceName);
	}
};
oFF.QDatasetEpmObject.prototype.getCubeId = function()
{
	return this.m_cubeId;
};
oFF.QDatasetEpmObject.prototype.getDatasetId = function()
{
	return this.m_datasetId;
};
oFF.QDatasetEpmObject.prototype.getDatasetShortDescriptionOrName = function()
{
	return this.getShortDescriptionOrName();
};
oFF.QDatasetEpmObject.prototype.getDatasetUIName = function()
{
	return this.getUIName();
};
oFF.QDatasetEpmObject.prototype.getDescription = function()
{
	return this.m_description;
};
oFF.QDatasetEpmObject.prototype.getDisplayName = function()
{
	return this.m_displayName;
};
oFF.QDatasetEpmObject.prototype.getEpmModelName = function()
{
	return this.m_epmModelName;
};
oFF.QDatasetEpmObject.prototype.getEpmQuerySourceName = function()
{
	return this.m_epmQuerySourceName;
};
oFF.QDatasetEpmObject.prototype.getIsEmbedded = function()
{
	return this.m_isEmbedded;
};
oFF.QDatasetEpmObject.prototype.getIsRemote = function()
{
	return this.m_isRemote;
};
oFF.QDatasetEpmObject.prototype.getMode = function()
{
	return this.m_mode;
};
oFF.QDatasetEpmObject.prototype.getPackageName = function()
{
	return this.m_packageName;
};
oFF.QDatasetEpmObject.prototype.getSchemaName = function()
{
	return this.m_schemaName;
};
oFF.QDatasetEpmObject.prototype.getShortDescription = function()
{
	return this.m_shortDescription;
};
oFF.QDatasetEpmObject.prototype.getShortDescriptionOrName = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.m_shortDescription) ? this.m_shortDescription : this.m_name;
};
oFF.QDatasetEpmObject.prototype.getUIName = function()
{
	if (this.m_isIntegratedMode && this.m_isEmbedded && this.m_isRemote && !this.m_isPlanning)
	{
		return this.m_description;
	}
	else
	{
		return oFF.XStringUtils.isNotNullAndNotEmpty(this.m_shortDescription) ? this.m_shortDescription : oFF.XStringUtils.isNotNullAndNotEmpty(this.m_displayName) ? this.m_displayName : this.m_description;
	}
};
oFF.QDatasetEpmObject.prototype.releaseObject = function()
{
	this.m_mode = null;
	this.m_epmQuerySourceName = null;
	this.m_schemaName = null;
	this.m_packageName = null;
	this.m_shortDescription = null;
	this.m_displayName = null;
	this.m_description = null;
	this.m_datasetId = null;
	this.m_cubeId = null;
	oFF.DfNameObject.prototype.releaseObject.call( this );
};
oFF.QDatasetEpmObject.prototype.setupExt = function(mode, epmModleName, epmQuerySourceName, schemaName, packageName, name, shortDescription, displayName, description, isEmbedded, isRemote)
{
	this._setupInternal(name);
	this.m_mode = mode;
	this.m_epmModelName = epmModleName;
	this.m_epmQuerySourceName = epmQuerySourceName;
	this.m_schemaName = schemaName;
	this.m_packageName = packageName;
	this.m_shortDescription = shortDescription;
	this.m_displayName = displayName;
	this.m_description = description;
	this.m_isEmbedded = isEmbedded;
	this.m_isRemote = isRemote;
	this.createDatasetAndCubeId();
};

oFF.QMetadata = function() {};
oFF.QMetadata.prototype = new oFF.DfNameObject();
oFF.QMetadata.prototype._ff_c = "QMetadata";

oFF.QMetadata.prototype.m_cacheKey = null;
oFF.QMetadata.prototype.getCacheKey = function()
{
	return this.m_cacheKey;
};
oFF.QMetadata.prototype.releaseObject = function()
{
	oFF.DfNameObject.prototype.releaseObject.call( this );
};
oFF.QMetadata.prototype.setupMetadata = function(cacheKey)
{
	this._setupInternal(cacheKey.getKey1());
	this.m_cacheKey = cacheKey;
};

oFF.QVisibilityTriplet = function() {};
oFF.QVisibilityTriplet.prototype = new oFF.DfNameObject();
oFF.QVisibilityTriplet.prototype._ff_c = "QVisibilityTriplet";

oFF.QVisibilityTriplet.create = function(alignment, element, visibility)
{
	let newObj = new oFF.QVisibilityTriplet();
	newObj.m_alignment = alignment;
	newObj.m_element = element;
	newObj.m_visibility = visibility;
	newObj._setupInternal(oFF.QVisibilityTriplet.getVisibilityKey(alignment, element));
	return newObj;
};
oFF.QVisibilityTriplet.getVisibilityKey = function(alignment, element)
{
	if (oFF.isNull(alignment) || oFF.isNull(element))
	{
		return null;
	}
	return oFF.XStringUtils.concatenate3(alignment.getName(), "-", element.getName());
};
oFF.QVisibilityTriplet.prototype.m_alignment = null;
oFF.QVisibilityTriplet.prototype.m_element = null;
oFF.QVisibilityTriplet.prototype.m_visibility = null;
oFF.QVisibilityTriplet.prototype.cloneExt = function(flags)
{
	return oFF.QVisibilityTriplet.create(this.m_alignment, this.m_element, this.m_visibility);
};
oFF.QVisibilityTriplet.prototype.getAlignment = function()
{
	return this.m_alignment;
};
oFF.QVisibilityTriplet.prototype.getElement = function()
{
	return this.m_element;
};
oFF.QVisibilityTriplet.prototype.getVisibility = function()
{
	return this.m_visibility;
};
oFF.QVisibilityTriplet.prototype.releaseObject = function()
{
	this.m_alignment = null;
	this.m_element = null;
	this.m_visibility = null;
	oFF.DfNameObject.prototype.releaseObject.call( this );
};
oFF.QVisibilityTriplet.prototype.setVisibility = function(visibility)
{
	this.m_visibility = visibility;
};
oFF.QVisibilityTriplet.prototype.toString = function()
{
	return oFF.XStringUtils.concatenate3(this.getName(), "-", this.m_visibility.getName());
};

oFF.QPersistedPlaceholderTagSelection = function() {};
oFF.QPersistedPlaceholderTagSelection.prototype = new oFF.QPersistedPlaceholderTag();
oFF.QPersistedPlaceholderTagSelection.prototype._ff_c = "QPersistedPlaceholderTagSelection";

oFF.QPersistedPlaceholderTagSelection.create = function(name, selectionPlaceholder, canonicalDateContext)
{
	let persistedPlaceholderTag = new oFF.QPersistedPlaceholderTagSelection();
	persistedPlaceholderTag.setupPersistedPlaceholderTagCalculation(name, selectionPlaceholder, canonicalDateContext);
	return persistedPlaceholderTag;
};
oFF.QPersistedPlaceholderTagSelection.createFromPlaceholderString = function(persistedPlaceholderStringTag)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(persistedPlaceholderStringTag))
	{
		let startDelimiter = 0;
		let endDelimiter = oFF.XString.indexOf(persistedPlaceholderStringTag, "|");
		let content = oFF.XString.substring(persistedPlaceholderStringTag, startDelimiter, endDelimiter);
		if (oFF.XString.isEqual(content, oFF.QPersistedPlaceholderTag.PERSISTED_QUERY_PLACEHOLDER))
		{
			startDelimiter = endDelimiter + 1;
			endDelimiter = oFF.XString.indexOfFrom(persistedPlaceholderStringTag, "|", startDelimiter);
			let name = oFF.XString.substring(persistedPlaceholderStringTag, startDelimiter, endDelimiter);
			let selectionPlaceholder = null;
			if (endDelimiter > -1)
			{
				startDelimiter = endDelimiter + 1;
				endDelimiter = oFF.XString.indexOfFrom(persistedPlaceholderStringTag, "|", startDelimiter);
				selectionPlaceholder = oFF.XString.substring(persistedPlaceholderStringTag, startDelimiter, endDelimiter);
			}
			let canonicalDateContext = null;
			if (endDelimiter > -1)
			{
				startDelimiter = endDelimiter + 1;
				endDelimiter = oFF.XString.indexOfFrom(persistedPlaceholderStringTag, "|", startDelimiter);
				canonicalDateContext = oFF.XString.substring(persistedPlaceholderStringTag, startDelimiter, endDelimiter);
			}
			return oFF.QFactory.createPersistedPlaceholderTagCalculation(name, selectionPlaceholder, canonicalDateContext);
		}
	}
	return null;
};
oFF.QPersistedPlaceholderTagSelection.prototype.m_selectionPlaceholder = null;
oFF.QPersistedPlaceholderTagSelection.prototype.getPlaceholderString = function()
{
	let tag = oFF.QPersistedPlaceholderTag.PERSISTED_QUERY_PLACEHOLDER;
	tag = oFF.XStringUtils.concatenate3(tag, "|", this.getName());
	if (oFF.XStringUtils.isNullOrEmpty(this.getSelectionPlaceholder()) && oFF.XStringUtils.isNullOrEmpty(this.getCanonicalDateContext()))
	{
		return tag;
	}
	tag = oFF.XStringUtils.concatenate3(tag, "|", this.getSelectionPlaceholder());
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.getCanonicalDateContext()))
	{
		tag = oFF.XStringUtils.concatenate3(tag, "|", this.getCanonicalDateContext());
	}
	return tag;
};
oFF.QPersistedPlaceholderTagSelection.prototype.getSelectionPlaceholder = function()
{
	return this.m_selectionPlaceholder;
};
oFF.QPersistedPlaceholderTagSelection.prototype.setSelectionPlaceholder = function(selectionPlaceholder)
{
	this.m_selectionPlaceholder = selectionPlaceholder;
};
oFF.QPersistedPlaceholderTagSelection.prototype.setupPersistedPlaceholderTagCalculation = function(name, selectionPlaceholder, canonicalDateContext)
{
	oFF.QPersistedPlaceholderTag.prototype.setupPersistedPlaceholderTag.call( this , name, canonicalDateContext);
	this.m_selectionPlaceholder = selectionPlaceholder;
};

oFF.QSortDimension = function() {};
oFF.QSortDimension.prototype = new oFF.DfNameObject();
oFF.QSortDimension.prototype._ff_c = "QSortDimension";

oFF.QSortDimension._createSortDimension = function(name, direction, nulls)
{
	let sortDimension = new oFF.QSortDimension();
	sortDimension.m_name = name;
	sortDimension.m_direction = direction;
	sortDimension.m_nulls = nulls;
	return sortDimension;
};
oFF.QSortDimension.prototype.m_direction = null;
oFF.QSortDimension.prototype.m_nulls = null;
oFF.QSortDimension.prototype.cloneExt = function(flags)
{
	let targetDimension = oFF.QSortDimension._createSortDimension(this.getName(), this.getDirection(), this.getNulls());
	return targetDimension;
};
oFF.QSortDimension.prototype.getDirection = function()
{
	return this.m_direction;
};
oFF.QSortDimension.prototype.getNulls = function()
{
	return this.m_nulls;
};
oFF.QSortDimension.prototype.releaseObject = function()
{
	this.m_direction = null;
	this.m_nulls = null;
	oFF.DfNameObject.prototype.releaseObject.call( this );
};
oFF.QSortDimension.prototype.setDirection = function(direction)
{
	this.m_direction = direction;
};
oFF.QSortDimension.prototype.setNulls = function(nulls)
{
	this.m_nulls = nulls;
};

oFF.QCmdSignature = function() {};
oFF.QCmdSignature.prototype = new oFF.XConstant();
oFF.QCmdSignature.prototype._ff_c = "QCmdSignature";

oFF.QCmdSignature.ACTIVATE_CONDITIONAL_ZERO_SUPPRESSION = "activateConditionalZeroSuppression";
oFF.QCmdSignature.ACTIVATE_HIERARCHY = "activateHierarchy";
oFF.QCmdSignature.ADD_ALL_DIMENSIONS = "addAllDimensions";
oFF.QCmdSignature.ADD_ALL_FIELDS_OF_DIMENSION_TO_MODEL_AREA = "addAllFieldsOfDimensionToModelArea";
oFF.QCmdSignature.ADD_ALL_FIELDS_TO_MODEL_AREA = "addAllFieldsToModelArea";
oFF.QCmdSignature.ADD_ATTRIBUTE_FIELD = "addAttributeField";
oFF.QCmdSignature.ADD_ATTRIBUTE_TO_RESULT_SET = "addAttributeToResultSet";
oFF.QCmdSignature.ADD_CONTAINS_GEOMETRY_FILTER = "addContainsGeometryFilter";
oFF.QCmdSignature.ADD_COVERS_GEOMETRY_FILTER = "addCoversGeometryFilter";
oFF.QCmdSignature.ADD_CROSSES_LINESTRING_FILTER = "addCrossesLinestringFilter";
oFF.QCmdSignature.ADD_DISJOINT_GEOMETRY_FILTER = "addDisjointGeometryFilter";
oFF.QCmdSignature.ADD_DOUBLE_FILTER_BY_FIELD = "addDoubleFilterByField";
oFF.QCmdSignature.ADD_DOUBLE_FILTER_BY_FIELD_NAME = "addDoubleFilterByFieldName";
oFF.QCmdSignature.ADD_FIELD = "addField";
oFF.QCmdSignature.ADD_FIELD_TO_RESULTSET_EXT = "addFieldToResultSetExt";
oFF.QCmdSignature.ADD_FILTER = "addFilter";
oFF.QCmdSignature.ADD_FILTER_BY_FIELD = "addFilterByField";
oFF.QCmdSignature.ADD_FILTER_BY_FIELD_AND_VALUE = "addFilterByFieldAndValue";
oFF.QCmdSignature.ADD_INTERSECTS_GEOMETRY_FILTER = "addIntersectsGeometryFilter";
oFF.QCmdSignature.ADD_INTERSECTS_RECT_FILTER = "addIntersectsRectFilter";
oFF.QCmdSignature.ADD_INTERVAL_FILTER_BY_VALUES = "addIntervalFilterByValues";
oFF.QCmdSignature.ADD_INT_FILTER_BY_FIELD = "addIntFilterByField";
oFF.QCmdSignature.ADD_INT_FILTER_BY_FIELD_NAME = "addIntFilterByFieldName";
oFF.QCmdSignature.ADD_LONG_FILTER_BY_FIELD = "addLongFilterByField";
oFF.QCmdSignature.ADD_LONG_FILTER_BY_FIELD_NAME = "addLongFilterByFieldName";
oFF.QCmdSignature.ADD_MEASURE = "addMeasure";
oFF.QCmdSignature.ADD_NEW_RESTRICTED_MEASURE = "addNewRestrictedMeasure";
oFF.QCmdSignature.ADD_NEW_RESTRICTED_MEASURE_ON_NODE = "addNewRestrictedMeasureOnNode";
oFF.QCmdSignature.ADD_OVERLAPS_GEOMETRY_FILTER = "addOverlapsGeometryFilter";
oFF.QCmdSignature.ADD_SINGLE_MEMBER_FILTER = "addSingleMemberFilter";
oFF.QCmdSignature.ADD_SINGLE_NODE_FILTER = "addSingleNodeFilter";
oFF.QCmdSignature.ADD_STRING_FILTER_BY_FIELD = "addStringFilterByField";
oFF.QCmdSignature.ADD_STRING_FILTER_BY_FIELD_NAME_AND_OPERATOR = "addStringFilterByFieldNameAndOperator";
oFF.QCmdSignature.ADD_STRING_FILTER_BY_NAME = "addStringFilterByName";
oFF.QCmdSignature.ADD_STRING_FILTER_BY_PRESENTATION = "addStringFilterByPresentation";
oFF.QCmdSignature.ADD_TOUCHES_GEOMETRY_FILTER = "addTouchesGeometryFilter";
oFF.QCmdSignature.ADD_WITHIN_DISTANCE_FILTER = "addWithinDistanceFilter";
oFF.QCmdSignature.ADD_WITHIN_GEOMETRY_FILTER = "addWithinGeometryFilter";
oFF.QCmdSignature.ALIGN_TOTALS = "alignTotals";
oFF.QCmdSignature.ALIGN_TOTALS_WITH_PRIORITY = "alignTotalsWithPriority";
oFF.QCmdSignature.ASSIGN_HIERARCHY = "assignHierarchy";
oFF.QCmdSignature.CLEAR_ALL_FIELDS_FROM_MODEL_AREA = "clearAllFieldsFromModelArea";
oFF.QCmdSignature.CLEAR_ALL_FILTERS_EXT = "clearAllFiltersExt";
oFF.QCmdSignature.CLEAR_ATTRIBUTES = "clearAttributes";
oFF.QCmdSignature.CLEAR_ATTRIBUTE_FIELDS = "clearAttributeFields";
oFF.QCmdSignature.CLEAR_AXIS = "clearAxis";
oFF.QCmdSignature.CLEAR_FIELDS = "clearFields";
oFF.QCmdSignature.CLEAR_FILTERS_BY_DIMENSION_EXT = "clearFiltersByDimensionExt";
oFF.QCmdSignature.CLEAR_FILTER_BY_ID_EXT = "clearFilterByIdExt";
oFF.QCmdSignature.CLEAR_NON_MAIN_FIELDS_FROM_RESULTSET = "clearNonMainFieldsFromResultSet";
oFF.QCmdSignature.CLEAR_SINGLE_MEMBER_FILTER_BY_NAME = "clearSingleMemberFilterByName";
oFF.QCmdSignature.CLEAR_SORT = "clearSort";
oFF.QCmdSignature.CONTAINS_FIELD = "containsField";
oFF.QCmdSignature.CONTAINS_RESULT_SET_FIELD_BY_TYPE = "containsResultSetFieldByType";
oFF.QCmdSignature.CONTAINS_SELECTOR_FIELD_BY_TYPE = "containsSelectorFieldByType";
oFF.QCmdSignature.DEACTIVATE_ALL_SERVER_CONDITIONS = "deactivateAllServerConditions";
oFF.QCmdSignature.DEACTIVATE_ALL_SERVER_EXCEPTIONS = "deactivateAllServerExceptions";
oFF.QCmdSignature.DEACTIVATE_HIERARCHY = "deactivateHierarchy";
oFF.QCmdSignature.EXECUTE_CODE = "executeCode";
oFF.QCmdSignature.GET_ABSTRACT_RENDERING = "getAbstractRendering";
oFF.QCmdSignature.GET_ASSIGNED_HIERARCHY = "getAssignedHierarchy";
oFF.QCmdSignature.GET_COMPONENT_TYPE = "getComponentType";
oFF.QCmdSignature.GET_DATA_SOURCE = "getDataSource";
oFF.QCmdSignature.GET_DIMENSION = "getDimension";
oFF.QCmdSignature.GET_DIMENSIONS_CONTAINING_VALUE_TYPE = "getDimensionsContainingValueType";
oFF.QCmdSignature.GET_DIMENSION_ACCESSOR = "getDimensionAccessor";
oFF.QCmdSignature.GET_DRILL_MANAGER = "getDrillManager";
oFF.QCmdSignature.GET_EXECUTE_REQUEST_ON_OLD_RESULT_SET = "getExecuteRequestOnOldResultSet";
oFF.QCmdSignature.GET_FIELD = "getField";
oFF.QCmdSignature.GET_FIELD_ACCESSOR_SINGLE = "getFieldAccessorSingle";
oFF.QCmdSignature.GET_FILTER_BY_ID = "getFilterById";
oFF.QCmdSignature.GET_FIRST_DIMENSION_WITH_TYPE = "getFirstDimensionWithType";
oFF.QCmdSignature.GET_FIRST_G_I_S_DIMENSION = "getFirstGISDimension";
oFF.QCmdSignature.GET_G_I_S_ATTRIBUTES_FOR_DIMENSION = "getGISAttributesForDimension";
oFF.QCmdSignature.GET_MAX_COLUMNS = "getMaxColumns";
oFF.QCmdSignature.GET_MAX_NUMBER_OF_DIMENSIONS_FOR_EXCEPTION_AGGREGATION = "getMaxNumberOfDimensionsForExceptionAggregation";
oFF.QCmdSignature.GET_MAX_RESULT_RECORDS = "getMaxResultRecords";
oFF.QCmdSignature.GET_MAX_ROWS = "getMaxRows";
oFF.QCmdSignature.GET_MEASURE = "getMeasure";
oFF.QCmdSignature.GET_MODEL_CAPABILITIES = "getModelCapabilities";
oFF.QCmdSignature.GET_OFFSET_COLUMNS = "getOffsetColumns";
oFF.QCmdSignature.GET_OFFSET_ROWS = "getOffsetRows";
oFF.QCmdSignature.GET_QUERY_MANAGER = "getQueryManager";
oFF.QCmdSignature.GET_QUERY_MODEL = "getQueryModel";
oFF.QCmdSignature.GET_QUERY_SERVICE_CONFIG = "getQueryServiceConfig";
oFF.QCmdSignature.GET_RECEIVER_BINDINGS = "getReceiverBindings";
oFF.QCmdSignature.GET_REFERENCE_GRID = "getReferenceGrid";
oFF.QCmdSignature.GET_RESULT_SET_PERSISTENCE_IDENTIFIER = "getResultSetPersistenceIdentifier";
oFF.QCmdSignature.GET_RESULT_SET_PERSISTENCE_SCHEMA = "getResultSetPersistenceSchema";
oFF.QCmdSignature.GET_RESULT_SET_PERSISTENCE_TABLE = "getResultSetPersistenceTable";
oFF.QCmdSignature.GET_SENDER_BINDINGS = "getSenderBindings";
oFF.QCmdSignature.GET_SUPPORTED_DIMENSIONS_FOR_EXCEPTION_AGGREGATION = "getSupportedDimensionsForExceptionAggregation";
oFF.QCmdSignature.GET_SUPPORTED_EXCEPTION_AGGREGATION_TYPES = "getSupportedExceptionAggregationTypes";
oFF.QCmdSignature.GET_VARIABLE = "getVariable";
oFF.QCmdSignature.GET_VARIABLES_NAME_AND_TEXT = "getVariablesNameAndText";
oFF.QCmdSignature.GET_VARIABLE_CONTAINER = "getVariableContainer";
oFF.QCmdSignature.GET_VISIBILITY_FILTER_BY_ID = "getVisibilityFilterById";
oFF.QCmdSignature.HAS_MORE_COLUMN_RECORDS_AVAILABLE = "hasMoreColumnRecordsAvailable";
oFF.QCmdSignature.HAS_MORE_ROW_RECORDS_AVAILABLE = "hasMoreRowRecordsAvailable";
oFF.QCmdSignature.INSERT_ATTRIBUTE_FIELD = "insertAttributeField";
oFF.QCmdSignature.INSERT_ATTRIBUTE_TO_RESULT_SET = "insertAttributeToResultSet";
oFF.QCmdSignature.INSERT_FIELD = "insertField";
oFF.QCmdSignature.IS_HIERARCHY_ACTIVE = "isHierarchyActive";
oFF.QCmdSignature.IS_HIERARCHY_ASSIGNED = "isHierarchyAssigned";
oFF.QCmdSignature.IS_RESULT_SET_TRANSPORT_ENABLED = "isResultSetTransportEnabled";
oFF.QCmdSignature.MOVE_DIMENSION_AFTER = "moveDimensionAfter";
oFF.QCmdSignature.MOVE_DIMENSION_BEFORE = "moveDimensionBefore";
oFF.QCmdSignature.MOVE_DIMENSION_EXT = "moveDimensionExt";
oFF.QCmdSignature.MOVE_SORT_TO_POSITION = "setSortToPosition";
oFF.QCmdSignature.NEW_RECEIVER_BINDING = "newReceiverBinding";
oFF.QCmdSignature.NEW_SENDER_BINDING = "newSenderBinding";
oFF.QCmdSignature.PROCESS_QUERY_EXECUTION = "processQueryExecution";
oFF.QCmdSignature.PROCESS_QUERY_MANAGER_CREATION = "processQueryManagerCreation";
oFF.QCmdSignature.REFRESH = "refresh";
oFF.QCmdSignature.REFRESH_FIELD_CONTAINER_DISPLAY_FOR_DIMENSION = "refreshFieldContainerDisplayForDimension";
oFF.QCmdSignature.REGISTER_CHANGED_LISTENER = "registerChangedListener";
oFF.QCmdSignature.REMOVE_ATTRIBUTE_FIELD = "removeAttributeField";
oFF.QCmdSignature.REMOVE_ATTRIBUTE_FROM_RESULT_SET = "removeAttributeFromResultSet";
oFF.QCmdSignature.REMOVE_FIELD = "removeField";
oFF.QCmdSignature.RESET = "reset";
oFF.QCmdSignature.RESET_FIELD_CONTAINER_KEY_VIEW_DEFAULT = "resetFieldContainerKeyViewDefault";
oFF.QCmdSignature.RESET_FIELD_CONTAINER_TEXT_VIEW_DEFAULT = "resetFieldContainerTextViewDefault";
oFF.QCmdSignature.RESET_MAX_RESULT_RECORDS = "resetMaxResultRecords";
oFF.QCmdSignature.RESET_PRESERVE_CUSTOM_MEMBERS = "resetPreserveCustomMembers";
oFF.QCmdSignature.RESET_PRESERVE_CUSTOM_MEMBERS_AND_CALC_DIMS = "resetPreserveCustomMembersAndCalcDims";
oFF.QCmdSignature.RESET_TO_DEFAULT = "resetToDefault";
oFF.QCmdSignature.RESET_WITH_OPTIONS = "resetWithOptions";
oFF.QCmdSignature.SET_AXIS_ZERO_SUPPRESSION_TYPE = "setAxisZeroSuppressionType";
oFF.QCmdSignature.SET_AXIS_ZERO_SUPPRESSION_TYPE_EXT = "setAxisZeroSuppressionTypeExt";
oFF.QCmdSignature.SET_CONDITION_ACTIVE = "setConditionActive";
oFF.QCmdSignature.SET_DIMENSIONS_AND_MEASURES = "setDimensionsAndMeasures";
oFF.QCmdSignature.SET_DIMENSION_AND_MEASURE = "setDimensionAndMeasure";
oFF.QCmdSignature.SET_DIMENSION_CUSTOM_HIERARCHY = "setDimensionCustomHierarchy";
oFF.QCmdSignature.SET_DIMENSION_HIERARCHY = "setDimensionHierarchy";
oFF.QCmdSignature.SET_DIMENSION_HIERARCHY_DRILL_LEVEL = "setDimensionHierarchyDrillLevel";
oFF.QCmdSignature.SET_DIMENSION_HIERARCHY_HAS_NODE_CONDENSATION = "setDimensionHierarchyHasNodeCondensation";
oFF.QCmdSignature.SET_DIMENSION_HIERARCHY_LOWER_LEVEL_NODE_ALIGMENT = "setDimensionHierarchyLowerLevelNodeAlignment";
oFF.QCmdSignature.SET_DIMENSION_HIERARCHY_MEMBER_OF_POSTED_NODE_VISIBILITY = "setDimensionHierarchyMemberOfPostedNodeVisibility";
oFF.QCmdSignature.SET_DIMENSION_MEMBER_READMODE_GRACEFUL = "setDimensionMemberReadModeGraceful";
oFF.QCmdSignature.SET_DIMENSION_MEMBER_READMODE_GRACEFUL_EXT = "setDimensionMemberReadModeGracefulExt";
oFF.QCmdSignature.SET_EXCEPTION_ACTIVE = "setExceptionActive";
oFF.QCmdSignature.SET_EXECUTE_REQUEST_ON_OLD_RESULT_SET = "setExecuteRequestOnOldResultSet";
oFF.QCmdSignature.SET_FIELD = "setField";
oFF.QCmdSignature.SET_FIELD_CONTAINER_DISPLAY = "setFieldContainerDisplay";
oFF.QCmdSignature.SET_FIELD_CONTAINER_KEY_DISPLAY = "setFieldContainerKeyDisplay";
oFF.QCmdSignature.SET_FIELD_CONTAINER_KEY_VIEW = "setFieldContainerKeyView";
oFF.QCmdSignature.SET_FIELD_CONTAINER_TEXT_VIEW = "setFieldContainerTextView";
oFF.QCmdSignature.SET_MAX_COLUMNS = "setMaxColumns";
oFF.QCmdSignature.SET_MAX_RESULT_RECORDS = "setMaxResultRecords";
oFF.QCmdSignature.SET_MAX_ROWS = "setMaxRows";
oFF.QCmdSignature.SET_OFFSET_COLUMNS = "setOffsetColumns";
oFF.QCmdSignature.SET_OFFSET_ROWS = "setOffsetRows";
oFF.QCmdSignature.SET_RESULT_SET_PERSISTANCE_IDENTIFIER = "setResultSetPersistanceIdentifier";
oFF.QCmdSignature.SET_RESULT_SET_PERSISTANCE_TARGET_SCHEMA = "setResultSetPersistanceTargetSchema";
oFF.QCmdSignature.SET_RESULT_SET_PERSISTANCE_TARGET_TABLE = "setResultSetPersistanceTargetTable";
oFF.QCmdSignature.SET_RESULT_SET_TRANSPORT_ENABLED = "setResultSetTransportEnabled";
oFF.QCmdSignature.SET_SEARCH_TERM = "setSearchTerm";
oFF.QCmdSignature.SET_TOTALS_VISIBLE = "setTotalsVisible";
oFF.QCmdSignature.SET_TOTALS_VISIBLE_BY_ELEMENT = "setTotalsVisibleByElement";
oFF.QCmdSignature.SET_UNIVERSAL_DISPLAY_HIERARCHY = "setUniversalDisplayHierarchy";
oFF.QCmdSignature.SET_VARIABLE = "setVariable";
oFF.QCmdSignature.SORT = "sort";
oFF.QCmdSignature.SORT_BY_QUERY_DATA_CELL = "sortByQueryDataCell";
oFF.QCmdSignature.SUBMIT_VARIABLES = "submitVariables";
oFF.QCmdSignature.SWAP_DIMENSIONS = "swapDimensions";
oFF.QCmdSignature.SWITCH_AXES = "switchAxes";
oFF.QCmdSignature.SWITCH_AXES_EXT = "switchAxesExt";
oFF.QCmdSignature.UNASSIGN_HIERARCHY = "unassignHierarchy";
oFF.QCmdSignature.UNREGISTER_CHANGED_LISTENER = "unregisterChangedListener";
oFF.QCmdSignature.s_signature = null;
oFF.QCmdSignature.lookupSignature = function(name)
{
	return oFF.QCmdSignature.s_signature.getByKey(name);
};
oFF.QCmdSignature.staticSetup = function()
{
	oFF.QCmdSignature.s_signature = oFF.XHashMapByString.create();
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_ALL_FIELDS_OF_DIMENSION_TO_MODEL_AREA, "String,#QContextType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_ALL_FIELDS_TO_MODEL_AREA, "#QContextType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_ATTRIBUTE_FIELD, "#DimensionType,String,String,#PresentationType,String,#QContextType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_ATTRIBUTE_TO_RESULT_SET, "String,String");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_CONTAINS_GEOMETRY_FILTER, "#IQDimension,String,IXGeometry");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_COVERS_GEOMETRY_FILTER, "#IQDimension,String,IXGeometry");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_CROSSES_LINESTRING_FILTER, "#IQDimension,String,IXGeometry");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_DISJOINT_GEOMETRY_FILTER, "#IQDimension,String,IXGeometry");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_DOUBLE_FILTER_BY_FIELD, "#IQField,double,#ComparisonOperator");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_DOUBLE_FILTER_BY_FIELD_NAME, "String,String,double,#ComparisonOperator");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_FIELD_TO_RESULTSET_EXT, "#DimensionType,String,#PresentationType,String");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_FIELD, "#DimensionType,String,#PresentationType,String,#QContextType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_FILTER, "#FilterLayer,#DimensionType,String,#PresentationType,String,String,String,#ComparisonOperator");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_FILTER_BY_FIELD, "#IQField,IXValue,IXValue,IXValue,#ComparisonOperator,boolean");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_FILTER_BY_FIELD_AND_VALUE, "#IQField,IXValue,#ComparisonOperator");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_INT_FILTER_BY_FIELD, "#IQField,int,#ComparisonOperator");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_INT_FILTER_BY_FIELD_NAME, "String,String,int,#ComparisonOperator");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_INTERSECTS_GEOMETRY_FILTER, "#IQDimension,String,IXGeometry");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_INTERSECTS_RECT_FILTER, "#IQDimension,String,IXPoint,IXPoint");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_INTERVAL_FILTER_BY_VALUES, "String,IXValue,IXValue");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_LONG_FILTER_BY_FIELD, "#IQField,long,#ComparisonOperator");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_LONG_FILTER_BY_FIELD_NAME, "String,String,long,#ComparisonOperator");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_MEASURE, "String");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_NEW_RESTRICTED_MEASURE, "#DimensionType,String,String,String,String,String");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_NEW_RESTRICTED_MEASURE_ON_NODE, "#DimensionType,String,String,String,String,String,String");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_OVERLAPS_GEOMETRY_FILTER, "#IQDimension,String,IXGeometry");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_SINGLE_MEMBER_FILTER, "#FilterLayer,#DimensionType,String,String,#ComparisonOperator");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_SINGLE_NODE_FILTER, "#IQNode,#ComparisonOperator");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_STRING_FILTER_BY_FIELD, "#IQField,String,#ComparisonOperator");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_STRING_FILTER_BY_FIELD_NAME_AND_OPERATOR, "String,String,String,#ComparisonOperator");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_STRING_FILTER_BY_NAME, "String,String,String,#ComparisonOperator");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_STRING_FILTER_BY_PRESENTATION, "String,#PresentationType,String,#ComparisonOperator");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_TOUCHES_GEOMETRY_FILTER, "#IQDimension,String,IXGeometry");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_WITHIN_DISTANCE_FILTER, "#IQDimension,String,IXPoint,double,String");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ADD_WITHIN_GEOMETRY_FILTER, "#IQDimension,String,IXGeometry");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ALIGN_TOTALS, "#QModelLevel,String,#ResultAlignment");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.ALIGN_TOTALS_WITH_PRIORITY, "#QModelLevel,String,#ResultAlignment,int");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.CLEAR_ALL_FIELDS_FROM_MODEL_AREA, "#QContextType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.CLEAR_ALL_FILTERS_EXT, "#FilterLayer,#FilterScopeVariables");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.CLEAR_ATTRIBUTE_FIELDS, "#DimensionType,String,String,#QContextType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.CLEAR_ATTRIBUTES, "#DimensionType,String,#QContextType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.CLEAR_AXIS, "#AxisType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.CLEAR_FIELDS, "#DimensionType,String,#QContextType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.CLEAR_FILTER_BY_ID_EXT, "#FilterLayer,String");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.CLEAR_FILTERS_BY_DIMENSION_EXT, "#FilterLayer,#DimensionType,String");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.CLEAR_NON_MAIN_FIELDS_FROM_RESULTSET, "#DimensionType,String");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.CLEAR_SINGLE_MEMBER_FILTER_BY_NAME, "String,String,#ComparisonOperator");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.CLEAR_SORT, "#SortType,String");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.CONTAINS_FIELD, "String,String,#QContextType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.CONTAINS_RESULT_SET_FIELD_BY_TYPE, "String,#PresentationType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.CONTAINS_SELECTOR_FIELD_BY_TYPE, "String,#PresentationType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.DEACTIVATE_ALL_SERVER_CONDITIONS, "");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.DEACTIVATE_ALL_SERVER_EXCEPTIONS, "");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.EXECUTE_CODE, "IPrStructure");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.GET_ABSTRACT_RENDERING, "#SemanticBindingType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.GET_DIMENSION, "String");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.GET_DIMENSIONS_CONTAINING_VALUE_TYPE, "#XValueType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.GET_SUPPORTED_EXCEPTION_AGGREGATION_TYPES, "#MemberType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.GET_SUPPORTED_DIMENSIONS_FOR_EXCEPTION_AGGREGATION, "#MemberType,#AggregationType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.GET_MAX_NUMBER_OF_DIMENSIONS_FOR_EXCEPTION_AGGREGATION, "#MemberType,#AggregationType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.GET_FIELD, "String");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.GET_FILTER_BY_ID, "String");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.GET_FIRST_DIMENSION_WITH_TYPE, "#DimensionType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.GET_G_I_S_ATTRIBUTES_FOR_DIMENSION, "#IQDimension");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.GET_MEASURE, "String");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.GET_REFERENCE_GRID, "boolean");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.GET_VARIABLE, "String");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.GET_VISIBILITY_FILTER_BY_ID, "String");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.INSERT_ATTRIBUTE_TO_RESULT_SET, "String,String,int");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.INSERT_ATTRIBUTE_FIELD, "#DimensionType,String,String,#PresentationType,String,#QContextType,int");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.INSERT_FIELD, "#DimensionType,String,#PresentationType,String,#QContextType,int");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.MOVE_DIMENSION_EXT, "#DimensionType,String,#AxisType,int");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.NEW_RECEIVER_BINDING, "#SemanticBindingType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.MOVE_SORT_TO_POSITION, "#SortType,String,int");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.NEW_SENDER_BINDING, "#SemanticBindingType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.PROCESS_QUERY_EXECUTION, "#SyncType,IQueryExecutedListener,IXObject");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.PROCESS_QUERY_MANAGER_CREATION, "#SyncType,IQueryManagerCreatedListener,IXObject");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.REGISTER_CHANGED_LISTENER, "IQChangedListener,IXObject");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.REMOVE_ATTRIBUTE_FIELD, "#DimensionType,String,String,#PresentationType,String,#QContextType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.REMOVE_ATTRIBUTE_FROM_RESULT_SET, "String,String");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.REMOVE_FIELD, "#DimensionType,String,#PresentationType,String,#QContextType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_AXIS_ZERO_SUPPRESSION_TYPE, "#AxisType,#ZeroSuppressionType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_AXIS_ZERO_SUPPRESSION_TYPE_EXT, "#AxisType,#ZeroSuppressionType,boolean");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_CONDITION_ACTIVE, "String,boolean");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_EXCEPTION_ACTIVE, "String,boolean");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_DIMENSION_AND_MEASURE, "String,String");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_DIMENSION_HIERARCHY, "String,String,boolean,int");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_DIMENSION_HIERARCHY_DRILL_LEVEL, "String,int");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_DIMENSION_HIERARCHY_HAS_NODE_CONDENSATION, "String,boolean");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_DIMENSION_HIERARCHY_MEMBER_OF_POSTED_NODE_VISIBILITY, "String,#ResultVisibility");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_DIMENSION_HIERARCHY_LOWER_LEVEL_NODE_ALIGMENT, "String,#Alignment");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_DIMENSION_MEMBER_READMODE_GRACEFUL, "String,#QContextType,#QMemberReadMode");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_DIMENSION_MEMBER_READMODE_GRACEFUL_EXT, "String,#QContextType,#QMemberReadMode,boolean");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_DIMENSIONS_AND_MEASURES, "IXList<String>,IXList<String>");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_FIELD_CONTAINER_DISPLAY, "String,String,#FieldContainerDisplay");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_FIELD_CONTAINER_KEY_DISPLAY, "String,String,#FieldContainerKeyDisplay");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_FIELD_CONTAINER_KEY_VIEW, "String,String,#PresentationType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.RESET_FIELD_CONTAINER_KEY_VIEW_DEFAULT, "String,String");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_FIELD_CONTAINER_TEXT_VIEW, "String,String,#PresentationType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.RESET_FIELD_CONTAINER_TEXT_VIEW_DEFAULT, "String,String");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.REFRESH_FIELD_CONTAINER_DISPLAY_FOR_DIMENSION, "String,#FieldContainerDisplay");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_EXECUTE_REQUEST_ON_OLD_RESULT_SET, "boolean");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_FIELD, "#DimensionType,String,#PresentationType,String,#QContextType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_MAX_COLUMNS, "int");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_MAX_RESULT_RECORDS, "long");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_MAX_ROWS, "int");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_OFFSET_COLUMNS, "int");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_OFFSET_ROWS, "int");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_RESULT_SET_PERSISTANCE_IDENTIFIER, "String");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_RESULT_SET_PERSISTANCE_TARGET_SCHEMA, "String");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_RESULT_SET_PERSISTANCE_TARGET_TABLE, "String");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_RESULT_SET_TRANSPORT_ENABLED, "boolean");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_SEARCH_TERM, "String");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_TOTALS_VISIBLE, "#QModelLevel,String,#ResultVisibility");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_TOTALS_VISIBLE_BY_ELEMENT, "#QModelLevel,String,#ResultStructureElement,#ResultVisibility");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_UNIVERSAL_DISPLAY_HIERARCHY, "IXList<String>,int,boolean");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SET_VARIABLE, "String,String");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SWITCH_AXES_EXT, "boolean");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SORT, "#SortType,#DimensionType,String,#PresentationType,String,String,#XSortDirection,#AxisType");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.SORT_BY_QUERY_DATA_CELL, "String,String,#XSortDirection");
	oFF.QCmdSignature.s_signature.put(oFF.QCmdSignature.UNREGISTER_CHANGED_LISTENER, "IQChangedListener");
};

oFF.QGenericCmd = function() {};
oFF.QGenericCmd.prototype = new oFF.DfCmd();
oFF.QGenericCmd.prototype._ff_c = "QGenericCmd";

oFF.QGenericCmd.createGenericCmd = function(methodName, primitiveReturnType, signature, signatureList)
{
	let cmd = new oFF.QGenericCmd();
	cmd.setupValues(methodName, primitiveReturnType, signature, signatureList);
	return cmd;
};
oFF.QGenericCmd.prototype.m_methodName = null;
oFF.QGenericCmd.prototype.m_primitiveReturnType = null;
oFF.QGenericCmd.prototype.m_signature = null;
oFF.QGenericCmd.prototype.m_signatureList = null;
oFF.QGenericCmd.prototype.execute = function()
{
	let returnValue;
	if (oFF.notNull(this.m_params) && this.m_params.hasElements())
	{
		returnValue = oFF.XReflection.invokeMethodWithArgs(this.m_cmds, this.m_methodName, this.m_params);
	}
	else
	{
		returnValue = oFF.XReflection.invokeMethod(this.m_cmds, this.m_methodName);
	}
	this.m_ret = returnValue;
};
oFF.QGenericCmd.prototype.getSignature = function()
{
	if (oFF.isNull(this.m_signatureList) && oFF.notNull(this.m_signature))
	{
		this.m_signatureList = oFF.PrFactory.createList();
		this.m_signatureList.addAllStrings(oFF.XStringTokenizer.splitString(this.m_signature, ","));
	}
	return this.m_signatureList;
};
oFF.QGenericCmd.prototype.newRuntimeInstance = function()
{
	return oFF.QGenericCmd.createGenericCmd(this.m_methodName, this.m_primitiveReturnType, this.m_signature, this.getSignature());
};
oFF.QGenericCmd.prototype.setupValues = function(methodName, primitiveReturnType, signature, signatureList)
{
	this.m_methodName = methodName;
	this.m_primitiveReturnType = primitiveReturnType;
	this.m_signature = signature;
	this.m_signatureList = signatureList;
};

oFF.QDimensionMetadata = function() {};
oFF.QDimensionMetadata.prototype = new oFF.QMetadata();
oFF.QDimensionMetadata.prototype._ff_c = "QDimensionMetadata";

oFF.QDimensionMetadata.create = function(cacheKey)
{
	let dimensionMetadata = new oFF.QDimensionMetadata();
	dimensionMetadata.setupMetadata(cacheKey);
	dimensionMetadata.m_supportedAxesTypes = oFF.XSetOfNameObject.create();
	dimensionMetadata.m_supportedFieldLayoutType = oFF.XHashSetOfString.create();
	dimensionMetadata.m_supportedFieldLayoutType.add(oFF.FieldLayoutType.FIELD_BASED.getName());
	dimensionMetadata.m_selectionCapabilities = oFF.QFilterCapabilityList.createFilterCapabilitiesForDimension();
	dimensionMetadata.m_isCompound = oFF.TriStateBool._DEFAULT;
	dimensionMetadata.m_keyAttributesNames = oFF.XList.create();
	return dimensionMetadata;
};
oFF.QDimensionMetadata.prototype.m_accountTypeAttributeName = null;
oFF.QDimensionMetadata.prototype.m_additionalPeriods = 0;
oFF.QDimensionMetadata.prototype.m_attributeViewName = null;
oFF.QDimensionMetadata.prototype.m_canBeAggregated = false;
oFF.QDimensionMetadata.prototype.m_defaultFieldLayoutType = null;
oFF.QDimensionMetadata.prototype.m_defaultMemberValue = null;
oFF.QDimensionMetadata.prototype.m_designTimeDisplayGroupName = null;
oFF.QDimensionMetadata.prototype.m_designTimeDisplayGroupText = null;
oFF.QDimensionMetadata.prototype.m_dimensionVisibility = null;
oFF.QDimensionMetadata.prototype.m_externalName = null;
oFF.QDimensionMetadata.prototype.m_firstWeekDay = null;
oFF.QDimensionMetadata.prototype.m_firstYearWeekIndicator = null;
oFF.QDimensionMetadata.prototype.m_fiscalDisplayPeriod = null;
oFF.QDimensionMetadata.prototype.m_fiscalEnabled = false;
oFF.QDimensionMetadata.prototype.m_fiscalPeriodPrefix = null;
oFF.QDimensionMetadata.prototype.m_fiscalShift = 0;
oFF.QDimensionMetadata.prototype.m_groupingDimensions = null;
oFF.QDimensionMetadata.prototype.m_hasCheckTable = false;
oFF.QDimensionMetadata.prototype.m_hasDayTimeYYYYMMDDFormat = false;
oFF.QDimensionMetadata.prototype.m_hasFunctionalVariables = false;
oFF.QDimensionMetadata.prototype.m_id = 0;
oFF.QDimensionMetadata.prototype.m_incompleteDimensionMetadata = false;
oFF.QDimensionMetadata.prototype.m_isCompound = null;
oFF.QDimensionMetadata.prototype.m_isEnforcedDynamicValue = false;
oFF.QDimensionMetadata.prototype.m_isGroupingDimension = false;
oFF.QDimensionMetadata.prototype.m_isHierarchyMandatory = false;
oFF.QDimensionMetadata.prototype.m_isOwnerDimension = false;
oFF.QDimensionMetadata.prototype.m_isPrivate = false;
oFF.QDimensionMetadata.prototype.m_isUserManaged = false;
oFF.QDimensionMetadata.prototype.m_keyAttributesNames = null;
oFF.QDimensionMetadata.prototype.m_keyField = null;
oFF.QDimensionMetadata.prototype.m_periodPrefix = null;
oFF.QDimensionMetadata.prototype.m_selectionCapabilities = null;
oFF.QDimensionMetadata.prototype.m_semanticObject = null;
oFF.QDimensionMetadata.prototype.m_supportedAxesTypes = null;
oFF.QDimensionMetadata.prototype.m_supportedFieldLayoutType = null;
oFF.QDimensionMetadata.prototype.m_supportedSortTypes = null;
oFF.QDimensionMetadata.prototype.m_supportsCalculatedBeforeAggregation = false;
oFF.QDimensionMetadata.prototype.m_supportsCumulative = false;
oFF.QDimensionMetadata.prototype.m_supportsLowerCase = false;
oFF.QDimensionMetadata.prototype.m_timeConfigEnablePattern = false;
oFF.QDimensionMetadata.prototype.m_timeConfigPattern = null;
oFF.QDimensionMetadata.prototype.m_type = null;
oFF.QDimensionMetadata.prototype.m_unassignedMember = null;
oFF.QDimensionMetadata.prototype.m_useMonthLabel = false;
oFF.QDimensionMetadata.prototype.m_valueType = null;
oFF.QDimensionMetadata.prototype.addGroupingDimension = function(groupingDimension)
{
	if (oFF.isNull(this.m_groupingDimensions))
	{
		this.m_groupingDimensions = oFF.XHashSetOfString.create();
	}
	if (!this.m_groupingDimensions.contains(groupingDimension))
	{
		this.m_groupingDimensions.add(groupingDimension);
	}
};
oFF.QDimensionMetadata.prototype.addSupportedAxis = function(axisType)
{
	this.m_supportedAxesTypes.add(axisType);
};
oFF.QDimensionMetadata.prototype.addSupportedFieldLayoutType = function(type)
{
	this.m_supportedFieldLayoutType.add(type.getName());
};
oFF.QDimensionMetadata.prototype.canBeAggregated = function()
{
	return this.m_canBeAggregated;
};
oFF.QDimensionMetadata.prototype.getAccountTypeAttributeName = function()
{
	return this.m_accountTypeAttributeName;
};
oFF.QDimensionMetadata.prototype.getAdditionalPeriods = function()
{
	return this.m_additionalPeriods;
};
oFF.QDimensionMetadata.prototype.getAttributeViewName = function()
{
	return this.m_attributeViewName;
};
oFF.QDimensionMetadata.prototype.getDefaultFieldLayoutType = function()
{
	return this.m_defaultFieldLayoutType;
};
oFF.QDimensionMetadata.prototype.getDefaultMemberValue = function()
{
	return this.m_defaultMemberValue;
};
oFF.QDimensionMetadata.prototype.getDesignDisplayGroupName = function()
{
	return this.m_designTimeDisplayGroupName;
};
oFF.QDimensionMetadata.prototype.getDesignDisplayGroupText = function()
{
	return this.m_designTimeDisplayGroupText;
};
oFF.QDimensionMetadata.prototype.getDimensionType = function()
{
	return this.m_type;
};
oFF.QDimensionMetadata.prototype.getExternalName = function()
{
	return this.m_externalName;
};
oFF.QDimensionMetadata.prototype.getFilterCapabilities = function()
{
	return this.m_selectionCapabilities;
};
oFF.QDimensionMetadata.prototype.getFilterCapabilitiesBase = function()
{
	return this.m_selectionCapabilities;
};
oFF.QDimensionMetadata.prototype.getFirstWeekDay = function()
{
	return this.m_firstWeekDay;
};
oFF.QDimensionMetadata.prototype.getFirstYearWeekIndicator = function()
{
	return this.m_firstYearWeekIndicator;
};
oFF.QDimensionMetadata.prototype.getFiscalDisplayPeriod = function()
{
	return this.m_fiscalDisplayPeriod;
};
oFF.QDimensionMetadata.prototype.getFiscalEnabled = function()
{
	return this.m_fiscalEnabled;
};
oFF.QDimensionMetadata.prototype.getFiscalPeriodPrefix = function()
{
	return this.m_fiscalPeriodPrefix;
};
oFF.QDimensionMetadata.prototype.getFiscalShift = function()
{
	return this.m_fiscalShift;
};
oFF.QDimensionMetadata.prototype.getGroupedDimensions = function(dimensionAccessor, caller)
{
	let groupedDimensions = oFF.XList.create();
	if (this.isGroupingDimension())
	{
		let dimensions = dimensionAccessor.getDimensions();
		for (let i = 0; i < dimensions.size(); i++)
		{
			let dimension = dimensions.get(i);
			if (dimension === caller)
			{
				continue;
			}
			let groupingDimensions = dimension.getGroupingDimensions();
			if (oFF.notNull(groupingDimensions))
			{
				for (let j = 0; j < groupingDimensions.size(); j++)
				{
					let groupingDimension = groupingDimensions.get(j);
					if (groupingDimension !== caller)
					{
						continue;
					}
					if (!groupedDimensions.contains(dimension))
					{
						groupedDimensions.add(dimension);
					}
				}
			}
		}
	}
	return groupedDimensions;
};
oFF.QDimensionMetadata.prototype.getGroupingDimensionNames = function(dimensionAccessor)
{
	let groupingDimensionNames = oFF.XList.create();
	if (oFF.notNull(dimensionAccessor) && oFF.notNull(this.m_groupingDimensions))
	{
		let dimensionNames = this.m_groupingDimensions.getIterator();
		while (dimensionNames.hasNext())
		{
			let dimensionName = dimensionNames.next();
			if (dimensionAccessor.getDimensionNames().contains(dimensionName))
			{
				groupingDimensionNames.add(dimensionName);
			}
		}
	}
	return groupingDimensionNames;
};
oFF.QDimensionMetadata.prototype.getGroupingDimensions = function(dimensionAccessor)
{
	let groupingDimensions = oFF.XList.create();
	if (oFF.notNull(dimensionAccessor) && oFF.notNull(this.m_groupingDimensions))
	{
		let dimensionNames = this.m_groupingDimensions.getIterator();
		while (dimensionNames.hasNext())
		{
			let dimension = dimensionAccessor.getDimensionByName(dimensionNames.next());
			if (oFF.notNull(dimension))
			{
				groupingDimensions.add(dimension);
			}
		}
	}
	return groupingDimensions;
};
oFF.QDimensionMetadata.prototype.getHasCheckTable = function()
{
	if (this.getDimensionType().isTypeOf(oFF.DimensionType.ABSTRACT_STRUCTURE))
	{
		throw oFF.XException.createIllegalStateException("No HasCheckTable for Structures.");
	}
	return this.m_hasCheckTable;
};
oFF.QDimensionMetadata.prototype.getId = function()
{
	return this.m_id;
};
oFF.QDimensionMetadata.prototype.getKeyAttributesNames = function()
{
	return this.m_keyAttributesNames;
};
oFF.QDimensionMetadata.prototype.getKeyFieldMetadata = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_keyField);
};
oFF.QDimensionMetadata.prototype.getPeriodPrefix = function()
{
	return this.m_periodPrefix;
};
oFF.QDimensionMetadata.prototype.getSemanticObject = function()
{
	return this.m_semanticObject;
};
oFF.QDimensionMetadata.prototype.getSupportedAxesTypes = function()
{
	return this.m_supportedAxesTypes;
};
oFF.QDimensionMetadata.prototype.getSupportedSortTypes = function()
{
	return this.m_supportedSortTypes;
};
oFF.QDimensionMetadata.prototype.getTimeConfigPattern = function()
{
	return this.m_timeConfigPattern;
};
oFF.QDimensionMetadata.prototype.getUnassignedMember = function()
{
	return this.m_unassignedMember;
};
oFF.QDimensionMetadata.prototype.getUseMonthLabel = function()
{
	return this.m_useMonthLabel;
};
oFF.QDimensionMetadata.prototype.getValueType = function()
{
	return this.m_valueType;
};
oFF.QDimensionMetadata.prototype.getVisibility = function()
{
	return this.m_dimensionVisibility;
};
oFF.QDimensionMetadata.prototype.hasDayTimeYYYYMMDDFormat = function()
{
	return this.m_hasDayTimeYYYYMMDDFormat;
};
oFF.QDimensionMetadata.prototype.hasFunctionalVariables = function()
{
	return this.m_hasFunctionalVariables;
};
oFF.QDimensionMetadata.prototype.isCompound = function()
{
	return this.m_isCompound.getBoolean();
};
oFF.QDimensionMetadata.prototype.isCompoundBase = function()
{
	return this.m_isCompound;
};
oFF.QDimensionMetadata.prototype.isEnforcedDynamicValue = function()
{
	return this.m_isEnforcedDynamicValue;
};
oFF.QDimensionMetadata.prototype.isGroupingDimension = function()
{
	return this.m_isGroupingDimension;
};
oFF.QDimensionMetadata.prototype.isHierarchyMandatory = function()
{
	return this.m_isHierarchyMandatory;
};
oFF.QDimensionMetadata.prototype.isIncompleteDimensionMetadata = function()
{
	return this.m_incompleteDimensionMetadata;
};
oFF.QDimensionMetadata.prototype.isMeasureStructure = function()
{
	return this.m_type === oFF.DimensionType.MEASURE_STRUCTURE;
};
oFF.QDimensionMetadata.prototype.isOwnerDimension = function()
{
	return this.m_isOwnerDimension;
};
oFF.QDimensionMetadata.prototype.isPrivate = function()
{
	return this.m_isPrivate;
};
oFF.QDimensionMetadata.prototype.isSecondaryStructure = function()
{
	return this.m_type === oFF.DimensionType.SECONDARY_STRUCTURE;
};
oFF.QDimensionMetadata.prototype.isSelectable = function(axisType)
{
	if (oFF.XCollectionUtils.hasElements(this.m_supportedAxesTypes))
	{
		let supportedAxesTypes = this.m_supportedAxesTypes.createSetCopy();
		supportedAxesTypes.removeElement(oFF.AxisType.REPOSITORY);
		supportedAxesTypes.removeElement(oFF.AxisType.VIRTUAL);
		return supportedAxesTypes.hasElements();
	}
	return axisType !== oFF.AxisType.REPOSITORY && axisType !== oFF.AxisType.VIRTUAL;
};
oFF.QDimensionMetadata.prototype.isStructure = function()
{
	return oFF.isNull(this.m_type) ? false : this.m_type.isTypeOf(oFF.DimensionType.ABSTRACT_STRUCTURE);
};
oFF.QDimensionMetadata.prototype.isTechnicalDimension = function()
{
	let supportedAxesTypes = this.getSupportedAxesTypes();
	return oFF.isNull(supportedAxesTypes) || supportedAxesTypes.size() === 1 && supportedAxesTypes.contains(oFF.AxisType.TECHNICAL);
};
oFF.QDimensionMetadata.prototype.isTimeConfigEnablePattern = function()
{
	return this.m_timeConfigEnablePattern;
};
oFF.QDimensionMetadata.prototype.isUserManaged = function()
{
	return this.m_isUserManaged;
};
oFF.QDimensionMetadata.prototype.releaseObject = function()
{
	this.m_defaultMemberValue = null;
	this.m_dimensionVisibility = null;
	this.m_externalName = null;
	this.m_defaultFieldLayoutType = null;
	this.m_type = null;
	this.m_attributeViewName = null;
	this.m_isCompound = null;
	this.m_supportedAxesTypes = oFF.XObjectExt.release(this.m_supportedAxesTypes);
	this.m_supportedFieldLayoutType = oFF.XObjectExt.release(this.m_supportedFieldLayoutType);
	this.m_selectionCapabilities = oFF.XObjectExt.release(this.m_selectionCapabilities);
	this.m_groupingDimensions = oFF.XObjectExt.release(this.m_groupingDimensions);
	this.m_keyField = oFF.XObjectExt.release(this.m_keyField);
	this.m_valueType = null;
	this.m_accountTypeAttributeName = null;
	this.m_supportedSortTypes = oFF.XObjectExt.release(this.m_supportedSortTypes);
	this.m_keyAttributesNames = oFF.XObjectExt.release(this.m_keyAttributesNames);
	this.m_semanticObject = null;
	this.m_timeConfigPattern = null;
	this.m_firstWeekDay = null;
	this.m_firstYearWeekIndicator = null;
	this.m_designTimeDisplayGroupName = null;
	this.m_designTimeDisplayGroupText = null;
	oFF.QMetadata.prototype.releaseObject.call( this );
};
oFF.QDimensionMetadata.prototype.setAccountTypeAttributeName = function(accountTypeAttributeName)
{
	this.m_accountTypeAttributeName = accountTypeAttributeName;
};
oFF.QDimensionMetadata.prototype.setAdditionalPeriods = function(additionalPeriods)
{
	this.m_additionalPeriods = additionalPeriods;
};
oFF.QDimensionMetadata.prototype.setAttributeViewName = function(attributeViewName)
{
	this.m_attributeViewName = attributeViewName;
};
oFF.QDimensionMetadata.prototype.setCanBeAggregated = function(canBeAggregated)
{
	this.m_canBeAggregated = canBeAggregated;
};
oFF.QDimensionMetadata.prototype.setDefaultFieldLayoutType = function(type)
{
	this.m_defaultFieldLayoutType = type;
};
oFF.QDimensionMetadata.prototype.setDefaultMemberValue = function(defaultMemberValue)
{
	this.m_defaultMemberValue = defaultMemberValue;
};
oFF.QDimensionMetadata.prototype.setDesignTimeDisplayGroupName = function(groupName)
{
	this.m_designTimeDisplayGroupName = groupName;
};
oFF.QDimensionMetadata.prototype.setDesignTimeDisplayGroupText = function(groupText)
{
	this.m_designTimeDisplayGroupText = groupText;
};
oFF.QDimensionMetadata.prototype.setDimensionType = function(type)
{
	this.m_type = type;
};
oFF.QDimensionMetadata.prototype.setEnforceDynamicValue = function(enforceDynamicValue)
{
	this.m_isEnforcedDynamicValue = enforceDynamicValue;
};
oFF.QDimensionMetadata.prototype.setExternalName = function(externalName)
{
	this.m_externalName = externalName;
};
oFF.QDimensionMetadata.prototype.setFirstWeekDay = function(firstWeekDay)
{
	this.m_firstWeekDay = firstWeekDay;
};
oFF.QDimensionMetadata.prototype.setFirstYearWeekIndicator = function(firstYearWeekIndicator)
{
	this.m_firstYearWeekIndicator = firstYearWeekIndicator;
};
oFF.QDimensionMetadata.prototype.setFiscalDisplayPeriod = function(fiscalDisplayPeriod)
{
	this.m_fiscalDisplayPeriod = fiscalDisplayPeriod;
};
oFF.QDimensionMetadata.prototype.setFiscalEnabled = function(fiscalEnabled)
{
	this.m_fiscalEnabled = fiscalEnabled;
};
oFF.QDimensionMetadata.prototype.setFiscalPeriodPrefix = function(fiscalPeriodPrefix)
{
	this.m_fiscalPeriodPrefix = fiscalPeriodPrefix;
};
oFF.QDimensionMetadata.prototype.setFiscalShift = function(fiscalShift)
{
	this.m_fiscalShift = fiscalShift;
};
oFF.QDimensionMetadata.prototype.setHasCheckTable = function(hasCheckTable)
{
	this.m_hasCheckTable = hasCheckTable;
};
oFF.QDimensionMetadata.prototype.setHasDayTimeYYYYMMDDFormat = function(hasDayTimeYYYYMMDDFormat)
{
	this.m_hasDayTimeYYYYMMDDFormat = hasDayTimeYYYYMMDDFormat;
};
oFF.QDimensionMetadata.prototype.setHasFunctionalVariables = function(hasFunctionalVariables)
{
	this.m_hasFunctionalVariables = hasFunctionalVariables;
};
oFF.QDimensionMetadata.prototype.setId = function(identifier)
{
	this.m_id = identifier;
};
oFF.QDimensionMetadata.prototype.setIncompleteDimensionMetadata = function(incompleteDimensionMetadata)
{
	this.m_incompleteDimensionMetadata = incompleteDimensionMetadata;
};
oFF.QDimensionMetadata.prototype.setIsCompoundBase = function(isCompound)
{
	this.m_isCompound = isCompound;
};
oFF.QDimensionMetadata.prototype.setIsGroupingDimension = function(isGroupingDimension)
{
	this.m_isGroupingDimension = isGroupingDimension;
};
oFF.QDimensionMetadata.prototype.setIsHierarchyMandatory = function(isHierarchyMandatory)
{
	this.m_isHierarchyMandatory = isHierarchyMandatory;
};
oFF.QDimensionMetadata.prototype.setIsOwnerDimension = function(isOwnerDimension)
{
	this.m_isOwnerDimension = isOwnerDimension;
};
oFF.QDimensionMetadata.prototype.setIsPrivate = function(isPrivate)
{
	this.m_isPrivate = isPrivate;
};
oFF.QDimensionMetadata.prototype.setIsUserManaged = function(isUserManaged)
{
	this.m_isUserManaged = isUserManaged;
};
oFF.QDimensionMetadata.prototype.setKeyAttributesNames = function(keyAttributesNames)
{
	this.m_keyAttributesNames.clear();
	this.m_keyAttributesNames.addAll(keyAttributesNames);
};
oFF.QDimensionMetadata.prototype.setKeyFieldMetadata = function(keyFieldMd)
{
	this.m_keyField = oFF.XWeakReferenceUtil.getWeakRef(keyFieldMd);
};
oFF.QDimensionMetadata.prototype.setPeriodPrefix = function(periodPrefix)
{
	this.m_periodPrefix = periodPrefix;
};
oFF.QDimensionMetadata.prototype.setSemanticObject = function(semanticObject)
{
	this.m_semanticObject = semanticObject;
};
oFF.QDimensionMetadata.prototype.setSupportedSortTypes = function(sortTypes)
{
	this.m_supportedSortTypes = sortTypes;
};
oFF.QDimensionMetadata.prototype.setSupportsCalculatedBeforeAggregation = function(supportsCalculatedBeforeAggregation)
{
	this.m_supportsCalculatedBeforeAggregation = supportsCalculatedBeforeAggregation;
};
oFF.QDimensionMetadata.prototype.setSupportsCumulative = function(supportsCumulative)
{
	this.m_supportsCumulative = supportsCumulative;
};
oFF.QDimensionMetadata.prototype.setSupportsLowerCase = function(supportsLowerCase)
{
	this.m_supportsLowerCase = supportsLowerCase;
};
oFF.QDimensionMetadata.prototype.setTimeConfigEnablePattern = function(timeConfigEnablePattern)
{
	this.m_timeConfigEnablePattern = timeConfigEnablePattern;
};
oFF.QDimensionMetadata.prototype.setTimeConfigPattern = function(pattern)
{
	this.m_timeConfigPattern = pattern;
};
oFF.QDimensionMetadata.prototype.setUnassignedMember = function(unassignedMember)
{
	this.m_unassignedMember = unassignedMember;
};
oFF.QDimensionMetadata.prototype.setUseMonthLabel = function(useMonthLabel)
{
	this.m_useMonthLabel = useMonthLabel;
};
oFF.QDimensionMetadata.prototype.setValueType = function(valueType)
{
	this.m_valueType = valueType;
};
oFF.QDimensionMetadata.prototype.setVisibility = function(dimensionVisibility)
{
	this.m_dimensionVisibility = dimensionVisibility;
};
oFF.QDimensionMetadata.prototype.supportsAxis = function(axisType)
{
	return this.m_supportedAxesTypes.contains(axisType);
};
oFF.QDimensionMetadata.prototype.supportsBasicStructureMembers = function()
{
	return this.isStructure() || this.m_type === oFF.DimensionType.ACCOUNT;
};
oFF.QDimensionMetadata.prototype.supportsCalculatedBeforeAggregation = function()
{
	return this.m_supportsCalculatedBeforeAggregation;
};
oFF.QDimensionMetadata.prototype.supportsCumulative = function()
{
	return this.m_supportsCumulative;
};
oFF.QDimensionMetadata.prototype.supportsCustomMembers = function()
{
	return this.isStructure() || oFF.DimensionType.ACCOUNT === this.m_type;
};
oFF.QDimensionMetadata.prototype.supportsFieldLayoutType = function(type)
{
	return this.m_supportedFieldLayoutType.contains(type.getName());
};
oFF.QDimensionMetadata.prototype.supportsLowerCase = function()
{
	return this.m_supportsLowerCase;
};

oFF.QFieldMetadata = function() {};
oFF.QFieldMetadata.prototype = new oFF.QMetadata();
oFF.QFieldMetadata.prototype._ff_c = "QFieldMetadata";

oFF.QFieldMetadata.create = function(cacheKey)
{
	let fieldMetadata = new oFF.QFieldMetadata();
	if (oFF.notNull(cacheKey))
	{
		fieldMetadata.setupMetadata(cacheKey);
	}
	fieldMetadata.m_usageType = oFF.FieldUsageType.ALL;
	return fieldMetadata;
};
oFF.QFieldMetadata.prototype.m_aliasName = null;
oFF.QFieldMetadata.prototype.m_attributeType = null;
oFF.QFieldMetadata.prototype.m_conversionRoutine = null;
oFF.QFieldMetadata.prototype.m_decimals = 0;
oFF.QFieldMetadata.prototype.m_dependencyFields = null;
oFF.QFieldMetadata.prototype.m_dimensionMetadata = null;
oFF.QFieldMetadata.prototype.m_fixedLength = 0;
oFF.QFieldMetadata.prototype.m_infoObjectType = null;
oFF.QFieldMetadata.prototype.m_initialValue = null;
oFF.QFieldMetadata.prototype.m_isCubeBlendingPropertiesField = false;
oFF.QFieldMetadata.prototype.m_isDefaultTextField = false;
oFF.QFieldMetadata.prototype.m_isDisplayAttributeField = false;
oFF.QFieldMetadata.prototype.m_isExcludedFromValueHelp = false;
oFF.QFieldMetadata.prototype.m_isFilterable = false;
oFF.QFieldMetadata.prototype.m_isFilterableFlagFromMetadata = true;
oFF.QFieldMetadata.prototype.m_isFlatKeyField = false;
oFF.QFieldMetadata.prototype.m_isHierarchyKeyField = false;
oFF.QFieldMetadata.prototype.m_isHierarchyNavigationField = false;
oFF.QFieldMetadata.prototype.m_isHierarchyPathField = false;
oFF.QFieldMetadata.prototype.m_isLowerCaseEnabled = false;
oFF.QFieldMetadata.prototype.m_isNamePathField = false;
oFF.QFieldMetadata.prototype.m_isVirtualDescription = false;
oFF.QFieldMetadata.prototype.m_length = 0;
oFF.QFieldMetadata.prototype.m_lowerBound = null;
oFF.QFieldMetadata.prototype.m_mappedColumnName = null;
oFF.QFieldMetadata.prototype.m_mimeType = null;
oFF.QFieldMetadata.prototype.m_navigationalAttributeDescription = null;
oFF.QFieldMetadata.prototype.m_precision = 0;
oFF.QFieldMetadata.prototype.m_presentationType = null;
oFF.QFieldMetadata.prototype.m_semanticType = null;
oFF.QFieldMetadata.prototype.m_sqlType = null;
oFF.QFieldMetadata.prototype.m_upperBound = null;
oFF.QFieldMetadata.prototype.m_usageType = null;
oFF.QFieldMetadata.prototype.m_valueType = null;
oFF.QFieldMetadata.prototype.m_visibilityType = null;
oFF.QFieldMetadata.prototype.addDependencyField = function(dependentFieldName)
{
	if (oFF.isNull(this.m_dependencyFields))
	{
		this.m_dependencyFields = oFF.XList.create();
	}
	this.m_dependencyFields.add(dependentFieldName);
};
oFF.QFieldMetadata.prototype.getAliasName = function()
{
	return this.m_aliasName;
};
oFF.QFieldMetadata.prototype.getAttributeType = function()
{
	return this.m_attributeType;
};
oFF.QFieldMetadata.prototype.getConversionRoutine = function()
{
	return this.m_conversionRoutine;
};
oFF.QFieldMetadata.prototype.getDecimals = function()
{
	return this.m_decimals;
};
oFF.QFieldMetadata.prototype.getDependencyFields = function()
{
	if (oFF.isNull(this.m_dependencyFields))
	{
		return oFF.XList.create();
	}
	return this.m_dependencyFields;
};
oFF.QFieldMetadata.prototype.getDimensionMetadata = function()
{
	return this.getDimensionMetadataBase();
};
oFF.QFieldMetadata.prototype.getDimensionMetadataBase = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_dimensionMetadata);
};
oFF.QFieldMetadata.prototype.getFixedLength = function()
{
	return this.m_fixedLength;
};
oFF.QFieldMetadata.prototype.getInfoObjectType = function()
{
	return this.m_infoObjectType;
};
oFF.QFieldMetadata.prototype.getInitialValue = function()
{
	return this.m_initialValue;
};
oFF.QFieldMetadata.prototype.getIsLowerCaseEnabled = function()
{
	return this.isLowerCaseEnabled();
};
oFF.QFieldMetadata.prototype.getLength = function()
{
	return this.m_length;
};
oFF.QFieldMetadata.prototype.getLowerBound = function()
{
	return this.m_lowerBound;
};
oFF.QFieldMetadata.prototype.getMappedColumnName = function()
{
	return this.m_mappedColumnName;
};
oFF.QFieldMetadata.prototype.getMimeType = function()
{
	return this.m_mimeType;
};
oFF.QFieldMetadata.prototype.getNavigationalAttributeDescription = function()
{
	return this.m_navigationalAttributeDescription;
};
oFF.QFieldMetadata.prototype.getPrecision = function()
{
	return this.m_precision;
};
oFF.QFieldMetadata.prototype.getPresentationType = function()
{
	return this.m_presentationType;
};
oFF.QFieldMetadata.prototype.getSemanticType = function()
{
	return this.m_semanticType;
};
oFF.QFieldMetadata.prototype.getSqlType = function()
{
	return this.m_sqlType;
};
oFF.QFieldMetadata.prototype.getUpperBound = function()
{
	return this.m_upperBound;
};
oFF.QFieldMetadata.prototype.getUsageType = function()
{
	return this.m_usageType;
};
oFF.QFieldMetadata.prototype.getValueType = function()
{
	return this.m_valueType;
};
oFF.QFieldMetadata.prototype.getVisibilityType = function()
{
	return this.m_visibilityType;
};
oFF.QFieldMetadata.prototype.hasFlagIsFilterableInMetadata = function()
{
	return this.m_isFilterableFlagFromMetadata;
};
oFF.QFieldMetadata.prototype.isCubeBlendingPropertiesField = function()
{
	return this.m_isCubeBlendingPropertiesField;
};
oFF.QFieldMetadata.prototype.isDefaultTextField = function()
{
	return this.m_isDefaultTextField;
};
oFF.QFieldMetadata.prototype.isDisplayAttributeField = function()
{
	return this.m_isDisplayAttributeField;
};
oFF.QFieldMetadata.prototype.isExcludedFromValueHelp = function()
{
	return this.m_isExcludedFromValueHelp;
};
oFF.QFieldMetadata.prototype.isFilterable = function()
{
	return this.m_isFilterable;
};
oFF.QFieldMetadata.prototype.isFilterableForValueHelpAndReadMode = function(readMode)
{
	let filterCapabilities = this.getDimensionMetadata().getFilterCapabilities().getFilterCapabilitiesByFieldName(this.getName());
	let supportsValueHelpFilterOnly = oFF.notNull(filterCapabilities) && filterCapabilities.supportsValueHelpOnly();
	if (this.m_isFilterableFlagFromMetadata && !supportsValueHelpFilterOnly)
	{
		return this.isFilterable();
	}
	if (oFF.notNull(filterCapabilities))
	{
		return filterCapabilities.supportsSetSignForValueHelpAndReadMode(oFF.SetSign.INCLUDING, readMode) || filterCapabilities.supportsSetSignForValueHelpAndReadMode(oFF.SetSign.EXCLUDING, readMode);
	}
	return false;
};
oFF.QFieldMetadata.prototype.isFlatKeyField = function()
{
	return this.m_isFlatKeyField;
};
oFF.QFieldMetadata.prototype.isHierarchyKeyField = function()
{
	return this.m_isHierarchyKeyField;
};
oFF.QFieldMetadata.prototype.isHierarchyNavigationField = function()
{
	return this.m_isHierarchyNavigationField;
};
oFF.QFieldMetadata.prototype.isHierarchyPathField = function()
{
	return this.m_isHierarchyPathField;
};
oFF.QFieldMetadata.prototype.isKeyField = function()
{
	return this.m_isHierarchyKeyField || this.m_isFlatKeyField || this.m_isHierarchyNavigationField || this.m_presentationType === oFF.PresentationType.KEY_NOT_COMPOUND;
};
oFF.QFieldMetadata.prototype.isLowerCaseEnabled = function()
{
	return this.m_isLowerCaseEnabled;
};
oFF.QFieldMetadata.prototype.isNamePathField = function()
{
	return this.m_isNamePathField;
};
oFF.QFieldMetadata.prototype.isVirtualDescription = function()
{
	return this.m_isVirtualDescription;
};
oFF.QFieldMetadata.prototype.releaseObject = function()
{
	this.m_dimensionMetadata = oFF.XObjectExt.release(this.m_dimensionMetadata);
	this.m_aliasName = null;
	this.m_mappedColumnName = null;
	this.m_attributeType = null;
	this.m_sqlType = null;
	this.m_valueType = null;
	this.m_initialValue = null;
	this.m_usageType = null;
	this.m_presentationType = null;
	this.m_navigationalAttributeDescription = null;
	this.m_lowerBound = null;
	this.m_upperBound = null;
	this.m_infoObjectType = null;
	this.m_visibilityType = null;
	this.m_conversionRoutine = null;
	this.m_dependencyFields = oFF.XObjectExt.release(this.m_dependencyFields);
	this.m_mimeType = null;
	oFF.QMetadata.prototype.releaseObject.call( this );
};
oFF.QFieldMetadata.prototype.setAliasName = function(aliasName)
{
	this.m_aliasName = aliasName;
};
oFF.QFieldMetadata.prototype.setAttributeType = function(attributeType)
{
	this.m_attributeType = attributeType;
};
oFF.QFieldMetadata.prototype.setConversionRoutine = function(conversionRoutine)
{
	this.m_conversionRoutine = conversionRoutine;
};
oFF.QFieldMetadata.prototype.setDecimals = function(decimals)
{
	this.m_decimals = decimals;
};
oFF.QFieldMetadata.prototype.setDimensionMetadata = function(dimensionMetadata)
{
	if (this.m_presentationType === oFF.PresentationType.KEY)
	{
		dimensionMetadata.setKeyFieldMetadata(this);
	}
	this.m_dimensionMetadata = oFF.XWeakReferenceUtil.getWeakRef(dimensionMetadata);
};
oFF.QFieldMetadata.prototype.setFixedLength = function(fixedLength)
{
	if (this.m_fixedLength !== fixedLength)
	{
		this.m_fixedLength = fixedLength;
	}
};
oFF.QFieldMetadata.prototype.setInfoObjectType = function(infoObjectType)
{
	this.m_infoObjectType = infoObjectType;
};
oFF.QFieldMetadata.prototype.setInitialValue = function(initialValue)
{
	this.m_initialValue = initialValue;
};
oFF.QFieldMetadata.prototype.setIsCubeBlendingPropertiesField = function(isBlendingPropertiesField)
{
	this.m_isCubeBlendingPropertiesField = isBlendingPropertiesField;
};
oFF.QFieldMetadata.prototype.setIsDisplayAttributeField = function(isDisplayAttributeField)
{
	this.m_isDisplayAttributeField = isDisplayAttributeField;
};
oFF.QFieldMetadata.prototype.setIsExcludedFromValueHelp = function(isExcludedFromValueHelp)
{
	this.m_isExcludedFromValueHelp = isExcludedFromValueHelp;
};
oFF.QFieldMetadata.prototype.setIsFilterable = function(isFilterable)
{
	this.m_isFilterable = isFilterable;
};
oFF.QFieldMetadata.prototype.setIsFilterableFlagFromMetadata = function(isFilterableFlagFromMetadata)
{
	this.m_isFilterableFlagFromMetadata = isFilterableFlagFromMetadata;
};
oFF.QFieldMetadata.prototype.setIsFlatKeyField = function(isFlatKeyField)
{
	this.m_isFlatKeyField = isFlatKeyField;
};
oFF.QFieldMetadata.prototype.setIsFlatTextField = function(isDefaultTextField)
{
	this.m_isDefaultTextField = isDefaultTextField;
};
oFF.QFieldMetadata.prototype.setIsHierarchyKeyField = function(isHierarchyKeyField)
{
	this.m_isHierarchyKeyField = isHierarchyKeyField;
};
oFF.QFieldMetadata.prototype.setIsHierarchyNavigationField = function(isHierarchyNavigationField)
{
	this.m_isHierarchyNavigationField = isHierarchyNavigationField;
};
oFF.QFieldMetadata.prototype.setIsHierarchyPathField = function(isHierarchyPathField)
{
	this.m_isHierarchyPathField = isHierarchyPathField;
};
oFF.QFieldMetadata.prototype.setIsLowerCaseEnabled = function(lowerCaseEnabled)
{
	this.m_isLowerCaseEnabled = lowerCaseEnabled;
};
oFF.QFieldMetadata.prototype.setIsNamePathField = function(isNamePathField)
{
	this.m_isNamePathField = isNamePathField;
};
oFF.QFieldMetadata.prototype.setIsVirtualDescription = function(isVirtualDescription)
{
	this.m_isVirtualDescription = isVirtualDescription;
};
oFF.QFieldMetadata.prototype.setLength = function(length)
{
	this.m_length = length;
};
oFF.QFieldMetadata.prototype.setLowerBound = function(lowerBound)
{
	this.m_lowerBound = lowerBound;
};
oFF.QFieldMetadata.prototype.setMappedColumnName = function(columnName)
{
	this.m_mappedColumnName = columnName;
};
oFF.QFieldMetadata.prototype.setMimeType = function(mimeType)
{
	this.m_mimeType = mimeType;
};
oFF.QFieldMetadata.prototype.setNavigationalAttributeDescription = function(navigationalAttributeDescription)
{
	this.m_navigationalAttributeDescription = navigationalAttributeDescription;
};
oFF.QFieldMetadata.prototype.setPrecision = function(precision)
{
	this.m_precision = precision;
};
oFF.QFieldMetadata.prototype.setPresentationType = function(presentationType)
{
	this.m_presentationType = presentationType;
};
oFF.QFieldMetadata.prototype.setSemanticType = function(semanticType)
{
	this.m_semanticType = semanticType;
};
oFF.QFieldMetadata.prototype.setSqlType = function(sqlType)
{
	this.m_sqlType = sqlType;
};
oFF.QFieldMetadata.prototype.setUpperBound = function(upperBound)
{
	this.m_upperBound = upperBound;
};
oFF.QFieldMetadata.prototype.setUsageType = function(usageType)
{
	if (oFF.isNull(this.m_usageType))
	{
		this.m_usageType = usageType;
	}
};
oFF.QFieldMetadata.prototype.setValueType = function(valueType)
{
	this.m_valueType = valueType;
};
oFF.QFieldMetadata.prototype.setVisibilityType = function(visibilityType)
{
	this.m_visibilityType = visibilityType;
};

oFF.QDimensionLinkKey = function() {};
oFF.QDimensionLinkKey.prototype = new oFF.QCacheKey();
oFF.QDimensionLinkKey.prototype._ff_c = "QDimensionLinkKey";

oFF.QDimensionLinkKey.createLinkKey = function(systemName, cubeName, dimensionName, fieldName)
{
	return oFF.QFactory.createCacheKeyWithDataSource(null, systemName, cubeName, null, fieldName, dimensionName, null, null);
};
oFF.QDimensionLinkKey.createLinkKeyExt = function(context, systemName, cubeName, dimensionName, fieldName)
{
	return oFF.QFactory.createCacheKeyWithDataSource(context, systemName, cubeName, null, fieldName, dimensionName, null, null);
};

oFF.QGeoColumn = function() {};
oFF.QGeoColumn.prototype = new oFF.DfNameTextObject();
oFF.QGeoColumn.prototype._ff_c = "QGeoColumn";

oFF.QGeoColumn.create = function(name, label)
{
	let newObject = new oFF.QGeoColumn();
	newObject.setupWithNameText(name, label);
	return newObject;
};
oFF.QGeoColumn.prototype.getLabel = function()
{
	return this.getText();
};

oFF.QKeyRefProxy = function() {};
oFF.QKeyRefProxy.prototype = new oFF.QKeyRef();
oFF.QKeyRefProxy.prototype._ff_c = "QKeyRefProxy";

oFF.QKeyRefProxy.createProxy = function(storage, content)
{
	let newObj = new oFF.QKeyRefProxy();
	newObj.setupExt2(content);
	newObj.m_storage = storage;
	newObj.m_content = content;
	return newObj;
};
oFF.QKeyRefProxy.createProxyWithRef = function(storage, keyRef)
{
	let newObj = new oFF.QKeyRefProxy();
	newObj.setupExt2(keyRef);
	newObj.m_storage = storage;
	return newObj;
};
oFF.QKeyRefProxy.prototype.m_content = null;
oFF.QKeyRefProxy.prototype.m_storage = null;
oFF.QKeyRefProxy.prototype.get = function()
{
	if (oFF.isNull(this.m_content) || this.m_content.isReleased() === true)
	{
		this.m_content = this.m_storage.get(this.getStorageName(), this.getStorageGroupName(), this.getStorageObjectName());
	}
	return this.m_content;
};

oFF.LovCapabilities = function() {};
oFF.LovCapabilities.prototype = new oFF.MessageManager();
oFF.LovCapabilities.prototype._ff_c = "LovCapabilities";

oFF.LovCapabilities.prototype.m_supportsSeveralDrillOperationsInVh = false;
oFF.LovCapabilities.prototype.m_supportsWildCardSearch = false;
oFF.LovCapabilities.prototype.setSupportsSeveralDrillOperationsInValueHelp = function(supportsSeveralDrillOperationsInValueHelp)
{
	this.m_supportsSeveralDrillOperationsInVh = supportsSeveralDrillOperationsInValueHelp;
};
oFF.LovCapabilities.prototype.setSupportsWildCardSearch = function(supportsWildCardSearch)
{
	this.m_supportsWildCardSearch = supportsWildCardSearch;
};
oFF.LovCapabilities.prototype.supportsSeveralDrillOperationsInValueHelp = function()
{
	return this.m_supportsSeveralDrillOperationsInVh;
};
oFF.LovCapabilities.prototype.supportsWildCardSearch = function()
{
	return this.isValid() && this.m_supportsWildCardSearch;
};

oFF.QExtendedDimension = function() {};
oFF.QExtendedDimension.prototype = new oFF.DfNameTextObject();
oFF.QExtendedDimension.prototype._ff_c = "QExtendedDimension";

oFF.QExtendedDimension.create = function(name, joinFieldName, joinFieldNameExternal)
{
	let extendedDimension = new oFF.QExtendedDimension();
	extendedDimension.setupExt(name, joinFieldName, joinFieldNameExternal);
	return extendedDimension;
};
oFF.QExtendedDimension.prototype.m_dataSource = null;
oFF.QExtendedDimension.prototype.m_dimensionType = null;
oFF.QExtendedDimension.prototype.m_dimensionVisibility = null;
oFF.QExtendedDimension.prototype.m_joinCardinality = null;
oFF.QExtendedDimension.prototype.m_joinFieldName = null;
oFF.QExtendedDimension.prototype.m_joinFieldNameExternal = null;
oFF.QExtendedDimension.prototype.m_joinParameters = null;
oFF.QExtendedDimension.prototype.m_joinType = null;
oFF.QExtendedDimension.prototype.m_locationType = null;
oFF.QExtendedDimension.prototype.m_renamingMode = null;
oFF.QExtendedDimension.prototype.getDataSource = function()
{
	return this.m_dataSource;
};
oFF.QExtendedDimension.prototype.getDimensionType = function()
{
	return this.m_dimensionType;
};
oFF.QExtendedDimension.prototype.getJoinCardinality = function()
{
	return this.m_joinCardinality;
};
oFF.QExtendedDimension.prototype.getJoinField = function()
{
	return this.m_joinFieldName;
};
oFF.QExtendedDimension.prototype.getJoinFieldNameExternal = function()
{
	return this.m_joinFieldNameExternal;
};
oFF.QExtendedDimension.prototype.getJoinParameters = function()
{
	return this.m_joinParameters;
};
oFF.QExtendedDimension.prototype.getJoinType = function()
{
	return this.m_joinType;
};
oFF.QExtendedDimension.prototype.getLocationType = function()
{
	return this.m_locationType;
};
oFF.QExtendedDimension.prototype.getRenamingMode = function()
{
	return this.m_renamingMode;
};
oFF.QExtendedDimension.prototype.getVisibility = function()
{
	return this.m_dimensionVisibility;
};
oFF.QExtendedDimension.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let otherExtDim = other;
	if (!oFF.XString.isEqual(this.getName(), otherExtDim.getName()))
	{
		return false;
	}
	if (this.getJoinType() !== otherExtDim.getJoinType())
	{
		return false;
	}
	if (this.getDimensionType() !== otherExtDim.getDimensionType())
	{
		return false;
	}
	if (!oFF.XString.isEqual(this.getJoinFieldNameExternal(), otherExtDim.getJoinFieldNameExternal()))
	{
		return false;
	}
	if (!oFF.XString.isEqual(this.getJoinField(), otherExtDim.getJoinField()))
	{
		return false;
	}
	if (!oFF.XObjectExt.areEqual(this.getDataSource(), otherExtDim.getDataSource()))
	{
		return false;
	}
	if (!oFF.XObjectExt.areEqual(this.getJoinCardinality(), otherExtDim.getJoinCardinality()))
	{
		return false;
	}
	if (!oFF.XObjectExt.areEqual(this.getVisibility(), otherExtDim.getVisibility()))
	{
		return false;
	}
	return true;
};
oFF.QExtendedDimension.prototype.releaseObject = function()
{
	this.m_dataSource = null;
	this.m_joinType = null;
	this.m_joinParameters = oFF.XObjectExt.release(this.m_joinParameters);
	this.m_dimensionType = null;
	this.m_renamingMode = null;
	this.m_joinCardinality = null;
	this.m_dimensionVisibility = null;
	this.m_locationType = null;
	oFF.DfNameTextObject.prototype.releaseObject.call( this );
};
oFF.QExtendedDimension.prototype.setDataSource = function(datasource)
{
	this.m_dataSource = datasource;
};
oFF.QExtendedDimension.prototype.setDimensionType = function(dimensionType)
{
	oFF.XObjectExt.assertNotNullExt(dimensionType, "The dimension type of an extended dimension must not be null!");
	if (dimensionType !== oFF.DimensionType.TIME && dimensionType !== oFF.DimensionType.DATE && !dimensionType.isTypeOf(oFF.DimensionType.GENERAL_VERSION) && dimensionType !== oFF.DimensionType.GIS_DIMENSION)
	{
		throw oFF.XException.createRuntimeException(oFF.XStringUtils.concatenate3("Dimension type '", dimensionType.getName(), "' is not supported for extended dimensions!"));
	}
	this.m_dimensionType = dimensionType;
};
oFF.QExtendedDimension.prototype.setJoinCardinality = function(joinCardinality)
{
	this.m_joinCardinality = joinCardinality;
};
oFF.QExtendedDimension.prototype.setJoinField = function(fieldName)
{
	this.m_joinFieldName = fieldName;
};
oFF.QExtendedDimension.prototype.setJoinFieldNameExternal = function(fieldName)
{
	this.m_joinFieldNameExternal = fieldName;
};
oFF.QExtendedDimension.prototype.setJoinType = function(joinType)
{
	this.m_joinType = joinType;
	if (this.m_joinType.isTypeOf(oFF.JoinType._SPATIAL))
	{
		this.m_dimensionType = oFF.DimensionType.GIS_DIMENSION;
	}
	else if (oFF.isNull(this.m_dimensionType))
	{
		this.m_dimensionType = oFF.DimensionType.TIME;
	}
};
oFF.QExtendedDimension.prototype.setLocationType = function(locationType)
{
	this.m_locationType = locationType;
};
oFF.QExtendedDimension.prototype.setRenamingMode = function(mode)
{
	this.m_renamingMode = mode;
};
oFF.QExtendedDimension.prototype.setVisibility = function(dimensionVisibility)
{
	this.m_dimensionVisibility = dimensionVisibility;
};
oFF.QExtendedDimension.prototype.setupExt = function(name, joinFieldName, joinFieldNameExternal)
{
	this._setupInternal(name);
	this.m_joinFieldName = joinFieldName;
	this.m_joinFieldNameExternal = joinFieldNameExternal;
	this.m_joinParameters = oFF.XList.create();
};
oFF.QExtendedDimension.prototype.toString = function()
{
	let sb = oFF.XStringBuffer.create();
	sb.append(this.getName());
	sb.append(" (");
	if (this.getJoinField() !== null)
	{
		sb.append(this.m_joinFieldName);
	}
	sb.append(" ");
	if (oFF.notNull(this.m_joinType))
	{
		sb.append(this.m_joinType.getName());
	}
	if (this.getJoinFieldNameExternal() !== null)
	{
		sb.append(this.getJoinFieldNameExternal());
	}
	if (this.getVisibility() !== null)
	{
		sb.append(this.getVisibility().getName());
	}
	sb.append(")");
	return sb.toString();
};

oFF.QPersistedPlaceholderTagFilter = function() {};
oFF.QPersistedPlaceholderTagFilter.prototype = new oFF.QPersistedPlaceholderTag();
oFF.QPersistedPlaceholderTagFilter.prototype._ff_c = "QPersistedPlaceholderTagFilter";

oFF.QPersistedPlaceholderTagFilter.CCD_ID = "ccdId";
oFF.QPersistedPlaceholderTagFilter.QM_FILTER_MODEL = "qmFilterModel";
oFF.QPersistedPlaceholderTagFilter.create = function(name, filterId, qmFilterModel, canonicalDateContext)
{
	let filterPersistedPlaceholderTag = new oFF.QPersistedPlaceholderTagFilter();
	filterPersistedPlaceholderTag.setupPersistedPlaceholderTagFilter(name, filterId, qmFilterModel, canonicalDateContext);
	return filterPersistedPlaceholderTag;
};
oFF.QPersistedPlaceholderTagFilter.createFromPlaceholderString = function(persistedPlaceholderFilterStringTag)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(persistedPlaceholderFilterStringTag))
	{
		let startDelimiter = 0;
		let endDelimiter = oFF.XString.indexOf(persistedPlaceholderFilterStringTag, "|");
		let content = oFF.XString.substring(persistedPlaceholderFilterStringTag, startDelimiter, endDelimiter);
		if (oFF.XString.isEqual(content, oFF.QPersistedPlaceholderTag.PERSISTED_QUERY_PLACEHOLDER))
		{
			startDelimiter = endDelimiter + 1;
			endDelimiter = oFF.XString.indexOfFrom(persistedPlaceholderFilterStringTag, "|", startDelimiter);
			let name = oFF.XString.substring(persistedPlaceholderFilterStringTag, startDelimiter, endDelimiter);
			let filterId = null;
			if (endDelimiter > -1)
			{
				startDelimiter = endDelimiter + 1;
				endDelimiter = oFF.XString.indexOfFrom(persistedPlaceholderFilterStringTag, "|", startDelimiter);
				filterId = oFF.XString.substring(persistedPlaceholderFilterStringTag, startDelimiter, endDelimiter);
			}
			let qmFilterModel = null;
			if (endDelimiter > -1)
			{
				startDelimiter = endDelimiter + 1;
				endDelimiter = oFF.XString.indexOfFrom(persistedPlaceholderFilterStringTag, "|", startDelimiter);
				qmFilterModel = oFF.XString.substring(persistedPlaceholderFilterStringTag, startDelimiter, endDelimiter);
			}
			let canonicalDateContext = null;
			if (endDelimiter > -1)
			{
				startDelimiter = endDelimiter + 1;
				endDelimiter = oFF.XString.indexOfFrom(persistedPlaceholderFilterStringTag, "|", startDelimiter);
				canonicalDateContext = oFF.XString.substring(persistedPlaceholderFilterStringTag, startDelimiter, endDelimiter);
			}
			return oFF.QFactory.createPersistedPlaceholderTagFilter(name, filterId, qmFilterModel, canonicalDateContext);
		}
	}
	return null;
};
oFF.QPersistedPlaceholderTagFilter.prototype.m_filterId = null;
oFF.QPersistedPlaceholderTagFilter.prototype.m_qmFilterModel = null;
oFF.QPersistedPlaceholderTagFilter.prototype.getCustomCurrentDateId = function()
{
	try
	{
		let qmFilterModel = oFF.JsonParserFactory.createFromString(this.m_qmFilterModel);
		let qmFilterModelStructure = qmFilterModel.asStructure().getStructureByKey(oFF.QPersistedPlaceholderTagFilter.QM_FILTER_MODEL);
		return qmFilterModelStructure.getStringByKey(oFF.QPersistedPlaceholderTagFilter.CCD_ID);
	}
	catch (e)
	{
		return null;
	}
};
oFF.QPersistedPlaceholderTagFilter.prototype.getFilterId = function()
{
	return this.m_filterId;
};
oFF.QPersistedPlaceholderTagFilter.prototype.getPlaceholderString = function()
{
	let tag = oFF.QPersistedPlaceholderTag.PERSISTED_QUERY_PLACEHOLDER;
	tag = oFF.XStringUtils.concatenate3(tag, "|", this.getName());
	tag = oFF.XStringUtils.concatenate3(tag, "|", this.getFilterId());
	tag = oFF.XStringUtils.concatenate3(tag, "|", this.getQmFilterModel());
	tag = oFF.XStringUtils.concatenate3(tag, "|", this.getCanonicalDateContext());
	return tag;
};
oFF.QPersistedPlaceholderTagFilter.prototype.getQmFilterModel = function()
{
	return this.m_qmFilterModel;
};
oFF.QPersistedPlaceholderTagFilter.prototype.setFilterId = function(filterId)
{
	this.m_filterId = filterId;
};
oFF.QPersistedPlaceholderTagFilter.prototype.setQmFilterModel = function(qmFilterModel)
{
	this.m_qmFilterModel = qmFilterModel;
};
oFF.QPersistedPlaceholderTagFilter.prototype.setupPersistedPlaceholderTagFilter = function(name, filterId, qmFilterModel, canonicalDateContext)
{
	oFF.QPersistedPlaceholderTag.prototype.setupPersistedPlaceholderTag.call( this , name, canonicalDateContext);
	this.m_filterId = filterId;
	this.m_qmFilterModel = qmFilterModel;
};

oFF.QVariableVariant = function() {};
oFF.QVariableVariant.prototype = new oFF.DfNameTextObject();
oFF.QVariableVariant.prototype._ff_c = "QVariableVariant";

oFF.QVariableVariant.createVariantWithScope = function(dataSource, name, text, scope)
{
	let obj = new oFF.QVariableVariant();
	obj.setupDirty(dataSource, name, text, scope);
	return obj;
};
oFF.QVariableVariant.createVariantWithScopeInternal = function(dataSource, name, text, scope)
{
	let obj = new oFF.QVariableVariant();
	obj.setupInternal(dataSource, name, text, scope);
	return obj;
};
oFF.QVariableVariant.prototype.m_dataSource = null;
oFF.QVariableVariant.prototype.m_dirtyName = null;
oFF.QVariableVariant.prototype.m_dirtyScope = null;
oFF.QVariableVariant.prototype.m_dirtyText = null;
oFF.QVariableVariant.prototype.m_scope = null;
oFF.QVariableVariant.prototype.applyState = function()
{
	this.m_name = this.m_dirtyName;
	this.m_text = this.m_dirtyText;
	this.m_scope = this.m_dirtyScope;
};
oFF.QVariableVariant.prototype.cloneExt = function(flags)
{
	return oFF.QVariableVariant.createVariantWithScopeInternal(this.getDataSource(), this.getName(), this.getText(), this.m_scope);
};
oFF.QVariableVariant.prototype.getDataSource = function()
{
	return this.m_dataSource;
};
oFF.QVariableVariant.prototype.getDirtyName = function()
{
	return this.m_dirtyName;
};
oFF.QVariableVariant.prototype.getDirtyScope = function()
{
	return this.m_dirtyScope;
};
oFF.QVariableVariant.prototype.getDirtyText = function()
{
	return this.m_dirtyText;
};
oFF.QVariableVariant.prototype.getScope = function()
{
	return this.m_scope;
};
oFF.QVariableVariant.prototype.isDirty = function()
{
	return this.isNameOrScopeDirty() || !oFF.XString.isEqual(this.m_text, this.m_dirtyText);
};
oFF.QVariableVariant.prototype.isNameOrScopeDirty = function()
{
	if (this.m_scope !== this.m_dirtyScope)
	{
		return true;
	}
	return !oFF.XString.isEqual(this.m_name, this.m_dirtyName) && this.m_scope !== oFF.Scope.USER;
};
oFF.QVariableVariant.prototype.releaseObject = function()
{
	this.m_name = null;
	this.m_text = null;
	this.m_scope = null;
	this.m_dataSource = null;
	this.m_dirtyName = null;
	this.m_dirtyText = null;
	this.m_dirtyScope = null;
	oFF.DfNameTextObject.prototype.releaseObject.call( this );
};
oFF.QVariableVariant.prototype.setDataSource = function(dataSource)
{
	this.m_dataSource = dataSource;
};
oFF.QVariableVariant.prototype.setName = function(name)
{
	this.m_dirtyName = name;
};
oFF.QVariableVariant.prototype.setScope = function(scope)
{
	this.m_dirtyScope = scope;
};
oFF.QVariableVariant.prototype.setText = function(text)
{
	this.m_dirtyText = text;
};
oFF.QVariableVariant.prototype.setupDirty = function(dataSource, name, text, scope)
{
	this.m_dataSource = dataSource;
	this.m_dirtyName = name;
	this.m_dirtyText = text;
	this.m_dirtyScope = scope;
};
oFF.QVariableVariant.prototype.setupInternal = function(dataSource, name, text, scope)
{
	this.setupWithNameText(name, text);
	this.m_dataSource = dataSource;
	this.m_scope = scope;
	this.m_dirtyName = name;
	this.m_dirtyText = text;
	this.m_dirtyScope = scope;
};

oFF.QVariableValue = function() {};
oFF.QVariableValue.prototype = new oFF.XAbstractValue();
oFF.QVariableValue.prototype._ff_c = "QVariableValue";

oFF.QVariableValue.create = function(variable)
{
	let object = new oFF.QVariableValue();
	object.setVariable(variable);
	return object;
};
oFF.QVariableValue.prototype.m_variable = null;
oFF.QVariableValue.prototype.cloneExt = function(flags)
{
	return oFF.QVariableValue.create(this.getVariable());
};
oFF.QVariableValue.prototype.getValueType = function()
{
	return oFF.XValueType.VARIABLE;
};
oFF.QVariableValue.prototype.getVariable = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_variable);
};
oFF.QVariableValue.prototype.isEqualTo = function(other)
{
	if (!oFF.XAbstractValue.prototype.isEqualTo.call( this , other))
	{
		return false;
	}
	let xOther = other;
	return this.getVariable() === xOther.getVariable();
};
oFF.QVariableValue.prototype.releaseObject = function()
{
	this.m_variable = oFF.XObjectExt.release(this.m_variable);
	oFF.XAbstractValue.prototype.releaseObject.call( this );
};
oFF.QVariableValue.prototype.resetValue = function(value)
{
	oFF.XAbstractValue.prototype.resetValue.call( this , value);
	let variableValue = value;
	this.setVariable(variableValue.getVariable());
};
oFF.QVariableValue.prototype.setVariable = function(variable)
{
	this.m_variable = oFF.XWeakReferenceUtil.getWeakRef(variable);
};
oFF.QVariableValue.prototype.toString = function()
{
	return this.m_variable.toString();
};

oFF.QVisualizationVariableProvider = function() {};
oFF.QVisualizationVariableProvider.prototype = new oFF.DfOlapEnvContext();
oFF.QVisualizationVariableProvider.prototype._ff_c = "QVisualizationVariableProvider";

oFF.QVisualizationVariableProvider.create = function()
{
	return new oFF.QVisualizationVariableProvider();
};
oFF.QVisualizationVariableProvider.prototype.exportVariables = function(variablesContext, parentStructure) {};
oFF.QVisualizationVariableProvider.prototype.importVariables = function(variablesList, variableContext) {};
oFF.QVisualizationVariableProvider.prototype.isDirectVariableTransfer = function()
{
	return true;
};
oFF.QVisualizationVariableProvider.prototype.isVariableSubmitNeeded = function()
{
	return false;
};
oFF.QVisualizationVariableProvider.prototype.isVariableValuesRuntimeNeeded = function()
{
	return false;
};
oFF.QVisualizationVariableProvider.prototype.processActivateVariableVariant = oFF.noSupport;
oFF.QVisualizationVariableProvider.prototype.processCheckVariables = oFF.noSupport;
oFF.QVisualizationVariableProvider.prototype.processDeleteVariableVariant = oFF.noSupport;
oFF.QVisualizationVariableProvider.prototype.processEmptyVariableDefinition = oFF.noSupport;
oFF.QVisualizationVariableProvider.prototype.processReInitVariableAfterSubmit = oFF.noSupport;
oFF.QVisualizationVariableProvider.prototype.processResetExitOrDynamicVariable = oFF.noSupport;
oFF.QVisualizationVariableProvider.prototype.processRetrieveVariableRuntimeInformation = oFF.noSupport;
oFF.QVisualizationVariableProvider.prototype.processSaveVariableVariant = oFF.noSupport;
oFF.QVisualizationVariableProvider.prototype.processSetGetVariableValues = oFF.noSupport;
oFF.QVisualizationVariableProvider.prototype.processUpdateDynamicVariables = oFF.noSupport;
oFF.QVisualizationVariableProvider.prototype.processUpdateVariableVariantValues = oFF.noSupport;
oFF.QVisualizationVariableProvider.prototype.processVariableCancel = oFF.noSupport;
oFF.QVisualizationVariableProvider.prototype.processVariableSubmit = oFF.noSupport;
oFF.QVisualizationVariableProvider.prototype.setDirectVariableTransfer = oFF.noSupport;
oFF.QVisualizationVariableProvider.prototype.setIsVariableSubmitNeeded = oFF.noSupport;
oFF.QVisualizationVariableProvider.prototype.supportsCheckVariables = function()
{
	return false;
};
oFF.QVisualizationVariableProvider.prototype.supportsDirectVariableTransfer = function()
{
	return true;
};
oFF.QVisualizationVariableProvider.prototype.supportsMaintainsVariableVariants = function()
{
	return false;
};
oFF.QVisualizationVariableProvider.prototype.supportsReInitVariables = function()
{
	return false;
};
oFF.QVisualizationVariableProvider.prototype.supportsVariableMasking = function()
{
	return false;
};

oFF.BlendingSource = function() {};
oFF.BlendingSource.prototype = new oFF.XObjectExt();
oFF.BlendingSource.prototype._ff_c = "BlendingSource";

oFF.BlendingSource._createPersistenceIdentifier = function(queryManager, uniqueSourceId)
{
	let queryModel = queryManager.getQueryModel();
	let baseDataSource = queryModel.getDataSource();
	let instanceId = baseDataSource.getInstanceId();
	baseDataSource.setInstanceId(null);
	let hasProcessingStep = queryModel.hasProcessingStep();
	queryModel.setHasProcessingStep(false);
	let overrideIndicator = queryModel.getShouldUseActualTextField();
	queryModel.setShouldUseActualTextField(true);
	let systemDescription = queryManager.getSystemDescription();
	let request = queryModel.serializeToString(oFF.QModelFormat.INA_DATA);
	let sourceId = oFF.notNull(uniqueSourceId) ? uniqueSourceId : "";
	let persistenceIdentifiers = oFF.XList.create();
	persistenceIdentifiers.add(oFF.BlendingSource.createPersistenceIdentifierByRequest(queryManager.getSession(), request, systemDescription, sourceId));
	let preQueriesIter = oFF.QueryModelUtils.getPreQueries(queryModel).getIterator();
	while (preQueriesIter.hasNext())
	{
		persistenceIdentifiers.add(oFF.BlendingSource._createPersistenceIdentifier(preQueriesIter.next().getObject().getQueryManager(), uniqueSourceId));
	}
	let persistenceIdentifier = persistenceIdentifiers.size() === 1 ? persistenceIdentifiers.get(0) : oFF.XSha1.createSHA1(oFF.XCollectionUtils.join(persistenceIdentifiers, ","));
	baseDataSource.setInstanceId(instanceId);
	queryModel.setHasProcessingStep(hasProcessingStep);
	queryModel.setShouldUseActualTextField(overrideIndicator);
	return persistenceIdentifier;
};
oFF.BlendingSource.create = function(queryModel, queryAliasName)
{
	oFF.XObjectExt.assertNotNullExt(queryModel, "Querymodel null");
	oFF.XStringUtils.checkStringNotEmpty(queryAliasName, "Query Alias name null");
	oFF.BlendingValidation.isQueryModelValidForBlending(queryModel, null);
	queryModel.setDefinitionName(queryAliasName);
	let source = new oFF.BlendingSource();
	source.m_queryModel = queryModel;
	source.m_queryManager = queryModel.getQueryManager();
	source.m_aliasName = queryAliasName;
	return source;
};
oFF.BlendingSource.createBasic = function()
{
	return new oFF.BlendingSource();
};
oFF.BlendingSource.createPersistenceIdentifierByRequest = function(session, request, systemDescription, blendingSourceId)
{
	if (oFF.BlendingConstants.REMOTE_BLENDING_USE_REQUEST_ONLY_FOR_ID_CALCULATION)
	{
		return oFF.XSha1.createSHA1(oFF.XStringUtils.concatenate2(request, blendingSourceId));
	}
	let user = systemDescription.getUser();
	let host = systemDescription.getHost();
	let sid = session.getSessionGuid();
	return oFF.XSha1.createSHA1(oFF.XStringUtils.concatenate5(user, request, host, sid, blendingSourceId));
};
oFF.BlendingSource.createPersistenceIdentifierForPreQuery = function(queryManager, useQueryInstanceUniqueIdentifier)
{
	return oFF.BlendingSource._createPersistenceIdentifier(queryManager, !useQueryInstanceUniqueIdentifier || oFF.BlendingConstants.REMOTE_BLENDING_USE_REQUEST_ONLY_FOR_ID_CALCULATION ? null : queryManager.getName());
};
oFF.BlendingSource.prototype.m_aliasName = null;
oFF.BlendingSource.prototype.m_delayCubeRequest = false;
oFF.BlendingSource.prototype.m_isQueryManagerOwner = false;
oFF.BlendingSource.prototype.m_isRemote = false;
oFF.BlendingSource.prototype.m_queryManager = null;
oFF.BlendingSource.prototype.m_queryModel = null;
oFF.BlendingSource.prototype.m_sourceId = null;
oFF.BlendingSource.prototype.cloneBlendingSource = function()
{
	return this.cloneExt(null);
};
oFF.BlendingSource.prototype.cloneExt = function(flags)
{
	let object = oFF.BlendingSource.createBasic();
	object.copyFrom(this, flags);
	return object;
};
oFF.BlendingSource.prototype.copyFromInternal = function(other, flags)
{
	oFF.XObjectExt.prototype.copyFromInternal.call( this , other, flags);
	let otherObj = other;
	this.setIsRemoteSource(otherObj.isRemoteSource());
	this.m_aliasName = otherObj.getQueryAliasName();
	let otherQueryModel = otherObj.getQueryModel();
	let otherQueryManager = otherQueryModel.getQueryManager();
	if (oFF.XString.containsString(flags, "~Query~"))
	{
		this.m_queryManager = otherQueryManager;
		this.m_isQueryManagerOwner = false;
	}
	else
	{
		this.m_queryManager = otherQueryManager.cloneQueryManagerExt(oFF.QueryCloneMode.CURRENT_STATE);
		this.m_isQueryManagerOwner = true;
	}
	this.m_queryModel = this.m_queryManager.getQueryModel();
	this.setDelayCubeRequest(otherObj.isDelayCubeRequest());
};
oFF.BlendingSource.prototype.getAdditionalSourceIdentifier = function(blendingHost, remoteQueryManager)
{
	if (!this.isRemoteSource() || !blendingHost.getSystemDescription().isSystemMappingValid(remoteQueryManager.getSystemDescription()))
	{
		return null;
	}
	if (oFF.XStringUtils.isNullOrEmpty(this.m_sourceId))
	{
		if (oFF.BlendingConstants.REMOTE_BLENDING_USE_REQUEST_ONLY_FOR_ID_CALCULATION)
		{
			this.m_sourceId = this.m_aliasName;
		}
		else
		{
			this.m_sourceId = oFF.XGuid.getGuid();
		}
	}
	return this.m_sourceId;
};
oFF.BlendingSource.prototype.getApplication = function()
{
	return this.m_queryModel.getApplication();
};
oFF.BlendingSource.prototype.getProcess = function()
{
	return this.m_queryModel.getProcess();
};
oFF.BlendingSource.prototype.getQueryAliasName = function()
{
	return this.m_aliasName;
};
oFF.BlendingSource.prototype.getQueryManager = function()
{
	return this.m_queryManager;
};
oFF.BlendingSource.prototype.getQueryModel = function()
{
	return this.m_queryModel;
};
oFF.BlendingSource.prototype.getRequiredRemoteExecutionPersistenceType = function(blendingHost)
{
	if (this.isRemoteSource())
	{
		let queryManager = this.getQueryModel().getQueryManager();
		let resultSetContainer = queryManager.getActiveResultSetContainer();
		if (!this.isRemoteQueryPersistenceIdentifierUpToDate(blendingHost))
		{
			return oFF.BlendingPersistenceType.ALL_DATA;
		}
		if (this.isDelayCubeRequest())
		{
			if (blendingHost.getSystemDescription().isSystemMappingValid(queryManager.getSystemDescription()))
			{
				return resultSetContainer.getResultSetPersistenceType() === oFF.BlendingPersistenceType.VIEW ? oFF.BlendingPersistenceType.CUBE : null;
			}
			if (oFF.XStringUtils.isNullOrEmpty(resultSetContainer.getSerializedCube()))
			{
				return oFF.BlendingPersistenceType.CUBE;
			}
		}
	}
	return null;
};
oFF.BlendingSource.prototype.getSession = function()
{
	return this.m_queryModel.getSession();
};
oFF.BlendingSource.prototype.invalidateCache = function()
{
	let queryModel = this.getQueryModel();
	let queryManager = queryModel.getQueryManager();
	let requiresTransientObjects = !queryModel.hasTransientObjectsGenerated();
	if (requiresTransientObjects)
	{
		queryModel.generateTransientObjects();
	}
	let persistenceIdentifier = oFF.BlendingSource._createPersistenceIdentifier(queryManager, this.m_sourceId);
	if (requiresTransientObjects)
	{
		queryModel.destroyTransientObjects();
	}
	queryManager.getOlapEnv().invalidateRemoteBlendingCacheEntry(persistenceIdentifier);
};
oFF.BlendingSource.prototype.isDelayCubeRequest = function()
{
	return this.m_delayCubeRequest;
};
oFF.BlendingSource.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let xOther = other;
	if (!oFF.XString.isEqual(this.getQueryAliasName(), xOther.getQueryAliasName()))
	{
		return false;
	}
	if (this.isRemoteSource() !== xOther.isRemoteSource())
	{
		return false;
	}
	return this.getQueryModel().isEqualTo(xOther.getQueryModel());
};
oFF.BlendingSource.prototype.isRemoteQueryPersistenceIdentifierUpToDate = function(blendingHost)
{
	let queryManager = this.getQueryModel().getQueryManager();
	let blendingSourceId = this.getAdditionalSourceIdentifier(blendingHost, queryManager);
	let currentIdentifier = queryManager.getResultSetPersistenceIdentifier();
	let newIdentifier = oFF.BlendingSource._createPersistenceIdentifier(queryManager, blendingSourceId);
	return oFF.XString.isEqual(currentIdentifier, newIdentifier);
};
oFF.BlendingSource.prototype.isRemoteSource = function()
{
	return this.m_isRemote;
};
oFF.BlendingSource.prototype.releaseObject = function()
{
	this.m_sourceId = null;
	this.m_aliasName = null;
	if (this.m_isQueryManagerOwner)
	{
		this.m_queryManager = oFF.XObjectExt.release(this.m_queryManager);
	}
	else
	{
		this.m_queryManager = null;
	}
	this.m_queryModel = null;
	oFF.XObjectExt.prototype.releaseObject.call( this );
};
oFF.BlendingSource.prototype.setDelayCubeRequest = function(delayCubeRequest)
{
	this.m_delayCubeRequest = delayCubeRequest && oFF.notNull(this.m_queryModel) && this.m_queryModel.getModelCapabilities().supportsRemoteBlendingWithSplittedSerializationRequests();
};
oFF.BlendingSource.prototype.setIsRemoteSource = function(isRemoteSource)
{
	this.m_isRemote = isRemoteSource;
};
oFF.BlendingSource.prototype.updatePersistenceIdentifier = function(blendingHost)
{
	this.updatePersistenceIdentifierOnTarget(blendingHost, this.m_queryManager);
};
oFF.BlendingSource.prototype.updatePersistenceIdentifierOnTarget = function(blendingHost, target)
{
	let queryModel = this.getQueryModel();
	queryModel.getUniversalDisplayHierarchiesBase().updateIncludedDimensions();
	let queryManager = queryModel.getQueryManager();
	queryModel.generateTransientObjects();
	queryModel.getDrillManager().checkRootNodeFetching();
	this.updateResultSetPersistenceTarget(blendingHost, queryManager);
	let blendingSourceId = this.getAdditionalSourceIdentifier(blendingHost, queryManager);
	target.setResultSetPersistenceIdentifier(oFF.BlendingSource._createPersistenceIdentifier(queryManager, blendingSourceId));
	queryModel.destroyTransientObjects();
};
oFF.BlendingSource.prototype.updateResultSetPersistenceTarget = function(blendingHost, remoteQueryManager)
{
	if (this.isRemoteSource() && oFF.notNull(blendingHost))
	{
		if (blendingHost.isSystemMappingValid(remoteQueryManager))
		{
			let systemMapping = remoteQueryManager.getSystemDescription().getSystemMapping(blendingHost.getSystemName());
			remoteQueryManager.setResultSetPersistanceTargetTable(systemMapping.getSerializeTable());
			remoteQueryManager.setResultSetPersistanceTargetSchema(systemMapping.getSerializeSchema());
		}
		else
		{
			remoteQueryManager.setResultSetPersistanceTargetTable(null);
			remoteQueryManager.setResultSetPersistanceTargetSchema(null);
		}
	}
};

oFF.QCacheAction = function() {};
oFF.QCacheAction.prototype = new oFF.SyncAction();
oFF.QCacheAction.prototype._ff_c = "QCacheAction";

oFF.QCacheAction.create = function(context)
{
	let newObj = new oFF.QCacheAction();
	newObj.setupAction(null, null, null, context);
	return newObj;
};
oFF.QCacheAction.prototype.m_primarySequenceHandle = null;
oFF.QCacheAction.prototype.attachCubeMetadataListener = function(listener, customIdentifier)
{
	this.attachListener(listener, oFF.ListenerType.SPECIFIC, customIdentifier);
};
oFF.QCacheAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onCacheFilled(extResult, data, customIdentifier);
};
oFF.QCacheAction.prototype.endProcessing = function(messages, data)
{
	this.addAllMessages(messages);
	this.setData(data);
	this.m_primarySequenceHandle = null;
	this.endSync();
};
oFF.QCacheAction.prototype.getPrimarySequenceHandle = function()
{
	return this.m_primarySequenceHandle;
};
oFF.QCacheAction.prototype.processSynchronization = function(syncType)
{
	return true;
};
oFF.QCacheAction.prototype.releaseObjectInternal = function() {};
oFF.QCacheAction.prototype.startProcessing = function(primarySequenceHandle)
{
	this.m_primarySequenceHandle = primarySequenceHandle;
	this.processSyncAction(oFF.SyncType.NON_BLOCKING, null, null);
};

oFF.QAbstractFilterAcrossModelsLovProcess = function() {};
oFF.QAbstractFilterAcrossModelsLovProcess.prototype = new oFF.SyncAction();
oFF.QAbstractFilterAcrossModelsLovProcess.prototype._ff_c = "QAbstractFilterAcrossModelsLovProcess";

oFF.QAbstractFilterAcrossModelsLovProcess.prototype.m_datasetId = null;
oFF.QAbstractFilterAcrossModelsLovProcess.prototype.m_lovConfig = null;
oFF.QAbstractFilterAcrossModelsLovProcess.prototype.computeCacheKey = oFF.noSupport;
oFF.QAbstractFilterAcrossModelsLovProcess.prototype.getDatasetId = function()
{
	return this.m_datasetId;
};
oFF.QAbstractFilterAcrossModelsLovProcess.prototype.getDatasetShortDescriptionOrName = oFF.noSupport;
oFF.QAbstractFilterAcrossModelsLovProcess.prototype.getDatasetUIName = oFF.noSupport;
oFF.QAbstractFilterAcrossModelsLovProcess.prototype.getDimensionFullExpansionValue = function(context)
{
	return context.getConvenienceCommands().isTypeOfBw() ? -2 : -1;
};
oFF.QAbstractFilterAcrossModelsLovProcess.prototype.processExecution = function(syncType, listener, customIdentifier)
{
	return this.processSyncAction(syncType, listener, customIdentifier);
};
oFF.QAbstractFilterAcrossModelsLovProcess.prototype.releaseObjectInternal = function()
{
	this.m_lovConfig = null;
	oFF.XObjectExt.release(this.getData());
};
oFF.QAbstractFilterAcrossModelsLovProcess.prototype.setupLovProcess = function(config)
{
	let listener = null;
	let context = null;
	this.setupAction(null, listener, null, context);
	this.m_lovConfig = config;
	this.m_datasetId = config.getSourceQueryManager().getQueryModel().getDatasetId();
};

oFF.QFilterAcrossModelsLov = function() {};
oFF.QFilterAcrossModelsLov.prototype = new oFF.SyncAction();
oFF.QFilterAcrossModelsLov.prototype._ff_c = "QFilterAcrossModelsLov";

oFF.QFilterAcrossModelsLov.BW_INVALID_DRILL_LEVEL_REST_NODE_DOES_NOT_EXIST_ERROR_CODE = 626;
oFF.QFilterAcrossModelsLov.EXCLUDE_SCENARIO_LOV_IDENTIFIER = "excludeScenarioLov";
oFF.QFilterAcrossModelsLov.EXTRACT_KEY = "extractKey";
oFF.QFilterAcrossModelsLov.EXTRACT_KEY_TEXT = "extractKeyAndText";
oFF.QFilterAcrossModelsLov.EXTRACT_TEXT = "extractText";
oFF.QFilterAcrossModelsLov.SOURCE_INTERVAL_VALUE_HELP_IDENTIFIER = "intervalValueHelp";
oFF.QFilterAcrossModelsLov.STANDARD_LOV_IDENTIFIER = "standardLov";
oFF.QFilterAcrossModelsLov.TARGET_HIERARCHY_VALUE_HELP_IDENTIFIER = "hierarchyValueHelp";
oFF.QFilterAcrossModelsLov.TARGET_NON_KEY_FLAT_VALUE_HELP_IDENTIFIER = "flatValueHelp";
oFF.QFilterAcrossModelsLov.VALUE_HELP_IDENTIFIER_DIMENSION_NAME_INDEX = 2;
oFF.QFilterAcrossModelsLov.VALUE_HELP_IDENTIFIER_EXTRACT_INDEX = 1;
oFF.QFilterAcrossModelsLov.VALUE_HELP_IDENTIFIER_TYPE_INDEX = 0;
oFF.QFilterAcrossModelsLov.create = function(lovConfig)
{
	let lov = new oFF.QFilterAcrossModelsLov();
	lov.setupFilterAcrossModelsLov(lovConfig);
	return lov;
};
oFF.QFilterAcrossModelsLov.prototype.m_excludeScenarioQueryManager = null;
oFF.QFilterAcrossModelsLov.prototype.m_hasExecutedLovQuery = false;
oFF.QFilterAcrossModelsLov.prototype.m_indirectFilterExcludeScenarioLovResult = null;
oFF.QFilterAcrossModelsLov.prototype.m_indirectFilterStandardLovResult = null;
oFF.QFilterAcrossModelsLov.prototype.m_lovCacheKeys = null;
oFF.QFilterAcrossModelsLov.prototype.m_lovCacheManager = null;
oFF.QFilterAcrossModelsLov.prototype.m_lovConfig = null;
oFF.QFilterAcrossModelsLov.prototype.m_pendingValueHelpQueries = 0;
oFF.QFilterAcrossModelsLov.prototype.m_sourceFiltersUpdatedMembers = null;
oFF.QFilterAcrossModelsLov.prototype.m_sourceIntervalDimensionMembers = null;
oFF.QFilterAcrossModelsLov.prototype.m_sourceQueryManager = null;
oFF.QFilterAcrossModelsLov.prototype.m_targetDimensionHierarchyMembers = null;
oFF.QFilterAcrossModelsLov.prototype.m_targetDimensionTextToKeyMapOfMembers = null;
oFF.QFilterAcrossModelsLov.prototype.m_targetQueryManager = null;
oFF.QFilterAcrossModelsLov.prototype.addIncompleteResultWarning = function(resultSetContainer)
{
	if (oFF.isNull(resultSetContainer) || !resultSetContainer.hasMoreRowRecordsAvailable())
	{
		return;
	}
	let sourceFilters = this.m_lovConfig.getNonEmptySourceFilters();
	let filterDimensionNames = oFF.XHashSetOfString.create();
	let iterator = sourceFilters.getKeysAsIterator();
	while (iterator.hasNext())
	{
		let sourceFilterKey = iterator.next();
		let sourceFilter = sourceFilters.getByKey(sourceFilterKey);
		let filters = oFF.QFilterAcrossModelsFilterUtil.collectApplicableSourceFilters(sourceFilter.getFilterRootElement());
		for (let i = 0; i < filters.size(); i++)
		{
			let filter = filters.get(i);
			let dimension = oFF.QFilterAcrossModelsFilterUtil.getDimensionFromFilterElement(this.m_sourceQueryManager, this.m_lovConfig.getDimensionLinks(), filter);
			if (oFF.notNull(dimension))
			{
				let dimensionName = dimension.getName();
				if (oFF.XStringUtils.isNotNullAndNotEmpty(dimension.getText()))
				{
					dimensionName = dimension.getText();
				}
				filterDimensionNames.add(dimensionName);
			}
		}
	}
	let sourceDatasetName = null;
	let datasetEpmObject = this.m_sourceQueryManager.getQueryModel().getDatasetEpmObject();
	if (oFF.notNull(datasetEpmObject))
	{
		sourceDatasetName = datasetEpmObject.getUIName();
	}
	let messageDimensionNames = "";
	let nameIterator = filterDimensionNames.getIterator();
	while (nameIterator.hasNext())
	{
		let name = nameIterator.next();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(messageDimensionNames))
		{
			messageDimensionNames = oFF.XStringUtils.concatenate2(messageDimensionNames, ", ");
		}
		if (oFF.XStringUtils.isNotNullAndNotEmpty(sourceDatasetName))
		{
			messageDimensionNames = oFF.XStringUtils.concatenate4(messageDimensionNames, sourceDatasetName, ".", name);
		}
		else
		{
			messageDimensionNames = oFF.XStringUtils.concatenate2(messageDimensionNames, name);
		}
	}
	let errorMsgArgs = oFF.XList.create();
	errorMsgArgs.add(messageDimensionNames);
	if (oFF.XString.isEqual(resultSetContainer.getQueryModel().getName(), this.m_targetQueryManager.getQueryModel().getName()))
	{
		this.addInfo(oFF.ErrorCodes.FILTER_ACROSS_MODEL_INCOMPLETE_TARGET_RESULT_WARNING, oFF.ErrorMessages.getText(oFF.ErrorMessages.FILTER_ACROSS_MODEL_INCOMPLETE_TARGET_RESULT_WARNING, errorMsgArgs, null, null));
	}
	else
	{
		this.addInfo(oFF.ErrorCodes.FILTER_ACROSS_MODEL_INCOMPLETE_RESULT_WARNING, oFF.ErrorMessages.getText(oFF.ErrorMessages.FILTER_ACROSS_MODEL_INCOMPLETE_RESULT_WARNING, errorMsgArgs, null, null));
	}
};
oFF.QFilterAcrossModelsLov.prototype.addInvalidDrillLevelNoRestNodeError = function()
{
	let hierarchyNames = "";
	let sourceQueryModel = this.m_sourceQueryManager.getQueryModel();
	let linkParts = oFF.QFilterAcrossModelsLinkUtil.getAllLinkPartsForContext(this.m_lovConfig.getDimensionLinks(), sourceQueryModel);
	let sourceDatasetName = null;
	let datasetEpmObject = sourceQueryModel.getDatasetEpmObject();
	if (oFF.notNull(datasetEpmObject))
	{
		sourceDatasetName = datasetEpmObject.getUIName();
	}
	for (let i = 0; i < linkParts.size(); i++)
	{
		let linkPart = linkParts.get(i);
		if (linkPart.isHierarchical())
		{
			if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyNames))
			{
				hierarchyNames = oFF.XStringUtils.concatenate2(hierarchyNames, ", ");
			}
			if (oFF.XStringUtils.isNotNullAndNotEmpty(sourceDatasetName))
			{
				hierarchyNames = oFF.XStringUtils.concatenate3(hierarchyNames, sourceDatasetName, ".");
			}
			let dimensionName = linkPart.getDimensionName();
			let linkDimension = sourceQueryModel.getDimensionByName(linkPart.getDimensionName());
			if (oFF.notNull(linkDimension) && oFF.XStringUtils.isNotNullAndNotEmpty(linkDimension.getText()))
			{
				dimensionName = linkDimension.getText();
			}
			hierarchyNames = oFF.XStringUtils.concatenate4(hierarchyNames, dimensionName, ".", linkPart.getHierarchyName());
		}
	}
	let errorMsgArgs = oFF.XList.create();
	errorMsgArgs.add(hierarchyNames);
	this.addWarning(oFF.ErrorCodes.FILTER_ACROSS_MODEL_LOV_INVALID_DRILL_LEVEL_REST_NODE_DOES_NOT_EXIST, oFF.ErrorMessages.getText(oFF.ErrorMessages.FILTER_ACROSS_MODEL_LOV_INVALID_DRILL_LEVEL_REST_NODE_DOES_NOT_EXIST, errorMsgArgs, null, null));
};
oFF.QFilterAcrossModelsLov.prototype.addSharedCalcDimsInLinksToSourceQueryModel = function()
{
	let sourceQueryModel = this.m_sourceQueryManager.getQueryModel();
	let linkParts = oFF.QFilterAcrossModelsLinkUtil.getAllLinkPartsForContext(this.m_lovConfig.getDimensionLinks(), sourceQueryModel);
	for (let i = 0; i < linkParts.size(); i++)
	{
		let linkPart = linkParts.get(i);
		let linkedDimension = sourceQueryModel.getDimensionByName(linkPart.getDimensionName());
		if (oFF.isNull(linkedDimension))
		{
			linkedDimension = this.createCalcDimFromSharedContext(sourceQueryModel, linkPart);
			sourceQueryModel.addDimension(linkedDimension);
		}
	}
};
oFF.QFilterAcrossModelsLov.prototype.areAllIndirectLovFiltersExclude = function()
{
	let lovFilters = this.m_lovConfig.getTransformedSourceFiltersForLov();
	for (let i = 0; i < lovFilters.size(); i++)
	{
		let lovFilter = lovFilters.get(i);
		if (!oFF.QFilterAcrossModelsFilterUtil.isDirectFilterElement(this.m_sourceQueryManager, this.m_targetQueryManager, this.m_lovConfig.getDimensionLinks(), lovFilter) && !oFF.QFilterAcrossModelsFilterUtil.isFilterAllIncludeOrAllExclude(lovFilter, oFF.SetSign.EXCLUDING))
		{
			return false;
		}
	}
	return true;
};
oFF.QFilterAcrossModelsLov.prototype.areAllQueriesComplete = function()
{
	return this.m_pendingValueHelpQueries === 0 && (!this.requiresIndirectFilterStandardLovQuery() || oFF.notNull(this.m_sourceQueryManager) && oFF.notNull(this.m_indirectFilterStandardLovResult)) && (!this.requiresIndirectExcludeScenarioLovQuery() || oFF.notNull(this.m_excludeScenarioQueryManager) && oFF.notNull(this.m_indirectFilterExcludeScenarioLovResult));
};
oFF.QFilterAcrossModelsLov.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onQueryExecuted(extResult, data, customIdentifier);
};
oFF.QFilterAcrossModelsLov.prototype.clearLovCacheKeys = function()
{
	this.m_lovCacheKeys.clear();
};
oFF.QFilterAcrossModelsLov.prototype.copyFromInternal = function(other, flags)
{
	oFF.SyncAction.prototype.copyFrom.call( this , other, flags);
	let originFilterAcrossModelsLov = other;
	this.m_sourceQueryManager = originFilterAcrossModelsLov.m_sourceQueryManager;
	this.m_targetQueryManager = originFilterAcrossModelsLov.m_targetQueryManager;
	this.m_lovConfig = originFilterAcrossModelsLov.m_lovConfig;
	this.clearLovCacheKeys();
};
oFF.QFilterAcrossModelsLov.prototype.createCalcDimFromSharedContext = function(context, linkPart)
{
	let storageName = oFF.QFilterAcrossModelsLinkUtil.getSharedLinkStorageName(this.m_lovConfig.getDimensionLinks(), linkPart);
	let calcDimProperties = context.getOlapEnv().getClientQueryObjectManager().getFormulaCalcDimProperties(linkPart.getDimensionName(), storageName);
	let calcDim = oFF.QFactory.createFormulaCalculatedDimension(context, linkPart.getDimensionName());
	calcDim.setPropertiesKeyRef(calcDimProperties);
	return calcDim;
};
oFF.QFilterAcrossModelsLov.prototype.disableUniversalDisplayHierarchies = function(queryManager)
{
	let universalDisplayHierarchies = queryManager.getQueryModel().getUniversalDisplayHierarchies();
	if (oFF.notNull(universalDisplayHierarchies))
	{
		let udhIterator = universalDisplayHierarchies.getHierarchies().getIterator();
		while (udhIterator.hasNext())
		{
			udhIterator.next().setActive(false);
		}
	}
};
oFF.QFilterAcrossModelsLov.prototype.getFilterUpdatedMembersList = function(filterKey)
{
	return this.m_sourceFiltersUpdatedMembers.getByKey(filterKey);
};
oFF.QFilterAcrossModelsLov.prototype.getFlatTargetDimensionMatchingMemberKeysFromText = function(targetLinkedDimensionName, memberText)
{
	let textToKeys = this.m_targetDimensionTextToKeyMapOfMembers.getByKey(targetLinkedDimensionName);
	if (oFF.notNull(textToKeys) && textToKeys.containsKey(memberText))
	{
		return textToKeys.getByKey(memberText).getValuesAsReadOnlyList();
	}
	return null;
};
oFF.QFilterAcrossModelsLov.prototype.getHierarchicalTargetDimensionMembersList = function(dimensionName)
{
	let result = this.m_targetDimensionHierarchyMembers.getByKey(dimensionName);
	if (oFF.isNull(result))
	{
		return null;
	}
	return result.getValuesAsReadOnlyList();
};
oFF.QFilterAcrossModelsLov.prototype.getIndirectFilterExcludeScenarioLovQueryResult = function()
{
	return this.m_indirectFilterExcludeScenarioLovResult;
};
oFF.QFilterAcrossModelsLov.prototype.getIndirectFilterStandardLovQueryResult = function()
{
	return this.m_indirectFilterStandardLovResult;
};
oFF.QFilterAcrossModelsLov.prototype.getIntervalTargetDimensionMembersList = function(dimensionName)
{
	let result = this.m_sourceIntervalDimensionMembers.getByKey(dimensionName);
	if (oFF.isNull(result))
	{
		return null;
	}
	return result.getValuesAsReadOnlyList();
};
oFF.QFilterAcrossModelsLov.prototype.hasExecutedDependentLovQueries = function()
{
	return this.m_hasExecutedLovQuery;
};
oFF.QFilterAcrossModelsLov.prototype.isDimensionMemberListNotAvailableOrHierarchicalMemberExists = function(targetLinkedDimensionName, hierarchicalMemberKey)
{
	let members = this.m_targetDimensionHierarchyMembers.getByKey(targetLinkedDimensionName);
	return oFF.isNull(members) || members.contains(hierarchicalMemberKey);
};
oFF.QFilterAcrossModelsLov.prototype.onQueryExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	if (this.isReleased())
	{
		return;
	}
	let customStringIdentifier = customIdentifier;
	if (oFF.XString.isEqual(customStringIdentifier.getString(), oFF.QFilterAcrossModelsLov.STANDARD_LOV_IDENTIFIER))
	{
		this.m_indirectFilterStandardLovResult = extResult;
	}
	else
	{
		this.m_indirectFilterExcludeScenarioLovResult = extResult;
	}
	this.onQueryOrValueHelpExecuted(extResult, resultSetContainer);
};
oFF.QFilterAcrossModelsLov.prototype.onQueryOrValueHelpExecuted = function(messages, resultSetContainer)
{
	this.m_hasExecutedLovQuery = true;
	let messagesIterator = messages.getMessages().getIterator();
	while (messagesIterator.hasNext())
	{
		let message = messagesIterator.next();
		if (message.getSeverity() === oFF.Severity.ERROR && message.getCode() === oFF.QFilterAcrossModelsLov.BW_INVALID_DRILL_LEVEL_REST_NODE_DOES_NOT_EXIST_ERROR_CODE)
		{
			this.addInvalidDrillLevelNoRestNodeError();
		}
		else
		{
			this.addMessage(message);
		}
	}
	this.addIncompleteResultWarning(resultSetContainer);
	if (this.areAllQueriesComplete() || this.hasErrors())
	{
		this.endSync();
	}
};
oFF.QFilterAcrossModelsLov.prototype.onValuehelpExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	if (this.isReleased())
	{
		return;
	}
	this.m_pendingValueHelpQueries--;
	if (extResult.hasErrors())
	{
		this.onQueryOrValueHelpExecuted(extResult, resultSetContainer);
		return;
	}
	let identifierParts = customIdentifier;
	let isTargetHierarchyValueHelp = oFF.XString.isEqual(identifierParts.get(oFF.QFilterAcrossModelsLov.VALUE_HELP_IDENTIFIER_TYPE_INDEX), oFF.QFilterAcrossModelsLov.TARGET_HIERARCHY_VALUE_HELP_IDENTIFIER);
	let isTargetFlatValueHelp = oFF.XString.isEqual(identifierParts.get(oFF.QFilterAcrossModelsLov.VALUE_HELP_IDENTIFIER_TYPE_INDEX), oFF.QFilterAcrossModelsLov.TARGET_NON_KEY_FLAT_VALUE_HELP_IDENTIFIER);
	let isSourceIntervalValueHelp = oFF.XString.isEqual(identifierParts.get(oFF.QFilterAcrossModelsLov.VALUE_HELP_IDENTIFIER_TYPE_INDEX), oFF.QFilterAcrossModelsLov.SOURCE_INTERVAL_VALUE_HELP_IDENTIFIER);
	let resultValueHelpNodes = extResult.getData();
	let resultKeysOrText = null;
	let resultTextToKeys = null;
	if (isTargetHierarchyValueHelp || isSourceIntervalValueHelp)
	{
		resultKeysOrText = oFF.XHashSetOfString.create();
	}
	else if (isTargetFlatValueHelp)
	{
		resultTextToKeys = oFF.XHashMapByString.create();
	}
	else
	{
		resultKeysOrText = oFF.XList.create();
	}
	let valueHelpDimensionName = identifierParts.get(oFF.QFilterAcrossModelsLov.VALUE_HELP_IDENTIFIER_DIMENSION_NAME_INDEX);
	for (let i = 0; i < resultValueHelpNodes.size(); i++)
	{
		let valueHelpNode = resultValueHelpNodes.get(i);
		let nodeKey = valueHelpNode.getName();
		let nodeText = valueHelpNode.getDimensionMember().getText();
		if (oFF.XString.isEqual(identifierParts.get(oFF.QFilterAcrossModelsLov.VALUE_HELP_IDENTIFIER_EXTRACT_INDEX), oFF.QFilterAcrossModelsLov.EXTRACT_KEY) && oFF.notNull(resultKeysOrText))
		{
			resultKeysOrText.add(nodeKey);
		}
		else if (oFF.XString.isEqual(identifierParts.get(oFF.QFilterAcrossModelsLov.VALUE_HELP_IDENTIFIER_EXTRACT_INDEX), oFF.QFilterAcrossModelsLov.EXTRACT_TEXT) && oFF.notNull(resultKeysOrText))
		{
			resultKeysOrText.add(nodeText);
		}
		else if (oFF.notNull(resultTextToKeys))
		{
			if (!resultTextToKeys.containsKey(nodeText))
			{
				resultTextToKeys.put(nodeText, oFF.XHashSetOfString.create());
			}
			resultTextToKeys.getByKey(nodeText).add(nodeKey);
		}
	}
	if (isTargetHierarchyValueHelp)
	{
		this.m_targetDimensionHierarchyMembers.put(valueHelpDimensionName, resultKeysOrText);
	}
	else if (isTargetFlatValueHelp)
	{
		this.m_targetDimensionTextToKeyMapOfMembers.put(valueHelpDimensionName, resultTextToKeys);
	}
	else if (isSourceIntervalValueHelp)
	{
		this.m_sourceIntervalDimensionMembers.put(valueHelpDimensionName, resultKeysOrText);
	}
	else
	{
		this.m_sourceFiltersUpdatedMembers.put(identifierParts.get(oFF.QFilterAcrossModelsLov.VALUE_HELP_IDENTIFIER_TYPE_INDEX), resultKeysOrText);
	}
	oFF.XObjectExt.release(customIdentifier);
	this.onQueryOrValueHelpExecuted(extResult, resultSetContainer);
};
oFF.QFilterAcrossModelsLov.prototype.onVariableProcessorExecuted = function(extResult, result, customIdentifier)
{
	if (this.isReleased())
	{
		return;
	}
	this.addAllMessages(extResult);
	if (extResult.hasErrors())
	{
		this.endSync();
		return;
	}
	this.processSynchronization(this.getActiveSyncType());
};
oFF.QFilterAcrossModelsLov.prototype.processApplicableSourceValueHelpQueries = function(syncType)
{
	let sourceFilters = this.m_lovConfig.getNonEmptySourceFilters();
	let iterator = sourceFilters.getKeysAsIterator();
	while (iterator.hasNext())
	{
		let sourceFilterKey = iterator.next();
		let sourceFilter = sourceFilters.getByKey(sourceFilterKey);
		if (!oFF.QFilterAcrossModelsFilterUtil.isDirectFilterElement(this.m_sourceQueryManager, this.m_targetQueryManager, this.m_lovConfig.getDimensionLinks(), sourceFilter.getFilterRootElement()))
		{
			continue;
		}
		let cartesianLists = oFF.QFilterUtil.collectAllCartesianLists(sourceFilter.getFilterRootElement());
		for (let i = 0; i < cartesianLists.size(); i++)
		{
			let cartesianList = cartesianLists.get(i);
			if (oFF.XStringUtils.isNullOrEmpty(cartesianList.getDimensionName()))
			{
				continue;
			}
			let isOpenEndedTimeCartesianList = oFF.QFilterAcrossModelsFilterUtil.isOpenEndedTimeCartesianList(this.m_sourceQueryManager, this.m_lovConfig.getDimensionLinks(), cartesianList);
			let filterDimension = this.m_sourceQueryManager.getDimensionAccessor().getDimensionByName(cartesianList.getDimensionName());
			if (oFF.isNull(filterDimension))
			{
				continue;
			}
			if (isOpenEndedTimeCartesianList)
			{
				let level = oFF.QTimeDimensionUtil.findAnyHierarchyLevelMatchingField(filterDimension, filterDimension.getFlatKeyField().getMetadata());
				let levelDimension = this.m_sourceQueryManager.getDimensionAccessor().getDimensionByName(level.getLevelDimensionName());
				if (oFF.notNull(levelDimension))
				{
					filterDimension = levelDimension;
				}
			}
			let isIncludeHierarchyNodeChildrenSettingOn = oFF.QFilterAcrossModelsFilterUtil.isFilterDimensionLinkedWithIncludeHierarchyNodeChildrenSettingOn(this.m_sourceQueryManager, this.m_lovConfig.getDimensionLinks(), cartesianList);
			let isFilterOnKeyButLinkedOnFlatDescription = oFF.QFilterAcrossModelsFilterUtil.isFilterDimensionLinkedOnFlatDescription(this.m_sourceQueryManager, this.m_lovConfig.getDimensionLinks(), cartesianList);
			if (isIncludeHierarchyNodeChildrenSettingOn && cartesianLists.size() === 1 || isFilterOnKeyButLinkedOnFlatDescription || isOpenEndedTimeCartesianList)
			{
				let customIdentifier = oFF.XList.create();
				let extractField = oFF.QFilterAcrossModelsLov.EXTRACT_KEY;
				let lovProcess = oFF.QFilterAcrossModelsDimensionMemberLovProcess.create(this.m_lovConfig, filterDimension);
				if (isOpenEndedTimeCartesianList)
				{
					lovProcess.setSelectorField(filterDimension.getFlatKeyField());
					lovProcess.setIsInterval(true);
					let openEndedTimeLovProcessFilterContext = oFF.QFactory.createFilterCartesianListWithField(null, filterDimension.getFlatKeyField());
					openEndedTimeLovProcessFilterContext.setUniqueId("openEndedTimeFilter");
					let elem = openEndedTimeLovProcessFilterContext.addNewCartesianElement();
					elem.configureSingleParameterExpression(oFF.XStringValue.create("0001-01-01"), oFF.ComparisonOperator.GREATER_THAN);
					lovProcess.setFilterContext(openEndedTimeLovProcessFilterContext);
					customIdentifier.add(oFF.QFilterAcrossModelsLov.SOURCE_INTERVAL_VALUE_HELP_IDENTIFIER);
					customIdentifier.add(oFF.QFilterAcrossModelsLov.EXTRACT_KEY);
				}
				else
				{
					if (isIncludeHierarchyNodeChildrenSettingOn)
					{
						if (this.m_sourceQueryManager.getConvenienceCommands().isTypeOfBw())
						{
							oFF.noSupport();
						}
						if (oFF.XStringUtils.isNullOrEmpty(cartesianList.getHierarchyName()) || oFF.QFilterAcrossModelsDimensionUtil.getHierarchyLevelCount(filterDimension, cartesianList.getHierarchyName()) <= 1)
						{
							continue;
						}
						lovProcess.setSelectorField(filterDimension.getHierarchyKeyField());
						lovProcess.setHierarchyName(cartesianList.getHierarchyName());
						lovProcess.setIsFullExpansion(true);
					}
					else if (isFilterOnKeyButLinkedOnFlatDescription)
					{
						lovProcess.setSelectorField(filterDimension.getFlatTextField());
						extractField = oFF.QFilterAcrossModelsLov.EXTRACT_TEXT;
					}
					lovProcess.setFilterContext(cartesianList);
					customIdentifier.add(cartesianList.getUniqueId());
					customIdentifier.add(extractField);
				}
				customIdentifier.add(filterDimension.getName());
				this.processValueHelpQuery(syncType, customIdentifier, lovProcess);
			}
		}
	}
};
oFF.QFilterAcrossModelsLov.prototype.processApplicableTargetValueHelpQueries = function(syncType)
{
	if (!this.m_targetQueryManager.getConvenienceCommands().isTypeOfBw())
	{
		return;
	}
	let allLinks = this.m_lovConfig.getDimensionLinks();
	let targetLinkedDimensionNames = oFF.QFilterAcrossModelsLinkUtil.getAllDimensionNamesForContext(allLinks, this.m_targetQueryManager);
	let clonedTargetQm = this.m_targetQueryManager.cloneQueryManagerOptimized(targetLinkedDimensionNames).getQueryModel();
	let cmds = clonedTargetQm.getConvenienceCommands();
	let cmdResetConfiguration = cmds.createResetConfiguration();
	cmdResetConfiguration.setSkipResetCustomMembers(true);
	cmdResetConfiguration.setSkipResetConditions(true);
	cmds.resetWithOptions(cmdResetConfiguration);
	let targetLinkParts = oFF.QFilterAcrossModelsLinkUtil.getAllLinkPartsForContext(allLinks, this.m_targetQueryManager).createListCopy();
	let sourceFilters = this.m_lovConfig.getNonEmptySourceFilters();
	if (oFF.QFilterAcrossModelsFilterUtil.areAllFiltersDirect(this.m_sourceQueryManager, this.m_targetQueryManager, allLinks, sourceFilters.getValuesAsReadOnlyList()))
	{
		let sourceDimensionNames = oFF.XHashSetOfString.create();
		targetLinkParts = oFF.XList.create();
		let sourceFilterIterator = sourceFilters.getKeysAsIterator();
		while (sourceFilterIterator.hasNext())
		{
			let sourceFilterKey = sourceFilterIterator.next();
			let sourceFilter = sourceFilters.getByKey(sourceFilterKey);
			sourceDimensionNames.addAll(sourceFilter.getDimensionsUsedInFilter());
		}
		let sourceDimensionNamesIt = sourceDimensionNames.getIterator();
		while (sourceDimensionNamesIt.hasNext())
		{
			let sourceDimensionName = sourceDimensionNamesIt.next();
			let sourceDimension = this.m_sourceQueryManager.getQueryModel().getDimensionByName(sourceDimensionName);
			let targetLinkPart = oFF.notNull(sourceDimension) ? oFF.QFilterAcrossModelsLinkUtil.getLinkCounterPartFromDimensionOrFieldKey(allLinks, sourceDimension) : null;
			if (oFF.notNull(targetLinkPart))
			{
				targetLinkParts.add(targetLinkPart);
			}
		}
	}
	for (let i = 0; i < targetLinkParts.size(); i++)
	{
		let linkPart = targetLinkParts.get(i);
		let link = linkPart.getParent();
		let linkedDimension = clonedTargetQm.getDimensionByName(linkPart.getDimensionName());
		if (oFF.isNull(linkedDimension))
		{
			continue;
		}
		let linkedField = clonedTargetQm.getFieldByNameOrAlias(linkPart.getFieldName());
		if (oFF.isNull(linkedField))
		{
			continue;
		}
		let isHierarchyValueHelpRequired = linkPart.isHierarchical() && !link.arePartsLinkedOnSameHierarchy();
		let isFlatValueHelpRequired = !linkedField.isKeyField();
		if (!isHierarchyValueHelpRequired && !isFlatValueHelpRequired)
		{
			continue;
		}
		let customIdentifier = oFF.XList.create();
		let lovProcess = oFF.QFilterAcrossModelsDimensionMemberLovProcess.create(this.m_lovConfig, linkedDimension);
		lovProcess.setSelectorField(linkedField);
		if (linkPart.isHierarchical())
		{
			lovProcess.setHierarchyName(linkPart.getHierarchyName());
			lovProcess.setIsFullExpansion(true);
			customIdentifier.add(oFF.QFilterAcrossModelsLov.TARGET_HIERARCHY_VALUE_HELP_IDENTIFIER);
			customIdentifier.add(oFF.QFilterAcrossModelsLov.EXTRACT_KEY);
		}
		else
		{
			customIdentifier.add(oFF.QFilterAcrossModelsLov.TARGET_NON_KEY_FLAT_VALUE_HELP_IDENTIFIER);
			customIdentifier.add(oFF.QFilterAcrossModelsLov.EXTRACT_KEY_TEXT);
		}
		customIdentifier.add(linkedDimension.getName());
		this.processValueHelpQuery(syncType, customIdentifier, lovProcess);
	}
};
oFF.QFilterAcrossModelsLov.prototype.processApplicableValueHelpQueries = function(syncType)
{
	this.m_pendingValueHelpQueries = 0;
	this.processApplicableSourceValueHelpQueries(syncType);
	this.processApplicableTargetValueHelpQueries(syncType);
};
oFF.QFilterAcrossModelsLov.prototype.processExecution = function(syncType, listener, customIdentifier)
{
	this.processSyncAction(syncType, listener, customIdentifier);
	return this;
};
oFF.QFilterAcrossModelsLov.prototype.processIndirectScenarioLovQuery = function(syncType, listener, customIdentifier, isExcludeScenario)
{
	let result = null;
	if (isExcludeScenario)
	{
		if (oFF.notNull(this.m_excludeScenarioQueryManager))
		{
			this.m_excludeScenarioQueryManager = oFF.XObjectExt.release(this.m_excludeScenarioQueryManager);
		}
		this.m_excludeScenarioQueryManager = this.m_sourceQueryManager.cloneQueryManagerExt(oFF.QueryCloneMode.CURRENT_STATE);
	}
	let queryManagerToUse = isExcludeScenario ? this.m_excludeScenarioQueryManager : this.m_sourceQueryManager;
	let lovProcess = oFF.QFilterAcrossModelsIndirectScenarioLovProcess.create(this.m_lovConfig, queryManagerToUse, isExcludeScenario);
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.FILTER_ACROSS_MODELS_LOV_CACHE))
	{
		let processCacheKey = lovProcess.computeCacheKey();
		this.m_lovCacheKeys.add(processCacheKey);
		if (this.m_lovCacheManager.containsResultSetEntry(processCacheKey))
		{
			let cachedProcess = this.m_lovCacheManager.getResultSetEntry(processCacheKey);
			cachedProcess.attachListener(listener, oFF.ListenerType.SPECIFIC, customIdentifier);
			result = cachedProcess;
		}
		else
		{
			this.m_lovCacheManager.putResultSetEntry(processCacheKey, lovProcess);
			result = lovProcess.processExecution(syncType, listener, customIdentifier);
		}
	}
	else
	{
		result = lovProcess.processExecution(syncType, listener, customIdentifier);
	}
	return result;
};
oFF.QFilterAcrossModelsLov.prototype.processSynchronization = function(syncType)
{
	this.m_hasExecutedLovQuery = false;
	let requiresIndirectFilterStandardLovQuery = this.requiresIndirectFilterStandardLovQuery();
	let requiresIndirectExcludeScenarioLovQuery = this.requiresIndirectExcludeScenarioLovQuery();
	if (requiresIndirectFilterStandardLovQuery && this.m_sourceQueryManager.variablesRequireImplicitSubmit())
	{
		this.m_sourceQueryManager.submitVariables(syncType, this, null);
		return true;
	}
	if (requiresIndirectExcludeScenarioLovQuery && !oFF.QFilterAcrossModelsLinkUtil.doAllLinkedDimensionsSupportExcludeFilters(this.m_lovConfig.getDimensionLinks(), this.m_targetQueryManager))
	{
		let errorMsgArgs = oFF.XList.create();
		this.addError(oFF.ErrorCodes.FILTER_ACROSS_MODEL_TARGET_MISSING_EXCLUDE_FILTER_CAPABILITY, oFF.ErrorMessages.getText(oFF.ErrorMessages.FILTER_ACROSS_MODEL_TARGET_MISSING_EXCLUDE_FILTER_CAPABILITY, errorMsgArgs, null, null));
		return false;
	}
	this.m_sourceQueryManager.getOlapEnv().getFilterManager().pruneExternalizedDynamicFilter(this.m_sourceQueryManager);
	this.addSharedCalcDimsInLinksToSourceQueryModel();
	this.processApplicableValueHelpQueries(syncType);
	if (requiresIndirectFilterStandardLovQuery)
	{
		this.processIndirectScenarioLovQuery(syncType, this, oFF.XStringValue.create(oFF.QFilterAcrossModelsLov.STANDARD_LOV_IDENTIFIER), false);
	}
	if (requiresIndirectExcludeScenarioLovQuery)
	{
		this.processIndirectScenarioLovQuery(syncType, this, oFF.XStringValue.create(oFF.QFilterAcrossModelsLov.EXCLUDE_SCENARIO_LOV_IDENTIFIER), true);
	}
	return !this.areAllQueriesComplete();
};
oFF.QFilterAcrossModelsLov.prototype.processValueHelpQuery = function(syncType, customIdentifier, lovProcess)
{
	this.m_pendingValueHelpQueries++;
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.FILTER_ACROSS_MODELS_LOV_CACHE))
	{
		let processCacheKey = lovProcess.computeCacheKey();
		this.m_lovCacheKeys.add(processCacheKey);
		if (this.m_lovCacheManager.containsValueHelpEntry(processCacheKey))
		{
			let cachedProcess = this.m_lovCacheManager.getValueHelpEntry(processCacheKey);
			cachedProcess.attachListener(this, oFF.ListenerType.SPECIFIC, customIdentifier);
		}
		else
		{
			this.m_lovCacheManager.putValueHelpEntry(processCacheKey, lovProcess);
			lovProcess.processExecution(syncType, this, customIdentifier);
		}
	}
	else
	{
		lovProcess.processExecution(syncType, this, customIdentifier);
	}
};
oFF.QFilterAcrossModelsLov.prototype.releaseObjectInternal = function()
{
	this.endSync();
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.FILTER_ACROSS_MODELS_LOV_CACHE))
	{
		let lovCacheKeysIterator = this.m_lovCacheKeys.getIterator();
		while (lovCacheKeysIterator.hasNext())
		{
			let cacheKey = lovCacheKeysIterator.next();
			this.m_lovCacheManager.removeResultSetEntry(cacheKey);
			this.m_lovCacheManager.removeValueHelpEntry(cacheKey);
		}
	}
	this.m_lovCacheKeys = oFF.XObjectExt.release(this.m_lovCacheKeys);
	this.m_lovCacheManager = null;
	this.m_sourceQueryManager = null;
	this.m_targetQueryManager = null;
	this.m_lovConfig = null;
	this.m_indirectFilterStandardLovResult = null;
	this.m_indirectFilterExcludeScenarioLovResult = null;
	this.m_excludeScenarioQueryManager = oFF.XObjectExt.release(this.m_excludeScenarioQueryManager);
	this.m_sourceFiltersUpdatedMembers = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_sourceFiltersUpdatedMembers);
	this.m_targetDimensionHierarchyMembers = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_targetDimensionHierarchyMembers);
	this.m_targetDimensionTextToKeyMapOfMembers = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_targetDimensionTextToKeyMapOfMembers);
	this.m_sourceIntervalDimensionMembers = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_sourceIntervalDimensionMembers);
};
oFF.QFilterAcrossModelsLov.prototype.requiresIndirectExcludeScenarioLovQuery = function()
{
	return !oFF.QFilterAcrossModelsFilterUtil.areAllFiltersDirect(this.m_sourceQueryManager, this.m_targetQueryManager, this.m_lovConfig.getDimensionLinks(), this.m_lovConfig.getNonEmptySourceFilters().getValuesAsReadOnlyList()) && this.areAllIndirectLovFiltersExclude();
};
oFF.QFilterAcrossModelsLov.prototype.requiresIndirectFilterStandardLovQuery = function()
{
	return !oFF.QFilterAcrossModelsFilterUtil.areAllFiltersDirect(this.m_sourceQueryManager, this.m_targetQueryManager, this.m_lovConfig.getDimensionLinks(), this.m_lovConfig.getNonEmptySourceFilters().getValuesAsReadOnlyList());
};
oFF.QFilterAcrossModelsLov.prototype.setupFilterAcrossModelsLov = function(lovConfig)
{
	this.setupAction(null, null, null, null);
	this.setSession(lovConfig.getSourceQueryManager().getOlapEnv().getSession());
	this.m_lovConfig = lovConfig;
	this.m_sourceQueryManager = lovConfig.getSourceQueryManager();
	this.m_targetQueryManager = lovConfig.getTargetQueryManager();
	this.m_sourceFiltersUpdatedMembers = oFF.XLinkedHashMapByString.create();
	this.m_targetDimensionHierarchyMembers = oFF.XHashMapByString.create();
	this.m_targetDimensionTextToKeyMapOfMembers = oFF.XHashMapByString.create();
	this.m_sourceIntervalDimensionMembers = oFF.XHashMapByString.create();
	this.m_hasExecutedLovQuery = false;
	this.m_lovCacheKeys = oFF.XHashSetOfString.create();
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.FILTER_ACROSS_MODELS_LOV_CACHE))
	{
		this.m_lovCacheManager = this.m_sourceQueryManager.getOlapEnv().getFilterAcrossModelsLovCacheManager();
	}
	this.setupQueryManagerForLov(this.m_sourceQueryManager, lovConfig);
};
oFF.QFilterAcrossModelsLov.prototype.setupQueryManagerForLov = function(queryManager, lovConfig)
{
	queryManager.setMaxRows(lovConfig.getMaxLovRows());
	this.disableUniversalDisplayHierarchies(queryManager);
};

oFF.QFilterAcrossModelsLovAction = function() {};
oFF.QFilterAcrossModelsLovAction.prototype = new oFF.SyncAction();
oFF.QFilterAcrossModelsLovAction.prototype._ff_c = "QFilterAcrossModelsLovAction";

oFF.QFilterAcrossModelsLovAction.createAction = function(lovManager)
{
	let action = new oFF.QFilterAcrossModelsLovAction();
	action.setupAction(null, null, null, lovManager);
	return action;
};
oFF.QFilterAcrossModelsLovAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onQueryExecuted(extResult, data, customIdentifier);
};
oFF.QFilterAcrossModelsLovAction.prototype.onQueryExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	this.copyAllMessages(extResult);
	this.setData(resultSetContainer);
	this.endSync();
};
oFF.QFilterAcrossModelsLovAction.prototype.processSynchronization = function(syncType)
{
	this.getActionContext().processExecution(syncType, this, null);
	return true;
};
oFF.QFilterAcrossModelsLovAction.prototype.releaseObjectInternal = function() {};

oFF.LovProcessConfig = function() {};
oFF.LovProcessConfig.prototype = new oFF.LovCapabilities();
oFF.LovProcessConfig.prototype._ff_c = "LovProcessConfig";

oFF.LovProcessConfig.create = function(queryModel, dimension, includeMeasures, ignoreMultipleDrillsInVh, hasUserDefinedSort, forceValueHelpForPathField)
{
	let config = new oFF.LovProcessConfig();
	config.setupProcessConfig(queryModel, dimension, includeMeasures, ignoreMultipleDrillsInVh, hasUserDefinedSort, forceValueHelpForPathField);
	return config;
};
oFF.LovProcessConfig.prototype.m_automaticVhDrillLevelConfigEnabled = false;
oFF.LovProcessConfig.prototype.m_automaticVhReadModeConfigEnabled = false;
oFF.LovProcessConfig.prototype.m_dimension = null;
oFF.LovProcessConfig.prototype.m_includeMeasures = false;
oFF.LovProcessConfig.prototype.m_isRestoreSettingsAfterImplicitSubmit = false;
oFF.LovProcessConfig.prototype.m_isResultSetForcedForSort = false;
oFF.LovProcessConfig.prototype.m_requiresResultSet = false;
oFF.LovProcessConfig.prototype.m_requiresValueHelp = false;
oFF.LovProcessConfig.prototype.m_useActiveResultSetContainer = false;
oFF.LovProcessConfig.prototype.detectDimension = function(queryModel)
{
	let dimensionsRows = queryModel.getRowsAxis().getDimensions();
	let dimensionsCols = queryModel.getColumnsAxis().getDimensions();
	let dimensions = oFF.XCollectionUtils.filter(dimensionsRows, (dimRow) => {
		return !dimRow.isStructure();
	});
	dimensions.addAll(oFF.XCollectionUtils.filter(dimensionsCols, (dimCol) => {
		return !dimCol.isStructure();
	}));
	if (dimensions.hasElements())
	{
		this.m_dimension = dimensions.get(0);
		return dimensions.size() === 1;
	}
	else
	{
		dimensions.addAll(oFF.XCollectionUtils.filter(dimensionsRows, (structRow) => {
			return structRow.isStructure();
		}));
		dimensions.addAll(oFF.XCollectionUtils.filter(dimensionsCols, (structCol) => {
			return structCol.isStructure();
		}));
		if (dimensions.hasElements())
		{
			this.m_dimension = dimensions.get(0);
			return true;
		}
		return false;
	}
};
oFF.LovProcessConfig.prototype.getDimension = function()
{
	return this.m_dimension;
};
oFF.LovProcessConfig.prototype.getMatchFilter = function(filterElement, dimension)
{
	let children = filterElement.getChildrenIterator();
	while (children.hasNext())
	{
		let element = children.next();
		if (element.getOlapComponentType().isTypeOf(oFF.FilterComponentType.OPERATION))
		{
			let filterOperation = element;
			let comparisonOperator = filterOperation.getComparisonOperator();
			if ((oFF.isNull(dimension) || oFF.XString.isEqual(dimension.getName(), filterOperation.getDimensionName())) && (comparisonOperator === oFF.ComparisonOperator.MATCH || comparisonOperator === oFF.ComparisonOperator.NOT_MATCH || comparisonOperator === oFF.ComparisonOperator.LIKE))
			{
				return filterOperation;
			}
		}
		let matchFilter = this.getMatchFilter(element, dimension);
		if (oFF.notNull(matchFilter))
		{
			return matchFilter;
		}
	}
	return null;
};
oFF.LovProcessConfig.prototype.getRequiresValueHelpIfHierPathFieldInResultSetFields = function(queryModel, forceValueHelpForPathField)
{
	if (forceValueHelpForPathField && queryModel.getModelCapabilities().supportsValueHelpHierarchyPath())
	{
		let rsFields = this.m_dimension.getFieldLayoutType() === oFF.FieldLayoutType.ATTRIBUTE_BASED && this.m_dimension.getMainAttribute() !== null ? this.m_dimension.getMainAttribute().getResultSetFields() : this.m_dimension.getResultSetFields();
		let hierarchyPathField = this.m_dimension.getHierarchyPathField();
		return oFF.notNull(hierarchyPathField) && rsFields.contains(hierarchyPathField);
	}
	return false;
};
oFF.LovProcessConfig.prototype.hasLinkedFilters = function(filter)
{
	let linkedFilters = filter.getLinkedFilters();
	if (linkedFilters.hasElements())
	{
		let isLovOnStructure = this.m_dimension.isStructure();
		let internalLinkedFilterIds = filter.getInternalLinkedFilterIds();
		let layerNames = linkedFilters.getKeysAsReadOnlyList();
		for (let i = 0; i < layerNames.size(); i++)
		{
			let filterName = layerNames.get(i);
			let linkedFilter = linkedFilters.getByKey(filterName);
			if (isLovOnStructure && linkedFilter.getCartesianList(this.m_dimension) === null)
			{
				continue;
			}
			if (!internalLinkedFilterIds.contains(filterName))
			{
				return true;
			}
		}
	}
	return false;
};
oFF.LovProcessConfig.prototype.hasSeveralDrillOperations = function()
{
	let drillManager = this.m_dimension.getDrillManager();
	let drillOperations = drillManager.getDrillOperationsByDimension(this.m_dimension);
	drillOperations.addAll(drillManager.getAllZoomDrillOperationsForDimension(this.m_dimension));
	return drillOperations.size() > 1;
};
oFF.LovProcessConfig.prototype.isAutomaticValueHelpDrillLevelConfigurationEnabled = function()
{
	return this.m_automaticVhDrillLevelConfigEnabled;
};
oFF.LovProcessConfig.prototype.isAutomaticValueHelpReadModeConfigurationEnabled = function()
{
	return this.m_automaticVhReadModeConfigEnabled;
};
oFF.LovProcessConfig.prototype.isIncludeMeasures = function()
{
	return this.m_includeMeasures;
};
oFF.LovProcessConfig.prototype.isRestoreSettingsAfterImplicitSubmit = function()
{
	return this.m_isRestoreSettingsAfterImplicitSubmit;
};
oFF.LovProcessConfig.prototype.isResultSetForcedForSort = function()
{
	return this.m_isResultSetForcedForSort;
};
oFF.LovProcessConfig.prototype.isSortedByMeasure = function(queryModel)
{
	if (queryModel.getModelCapabilities().supportsConditions())
	{
		let conditions = queryModel.getConditionManager().getActiveConditions();
		if (oFF.XCollectionUtils.contains(conditions, (condition) => {
			return !condition.isBackendCondition() && condition.getThresholds().hasElements() && (condition.getDimensionEvaluationType() !== oFF.ConditionDimensionEvaluationType.GIVEN_LIST || condition.getEvaluationDimensions().contains(this.m_dimension));
		}))
		{
			return true;
		}
	}
	let sortingOperations = queryModel.getSortingManager().getSortingOperations();
	for (let i = 0; i < sortingOperations.size(); i++)
	{
		let sortOperation = sortingOperations.get(i);
		if (sortOperation.getComponentType() === oFF.OlapComponentType.COMPLEX_SORTING)
		{
			let complexSorting = sortOperation;
			let elementPath = complexSorting.getElementPath();
			for (let k = 0; k < elementPath.size(); k++)
			{
				let selectField = elementPath.get(k).getSelectField();
				if (oFF.notNull(selectField) && selectField.getDimension().isMeasureStructure())
				{
					return true;
				}
			}
		}
	}
	return false;
};
oFF.LovProcessConfig.prototype.isUseActiveResultSetContainer = function()
{
	return this.m_useActiveResultSetContainer;
};
oFF.LovProcessConfig.prototype.releaseObject = function()
{
	oFF.LovCapabilities.prototype.releaseObject.call( this );
	this.m_dimension = null;
};
oFF.LovProcessConfig.prototype.requiresResultSetRequest = function()
{
	return this.isValid() && this.m_requiresResultSet;
};
oFF.LovProcessConfig.prototype.requiresValueHelpRequest = function()
{
	return this.isValid() && this.m_requiresValueHelp;
};
oFF.LovProcessConfig.prototype.setAutomaticValueHelpDrillLevelConfigurationEnabled = function(automaticValueHelpDrillLevelConfigurationEnabled)
{
	this.m_automaticVhDrillLevelConfigEnabled = automaticValueHelpDrillLevelConfigurationEnabled;
};
oFF.LovProcessConfig.prototype.setAutomaticValueHelpReadModeConfigurationEnabled = function(automaticValueHelpReadModeConfigurationEnabled)
{
	this.m_automaticVhReadModeConfigEnabled = automaticValueHelpReadModeConfigurationEnabled;
};
oFF.LovProcessConfig.prototype.setRestoreSettingsAfterImplicitSubmit = function(restoreSettingsAfterImplicitSubmit)
{
	this.m_isRestoreSettingsAfterImplicitSubmit = restoreSettingsAfterImplicitSubmit;
};
oFF.LovProcessConfig.prototype.setUseActiveResultSetContainer = function(useActiveResultSetContainer)
{
	this.m_useActiveResultSetContainer = useActiveResultSetContainer;
};
oFF.LovProcessConfig.prototype.setupProcessConfig = function(queryModel, dimension, includeMeasures, ignoreMultipleDrillsInVh, hasUserDefinedSort, forceValueHelpForPathField)
{
	this.setupSessionContext(queryModel.getSession());
	this.m_dimension = dimension;
	if (oFF.isNull(this.m_dimension) && !this.detectDimension(queryModel))
	{
		this.addError(oFF.ErrorCodes.INVALID_DIMENSION, "No valid dimension found");
	}
	this.m_includeMeasures = includeMeasures && (queryModel.getRowsAxis().getMeasureDimension() !== null || queryModel.getColumnsAxis().getMeasureDimension() !== null);
	if (queryModel.isBlendingModel())
	{
		this.m_requiresResultSet = true;
	}
	else if (this.isValid())
	{
		this.m_requiresResultSet = this.m_includeMeasures || this.isSortedByMeasure(queryModel);
		this.m_requiresValueHelp = !this.m_requiresResultSet;
		if (queryModel.getSystemType().isTypeOf(oFF.SystemType.BW))
		{
			if (!ignoreMultipleDrillsInVh && this.hasSeveralDrillOperations())
			{
				this.m_requiresResultSet = true;
				this.m_requiresValueHelp = false;
			}
			else
			{
				let filter = queryModel.getFilter();
				let hasMatchFilter = this.getMatchFilter(filter.getEffectiveFilter(), null) !== null;
				let requiresValueHelpIfHierPathFieldInResultSetFields = this.getRequiresValueHelpIfHierPathFieldInResultSetFields(queryModel, forceValueHelpForPathField);
				let requiresResultSetWithoutSort = this.m_requiresResultSet || this.hasLinkedFilters(filter) && !hasMatchFilter && !requiresValueHelpIfHierPathFieldInResultSetFields;
				this.m_requiresResultSet = requiresResultSetWithoutSort || hasUserDefinedSort && !hasMatchFilter && !requiresValueHelpIfHierPathFieldInResultSetFields;
				this.m_requiresValueHelp = !this.m_requiresResultSet || hasMatchFilter || requiresValueHelpIfHierPathFieldInResultSetFields;
				this.m_isResultSetForcedForSort = !this.m_requiresValueHelp && !requiresResultSetWithoutSort;
			}
			this.setSupportsWildCardSearch(this.m_requiresValueHelp && this.supportsMatchFilter());
			this.setSupportsSeveralDrillOperationsInValueHelp(false);
		}
		else
		{
			this.setSupportsWildCardSearch(this.supportsMatchFilter());
			this.setSupportsSeveralDrillOperationsInValueHelp(!ignoreMultipleDrillsInVh);
		}
	}
};
oFF.LovProcessConfig.prototype.supportsMatchFilter = function()
{
	return this.supportsMatchFilterOnField(this.m_dimension.getKeyField()) || this.supportsMatchFilterOnField(this.m_dimension.getDisplayKeyField()) || this.supportsMatchFilterOnField(this.m_dimension.getTextField());
};
oFF.LovProcessConfig.prototype.supportsMatchFilterOnField = function(field)
{
	if (oFF.notNull(field))
	{
		let readMode = field.getDimension().getReadMode(oFF.QContextType.SELECTOR);
		if (this.m_requiresValueHelp ? field.isFilterableForValueHelpAndReadMode(readMode) : field.isFilterable())
		{
			let filterCapabilities = this.m_dimension.getFilterCapabilities().getFilterCapabilitiesByField(field);
			if (oFF.notNull(filterCapabilities))
			{
				let supportedOperators = filterCapabilities.getSupportedComparisonOperatorsForValueHelpAndReadMode(oFF.SetSign.INCLUDING, readMode);
				return supportedOperators.contains(oFF.ComparisonOperator.MATCH) || supportedOperators.contains(oFF.ComparisonOperator.NOT_MATCH) || supportedOperators.contains(oFF.ComparisonOperator.LIKE);
			}
		}
	}
	return false;
};
oFF.LovProcessConfig.prototype.toString = function()
{
	let sb = oFF.XStringBuffer.create();
	sb.append("LOV ProcessConfig[");
	sb.append("dimension: ").append(oFF.notNull(this.m_dimension) ? this.m_dimension.getName() : "null");
	sb.append(", requiresValueHelp: ").appendBoolean(this.m_requiresValueHelp);
	sb.append(", requiresResultSet: ").appendBoolean(this.m_requiresResultSet);
	sb.append(", includeMeasures: ").appendBoolean(this.m_includeMeasures);
	sb.append(", automaticVhReadModeConfigEnabled: ").appendBoolean(this.m_automaticVhReadModeConfigEnabled);
	sb.append(", automaticVhDrillLevelConfigEnabled: ").appendBoolean(this.m_automaticVhDrillLevelConfigEnabled);
	sb.append(", isRestoreSettingsAfterImplicitSubmit: ").appendBoolean(this.m_isRestoreSettingsAfterImplicitSubmit);
	sb.append(", isValid: ").appendBoolean(this.isValid());
	sb.append("]");
	return sb.toString();
};

oFF.QMetadataModel = function() {};
oFF.QMetadataModel.prototype = new oFF.DfApplicationContext();
oFF.QMetadataModel.prototype._ff_c = "QMetadataModel";

oFF.QMetadataModel.create = function(queryModel)
{
	let metaDataCache = new oFF.QMetadataModel();
	metaDataCache.setupExt(queryModel);
	return metaDataCache;
};
oFF.QMetadataModel.prototype.m_hierarchies = null;
oFF.QMetadataModel.prototype.m_queryModel = null;
oFF.QMetadataModel.prototype.canHaveExtensions = function()
{
	return false;
};
oFF.QMetadataModel.prototype.canMaterializeCompleteObject = function()
{
	return false;
};
oFF.QMetadataModel.prototype.cloneExt = function(flags)
{
	return this.cloneOlapComponent(null, null);
};
oFF.QMetadataModel.prototype.cloneOlapComponent = function(context, parent)
{
	let metadataModelClone = oFF.QMetadataModel.create(context);
	let iterator = this.m_hierarchies.getIterator();
	while (iterator.hasNext())
	{
		let element = iterator.next();
		let cloneObj = element.cloneOlapComponent(context, null);
		metadataModelClone.getLeveledHierarchiesBase().add(cloneObj);
	}
	oFF.XObjectExt.release(iterator);
	return metadataModelClone;
};
oFF.QMetadataModel.prototype.getChangedProperties = function()
{
	return null;
};
oFF.QMetadataModel.prototype.getChangedPropertiesFromModellerMetadata = function()
{
	return null;
};
oFF.QMetadataModel.prototype.getChangedPropertiesInDetail = function()
{
	return null;
};
oFF.QMetadataModel.prototype.getComponentType = function()
{
	return this.getOlapComponentType();
};
oFF.QMetadataModel.prototype.getLeveledHierarchies = function()
{
	if (oFF.isNull(this.m_hierarchies))
	{
		return null;
	}
	let hierarchies = oFF.XList.create();
	oFF.XCollectionUtils.addAll(hierarchies, this.m_hierarchies);
	return hierarchies;
};
oFF.QMetadataModel.prototype.getLeveledHierarchiesBase = function()
{
	return this.m_hierarchies;
};
oFF.QMetadataModel.prototype.getLeveledHierarchiesByDimension = function(dimension)
{
	let modelCapabilities = dimension.getModelCapabilities();
	let supportsHierarchyLevels = modelCapabilities.supportsHierarchyLevelMetadata() || modelCapabilities.supportsDimensionHierarchyLevels();
	if (oFF.isNull(this.m_hierarchies) || !supportsHierarchyLevels)
	{
		return null;
	}
	let dimensionHierarchies = oFF.XList.create();
	let hierIt = this.m_hierarchies.getIterator();
	while (hierIt.hasNext())
	{
		let next = hierIt.next();
		if (dimension.isEqualTo(next.getDimension()) || oFF.XString.isEqual(dimension.getName(), next.getDimensionName()))
		{
			dimensionHierarchies.add(next);
		}
	}
	oFF.XObjectExt.release(hierIt);
	return dimensionHierarchies;
};
oFF.QMetadataModel.prototype.getMetadataResponse = function()
{
	return this.getQueryModel().getServerBaseSerialization();
};
oFF.QMetadataModel.prototype.getName = function()
{
	return null;
};
oFF.QMetadataModel.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.OLAP_METADATA_MODEL;
};
oFF.QMetadataModel.prototype.getQueryModel = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_queryModel);
};
oFF.QMetadataModel.prototype.getStorageGroupName = function()
{
	return null;
};
oFF.QMetadataModel.prototype.getStorageName = function()
{
	return null;
};
oFF.QMetadataModel.prototype.getStorageObjectName = function()
{
	return null;
};
oFF.QMetadataModel.prototype.getTagging = function()
{
	return null;
};
oFF.QMetadataModel.prototype.isEventingStopped = function()
{
	return false;
};
oFF.QMetadataModel.prototype.queueEventing = function() {};
oFF.QMetadataModel.prototype.registerChangedListener = oFF.noSupport;
oFF.QMetadataModel.prototype.releaseObject = function()
{
	this.m_hierarchies = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_hierarchies);
	this.m_queryModel = null;
	oFF.DfApplicationContext.prototype.releaseObject.call( this );
};
oFF.QMetadataModel.prototype.resumeEventing = function() {};
oFF.QMetadataModel.prototype.setChangedProperties = oFF.noSupport;
oFF.QMetadataModel.prototype.setupExt = function(queryModel)
{
	if (oFF.notNull(queryModel))
	{
		this.setupApplicationContext(queryModel.getApplication());
	}
	else
	{
		this.setupApplicationContext(null);
	}
	this.m_hierarchies = oFF.XList.create();
	this.m_queryModel = oFF.XWeakReferenceUtil.getWeakRef(queryModel);
};
oFF.QMetadataModel.prototype.stopEventing = function() {};
oFF.QMetadataModel.prototype.unregisterChangedListener = oFF.noSupport;

oFF.DfQueryResourceLoadAction = function() {};
oFF.DfQueryResourceLoadAction.prototype = new oFF.SyncAction();
oFF.DfQueryResourceLoadAction.prototype._ff_c = "DfQueryResourceLoadAction";

oFF.DfQueryResourceLoadAction.prototype.getDataSource = function()
{
	return this.getActionContext().getDataSource();
};
oFF.DfQueryResourceLoadAction.prototype.hasFileExtension = function(location)
{
	if (oFF.XString.lastIndexOf(location, ".") === -1)
	{
		this.addError(oFF.ErrorCodes.SYSTEM_IO_READ_ACCESS, oFF.XStringUtils.concatenate2("Path not valid, cannot find file extension to resolve model format: ", location));
		return false;
	}
	return true;
};
oFF.DfQueryResourceLoadAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	if (extResult.isValid())
	{
		let modelFormat = customIdentifier;
		let jsonContent = response.getRootElement();
		if (oFF.isNull(jsonContent))
		{
			this.addError(oFF.ErrorCodes.SYSTEM_IO_HTTP, "Content not json");
		}
		else
		{
			let config = this.getActionContext();
			config.setDefinitionByStructure(modelFormat, jsonContent);
			config.setDataSource(null);
		}
	}
	this.endSync();
};
oFF.DfQueryResourceLoadAction.prototype.releaseObjectInternal = function() {};

oFF.QueryResourceLoadAction = function() {};
oFF.QueryResourceLoadAction.prototype = new oFF.SyncAction();
oFF.QueryResourceLoadAction.prototype._ff_c = "QueryResourceLoadAction";

oFF.QueryResourceLoadAction.createAndRun = function(syncType, queryServiceConfig, customIdentifier)
{
	let object = new oFF.QueryResourceLoadAction();
	object.setupActionAndRun(syncType, null, customIdentifier, queryServiceConfig);
	return object;
};
oFF.QueryResourceLoadAction.getFileExtension = function(path)
{
	let dot = oFF.XString.lastIndexOf(path, ".");
	return oFF.XString.toLowerCase(oFF.XString.substring(path, dot + 1, -1));
};
oFF.QueryResourceLoadAction.prototype.onHttpResponse = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	if (extResult.isValid())
	{
		let modelFormat = customIdentifier;
		let statusCode = response.getStatusCode();
		if (statusCode !== oFF.HttpStatusCode.SC_OK)
		{
			this.addError(oFF.ErrorCodes.SYSTEM_IO_HTTP, "Bad status code");
		}
		else
		{
			if (response.getContentType() !== oFF.ContentType.APPLICATION_JSON)
			{
				this.addError(oFF.ErrorCodes.SYSTEM_IO_HTTP, "Content not json");
			}
			else
			{
				let jsonContent = response.getJsonContent();
				if (oFF.isNull(jsonContent) || !jsonContent.isStructure())
				{
					this.addError(oFF.ErrorCodes.SYSTEM_IO_HTTP, "Content not json");
				}
				else
				{
					let config = this.getActionContext();
					config.setDefinitionByStructure(modelFormat, jsonContent);
					config.setDataSource(null);
				}
			}
		}
	}
	this.endSync();
};
oFF.QueryResourceLoadAction.prototype.processSynchronization = function(syncType)
{
	let queryServiceContext = this.getActionContext();
	let dataSource = queryServiceContext.getDataSource();
	let type = dataSource.getType();
	if (type === oFF.MetaObjectType.URL)
	{
		let application = this.getActionContext().getApplication();
		let repositoryManager = application.getRepositoryManager();
		let repositoryLocation = repositoryManager.getLocation();
		let location = dataSource.getObjectName();
		let uri;
		if (oFF.isNull(repositoryLocation))
		{
			uri = oFF.XUri.createFromUrl(location);
		}
		else
		{
			uri = oFF.XUri.createFromParentUriAndRelativeUrl(repositoryLocation, location, false);
		}
		let path = uri.getPath();
		if (oFF.XString.lastIndexOf(path, ".") === -1)
		{
			this.addError(oFF.ErrorCodes.SYSTEM_IO_READ_ACCESS, oFF.XStringUtils.concatenate2("Path not valid, cannot find file extension to resolve model format: ", location));
		}
		else
		{
			let extension = oFF.QueryResourceLoadAction.getFileExtension(path);
			if (oFF.XString.isEqual("gz", extension))
			{
				path = oFF.XStringUtils.stripRight(path, 3);
				if (oFF.XString.lastIndexOf(path, ".") === -1)
				{
					this.addError(oFF.ErrorCodes.SYSTEM_IO_READ_ACCESS, oFF.XStringUtils.concatenate2("Path not valid, cannot find file extension to resolve model format: ", location));
				}
				else
				{
					extension = oFF.QueryResourceLoadAction.getFileExtension(path);
				}
			}
			let modelFormat = oFF.ContentType.lookupByFileEnding(extension);
			if (oFF.isNull(modelFormat))
			{
				this.addError(oFF.ErrorCodes.SYSTEM_IO_READ_ACCESS, oFF.XStringUtils.concatenate2("No valid extension to resolve model format: ", location));
			}
			else
			{
				let request = oFF.HttpRequest.createByUri(uri);
				let testHttpClient = request.newHttpClient(this.getSession());
				testHttpClient.processHttpRequest(syncType, this, modelFormat);
				return false;
			}
		}
	}
	return true;
};
oFF.QueryResourceLoadAction.prototype.releaseObjectInternal = function() {};

oFF.QVisualizationExecutionAction = function() {};
oFF.QVisualizationExecutionAction.prototype = new oFF.SyncAction();
oFF.QVisualizationExecutionAction.prototype._ff_c = "QVisualizationExecutionAction";

oFF.QVisualizationExecutionAction.createAndRun = function(visualizationDefinition, syncType, listener, customIdentifier)
{
	let obj = new oFF.QVisualizationExecutionAction();
	obj.setupActionAndRun(syncType, listener, customIdentifier, visualizationDefinition);
	return obj;
};
oFF.QVisualizationExecutionAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onVisualizationObjectFilled(extResult, data, customIdentifier);
};
oFF.QVisualizationExecutionAction.prototype.onVisualizationObjectFilled = function(extResult, visualisationContainer, customIdentifier)
{
	this.addAllMessages(extResult);
	this.endSync();
};
oFF.QVisualizationExecutionAction.prototype.processSynchronization = function(syncType)
{
	let actionContext = this.getActionContext();
	this.setData(actionContext);
	actionContext.getActiveVisualizationContainer().processExecution(this.getActiveSyncType(), this, null);
	return true;
};
oFF.QVisualizationExecutionAction.prototype.releaseObjectInternal = function() {};

oFF.QCache = function() {};
oFF.QCache.prototype = new oFF.DfAbstractMapByString();
oFF.QCache.prototype._ff_c = "QCache";

oFF.QCache.create = function(session)
{
	let cache = new oFF.QCache();
	cache.m_cache = oFF.XHashMapByString.create();
	cache.m_counter = oFF.XHashMapByString.create();
	cache.m_actions = oFF.XHashMapByString.create();
	cache.m_session = session;
	return cache;
};
oFF.QCache.prototype.m_actions = null;
oFF.QCache.prototype.m_cache = null;
oFF.QCache.prototype.m_counter = null;
oFF.QCache.prototype.m_session = null;
oFF.QCache.prototype.clear = function()
{
	this.m_cache.clear();
	this.m_counter.clear();
	this.m_actions.clear();
};
oFF.QCache.prototype.contains = function(element)
{
	return this.m_cache.contains(element);
};
oFF.QCache.prototype.containsKey = function(key)
{
	return this.m_cache.containsKey(key);
};
oFF.QCache.prototype.createMapByStringCopy = function()
{
	return this.m_cache.createMapByStringCopy();
};
oFF.QCache.prototype.freeEntry = function(key)
{
	let keyCounter = this.m_counter.getByKey(key);
	if (oFF.notNull(keyCounter))
	{
		if (keyCounter.getInteger() === 1)
		{
			oFF.XObjectExt.release(this.m_cache.getByKey(key));
			oFF.XObjectExt.release(keyCounter);
			this.remove(key);
		}
		else
		{
			keyCounter.setInteger(keyCounter.getInteger() - 1);
		}
	}
};
oFF.QCache.prototype.getAction = function(key)
{
	let action = this.m_actions.getByKey(key);
	action = this.m_actions.getByKey(key);
	if (oFF.isNull(action))
	{
		action = oFF.QCacheAction.create(this);
		this.m_actions.put(key, action);
	}
	return action;
};
oFF.QCache.prototype.getByKey = function(key)
{
	return this.m_cache.getByKey(key);
};
oFF.QCache.prototype.getKeysAsReadOnlyList = function()
{
	return this.m_cache.getKeysAsReadOnlyList();
};
oFF.QCache.prototype.getSession = function()
{
	return this.m_session;
};
oFF.QCache.prototype.getValuesAsReadOnlyList = function()
{
	return this.m_cache.getValuesAsReadOnlyList();
};
oFF.QCache.prototype.hasElements = function()
{
	return this.m_cache.hasElements();
};
oFF.QCache.prototype.put = function(key, element)
{
	this.m_counter.put(key, oFF.XIntegerValue.create(1));
	this.m_cache.put(key, element);
};
oFF.QCache.prototype.releaseObject = function()
{
	this.m_cache = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_cache);
	this.m_counter = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_counter);
	this.m_actions = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_actions);
	this.m_session = null;
	oFF.DfAbstractMapByString.prototype.releaseObject.call( this );
};
oFF.QCache.prototype.remove = function(key)
{
	this.m_actions.remove(key);
	this.m_counter.remove(key);
	return this.m_cache.remove(key);
};
oFF.QCache.prototype.size = function()
{
	return this.m_cache.size();
};
oFF.QCache.prototype.toString = function()
{
	return this.m_cache.toString();
};
oFF.QCache.prototype.updateEntry = function(key, entry)
{
	let keyCounter = this.m_counter.getByKey(key);
	if (oFF.isNull(keyCounter))
	{
		this.put(key, entry);
	}
	else
	{
		this.m_cache.put(key, entry);
		keyCounter.setInteger(keyCounter.getInteger() + 1);
	}
};
oFF.QCache.prototype.useEntry = function(key)
{
	let result = null;
	let keyCounter = this.m_counter.getByKey(key);
	if (oFF.notNull(keyCounter))
	{
		keyCounter.setInteger(keyCounter.getInteger() + 1);
		result = this.m_cache.getByKey(key);
	}
	return result;
};

oFF.QMemberManager = function() {};
oFF.QMemberManager.prototype = new oFF.DfQContext();
oFF.QMemberManager.prototype._ff_c = "QMemberManager";

oFF.QMemberManager.create = function(dimension)
{
	let obj = new oFF.QMemberManager();
	obj.setupExt(dimension);
	return obj;
};
oFF.QMemberManager.prototype.m_dimension = null;
oFF.QMemberManager.prototype.m_latestResult = null;
oFF.QMemberManager.prototype.m_loadMemberPromise = null;
oFF.QMemberManager.prototype._getMembersByName = function(names)
{
	let hierarchyName = this.m_dimension.isHierarchyActive() ? this.m_dimension.getHierarchyName() : null;
	let readMode = this.getReadmodeFromDimension();
	let memberPromise;
	let structureMembers = this.m_dimension.getAllStructureMembers();
	if (!oFF.XCollectionUtils.hasElements(structureMembers) || this.m_dimension.isHierarchyActive())
	{
		memberPromise = this.fetchMembers(hierarchyName, readMode, names);
	}
	else
	{
		let customMembers = this.m_dimension.getCustomStructureMembers();
		let memberNodes = oFF.XStream.of(structureMembers).filter((member) => {
			return !oFF.XCollectionUtils.hasElements(names) || names.contains(member.getName());
		}).filter((member2) => {
			return !customMembers.containsKey(member2.getName());
		}).map((m) => {
			return oFF.QFactory.createMeasureHelpNode(m.getName(), m);
		}).collect(oFF.XStreamCollector.toListOfNameObject());
		memberPromise = oFF.XPromise.resolve(memberNodes);
	}
	return memberPromise.onThenExt((members) => {
		let result = oFF.QMemberManagerResult.createResult(this.m_dimension);
		result.setValueHelpNodes(members);
		result.setCustomNodes(this.getCustomMembersAsNodes());
		result.setHierarchyName(hierarchyName);
		result.setReadMode(readMode);
		return result;
	});
};
oFF.QMemberManager.prototype.checkSettingsInSync = function(result)
{
	let hierarchyName = result.getHierarchyName();
	let readMode = result.getReadMode();
	if (readMode !== this.getReadmodeFromDimension())
	{
		return false;
	}
	let hierarchyInvalid = this.m_dimension.isHierarchyActive() && !oFF.XString.isEqual(hierarchyName, this.m_dimension.getHierarchyName());
	let hierarchyWasDisabled = !this.m_dimension.isHierarchyActive() && oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyName);
	if (hierarchyInvalid || hierarchyWasDisabled)
	{
		return false;
	}
	return true;
};
oFF.QMemberManager.prototype.fetchMembers = function(hierarchyName, readMode, names)
{
	this.m_dimension.clearSelectorFilter();
	this.m_dimension.setSelectorHierarchyActive(oFF.notNull(hierarchyName));
	this.m_dimension.setSelectorHierarchyName(hierarchyName);
	this.m_dimension.setSelectorInitialDrillLevel(-2);
	this.m_dimension.setSelectorSortType(null);
	this.m_dimension.setReadModeGraceful(oFF.QContextType.SELECTOR, readMode);
	let selectorFields = this.m_dimension.getSelectorFields();
	selectorFields.clear();
	selectorFields.add(this.m_dimension.getKeyField());
	selectorFields.add(this.m_dimension.getDisplayKeyField());
	selectorFields.add(this.m_dimension.getTextField());
	if (oFF.XCollectionUtils.hasElements(names))
	{
		oFF.XCollectionUtils.forEach(names, (name) => {
			this.m_dimension.addSelectorFilterForKey(name, oFF.ComparisonOperator.EQUAL);
		});
	}
	return oFF.XPromise.create((resolve, reject) => {
		this.m_dimension.processValueHelp(this.m_dimension.getProcess().getDefaultSyncType(), oFF.QValueHelpExecutedListenerLambda.createSingleUse((result) => {
			if (result.hasErrors())
			{
				reject(oFF.XError.createWithMessage(result.getFirstError()));
				return;
			}
			let loadedMembers = oFF.XStream.of(result.getData()).collect(oFF.XStreamCollector.toListOfNameObject());
			resolve(loadedMembers);
		}), null);
	});
};
oFF.QMemberManager.prototype.getCustomMembersAsNodes = function()
{
	let customMembers = this.m_dimension.getCustomStructureMembers();
	if (!oFF.XCollectionUtils.hasElements(customMembers))
	{
		return oFF.XListOfNameObject.create();
	}
	return oFF.XStream.of(customMembers).map((m) => {
		return oFF.QFactory.createMeasureHelpNode(m.getName(), m);
	}).collect(oFF.XStreamCollector.toListOfNameObject());
};
oFF.QMemberManager.prototype.getMemberResult = function()
{
	if (oFF.notNull(this.m_loadMemberPromise) && !this.m_loadMemberPromise.isSettled())
	{
		return this.m_loadMemberPromise;
	}
	if (this.isInSync())
	{
		return this.m_loadMemberPromise.onThenExt((result) => {
			this.m_latestResult.setCustomNodes(this.getCustomMembersAsNodes());
			return this.m_latestResult.clone();
		});
	}
	this.m_loadMemberPromise = this._getMembersByName(null).onThenExt((result) => {
		this.m_latestResult = result;
		return result.clone();
	});
	return this.m_loadMemberPromise;
};
oFF.QMemberManager.prototype.getMembers = function()
{
	return this.getMemberResult().onThenExt((result) => {
		return result.getAllNodes();
	});
};
oFF.QMemberManager.prototype.getMembersByName = function(names)
{
	return this._getMembersByName(names).onThenExt((result) => {
		return result.getAllNodes();
	});
};
oFF.QMemberManager.prototype.getReadmodeFromDimension = function()
{
	if (this.m_dimension.getSession().hasFeature(oFF.FeatureToggleOlap.MEMBER_MANAGER_MASTER_READMODE))
	{
		return this.m_dimension.determineBestReadMode(oFF.QContextType.SELECTOR, oFF.QMemberReadMode.MASTER);
	}
	let resultSetReadmode = this.m_dimension.getReadMode(oFF.QContextType.RESULT_SET);
	return this.m_dimension.determineBestReadMode(oFF.QContextType.SELECTOR, resultSetReadmode);
};
oFF.QMemberManager.prototype.isInSync = function()
{
	if (oFF.isNull(this.m_loadMemberPromise) || oFF.isNull(this.m_latestResult) || this.m_loadMemberPromise.getState() === oFF.XPromiseState.REJECTED)
	{
		return false;
	}
	return this.checkSettingsInSync(this.m_latestResult);
};
oFF.QMemberManager.prototype.isResultInSync = function(oldResult)
{
	if (oFF.isNull(this.m_latestResult) || !this.checkSettingsInSync(oldResult))
	{
		return false;
	}
	let currentCustomMembers = this.m_dimension.getCustomStructureMembers();
	let oldCustomNodes = oldResult.getCustomNodes();
	if (currentCustomMembers.size() !== oldCustomNodes.size())
	{
		return false;
	}
	for (let i = 0; i < currentCustomMembers.size(); i++)
	{
		let currentCustomMember = currentCustomMembers.get(i);
		let oldCustomNode = oldCustomNodes.getByKey(currentCustomMember.getName());
		if (oFF.isNull(oldCustomNode))
		{
			return false;
		}
		if (currentCustomMember !== oldCustomNode.getDimensionMember())
		{
			return false;
		}
	}
	let cachedNodes = this.m_latestResult.getValueHelpNodes();
	let oldNodes = oldResult.getValueHelpNodes();
	if (cachedNodes.size() !== oldNodes.size())
	{
		return false;
	}
	if (oFF.XCollectionUtils.contains(cachedNodes, (cachedNode) => {
		return !oldNodes.containsKey(cachedNode.getName());
	}))
	{
		return false;
	}
	return true;
};
oFF.QMemberManager.prototype.releaseObject = function()
{
	this.m_dimension = null;
	this.m_loadMemberPromise = oFF.XObjectExt.release(this.m_loadMemberPromise);
	this.m_latestResult = null;
	oFF.DfQContext.prototype.releaseObject.call( this );
};
oFF.QMemberManager.prototype.setupExt = function(dimension)
{
	this.setupContext(dimension.getContext());
	this.m_dimension = dimension;
};

oFF.QFilterAcrossModelsDimensionMemberLovProcess = function() {};
oFF.QFilterAcrossModelsDimensionMemberLovProcess.prototype = new oFF.QAbstractFilterAcrossModelsLovProcess();
oFF.QFilterAcrossModelsDimensionMemberLovProcess.prototype._ff_c = "QFilterAcrossModelsDimensionMemberLovProcess";

oFF.QFilterAcrossModelsDimensionMemberLovProcess.create = function(lovConfig, dimension)
{
	let process = new oFF.QFilterAcrossModelsDimensionMemberLovProcess();
	process.setupDimensionMemberLovProcess(lovConfig, dimension);
	return process;
};
oFF.QFilterAcrossModelsDimensionMemberLovProcess.prototype.m_dimension = null;
oFF.QFilterAcrossModelsDimensionMemberLovProcess.prototype.m_filterContext = null;
oFF.QFilterAcrossModelsDimensionMemberLovProcess.prototype.m_hierarchyName = null;
oFF.QFilterAcrossModelsDimensionMemberLovProcess.prototype.m_isFullExpansion = false;
oFF.QFilterAcrossModelsDimensionMemberLovProcess.prototype.m_isInterval = false;
oFF.QFilterAcrossModelsDimensionMemberLovProcess.prototype.m_selectorField = null;
oFF.QFilterAcrossModelsDimensionMemberLovProcess.prototype.m_tmpResultSetContainer = null;
oFF.QFilterAcrossModelsDimensionMemberLovProcess.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onValuehelpExecuted(extResult, this.m_tmpResultSetContainer, customIdentifier);
};
oFF.QFilterAcrossModelsDimensionMemberLovProcess.prototype.computeCacheKey = function()
{
	let cacheKey = oFF.XStringBuffer.create();
	cacheKey.append(this.m_dimension.getQueryModel().getDatasetId());
	cacheKey.append(this.m_dimension.getName());
	cacheKey.append(this.m_hierarchyName);
	cacheKey.appendInt(this.m_lovConfig.getMaxLovRows());
	cacheKey.appendBoolean(this.m_isFullExpansion);
	cacheKey.appendBoolean(this.m_isInterval);
	if (oFF.notNull(this.m_selectorField))
	{
		cacheKey.append(this.m_selectorField.getName());
	}
	if (oFF.notNull(this.m_filterContext))
	{
		cacheKey.append(this.m_filterContext.getUniqueId());
		cacheKey.appendInt(this.m_filterContext.getModCounter());
	}
	return oFF.XSha1.createSHA1(cacheKey.toString());
};
oFF.QFilterAcrossModelsDimensionMemberLovProcess.prototype.onValuehelpExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	this.m_tmpResultSetContainer = resultSetContainer;
	this.addAllMessages(extResult);
	this.setData(extResult.getData());
	this.endSync();
};
oFF.QFilterAcrossModelsDimensionMemberLovProcess.prototype.processSynchronization = function(syncType)
{
	this.resetDimensionSelector(this.m_dimension);
	if (oFF.notNull(this.m_selectorField))
	{
		this.m_dimension.getSelectorFields().add(this.m_selectorField);
	}
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_hierarchyName))
	{
		this.m_dimension.setHierarchyName(this.m_hierarchyName);
	}
	this.m_dimension.setSelectorHierarchyActive(oFF.XStringUtils.isNotNullAndNotEmpty(this.m_hierarchyName));
	this.m_dimension.setSelectorGettingInterval(this.m_isInterval);
	if (this.m_isFullExpansion)
	{
		this.m_dimension.setSelectorInitialDrillLevel(this.getDimensionFullExpansionValue(this.m_dimension));
	}
	if (oFF.notNull(this.m_filterContext))
	{
		for (let i = 0; i < this.m_filterContext.size(); i++)
		{
			let cartesianElement = this.m_filterContext.getCartesianElement(i);
			if (cartesianElement.getLow().hasValue() && cartesianElement.getHigh().hasValue())
			{
				this.m_dimension.addSelectorFilterIntervalForKey(oFF.XValueUtil.getString(cartesianElement.getLow().getValue()), oFF.XValueUtil.getString(cartesianElement.getHigh().getValue()), cartesianElement.getComparisonOperator());
			}
			else
			{
				this.m_dimension.addSelectorFilterForKey(oFF.XValueUtil.getString(cartesianElement.getLow().getValue()), cartesianElement.getComparisonOperator());
			}
		}
	}
	if (this.m_dimension.getAxis() === null)
	{
		this.m_lovConfig.getSourceQueryManager().getConvenienceCommands().moveDimensionToAxis(this.m_dimension.getName(), oFF.AxisType.ROWS);
	}
	this.m_dimension.processValueHelp(syncType, this, null);
	return true;
};
oFF.QFilterAcrossModelsDimensionMemberLovProcess.prototype.releaseObjectInternal = function()
{
	this.m_dimension = null;
	this.m_selectorField = null;
	this.m_hierarchyName = null;
	this.m_filterContext = null;
	this.m_tmpResultSetContainer = null;
	oFF.QAbstractFilterAcrossModelsLovProcess.prototype.releaseObjectInternal.call( this );
};
oFF.QFilterAcrossModelsDimensionMemberLovProcess.prototype.resetDimensionSelector = function(dimension)
{
	dimension.clearSelectorFilter();
	dimension.getSelectorFields().clear();
	dimension.setSelectorPaging(0, this.m_lovConfig.getMaxLovRows());
};
oFF.QFilterAcrossModelsDimensionMemberLovProcess.prototype.setFilterContext = function(filterContext)
{
	this.m_filterContext = filterContext;
};
oFF.QFilterAcrossModelsDimensionMemberLovProcess.prototype.setHierarchyName = function(hierarchyName)
{
	this.m_hierarchyName = hierarchyName;
};
oFF.QFilterAcrossModelsDimensionMemberLovProcess.prototype.setIsFullExpansion = function(isFullExpansion)
{
	this.m_isFullExpansion = isFullExpansion;
};
oFF.QFilterAcrossModelsDimensionMemberLovProcess.prototype.setIsInterval = function(isInterval)
{
	this.m_isInterval = isInterval;
};
oFF.QFilterAcrossModelsDimensionMemberLovProcess.prototype.setSelectorField = function(selectorField)
{
	this.m_selectorField = selectorField;
};
oFF.QFilterAcrossModelsDimensionMemberLovProcess.prototype.setupDimensionMemberLovProcess = function(lovConfig, dimension)
{
	this.setupLovProcess(lovConfig);
	this.m_dimension = dimension;
	this.m_isFullExpansion = false;
	this.m_isInterval = false;
};

oFF.QFilterAcrossModelsIndirectScenarioLovProcess = function() {};
oFF.QFilterAcrossModelsIndirectScenarioLovProcess.prototype = new oFF.QAbstractFilterAcrossModelsLovProcess();
oFF.QFilterAcrossModelsIndirectScenarioLovProcess.prototype._ff_c = "QFilterAcrossModelsIndirectScenarioLovProcess";

oFF.QFilterAcrossModelsIndirectScenarioLovProcess.create = function(lovConfig, queryManager, isExcludeQuery)
{
	let process = new oFF.QFilterAcrossModelsIndirectScenarioLovProcess();
	process.setupLovProcess(lovConfig);
	process.m_isExcludeQuery = isExcludeQuery;
	if (oFF.isNull(queryManager))
	{
		process.m_effectiveSourceQueryManager = lovConfig.getSourceQueryManager();
	}
	else
	{
		process.m_effectiveSourceQueryManager = queryManager;
	}
	return process;
};
oFF.QFilterAcrossModelsIndirectScenarioLovProcess.prototype.m_effectiveSourceQueryManager = null;
oFF.QFilterAcrossModelsIndirectScenarioLovProcess.prototype.m_isExcludeQuery = false;
oFF.QFilterAcrossModelsIndirectScenarioLovProcess.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onQueryExecuted(extResult, data, customIdentifier);
};
oFF.QFilterAcrossModelsIndirectScenarioLovProcess.prototype.computeCacheKey = function()
{
	let cacheKey = oFF.XStringBuffer.create();
	cacheKey.append(this.m_effectiveSourceQueryManager.getQueryModel().getDatasetId());
	cacheKey.appendInt(this.m_lovConfig.getMaxLovRows());
	cacheKey.appendBoolean(this.m_isExcludeQuery);
	let sourceFilters = this.m_lovConfig.getNonEmptySourceFilters();
	oFF.XStream.ofString(sourceFilters.getKeysAsReadOnlyList()).mapToString((filterKey) => {
		let sourceFilter = sourceFilters.getByKey(filterKey.toString());
		return oFF.XStringUtils.concatenateWithInt(oFF.XStringUtils.concatenate2(filterKey.toString(), sourceFilter.getUniqueId()), sourceFilter.getModCounter());
	}).sorted(oFF.XComparatorString.create(false)).forEach((sortedKeys) => {
		cacheKey.append(sortedKeys.toString());
	});
	oFF.XStream.of(oFF.QFilterAcrossModelsLinkUtil.getAllLinkPartsForContext(this.m_lovConfig.getDimensionLinks(), this.m_effectiveSourceQueryManager)).mapToString((linkPart) => {
		return oFF.XStringUtils.concatenate4(linkPart.getDimensionName(), linkPart.getFieldName(), linkPart.getHierarchyName(), linkPart.getHierId());
	}).sorted(oFF.XComparatorString.create(false)).forEach((dimensionName) => {
		cacheKey.append(dimensionName.toString());
	});
	let effectiveMeasureNames = oFF.QFilterAcrossModelsDimensionUtil.getEffectiveMeasureNames(this.m_lovConfig.getMeasureNames(), this.m_effectiveSourceQueryManager.getQueryModel(), this, oFF.QFilterAcrossModelsLinkUtil.getAnySharedLinkStorageName(this.m_lovConfig.getDimensionLinks()));
	oFF.XStream.ofString(effectiveMeasureNames).sorted(oFF.XComparatorString.create(false)).forEach((measureName) => {
		cacheKey.append(measureName.toString());
	});
	oFF.XStream.ofString(this.m_lovConfig.getSecondaryMeasureNames()).sorted(oFF.XComparatorString.create(false)).forEach((secondaryMeasureName) => {
		cacheKey.append(secondaryMeasureName.toString());
	});
	return oFF.XSha1.createSHA1(cacheKey.toString());
};
oFF.QFilterAcrossModelsIndirectScenarioLovProcess.prototype.configureFilters = function()
{
	let lovFilters = this.m_lovConfig.getTransformedSourceFiltersForLov();
	let queryModel = this.m_effectiveSourceQueryManager.getQueryModel();
	if (this.m_isExcludeQuery)
	{
		queryModel.getConvenienceCommands().clearAllFiltersExt(oFF.FilterLayer.DYNAMIC, null);
		queryModel.getConvenienceCommands().clearAllFiltersExt(oFF.FilterLayer.EXTERNAL, null);
		let indirectLovFilterExpressions = this.getIndirectSourceFilters(queryModel.getFilter());
		let indirectFilterRoot = oFF.QFactory.createFilterAnd(queryModel);
		indirectFilterRoot.addAll(oFF.XCollectionUtils.map(indirectLovFilterExpressions, (filterExpression) => {
			return filterExpression.getFilterRootElement();
		}));
		let negatedIndirectFilterRoot = oFF.QFilterAcrossModelsFilterUtil.negateExcludeFilter(indirectFilterRoot);
		if (lovFilters.size() > 1)
		{
			oFF.QFilterUtil.deepApplyConvertToFlatFilterToHierarchicalFilters(negatedIndirectFilterRoot, true);
		}
		this.m_effectiveSourceQueryManager.getQueryModel().getFilter().linkFilterElement("excludeScenario", negatedIndirectFilterRoot);
	}
	else
	{
		for (let i = 0; i < lovFilters.size(); i++)
		{
			let effectiveSourceFilter = lovFilters.get(i);
			if (this.m_effectiveSourceQueryManager.getConvenienceCommands().isTypeOfBw())
			{
				effectiveSourceFilter = oFF.QFilterUtil.createFilterElementFromOrigin(effectiveSourceFilter, null);
				oFF.QFilterUtil.deepApplyConvertToFlatFilterToHierarchicalFilters(effectiveSourceFilter, true);
			}
			queryModel.getFilter().linkFilterElement(oFF.XStringUtils.concatenateWithInt("filterAcrossModelsSourceFilter-", i), effectiveSourceFilter);
		}
	}
};
oFF.QFilterAcrossModelsIndirectScenarioLovProcess.prototype.configureSourceLinkedDimension = function(linkPart, readMode)
{
	let queryModel = this.m_effectiveSourceQueryManager.getQueryModel();
	let rowsAxis = queryModel.getRowsAxis();
	let linkedDimension = queryModel.getDimensionByName(linkPart.getDimensionName());
	rowsAxis.add(linkedDimension);
	if (oFF.notNull(readMode))
	{
		linkedDimension.setReadModeGraceful(oFF.QContextType.RESULT_SET, readMode);
	}
	linkedDimension.getResultSetFields().clear();
	if (linkedDimension.isHierarchyActive() !== linkPart.isHierarchical())
	{
		linkedDimension.setHierarchyActive(linkPart.isHierarchical());
	}
	if (linkPart.isHierarchical())
	{
		let linkPartHierarchyName = linkPart.getHierarchyName();
		linkedDimension.setHierarchyName(linkPartHierarchyName);
		linkedDimension.setHierarchyActive(true);
		linkedDimension.setInitialDrillLevel(this.getDimensionFullExpansionValue(queryModel));
		if (linkedDimension.getHierarchyTextField() !== null && !queryModel.getSession().hasFeature(oFF.FeatureToggleOlap.DONT_ALWAYS_REQUEST_TEXTFIELD))
		{
			linkedDimension.getHierarchyTextField().getTagging().put(oFF.QTransientConstants.HIDE_TEXT_FIELD, "");
		}
	}
	else if (!linkedDimension.getDimensionType().isTypeOf(oFF.DimensionType.CALCULATED_DIMENSION))
	{
		let linkedField = queryModel.getFieldByNameOrAlias(linkPart.getFieldName());
		if (linkedField.isKeyField())
		{
			if (linkedDimension.getFlatTextField() !== null && !queryModel.getSession().hasFeature(oFF.FeatureToggleOlap.DONT_ALWAYS_REQUEST_TEXTFIELD))
			{
				linkedDimension.getFlatTextField().getTagging().put(oFF.QTransientConstants.HIDE_TEXT_FIELD, "");
			}
		}
		else
		{
			linkedDimension.getFieldContainer().setFlatKeyField(linkedField);
		}
	}
};
oFF.QFilterAcrossModelsIndirectScenarioLovProcess.prototype.configureSourceMeasures = function()
{
	let queryModel = this.m_effectiveSourceQueryManager.getQueryModel();
	let effectiveMeasureNames = oFF.QFilterAcrossModelsDimensionUtil.getEffectiveMeasureNames(this.m_lovConfig.getMeasureNames(), queryModel, this, oFF.QFilterAcrossModelsLinkUtil.getAnySharedLinkStorageName(this.m_lovConfig.getDimensionLinks()));
	this.configureSourceMeasuresByDimension(queryModel.getPrimaryCalculationDimension(), effectiveMeasureNames);
	this.configureSourceMeasuresByDimension(queryModel.getSecondaryCalculationDimension(), this.m_lovConfig.getSecondaryMeasureNames());
};
oFF.QFilterAcrossModelsIndirectScenarioLovProcess.prototype.configureSourceMeasuresByDimension = function(accountOrMeasureDimension, measureNames)
{
	if (oFF.isNull(accountOrMeasureDimension))
	{
		return;
	}
	let queryModel = this.m_effectiveSourceQueryManager.getQueryModel();
	let cmd = queryModel.getConvenienceCommands();
	if (cmd.isTypeOfBw() && accountOrMeasureDimension.getDimensionType() === oFF.DimensionType.MEASURE_STRUCTURE && accountOrMeasureDimension.getAxisType() === oFF.AxisType.ROWS)
	{
		cmd.moveDimensionToAxis(accountOrMeasureDimension.getName(), oFF.AxisType.COLUMNS);
	}
	let iterator = measureNames.getIterator();
	let storageName = oFF.QFilterAcrossModelsLinkUtil.getAnySharedLinkStorageName(this.m_lovConfig.getDimensionLinks());
	let accountOrMeasureInitialized = false;
	while (iterator.hasNext())
	{
		let measureName = iterator.next();
		let measureMember = accountOrMeasureDimension.getStructureMemberByAliasOrMember(measureName);
		if (oFF.isNull(measureMember))
		{
			measureMember = queryModel.getOlapEnv().getClientQueryObjectManager().getStructuredMember(measureName, storageName, true);
			if (oFF.notNull(measureMember))
			{
				accountOrMeasureDimension.addMeasure(measureMember);
			}
		}
		if (oFF.notNull(measureMember))
		{
			if (!accountOrMeasureInitialized)
			{
				cmd.clearFiltersByDimensionExt(oFF.FilterLayer.DYNAMIC, null, accountOrMeasureDimension.getName());
				cmd.clearFiltersByDimensionExt(oFF.FilterLayer.EXTERNAL, null, accountOrMeasureDimension.getName());
				cmd.clearFiltersByDimensionExt(oFF.FilterLayer.FIXED, null, accountOrMeasureDimension.getName());
				cmd.moveDimensionByTypeToAxis(oFF.DimensionType.MEASURE_STRUCTURE, oFF.AxisType.COLUMNS);
				if (accountOrMeasureDimension.getDimensionType() === oFF.DimensionType.ACCOUNT)
				{
					cmd.setDimensionHierarchy(accountOrMeasureDimension.getName(), accountOrMeasureDimension.getDefaultHierarchyName(), true, 0);
					cmd.moveDimensionToAxis(accountOrMeasureDimension.getName(), oFF.AxisType.ROWS);
				}
				accountOrMeasureInitialized = true;
			}
			let filterOp = cmd.addSingleMemberFilterByDimension(accountOrMeasureDimension, measureMember.getName(), oFF.ComparisonOperator.EQUAL);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(accountOrMeasureDimension.getDefaultHierarchyName()))
			{
				filterOp.setHierarchyName(accountOrMeasureDimension.getDefaultHierarchyName());
			}
		}
	}
};
oFF.QFilterAcrossModelsIndirectScenarioLovProcess.prototype.getIndirectSourceFilters = function(filterContainer)
{
	let lovFilters = this.m_lovConfig.getTransformedSourceFiltersForLov();
	let indirectLovFilterExpressions = oFF.XList.create();
	for (let i = 0; i < lovFilters.size(); i++)
	{
		let filterElement = lovFilters.get(i);
		let filterExpression = filterContainer.createFilter();
		if (filterElement.getOlapComponentType().isTypeOf(oFF.FilterComponentType.CARTESIAN_PRODUCT))
		{
			filterExpression.setCartesianProduct(filterElement);
		}
		else
		{
			filterExpression.setComplexRoot(filterElement);
		}
		if (!oFF.QFilterAcrossModelsFilterUtil.isDirectFilterElement(this.m_effectiveSourceQueryManager, this.m_lovConfig.getTargetQueryManager(), this.m_lovConfig.getDimensionLinks(), filterElement))
		{
			indirectLovFilterExpressions.add(filterExpression);
		}
	}
	return indirectLovFilterExpressions;
};
oFF.QFilterAcrossModelsIndirectScenarioLovProcess.prototype.onQueryExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	this.addAllMessages(extResult);
	this.setData(extResult.getData());
	this.endSync();
};
oFF.QFilterAcrossModelsIndirectScenarioLovProcess.prototype.processSynchronization = function(syncType)
{
	let queryModel = this.m_effectiveSourceQueryManager.getQueryModel();
	let readMode = null;
	if (oFF.QFilterAcrossModelsFilterUtil.areAllLinksAndFiltersFlexibleTime(queryModel, this.m_lovConfig.getDimensionLinks(), this.m_lovConfig.getNonEmptySourceFilters()))
	{
		readMode = oFF.QMemberReadMode.MASTER;
	}
	else if (queryModel.getAccountDimension() === null)
	{
		readMode = oFF.QMemberReadMode.BOOKED_AND_SPACE_AND_STATE;
	}
	let linkParts = oFF.QFilterAcrossModelsLinkUtil.getAllLinkPartsForContext(this.m_lovConfig.getDimensionLinks(), queryModel);
	for (let i = 0; i < linkParts.size(); i++)
	{
		this.configureSourceLinkedDimension(linkParts.get(i), readMode);
	}
	if (queryModel.getConvenienceCommands().isTypeOfBw())
	{
		if (queryModel.getStructureCount() > 1)
		{
			queryModel.getConvenienceCommands().moveDimensionByTypeToAxis(oFF.DimensionType.SECONDARY_STRUCTURE, oFF.AxisType.COLUMNS);
		}
		let measureStructure = queryModel.getMeasureDimension();
		if (oFF.notNull(measureStructure) && measureStructure.getAxisType() === oFF.AxisType.FREE && !oFF.QFilterUtil.hasSingleValueFilterForDimension(queryModel.getFilter(), measureStructure.getName()))
		{
			queryModel.getConvenienceCommands().moveDimensionByTypeToAxis(oFF.DimensionType.MEASURE_STRUCTURE, oFF.AxisType.COLUMNS);
		}
		queryModel.getRowsAxis().setZeroSuppressionType(oFF.ZeroSuppressionType.NONE);
		queryModel.getColumnsAxis().setZeroSuppressionType(oFF.ZeroSuppressionType.NONE);
	}
	this.configureFilters();
	this.configureSourceMeasures();
	this.m_effectiveSourceQueryManager.processQueryExecution(syncType, this, null);
	return true;
};
oFF.QFilterAcrossModelsIndirectScenarioLovProcess.prototype.releaseObjectInternal = function()
{
	this.m_effectiveSourceQueryManager = null;
	oFF.QAbstractFilterAcrossModelsLovProcess.prototype.releaseObjectInternal.call( this );
};

oFF.QKeyRefStoreContext = function() {};
oFF.QKeyRefStoreContext.prototype = new oFF.DfQContext();
oFF.QKeyRefStoreContext.prototype._ff_c = "QKeyRefStoreContext";

oFF.QKeyRefStoreContext.create = function(context, storageName, capabilities)
{
	let newObj = new oFF.QKeyRefStoreContext();
	newObj.setupExt(context, storageName, capabilities);
	return newObj;
};
oFF.QKeyRefStoreContext.prototype.m_capabilities = null;
oFF.QKeyRefStoreContext.prototype.m_storage = null;
oFF.QKeyRefStoreContext.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.KEY_REF_STORE_CONTEXT;
};
oFF.QKeyRefStoreContext.prototype.getKeyRefStorage = function()
{
	return this.m_storage;
};
oFF.QKeyRefStoreContext.prototype.getModelCapabilities = function()
{
	return this.m_capabilities;
};
oFF.QKeyRefStoreContext.prototype.setupExt = function(context, storageName, capabilities)
{
	oFF.DfQContext.prototype.setupContext.call( this , context);
	this.m_storage = oFF.QFactory.createKeyRefStorage(this, storageName);
	if (oFF.isNull(capabilities))
	{
		this.m_capabilities = oFF.QCapabilities.create();
	}
	else
	{
		this.m_capabilities = capabilities;
	}
};

oFF.QInitAction = function() {};
oFF.QInitAction.prototype = new oFF.SyncActionExt();
oFF.QInitAction.prototype._ff_c = "QInitAction";

oFF.QInitAction.createAndRun = function(syncType, listener, customIdentifier, carrier)
{
	let object = new oFF.QInitAction();
	object.setupActionAndRun(syncType, listener, customIdentifier, carrier);
	return object;
};
oFF.QInitAction.prototype.m_docFusionAction = null;
oFF.QInitAction.prototype.m_fusionResult = null;
oFF.QInitAction.prototype.m_queryManagerAction = null;
oFF.QInitAction.prototype.m_targetServiceCfg = null;
oFF.QInitAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onQueryManagerCreated(this, data, customIdentifier);
};
oFF.QInitAction.prototype.getApplication = function()
{
	return this.getActionContext().getApplication();
};
oFF.QInitAction.prototype.getQueryServiceConfig = function()
{
	return this.getActionContext();
};
oFF.QInitAction.prototype.onDocFusionDone = function(extResult, fusionResult, customIdentifier)
{
	this.addAllMessages(extResult);
	this.m_fusionResult = fusionResult;
	if (this.hasErrors())
	{
		this.endSync();
	}
	else
	{
		let connectionContainer = this.m_fusionResult.getConnectionContainer();
		this.m_targetServiceCfg.setConnectionContainer(connectionContainer);
		let metadataContent = this.m_fusionResult.getMetadataContent();
		this.m_targetServiceCfg.setMetadataContent(metadataContent);
		let repositoryContent = this.m_fusionResult.getRepositoryContent();
		this.m_targetServiceCfg.setRepositoryContent(repositoryContent);
		if (oFF.notNull(repositoryContent))
		{
			this.m_targetServiceCfg.setDefinitionByContent(null);
		}
		this.m_targetServiceCfg.setDimensionsOnAxes(null);
		this.m_targetServiceCfg.setRequiredDimensions(null);
		this.m_targetServiceCfg.setMinimizedMetadata(false);
		this.m_targetServiceCfg.setDataSource(this.m_fusionResult.getDataSource());
		this.prepareAndStartQueryManagerAction();
	}
};
oFF.QInitAction.prototype.onQueryManagerCreated = function(extResult, queryManager, customIdentifier)
{
	this.copyAllMessages(extResult);
	this.setData(!this.isValid() ? null : queryManager);
	this.endSync();
	this.getQueryServiceConfig().onInitActionDone(extResult, queryManager);
	if (oFF.notNull(queryManager) && !queryManager.isReleased())
	{
		let olapFilterManager = queryManager.getOlapEnv().getFilterManager();
		if (queryManager.getInitSettings().isExternalizedNonVariableFilter())
		{
			olapFilterManager.externalizeNonVariableFilter(queryManager);
		}
		else if (queryManager.getInitSettings().isExternalizedDynamicFilter() && !queryManager.hasInputEnabledVariables())
		{
			olapFilterManager.externalizeDynamicFilter(queryManager);
		}
	}
};
oFF.QInitAction.prototype.prepareAndStartQueryManagerAction = function()
{
	let syncType = this.getActiveSyncType();
	if (syncType === oFF.SyncType.BLOCKING)
	{
		this.m_queryManagerAction = this.m_targetServiceCfg.processQueryManagerCreation(syncType, null, null);
		this.onQueryManagerCreated(this.m_queryManagerAction, this.m_queryManagerAction.getData(), null);
	}
	else
	{
		this.m_queryManagerAction = this.m_targetServiceCfg.processQueryManagerCreation(syncType, this, null);
	}
};
oFF.QInitAction.prototype.processSynchronization = function(syncType)
{
	let queryServiceConfig = this.getQueryServiceConfig();
	this.m_targetServiceCfg = queryServiceConfig.cloneExt("~Query~");
	this.m_targetServiceCfg.setUseClone(false);
	if (this.m_targetServiceCfg.isFusionActive() === true)
	{
		let definitionContent = this.m_targetServiceCfg.getDefinitionContent();
		if (oFF.notNull(definitionContent))
		{
			let contentType = definitionContent.getContentType();
			if (contentType.isTypeOf(oFF.QModelFormat.INA_CLONE) === true)
			{
				this.m_targetServiceCfg.setIsFusionActive(false);
			}
		}
	}
	if (this.m_targetServiceCfg.isFusionActive())
	{
		let docFusion = oFF.QDocFusionFactory.create(this.getApplication());
		if (syncType === oFF.SyncType.BLOCKING)
		{
			this.m_docFusionAction = docFusion.processFusion(syncType, null, null, queryServiceConfig);
			this.onDocFusionDone(this.m_docFusionAction, this.m_docFusionAction.getData(), null);
		}
		else
		{
			this.m_docFusionAction = docFusion.processFusion(syncType, this, null, queryServiceConfig);
		}
	}
	else
	{
		this.prepareAndStartQueryManagerAction();
	}
	return true;
};
oFF.QInitAction.prototype.releaseObjectInternal = function() {};

oFF.QueryResourceLoadAction3 = function() {};
oFF.QueryResourceLoadAction3.prototype = new oFF.DfQueryResourceLoadAction();
oFF.QueryResourceLoadAction3.prototype._ff_c = "QueryResourceLoadAction3";

oFF.QueryResourceLoadAction3.createAndRun = function(syncType, queryServiceConfig, customIdentifier)
{
	let object = new oFF.QueryResourceLoadAction3();
	object.setupActionAndRun(syncType, null, customIdentifier, queryServiceConfig);
	object.m_instanceId = queryServiceConfig.getInstanceId();
	return object;
};
oFF.QueryResourceLoadAction3.prototype.m_instanceId = null;
oFF.QueryResourceLoadAction3.prototype.processSynchronization = function(syncType)
{
	let dataSource = this.getDataSource();
	let type = dataSource.getType();
	if (type === oFF.MetaObjectType.URL)
	{
		let location = dataSource.getObjectName();
		if (this.hasFileExtension(location))
		{
			let extension = oFF.QueryResourceLoadAction.getFileExtension(location);
			if (oFF.XString.isEqual("gz", extension))
			{
				let path = oFF.XStringUtils.stripRight(location, 3);
				if (this.hasFileExtension(path))
				{
					extension = oFF.QueryResourceLoadAction.getFileExtension(path);
				}
			}
			let modelFormat = oFF.ContentType.lookupByFileEnding(extension);
			if (oFF.isNull(modelFormat))
			{
				this.addError(oFF.ErrorCodes.SYSTEM_IO_READ_ACCESS, oFF.XStringUtils.concatenate2("No valid extension to resolve model format: ", location));
			}
			else
			{
				let application = this.getActionContext().getApplication();
				let repositoryManager = application.getRepositoryManager();
				let rpcFunction = repositoryManager.newRpcFunction(location);
				rpcFunction.getRpcRequest().setSapPassportConnectionId(this.m_instanceId);
				rpcFunction.processFunctionExecution(syncType, this, modelFormat);
				return false;
			}
		}
	}
	return true;
};

oFF.QFunctionalVariableValue = function() {};
oFF.QFunctionalVariableValue.prototype = new oFF.QVariableValue();
oFF.QFunctionalVariableValue.prototype._ff_c = "QFunctionalVariableValue";

oFF.QFunctionalVariableValue.createFunctionalVariableValue = function(variable)
{
	let object = new oFF.QFunctionalVariableValue();
	object.setVariable(variable);
	object.m_parameters = oFF.XSimpleMap.create();
	return object;
};
oFF.QFunctionalVariableValue.prototype.m_parameters = null;
oFF.QFunctionalVariableValue.prototype.cloneExt = function(flags)
{
	let variableValue = oFF.QFunctionalVariableValue.createFunctionalVariableValue(this.getVariable());
	oFF.XCollectionUtils.forEach(this.m_parameters.getKeysAsReadOnlyList(), (parameter) => {
		let clonedParam = parameter.cloneExt(flags);
		variableValue.setParameterValue(clonedParam, this.m_parameters.getByKey(parameter).getString());
	});
	return variableValue;
};
oFF.QFunctionalVariableValue.prototype.getParameterValue = function(parameter)
{
	let value = this.m_parameters.getByKey(parameter);
	return oFF.notNull(value) ? value.getString() : null;
};
oFF.QFunctionalVariableValue.prototype.getParameters = function()
{
	return this.m_parameters;
};
oFF.QFunctionalVariableValue.prototype.isEqualTo = function(other)
{
	if (!oFF.QVariableValue.prototype.isEqualTo.call( this , other))
	{
		return false;
	}
	let otherVariableValue = other;
	let iterator = this.m_parameters.getKeysAsIterator();
	while (iterator.hasNext())
	{
		let param = iterator.next();
		if (!oFF.XString.isEqual(this.getParameterValue(param), otherVariableValue.getParameterValue(param)))
		{
			return false;
		}
	}
	return this.m_parameters.size() === otherVariableValue.getParameters().size();
};
oFF.QFunctionalVariableValue.prototype.releaseObject = function()
{
	this.m_parameters = oFF.XObjectExt.release(this.m_parameters);
	oFF.QVariableValue.prototype.releaseObject.call( this );
};
oFF.QFunctionalVariableValue.prototype.resetValue = function(value)
{
	oFF.QVariableValue.prototype.resetValue.call( this , value);
	this.m_parameters = value.m_parameters.createMapCopy();
};
oFF.QFunctionalVariableValue.prototype.setParameterValue = function(parameter, value)
{
	if (oFF.notNull(parameter))
	{
		if (oFF.XStringUtils.isNotNullAndNotEmpty(value))
		{
			this.m_parameters.put(parameter, oFF.XStringValue.create(value));
		}
		else
		{
			this.m_parameters.remove(parameter);
		}
	}
};

oFF.QCmdAbstract = function() {};
oFF.QCmdAbstract.prototype = new oFF.DfAbstractProcessContext();
oFF.QCmdAbstract.prototype._ff_c = "QCmdAbstract";

oFF.QCmdAbstract.castParentToCartesianList = function(filterOp)
{
	if (oFF.notNull(filterOp))
	{
		let parent = filterOp.getParent();
		if (oFF.notNull(parent) && parent.getComponentType().isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
		{
			return parent;
		}
	}
	return null;
};
oFF.QCmdAbstract.prototype.m_simpleVariables = null;
oFF.QCmdAbstract.prototype.addAllDimensionFieldsToResultSet = function()
{
	return this.addAllFieldsToModelArea(oFF.QContextType.RESULT_SET);
};
oFF.QCmdAbstract.prototype.addAllDimensionFieldsToSelector = function()
{
	return this.addAllFieldsToModelArea(oFF.QContextType.SELECTOR);
};
oFF.QCmdAbstract.prototype.addAllFieldsToResultSet = function(dimName)
{
	return this.addAllFieldsOfDimensionToModelArea(dimName, oFF.QContextType.RESULT_SET);
};
oFF.QCmdAbstract.prototype.addAllFieldsToSelector = function(dimName)
{
	return this.addAllFieldsOfDimensionToModelArea(dimName, oFF.QContextType.SELECTOR);
};
oFF.QCmdAbstract.prototype.addDimension = function(dimName)
{
	return this.moveDimensionExt(null, dimName, oFF.AxisType.ROWS, -1);
};
oFF.QCmdAbstract.prototype.addFieldByTypeToResultSet = function(dimName, presentationType)
{
	return this.addPresentation(null, dimName, presentationType, oFF.QContextType.RESULT_SET);
};
oFF.QCmdAbstract.prototype.addFieldByTypeToResultSetStr = function(dimName, presentationType)
{
	return this.addFieldByTypeToResultSet(dimName, oFF.PresentationType.lookup(presentationType));
};
oFF.QCmdAbstract.prototype.addFieldByTypeToSelector = function(dimName, presentationType)
{
	return this.addPresentation(null, dimName, presentationType, oFF.QContextType.SELECTOR);
};
oFF.QCmdAbstract.prototype.addFieldToResultSet = function(dimName, fieldName)
{
	return this.addField(null, dimName, null, fieldName, oFF.QContextType.RESULT_SET);
};
oFF.QCmdAbstract.prototype.addFieldToSelector = function(dimName, fieldName)
{
	return this.addField(null, dimName, null, fieldName, oFF.QContextType.SELECTOR);
};
oFF.QCmdAbstract.prototype.addIntervallFilterByIntegerValues = function(dimName, lowValue, highValue)
{
	return this.addIntervallFilterByStringValues(dimName, oFF.XInteger.convertToString(lowValue), oFF.XInteger.convertToString(highValue));
};
oFF.QCmdAbstract.prototype.addIntervallFilterByLongValues = function(dimName, lowValue, highValue)
{
	return this.addIntervallFilterByStringValues(dimName, oFF.XLong.convertToString(lowValue), oFF.XLong.convertToString(highValue));
};
oFF.QCmdAbstract.prototype.addIntervallFilterByStringValues = function(dimName, lowValue, highValue)
{
	let filterOp = this.addFilter(oFF.FilterLayer.DYNAMIC, null, dimName, null, null, lowValue, highValue, oFF.ComparisonOperator.BETWEEN);
	return oFF.QCmdAbstract.castParentToCartesianList(filterOp);
};
oFF.QCmdAbstract.prototype.addIntervallVisibilityFilterByStringValues = function(dimName, lowValue, highValue)
{
	let filterOp = this.addFilter(oFF.FilterLayer.VISIBILITY, null, dimName, null, null, lowValue, highValue, oFF.ComparisonOperator.BETWEEN);
	return oFF.QCmdAbstract.castParentToCartesianList(filterOp);
};
oFF.QCmdAbstract.prototype.addMeasureFieldByTypeToResultSet = function(presentationType)
{
	return this.addPresentation(oFF.DimensionType.MEASURE_STRUCTURE, null, presentationType, oFF.QContextType.RESULT_SET);
};
oFF.QCmdAbstract.prototype.addMeasureFieldByTypeToSelector = function(presentationType)
{
	return this.addPresentation(oFF.DimensionType.MEASURE_STRUCTURE, null, presentationType, oFF.QContextType.SELECTOR);
};
oFF.QCmdAbstract.prototype.addPresentation = function(dimType, dimName, presentationType, contextType)
{
	return this.addField(dimType, dimName, presentationType, null, contextType);
};
oFF.QCmdAbstract.prototype.addSearchForKeyUsingDynamicFilter = function(dimension, searchValue)
{
	return oFF.isNull(dimension) ? null : dimension.addSearchForKeyUsingDynamicFilter(searchValue);
};
oFF.QCmdAbstract.prototype.addSearchForTextUsingDynamicFilter = function(dimension, searchValue)
{
	return oFF.isNull(dimension) ? null : dimension.addSearchForTextUsingDynamicFilter(searchValue);
};
oFF.QCmdAbstract.prototype.addSimpleSingleMemberFilter = function(dimName, memberName)
{
	return this.addSingleMemberFilterByDimensionName(dimName, memberName, oFF.ComparisonOperator.EQUAL);
};
oFF.QCmdAbstract.prototype.addSingleMeasureFilter = function(measureName)
{
	return this.addSingleMemberFilter(oFF.FilterLayer.DYNAMIC, oFF.DimensionType.MEASURE_STRUCTURE, null, measureName, oFF.ComparisonOperator.EQUAL);
};
oFF.QCmdAbstract.prototype.addSingleMeasureVisibilityFilter = function(measureName)
{
	return this.addSingleMemberFilter(oFF.FilterLayer.VISIBILITY, oFF.DimensionType.MEASURE_STRUCTURE, null, measureName, oFF.ComparisonOperator.EQUAL);
};
oFF.QCmdAbstract.prototype.addSingleMemberFilterByDimension = function(dimension, memberName, comparisonOperator)
{
	if (oFF.notNull(dimension))
	{
		return this.addSingleMemberFilterByDimensionName(dimension.getName(), memberName, comparisonOperator);
	}
	return null;
};
oFF.QCmdAbstract.prototype.addSingleMemberFilterByDimensionMember = function(dimensionMember, comparisonOperator)
{
	return this.addSingleMemberFilter(oFF.FilterLayer.DYNAMIC, null, dimensionMember.getDimension().getName(), dimensionMember.getName(), comparisonOperator);
};
oFF.QCmdAbstract.prototype.addSingleMemberFilterByDimensionName = function(dimName, memberName, comparisonOperator)
{
	return this.addSingleMemberFilter(oFF.FilterLayer.DYNAMIC, null, dimName, memberName, comparisonOperator);
};
oFF.QCmdAbstract.prototype.addSingleMemberVisibilityFilterByDimension = function(dimension, memberName, comparisonOperator)
{
	if (oFF.notNull(dimension))
	{
		return this.addSingleMemberVisibilityFilterByDimensionName(dimension.getName(), memberName, comparisonOperator);
	}
	return null;
};
oFF.QCmdAbstract.prototype.addSingleMemberVisibilityFilterByDimensionMember = function(dimensionMember, comparisonOperator)
{
	return this.addSingleMemberFilter(oFF.FilterLayer.VISIBILITY, null, dimensionMember.getDimension().getName(), dimensionMember.getName(), comparisonOperator);
};
oFF.QCmdAbstract.prototype.addSingleMemberVisibilityFilterByDimensionName = function(dimName, memberName, comparisonOperator)
{
	return this.addSingleMemberFilter(oFF.FilterLayer.VISIBILITY, null, dimName, memberName, comparisonOperator);
};
oFF.QCmdAbstract.prototype.addSingleStructureMemberFilterByType = function(structureType, structureMemberName, comparisonOperator)
{
	return this.addSingleMemberFilter(oFF.FilterLayer.DYNAMIC, structureType, null, structureMemberName, comparisonOperator);
};
oFF.QCmdAbstract.prototype.addSingleStructureMemberVisibilityFilterByType = function(structureType, structureMemberName, comparisonOperator)
{
	return this.addSingleMemberFilter(oFF.FilterLayer.VISIBILITY, structureType, null, structureMemberName, comparisonOperator);
};
oFF.QCmdAbstract.prototype.alignTotalsOnBottom = function(totalsController)
{
	return this.alignTotals(totalsController.getModelLevel(), totalsController.getName(), oFF.ResultAlignment.BOTTOM);
};
oFF.QCmdAbstract.prototype.alignTotalsOnDefault = function(totalsController)
{
	return this.alignTotals(totalsController.getModelLevel(), totalsController.getName(), null);
};
oFF.QCmdAbstract.prototype.alignTotalsOnTop = function(totalsController)
{
	return this.alignTotals(totalsController.getModelLevel(), totalsController.getName(), oFF.ResultAlignment.TOP);
};
oFF.QCmdAbstract.prototype.alignTotalsOnTopAndBottom = function(totalsController)
{
	return this.alignTotals(totalsController.getModelLevel(), totalsController.getName(), oFF.ResultAlignment.TOPBOTTOM);
};
oFF.QCmdAbstract.prototype.canHaveExtensions = function()
{
	return false;
};
oFF.QCmdAbstract.prototype.canMaterializeCompleteObject = function()
{
	return false;
};
oFF.QCmdAbstract.prototype.checkAndReplace = function(name)
{
	if (oFF.isNull(this.m_simpleVariables))
	{
		return name;
	}
	else
	{
		return this.m_simpleVariables.getStringByKeyExt(name, name);
	}
};
oFF.QCmdAbstract.prototype.clearAllAttributeFields = function(dimName, attributeName, contextType)
{
	return this.clearAttributeFields(null, dimName, attributeName, contextType);
};
oFF.QCmdAbstract.prototype.clearAllAttributes = function(dimName, contextType)
{
	return this.clearAttributes(null, dimName, contextType);
};
oFF.QCmdAbstract.prototype.clearAllDimensionFieldsFromResultSet = function()
{
	return this.clearAllFieldsFromModelArea(oFF.QContextType.RESULT_SET);
};
oFF.QCmdAbstract.prototype.clearAllDimensionFieldsFromSelector = function()
{
	return this.clearAllFieldsFromModelArea(oFF.QContextType.SELECTOR);
};
oFF.QCmdAbstract.prototype.clearAllFields = function(dimName, contextType)
{
	return this.clearFields(null, dimName, contextType);
};
oFF.QCmdAbstract.prototype.clearAllResultSetFields = function(dimName)
{
	return this.clearFields(null, dimName, oFF.QContextType.RESULT_SET);
};
oFF.QCmdAbstract.prototype.clearAllSelectorFields = function(dimName)
{
	return this.clearFields(null, dimName, oFF.QContextType.SELECTOR);
};
oFF.QCmdAbstract.prototype.clearAxisStr = function(targetAxis)
{
	return this.clearAxis(oFF.AxisType.lookup(targetAxis));
};
oFF.QCmdAbstract.prototype.clearDimensionSort = function(dimName)
{
	return this.clearSort(oFF.SortType.ABSTRACT_DIMENSION_SORT, dimName);
};
oFF.QCmdAbstract.prototype.clearFieldByTypeFromResultSet = function(dimName, presentationType)
{
	return this.removePresentation(null, dimName, presentationType, oFF.QContextType.RESULT_SET);
};
oFF.QCmdAbstract.prototype.clearFieldByTypeFromSelector = function(dimName, presentationType)
{
	return this.removePresentation(null, dimName, presentationType, oFF.QContextType.SELECTOR);
};
oFF.QCmdAbstract.prototype.clearFieldFromResultSet = function(dimName, fieldName)
{
	return this.removeField(null, dimName, null, fieldName, oFF.QContextType.RESULT_SET);
};
oFF.QCmdAbstract.prototype.clearFieldFromSelector = function(dimName, fieldName)
{
	return this.removeField(null, dimName, null, fieldName, oFF.QContextType.SELECTOR);
};
oFF.QCmdAbstract.prototype.clearFilterById = function(uniqueId)
{
	return this.clearFilterByIdExt(oFF.FilterLayer.DYNAMIC, uniqueId);
};
oFF.QCmdAbstract.prototype.clearFilters = function()
{
	return this.clearAllFiltersExt(oFF.FilterLayer.DYNAMIC, oFF.FilterScopeVariables.IGNORE);
};
oFF.QCmdAbstract.prototype.clearFiltersByDimension = function(dimension)
{
	if (oFF.notNull(dimension))
	{
		return this.clearFiltersByDimensionExt(oFF.FilterLayer.DYNAMIC, null, dimension.getName());
	}
	return this;
};
oFF.QCmdAbstract.prototype.clearFiltersByDimensionName = function(dimName)
{
	return this.clearFiltersByDimensionExt(oFF.FilterLayer.DYNAMIC, null, dimName);
};
oFF.QCmdAbstract.prototype.clearFiltersNotAffectedByVariables = function()
{
	return this.clearAllFiltersExt(oFF.FilterLayer.DYNAMIC, oFF.FilterScopeVariables.NOT_AFFECTED_BY_VARIABLES);
};
oFF.QCmdAbstract.prototype.clearFiltersNotCreatedByVariables = function()
{
	return this.clearAllFiltersExt(oFF.FilterLayer.DYNAMIC, oFF.FilterScopeVariables.NOT_CREATED_BY_VARIABLES);
};
oFF.QCmdAbstract.prototype.clearMeasureFieldByTypeFromResultSet = function(presentationType)
{
	return this.removePresentation(oFF.DimensionType.MEASURE_STRUCTURE, null, presentationType, oFF.QContextType.RESULT_SET);
};
oFF.QCmdAbstract.prototype.clearMeasureFieldByTypeFromSelector = function(presentationType)
{
	return this.removePresentation(oFF.DimensionType.MEASURE_STRUCTURE, null, presentationType, oFF.QContextType.SELECTOR);
};
oFF.QCmdAbstract.prototype.clearMeasureFilters = function()
{
	return this.clearFiltersByDimensionExt(oFF.FilterLayer.DYNAMIC, oFF.DimensionType.MEASURE_STRUCTURE, null);
};
oFF.QCmdAbstract.prototype.clearSingleMemberFilter = function(member, comparisonOperator)
{
	if (oFF.notNull(member))
	{
		let dimName = member.getDimension().getName();
		return this.clearSingleMemberFilterByName(dimName, member.getName(), comparisonOperator);
	}
	return this;
};
oFF.QCmdAbstract.prototype.clearSingleMemberFilterByDimension = function(dimension, memberName, comparisonOperator)
{
	if (oFF.notNull(dimension))
	{
		return this.clearSingleMemberFilterByName(dimension.getName(), memberName, comparisonOperator);
	}
	return this;
};
oFF.QCmdAbstract.prototype.clearSorting = function()
{
	return this.clearSort(null, null);
};
oFF.QCmdAbstract.prototype.clearVisibilityFilterById = function(uniqueId)
{
	return this.clearFilterByIdExt(oFF.FilterLayer.VISIBILITY, uniqueId);
};
oFF.QCmdAbstract.prototype.clearVisibilityFilters = function()
{
	return this.clearAllFiltersExt(oFF.FilterLayer.VISIBILITY, oFF.FilterScopeVariables.IGNORE);
};
oFF.QCmdAbstract.prototype.clearVisibilityFiltersByDimension = function(dimension)
{
	if (oFF.notNull(dimension))
	{
		return this.clearFiltersByDimensionExt(oFF.FilterLayer.VISIBILITY, null, dimension.getName());
	}
	return this;
};
oFF.QCmdAbstract.prototype.clearVisibilityFiltersByDimensionName = function(dimName)
{
	return this.clearFiltersByDimensionExt(oFF.FilterLayer.VISIBILITY, null, dimName);
};
oFF.QCmdAbstract.prototype.cloneOlapComponent = oFF.noSupport;
oFF.QCmdAbstract.prototype.containsResultSetField = function(dimName, fieldName)
{
	return this.containsField(dimName, fieldName, oFF.QContextType.RESULT_SET);
};
oFF.QCmdAbstract.prototype.containsSelectorField = function(dimName, fieldName)
{
	return this.containsField(dimName, fieldName, oFF.QContextType.SELECTOR);
};
oFF.QCmdAbstract.prototype.getChangedProperties = function()
{
	return null;
};
oFF.QCmdAbstract.prototype.getChangedPropertiesFromModellerMetadata = function()
{
	return null;
};
oFF.QCmdAbstract.prototype.getChangedPropertiesInDetail = function()
{
	return null;
};
oFF.QCmdAbstract.prototype.getMaxNumberOfDimensionsForExceptionAggregation = function(memberType, aggrType)
{
	return this.getMaxNumberOfDimensionsForExceptionAggregation(memberType, aggrType);
};
oFF.QCmdAbstract.prototype.getSimpleVariables = function()
{
	return this.m_simpleVariables;
};
oFF.QCmdAbstract.prototype.getSupportedDimensionsForExceptionAggregation = function(memberType, aggrType)
{
	return this.getSupportedDimensionsForExceptionAggregation(memberType, aggrType);
};
oFF.QCmdAbstract.prototype.getSupportedExceptionAggregationTypes = function(memberType)
{
	return this.getSupportedExceptionAggregationTypes(memberType);
};
oFF.QCmdAbstract.prototype.getSystemName = function()
{
	return null;
};
oFF.QCmdAbstract.prototype.moveDimensionByTypeToAxis = function(dimType, targetAxis)
{
	return this.moveDimensionExt(dimType, null, targetAxis, -1);
};
oFF.QCmdAbstract.prototype.moveDimensionOnAxisTo = function(dimName, targetAxis, index)
{
	return this.moveDimensionExt(null, dimName, targetAxis, index);
};
oFF.QCmdAbstract.prototype.moveDimensionToAxis = function(dimName, targetAxis)
{
	return this.moveDimensionExt(null, dimName, targetAxis, -1);
};
oFF.QCmdAbstract.prototype.moveDimensionToAxisStr = function(dimName, targetAxis)
{
	return this.moveDimensionToAxis(dimName, oFF.AxisType.lookup(targetAxis));
};
oFF.QCmdAbstract.prototype.moveDimensionToColumns = function(dimName)
{
	return this.moveDimensionToAxis(dimName, oFF.AxisType.COLUMNS);
};
oFF.QCmdAbstract.prototype.moveDimensionToFree = function(dimName)
{
	return this.moveDimensionToAxis(dimName, oFF.AxisType.FREE);
};
oFF.QCmdAbstract.prototype.moveDimensionToRows = function(dimName)
{
	return this.moveDimensionToAxis(dimName, oFF.AxisType.ROWS);
};
oFF.QCmdAbstract.prototype.moveMeasureDimensionToAxis = function(targetAxis)
{
	return this.moveDimensionByTypeToAxis(oFF.DimensionType.MEASURE_STRUCTURE, targetAxis);
};
oFF.QCmdAbstract.prototype.removePresentation = function(dimType, dimName, presentationType, contextType)
{
	return this.removeField(dimType, dimName, presentationType, null, contextType);
};
oFF.QCmdAbstract.prototype.setChangedProperties = oFF.noSupport;
oFF.QCmdAbstract.prototype.setSimpleVariables = function(variables)
{
	this.m_simpleVariables = variables;
};
oFF.QCmdAbstract.prototype.setTotalsVisibleOnAxis = function(axisType, visibility)
{
	if (oFF.notNull(axisType))
	{
		return this.setTotalsVisible(oFF.QModelLevel.AXES, axisType.getName(), visibility);
	}
	return this;
};
oFF.QCmdAbstract.prototype.setTotalsVisibleOnDimension = function(dimName, visibility)
{
	return this.setTotalsVisible(oFF.QModelLevel.DIMENSIONS, dimName, visibility);
};
oFF.QCmdAbstract.prototype.showKey = function(dimName)
{
	this.setField(null, dimName, oFF.PresentationType.ACTIVE_KEY, null, oFF.QContextType.RESULT_SET);
	return this;
};
oFF.QCmdAbstract.prototype.showKeyAndText = function(dimName)
{
	this.queueEventing();
	this.clearAllFields(dimName, oFF.QContextType.RESULT_SET);
	this.addPresentation(null, dimName, oFF.PresentationType.ACTIVE_KEY, oFF.QContextType.RESULT_SET);
	this.addPresentation(null, dimName, oFF.PresentationType.ACTIVE_TEXT, oFF.QContextType.RESULT_SET);
	this.resumeEventing();
	return this;
};
oFF.QCmdAbstract.prototype.showText = function(dimName)
{
	this.setField(null, dimName, oFF.PresentationType.ACTIVE_TEXT, null, oFF.QContextType.RESULT_SET);
	return this;
};
oFF.QCmdAbstract.prototype.showTextAndKey = function(dimName)
{
	this.queueEventing();
	this.clearAllFields(dimName, oFF.QContextType.RESULT_SET);
	this.addPresentation(null, dimName, oFF.PresentationType.ACTIVE_TEXT, oFF.QContextType.RESULT_SET);
	this.addPresentation(null, dimName, oFF.PresentationType.ACTIVE_KEY, oFF.QContextType.RESULT_SET);
	this.resumeEventing();
	return this;
};
oFF.QCmdAbstract.prototype.sortByField = function(fieldName, direction)
{
	return this.sort(oFF.SortType.FIELD, null, null, null, fieldName, null, direction);
};
oFF.QCmdAbstract.prototype.sortByHierarchy = function(dimName, direction)
{
	return this.sort(oFF.SortType.HIERARCHY, null, dimName, null, null, null, direction);
};
oFF.QCmdAbstract.prototype.sortByKey = function(dimName, direction)
{
	return this.sort(oFF.SortType.MEMBER_KEY, null, dimName, null, null, null, direction);
};
oFF.QCmdAbstract.prototype.sortByMeasure = function(measureName, direction)
{
	return this.sort(oFF.SortType.MEASURE, null, null, null, null, measureName, direction);
};
oFF.QCmdAbstract.prototype.sortByText = function(dimName, direction)
{
	return this.sort(oFF.SortType.MEMBER_TEXT, null, dimName, null, null, null, direction);
};

oFF.QModelComponent = function() {};
oFF.QModelComponent.prototype = new oFF.DfQContext();
oFF.QModelComponent.prototype._ff_c = "QModelComponent";

oFF.QModelComponent.m_defaultingProcess = false;
oFF.QModelComponent.s_emptyExtensions = null;
oFF.QModelComponent.prototype.m_changedListeners = null;
oFF.QModelComponent.prototype.m_changedNodes = null;
oFF.QModelComponent.prototype.m_changedProperties = null;
oFF.QModelComponent.prototype.m_changedPropertiesInDetail = null;
oFF.QModelComponent.prototype.m_currentDeltaPhase = null;
oFF.QModelComponent.prototype.m_deltaStack = null;
oFF.QModelComponent.prototype.m_deserializeListeners = null;
oFF.QModelComponent.prototype.m_extensions = null;
oFF.QModelComponent.prototype.m_isInRaiseEvents = false;
oFF.QModelComponent.prototype.m_isRRIAffectedComponent = false;
oFF.QModelComponent.prototype.m_modCounter = 0;
oFF.QModelComponent.prototype.m_name = null;
oFF.QModelComponent.prototype.m_notificationListener = null;
oFF.QModelComponent.prototype.m_primaryParent = null;
oFF.QModelComponent.prototype.m_propertiesChangedFromModelerMetadata = null;
oFF.QModelComponent.prototype.m_secondaryParents = null;
oFF.QModelComponent.prototype.m_state = null;
oFF.QModelComponent.prototype.m_storageGroupName = null;
oFF.QModelComponent.prototype.m_storageName = null;
oFF.QModelComponent.prototype.m_tagging = null;
oFF.QModelComponent.prototype.m_text = null;
oFF.QModelComponent.prototype.addSecondaryParent = function(parent)
{
	if (parent === this)
	{
		throw oFF.XException.createIllegalArgumentException("The parent cannot be set to itself");
	}
	if (oFF.isNull(this.m_secondaryParents))
	{
		this.m_secondaryParents = oFF.XListWeakRef.create();
	}
	if (!this.m_secondaryParents.contains(parent))
	{
		this.m_secondaryParents.add(parent);
	}
};
oFF.QModelComponent.prototype.assertValueType = function(value, valueType)
{
	if (oFF.notNull(value) && value.getValueType() !== valueType)
	{
		oFF.noSupport();
	}
};
oFF.QModelComponent.prototype.canHaveExtensions = function()
{
	return true;
};
oFF.QModelComponent.prototype.canMaterializeCompleteObject = function()
{
	return false;
};
oFF.QModelComponent.prototype.changedNodesContains = function(node)
{
	if (oFF.isNull(this.m_changedNodes))
	{
		this.m_changedNodes = oFF.XList.create();
		return false;
	}
	let size = this.m_changedNodes.size();
	for (let i = 0; i < size; i++)
	{
		if (this.m_changedNodes.get(i) === node)
		{
			return true;
		}
	}
	return false;
};
oFF.QModelComponent.prototype.clearChangedPropertiesInDetail = function()
{
	if (oFF.notNull(this.m_changedPropertiesInDetail))
	{
		this.m_changedPropertiesInDetail.clear();
	}
	if (oFF.notNull(this.m_changedProperties))
	{
		this.m_changedProperties.clear();
	}
	this.notifyNodeChanged();
};
oFF.QModelComponent.prototype.cloneExt = function(flags)
{
	return this.cloneOlapComponent(null, null);
};
oFF.QModelComponent.prototype.cloneOlapComponent = oFF.noSupport;
oFF.QModelComponent.prototype.copyFromInternal = function(other, flags)
{
	let originObj = other;
	this.m_name = originObj.m_name;
	this.m_text = originObj.m_text;
	let queryModel = this.getQueryManager() !== null ? this.getQueryModelBase() : null;
	if (oFF.isNull(queryModel) || !queryModel.isInQueryModelMergeFlow())
	{
		this.m_modCounter = originObj.m_modCounter;
	}
	if (oFF.notNull(originObj.m_tagging))
	{
		this.m_tagging = originObj.m_tagging.createMapByStringCopy();
	}
	if (oFF.XCollectionUtils.hasElements(originObj.m_changedProperties))
	{
		this.m_changedProperties = originObj.m_changedProperties.createSetOfStringCopy();
	}
	if (oFF.XCollectionUtils.hasElements(originObj.m_changedPropertiesInDetail))
	{
		this.m_changedPropertiesInDetail = originObj.m_changedPropertiesInDetail.createMapByStringCopy();
	}
	if (oFF.XCollectionUtils.hasElements(originObj.m_propertiesChangedFromModelerMetadata))
	{
		this.m_propertiesChangedFromModelerMetadata = originObj.m_propertiesChangedFromModelerMetadata.createSetOfStringCopy();
	}
	if (oFF.XCollectionUtils.hasElements(originObj.m_extensions))
	{
		this.m_extensions = originObj.m_extensions.createMapByStringCopy();
	}
	this.m_isRRIAffectedComponent = originObj.m_isRRIAffectedComponent;
};
oFF.QModelComponent.prototype.copyModelComponent = function(other, flags)
{
	this.copyFrom(other, flags);
};
oFF.QModelComponent.prototype.deserializeExt = function(modelFormat, expression)
{
	let jsonParser = oFF.JsonParserFactory.newInstance();
	let element = jsonParser.parse(expression);
	if (jsonParser.hasErrors())
	{
		return oFF.ExtResult.create(null, jsonParser);
	}
	oFF.XObjectExt.release(jsonParser);
	return this.deserializeInternal(this, null, modelFormat, element);
};
oFF.QModelComponent.prototype.deserializeFromContent = function(content)
{
	return this.deserializeInternal(this, null, content.getContentType(), content.getJsonContent());
};
oFF.QModelComponent.prototype.deserializeFromElementExt = function(modelFormat, element)
{
	return this.deserializeInternal(this, null, modelFormat, element);
};
oFF.QModelComponent.prototype.deserializeInternal = function(modelComponent, componentType, modelFormat, element)
{
	let importer = oFF.QInAImportFactory.create(this.getApplication(), modelFormat, null);
	if (oFF.isNull(element))
	{
		if (oFF.isNull(importer))
		{
			return oFF.ExtResult.create(null, oFF.MessageManager.createMessageManagerExt(this.getSession()));
		}
		return oFF.ExtResult.create(null, importer);
	}
	this.raiseDeserializeEvent(element);
	let context = this.getContext();
	let resultComponent = importer.importComponent(componentType, element, modelComponent, oFF.notNull(modelComponent) ? modelComponent.getParent() : null, context);
	return oFF.ExtResult.create(resultComponent, importer);
};
oFF.QModelComponent.prototype.deserializeNewComponentExt = function(componentType, modelFormat, expression)
{
	let jsonParser = oFF.JsonParserFactory.newInstance();
	let element = jsonParser.parse(expression);
	if (jsonParser.hasErrors())
	{
		return oFF.ExtResult.create(null, jsonParser);
	}
	oFF.XObjectExt.release(jsonParser);
	return this.deserializeInternal(null, componentType, modelFormat, element);
};
oFF.QModelComponent.prototype.deserializeNewComponentFromElementExt = function(componentType, modelFormat, element)
{
	return this.deserializeInternal(this, componentType, modelFormat, element);
};
oFF.QModelComponent.prototype.finishModelerEventing = function()
{
	if (this.m_deltaStack.get(0) === oFF.QDeltaOperationPhase.NOTE_MODELER_CHANGES)
	{
		this.m_deltaStack.removeAt(0);
	}
};
oFF.QModelComponent.prototype.getChangedListeners = function()
{
	if (oFF.isNull(this.m_changedListeners))
	{
		this.m_changedListeners = oFF.XList.create();
	}
	return this.m_changedListeners;
};
oFF.QModelComponent.prototype.getChangedProperties = function()
{
	if (oFF.isNull(this.m_changedProperties))
	{
		this.m_changedProperties = oFF.XHashSetOfString.create();
	}
	return this.m_changedProperties;
};
oFF.QModelComponent.prototype.getChangedPropertiesFromModellerMetadata = function()
{
	if (oFF.isNull(this.m_propertiesChangedFromModelerMetadata))
	{
		this.m_propertiesChangedFromModelerMetadata = oFF.XHashSetOfString.create();
	}
	return this.m_propertiesChangedFromModelerMetadata;
};
oFF.QModelComponent.prototype.getChangedPropertiesInDetail = function()
{
	if (oFF.isNull(this.m_changedPropertiesInDetail))
	{
		this.m_changedPropertiesInDetail = oFF.XHashMapByString.create();
	}
	return this.m_changedPropertiesInDetail;
};
oFF.QModelComponent.prototype.getChildren = function()
{
	return this.getChildrenIterator();
};
oFF.QModelComponent.prototype.getChildrenIterator = function()
{
	let namedChildren = this.getNamedChildren();
	let indexedChildren = this.getIndexedChildren();
	if (oFF.notNull(indexedChildren) && oFF.isNull(namedChildren))
	{
		return indexedChildren;
	}
	let all = oFF.XList.create();
	if (oFF.notNull(namedChildren))
	{
		let keysAsReadOnlyListOfString = namedChildren.getKeysAsReadOnlyList();
		let keys = oFF.XList.createWithList(keysAsReadOnlyListOfString);
		keys.sortByDirection(oFF.XSortDirection.ASCENDING);
		let size = keys.size();
		for (let i = 0; i < size; i++)
		{
			all.add(namedChildren.getByKey(keys.get(i)));
		}
	}
	if (oFF.notNull(indexedChildren))
	{
		while (indexedChildren.hasNext())
		{
			all.add(indexedChildren.next());
		}
	}
	return all.getIterator();
};
oFF.QModelComponent.prototype.getComponentType = function()
{
	return this.getOlapComponentType();
};
oFF.QModelComponent.prototype.getContentConstant = function()
{
	return null;
};
oFF.QModelComponent.prototype.getContentElement = function()
{
	return this;
};
oFF.QModelComponent.prototype.getDisplayDescription = function()
{
	let text = this.getText();
	return oFF.XStringUtils.isNotNullAndNotEmpty(text) ? text : this.getDisplayName();
};
oFF.QModelComponent.prototype.getDisplayName = function()
{
	return this.getName();
};
oFF.QModelComponent.prototype.getExtensionByName = function(key)
{
	if (oFF.isNull(this.m_extensions))
	{
		return null;
	}
	return this.m_extensions.getByKey(key);
};
oFF.QModelComponent.prototype.getExtensions = function()
{
	if (oFF.isNull(this.m_extensions))
	{
		if (oFF.isNull(oFF.QModelComponent.s_emptyExtensions))
		{
			oFF.QModelComponent.s_emptyExtensions = oFF.XHashMapByString.create();
		}
		return oFF.QModelComponent.s_emptyExtensions;
	}
	return this.m_extensions;
};
oFF.QModelComponent.prototype.getIndexedChildren = function()
{
	return null;
};
oFF.QModelComponent.prototype.getListenerIndex = function(listener)
{
	if (oFF.notNull(this.m_changedListeners))
	{
		let listenerSize = this.m_changedListeners.size();
		for (let i = 0; i < listenerSize; i++)
		{
			if (this.m_changedListeners.get(i).getListener() === listener)
			{
				return i;
			}
		}
	}
	return -1;
};
oFF.QModelComponent.prototype.getMetaValue = function(propertyName)
{
	let metaValue = null;
	let valuesMap = this.getChangedPropertiesInDetail().getByKey(propertyName);
	if (oFF.notNull(valuesMap))
	{
		metaValue = valuesMap.getByKey("MetaValue");
	}
	return metaValue;
};
oFF.QModelComponent.prototype.getModCounter = function()
{
	return this.m_modCounter;
};
oFF.QModelComponent.prototype.getName = function()
{
	return this.m_name;
};
oFF.QModelComponent.prototype.getNamedChildren = function()
{
	return null;
};
oFF.QModelComponent.prototype.getNotificationListener = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_notificationListener);
};
oFF.QModelComponent.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.OLAP;
};
oFF.QModelComponent.prototype.getParent = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_primaryParent);
};
oFF.QModelComponent.prototype.getParentComponent = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_primaryParent);
};
oFF.QModelComponent.prototype.getPropertyStringValue = function(type)
{
	if (type === oFF.OlapProperty.NAME)
	{
		return this.getName();
	}
	if (type === oFF.OlapProperty.TEXT)
	{
		return this.getText();
	}
	return null;
};
oFF.QModelComponent.prototype.getSecondaryParents = function()
{
	return this.m_secondaryParents;
};
oFF.QModelComponent.prototype.getStorageGroupName = function()
{
	return this.m_storageGroupName;
};
oFF.QModelComponent.prototype.getStorageName = function()
{
	if (this.getContext() !== null && this.getContext().getKeyRefStorage() !== null)
	{
		return this.getContext().getKeyRefStorage().getName();
	}
	return this.m_storageName;
};
oFF.QModelComponent.prototype.getStorageObjectName = function()
{
	return this.m_name;
};
oFF.QModelComponent.prototype.getTagValue = function(tagName)
{
	return null;
};
oFF.QModelComponent.prototype.getTagging = function()
{
	if (oFF.isNull(this.m_tagging))
	{
		this.m_tagging = oFF.XHashMapByString.create();
	}
	return this.m_tagging;
};
oFF.QModelComponent.prototype.getText = function()
{
	return this.m_text;
};
oFF.QModelComponent.prototype.hasPropertyChanged = function(propertyName)
{
	return oFF.notNull(this.m_changedProperties) && this.m_changedProperties.contains(propertyName);
};
oFF.QModelComponent.prototype.hasPropertyChangedForInAData = function(propertyName)
{
	return this.hasPropertyChanged(propertyName) || this.isPropertyUpdatedByModelerMetadata(propertyName);
};
oFF.QModelComponent.prototype.incrementModCounterRecursively = function()
{
	this.updateModCounter(this.getModCounter() + 1);
	let parent = this.getParent();
	while (oFF.notNull(parent))
	{
		parent.updateModCounter(parent.getModCounter() + 1);
		parent = parent.getParent();
	}
	let secParents = this.getSecondaryParents();
	if (oFF.XCollectionUtils.hasElements(secParents))
	{
		oFF.XCollectionUtils.forEach(secParents, (sp) => {
			sp.incrementModCounterRecursively();
		});
	}
};
oFF.QModelComponent.prototype.isComponentNode = function()
{
	return false;
};
oFF.QModelComponent.prototype.isDefaultingProcess = function()
{
	return oFF.QModelComponent.m_defaultingProcess;
};
oFF.QModelComponent.prototype.isDeltaRecordingActive = function()
{
	return this.isEventingStopped() === false && this.isEventingMetadataUpdate() === false;
};
oFF.QModelComponent.prototype.isEventingMetadataUpdate = function()
{
	let parentDeltaNode = this.getParentComponent();
	let isEventingMetadataUpdate;
	if (oFF.isNull(parentDeltaNode))
	{
		isEventingMetadataUpdate = oFF.XCollectionUtils.hasElements(this.m_deltaStack) && this.m_deltaStack.get(0) === oFF.QDeltaOperationPhase.NOTIFY_PAUSE_MODCOUNTER;
	}
	else
	{
		isEventingMetadataUpdate = parentDeltaNode.isEventingMetadataUpdate();
	}
	return isEventingMetadataUpdate;
};
oFF.QModelComponent.prototype.isEventingStopped = function()
{
	let parentDeltaNode = this.getParentComponent();
	let isEventingStopped;
	if (oFF.isNull(parentDeltaNode))
	{
		let queryModel = this.getQueryModel();
		if (this.getOlapComponentType() !== oFF.OlapComponentType.QUERY_MODEL && oFF.notNull(queryModel))
		{
			isEventingStopped = queryModel.isEventingStopped();
		}
		else
		{
			isEventingStopped = this.m_currentDeltaPhase === oFF.QDeltaOperationPhase.STOP;
		}
	}
	else
	{
		isEventingStopped = parentDeltaNode.isEventingStopped();
	}
	return isEventingStopped;
};
oFF.QModelComponent.prototype.isLeaf = function()
{
	return !this.isNode();
};
oFF.QModelComponent.prototype.isNode = function()
{
	return false;
};
oFF.QModelComponent.prototype.isNotingModelerChanges = function()
{
	let parentDeltaNode = this.getParentComponent();
	let isNotingModelerChanges;
	if (oFF.isNull(parentDeltaNode))
	{
		isNotingModelerChanges = oFF.XCollectionUtils.hasElements(this.m_deltaStack) && this.m_deltaStack.get(0) === oFF.QDeltaOperationPhase.NOTE_MODELER_CHANGES;
	}
	else
	{
		isNotingModelerChanges = parentDeltaNode.isNotingModelerChanges();
	}
	return isNotingModelerChanges;
};
oFF.QModelComponent.prototype.isPropertyUpdatedByModelerMetadata = function(propertyName)
{
	return oFF.notNull(this.m_propertiesChangedFromModelerMetadata) && this.m_propertiesChangedFromModelerMetadata.contains(propertyName);
};
oFF.QModelComponent.prototype.isRRIAffectedComponent = function()
{
	return this.m_isRRIAffectedComponent;
};
oFF.QModelComponent.prototype.isRaisingEvents = function()
{
	let parentDeltaNode = this.getParentComponent();
	let isRaisingEvents;
	if (oFF.isNull(parentDeltaNode))
	{
		isRaisingEvents = !oFF.XCollectionUtils.hasElements(this.m_deltaStack) || this.m_deltaStack.get(0) !== oFF.QDeltaOperationPhase.NOTIFY_DO_NOT_RAISEEVENTS;
	}
	else
	{
		isRaisingEvents = parentDeltaNode.isRaisingEvents();
	}
	return isRaisingEvents;
};
oFF.QModelComponent.prototype.isRoot = function()
{
	return oFF.isNull(this.m_primaryParent);
};
oFF.QModelComponent.prototype.mergeDeepRecursive = function(settings, other) {};
oFF.QModelComponent.prototype.notifyChildAttached = function(child)
{
	if (oFF.notNull(child))
	{
		child.setParent(this);
	}
	this.notifyNodeChanged();
};
oFF.QModelComponent.prototype.notifyChildChanged = function(changedNodes)
{
	if (!this.isEventingStopped())
	{
		if (this.m_state === oFF.QDeltaChangeState.UNCHANGED)
		{
			if (!this.isEventingMetadataUpdate())
			{
				this.m_modCounter++;
			}
			if (this.isRaisingEvents())
			{
				this.m_state = oFF.QDeltaChangeState.CHILDREN_CHANGED;
			}
		}
		else if (this.m_state === oFF.QDeltaChangeState.NODE_CHANGED)
		{
			this.m_state = oFF.QDeltaChangeState.NODE_AND_CHILDREN_CHANGED;
			if (!this.isEventingMetadataUpdate())
			{
				this.m_modCounter++;
			}
		}
		changedNodes.add(this);
		let primaryParent = this.getParentComponent();
		if (oFF.notNull(primaryParent))
		{
			primaryParent.notifyChildChanged(changedNodes);
		}
		if (oFF.notNull(this.m_secondaryParents))
		{
			let parentSize = this.m_secondaryParents.size();
			for (let i = 0; i < parentSize; i++)
			{
				let secondaryParent = this.m_secondaryParents.get(i);
				if (oFF.notNull(secondaryParent))
				{
					let doNotRaiseAndReset = !this.isRaisingEvents();
					if (doNotRaiseAndReset)
					{
						secondaryParent.setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_DO_NOT_RAISEEVENTS);
					}
					secondaryParent.notifyChildChanged(changedNodes);
					if (doNotRaiseAndReset)
					{
						secondaryParent.resumeEventing();
					}
				}
			}
		}
		if (oFF.isNull(this.m_primaryParent) && this.isRaisingEvents())
		{
			let nodeSize = changedNodes.size();
			for (let j = 0; j < nodeSize; j++)
			{
				let node = changedNodes.get(j);
				if (!this.changedNodesContains(node))
				{
					this.m_changedNodes.add(node);
				}
			}
			this.raiseEvents();
		}
	}
};
oFF.QModelComponent.prototype.notifyNodeChanged = function()
{
	this.notifyChildChanged(oFF.XList.create());
};
oFF.QModelComponent.prototype.notifyPropertyBooleanChanged = function(name, oldValue, newValue)
{
	if (this.isDeltaRecordingActive())
	{
		this.getChangedProperties().add(name);
	}
	else if (this.isNotingModelerChanges())
	{
		this.getChangedPropertiesFromModellerMetadata().add(name);
	}
	if (oldValue !== newValue)
	{
		this.notifyNodeChanged();
	}
};
oFF.QModelComponent.prototype.notifyPropertyChanged = function(name, oldValue, newValue)
{
	if (this.isDeltaRecordingActive())
	{
		this.getChangedProperties().add(name);
	}
	else if (this.isNotingModelerChanges())
	{
		this.getChangedPropertiesFromModellerMetadata().add(name);
	}
	this.notifyNodeChanged();
};
oFF.QModelComponent.prototype.notifyPropertyConstantChanged = function(name, oldValue, newValue)
{
	if (this.isDefaultingProcess())
	{
		this.getChangedProperties().removeElement(name);
		this.getChangedPropertiesInDetail().remove(name);
	}
	else if (this.isDeltaRecordingActive())
	{
		this.getChangedProperties().add(name);
		this.updateDetails(name, oldValue, newValue);
	}
	else if (this.isNotingModelerChanges())
	{
		this.getChangedPropertiesFromModellerMetadata().add(name);
		this.updateModellerMetadataProperty(name, newValue);
	}
	if (oldValue !== newValue)
	{
		this.notifyNodeChanged();
	}
};
oFF.QModelComponent.prototype.notifyPropertyIntegerChanged = function(name, oldValue, newValue)
{
	if (this.isDefaultingProcess())
	{
		this.getChangedProperties().removeElement(name);
		this.getChangedPropertiesInDetail().remove(name);
	}
	else if (this.isDeltaRecordingActive())
	{
		this.getChangedProperties().add(name);
		this.updateDetails(name, oFF.XIntegerValue.create(oldValue), oFF.XIntegerValue.create(newValue));
	}
	else if (this.isNotingModelerChanges())
	{
		this.getChangedPropertiesFromModellerMetadata().add(name);
		this.updateModellerMetadataProperty(name, oFF.XIntegerValue.create(newValue));
	}
	if (oldValue !== newValue)
	{
		this.notifyNodeChanged();
	}
};
oFF.QModelComponent.prototype.notifyPropertyStringChanged = function(name, oldValue, newValue)
{
	if (this.isDeltaRecordingActive())
	{
		this.getChangedProperties().add(name);
	}
	else if (this.isNotingModelerChanges())
	{
		this.getChangedPropertiesFromModellerMetadata().add(name);
	}
	if (!oFF.XString.isEqual(oldValue, newValue))
	{
		this.notifyNodeChanged();
	}
};
oFF.QModelComponent.prototype.onModelChangeAfterBroadcast = function(changedNodes)
{
	let owner = this.getNotificationListener();
	if (oFF.notNull(owner))
	{
		owner.onModelChange(oFF.QDeltaBroadcastPhase.AFTER_EVENTS_BROADCAST);
	}
};
oFF.QModelComponent.prototype.onModelChangeBeforeBroadcast = function(changedNodes)
{
	let owner = this.getNotificationListener();
	if (oFF.notNull(owner))
	{
		owner.onModelChange(oFF.QDeltaBroadcastPhase.BEFORE_EVENTS_BROADCAST);
	}
};
oFF.QModelComponent.prototype.processDeserializeExt = function(syncType, componentImportedListener, customIdentifier, modelFormat, expression)
{
	let jsonParser = oFF.JsonParserFactory.newInstance();
	let element = oFF.notNull(jsonParser) ? jsonParser.parse(expression) : null;
	if (oFF.isNull(jsonParser) || jsonParser.hasErrors() || oFF.isNull(element))
	{
		let parseError = oFF.ExtResult.create(null, jsonParser);
		if (oFF.notNull(componentImportedListener))
		{
			componentImportedListener.onImportDone(parseError, null, customIdentifier);
		}
		return parseError;
	}
	oFF.XObjectExt.release(jsonParser);
	let importer = oFF.QInAImportFactory.create(this.getApplication(), modelFormat, null);
	if (oFF.isNull(importer))
	{
		let importerError = oFF.ExtResult.create(null, oFF.MessageManager.createMessageManagerExt(this.getSession()));
		if (oFF.notNull(componentImportedListener))
		{
			componentImportedListener.onImportDone(importerError, null, customIdentifier);
		}
		return importerError;
	}
	this.raiseDeserializeEvent(element);
	return importer.processImport(syncType, componentImportedListener, customIdentifier, null, element, this, this.getParent(), this.getContext());
};
oFF.QModelComponent.prototype.queueEventing = function()
{
	this.setDeltaPhase(oFF.QDeltaOperationPhase.QUEUE);
};
oFF.QModelComponent.prototype.raiseDeserializeEvent = function(currentState)
{
	if (oFF.notNull(this.m_deserializeListeners))
	{
		let listenerSize = this.m_deserializeListeners.size();
		for (let idxListener = 0; idxListener < listenerSize; idxListener++)
		{
			let pair = this.m_deserializeListeners.get(idxListener);
			let listener = pair.getListener();
			if (oFF.notNull(listener))
			{
				listener.onModelComponentDeserialize(this, currentState, pair.getCustomIdentifier());
			}
		}
	}
};
oFF.QModelComponent.prototype.raiseEvents = function()
{
	if (oFF.isNull(this.m_currentDeltaPhase) && !this.m_isInRaiseEvents && oFF.notNull(this.m_changedNodes))
	{
		this.m_isInRaiseEvents = true;
		this.onModelChangeBeforeBroadcast(this.m_changedNodes);
		let nodeSize = this.m_changedNodes.size();
		for (let idxNode = 0; idxNode < nodeSize; idxNode++)
		{
			let node = this.m_changedNodes.get(idxNode);
			let listeners = node.getChangedListeners();
			if (oFF.notNull(listeners))
			{
				let listenerSize = listeners.size();
				for (let idxListener = 0; idxListener < listenerSize; idxListener++)
				{
					let pair = listeners.get(idxListener);
					let listener = pair.getListener();
					if (oFF.notNull(listener))
					{
						listener.onModelComponentChanged(node, pair.getCustomIdentifier());
					}
				}
			}
		}
		this.onModelChangeAfterBroadcast(this.m_changedNodes);
		this.resetChangeState();
		this.m_isInRaiseEvents = false;
	}
};
oFF.QModelComponent.prototype.reconfigure = function(procedure)
{
	this.stopEventing();
	procedure();
	this.resumeEventing();
	this.notifyNodeChanged();
};
oFF.QModelComponent.prototype.registerChangedListener = function(listener, customIdentifier)
{
	if (oFF.isNull(this.m_changedListeners))
	{
		this.m_changedListeners = oFF.XList.create();
	}
	this.unregisterChangedListener(listener);
	this.m_changedListeners.add(oFF.QChangedListenerPair.create(listener, customIdentifier));
	return null;
};
oFF.QModelComponent.prototype.releaseObject = function()
{
	this.m_name = null;
	this.m_text = null;
	this.m_state = null;
	this.m_modCounter = 0;
	this.m_primaryParent = null;
	this.m_currentDeltaPhase = null;
	this.m_changedListeners = oFF.XObjectExt.release(this.m_changedListeners);
	this.m_deserializeListeners = oFF.XObjectExt.release(this.m_deserializeListeners);
	this.m_secondaryParents = oFF.XObjectExt.release(this.m_secondaryParents);
	if (oFF.notNull(this.m_changedNodes))
	{
		this.m_changedNodes.clear();
		this.m_changedNodes = oFF.XObjectExt.release(this.m_changedNodes);
	}
	this.m_tagging = oFF.XObjectExt.release(this.m_tagging);
	this.m_notificationListener = null;
	if (oFF.notNull(this.m_changedProperties))
	{
		this.m_changedProperties = oFF.XObjectExt.release(this.m_changedProperties);
	}
	if (oFF.notNull(this.m_changedPropertiesInDetail))
	{
		this.m_changedPropertiesInDetail = oFF.XObjectExt.release(this.m_changedPropertiesInDetail);
	}
	if (oFF.notNull(this.m_propertiesChangedFromModelerMetadata))
	{
		this.m_propertiesChangedFromModelerMetadata = oFF.XObjectExt.release(this.m_propertiesChangedFromModelerMetadata);
	}
	if (oFF.notNull(this.m_extensions))
	{
		this.m_extensions = oFF.XObjectExt.release(this.m_extensions);
	}
	if (oFF.notNull(this.m_deltaStack))
	{
		this.m_deltaStack = oFF.XObjectExt.release(this.m_deltaStack);
	}
	oFF.DfQContext.prototype.releaseObject.call( this );
};
oFF.QModelComponent.prototype.removeSecondaryParent = function(parent)
{
	if (oFF.notNull(this.m_secondaryParents))
	{
		let parentsSize = this.m_secondaryParents.size();
		for (let i = 0; i < parentsSize; i++)
		{
			if (this.m_secondaryParents.get(i) === parent)
			{
				this.m_secondaryParents.removeAt(i);
				break;
			}
		}
	}
};
oFF.QModelComponent.prototype.resetChangeState = function()
{
	if (oFF.isNull(this.m_primaryParent) && oFF.notNull(this.m_changedNodes))
	{
		let nodeSize = this.m_changedNodes.size();
		for (let i = 0; i < nodeSize; i++)
		{
			let node = this.m_changedNodes.get(i);
			if (node !== this && !node.isRoot())
			{
				node.resetChangeState();
			}
		}
		this.m_changedNodes.clear();
	}
	this.m_state = oFF.QDeltaChangeState.UNCHANGED;
};
oFF.QModelComponent.prototype.resumeEventing = function()
{
	this.setDeltaPhase(oFF.QDeltaOperationPhase.RESUME);
};
oFF.QModelComponent.prototype.serialize = function(modelFormat, capabilities)
{
	return this.serializeToStringExt(modelFormat, capabilities);
};
oFF.QModelComponent.prototype.serializeToContent = function(modelFormat)
{
	return this.serializeToContentExt(modelFormat, null);
};
oFF.QModelComponent.prototype.serializeToContentExt = function(modelFormat, capabilities)
{
	let exporter;
	let theCapabilities = capabilities;
	if (oFF.isNull(theCapabilities) && modelFormat.isTypeOf(oFF.QModelFormat.INA_DATA))
	{
		theCapabilities = this.getModelCapabilities();
	}
	let contextType = null;
	if (modelFormat.isTypeOf(oFF.QModelFormat.INA_DATA))
	{
		contextType = oFF.QContextType.RESULT_SET;
	}
	exporter = oFF.QInAExportFactory.create(this.getApplication(), modelFormat, theCapabilities, contextType);
	let element = exporter.exportComponent(null, this, null, oFF.QImExFlag.DEFAULT_ALL);
	return oFF.XContent.createJsonObjectContent(modelFormat, element);
};
oFF.QModelComponent.prototype.serializeToElement = function(modelFormat)
{
	return this.serializeToElementExt(modelFormat, null);
};
oFF.QModelComponent.prototype.serializeToElementExt = function(modelFormat, capabilities)
{
	let content = this.serializeToContentExt(modelFormat, capabilities);
	return content.getJsonContent();
};
oFF.QModelComponent.prototype.serializeToFormat = function(modelFormat)
{
	return this.serializeToString(modelFormat);
};
oFF.QModelComponent.prototype.serializeToString = function(modelFormat)
{
	return this.serializeToStringExt(modelFormat, null);
};
oFF.QModelComponent.prototype.serializeToStringExt = function(modelFormat, capabilities)
{
	let content = this.serializeToContentExt(modelFormat, capabilities);
	return content.getString();
};
oFF.QModelComponent.prototype.setChangedProperties = function(changedProperties)
{
	if (oFF.notNull(this.m_changedProperties))
	{
		this.m_changedProperties = oFF.XObjectExt.release(this.m_changedProperties);
	}
	this.m_changedProperties = changedProperties;
};
oFF.QModelComponent.prototype.setDeltaPhase = function(phase)
{
	let parentDeltaNode = this.getParentComponent();
	if (oFF.isNull(parentDeltaNode))
	{
		if (oFF.isNull(this.m_deltaStack))
		{
			this.m_deltaStack = oFF.XList.create();
		}
		if (phase === oFF.QDeltaOperationPhase.RESUME)
		{
			this.m_deltaStack.removeAt(this.m_deltaStack.size() - 1);
		}
		else if (phase === oFF.QDeltaOperationPhase.NOTE_MODELER_CHANGES)
		{
			this.m_deltaStack.insert(0, phase);
		}
		else
		{
			this.m_deltaStack.add(phase);
		}
		let oldPhase = this.m_currentDeltaPhase;
		this.m_currentDeltaPhase = null;
		let stackSize = this.m_deltaStack.size();
		for (let i = 0; i < stackSize && this.m_currentDeltaPhase !== oFF.QDeltaOperationPhase.STOP; i++)
		{
			this.m_currentDeltaPhase = this.m_deltaStack.get(i);
		}
		if ((oldPhase === oFF.QDeltaOperationPhase.QUEUE || oldPhase === oFF.QDeltaOperationPhase.NOTIFY_PAUSE_MODCOUNTER) && oFF.isNull(this.m_currentDeltaPhase))
		{
			this.raiseEvents();
		}
	}
	else
	{
		parentDeltaNode.setDeltaPhase(phase);
	}
};
oFF.QModelComponent.prototype.setExtensions = function(extensions)
{
	if (oFF.notNull(this.m_extensions))
	{
		this.m_extensions = oFF.XObjectExt.release(this.m_extensions);
	}
	this.m_extensions = extensions;
};
oFF.QModelComponent.prototype.setName = function(name)
{
	this.m_name = name;
};
oFF.QModelComponent.prototype.setNotificationListener = function(owner)
{
	this.m_notificationListener = oFF.XWeakReferenceUtil.getWeakRef(owner);
};
oFF.QModelComponent.prototype.setParent = function(parent)
{
	this.m_primaryParent = oFF.XWeakReferenceUtil.getWeakRef(parent);
	if (oFF.notNull(parent) && this.getContext() === null)
	{
		this.setContext(parent.getContext());
	}
};
oFF.QModelComponent.prototype.setRRIAffectedComponent = function(rriAffectedComponent)
{
	this.m_isRRIAffectedComponent = rriAffectedComponent;
};
oFF.QModelComponent.prototype.setStorageGroupName = function(groupName)
{
	this.m_storageGroupName = groupName;
};
oFF.QModelComponent.prototype.setStorageName = function(storageName)
{
	this.m_storageName = storageName;
};
oFF.QModelComponent.prototype.setTagging = function(tagging)
{
	this.m_tagging = tagging;
};
oFF.QModelComponent.prototype.setText = function(text)
{
	this.m_text = text;
};
oFF.QModelComponent.prototype.setupModelComponent = function(context, parentNode)
{
	if (oFF.isNull(context) && oFF.notNull(parentNode))
	{
		this.setupContext(parentNode.getContext());
	}
	else
	{
		this.setupContext(context);
	}
	this.m_primaryParent = oFF.XWeakReferenceUtil.getWeakRef(parentNode);
	this.m_state = oFF.QDeltaChangeState.UNCHANGED;
	this.m_isInRaiseEvents = false;
	this.m_changedProperties = null;
	this.m_changedPropertiesInDetail = null;
	this.m_propertiesChangedFromModelerMetadata = null;
};
oFF.QModelComponent.prototype.setupModelComponentWithName = function(context, parentNode, name)
{
	this.setupModelComponent(context, parentNode);
	this.setName(name);
};
oFF.QModelComponent.prototype.shouldExportInRepoDeltaFormat = function()
{
	return true;
};
oFF.QModelComponent.prototype.stopEventing = function()
{
	this.setDeltaPhase(oFF.QDeltaOperationPhase.STOP);
};
oFF.QModelComponent.prototype.toString = function()
{
	let output = "[Exporter not available]";
	if (this.getOlapComponentType() !== oFF.OlapComponentType.COMPONENT_LIST)
	{
		let exporter = oFF.QInAExportFactory.create(this.getApplication(), oFF.QModelFormat.INA_CLONE, null, null);
		let element = exporter.exportComponent(null, this, null, oFF.QImExFlag.DEFAULT_ALL);
		if (oFF.notNull(element))
		{
			output = oFF.PrUtils.serialize(element, true, true, 4);
		}
	}
	return output;
};
oFF.QModelComponent.prototype.toggleDefaultingProcess = function(defaultingFlow)
{
	oFF.QModelComponent.m_defaultingProcess = defaultingFlow;
};
oFF.QModelComponent.prototype.unregisterChangedListener = function(listener)
{
	let listenerIndex = this.getListenerIndex(listener);
	if (listenerIndex !== -1)
	{
		let removeAt = this.m_changedListeners.removeAt(listenerIndex);
		oFF.XObjectExt.release(removeAt);
	}
	return null;
};
oFF.QModelComponent.prototype.updateDetails = function(name, oldValue, newValue)
{
	let valuesMap = this.getChangedPropertiesInDetail().getByKey(name);
	if (oFF.isNull(valuesMap))
	{
		valuesMap = oFF.XHashMapByString.create();
		this.getChangedPropertiesInDetail().put(name, valuesMap);
		valuesMap.put("MetaValue", oFF.isNull(oldValue) ? oFF.XStringValue.create("ActuallyNull") : oldValue);
	}
	valuesMap.put("RuntimeValue", newValue);
};
oFF.QModelComponent.prototype.updateModCounter = function(modCounter)
{
	this.m_modCounter = modCounter;
};
oFF.QModelComponent.prototype.updateModellerMetadataProperty = function(name, oldValue)
{
	let valuesMap = this.getChangedPropertiesInDetail().getByKey(name);
	if (oFF.isNull(valuesMap))
	{
		valuesMap = oFF.XHashMapByString.create();
		this.getChangedPropertiesInDetail().put(name, valuesMap);
	}
	valuesMap.put("MetaValue", oFF.isNull(oldValue) ? oFF.XStringValue.create("ActuallyNull") : oldValue);
};

oFF.HierarchyCatalogService = function() {};
oFF.HierarchyCatalogService.prototype = new oFF.DfService();
oFF.HierarchyCatalogService.prototype._ff_c = "HierarchyCatalogService";

oFF.HierarchyCatalogService.CLAZZ = null;
oFF.HierarchyCatalogService.staticSetup = function()
{
	oFF.HierarchyCatalogService.CLAZZ = oFF.XClass.create(oFF.HierarchyCatalogService);
};
oFF.HierarchyCatalogService.prototype.m_catalogManager = null;
oFF.HierarchyCatalogService.prototype.m_dataSource = null;
oFF.HierarchyCatalogService.prototype.m_dimensionName = null;
oFF.HierarchyCatalogService.prototype.m_dimensionQueryModel = null;
oFF.HierarchyCatalogService.prototype._getConfigBw = function(config)
{
	let datasource = oFF.QFactory.createDataSourceWithType(oFF.MetaObjectType.HIERARCHY, config.getDimensionName());
	datasource.setEnvironmentName(config.getEnvironmentName());
	return oFF.QueryServiceConfig.createWithDataSource(this.getApplication(), config.getSystemName(), datasource);
};
oFF.HierarchyCatalogService.prototype._getConfigHana = function(config)
{
	this.m_dataSource = oFF.QFactory.createDataSourceWithFqn(config.getDataSourceName());
	return oFF.QueryServiceConfig.createWithDataSourceName(this.getApplication(), config.getSystemName(), config.isRequestHierarchyLevels() ? "view:[][][$$HierarchyLevels$$]" : "view:[][][$$HierarchyName$$]");
};
oFF.HierarchyCatalogService.prototype.getCatalogManager = function()
{
	return this.m_catalogManager;
};
oFF.HierarchyCatalogService.prototype.isServiceConfigMatching = function(serviceConfig, connection, messages)
{
	let systemDescription = serviceConfig.getSystemDescription();
	if (!oFF.HierarchyCatalogUtil.supportsHierarchyCatalog2(serviceConfig.getApplication(), systemDescription))
	{
		return false;
	}
	return oFF.DfService.prototype.isServiceConfigMatching.call( this , serviceConfig, connection, messages);
};
oFF.HierarchyCatalogService.prototype.onQueryManagerCreated = function(extResult, queryManager, customIdentifier)
{
	this.addAllMessages(extResult);
	if (extResult.isValid())
	{
		this.m_catalogManager = oFF.QFactory.createHierarchyCatalogManager(queryManager, this.m_dataSource, this.m_dimensionName, this.m_dimensionQueryModel);
		queryManager.setCacheHintEnabled(this.getServiceConfig().isCacheHitsEnabled());
	}
	this.m_dataSource = null;
	this.m_dimensionName = null;
	this.m_dimensionQueryModel = null;
	this.endSync();
};
oFF.HierarchyCatalogService.prototype.processSynchronization = function(syncType)
{
	let config = this.getServiceConfig();
	this.m_dimensionName = config.getDimensionName();
	this.m_dimensionQueryModel = config.getQueryModel();
	let queryServiceConfig;
	if (config.getSystemType().isTypeOf(oFF.SystemType.HANA))
	{
		queryServiceConfig = this._getConfigHana(config);
	}
	else
	{
		queryServiceConfig = this._getConfigBw(config);
	}
	if (oFF.notNull(this.m_dimensionQueryModel))
	{
		queryServiceConfig.getClientInfo().copyFromContext(this.m_dimensionQueryModel);
	}
	queryServiceConfig.setConnectionContainer(this.getConnection());
	queryServiceConfig.processQueryManagerCreation(syncType, this, null);
	return true;
};
oFF.HierarchyCatalogService.prototype.releaseObjectInternal = function()
{
	this.m_catalogManager = oFF.XObjectExt.release(this.m_catalogManager);
	this.m_dataSource = null;
	this.m_dimensionName = null;
	this.m_dimensionQueryModel = null;
	oFF.DfService.prototype.releaseObjectInternal.call( this );
};

oFF.HierarchyCatalogServiceConfig = function() {};
oFF.HierarchyCatalogServiceConfig.prototype = new oFF.DfServiceConfig();
oFF.HierarchyCatalogServiceConfig.prototype._ff_c = "HierarchyCatalogServiceConfig";

oFF.HierarchyCatalogServiceConfig.CLAZZ = null;
oFF.HierarchyCatalogServiceConfig.staticSetup = function()
{
	oFF.HierarchyCatalogServiceConfig.CLAZZ = oFF.XClass.create(oFF.HierarchyCatalogServiceConfig);
};
oFF.HierarchyCatalogServiceConfig.prototype.m_cacheHitsEnabled = false;
oFF.HierarchyCatalogServiceConfig.prototype.m_dataSourceName = null;
oFF.HierarchyCatalogServiceConfig.prototype.m_dimensionName = null;
oFF.HierarchyCatalogServiceConfig.prototype.m_environmentName = null;
oFF.HierarchyCatalogServiceConfig.prototype.m_invalidDimension = false;
oFF.HierarchyCatalogServiceConfig.prototype.m_queryModel = null;
oFF.HierarchyCatalogServiceConfig.prototype.m_requestHierarchyLevels = false;
oFF.HierarchyCatalogServiceConfig.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onHierarchyCatalogManagerCreated(extResult, data, customIdentifier);
};
oFF.HierarchyCatalogServiceConfig.prototype.getDataSourceName = function()
{
	return this.m_dataSourceName;
};
oFF.HierarchyCatalogServiceConfig.prototype.getDimensionName = function()
{
	return this.m_dimensionName;
};
oFF.HierarchyCatalogServiceConfig.prototype.getEnvironmentName = function()
{
	return this.m_environmentName;
};
oFF.HierarchyCatalogServiceConfig.prototype.getQueryModel = function()
{
	return this.m_queryModel;
};
oFF.HierarchyCatalogServiceConfig.prototype.isCacheHitsEnabled = function()
{
	return this.m_cacheHitsEnabled;
};
oFF.HierarchyCatalogServiceConfig.prototype.isRequestHierarchyLevels = function()
{
	return this.m_requestHierarchyLevels;
};
oFF.HierarchyCatalogServiceConfig.prototype.processHierarchyCatalogManagerCreation = function(syncType, listener, customIdentifier)
{
	if (this.m_invalidDimension)
	{
		let result = oFF.ExtResult.createWithMessage(oFF.XMessage.createMessage(oFF.OriginLayer.SERVER, oFF.Severity.WARNING, oFF.ErrorCodes.INVALID_DIMENSION, oFF.XStringUtils.concatenate3("Hierarchy Catalog is not supported for the dimensions '", this.m_dimensionName, "'!"), null, false, null));
		if (oFF.notNull(listener))
		{
			listener.onHierarchyCatalogManagerCreated(result, null, customIdentifier);
		}
		return result;
	}
	return this.processSyncAction(syncType, listener, customIdentifier);
};
oFF.HierarchyCatalogServiceConfig.prototype.releaseObjectInternal = function()
{
	this.m_dataSourceName = null;
	this.m_dimensionName = null;
	this.m_queryModel = null;
	this.m_environmentName = null;
	oFF.DfServiceConfig.prototype.releaseObjectInternal.call( this );
};
oFF.HierarchyCatalogServiceConfig.prototype.setCacheHitsEnabled = function(cacheHitsEnabled)
{
	this.m_cacheHitsEnabled = cacheHitsEnabled;
};
oFF.HierarchyCatalogServiceConfig.prototype.setDataFromService = function(service)
{
	this.setData(service.getCatalogManager());
};
oFF.HierarchyCatalogServiceConfig.prototype.setDataSourceName = function(dataSourceName)
{
	this.m_dataSourceName = dataSourceName;
};
oFF.HierarchyCatalogServiceConfig.prototype.setDimension = function(dimension)
{
	if (oFF.notNull(dimension))
	{
		this.m_invalidDimension = dimension.getDimensionType() === oFF.DimensionType.SECONDARY_STRUCTURE || dimension.getDimensionType() === oFF.DimensionType.MEASURE_STRUCTURE;
		this.m_dimensionName = dimension.getName();
		this.m_queryModel = dimension.getQueryModel();
		this.m_cacheHitsEnabled = dimension.getQueryManager().isCacheHintEnabled();
	}
};
oFF.HierarchyCatalogServiceConfig.prototype.setDimensionName = function(dimensionName)
{
	this.m_dimensionName = dimensionName;
};
oFF.HierarchyCatalogServiceConfig.prototype.setEnvironmentName = function(environmentName)
{
	this.m_environmentName = environmentName;
};
oFF.HierarchyCatalogServiceConfig.prototype.setRequestHierarchyLevels = function(requestHierarchyLevels)
{
	this.m_requestHierarchyLevels = requestHierarchyLevels;
};

oFF.QueryServiceConfigImpl = function() {};
oFF.QueryServiceConfigImpl.prototype = new oFF.DfServiceConfig();
oFF.QueryServiceConfigImpl.prototype._ff_c = "QueryServiceConfigImpl";

oFF.QueryServiceConfigImpl.CLAZZ = null;
oFF.QueryServiceConfigImpl._create = function(application)
{
	let object = new oFF.QueryServiceConfigImpl();
	object.setupConfig(application);
	return object;
};
oFF.QueryServiceConfigImpl.staticSetup = function()
{
	oFF.QueryServiceConfigImpl.CLAZZ = oFF.XClass.create(oFF.QueryServiceConfigImpl);
};
oFF.QueryServiceConfigImpl.prototype.m_blendingDefinition = null;
oFF.QueryServiceConfigImpl.prototype.m_clientInfo = null;
oFF.QueryServiceConfigImpl.prototype.m_datasource = null;
oFF.QueryServiceConfigImpl.prototype.m_definition = null;
oFF.QueryServiceConfigImpl.prototype.m_dimensionsOnAxes = null;
oFF.QueryServiceConfigImpl.prototype.m_instanceId = null;
oFF.QueryServiceConfigImpl.prototype.m_isCachingActive = false;
oFF.QueryServiceConfigImpl.prototype.m_isEnableAutoVariableSubmit = false;
oFF.QueryServiceConfigImpl.prototype.m_isExternalizedDynamicFilter = false;
oFF.QueryServiceConfigImpl.prototype.m_isExternalizedNonVariableFilter = false;
oFF.QueryServiceConfigImpl.prototype.m_isFusionActive = false;
oFF.QueryServiceConfigImpl.prototype.m_isLoadingDefaultQuery = false;
oFF.QueryServiceConfigImpl.prototype.m_isRequestingConditions = false;
oFF.QueryServiceConfigImpl.prototype.m_isRequestingDataCells = false;
oFF.QueryServiceConfigImpl.prototype.m_isRequestingDynamicFilter = false;
oFF.QueryServiceConfigImpl.prototype.m_isRequestingExceptions = false;
oFF.QueryServiceConfigImpl.prototype.m_isRequestingSorting = false;
oFF.QueryServiceConfigImpl.prototype.m_isRequestingUniversalDisplayHierarchies = false;
oFF.QueryServiceConfigImpl.prototype.m_isRequestingVariableVariants = false;
oFF.QueryServiceConfigImpl.prototype.m_isRequestingVariables = false;
oFF.QueryServiceConfigImpl.prototype.m_isSkipSourceQueryForNonMetadataRequests = false;
oFF.QueryServiceConfigImpl.prototype.m_lightweight = false;
oFF.QueryServiceConfigImpl.prototype.m_makeEmptyVariableDefinitionInsteadOfMetadata = false;
oFF.QueryServiceConfigImpl.prototype.m_metadata = null;
oFF.QueryServiceConfigImpl.prototype.m_minAttr = false;
oFF.QueryServiceConfigImpl.prototype.m_minimizedMetadata = false;
oFF.QueryServiceConfigImpl.prototype.m_mode = null;
oFF.QueryServiceConfigImpl.prototype.m_model = null;
oFF.QueryServiceConfigImpl.prototype.m_modeller = null;
oFF.QueryServiceConfigImpl.prototype.m_openForEdit = false;
oFF.QueryServiceConfigImpl.prototype.m_providerType = null;
oFF.QueryServiceConfigImpl.prototype.m_repo = null;
oFF.QueryServiceConfigImpl.prototype.m_requiredDimensions = null;
oFF.QueryServiceConfigImpl.prototype.m_serverCustomization = null;
oFF.QueryServiceConfigImpl.prototype.m_skipResultSetGeneration = false;
oFF.QueryServiceConfigImpl.prototype.m_stateChangedListener = null;
oFF.QueryServiceConfigImpl.prototype.m_supportsDimensionLazyLoad = false;
oFF.QueryServiceConfigImpl.prototype.m_useCloneCfg = false;
oFF.QueryServiceConfigImpl.prototype.m_useMetadataCache = false;
oFF.QueryServiceConfigImpl.prototype.m_useResultSetCache = false;
oFF.QueryServiceConfigImpl.prototype.m_variables = null;
oFF.QueryServiceConfigImpl.prototype.__refreshMetadata = oFF.noSupport;
oFF.QueryServiceConfigImpl.prototype.addServerCustomizations = function(name)
{
	this.m_serverCustomization.add(name);
};
oFF.QueryServiceConfigImpl.prototype.beforeListenerCall = function()
{
	let values = this.m_stateChangedListener.getValuesAsReadOnlyList();
	let valuesSize = values.size();
	for (let i = 0; i < valuesSize; i++)
	{
		let pair = values.get(i);
		this.attachListener(pair.getFirstObject(), oFF.ListenerType.OLAP_COMPONENT_CHANGED, pair.getSecondObject());
	}
};
oFF.QueryServiceConfigImpl.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onQueryManagerCreated(extResult, data, customIdentifier);
};
oFF.QueryServiceConfigImpl.prototype.callTypedListener = function(extResult, type, listener, data, customIdentifier)
{
	if (type === oFF.ListenerType.OLAP_COMPONENT_CHANGED)
	{
		listener.onModelComponentChanged(this, customIdentifier);
	}
	else
	{
		oFF.DfServiceConfig.prototype.callTypedListener.call( this , extResult, type, listener, data, customIdentifier);
	}
};
oFF.QueryServiceConfigImpl.prototype.canHaveExtensions = function()
{
	return false;
};
oFF.QueryServiceConfigImpl.prototype.canMaterializeCompleteObject = function()
{
	return false;
};
oFF.QueryServiceConfigImpl.prototype.checkModelVersionValidity = oFF.noSupport;
oFF.QueryServiceConfigImpl.prototype.clearClientInfo = function()
{
	this.getClientInfo().clearClientInfo();
};
oFF.QueryServiceConfigImpl.prototype.cloneExt = function(flags)
{
	let cloneObject = oFF.QueryServiceConfigImpl._create(this.getApplication());
	cloneObject.copyFrom(this, flags);
	return cloneObject;
};
oFF.QueryServiceConfigImpl.prototype.cloneOlapComponent = oFF.noSupport;
oFF.QueryServiceConfigImpl.prototype.cloneUsingExtDataSource = function(dataSource)
{
	let serviceConfigClone = this.clone();
	serviceConfigClone.setDataSource(dataSource);
	return serviceConfigClone;
};
oFF.QueryServiceConfigImpl.prototype.copyFromInternal = function(other, flags)
{
	oFF.DfServiceConfig.prototype.copyFromInternal.call( this , other, flags);
	let otherObj = other;
	this.setDataSource(oFF.XObjectExt.cloneIfNotNull(otherObj.getDataSource()));
	this.setProviderType(otherObj.getProviderType());
	this.setIsOpenForEdit(this.isOpenForEdit());
	this.setMakeEmptyVariableDefinitionInsteadOfMetadata(otherObj.getMakeEmptyVariableDefinitionInsteadOfMetadata());
	this.setRequestTimeZone(otherObj.getRequestTimeZone());
	this.setSupportsDimensionLazyLoad(otherObj.supportsDimensionLazyLoad());
	this.setDefinitionByContent(otherObj.getDefinitionContent());
	this.setMetadataContent(otherObj.getMetadataContent());
	this.setRepositoryContent(otherObj.getRepositoryContent());
	this.setMinimizedMetadata(otherObj.getMinimizedMetadata());
	this.setStartVariableContent(otherObj.getStartVariablesContent());
	this.m_useCloneCfg = otherObj.useClone();
	this.m_isFusionActive = otherObj.isFusionActive();
	this.m_isCachingActive = otherObj.isCachingActive();
	this.m_isEnableAutoVariableSubmit = otherObj.isEnableAutoVariableSubmit();
	this.m_isExternalizedDynamicFilter = otherObj.isExternalizedDynamicFilter();
	this.m_isExternalizedNonVariableFilter = otherObj.isExternalizedNonVariableFilter();
	let requiredDimensions = otherObj.getRequiredDimensions();
	if (oFF.isNull(requiredDimensions))
	{
		this.setRequiredDimensions(null);
	}
	else
	{
		this.setRequiredDimensions(oFF.XList.createWithList(requiredDimensions));
	}
	this.m_isSkipSourceQueryForNonMetadataRequests = otherObj.isSkipSourceQueryForNonMetadataRequests();
	this.m_isRequestingDataCells = otherObj.isRequestingDataCells();
	this.m_isRequestingConditions = otherObj.isRequestingConditions();
	this.m_isRequestingDynamicFilter = otherObj.isRequestingDynamicFilter();
	this.m_isRequestingExceptions = otherObj.isRequestingExceptions();
	this.m_isRequestingSorting = otherObj.isRequestingSorting();
	this.m_isRequestingUniversalDisplayHierarchies = otherObj.isRequestingUniversalDisplayHierarchies();
	this.m_isRequestingVariables = otherObj.isRequestingVariables();
	this.m_isRequestingVariableVariants = otherObj.isRequestingVariableVariants();
	this.m_lightweight = otherObj.isLightweight();
	this.m_minAttr = otherObj.isRequestingMinimizedAttributes();
	let dimsOnAxes = otherObj.getDimensionsOnAxes();
	if (oFF.isNull(dimsOnAxes))
	{
		this.setDimensionsOnAxes(null);
	}
	else
	{
		this.setDimensionsOnAxes(oFF.XList.createWithList(dimsOnAxes));
	}
	let blendingClone = oFF.XObjectExt.cloneExtIfNotNull(otherObj.getBlendingDefinition(), flags);
	if (oFF.notNull(blendingClone))
	{
		this.setBlendingDefinition(blendingClone);
	}
	this.setMode(otherObj.getMode());
	this.setModellerContent(otherObj.getModellerContent());
	this.m_useResultSetCache = otherObj.usesResultSetCache();
	this.m_useMetadataCache = otherObj.usesMetadataCache();
	this.getClientInfo().copyFrom(otherObj.getClientInfo(), flags);
};
oFF.QueryServiceConfigImpl.prototype.enableMetadataCache = function(useMetadataCache)
{
	this.m_useMetadataCache = useMetadataCache;
};
oFF.QueryServiceConfigImpl.prototype.enableResultSetCache = function(useResultSetCache)
{
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.RESULT_SET_CACHE))
	{
		this.m_useResultSetCache = useResultSetCache;
	}
};
oFF.QueryServiceConfigImpl.prototype.getBlendingDefinition = function()
{
	return this.m_blendingDefinition;
};
oFF.QueryServiceConfigImpl.prototype.getChangedProperties = function()
{
	return null;
};
oFF.QueryServiceConfigImpl.prototype.getChangedPropertiesFromModellerMetadata = function()
{
	return null;
};
oFF.QueryServiceConfigImpl.prototype.getChangedPropertiesInDetail = function()
{
	return null;
};
oFF.QueryServiceConfigImpl.prototype.getClientComponent = function()
{
	return this.getClientInfo().getClientComponent();
};
oFF.QueryServiceConfigImpl.prototype.getClientIdentifier = function()
{
	return this.getClientInfo().getClientIdentifier();
};
oFF.QueryServiceConfigImpl.prototype.getClientInfo = function()
{
	return this.m_clientInfo;
};
oFF.QueryServiceConfigImpl.prototype.getClientVersion = function()
{
	return this.getApplication().getClientVersion();
};
oFF.QueryServiceConfigImpl.prototype.getComponentType = function()
{
	return this.getOlapComponentType();
};
oFF.QueryServiceConfigImpl.prototype.getContext = function()
{
	return null;
};
oFF.QueryServiceConfigImpl.prototype.getDataRequest = function()
{
	if (this.getDefinitionType() === oFF.QModelFormat.INA_CLONE_RENDERING)
	{
		return this.getDataRequestFromStructure(this.getDefinitionAsStructure());
	}
	if (this.getDefinitionType() === oFF.QModelFormat.INA_DATA)
	{
		return this.getDefinitionAsStructure();
	}
	return null;
};
oFF.QueryServiceConfigImpl.prototype.getDataRequestAsString = function()
{
	if (this.getDefinitionType() === oFF.QModelFormat.INA_CLONE_RENDERING)
	{
		let dataRequest = this.getDataRequestFromStructure(this.getDefinitionAsStructure());
		return oFF.PrUtils.serialize(dataRequest, false, false, 0);
	}
	if (this.getDefinitionType() === oFF.QModelFormat.INA_DATA)
	{
		return this.getDefinitionAsString();
	}
	return null;
};
oFF.QueryServiceConfigImpl.prototype.getDataRequestFromStructure = function(queryDefinition)
{
	return queryDefinition.getStructureByKey(oFF.InAConstantsBios.QY_DATA_REQUEST);
};
oFF.QueryServiceConfigImpl.prototype.getDataSource = function()
{
	return this.m_datasource;
};
oFF.QueryServiceConfigImpl.prototype.getDataSourceBase = function()
{
	return this.m_datasource;
};
oFF.QueryServiceConfigImpl.prototype.getDefinition = function()
{
	let content = null;
	if (oFF.notNull(this.m_definition))
	{
		content = this.m_definition.getJsonContent();
	}
	return content;
};
oFF.QueryServiceConfigImpl.prototype.getDefinitionAsString = function()
{
	let result = null;
	if (oFF.notNull(this.m_definition))
	{
		result = this.m_definition.getString();
	}
	return result;
};
oFF.QueryServiceConfigImpl.prototype.getDefinitionAsStructure = function()
{
	let result = null;
	if (oFF.notNull(this.m_definition))
	{
		let definition = this.m_definition.getJsonContent();
		if (oFF.notNull(definition) && definition.isStructure())
		{
			result = definition;
		}
	}
	return result;
};
oFF.QueryServiceConfigImpl.prototype.getDefinitionContent = function()
{
	return this.m_definition;
};
oFF.QueryServiceConfigImpl.prototype.getDefinitionType = function()
{
	let modelFormat = null;
	if (oFF.notNull(this.m_definition))
	{
		modelFormat = this.m_definition.getContentType();
	}
	return modelFormat;
};
oFF.QueryServiceConfigImpl.prototype.getDimensionsOnAxes = function()
{
	return this.m_dimensionsOnAxes;
};
oFF.QueryServiceConfigImpl.prototype.getInstanceId = function()
{
	return this.m_instanceId;
};
oFF.QueryServiceConfigImpl.prototype.getLanguageLocale = function()
{
	return this.getClientInfo().getLanguageLocale();
};
oFF.QueryServiceConfigImpl.prototype.getMakeEmptyVariableDefinitionInsteadOfMetadata = function()
{
	return this.m_makeEmptyVariableDefinitionInsteadOfMetadata;
};
oFF.QueryServiceConfigImpl.prototype.getMetadataContent = function()
{
	return this.m_metadata;
};
oFF.QueryServiceConfigImpl.prototype.getMinimizedMetadata = function()
{
	return this.m_minimizedMetadata;
};
oFF.QueryServiceConfigImpl.prototype.getMode = function()
{
	return this.m_mode;
};
oFF.QueryServiceConfigImpl.prototype.getModelContent = function()
{
	return this.m_model;
};
oFF.QueryServiceConfigImpl.prototype.getModellerContent = function()
{
	return this.m_modeller;
};
oFF.QueryServiceConfigImpl.prototype.getName = function()
{
	return null;
};
oFF.QueryServiceConfigImpl.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.QUERY_SERVICE_CONFIG;
};
oFF.QueryServiceConfigImpl.prototype.getOlapEnv = function()
{
	return null;
};
oFF.QueryServiceConfigImpl.prototype.getProviderType = function()
{
	return this.m_providerType;
};
oFF.QueryServiceConfigImpl.prototype.getQueryManager = function()
{
	return this.getData();
};
oFF.QueryServiceConfigImpl.prototype.getQueryManagerBasedOnMicroCube = function()
{
	let dataSource = this.getDataSourceBase();
	if (!dataSource.isBasedOnMicroCube())
	{
		return null;
	}
	let originalQueryManager = dataSource.getMicroCube().getQueryManager();
	let queryManager = originalQueryManager.cloneQueryManagerUsingExtDataSource(oFF.QueryCloneMode.MICRO_CUBE, dataSource);
	return queryManager;
};
oFF.QueryServiceConfigImpl.prototype.getQueryServiceConfig = function()
{
	return this;
};
oFF.QueryServiceConfigImpl.prototype.getRepositoryContent = function()
{
	return this.m_repo;
};
oFF.QueryServiceConfigImpl.prototype.getRequiredDimensions = function()
{
	return this.m_requiredDimensions;
};
oFF.QueryServiceConfigImpl.prototype.getServerCustomizations = function()
{
	return this.m_serverCustomization;
};
oFF.QueryServiceConfigImpl.prototype.getServiceTypeInfo = function()
{
	return oFF.OlapApiModule.SERVICE_TYPE_QUERY_CONSUMER;
};
oFF.QueryServiceConfigImpl.prototype.getStartVariables = function()
{
	if (oFF.isNull(this.m_variables))
	{
		return null;
	}
	return this.m_variables.getJsonContent().asStructure();
};
oFF.QueryServiceConfigImpl.prototype.getStartVariablesContent = function()
{
	return this.m_variables;
};
oFF.QueryServiceConfigImpl.prototype.getStorageGroupName = function()
{
	return null;
};
oFF.QueryServiceConfigImpl.prototype.getStorageName = function()
{
	return null;
};
oFF.QueryServiceConfigImpl.prototype.getStorageObjectName = function()
{
	return null;
};
oFF.QueryServiceConfigImpl.prototype.getStoryId = function()
{
	return this.getClientInfo().getStoryId();
};
oFF.QueryServiceConfigImpl.prototype.getStoryName = function()
{
	return this.getClientInfo().getStoryName();
};
oFF.QueryServiceConfigImpl.prototype.getWidgetId = function()
{
	return this.getClientInfo().getWidgetId();
};
oFF.QueryServiceConfigImpl.prototype.isCachingActive = function()
{
	return this.m_isCachingActive;
};
oFF.QueryServiceConfigImpl.prototype.isEnableAutoVariableSubmit = function()
{
	return this.m_isEnableAutoVariableSubmit;
};
oFF.QueryServiceConfigImpl.prototype.isEventingStopped = function()
{
	return false;
};
oFF.QueryServiceConfigImpl.prototype.isExternalizedDynamicFilter = function()
{
	return this.m_isExternalizedDynamicFilter;
};
oFF.QueryServiceConfigImpl.prototype.isExternalizedNonVariableFilter = function()
{
	return this.m_isExternalizedNonVariableFilter;
};
oFF.QueryServiceConfigImpl.prototype.isFusionActive = function()
{
	return this.m_isFusionActive;
};
oFF.QueryServiceConfigImpl.prototype.isLightweight = function()
{
	return this.m_lightweight;
};
oFF.QueryServiceConfigImpl.prototype.isLoadingDefaultQuery = function()
{
	return this.m_isLoadingDefaultQuery;
};
oFF.QueryServiceConfigImpl.prototype.isOpenForEdit = function()
{
	return this.m_openForEdit;
};
oFF.QueryServiceConfigImpl.prototype.isRequestingConditions = function()
{
	return this.m_isRequestingConditions;
};
oFF.QueryServiceConfigImpl.prototype.isRequestingDataCells = function()
{
	return this.m_isRequestingDataCells;
};
oFF.QueryServiceConfigImpl.prototype.isRequestingDefaultSettings = function()
{
	let isRequestingDefault = this.m_isRequestingConditions && this.m_isRequestingDataCells && this.m_isRequestingDynamicFilter && this.m_isRequestingExceptions && this.m_isRequestingSorting && this.m_isRequestingUniversalDisplayHierarchies && this.m_isRequestingVariables && this.m_isRequestingVariableVariants;
	let isRequestingDimensionSubset = oFF.XCollectionUtils.hasElements(this.m_dimensionsOnAxes) || oFF.XCollectionUtils.hasElements(this.m_requiredDimensions);
	return isRequestingDefault && !isRequestingDimensionSubset && !this.m_minimizedMetadata;
};
oFF.QueryServiceConfigImpl.prototype.isRequestingDynamicFilter = function()
{
	return this.m_isRequestingDynamicFilter;
};
oFF.QueryServiceConfigImpl.prototype.isRequestingExceptions = function()
{
	return this.m_isRequestingExceptions;
};
oFF.QueryServiceConfigImpl.prototype.isRequestingMinimizedAttributes = function()
{
	return this.m_minAttr;
};
oFF.QueryServiceConfigImpl.prototype.isRequestingSorting = function()
{
	return this.m_isRequestingSorting;
};
oFF.QueryServiceConfigImpl.prototype.isRequestingUniversalDisplayHierarchies = function()
{
	return this.m_isRequestingUniversalDisplayHierarchies;
};
oFF.QueryServiceConfigImpl.prototype.isRequestingVariableVariants = function()
{
	return this.m_isRequestingVariableVariants;
};
oFF.QueryServiceConfigImpl.prototype.isRequestingVariables = function()
{
	return this.m_isRequestingVariables;
};
oFF.QueryServiceConfigImpl.prototype.isSkipResultSetGeneration = function()
{
	return this.m_skipResultSetGeneration;
};
oFF.QueryServiceConfigImpl.prototype.isSkipSourceQueryForNonMetadataRequests = function()
{
	return this.m_isSkipSourceQueryForNonMetadataRequests;
};
oFF.QueryServiceConfigImpl.prototype.linkToQueryManager = function(queryManager)
{
	this.setDataFromService(queryManager);
};
oFF.QueryServiceConfigImpl.prototype.onInitActionDone = function(messages, queryManager)
{
	this.copyAllMessages(messages);
	let terminated = !this.isValid();
	this.setData(terminated ? null : queryManager);
	if (!terminated)
	{
		queryManager.getClientInfo().copyFromContext(this);
	}
	this.callListeners(false);
	if (terminated)
	{
		oFF.XObjectExt.release(queryManager);
	}
};
oFF.QueryServiceConfigImpl.prototype.prepareDefinition = function()
{
	let definitionType = this.getDefinitionType();
	if (oFF.notNull(definitionType))
	{
		let definitionContentStructure = this.getDefinitionAsStructure();
		if (oFF.notNull(definitionContentStructure))
		{
			let preparator = oFF.QueryPreparatorFactory.newInstance(definitionType);
			if (oFF.notNull(preparator))
			{
				preparator.prepareBeforeMetadata(this, definitionContentStructure);
			}
		}
	}
};
oFF.QueryServiceConfigImpl.prototype.processQueryManagerCreation = function(syncType, listener, customIdentifier)
{
	let result = null;
	if (syncType === oFF.SyncType.REGISTER)
	{
		this.attachListener(listener, oFF.ListenerType.SPECIFIC, customIdentifier);
	}
	else if (syncType === oFF.SyncType.UNREGISTER)
	{
		this.detachListener(listener);
	}
	else if (oFF.notNull(this.m_datasource) && this.m_datasource.getType() === oFF.MetaObjectType.URL)
	{
		this.m_isFusionActive = false;
		let sequence2 = oFF.SyncActionSequence.create(syncType, listener, customIdentifier, this);
		let loadAction = oFF.QueryResourceLoadAction3.createAndRun(oFF.SyncType.DELAYED, this, null);
		sequence2.addAction(loadAction);
		let mainAction2 = this.processSyncAction(oFF.SyncType.DELAYED, null, null);
		sequence2.setMainAction(mainAction2);
		sequence2.process();
		result = sequence2;
	}
	else if (this.m_useCloneCfg)
	{
		result = oFF.QInitAction.createAndRun(syncType, listener, customIdentifier, this);
	}
	else
	{
		result = this.processSyncAction(syncType, listener, customIdentifier);
	}
	return result;
};
oFF.QueryServiceConfigImpl.prototype.queueEventing = function() {};
oFF.QueryServiceConfigImpl.prototype.registerChangedListener = function(listener, customIdentifier)
{
	this.m_stateChangedListener.put(listener, oFF.XPair.create(listener, customIdentifier));
	return null;
};
oFF.QueryServiceConfigImpl.prototype.releaseObjectInternal = function()
{
	this.m_serverCustomization = oFF.XObjectExt.release(this.m_serverCustomization);
	this.m_providerType = null;
	this.m_mode = null;
	this.m_blendingDefinition = null;
	this.m_datasource = null;
	this.m_definition = null;
	this.m_metadata = null;
	this.m_dimensionsOnAxes = oFF.XObjectExt.release(this.m_dimensionsOnAxes);
	this.m_requiredDimensions = oFF.XObjectExt.release(this.m_requiredDimensions);
	this.m_modeller = oFF.XObjectExt.release(this.m_modeller);
	oFF.DfServiceConfig.prototype.releaseObjectInternal.call( this );
};
oFF.QueryServiceConfigImpl.prototype.resumeEventing = function() {};
oFF.QueryServiceConfigImpl.prototype.serialize = function()
{
	let root = oFF.PrFactory.createStructure();
	let exporter = oFF.QInAExportFactory.createForRepository(this.getApplication(), this.getDataSource().getModelCapabilities());
	root.put("DataSource", exporter.exportDataSource(this.getDataSource(), false));
	root.putString("ProviderType", this.m_providerType.toString());
	root.putString("QueryManagerMode", this.m_mode.toString());
	root.putString("InstanceId", this.m_instanceId);
	root.putBoolean("RequestingDataCells", this.m_isRequestingDataCells);
	root.putBoolean("RequestingConditions", this.m_isRequestingConditions);
	root.putBoolean("RequestingDynamicFilter", this.m_isRequestingDynamicFilter);
	root.putBoolean("RequestingExceptions", this.m_isRequestingExceptions);
	root.putBoolean("RequestingSorting", this.m_isRequestingSorting);
	root.putBoolean("RequestingUniversalDisplayHierarchies", this.m_isRequestingUniversalDisplayHierarchies);
	root.putBoolean("RequestingVariables", this.m_isRequestingVariables);
	root.putBoolean("RequestingVariableVariants", this.m_isRequestingVariableVariants);
	root.putBoolean("LoadingDefaultQuery", this.m_isLoadingDefaultQuery);
	let requiredDimensions = root.putNewList("RequiredDimensions");
	requiredDimensions.addAllStrings(this.m_requiredDimensions);
	let dimensionsOnAxes = root.putNewList("DimensionsOnAxes");
	dimensionsOnAxes.addAllStrings(this.m_dimensionsOnAxes);
	let serverCustomization = root.putNewList("ServerCustomization");
	serverCustomization.addAllStrings(this.m_serverCustomization.getValuesAsReadOnlyList());
	let tagging = root.putNewStructure("Tagging");
	let tagginKeys = this.getTagging().getKeysAsIterator();
	while (tagginKeys.hasNext())
	{
		let taggingKey = tagginKeys.next();
		let taggingValue = this.getTagging().getByKey(taggingKey);
		tagging.putString(taggingKey, taggingValue);
	}
	let toggles = root.putNewList("Toggles");
	toggles.addAllStrings(this.getSession().getFeatureToggles().getKeysAsReadOnlyList());
	let connectionSettings = root.putNewStructure("ConnectionSettings");
	connectionSettings.putString("ConnectionName", this.getConnectionName());
	connectionSettings.putString("SystemName", this.getSystemName());
	root.putString("DataProviderName", this.getDataProviderName());
	return root;
};
oFF.QueryServiceConfigImpl.prototype.setBlendingDefinition = function(blendingDefinition)
{
	this.m_blendingDefinition = blendingDefinition;
	this.setMode(oFF.QueryManagerMode.BLENDING);
};
oFF.QueryServiceConfigImpl.prototype.setChangedProperties = oFF.noSupport;
oFF.QueryServiceConfigImpl.prototype.setClientInfo = function(version, identifier, component)
{
	this.getApplication().setClientInfo(version, identifier, component);
};
oFF.QueryServiceConfigImpl.prototype.setDataFromService = function(service)
{
	if (oFF.notNull(service))
	{
		service.getClientInfo().copyFromContext(this);
	}
	this.setData(service);
};
oFF.QueryServiceConfigImpl.prototype.setDataRequest = function(request)
{
	this.setDefinitionByStructure(oFF.QModelFormat.INA_DATA, request);
};
oFF.QueryServiceConfigImpl.prototype.setDataRequestAsString = function(request)
{
	this.m_definition = oFF.XContent.createStringContent(oFF.QModelFormat.INA_DATA, request);
};
oFF.QueryServiceConfigImpl.prototype.setDataSource = function(dataSource)
{
	this.m_datasource = dataSource;
};
oFF.QueryServiceConfigImpl.prototype.setDataSourceBasedOnMicroCube = function(microCube)
{
	let microCubeQueryManager = microCube.getQueryManager();
	let dataSource = oFF.QFactory.createDataSourceWithType(oFF.MetaObjectType.QUERY, microCubeQueryManager.getNameForMicroCubeUse());
	dataSource.setMicroCube(microCube);
	dataSource.setMicroCubeName(microCubeQueryManager.getNameForMicroCubeUse());
	this.m_datasource = dataSource;
	return dataSource;
};
oFF.QueryServiceConfigImpl.prototype.setDataSourceByName = function(name)
{
	let identifierBase = oFF.QFactory.createDataSource();
	identifierBase.setFullQualifiedName(name);
	this.m_datasource = identifierBase;
	return identifierBase;
};
oFF.QueryServiceConfigImpl.prototype.setDefinitionByContent = function(definition)
{
	this.m_definition = definition;
};
oFF.QueryServiceConfigImpl.prototype.setDefinitionByJsonObject = function(type, definitionJson)
{
	this.m_definition = oFF.XContent.createJsonObjectContent(type, definitionJson);
};
oFF.QueryServiceConfigImpl.prototype.setDefinitionByString = function(type, definitionContent)
{
	this.m_definition = oFF.XContent.createStringContent(type, definitionContent);
};
oFF.QueryServiceConfigImpl.prototype.setDefinitionByStructure = function(type, definitionStructure)
{
	this.m_definition = oFF.XContent.createJsonObjectContent(type, definitionStructure);
};
oFF.QueryServiceConfigImpl.prototype.setDimensionsOnAxes = function(dimensionsOnAxes)
{
	this.m_dimensionsOnAxes = dimensionsOnAxes;
};
oFF.QueryServiceConfigImpl.prototype.setGenericServiceDescription = function(genericServiceDescription)
{
	this.getDataSourceBase().setGenericServiceDescription(genericServiceDescription);
};
oFF.QueryServiceConfigImpl.prototype.setInstanceId = function(instanceId)
{
	this.m_instanceId = instanceId;
};
oFF.QueryServiceConfigImpl.prototype.setIsCachingActive = function(isCachingActive)
{
	this.m_isCachingActive = isCachingActive;
};
oFF.QueryServiceConfigImpl.prototype.setIsEnableAutoVariableSubmit = function(isEnableAutoVariableSubmit)
{
	this.m_isEnableAutoVariableSubmit = isEnableAutoVariableSubmit;
};
oFF.QueryServiceConfigImpl.prototype.setIsExternalizedDynamicFilter = function(isExternalizedDynamicFilter)
{
	this.m_isExternalizedDynamicFilter = isExternalizedDynamicFilter;
};
oFF.QueryServiceConfigImpl.prototype.setIsExternalizedNonVariableFilter = function(isExternalizedNonVariableFilter)
{
	this.m_isExternalizedNonVariableFilter = isExternalizedNonVariableFilter;
};
oFF.QueryServiceConfigImpl.prototype.setIsFusionActive = function(isFusionServiceActive)
{
	this.m_isFusionActive = isFusionServiceActive;
};
oFF.QueryServiceConfigImpl.prototype.setIsOpenForEdit = function(openForEdit)
{
	this.m_openForEdit = openForEdit;
};
oFF.QueryServiceConfigImpl.prototype.setIsRequestingConditions = function(isRequestingConditions)
{
	this.m_isRequestingConditions = isRequestingConditions;
};
oFF.QueryServiceConfigImpl.prototype.setIsRequestingDataCells = function(isRequestingDataCells)
{
	this.m_isRequestingDataCells = isRequestingDataCells;
};
oFF.QueryServiceConfigImpl.prototype.setIsRequestingDynamicFilter = function(isRequestingDynamicFilter)
{
	this.m_isRequestingDynamicFilter = isRequestingDynamicFilter;
};
oFF.QueryServiceConfigImpl.prototype.setIsRequestingExceptions = function(isRequestingExceptions)
{
	this.m_isRequestingExceptions = isRequestingExceptions;
};
oFF.QueryServiceConfigImpl.prototype.setIsRequestingMinimizedAttributes = function(minimizedAttributesOnDimensions)
{
	this.m_minAttr = minimizedAttributesOnDimensions;
};
oFF.QueryServiceConfigImpl.prototype.setIsRequestingSorting = function(isRequestingSorting)
{
	this.m_isRequestingSorting = isRequestingSorting;
};
oFF.QueryServiceConfigImpl.prototype.setIsRequestingUniversalDisplayHierarchies = function(isRequestingUniversalDisplayHierarchies)
{
	this.m_isRequestingUniversalDisplayHierarchies = isRequestingUniversalDisplayHierarchies;
};
oFF.QueryServiceConfigImpl.prototype.setIsRequestingVariableVariants = function(isRequestingVariableVariants)
{
	this.m_isRequestingVariableVariants = isRequestingVariableVariants;
};
oFF.QueryServiceConfigImpl.prototype.setIsRequestingVariables = function(isRequestingVariables)
{
	this.m_isRequestingVariables = isRequestingVariables;
};
oFF.QueryServiceConfigImpl.prototype.setLanguageLocale = function(languageLocale)
{
	this.getApplication().setLanguageLocale(languageLocale);
};
oFF.QueryServiceConfigImpl.prototype.setLightweight = function(lightweight)
{
	this.m_lightweight = lightweight;
};
oFF.QueryServiceConfigImpl.prototype.setLoadDefaultQuery = function(isLoadingDefaultQuery)
{
	this.m_isLoadingDefaultQuery = isLoadingDefaultQuery;
};
oFF.QueryServiceConfigImpl.prototype.setMakeEmptyVariableDefinitionInsteadOfMetadata = function(makeEmptyVariableDefinitionInsteadOfMetadata)
{
	this.m_makeEmptyVariableDefinitionInsteadOfMetadata = makeEmptyVariableDefinitionInsteadOfMetadata;
};
oFF.QueryServiceConfigImpl.prototype.setMetadataContent = function(metadata)
{
	this.m_metadata = metadata;
};
oFF.QueryServiceConfigImpl.prototype.setMinimizedMetadata = function(minimizedMetadata)
{
	this.m_minimizedMetadata = minimizedMetadata;
};
oFF.QueryServiceConfigImpl.prototype.setMode = function(mode)
{
	if (oFF.notNull(mode))
	{
		this.m_mode = mode;
	}
};
oFF.QueryServiceConfigImpl.prototype.setModelByContent = function(type, modelContent)
{
	this.m_model = modelContent;
};
oFF.QueryServiceConfigImpl.prototype.setModelByJsonObject = function(type, modelJson)
{
	this.m_model = oFF.XContent.createJsonObjectContent(type, modelJson);
};
oFF.QueryServiceConfigImpl.prototype.setModellerContent = function(repo)
{
	this.m_modeller = repo;
};
oFF.QueryServiceConfigImpl.prototype.setProviderType = function(type)
{
	this.m_providerType = type;
};
oFF.QueryServiceConfigImpl.prototype.setRepositoryContent = function(repo)
{
	this.m_repo = repo;
};
oFF.QueryServiceConfigImpl.prototype.setRequiredDimensions = function(requiredDimensions)
{
	this.m_requiredDimensions = requiredDimensions;
};
oFF.QueryServiceConfigImpl.prototype.setSkipResultSetGeneration = function(skipResultSetGeneration)
{
	this.m_skipResultSetGeneration = skipResultSetGeneration;
};
oFF.QueryServiceConfigImpl.prototype.setSkipSourceQueryForNonMetadataRequests = function(skipSourceQueryForNonMetadataRequests)
{
	this.m_isSkipSourceQueryForNonMetadataRequests = skipSourceQueryForNonMetadataRequests;
};
oFF.QueryServiceConfigImpl.prototype.setStartVariableContent = function(variables)
{
	this.m_variables = variables;
};
oFF.QueryServiceConfigImpl.prototype.setStartVariables = function(variables)
{
	if (oFF.notNull(variables))
	{
		this.m_variables = oFF.XContent.createJsonObjectContent(oFF.QModelFormat.INA_DATA, variables);
	}
};
oFF.QueryServiceConfigImpl.prototype.setStoryId = function(storyId)
{
	this.getClientInfo().setStoryId(storyId);
};
oFF.QueryServiceConfigImpl.prototype.setStoryName = function(storyName)
{
	this.getClientInfo().setStoryName(storyName);
};
oFF.QueryServiceConfigImpl.prototype.setSupportsDimensionLazyLoad = function(supportsDimensionLazyLoad)
{
	this.m_supportsDimensionLazyLoad = supportsDimensionLazyLoad;
};
oFF.QueryServiceConfigImpl.prototype.setUseClone = function(useClone)
{
	this.m_useCloneCfg = useClone;
};
oFF.QueryServiceConfigImpl.prototype.setWidgetId = function(widgetId)
{
	this.getClientInfo().setWidgetId(widgetId);
};
oFF.QueryServiceConfigImpl.prototype.setupConfig = function(application)
{
	oFF.DfServiceConfig.prototype.setupConfig.call( this , application);
	this.m_openForEdit = false;
	this.m_serverCustomization = oFF.XHashSetOfString.create();
	this.m_providerType = oFF.ProviderType.ANALYTICS;
	this.m_mode = oFF.QueryManagerMode.DEFAULT;
	this.m_instanceId = application.createNextInstanceId();
	this.m_isLoadingDefaultQuery = true;
	this.m_stateChangedListener = oFF.XSimpleMap.create();
	this.m_supportsDimensionLazyLoad = true;
	this.m_definition = null;
	let session = application.getSession();
	this.m_isFusionActive = session.hasFeature(oFF.FeatureToggleOlap.FUSION_SERVICE);
	this.m_isCachingActive = session.hasFeature(oFF.FeatureToggleOlap.METADATA_CACHING);
	this.m_isExternalizedDynamicFilter = session.hasFeature(oFF.FeatureToggleOlap.EXTERNALIZED_DYNAMIC_FILTER);
	this.m_isExternalizedNonVariableFilter = session.hasFeature(oFF.FeatureToggleOlap.EXTERNALIZED_NON_VARIABLE_FILTER);
	this.m_isEnableAutoVariableSubmit = session.hasFeature(oFF.FeatureToggleOlap.AUTO_VARIABLE_SUBMIT_FUNCTIONALITY);
	this.m_useCloneCfg = true;
	this.m_isSkipSourceQueryForNonMetadataRequests = false;
	this.m_isRequestingDataCells = true;
	this.m_isRequestingConditions = true;
	this.m_isRequestingDynamicFilter = true;
	this.m_isRequestingExceptions = true;
	this.m_isRequestingSorting = true;
	this.m_isRequestingUniversalDisplayHierarchies = true;
	this.m_isRequestingVariables = true;
	this.m_isRequestingVariableVariants = true;
	let environment = application.getProcess().getEnvironment();
	let enforcePrivateConnection = environment.getBooleanByKeyExt(oFF.XEnvironmentConstants.FIREFLY_QUERY_PRIVATE_CONN, false);
	if (enforcePrivateConnection)
	{
		this.usePrivateConnection(enforcePrivateConnection);
	}
	this.m_clientInfo = oFF.XClientInfo.createWithParent(this.getApplication().getClientInfo());
};
oFF.QueryServiceConfigImpl.prototype.stopEventing = function() {};
oFF.QueryServiceConfigImpl.prototype.supportsDimensionLazyLoad = function()
{
	return this.m_supportsDimensionLazyLoad;
};
oFF.QueryServiceConfigImpl.prototype.unregisterChangedListener = function(listener)
{
	this.m_stateChangedListener.remove(listener);
	return null;
};
oFF.QueryServiceConfigImpl.prototype.useClone = function()
{
	return this.m_useCloneCfg;
};
oFF.QueryServiceConfigImpl.prototype.usesMetadataCache = function()
{
	return this.m_useMetadataCache;
};
oFF.QueryServiceConfigImpl.prototype.usesResultSetCache = function()
{
	return this.m_useResultSetCache;
};

oFF.QAttributeContainer = function() {};
oFF.QAttributeContainer.prototype = new oFF.QModelComponent();
oFF.QAttributeContainer.prototype._ff_c = "QAttributeContainer";

oFF.QAttributeContainer.create = function(context, dimension)
{
	let object = new oFF.QAttributeContainer();
	object.setupAttributeContainer(context, dimension);
	return object;
};
oFF.QAttributeContainer.prototype.m_allAttributes = null;
oFF.QAttributeContainer.prototype.m_defaultResultSetAttributes = null;
oFF.QAttributeContainer.prototype.m_mainAttribute = null;
oFF.QAttributeContainer.prototype.m_resultSetAttributes = null;
oFF.QAttributeContainer.prototype.m_selectorAttributes = null;
oFF.QAttributeContainer.prototype.addAttribute = function(attribute)
{
	this.m_allAttributes.add(attribute);
};
oFF.QAttributeContainer.prototype.addAttributeInternal = function(attribute)
{
	this.m_allAttributes.addInternal(attribute);
};
oFF.QAttributeContainer.prototype.addDefaultResultSetAttribute = function(attribute)
{
	this.m_defaultResultSetAttributes.add(attribute);
};
oFF.QAttributeContainer.prototype.cloneOlapComponent = function(context, parent)
{
	let clone = oFF.QAttributeContainer.create(context, null);
	clone.copyFrom(this, null);
	return clone;
};
oFF.QAttributeContainer.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originAttributeContainer = other;
	let size = originAttributeContainer.m_allAttributes.size();
	let i;
	let context = this.getContext();
	let dimension = this.getDimension();
	for (i = 0; i < size; i++)
	{
		let origAttribute = originAttributeContainer.getAttributes().get(i);
		let cloneAttribute = oFF.QAttribute.createAttribute(context, dimension);
		cloneAttribute.copyFrom(origAttribute, flags);
		this.m_allAttributes.addInternal(cloneAttribute);
	}
	this.m_allAttributes.copyFrom(originAttributeContainer.m_allAttributes, flags);
	size = originAttributeContainer.m_resultSetAttributes.size();
	for (i = 0; i < size; i++)
	{
		this.m_resultSetAttributes.addInternal(this.m_allAttributes.getAttributeByName(originAttributeContainer.m_resultSetAttributes.get(i).getName()));
	}
	this.m_resultSetAttributes.copyFrom(originAttributeContainer.m_resultSetAttributes, flags);
	size = originAttributeContainer.m_defaultResultSetAttributes.size();
	for (i = 0; i < size; i++)
	{
		let attributeByName = this.m_allAttributes.getAttributeByName(originAttributeContainer.m_defaultResultSetAttributes.get(i).getName());
		this.m_defaultResultSetAttributes.add(attributeByName);
		this.m_selectorAttributes.addInternal(attributeByName);
	}
	this.m_selectorAttributes.copyFrom(originAttributeContainer.m_selectorAttributes, flags);
	if (oFF.notNull(originAttributeContainer.m_mainAttribute))
	{
		this.m_mainAttribute = this.m_allAttributes.getAttributeByName(originAttributeContainer.m_mainAttribute.getName());
	}
};
oFF.QAttributeContainer.prototype.getAttributeByName = function(name)
{
	return this.m_allAttributes.getAttributeByName(name);
};
oFF.QAttributeContainer.prototype.getAttributes = function()
{
	return this.m_allAttributes;
};
oFF.QAttributeContainer.prototype.getAttributesExt = function(context)
{
	if (context === oFF.QContextType.RESULT_SET)
	{
		return this.getResultSetAttributes();
	}
	return this.getSelectorAttributes();
};
oFF.QAttributeContainer.prototype.getDefaultResultSetAttributes = function()
{
	return this.m_defaultResultSetAttributes;
};
oFF.QAttributeContainer.prototype.getDimension = function()
{
	return this.getParentComponent();
};
oFF.QAttributeContainer.prototype.getMainAttribute = function()
{
	return this.m_mainAttribute;
};
oFF.QAttributeContainer.prototype.getNamedChildren = function()
{
	let map = oFF.XHashMapByString.create();
	map.put("AllAttributes", this.m_allAttributes);
	map.put("ResultSetAttributes", this.m_resultSetAttributes);
	map.put("SelectorAttributes", this.m_selectorAttributes);
	map.put("MainAttribute", this.m_mainAttribute);
	return map;
};
oFF.QAttributeContainer.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.ATTRIBUTE_CONTAINER;
};
oFF.QAttributeContainer.prototype.getResultSetAttributes = function()
{
	return this.m_resultSetAttributes;
};
oFF.QAttributeContainer.prototype.getSelectorAttributes = function()
{
	return this.m_selectorAttributes;
};
oFF.QAttributeContainer.prototype.isComponentNode = function()
{
	return true;
};
oFF.QAttributeContainer.prototype.mergeDeepRecursive = function(settings, other)
{
	let otherObj = other;
	let otherAttributes = otherObj.getResultSetAttributes();
	this.m_resultSetAttributes.clear();
	for (let i = 0; i < otherAttributes.size(); i++)
	{
		let otherAttribute = otherAttributes.get(i);
		let attributeName = otherAttribute.getName();
		let attribute = this.getAttributeByName(attributeName);
		this.m_resultSetAttributes.add(attribute);
		if (oFF.notNull(attribute))
		{
			attribute.mergeDeepRecursive(settings, otherAttribute);
		}
	}
};
oFF.QAttributeContainer.prototype.notifyChildChanged = function(changedNodes)
{
	this.queueEventing();
	oFF.QModelComponent.prototype.notifyChildChanged.call( this , changedNodes);
	let dimension = this.getDimension();
	let size = changedNodes.size();
	for (let i = 0; i < size; i++)
	{
		let next = changedNodes.get(i);
		if (next === this.m_selectorAttributes)
		{
			dimension.setSelectorFieldLayoutType(oFF.FieldLayoutType.ATTRIBUTE_BASED);
		}
		else if (next === this.m_resultSetAttributes)
		{
			dimension.setFieldLayoutType(oFF.FieldLayoutType.ATTRIBUTE_BASED);
		}
	}
	this.resumeEventing();
};
oFF.QAttributeContainer.prototype.reinit = function(origin)
{
	oFF.XCollectionUtils.releaseEntriesFromCollection(this.m_resultSetAttributes);
	this.m_resultSetAttributes.clear();
	oFF.XCollectionUtils.releaseEntriesFromCollection(this.m_selectorAttributes);
	this.m_selectorAttributes.clear();
	oFF.XCollectionUtils.releaseEntriesFromCollection(this.m_allAttributes);
	this.m_allAttributes.clear();
	this.m_mainAttribute = oFF.XObjectExt.release(this.m_mainAttribute);
	this.m_defaultResultSetAttributes.clear();
	this.copyFrom(origin, null);
};
oFF.QAttributeContainer.prototype.releaseObject = function()
{
	this.m_resultSetAttributes = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_resultSetAttributes);
	this.m_selectorAttributes = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_selectorAttributes);
	this.m_allAttributes = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_allAttributes);
	this.m_mainAttribute = oFF.XObjectExt.release(this.m_mainAttribute);
	this.m_defaultResultSetAttributes = oFF.XObjectExt.release(this.m_defaultResultSetAttributes);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QAttributeContainer.prototype.setMainAttribute = function(mainAttribute)
{
	this.m_mainAttribute = mainAttribute;
};
oFF.QAttributeContainer.prototype.setupAttributeContainer = function(context, dimension)
{
	this.setupModelComponentWithName(context, dimension, "Attributes");
	this.m_resultSetAttributes = oFF.QAttributeList.createAttributeList(this, "Resultset Attributes");
	this.m_selectorAttributes = oFF.QAttributeList.createAttributeList(this, "Selector Attribtues");
	this.m_allAttributes = oFF.QAttributeList.createAttributeList(this, "All Attributes");
	this.m_defaultResultSetAttributes = oFF.XListWeakRef.create();
};

oFF.QAxesManager = function() {};
oFF.QAxesManager.prototype = new oFF.QModelComponent();
oFF.QAxesManager.prototype._ff_c = "QAxesManager";

oFF.QAxesManager.create = function(queryModel)
{
	let newObj = new oFF.QAxesManager();
	newObj.setupAxesManager(queryModel);
	return newObj;
};
oFF.QAxesManager.prototype.m_axisColumns = null;
oFF.QAxesManager.prototype.m_axisDynamic = null;
oFF.QAxesManager.prototype.m_axisFilter = null;
oFF.QAxesManager.prototype.m_axisFree = null;
oFF.QAxesManager.prototype.m_axisRepository = null;
oFF.QAxesManager.prototype.m_axisRows = null;
oFF.QAxesManager.prototype.m_axisTechnical = null;
oFF.QAxesManager.prototype.m_axisVirtual = null;
oFF.QAxesManager.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originAxesManager = other;
	this.m_axisRows.copyFrom(originAxesManager.m_axisRows, flags);
	this.m_axisColumns.copyFrom(originAxesManager.m_axisColumns, flags);
	this.m_axisFree.copyFrom(originAxesManager.m_axisFree, flags);
	if (oFF.notNull(originAxesManager.m_axisDynamic))
	{
		this.getDynamicAxis().copyFrom(originAxesManager.m_axisDynamic, flags);
	}
	if (oFF.notNull(originAxesManager.m_axisFilter))
	{
		this.getFilterAxis().copyFrom(originAxesManager.m_axisFilter, flags);
	}
	if (oFF.notNull(originAxesManager.m_axisRepository))
	{
		this.getRepositoryAxis().copyFrom(originAxesManager.m_axisRepository, flags);
	}
	if (oFF.notNull(originAxesManager.m_axisVirtual))
	{
		this.getVirtualAxis().copyFrom(originAxesManager.m_axisVirtual, flags);
	}
	if (oFF.notNull(originAxesManager.m_axisTechnical))
	{
		this.getTechnicalAxis().copyModelComponent(originAxesManager.m_axisTechnical, flags);
	}
};
oFF.QAxesManager.prototype.getAxis = function(axisType)
{
	return this.getAxisBase(axisType);
};
oFF.QAxesManager.prototype.getAxisBase = function(axis)
{
	if (axis === oFF.AxisType.COLUMNS)
	{
		return this.m_axisColumns;
	}
	if (axis === oFF.AxisType.ROWS)
	{
		return this.m_axisRows;
	}
	if (axis === oFF.AxisType.FREE)
	{
		return this.m_axisFree;
	}
	if (axis === oFF.AxisType.REPOSITORY)
	{
		return this.getRepositoryAxis();
	}
	if (axis === oFF.AxisType.DYNAMIC)
	{
		return this.getDynamicAxis();
	}
	if (axis === oFF.AxisType.FILTER)
	{
		return this.getFilterAxis();
	}
	if (axis === oFF.AxisType.VIRTUAL)
	{
		return this.getVirtualAxis();
	}
	if (axis === oFF.AxisType.TECHNICAL)
	{
		return this.getTechnicalAxis();
	}
	return null;
};
oFF.QAxesManager.prototype.getColumnsAxis = function()
{
	return this.m_axisColumns;
};
oFF.QAxesManager.prototype.getDynamicAxis = function()
{
	if (oFF.isNull(this.m_axisDynamic) && !this.isReleased())
	{
		this.m_axisDynamic = oFF.QAxis.createAxis(this.getContext(), this, oFF.AxisType.DYNAMIC);
	}
	return this.m_axisDynamic;
};
oFF.QAxesManager.prototype.getFilterAxis = function()
{
	if (oFF.isNull(this.m_axisFilter) && !this.isReleased())
	{
		this.m_axisFilter = oFF.QAxis.createAxis(this.getContext(), this, oFF.AxisType.FILTER);
	}
	return this.m_axisFilter;
};
oFF.QAxesManager.prototype.getFreeAxis = function()
{
	return this.m_axisFree;
};
oFF.QAxesManager.prototype.getNamedChildren = function()
{
	let map = oFF.XHashMapByString.create();
	map.put("RowsAxis", this.getRowsAxis());
	map.put("ColumnsAxis", this.getColumnsAxis());
	map.put("FreeAxis", this.getFreeAxis());
	map.put("DynamicAxis", this.getDynamicAxis());
	map.put("FilterAxis", this.getFilterAxis());
	map.put("RepositoryAxis", this.getRepositoryAxis());
	map.put("VirtualAxis", this.getVirtualAxis());
	return map;
};
oFF.QAxesManager.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.AXES_MANAGER;
};
oFF.QAxesManager.prototype.getRepositoryAxis = function()
{
	if (oFF.isNull(this.m_axisRepository) && !this.isReleased())
	{
		this.m_axisRepository = oFF.QAxis.createAxis(this.getContext(), this, oFF.AxisType.REPOSITORY);
	}
	return this.m_axisRepository;
};
oFF.QAxesManager.prototype.getRowsAxis = function()
{
	return this.m_axisRows;
};
oFF.QAxesManager.prototype.getTechnicalAxis = function()
{
	if (!this.getModelCapabilities().supportsTechnicalAxis())
	{
		return null;
	}
	if (oFF.isNull(this.m_axisTechnical) && !this.isReleased())
	{
		this.m_axisTechnical = oFF.QAxis.createAxis(this.getContext(), this, oFF.AxisType.TECHNICAL);
	}
	return this.m_axisTechnical;
};
oFF.QAxesManager.prototype.getVirtualAxis = function()
{
	if (oFF.isNull(this.m_axisVirtual) && !this.isReleased())
	{
		this.m_axisVirtual = oFF.QAxis.createAxis(this.getContext(), this, oFF.AxisType.VIRTUAL);
	}
	return this.m_axisVirtual;
};
oFF.QAxesManager.prototype.releaseObject = function()
{
	this.m_axisColumns = oFF.XObjectExt.release(this.m_axisColumns);
	this.m_axisDynamic = oFF.XObjectExt.release(this.m_axisDynamic);
	this.m_axisFilter = oFF.XObjectExt.release(this.m_axisFilter);
	this.m_axisFree = oFF.XObjectExt.release(this.m_axisFree);
	this.m_axisRepository = oFF.XObjectExt.release(this.m_axisRepository);
	this.m_axisVirtual = oFF.XObjectExt.release(this.m_axisVirtual);
	this.m_axisRows = oFF.XObjectExt.release(this.m_axisRows);
	this.m_axisTechnical = oFF.XObjectExt.release(this.m_axisTechnical);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QAxesManager.prototype.setupAxesManager = function(queryModel)
{
	this.setupModelComponent(queryModel, queryModel);
	this.m_axisColumns = oFF.QAxis.createAxis(queryModel, this, oFF.AxisType.COLUMNS);
	this.m_axisRows = oFF.QAxis.createAxis(queryModel, this, oFF.AxisType.ROWS);
	this.m_axisFree = oFF.QAxis.createAxis(queryModel, this, oFF.AxisType.FREE);
};

oFF.BlendableCustomSort = function() {};
oFF.BlendableCustomSort.prototype = new oFF.QModelComponent();
oFF.BlendableCustomSort.prototype._ff_c = "BlendableCustomSort";

oFF.BlendableCustomSort.createCustomSort = function(blendableDimensionSort, name, datasetId, dimensionId, hierarchyId, id)
{
	let customSort = new oFF.BlendableCustomSort();
	if (oFF.notNull(blendableDimensionSort))
	{
		customSort.setupModelComponent(blendableDimensionSort.getContext(), blendableDimensionSort);
	}
	customSort.setName(name);
	customSort.m_datasetId = datasetId;
	customSort.m_dimensionId = dimensionId;
	customSort.m_hierarchyId = hierarchyId;
	customSort.m_id = id;
	customSort.m_sortFromStart = oFF.XList.create();
	customSort.m_sortFromEnd = oFF.XList.create();
	customSort.m_movedNodes = oFF.XList.create();
	return customSort;
};
oFF.BlendableCustomSort.prototype.m_datasetId = null;
oFF.BlendableCustomSort.prototype.m_dimensionId = null;
oFF.BlendableCustomSort.prototype.m_hierarchyId = null;
oFF.BlendableCustomSort.prototype.m_id = null;
oFF.BlendableCustomSort.prototype.m_movedNodes = null;
oFF.BlendableCustomSort.prototype.m_sortFromEnd = null;
oFF.BlendableCustomSort.prototype.m_sortFromStart = null;
oFF.BlendableCustomSort.prototype.addMemberToFromEndList = function(name, datasetId)
{
	this.notifyNodeChanged();
	this.m_sortFromEnd.add(oFF.BlendableCustomSortMember.create(name, datasetId));
};
oFF.BlendableCustomSort.prototype.addMemberToFromStartList = function(name, datasetId)
{
	this.notifyNodeChanged();
	this.m_sortFromStart.add(oFF.BlendableCustomSortMember.create(name, datasetId));
};
oFF.BlendableCustomSort.prototype.addMemberToMovedNodesList = function(name, datasetId)
{
	this.notifyNodeChanged();
	this.m_movedNodes.add(oFF.BlendableCustomSortMember.create(name, datasetId));
};
oFF.BlendableCustomSort.prototype.clearMembersFromEndList = function()
{
	this.notifyNodeChanged();
	this.m_sortFromEnd.clear();
};
oFF.BlendableCustomSort.prototype.clearMembersFromStartList = function()
{
	this.notifyNodeChanged();
	this.m_sortFromStart.clear();
};
oFF.BlendableCustomSort.prototype.clearMembersMovedNodesList = function()
{
	this.notifyNodeChanged();
	this.m_movedNodes.clear();
};
oFF.BlendableCustomSort.prototype.cloneExt = function(flags)
{
	let copyBlendableCustomSort = oFF.BlendableCustomSort.createCustomSort(this.getParent(), this.getName(), this.getDatasetId(), this.getDimensionId(), this.getHierarchyId(), this.getId());
	copyBlendableCustomSort.copyFrom(this, null);
	return copyBlendableCustomSort;
};
oFF.BlendableCustomSort.prototype.convertCustomMembersToRuntimeMembers = function(blendedQueryModel, blendableQueryManager, customSortMemberList)
{
	let sortFromStart = oFF.XList.create();
	let requireRuntimeConversion = false;
	if (blendedQueryModel.isBlendingModel() && oFF.notNull(this.m_hierarchyId))
	{
		let sortQueryManager = blendableQueryManager.getQueryManagerByDatasetId(this.m_datasetId);
		let sortQueryModel = sortQueryManager.getQueryModel();
		let sortDimension = sortQueryModel.getDimensionByName(this.m_dimensionId);
		let dimensionAlias;
		let isPrimaryCalculationDimension;
		if (sortDimension === sortQueryModel.getPrimaryCalculationDimension())
		{
			isPrimaryCalculationDimension = true;
			dimensionAlias = blendedQueryModel.getPrimaryCalculationDimension().getName();
		}
		else
		{
			isPrimaryCalculationDimension = false;
			if (sortDimension === sortQueryModel.getSecondaryCalculationDimension())
			{
				dimensionAlias = blendedQueryModel.getSecondaryCalculationDimension().getName();
			}
			else
			{
				dimensionAlias = this.m_dimensionId;
			}
		}
		let blendedMeasures = blendableQueryManager.getPrimaryBlendedMeasuresFromFilters();
		let dimensionMapping = blendedQueryModel.getBlendingDefinition().getMappingByAliasName(dimensionAlias);
		if (oFF.notNull(dimensionMapping) && dimensionMapping.getMappingDefinitionType() === oFF.BlendingMappingDefinitionType.DIMENSION && (dimensionMapping.getLinkType() === oFF.BlendingLinkType.ALL_DATA || dimensionMapping.getLinkType() === oFF.BlendingLinkType.COEXIST) && dimensionMapping.getMappingDefinitions().size() === 2)
		{
			requireRuntimeConversion = true;
			oFF.XCollectionUtils.forEach(customSortMemberList, (customSortMember) => {
				if (isPrimaryCalculationDimension && blendedMeasures.containsKey(customSortMember.getName()))
				{
					sortFromStart.add(customSortMember.getName());
				}
				else
				{
					let leafQueryManager = blendableQueryManager.getQueryManagerByDatasetId(customSortMember.getDatasetId());
					let aliasPrefix = oFF.BlendingUtils.getAliasPrefixFromQueryModel(blendedQueryModel, leafQueryManager.getQueryModel());
					if (oFF.notNull(aliasPrefix))
					{
						sortFromStart.add(oFF.XStringUtils.concatenate2(aliasPrefix, customSortMember.getName()));
					}
				}
			});
		}
	}
	if (!requireRuntimeConversion)
	{
		oFF.XCollectionUtils.forEach(customSortMemberList, (customSortMember) => {
			sortFromStart.add(customSortMember.getName());
		});
	}
	return sortFromStart;
};
oFF.BlendableCustomSort.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let copyBlendableCustomSort = other;
	this.setName(copyBlendableCustomSort.getName());
	this.m_datasetId = copyBlendableCustomSort.getDatasetId();
	this.m_dimensionId = copyBlendableCustomSort.getDimensionId();
	this.m_hierarchyId = copyBlendableCustomSort.getHierarchyId();
	this.m_id = copyBlendableCustomSort.getId();
	this.m_sortFromStart = oFF.XCollectionUtils.createListOfClones(copyBlendableCustomSort.getBlendedSortFromStart());
	this.m_sortFromEnd = oFF.XCollectionUtils.createListOfClones(copyBlendableCustomSort.getBlendedSortFromEnd());
	this.m_movedNodes = oFF.XCollectionUtils.createListOfClones(copyBlendableCustomSort.getBlendedMovedNodes());
};
oFF.BlendableCustomSort.prototype.getBlendedMovedNodes = function()
{
	return this.m_movedNodes;
};
oFF.BlendableCustomSort.prototype.getBlendedSortFromEnd = function()
{
	return this.m_sortFromEnd;
};
oFF.BlendableCustomSort.prototype.getBlendedSortFromStart = function()
{
	return this.m_sortFromStart;
};
oFF.BlendableCustomSort.prototype.getDatasetId = function()
{
	return this.m_datasetId;
};
oFF.BlendableCustomSort.prototype.getDimensionId = function()
{
	return this.m_dimensionId;
};
oFF.BlendableCustomSort.prototype.getHierarchyId = function()
{
	return this.m_hierarchyId;
};
oFF.BlendableCustomSort.prototype.getId = function()
{
	return this.m_id;
};
oFF.BlendableCustomSort.prototype.getRuntimeMovedNodes = function(blendedQueryModel, blendableQueryManager)
{
	return this.convertCustomMembersToRuntimeMembers(blendedQueryModel, blendableQueryManager, this.m_movedNodes);
};
oFF.BlendableCustomSort.prototype.getRuntimeSortFromEnd = function(blendedQueryModel, blendableQueryManager)
{
	return this.convertCustomMembersToRuntimeMembers(blendedQueryModel, blendableQueryManager, this.m_sortFromEnd);
};
oFF.BlendableCustomSort.prototype.getRuntimeSortFromStart = function(blendedQueryModel, blendableQueryManager)
{
	return this.convertCustomMembersToRuntimeMembers(blendedQueryModel, blendableQueryManager, this.m_sortFromStart);
};
oFF.BlendableCustomSort.prototype.releaseObject = function()
{
	oFF.QModelComponent.prototype.releaseObject.call( this );
	this.m_datasetId = null;
	this.m_dimensionId = null;
	this.m_hierarchyId = null;
	this.m_id = null;
	this.m_sortFromStart = null;
	this.m_sortFromEnd = null;
	this.m_movedNodes = null;
};
oFF.BlendableCustomSort.prototype.removeCustomSortMemberFromList = function(customSortMemberList, name, datasetId)
{
	let customSortMember = oFF.XCollectionUtils.findFirst(customSortMemberList, (customMember) => {
		return oFF.XString.isEqual(name, customMember.getName()) && oFF.XString.isEqual(datasetId, customMember.getDatasetId());
	});
	if (oFF.notNull(customSortMember))
	{
		this.notifyNodeChanged();
		return this.m_sortFromStart.removeElement(customSortMember);
	}
	return null;
};
oFF.BlendableCustomSort.prototype.removeMemberFromEndList = function(name, datasetId)
{
	return this.removeCustomSortMemberFromList(this.m_sortFromEnd, name, datasetId);
};
oFF.BlendableCustomSort.prototype.removeMemberFromStartList = function(name, datasetId)
{
	return this.removeCustomSortMemberFromList(this.m_sortFromStart, name, datasetId);
};
oFF.BlendableCustomSort.prototype.removeMemberMovedNodesList = function(name, datasetId)
{
	return this.removeCustomSortMemberFromList(this.m_movedNodes, name, datasetId);
};

oFF.BlendableDimensionSort = function() {};
oFF.BlendableDimensionSort.prototype = new oFF.QModelComponent();
oFF.BlendableDimensionSort.prototype._ff_c = "BlendableDimensionSort";

oFF.BlendableDimensionSort.createDimensionSort = function(blendingSortContainer, name, fieldName, datasetId, sortDirection, preserveGrouping, language)
{
	let blendableDimensionSort = new oFF.BlendableDimensionSort();
	if (oFF.notNull(blendingSortContainer))
	{
		blendableDimensionSort.setupModelComponent(blendingSortContainer.getContext(), blendingSortContainer);
	}
	blendableDimensionSort.setName(name);
	blendableDimensionSort.m_fieldName = fieldName;
	blendableDimensionSort.m_datasetId = datasetId;
	blendableDimensionSort.m_sortDirection = sortDirection;
	blendableDimensionSort.m_preserveGrouping = preserveGrouping;
	blendableDimensionSort.m_contextLanguage = language;
	blendableDimensionSort.m_customSortDefinition = null;
	blendableDimensionSort.m_autoLimiterSort = null;
	blendableDimensionSort.m_isDisplayedAsId = false;
	blendableDimensionSort.m_dimensionId = null;
	return blendableDimensionSort;
};
oFF.BlendableDimensionSort.prototype.m_autoLimiterSort = null;
oFF.BlendableDimensionSort.prototype.m_contextLanguage = null;
oFF.BlendableDimensionSort.prototype.m_customSortDefinition = null;
oFF.BlendableDimensionSort.prototype.m_datasetId = null;
oFF.BlendableDimensionSort.prototype.m_dimensionId = null;
oFF.BlendableDimensionSort.prototype.m_fieldName = null;
oFF.BlendableDimensionSort.prototype.m_isDisplayedAsId = false;
oFF.BlendableDimensionSort.prototype.m_preserveGrouping = false;
oFF.BlendableDimensionSort.prototype.m_sortDirection = null;
oFF.BlendableDimensionSort.prototype.cloneExt = function(flags)
{
	let copyBlendableDimensionSort = oFF.BlendableDimensionSort.createDimensionSort(this.getParent(), this.getName(), this.getFieldName(), this.getDatasetId(), this.getSortDirection(), this.getPreserveGrouping(), this.getContextLanguage());
	copyBlendableDimensionSort.copyFrom(this, null);
	return copyBlendableDimensionSort;
};
oFF.BlendableDimensionSort.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let otherBlendableDimensionSort = other;
	this.m_fieldName = otherBlendableDimensionSort.getFieldName();
	this.m_datasetId = otherBlendableDimensionSort.getDatasetId();
	this.m_sortDirection = otherBlendableDimensionSort.getSortDirection();
	this.m_preserveGrouping = otherBlendableDimensionSort.getPreserveGrouping();
	this.m_contextLanguage = otherBlendableDimensionSort.getContextLanguage();
	let otherCustomSort = otherBlendableDimensionSort.getCustomSortDefinition();
	if (oFF.notNull(otherCustomSort))
	{
		let customSortDefinition = this.createCustomSortDefinition(otherCustomSort.getName(), otherCustomSort.getDatasetId(), otherCustomSort.getDimensionId(), otherCustomSort.getHierarchyId(), otherCustomSort.getId());
		customSortDefinition.copyFrom(otherCustomSort, flags);
	}
	this.m_autoLimiterSort = otherBlendableDimensionSort.getAutoLimiterSort();
	this.m_isDisplayedAsId = otherBlendableDimensionSort.isDisplayedAsId();
	this.m_dimensionId = otherBlendableDimensionSort.getDimensionId();
};
oFF.BlendableDimensionSort.prototype.createCustomSortDefinition = function(name, datasetId, dimensionId, hierarchyId, id)
{
	let customSort = oFF.BlendableCustomSort.createCustomSort(this, name, datasetId, dimensionId, hierarchyId, id);
	this.m_customSortDefinition = customSort;
	this.notifyNodeChanged();
	return this.m_customSortDefinition;
};
oFF.BlendableDimensionSort.prototype.getAutoLimiterSort = function()
{
	return this.m_autoLimiterSort;
};
oFF.BlendableDimensionSort.prototype.getContextLanguage = function()
{
	return this.m_contextLanguage;
};
oFF.BlendableDimensionSort.prototype.getCustomSortDefinition = function()
{
	return this.m_customSortDefinition;
};
oFF.BlendableDimensionSort.prototype.getDatasetId = function()
{
	return this.m_datasetId;
};
oFF.BlendableDimensionSort.prototype.getDimensionId = function()
{
	return this.m_dimensionId;
};
oFF.BlendableDimensionSort.prototype.getFieldName = function()
{
	return this.m_fieldName;
};
oFF.BlendableDimensionSort.prototype.getPreserveGrouping = function()
{
	return this.m_preserveGrouping;
};
oFF.BlendableDimensionSort.prototype.getSortDirection = function()
{
	return this.m_sortDirection;
};
oFF.BlendableDimensionSort.prototype.isDisplayedAsId = function()
{
	return this.m_isDisplayedAsId;
};
oFF.BlendableDimensionSort.prototype.releaseObject = function()
{
	oFF.QModelComponent.prototype.releaseObject.call( this );
	this.m_fieldName = null;
	this.m_datasetId = null;
	this.m_sortDirection = null;
	this.m_preserveGrouping = false;
	this.m_contextLanguage = null;
	oFF.XObjectExt.release(this.m_customSortDefinition);
	this.m_autoLimiterSort = null;
	this.m_isDisplayedAsId = false;
	this.m_dimensionId = null;
};
oFF.BlendableDimensionSort.prototype.removeCustomSortDefinition = function()
{
	if (oFF.notNull(this.m_customSortDefinition))
	{
		oFF.XObjectExt.release(this.m_customSortDefinition);
		this.m_customSortDefinition = null;
		this.notifyNodeChanged();
	}
};
oFF.BlendableDimensionSort.prototype.setAutoLimiterSort = function(autoLimiterSort)
{
	if (!oFF.XString.isEqual(autoLimiterSort, this.m_autoLimiterSort))
	{
		this.m_autoLimiterSort = autoLimiterSort;
		this.notifyNodeChanged();
	}
};
oFF.BlendableDimensionSort.prototype.setContextLanguage = function(contextLanguage)
{
	if (!oFF.XString.isEqual(contextLanguage, this.m_contextLanguage))
	{
		this.m_contextLanguage = contextLanguage;
		this.notifyNodeChanged();
	}
};
oFF.BlendableDimensionSort.prototype.setDimensionId = function(dimensionId)
{
	this.m_dimensionId = dimensionId;
};
oFF.BlendableDimensionSort.prototype.setIsDisplayedAsId = function(isDisplayedAsId)
{
	this.m_isDisplayedAsId = isDisplayedAsId;
};

oFF.BlendableMeasureMemberSort = function() {};
oFF.BlendableMeasureMemberSort.prototype = new oFF.QModelComponent();
oFF.BlendableMeasureMemberSort.prototype._ff_c = "BlendableMeasureMemberSort";

oFF.BlendableMeasureMemberSort.createBlendableMeasureSort = function(context)
{
	let measureSort = new oFF.BlendableMeasureMemberSort();
	measureSort.setupModelComponent(context, null);
	measureSort.m_sortDirection = oFF.XSortDirection.DEFAULT_VALUE;
	measureSort.m_preserveGrouping = true;
	measureSort.m_secondaryVersionDimensionMembers = oFF.XHashMapByString.create();
	measureSort.m_relatedElementsList = oFF.XList.create();
	return measureSort;
};
oFF.BlendableMeasureMemberSort.prototype.m_isPrimaryMeasureBlended = false;
oFF.BlendableMeasureMemberSort.prototype.m_isSecondaryMeasureBlended = false;
oFF.BlendableMeasureMemberSort.prototype.m_preserveGrouping = false;
oFF.BlendableMeasureMemberSort.prototype.m_primaryDatasetId = null;
oFF.BlendableMeasureMemberSort.prototype.m_primaryMeasure = null;
oFF.BlendableMeasureMemberSort.prototype.m_relatedElementsList = null;
oFF.BlendableMeasureMemberSort.prototype.m_secondaryDatasetId = null;
oFF.BlendableMeasureMemberSort.prototype.m_secondaryMeasure = null;
oFF.BlendableMeasureMemberSort.prototype.m_secondaryVersionDimensionMembers = null;
oFF.BlendableMeasureMemberSort.prototype.m_sortDirection = null;
oFF.BlendableMeasureMemberSort.prototype.m_versionDimension = null;
oFF.BlendableMeasureMemberSort.prototype.m_versionElementId = null;
oFF.BlendableMeasureMemberSort.prototype.addRelatedElement = function(datasetId, dimensionId, memberId)
{
	if (oFF.isNull(this.m_relatedElementsList))
	{
		this.m_relatedElementsList = oFF.XList.create();
	}
	this.m_relatedElementsList.add(oFF.BlendableMeasureSortRelatedElement.createBlendableRelatedElementsSort(datasetId, dimensionId, memberId));
	this.notifyNodeChanged();
};
oFF.BlendableMeasureMemberSort.prototype.addSecondaryVersionDimensionMember = function(secondaryDatasetId, secondaryVersionDimensionMember)
{
	if (oFF.isNull(this.m_secondaryVersionDimensionMembers))
	{
		this.m_secondaryVersionDimensionMembers = oFF.XHashMapByString.create();
	}
	this.m_secondaryVersionDimensionMembers.put(secondaryDatasetId, secondaryVersionDimensionMember);
	this.notifyNodeChanged();
};
oFF.BlendableMeasureMemberSort.prototype.cloneExt = function(flags)
{
	let copyBlendableMeasureMemberSort = oFF.BlendableMeasureMemberSort.createBlendableMeasureSort(this.getContext());
	copyBlendableMeasureMemberSort.copyFrom(this, null);
	return copyBlendableMeasureMemberSort;
};
oFF.BlendableMeasureMemberSort.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let otherBlendableMeasureMemberSort = other;
	this.m_primaryMeasure = otherBlendableMeasureMemberSort.getPrimaryMeasureName();
	this.m_primaryDatasetId = otherBlendableMeasureMemberSort.getPrimaryDatasetId();
	this.m_isPrimaryMeasureBlended = otherBlendableMeasureMemberSort.isPrimaryMeasureBlended();
	this.m_secondaryMeasure = otherBlendableMeasureMemberSort.getSecondaryMeasureName();
	this.m_secondaryDatasetId = otherBlendableMeasureMemberSort.getSecondaryDatasetId();
	this.m_isSecondaryMeasureBlended = otherBlendableMeasureMemberSort.isSecondaryMeasureBlended();
	this.m_preserveGrouping = otherBlendableMeasureMemberSort.isPreserveGrouping();
	this.m_sortDirection = otherBlendableMeasureMemberSort.getSortDirection();
	this.m_versionElementId = otherBlendableMeasureMemberSort.getVersionElementId();
	this.m_versionDimension = otherBlendableMeasureMemberSort.getVersionDimension();
	this.m_secondaryVersionDimensionMembers = otherBlendableMeasureMemberSort.getSecondaryVersionDimensionMembers().createMapByStringCopy();
	this.m_relatedElementsList = otherBlendableMeasureMemberSort.getRelatedElementsList().createListCopy();
};
oFF.BlendableMeasureMemberSort.prototype.getDatasetId = function()
{
	return this.m_primaryDatasetId;
};
oFF.BlendableMeasureMemberSort.prototype.getMeasureMemberName = function()
{
	return this.m_primaryMeasure;
};
oFF.BlendableMeasureMemberSort.prototype.getPrimaryDatasetId = function()
{
	return this.m_primaryDatasetId;
};
oFF.BlendableMeasureMemberSort.prototype.getPrimaryMeasureName = function()
{
	return this.m_primaryMeasure;
};
oFF.BlendableMeasureMemberSort.prototype.getRelatedElementsList = function()
{
	return this.m_relatedElementsList;
};
oFF.BlendableMeasureMemberSort.prototype.getSecondaryDatasetId = function()
{
	return this.m_secondaryDatasetId;
};
oFF.BlendableMeasureMemberSort.prototype.getSecondaryMeasureName = function()
{
	return this.m_secondaryMeasure;
};
oFF.BlendableMeasureMemberSort.prototype.getSecondaryVersionDimensionMembers = function()
{
	return this.m_secondaryVersionDimensionMembers;
};
oFF.BlendableMeasureMemberSort.prototype.getSortDirection = function()
{
	return this.m_sortDirection;
};
oFF.BlendableMeasureMemberSort.prototype.getVersionDimension = function()
{
	return this.m_versionDimension;
};
oFF.BlendableMeasureMemberSort.prototype.getVersionElementId = function()
{
	return this.m_versionElementId;
};
oFF.BlendableMeasureMemberSort.prototype.isPreserveGrouping = function()
{
	return this.m_preserveGrouping;
};
oFF.BlendableMeasureMemberSort.prototype.isPrimaryMeasureBlended = function()
{
	return this.m_isPrimaryMeasureBlended;
};
oFF.BlendableMeasureMemberSort.prototype.isSecondaryMeasureBlended = function()
{
	return this.m_isSecondaryMeasureBlended;
};
oFF.BlendableMeasureMemberSort.prototype.releaseObject = function()
{
	oFF.QModelComponent.prototype.releaseObject.call( this );
	this.m_primaryMeasure = null;
	this.m_primaryDatasetId = null;
	this.m_sortDirection = null;
	this.m_secondaryMeasure = null;
	this.m_secondaryDatasetId = null;
	this.m_isSecondaryMeasureBlended = false;
	this.m_preserveGrouping = true;
	this.m_sortDirection = null;
	this.m_versionElementId = null;
	this.m_versionDimension = null;
	this.m_secondaryVersionDimensionMembers = oFF.XObjectExt.release(this.m_secondaryVersionDimensionMembers);
	this.m_relatedElementsList = oFF.XObjectExt.release(this.m_relatedElementsList);
};
oFF.BlendableMeasureMemberSort.prototype.setPreserveGrouping = function(preserveGrouping)
{
	this.m_preserveGrouping = preserveGrouping;
	this.notifyNodeChanged();
};
oFF.BlendableMeasureMemberSort.prototype.setPrimaryMeasure = function(measureName, datasetId, isBlended)
{
	this.m_primaryMeasure = measureName;
	this.m_primaryDatasetId = datasetId;
	this.m_isPrimaryMeasureBlended = isBlended;
	this.notifyNodeChanged();
};
oFF.BlendableMeasureMemberSort.prototype.setSecondaryMeasure = function(measureName, datasetId, isBlended)
{
	this.m_secondaryMeasure = measureName;
	this.m_secondaryDatasetId = datasetId;
	this.m_isSecondaryMeasureBlended = isBlended;
	this.notifyNodeChanged();
};
oFF.BlendableMeasureMemberSort.prototype.setSortDirection = function(direction)
{
	this.m_sortDirection = direction;
	this.notifyNodeChanged();
};
oFF.BlendableMeasureMemberSort.prototype.setVersionDimension = function(versionDimension)
{
	this.m_versionDimension = versionDimension;
	this.notifyNodeChanged();
};
oFF.BlendableMeasureMemberSort.prototype.setVersionElementId = function(versionElementId)
{
	this.m_versionElementId = versionElementId;
	this.notifyNodeChanged();
};

oFF.QueryModelLinkSettings = function() {};
oFF.QueryModelLinkSettings.prototype = new oFF.QModelComponent();
oFF.QueryModelLinkSettings.prototype._ff_c = "QueryModelLinkSettings";

oFF.QueryModelLinkSettings.create = function(blendableQueryManager, firstDatasetId, secondDatasetId)
{
	let queryModelLinkSettings = new oFF.QueryModelLinkSettings();
	queryModelLinkSettings.setupQueryModelLinkSettings(blendableQueryManager, firstDatasetId, secondDatasetId);
	return queryModelLinkSettings;
};
oFF.QueryModelLinkSettings.prototype.m_activeLinkDimensionNames = null;
oFF.QueryModelLinkSettings.prototype.m_firstDatasetId = null;
oFF.QueryModelLinkSettings.prototype.m_linkType = null;
oFF.QueryModelLinkSettings.prototype.m_secondDatasetId = null;
oFF.QueryModelLinkSettings.prototype.m_skipFilterValidation = false;
oFF.QueryModelLinkSettings.prototype.m_unlinkedDimensionJoinType = null;
oFF.QueryModelLinkSettings.prototype.addActivePrimaryLinkDimensionName = function(primaryDimensionLinkName)
{
	if (this.getQueryModel().getDimensionByName(primaryDimensionLinkName) !== null)
	{
		this.m_activeLinkDimensionNames.add(primaryDimensionLinkName);
		this.notifyNodeChanged();
	}
};
oFF.QueryModelLinkSettings.prototype.cloneOlapComponent = function(context, parent)
{
	let queryModelLinkSettingsClone = oFF.QueryModelLinkSettings.create(context, this.m_firstDatasetId, this.m_secondDatasetId);
	queryModelLinkSettingsClone.copyFrom(this, null);
	return queryModelLinkSettingsClone;
};
oFF.QueryModelLinkSettings.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let origin = other;
	this.m_firstDatasetId = origin.m_firstDatasetId;
	this.m_secondDatasetId = origin.m_secondDatasetId;
	this.m_activeLinkDimensionNames = origin.m_activeLinkDimensionNames.createListCopy();
	this.m_linkType = origin.m_linkType;
	this.m_unlinkedDimensionJoinType = origin.m_unlinkedDimensionJoinType;
	this.m_skipFilterValidation = origin.m_skipFilterValidation;
};
oFF.QueryModelLinkSettings.prototype.getActivePrimaryLinkDimensionNames = function()
{
	return this.m_activeLinkDimensionNames;
};
oFF.QueryModelLinkSettings.prototype.getLinkType = function()
{
	return this.m_linkType;
};
oFF.QueryModelLinkSettings.prototype.getName = function()
{
	return this.m_secondDatasetId;
};
oFF.QueryModelLinkSettings.prototype.getSecondDatasetId = function()
{
	return this.m_secondDatasetId;
};
oFF.QueryModelLinkSettings.prototype.getUnlinkedDimensionJoinType = function()
{
	return this.m_unlinkedDimensionJoinType;
};
oFF.QueryModelLinkSettings.prototype.releaseObject = function()
{
	this.m_firstDatasetId = null;
	this.m_secondDatasetId = null;
	this.m_activeLinkDimensionNames = oFF.XObjectExt.release(this.m_activeLinkDimensionNames);
	this.m_linkType = null;
	this.m_unlinkedDimensionJoinType = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QueryModelLinkSettings.prototype.removeActivePrimaryLinkDimensionName = function(primaryDimensionLinkName)
{
	this.m_activeLinkDimensionNames.removeElement(primaryDimensionLinkName);
	this.notifyNodeChanged();
};
oFF.QueryModelLinkSettings.prototype.removeAllActivePrimaryLinkDimensionNames = function()
{
	this.m_activeLinkDimensionNames.clear();
	this.notifyNodeChanged();
};
oFF.QueryModelLinkSettings.prototype.setLinkType = function(blendingLinkType)
{
	this.m_linkType = blendingLinkType;
	this.notifyNodeChanged();
};
oFF.QueryModelLinkSettings.prototype.setSkipFilterValidation = function(skipValidation)
{
	if (this.m_skipFilterValidation !== skipValidation)
	{
		this.m_skipFilterValidation = skipValidation;
		this.notifyNodeChanged();
	}
};
oFF.QueryModelLinkSettings.prototype.setUnlinkedDimensionJoinType = function(unlinkedDimensionJoinType)
{
	this.m_unlinkedDimensionJoinType = unlinkedDimensionJoinType;
	this.notifyNodeChanged();
};
oFF.QueryModelLinkSettings.prototype.setupQueryModelLinkSettings = function(blendableQueryManager, firstDatasetId, secondDatasetId)
{
	oFF.QModelComponent.prototype.setupModelComponent.call( this , blendableQueryManager, blendableQueryManager);
	oFF.XStringUtils.checkStringNotEmpty(firstDatasetId, "firstDatasetId cannot be null or empty");
	this.m_firstDatasetId = firstDatasetId;
	oFF.XStringUtils.checkStringNotEmpty(secondDatasetId, "secondDatasetId cannot be null or empty");
	this.m_secondDatasetId = secondDatasetId;
	let modelDimensionLinks = blendableQueryManager.getOlapEnv().getModelLinkManager().getModelDimensionLinksStorage(blendableQueryManager.getClientQueryObjectStorageName(), firstDatasetId, secondDatasetId);
	oFF.XObjectExt.assertNotNullExt(modelDimensionLinks, oFF.XStringUtils.concatenate4("Model Link Manager does not contain datasetId pair: ", firstDatasetId, " and ", secondDatasetId));
	modelDimensionLinks.addSecondaryParent(this);
	this.m_activeLinkDimensionNames = oFF.XList.create();
	this.m_linkType = oFF.BlendingLinkType.PRIMARY;
	this.m_unlinkedDimensionJoinType = oFF.UnlinkedDimensionJoinType.MERGE_MEMBERS;
	this.m_skipFilterValidation = false;
};
oFF.QueryModelLinkSettings.prototype.skipFilterValidation = function()
{
	return this.m_skipFilterValidation;
};

oFF.QCellContext = function() {};
oFF.QCellContext.prototype = new oFF.QModelComponent();
oFF.QCellContext.prototype._ff_c = "QCellContext";

oFF.QCellContext._create = function(context, name, parent)
{
	let object = new oFF.QCellContext();
	object.setupInternal(context, name, parent);
	return object;
};
oFF.QCellContext.prototype.m_axisContexts = null;
oFF.QCellContext.prototype.m_columnIndex = 0;
oFF.QCellContext.prototype.m_componentsExternal = false;
oFF.QCellContext.prototype.m_componentsInternal = false;
oFF.QCellContext.prototype.m_externalKeys = false;
oFF.QCellContext.prototype.m_rowIndex = 0;
oFF.QCellContext.prototype.cloneOlapComponent = function(context, parent)
{
	let clone = oFF.QCellContext._create(context, this.getName(), null);
	clone.copyFrom(this, null);
	let keysIt = this.m_axisContexts.getKeysAsIterator();
	while (keysIt.hasNext())
	{
		let key = keysIt.next();
		clone.setTupleContextForAxis(this.getTupleContextForAxis(key), key);
	}
	clone.m_columnIndex = this.m_columnIndex;
	clone.m_rowIndex = this.m_rowIndex;
	clone.m_componentsExternal = this.m_componentsExternal;
	clone.m_componentsInternal = this.m_componentsInternal;
	clone.m_externalKeys = this.m_externalKeys;
	return clone;
};
oFF.QCellContext.prototype.getAxisContexts = function()
{
	return this.m_axisContexts;
};
oFF.QCellContext.prototype.getColumnIndex = function()
{
	return this.m_columnIndex;
};
oFF.QCellContext.prototype.getColumnTupleContext = function()
{
	return this.m_axisContexts.getByKey(oFF.AxisType.COLUMNS);
};
oFF.QCellContext.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.CELL_CONTEXT;
};
oFF.QCellContext.prototype.getRowIndex = function()
{
	return this.m_rowIndex;
};
oFF.QCellContext.prototype.getRowTupleContext = function()
{
	return this.m_axisContexts.getByKey(oFF.AxisType.ROWS);
};
oFF.QCellContext.prototype.getTupleContextForAxis = function(axisType)
{
	return this.m_axisContexts.getByKey(axisType);
};
oFF.QCellContext.prototype.isComponentsExternal = function()
{
	return this.m_componentsExternal;
};
oFF.QCellContext.prototype.isComponentsInternal = function()
{
	return this.m_componentsInternal;
};
oFF.QCellContext.prototype.isExternalKeys = function()
{
	return this.m_externalKeys;
};
oFF.QCellContext.prototype.releaseObject = function()
{
	this.m_axisContexts = oFF.XObjectExt.release(this.m_axisContexts);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QCellContext.prototype.setColumnIndex = function(columnIndex)
{
	this.m_columnIndex = columnIndex;
	this.notifyNodeChanged();
};
oFF.QCellContext.prototype.setColumnTupleContext = function(axisTupleContext)
{
	this.setTupleContextForAxis(axisTupleContext, oFF.AxisType.COLUMNS);
};
oFF.QCellContext.prototype.setColumnTupleContextElement = function(axisTupleContextElement)
{
	this.setTupleContextElementForAxis(axisTupleContextElement, oFF.AxisType.COLUMNS);
};
oFF.QCellContext.prototype.setComponentsExternal = function(componentsExternal)
{
	this.m_componentsExternal = componentsExternal;
};
oFF.QCellContext.prototype.setComponentsInternal = function(componentsInternal)
{
	this.m_componentsInternal = componentsInternal;
};
oFF.QCellContext.prototype.setExternalKeys = function(externalKeys)
{
	this.m_externalKeys = externalKeys;
};
oFF.QCellContext.prototype.setRowIndex = function(rowIndex)
{
	this.m_rowIndex = rowIndex;
	this.notifyNodeChanged();
};
oFF.QCellContext.prototype.setRowTupleContext = function(axisTupleContext)
{
	this.setTupleContextForAxis(axisTupleContext, oFF.AxisType.ROWS);
};
oFF.QCellContext.prototype.setRowTupleContextElement = function(axisTupleContextElement)
{
	this.setTupleContextElementForAxis(axisTupleContextElement, oFF.AxisType.ROWS);
};
oFF.QCellContext.prototype.setTupleContextElementForAxis = function(axisTupleContextElement, axisType)
{
	let axisContextList;
	if (!this.m_axisContexts.containsKey(axisType))
	{
		throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate2("Cell contexts not available for axis: ", axisType.getName()));
	}
	else
	{
		axisContextList = this.m_axisContexts.getByKey(axisType);
		axisContextList.clear();
	}
	axisContextList.add(axisTupleContextElement);
};
oFF.QCellContext.prototype.setTupleContextForAxis = function(axisTupleContext, axisType)
{
	let axisContextList;
	if (!this.m_axisContexts.containsKey(axisType))
	{
		axisContextList = oFF.QModelComponentList.createModelComponentList(this.getContext(), this, true, "Axis Context");
		this.m_axisContexts.put(axisType, axisContextList);
	}
	else
	{
		axisContextList = this.m_axisContexts.getByKey(axisType);
		axisContextList.clear();
	}
	for (let i = 0; i < axisTupleContext.size(); i++)
	{
		axisContextList.add(axisTupleContext.get(i));
	}
};
oFF.QCellContext.prototype.setupInternal = function(context, name, parent)
{
	this.setupModelComponent(context, parent);
	this.setName(name);
	this.m_axisContexts = oFF.XSimpleMap.create();
	this.m_axisContexts.put(oFF.AxisType.COLUMNS, oFF.QModelComponentList.createModelComponentList(this.getContext(), this, true, "Column Context"));
	this.m_axisContexts.put(oFF.AxisType.ROWS, oFF.QModelComponentList.createModelComponentList(this.getContext(), this, true, "Row Context"));
	this.m_columnIndex = -1;
	this.m_rowIndex = -1;
};

oFF.OlapClientQueryObjectManager = function() {};
oFF.OlapClientQueryObjectManager.prototype = new oFF.QModelComponent();
oFF.OlapClientQueryObjectManager.prototype._ff_c = "OlapClientQueryObjectManager";

oFF.OlapClientQueryObjectManager.create = function(context)
{
	let clientQueryObjectManager = new oFF.OlapClientQueryObjectManager();
	clientQueryObjectManager.setupExt(context);
	return clientQueryObjectManager;
};
oFF.OlapClientQueryObjectManager.prototype.m_componentSecondaryParentsMap = null;
oFF.OlapClientQueryObjectManager.prototype.m_contextStorage = null;
oFF.OlapClientQueryObjectManager.prototype.m_storage = null;
oFF.OlapClientQueryObjectManager.prototype.addNewFormulaCalcDimProperties = function(name, context, storageName)
{
	let memberContext = this.getCachedKeyRefContext(context, storageName);
	let newFormulaCalculatedDimension = oFF.QFactory.createFormulaCalculatedDimension(memberContext, name);
	let properties = newFormulaCalculatedDimension.getProperties();
	this.insertToStorage(properties, oFF.QClientQueryObjectType.FORMULA_CALCDIM_PROPERTIES.getName(), name, storageName);
	let formulaCalcFields = oFF.QFieldList.createFieldList(newFormulaCalculatedDimension, "FormulaCalcFields", null);
	this.insertToStorage(formulaCalcFields, oFF.QClientQueryObjectType.FORMULA_CALCDIM_FIELD_LIST.getName(), name, storageName);
	properties.setFormulaCalcFieldsKeyRef(formulaCalcFields);
	return properties;
};
oFF.OlapClientQueryObjectManager.prototype.addNewFormulaException = function(name, context, storageName)
{
	let memberContext = this.getCachedKeyRefContext(context, storageName);
	let newFormulaException = oFF.QFactory.createFormulaException(memberContext, name, null);
	this.insertToStorage(newFormulaException, oFF.QClientQueryObjectType.FORMULA_EXCEPTION.getName(), name, storageName);
	return newFormulaException;
};
oFF.OlapClientQueryObjectManager.prototype.addNewPrimaryStructureMember = function(name, memberType, context, storageName)
{
	let memberContext = this.getCachedKeyRefContext(context, storageName);
	let newMember = oFF.QStructureMember.createMeasure(memberType, memberContext, context.getQueryModel().getPrimaryCalculationDimension());
	let remappedName = this.remapObjectName(name, memberType, context);
	this.insertToStorage(newMember, oFF.QClientQueryObjectType.PRIMARY_STRUCTURE_MEMBER.getName(), remappedName, storageName);
	if (!oFF.XString.isEqual(name, remappedName))
	{
		newMember.setName(name);
	}
	return newMember;
};
oFF.OlapClientQueryObjectManager.prototype.addNewSecondaryStructureMember = function(name, memberType, context, storageName)
{
	let memberContext = this.getCachedKeyRefContext(context, storageName);
	let newMember = oFF.QStructureMember.createMeasure(memberType, memberContext, context.getQueryModel().getSecondaryCalculationDimension());
	let remappedName = this.remapObjectName(name, memberType, context);
	this.insertToStorage(newMember, oFF.QClientQueryObjectType.SECONDARY_STRUCTURE_MEMBER.getName(), remappedName, storageName);
	if (!oFF.XString.isEqual(name, remappedName))
	{
		newMember.setName(name);
	}
	return newMember;
};
oFF.OlapClientQueryObjectManager.prototype.destroyStorage = function(storageName)
{
	let cacheKeys = this.m_contextStorage.getKeysAsReadOnlyList();
	let cacheKeyPrefix = this.getCacheKeyPrefix(storageName);
	for (let i = cacheKeys.size() - 1; i >= 0; i--)
	{
		let cacheKey = cacheKeys.get(i);
		if (oFF.XString.startsWith(cacheKey, cacheKeyPrefix))
		{
			this.m_contextStorage.remove(cacheKey);
		}
	}
	this.m_storage.removeSubKeyRefStore(storageName, true);
	this.m_componentSecondaryParentsMap.clear();
};
oFF.OlapClientQueryObjectManager.prototype.generateKeyName = function(storageName, storageGroupName, storageObjectName)
{
	return oFF.XStringUtils.concatenate5(storageName, "~", storageGroupName, "~", storageObjectName);
};
oFF.OlapClientQueryObjectManager.prototype.generateKeyNameFromKeyRef = function(keyRef)
{
	return this.generateKeyName(keyRef.getStorageName(), keyRef.getStorageGroupName(), keyRef.getStorageObjectName());
};
oFF.OlapClientQueryObjectManager.prototype.getCacheKeyPrefix = function(storageName)
{
	return oFF.XStringUtils.concatenate2(storageName, "~");
};
oFF.OlapClientQueryObjectManager.prototype.getCachedKeyRefContext = function(context, storageName)
{
	let queryModel = context.getQueryModel();
	let datasourceName = queryModel.getDatasetId() !== null ? queryModel.getDatasetId() : queryModel.getDataSource().getCacheKeyName();
	let cacheKey = oFF.XStringUtils.concatenate2(this.getCacheKeyPrefix(storageName), datasourceName);
	let memberContext;
	if (this.m_contextStorage.containsKey(cacheKey))
	{
		memberContext = this.m_contextStorage.useEntry(cacheKey);
		if (!memberContext.isReleased() && memberContext.getQueryModel() !== null && !memberContext.getQueryModel().isReleased())
		{
			return memberContext;
		}
		this.m_contextStorage.remove(cacheKey);
	}
	memberContext = oFF.QFactory.createKeyRefStoreContextWithCapabilities(queryModel, storageName, context.getModelCapabilities().cloneExt(null));
	this.m_contextStorage.put(cacheKey, memberContext);
	return memberContext;
};
oFF.OlapClientQueryObjectManager.prototype.getClientQueryObjectByKeyRef = function(keyRef)
{
	if (oFF.isNull(keyRef))
	{
		return null;
	}
	try
	{
		return this.getKeyRef(keyRef.getStorageName(), keyRef.getStorageGroupName(), keyRef.getStorageObjectName(), false);
	}
	catch (e)
	{
		return null;
	}
};
oFF.OlapClientQueryObjectManager.prototype.getClientQueryObjectIncludeReleasedByKeyRef = function(keyRef, clientQueryObjectStorageName)
{
	if (oFF.isNull(keyRef))
	{
		return null;
	}
	try
	{
		let storageName = keyRef.getStorageName();
		if (oFF.XStringUtils.isNullOrEmpty(storageName))
		{
			storageName = clientQueryObjectStorageName;
		}
		return this.getKeyRef(storageName, keyRef.getStorageGroupName(), keyRef.getStorageObjectName(), true);
	}
	catch (e)
	{
		return null;
	}
};
oFF.OlapClientQueryObjectManager.prototype.getFormulaCalcDimFieldList = function(name, storageName)
{
	return this.getKeyRef(storageName, oFF.QClientQueryObjectType.FORMULA_CALCDIM_FIELD_LIST.getName(), name, false);
};
oFF.OlapClientQueryObjectManager.prototype.getFormulaCalcDimProperties = function(name, storageName)
{
	return this.getKeyRef(storageName, oFF.QClientQueryObjectType.FORMULA_CALCDIM_PROPERTIES.getName(), name, false);
};
oFF.OlapClientQueryObjectManager.prototype.getFormulaCalcDimPropertiesByFieldName = function(fieldName, storageName)
{
	let calcDimProperties = this.m_storage.getObjectsByGroup(storageName, oFF.QClientQueryObjectType.FORMULA_CALCDIM_PROPERTIES.getName());
	if (oFF.notNull(calcDimProperties))
	{
		let calcDimPropertiesIter = calcDimProperties.getIterator();
		while (calcDimPropertiesIter.hasNext())
		{
			let properties = calcDimPropertiesIter.next();
			if (!properties.isReleased() && properties.getFormulaCalcFields().getFieldByName(fieldName) !== null)
			{
				return properties;
			}
		}
	}
	return null;
};
oFF.OlapClientQueryObjectManager.prototype.getFormulaException = function(name, storageName)
{
	return this.getKeyRef(storageName, oFF.QClientQueryObjectType.FORMULA_EXCEPTION.getName(), name, false);
};
oFF.OlapClientQueryObjectManager.prototype.getKeyRef = function(storageName, storageGroupName, storageObjectName, includeReleasedObject)
{
	let keyRef = this.m_storage.get(storageName, storageGroupName, storageObjectName);
	if (oFF.isNull(keyRef) || !includeReleasedObject && keyRef.isReleased())
	{
		return null;
	}
	return keyRef;
};
oFF.OlapClientQueryObjectManager.prototype.getKeyRefStorage = function()
{
	return this.m_storage;
};
oFF.OlapClientQueryObjectManager.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.OLAP_CLIENT_QUERY_OBJECT_MANAGER;
};
oFF.OlapClientQueryObjectManager.prototype.getStorage = function(storageName)
{
	let storage = this.m_storage.getSubStore(storageName);
	if (oFF.isNull(storage))
	{
		storage = oFF.QFactory.createKeyRefStorage(this.getContext(), storageName);
		this.m_storage.setSubKefRefStore(storage);
	}
	return storage;
};
oFF.OlapClientQueryObjectManager.prototype.getStructuredMember = function(name, storageName, isPrimaryStructureMember)
{
	return this.getKeyRef(storageName, isPrimaryStructureMember ? oFF.QClientQueryObjectType.PRIMARY_STRUCTURE_MEMBER.getName() : oFF.QClientQueryObjectType.SECONDARY_STRUCTURE_MEMBER.getName(), name, false);
};
oFF.OlapClientQueryObjectManager.prototype.getStructuredMemberIncludeReleased = function(name, storageName, isPrimaryStructureMember)
{
	return this.getKeyRef(storageName, isPrimaryStructureMember ? oFF.QClientQueryObjectType.PRIMARY_STRUCTURE_MEMBER.getName() : oFF.QClientQueryObjectType.SECONDARY_STRUCTURE_MEMBER.getName(), name, true);
};
oFF.OlapClientQueryObjectManager.prototype.insertToStorage = function(object, groupName, objectName, storageName)
{
	let storage = this.getStorage(storageName);
	let existingObject = this.getKeyRef(storageName, groupName, objectName, true);
	if (oFF.notNull(existingObject))
	{
		let keyName = this.generateKeyName(storageName, groupName, objectName);
		let componentSecondaryParents = this.m_componentSecondaryParentsMap.getByKey(keyName);
		let secondaryParents = oFF.notNull(componentSecondaryParents) ? componentSecondaryParents : !existingObject.isReleased() ? oFF.XList.create() : null;
		if (oFF.notNull(secondaryParents))
		{
			let existingObjectModelComponent = existingObject;
			let secondaryParentsFromExistingObject = existingObjectModelComponent.getSecondaryParents();
			oFF.XCollectionUtils.forEach(secondaryParentsFromExistingObject, (secondaryParentFromExistingObject) => {
				secondaryParents.add(secondaryParentFromExistingObject);
				existingObjectModelComponent.removeSecondaryParent(secondaryParentFromExistingObject);
			});
			oFF.XCollectionUtils.forEach(secondaryParents, (secondaryParent) => {
				if (oFF.notNull(secondaryParent) && !secondaryParent.isReleased())
				{
					object.addSecondaryParent(secondaryParent);
				}
			});
		}
		if (!existingObject.isReleased())
		{
			oFF.XObjectExt.release(existingObject);
		}
	}
	storage.putExt(object, groupName, objectName);
};
oFF.OlapClientQueryObjectManager.prototype.releaseClientQueryObject = function(name, storageName, objectType)
{
	let keyRefObj = this.m_storage.get(storageName, objectType.getName(), name);
	if (oFF.notNull(keyRefObj))
	{
		let modelComponentObj = keyRefObj;
		let secondaryParents = oFF.XList.create();
		secondaryParents.addAll(modelComponentObj.getSecondaryParents());
		let keyName = this.generateKeyNameFromKeyRef(keyRefObj);
		this.m_componentSecondaryParentsMap.put(keyName, secondaryParents);
		let memberType = null;
		if (objectType === oFF.QClientQueryObjectType.PRIMARY_STRUCTURE_MEMBER || objectType === oFF.QClientQueryObjectType.SECONDARY_STRUCTURE_MEMBER)
		{
			memberType = keyRefObj.getMemberType();
		}
		modelComponentObj.notifyNodeChanged();
		oFF.XObjectExt.release(keyRefObj);
		keyRefObj.setName(name);
		keyRefObj.setStorageName(storageName);
		if (oFF.notNull(memberType))
		{
			keyRefObj.setType(memberType);
		}
	}
};
oFF.OlapClientQueryObjectManager.prototype.releaseObject = function()
{
	let allSubStores = this.m_storage.getAllSubStores();
	let subStoresIter = allSubStores.getIterator();
	while (subStoresIter.hasNext())
	{
		let subStorage = subStoresIter.next();
		subStorage.removeObjectsByStorage(subStorage.getName(), true);
		oFF.XObjectExt.release(subStorage);
	}
	this.m_storage = oFF.XObjectExt.release(this.m_storage);
	this.m_contextStorage = oFF.XObjectExt.release(this.m_contextStorage);
	this.m_componentSecondaryParentsMap = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_componentSecondaryParentsMap);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.OlapClientQueryObjectManager.prototype.remapObjectName = function(name, memberType, context)
{
	let queryModel = context.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		let remappedName = oFF.OlapClientQueryObjectManagerUtils.getRemappedStorageObjectName(queryModel, name, memberType);
		if (oFF.notNull(remappedName))
		{
			return remappedName;
		}
	}
	return name;
};
oFF.OlapClientQueryObjectManager.prototype.removeClientQueryObject = function(name, storageName, objectType, releaseObject)
{
	let keyRefObj = this.m_storage.get(storageName, objectType.getName(), name);
	if (oFF.notNull(keyRefObj))
	{
		if (objectType === oFF.QClientQueryObjectType.FORMULA_CALCDIM_PROPERTIES)
		{
			this.removeClientQueryObject(name, storageName, oFF.QClientQueryObjectType.FORMULA_CALCDIM_FIELD_LIST, releaseObject);
		}
		this.m_storage.removeObject(storageName, objectType.getName(), name, false);
		keyRefObj.notifyNodeChanged();
		if (releaseObject)
		{
			oFF.XObjectExt.release(keyRefObj);
		}
	}
};
oFF.OlapClientQueryObjectManager.prototype.removeClientQueryObjectsByContext = function(context, storageName, releaseObject)
{
	this.removeClientQueryObjectsByContextForType(context, storageName, oFF.QClientQueryObjectType.PRIMARY_STRUCTURE_MEMBER, releaseObject);
	this.removeClientQueryObjectsByContextForType(context, storageName, oFF.QClientQueryObjectType.SECONDARY_STRUCTURE_MEMBER, releaseObject);
	this.removeClientQueryObjectsByContextForType(context, storageName, oFF.QClientQueryObjectType.FORMULA_CALCDIM_PROPERTIES, releaseObject);
	this.removeClientQueryObjectsByContextForType(context, storageName, oFF.QClientQueryObjectType.FORMULA_EXCEPTION, releaseObject);
};
oFF.OlapClientQueryObjectManager.prototype.removeClientQueryObjectsByContextForType = function(context, storageName, objectType, releaseObject)
{
	let objects = this.m_storage.getObjectsByGroup(storageName, objectType.getName());
	for (let i = 0; i < objects.size(); i++)
	{
		let modelObj = objects.get(i);
		if (modelObj.getQueryModel() === context.getQueryModel())
		{
			this.removeClientQueryObject(modelObj.getStorageObjectName(), storageName, objectType, releaseObject);
		}
	}
};
oFF.OlapClientQueryObjectManager.prototype.setupExt = function(context)
{
	this.setupModelComponentWithName(context, null, "OlapClientQueryObjectManager");
	this.m_storage = oFF.QFactory.createKeyRefStorage(context, "clientQueryObjectManager");
	this.m_contextStorage = oFF.QCache.create(context.getSession());
	this.m_componentSecondaryParentsMap = oFF.XHashMapByString.create();
};

oFF.QCmdDummyContext = function() {};
oFF.QCmdDummyContext.prototype = new oFF.QCmdAbstract();
oFF.QCmdDummyContext.prototype._ff_c = "QCmdDummyContext";

oFF.QCmdDummyContext.createDummyContext = function()
{
	return new oFF.QCmdDummyContext();
};
oFF.QCmdDummyContext.prototype.activateConditionalZeroSuppression = function()
{
	return this;
};
oFF.QCmdDummyContext.prototype.activateHierarchy = function(dimensionName)
{
	return this;
};
oFF.QCmdDummyContext.prototype.addAllDimensions = function()
{
	return this;
};
oFF.QCmdDummyContext.prototype.addAllFieldsOfDimensionToModelArea = function(dimName, contextType)
{
	return this;
};
oFF.QCmdDummyContext.prototype.addAllFieldsToModelArea = function(contextType)
{
	return this;
};
oFF.QCmdDummyContext.prototype.addAttributeField = function(dimType, dimName, attributeName, presentationType, fieldName, contextType)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addAttributeToResultSet = function(dimName, attributeName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addContainsGeometryFilter = function(dimension, fieldName, geometry)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addCoversGeometryFilter = function(dimension, fieldName, geometry)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addCrossesLinestringFilter = function(dimension, fieldName, geometry)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addDisjointGeometryFilter = function(dimension, fieldName, geometry)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addDoubleFilterByField = function(field, filterValue, comparisonOperator)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addDoubleFilterByFieldName = function(dimName, fieldName, filterValue, comparisonOperator)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addField = function(dimType, dimName, presentationType, fieldName, contextType)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addFieldToResultSetExt = function(dimType, dimName, presentationType, fieldName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addFilter = function(filterLayer, dimType, dimName, presentationType, fieldName, lowValue, highValue, comparisonOperator)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addFilterByField = function(field, firstValue, secondValue, thirdValue, comparisonOperator, isVisibility)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addFilterByFieldAndValue = function(field, filterValue, comparisonOperator)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addIntFilterByField = function(field, filterValue, comparisonOperator)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addIntFilterByFieldName = function(dimName, fieldName, filterValue, comparisonOperator)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addIntersectsGeometryFilter = function(dimension, fieldName, geometry)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addIntersectsRectFilter = function(dimension, fieldName, lowerLeft, upperRight)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addIntervalFilterByValues = function(dimName, lowValue, highValue)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addLongFilterByField = function(field, filterValue, comparisonOperator)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addLongFilterByFieldName = function(dimName, fieldName, filterValue, comparisonOperator)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addMeasure = function(measureName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addNewRestrictedMeasure = function(dimType, measureName, text, memberName, targetDim, targetMember)
{
	return this;
};
oFF.QCmdDummyContext.prototype.addNewRestrictedMeasureOnNode = function(dimType, measureName, text, memberName, targetDim, targetHierarchyName, targetNode)
{
	return this;
};
oFF.QCmdDummyContext.prototype.addOverlapsGeometryFilter = function(dimension, fieldName, geometry)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addSingleMemberFilter = function(filterLayer, dimType, dimName, memberName, comparisonOperator)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addStringFilterByField = function(field, filterValue, comparisonOperator)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addStringFilterByFieldNameAndOperator = function(dimName, fieldName, filterValue, comparisonOperator)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addStringFilterByName = function(dimName, fieldName, filterValue, comparisonOperator)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addStringFilterByPresentation = function(dimName, presentationType, filterValue, comparisonOperator)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addTouchesGeometryFilter = function(dimension, fieldName, geometry)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addWithinDistanceFilter = function(dimension, fieldName, point, distance, unit)
{
	return null;
};
oFF.QCmdDummyContext.prototype.addWithinGeometryFilter = function(dimension, fieldName, geometry)
{
	return null;
};
oFF.QCmdDummyContext.prototype.alignTotals = function(modelLevel, name, alignment)
{
	return this;
};
oFF.QCmdDummyContext.prototype.alignTotalsWithPriority = function(modelLevel, name, alignment, priority)
{
	return this;
};
oFF.QCmdDummyContext.prototype.applyCustomSort = function(dimension, field, customOrder, sortDirection, customSortPosition, createNewSortOperation)
{
	return null;
};
oFF.QCmdDummyContext.prototype.applyRankings = function(rankSettings) {};
oFF.QCmdDummyContext.prototype.applyRankingsWithoutReset = function(rankSettings) {};
oFF.QCmdDummyContext.prototype.assignHierarchy = function(dimensionName, hierarchyName)
{
	return this;
};
oFF.QCmdDummyContext.prototype.buildRank = function(maxRows, measureName, secondaryMeasure, applyToDimensions, indicateTopBottom, versionElementId, versionDimension)
{
	return null;
};
oFF.QCmdDummyContext.prototype.buildRankExt = function(maxRows, measureName, secondaryMeasure, applyToDimensions, indicateTopBottom, versionElementId, versionDimension, boltCompatibilityMode, defaultEvaluationType)
{
	return null;
};
oFF.QCmdDummyContext.prototype.clearAllFieldsFromModelArea = function(contextType)
{
	return this;
};
oFF.QCmdDummyContext.prototype.clearAllFiltersExt = function(filterLayer, filterScopeVariables)
{
	return this;
};
oFF.QCmdDummyContext.prototype.clearAllUniqueAxisProperties = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.clearAttributeFields = function(dimType, dimName, attributeName, contextType)
{
	return this;
};
oFF.QCmdDummyContext.prototype.clearAttributes = function(dimType, dimName, contextType)
{
	return this;
};
oFF.QCmdDummyContext.prototype.clearAxis = function(targetAxis)
{
	return this;
};
oFF.QCmdDummyContext.prototype.clearFields = function(dimType, dimName, contextType)
{
	return this;
};
oFF.QCmdDummyContext.prototype.clearFilterByIdExt = function(filterLayer, uniqueId)
{
	return this;
};
oFF.QCmdDummyContext.prototype.clearFiltersByDimensionExt = function(filterLayer, dimType, dimName)
{
	return this;
};
oFF.QCmdDummyContext.prototype.clearNonMainFieldsFromResultSet = function(dimType, dimName)
{
	return this;
};
oFF.QCmdDummyContext.prototype.clearNonMeasureFilters = function()
{
	return this;
};
oFF.QCmdDummyContext.prototype.clearNonStructureFilters = function()
{
	return this;
};
oFF.QCmdDummyContext.prototype.clearRank = function(conditionName)
{
	return this;
};
oFF.QCmdDummyContext.prototype.clearSingleMemberFilterByName = function(dimName, memberName, comparisonOperator)
{
	return this;
};
oFF.QCmdDummyContext.prototype.clearSort = function(sortType, name)
{
	return this;
};
oFF.QCmdDummyContext.prototype.clearUniqueAxisPropertiesForAxis = function(axisType)
{
	return null;
};
oFF.QCmdDummyContext.prototype.containsField = function(dimName, fieldName, contextType)
{
	return false;
};
oFF.QCmdDummyContext.prototype.containsResultSetFieldByType = function(dimName, presentationType)
{
	return false;
};
oFF.QCmdDummyContext.prototype.containsSelectorFieldByType = function(dimName, presentationType)
{
	return false;
};
oFF.QCmdDummyContext.prototype.createResetConfiguration = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.deactivateAllServerConditions = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.deactivateAllServerExceptions = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.deactivateHierarchy = function(dimensionName)
{
	return this;
};
oFF.QCmdDummyContext.prototype.drillNode = function(dimName, nodeName, drillState)
{
	return this;
};
oFF.QCmdDummyContext.prototype.getAbstractRendering = function(type, protocol)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getAccountDimensionMemberAliasByName = function(queryModel, memberName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getAccountDimensionMemberNameByAlias = function(queryModel, aliasName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getAllRanks = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getApplication = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getAsciiResultSet = function(maxRowCount, maxColumnCount)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getAssignedHierarchy = function(dimensionName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getAvailableFieldContainerDisplays = function(dimName, attributeName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getAvailableFieldContainerKeyDisplays = function(dimName, attributeName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getAvailableFieldContainerKeyViews = function(dimName, attributeName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getAvailableFieldContainerTextViews = function(dimName, attributeName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getCalculatedDimensionsInUse = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getCellContextManager = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getCsvResultSet = function(maxRowCount, maxColumnCount)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getDataCellByDrillPath = function(columnDrillPath, rowDrillPath)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getDataSource = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getDataSourceOrigin = function()
{
	return this.getDataSource();
};
oFF.QCmdDummyContext.prototype.getDataSourceTarget = function()
{
	return this.getDataSource();
};
oFF.QCmdDummyContext.prototype.getDefaultTopRankEvaluationDimensions = function(leadingStructure)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getDimension = function(dimName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getDimensionAccessor = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getDimensionsContainingValueType = function(valueType)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getDrillManager = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getExecuteRequestOnOldResultSet = function()
{
	return false;
};
oFF.QCmdDummyContext.prototype.getField = function(fieldName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getFieldAccessorSingle = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getFieldContainerDefaultKeyDisplay = function(dimName, attributeName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getFieldContainerDefaultKeyView = function(dimName, attributeName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getFieldContainerDefaultTextView = function(dimName, attributeName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getFieldContainerDisplay = function(dimName, attributeName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getFieldContainerKeyDisplay = function(dimName, attributeName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getFieldContainerKeyView = function(dimName, attributeName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getFieldContainerTextView = function(dimName, attributeName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getFilterById = function(uniqueId)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getFirstGISDimension = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getGISAttributesForDimension = function(dimension)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getKeyRefStorage = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getMaxColumns = function()
{
	return 0;
};
oFF.QCmdDummyContext.prototype.getMaxResultRecords = function()
{
	return 0;
};
oFF.QCmdDummyContext.prototype.getMaxRows = function()
{
	return 0;
};
oFF.QCmdDummyContext.prototype.getMeasure = function(measureName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getMeasureMemberAliasByName = function(queryModel, memberName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getMeasureMemberNameByAlias = function(queryModel, aliasName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getMemberVisibilityByFilter = function(dimension)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getMembersInResultSetOrder = function(dimension)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getModelCapabilities = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getName = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getOffsetColumns = function()
{
	return 0;
};
oFF.QCmdDummyContext.prototype.getOffsetRows = function()
{
	return 0;
};
oFF.QCmdDummyContext.prototype.getOlapComponentType = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getOlapEnv = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getProcess = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getQueryManager = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getQueryModel = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getQueryServiceConfig = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getRank = function(conditionName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getReferenceGrid = function(withDetails)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getResultSetPersistenceIdentifier = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getResultSetPersistenceSchema = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getResultSetPersistenceTable = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getResultSetPersistenceType = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getRuntimeMemberNameByAlias = function(queryModel, aliasName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getSession = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getSingleMemberFilter = function(filterLayer, dimType, dimName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getStorageGroupName = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getStorageName = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getStorageObjectName = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getTagging = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getUniqueResultAlignment = function(modelLevel, name)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getUniqueResultVisibilityByElementAndAlignment = function(resultAlignment, resultStructureElement, modelLevel, name)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getVariable = function(varName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getVariableContainer = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getVariablesNameAndText = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.getVisibilityFilterById = function(uniqueId)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getVisibleMembers = function(dimension, memberHierarchy)
{
	return null;
};
oFF.QCmdDummyContext.prototype.getVisibleMembersInResultSetOrder = function(dim)
{
	return null;
};
oFF.QCmdDummyContext.prototype.hasMoreColumnRecordsAvailable = function()
{
	return false;
};
oFF.QCmdDummyContext.prototype.hasMoreRowRecordsAvailable = function()
{
	return false;
};
oFF.QCmdDummyContext.prototype.hasUniqueAxisProperties = function(axisType, uniqueAxisProperty)
{
	return false;
};
oFF.QCmdDummyContext.prototype.insertAttributeField = function(dimType, dimName, attributeName, presentationType, fieldName, contextType, index)
{
	return null;
};
oFF.QCmdDummyContext.prototype.insertAttributeToResultSet = function(dimName, attributeName, index)
{
	return null;
};
oFF.QCmdDummyContext.prototype.insertField = function(dimType, dimName, presentationType, fieldName, contextType, index)
{
	return null;
};
oFF.QCmdDummyContext.prototype.isAbapMds = function()
{
	return false;
};
oFF.QCmdDummyContext.prototype.isBpce = function()
{
	return false;
};
oFF.QCmdDummyContext.prototype.isBpcs = function()
{
	return false;
};
oFF.QCmdDummyContext.prototype.isBw = function()
{
	return false;
};
oFF.QCmdDummyContext.prototype.isDimensionOnRowsOrColumns = function(dimName)
{
	return false;
};
oFF.QCmdDummyContext.prototype.isDimensionSupportingRowsOrColumns = function(dimName)
{
	return false;
};
oFF.QCmdDummyContext.prototype.isEventingStopped = function()
{
	return false;
};
oFF.QCmdDummyContext.prototype.isFieldContainerKeyViewActive = function(dimName, attributeName)
{
	return false;
};
oFF.QCmdDummyContext.prototype.isFieldContainerKeyViewDefault = function(dimName, attributeName)
{
	return false;
};
oFF.QCmdDummyContext.prototype.isFieldContainerKeyViewSupported = function(dimName, attributeName)
{
	return false;
};
oFF.QCmdDummyContext.prototype.isFieldContainerTextViewActive = function(dimName, attributeName)
{
	return false;
};
oFF.QCmdDummyContext.prototype.isFieldContainerTextViewDefault = function(dimName, attributeName)
{
	return false;
};
oFF.QCmdDummyContext.prototype.isFieldContainerTextViewSupported = function(dimName, attributeName)
{
	return false;
};
oFF.QCmdDummyContext.prototype.isHana = function()
{
	return false;
};
oFF.QCmdDummyContext.prototype.isHierarchyActive = function(dimensionName)
{
	return false;
};
oFF.QCmdDummyContext.prototype.isHierarchyAssigned = function(dimensionName)
{
	return false;
};
oFF.QCmdDummyContext.prototype.isHybris = function()
{
	return false;
};
oFF.QCmdDummyContext.prototype.isKeyfigureCalculationSuppressed = function()
{
	return false;
};
oFF.QCmdDummyContext.prototype.isLinkingToQueryManagerUnsupported = function(targetQueryManager)
{
	return false;
};
oFF.QCmdDummyContext.prototype.isMemberVisibleByFilter = function(member, includedList, excludedList)
{
	return false;
};
oFF.QCmdDummyContext.prototype.isOdata = function()
{
	return false;
};
oFF.QCmdDummyContext.prototype.isRankOnAllDimensionsExists = function()
{
	return false;
};
oFF.QCmdDummyContext.prototype.isResultSetTransportEnabled = function()
{
	return false;
};
oFF.QCmdDummyContext.prototype.isTypeOfAbap = function()
{
	return false;
};
oFF.QCmdDummyContext.prototype.isTypeOfBw = function()
{
	return false;
};
oFF.QCmdDummyContext.prototype.isTypeOfHana = function()
{
	return false;
};
oFF.QCmdDummyContext.prototype.isUniverse = function()
{
	return false;
};
oFF.QCmdDummyContext.prototype.isUqas = function()
{
	return false;
};
oFF.QCmdDummyContext.prototype.moveDimensionAfter = function(dimensionName, targetDimensionName)
{
	return this;
};
oFF.QCmdDummyContext.prototype.moveDimensionBefore = function(dimensionName, targetDimensionName)
{
	return this;
};
oFF.QCmdDummyContext.prototype.moveDimensionExt = function(dimType, dimName, targetAxis, index)
{
	return null;
};
oFF.QCmdDummyContext.prototype.moveSortToPosition = function(sortType, name, position)
{
	return this;
};
oFF.QCmdDummyContext.prototype.newCustomSorting = function(dimension, field, sortFromStart, sortFromEnd)
{
	return this;
};
oFF.QCmdDummyContext.prototype.processQueryExecution = function(syncType, listener, customIdentifier)
{
	return this;
};
oFF.QCmdDummyContext.prototype.processQueryManagerCreation = function(syncType, listener, customIdentifier)
{
	return null;
};
oFF.QCmdDummyContext.prototype.processResetExitOrDynamicVariable = function(syncType, listener, customIdentifier, overwriteDefaultForInputEnabledVar)
{
	return this;
};
oFF.QCmdDummyContext.prototype.queueEventing = function() {};
oFF.QCmdDummyContext.prototype.refresh = function()
{
	return this;
};
oFF.QCmdDummyContext.prototype.refreshFieldContainerDisplayForDimension = function(dimName, display)
{
	return this;
};
oFF.QCmdDummyContext.prototype.registerChangedListener = function(listener, customIdentifier)
{
	return this;
};
oFF.QCmdDummyContext.prototype.removeAttributeField = function(dimType, dimName, attributeName, presentationType, fieldName, contextType)
{
	return null;
};
oFF.QCmdDummyContext.prototype.removeAttributeFromResultSet = function(dimName, attributeName)
{
	return null;
};
oFF.QCmdDummyContext.prototype.removeDrillOperationsByAxisType = function(axisType)
{
	return this;
};
oFF.QCmdDummyContext.prototype.removeDrillOperationsByDimensionName = function(dimName)
{
	return this;
};
oFF.QCmdDummyContext.prototype.removeField = function(dimType, dimName, presentationType, fieldName, contextType)
{
	return null;
};
oFF.QCmdDummyContext.prototype.removeInvalidSortOperations = function()
{
	return this;
};
oFF.QCmdDummyContext.prototype.removeUnusedClientQueryObjectMembers = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.reset = function()
{
	return this;
};
oFF.QCmdDummyContext.prototype.resetFieldContainerKeyViewToDefault = function(dimName, attributeName)
{
	return this;
};
oFF.QCmdDummyContext.prototype.resetFieldContainerTextViewToDefault = function(dimName, attributeName)
{
	return this;
};
oFF.QCmdDummyContext.prototype.resetMaxResultRecords = function()
{
	return this;
};
oFF.QCmdDummyContext.prototype.resetPreserveCustomMembers = function()
{
	return this;
};
oFF.QCmdDummyContext.prototype.resetPreserveCustomMembersAndCalcDims = function()
{
	return this;
};
oFF.QCmdDummyContext.prototype.resetToDefault = function()
{
	return this;
};
oFF.QCmdDummyContext.prototype.resetToDefaultState = function(metadataState)
{
	return this;
};
oFF.QCmdDummyContext.prototype.resetWithOptions = function(cmdResetConfiguration)
{
	return this;
};
oFF.QCmdDummyContext.prototype.resumeEventing = function() {};
oFF.QCmdDummyContext.prototype.select = function(sigSelExpression)
{
	return this;
};
oFF.QCmdDummyContext.prototype.setActiveComponent = function(component)
{
	return false;
};
oFF.QCmdDummyContext.prototype.setAxisZeroSuppressionType = function(axisType, zeroSuppressionType)
{
	return this;
};
oFF.QCmdDummyContext.prototype.setAxisZeroSuppressionTypeExt = function(axisType, zeroSuppressionType, enforceReadModeSynchronization)
{
	return null;
};
oFF.QCmdDummyContext.prototype.setConditionActive = function(conditionName, active)
{
	return null;
};
oFF.QCmdDummyContext.prototype.setDimensionAndMeasure = function(dimName, measureName)
{
	return this;
};
oFF.QCmdDummyContext.prototype.setDimensionCustomHierarchyDefinition = function(customHierarchyDefinition, hierarchyActive, initialDrillLevel)
{
	return this;
};
oFF.QCmdDummyContext.prototype.setDimensionHierarchy = function(dimName, hierarchyName, hierarchyActive, initialDrillLevel)
{
	return this;
};
oFF.QCmdDummyContext.prototype.setDimensionHierarchyDrillLevel = function(dimName, initialDrillLevel)
{
	return null;
};
oFF.QCmdDummyContext.prototype.setDimensionHierarchyHasNodeCondensation = function(dimName, nodeCondensation)
{
	return null;
};
oFF.QCmdDummyContext.prototype.setDimensionHierarchyLowerLevelNodeAlignment = function(dimName, alignment)
{
	return null;
};
oFF.QCmdDummyContext.prototype.setDimensionHierarchyMemberOfPostedNodeVisibility = function(dimName, memberOfPostedNodeVisibility)
{
	return null;
};
oFF.QCmdDummyContext.prototype.setDimensionMemberReadModeGraceful = function(dimensionName, contextType, readMode)
{
	return null;
};
oFF.QCmdDummyContext.prototype.setDimensionMemberReadModeGracefulExt = function(dimensionName, contextType, readMode, enforceZeroSuppressionSynchronization)
{
	return null;
};
oFF.QCmdDummyContext.prototype.setDimensionsAndMeasures = function(dimNames, measureNames)
{
	return this;
};
oFF.QCmdDummyContext.prototype.setExceptionActive = function(exceptionName, active)
{
	return null;
};
oFF.QCmdDummyContext.prototype.setExecuteRequestOnOldResultSet = function(executeRequestOnOldResultSet)
{
	return this;
};
oFF.QCmdDummyContext.prototype.setField = function(dimType, dimName, presentationType, fieldName, contextType)
{
	return null;
};
oFF.QCmdDummyContext.prototype.setFieldContainerDisplay = function(dimName, attributeName, fieldContainerDisplay)
{
	return this;
};
oFF.QCmdDummyContext.prototype.setFieldContainerKeyDisplay = function(dimName, attributeName, keyDisplay)
{
	return this;
};
oFF.QCmdDummyContext.prototype.setFieldContainerKeyView = function(dimName, attributeName, keyView)
{
	return this;
};
oFF.QCmdDummyContext.prototype.setFieldContainerTextView = function(dimName, attributeName, textView)
{
	return this;
};
oFF.QCmdDummyContext.prototype.setFilterForLeaves = function(dimension)
{
	return this;
};
oFF.QCmdDummyContext.prototype.setMaxColumns = function(max)
{
	return this;
};
oFF.QCmdDummyContext.prototype.setMaxResultRecords = function(maxResultRecords)
{
	return this;
};
oFF.QCmdDummyContext.prototype.setMaxRows = function(max)
{
	return this;
};
oFF.QCmdDummyContext.prototype.setOffsetColumns = function(offset)
{
	return this;
};
oFF.QCmdDummyContext.prototype.setOffsetRows = function(offset)
{
	return this;
};
oFF.QCmdDummyContext.prototype.setRank = function(maxRows, complexSorting, condition, applyToDimensions)
{
	return this;
};
oFF.QCmdDummyContext.prototype.setResultSetPersistanceTargetSchema = function(resultSetPersistenceSchema)
{
	return this;
};
oFF.QCmdDummyContext.prototype.setResultSetPersistanceTargetTable = function(resultSetPersistenceTable)
{
	return this;
};
oFF.QCmdDummyContext.prototype.setResultSetPersistenceIdentifier = function(resultSetPersistenceIdentifier)
{
	return this;
};
oFF.QCmdDummyContext.prototype.setResultSetPersistenceTargetType = function(resultSetPersistenceType)
{
	return this;
};
oFF.QCmdDummyContext.prototype.setResultSetTransportEnabled = function(isEnabled)
{
	return this;
};
oFF.QCmdDummyContext.prototype.setSuppressKeyfigureCalculation = function(doSupress)
{
	return this;
};
oFF.QCmdDummyContext.prototype.setTotalsVisible = function(modelLevel, name, visibility)
{
	return this;
};
oFF.QCmdDummyContext.prototype.setTotalsVisibleByElement = function(modelLevel, name, element, visibility)
{
	return null;
};
oFF.QCmdDummyContext.prototype.setUniversalDisplayHierarchy = function(dimensionNames, initialDrillLevel, active)
{
	return null;
};
oFF.QCmdDummyContext.prototype.setVariable = function(varName, value)
{
	return this;
};
oFF.QCmdDummyContext.prototype.sort = function(sortType, dimType, dimName, presentationType, fieldName, memberName, direction)
{
	return this;
};
oFF.QCmdDummyContext.prototype.sortByQueryDataCell = function(keyFigureName, secondaryStructureMemberName, direction, leadingAxis)
{
	return this;
};
oFF.QCmdDummyContext.prototype.stopEventing = function() {};
oFF.QCmdDummyContext.prototype.submitVariables = function()
{
	return null;
};
oFF.QCmdDummyContext.prototype.swapDimensions = function(dimensionName1, dimensionName2)
{
	return this;
};
oFF.QCmdDummyContext.prototype.switchAxes = function()
{
	return this;
};
oFF.QCmdDummyContext.prototype.switchAxesExt = function(includeSettings)
{
	return this;
};
oFF.QCmdDummyContext.prototype.toggleUniqueAxisProperties = function(axisType, uniqueAxisProperty, active)
{
	return null;
};
oFF.QCmdDummyContext.prototype.unassignHierarchy = function(dimensionName)
{
	return this;
};
oFF.QCmdDummyContext.prototype.unregisterChangedListener = function(listener)
{
	return this;
};
oFF.QCmdDummyContext.prototype.updateDynamicVariables = function(syncType, listener, customIdentifier)
{
	return this;
};

oFF.QCmdSpace = function() {};
oFF.QCmdSpace.prototype = new oFF.QCmdAbstract();
oFF.QCmdSpace.prototype._ff_c = "QCmdSpace";

oFF.QCmdSpace.TRACE_COMMAND = "Command";
oFF.QCmdSpace.TRACE_PARAMETERS = "Parameters";
oFF.QCmdSpace.TRACE_SIGNATURE = "Signature";
oFF.QCmdSpace.createBySelection = function(application, sigSelExpression)
{
	let cmdSpace = new oFF.QCmdSpace();
	cmdSpace.setupCmdsSpace(application);
	cmdSpace.selectOnSpace(sigSelExpression);
	return cmdSpace;
};
oFF.QCmdSpace.createWithElement = function(application, modelComponent)
{
	let cmdSpace = new oFF.QCmdSpace();
	cmdSpace.setupCmdsSpace(application);
	cmdSpace.addElement(modelComponent);
	return cmdSpace;
};
oFF.QCmdSpace.prototype.m_activeCmdEngine = null;
oFF.QCmdSpace.prototype.m_activeComponent = null;
oFF.QCmdSpace.prototype.m_cmdEngineList = null;
oFF.QCmdSpace.prototype.m_dummyCmdEngine = null;
oFF.QCmdSpace.prototype.m_elements = null;
oFF.QCmdSpace.prototype.m_olapEnv = null;
oFF.QCmdSpace.prototype.m_spaceSigSel = null;
oFF.QCmdSpace.prototype.activateConditionalZeroSuppression = function()
{
	if (this.isTracing())
	{
		this.addTrace(oFF.QCmdSignature.ACTIVATE_CONDITIONAL_ZERO_SUPPRESSION, null);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).activateConditionalZeroSuppression();
	}
	return this;
};
oFF.QCmdSpace.prototype.activateHierarchy = function(dimensionName)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(dimensionName);
		this.addTrace(oFF.QCmdSignature.ACTIVATE_HIERARCHY, params);
	}
	for (let i = 0; i < this.sizeElements(); i++)
	{
		this.setActive(i).activateHierarchy(dimensionName);
	}
	return this;
};
oFF.QCmdSpace.prototype.addAllDimensions = function()
{
	if (this.isTracing())
	{
		this.addTrace(oFF.QCmdSignature.ADD_ALL_DIMENSIONS, null);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).addAllDimensions();
	}
	return this;
};
oFF.QCmdSpace.prototype.addAllFieldsOfDimensionToModelArea = function(dimName, contextType)
{
	let theDimName = this.checkAndReplace(dimName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName).addNameObject(contextType);
		this.addTrace(oFF.QCmdSignature.ADD_ALL_FIELDS_OF_DIMENSION_TO_MODEL_AREA, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).addAllFieldsOfDimensionToModelArea(theDimName, contextType);
	}
	return this;
};
oFF.QCmdSpace.prototype.addAllFieldsToModelArea = function(contextType)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(contextType);
		this.addTrace(oFF.QCmdSignature.ADD_ALL_FIELDS_TO_MODEL_AREA, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).addAllFieldsToModelArea(contextType);
	}
	return this;
};
oFF.QCmdSpace.prototype.addAttributeField = function(dimType, dimName, attributeName, presentationType, fieldName, contextType)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	let theFieldName = this.checkAndReplace(fieldName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(dimType).addString(theDimName).addString(theAttributeName).addNameObject(presentationType).addString(theFieldName).addNameObject(contextType);
		this.addTrace(oFF.QCmdSignature.ADD_ATTRIBUTE_FIELD, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addAttributeField(dimType, theDimName, theAttributeName, presentationType, theFieldName, contextType);
	}
	return result;
};
oFF.QCmdSpace.prototype.addAttributeToResultSet = function(dimName, attributeName)
{
	let theDimName = this.checkAndReplace(dimName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName).addString(attributeName);
		this.addTrace(oFF.QCmdSignature.ADD_ATTRIBUTE_TO_RESULT_SET, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addAttributeToResultSet(theDimName, attributeName);
	}
	return result;
};
oFF.QCmdSpace.prototype.addComponent = function(component)
{
	let olapComponent = component;
	this.addElement(olapComponent);
};
oFF.QCmdSpace.prototype.addContainsGeometryFilter = function(dimension, fieldName, geometry)
{
	let theFieldName = this.checkAndReplace(fieldName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(dimension).addString(theFieldName).addXValue(geometry);
		this.addTrace(oFF.QCmdSignature.ADD_CONTAINS_GEOMETRY_FILTER, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addContainsGeometryFilter(dimension, theFieldName, geometry);
	}
	return result;
};
oFF.QCmdSpace.prototype.addCoversGeometryFilter = function(dimension, fieldName, geometry)
{
	let theFieldName = this.checkAndReplace(fieldName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(dimension).addString(theFieldName).addXValue(geometry);
		this.addTrace(oFF.QCmdSignature.ADD_COVERS_GEOMETRY_FILTER, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addCoversGeometryFilter(dimension, theFieldName, geometry);
	}
	return result;
};
oFF.QCmdSpace.prototype.addCrossesLinestringFilter = function(dimension, fieldName, geometry)
{
	let theFieldName = this.checkAndReplace(fieldName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(dimension).addString(theFieldName).addXValue(geometry);
		this.addTrace(oFF.QCmdSignature.ADD_CROSSES_LINESTRING_FILTER, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addCrossesLinestringFilter(dimension, theFieldName, geometry);
	}
	return result;
};
oFF.QCmdSpace.prototype.addDisjointGeometryFilter = function(dimension, fieldName, geometry)
{
	let theFieldName = this.checkAndReplace(fieldName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(dimension).addString(theFieldName).addXValue(geometry);
		this.addTrace(oFF.QCmdSignature.ADD_DISJOINT_GEOMETRY_FILTER, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addDisjointGeometryFilter(dimension, theFieldName, geometry);
	}
	return result;
};
oFF.QCmdSpace.prototype.addDoubleFilterByField = function(field, filterValue, comparisonOperator)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(field).addDouble(filterValue).addNameObject(comparisonOperator);
		this.addTrace(oFF.QCmdSignature.ADD_DOUBLE_FILTER_BY_FIELD, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addDoubleFilterByField(field, filterValue, comparisonOperator);
	}
	return result;
};
oFF.QCmdSpace.prototype.addDoubleFilterByFieldName = function(dimName, fieldName, filterValue, comparisonOperator)
{
	let theDimName = this.checkAndReplace(dimName);
	let theFieldName = this.checkAndReplace(fieldName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName).addString(theFieldName).addDouble(filterValue).addNameObject(comparisonOperator);
		this.addTrace(oFF.QCmdSignature.ADD_DOUBLE_FILTER_BY_FIELD_NAME, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addDoubleFilterByFieldName(theDimName, theFieldName, filterValue, comparisonOperator);
	}
	return result;
};
oFF.QCmdSpace.prototype.addElement = function(modelComponent)
{
	if (oFF.notNull(modelComponent))
	{
		this.m_elements.add(oFF.XWeakReferenceUtil.getWeakRef(modelComponent));
		this.m_activeComponent = modelComponent;
		if (oFF.isNull(this.m_olapEnv))
		{
			this.m_olapEnv = modelComponent.getApplication().getOlapEnvironment();
		}
	}
};
oFF.QCmdSpace.prototype.addField = function(dimType, dimName, presentationType, fieldName, contextType)
{
	let theDimName = this.checkAndReplace(dimName);
	let theFieldName = this.checkAndReplace(fieldName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(dimType).addString(theDimName).addNameObject(presentationType).addString(theFieldName).addNameObject(contextType);
		this.addTrace(oFF.QCmdSignature.ADD_FIELD, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addField(dimType, theDimName, presentationType, theFieldName, contextType);
	}
	return result;
};
oFF.QCmdSpace.prototype.addFieldToResultSetExt = function(dimType, dimName, presentationType, fieldName)
{
	let theDimName = this.checkAndReplace(dimName);
	let theFieldName = this.checkAndReplace(fieldName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(dimType).addString(theDimName).addNameObject(presentationType).addString(theFieldName);
		this.addTrace(oFF.QCmdSignature.ADD_FIELD_TO_RESULTSET_EXT, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addFieldToResultSetExt(dimType, theDimName, presentationType, theFieldName);
	}
	return result;
};
oFF.QCmdSpace.prototype.addFilter = function(filterLayer, dimType, dimName, presentationType, fieldName, lowValue, highValue, comparisonOperator)
{
	let theDimName = this.checkAndReplace(dimName);
	let theFieldName = this.checkAndReplace(fieldName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(filterLayer).addNameObject(dimType).addString(theDimName).addNameObject(presentationType).addString(theFieldName).addString(lowValue).addString(highValue).addNameObject(comparisonOperator);
		this.addTrace(oFF.QCmdSignature.ADD_FILTER, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addFilter(filterLayer, dimType, theDimName, presentationType, theFieldName, lowValue, highValue, comparisonOperator);
	}
	return result;
};
oFF.QCmdSpace.prototype.addFilterByField = function(field, firstValue, secondValue, thirdValue, comparisonOperator, isVisibility)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(field).addXValue(firstValue).addXValue(secondValue).addXValue(thirdValue);
		params.addNameObject(comparisonOperator).addBoolean(isVisibility);
		this.addTrace(oFF.QCmdSignature.ADD_FILTER_BY_FIELD, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addFilterByField(field, firstValue, secondValue, thirdValue, comparisonOperator, isVisibility);
	}
	return result;
};
oFF.QCmdSpace.prototype.addFilterByFieldAndValue = function(field, filterValue, comparisonOperator)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(field).addXValue(filterValue).addNameObject(comparisonOperator);
		this.addTrace(oFF.QCmdSignature.ADD_FILTER_BY_FIELD_AND_VALUE, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addFilterByFieldAndValue(field, filterValue, comparisonOperator);
	}
	return result;
};
oFF.QCmdSpace.prototype.addIntFilterByField = function(field, filterValue, comparisonOperator)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(field).addInteger(filterValue).addNameObject(comparisonOperator);
		this.addTrace(oFF.QCmdSignature.ADD_INT_FILTER_BY_FIELD, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addIntFilterByField(field, filterValue, comparisonOperator);
	}
	return result;
};
oFF.QCmdSpace.prototype.addIntFilterByFieldName = function(dimName, fieldName, filterValue, comparisonOperator)
{
	let theDimName = this.checkAndReplace(dimName);
	let theFieldName = this.checkAndReplace(fieldName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName).addString(theFieldName).addInteger(filterValue).addNameObject(comparisonOperator);
		this.addTrace(oFF.QCmdSignature.ADD_INT_FILTER_BY_FIELD_NAME, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addIntFilterByFieldName(theDimName, theFieldName, filterValue, comparisonOperator);
	}
	return result;
};
oFF.QCmdSpace.prototype.addIntersectsGeometryFilter = function(dimension, fieldName, geometry)
{
	let theFieldName = this.checkAndReplace(fieldName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(dimension).addString(theFieldName).addXValue(geometry);
		this.addTrace(oFF.QCmdSignature.ADD_INTERSECTS_GEOMETRY_FILTER, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addIntersectsGeometryFilter(dimension, theFieldName, geometry);
	}
	return result;
};
oFF.QCmdSpace.prototype.addIntersectsRectFilter = function(dimension, fieldName, lowerLeft, upperRight)
{
	let theFieldName = this.checkAndReplace(fieldName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(dimension).addString(theFieldName).addXValue(lowerLeft).addXValue(upperRight);
		this.addTrace(oFF.QCmdSignature.ADD_INTERSECTS_RECT_FILTER, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addIntersectsRectFilter(dimension, theFieldName, lowerLeft, upperRight);
	}
	return result;
};
oFF.QCmdSpace.prototype.addIntervalFilterByValues = function(dimName, lowValue, highValue)
{
	let theDimName = this.checkAndReplace(dimName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName).addXValue(lowValue).addXValue(highValue);
		this.addTrace(oFF.QCmdSignature.ADD_INTERVAL_FILTER_BY_VALUES, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addIntervalFilterByValues(theDimName, lowValue, highValue);
	}
	return result;
};
oFF.QCmdSpace.prototype.addLongFilterByField = function(field, filterValue, comparisonOperator)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(field).addLong(filterValue).addNameObject(comparisonOperator);
		this.addTrace(oFF.QCmdSignature.ADD_LONG_FILTER_BY_FIELD, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addLongFilterByField(field, filterValue, comparisonOperator);
	}
	return result;
};
oFF.QCmdSpace.prototype.addLongFilterByFieldName = function(dimName, fieldName, filterValue, comparisonOperator)
{
	let theDimName = this.checkAndReplace(dimName);
	let theFieldName = this.checkAndReplace(fieldName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName).addString(theFieldName).addLong(filterValue).addNameObject(comparisonOperator);
		this.addTrace(oFF.QCmdSignature.ADD_LONG_FILTER_BY_FIELD_NAME, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addLongFilterByFieldName(theDimName, theFieldName, filterValue, comparisonOperator);
	}
	return result;
};
oFF.QCmdSpace.prototype.addMeasure = function(measureName)
{
	let theMeasureName = this.checkAndReplace(measureName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theMeasureName);
		this.addTrace(oFF.QCmdSignature.ADD_MEASURE, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addMeasure(theMeasureName);
	}
	return result;
};
oFF.QCmdSpace.prototype.addNewRestrictedMeasure = function(dimType, measureName, text, memberName, targetDim, targetMember)
{
	let theMeasureName = this.checkAndReplace(measureName);
	let theMemberName = this.checkAndReplace(memberName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(dimType).addString(theMeasureName).addString(text);
		params.addString(theMemberName).addString(targetDim).addString(targetMember);
		this.addTrace(oFF.QCmdSignature.ADD_NEW_RESTRICTED_MEASURE, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).addNewRestrictedMeasure(dimType, theMeasureName, text, theMemberName, targetDim, targetMember);
	}
	return this;
};
oFF.QCmdSpace.prototype.addNewRestrictedMeasureOnNode = function(dimType, measureName, text, memberName, targetDim, targetHierarchyName, targetNode)
{
	let theMeasureName = this.checkAndReplace(measureName);
	let theMemberName = this.checkAndReplace(memberName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(dimType).addString(theMeasureName).addString(text);
		params.addString(theMemberName).addString(targetDim).addString(targetHierarchyName).addString(targetNode);
		this.addTrace(oFF.QCmdSignature.ADD_NEW_RESTRICTED_MEASURE_ON_NODE, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).addNewRestrictedMeasureOnNode(dimType, theMeasureName, text, theMemberName, targetDim, targetHierarchyName, targetNode);
	}
	return this;
};
oFF.QCmdSpace.prototype.addOverlapsGeometryFilter = function(dimension, fieldName, geometry)
{
	let theFieldName = this.checkAndReplace(fieldName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(dimension).addString(theFieldName).addXValue(geometry);
		this.addTrace(oFF.QCmdSignature.ADD_OVERLAPS_GEOMETRY_FILTER, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addOverlapsGeometryFilter(dimension, theFieldName, geometry);
	}
	return result;
};
oFF.QCmdSpace.prototype.addSingleMemberFilter = function(filterLayer, dimType, dimName, memberName, comparisonOperator)
{
	let theDimName = this.checkAndReplace(dimName);
	let theMemberName = this.checkAndReplace(memberName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(filterLayer).addNameObject(dimType).addString(theDimName);
		params.addString(theMemberName).addNameObject(comparisonOperator);
		this.addTrace(oFF.QCmdSignature.ADD_SINGLE_MEMBER_FILTER, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addSingleMemberFilter(filterLayer, dimType, theDimName, theMemberName, comparisonOperator);
	}
	return result;
};
oFF.QCmdSpace.prototype.addStringFilterByField = function(field, filterValue, comparisonOperator)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(field).addString(filterValue).addNameObject(comparisonOperator);
		this.addTrace(oFF.QCmdSignature.ADD_STRING_FILTER_BY_FIELD, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addStringFilterByField(field, filterValue, comparisonOperator);
	}
	return result;
};
oFF.QCmdSpace.prototype.addStringFilterByFieldNameAndOperator = function(dimName, fieldName, filterValue, comparisonOperator)
{
	let theDimName = this.checkAndReplace(dimName);
	let theFieldName = this.checkAndReplace(fieldName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName).addString(theFieldName).addString(filterValue).addNameObject(comparisonOperator);
		this.addTrace(oFF.QCmdSignature.ADD_STRING_FILTER_BY_FIELD_NAME_AND_OPERATOR, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addStringFilterByFieldNameAndOperator(theDimName, theFieldName, filterValue, comparisonOperator);
	}
	return result;
};
oFF.QCmdSpace.prototype.addStringFilterByName = function(dimName, fieldName, filterValue, comparisonOperator)
{
	let theDimName = this.checkAndReplace(dimName);
	let theFieldName = this.checkAndReplace(fieldName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName).addString(theFieldName).addString(filterValue).addNameObject(comparisonOperator);
		this.addTrace(oFF.QCmdSignature.ADD_STRING_FILTER_BY_NAME, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addStringFilterByName(theDimName, theFieldName, filterValue, comparisonOperator);
	}
	return result;
};
oFF.QCmdSpace.prototype.addStringFilterByPresentation = function(dimName, presentationType, filterValue, comparisonOperator)
{
	let theDimName = this.checkAndReplace(dimName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName).addNameObject(presentationType).addString(filterValue).addNameObject(comparisonOperator);
		this.addTrace(oFF.QCmdSignature.ADD_STRING_FILTER_BY_PRESENTATION, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addStringFilterByPresentation(theDimName, presentationType, filterValue, comparisonOperator);
	}
	return result;
};
oFF.QCmdSpace.prototype.addTouchesGeometryFilter = function(dimension, fieldName, geometry)
{
	let theFieldName = this.checkAndReplace(fieldName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(dimension).addString(theFieldName).addXValue(geometry);
		this.addTrace(oFF.QCmdSignature.ADD_TOUCHES_GEOMETRY_FILTER, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addTouchesGeometryFilter(dimension, theFieldName, geometry);
	}
	return result;
};
oFF.QCmdSpace.prototype.addTrace = function(name, parameter)
{
	if (this.getOlapEnv().isTracing())
	{
		let cmdStructure = oFF.PrFactory.createStructure();
		cmdStructure.putString(oFF.QCmdSpace.TRACE_COMMAND, name);
		if (oFF.notNull(parameter) && parameter.hasElements())
		{
			let parameterList = cmdStructure.putNewList(oFF.QCmdSpace.TRACE_PARAMETERS);
			let signature = oFF.QCmdSignature.lookupSignature(name);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(signature))
			{
				let signatureList = oFF.PrFactory.createList();
				signatureList.addAllStrings(oFF.XStringTokenizer.splitString(signature, ","));
				cmdStructure.put(oFF.QCmdSpace.TRACE_SIGNATURE, signatureList);
			}
			let len = parameter.size();
			for (let j = 0; j < len; j++)
			{
				parameterList.addString(parameter.get(j));
			}
		}
		this.getOlapEnv().addTraceEntry(cmdStructure);
	}
	if (this.hasCallInterceptor())
	{
		this.interceptCall(name, parameter);
	}
};
oFF.QCmdSpace.prototype.addWithinDistanceFilter = function(dimension, fieldName, point, distance, unit)
{
	let theFieldName = this.checkAndReplace(fieldName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(dimension).addString(theFieldName).addXValue(point).addDouble(distance).addString(unit);
		this.addTrace(oFF.QCmdSignature.ADD_WITHIN_DISTANCE_FILTER, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addWithinDistanceFilter(dimension, theFieldName, point, distance, unit);
	}
	return result;
};
oFF.QCmdSpace.prototype.addWithinGeometryFilter = function(dimension, fieldName, geometry)
{
	let theFieldName = this.checkAndReplace(fieldName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(dimension).addString(theFieldName).addXValue(geometry);
		this.addTrace(oFF.QCmdSignature.ADD_WITHIN_GEOMETRY_FILTER, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).addWithinGeometryFilter(dimension, theFieldName, geometry);
	}
	return result;
};
oFF.QCmdSpace.prototype.alignTotals = function(modelLevel, name, alignment)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(modelLevel).addString(name).addNameObject(alignment);
		this.addTrace(oFF.QCmdSignature.ALIGN_TOTALS, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).alignTotals(modelLevel, name, alignment);
	}
	return this;
};
oFF.QCmdSpace.prototype.alignTotalsWithPriority = function(modelLevel, name, alignment, priority)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(modelLevel).addString(name).addNameObject(alignment).addInteger(priority);
		this.addTrace(oFF.QCmdSignature.ALIGN_TOTALS_WITH_PRIORITY, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).alignTotalsWithPriority(modelLevel, name, alignment, priority);
	}
	return this;
};
oFF.QCmdSpace.prototype.applyCustomSort = function(dimension, field, customOrder, sortDirection, customSortPosition, createNewSortOperation)
{
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).applyCustomSort(dimension, field, customOrder, sortDirection, customSortPosition, createNewSortOperation);
	}
	return result;
};
oFF.QCmdSpace.prototype.applyRankings = function(rankSettings)
{
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).applyRankings(rankSettings);
	}
};
oFF.QCmdSpace.prototype.applyRankingsWithoutReset = function(rankSettings)
{
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).applyRankingsWithoutReset(rankSettings);
	}
};
oFF.QCmdSpace.prototype.assignHierarchy = function(dimensionName, hierarchyName)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(dimensionName).addString(hierarchyName);
		this.addTrace(oFF.QCmdSignature.ASSIGN_HIERARCHY, params);
	}
	for (let i = 0; i < this.sizeElements(); i++)
	{
		this.setActive(i).assignHierarchy(dimensionName, hierarchyName);
	}
	return this;
};
oFF.QCmdSpace.prototype.buildRank = function(maxRows, measureName, secondaryMeasure, applyToDimensions, indicateTopBottom, versionElementId, versionDimension)
{
	let theMeasureName = this.checkAndReplace(measureName);
	let size = this.sizeElements();
	let condition = null;
	for (let i = 0; i < size; i++)
	{
		condition = this.setActive(i).buildRank(maxRows, theMeasureName, secondaryMeasure, applyToDimensions, indicateTopBottom, versionElementId, versionDimension);
	}
	return condition;
};
oFF.QCmdSpace.prototype.buildRankExt = function(maxRows, measureName, secondaryMeasure, applyToDimensions, indicateTopBottom, versionElementId, versionDimension, boltCompatibilityMode, defaultEvaluationType)
{
	let theMeasureName = this.checkAndReplace(measureName);
	let size = this.sizeElements();
	let condition = null;
	for (let i = 0; i < size; i++)
	{
		condition = this.setActive(i).buildRankExt(maxRows, theMeasureName, secondaryMeasure, applyToDimensions, indicateTopBottom, versionElementId, versionDimension, boltCompatibilityMode, defaultEvaluationType);
	}
	return condition;
};
oFF.QCmdSpace.prototype.clearAllFieldsFromModelArea = function(contextType)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(contextType);
		this.addTrace(oFF.QCmdSignature.CLEAR_ALL_FIELDS_FROM_MODEL_AREA, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).clearAllFieldsFromModelArea(contextType);
	}
	return this;
};
oFF.QCmdSpace.prototype.clearAllFiltersExt = function(filterLayer, filterScopeVariables)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(filterLayer).addNameObject(filterScopeVariables);
		this.addTrace(oFF.QCmdSignature.CLEAR_ALL_FILTERS_EXT, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).clearAllFiltersExt(filterLayer, filterScopeVariables);
	}
	return this;
};
oFF.QCmdSpace.prototype.clearAllUniqueAxisProperties = function()
{
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).clearAllUniqueAxisProperties();
	}
	return this;
};
oFF.QCmdSpace.prototype.clearAttributeFields = function(dimType, dimName, attributeName, contextType)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(dimType).addString(theDimName).addString(theAttributeName).addNameObject(contextType);
		this.addTrace(oFF.QCmdSignature.CLEAR_ATTRIBUTE_FIELDS, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).clearAttributeFields(dimType, theDimName, attributeName, contextType);
	}
	return this;
};
oFF.QCmdSpace.prototype.clearAttributes = function(dimType, dimName, contextType)
{
	let theDimName = this.checkAndReplace(dimName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(dimType).addString(theDimName).addNameObject(contextType);
		this.addTrace(oFF.QCmdSignature.CLEAR_ATTRIBUTES, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).clearAttributes(dimType, theDimName, contextType);
	}
	return this;
};
oFF.QCmdSpace.prototype.clearAxis = function(targetAxis)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(targetAxis);
		this.addTrace(oFF.QCmdSignature.CLEAR_AXIS, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).clearAxis(targetAxis);
	}
	return this;
};
oFF.QCmdSpace.prototype.clearFields = function(dimType, dimName, contextType)
{
	let theDimName = this.checkAndReplace(dimName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(dimType).addString(theDimName).addNameObject(contextType);
		this.addTrace(oFF.QCmdSignature.CLEAR_FIELDS, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).clearFields(dimType, theDimName, contextType);
	}
	return this;
};
oFF.QCmdSpace.prototype.clearFilterByIdExt = function(filterLayer, uniqueId)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(filterLayer).addString(uniqueId);
		this.addTrace(oFF.QCmdSignature.CLEAR_FILTER_BY_ID_EXT, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).clearFilterByIdExt(filterLayer, uniqueId);
	}
	return this;
};
oFF.QCmdSpace.prototype.clearFiltersByDimensionExt = function(filterLayer, dimType, dimName)
{
	let theDimName = this.checkAndReplace(dimName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(filterLayer).addNameObject(dimType).addString(theDimName);
		this.addTrace(oFF.QCmdSignature.CLEAR_FILTERS_BY_DIMENSION_EXT, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).clearFiltersByDimensionExt(filterLayer, dimType, theDimName);
	}
	return this;
};
oFF.QCmdSpace.prototype.clearNonMainFieldsFromResultSet = function(dimType, dimName)
{
	let theDimName = this.checkAndReplace(dimName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(dimType).addString(theDimName);
		this.addTrace(oFF.QCmdSignature.CLEAR_NON_MAIN_FIELDS_FROM_RESULTSET, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).clearNonMainFieldsFromResultSet(dimType, theDimName);
	}
	return this;
};
oFF.QCmdSpace.prototype.clearNonMeasureFilters = function()
{
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).clearNonMeasureFilters();
	}
	return this;
};
oFF.QCmdSpace.prototype.clearNonStructureFilters = function()
{
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).clearNonStructureFilters();
	}
	return this;
};
oFF.QCmdSpace.prototype.clearRank = function(conditionName)
{
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).clearRank(conditionName);
	}
	return this;
};
oFF.QCmdSpace.prototype.clearSingleMemberFilterByName = function(dimName, memberName, comparisonOperator)
{
	let theDimName = this.checkAndReplace(dimName);
	let theMemberName = this.checkAndReplace(memberName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName).addString(theMemberName).addNameObject(comparisonOperator);
		this.addTrace(oFF.QCmdSignature.CLEAR_SINGLE_MEMBER_FILTER_BY_NAME, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).clearSingleMemberFilterByName(theDimName, theMemberName, comparisonOperator);
	}
	return this;
};
oFF.QCmdSpace.prototype.clearSort = function(sortType, name)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(sortType).addString(name);
		this.addTrace(oFF.QCmdSignature.CLEAR_SORT, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).clearSort(sortType, this.checkAndReplace(name));
	}
	return this;
};
oFF.QCmdSpace.prototype.clearUniqueAxisPropertiesForAxis = function(axisType)
{
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).clearUniqueAxisPropertiesForAxis(axisType);
	}
	return this;
};
oFF.QCmdSpace.prototype.containsField = function(dimName, fieldName, contextType)
{
	let theDimName = this.checkAndReplace(dimName);
	let theFieldName = this.checkAndReplace(fieldName);
	return this.setActive(0).containsField(theDimName, theFieldName, contextType);
};
oFF.QCmdSpace.prototype.containsResultSetFieldByType = function(dimName, presentationType)
{
	let theDimName = this.checkAndReplace(dimName);
	return this.setActive(0).containsResultSetFieldByType(theDimName, presentationType);
};
oFF.QCmdSpace.prototype.containsSelectorFieldByType = function(dimName, presentationType)
{
	let theDimName = this.checkAndReplace(dimName);
	return this.setActive(0).containsSelectorFieldByType(theDimName, presentationType);
};
oFF.QCmdSpace.prototype.createResetConfiguration = function()
{
	return oFF.CmdResetConfiguration.create();
};
oFF.QCmdSpace.prototype.deactivateAllServerConditions = function()
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create();
		this.addTrace(oFF.QCmdSignature.DEACTIVATE_ALL_SERVER_CONDITIONS, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).deactivateAllServerConditions();
	}
	return this;
};
oFF.QCmdSpace.prototype.deactivateAllServerExceptions = function()
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create();
		this.addTrace(oFF.QCmdSignature.DEACTIVATE_ALL_SERVER_EXCEPTIONS, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).deactivateAllServerExceptions();
	}
	return this;
};
oFF.QCmdSpace.prototype.deactivateHierarchy = function(dimensionName)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(dimensionName);
		this.addTrace(oFF.QCmdSignature.DEACTIVATE_HIERARCHY, params);
	}
	for (let i = 0; i < this.sizeElements(); i++)
	{
		this.setActive(i).deactivateHierarchy(dimensionName);
	}
	return this;
};
oFF.QCmdSpace.prototype.drillNode = function(dimName, nodeName, drillState)
{
	let theDimName = this.checkAndReplace(dimName);
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).drillNode(theDimName, nodeName, drillState);
	}
	return this;
};
oFF.QCmdSpace.prototype.getAbstractRendering = function(type, protocol)
{
	return this.setActive(0).getAbstractRendering(type, protocol);
};
oFF.QCmdSpace.prototype.getAccountDimensionMemberAliasByName = function(queryModel, memberName)
{
	let theMemberName = this.checkAndReplace(memberName);
	return this.setActive(0).getAccountDimensionMemberAliasByName(queryModel, theMemberName);
};
oFF.QCmdSpace.prototype.getAccountDimensionMemberNameByAlias = function(queryModel, aliasName)
{
	return this.setActive(0).getAccountDimensionMemberNameByAlias(queryModel, aliasName);
};
oFF.QCmdSpace.prototype.getAllRanks = function()
{
	return this.setActive(0).getAllRanks();
};
oFF.QCmdSpace.prototype.getApplication = function()
{
	return this.m_olapEnv.getApplication();
};
oFF.QCmdSpace.prototype.getAsciiResultSet = function(maxRowCount, maxColumnCount)
{
	return this.setActive(0).getAsciiResultSet(maxRowCount, maxColumnCount);
};
oFF.QCmdSpace.prototype.getAssignedHierarchy = function(dimensionName)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(dimensionName);
		this.addTrace(oFF.QCmdSignature.GET_ASSIGNED_HIERARCHY, params);
	}
	return this.setActive(0).getAssignedHierarchy(dimensionName);
};
oFF.QCmdSpace.prototype.getAvailableFieldContainerDisplays = function(dimName, attributeName)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	return this.setActive(0).getAvailableFieldContainerDisplays(theDimName, theAttributeName);
};
oFF.QCmdSpace.prototype.getAvailableFieldContainerKeyDisplays = function(dimName, attributeName)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	return this.setActive(0).getAvailableFieldContainerKeyDisplays(theDimName, theAttributeName);
};
oFF.QCmdSpace.prototype.getAvailableFieldContainerKeyViews = function(dimName, attributeName)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	return this.setActive(0).getAvailableFieldContainerKeyViews(theDimName, theAttributeName);
};
oFF.QCmdSpace.prototype.getAvailableFieldContainerTextViews = function(dimName, attributeName)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	return this.setActive(0).getAvailableFieldContainerTextViews(theDimName, theAttributeName);
};
oFF.QCmdSpace.prototype.getCalculatedDimensionsInUse = function()
{
	let usedDimensions = oFF.XHashSetOfString.create();
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		usedDimensions.addAll(this.setActive(i).getCalculatedDimensionsInUse());
	}
	return usedDimensions;
};
oFF.QCmdSpace.prototype.getCellContextManager = function()
{
	return this.setActive(0).getCellContextManager();
};
oFF.QCmdSpace.prototype.getComponentType = function()
{
	return this.getOlapComponentType();
};
oFF.QCmdSpace.prototype.getCsvResultSet = function(maxRowCount, maxColumnCount)
{
	return this.setActive(0).getCsvResultSet(maxRowCount, maxColumnCount);
};
oFF.QCmdSpace.prototype.getDataCellByDrillPath = function(columnDrillPath, rowDrillPath)
{
	let dataCell = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		dataCell = this.setActive(i).getDataCellByDrillPath(columnDrillPath, rowDrillPath);
	}
	return dataCell;
};
oFF.QCmdSpace.prototype.getDataSource = function()
{
	return this.setActive(0).getDataSource();
};
oFF.QCmdSpace.prototype.getDataSourceOrigin = function()
{
	return this.getDataSource();
};
oFF.QCmdSpace.prototype.getDataSourceTarget = function()
{
	return this.getDataSource();
};
oFF.QCmdSpace.prototype.getDefaultTopRankEvaluationDimensions = function(leadingStructure)
{
	return this.setActive(0).getDefaultTopRankEvaluationDimensions(leadingStructure);
};
oFF.QCmdSpace.prototype.getDimension = function(dimName)
{
	let theDimName = this.checkAndReplace(dimName);
	return this.setActive(0).getDimension(theDimName);
};
oFF.QCmdSpace.prototype.getDimensionAccessor = function()
{
	return this.setActive(0).getDimensionAccessor();
};
oFF.QCmdSpace.prototype.getDimensionsContainingValueType = function(valueType)
{
	return this.setActive(0).getDimensionsContainingValueType(valueType);
};
oFF.QCmdSpace.prototype.getDrillManager = function()
{
	return this.setActive(0).getDrillManager();
};
oFF.QCmdSpace.prototype.getExecuteRequestOnOldResultSet = function()
{
	return this.setActive(0).getExecuteRequestOnOldResultSet();
};
oFF.QCmdSpace.prototype.getField = function(fieldName)
{
	let theFieldName = this.checkAndReplace(fieldName);
	return this.setActive(0).getField(theFieldName);
};
oFF.QCmdSpace.prototype.getFieldAccessorSingle = function()
{
	return this.setActive(0).getFieldAccessorSingle();
};
oFF.QCmdSpace.prototype.getFieldContainerDefaultKeyDisplay = function(dimName, attributeName)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	return this.setActive(0).getFieldContainerDefaultKeyDisplay(theDimName, theAttributeName);
};
oFF.QCmdSpace.prototype.getFieldContainerDefaultKeyView = function(dimName, attributeName)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	return this.setActive(0).getFieldContainerDefaultKeyView(theDimName, theAttributeName);
};
oFF.QCmdSpace.prototype.getFieldContainerDefaultTextView = function(dimName, attributeName)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	return this.setActive(0).getFieldContainerDefaultTextView(theDimName, theAttributeName);
};
oFF.QCmdSpace.prototype.getFieldContainerDisplay = function(dimName, attributeName)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	return this.setActive(0).getFieldContainerDisplay(theDimName, theAttributeName);
};
oFF.QCmdSpace.prototype.getFieldContainerKeyDisplay = function(dimName, attributeName)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	return this.setActive(0).getFieldContainerKeyDisplay(theDimName, theAttributeName);
};
oFF.QCmdSpace.prototype.getFieldContainerKeyView = function(dimName, attributeName)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	return this.setActive(0).getFieldContainerKeyView(theDimName, theAttributeName);
};
oFF.QCmdSpace.prototype.getFieldContainerTextView = function(dimName, attributeName)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	return this.setActive(0).getFieldContainerTextView(theDimName, theAttributeName);
};
oFF.QCmdSpace.prototype.getFilterById = function(uniqueId)
{
	return this.setActive(0).getFilterById(uniqueId);
};
oFF.QCmdSpace.prototype.getFirstGISDimension = function()
{
	return this.setActive(0).getFirstGISDimension();
};
oFF.QCmdSpace.prototype.getGISAttributesForDimension = function(dimension)
{
	return this.setActive(0).getGISAttributesForDimension(dimension);
};
oFF.QCmdSpace.prototype.getKeyRefStorage = function()
{
	if (!this.isReleased())
	{
		return this.setActive(0).getKeyRefStorage();
	}
	return null;
};
oFF.QCmdSpace.prototype.getMaxColumns = function()
{
	return this.setActive(0).getMaxColumns();
};
oFF.QCmdSpace.prototype.getMaxNumberOfDimensionsForExceptionAggregation = function(memberType, aggrType)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(memberType).addNameObject(aggrType);
		this.addTrace(oFF.QCmdSignature.GET_MAX_NUMBER_OF_DIMENSIONS_FOR_EXCEPTION_AGGREGATION, params);
	}
	let result = 0;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).getMaxNumberOfDimensionsForExceptionAggregation(memberType, aggrType);
	}
	return result;
};
oFF.QCmdSpace.prototype.getMaxResultRecords = function()
{
	return this.setActive(0).getMaxResultRecords();
};
oFF.QCmdSpace.prototype.getMaxRows = function()
{
	return this.setActive(0).getMaxRows();
};
oFF.QCmdSpace.prototype.getMeasure = function(measureName)
{
	let theMeasureName = this.checkAndReplace(measureName);
	return this.setActive(0).getMeasure(theMeasureName);
};
oFF.QCmdSpace.prototype.getMeasureMemberAliasByName = function(queryModel, memberName)
{
	let theMemberName = this.checkAndReplace(memberName);
	return this.setActive(0).getMeasureMemberAliasByName(queryModel, theMemberName);
};
oFF.QCmdSpace.prototype.getMeasureMemberNameByAlias = function(queryModel, aliasName)
{
	return this.setActive(0).getMeasureMemberNameByAlias(queryModel, aliasName);
};
oFF.QCmdSpace.prototype.getMemberVisibilityByFilter = function(dimension)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create();
		this.addTrace(oFF.QCmdSignature.DEACTIVATE_ALL_SERVER_EXCEPTIONS, params);
	}
	let getVisibleByFilter = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		getVisibleByFilter = this.setActive(i).getMemberVisibilityByFilter(dimension);
	}
	return getVisibleByFilter;
};
oFF.QCmdSpace.prototype.getMembersInResultSetOrder = function(dimension)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create();
		this.addTrace(oFF.QCmdSignature.DEACTIVATE_ALL_SERVER_EXCEPTIONS, params);
	}
	let memberInOrder = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		memberInOrder = this.setActive(i).getMembersInResultSetOrder(dimension);
	}
	return memberInOrder;
};
oFF.QCmdSpace.prototype.getModelCapabilities = function()
{
	return this.setActive(0).getModelCapabilities();
};
oFF.QCmdSpace.prototype.getName = function()
{
	return null;
};
oFF.QCmdSpace.prototype.getOffsetColumns = function()
{
	return this.setActive(0).getOffsetColumns();
};
oFF.QCmdSpace.prototype.getOffsetRows = function()
{
	return this.setActive(0).getOffsetRows();
};
oFF.QCmdSpace.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.CONVENIENCE_CMDS;
};
oFF.QCmdSpace.prototype.getOlapEnv = function()
{
	return this.m_olapEnv;
};
oFF.QCmdSpace.prototype.getProcess = function()
{
	return this.m_olapEnv.getProcess();
};
oFF.QCmdSpace.prototype.getQueryManager = function()
{
	return this.setActive(0).getQueryManager();
};
oFF.QCmdSpace.prototype.getQueryModel = function()
{
	return this.setActive(0).getQueryModel();
};
oFF.QCmdSpace.prototype.getQueryServiceConfig = function()
{
	return this.setActive(0).getQueryServiceConfig();
};
oFF.QCmdSpace.prototype.getRank = function(conditionName)
{
	return this.setActive(0).getRank(conditionName);
};
oFF.QCmdSpace.prototype.getReferenceGrid = function(withDetails)
{
	return this.setActive(0).getReferenceGrid(withDetails);
};
oFF.QCmdSpace.prototype.getResultSetPersistenceIdentifier = function()
{
	return this.setActive(0).getResultSetPersistenceIdentifier();
};
oFF.QCmdSpace.prototype.getResultSetPersistenceSchema = function()
{
	return this.setActive(0).getResultSetPersistenceSchema();
};
oFF.QCmdSpace.prototype.getResultSetPersistenceTable = function()
{
	return this.setActive(0).getResultSetPersistenceTable();
};
oFF.QCmdSpace.prototype.getResultSetPersistenceType = function()
{
	return this.setActive(0).getResultSetPersistenceType();
};
oFF.QCmdSpace.prototype.getRuntimeMemberNameByAlias = function(queryModel, aliasName)
{
	return this.setActive(0).getRuntimeMemberNameByAlias(queryModel, aliasName);
};
oFF.QCmdSpace.prototype.getSession = function()
{
	return this.m_olapEnv.getSession();
};
oFF.QCmdSpace.prototype.getSingleMemberFilter = function(filterLayer, dimType, dimName)
{
	return this.setActive(0).getSingleMemberFilter(filterLayer, dimType, dimName);
};
oFF.QCmdSpace.prototype.getStorageGroupName = function()
{
	return null;
};
oFF.QCmdSpace.prototype.getStorageName = function()
{
	return null;
};
oFF.QCmdSpace.prototype.getStorageObjectName = function()
{
	return null;
};
oFF.QCmdSpace.prototype.getSupportedDimensionsForExceptionAggregation = function(memberType, aggrType)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(memberType).addNameObject(aggrType);
		this.addTrace(oFF.QCmdSignature.GET_SUPPORTED_DIMENSIONS_FOR_EXCEPTION_AGGREGATION, params);
	}
	let result = oFF.XList.create();
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).getSupportedDimensionsForExceptionAggregation(memberType, aggrType);
	}
	return result;
};
oFF.QCmdSpace.prototype.getSupportedExceptionAggregationTypes = function(memberType)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(memberType);
		this.addTrace(oFF.QCmdSignature.GET_SUPPORTED_EXCEPTION_AGGREGATION_TYPES, params);
	}
	let result = oFF.XList.create();
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).getSupportedExceptionAggregationTypes(memberType);
	}
	return result;
};
oFF.QCmdSpace.prototype.getTagging = function()
{
	return null;
};
oFF.QCmdSpace.prototype.getUniqueResultAlignment = function(modelLevel, name)
{
	return this.setActive(0).getUniqueResultAlignment(modelLevel, name);
};
oFF.QCmdSpace.prototype.getUniqueResultVisibilityByElementAndAlignment = function(resultAlignment, resultStructureElement, modelLevel, name)
{
	return this.setActive(0).getUniqueResultVisibilityByElementAndAlignment(resultAlignment, resultStructureElement, modelLevel, name);
};
oFF.QCmdSpace.prototype.getVariable = function(varName)
{
	return this.setActive(0).getVariable(varName);
};
oFF.QCmdSpace.prototype.getVariableContainer = function()
{
	return this.setActive(0).getVariableContainer();
};
oFF.QCmdSpace.prototype.getVariablesNameAndText = function()
{
	return this.setActive(0).getVariablesNameAndText();
};
oFF.QCmdSpace.prototype.getVisibilityFilterById = function(uniqueId)
{
	return this.setActive(0).getVisibilityFilterById(uniqueId);
};
oFF.QCmdSpace.prototype.getVisibleMembers = function(dimension, memberHierarchy)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create();
		this.addTrace(oFF.QCmdSignature.DEACTIVATE_ALL_SERVER_EXCEPTIONS, params);
	}
	let visibleMembers = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		visibleMembers = this.setActive(i).getVisibleMembers(dimension, memberHierarchy);
	}
	return visibleMembers;
};
oFF.QCmdSpace.prototype.getVisibleMembersInResultSetOrder = function(dim)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create();
		this.addTrace(oFF.QCmdSignature.DEACTIVATE_ALL_SERVER_EXCEPTIONS, params);
	}
	let visibleMembersInOrder = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		visibleMembersInOrder = this.setActive(i).getVisibleMembersInResultSetOrder(dim);
	}
	return visibleMembersInOrder;
};
oFF.QCmdSpace.prototype.hasMoreColumnRecordsAvailable = function()
{
	return this.setActive(0).hasMoreColumnRecordsAvailable();
};
oFF.QCmdSpace.prototype.hasMoreRowRecordsAvailable = function()
{
	return this.setActive(0).hasMoreRowRecordsAvailable();
};
oFF.QCmdSpace.prototype.hasUniqueAxisProperties = function(axisType, uniqueAxisProperty)
{
	return this.setActive(0).hasUniqueAxisProperties(axisType, uniqueAxisProperty);
};
oFF.QCmdSpace.prototype.insertAttributeField = function(dimType, dimName, attributeName, presentationType, fieldName, contextType, index)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	let theFieldName = this.checkAndReplace(fieldName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(dimType).addString(theDimName).addString(theAttributeName).addNameObject(presentationType).addString(theFieldName).addNameObject(contextType).addInteger(index);
		this.addTrace(oFF.QCmdSignature.INSERT_ATTRIBUTE_FIELD, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).insertAttributeField(dimType, theDimName, theAttributeName, presentationType, theFieldName, contextType, index);
	}
	return result;
};
oFF.QCmdSpace.prototype.insertAttributeToResultSet = function(dimName, attributeName, index)
{
	let theDimName = this.checkAndReplace(dimName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName).addString(attributeName).addInteger(index);
		this.addTrace(oFF.QCmdSignature.INSERT_ATTRIBUTE_TO_RESULT_SET, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).insertAttributeToResultSet(theDimName, attributeName, index);
	}
	return result;
};
oFF.QCmdSpace.prototype.insertField = function(dimType, dimName, presentationType, fieldName, contextType, index)
{
	let theDimName = this.checkAndReplace(dimName);
	let theFieldName = this.checkAndReplace(fieldName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(dimType).addString(theDimName).addNameObject(presentationType).addString(theFieldName).addNameObject(contextType).addInteger(index);
		this.addTrace(oFF.QCmdSignature.INSERT_FIELD, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).insertField(dimType, theDimName, presentationType, theFieldName, contextType, index);
	}
	return result;
};
oFF.QCmdSpace.prototype.isAbapMds = function()
{
	return this.setActive(0).isAbapMds();
};
oFF.QCmdSpace.prototype.isBpce = function()
{
	return this.setActive(0).isBpce();
};
oFF.QCmdSpace.prototype.isBpcs = function()
{
	return this.setActive(0).isBpcs();
};
oFF.QCmdSpace.prototype.isBw = function()
{
	return this.setActive(0).isBw();
};
oFF.QCmdSpace.prototype.isDimensionOnRowsOrColumns = function(dimName)
{
	return this.setActive(0).isDimensionOnRowsOrColumns(dimName);
};
oFF.QCmdSpace.prototype.isDimensionSupportingRowsOrColumns = function(dimName)
{
	return this.setActive(0).isDimensionSupportingRowsOrColumns(dimName);
};
oFF.QCmdSpace.prototype.isEventingStopped = function()
{
	return this.setActive(0).isEventingStopped();
};
oFF.QCmdSpace.prototype.isFieldContainerKeyViewActive = function(dimName, attributeName)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	return this.setActive(0).isFieldContainerKeyViewActive(theDimName, theAttributeName);
};
oFF.QCmdSpace.prototype.isFieldContainerKeyViewDefault = function(dimName, attributeName)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	return this.setActive(0).isFieldContainerKeyViewDefault(theDimName, theAttributeName);
};
oFF.QCmdSpace.prototype.isFieldContainerKeyViewSupported = function(dimName, attributeName)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	return this.setActive(0).isFieldContainerKeyViewSupported(theDimName, theAttributeName);
};
oFF.QCmdSpace.prototype.isFieldContainerTextViewActive = function(dimName, attributeName)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	return this.setActive(0).isFieldContainerTextViewActive(theDimName, theAttributeName);
};
oFF.QCmdSpace.prototype.isFieldContainerTextViewDefault = function(dimName, attributeName)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	return this.setActive(0).isFieldContainerTextViewDefault(theDimName, theAttributeName);
};
oFF.QCmdSpace.prototype.isFieldContainerTextViewSupported = function(dimName, attributeName)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	return this.setActive(0).isFieldContainerTextViewSupported(theDimName, theAttributeName);
};
oFF.QCmdSpace.prototype.isHana = function()
{
	return this.setActive(0).isHana();
};
oFF.QCmdSpace.prototype.isHierarchyActive = function(dimensionName)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(dimensionName);
		this.addTrace(oFF.QCmdSignature.IS_HIERARCHY_ACTIVE, params);
	}
	return this.setActive(0).isHierarchyActive(dimensionName);
};
oFF.QCmdSpace.prototype.isHierarchyAssigned = function(dimensionName)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(dimensionName);
		this.addTrace(oFF.QCmdSignature.IS_HIERARCHY_ASSIGNED, params);
	}
	return this.setActive(0).isHierarchyAssigned(dimensionName);
};
oFF.QCmdSpace.prototype.isHybris = function()
{
	return this.setActive(0).isHybris();
};
oFF.QCmdSpace.prototype.isKeyfigureCalculationSuppressed = function()
{
	return this.setActive(0).isKeyfigureCalculationSuppressed();
};
oFF.QCmdSpace.prototype.isLinkingToQueryManagerUnsupported = function(targetQueryManager)
{
	return this.setActive(0).isLinkingToQueryManagerUnsupported(targetQueryManager);
};
oFF.QCmdSpace.prototype.isMemberVisibleByFilter = function(member, includedList, excludedList)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create();
		this.addTrace(oFF.QCmdSignature.DEACTIVATE_ALL_SERVER_EXCEPTIONS, params);
	}
	let isVisibleByFilter = false;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		isVisibleByFilter = this.setActive(i).isMemberVisibleByFilter(member, includedList, excludedList);
	}
	return isVisibleByFilter;
};
oFF.QCmdSpace.prototype.isOdata = function()
{
	return this.setActive(0).isOdata();
};
oFF.QCmdSpace.prototype.isRankOnAllDimensionsExists = function()
{
	return this.setActive(0).isRankOnAllDimensionsExists();
};
oFF.QCmdSpace.prototype.isResultSetTransportEnabled = function()
{
	return this.setActive(0).isResultSetTransportEnabled();
};
oFF.QCmdSpace.prototype.isTracing = function()
{
	return this.getOlapEnv().isTracing() || this.hasCallInterceptor();
};
oFF.QCmdSpace.prototype.isTypeOfAbap = function()
{
	return this.setActive(0).isTypeOfAbap();
};
oFF.QCmdSpace.prototype.isTypeOfBw = function()
{
	return this.setActive(0).isTypeOfBw();
};
oFF.QCmdSpace.prototype.isTypeOfHana = function()
{
	return this.setActive(0).isTypeOfHana();
};
oFF.QCmdSpace.prototype.isUniverse = function()
{
	return this.setActive(0).isUniverse();
};
oFF.QCmdSpace.prototype.isUqas = function()
{
	return this.setActive(0).isUqas();
};
oFF.QCmdSpace.prototype.moveDimensionAfter = function(dimensionName, targetDimensionName)
{
	let theSourceDimName = this.checkAndReplace(dimensionName);
	let theTargetDimName = this.checkAndReplace(targetDimensionName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theSourceDimName).addString(theTargetDimName);
		this.addTrace(oFF.QCmdSignature.MOVE_DIMENSION_AFTER, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).moveDimensionAfter(theSourceDimName, theTargetDimName);
	}
	return this;
};
oFF.QCmdSpace.prototype.moveDimensionBefore = function(dimensionName, targetDimensionName)
{
	let theSourceDimName = this.checkAndReplace(dimensionName);
	let theTargetDimName = this.checkAndReplace(targetDimensionName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theSourceDimName).addString(theTargetDimName);
		this.addTrace(oFF.QCmdSignature.MOVE_DIMENSION_BEFORE, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).moveDimensionBefore(theSourceDimName, theTargetDimName);
	}
	return this;
};
oFF.QCmdSpace.prototype.moveDimensionExt = function(dimType, dimName, targetAxis, index)
{
	let theDimName = this.checkAndReplace(dimName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(dimType).addString(theDimName).addNameObject(targetAxis).addInteger(index);
		this.addTrace(oFF.QCmdSignature.MOVE_DIMENSION_EXT, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).moveDimensionExt(dimType, theDimName, targetAxis, index);
	}
	return result;
};
oFF.QCmdSpace.prototype.moveSortToPosition = function(sortType, name, position)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(sortType).addString(name).addInteger(position);
		this.addTrace(oFF.QCmdSignature.MOVE_SORT_TO_POSITION, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).moveSortToPosition(sortType, this.checkAndReplace(name), position);
	}
	return this;
};
oFF.QCmdSpace.prototype.newCustomSorting = function(dimension, field, sortFromStart, sortFromEnd)
{
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).newCustomSorting(dimension, field, sortFromStart, sortFromEnd);
	}
	return this;
};
oFF.QCmdSpace.prototype.processQueryExecution = function(syncType, listener, customIdentifier)
{
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		this.setActive(i).processQueryExecution(syncType, listener, customIdentifier);
	}
	return this;
};
oFF.QCmdSpace.prototype.processQueryManagerCreation = function(syncType, listener, customIdentifier)
{
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		this.setActive(i).processQueryManagerCreation(syncType, listener, customIdentifier);
	}
	return this;
};
oFF.QCmdSpace.prototype.processResetExitOrDynamicVariable = function(syncType, listener, customIdentifier, overwriteDefaultForInputEnabledVar)
{
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).processResetExitOrDynamicVariable(syncType, listener, customIdentifier, overwriteDefaultForInputEnabledVar);
	}
	return this;
};
oFF.QCmdSpace.prototype.queueEventing = function()
{
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).queueEventing();
	}
};
oFF.QCmdSpace.prototype.refresh = function()
{
	if (this.isTracing())
	{
		this.addTrace(oFF.QCmdSignature.REFRESH, null);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).refresh();
	}
	return this;
};
oFF.QCmdSpace.prototype.refreshFieldContainerDisplayForDimension = function(dimName, display)
{
	let theDimName = this.checkAndReplace(dimName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName).addNameObject(display);
		this.addTrace(oFF.QCmdSignature.SET_FIELD_CONTAINER_DISPLAY, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).refreshFieldContainerDisplayForDimension(theDimName, display);
	}
	return this;
};
oFF.QCmdSpace.prototype.registerChangedListener = function(listener, customIdentifier)
{
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		this.setActive(i).registerChangedListener(listener, customIdentifier);
	}
	return this;
};
oFF.QCmdSpace.prototype.releaseObject = function()
{
	this.m_olapEnv = null;
	this.m_elements = oFF.XObjectExt.release(this.m_elements);
	this.m_cmdEngineList = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_cmdEngineList);
	oFF.QCmdAbstract.prototype.releaseObject.call( this );
};
oFF.QCmdSpace.prototype.removeAttributeField = function(dimType, dimName, attributeName, presentationType, fieldName, contextType)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	let theFieldName = this.checkAndReplace(fieldName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(dimType).addString(theDimName).addString(theAttributeName).addNameObject(presentationType).addString(theFieldName).addNameObject(contextType);
		this.addTrace(oFF.QCmdSignature.REMOVE_ATTRIBUTE_FIELD, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).removeAttributeField(dimType, theDimName, theAttributeName, presentationType, theFieldName, contextType);
	}
	return result;
};
oFF.QCmdSpace.prototype.removeAttributeFromResultSet = function(dimName, attributeName)
{
	let theDimName = this.checkAndReplace(dimName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName).addString(attributeName);
		this.addTrace(oFF.QCmdSignature.REMOVE_ATTRIBUTE_FROM_RESULT_SET, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).removeAttributeFromResultSet(theDimName, attributeName);
	}
	return result;
};
oFF.QCmdSpace.prototype.removeDrillOperationsByAxisType = function(axisType)
{
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).removeDrillOperationsByAxisType(axisType);
	}
	return this;
};
oFF.QCmdSpace.prototype.removeDrillOperationsByDimensionName = function(dimName)
{
	let theDimName = this.checkAndReplace(dimName);
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).removeDrillOperationsByDimensionName(theDimName);
	}
	return this;
};
oFF.QCmdSpace.prototype.removeField = function(dimType, dimName, presentationType, fieldName, contextType)
{
	let theDimName = this.checkAndReplace(dimName);
	let theFieldName = this.checkAndReplace(fieldName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(dimType).addString(theDimName).addNameObject(presentationType).addString(theFieldName).addNameObject(contextType);
		this.addTrace(oFF.QCmdSignature.REMOVE_FIELD, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).removeField(dimType, theDimName, presentationType, theFieldName, contextType);
	}
	return result;
};
oFF.QCmdSpace.prototype.removeInvalidSortOperations = function()
{
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).removeInvalidSortOperations();
	}
	return this;
};
oFF.QCmdSpace.prototype.removeUnusedClientQueryObjectMembers = function()
{
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).removeUnusedClientQueryObjectMembers();
	}
	return this;
};
oFF.QCmdSpace.prototype.reset = function()
{
	if (this.isTracing())
	{
		this.addTrace(oFF.QCmdSignature.RESET, null);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).reset();
	}
	return this;
};
oFF.QCmdSpace.prototype.resetFieldContainerKeyViewToDefault = function(dimName, attributeName)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName).addString(theAttributeName);
		this.addTrace(oFF.QCmdSignature.RESET_FIELD_CONTAINER_KEY_VIEW_DEFAULT, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).resetFieldContainerKeyViewToDefault(theDimName, theAttributeName);
	}
	return this;
};
oFF.QCmdSpace.prototype.resetFieldContainerTextViewToDefault = function(dimName, attributeName)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName).addString(theAttributeName);
		this.addTrace(oFF.QCmdSignature.RESET_FIELD_CONTAINER_TEXT_VIEW_DEFAULT, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).resetFieldContainerTextViewToDefault(theDimName, theAttributeName);
	}
	return this;
};
oFF.QCmdSpace.prototype.resetMaxResultRecords = function()
{
	if (this.isTracing())
	{
		this.addTrace(oFF.QCmdSignature.RESET_MAX_RESULT_RECORDS, null);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).resetMaxResultRecords();
	}
	return this;
};
oFF.QCmdSpace.prototype.resetPreserveCustomMembers = function()
{
	if (this.isTracing())
	{
		this.addTrace(oFF.QCmdSignature.RESET_PRESERVE_CUSTOM_MEMBERS, null);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).resetPreserveCustomMembers();
	}
	return this;
};
oFF.QCmdSpace.prototype.resetPreserveCustomMembersAndCalcDims = function()
{
	if (this.isTracing())
	{
		this.addTrace(oFF.QCmdSignature.RESET_PRESERVE_CUSTOM_MEMBERS_AND_CALC_DIMS, null);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).resetPreserveCustomMembersAndCalcDims();
	}
	return this;
};
oFF.QCmdSpace.prototype.resetToDefault = function()
{
	if (this.isTracing())
	{
		this.addTrace(oFF.QCmdSignature.RESET_TO_DEFAULT, null);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).resetToDefault();
	}
	return this;
};
oFF.QCmdSpace.prototype.resetToDefaultState = function(metadataState)
{
	if (this.isTracing())
	{
		this.addTrace(oFF.QCmdSignature.RESET_TO_DEFAULT, null);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).resetToDefaultState(metadataState);
	}
	return this;
};
oFF.QCmdSpace.prototype.resetWithOptions = function(cmdResetConfiguration)
{
	if (this.isTracing())
	{
		this.addTrace(oFF.QCmdSignature.RESET_WITH_OPTIONS, null);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).resetWithOptions(cmdResetConfiguration);
	}
	return this;
};
oFF.QCmdSpace.prototype.resumeEventing = function()
{
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).resumeEventing();
	}
};
oFF.QCmdSpace.prototype.select = function(sigSelExpression)
{
	return this.getOlapEnv().select(sigSelExpression);
};
oFF.QCmdSpace.prototype.selectOnSpace = function(sigSelExpression)
{
	let parser = oFF.SigSelParser.create();
	let result = parser.parse(sigSelExpression);
	if (result.isValid())
	{
		this.m_spaceSigSel = result.getData();
		this.selectOnSpaceExpr();
	}
};
oFF.QCmdSpace.prototype.selectOnSpaceExpr = function()
{
	if (oFF.notNull(this.m_spaceSigSel))
	{
		let process = this.getSession();
		let selector = process.getSelector();
		this.m_elements.clear();
		this.m_activeComponent = null;
		for (let i = 0; i < this.m_spaceSigSel.size(); i++)
		{
			let operation = this.m_spaceSigSel.get(i);
			let components = selector.selectComponentsByOp(operation, oFF.SigSelDomain.DATA, null, -1);
			if (oFF.notNull(components))
			{
				for (let k = 0; k < components.size(); k++)
				{
					let component = components.get(k);
					this.addElement(component);
				}
			}
		}
	}
};
oFF.QCmdSpace.prototype.setActive = function(index)
{
	if (index < this.m_elements.size())
	{
		let weakRef = this.m_elements.get(index);
		this.m_activeComponent = oFF.XWeakReferenceUtil.getHardRef(weakRef);
		if (oFF.notNull(this.m_activeCmdEngine))
		{
			let ok = this.m_activeCmdEngine.setActiveComponent(this.m_activeComponent);
			if (!ok)
			{
				this.m_activeCmdEngine = null;
				let size = this.m_cmdEngineList.size();
				if (size > 1)
				{
					for (let i = 0; i < size; i++)
					{
						let context = this.m_cmdEngineList.get(i);
						if (context.setActiveComponent(this.m_activeComponent))
						{
							this.m_activeCmdEngine = context;
							break;
						}
					}
				}
			}
		}
		if (oFF.isNull(this.m_activeCmdEngine))
		{
			this.m_activeCmdEngine = oFF.QCmdContextFactory.createCmdContext(this.m_olapEnv, this.m_activeComponent);
			if (oFF.notNull(this.m_activeCmdEngine))
			{
				this.m_cmdEngineList.add(this.m_activeCmdEngine);
			}
		}
	}
	if (oFF.isNull(this.m_activeCmdEngine))
	{
		if (oFF.isNull(this.m_dummyCmdEngine))
		{
			this.m_dummyCmdEngine = oFF.QCmdDummyContext.createDummyContext();
		}
		this.m_activeCmdEngine = this.m_dummyCmdEngine;
	}
	return this.m_activeCmdEngine;
};
oFF.QCmdSpace.prototype.setActiveComponent = function(component)
{
	return false;
};
oFF.QCmdSpace.prototype.setAxisZeroSuppressionType = function(axisType, zeroSuppressionType)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(axisType).addNameObject(zeroSuppressionType);
		this.addTrace(oFF.QCmdSignature.SET_AXIS_ZERO_SUPPRESSION_TYPE, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setAxisZeroSuppressionType(axisType, zeroSuppressionType);
	}
	return this;
};
oFF.QCmdSpace.prototype.setAxisZeroSuppressionTypeExt = function(axisType, zeroSuppressionType, enforceReadModeSynchronization)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(axisType).addNameObject(zeroSuppressionType).addBoolean(enforceReadModeSynchronization);
		this.addTrace(oFF.QCmdSignature.SET_AXIS_ZERO_SUPPRESSION_TYPE_EXT, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setAxisZeroSuppressionTypeExt(axisType, zeroSuppressionType, enforceReadModeSynchronization);
	}
	return this;
};
oFF.QCmdSpace.prototype.setConditionActive = function(conditionName, active)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(conditionName).addBoolean(active);
		this.addTrace(oFF.QCmdSignature.SET_CONDITION_ACTIVE, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setConditionActive(conditionName, active);
	}
	return this;
};
oFF.QCmdSpace.prototype.setDimensionAndMeasure = function(dimName, measureName)
{
	let theDimName = this.checkAndReplace(dimName);
	let theMeasureName = this.checkAndReplace(measureName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName).addString(theMeasureName);
		this.addTrace(oFF.QCmdSignature.SET_DIMENSION_AND_MEASURE, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setDimensionAndMeasure(theDimName, theMeasureName);
	}
	return this;
};
oFF.QCmdSpace.prototype.setDimensionCustomHierarchyDefinition = function(customHierarchyDefinition, hierarchyActive, initialDrillLevel)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(customHierarchyDefinition.toString()).addBoolean(hierarchyActive).addInteger(initialDrillLevel);
		this.addTrace(oFF.QCmdSignature.SET_DIMENSION_CUSTOM_HIERARCHY, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setDimensionCustomHierarchyDefinition(customHierarchyDefinition, hierarchyActive, initialDrillLevel);
	}
	return this;
};
oFF.QCmdSpace.prototype.setDimensionHierarchy = function(dimName, hierarchyName, hierarchyActive, initialDrillLevel)
{
	let theDimName = this.checkAndReplace(dimName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName).addString(hierarchyName).addBoolean(hierarchyActive).addInteger(initialDrillLevel);
		this.addTrace(oFF.QCmdSignature.SET_DIMENSION_HIERARCHY, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setDimensionHierarchy(theDimName, hierarchyName, hierarchyActive, initialDrillLevel);
	}
	return this;
};
oFF.QCmdSpace.prototype.setDimensionHierarchyDrillLevel = function(dimName, initialDrillLevel)
{
	let theDimName = this.checkAndReplace(dimName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName).addInteger(initialDrillLevel);
		this.addTrace(oFF.QCmdSignature.SET_DIMENSION_HIERARCHY_DRILL_LEVEL, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setDimensionHierarchyDrillLevel(theDimName, initialDrillLevel);
	}
	return this;
};
oFF.QCmdSpace.prototype.setDimensionHierarchyHasNodeCondensation = function(dimName, nodeCondensation)
{
	let theDimName = this.checkAndReplace(dimName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName).addBoolean(nodeCondensation);
		this.addTrace(oFF.QCmdSignature.SET_DIMENSION_HIERARCHY_HAS_NODE_CONDENSATION, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setDimensionHierarchyHasNodeCondensation(theDimName, nodeCondensation);
	}
	return this;
};
oFF.QCmdSpace.prototype.setDimensionHierarchyLowerLevelNodeAlignment = function(dimName, alignment)
{
	let theDimName = this.checkAndReplace(dimName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName).addNameObject(alignment);
		this.addTrace(oFF.QCmdSignature.SET_DIMENSION_HIERARCHY_LOWER_LEVEL_NODE_ALIGMENT, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setDimensionHierarchyLowerLevelNodeAlignment(theDimName, alignment);
	}
	return this;
};
oFF.QCmdSpace.prototype.setDimensionHierarchyMemberOfPostedNodeVisibility = function(dimName, memberOfPostedNodeVisibility)
{
	let theDimName = this.checkAndReplace(dimName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName).addNameObject(memberOfPostedNodeVisibility);
		this.addTrace(oFF.QCmdSignature.SET_DIMENSION_HIERARCHY_MEMBER_OF_POSTED_NODE_VISIBILITY, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setDimensionHierarchyMemberOfPostedNodeVisibility(theDimName, memberOfPostedNodeVisibility);
	}
	return this;
};
oFF.QCmdSpace.prototype.setDimensionMemberReadModeGraceful = function(dimensionName, contextType, readMode)
{
	let theDimName = this.checkAndReplace(dimensionName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(dimensionName).addNameObject(contextType).addNameObject(readMode);
		this.addTrace(oFF.QCmdSignature.SET_DIMENSION_MEMBER_READMODE_GRACEFUL, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setDimensionMemberReadModeGraceful(theDimName, contextType, readMode);
	}
	return this;
};
oFF.QCmdSpace.prototype.setDimensionMemberReadModeGracefulExt = function(dimensionName, contextType, readMode, enforceZeroSuppressionSynchronization)
{
	let theDimName = this.checkAndReplace(dimensionName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(dimensionName).addNameObject(contextType).addNameObject(readMode).addBoolean(enforceZeroSuppressionSynchronization);
		this.addTrace(oFF.QCmdSignature.SET_DIMENSION_MEMBER_READMODE_GRACEFUL_EXT, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setDimensionMemberReadModeGracefulExt(theDimName, contextType, readMode, enforceZeroSuppressionSynchronization);
	}
	return this;
};
oFF.QCmdSpace.prototype.setDimensionsAndMeasures = function(dimNames, measureNames)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addStringList(dimNames).addStringList(measureNames);
		this.addTrace(oFF.QCmdSignature.SET_DIMENSION_AND_MEASURE, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setDimensionsAndMeasures(dimNames, measureNames);
	}
	return this;
};
oFF.QCmdSpace.prototype.setExceptionActive = function(exceptionName, active)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(exceptionName).addBoolean(active);
		this.addTrace(oFF.QCmdSignature.SET_EXCEPTION_ACTIVE, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setExceptionActive(exceptionName, active);
	}
	return this;
};
oFF.QCmdSpace.prototype.setExecuteRequestOnOldResultSet = function(executeRequestOnOldResultSet)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addBoolean(executeRequestOnOldResultSet);
		this.addTrace(oFF.QCmdSignature.SET_EXECUTE_REQUEST_ON_OLD_RESULT_SET, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setExecuteRequestOnOldResultSet(executeRequestOnOldResultSet);
	}
	return this;
};
oFF.QCmdSpace.prototype.setField = function(dimType, dimName, presentationType, fieldName, contextType)
{
	let theDimName = this.checkAndReplace(dimName);
	let theFieldName = this.checkAndReplace(fieldName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(dimType).addString(theDimName).addNameObject(presentationType).addString(theFieldName).addNameObject(contextType);
		this.addTrace(oFF.QCmdSignature.SET_FIELD, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).setField(dimType, theDimName, presentationType, theFieldName, contextType);
	}
	return result;
};
oFF.QCmdSpace.prototype.setFieldContainerDisplay = function(dimName, attributeName, fieldContainerDisplay)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName).addString(theAttributeName).addNameObject(fieldContainerDisplay);
		this.addTrace(oFF.QCmdSignature.SET_FIELD_CONTAINER_DISPLAY, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setFieldContainerDisplay(theDimName, theAttributeName, fieldContainerDisplay);
	}
	return this;
};
oFF.QCmdSpace.prototype.setFieldContainerKeyDisplay = function(dimName, attributeName, keyDisplay)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName).addString(theAttributeName).addNameObject(keyDisplay);
		this.addTrace(oFF.QCmdSignature.SET_FIELD_CONTAINER_KEY_DISPLAY, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setFieldContainerKeyDisplay(theDimName, theAttributeName, keyDisplay);
	}
	return this;
};
oFF.QCmdSpace.prototype.setFieldContainerKeyView = function(dimName, attributeName, keyView)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName).addString(theAttributeName).addNameObject(keyView);
		this.addTrace(oFF.QCmdSignature.SET_FIELD_CONTAINER_KEY_VIEW, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setFieldContainerKeyView(theDimName, theAttributeName, keyView);
	}
	return this;
};
oFF.QCmdSpace.prototype.setFieldContainerTextView = function(dimName, attributeName, textView)
{
	let theDimName = this.checkAndReplace(dimName);
	let theAttributeName = this.checkAndReplace(attributeName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName).addString(theAttributeName).addNameObject(textView);
		this.addTrace(oFF.QCmdSignature.SET_FIELD_CONTAINER_TEXT_VIEW, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setFieldContainerTextView(theDimName, theAttributeName, textView);
	}
	return this;
};
oFF.QCmdSpace.prototype.setFilterForLeaves = function(dimension)
{
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setFilterForLeaves(dimension);
	}
	return this;
};
oFF.QCmdSpace.prototype.setMaxColumns = function(max)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addInteger(max);
		this.addTrace(oFF.QCmdSignature.SET_MAX_COLUMNS, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setMaxColumns(max);
	}
	return this;
};
oFF.QCmdSpace.prototype.setMaxResultRecords = function(maxResultRecords)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addLong(maxResultRecords);
		this.addTrace(oFF.QCmdSignature.SET_MAX_RESULT_RECORDS, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setMaxResultRecords(maxResultRecords);
	}
	return this;
};
oFF.QCmdSpace.prototype.setMaxRows = function(max)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addInteger(max);
		this.addTrace(oFF.QCmdSignature.SET_MAX_ROWS, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setMaxRows(max);
	}
	return this;
};
oFF.QCmdSpace.prototype.setOffsetColumns = function(offset)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addInteger(offset);
		this.addTrace(oFF.QCmdSignature.SET_OFFSET_COLUMNS, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setOffsetColumns(offset);
	}
	return this;
};
oFF.QCmdSpace.prototype.setOffsetRows = function(offset)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addInteger(offset);
		this.addTrace(oFF.QCmdSignature.SET_OFFSET_ROWS, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setOffsetRows(offset);
	}
	return this;
};
oFF.QCmdSpace.prototype.setRank = function(maxRows, complexSorting, condition, applyToDimensions)
{
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setRank(maxRows, complexSorting, condition, applyToDimensions);
	}
	return this;
};
oFF.QCmdSpace.prototype.setResultSetPersistanceTargetSchema = function(resultSetPersistenceSchema)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(resultSetPersistenceSchema);
		this.addTrace(oFF.QCmdSignature.SET_RESULT_SET_PERSISTANCE_TARGET_SCHEMA, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setResultSetPersistanceTargetSchema(resultSetPersistenceSchema);
	}
	return this;
};
oFF.QCmdSpace.prototype.setResultSetPersistanceTargetTable = function(resultSetPersistenceTable)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(resultSetPersistenceTable);
		this.addTrace(oFF.QCmdSignature.SET_RESULT_SET_PERSISTANCE_TARGET_TABLE, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setResultSetPersistanceTargetTable(resultSetPersistenceTable);
	}
	return this;
};
oFF.QCmdSpace.prototype.setResultSetPersistenceIdentifier = function(resultSetPersistenceIdentifier)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(resultSetPersistenceIdentifier);
		this.addTrace(oFF.QCmdSignature.SET_RESULT_SET_PERSISTANCE_IDENTIFIER, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setResultSetPersistenceIdentifier(resultSetPersistenceIdentifier);
	}
	return this;
};
oFF.QCmdSpace.prototype.setResultSetPersistenceTargetType = function(resultSetPersistenceType)
{
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setResultSetPersistenceTargetType(resultSetPersistenceType);
	}
	return this;
};
oFF.QCmdSpace.prototype.setResultSetTransportEnabled = function(isEnabled)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addBoolean(isEnabled);
		this.addTrace(oFF.QCmdSignature.SET_RESULT_SET_TRANSPORT_ENABLED, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setResultSetTransportEnabled(isEnabled);
	}
	return this;
};
oFF.QCmdSpace.prototype.setSuppressKeyfigureCalculation = function(doSupress)
{
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setSuppressKeyfigureCalculation(doSupress);
	}
	return this;
};
oFF.QCmdSpace.prototype.setTotalsVisible = function(modelLevel, name, visibility)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(modelLevel).addString(name).addNameObject(visibility);
		this.addTrace(oFF.QCmdSignature.SET_TOTALS_VISIBLE, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setTotalsVisible(modelLevel, name, visibility);
	}
	return this;
};
oFF.QCmdSpace.prototype.setTotalsVisibleByElement = function(modelLevel, name, element, visibility)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(modelLevel).addString(name).addNameObject(element).addNameObject(visibility);
		this.addTrace(oFF.QCmdSignature.SET_TOTALS_VISIBLE_BY_ELEMENT, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setTotalsVisibleByElement(modelLevel, name, element, visibility);
	}
	return this;
};
oFF.QCmdSpace.prototype.setUniversalDisplayHierarchy = function(dimensionNames, initialDrillLevel, active)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addStringList(dimensionNames).addInteger(initialDrillLevel).addBoolean(active);
		this.addTrace(oFF.QCmdSignature.SET_UNIVERSAL_DISPLAY_HIERARCHY, params);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).setUniversalDisplayHierarchy(dimensionNames, initialDrillLevel, active);
	}
	return result;
};
oFF.QCmdSpace.prototype.setVariable = function(varName, value)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(varName).addString(value);
		this.addTrace(oFF.QCmdSignature.SET_VARIABLE, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).setVariable(varName, value);
	}
	return this;
};
oFF.QCmdSpace.prototype.setupCmdsSpace = function(application)
{
	this.m_olapEnv = application;
	this.m_elements = oFF.XList.create();
	this.m_cmdEngineList = oFF.XList.create();
};
oFF.QCmdSpace.prototype.sizeElements = function()
{
	return this.m_elements.size();
};
oFF.QCmdSpace.prototype.sort = function(sortType, dimType, dimName, presentationType, fieldName, memberName, direction)
{
	let theDimName = this.checkAndReplace(dimName);
	let theFieldName = this.checkAndReplace(fieldName);
	let theMemberName = this.checkAndReplace(memberName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addNameObject(sortType).addNameObject(dimType).addString(theDimName).addNameObject(presentationType).addString(theFieldName).addString(theMemberName).addNameObject(direction);
		this.addTrace(oFF.QCmdSignature.SORT, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).sort(sortType, dimType, theDimName, presentationType, theFieldName, theMemberName, direction);
	}
	return this;
};
oFF.QCmdSpace.prototype.sortByQueryDataCell = function(keyFigureName, secondaryStructureMemberName, direction, leadingAxis)
{
	let theKeyFigureName = this.checkAndReplace(keyFigureName);
	let theSecondaryStructureMemberName = this.checkAndReplace(secondaryStructureMemberName);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theKeyFigureName).addString(theSecondaryStructureMemberName).addNameObject(direction).addNameObject(leadingAxis);
		this.addTrace(oFF.QCmdSignature.SORT_BY_QUERY_DATA_CELL, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).sortByQueryDataCell(theKeyFigureName, theSecondaryStructureMemberName, direction, leadingAxis);
	}
	return this;
};
oFF.QCmdSpace.prototype.stopEventing = function()
{
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).stopEventing();
	}
};
oFF.QCmdSpace.prototype.submitVariables = function()
{
	if (this.isTracing())
	{
		this.addTrace(oFF.QCmdSignature.SUBMIT_VARIABLES, null);
	}
	let result = null;
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		result = this.setActive(i).submitVariables();
	}
	return result;
};
oFF.QCmdSpace.prototype.swapDimensions = function(dimensionName1, dimensionName2)
{
	let theDimName1 = this.checkAndReplace(dimensionName1);
	let theDimName2 = this.checkAndReplace(dimensionName2);
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(theDimName1).addString(theDimName2);
		this.addTrace(oFF.QCmdSignature.SWAP_DIMENSIONS, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).swapDimensions(theDimName1, theDimName2);
	}
	return this;
};
oFF.QCmdSpace.prototype.switchAxes = function()
{
	if (this.isTracing())
	{
		this.addTrace(oFF.QCmdSignature.SWITCH_AXES, null);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).switchAxes();
	}
	return this;
};
oFF.QCmdSpace.prototype.switchAxesExt = function(includeSettings)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addBoolean(includeSettings);
		this.addTrace(oFF.QCmdSignature.SWITCH_AXES_EXT, params);
	}
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).switchAxesExt(includeSettings);
	}
	return this;
};
oFF.QCmdSpace.prototype.toggleUniqueAxisProperties = function(axisType, uniqueAxisProperty, active)
{
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).toggleUniqueAxisProperties(axisType, uniqueAxisProperty, active);
	}
	return this;
};
oFF.QCmdSpace.prototype.unassignHierarchy = function(dimensionName)
{
	if (this.isTracing())
	{
		let params = oFF.XTrace.create().addString(dimensionName);
		this.addTrace(oFF.QCmdSignature.UNASSIGN_HIERARCHY, params);
	}
	for (let i = 0; i < this.sizeElements(); i++)
	{
		this.setActive(i).unassignHierarchy(dimensionName);
	}
	return this;
};
oFF.QCmdSpace.prototype.unregisterChangedListener = function(listener)
{
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		this.setActive(i).unregisterChangedListener(listener);
	}
	return this;
};
oFF.QCmdSpace.prototype.updateDynamicVariables = function(syncType, listener, customIdentifier)
{
	let size = this.sizeElements();
	for (let i = 0; i < size; i++)
	{
		this.setActive(i).updateDynamicVariables(syncType, listener, customIdentifier);
	}
	return this;
};

oFF.QConvenienceCommands = function() {};
oFF.QConvenienceCommands.prototype = new oFF.QCmdAbstract();
oFF.QConvenienceCommands.prototype._ff_c = "QConvenienceCommands";

oFF.QConvenienceCommands.create = function(olapApplication, component)
{
	let cmds = new oFF.QConvenienceCommands();
	cmds.m_olapEnvironment = olapApplication;
	cmds.m_activeComponent = component;
	return cmds;
};
oFF.QConvenienceCommands.prototype.m_activeComponent = null;
oFF.QConvenienceCommands.prototype.m_olapEnvironment = null;
oFF.QConvenienceCommands.prototype.activateConditionalZeroSuppression = function()
{
	if (!this.isSystemType(oFF.SystemType.BW))
	{
		return this;
	}
	let queryModel = this.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		let isAnyDimensionShowsUnbookedData = false;
		let rowAxis = queryModel.getRowsAxis();
		let columnAxis = queryModel.getColumnsAxis();
		if (this.getQueryManager().isKeyfigureCalculationSuppressed())
		{
			isAnyDimensionShowsUnbookedData = true;
		}
		else
		{
			let rowIterator = rowAxis.getIterator();
			while (rowIterator.hasNext())
			{
				let rowReadMode = rowIterator.next().getReadMode(oFF.QContextType.RESULT_SET);
				if (oFF.notNull(rowReadMode) && rowReadMode.isTypeOf(oFF.QMemberReadMode.MASTER))
				{
					isAnyDimensionShowsUnbookedData = true;
					break;
				}
			}
			if (!isAnyDimensionShowsUnbookedData)
			{
				let columnIterator = columnAxis.getIterator();
				while (columnIterator.hasNext())
				{
					let columnReadMode = columnIterator.next().getReadMode(oFF.QContextType.RESULT_SET);
					if (oFF.notNull(columnReadMode) && columnReadMode.isTypeOf(oFF.QMemberReadMode.MASTER))
					{
						isAnyDimensionShowsUnbookedData = true;
						break;
					}
				}
			}
		}
		if (isAnyDimensionShowsUnbookedData)
		{
			if (rowAxis.supportsZeroSuppression())
			{
				rowAxis.setZeroSuppressionType(oFF.ZeroSuppressionType.NONE);
			}
			if (columnAxis.supportsZeroSuppression())
			{
				columnAxis.setZeroSuppressionType(oFF.ZeroSuppressionType.NONE);
			}
		}
	}
	return this;
};
oFF.QConvenienceCommands.prototype.activateHierarchy = function(dimensionName)
{
	let dimension = this.getDimension(dimensionName);
	if (oFF.notNull(dimension))
	{
		dimension.setHierarchyActive(true);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.addAllDimensions = function()
{
	this.queueEventing();
	this.clearAxis(oFF.AxisType.ROWS);
	this.clearAxis(oFF.AxisType.COLUMNS);
	let queryModel = this.getQueryModel();
	let dimensionNames = this.getDimensionNames();
	dimensionNames.sortByDirection(oFF.XSortDirection.ASCENDING);
	for (let i = 0; i < dimensionNames.size(); i++)
	{
		let dimName = dimensionNames.get(i);
		let dimension = queryModel.getDimensionByName(dimName);
		if (!dimension.isSelectable())
		{
			continue;
		}
		if (oFF.XString.isEqual(dimension.getName(), "$$All$$"))
		{
			continue;
		}
		if (oFF.XString.startsWith(dimension.getName(), "$$"))
		{
			continue;
		}
		if (dimension.isMeasureStructure())
		{
			if (dimension.supportsAxis(oFF.AxisType.COLUMNS))
			{
				this.moveDimensionToColumns(dimName);
			}
		}
		else if (dimension.supportsAxis(oFF.AxisType.ROWS))
		{
			this.moveDimensionToRows(dimName);
		}
	}
	this.resumeEventing();
	return this;
};
oFF.QConvenienceCommands.prototype.addAllFieldsOfDimensionToModelArea = function(dimName, contextType)
{
	if (contextType === oFF.QContextType.RESULT_SET)
	{
		this.addAllFieldsToResultSetOrToSelector(dimName, true);
	}
	else if (contextType === oFF.QContextType.SELECTOR)
	{
		this.addAllFieldsToResultSetOrToSelector(dimName, false);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.addAllFieldsToModelArea = function(contextType)
{
	let queryModel = this.getQueryModel();
	let dimensions = queryModel.getDimensions();
	for (let i = 0; i < dimensions.size(); i++)
	{
		let dimension = dimensions.get(i);
		if (!dimension.isSelectable())
		{
			continue;
		}
		if (oFF.XString.startsWith(dimension.getName(), "$$"))
		{
			continue;
		}
		if (contextType === oFF.QContextType.SELECTOR)
		{
			this.addAllFieldsToSelector(dimension.getName());
		}
		else if (contextType === oFF.QContextType.RESULT_SET)
		{
			this.addAllFieldsToResultSet(dimension.getName());
		}
	}
	return this;
};
oFF.QConvenienceCommands.prototype.addAllFieldsToResultSetOrToSelector = function(dimName, isResultSet)
{
	let dimension = this.getDimension(dimName);
	if (oFF.isNull(dimension))
	{
		return;
	}
	let fields = dimension.getFields();
	let fieldNames = fields.getKeysAsReadOnlyList();
	let hasHierarchy = dimension.isHierarchyAssignedAndActive();
	for (let i = 0; i < fieldNames.size(); i++)
	{
		let field = fields.getByKey(fieldNames.get(i));
		let usageType = field.getUsageType();
		if (hasHierarchy && usageType === oFF.FieldUsageType.FLAT || usageType === oFF.FieldUsageType.HIERARCHY)
		{
			continue;
		}
		let fieldList;
		if (isResultSet)
		{
			fieldList = dimension.getResultSetFields();
		}
		else
		{
			fieldList = dimension.getSelectorFields();
		}
		if (!fieldList.isFixed())
		{
			fieldList.add(field);
		}
	}
};
oFF.QConvenienceCommands.prototype.addAttributeField = function(dimType, dimName, attributeName, presentationType, fieldName, contextType)
{
	let dimension = this.resolveDimension(dimType, dimName);
	let field = null;
	if (oFF.notNull(dimension))
	{
		let resolvedFieldName = this.resolveAttributeFieldName(dimension.getName(), attributeName, presentationType, fieldName);
		field = dimension.getFieldByName(resolvedFieldName);
		let attribute = dimension.getAttributeByName(attributeName);
		let fields = this.getAttributeFieldList(attribute, contextType);
		if (!fields.isFixed() && oFF.notNull(field))
		{
			fields.add(field);
		}
	}
	return field;
};
oFF.QConvenienceCommands.prototype.addAttributeToResultSet = function(dimName, attributeName)
{
	let dimension = this.getDimension(dimName);
	if (oFF.notNull(dimension))
	{
		let attributeContainer = dimension.getAttributeContainer();
		let attribute = attributeContainer.getAttributeByName(attributeName);
		if (oFF.notNull(attribute))
		{
			let resultSetAttributes = attributeContainer.getResultSetAttributes();
			resultSetAttributes.add(attribute);
			return attribute;
		}
	}
	return null;
};
oFF.QConvenienceCommands.prototype.addContainsGeometryFilter = function(dimension, fieldName, geometry)
{
	return this.addFilterByField(dimension.getFieldByName(fieldName), geometry, null, null, oFF.SpatialComparisonOperator.CONTAINS, false);
};
oFF.QConvenienceCommands.prototype.addCoversGeometryFilter = function(dimension, fieldName, geometry)
{
	return this.addFilterByField(dimension.getFieldByName(fieldName), geometry, null, null, oFF.SpatialComparisonOperator.COVERS, false);
};
oFF.QConvenienceCommands.prototype.addCrossesLinestringFilter = function(dimension, fieldName, geometry)
{
	if (geometry.getValueType() === oFF.XValueType.LINE_STRING || geometry.getValueType() === oFF.XValueType.MULTI_LINE_STRING)
	{
		return this.addFilterByField(dimension.getFieldByName(fieldName), geometry, null, null, oFF.SpatialComparisonOperator.COVERS, false);
	}
	return null;
};
oFF.QConvenienceCommands.prototype.addDisjointGeometryFilter = function(dimension, fieldName, geometry)
{
	return this.addFilterByField(dimension.getFieldByName(fieldName), geometry, null, null, oFF.SpatialComparisonOperator.DISJOINT, false);
};
oFF.QConvenienceCommands.prototype.addDoubleFilterByField = function(field, filterValue, comparisonOperator)
{
	return this.addFilterByField(field, oFF.XDoubleValue.create(filterValue), null, null, comparisonOperator, false);
};
oFF.QConvenienceCommands.prototype.addDoubleFilterByFieldName = function(dimName, fieldName, filterValue, comparisonOperator)
{
	let field = this.getFieldFromDimension(dimName, fieldName);
	return this.addDoubleFilterByField(field, filterValue, comparisonOperator);
};
oFF.QConvenienceCommands.prototype.addField = function(dimType, dimName, presentationType, fieldName, contextType)
{
	let dimension = this.resolveDimension(dimType, dimName);
	let field = null;
	if (oFF.notNull(dimension))
	{
		let resolvedFieldName = this.resolveFieldName(dimension.getName(), presentationType, fieldName);
		field = dimension.getFieldByName(resolvedFieldName);
		let fields = this.getFieldList(dimension, contextType);
		if (!fields.isFixed() && oFF.notNull(field))
		{
			fields.add(field);
		}
	}
	return field;
};
oFF.QConvenienceCommands.prototype.addFieldToResultSetExt = function(dimType, dimName, presentationType, fieldName)
{
	let dimension = this.resolveDimension(dimType, dimName);
	let field = null;
	if (oFF.notNull(dimension))
	{
		let resolvedFieldName = this.resolveFieldName(dimension.getName(), presentationType, fieldName);
		field = dimension.getFieldByName(resolvedFieldName);
		let fields = dimension.getResultSetFields();
		if (!fields.isFixed() && oFF.notNull(field))
		{
			fields.add(field);
		}
	}
	return field;
};
oFF.QConvenienceCommands.prototype.addFilter = function(filterLayer, dimType, dimName, presentationType, fieldName, lowValue, highValue, comparisonOperator)
{
	let dimension = this.resolveDimension(dimType, dimName);
	if (oFF.notNull(dimension))
	{
		let field = this.resolveField(dimension, presentationType, fieldName);
		if (oFF.notNull(field) && field.isFilterable())
		{
			let filterContainer = this.getFilterContainer(filterLayer);
			let memberSelection = filterContainer.getCartesianListByField(field);
			if (oFF.notNull(memberSelection))
			{
				if (memberSelection.isEmpty())
				{
					memberSelection.setField(field);
				}
				if (memberSelection.getField() === field)
				{
					memberSelection.queueEventing();
					let element = memberSelection.addNewCartesianElement();
					let numberOfParameters = comparisonOperator.getNumberOfParameters();
					if (numberOfParameters > 0)
					{
						let valueAccess = oFF.XValueAccess.createWithType(field.getValueType());
						valueAccess.parseString(lowValue);
						element.configureSingleParameterExpression(valueAccess.getValue(), comparisonOperator);
						if (numberOfParameters > 1)
						{
							valueAccess.parseString(highValue);
							element.getHigh().setValue(valueAccess.getValue());
						}
					}
					if (dimension.isHierarchyActive())
					{
						memberSelection.setHierarchyName(dimension.getHierarchyName());
					}
					memberSelection.resumeEventing();
					return element;
				}
			}
		}
	}
	return null;
};
oFF.QConvenienceCommands.prototype.addFilterByField = function(field, firstValue, secondValue, thirdValue, comparisonOperator, isVisibility)
{
	if (oFF.isNull(field) || !field.isFilterable())
	{
		return null;
	}
	if (isVisibility && !this.getQueryModel().getFilter().getModelCapabilities().supportsVisibilityFilter())
	{
		return null;
	}
	let filterLayer;
	if (isVisibility)
	{
		filterLayer = oFF.FilterLayer.VISIBILITY;
	}
	else
	{
		filterLayer = oFF.FilterLayer.DYNAMIC;
	}
	let filterContainer = this.getFilterContainer(filterLayer);
	let memberSelection = filterContainer.getCartesianListByField(field);
	let dimension = field.getDimension();
	if (oFF.isNull(memberSelection) && dimension.getDimensionType().isTypeOf(oFF.DimensionType.CALCULATED_DIMENSION))
	{
		let dimensionName = field.getDimension().getName();
		let dimensionContext = this.getDimensionAccessor().getDimensionByName(dimensionName);
		memberSelection = filterContainer.getCartesianListWithDefault(oFF.notNull(dimensionContext) ? dimensionContext : dimension);
	}
	if (oFF.notNull(memberSelection))
	{
		if (memberSelection.isEmpty())
		{
			memberSelection.setField(field);
		}
		else if (memberSelection.getField() !== field)
		{
			return null;
		}
		memberSelection.queueEventing();
		let element = memberSelection.addNewCartesianElement();
		let numberOfParameters = comparisonOperator.getNumberOfParameters();
		if (numberOfParameters === 3)
		{
			element.configureTripleParameterExpression(firstValue, secondValue, thirdValue, comparisonOperator);
		}
		else
		{
			element.configureDoubleParameterExpression(firstValue, secondValue, comparisonOperator);
		}
		if (dimension.isHierarchyActive())
		{
			memberSelection.setHierarchyName(dimension.getHierarchyName());
		}
		memberSelection.resumeEventing();
	}
	return memberSelection;
};
oFF.QConvenienceCommands.prototype.addFilterByFieldAndValue = function(field, filterValue, comparisonOperator)
{
	return this.addFilterByField(field, filterValue, null, null, comparisonOperator, false);
};
oFF.QConvenienceCommands.prototype.addIntFilterByField = function(field, filterValue, comparisonOperator)
{
	return this.addFilterByField(field, oFF.XIntegerValue.create(filterValue), null, null, comparisonOperator, false);
};
oFF.QConvenienceCommands.prototype.addIntFilterByFieldName = function(dimName, fieldName, filterValue, comparisonOperator)
{
	let field = this.getFieldFromDimension(dimName, fieldName);
	return this.addIntFilterByField(field, filterValue, comparisonOperator);
};
oFF.QConvenienceCommands.prototype.addIntersectsGeometryFilter = function(dimension, fieldName, geometry)
{
	return this.addFilterByField(dimension.getFieldByName(fieldName), geometry, null, null, oFF.SpatialComparisonOperator.INTERSECTS, false);
};
oFF.QConvenienceCommands.prototype.addIntersectsRectFilter = function(dimension, fieldName, lowerLeft, upperRight)
{
	return this.addFilterByField(dimension.getFieldByName(fieldName), lowerLeft, upperRight, null, oFF.SpatialComparisonOperator.INTERSECTS_RECT, false);
};
oFF.QConvenienceCommands.prototype.addIntervalFilterByValues = function(dimName, lowValue, highValue)
{
	let dimension = this.getDimension(dimName);
	if (oFF.isNull(dimension))
	{
		return null;
	}
	return this.addFilterByField(dimension.getKeyField(), lowValue, highValue, null, oFF.ComparisonOperator.BETWEEN, false);
};
oFF.QConvenienceCommands.prototype.addLongFilterByField = function(field, filterValue, comparisonOperator)
{
	return this.addFilterByField(field, oFF.XLongValue.create(filterValue), null, null, comparisonOperator, false);
};
oFF.QConvenienceCommands.prototype.addLongFilterByFieldName = function(dimName, fieldName, filterValue, comparisonOperator)
{
	let field = this.getFieldFromDimension(dimName, fieldName);
	return this.addLongFilterByField(field, filterValue, comparisonOperator);
};
oFF.QConvenienceCommands.prototype.addMeasure = function(measureName)
{
	let measureStructure = this.moveMeasureDimensionToAxis(oFF.AxisType.COLUMNS);
	measureStructure.setReadMode(oFF.QContextType.RESULT_SET, oFF.QMemberReadMode.BOOKED);
	this.addSingleStructureMemberFilterByType(oFF.DimensionType.MEASURE_STRUCTURE, measureName, oFF.ComparisonOperator.EQUAL);
	return measureStructure.getStructureMember(measureName);
};
oFF.QConvenienceCommands.prototype.addNewRestrictedMeasure = function(dimType, measureName, text, memberName, targetDim, targetMember)
{
	let dim = this.getQueryModel().getDimensionByType(dimType);
	let restrictedMeasure = dim.addNewRestrictedMeasure(measureName, text);
	let filter = restrictedMeasure.getFilter();
	filter.addSingleMemberFilterByDimension(dim, memberName, oFF.ComparisonOperator.EQUAL);
	let targetDimObj = this.getDimension(targetDim);
	filter.addSingleMemberFilterByDimension(targetDimObj, targetMember, oFF.ComparisonOperator.EQUAL);
	return this;
};
oFF.QConvenienceCommands.prototype.addNewRestrictedMeasureOnNode = function(dimType, measureName, text, memberName, targetDim, targetHierarchyName, targetNode)
{
	let measure = this.getQueryModel().getDimensionByType(dimType);
	let restrictedMeasure = measure.addNewRestrictedMeasure(measureName, text);
	let filter = restrictedMeasure.getFilter();
	let context = this.getQueryModel();
	let andFilter = oFF.QFactory.createFilterAnd(context);
	filter.setComplexRoot(andFilter);
	let measureOp = oFF.QFactory.createFilterOperation(context, measure.getKeyField());
	measureOp.setLowString(memberName);
	andFilter.add(measureOp);
	let restriction = oFF.QFactory.createFilterOperation(context, this.getDimension(targetDim).getHierarchyKeyField());
	restriction.setHierarchyName(targetHierarchyName);
	restriction.setLowString(targetNode);
	andFilter.add(restriction);
	return this;
};
oFF.QConvenienceCommands.prototype.addOverlapsGeometryFilter = function(dimension, fieldName, geometry)
{
	return this.addFilterByField(dimension.getFieldByName(fieldName), geometry, null, null, oFF.SpatialComparisonOperator.OVERLAPS, false);
};
oFF.QConvenienceCommands.prototype.addSingleMemberFilter = function(filterLayer, dimType, dimName, memberName, comparisonOperator)
{
	let selectionContainer = this.getFilterContainer(filterLayer);
	return selectionContainer.addSingleMemberFilterByName(this.resolveDimName(dimType, dimName), memberName, comparisonOperator);
};
oFF.QConvenienceCommands.prototype.addStringFilterByField = function(field, filterValue, comparisonOperator)
{
	return this.addFilterByField(field, oFF.XStringValue.create(filterValue), null, null, comparisonOperator, false);
};
oFF.QConvenienceCommands.prototype.addStringFilterByFieldNameAndOperator = function(dimName, fieldName, filterValue, comparisonOperator)
{
	return this.addStringFilterByName(dimName, fieldName, filterValue, comparisonOperator);
};
oFF.QConvenienceCommands.prototype.addStringFilterByName = function(dimName, fieldName, filterValue, comparisonOperator)
{
	let field = this.getFieldFromDimension(dimName, fieldName);
	return this.addStringFilterByField(field, filterValue, comparisonOperator);
};
oFF.QConvenienceCommands.prototype.addStringFilterByPresentation = function(dimName, presentationType, filterValue, comparisonOperator)
{
	let dimension = this.getDimension(dimName);
	if (oFF.isNull(dimension))
	{
		return null;
	}
	let field = dimension.getFirstFieldByType(presentationType);
	return this.addStringFilterByField(field, filterValue, comparisonOperator);
};
oFF.QConvenienceCommands.prototype.addTopToDimensions = function(numberOfTopEntries, rowsAxis)
{
	let measureDimensionName = this.getQueryModel().getMeasureDimension().getName();
	let dimensionsOnRows = rowsAxis.getDimensions();
	let numberOfDimensionsOnRows = dimensionsOnRows.size();
	for (let j = 0; j < numberOfDimensionsOnRows; j++)
	{
		let dimension = dimensionsOnRows.get(j);
		if (oFF.XString.isEqual(measureDimensionName, dimension.getName()))
		{
			continue;
		}
		dimension.setTopEntries(numberOfTopEntries);
	}
};
oFF.QConvenienceCommands.prototype.addTouchesGeometryFilter = function(dimension, fieldName, geometry)
{
	return this.addFilterByField(dimension.getFieldByName(fieldName), geometry, null, null, oFF.SpatialComparisonOperator.TOUCHES, false);
};
oFF.QConvenienceCommands.prototype.addWithinDistanceFilter = function(dimension, fieldName, point, distance, unit)
{
	return this.addFilterByField(dimension.getFieldByName(fieldName), point, oFF.XDoubleValue.create(distance), oFF.XStringValue.create(unit), oFF.SpatialComparisonOperator.WITHIN_DISTANCE, false);
};
oFF.QConvenienceCommands.prototype.addWithinGeometryFilter = function(dimension, fieldName, geometry)
{
	return this.addFilterByField(dimension.getFieldByName(fieldName), geometry, null, null, oFF.SpatialComparisonOperator.WITHIN, false);
};
oFF.QConvenienceCommands.prototype.alignTotals = function(modelLevel, name, alignment)
{
	let totalsController = this.getTotalsController(modelLevel, name);
	if (oFF.notNull(totalsController))
	{
		if (oFF.isNull(alignment))
		{
			totalsController.restoreTotalsAlignment(oFF.RestoreAction.DEFAULT_VALUE, false);
		}
		else
		{
			totalsController.setResultAlignment(alignment);
		}
	}
	return this;
};
oFF.QConvenienceCommands.prototype.alignTotalsWithPriority = function(modelLevel, name, alignment, priority)
{
	let totalsController = this.getTotalsController(modelLevel, name);
	if (oFF.notNull(totalsController))
	{
		if (oFF.isNull(alignment))
		{
			totalsController.restoreTotalsAlignment(oFF.RestoreAction.DEFAULT_VALUE, false);
		}
		else
		{
			totalsController.setResultAlignment(alignment);
		}
		totalsController.setAlignmentPriority(priority);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.applyCustomSort = function(dimension, field, customOrder, sortDirection, customSortPosition, createNewSortOperation)
{
	return this.getQueryModel().getSortingManager().applyCustomSort(dimension, field, customOrder, sortDirection, customSortPosition, createNewSortOperation);
};
oFF.QConvenienceCommands.prototype.applyFieldContainer = function(dimName, fieldContainerPresentationHelper)
{
	let dimension = this.getDimension(dimName);
	let fieldLayoutType = dimension.getFieldLayoutType();
	fieldContainerPresentationHelper.applyToQueryModel(this.getQueryModel(), dimName);
	if (fieldLayoutType === oFF.FieldLayoutType.FIELD_BASED)
	{
		fieldContainerPresentationHelper.applyMainAttributeForFieldLayout(dimension);
	}
	dimension.setFieldLayoutType(fieldLayoutType);
};
oFF.QConvenienceCommands.prototype.applyRankings = function(rankSettings)
{
	oFF.QRankingUtil.applyRankings(this.getQueryModel(), rankSettings);
};
oFF.QConvenienceCommands.prototype.applyRankingsWithoutReset = function(rankSettings)
{
	oFF.QRankingUtil.applyRankingsWithoutReset(this.getQueryModel(), rankSettings);
};
oFF.QConvenienceCommands.prototype.assignHierarchy = function(dimensionName, hierarchyName)
{
	let dimension = this.getDimension(dimensionName);
	if (oFF.notNull(dimension) && oFF.notNull(hierarchyName))
	{
		dimension.setHierarchyName(hierarchyName);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.buildRank = function(maxRows, measureName, secondaryMeasure, applyToDimensions, indicateTopBottom, versionElementId, versionDimension)
{
	return this.buildRankExt(maxRows, measureName, secondaryMeasure, applyToDimensions, indicateTopBottom, versionElementId, versionDimension, true, oFF.ConditionDimensionEvaluationType.ALL_IN_DRILL_DOWN);
};
oFF.QConvenienceCommands.prototype.buildRankExt = function(maxRows, measureName, secondaryMeasure, applyToDimensions, indicateTopBottom, versionElementId, versionDimension, boltCompatibilityMode, defaultEvaluationType)
{
	let queryModel = this.getQueryModel();
	let measureDimension = queryModel.getMeasureDimension();
	let accountDimension = queryModel.getAccountDimension();
	let newCondition = null;
	if (!this.getModelCapabilities().supportsConditions())
	{
		let sortingManager = queryModel.getSortingManager();
		let complexSorting = this.getSortForRank(measureName, secondaryMeasure, queryModel, sortingManager, versionElementId, versionDimension);
		if (oFF.ConditionComparisonOperator.TOP_N === indicateTopBottom)
		{
			complexSorting.setDirection(oFF.XSortDirection.DESCENDING);
		}
		else if (oFF.ConditionComparisonOperator.BOTTOM_N === indicateTopBottom)
		{
			complexSorting.setDirection(oFF.XSortDirection.ASCENDING);
		}
		if (oFF.notNull(accountDimension) && queryModel.getDrillManager().getAllZoomDrillOperationsForDimension(accountDimension).size() > 0)
		{
			complexSorting.setPreserveGrouping(true);
		}
		else
		{
			complexSorting.setPreserveGrouping(!boltCompatibilityMode && !oFF.XCollectionUtils.hasElements(applyToDimensions));
		}
		if (!boltCompatibilityMode && !oFF.XCollectionUtils.hasElements(applyToDimensions))
		{
			this.setRank(maxRows, complexSorting, null, this.getDefaultTopRankEvaluationDimensions(measureDimension));
		}
		else
		{
			this.setRank(maxRows, complexSorting, null, applyToDimensions);
		}
	}
	else
	{
		this.clearRankWithSortAndWindow(true);
		let conditionManager = queryModel.getConditionManager();
		if (oFF.isNull(conditionManager))
		{
			return null;
		}
		let iqDimensionMember1 = null;
		let accountDimensionMember = null;
		let iqDimensionMember2 = null;
		let primaryDimensionMember = null;
		let secondaryDimensionMember = null;
		let isSortOrRankByOutOfContextSecondaryMeasureActive = this.getSession().hasFeature(oFF.FeatureToggleOlap.SORT_AND_RANK_BY_SECONDARY_MEASURE_ENHANCEMENT);
		if (isSortOrRankByOutOfContextSecondaryMeasureActive)
		{
			let primaryCalculationDimension = queryModel.getPrimaryCalculationDimension();
			let secondaryCalculationDimension = queryModel.getSecondaryCalculationDimension();
			if (oFF.notNull(secondaryCalculationDimension))
			{
				let secondaryMeasureName = secondaryMeasure;
				if (oFF.XStringUtils.isNullOrEmpty(secondaryMeasureName))
				{
					secondaryMeasureName = oFF.QFilterUtil.getFirstMemberNameFromSecondaryCalculationDimensionDynamicFilter(queryModel);
				}
				if (oFF.XStringUtils.isNotNullAndNotEmpty(secondaryMeasureName))
				{
					secondaryDimensionMember = secondaryCalculationDimension.getDimensionMember(secondaryMeasureName);
					if (oFF.isNull(secondaryDimensionMember))
					{
						secondaryDimensionMember = oFF.OlapClientQueryObjectManagerUtils.getShareableObjectFromStorage(this.getQueryModel(), secondaryMeasureName, false);
					}
				}
			}
			if (oFF.notNull(primaryCalculationDimension))
			{
				primaryDimensionMember = primaryCalculationDimension.getDimensionMember(measureName);
				if (oFF.isNull(primaryDimensionMember))
				{
					primaryDimensionMember = oFF.OlapClientQueryObjectManagerUtils.getShareableObjectFromStorage(this.getQueryModel(), measureName, true);
				}
			}
		}
		else
		{
			let nonMeasureDimension = queryModel.getNonMeasureDimension();
			if (oFF.notNull(accountDimension))
			{
				if (oFF.XStringUtils.isNullOrEmpty(secondaryMeasure))
				{
					iqDimensionMember1 = measureDimension.getDimensionMember(oFF.QModelConstants.MEASURE_SIGNED_DATA);
				}
				accountDimensionMember = accountDimension.getDimensionMember(measureName);
			}
			else
			{
				iqDimensionMember1 = measureDimension.getDimensionMember(measureName);
			}
			if (oFF.XStringUtils.isNotNullAndNotEmpty(secondaryMeasure))
			{
				iqDimensionMember2 = oFF.notNull(nonMeasureDimension) ? nonMeasureDimension.getDimensionMember(secondaryMeasure) : measureDimension.getDimensionMember(secondaryMeasure);
			}
		}
		let versionDimensionToUse = oFF.notNull(versionDimension) ? versionDimension : queryModel.getVersionDimension();
		newCondition = this.getConditionWithUniqueName(conditionManager, "RANKING_CONDITION", "", 1);
		if (oFF.XCollectionUtils.hasElements(applyToDimensions))
		{
			newCondition.setDimensionEvaluationType(oFF.ConditionDimensionEvaluationType.GIVEN_LIST);
			if (oFF.isNull(applyToDimensions) || applyToDimensions.size() === 0)
			{
				throw oFF.XException.createRuntimeException("Parameter applyTopOnEveryDimension is false. Expect the list of Dimensions on which to apply");
			}
			for (let i = 0; i < applyToDimensions.size(); i++)
			{
				newCondition.addEvaluationDimension(queryModel.getDimensionByName(applyToDimensions.get(i)));
			}
		}
		else
		{
			if (this.isBw() || !boltCompatibilityMode)
			{
				newCondition.setDimensionEvaluationType(defaultEvaluationType);
			}
			else
			{
				newCondition.setDimensionEvaluationType(oFF.ConditionDimensionEvaluationType.GIVEN_LIST);
				let axisToUseForEDL = queryModel.getAxis(oFF.AxisType.ROWS);
				if (measureDimension.getAxis().getType() === oFF.AxisType.ROWS)
				{
					axisToUseForEDL = queryModel.getAxis(oFF.AxisType.COLUMNS);
				}
				for (let dimensionIndex = 0; dimensionIndex < axisToUseForEDL.size(); dimensionIndex++)
				{
					let dimension = axisToUseForEDL.get(dimensionIndex);
					if (dimension !== accountDimension && dimension !== versionDimensionToUse)
					{
						newCondition.addEvaluationDimension(dimension);
					}
				}
			}
		}
		let newThreshold = newCondition.createThreshold();
		if (isSortOrRankByOutOfContextSecondaryMeasureActive)
		{
			if (oFF.notNull(secondaryDimensionMember))
			{
				newThreshold.addMeasureCoordinate(secondaryDimensionMember);
			}
			if (oFF.notNull(primaryDimensionMember))
			{
				newThreshold.addMeasureCoordinate(primaryDimensionMember);
			}
		}
		else
		{
			if (oFF.notNull(iqDimensionMember1))
			{
				newThreshold.addMeasureCoordinate(iqDimensionMember1);
			}
			if (oFF.notNull(iqDimensionMember2))
			{
				newThreshold.addMeasureCoordinate(iqDimensionMember2);
			}
			if (oFF.notNull(accountDimensionMember))
			{
				newThreshold.addMeasureCoordinate(accountDimensionMember);
			}
		}
		if (oFF.XStringUtils.isNotNullAndNotEmpty(versionElementId) && oFF.notNull(versionDimensionToUse))
		{
			newThreshold.addMeasureCoordinate(versionDimensionToUse.getDimensionMember(versionElementId));
		}
		newThreshold.setComparisonOperator(indicateTopBottom);
		if (this.isBw())
		{
			newThreshold.getLow().setString(oFF.XInteger.convertToString(maxRows));
		}
		else
		{
			newThreshold.getLow().setInteger(maxRows);
		}
		this.setRank(maxRows, null, newCondition, applyToDimensions);
	}
	return newCondition;
};
oFF.QConvenienceCommands.prototype.clearAllFieldsFromModelArea = function(contextType)
{
	let dimensionNames = this.getDimensionNames();
	for (let i = 0; i < dimensionNames.size(); i++)
	{
		if (contextType === oFF.QContextType.RESULT_SET)
		{
			this.clearAllResultSetFields(dimensionNames.get(i));
		}
		else if (contextType === oFF.QContextType.SELECTOR)
		{
			this.clearAllSelectorFields(dimensionNames.get(i));
		}
	}
	return this;
};
oFF.QConvenienceCommands.prototype.clearAllFiltersExt = function(filterLayer, filterScopeVariables)
{
	if (filterLayer === oFF.FilterLayer.ALL)
	{
		this.clearAllFiltersExt(oFF.FilterLayer.DYNAMIC, filterScopeVariables);
		this.clearAllFiltersExt(oFF.FilterLayer.VISIBILITY, filterScopeVariables);
	}
	else
	{
		if (filterLayer === oFF.FilterLayer.EXTERNAL)
		{
			let externalFilters = this.getExternalFilters();
			let filterIt = externalFilters.getIterator();
			while (filterIt.hasNext())
			{
				this.clearFilterExtInternal(filterIt.next(), filterScopeVariables);
			}
		}
		else
		{
			let filterContainer = this.getFilterContainer(filterLayer);
			this.clearFilterExtInternal(filterContainer, filterScopeVariables);
		}
	}
	return this;
};
oFF.QConvenienceCommands.prototype.clearAllUniqueAxisProperties = function()
{
	if (this.getModelCapabilities().supportsUniqueAxisProperties())
	{
		let queryModel = this.getQueryModel();
		let uniqueAxisProperties = queryModel.getReturnedUniqueAxisProperties();
		if (oFF.notNull(uniqueAxisProperties))
		{
			uniqueAxisProperties.clearReturnedDataSelections(oFF.AxisType.ROWS);
			uniqueAxisProperties.clearReturnedDataSelections(oFF.AxisType.COLUMNS);
			uniqueAxisProperties.clearReturnedDataSelections(null);
		}
	}
	return this;
};
oFF.QConvenienceCommands.prototype.clearAttributeFields = function(dimType, dimName, attributeName, contextType)
{
	let dimension = this.resolveDimension(dimType, dimName);
	if (oFF.notNull(dimension))
	{
		let attribute = dimension.getAttributeByName(attributeName);
		if (oFF.notNull(attribute))
		{
			this.getAttributeFieldList(attribute, contextType).clear();
		}
	}
	return this;
};
oFF.QConvenienceCommands.prototype.clearAttributes = function(dimType, dimName, contextType)
{
	let dimension = this.resolveDimension(dimType, dimName);
	if (oFF.notNull(dimension))
	{
		let attributeList = dimension.getAttributesExt(contextType);
		if (oFF.XCollectionUtils.hasElements(attributeList))
		{
			attributeList.clear();
		}
	}
	return this;
};
oFF.QConvenienceCommands.prototype.clearAxis = function(targetAxis)
{
	let queryModel = this.getQueryModel();
	queryModel.getAxis(targetAxis).clear();
	return this;
};
oFF.QConvenienceCommands.prototype.clearFields = function(dimType, dimName, contextType)
{
	let dimension = this.resolveDimension(dimType, dimName);
	if (oFF.notNull(dimension))
	{
		if (dimension.getDimensionType() === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
		{
			dimension.getResultSetFields().clear();
		}
		else
		{
			this.getFieldList(dimension, contextType).clear();
		}
	}
	return this;
};
oFF.QConvenienceCommands.prototype.clearFilterByIdExt = function(filterLayer, uniqueId)
{
	if (filterLayer === oFF.FilterLayer.ALL)
	{
		this.clearFilterByIdExt(oFF.FilterLayer.DYNAMIC, uniqueId);
		this.clearFilterByIdExt(oFF.FilterLayer.VISIBILITY, uniqueId);
	}
	else
	{
		if (filterLayer === oFF.FilterLayer.EXTERNAL)
		{
			let externalFilterIt = this.getExternalFilters().getIterator();
			while (externalFilterIt.hasNext())
			{
				externalFilterIt.next().removeFilterById(uniqueId);
			}
		}
		else
		{
			let filterContainer = this.getFilterContainer(filterLayer);
			filterContainer.removeFilterById(uniqueId);
		}
	}
	return this;
};
oFF.QConvenienceCommands.prototype.clearFilterExpression = function(filter)
{
	if (oFF.notNull(filter) && !filter.isLocked())
	{
		if (filter.isCartesianProduct())
		{
			filter.getCartesianProduct().clear();
		}
		else if (filter.isComplexFilter())
		{
			filter.setComplexRoot(null);
		}
	}
};
oFF.QConvenienceCommands.prototype.clearFilterExtInternal = function(filterContainer, filterScopeVariables)
{
	if (filterScopeVariables === oFF.FilterScopeVariables.IGNORE || oFF.isNull(filterScopeVariables))
	{
		this.clearFilterExpression(filterContainer);
	}
	else if (filterScopeVariables === oFF.FilterScopeVariables.NOT_AFFECTED_BY_VARIABLES)
	{
		this.clearVariableSelections(filterContainer, false);
	}
	else if (filterScopeVariables === oFF.FilterScopeVariables.NOT_CREATED_BY_VARIABLES)
	{
		this.clearVariableSelections(filterContainer, true);
	}
};
oFF.QConvenienceCommands.prototype.clearFiltersByDimensionExt = function(filterLayer, dimType, dimName)
{
	let theDimName = this.resolveDimName(dimType, dimName);
	if (oFF.notNull(theDimName) && oFF.notNull(filterLayer))
	{
		if (filterLayer === oFF.FilterLayer.EXTERNAL)
		{
			let externalFilterIt = this.getExternalFilters().getIterator();
			while (externalFilterIt.hasNext())
			{
				oFF.QFilterUtil.clearSelectionsInContainerByDimension(theDimName, externalFilterIt.next());
			}
		}
		else
		{
			let filterExpression = this.getFilterContainer(filterLayer);
			oFF.QFilterUtil.clearSelectionsInContainerByDimension(theDimName, filterExpression);
		}
	}
	return this;
};
oFF.QConvenienceCommands.prototype.clearFiltersExceptDimensionType = function(filterLayer, dimType)
{
	if (filterLayer === oFF.FilterLayer.EXTERNAL)
	{
		let externalFilterIt = this.getExternalFilters().getIterator();
		while (externalFilterIt.hasNext())
		{
			this.clearFiltersExceptDimensionTypeInternal(externalFilterIt.next(), dimType);
		}
	}
	else
	{
		let filterExpression = this.getFilterContainer(filterLayer);
		this.clearFiltersExceptDimensionTypeInternal(filterExpression, dimType);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.clearFiltersExceptDimensionTypeInternal = function(filterExpression, dimType)
{
	if (filterExpression.isCartesianProduct())
	{
		let cartesianProduct = filterExpression.getCartesianProduct();
		if (oFF.notNull(cartesianProduct))
		{
			let i = cartesianProduct.size() - 1;
			while (i >= 0)
			{
				let cartesianList = cartesianProduct.getCartesianChild(i);
				let filterDimensionName = cartesianList.getDimensionName();
				let filterDimension = this.getQueryModel().getDimensionByName(filterDimensionName);
				if (oFF.notNull(filterDimension) && !filterDimension.getDimensionType().isTypeOf(dimType))
				{
					cartesianProduct.removeAt(i);
				}
				i--;
			}
		}
	}
	else
	{
		this.removeComplexSelection(filterExpression.getComplexRoot(), dimType);
	}
};
oFF.QConvenienceCommands.prototype.clearNonMainFieldsFromResultSet = function(dimType, dimName)
{
	let dimension = this.resolveDimension(dimType, dimName);
	if (oFF.notNull(dimension))
	{
		if (dimension.getFieldLayoutType() === oFF.FieldLayoutType.FIELD_BASED)
		{
			let mainAttribute = dimension.getMainAttribute();
			oFF.XStream.of(dimension.getFields()).filter((fi) => {
				return fi.getAttribute() !== mainAttribute && oFF.XStringUtils.isNullOrEmpty(fi.getSemanticType());
			}).forEach((displayField) => {
				this.removeField(null, dimension.getName(), null, displayField.getName(), oFF.QContextType.RESULT_SET);
			});
		}
		else
		{
			oFF.XStream.of(dimension.getAttributes()).filter((attr) => {
				return attr !== dimension.getMainAttribute();
			}).forEach((displayAttribute) => {
				this.removeAttributeFromResultSet(dimension.getName(), displayAttribute.getName());
			});
		}
	}
	return this;
};
oFF.QConvenienceCommands.prototype.clearNonMeasureFilters = function()
{
	return this.clearFiltersExceptDimensionType(oFF.FilterLayer.DYNAMIC, oFF.DimensionType.MEASURE_STRUCTURE);
};
oFF.QConvenienceCommands.prototype.clearNonStructureFilters = function()
{
	return this.clearFiltersExceptDimensionType(oFF.FilterLayer.DYNAMIC, oFF.DimensionType.ABSTRACT_STRUCTURE);
};
oFF.QConvenienceCommands.prototype.clearRank = function(conditionName)
{
	let modelCapabilities = this.getModelCapabilities();
	let queryModel = this.getQueryModel();
	if (this.isHana() && !modelCapabilities.supportsConditions())
	{
		this.clearRankWithSortAndWindow(false);
	}
	else
	{
		this.clearRankWithCondition(conditionName, queryModel);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.clearRankWithCondition = function(conditionName, queryModel)
{
	let conditionManager = queryModel.getConditionManager();
	if (oFF.notNull(conditionManager))
	{
		for (let conditionIndex = 0; conditionIndex < conditionManager.size(); )
		{
			let condition = conditionManager.get(conditionIndex);
			if (condition.isBackendCondition())
			{
				conditionIndex++;
				continue;
			}
			let thresholds = condition.getThresholds();
			if (oFF.XCollectionUtils.hasElements(thresholds))
			{
				let thresholdZeroIndex = thresholds.get(0);
				let conditionComparisonOperator = thresholdZeroIndex.getComparisonOperator();
				if (conditionComparisonOperator === oFF.ConditionComparisonOperator.TOP_N || conditionComparisonOperator === oFF.ConditionComparisonOperator.BOTTOM_N)
				{
					if (oFF.XStringUtils.isNullOrEmpty(conditionName) || oFF.XString.isEqual(conditionName, condition.getName()))
					{
						conditionManager.removeElement(condition);
					}
					else
					{
						conditionIndex++;
					}
				}
			}
		}
	}
};
oFF.QConvenienceCommands.prototype.clearRankWithSortAndWindow = function(eraseDimensionTop)
{
	let sortUsedInRanking = this.removePriorSortOperationForRank();
	if (eraseDimensionTop || oFF.notNull(sortUsedInRanking) && sortUsedInRanking.appliedTopOnIndividualDimension())
	{
		this.addTopToDimensions(0, this.getQueryModel().getAxesManager().getRowsAxis());
		this.addTopToDimensions(0, this.getQueryModel().getAxesManager().getColumnsAxis());
	}
	else
	{
		this.setMaxRows(-1);
	}
	return null;
};
oFF.QConvenienceCommands.prototype.clearSingleMemberFilterByName = function(dimName, memberName, comparisonOperator)
{
	let filterExpression = this.getFilterContainer(oFF.FilterLayer.DYNAMIC);
	filterExpression.removeSingleMemberFilterByName(dimName, memberName, comparisonOperator);
	return this;
};
oFF.QConvenienceCommands.prototype.clearSort = function(sortType, name)
{
	let sortingManager = this.getQueryModel().getSortingManager();
	let sortingOperations = sortingManager.getSortingOperations();
	if (oFF.isNull(sortType))
	{
		sortingOperations.clear();
	}
	else if (sortType === oFF.SortType.FIELD && oFF.XStringUtils.isNotNullAndNotEmpty(name))
	{
		let field = this.getField(name);
		if (oFF.notNull(field))
		{
			sortingManager.removeFieldSorting(field);
		}
	}
	else if (sortType === oFF.SortType.ABSTRACT_DIMENSION_SORT)
	{
		let dimension = this.getDimension(name);
		if (oFF.notNull(dimension))
		{
			sortingManager.removeFieldSortingByDimension(dimension);
			sortingManager.removeDimensionSorting(dimension);
		}
	}
	else if (sortType === oFF.SortType.MEASURE && oFF.XStringUtils.isNotNullAndNotEmpty(name))
	{
		let measure = this.getMeasure(name);
		if (oFF.notNull(measure))
		{
			sortingManager.removeMeasureSorting(measure);
		}
	}
	else if (sortType === oFF.SortType.DATA_CELL_VALUE && oFF.XStringUtils.isNotNullAndNotEmpty(name))
	{
		let axisTypeForDataCell = oFF.AxisType.lookup(name);
		if (oFF.notNull(axisTypeForDataCell))
		{
			sortingManager.removeDataCellSorting(axisTypeForDataCell);
		}
	}
	else if (sortType === oFF.SortType.COMPLEX && oFF.XStringUtils.isNotNullAndNotEmpty(name))
	{
		let axisTypeForComplex = oFF.AxisType.lookup(name);
		if (oFF.notNull(axisTypeForComplex))
		{
			sortingManager.removeComplexSorting(axisTypeForComplex);
		}
	}
	else
	{
		sortingOperations.queueEventing();
		for (let i = sortingOperations.size() - 1; i >= 0; i--)
		{
			let sorting = sortingOperations.get(i);
			if (sorting.getSortingType() === sortType)
			{
				if (oFF.isNull(name) || oFF.XString.isEqual(name, sorting.getName()))
				{
					sortingOperations.removeAt(i);
				}
			}
		}
		sortingOperations.resumeEventing();
	}
	return this;
};
oFF.QConvenienceCommands.prototype.clearUniqueAxisPropertiesForAxis = function(axisType)
{
	if (this.getModelCapabilities().supportsUniqueAxisProperties())
	{
		let queryModel = this.getQueryModel();
		let uniqueAxisProperties = queryModel.getReturnedUniqueAxisProperties();
		if (oFF.notNull(uniqueAxisProperties))
		{
			uniqueAxisProperties.clearReturnedDataSelections(axisType);
		}
	}
	return this;
};
oFF.QConvenienceCommands.prototype.clearVariableSelections = function(dynamicFilter, inspectLists)
{
	let cartesianProduct = dynamicFilter.getCartesianProduct();
	if (oFF.isNull(cartesianProduct))
	{
		return;
	}
	let filterIdsFromVariables = dynamicFilter.getFilterIdsFromVariables();
	if (oFF.XCollectionUtils.hasElements(filterIdsFromVariables))
	{
		let idxProd = 0;
		while (idxProd < cartesianProduct.size())
		{
			let cartesianList = cartesianProduct.getCartesianChild(idxProd);
			if (filterIdsFromVariables.contains(cartesianList.getUniqueId()))
			{
				if (inspectLists)
				{
					let idxList = 0;
					while (idxList < cartesianList.size())
					{
						let cartesianElement = cartesianList.getOp(idxList);
						if (filterIdsFromVariables.contains(cartesianElement.getUniqueId()))
						{
							idxList++;
						}
						else
						{
							cartesianList.removeAt(idxList);
						}
					}
				}
				idxProd++;
			}
			else
			{
				cartesianProduct.removeAt(idxProd);
			}
		}
	}
	else
	{
		cartesianProduct.clear();
	}
};
oFF.QConvenienceCommands.prototype.containsField = function(dimName, fieldName, contextType)
{
	let dimension = this.getDimension(dimName);
	if (oFF.notNull(dimension))
	{
		let field = dimension.getFieldByName(fieldName);
		if (oFF.notNull(field))
		{
			if (contextType === oFF.QContextType.RESULT_SET)
			{
				return dimension.getResultSetFields().contains(field);
			}
			return dimension.getSelectorFields().contains(field);
		}
	}
	return false;
};
oFF.QConvenienceCommands.prototype.containsResultSetFieldByType = function(dimName, presentationType)
{
	let dimension = this.getDimension(dimName);
	if (oFF.isNull(dimension))
	{
		return false;
	}
	let field = dimension.getFirstFieldByType(presentationType);
	if (oFF.isNull(field))
	{
		return false;
	}
	return this.containsResultSetField(dimName, field.getName());
};
oFF.QConvenienceCommands.prototype.containsSelectorFieldByType = function(dimName, presentationType)
{
	let dimension = this.getDimension(dimName);
	if (oFF.isNull(dimension))
	{
		return false;
	}
	let field = dimension.getFirstFieldByType(presentationType);
	if (oFF.isNull(field))
	{
		return false;
	}
	return this.containsSelectorField(dimName, field.getName());
};
oFF.QConvenienceCommands.prototype.createResetConfiguration = function()
{
	return oFF.CmdResetConfiguration.create();
};
oFF.QConvenienceCommands.prototype.deactivateAllServerConditions = function()
{
	this.getQueryModel().getConditionManager().deactivateServerConditions();
	return this;
};
oFF.QConvenienceCommands.prototype.deactivateAllServerExceptions = function()
{
	this.getQueryModel().getExceptionManager().deactivateServerExceptions();
	return this;
};
oFF.QConvenienceCommands.prototype.deactivateHierarchy = function(dimensionName)
{
	let dimension = this.getDimension(dimensionName);
	if (oFF.notNull(dimension))
	{
		dimension.setHierarchyActive(false);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.drillNode = function(dimName, nodeName, drillState)
{
	let dimension = this.getDimension(dimName);
	let drillElement = oFF.QFactory.createDrillPathElement(this, nodeName, dimension);
	this.getQueryModel().getDrillManager().setDrillStateElement(drillElement, drillState);
	return null;
};
oFF.QConvenienceCommands.prototype.excludeExists = function(posNegPair)
{
	return posNegPair.getSecondObject().hasElements();
};
oFF.QConvenienceCommands.prototype.getAbstractRendering = function(type, protocol)
{
	let queryManager = this.getQueryManager();
	if (oFF.isNull(queryManager))
	{
		return null;
	}
	return queryManager.getAbstractRendering(type, protocol);
};
oFF.QConvenienceCommands.prototype.getAccountDimensionMemberAliasByName = function(queryModel, memberName)
{
	return this.getMeasureMemberAliasByName(queryModel, memberName);
};
oFF.QConvenienceCommands.prototype.getAccountDimensionMemberNameByAlias = function(queryModel, aliasName)
{
	return this.getMeasureMemberNameByAlias(queryModel, aliasName);
};
oFF.QConvenienceCommands.prototype.getAllRanks = function()
{
	let ranks = oFF.XList.create();
	if (!this.getModelCapabilities().supportsConditions())
	{
		let rank = this.getRank(null);
		if (oFF.notNull(rank))
		{
			ranks.add(rank);
		}
	}
	else
	{
		let conditionManager = this.getQueryModel().getConditionManager();
		if (oFF.notNull(conditionManager))
		{
			for (let conditionIndex = 0; conditionIndex < conditionManager.size(); conditionIndex++)
			{
				let condition = conditionManager.get(conditionIndex);
				if (condition.isBackendCondition())
				{
					continue;
				}
				let thresholds = condition.getThresholds();
				if (oFF.XCollectionUtils.hasElements(thresholds))
				{
					let thresholdZeroIndex = thresholds.get(0);
					let conditionComparisonOperator = thresholdZeroIndex.getComparisonOperator();
					if (conditionComparisonOperator === oFF.ConditionComparisonOperator.TOP_N || conditionComparisonOperator === oFF.ConditionComparisonOperator.BOTTOM_N)
					{
						let maxRows = oFF.XInteger.convertFromString(thresholdZeroIndex.getLow().getString());
						ranks.add(oFF.QFactory.createRankInfo(maxRows, null, condition));
					}
				}
			}
		}
	}
	return ranks;
};
oFF.QConvenienceCommands.prototype.getApplication = function()
{
	return this.getOlapEnv().getApplication();
};
oFF.QConvenienceCommands.prototype.getAsciiResultSet = function(maxRowCount, maxColumnCount)
{
	let queryManager = this.getQueryManager();
	if (oFF.isNull(queryManager))
	{
		return null;
	}
	let resultSetContainer = queryManager.getActiveResultSetContainer();
	if (oFF.isNull(resultSetContainer))
	{
		return null;
	}
	let referenceGrid = oFF.ReferenceGridFactory.createReferenceGridSimple(resultSetContainer.getClassicResultSet());
	return referenceGrid.exportToAsciiExt(-1, true, true, 0, maxRowCount, 0, maxColumnCount);
};
oFF.QConvenienceCommands.prototype.getAssignedHierarchy = function(dimensionName)
{
	let dimension = this.getDimension(dimensionName);
	return oFF.notNull(dimension) ? dimension.getHierarchyName() : null;
};
oFF.QConvenienceCommands.prototype.getAttributeFieldList = function(attribute, contextType)
{
	return attribute.getFieldsExt(contextType);
};
oFF.QConvenienceCommands.prototype.getAvailableFieldContainerDisplays = function(dimName, attributeName)
{
	let result = oFF.XList.create();
	this.resolveFieldContainerPresentationHelper(dimName, attributeName).ifPresent((fieldContainerPresentationHelper) => {
		let keyViewsAvailable = oFF.XCollectionUtils.hasElements(fieldContainerPresentationHelper.getKeyViewsAvailable());
		let textViewsAvailable = oFF.XCollectionUtils.hasElements(fieldContainerPresentationHelper.getTextViewsAvailable());
		if (keyViewsAvailable)
		{
			result.add(oFF.FieldContainerDisplay.KEY);
		}
		if (textViewsAvailable)
		{
			result.add(oFF.FieldContainerDisplay.TEXT);
		}
		if (keyViewsAvailable && textViewsAvailable)
		{
			result.add(oFF.FieldContainerDisplay.KEY_AND_TEXT);
			result.add(oFF.FieldContainerDisplay.TEXT_AND_KEY);
		}
	});
	return result;
};
oFF.QConvenienceCommands.prototype.getAvailableFieldContainerKeyDisplays = function(dimName, attributeName)
{
	let helperOptional = this.resolveFieldContainerPresentationHelper(dimName, attributeName);
	let result;
	if (helperOptional.isPresent())
	{
		result = helperOptional.get().getKeyDisplaysAvailable();
	}
	else
	{
		result = oFF.XList.create();
	}
	return result;
};
oFF.QConvenienceCommands.prototype.getAvailableFieldContainerKeyViews = function(dimName, attributeName)
{
	let helperOptional = this.resolveFieldContainerPresentationHelper(dimName, attributeName);
	let result;
	if (helperOptional.isPresent())
	{
		result = helperOptional.get().getKeyViewsAvailable();
	}
	else
	{
		result = oFF.XList.create();
	}
	return result;
};
oFF.QConvenienceCommands.prototype.getAvailableFieldContainerTextViews = function(dimName, attributeName)
{
	let helperOptional = this.resolveFieldContainerPresentationHelper(dimName, attributeName);
	let result;
	if (helperOptional.isPresent())
	{
		result = helperOptional.get().getTextViewsAvailable();
	}
	else
	{
		result = oFF.XList.create();
	}
	return result;
};
oFF.QConvenienceCommands.prototype.getCalculatedDimensionsInUse = function()
{
	let usedDimensions = oFF.XHashSetOfString.create();
	let queryModel = this.getQueryModel();
	usedDimensions.addAll(queryModel.getRowsAxis().getDimensionNames());
	usedDimensions.addAll(queryModel.getColumnsAxis().getDimensionNames());
	oFF.DimensionUsageAnalyzer2.addDimensionsUsedByMembers(usedDimensions, queryModel.getMeasureDimension());
	oFF.DimensionUsageAnalyzer2.addDimensionsUsedByMembers(usedDimensions, queryModel.getNonMeasureDimension());
	oFF.DimensionUsageAnalyzer2.addDimensionsUsedByMembers(usedDimensions, queryModel.getNonMeasureDimension2());
	oFF.DimensionUsageAnalyzer2.addDimensionsUsedByMembers(usedDimensions, queryModel.getAccountDimension());
	oFF.DimensionUsageAnalyzer2.addDimensionsUsedInFilters(queryModel, usedDimensions);
	let filteredDimensions = oFF.XHashSetOfString.create();
	filteredDimensions.addAll(oFF.XCollectionUtils.filter(usedDimensions, (dimensionName) => {
		let dimension = queryModel.getDimensionByName(dimensionName);
		return oFF.notNull(dimension) && dimension.getDimensionType().isTypeOf(oFF.DimensionType.CALCULATED_DIMENSION);
	}));
	return filteredDimensions;
};
oFF.QConvenienceCommands.prototype.getCellContextManager = function()
{
	return this.getQueryModel().getCellContextManager();
};
oFF.QConvenienceCommands.prototype.getComponentType = function()
{
	return this.getOlapComponentType();
};
oFF.QConvenienceCommands.prototype.getConditionWithUniqueName = function(conditionManager, conditionNamePrefix, spacer, rankNumber)
{
	let conditionName = oFF.XStringUtils.isNullOrEmpty(spacer) ? conditionNamePrefix : oFF.XStringUtils.concatenate3(conditionNamePrefix, spacer, oFF.XInteger.convertToString(rankNumber));
	let newCondition = conditionManager.createNewCondition(conditionName);
	if (oFF.isNull(newCondition))
	{
		return this.getConditionWithUniqueName(conditionManager, conditionNamePrefix, "_", rankNumber + 1);
	}
	return newCondition;
};
oFF.QConvenienceCommands.prototype.getCsvResultSet = function(maxRowCount, maxColumnCount)
{
	let queryManager = this.getQueryManager();
	if (oFF.isNull(queryManager))
	{
		return null;
	}
	let resultSetContainer = queryManager.getActiveResultSetContainer();
	if (oFF.isNull(resultSetContainer))
	{
		return null;
	}
	let referenceGrid = oFF.ReferenceGridFactory.createReferenceGridSimple(resultSetContainer.getClassicResultSet());
	return referenceGrid.exportToCsv(maxRowCount, maxColumnCount);
};
oFF.QConvenienceCommands.prototype.getDataCellByDrillPath = function(columnDrillPath, rowDrillPath)
{
	let measureDimension = this.getQueryModel().getMeasureDimension();
	let nonMeasureDimension = this.getQueryModel().getNonMeasureDimension();
	let filters1 = measureDimension.getFilterConsideringLinkedFilters();
	let filters2 = oFF.notNull(nonMeasureDimension) ? nonMeasureDimension.getFilterConsideringLinkedFilters() : null;
	let measureMember = this.getStructureMember(columnDrillPath, rowDrillPath, (dim) => {
		return dim.isMeasureStructure();
	});
	let secondaryStructureMember = this.getStructureMember(columnDrillPath, rowDrillPath, (dim) => {
		return dim.getMetadata().isSecondaryStructure();
	});
	if (oFF.isNull(measureMember) && oFF.isNull(secondaryStructureMember) && !oFF.XCollectionUtils.hasElements(filters1) && !oFF.XCollectionUtils.hasElements(filters2))
	{
		return null;
	}
	let dataCell = null;
	let structure1 = oFF.notNull(measureMember) ? measureMember : this.getStructureMemberFromFilter(measureDimension);
	let structure2 = oFF.notNull(secondaryStructureMember) ? secondaryStructureMember : this.getStructureMemberFromFilter(nonMeasureDimension);
	let dataCells = structure1.getQueryDataCells();
	if (dataCells.size() === 1)
	{
		dataCell = dataCells.get(0);
	}
	if (oFF.notNull(structure2))
	{
		dataCell = oFF.XStream.of(dataCells).find((dc) => {
			return dc.hasMeasureReference(structure1.getName()) && dc.hasMeasureReference(structure2.getName());
		}).get();
	}
	return dataCell;
};
oFF.QConvenienceCommands.prototype.getDataSource = function()
{
	let queryModel = this.getQueryModel();
	if (oFF.isNull(queryModel))
	{
		return null;
	}
	return queryModel.getDataSource();
};
oFF.QConvenienceCommands.prototype.getDataSourceOrigin = function()
{
	return this.getDataSource();
};
oFF.QConvenienceCommands.prototype.getDataSourceTarget = function()
{
	return this.getDataSource();
};
oFF.QConvenienceCommands.prototype.getDefaultTopRankEvaluationDimensions = function(leadingStructure)
{
	let queryModel = leadingStructure.getQueryModel();
	let axisToUseForEDL = queryModel.getAxis(oFF.AxisType.ROWS);
	let accountDimension = queryModel.getAccountDimension();
	let versionDimensionToUse = queryModel.getVersionDimension();
	if (leadingStructure.getAxis().getType() === oFF.AxisType.ROWS)
	{
		axisToUseForEDL = queryModel.getAxis(oFF.AxisType.COLUMNS);
	}
	return oFF.XStream.of(axisToUseForEDL).filter((dimension) => {
		return dimension !== accountDimension && dimension !== versionDimensionToUse;
	}).collect(oFF.XStreamCollector.toListOfString((dim) => {
		return dim.getName();
	}));
};
oFF.QConvenienceCommands.prototype.getDimension = function(dimName)
{
	return this.getQueryModel().getDimensionByName(dimName);
};
oFF.QConvenienceCommands.prototype.getDimensionAccessor = function()
{
	return this.getQueryManager().getDimensionAccessor();
};
oFF.QConvenienceCommands.prototype.getDimensionMeasureMemberAliasByName = function(dimension, memberName)
{
	if (oFF.notNull(dimension))
	{
		let structureMember = dimension.getPlaceholderIdMemberMap().getByKey(memberName);
		if (oFF.isNull(structureMember))
		{
			structureMember = dimension.getStructureMember(memberName);
		}
		if (oFF.notNull(structureMember))
		{
			return structureMember.getAliasName();
		}
	}
	return null;
};
oFF.QConvenienceCommands.prototype.getDimensionMeasureMemberNameByAlias = function(dimension, aliasName)
{
	if (oFF.notNull(dimension))
	{
		return dimension.getPlaceholderIdByAlias(aliasName);
	}
	return null;
};
oFF.QConvenienceCommands.prototype.getDimensionNames = function()
{
	let queryModel = this.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		return oFF.XCollectionUtils.createListOfNames(queryModel.getDimensions());
	}
	return oFF.XList.create();
};
oFF.QConvenienceCommands.prototype.getDimensionRuntimeMemberNameByAlias = function(dimension, aliasName)
{
	if (oFF.notNull(dimension))
	{
		return dimension.getRuntimePlaceholderIdByAlias(aliasName);
	}
	return null;
};
oFF.QConvenienceCommands.prototype.getDimensionsContainingValueType = function(valueType)
{
	let dimList = oFF.XList.create();
	let dimensions = this.getQueryModel().getDimensions();
	let count = dimensions.getDimensionCount();
	for (let idxDim = 0; idxDim < count; idxDim++)
	{
		let dim = dimensions.getDimensionAt(idxDim);
		let fields = dim.getFields();
		for (let idxField = 0; idxField < fields.size(); idxField++)
		{
			let field = fields.getFieldAt(idxField);
			if (field.getValueType() === valueType)
			{
				dimList.add(dim);
				break;
			}
		}
	}
	return dimList;
};
oFF.QConvenienceCommands.prototype.getDrillManager = function()
{
	return this.getQueryModel().getDrillManager();
};
oFF.QConvenienceCommands.prototype.getDynamicVariables = function()
{
	let variables = this.getQueryModel().getVariables();
	let dynamicVariables = oFF.XList.create();
	let numberOfVariables = variables.size();
	for (let i = 0; i < numberOfVariables; i++)
	{
		let variable = variables.get(i);
		if (variable.isDynamicOrExitVariable())
		{
			dynamicVariables.add(variable);
		}
	}
	return dynamicVariables;
};
oFF.QConvenienceCommands.prototype.getExecuteRequestOnOldResultSet = function()
{
	return this.getQueryManager().getExecuteRequestOnOldResultSet();
};
oFF.QConvenienceCommands.prototype.getExternalFilters = function()
{
	return this.getQueryModel().getFilter().getLinkedFilters();
};
oFF.QConvenienceCommands.prototype.getField = function(fieldName)
{
	return this.getQueryModel().getFieldByName(fieldName);
};
oFF.QConvenienceCommands.prototype.getFieldAccessorSingle = function()
{
	let queryModel = this.getQueryModel();
	if (oFF.isNull(queryModel))
	{
		return null;
	}
	return queryModel.getFieldAccessorSingle();
};
oFF.QConvenienceCommands.prototype.getFieldContainerDefaultKeyDisplay = function(dimName, attributeName)
{
	let helperOptional = this.resolveFieldContainerPresentationHelper(dimName, attributeName);
	let keyDisplay = null;
	if (helperOptional.isPresent())
	{
		keyDisplay = helperOptional.get().getKeyDisplayDefault();
	}
	return keyDisplay;
};
oFF.QConvenienceCommands.prototype.getFieldContainerDefaultKeyView = function(dimName, attributeName)
{
	let helperOptional = this.resolveFieldContainerPresentationHelper(dimName, attributeName);
	let presentationType = null;
	if (helperOptional.isPresent())
	{
		presentationType = helperOptional.get().getKeyViewDefault();
	}
	return presentationType;
};
oFF.QConvenienceCommands.prototype.getFieldContainerDefaultTextView = function(dimName, attributeName)
{
	let helperOptional = this.resolveFieldContainerPresentationHelper(dimName, attributeName);
	let presentationType = null;
	if (helperOptional.isPresent())
	{
		presentationType = helperOptional.get().getTextViewDefault();
	}
	return presentationType;
};
oFF.QConvenienceCommands.prototype.getFieldContainerDisplay = function(dimName, attributeName)
{
	let helperOptional = this.resolveFieldContainerPresentationHelper(dimName, attributeName);
	let fieldContainerDisplay = oFF.FieldContainerDisplay.NO_DISPLAY;
	if (helperOptional.isPresent())
	{
		fieldContainerDisplay = helperOptional.get().getDisplayAs();
	}
	return fieldContainerDisplay;
};
oFF.QConvenienceCommands.prototype.getFieldContainerKeyDisplay = function(dimName, attributeName)
{
	let helperOptional = this.resolveFieldContainerPresentationHelper(dimName, attributeName);
	let keyDisplay = null;
	if (helperOptional.isPresent())
	{
		keyDisplay = helperOptional.get().getKeyDisplay();
	}
	return keyDisplay;
};
oFF.QConvenienceCommands.prototype.getFieldContainerKeyView = function(dimName, attributeName)
{
	let helperOptional = this.resolveFieldContainerPresentationHelper(dimName, attributeName);
	let presentationType = null;
	if (helperOptional.isPresent())
	{
		presentationType = helperOptional.get().getKeyView();
	}
	return presentationType;
};
oFF.QConvenienceCommands.prototype.getFieldContainerTextView = function(dimName, attributeName)
{
	let helperOptional = this.resolveFieldContainerPresentationHelper(dimName, attributeName);
	let presentationType = null;
	if (helperOptional.isPresent())
	{
		presentationType = helperOptional.get().getTextView();
	}
	return presentationType;
};
oFF.QConvenienceCommands.prototype.getFieldFromDimension = function(dimName, fieldName)
{
	let dimension = this.getDimension(dimName);
	if (oFF.isNull(dimension))
	{
		return null;
	}
	return dimension.getFieldByName(fieldName);
};
oFF.QConvenienceCommands.prototype.getFieldList = function(dimension, contextType)
{
	if (dimension.getFieldLayoutType() === oFF.FieldLayoutType.ATTRIBUTE_BASED)
	{
		return dimension.getMainAttribute().getFieldsExt(contextType);
	}
	return dimension.getFieldsExt(contextType);
};
oFF.QConvenienceCommands.prototype.getFilterById = function(uniqueId)
{
	return this.getFilterContainer(oFF.FilterLayer.DYNAMIC).getFilterById(uniqueId);
};
oFF.QConvenienceCommands.prototype.getFilterContainer = function(filterLayer)
{
	let filter = this.getQueryModel().getFilter();
	if (filterLayer === oFF.FilterLayer.VISIBILITY)
	{
		return filter.getVisibilityFilter();
	}
	return filter.getDynamicFilter();
};
oFF.QConvenienceCommands.prototype.getFirstGISDimension = function()
{
	let dimList = this.getDimensionsContainingValueType(oFF.XValueType.POINT);
	if (dimList.isEmpty())
	{
		dimList = this.getDimensionsContainingValueType(oFF.XValueType.MULTI_POINT);
	}
	if (dimList.isEmpty())
	{
		dimList = this.getDimensionsContainingValueType(oFF.XValueType.POLYGON);
	}
	if (dimList.isEmpty())
	{
		dimList = this.getDimensionsContainingValueType(oFF.XValueType.MULTI_POLYGON);
	}
	if (dimList.isEmpty())
	{
		dimList = this.getDimensionsContainingValueType(oFF.XValueType.LINE_STRING);
	}
	if (dimList.isEmpty())
	{
		dimList = this.getDimensionsContainingValueType(oFF.XValueType.MULTI_LINE_STRING);
	}
	let dim = null;
	if (dimList.hasElements())
	{
		dim = dimList.get(0);
	}
	return dim;
};
oFF.QConvenienceCommands.prototype.getGISAttributesForDimension = function(dimension)
{
	let gisFields = oFF.XList.create();
	let dimensionFields = dimension.getFields();
	for (let idxField = 0; idxField < dimensionFields.size(); idxField++)
	{
		let field = dimensionFields.getFieldAt(idxField);
		if (field.getValueType().isSpatial())
		{
			gisFields.add(field);
		}
	}
	return gisFields;
};
oFF.QConvenienceCommands.prototype.getHierarchyCatalogItem = function(dimension)
{
	let hierarchyName = dimension.getHierarchyName();
	let hierarchies = dimension.getHierarchies();
	let hierarchyObjects = hierarchies.getObjects();
	let size = hierarchyObjects.size();
	for (let i = 0; i < size; i++)
	{
		let hierarchyCatalogItem = hierarchyObjects.get(i);
		if (oFF.XString.isEqual(hierarchyCatalogItem.getHierarchyName(), hierarchyName))
		{
			return hierarchyCatalogItem;
		}
	}
	return null;
};
oFF.QConvenienceCommands.prototype.getKeyRefStorage = function()
{
	return this.getQueryModel().getKeyRefStorage();
};
oFF.QConvenienceCommands.prototype.getMaxColumns = function()
{
	return this.getQueryManager().getMaxColumns();
};
oFF.QConvenienceCommands.prototype.getMaxNumberOfDimensionsForExceptionAggregation = function(memberType, aggrType)
{
	let excepAggrMgr = this.getQueryModel()._getExceptionAggregationManagerBase();
	return oFF.isNull(excepAggrMgr) ? 0 : excepAggrMgr._getMaxNumberOfAllowedDimensions(memberType, aggrType);
};
oFF.QConvenienceCommands.prototype.getMaxResultRecords = function()
{
	return this.getQueryManager().getMaxResultRecords();
};
oFF.QConvenienceCommands.prototype.getMaxRows = function()
{
	return this.getQueryManager().getMaxRows();
};
oFF.QConvenienceCommands.prototype.getMeasure = function(measureName)
{
	return this.getQueryModel().getMeasureDimension().getStructureMember(measureName);
};
oFF.QConvenienceCommands.prototype.getMeasureMemberAliasByName = function(queryModel, memberName)
{
	let queryManager = queryModel.getQueryManager();
	if (queryManager.getMode() === oFF.QueryManagerMode.BLENDING)
	{
		let blendingSources = queryManager.getQueryModel().getBlendingSources();
		for (let i = 0; i < blendingSources.size(); i++)
		{
			let blendingSource = blendingSources.get(i);
			let prefix = oFF.XStringUtils.concatenate2(blendingSource.getQueryAliasName(), ".");
			let nameWithoutPrefix = oFF.XString.replace(memberName, prefix, "");
			let leafQueryModel = blendingSource.getQueryModel();
			let aliasName = this.getMeasureMemberAliasByName(leafQueryModel, nameWithoutPrefix);
			if (oFF.notNull(aliasName))
			{
				if (oFF.XString.containsString(memberName, prefix))
				{
					aliasName = oFF.XStringUtils.concatenate2(prefix, aliasName);
				}
				return aliasName;
			}
		}
	}
	else
	{
		let leafAliasName = this.getDimensionMeasureMemberAliasByName(queryModel.getMeasureDimension(), memberName);
		if (oFF.isNull(leafAliasName))
		{
			leafAliasName = this.getDimensionMeasureMemberAliasByName(queryModel.getAccountDimension(), memberName);
		}
		return leafAliasName;
	}
	return null;
};
oFF.QConvenienceCommands.prototype.getMeasureMemberNameByAlias = function(queryModel, aliasName)
{
	if (oFF.isNull(aliasName))
	{
		return null;
	}
	let queryManager = queryModel.getQueryManager();
	if (queryManager.getMode() === oFF.QueryManagerMode.BLENDING)
	{
		let blendingSources = queryManager.getQueryModel().getBlendingSources();
		for (let i = 0; i < blendingSources.size(); i++)
		{
			let blendingSource = blendingSources.get(i);
			let prefix = oFF.XStringUtils.concatenate2(blendingSource.getQueryAliasName(), ".");
			let aliasNameWithoutPrefix = oFF.XString.replace(aliasName, prefix, "");
			let leafQueryModel = blendingSource.getQueryModel();
			let name = this.getMeasureMemberNameByAlias(leafQueryModel, aliasNameWithoutPrefix);
			if (oFF.notNull(name))
			{
				if (oFF.XString.containsString(aliasName, prefix))
				{
					name = oFF.XStringUtils.concatenate2(prefix, name);
				}
				return name;
			}
		}
	}
	else
	{
		let leafName = this.getDimensionMeasureMemberNameByAlias(queryModel.getMeasureDimension(), aliasName);
		if (oFF.isNull(leafName))
		{
			leafName = this.getDimensionMeasureMemberNameByAlias(queryModel.getAccountDimension(), aliasName);
		}
		return leafName;
	}
	return null;
};
oFF.QConvenienceCommands.prototype.getMemberVisibilityByFilter = function(dimension)
{
	let cartProd = dimension.getQueryModel().getFilter().getDynamicFilter().getCartesianProduct();
	let cartList = oFF.notNull(cartProd) ? cartProd.getCartesianList(dimension) : null;
	let positiveList = oFF.XList.create();
	let negativeList = oFF.XList.create();
	if (oFF.XCollectionUtils.hasElements(cartList))
	{
		for (let i = 0; i < cartList.size(); i++)
		{
			let element = cartList.getCartesianElement(i);
			let setSign = element.getSetSign();
			let comparisonOperator = element.getComparisonOperator();
			let value = element.getLow().getValue();
			if (oFF.notNull(value))
			{
				if (setSign === oFF.SetSign.INCLUDING && comparisonOperator === oFF.ComparisonOperator.EQUAL || setSign === oFF.SetSign.EXCLUDING && comparisonOperator === oFF.ComparisonOperator.NOT_EQUAL)
				{
					positiveList.add(value.getStringRepresentation());
				}
				else if (setSign === oFF.SetSign.EXCLUDING && comparisonOperator === oFF.ComparisonOperator.EQUAL || setSign === oFF.SetSign.INCLUDING && comparisonOperator === oFF.ComparisonOperator.NOT_EQUAL)
				{
					negativeList.add(value.getStringRepresentation());
				}
			}
		}
	}
	return oFF.XPair.create(positiveList, negativeList);
};
oFF.QConvenienceCommands.prototype.getMembersInResultSetOrder = function(dimension)
{
	if (!dimension.isStructure())
	{
		return oFF.XListOfNameObject.create();
	}
	let allMembers = oFF.XStream.of(dimension.getAllStructureMembers()).filter((member) => {
		return oFF.notNull(member) && !member.isReleased();
	}).map((s) => {
		return s.getDimensionMember();
	}).collect(oFF.XStreamCollector.toListOfNameObject());
	let sorting = this.tryGetSortingForDimension(dimension);
	if (oFF.isNull(sorting))
	{
		return allMembers;
	}
	let sortingType = sorting.getSortingType();
	let direction = sorting.getDirection();
	let customSort = sorting.getCustomSort();
	if (oFF.XCollectionUtils.hasElements(customSort))
	{
		let customSortMembers = oFF.XStream.ofString(customSort).map((name) => {
			return allMembers.getByKey(name.toString());
		}).collect(oFF.XStreamCollector.toListOfNameObject());
		if (customSortMembers.size() < allMembers.size())
		{
			oFF.XCollectionUtils.addAllIfNotPresent(customSortMembers, allMembers);
		}
		return customSortMembers;
	}
	allMembers.sortByComparator(oFF.XComparatorLambda.create((first, second) => {
		let dir = direction === oFF.XSortDirection.DESCENDING ? -1 : 1;
		let order = 0;
		if (sortingType === oFF.SortType.MEMBER_KEY)
		{
			order = oFF.XString.compare(first.getName(), second.getName());
		}
		else if (sortingType === oFF.SortType.MEMBER_TEXT)
		{
			order = oFF.XString.compare(first.getText(), second.getText());
		}
		else if (sortingType === oFF.SortType.FIELD)
		{
			let field = sorting.getField();
			let firstValue = first.getFieldValue(field);
			let secondValue = second.getFieldValue(field);
			order = oFF.XString.compare(firstValue.getValue().getStringRepresentation(), secondValue.getValue().getStringRepresentation());
		}
		return oFF.XIntegerValue.create(order * dir);
	}));
	return allMembers;
};
oFF.QConvenienceCommands.prototype.getModelCapabilities = function()
{
	let queryModel = this.getQueryModel();
	if (oFF.isNull(queryModel))
	{
		return null;
	}
	return queryModel.getModelCapabilities();
};
oFF.QConvenienceCommands.prototype.getName = function()
{
	return null;
};
oFF.QConvenienceCommands.prototype.getOffsetColumns = function()
{
	return this.getQueryManager().getOffsetColumns();
};
oFF.QConvenienceCommands.prototype.getOffsetRows = function()
{
	return this.getQueryManager().getOffsetRows();
};
oFF.QConvenienceCommands.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.CONVENIENCE_CMDS;
};
oFF.QConvenienceCommands.prototype.getOlapEnv = function()
{
	return this.m_olapEnvironment;
};
oFF.QConvenienceCommands.prototype.getProcess = function()
{
	return this.getApplication().getProcess();
};
oFF.QConvenienceCommands.prototype.getQueryManager = function()
{
	if (oFF.notNull(this.m_activeComponent))
	{
		let olapComponentType = this.m_activeComponent.getOlapComponentType();
		if (olapComponentType === oFF.OlapComponentType.QUERY_MANAGER)
		{
			return this.m_activeComponent;
		}
		else if (olapComponentType === oFF.OlapComponentType.QUERY_SERVICE_CONFIG)
		{
			let dp = this.m_activeComponent;
			return dp.getQueryManager();
		}
	}
	return null;
};
oFF.QConvenienceCommands.prototype.getQueryModel = function()
{
	let result = null;
	if (oFF.notNull(this.m_activeComponent))
	{
		let olapComponentType = this.m_activeComponent.getOlapComponentType();
		if (olapComponentType === oFF.OlapComponentType.QUERY_MODEL)
		{
			result = this.m_activeComponent;
		}
		else
		{
			let queryManager = this.getQueryManager();
			if (oFF.notNull(queryManager))
			{
				result = queryManager.getQueryModel();
			}
		}
	}
	return result;
};
oFF.QConvenienceCommands.prototype.getQueryServiceConfig = function()
{
	if (oFF.notNull(this.m_activeComponent))
	{
		let olapComponentType = this.m_activeComponent.getOlapComponentType();
		if (olapComponentType === oFF.OlapComponentType.QUERY_SERVICE_CONFIG)
		{
			return this.m_activeComponent;
		}
		else if (olapComponentType === oFF.OlapComponentType.QUERY_MANAGER)
		{
			let qm = this.m_activeComponent;
			return qm.getQueryServiceConfig();
		}
	}
	return null;
};
oFF.QConvenienceCommands.prototype.getRank = function(conditionName)
{
	let queryModel = this.getQueryModel();
	let complexSortForRank = null;
	let conditionForRank = null;
	let maxRows = 0;
	if (!this.getModelCapabilities().supportsConditions())
	{
		let sortingOperations = queryModel.getSortingManager().getSortingOperations();
		let numberOfSortOperations = sortingOperations.size();
		for (let i = 0; i < numberOfSortOperations; i++)
		{
			let iqGenericSorting = sortingOperations.get(i);
			let sortingType = iqGenericSorting.getSortingType();
			if (sortingType === oFF.SortType.COMPLEX || sortingType === oFF.SortType.DATA_CELL_VALUE)
			{
				let complexSorting = iqGenericSorting;
				if (complexSorting.usedInRanking())
				{
					complexSortForRank = complexSorting;
					if (complexSortForRank.appliedTopOnIndividualDimension())
					{
						maxRows = queryModel.getRowsAxis().get(0).getTopEntries();
					}
					else
					{
						maxRows = this.getMaxRows();
					}
				}
			}
		}
	}
	else
	{
		let conditionManager = queryModel.getConditionManager();
		if (oFF.notNull(conditionManager))
		{
			for (let conditionIndex = 0; conditionIndex < conditionManager.size(); conditionIndex++)
			{
				let condition = conditionManager.get(conditionIndex);
				if (condition.isBackendCondition())
				{
					continue;
				}
				let thresholds = condition.getThresholds();
				if (oFF.XCollectionUtils.hasElements(thresholds))
				{
					let thresholdZeroIndex = thresholds.get(0);
					let conditionComparisonOperator = thresholdZeroIndex.getComparisonOperator();
					if (conditionComparisonOperator === oFF.ConditionComparisonOperator.TOP_N || conditionComparisonOperator === oFF.ConditionComparisonOperator.BOTTOM_N)
					{
						if (oFF.XStringUtils.isNullOrEmpty(conditionName) || oFF.XString.isEqual(conditionName, condition.getName()))
						{
							conditionForRank = condition;
							maxRows = oFF.XInteger.convertFromString(thresholdZeroIndex.getLow().getString());
							break;
						}
					}
				}
			}
		}
	}
	if (oFF.isNull(complexSortForRank) && oFF.isNull(conditionForRank))
	{
		return null;
	}
	let rankInfo = oFF.QFactory.createRankInfo(maxRows, complexSortForRank, conditionForRank);
	return rankInfo;
};
oFF.QConvenienceCommands.prototype.getReferenceGrid = function(withDetails)
{
	let queryManager = this.getQueryManager();
	if (oFF.isNull(queryManager))
	{
		return null;
	}
	let rs = queryManager.getClassicResultSet();
	return oFF.ReferenceGridFactory.createReferenceGrid(rs, withDetails);
};
oFF.QConvenienceCommands.prototype.getResultSetPersistenceIdentifier = function()
{
	return this.getQueryManager().getResultSetPersistenceIdentifier();
};
oFF.QConvenienceCommands.prototype.getResultSetPersistenceSchema = function()
{
	return this.getQueryManager().getResultSetPersistenceSchema();
};
oFF.QConvenienceCommands.prototype.getResultSetPersistenceTable = function()
{
	return this.getQueryManager().getResultSetPersistenceTable();
};
oFF.QConvenienceCommands.prototype.getResultSetPersistenceType = function()
{
	return this.getQueryManager().getResultSetPersistenceType();
};
oFF.QConvenienceCommands.prototype.getRuntimeMemberNameByAlias = function(queryModel, aliasName)
{
	if (oFF.isNull(aliasName))
	{
		return null;
	}
	let queryManager = queryModel.getQueryManager();
	if (queryManager.getMode() === oFF.QueryManagerMode.BLENDING)
	{
		let blendingSources = queryManager.getQueryModel().getBlendingSources();
		for (let i = 0; i < blendingSources.size(); i++)
		{
			let blendingSource = blendingSources.get(i);
			let prefix = oFF.XStringUtils.concatenate2(blendingSource.getQueryAliasName(), ".");
			let aliasNameWithoutPrefix = oFF.XString.replace(aliasName, prefix, "");
			let leafQueryModel = blendingSource.getQueryModel();
			let name = this.getRuntimeMemberNameByAlias(leafQueryModel, aliasNameWithoutPrefix);
			if (oFF.notNull(name))
			{
				if (oFF.XString.containsString(aliasName, prefix))
				{
					name = oFF.XStringUtils.concatenate2(prefix, name);
				}
				return name;
			}
		}
	}
	else
	{
		let leafName = this.getDimensionRuntimeMemberNameByAlias(queryModel.getMeasureDimension(), aliasName);
		if (oFF.isNull(leafName))
		{
			leafName = this.getDimensionRuntimeMemberNameByAlias(queryModel.getAccountDimension(), aliasName);
		}
		return leafName;
	}
	return null;
};
oFF.QConvenienceCommands.prototype.getSession = function()
{
	return this.getApplication().getSession();
};
oFF.QConvenienceCommands.prototype.getSingleMemberFilter = function(filterLayer, dimType, dimName)
{
	if (filterLayer === oFF.FilterLayer.EXTERNAL)
	{
		let externalFilterIt = this.getExternalFilters().getIterator();
		let filterOp = null;
		while (externalFilterIt.hasNext())
		{
			let filterOpTmp = this.getSingleMemberFilterInternal(externalFilterIt.next(), dimType, dimName);
			if (oFF.notNull(filterOpTmp))
			{
				filterOp = filterOpTmp;
			}
		}
		return filterOp;
	}
	let filterExpression = this.getFilterContainer(filterLayer);
	return this.getSingleMemberFilterInternal(filterExpression, dimType, dimName);
};
oFF.QConvenienceCommands.prototype.getSingleMemberFilterInternal = function(filterExpression, dimType, dimName)
{
	if (oFF.notNull(filterExpression))
	{
		let resolvedDimName = this.resolveDimName(dimType, dimName);
		if (filterExpression.isCartesianProduct() && oFF.notNull(resolvedDimName))
		{
			let cp = filterExpression;
			let cartesianList = cp.getCartesianListByDimensionName(resolvedDimName);
			if (cartesianList.size() === 1)
			{
				let op = cartesianList.getOp(0);
				return op;
			}
		}
	}
	return null;
};
oFF.QConvenienceCommands.prototype.getSortForRank = function(measureElementId, secondaryMeasureElementId, queryModel, sortingManager, versionElementId, versionDimension)
{
	let secondaryCalculationDimension = queryModel.getSecondaryCalculationDimension();
	let versionDimensionToUse = oFF.notNull(versionDimension) ? versionDimension : queryModel.getVersionDimension();
	let path = oFF.XList.create();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(versionElementId) && oFF.notNull(versionDimensionToUse))
	{
		if (versionDimensionToUse.getAxisType() === oFF.AxisType.ROWS)
		{
			queryModel.getRowsAxis().removeElement(versionDimensionToUse);
			queryModel.getColumnsAxis().insert(0, versionDimensionToUse);
		}
		let dimensionElementVersion = oFF.QFactory.createDimensionElement(versionDimensionToUse.getKeyField(), null, versionElementId);
		path.add(dimensionElementVersion);
	}
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.SORT_AND_RANK_BY_SECONDARY_MEASURE_ENHANCEMENT))
	{
		let primaryCalculationDimension = queryModel.getPrimaryCalculationDimension();
		if (oFF.notNull(secondaryCalculationDimension))
		{
			let secondaryMeasureName = secondaryMeasureElementId;
			if (oFF.XStringUtils.isNullOrEmpty(secondaryMeasureName))
			{
				secondaryMeasureName = oFF.QFilterUtil.getFirstMemberNameFromSecondaryCalculationDimensionDynamicFilter(queryModel);
			}
			if (oFF.XStringUtils.isNotNullAndNotEmpty(secondaryMeasureName))
			{
				path.add(oFF.QFactory.createDimensionElement(secondaryCalculationDimension.getKeyField(), null, secondaryMeasureName));
			}
		}
		if (oFF.notNull(primaryCalculationDimension))
		{
			path.add(oFF.QFactory.createDimensionElement(primaryCalculationDimension.getKeyField(), null, measureElementId));
		}
	}
	else
	{
		let measureDimension = queryModel.getMeasureDimension();
		let accountDimension = queryModel.getAccountDimension();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(secondaryMeasureElementId))
		{
			path.add(oFF.QFactory.createDimensionElement(secondaryCalculationDimension.getKeyField(), null, secondaryMeasureElementId));
		}
		if (oFF.notNull(accountDimension))
		{
			if (!oFF.XStringUtils.isNotNullAndNotEmpty(secondaryMeasureElementId))
			{
				path.add(oFF.QFactory.createDimensionElement(measureDimension.getKeyField(), null, oFF.QModelConstants.MEASURE_SIGNED_DATA));
			}
			let dimensionElementAccount = oFF.QFactory.createDimensionElement(accountDimension.getKeyField(), null, measureElementId);
			path.add(dimensionElementAccount);
		}
		else
		{
			path.add(oFF.QFactory.createDimensionElement(measureDimension.getKeyField(), null, measureElementId));
		}
	}
	let complexSorting = null;
	let isDataCellSortingValid = this.isSortTupleValidForDataCellSort(queryModel);
	if (isDataCellSortingValid)
	{
		complexSorting = sortingManager.newDataCellSorting(path);
	}
	else
	{
		complexSorting = sortingManager.newComplexSorting(path);
	}
	return complexSorting;
};
oFF.QConvenienceCommands.prototype.getStorageGroupName = function()
{
	return null;
};
oFF.QConvenienceCommands.prototype.getStorageName = function()
{
	return null;
};
oFF.QConvenienceCommands.prototype.getStorageObjectName = function()
{
	return null;
};
oFF.QConvenienceCommands.prototype.getStructureMember = function(columnDrillPath, rowDrillPath, predicate)
{
	let structureMember = null;
	let structureFound = oFF.XStream.of(columnDrillPath).find((dp) => {
		return predicate(dp.getDimension());
	});
	if (!structureFound.isPresent())
	{
		structureFound = oFF.XStream.of(rowDrillPath).find((dp) => {
			return predicate(dp.getDimension());
		});
	}
	if (structureFound.isPresent())
	{
		let dpe = structureFound.get();
		let structure = dpe.getDimension();
		structureMember = structure.getStructureMember(dpe.getName());
	}
	return structureMember;
};
oFF.QConvenienceCommands.prototype.getStructureMemberFromFilter = function(dimension)
{
	if (oFF.notNull(dimension))
	{
		let filters = dimension.getFilterConsideringLinkedFilters();
		if (oFF.XCollectionUtils.hasElements(filters) && filters.size() === 1)
		{
			let memberSelection = filters.get(0);
			if (oFF.notNull(memberSelection) && memberSelection.size() === 1)
			{
				let filterOp = memberSelection.get(0);
				let structure2Name = filterOp.getLow().getFieldValue().getString();
				return dimension.getStructureMember(structure2Name);
			}
		}
	}
	return null;
};
oFF.QConvenienceCommands.prototype.getSupportedDimensionsForExceptionAggregation = function(memberType, aggrType)
{
	let excepAggrMgr = this.getQueryModel()._getExceptionAggregationManagerBase();
	if (oFF.isNull(excepAggrMgr))
	{
		return oFF.XList.create();
	}
	return excepAggrMgr._getSupportedDimensionsForMemberAndAggregation(memberType, aggrType);
};
oFF.QConvenienceCommands.prototype.getSupportedExceptionAggregationTypes = function(memberType)
{
	let excepAggrMgr = this.getQueryModel()._getExceptionAggregationManagerBase();
	if (oFF.isNull(excepAggrMgr))
	{
		return oFF.XList.create();
	}
	return excepAggrMgr._getSupportedAggregationTypesForMember(memberType);
};
oFF.QConvenienceCommands.prototype.getTagging = function()
{
	return null;
};
oFF.QConvenienceCommands.prototype.getTotalsController = function(modelLevel, name)
{
	let queryModel = this.getQueryModel();
	if (modelLevel === oFF.QModelLevel.QUERY)
	{
		return queryModel;
	}
	if (modelLevel === oFF.QModelLevel.AXES)
	{
		let type = oFF.AxisType.lookup(name);
		if (oFF.notNull(type))
		{
			return queryModel.getAxis(type);
		}
	}
	if (modelLevel === oFF.QModelLevel.DIMENSIONS)
	{
		return queryModel.getDimensionByName(name);
	}
	return null;
};
oFF.QConvenienceCommands.prototype.getUniqueResultAlignment = function(modelLevel, name)
{
	let result = null;
	let dimension;
	let axis;
	if (modelLevel === oFF.QModelLevel.DIMENSIONS && oFF.XStringUtils.isNotNullAndNotEmpty(name))
	{
		dimension = this.getDimension(name);
		if (oFF.notNull(dimension))
		{
			result = dimension.getResultAlignment();
		}
	}
	else if (modelLevel === oFF.QModelLevel.AXES && oFF.XStringUtils.isNotNullAndNotEmpty(name))
	{
		let axisType = oFF.AxisType.lookup(name);
		axis = oFF.isNull(axisType) ? null : this.getQueryModel().getAxis(axisType);
		if (oFF.XCollectionUtils.hasElements(axis))
		{
			result = this.getUniqueResultAlignment(oFF.QModelLevel.DIMENSIONS, axis.get(0).getName());
			for (let i = 1; i < axis.size(); i++)
			{
				if (result !== this.getUniqueResultAlignment(oFF.QModelLevel.DIMENSIONS, axis.get(i).getName()))
				{
					result = null;
					break;
				}
			}
		}
	}
	else
	{
		result = this.getUniqueResultAlignment(oFF.QModelLevel.AXES, oFF.AxisType.ROWS.getName());
		if (result !== this.getUniqueResultAlignment(oFF.QModelLevel.AXES, oFF.AxisType.COLUMNS.getName()))
		{
			result = null;
		}
	}
	return result;
};
oFF.QConvenienceCommands.prototype.getUniqueResultVisibilityByElementAndAlignment = function(resultAlignment, resultStructureElement, modelLevel, name)
{
	let result = null;
	let dimension;
	let axis;
	let alignment = resultAlignment;
	let element = resultStructureElement;
	if (oFF.isNull(element))
	{
		element = oFF.ResultStructureElement.TOTAL;
	}
	if (modelLevel === oFF.QModelLevel.DIMENSIONS && oFF.XStringUtils.isNotNullAndNotEmpty(name))
	{
		dimension = this.getDimension(name);
		if (oFF.notNull(dimension))
		{
			if (oFF.isNull(alignment))
			{
				alignment = dimension.getResultAlignment();
			}
			result = dimension.getResultVisibilityByElementAndAlignment(alignment, element);
		}
	}
	else if (modelLevel === oFF.QModelLevel.AXES && oFF.XStringUtils.isNotNullAndNotEmpty(name))
	{
		let axisType = oFF.AxisType.lookup(name);
		axis = oFF.isNull(axisType) ? null : this.getQueryModel().getAxis(axisType);
		if (oFF.XCollectionUtils.hasElements(axis))
		{
			if (oFF.isNull(alignment))
			{
				alignment = axis.getResultAlignment();
			}
			result = this.getUniqueResultVisibilityByElementAndAlignment(alignment, element, oFF.QModelLevel.DIMENSIONS, axis.get(0).getName());
			for (let i = 1; i < axis.size(); i++)
			{
				if (result !== this.getUniqueResultVisibilityByElementAndAlignment(alignment, element, oFF.QModelLevel.DIMENSIONS, axis.get(i).getName()))
				{
					result = null;
					break;
				}
			}
		}
	}
	else
	{
		if (oFF.isNull(alignment))
		{
			alignment = this.getQueryModel().getResultAlignment();
		}
		result = this.getUniqueResultVisibilityByElementAndAlignment(alignment, element, oFF.QModelLevel.AXES, oFF.AxisType.ROWS.getName());
		if (result !== this.getUniqueResultVisibilityByElementAndAlignment(alignment, element, oFF.QModelLevel.AXES, oFF.AxisType.COLUMNS.getName()))
		{
			result = null;
		}
	}
	return result;
};
oFF.QConvenienceCommands.prototype.getVariable = function(varName)
{
	return this.getQueryManager().getVariables().getByKey(varName);
};
oFF.QConvenienceCommands.prototype.getVariableContainer = function()
{
	return this.getQueryModel().getVariableContainer();
};
oFF.QConvenienceCommands.prototype.getVariablesNameAndText = function()
{
	let map = oFF.XHashMapByString.create();
	let variables = this.getQueryManager().getVariables();
	let variableSize = variables.size();
	for (let i = 0; i < variableSize; i++)
	{
		let variable = variables.get(i);
		map.put(variable.getName(), variable.getText());
	}
	return map;
};
oFF.QConvenienceCommands.prototype.getVisibilityFilterById = function(uniqueId)
{
	return this.getFilterContainer(oFF.FilterLayer.VISIBILITY).getFilterById(uniqueId);
};
oFF.QConvenienceCommands.prototype.getVisibleMembers = function(dimension, memberHierarchy)
{
	let posNegPair = this.getMemberVisibilityByFilter(dimension);
	if (!dimension.isHierarchyActive())
	{
		return this.getVisibleMembersFlat(dimension, memberHierarchy);
	}
	let visibleMembers = oFF.XList.create();
	for (let i = 0; i < memberHierarchy.size(); i++)
	{
		let node = memberHierarchy.get(i);
		if (node.getParentNode() !== null)
		{
			continue;
		}
		let member = node.getDimensionMember();
		let visible = this.isMemberVisibleByFilter(member, posNegPair.getFirstObject(), posNegPair.getSecondObject());
		let excluded = this.isExcluded(member, posNegPair);
		if (visible)
		{
			visibleMembers.add(member.getName());
		}
		visibleMembers.addAll(this.getVisibleMembersRecursive(posNegPair, node.getChildren(), visible, excluded));
	}
	return visibleMembers;
};
oFF.QConvenienceCommands.prototype.getVisibleMembersFlat = function(dimension, allMembers)
{
	let posNegPair = this.getMemberVisibilityByFilter(dimension);
	let visibleMembers = oFF.XList.create();
	for (let i = 0; i < allMembers.size(); i++)
	{
		let member = allMembers.get(i).getDimensionMember();
		let visible = this.isMemberVisibleByFilter(member, posNegPair.getFirstObject(), posNegPair.getSecondObject());
		if (visible)
		{
			visibleMembers.add(member.getName());
		}
	}
	return visibleMembers;
};
oFF.QConvenienceCommands.prototype.getVisibleMembersInResultSetOrder = function(dim)
{
	let membersPromise = dim.getMemberManager().getMembers();
	return membersPromise.onThenExt((nodes) => {
		let visibleMembers = this.getVisibleMembers(dim, nodes);
		if (dim.getDimensionType() === oFF.DimensionType.ACCOUNT)
		{
			return oFF.XStream.of(nodes).filter((account) => {
				return visibleMembers.contains(account.getDimensionMember().getName());
			}).collect(oFF.XStreamCollector.toListOfNameObject());
		}
		else
		{
			let memberOrder = this.getMembersInResultSetOrder(dim);
			return oFF.XStream.of(memberOrder).filter((m) => {
				return visibleMembers.contains(m.getDimensionMember().getName());
			}).map((dm) => {
				return nodes.getByKey(dm.getName());
			}).collect(oFF.XStreamCollector.toListOfNameObject());
		}
	});
};
oFF.QConvenienceCommands.prototype.getVisibleMembersRecursive = function(posNegPair, nodes, parentVisible, parentExcluded)
{
	if (!oFF.XCollectionUtils.hasElements(nodes))
	{
		return oFF.XList.create();
	}
	let excludeExists = this.excludeExists(posNegPair);
	let visibleMembers = oFF.XList.create();
	for (let i = 0; i < nodes.size(); i++)
	{
		let node = nodes.get(i);
		let member = node.getDimensionMember();
		let selfVisible = this.isMemberVisibleByFilter(member, posNegPair.getFirstObject(), posNegPair.getSecondObject());
		let selfExcluded = this.isExcluded(member, posNegPair);
		let visible;
		if (excludeExists)
		{
			visible = (selfVisible || parentVisible) && !selfExcluded && !parentExcluded;
		}
		else
		{
			visible = selfVisible || parentVisible;
		}
		if (visible)
		{
			visibleMembers.add(member.getName());
		}
		visibleMembers.addAll(this.getVisibleMembersRecursive(posNegPair, node.getChildren(), visible, parentExcluded || selfExcluded));
	}
	return visibleMembers;
};
oFF.QConvenienceCommands.prototype.hasMoreColumnRecordsAvailable = function()
{
	return this.getQueryManager().hasMoreColumnRecordsAvailable();
};
oFF.QConvenienceCommands.prototype.hasMoreRowRecordsAvailable = function()
{
	return this.getQueryManager().hasMoreRowRecordsAvailable();
};
oFF.QConvenienceCommands.prototype.hasUniqueAxisProperties = function(axisType, uniqueAxisProperty)
{
	let match = false;
	if (this.getModelCapabilities().supportsUniqueAxisProperties())
	{
		let queryModel = this.getQueryModel();
		let uniqueAxisProperties = queryModel.getReturnedUniqueAxisProperties();
		if (oFF.notNull(uniqueAxisProperties))
		{
			match = uniqueAxisProperties.hasActiveReturnedDataSelection(axisType, uniqueAxisProperty);
		}
	}
	return match;
};
oFF.QConvenienceCommands.prototype.insertAttributeField = function(dimType, dimName, attributeName, presentationType, fieldName, contextType, index)
{
	let dimension = this.resolveDimension(dimType, dimName);
	let field = null;
	if (oFF.notNull(dimension))
	{
		let resolvedFieldName = this.resolveAttributeFieldName(dimension.getName(), attributeName, presentationType, fieldName);
		field = dimension.getFieldByName(resolvedFieldName);
		let attribute = dimension.getAttributeByName(attributeName);
		let fields = this.getAttributeFieldList(attribute, contextType);
		if (!fields.isFixed() && oFF.notNull(field))
		{
			if (index === -1)
			{
				fields.add(field);
			}
			else
			{
				fields.insert(index, field);
			}
		}
	}
	return field;
};
oFF.QConvenienceCommands.prototype.insertAttributeToResultSet = function(dimName, attributeName, index)
{
	let dimension = this.getDimension(dimName);
	if (oFF.notNull(dimension))
	{
		let attributeContainer = dimension.getAttributeContainer();
		let attribute = attributeContainer.getAttributeByName(attributeName);
		if (oFF.notNull(attribute))
		{
			let resultSetAttributes = attributeContainer.getResultSetAttributes();
			if (index === -1)
			{
				resultSetAttributes.add(attribute);
			}
			else
			{
				resultSetAttributes.insert(index, attribute);
			}
			return attribute;
		}
	}
	return null;
};
oFF.QConvenienceCommands.prototype.insertField = function(dimType, dimName, presentationType, fieldName, contextType, index)
{
	let dimension = this.resolveDimension(dimType, dimName);
	let field = null;
	if (oFF.notNull(dimension))
	{
		let resolvedFieldName = this.resolveFieldName(dimension.getName(), presentationType, fieldName);
		field = dimension.getFieldByName(resolvedFieldName);
		let fields = this.getFieldList(dimension, contextType);
		if (!fields.isFixed() && oFF.notNull(field))
		{
			if (index === -1)
			{
				fields.add(field);
			}
			else
			{
				fields.insert(index, field);
			}
		}
	}
	return field;
};
oFF.QConvenienceCommands.prototype.isAbapMds = function()
{
	return this.isSystemType(oFF.SystemType.ABAP_MDS);
};
oFF.QConvenienceCommands.prototype.isBpce = function()
{
	return this.isSystemType(oFF.SystemType.BPCE);
};
oFF.QConvenienceCommands.prototype.isBpcs = function()
{
	return this.isSystemType(oFF.SystemType.BPCS);
};
oFF.QConvenienceCommands.prototype.isBw = function()
{
	return this.isSystemType(oFF.SystemType.BW);
};
oFF.QConvenienceCommands.prototype.isDimensionOnRowsOrColumns = function(dimName)
{
	let dimension = this.getDimension(dimName);
	if (oFF.notNull(dimension))
	{
		return dimension.getAxisType() === oFF.AxisType.ROWS || dimension.getAxisType() === oFF.AxisType.COLUMNS;
	}
	return false;
};
oFF.QConvenienceCommands.prototype.isDimensionSupportingRowsOrColumns = function(dimName)
{
	let dimension = this.getDimension(dimName);
	if (oFF.notNull(dimension))
	{
		return dimension.supportsAxis(oFF.AxisType.ROWS) || dimension.supportsAxis(oFF.AxisType.COLUMNS);
	}
	return false;
};
oFF.QConvenienceCommands.prototype.isEventingStopped = function()
{
	return this.m_activeComponent.isEventingStopped();
};
oFF.QConvenienceCommands.prototype.isExcluded = function(member, posNegPair)
{
	let memberName = member.getName();
	let negList = posNegPair.getSecondObject();
	return negList.contains(memberName);
};
oFF.QConvenienceCommands.prototype.isFieldContainerKeyViewActive = function(dimName, attributeName)
{
	let helperOptional = this.resolveFieldContainerPresentationHelper(dimName, attributeName);
	return helperOptional.isPresent() && helperOptional.get().isDisplayKey();
};
oFF.QConvenienceCommands.prototype.isFieldContainerKeyViewDefault = function(dimName, attributeName)
{
	let helperOptional = this.resolveFieldContainerPresentationHelper(dimName, attributeName);
	let result = false;
	if (helperOptional.isPresent())
	{
		let helper = helperOptional.get();
		result = helper.getKeyView() === helper.getKeyViewDefault();
	}
	return result;
};
oFF.QConvenienceCommands.prototype.isFieldContainerKeyViewSupported = function(dimName, attributeName)
{
	let helperOptional = this.resolveFieldContainerPresentationHelper(dimName, attributeName);
	return helperOptional.isPresent() && oFF.XCollectionUtils.hasElements(helperOptional.get().getKeyViewsAvailable());
};
oFF.QConvenienceCommands.prototype.isFieldContainerTextViewActive = function(dimName, attributeName)
{
	let helperOptional = this.resolveFieldContainerPresentationHelper(dimName, attributeName);
	return helperOptional.isPresent() && helperOptional.get().isDisplayText();
};
oFF.QConvenienceCommands.prototype.isFieldContainerTextViewDefault = function(dimName, attributeName)
{
	let helperOptional = this.resolveFieldContainerPresentationHelper(dimName, attributeName);
	let result = false;
	if (helperOptional.isPresent())
	{
		let helper = helperOptional.get();
		result = helper.getTextView() === helper.getTextViewDefault();
	}
	return result;
};
oFF.QConvenienceCommands.prototype.isFieldContainerTextViewSupported = function(dimName, attributeName)
{
	let helperOptional = this.resolveFieldContainerPresentationHelper(dimName, attributeName);
	return helperOptional.isPresent() && oFF.XCollectionUtils.hasElements(helperOptional.get().getTextViewsAvailable());
};
oFF.QConvenienceCommands.prototype.isHana = function()
{
	return this.isSystemType(oFF.SystemType.HANA);
};
oFF.QConvenienceCommands.prototype.isHierarchyActive = function(dimensionName)
{
	let dimension = this.getDimension(dimensionName);
	return oFF.notNull(dimension) && dimension.isHierarchyActive();
};
oFF.QConvenienceCommands.prototype.isHierarchyAssigned = function(dimensionName)
{
	return this.getAssignedHierarchy(dimensionName) !== null;
};
oFF.QConvenienceCommands.prototype.isHybris = function()
{
	return this.isSystemType(oFF.SystemType.HYBRIS);
};
oFF.QConvenienceCommands.prototype.isKeyfigureCalculationSuppressed = function()
{
	return this.getQueryManager().isKeyfigureCalculationSuppressed();
};
oFF.QConvenienceCommands.prototype.isLinkingToQueryManagerUnsupported = function(targetQueryManager)
{
	let sourceQueryManager = this.getQueryManager();
	let isSourceDWC = sourceQueryManager.getSystemDescription().isDWCConnection() && sourceQueryManager.getDataSource().getType() === oFF.MetaObjectType.INA_MODEL;
	let isSourceEPF = sourceQueryManager.getSystemDescription().isDWCConnection() && sourceQueryManager.getDataSource().getType() === oFF.MetaObjectType.PLANNING;
	let isTargetDWC = targetQueryManager.getSystemDescription().isDWCConnection() && targetQueryManager.getDataSource().getType() === oFF.MetaObjectType.INA_MODEL;
	let isTargetEPF = targetQueryManager.getSystemDescription().isDWCConnection() && targetQueryManager.getDataSource().getType() === oFF.MetaObjectType.PLANNING;
	let isUnsupportedLinkInvolvingEPF = ((isSourceEPF && !isTargetDWC && !isTargetEPF) || (isTargetEPF && !isSourceDWC && !isSourceEPF));
	let isDWCOrEPFModels = (isSourceDWC || isSourceEPF) && (isTargetDWC || isTargetEPF);
	let qm1SpaceId = sourceQueryManager.getDWCOrEPFSpaceId();
	let qm2SpaceId = targetQueryManager.getDWCOrEPFSpaceId();
	let spaceFromDifferentConnections = oFF.XStringUtils.isNotNullAndNotEmpty(qm1SpaceId) && oFF.XStringUtils.isNotNullAndNotEmpty(qm2SpaceId) && !oFF.XString.isEqual(sourceQueryManager.getSystemName(), targetQueryManager.getSystemName());
	let fromDifferentSpaces = !oFF.XString.isEqual(qm1SpaceId, qm2SpaceId);
	return isUnsupportedLinkInvolvingEPF || (isDWCOrEPFModels && (spaceFromDifferentConnections || fromDifferentSpaces));
};
oFF.QConvenienceCommands.prototype.isMemberVisibleByFilter = function(member, includedList, excludedList)
{
	let memberName = member.getName();
	if (includedList.isEmpty() && excludedList.isEmpty())
	{
		return true;
	}
	if (excludedList.contains(memberName))
	{
		return false;
	}
	return includedList.isEmpty() || includedList.contains(memberName);
};
oFF.QConvenienceCommands.prototype.isOdata = function()
{
	return this.isSystemType(oFF.SystemType.VIRTUAL_INA_ODATA);
};
oFF.QConvenienceCommands.prototype.isRankOnAllDimensionsExists = function()
{
	return oFF.QRankingUtil.isRankOnAllDimensionsExists(this.getQueryModel());
};
oFF.QConvenienceCommands.prototype.isResultSetTransportEnabled = function()
{
	return this.getQueryManager().isResultSetTransportEnabled();
};
oFF.QConvenienceCommands.prototype.isSortTupleValidForDataCellSort = function(queryModel)
{
	let measureDimension = queryModel.getMeasureDimension();
	let accountDimension = queryModel.getAccountDimension();
	if (oFF.isNull(accountDimension))
	{
		return true;
	}
	let accountAxis = accountDimension.getAxisType();
	let measureAxis = measureDimension.getAxisType();
	if (accountAxis !== oFF.AxisType.ROWS && accountAxis !== oFF.AxisType.COLUMNS)
	{
		return true;
	}
	if (measureAxis !== oFF.AxisType.ROWS && measureAxis !== oFF.AxisType.COLUMNS)
	{
		return true;
	}
	return accountAxis === measureAxis;
};
oFF.QConvenienceCommands.prototype.isSystemType = function(systemType)
{
	let systemDescription = this.getQueryManager().getSystemDescription();
	return oFF.notNull(systemDescription) && systemDescription.getSystemType() === systemType;
};
oFF.QConvenienceCommands.prototype.isTypeOfAbap = function()
{
	let systemDescription = this.getQueryManager().getSystemDescription();
	return oFF.notNull(systemDescription) && systemDescription.getSystemType().isTypeOf(oFF.SystemType.ABAP);
};
oFF.QConvenienceCommands.prototype.isTypeOfBw = function()
{
	let systemDescription = this.getQueryManager().getSystemDescription();
	return oFF.notNull(systemDescription) && systemDescription.getSystemType().isTypeOf(oFF.SystemType.BW);
};
oFF.QConvenienceCommands.prototype.isTypeOfHana = function()
{
	let systemDescription = this.getQueryManager().getSystemDescription();
	return oFF.notNull(systemDescription) && systemDescription.getSystemType().isTypeOf(oFF.SystemType.HANA);
};
oFF.QConvenienceCommands.prototype.isUniverse = function()
{
	return this.isSystemType(oFF.SystemType.UNV);
};
oFF.QConvenienceCommands.prototype.isUqas = function()
{
	return this.isSystemType(oFF.SystemType.UQAS);
};
oFF.QConvenienceCommands.prototype.moveDimensionAfter = function(dimensionName, targetDimensionName)
{
	let dimension = this.getQueryModel().getDimensionByName(dimensionName);
	let targetDim = this.getQueryModel().getDimensionByName(targetDimensionName);
	if (oFF.notNull(dimension) && oFF.notNull(targetDim))
	{
		let targetAxis = targetDim.getAxis();
		let targetIndex = targetAxis.getIndex(targetDim) + 1;
		targetAxis.insert(targetIndex, dimension);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.moveDimensionBefore = function(dimensionName, targetDimensionName)
{
	let dimension = this.getQueryModel().getDimensionByName(dimensionName);
	let targetDimension = this.getQueryModel().getDimensionByName(targetDimensionName);
	if (oFF.notNull(dimension) && oFF.notNull(targetDimension))
	{
		let targetAxis = targetDimension.getAxis();
		let targetIndex = targetAxis.getIndex(targetDimension);
		targetAxis.insert(targetIndex, dimension);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.moveDimensionExt = function(dimType, dimName, targetAxis, index)
{
	let dimension = this.resolveDimension(dimType, dimName);
	if (oFF.notNull(dimension))
	{
		let queryModel = this.getQueryModel();
		let axis = queryModel.getAxis(targetAxis);
		if (oFF.notNull(axis))
		{
			if (index === -1)
			{
				axis.add(dimension);
			}
			else
			{
				axis.insert(index, dimension);
			}
		}
	}
	return dimension;
};
oFF.QConvenienceCommands.prototype.moveSortToPosition = function(sortType, name, position)
{
	let sortingManager = this.getQueryModel().getSortingManager();
	let sortingOperations = sortingManager.getSortingOperations();
	let operation = null;
	if (sortType === oFF.SortType.FIELD && oFF.XStringUtils.isNotNullAndNotEmpty(name))
	{
		let field = this.getField(name);
		if (oFF.notNull(field))
		{
			operation = sortingManager.getFieldSorting(field, false);
		}
	}
	else if (sortType === oFF.SortType.ABSTRACT_DIMENSION_SORT)
	{
		let dimension = this.getDimension(name);
		if (oFF.notNull(dimension))
		{
			operation = sortingManager.getDimensionSorting(dimension, false);
		}
	}
	else if (sortType === oFF.SortType.MEASURE && oFF.XStringUtils.isNotNullAndNotEmpty(name))
	{
		let measure = this.getMeasure(name);
		if (oFF.notNull(measure))
		{
			operation = sortingManager.getMeasureSorting(measure, false);
		}
	}
	if (oFF.notNull(operation))
	{
		sortingOperations.queueEventing();
		sortingOperations.removeElement(operation);
		sortingOperations.insert(position, operation);
		sortingOperations.resumeEventing();
	}
	return this;
};
oFF.QConvenienceCommands.prototype.newCustomSorting = function(dimension, field, sortFromStart, sortFromEnd)
{
	this.getQueryModel().getSortingManager().newCustomSorting(dimension, field, sortFromStart, sortFromEnd);
	return this;
};
oFF.QConvenienceCommands.prototype.processQueryExecution = function(syncType, listener, customIdentifier)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.processQueryExecution(syncType, listener, customIdentifier);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.processQueryManagerCreation = function(syncType, listener, customIdentifier)
{
	let queryServiceConfig = this.getQueryServiceConfig();
	if (oFF.notNull(queryServiceConfig))
	{
		queryServiceConfig.processQueryManagerCreation(syncType, listener, customIdentifier);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.processResetExitOrDynamicVariable = function(syncType, listener, customIdentifier, overwriteDefaultForInputEnabledVar)
{
	if (this.isTypeOfAbap())
	{
		return this.updateBWDynamicVariables(listener, customIdentifier, overwriteDefaultForInputEnabledVar);
	}
	return this.updateDynamicVariables(syncType, listener, customIdentifier);
};
oFF.QConvenienceCommands.prototype.queueEventing = function()
{
	this.m_activeComponent.queueEventing();
};
oFF.QConvenienceCommands.prototype.refresh = function()
{
	return this.processQueryExecution(oFF.SyncType.NON_BLOCKING, null, null);
};
oFF.QConvenienceCommands.prototype.refreshFieldContainerDisplayForDimension = function(dimName, display)
{
	let dimension = this.getDimension(dimName);
	if (oFF.notNull(dimension))
	{
		oFF.FieldContainerPresentationHelper.refreshDisplayAttributesForDimensionExt(dimension, display);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.registerChangedListener = oFF.noSupport;
oFF.QConvenienceCommands.prototype.releaseObject = function()
{
	this.m_activeComponent = null;
	this.m_olapEnvironment = null;
	oFF.QCmdAbstract.prototype.releaseObject.call( this );
};
oFF.QConvenienceCommands.prototype.removeAttributeField = function(dimType, dimName, attributeName, presentationType, fieldName, contextType)
{
	let dimension = this.resolveDimension(dimType, dimName);
	let field = null;
	if (oFF.notNull(dimension))
	{
		let resolvedFieldName = this.resolveAttributeFieldName(dimension.getName(), attributeName, presentationType, fieldName);
		field = dimension.getFieldByName(resolvedFieldName);
		let fields = this.getFieldList(dimension, contextType);
		if (!fields.isFixed() && oFF.notNull(field))
		{
			fields.removeElement(field);
		}
	}
	return field;
};
oFF.QConvenienceCommands.prototype.removeAttributeFromResultSet = function(dimName, attributeName)
{
	let dimension = this.getDimension(dimName);
	if (oFF.notNull(dimension))
	{
		let attributeContainer = dimension.getAttributeContainer();
		let attribute = attributeContainer.getAttributeByName(attributeName);
		if (oFF.notNull(attribute))
		{
			let resultSetAttributes = attributeContainer.getResultSetAttributes();
			resultSetAttributes.removeElement(attribute);
			return attribute;
		}
	}
	return null;
};
oFF.QConvenienceCommands.prototype.removeComplexSelection = function(filterElement, dimType)
{
	if (oFF.notNull(filterElement))
	{
		let componentType = filterElement.getComponentType();
		if (componentType === oFF.FilterComponentType.OPERATION)
		{
			let filterOp = filterElement;
			let filterOpDim = this.getQueryModel().getDimensionByName(filterOp.getDimensionName());
			return oFF.notNull(filterOpDim) && !filterOpDim.getDimensionType().isTypeOf(dimType);
		}
		else if (componentType.isTypeOf(oFF.FilterComponentType.AND) || componentType === oFF.FilterComponentType.OR)
		{
			let filterAlgebra = filterElement;
			let idxFilterOp = 0;
			while (idxFilterOp < filterAlgebra.size())
			{
				let iqFilterElement = filterAlgebra.get(idxFilterOp);
				let removeFilter = this.removeComplexSelection(iqFilterElement, dimType);
				if (removeFilter)
				{
					filterAlgebra.removeAt(idxFilterOp);
				}
				else
				{
					idxFilterOp++;
				}
			}
		}
		else if (componentType.isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
		{
			let complexCartesianList = filterElement;
			let listDimension = this.getQueryModel().getDimensionByName(complexCartesianList.getDimensionName());
			return oFF.notNull(listDimension) && !listDimension.getDimensionType().isTypeOf(dimType);
		}
	}
	return false;
};
oFF.QConvenienceCommands.prototype.removeDrillOperationsByAxisType = function(axisType)
{
	this.getQueryModel().getDrillManager().removeDrillOperationsByAxisType(axisType);
	return this;
};
oFF.QConvenienceCommands.prototype.removeDrillOperationsByDimensionName = function(dimName)
{
	let dimension = this.getDimension(dimName);
	this.getQueryModel().getDrillManager().removeDrillOperationsByDimension(dimension);
	return this;
};
oFF.QConvenienceCommands.prototype.removeField = function(dimType, dimName, presentationType, fieldName, contextType)
{
	let dimension = this.resolveDimension(dimType, dimName);
	let field = null;
	if (oFF.notNull(dimension))
	{
		let resolvedFieldName = this.resolveFieldName(dimension.getName(), presentationType, fieldName);
		field = dimension.getFieldByName(resolvedFieldName);
		let fields = this.getFieldList(dimension, contextType);
		if (!fields.isFixed() && oFF.notNull(field))
		{
			fields.removeElement(field);
		}
	}
	return field;
};
oFF.QConvenienceCommands.prototype.removeInvalidSortOperations = function()
{
	this.getQueryModel().getSortingManager().removeInvalidSortingOperations();
	return this;
};
oFF.QConvenienceCommands.prototype.removePriorSortOperationForRank = function()
{
	let queryModel = this.getQueryModel();
	let sortingOperations = queryModel.getSortingManager().getSortingOperations();
	let numberOfSortingOperations = sortingOperations.size();
	for (let i = 0; i < numberOfSortingOperations; i++)
	{
		let iqGenericSorting = sortingOperations.get(i);
		let sortingType = iqGenericSorting.getSortingType();
		if (sortingType === oFF.SortType.COMPLEX || sortingType === oFF.SortType.DATA_CELL_VALUE)
		{
			let complexSorting = iqGenericSorting;
			if (complexSorting.usedInRanking())
			{
				sortingOperations.removeElement(complexSorting);
				return complexSorting;
			}
		}
	}
	return null;
};
oFF.QConvenienceCommands.prototype.removeUnusedClientQueryObjectMembers = function()
{
	let queryModel = this.getQueryModel();
	let dimensions = oFF.XList.create();
	oFF.XCollectionUtils.addIfNotNull(dimensions, queryModel.getPrimaryCalculationDimension());
	oFF.XCollectionUtils.addIfNotNull(dimensions, queryModel.getSecondaryCalculationDimension());
	let clientQueryObjectManager = this.getOlapEnv().getClientQueryObjectManager();
	for (let i = 0; i < dimensions.size(); i++)
	{
		let dimension = dimensions.get(i);
		let members = dimension.getLoadedStructureMembers();
		for (let j = members.size() - 1; j >= 0; j--)
		{
			let member = members.get(j);
			if (oFF.notNull(member) && !member.isReleased() && clientQueryObjectManager.getClientQueryObjectByKeyRef(member) !== null && !member.isMeasureInUse(queryModel, false))
			{
				dimension.removeMeasureWithNoValidation(member.getName());
			}
		}
	}
	return this;
};
oFF.QConvenienceCommands.prototype.reset = function()
{
	return this.resetWithOptions(this.createResetConfiguration());
};
oFF.QConvenienceCommands.prototype.resetFieldContainerKeyViewToDefault = function(dimName, attributeName)
{
	this.resolveFieldContainerPresentationHelper(dimName, attributeName).ifPresent((fieldContainerPresentationHelper) => {
		fieldContainerPresentationHelper.setKeyView(fieldContainerPresentationHelper.getKeyViewDefault());
		this.applyFieldContainer(dimName, fieldContainerPresentationHelper);
	});
	return this;
};
oFF.QConvenienceCommands.prototype.resetFieldContainerTextViewToDefault = function(dimName, attributeName)
{
	this.resolveFieldContainerPresentationHelper(dimName, attributeName).ifPresent((fieldContainerPresentationHelper) => {
		fieldContainerPresentationHelper.setTextView(fieldContainerPresentationHelper.getTextViewDefault());
		this.applyFieldContainer(dimName, fieldContainerPresentationHelper);
	});
	return this;
};
oFF.QConvenienceCommands.prototype.resetMaxResultRecords = function()
{
	this.getQueryManager().resetMaxResultRecords();
	return this;
};
oFF.QConvenienceCommands.prototype.resetPreserveCustomMembers = function()
{
	let cmdResetConfiguration = new oFF.CmdResetConfiguration();
	cmdResetConfiguration.setSkipResetCustomMembers(true);
	return this.resetWithOptions(cmdResetConfiguration);
};
oFF.QConvenienceCommands.prototype.resetPreserveCustomMembersAndCalcDims = function()
{
	let cmdResetConfiguration = new oFF.CmdResetConfiguration();
	cmdResetConfiguration.setSkipResetCustomMembers(true);
	cmdResetConfiguration.setSkipResetCalculatedDimensions(true);
	return this.resetWithOptions(cmdResetConfiguration);
};
oFF.QConvenienceCommands.prototype.resetToDefault = function()
{
	let queryModel = this.getQueryModel();
	let importer = oFF.QInAImportFactory.createForData(this.getApplication(), queryModel.getModelCapabilities());
	importer.importQueryModel(queryModel.getServerBaseSerialization(), queryModel);
	return this;
};
oFF.QConvenienceCommands.prototype.resetToDefaultState = function(metadataState)
{
	if (!metadataState)
	{
		return this.resetToDefault();
	}
	let queryModel = this.getQueryModel();
	let serverBaseSerialization = queryModel.getServerBaseSerializationForBaseState();
	let importer = oFF.QInAImportFactory.createForData(this.getApplication(), queryModel.getModelCapabilities());
	queryModel.getFormulaExceptionManager().clear();
	importer.importQueryModel(serverBaseSerialization, queryModel);
	let queryContent = this.getQueryServiceConfig().getRepositoryContent();
	if (oFF.notNull(queryContent))
	{
		queryModel.deserializeFromElementExt(queryContent.getContentType(), queryContent.getJsonContent());
	}
	return this;
};
oFF.QConvenienceCommands.prototype.resetWithOptions = function(cmdResetConfiguration)
{
	let queryModel = this.getQueryModel();
	if (!cmdResetConfiguration.isSkipResetCustomMembers())
	{
		let measureDimension = queryModel.getMeasureDimension();
		if (oFF.notNull(measureDimension))
		{
			measureDimension.removeCustomMembers();
		}
		let accountDimension = queryModel.getAccountDimension();
		if (oFF.notNull(accountDimension))
		{
			accountDimension.removeCustomMembers();
		}
	}
	this.clearAxis(oFF.AxisType.ROWS);
	this.clearAxis(oFF.AxisType.COLUMNS);
	queryModel.setSpatialClusterSettings(null);
	let filter = queryModel.getFilter();
	if (filter.isDynamicFilterInitialized())
	{
		this.clearFilterExpression(filter.getDynamicFilter());
	}
	if (filter.isTmpFilterInitialized())
	{
		this.clearFilterExpression(filter.getTmpFilter());
	}
	if (filter.getModelCapabilities().supportsVisibilityFilter() && filter.isVisibilityFilterInitialized())
	{
		this.clearFilterExpression(filter.getVisibilityFilter());
	}
	if (filter.isTmpVisibilityFilterInitialized())
	{
		this.clearFilterExpression(filter.getTmpVisibilityFilter());
	}
	if (!cmdResetConfiguration.isSkipResetCalculatedDimensions())
	{
		queryModel.clearCalculatedDimensions();
		queryModel.clearPreQueries();
	}
	queryModel.getDrillManager().removeAllContextDrillOperations();
	queryModel.getDrillManager().removeAllZoomDrillOperations();
	queryModel.getCellContextManager().clear();
	if (!cmdResetConfiguration.isSkipResetConditions())
	{
		let conditionManager = queryModel.getConditionManager();
		if (oFF.notNull(conditionManager))
		{
			conditionManager.clear();
		}
	}
	queryModel.getExceptionManager().clear();
	queryModel.getSortingManager().getSortingOperations().clear();
	this.getQueryManager().enableHierarchyToUDHConversion(false);
	return this;
};
oFF.QConvenienceCommands.prototype.resolveAttributeFieldName = function(dimName, attributeName, presentationType, fieldName)
{
	let theFieldName = fieldName;
	if (oFF.isNull(fieldName))
	{
		if (oFF.notNull(presentationType) && oFF.notNull(dimName))
		{
			let dimension = this.getDimension(dimName);
			if (oFF.notNull(dimension) && oFF.XStringUtils.isNotNullAndNotEmpty(attributeName))
			{
				let attribute = dimension.getAttributeByName(attributeName);
				if (oFF.notNull(attribute))
				{
					let field = attribute.getFieldByPresentationType(presentationType);
					if (oFF.isNull(field))
					{
						theFieldName = null;
					}
					else
					{
						theFieldName = field.getName();
					}
				}
			}
		}
	}
	return theFieldName;
};
oFF.QConvenienceCommands.prototype.resolveDimName = function(dimType, dimName)
{
	if (oFF.isNull(dimName))
	{
		if (oFF.isNull(dimType))
		{
			return null;
		}
		let dimension = this.getDimensionAccessor().getDimensionByType(dimType);
		if (oFF.notNull(dimension))
		{
			return dimension.getName();
		}
	}
	return dimName;
};
oFF.QConvenienceCommands.prototype.resolveDimension = function(dimType, dimName)
{
	let resolvedDimName = this.resolveDimName(dimType, dimName);
	return this.getDimensionAccessor().getDimensionByName(resolvedDimName);
};
oFF.QConvenienceCommands.prototype.resolveField = function(dimension, presentationType, fieldName)
{
	if (oFF.isNull(fieldName))
	{
		if (oFF.notNull(presentationType))
		{
			return dimension.getFieldByPresentationType(presentationType);
		}
		return dimension.getKeyField();
	}
	return dimension.getFieldByName(fieldName);
};
oFF.QConvenienceCommands.prototype.resolveFieldContainerPresentationHelper = function(dimName, attributeName)
{
	let result;
	let presentationHelper;
	let dimension = this.getDimension(dimName);
	if (oFF.isNull(dimension))
	{
		result = oFF.XOptional.empty();
	}
	else if (oFF.XStringUtils.isNullOrEmpty(attributeName))
	{
		let mainAttribute = dimension.getMainAttribute();
		if (oFF.isNull(mainAttribute))
		{
			presentationHelper = oFF.FieldContainerPresentationHelper.createFromFieldContainer(dimension);
			presentationHelper.applyResultSetSettings(dimension);
		}
		else
		{
			presentationHelper = oFF.FieldContainerPresentationHelper.createFromFieldContainer(mainAttribute);
			let mainRsAttribute = oFF.XStream.of(dimension.getResultSetAttributes()).filter((a) => {
				return oFF.XString.isEqual(a.getName(), mainAttribute.getName());
			}).findAny();
			mainRsAttribute.ifPresent((att) => {
				presentationHelper.applyResultSetSettings(att);
			});
		}
		result = oFF.XOptional.of(presentationHelper);
	}
	else
	{
		let attribute = dimension.getAttributeByName(attributeName);
		if (oFF.isNull(attribute))
		{
			result = oFF.XOptional.empty();
		}
		else
		{
			presentationHelper = oFF.FieldContainerPresentationHelper.createFromFieldContainer(attribute);
			let displayAttribute = oFF.XStream.of(dimension.getResultSetAttributes()).filter((a2) => {
				return oFF.XString.isEqual(a2.getName(), attributeName);
			}).findAny();
			displayAttribute.ifPresent((att2) => {
				presentationHelper.applyResultSetSettings(att2);
			});
			result = oFF.XOptional.of(presentationHelper);
		}
	}
	return result;
};
oFF.QConvenienceCommands.prototype.resolveFieldName = function(dimName, presentationType, fieldName)
{
	let theFieldName = fieldName;
	if (oFF.isNull(fieldName))
	{
		if (oFF.notNull(presentationType) && oFF.notNull(dimName))
		{
			let dimension = this.getDimension(dimName);
			if (oFF.notNull(dimension))
			{
				let field = dimension.getFieldByPresentationType(presentationType);
				if (oFF.isNull(field))
				{
					theFieldName = null;
				}
				else
				{
					theFieldName = field.getName();
				}
			}
		}
	}
	return theFieldName;
};
oFF.QConvenienceCommands.prototype.resumeEventing = function()
{
	this.m_activeComponent.resumeEventing();
};
oFF.QConvenienceCommands.prototype.select = oFF.noSupport;
oFF.QConvenienceCommands.prototype.setActiveComponent = function(component)
{
	if (oFF.notNull(component))
	{
		let olapComponentType = component.getComponentType();
		if (olapComponentType === oFF.OlapComponentType.QUERY_MODEL || olapComponentType === oFF.OlapComponentType.QUERY_MANAGER || olapComponentType === oFF.OlapComponentType.QUERY_SERVICE_CONFIG)
		{
			this.m_activeComponent = component;
			return true;
		}
	}
	this.m_activeComponent = null;
	return false;
};
oFF.QConvenienceCommands.prototype.setAxisZeroSuppressionType = function(axisType, zeroSuppressionType)
{
	let axis = this.getQueryModel().getAxis(axisType);
	if (oFF.notNull(axis))
	{
		axis.setZeroSuppressionType(zeroSuppressionType);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.setAxisZeroSuppressionTypeExt = function(axisType, zeroSuppressionType, enforceReadModeSynchronization)
{
	let axis = this.getQueryModel().getAxis(axisType);
	if (oFF.notNull(axis))
	{
		axis.setReadModeAndSuppressionSynchronized(enforceReadModeSynchronization);
		axis.setZeroSuppressionType(zeroSuppressionType);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.setConditionActive = function(conditionName, active)
{
	let condition = this.getQueryModel().getConditionManager().getConditionByName(conditionName);
	if (oFF.notNull(condition))
	{
		condition.setActive(active);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.setDimensionAndMeasure = function(dimName, measureName)
{
	let dimensions = oFF.XList.create();
	dimensions.add(dimName);
	let measures = oFF.XList.create();
	measures.add(measureName);
	this.setDimensionsAndMeasures(dimensions, measures);
	return this;
};
oFF.QConvenienceCommands.prototype.setDimensionCustomHierarchyDefinition = function(customHierarchyDefinition, hierarchyActive, initialDrillLevel)
{
	let dimension = this.getDimension(customHierarchyDefinition.getDimensionName());
	if (oFF.notNull(dimension) && !dimension.isUniversalDisplayHierarchyDimension() && dimension.getModelCapabilities().supportsCustomHierarchy())
	{
		dimension.setCustomHierarchyDefinition(customHierarchyDefinition);
		dimension.setHierarchyActive(hierarchyActive);
		dimension.setInitialDrillLevel(initialDrillLevel);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.setDimensionHierarchy = function(dimName, hierarchyName, hierarchyActive, initialDrillLevel)
{
	let dimension = this.getDimension(dimName);
	if (oFF.notNull(dimension) && !dimension.isUniversalDisplayHierarchyDimension())
	{
		dimension.setHierarchyName(hierarchyName);
		dimension.setHierarchyActive(hierarchyActive);
		dimension.setInitialDrillLevel(initialDrillLevel);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.setDimensionHierarchyDrillLevel = function(dimName, initialDrillLevel)
{
	let dimension = this.getDimension(dimName);
	if (oFF.notNull(dimension) && !dimension.isUniversalDisplayHierarchyDimension())
	{
		dimension.setInitialDrillLevel(initialDrillLevel);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.setDimensionHierarchyHasNodeCondensation = function(dimName, nodeCondensation)
{
	let dimension = this.getDimension(dimName);
	if (oFF.notNull(dimension) && !dimension.isUniversalDisplayHierarchyDimension())
	{
		dimension.setHasNodeCondensation(nodeCondensation);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.setDimensionHierarchyLowerLevelNodeAlignment = function(dimName, alignment)
{
	let dimension = this.getDimension(dimName);
	if (oFF.notNull(dimension) && !dimension.isUniversalDisplayHierarchyDimension())
	{
		dimension.setLowerLevelNodeAlignment(alignment);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.setDimensionHierarchyMemberOfPostedNodeVisibility = function(dimName, memberOfPostedNodeVisibility)
{
	let dimension = this.getDimension(dimName);
	if (oFF.notNull(dimension) && !dimension.isUniversalDisplayHierarchyDimension())
	{
		dimension.setMemberOfPostedNodeVisibility(memberOfPostedNodeVisibility);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.setDimensionMemberReadModeGraceful = function(dimensionName, contextType, readMode)
{
	let dimension = this.getDimension(dimensionName);
	if (oFF.notNull(dimension) && oFF.notNull(readMode))
	{
		dimension.setReadModeGraceful(contextType, readMode);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.setDimensionMemberReadModeGracefulExt = function(dimensionName, contextType, readMode, enforceZeroSuppressionSynchronization)
{
	let dimension = this.getDimension(dimensionName);
	if (oFF.notNull(dimension) && oFF.notNull(readMode))
	{
		if (dimension.getAxis() !== null)
		{
			dimension.getAxis().setReadModeAndSuppressionSynchronized(enforceZeroSuppressionSynchronization);
		}
		dimension.setReadModeGraceful(contextType, readMode);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.setDimensionsAndMeasures = function(dimNames, measureNames)
{
	this.clearAxis(oFF.AxisType.COLUMNS);
	this.clearAxis(oFF.AxisType.ROWS);
	for (let dimIdx = 0; dimIdx < dimNames.size(); dimIdx++)
	{
		this.moveDimensionToRows(dimNames.get(dimIdx));
	}
	let dynamicFilter = this.getFilterContainer(oFF.FilterLayer.DYNAMIC);
	if (dynamicFilter.isCartesianProduct())
	{
		dynamicFilter.getCartesianProduct().clear();
	}
	for (let measureIdx = 0; measureIdx < measureNames.size(); measureIdx++)
	{
		this.addMeasure(measureNames.get(measureIdx));
	}
	return this;
};
oFF.QConvenienceCommands.prototype.setExceptionActive = function(exceptionName, active)
{
	let exception = this.getQueryModel().getExceptionManager().getByKey(exceptionName);
	if (oFF.notNull(exception))
	{
		exception.setActive(active);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.setExecuteRequestOnOldResultSet = function(executeRequestOnOldResultSet)
{
	this.getQueryManager().setExecuteRequestOnOldResultSet(executeRequestOnOldResultSet);
	return this;
};
oFF.QConvenienceCommands.prototype.setField = function(dimType, dimName, presentationType, fieldName, contextType)
{
	let dimension = this.resolveDimension(dimType, dimName);
	let field = null;
	if (oFF.notNull(dimension))
	{
		let resolvedFieldName = this.resolveFieldName(dimension.getName(), presentationType, fieldName);
		field = dimension.getFieldByName(resolvedFieldName);
		let fields = this.getFieldList(dimension, contextType);
		if (!fields.isFixed() && oFF.notNull(field))
		{
			fields.queueEventing();
			fields.clear();
			fields.add(field);
			fields.resumeEventing();
		}
	}
	return field;
};
oFF.QConvenienceCommands.prototype.setFieldContainerDisplay = function(dimName, attributeName, fieldContainerDisplay)
{
	this.resolveFieldContainerPresentationHelper(dimName, attributeName).ifPresent((fieldContainerPresentationHelper) => {
		fieldContainerPresentationHelper.setDisplayAs(fieldContainerDisplay);
		let dimension = this.getDimension(dimName);
		let flt = dimension.getFieldLayoutType();
		this.clearAllAttributeFields(dimName, fieldContainerPresentationHelper.getComponentName(), oFF.QContextType.RESULT_SET);
		dimension.setFieldLayoutType(flt);
		this.applyFieldContainer(dimName, fieldContainerPresentationHelper);
	});
	return this;
};
oFF.QConvenienceCommands.prototype.setFieldContainerKeyDisplay = function(dimName, attributeName, keyDisplay)
{
	this.resolveFieldContainerPresentationHelper(dimName, attributeName).ifPresent((fieldContainerPresentationHelper) => {
		fieldContainerPresentationHelper.setKeyDisplay(keyDisplay);
		this.applyFieldContainer(dimName, fieldContainerPresentationHelper);
	});
	return this;
};
oFF.QConvenienceCommands.prototype.setFieldContainerKeyView = function(dimName, attributeName, keyView)
{
	this.resolveFieldContainerPresentationHelper(dimName, attributeName).ifPresent((fieldContainerPresentationHelper) => {
		fieldContainerPresentationHelper.setKeyView(keyView);
		this.applyFieldContainer(dimName, fieldContainerPresentationHelper);
	});
	return this;
};
oFF.QConvenienceCommands.prototype.setFieldContainerTextView = function(dimName, attributeName, textView)
{
	this.resolveFieldContainerPresentationHelper(dimName, attributeName).ifPresent((fieldContainerPresentationHelper) => {
		fieldContainerPresentationHelper.setTextView(textView);
		this.applyFieldContainer(dimName, fieldContainerPresentationHelper);
	});
	return this;
};
oFF.QConvenienceCommands.prototype.setFilterForLeaves = function(dimension)
{
	let capabilities = this.getModelCapabilities();
	if (capabilities.supportsHierarchyRestNode() === false || capabilities.supportsHierarchyVirtualRootNode() === false)
	{
		return this;
	}
	let hierarchyCatalogItem = this.getHierarchyCatalogItem(dimension);
	if (oFF.isNull(hierarchyCatalogItem))
	{
		return this;
	}
	this.addSingleMemberFilterByDimensionName(dimension.getName(), hierarchyCatalogItem.getVirtualRootNode(), oFF.ComparisonOperator.EQUAL);
	let dynamicFilter = this.getFilterContainer(oFF.FilterLayer.DYNAMIC);
	let singleMemberSelection = dynamicFilter.addSingleMemberFilterByName(dimension.getName(), hierarchyCatalogItem.getRestNode(), oFF.ComparisonOperator.EQUAL);
	singleMemberSelection.setSetSign(oFF.SetSign.EXCLUDING);
	return this;
};
oFF.QConvenienceCommands.prototype.setMaxColumns = function(max)
{
	this.getQueryManager().setMaxColumns(max);
	return this;
};
oFF.QConvenienceCommands.prototype.setMaxResultRecords = function(maxResultRecords)
{
	this.getQueryManager().setMaxResultRecords(maxResultRecords);
	return this;
};
oFF.QConvenienceCommands.prototype.setMaxRows = function(max)
{
	this.getQueryManager().setMaxRows(max);
	return this;
};
oFF.QConvenienceCommands.prototype.setOffsetColumns = function(offset)
{
	this.getQueryManager().setOffsetColumns(offset);
	return this;
};
oFF.QConvenienceCommands.prototype.setOffsetRows = function(offset)
{
	this.getQueryManager().setOffsetRows(offset);
	return this;
};
oFF.QConvenienceCommands.prototype.setRank = function(maxRows, complexSorting, condition, applyToDimensions)
{
	let queryModel = this.getQueryModel();
	if (!this.getModelCapabilities().supportsConditions())
	{
		this.removePriorSortOperationForRank();
		if (oFF.isNull(complexSorting))
		{
			return this;
		}
		let applyTopOnIndividualDimension = oFF.XCollectionUtils.hasElements(applyToDimensions);
		complexSorting.setUsedInRanking(true);
		complexSorting.setAppliedTopOnIndividualDimension(applyTopOnIndividualDimension);
		queryModel.getSortingManager().getSortingOperations().add(complexSorting);
		let topForDimensions = maxRows;
		if (!applyTopOnIndividualDimension)
		{
			this.setMaxRows(maxRows);
			topForDimensions = 0;
		}
		this.addTopToDimensions(topForDimensions, queryModel.getAxesManager().getRowsAxis());
		this.addTopToDimensions(topForDimensions, queryModel.getAxesManager().getColumnsAxis());
	}
	else if (oFF.notNull(condition))
	{
		let conditionManager = queryModel.getConditionManager();
		conditionManager.add(condition);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.setResultSetPersistanceTargetSchema = function(resultSetPersistenceSchema)
{
	this.getQueryManager().setResultSetPersistanceTargetSchema(resultSetPersistenceSchema);
	return this;
};
oFF.QConvenienceCommands.prototype.setResultSetPersistanceTargetTable = function(resultSetPersistenceTable)
{
	this.getQueryManager().setResultSetPersistanceTargetTable(resultSetPersistenceTable);
	return this;
};
oFF.QConvenienceCommands.prototype.setResultSetPersistenceIdentifier = function(resultSetPersistenceIdentifier)
{
	this.getQueryManager().setResultSetPersistenceIdentifier(resultSetPersistenceIdentifier);
	return this;
};
oFF.QConvenienceCommands.prototype.setResultSetPersistenceTargetType = function(resultSetPersistenceType)
{
	this.getQueryManager().setResultSetPersistenceTargetType(resultSetPersistenceType);
	return this;
};
oFF.QConvenienceCommands.prototype.setResultSetTransportEnabled = function(isEnabled)
{
	this.getQueryManager().setResultSetTransportEnabled(isEnabled);
	return this;
};
oFF.QConvenienceCommands.prototype.setSuppressKeyfigureCalculation = function(doSupress)
{
	this.getQueryManager().setSuppressKeyfigureCalculation(doSupress);
	return this;
};
oFF.QConvenienceCommands.prototype.setTotalsVisible = function(modelLevel, name, visibility)
{
	let totalsController = this.getTotalsController(modelLevel, name);
	if (oFF.notNull(totalsController))
	{
		totalsController.setResultVisibility(visibility);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.setTotalsVisibleByElement = function(modelLevel, name, element, visibility)
{
	let totalsController = this.getTotalsController(modelLevel, name);
	if (oFF.notNull(totalsController))
	{
		totalsController.setResultVisibilityByElement(element, visibility);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.setUniversalDisplayHierarchy = function(dimensionNames, initialDrillLevel, active)
{
	let udh = this.getQueryModel().getUniversalDisplayHierarchies();
	return udh.setHierarchy(dimensionNames, initialDrillLevel, active);
};
oFF.QConvenienceCommands.prototype.setVariable = function(varName, value)
{
	let variable = this.getQueryManager().getVariables().getByKey(varName);
	if (oFF.notNull(variable) && variable.isInputEnabled())
	{
		let variableType = variable.getVariableType();
		if (variableType === oFF.VariableType.HIERARCHY_NAME_VARIABLE)
		{
			let hnv = variable;
			hnv.setValueByString(value);
		}
		else if (variableType === oFF.VariableType.HIERARCHY_NODE_VARIABLE)
		{
			let hnodev = variable;
			hnodev.setValueByString(value);
		}
		else if (variableType === oFF.VariableType.DIMENSION_MEMBER_VARIABLE)
		{
			let dimMember = variable;
			dimMember.setValueByString(value);
		}
		else if (variableType === oFF.VariableType.SIMPLE_TYPE_VARIABLE)
		{
			let simpleType = variable;
			simpleType.setValueByString(value);
		}
	}
	return this;
};
oFF.QConvenienceCommands.prototype.sort = function(sortType, dimType, dimName, presentationType, fieldName, memberName, direction)
{
	let sortingManager = this.getQueryModel().getSortingManager();
	sortingManager.queueEventing();
	if (sortType === oFF.SortType.MEMBER_KEY || sortType === oFF.SortType.MEMBER_TEXT || sortType === oFF.SortType.HIERARCHY || sortType === oFF.SortType.FILTER)
	{
		let dimension = this.resolveDimension(dimType, dimName);
		if (oFF.notNull(dimension) && !dimension.isUniversalDisplayHierarchyDimension())
		{
			let dimensionSorting = sortingManager.getDimensionSorting(dimension, true);
			if (sortType === oFF.SortType.MEMBER_KEY)
			{
				dimensionSorting.setSortingPresentationType(oFF.PresentationType.KEY);
			}
			else if (sortType === oFF.SortType.MEMBER_TEXT)
			{
				dimensionSorting.setSortingPresentationType(oFF.PresentationType.TEXT);
			}
			else if (sortType === oFF.SortType.HIERARCHY)
			{
				dimensionSorting.setSortByHierarchy();
			}
			else if (sortType === oFF.SortType.FILTER)
			{
				dimensionSorting.setSortByFilter();
			}
			dimensionSorting.setDirection(direction);
		}
	}
	else if (sortType === oFF.SortType.MEASURE)
	{
		let member = this.getMeasure(memberName);
		if (oFF.notNull(member))
		{
			sortingManager.getMeasureSorting(member, true).setDirection(direction);
		}
	}
	else if (sortType === oFF.SortType.FIELD)
	{
		let resolvedDimName = this.resolveDimName(dimType, dimName);
		let resolvedFieldName = this.resolveFieldName(resolvedDimName, presentationType, fieldName);
		let field = this.getField(resolvedFieldName);
		if (oFF.notNull(field))
		{
			sortingManager.getFieldSorting(field, true).setDirection(direction);
		}
	}
	sortingManager.resumeEventing();
	return this;
};
oFF.QConvenienceCommands.prototype.sortByQueryDataCell = function(keyFigureName, secondaryStructureMemberName, direction, leadingAxis)
{
	let sortingManager = this.getQueryModel().getSortingManager();
	sortingManager.queueEventing();
	let member = this.getMeasure(keyFigureName);
	if (oFF.notNull(member))
	{
		let sortOperations = sortingManager.getSortingOperations();
		oFF.XCollectionUtils.removeIf(sortOperations, (so) => {
			return so.getSortingType() === oFF.SortType.MEASURE && so.getMeasure() !== member;
		});
		let measureSorting = sortingManager.getMeasureSorting(member, false);
		if (oFF.isNull(measureSorting))
		{
			measureSorting = sortingManager.newMeasureSorting(member);
			if (oFF.isNull(leadingAxis))
			{
				sortOperations.add(measureSorting);
			}
			else
			{
				sortOperations.insert(0, measureSorting);
			}
		}
		measureSorting.setDirection(direction);
		let nonMeasureDimension = this.getQueryModel().getNonMeasureDimension();
		if (oFF.notNull(nonMeasureDimension) && oFF.XStringUtils.isNotNullAndNotEmpty(secondaryStructureMemberName))
		{
			let secondaryStructureMember = nonMeasureDimension.getStructureMember(secondaryStructureMemberName);
			if (oFF.notNull(secondaryStructureMember))
			{
				measureSorting.setSecondaryMeasure(secondaryStructureMember);
			}
		}
		if (oFF.notNull(nonMeasureDimension) && measureSorting.getSecondaryMeasure() === null && oFF.XCollectionUtils.hasElements(nonMeasureDimension.getAllStructureMembers()))
		{
			measureSorting.setSecondaryMeasure(nonMeasureDimension.getAllStructureMembers().get(0));
		}
		if (oFF.notNull(leadingAxis))
		{
			let orthogonalAxis = leadingAxis.getOrthogonalAxisType();
			let measureSortingIndex = sortOperations.getIndex(measureSorting);
			let sortOperationsSize = sortOperations.size();
			if (measureSortingIndex > -1 && measureSortingIndex < sortOperationsSize - 1)
			{
				for (let i = measureSortingIndex + 1; i < sortOperationsSize; i++)
				{
					let currentSorting = sortOperations.get(i);
					if (currentSorting.getSortingType().isTypeOf(oFF.SortType.ABSTRACT_DIMENSION_SORT) && currentSorting.getDimension().getAxisType() === orthogonalAxis)
					{
						sortOperations.removeAt(i);
						sortOperations.insert(measureSortingIndex, currentSorting);
						measureSortingIndex++;
					}
				}
			}
		}
	}
	sortingManager.resumeEventing();
	return this;
};
oFF.QConvenienceCommands.prototype.stopEventing = function()
{
	this.m_activeComponent.stopEventing();
};
oFF.QConvenienceCommands.prototype.submitVariables = function()
{
	return this.getQueryManager().submitVariables(oFF.SyncType.BLOCKING, null, null);
};
oFF.QConvenienceCommands.prototype.swapDimensions = function(dimensionName1, dimensionName2)
{
	let dim1 = this.getQueryModel().getDimensionByName(dimensionName1);
	let dim2 = this.getQueryModel().getDimensionByName(dimensionName2);
	if (oFF.notNull(dim1) && oFF.notNull(dim2))
	{
		let axis1 = dim1.getAxis();
		let axis2 = dim2.getAxis();
		let index1 = axis1.getIndex(dim1);
		let index2 = axis2.getIndex(dim2);
		axis1.insert(index1, dim2);
		axis2.insert(index2, dim1);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.switchAxes = function()
{
	return this.switchAxesExt(false);
};
oFF.QConvenienceCommands.prototype.switchAxesExt = function(includeSettings)
{
	let queryModel = this.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		let rowsAxis = queryModel.getRowsAxis();
		let rows = rowsAxis.createListCopy();
		let colsAxis = queryModel.getColumnsAxis();
		let cols = colsAxis.createListCopy();
		let colsAxisRME = colsAxis.isReadModeAndSuppressionSynchronized();
		colsAxis.setReadModeAndSuppressionSynchronized(false);
		let rowsAxisRME = rowsAxis.isReadModeAndSuppressionSynchronized();
		rowsAxis.setReadModeAndSuppressionSynchronized(false);
		colsAxis.addAll(rows);
		rowsAxis.addAll(cols);
		let hierarchies = this.getQueryModel().getUniversalDisplayHierarchies().getHierarchies();
		for (let i = 0; i < hierarchies.size(); i++)
		{
			let udh = hierarchies.get(i);
			udh.setAxis(udh.getHierarchyDedicatedAxis().getType() === oFF.AxisType.ROWS ? queryModel.getColumnsAxis() : queryModel.getRowsAxis());
		}
		if (includeSettings)
		{
			let zeroSuppressionOnRows = rowsAxis.getZeroSuppressionType();
			if (rowsAxis.supportsZeroSuppression() && rowsAxis.getAvailableZeroSuppressionTypes().contains(colsAxis.getZeroSuppressionType()))
			{
				rowsAxis.setZeroSuppressionType(colsAxis.getZeroSuppressionType());
			}
			if (colsAxis.supportsZeroSuppression() && colsAxis.getAvailableZeroSuppressionTypes().contains(zeroSuppressionOnRows))
			{
				colsAxis.setZeroSuppressionType(zeroSuppressionOnRows);
			}
			let rowsNodeAlignment = rowsAxis.getLowerLevelNodeAlignment();
			rowsAxis.setLowerLevelNodeAlignment(colsAxis.getLowerLevelNodeAlignment());
			colsAxis.setLowerLevelNodeAlignment(rowsNodeAlignment);
			let rowResultAlignment = rowsAxis.getResultAlignment();
			if (rowsAxis.supportsResultAlignment())
			{
				rowsAxis.setResultAlignment(colsAxis.getResultAlignment());
			}
			if (colsAxis.supportsResultAlignment())
			{
				colsAxis.setResultAlignment(rowResultAlignment);
			}
			if (queryModel.getModelCapabilities().supportsUniqueAxisProperties())
			{
				let uniqueAxisProperties = queryModel.getReturnedUniqueAxisProperties();
				if (oFF.notNull(uniqueAxisProperties))
				{
					uniqueAxisProperties.swapAxes();
				}
			}
		}
		rowsAxis.setReadModeAndSuppressionSynchronized(colsAxisRME);
		colsAxis.setReadModeAndSuppressionSynchronized(rowsAxisRME);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.toggleUniqueAxisProperties = function(axisType, uniqueAxisProperty, active)
{
	if (this.getModelCapabilities().supportsUniqueAxisProperties())
	{
		let queryModel = this.getQueryModel();
		let uniqueAxisProperties = queryModel.getReturnedUniqueAxisProperties();
		if (oFF.notNull(uniqueAxisProperties) && uniqueAxisProperties.supportsReturnedDataSelection(uniqueAxisProperty))
		{
			uniqueAxisProperties.toggleActivation(axisType, uniqueAxisProperty, active);
		}
	}
	return this;
};
oFF.QConvenienceCommands.prototype.tryGetSortingForDimension = function(dim)
{
	let sortingManager = dim.getQueryModel().getSortingManager();
	let sorting = sortingManager.getDimensionSorting(dim, false);
	if (oFF.isNull(sorting))
	{
		sorting = oFF.XCollectionUtils.findFirst(sortingManager.getSortingOperations(), (op) => {
			if (op.getSortingType().isTypeOf(oFF.SortType.FIELD))
			{
				let field = op.getField();
				return oFF.XString.isEqual(field.getDimension().getName(), dim.getName());
			}
			return false;
		});
	}
	return sorting;
};
oFF.QConvenienceCommands.prototype.unassignHierarchy = function(dimensionName)
{
	let dimension = this.getDimension(dimensionName);
	if (oFF.notNull(dimension))
	{
		dimension.setHierarchyName(null);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.unregisterChangedListener = oFF.noSupport;
oFF.QConvenienceCommands.prototype.updateBWDynamicVariables = function(listener, customIdentifier, overwriteDefaultForInputEnabledVar)
{
	let variables = this.getDynamicVariables();
	for (let i = 0; i < variables.size(); i++)
	{
		let variable = variables.get(i);
		if (!variable.isInputEnabled() || overwriteDefaultForInputEnabledVar)
		{
			variable.resetToDefaultValues();
		}
	}
	if (oFF.notNull(listener))
	{
		let activeResultSetContainer = this.getQueryManager().getActiveResultSetContainer();
		listener.onQueryExecuted(activeResultSetContainer, activeResultSetContainer, customIdentifier);
	}
	return this;
};
oFF.QConvenienceCommands.prototype.updateDynamicVariables = function(syncType, listener, customIdentifier)
{
	let variables = this.getDynamicVariables();
	if (variables.size() === 0 || this.isBw())
	{
		if (oFF.notNull(listener))
		{
			let activeResultSetContainer = this.getQueryManager().getActiveResultSetContainer();
			listener.onQueryExecuted(activeResultSetContainer, activeResultSetContainer, customIdentifier);
		}
	}
	else
	{
		this.getOlapEnv().updateDynamicVariablesForQueryManager(this.getQueryManager(), syncType, listener, customIdentifier);
	}
	return this;
};

oFF.AbstractValueAccessComponent = function() {};
oFF.AbstractValueAccessComponent.prototype = new oFF.QModelComponent();
oFF.AbstractValueAccessComponent.prototype._ff_c = "AbstractValueAccessComponent";

oFF.AbstractValueAccessComponent.prototype.getBoolean = function()
{
	let value = oFF.XValueUtil.convertValueStrict(this.getValue(), oFF.XValueType.BOOLEAN);
	return value.getBoolean();
};
oFF.AbstractValueAccessComponent.prototype.getDate = function()
{
	let value = oFF.XValueUtil.convertValueStrict(this.getValue(), oFF.XValueType.DATE);
	return value;
};
oFF.AbstractValueAccessComponent.prototype.getDateTime = function()
{
	let value = oFF.XValueUtil.convertValueStrict(this.getValue(), oFF.XValueType.DATE_TIME);
	return value;
};
oFF.AbstractValueAccessComponent.prototype.getDecFloat = function()
{
	let value = oFF.XValueUtil.convertValueStrict(this.getValue(), oFF.XValueType.DECIMAL_FLOAT);
	return value;
};
oFF.AbstractValueAccessComponent.prototype.getDouble = function()
{
	let value = oFF.XValueUtil.convertValueStrict(this.getValue(), oFF.XValueType.DOUBLE);
	return value.getDouble();
};
oFF.AbstractValueAccessComponent.prototype.getErrorValue = function()
{
	return null;
};
oFF.AbstractValueAccessComponent.prototype.getGeometry = function()
{
	let value = this.getValue();
	let valueType = value.getValueType();
	if (!valueType.isSpatial())
	{
		oFF.noSupport();
	}
	return value;
};
oFF.AbstractValueAccessComponent.prototype.getInteger = function()
{
	let value = oFF.XValueUtil.convertValueStrict(this.getValue(), oFF.XValueType.INTEGER);
	return value.getInteger();
};
oFF.AbstractValueAccessComponent.prototype.getLineString = function()
{
	let value = oFF.XValueUtil.convertValueStrict(this.getValue(), oFF.XValueType.LINE_STRING);
	return value;
};
oFF.AbstractValueAccessComponent.prototype.getLong = function()
{
	let value = oFF.XValueUtil.convertValueStrict(this.getValue(), oFF.XValueType.LONG);
	return value.getLong();
};
oFF.AbstractValueAccessComponent.prototype.getMultiLineString = function()
{
	let value = oFF.XValueUtil.convertValueStrict(this.getValue(), oFF.XValueType.MULTI_LINE_STRING);
	return value;
};
oFF.AbstractValueAccessComponent.prototype.getMultiPoint = function()
{
	let value = oFF.XValueUtil.convertValueStrict(this.getValue(), oFF.XValueType.MULTI_POINT);
	return value;
};
oFF.AbstractValueAccessComponent.prototype.getMultiPolygon = function()
{
	let value = oFF.XValueUtil.convertValueStrict(this.getValue(), oFF.XValueType.MULTI_POLYGON);
	return value;
};
oFF.AbstractValueAccessComponent.prototype.getNull = function()
{
	return null;
};
oFF.AbstractValueAccessComponent.prototype.getPoint = function()
{
	let value = oFF.XValueUtil.convertValueStrict(this.getValue(), oFF.XValueType.POINT);
	return value;
};
oFF.AbstractValueAccessComponent.prototype.getPolygon = function()
{
	let value = oFF.XValueUtil.convertValueStrict(this.getValue(), oFF.XValueType.POLYGON);
	return value;
};
oFF.AbstractValueAccessComponent.prototype.getPropertiesValue = function()
{
	let value = oFF.XValueUtil.convertValueStrict(this.getValue(), oFF.XValueType.PROPERTIES);
	return value;
};
oFF.AbstractValueAccessComponent.prototype.getString = function()
{
	let value = oFF.XValueUtil.convertValueStrict(this.getValue(), oFF.XValueType.STRING);
	return value.getString();
};
oFF.AbstractValueAccessComponent.prototype.getStructureListValue = function()
{
	let value = oFF.XValueUtil.convertValueStrict(this.getValue(), oFF.XValueType.LIST);
	return value;
};
oFF.AbstractValueAccessComponent.prototype.getStructureValue = function()
{
	let value = oFF.XValueUtil.convertValueStrict(this.getValue(), oFF.XValueType.STRUCTURE);
	return value;
};
oFF.AbstractValueAccessComponent.prototype.getTime = function()
{
	let value = oFF.XValueUtil.convertValueStrict(this.getValue(), oFF.XValueType.TIME);
	return value;
};
oFF.AbstractValueAccessComponent.prototype.getTimeSpan = function()
{
	let value = oFF.XValueUtil.convertValueStrict(this.getValue(), oFF.XValueType.TIMESPAN);
	return value;
};
oFF.AbstractValueAccessComponent.prototype.getValueType = function()
{
	let value = this.getValue();
	return oFF.isNull(value) ? null : value.getValueType();
};

oFF.QModelComponentNode = function() {};
oFF.QModelComponentNode.prototype = new oFF.QModelComponent();
oFF.QModelComponentNode.prototype._ff_c = "QModelComponentNode";

oFF.QModelComponentNode.createLeave = function(context, name)
{
	let object = new oFF.QModelComponentNode();
	object.setupModelComponentNode(context, null, name, false);
	return object;
};
oFF.QModelComponentNode.prototype.m_isComponentNode = false;
oFF.QModelComponentNode.prototype.m_modelComponentList = null;
oFF.QModelComponentNode.prototype.getIndexedChildren = function()
{
	return this.m_modelComponentList.getIterator();
};
oFF.QModelComponentNode.prototype.isComponentNode = function()
{
	return this.m_isComponentNode;
};
oFF.QModelComponentNode.prototype.releaseObject = function()
{
	this.m_modelComponentList = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QModelComponentNode.prototype.setupModelComponentNode = function(context, modelComponentList, name, isComponentNode)
{
	this.setupModelComponentWithName(context, this, name);
	this.m_modelComponentList = modelComponentList;
	this.m_isComponentNode = isComponentNode;
};

oFF.QCondition = function() {};
oFF.QCondition.prototype = new oFF.QModelComponent();
oFF.QCondition.prototype._ff_c = "QCondition";

oFF.QCondition.create = function(context, conditionManager, technicalName, isBackendCondition)
{
	if (oFF.isNull(technicalName) || oFF.XString.isEqual(technicalName, ""))
	{
		return null;
	}
	let newObj = new oFF.QCondition();
	newObj.setupCondition(context, conditionManager, technicalName, isBackendCondition);
	return newObj;
};
oFF.QCondition.prototype.m_afterVisibilityFilter = false;
oFF.QCondition.prototype.m_breakGroup = false;
oFF.QCondition.prototype.m_breakGroupDimensions = null;
oFF.QCondition.prototype.m_breakHierarchy = false;
oFF.QCondition.prototype.m_conditionThresholds = null;
oFF.QCondition.prototype.m_description = null;
oFF.QCondition.prototype.m_dimensionEvaluationType = null;
oFF.QCondition.prototype.m_evaluationDimensions = null;
oFF.QCondition.prototype.m_isActive = false;
oFF.QCondition.prototype.m_isBackendCondition = false;
oFF.QCondition.prototype.m_onDisabledToWarning = false;
oFF.QCondition.prototype.m_usedState = null;
oFF.QCondition.prototype.addBreakGroupDimension = function(dimension)
{
	this.m_breakGroupDimensions.add(dimension);
};
oFF.QCondition.prototype.addEvaluationDimension = function(dimension)
{
	this.m_evaluationDimensions.add(dimension);
};
oFF.QCondition.prototype.addThreshold = function(threshold)
{
	if (oFF.notNull(threshold))
	{
		threshold.setParent(this.m_conditionThresholds);
		this.m_conditionThresholds.add(threshold);
		if (threshold.isValid())
		{
			this.notifyNodeChanged();
		}
	}
};
oFF.QCondition.prototype.canMaterializeCompleteObject = function()
{
	return this.isUserCondition();
};
oFF.QCondition.prototype.clearEvaluationDimensions = function()
{
	this.m_evaluationDimensions.clear();
};
oFF.QCondition.prototype.clearThresholds = function()
{
	this.m_conditionThresholds.clear();
	this.notifyNodeChanged();
};
oFF.QCondition.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originCondition = other;
	this.m_isActive = originCondition.m_isActive;
	this.m_description = originCondition.m_description;
	this.m_usedState = originCondition.m_usedState;
	this.m_onDisabledToWarning = originCondition.m_onDisabledToWarning;
	this.m_dimensionEvaluationType = originCondition.m_dimensionEvaluationType;
	this.m_isBackendCondition = originCondition.m_isBackendCondition;
	let i;
	let queryModel = this.getQueryModel();
	let size = originCondition.m_evaluationDimensions.size();
	for (i = 0; i < size; i++)
	{
		let origEvalDimension = originCondition.m_evaluationDimensions.get(i);
		this.m_evaluationDimensions.addInternal(queryModel.getDimensionByNameFromExistingMetadata(origEvalDimension.getName()));
	}
	this.m_evaluationDimensions.copyFrom(originCondition.m_evaluationDimensions, flags);
	size = originCondition.m_conditionThresholds.size();
	for (i = 0; i < size; i++)
	{
		let originThreshold = originCondition.m_conditionThresholds.get(i);
		let cloneThreshold = oFF.QConditionThreshold.create(this, this);
		this.m_conditionThresholds.add(cloneThreshold);
		cloneThreshold.copyFrom(originThreshold, flags);
	}
	this.m_conditionThresholds.copyFrom(originCondition.m_conditionThresholds, flags);
	this.m_breakGroup = originCondition.m_breakGroup;
	size = originCondition.m_breakGroupDimensions.size();
	for (i = 0; i < size; i++)
	{
		let origBreakGroupDimension = originCondition.m_breakGroupDimensions.get(i);
		this.m_breakGroupDimensions.addInternal(queryModel.getDimensionByNameFromExistingMetadata(origBreakGroupDimension.getName()));
	}
	this.m_afterVisibilityFilter = originCondition.m_afterVisibilityFilter;
	this.m_breakHierarchy = originCondition.m_breakHierarchy;
};
oFF.QCondition.prototype.createThreshold = function()
{
	let newThreshold = oFF.QConditionThreshold.create(this.getContext(), this);
	this.addThreshold(newThreshold);
	return newThreshold;
};
oFF.QCondition.prototype.getBreakGroupDimensions = function()
{
	return this.m_breakGroupDimensions;
};
oFF.QCondition.prototype.getConditionManager = function()
{
	return this.getParentComponent();
};
oFF.QCondition.prototype.getDescription = function()
{
	return this.m_description;
};
oFF.QCondition.prototype.getDimensionEvaluationType = function()
{
	return this.m_dimensionEvaluationType;
};
oFF.QCondition.prototype.getEvaluationDimensions = function()
{
	return this.m_evaluationDimensions;
};
oFF.QCondition.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.CONDITION;
};
oFF.QCondition.prototype.getOnDisabledToWarning = function()
{
	return this.m_onDisabledToWarning;
};
oFF.QCondition.prototype.getThresholds = function()
{
	return this.m_conditionThresholds;
};
oFF.QCondition.prototype.getUsedState = function()
{
	return this.m_usedState;
};
oFF.QCondition.prototype.isActive = function()
{
	return this.m_isActive;
};
oFF.QCondition.prototype.isApplicable = function()
{
	let ed = this.getEvaluationDimensions();
	return oFF.notNull(this.m_dimensionEvaluationType) && ed.isEmpty() && this.m_dimensionEvaluationType !== oFF.ConditionDimensionEvaluationType.GIVEN_LIST || oFF.XCollectionUtils.containsAllAdjacient(this.getQueryModel().getRowsAxis(), ed) || oFF.XCollectionUtils.containsAllAdjacient(this.getQueryModel().getColumnsAxis(), ed);
};
oFF.QCondition.prototype.isApplyingConditionAfterVisibilityFilter = function()
{
	return this.m_afterVisibilityFilter;
};
oFF.QCondition.prototype.isBackendCondition = function()
{
	return this.m_isBackendCondition;
};
oFF.QCondition.prototype.isBreakGroup = function()
{
	return this.m_breakGroup;
};
oFF.QCondition.prototype.isBreakHierarchy = function()
{
	return this.m_breakHierarchy;
};
oFF.QCondition.prototype.isChangeable = function()
{
	return this.isUserCondition();
};
oFF.QCondition.prototype.isUserCondition = function()
{
	return !this.isBackendCondition();
};
oFF.QCondition.prototype.isValid = function()
{
	if (oFF.isNull(this.m_dimensionEvaluationType))
	{
		return false;
	}
	return this.m_dimensionEvaluationType !== oFF.ConditionDimensionEvaluationType.GIVEN_LIST || !this.getEvaluationDimensions().isEmpty();
};
oFF.QCondition.prototype.releaseObject = function()
{
	this.m_description = null;
	this.m_dimensionEvaluationType = null;
	this.m_usedState = null;
	this.m_evaluationDimensions = oFF.XObjectExt.release(this.m_evaluationDimensions);
	this.m_breakGroupDimensions = oFF.XObjectExt.release(this.m_breakGroupDimensions);
	this.m_conditionThresholds = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_conditionThresholds);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QCondition.prototype.removeBreakGroupDimension = function(dimension)
{
	this.m_breakGroupDimensions.removeElement(dimension);
};
oFF.QCondition.prototype.removeEvaluationDimension = function(dimension)
{
	this.m_evaluationDimensions.removeElement(dimension);
};
oFF.QCondition.prototype.removeThreshold = function(threshold)
{
	if (oFF.notNull(threshold))
	{
		threshold.setParent(null);
		this.m_conditionThresholds.removeElement(threshold);
		if (threshold.isValid())
		{
			this.notifyNodeChanged();
		}
	}
};
oFF.QCondition.prototype.setActive = function(active)
{
	let oldValue = this.m_isActive;
	this.m_isActive = active;
	this.notifyPropertyBooleanChanged(oFF.QConditionProperties.QY_CONDITIONS_ACTIVE, oldValue, active);
};
oFF.QCondition.prototype.setApplyConditionAfterVisibilityFilter = function(afterVisibilityFilter)
{
	let oldValue = this.m_afterVisibilityFilter;
	this.m_afterVisibilityFilter = afterVisibilityFilter;
	this.notifyPropertyBooleanChanged(oFF.QConditionProperties.QY_CONDITIONS_AFTER_VISIBILITY_FILTER, oldValue, afterVisibilityFilter);
};
oFF.QCondition.prototype.setBreakGroup = function(breakGroup)
{
	let oldValue = this.m_breakGroup;
	this.m_breakGroup = breakGroup;
	this.notifyPropertyBooleanChanged(oFF.QConditionProperties.QY_BREAK_GROUP, oldValue, breakGroup);
};
oFF.QCondition.prototype.setBreakHierarchy = function(breakHierarchy)
{
	let oldValue = this.m_breakHierarchy;
	this.m_breakHierarchy = breakHierarchy;
	this.notifyPropertyBooleanChanged(oFF.QConditionProperties.QY_CONDITIONS_BREAK_HIERARCHY, oldValue, breakHierarchy);
};
oFF.QCondition.prototype.setConditionName = function(conditionName)
{
	if (oFF.XStringUtils.isNullOrEmpty(conditionName) || this.getConditionManager().getConditionByName(conditionName) !== null)
	{
		oFF.noSupport();
	}
	this.setName(conditionName);
};
oFF.QCondition.prototype.setDescription = function(description)
{
	if (!oFF.XString.isEqual(this.m_description, description))
	{
		this.m_description = description;
		this.notifyNodeChanged();
	}
};
oFF.QCondition.prototype.setDimensionEvaluationType = function(dimensionEvalutationType)
{
	let oldValue = this.m_dimensionEvaluationType;
	this.m_dimensionEvaluationType = dimensionEvalutationType;
	this.notifyPropertyConstantChanged(oFF.QConditionProperties.QY_CONDITIONS_EVALUATE_ON_DIMENSIONS, oldValue, dimensionEvalutationType);
};
oFF.QCondition.prototype.setOnDisabledToWarning = function(disabledToWarning)
{
	let oldValue = this.m_onDisabledToWarning;
	this.m_onDisabledToWarning = disabledToWarning;
	this.notifyPropertyBooleanChanged(oFF.QConditionProperties.QY_CONDITIONS_ON_DISABLED_WARNING, oldValue, disabledToWarning);
};
oFF.QCondition.prototype.setParent = function(parent)
{
	if (oFF.notNull(parent))
	{
		let context = parent.getContext();
		this.m_evaluationDimensions.setContext(context);
		this.m_conditionThresholds.setContext(context);
		this.m_breakGroupDimensions.setContext(context);
	}
	oFF.QModelComponent.prototype.setParent.call( this , parent);
};
oFF.QCondition.prototype.setUsedState = function(usedState)
{
	this.m_usedState = usedState;
};
oFF.QCondition.prototype.setupCondition = function(context, conditionManager, technicalName, isBackendCondition)
{
	this.setupModelComponentWithName(context, conditionManager, technicalName);
	this.m_onDisabledToWarning = true;
	this.m_isActive = true;
	this.m_isBackendCondition = isBackendCondition;
	this.m_conditionThresholds = oFF.QModelComponentList.createModelComponentList(context, this, true, "ThresholdList");
	this.m_evaluationDimensions = oFF.QModelComponentList.createModelComponentList(context, this, false, "EvaluationDimensionList");
	this.m_breakGroupDimensions = oFF.QModelComponentList.createModelComponentList(context, this, false, "BreakGroupDimensionList");
	this.m_breakHierarchy = false;
};

oFF.QConditionThreshold = function() {};
oFF.QConditionThreshold.prototype = new oFF.QModelComponent();
oFF.QConditionThreshold.prototype._ff_c = "QConditionThreshold";

oFF.QConditionThreshold.create = function(context, parentCondition)
{
	let newObj = new oFF.QConditionThreshold();
	newObj.setupThreshold(context, parentCondition);
	return newObj;
};
oFF.QConditionThreshold.prototype.m_conditionComparisonOperator = null;
oFF.QConditionThreshold.prototype.m_firstValue = null;
oFF.QConditionThreshold.prototype.m_firstValueIs = null;
oFF.QConditionThreshold.prototype.m_hierarchyLevel = null;
oFF.QConditionThreshold.prototype.m_leavesOnly = false;
oFF.QConditionThreshold.prototype.m_measureCoordinates = null;
oFF.QConditionThreshold.prototype.m_secondValue = null;
oFF.QConditionThreshold.prototype.m_secondValueIs = null;
oFF.QConditionThreshold.prototype.addMeasureCoordinate = function(dimensionMember)
{
	if (oFF.notNull(dimensionMember))
	{
		this.m_measureCoordinates.add(dimensionMember);
		this.notifyNodeChanged();
	}
};
oFF.QConditionThreshold.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originConditionThreshold = other;
	if (oFF.notNull(originConditionThreshold.m_firstValue))
	{
		this.getLow().copyFrom(originConditionThreshold.getLow(), flags);
	}
	if (oFF.notNull(originConditionThreshold.m_firstValueIs))
	{
		this.getLowIs().copyFrom(originConditionThreshold.getLowIs(), flags);
	}
	if (oFF.notNull(originConditionThreshold.m_secondValue))
	{
		this.getHigh().copyFrom(originConditionThreshold.getHigh(), flags);
	}
	if (oFF.notNull(originConditionThreshold.m_secondValueIs))
	{
		this.getHighIs().copyFrom(originConditionThreshold.getHighIs(), flags);
	}
	let queryModel = this.getQueryModel();
	let originMeasureCoordinates = originConditionThreshold.getMeasureCoordinates();
	let size = originMeasureCoordinates.size();
	for (let i = 0; i < size; i++)
	{
		let origMember = originMeasureCoordinates.get(i);
		let dimension = origMember.getDimension();
		if (oFF.notNull(dimension))
		{
			let cloneMember = queryModel.getDimensionByNameFromExistingMetadata(dimension.getName()).getDimensionMember(origMember.getName());
			if (oFF.notNull(cloneMember))
			{
				cloneMember.copyFrom(origMember, flags);
				this.m_measureCoordinates.addInternal(cloneMember);
			}
		}
	}
	if (oFF.notNull(originConditionThreshold.m_hierarchyLevel))
	{
		this.m_hierarchyLevel = oFF.XIntegerValue.create(originConditionThreshold.m_hierarchyLevel.getInteger());
	}
	this.m_leavesOnly = originConditionThreshold.m_leavesOnly;
	this.m_conditionComparisonOperator = originConditionThreshold.m_conditionComparisonOperator;
};
oFF.QConditionThreshold.prototype.getComparisonOperator = function()
{
	if (oFF.isNull(this.m_conditionComparisonOperator))
	{
		this.m_conditionComparisonOperator = oFF.ConditionComparisonOperator.EQUAL;
	}
	return this.m_conditionComparisonOperator;
};
oFF.QConditionThreshold.prototype.getHigh = function()
{
	if (oFF.isNull(this.m_secondValue))
	{
		this.m_secondValue = oFF.QFactory.createFilterValueBag(this.getContext(), null, this);
	}
	return this.m_secondValue;
};
oFF.QConditionThreshold.prototype.getHighIs = function()
{
	if (oFF.isNull(this.m_secondValueIs))
	{
		this.m_secondValueIs = oFF.QFactory.createFilterValueBag(this.getContext(), null, this);
	}
	return this.m_secondValueIs;
};
oFF.QConditionThreshold.prototype.getLevel = function()
{
	return this.m_hierarchyLevel;
};
oFF.QConditionThreshold.prototype.getLow = function()
{
	if (oFF.isNull(this.m_firstValue))
	{
		this.m_firstValue = oFF.QFactory.createFilterValueBag(this.getContext(), null, this);
	}
	return this.m_firstValue;
};
oFF.QConditionThreshold.prototype.getLowIs = function()
{
	if (oFF.isNull(this.m_firstValueIs))
	{
		this.m_firstValueIs = oFF.QFactory.createFilterValueBag(this.getContext(), null, this);
	}
	return this.m_firstValueIs;
};
oFF.QConditionThreshold.prototype.getMeasureCoordinates = function()
{
	let clientQueryObjectManager = this.getOlapEnv().getClientQueryObjectManager();
	let clientQueryObjectStorageName = this.getQueryManager().getClientQueryObjectStorageName();
	return oFF.XCollectionUtils.map(this.m_measureCoordinates, (measureCoordinate) => {
		if (measureCoordinate.isReleased())
		{
			let member = clientQueryObjectManager.getClientQueryObjectIncludeReleasedByKeyRef(measureCoordinate, clientQueryObjectStorageName);
			if (oFF.notNull(member))
			{
				return member;
			}
		}
		return measureCoordinate;
	});
};
oFF.QConditionThreshold.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.CONDITIONS_THRESHOLD;
};
oFF.QConditionThreshold.prototype.getParent = function()
{
	let thresholdList = oFF.QModelComponent.prototype.getParent.call( this );
	return oFF.notNull(thresholdList) ? thresholdList.getParent() : null;
};
oFF.QConditionThreshold.prototype.isLeavesOnly = function()
{
	return this.m_leavesOnly;
};
oFF.QConditionThreshold.prototype.isValid = function()
{
	return this.getLow().getValue() !== null && this.getMeasureCoordinates().size() >= 1;
};
oFF.QConditionThreshold.prototype.releaseObject = function()
{
	this.m_firstValue = oFF.XObjectExt.release(this.m_firstValue);
	this.m_firstValueIs = oFF.XObjectExt.release(this.m_firstValueIs);
	this.m_secondValue = oFF.XObjectExt.release(this.m_secondValue);
	this.m_secondValueIs = oFF.XObjectExt.release(this.m_secondValueIs);
	this.m_measureCoordinates = oFF.XObjectExt.release(this.m_measureCoordinates);
	this.m_hierarchyLevel = oFF.XObjectExt.release(this.m_hierarchyLevel);
	this.m_conditionComparisonOperator = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QConditionThreshold.prototype.removeMeasureCoordinate = function(dimensionMember)
{
	if (oFF.notNull(dimensionMember))
	{
		this.m_measureCoordinates.removeElement(dimensionMember);
		this.notifyNodeChanged();
	}
};
oFF.QConditionThreshold.prototype.setComparisonOperator = function(conditionComparisonOperator)
{
	let oldValue = this.m_conditionComparisonOperator;
	this.m_conditionComparisonOperator = conditionComparisonOperator;
	this.notifyPropertyConstantChanged(oFF.QConditionProperties.QY_CONDITIONS_COMPARISON, oldValue, conditionComparisonOperator);
};
oFF.QConditionThreshold.prototype.setLeavesOnly = function(leavesOnly)
{
	let oldValue = this.m_leavesOnly;
	this.m_leavesOnly = leavesOnly;
	this.notifyPropertyBooleanChanged(oFF.QConditionProperties.QY_LEAVES_ONLY, oldValue, leavesOnly);
};
oFF.QConditionThreshold.prototype.setLevel = function(level)
{
	if (oFF.isNull(level))
	{
		if (oFF.notNull(this.m_hierarchyLevel))
		{
			oFF.XObjectExt.release(this.m_hierarchyLevel);
			this.m_hierarchyLevel = null;
			this.notifyNodeChanged();
		}
	}
	else
	{
		let newLevelValue = level.getInteger();
		if (oFF.isNull(this.m_hierarchyLevel))
		{
			this.m_hierarchyLevel = oFF.XIntegerValue.create(newLevelValue);
			this.notifyNodeChanged();
		}
		else if (this.m_hierarchyLevel.getInteger() !== newLevelValue)
		{
			this.m_hierarchyLevel.setInteger(newLevelValue);
			this.notifyNodeChanged();
		}
	}
};
oFF.QConditionThreshold.prototype.setParent = function(parent)
{
	if (oFF.notNull(parent))
	{
		this.m_measureCoordinates.setContext(parent.getContext());
	}
	oFF.QModelComponent.prototype.setParent.call( this , parent);
};
oFF.QConditionThreshold.prototype.setupThreshold = function(context, parentCondition)
{
	this.setupModelComponentWithName(context, parentCondition.getThresholds(), "Threshold");
	this.m_conditionComparisonOperator = oFF.ConditionComparisonOperator.EQUAL;
	this.m_measureCoordinates = oFF.QModelComponentList.createModelComponentList(context, this, false, "MeasureCoordinates");
};

oFF.QCurrencyLookupValue = function() {};
oFF.QCurrencyLookupValue.prototype = new oFF.QModelComponent();
oFF.QCurrencyLookupValue.prototype._ff_c = "QCurrencyLookupValue";

oFF.QCurrencyLookupValue.create = function(parent)
{
	let newInstance = new oFF.QCurrencyLookupValue();
	if (oFF.notNull(parent))
	{
		newInstance.setupModelComponent(parent.getContext(), parent);
	}
	return newInstance;
};
oFF.QCurrencyLookupValue.createByFieldName = function(parent, fieldName)
{
	let newInstance = new oFF.QCurrencyLookupValue();
	if (oFF.notNull(parent))
	{
		newInstance.setupModelComponent(parent.getContext(), parent);
	}
	newInstance.setFieldName(fieldName);
	return newInstance;
};
oFF.QCurrencyLookupValue.createByFormulaItem = function(parent, formulaItem)
{
	let newInstance = new oFF.QCurrencyLookupValue();
	newInstance.setFormulaItem(formulaItem);
	if (oFF.notNull(parent))
	{
		newInstance.setupModelComponent(parent.getContext(), parent);
	}
	return newInstance;
};
oFF.QCurrencyLookupValue.createByVariableName = function(parent, variableName)
{
	let newInstance = new oFF.QCurrencyLookupValue();
	if (oFF.notNull(parent))
	{
		newInstance.setupModelComponent(parent.getContext(), parent);
	}
	newInstance.setVariableName(variableName);
	return newInstance;
};
oFF.QCurrencyLookupValue.createFixedByValue = function(parent, value)
{
	let newInstance = new oFF.QCurrencyLookupValue();
	if (oFF.notNull(parent))
	{
		newInstance.setupModelComponent(parent.getContext(), parent);
	}
	newInstance.setFixedValue(value);
	return newInstance;
};
oFF.QCurrencyLookupValue.isEmpty = function(lookupValue)
{
	return oFF.isNull(lookupValue) || lookupValue.getFixedValue() === null && lookupValue.getFormulaItem() === null && oFF.XStringUtils.isNullOrEmpty(lookupValue.getFieldName()) && oFF.XStringUtils.isNullOrEmpty(lookupValue.getVariableName());
};
oFF.QCurrencyLookupValue.prototype.m_fieldName = null;
oFF.QCurrencyLookupValue.prototype.m_fixedValue = null;
oFF.QCurrencyLookupValue.prototype.m_formulaItem = null;
oFF.QCurrencyLookupValue.prototype.m_variableName = null;
oFF.QCurrencyLookupValue.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originValue = other;
	this.m_fixedValue = oFF.XObjectExt.cloneExtIfNotNull(originValue.m_fixedValue, flags);
	this.m_fieldName = originValue.m_fieldName;
	this.m_variableName = originValue.m_variableName;
	if (oFF.notNull(originValue.m_formulaItem))
	{
		this.m_formulaItem = originValue.m_formulaItem.cloneOlapComponent(this.getContext(), this);
	}
};
oFF.QCurrencyLookupValue.prototype.getField = function()
{
	return this.getQueryModel().getFieldByName(this.m_fieldName);
};
oFF.QCurrencyLookupValue.prototype.getFieldName = function()
{
	return this.m_fieldName;
};
oFF.QCurrencyLookupValue.prototype.getFixedValue = function()
{
	return this.m_fixedValue;
};
oFF.QCurrencyLookupValue.prototype.getFixedValueAsDate = function()
{
	return oFF.isNull(this.m_fixedValue) || this.m_fixedValue.getValueType() !== oFF.XValueType.DATE ? null : this.m_fixedValue;
};
oFF.QCurrencyLookupValue.prototype.getFixedValueAsString = function()
{
	return oFF.isNull(this.m_fixedValue) ? null : this.m_fixedValue.getStringRepresentation();
};
oFF.QCurrencyLookupValue.prototype.getFormulaItem = function()
{
	return this.m_formulaItem;
};
oFF.QCurrencyLookupValue.prototype.getVariable = function()
{
	return this.getQueryModel().getVariable(this.m_variableName);
};
oFF.QCurrencyLookupValue.prototype.getVariableName = function()
{
	return this.m_variableName;
};
oFF.QCurrencyLookupValue.prototype.isFieldBased = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.m_fieldName);
};
oFF.QCurrencyLookupValue.prototype.isFixed = function()
{
	return oFF.notNull(this.m_fixedValue);
};
oFF.QCurrencyLookupValue.prototype.isFormulaBased = function()
{
	return oFF.notNull(this.m_formulaItem);
};
oFF.QCurrencyLookupValue.prototype.isVariableBased = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.m_variableName);
};
oFF.QCurrencyLookupValue.prototype.releaseObject = function()
{
	this.m_fieldName = null;
	this.m_variableName = null;
	this.m_fixedValue = oFF.XObjectExt.release(this.m_fixedValue);
	this.m_formulaItem = oFF.XObjectExt.release(this.m_formulaItem);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QCurrencyLookupValue.prototype.reset = function()
{
	this.m_fieldName = null;
	this.m_fixedValue = null;
	this.m_formulaItem = null;
	this.m_variableName = null;
};
oFF.QCurrencyLookupValue.prototype.setField = function(field)
{
	this.setFieldName(oFF.isNull(field) ? null : field.getName());
};
oFF.QCurrencyLookupValue.prototype.setFieldName = function(fieldName)
{
	this.reset();
	this.m_fieldName = fieldName;
	this.notifyNodeChanged();
};
oFF.QCurrencyLookupValue.prototype.setFixedValue = function(value)
{
	this.reset();
	this.m_fixedValue = value;
	this.notifyNodeChanged();
};
oFF.QCurrencyLookupValue.prototype.setFormulaItem = function(formulaItem)
{
	this.reset();
	this.m_formulaItem = formulaItem;
	this.notifyNodeChanged();
};
oFF.QCurrencyLookupValue.prototype.setVariable = function(variable)
{
	this.setVariableName(oFF.isNull(variable) ? null : variable.getName());
};
oFF.QCurrencyLookupValue.prototype.setVariableName = function(variableName)
{
	this.reset();
	this.m_variableName = variableName;
	this.notifyNodeChanged();
};

oFF.QDataCell = function() {};
oFF.QDataCell.prototype = new oFF.QModelComponent();
oFF.QDataCell.prototype._ff_c = "QDataCell";

oFF.QDataCell._create = function(parentNode, name)
{
	let cell = new oFF.QDataCell();
	cell.setupDataCell(parentNode, name);
	return cell;
};
oFF.QDataCell.prototype.m_baseCellValueType = null;
oFF.QDataCell.prototype.m_cumulation = false;
oFF.QDataCell.prototype.m_currencyPresentation = null;
oFF.QDataCell.prototype.m_decimalPlaces = 0;
oFF.QDataCell.prototype.m_dimensionReference = null;
oFF.QDataCell.prototype.m_disaggMode = null;
oFF.QDataCell.prototype.m_disaggRefCellName = null;
oFF.QDataCell.prototype.m_emphasized = false;
oFF.QDataCell.prototype.m_inputEnabled = false;
oFF.QDataCell.prototype.m_measure1Id = null;
oFF.QDataCell.prototype.m_measure2Id = null;
oFF.QDataCell.prototype.m_memberName1 = null;
oFF.QDataCell.prototype.m_memberName2 = null;
oFF.QDataCell.prototype.m_scaleAndUnitPlacement = null;
oFF.QDataCell.prototype.m_scaleFormat = null;
oFF.QDataCell.prototype.m_scalingFactor = 0;
oFF.QDataCell.prototype.m_semanticObject = null;
oFF.QDataCell.prototype.m_signPresentation = null;
oFF.QDataCell.prototype.m_signReversal = false;
oFF.QDataCell.prototype.m_signReversalExplicitlySet = false;
oFF.QDataCell.prototype.addDimensionMemberReference = function(name)
{
	if (oFF.isNull(this.m_memberName1))
	{
		this.m_memberName1 = name;
	}
	else if (oFF.isNull(this.m_memberName2))
	{
		this.m_memberName2 = name;
	}
};
oFF.QDataCell.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originDataCell = other;
	this.m_disaggMode = originDataCell.m_disaggMode;
	this.m_disaggRefCellName = originDataCell.m_disaggRefCellName;
	this.m_cumulation = originDataCell.m_cumulation;
	this.m_emphasized = originDataCell.m_emphasized;
	this.m_inputEnabled = originDataCell.m_inputEnabled;
	this.m_signReversal = originDataCell.m_signReversal;
	this.m_decimalPlaces = originDataCell.m_decimalPlaces;
	this.m_scalingFactor = originDataCell.m_scalingFactor;
	this.m_baseCellValueType = originDataCell.m_baseCellValueType;
	if (oFF.notNull(originDataCell.m_dimensionReference))
	{
		this.setDimensionReference(this.getDimensionAccessor().getDimensionByNameFromExistingMetadata(originDataCell.getDimensionReference().getName()));
	}
	this.m_memberName1 = originDataCell.m_memberName1;
	this.m_memberName2 = originDataCell.m_memberName2;
	this.m_signReversalExplicitlySet = originDataCell.m_signReversalExplicitlySet;
	this.m_semanticObject = originDataCell.m_semanticObject;
};
oFF.QDataCell.prototype.exportingWithCompleteDefinition = function()
{
	let featureActivated = this.getModelCapabilities().supportsPersistedInA();
	return !featureActivated || this.isUserAddedDataCell();
};
oFF.QDataCell.prototype.getBaseValueType = function()
{
	return this.m_baseCellValueType;
};
oFF.QDataCell.prototype.getCurrencyPresentation = function()
{
	return this.m_currencyPresentation;
};
oFF.QDataCell.prototype.getDataCellEntry = function(createIfNotExisting)
{
	let queryManager = this.getQueryManager();
	let resultSetContainer = queryManager.getActiveResultSetContainer();
	if (oFF.isNull(resultSetContainer) || resultSetContainer.getSyncState().isNotInSync())
	{
		return null;
	}
	if (!resultSetContainer.hasDataEntryCollection())
	{
		return null;
	}
	let dataEntries = resultSetContainer.getDataEntryCollection();
	if (createIfNotExisting)
	{
		return dataEntries.getDataCellEntry(this.getName());
	}
	return dataEntries.getDataCellEntryIfExisting(this.getName());
};
oFF.QDataCell.prototype.getDecimalPlaces = function()
{
	return this.m_decimalPlaces;
};
oFF.QDataCell.prototype.getDefaultDecimalPlaces = function()
{
	if (this.isDecimalPlacesDefault())
	{
		return this.getDecimalPlaces();
	}
	let metaValue = this.getMetaValue(oFF.QDataCellProperties.QY_DECIMAL_PLACES);
	return metaValue.getInteger();
};
oFF.QDataCell.prototype.getDefaultDisaggregationMode = function()
{
	if (this.isDisaggregationModeDefault())
	{
		return this.getDisaggregationMode();
	}
	let metaValue = this.getMetaValue(oFF.QDataCellProperties.QY_DISAGGREGATION_MODE);
	return metaValue;
};
oFF.QDataCell.prototype.getDefaultScalingFactor = function()
{
	if (this.isScalingFactorDefault())
	{
		return this.getScalingFactor();
	}
	let metaValue = this.getMetaValue(oFF.QDataCellProperties.QY_SCALING_FACTOR);
	return metaValue.getInteger();
};
oFF.QDataCell.prototype.getDimensionReference = function()
{
	return oFF.isNull(this.m_dimensionReference) ? null : oFF.XWeakReferenceUtil.getHardRef(this.m_dimensionReference);
};
oFF.QDataCell.prototype.getDisaggregationMode = function()
{
	let dataCellEntry = this.getDataCellEntry(false);
	if (oFF.notNull(dataCellEntry))
	{
		let entryDisaggregationMode = dataCellEntry.getDisaggregationMode();
		if (oFF.notNull(entryDisaggregationMode))
		{
			return entryDisaggregationMode;
		}
	}
	return this.m_disaggMode;
};
oFF.QDataCell.prototype.getDisaggregationRefCell = function()
{
	let refCellName = this.getDisaggregationRefCellName();
	let parentComponent = this.getParentComponent();
	if (oFF.isNull(parentComponent))
	{
		return null;
	}
	return parentComponent.getByKey(refCellName);
};
oFF.QDataCell.prototype.getDisaggregationRefCellName = function()
{
	let dataCellEntry = this.getDataCellEntry(false);
	if (oFF.notNull(dataCellEntry))
	{
		let entryRefCellName = dataCellEntry.getDisaggregationRefCellName();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(entryRefCellName))
		{
			return entryRefCellName;
		}
	}
	return this.m_disaggRefCellName;
};
oFF.QDataCell.prototype.getMeasure1IdValue = function()
{
	return this.m_measure1Id;
};
oFF.QDataCell.prototype.getMeasure2IdValue = function()
{
	return this.m_measure2Id;
};
oFF.QDataCell.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.DATA_CELL;
};
oFF.QDataCell.prototype.getReferenceStructureElement = function(memberName)
{
	if (oFF.isNull(memberName))
	{
		return null;
	}
	let measureStructure = this.getQueryModel().getMeasureDimension();
	if (oFF.notNull(measureStructure))
	{
		let member = measureStructure.getStructureMember(memberName);
		if (oFF.notNull(member))
		{
			return member;
		}
	}
	let nonMeasureStructure = this.getQueryModel().getNonMeasureDimension();
	return oFF.isNull(nonMeasureStructure) ? null : nonMeasureStructure.getStructureMember(memberName);
};
oFF.QDataCell.prototype.getReferenceStructureElement1 = function()
{
	return this.getReferenceStructureElement(this.m_memberName1);
};
oFF.QDataCell.prototype.getReferenceStructureElement2 = function()
{
	return this.getReferenceStructureElement(this.m_memberName2);
};
oFF.QDataCell.prototype.getScaleAndUnitPlacement = function()
{
	return this.m_scaleAndUnitPlacement;
};
oFF.QDataCell.prototype.getScaleFormat = function()
{
	return this.m_scaleFormat;
};
oFF.QDataCell.prototype.getScalingFactor = function()
{
	return this.m_scalingFactor;
};
oFF.QDataCell.prototype.getSemanticObject = function()
{
	return this.m_semanticObject;
};
oFF.QDataCell.prototype.getSignPresentation = function()
{
	return this.m_signPresentation;
};
oFF.QDataCell.prototype.getText = function()
{
	return this.getName();
};
oFF.QDataCell.prototype.hasAnyMemberReferencesSet = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.m_memberName1) || oFF.XStringUtils.isNotNullAndNotEmpty(this.m_memberName2);
};
oFF.QDataCell.prototype.hasMeasureReference = function(measureName)
{
	return oFF.XString.isEqual(this.m_memberName1, measureName) || oFF.XString.isEqual(this.m_memberName2, measureName);
};
oFF.QDataCell.prototype.hasMemberReference = function(strucMember)
{
	if (oFF.XString.isEqual(this.m_memberName1, strucMember.getName()))
	{
		return true;
	}
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.m_memberName2) && oFF.XString.isEqual(this.m_memberName2, strucMember.getName());
};
oFF.QDataCell.prototype.hasSignReversal = function()
{
	return this.m_signReversal;
};
oFF.QDataCell.prototype.isCumulated = function()
{
	return this.m_cumulation;
};
oFF.QDataCell.prototype.isCurrencyPresentationDefault = function()
{
	return !this.hasPropertyChanged(oFF.QDataCellProperties.QY_CURRENCY_PRESENTATION);
};
oFF.QDataCell.prototype.isDecimalPlacesDefault = function()
{
	return !this.hasPropertyChanged(oFF.QDataCellProperties.QY_DECIMAL_PLACES);
};
oFF.QDataCell.prototype.isDisaggregationModeDefault = function()
{
	return !this.hasPropertyChanged(oFF.QDataCellProperties.QY_DISAGGREGATION_MODE);
};
oFF.QDataCell.prototype.isEmphasized = function()
{
	return this.m_emphasized;
};
oFF.QDataCell.prototype.isInputEnabled = function()
{
	return this.m_inputEnabled;
};
oFF.QDataCell.prototype.isScaleAndUnitPlacementDefault = function()
{
	return !this.hasPropertyChanged(oFF.QDataCellProperties.QY_SCALE_FORMAT);
};
oFF.QDataCell.prototype.isScaleFormatDefault = function()
{
	return !this.hasPropertyChanged(oFF.QDataCellProperties.QY_SCALE_FORMAT);
};
oFF.QDataCell.prototype.isScalingFactorDefault = function()
{
	return !this.hasPropertyChanged(oFF.QDataCellProperties.QY_SCALING_FACTOR);
};
oFF.QDataCell.prototype.isSignPresentationDefault = function()
{
	return !this.hasPropertyChanged(oFF.QDataCellProperties.QY_SIGN_PRESENTATION);
};
oFF.QDataCell.prototype.isUserAddedDataCell = function()
{
	let measure1UserDefined = false;
	let measure1 = this.getReferenceStructureElement1();
	if (oFF.notNull(measure1))
	{
		measure1UserDefined = !measure1.isCreatedFromMetadata();
	}
	let measure2 = this.getReferenceStructureElement2();
	if (oFF.isNull(measure2))
	{
		return measure1UserDefined;
	}
	return measure1UserDefined || !measure2.isCreatedFromMetadata();
};
oFF.QDataCell.prototype.releaseObject = function()
{
	this.m_disaggMode = null;
	this.m_disaggRefCellName = null;
	this.m_baseCellValueType = null;
	this.m_dimensionReference = oFF.XObjectExt.release(this.m_dimensionReference);
	this.m_memberName1 = null;
	this.m_memberName2 = null;
	this.m_semanticObject = null;
	this.m_currencyPresentation = null;
	this.m_scaleAndUnitPlacement = null;
	this.m_scaleFormat = null;
	this.m_signPresentation = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QDataCell.prototype.resetToDefaultCurrencyPresentation = function()
{
	this.toggleDefaultingProcess(true);
	let metaValue = this.getMetaValue(oFF.QDataCellProperties.QY_CURRENCY_PRESENTATION);
	if (oFF.notNull(metaValue))
	{
		this.setCurrencyPresentation(oFF.CurrencyPresentation.lookup(metaValue.toString()));
	}
	this.toggleDefaultingProcess(false);
};
oFF.QDataCell.prototype.resetToDefaultDecimalPlaces = function()
{
	this.toggleDefaultingProcess(true);
	let metaValue = this.getMetaValue(oFF.QDataCellProperties.QY_DECIMAL_PLACES);
	if (oFF.notNull(metaValue))
	{
		this.setDecimalPlaces(oFF.XInteger.convertFromString(metaValue.toString()));
	}
	this.toggleDefaultingProcess(false);
};
oFF.QDataCell.prototype.resetToDefaultDisaggregationMode = function()
{
	this.toggleDefaultingProcess(true);
	let metaValue = this.getMetaValue(oFF.QDataCellProperties.QY_DISAGGREGATION_MODE);
	if (oFF.notNull(metaValue))
	{
		this.setDisaggregationMode(oFF.DisaggregationMode.lookup(metaValue.toString()));
	}
	this.toggleDefaultingProcess(false);
};
oFF.QDataCell.prototype.resetToDefaultScaleAndUnitPlacement = function()
{
	this.toggleDefaultingProcess(true);
	let metaValue = this.getMetaValue(oFF.QDataCellProperties.QY_SCALE_AND_UNIT_PLACEMENT);
	if (oFF.notNull(metaValue))
	{
		this.setScaleAndUnitPlacement(oFF.ScaleAndUnitPlacement.lookup(metaValue.toString()));
	}
	this.toggleDefaultingProcess(false);
};
oFF.QDataCell.prototype.resetToDefaultScaleFormat = function()
{
	this.toggleDefaultingProcess(true);
	let metaValue = this.getMetaValue(oFF.QDataCellProperties.QY_SCALE_FORMAT);
	if (oFF.notNull(metaValue))
	{
		this.setScaleFormat(oFF.ScaleFormat.lookup(metaValue.toString()));
	}
	this.toggleDefaultingProcess(false);
};
oFF.QDataCell.prototype.resetToDefaultScalingFactor = function()
{
	this.toggleDefaultingProcess(true);
	let metaValue = this.getMetaValue(oFF.QDataCellProperties.QY_SCALING_FACTOR);
	if (oFF.notNull(metaValue))
	{
		this.setScalingFactor(oFF.XInteger.convertFromString(metaValue.toString()));
	}
	this.toggleDefaultingProcess(false);
};
oFF.QDataCell.prototype.resetToDefaultSignPresentation = function()
{
	this.toggleDefaultingProcess(true);
	let metaValue = this.getMetaValue(oFF.QDataCellProperties.QY_SIGN_PRESENTATION);
	if (oFF.notNull(metaValue))
	{
		this.setSignPresentation(oFF.SignPresentation.lookup(metaValue.toString()));
	}
	this.toggleDefaultingProcess(false);
};
oFF.QDataCell.prototype.setBaseCellValueType = function(cellValueType)
{
	this.m_baseCellValueType = cellValueType;
};
oFF.QDataCell.prototype.setCumulation = function(cumulate)
{
	let oldValue = this.m_cumulation;
	this.m_cumulation = cumulate;
	this.notifyPropertyBooleanChanged(oFF.QDataCellProperties.QY_CUMULATION, oldValue, cumulate);
};
oFF.QDataCell.prototype.setCurrencyPresentation = function(currencyPresentation)
{
	let oldValue = this.m_currencyPresentation;
	this.m_currencyPresentation = currencyPresentation;
	this.notifyPropertyConstantChanged(oFF.QDataCellProperties.QY_CURRENCY_PRESENTATION, oldValue, currencyPresentation);
};
oFF.QDataCell.prototype.setDecimalPlaces = function(places)
{
	let oldDecimalPlaces = this.m_decimalPlaces;
	this.m_decimalPlaces = places;
	this.notifyPropertyIntegerChanged(oFF.QDataCellProperties.QY_DECIMAL_PLACES, oldDecimalPlaces, places);
};
oFF.QDataCell.prototype.setDimensionReference = function(dimensionReference)
{
	this.m_dimensionReference = oFF.XWeakReferenceUtil.getWeakRef(dimensionReference);
};
oFF.QDataCell.prototype.setDisaggregationMode = function(mode)
{
	let oldValue = this.m_disaggMode;
	this.m_disaggMode = mode;
	this.notifyPropertyConstantChanged(oFF.QDataCellProperties.QY_DISAGGREGATION_MODE, oldValue, mode);
};
oFF.QDataCell.prototype.setDisaggregationModeForDataEntry = function(mode)
{
	let dataCellEntry = this.getDataCellEntry(true);
	if (oFF.notNull(dataCellEntry))
	{
		dataCellEntry.setDisaggregationMode(mode);
	}
};
oFF.QDataCell.prototype.setDisaggregationRefCell = function(cell)
{
	if (oFF.isNull(cell))
	{
		if (oFF.notNull(this.m_disaggRefCellName))
		{
			this.notifyNodeChanged();
		}
		this.setDisaggregationRefCellName(null);
	}
	else
	{
		if (oFF.isNull(this.m_disaggRefCellName) || this.getDisaggregationRefCell() !== cell)
		{
			this.setDisaggregationRefCellName(cell.getName());
			this.notifyNodeChanged();
		}
	}
};
oFF.QDataCell.prototype.setDisaggregationRefCellForDataEntry = function(cell)
{
	let dataCellEntry = this.getDataCellEntry(true);
	if (oFF.notNull(dataCellEntry))
	{
		dataCellEntry.setDisaggregationRefCellName(oFF.isNull(cell) ? null : cell.getName());
	}
};
oFF.QDataCell.prototype.setDisaggregationRefCellName = function(name)
{
	let oldValue = this.m_disaggRefCellName;
	this.m_disaggRefCellName = name;
	this.notifyPropertyStringChanged(oFF.QDataCellProperties.QY_DISAGGREGATION_REF_CELL_NAME, oldValue, name);
};
oFF.QDataCell.prototype.setEmphasized = function(emphazised)
{
	let oldValue = this.m_emphasized;
	this.m_emphasized = emphazised;
	this.notifyPropertyBooleanChanged(oFF.QDataCellProperties.QY_EMPHASIZED, oldValue, emphazised);
};
oFF.QDataCell.prototype.setInputEnabled = function(enabled)
{
	let oldValue = this.m_inputEnabled;
	this.m_inputEnabled = enabled;
	this.notifyPropertyBooleanChanged(oFF.QDataCellProperties.QY_INPUT_ENABLED, oldValue, enabled);
};
oFF.QDataCell.prototype.setMeasure1IdValue = function(measure1Id)
{
	this.m_measure1Id = measure1Id;
};
oFF.QDataCell.prototype.setMeasure2IdValue = function(measure2Id)
{
	this.m_measure2Id = measure2Id;
};
oFF.QDataCell.prototype.setScaleAndUnitPlacement = function(scaleAndUnitPlacement)
{
	let oldValue = this.m_scaleAndUnitPlacement;
	this.m_scaleAndUnitPlacement = scaleAndUnitPlacement;
	this.notifyPropertyConstantChanged(oFF.QDataCellProperties.QY_SCALE_AND_UNIT_PLACEMENT, oldValue, scaleAndUnitPlacement);
};
oFF.QDataCell.prototype.setScaleFormat = function(scaleFormat)
{
	let oldValue = this.m_scaleFormat;
	this.m_scaleFormat = scaleFormat;
	this.notifyPropertyConstantChanged(oFF.QDataCellProperties.QY_SCALE_FORMAT, oldValue, scaleFormat);
};
oFF.QDataCell.prototype.setScalingFactor = function(factor)
{
	let oldScalingFactor = this.m_scalingFactor;
	this.m_scalingFactor = factor;
	this.notifyPropertyIntegerChanged(oFF.QDataCellProperties.QY_SCALING_FACTOR, oldScalingFactor, factor);
};
oFF.QDataCell.prototype.setSemanticObject = function(semanticObject)
{
	this.m_semanticObject = semanticObject;
};
oFF.QDataCell.prototype.setSignPresentation = function(signPresentation)
{
	let oldValue = this.m_signPresentation;
	this.m_signPresentation = signPresentation;
	this.notifyPropertyConstantChanged(oFF.QDataCellProperties.QY_SIGN_PRESENTATION, oldValue, signPresentation);
};
oFF.QDataCell.prototype.setSignReversal = function(reverse)
{
	this.m_signReversalExplicitlySet = true;
	let oldValue = this.m_signReversal;
	this.m_signReversal = reverse;
	this.notifyPropertyBooleanChanged(oFF.QDataCellProperties.QY_SIGN_REVERSAL, oldValue, reverse);
};
oFF.QDataCell.prototype.setupDataCell = function(parentNode, name)
{
	this.setupModelComponentWithName(parentNode, parentNode, name);
	this.m_baseCellValueType = null;
	this.m_decimalPlaces = -1;
	this.m_scalingFactor = 0;
};
oFF.QDataCell.prototype.signReversalExplicitlySet = function()
{
	return this.m_signReversalExplicitlySet;
};

oFF.QQueryCell = function() {};
oFF.QQueryCell.prototype = new oFF.QModelComponent();
oFF.QQueryCell.prototype._ff_c = "QQueryCell";

oFF.QQueryCell.create = function(context, name)
{
	let queryCell = new oFF.QQueryCell();
	queryCell.setupModelComponentWithName(context, context, name);
	queryCell.m_positions = oFF.XList.create();
	return queryCell;
};
oFF.QQueryCell.prototype.m_cellCalculationMember = null;
oFF.QQueryCell.prototype.m_positions = null;
oFF.QQueryCell.prototype.addPosition = function(member)
{
	let cellPosition = oFF.QQueryCellPosition.createCellPosition(member);
	this.m_positions.add(cellPosition);
	this.notifyNodeChanged();
	return cellPosition;
};
oFF.QQueryCell.prototype.clearPositions = function()
{
	this.m_positions.clear();
	this.notifyNodeChanged();
};
oFF.QQueryCell.prototype.cloneOlapComponent = function(context, parent)
{
	let queryCell = oFF.QQueryCell.create(context, this.getName());
	let dimensionAccessor = context.getDimensionAccessor();
	let dimension = dimensionAccessor.getDimensionByName(this.m_cellCalculationMember.getDimension().getName());
	queryCell.m_cellCalculationMember = dimension.getStructureMember(this.m_cellCalculationMember.getName());
	let queryCellPosIt = this.m_positions.getIterator();
	while (queryCellPosIt.hasNext())
	{
		let queryCellPosition = queryCellPosIt.next();
		dimension = dimensionAccessor.getDimensionByName(queryCellPosition.getDimensionName());
		queryCell.addPosition(dimension.getStructureMember(queryCellPosition.getMemberName()));
	}
	return queryCell;
};
oFF.QQueryCell.prototype.getCellCalculationMember = function()
{
	return this.m_cellCalculationMember;
};
oFF.QQueryCell.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.QUERY_CELL;
};
oFF.QQueryCell.prototype.getPositions = function()
{
	return this.m_positions;
};
oFF.QQueryCell.prototype.releaseObject = function()
{
	this.m_cellCalculationMember = null;
	this.m_positions = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_positions);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QQueryCell.prototype.setCellCalculationMember = function(member)
{
	this.m_cellCalculationMember = member;
	this.notifyNodeChanged();
};

oFF.QDimensionReadModeManager = function() {};
oFF.QDimensionReadModeManager.prototype = new oFF.QModelComponent();
oFF.QDimensionReadModeManager.prototype._ff_c = "QDimensionReadModeManager";

oFF.QDimensionReadModeManager._create = function(dimension)
{
	let readModeManager = new oFF.QDimensionReadModeManager();
	readModeManager.setupModelComponent(dimension, dimension);
	readModeManager.setupReadModeManager();
	return readModeManager;
};
oFF.QDimensionReadModeManager.prototype.m_readModes = null;
oFF.QDimensionReadModeManager.prototype.addSupportedReadMode = function(context, mode)
{
	let readModeContainer = this.m_readModes.getByKey(context.getName());
	readModeContainer.addSupportedReadMode(mode);
};
oFF.QDimensionReadModeManager.prototype.clearReadModes = function(context)
{
	this.m_readModes.getByKey(context.getName()).clearReadmode();
};
oFF.QDimensionReadModeManager.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, null);
	let xOrigin = other;
	let contextName = oFF.QContextType.RESULT_SET.getName();
	this.m_readModes.getByKey(contextName).copyDimensionReadMode(xOrigin.m_readModes.getByKey(contextName));
	contextName = oFF.QContextType.SELECTOR.getName();
	this.m_readModes.getByKey(contextName).copyDimensionReadMode(xOrigin.m_readModes.getByKey(contextName));
	contextName = oFF.QContextType.VARIABLE.getName();
	this.m_readModes.getByKey(contextName).copyDimensionReadMode(xOrigin.m_readModes.getByKey(contextName));
};
oFF.QDimensionReadModeManager.prototype.determineBestReadMode = function(context, mode)
{
	let readModeContainer = this.m_readModes.getByKey(context.getName());
	return readModeContainer.determineBestReadMode(mode);
};
oFF.QDimensionReadModeManager.prototype.getReadMode = function(context)
{
	let readModeContainer = this.m_readModes.getByKey(context.getName());
	return readModeContainer.getActiveReadMode();
};
oFF.QDimensionReadModeManager.prototype.getReadModeDefault = function(context)
{
	let readModeContainer = this.m_readModes.getByKey(context.getName());
	return readModeContainer.getDefaultReadMode();
};
oFF.QDimensionReadModeManager.prototype.getSupportedReadModes = function(context)
{
	let readModeContainer = this.m_readModes.getByKey(context.getName());
	return readModeContainer.getSupportedReadModes();
};
oFF.QDimensionReadModeManager.prototype.hasReadModeDefault = function(context)
{
	let readModeContainer = this.m_readModes.getByKey(context.getName());
	return readModeContainer.hasReadModeDefault();
};
oFF.QDimensionReadModeManager.prototype.mergeDeepRecursive = function(settings, other)
{
	let otherDim = other;
	this.setNewReadModes(otherDim, oFF.QContextType.RESULT_SET);
	this.setNewReadModes(otherDim, oFF.QContextType.SELECTOR);
	this.setNewReadModes(otherDim, oFF.QContextType.VARIABLE);
};
oFF.QDimensionReadModeManager.prototype.releaseObject = function()
{
	this.m_readModes = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_readModes);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QDimensionReadModeManager.prototype.resetToDefaultReadMode = function(context)
{
	return null;
};
oFF.QDimensionReadModeManager.prototype.setNewReadModes = function(otherDim, context)
{
	let readModeContainer = this.m_readModes.getByKey(context.getName());
	readModeContainer.clearReadmode();
	let supportedReadModes = otherDim.getSupportedReadModes(context).getValuesAsReadOnlyList();
	let size = supportedReadModes.size();
	for (let idx = 0; idx < size; idx++)
	{
		readModeContainer.addSupportedReadMode(supportedReadModes.get(idx));
	}
	let activeReadMode = otherDim.getReadMode(context);
	let defaultReadMode = otherDim.getReadModeDefault(context);
	readModeContainer.setDefaultReadMode(defaultReadMode, otherDim.hasReadModeDefault(context));
	if (oFF.isNull(activeReadMode))
	{
		readModeContainer.setActiveReadMode(defaultReadMode);
	}
	else
	{
		readModeContainer.setActiveReadMode(activeReadMode);
	}
};
oFF.QDimensionReadModeManager.prototype.setReadMode = function(context, mode)
{
	let readModeContainer = this.m_readModes.getByKey(context.getName());
	readModeContainer.setActiveReadMode(mode);
};
oFF.QDimensionReadModeManager.prototype.setReadModeDefault = function(context, mode, modeIsDefinedByDimensionMetadata)
{
	let readModeContainer = this.m_readModes.getByKey(context.getName());
	readModeContainer.setDefaultReadMode(mode, modeIsDefinedByDimensionMetadata);
};
oFF.QDimensionReadModeManager.prototype.setReadModeGraceful = function(context, mode)
{
	let readModeContainer = this.m_readModes.getByKey(context.getName());
	let bestReadMode = readModeContainer.determineBestReadMode(mode);
	this.setReadMode(context, bestReadMode);
	return bestReadMode;
};
oFF.QDimensionReadModeManager.prototype.setupReadModeManager = function()
{
	this.m_readModes = oFF.XHashMapByString.create();
	this.m_readModes.put(oFF.QContextType.RESULT_SET.getName(), oFF.QDimensionReadMode.create(this));
	this.m_readModes.put(oFF.QContextType.SELECTOR.getName(), oFF.QDimensionReadMode.create(this));
	this.m_readModes.put(oFF.QContextType.VARIABLE.getName(), oFF.QDimensionReadMode.create(this));
};
oFF.QDimensionReadModeManager.prototype.supportsReadMode = function(context, readMode)
{
	return readMode === oFF.QMemberReadMode.DEFAULT_VALUE || this.getSupportedReadModes(context).contains(readMode);
};

oFF.QDimensionSelector = function() {};
oFF.QDimensionSelector.prototype = new oFF.QModelComponent();
oFF.QDimensionSelector.prototype._ff_c = "QDimensionSelector";

oFF.QDimensionSelector.QY_UNIQUE_NAME = "UniqueName";
oFF.QDimensionSelector.create = function(dimension)
{
	let dimensionSelector = new oFF.QDimensionSelector();
	dimensionSelector.setupDimensionSelector(dimension);
	return dimensionSelector;
};
oFF.QDimensionSelector.prototype.m_customTextField = null;
oFF.QDimensionSelector.prototype.m_dimension = null;
oFF.QDimensionSelector.prototype.m_isGettingInterval = false;
oFF.QDimensionSelector.prototype.m_isUsingVisibilityFilter = false;
oFF.QDimensionSelector.prototype.m_measureHelpMetadataSelector = null;
oFF.QDimensionSelector.prototype.m_parentFilter = null;
oFF.QDimensionSelector.prototype.m_selectorFilterUsage = null;
oFF.QDimensionSelector.prototype.m_selectorHierarchyActive = false;
oFF.QDimensionSelector.prototype.m_selectorHierarchyName = null;
oFF.QDimensionSelector.prototype.m_selectorHierarchyNavigations = null;
oFF.QDimensionSelector.prototype.m_selectorHierarchyNode = null;
oFF.QDimensionSelector.prototype.m_selectorHierarchyNodeName = null;
oFF.QDimensionSelector.prototype.m_selectorHierarchyNodeSid = null;
oFF.QDimensionSelector.prototype.m_selectorLowerLevelNodeAlignment = null;
oFF.QDimensionSelector.prototype.m_selectorMaxResultRecords = 0;
oFF.QDimensionSelector.prototype.m_selectorPagingEnd = 0;
oFF.QDimensionSelector.prototype.m_selectorPagingStart = 0;
oFF.QDimensionSelector.prototype.m_selectorRootLevel = 0;
oFF.QDimensionSelector.prototype.m_selectorSorting = null;
oFF.QDimensionSelector.prototype.m_sortType = null;
oFF.QDimensionSelector.prototype.m_useDisplayKey = false;
oFF.QDimensionSelector.prototype.m_useQueryDrillOperations = false;
oFF.QDimensionSelector.prototype._addElementsToSelector = function(filterElements)
{
	if (oFF.isNull(filterElements) || !filterElements.hasElements())
	{
		return;
	}
	let queryModel = this.getQueryModel();
	let andFilter = oFF.QFactory.createFilterAnd(queryModel);
	for (let i = 0; i < filterElements.size(); i++)
	{
		let filterElement = filterElements.get(i);
		andFilter.add(filterElement);
	}
	let f4Container = queryModel.getFilter().getValuehelpFilter();
	f4Container.setComplexRoot(andFilter);
};
oFF.QDimensionSelector.prototype._addSelectorForValuesAndExternalFilterInternal = function(extraFilterElement, values, searchMode)
{
	let queryModel = this.getQueryModel();
	let filter = queryModel.getFilter();
	filter.getValuehelpFilter().setComplexRoot(null);
	filter.getValuehelpFilter().setCartesianProduct(null);
	this.setSelectorFilterUsage(oFF.QueryFilterUsage.SELECTOR_FILTER);
	let filterElements = oFF.XList.create();
	if (oFF.notNull(extraFilterElement))
	{
		filterElements.add(extraFilterElement);
	}
	this._createFilterForMode(searchMode, values, filterElements);
	this._addElementsToSelector(filterElements);
};
oFF.QDimensionSelector.prototype._createCartesianListOfValues = function(values, filterField)
{
	if (oFF.isNull(filterField) || oFF.isNull(values) || !values.hasElements())
	{
		return null;
	}
	let comparisonOperator = this._getSearchOperator();
	this.assertComparisonOperator(comparisonOperator, filterField);
	let queryModel = this.getQueryModel();
	let cartList = oFF.QFactory.createFilterCartesianList(queryModel);
	cartList.setFieldMetadata(filterField.getMetadata());
	cartList.setField(filterField);
	for (let i = 0; i < values.size(); i++)
	{
		let cartElement = cartList.addNewCartesianElement();
		cartElement.setLowString(values.get(i));
		cartElement.setComparisonOperator(comparisonOperator);
	}
	return cartList;
};
oFF.QDimensionSelector.prototype._createFilterElements = function(isSearchForKey, isSearchForText, isSearchForRsText, values, filterElements)
{
	let keyCartList = null;
	if (isSearchForKey)
	{
		let filterKeyField = this._getFilterField(true);
		keyCartList = this._createCartesianListOfValues(values, filterKeyField);
	}
	let textCartList = null;
	if (isSearchForText || isSearchForRsText)
	{
		let filterTextField = null;
		if (isSearchForText)
		{
			filterTextField = this._getFilterField(false);
		}
		if (isSearchForRsText)
		{
			filterTextField = this._getFirstRsTextField();
		}
		textCartList = this._createCartesianListOfValues(values, filterTextField);
	}
	if (isSearchForKey && (isSearchForText || isSearchForRsText))
	{
		let keyOrTextList = oFF.QFactory.createFilterOr(this.getQueryModel());
		keyOrTextList.add(keyCartList);
		keyOrTextList.add(textCartList);
		filterElements.add(keyOrTextList);
	}
	else
	{
		if (oFF.notNull(keyCartList))
		{
			filterElements.add(keyCartList);
		}
		if (oFF.notNull(textCartList))
		{
			filterElements.add(textCartList);
		}
	}
};
oFF.QDimensionSelector.prototype._createFilterForMode = function(searchMode, values, filterElements)
{
	let isSearchForKey = searchMode === oFF.DimensionSearchMode.KEY || searchMode === oFF.DimensionSearchMode.KEY_OR_TEXT || searchMode === oFF.DimensionSearchMode.KEY_OR_RS_TEXT_FIELD;
	let isTextMode = searchMode === oFF.DimensionSearchMode.TEXT || searchMode === oFF.DimensionSearchMode.KEY_OR_TEXT;
	let isRsTextMode = searchMode === oFF.DimensionSearchMode.RS_TEXT_FIELD || searchMode === oFF.DimensionSearchMode.KEY_OR_RS_TEXT_FIELD;
	let isSearchForText = false;
	let isSearchForRsText = false;
	if (this.getQueryModel().getConvenienceCommands().isTypeOfBw())
	{
		isSearchForText = isTextMode;
		isSearchForRsText = !this.getDimension().isStructure() && isRsTextMode;
	}
	else
	{
		isSearchForText = isTextMode || isRsTextMode;
	}
	this._createFilterElements(isSearchForKey, isSearchForText, isSearchForRsText, values, filterElements);
};
oFF.QDimensionSelector.prototype._getExternalFilterElement = function(externalFilterName)
{
	let extraFilterElement = null;
	let queryModel = this.getQueryModel();
	let extraFilter = queryModel.getFilter().getLinkedFilter(externalFilterName);
	if (oFF.notNull(extraFilter))
	{
		if (extraFilter.isCartesianProduct())
		{
			let cartesianProduct = extraFilter.getCartesianProduct();
			extraFilterElement = oFF.QFactory.createFilterCartesianProduct(queryModel);
			extraFilterElement.copyFrom(cartesianProduct, null);
		}
		else if (extraFilter.isComplexFilter())
		{
			let complexRoot = extraFilter.getComplexRoot();
			if (complexRoot.getOlapComponentType() === oFF.FilterComponentType.AND)
			{
				extraFilterElement = oFF.QFactory.createFilterAnd(queryModel);
				extraFilterElement.copyFrom(complexRoot, null);
			}
			else if (complexRoot.getOlapComponentType() === oFF.FilterComponentType.OR)
			{
				extraFilterElement = oFF.QFactory.createFilterOr(queryModel);
				extraFilterElement.copyFrom(complexRoot, null);
			}
		}
	}
	return extraFilterElement;
};
oFF.QDimensionSelector.prototype._getFilter = function()
{
	let dim = this.getDimension();
	let queryModel = dim.getQueryModel();
	if (oFF.isNull(queryModel))
	{
		let planningCommand = dim.getContext();
		if (planningCommand.getSelector().isValueHelpFilterInitialized())
		{
			return planningCommand.getSelector().getValuehelpFilter();
		}
		return null;
	}
	let filter = queryModel.getFilter();
	if (oFF.QueryFilterUsage.QUERY_FILTER_EFFECTIVE === this.getSelectorFilterUsage() && filter.isDynamicFilterInitialized())
	{
		return filter.getDynamicFilter();
	}
	else if (this.m_isUsingVisibilityFilter && filter.isValueHelpVisibilityFilterInitialized())
	{
		return filter.getValuehelpVisibilityFilter();
	}
	else if (filter.isValueHelpFilterInitialized())
	{
		return filter.getValuehelpFilter();
	}
	return null;
};
oFF.QDimensionSelector.prototype._getFilterField = function(isKeyField)
{
	if (isKeyField)
	{
		return this.m_useDisplayKey ? this.getSelectorDisplayKeyField() : this.getSelectorKeyField();
	}
	return this.getSelectorTextField();
};
oFF.QDimensionSelector.prototype._getFirstRsTextField = function()
{
	let dimension = this.getDimension();
	let mainAttribute = dimension.getMainAttribute();
	let resultSetFields = mainAttribute.getDefaultResultSetFields();
	for (let i = 0; i < resultSetFields.size(); i++)
	{
		let rsField = resultSetFields.get(i);
		if (oFF.PresentationType.isTextPresentation(rsField.getPresentationType()))
		{
			return rsField;
		}
	}
	return dimension.getTextField();
};
oFF.QDimensionSelector.prototype._getSearchOperator = function()
{
	let queryModel = this.getQueryModel();
	if (oFF.isNull(queryModel) || queryModel.getSystemType().isTypeOf(oFF.SystemType.ABAP))
	{
		return oFF.ComparisonOperator.MATCH;
	}
	return oFF.ComparisonOperator.LIKE;
};
oFF.QDimensionSelector.prototype.addComplex = function(field, lowValue, highValue, comparisonOperator)
{
	let newFilterOperation = this.createFilterOperation(field, lowValue, highValue, comparisonOperator);
	if (this.m_selectorHierarchyActive)
	{
		newFilterOperation.setHierarchyName(this.getHierarchyName());
	}
	let complexRoot = this.getComplexRoot();
	let finalFilterWrapper;
	if (complexRoot.getOlapComponentType() === oFF.FilterComponentType.AND || this.hasFilterOperationsForDimOnly(complexRoot, newFilterOperation.getDimensionName()))
	{
		finalFilterWrapper = complexRoot;
	}
	else
	{
		finalFilterWrapper = oFF.QFactory.createFilterAnd(complexRoot.getContext());
		finalFilterWrapper.add(complexRoot);
	}
	let filterOperationForTheSameDimension = this.getDirectChildFilterOperationForSameDimension(newFilterOperation, complexRoot.getChildren());
	if (oFF.notNull(filterOperationForTheSameDimension) && finalFilterWrapper.getOlapComponentType() !== oFF.FilterComponentType.OR)
	{
		let newFilterOr = oFF.QFactory.createFilterOr(complexRoot.getContext());
		newFilterOr.add(filterOperationForTheSameDimension);
		newFilterOr.add(newFilterOperation);
		let filterAsCollection = complexRoot;
		filterAsCollection.removeElement(filterOperationForTheSameDimension);
		if (filterAsCollection.hasElements())
		{
			let firstElement = filterAsCollection.getValuesAsReadOnlyList().get(0);
			filterAsCollection.removeElement(firstElement);
			finalFilterWrapper.add(firstElement);
		}
		finalFilterWrapper.add(newFilterOr);
	}
	else
	{
		finalFilterWrapper.add(newFilterOperation);
	}
	this.getSelectorContainer().setComplexRoot(finalFilterWrapper);
	return newFilterOperation;
};
oFF.QDimensionSelector.prototype.addFilterByField = function(field, lowValue, highValue, comparisonOperator, enforceDynamicContainer)
{
	if (oFF.isNull(field))
	{
		return null;
	}
	this.assertComparisonOperator(comparisonOperator, field);
	let fieldValueType = field.getValueType();
	let lowValueType = lowValue.getValueType();
	let dimension = field.getDimension();
	let replaceValueType = dimension.baseValueTypeOnLowValueType(lowValueType, false);
	if (replaceValueType)
	{
		fieldValueType = dimension.getFlatKeyField().getValueType();
	}
	this.assertValueType2(fieldValueType, lowValueType, false, comparisonOperator);
	if (oFF.notNull(highValue))
	{
		let highValueType = highValue.getValueType();
		this.assertValueType2(fieldValueType, highValueType, true, comparisonOperator);
	}
	let complexSelectionRoot = this.getComplexRoot();
	if (oFF.notNull(complexSelectionRoot))
	{
		return this.addComplex(field, lowValue, highValue, comparisonOperator);
	}
	let filterContainer;
	let filterUsage = this.getSelectorFilterUsage();
	let dim = this.getDimension();
	let qm = dim.getQueryModel();
	if (oFF.notNull(qm) && enforceDynamicContainer && (filterUsage === oFF.QueryFilterUsage.QUERY_FILTER || filterUsage === oFF.QueryFilterUsage.QUERY_FILTER_EFFECTIVE))
	{
		filterContainer = qm.getFilter().getDynamicFilter();
	}
	else
	{
		filterContainer = this.getSelectorContainer();
	}
	let cartesianProduct = filterContainer.getCartesianProductWithDefault();
	let memberSelection = cartesianProduct.getCartesianList(dim);
	if (oFF.isNull(memberSelection))
	{
		memberSelection = cartesianProduct.getCartesianListByField(field);
	}
	if (memberSelection.isEmpty())
	{
		memberSelection.setField(field);
	}
	else
	{
		if (memberSelection.getField() !== field)
		{
			if (filterUsage === oFF.QueryFilterUsage.SELECTOR_FILTER || filterUsage === oFF.QueryFilterUsage.QUERY_FILTER_EFFECTIVE)
			{
				let newFilterOr = oFF.QFactory.createFilterOr(filterContainer);
				oFF.XCollectionUtils.forEach(memberSelection, (filterOperationAlreadyInCartesianList) => {
					if (this.m_selectorHierarchyActive)
					{
						filterOperationAlreadyInCartesianList.setHierarchyName(this.getHierarchyName());
					}
					newFilterOr.add(filterOperationAlreadyInCartesianList);
				});
				memberSelection.clear();
				let newFilterOperation = this.createFilterOperation(field, lowValue, highValue, comparisonOperator);
				if (this.m_selectorHierarchyActive)
				{
					newFilterOperation.setHierarchyName(this.getHierarchyName());
				}
				newFilterOr.add(newFilterOperation);
				filterContainer.getModelCapabilities().setSupportsComplexFilter(true);
				let qFilterAnd = this.convertCartesianProductToSimpleAndFilter(cartesianProduct);
				if (oFF.isNull(qFilterAnd))
				{
					filterContainer.setComplexRoot(newFilterOr);
					return newFilterOperation;
				}
				qFilterAnd.add(newFilterOr);
				filterContainer.setComplexRoot(qFilterAnd);
				return newFilterOperation;
			}
			this.convertCartesianToComplex(cartesianProduct);
			return this.addComplex(field, lowValue, highValue, comparisonOperator);
		}
	}
	let element = memberSelection.addNewCartesianElement();
	element.configureDoubleParameterExpression(lowValue, highValue, comparisonOperator);
	if (this.m_selectorHierarchyActive)
	{
		memberSelection.setHierarchyName(this.getHierarchyName());
	}
	return memberSelection;
};
oFF.QDimensionSelector.prototype.addFilterValueForField = function(filterValue, field, comparisonOperator, doWildcardSearch)
{
	if (oFF.notNull(field) && field.isFilterableForValueHelpAndReadMode(this.getDimension().getReadMode(oFF.QContextType.SELECTOR)))
	{
		try
		{
			let operator = null;
			let capabilities = this.getDimension().getFilterCapabilities().getFilterCapabilitiesByField(field);
			if (oFF.notNull(capabilities))
			{
				let operators = capabilities.getSupportedComparisonOperatorsForValueHelpAndReadMode(oFF.SetSign.INCLUDING, this.getDimension().getReadMode(oFF.QContextType.SELECTOR));
				if (oFF.notNull(operators))
				{
					if (operators.contains(comparisonOperator) || this.requiresMeasureValueHelp() && this.supportsComparisonOperatorForMeasure(comparisonOperator))
					{
						operator = comparisonOperator;
					}
					else if (comparisonOperator === oFF.ComparisonOperator.MATCH && operators.contains(oFF.ComparisonOperator.LIKE))
					{
						operator = oFF.ComparisonOperator.LIKE;
					}
					else if (comparisonOperator === oFF.ComparisonOperator.LIKE && operators.contains(oFF.ComparisonOperator.MATCH))
					{
						operator = oFF.ComparisonOperator.MATCH;
					}
					else if (operators.contains(oFF.ComparisonOperator.EQUAL))
					{
						operator = oFF.ComparisonOperator.EQUAL;
					}
				}
			}
			if (oFF.isNull(operator))
			{
				return false;
			}
			let valueType = field.getValueType();
			let value;
			if (doWildcardSearch && (operator === oFF.ComparisonOperator.MATCH || operator === oFF.ComparisonOperator.LIKE) && (valueType.isString() || valueType.isDateTime()))
			{
				value = oFF.XStringValue.create(oFF.XStringUtils.concatenate3("*", filterValue, "*"));
			}
			else
			{
				value = oFF.XValueUtil.getValueFromString(filterValue, valueType);
			}
			return this.addSelectorFilter(value, field, operator) !== null;
		}
		catch (e)
		{
			return false;
		}
	}
	return false;
};
oFF.QDimensionSelector.prototype.addSearchForKey = function(searchValue)
{
	let comparisonOperator = this._getSearchOperator();
	let filterField = this._getFilterField(true);
	return this.addFilterByField(filterField, this.createXValue(searchValue, filterField, comparisonOperator), null, comparisonOperator, false);
};
oFF.QDimensionSelector.prototype.addSearchForKeyUsingDynamicFilter = function(searchValue)
{
	this.setSelectorFilterUsage(oFF.QueryFilterUsage.QUERY_FILTER_EFFECTIVE);
	let comparisonOperator = this._getSearchOperator();
	let filterField = this._getFilterField(true);
	return this.addFilterByField(filterField, this.createXValue(searchValue, filterField, comparisonOperator), null, comparisonOperator, true);
};
oFF.QDimensionSelector.prototype.addSearchForText = function(searchValue)
{
	return this.addSelectorFilterForText(searchValue, this._getSearchOperator());
};
oFF.QDimensionSelector.prototype.addSearchForTextUsingDynamicFilter = function(searchValue)
{
	this.setSelectorFilterUsage(oFF.QueryFilterUsage.QUERY_FILTER_EFFECTIVE);
	let textField = this._getFilterField(false);
	let comparisonOperator = this._getSearchOperator();
	return this.addFilterByField(textField, this.createXValue(searchValue, textField, comparisonOperator), null, comparisonOperator, true);
};
oFF.QDimensionSelector.prototype.addSelectorFilter = function(filterValue, field, comparisonOperator)
{
	return this.addFilterByField(field, filterValue, null, comparisonOperator, false);
};
oFF.QDimensionSelector.prototype.addSelectorFilterForFields = function(filterValue, fields, comparisonOperator, requestParents, doWildcardSearch)
{
	if (oFF.XStringUtils.isNullOrEmpty(filterValue) || oFF.isNull(comparisonOperator))
	{
		return false;
	}
	let filterAdded = false;
	if (oFF.XCollectionUtils.hasElements(fields))
	{
		for (let i = 0; i < fields.size(); i++)
		{
			filterAdded = this.addFilterValueForField(filterValue, fields.get(i), comparisonOperator, doWildcardSearch) || filterAdded;
		}
	}
	if (!filterAdded)
	{
		filterAdded = this.addFilterValueForField(filterValue, this.getSelectorDisplayKeyField(), comparisonOperator, doWildcardSearch);
		filterAdded = this.addFilterValueForField(filterValue, this.getSelectorTextField(), comparisonOperator, doWildcardSearch) || filterAdded;
	}
	if (filterAdded)
	{
		this.configureSelectorFilters(requestParents, false);
	}
	return filterAdded;
};
oFF.QDimensionSelector.prototype.addSelectorFilterForKey = function(filterValue, comparisonOperator)
{
	let filterField = this._getFilterField(true);
	return this.addFilterByField(filterField, this.createXValue(filterValue, filterField, comparisonOperator), null, comparisonOperator, false);
};
oFF.QDimensionSelector.prototype.addSelectorFilterForSpecificKeys = function(keys, displayKeys)
{
	let filterCapabilities = this.getDimension().getFilterCapabilities();
	let keyField = this.getSelectorKeyField();
	let displayKeyField = this.getSelectorDisplayKeyField();
	let model = this.getQueryModel();
	let systemType = oFF.notNull(model) ? model.getSystemType() : this.getApplication() !== null ? this.getApplication().getSystemLandscape().getSystemDescription(this.getDataSource().getSystemName()).getSystemType() : null;
	let isHana = oFF.notNull(systemType) && systemType.isTypeOf(oFF.SystemType.HANA);
	let useMatchForKey = (isHana || this.getDimension().isCompound()) && !keyField.getValueType().isDateTime() && !keyField.getValueType().isNumber();
	let useMatchForDisplayKey = isHana && !displayKeyField.getValueType().isDateTime() && !displayKeyField.getValueType().isNumber();
	let fcKey = filterCapabilities.getFilterCapabilitiesByField(keyField);
	let comparisonOperatorKey = useMatchForKey && oFF.notNull(fcKey) && fcKey.getSupportedComparisonOperatorsForValueHelpAndReadMode(oFF.SetSign.INCLUDING, this.getDimension().getReadMode(oFF.QContextType.SELECTOR)).contains(oFF.ComparisonOperator.MATCH) ? oFF.ComparisonOperator.MATCH : oFF.ComparisonOperator.EQUAL;
	let fcDisplayKey = filterCapabilities.getFilterCapabilitiesByField(displayKeyField);
	let comparisonOperatorDisplayKey = useMatchForDisplayKey && oFF.notNull(fcDisplayKey) && fcDisplayKey.getSupportedComparisonOperatorsForValueHelpAndReadMode(oFF.SetSign.INCLUDING, this.getDimension().getReadMode(oFF.QContextType.SELECTOR)).contains(oFF.ComparisonOperator.MATCH) ? oFF.ComparisonOperator.MATCH : oFF.ComparisonOperator.EQUAL;
	let filterAdded = false;
	if (oFF.notNull(keys))
	{
		for (let i = 0; i < keys.size(); i++)
		{
			if (this.addFilterValueForField(oFF.XStringUtils.nullToEmpty(keys.get(i)), keyField, keys.get(i) === null ? oFF.ComparisonOperator.IS_NULL : comparisonOperatorKey, false))
			{
				filterAdded = true;
			}
		}
	}
	if (oFF.notNull(displayKeys))
	{
		for (let k = 0; k < displayKeys.size(); k++)
		{
			if (this.addFilterValueForField(displayKeys.get(k), displayKeyField, comparisonOperatorDisplayKey, false))
			{
				filterAdded = true;
			}
		}
	}
	if (isHana && this.isSelectorHierarchyActive())
	{
		this.configureSelectorFilters(false, false);
	}
	return filterAdded;
};
oFF.QDimensionSelector.prototype.addSelectorFilterForText = function(filterValue, comparisonOperator)
{
	let filterField = this._getFilterField(false);
	if (oFF.isNull(filterField))
	{
		return null;
	}
	let isValidFilterForBwF4 = this.isValidFilterForBwF4(filterField.getMetadata(), this.getSelectorContainer());
	if (!filterField.isFilterableForValueHelpAndReadMode(this.getDimension().getReadMode(oFF.QContextType.SELECTOR)) && !isValidFilterForBwF4)
	{
		return null;
	}
	return this.addFilterByField(filterField, this.createXValue(filterValue, filterField, comparisonOperator), null, comparisonOperator, false);
};
oFF.QDimensionSelector.prototype.addSelectorFilterInterval = function(lowValue, highValue, field, comparisonOperator)
{
	return this.addFilterByField(field, lowValue, highValue, comparisonOperator, false);
};
oFF.QDimensionSelector.prototype.addSelectorFilterIntervalForKey = function(lowValue, highValue, comparisonOperator)
{
	let filterField = this._getFilterField(true);
	return this.addFilterByField(filterField, this.createXValue(lowValue, filterField, comparisonOperator), this.createXValue(highValue, filterField, comparisonOperator), comparisonOperator, false);
};
oFF.QDimensionSelector.prototype.addSelectorForValuesAndExternalFilter = function(externalFilterName, values, searchMode)
{
	let externalFilterElement = this._getExternalFilterElement(externalFilterName);
	this._addSelectorForValuesAndExternalFilterInternal(externalFilterElement, values, searchMode);
};
oFF.QDimensionSelector.prototype.assertComparisonOperator = function(comparisonOperator, field)
{
	let dimension = this.getDimension();
	if (this.requiresMeasureValueHelp())
	{
		if (!this.supportsComparisonOperatorForMeasure(comparisonOperator))
		{
			throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate2(comparisonOperator.getName(), " operator is not supported for ValueHelp if the dimension is a measure structure"));
		}
	}
	else
	{
		let capabilitiesByField = dimension.getFilterCapabilities().getFilterCapabilitiesByField(field);
		if (oFF.notNull(capabilitiesByField) && !capabilitiesByField.getSupportedComparisonOperatorsForValueHelpAndReadMode(oFF.SetSign.INCLUDING, this.getDimension().getReadMode(oFF.QContextType.SELECTOR)).contains(comparisonOperator))
		{
			throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate3(comparisonOperator.getName(), " operator is not supported in value help for the field ", field.getName()));
		}
	}
};
oFF.QDimensionSelector.prototype.assertValueType2 = function(fieldValueType, valueValueType, isHigh, comparisonOperator)
{
	if (fieldValueType === valueValueType)
	{
		return;
	}
	if (fieldValueType === oFF.XValueType.DOUBLE || fieldValueType === oFF.XValueType.DECIMAL_FLOAT && valueValueType === oFF.XValueType.DOUBLE || valueValueType === oFF.XValueType.DECIMAL_FLOAT)
	{
		return;
	}
	if (valueValueType === oFF.XValueType.STRING && oFF.notNull(comparisonOperator) && (comparisonOperator.isTypeOf(oFF.ComparisonOperator.LIKE) || comparisonOperator.isTypeOf(oFF.ComparisonOperator.MATCH) || comparisonOperator.isTypeOf(oFF.ComparisonOperator.NOT_MATCH) || comparisonOperator.isTypeOf(oFF.ComparisonOperator.FUZZY)))
	{
		return;
	}
	if (isHigh)
	{
		throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate2("Value type of highValue and field don't match. Expected: ", fieldValueType.getName()));
	}
	throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate2("Value type of lowValue and field don't match. Expected: ", fieldValueType.getName()));
};
oFF.QDimensionSelector.prototype.clearSelectorFilter = function()
{
	let filter = this._getFilter();
	if (oFF.notNull(filter))
	{
		let cartesianProduct = filter.getCartesianProduct();
		if (oFF.notNull(cartesianProduct))
		{
			cartesianProduct.clear();
		}
		else
		{
			filter.setComplexRoot(null);
		}
	}
};
oFF.QDimensionSelector.prototype.clearSelectorFilterByDimension = function(dimension)
{
	if (oFF.isNull(dimension))
	{
		return;
	}
	let cartesianProduct = this.getCartesian();
	if (oFF.notNull(cartesianProduct))
	{
		let memberFilter = cartesianProduct.getCartesianList(dimension);
		if (oFF.notNull(memberFilter))
		{
			memberFilter.clear();
		}
	}
};
oFF.QDimensionSelector.prototype.clearSelectorHierarchyNode = function()
{
	this.setSelectorHierarchyNode(null);
	this.removeFilterElement(this.m_parentFilter);
};
oFF.QDimensionSelector.prototype.clearSelectorSettings = function()
{
	this.setupSelectorSettings();
	this.clearSelectorHierarchyNode();
	this.setSelectorHierarchyNodeByName(null);
	this.clearSelectorFilter();
	this.setSelectorUseVisibilityFilter(true);
	this.clearSelectorFilter();
	this.setSelectorUseVisibilityFilter(false);
	this.getDimension().resetToDefaultReadMode(oFF.QContextType.SELECTOR);
};
oFF.QDimensionSelector.prototype.configureSelectorFilters = function(requestParents, keepUsingDynamicFilterForLBH)
{
	let dimension = this.getDimension();
	if (!dimension.isSelectorHierarchyActive())
	{
		return;
	}
	let requestAncestors = dimension.getDataSource().getType() === oFF.MetaObjectType.PLANNING_SEQUENCE ? !requestParents : requestParents;
	let model = this.getQueryModel();
	let systemType = null;
	if (oFF.notNull(model))
	{
		systemType = model.getSystemType();
	}
	else if (this.getApplication() !== null)
	{
		systemType = this.getApplication().getSystemLandscape().getSystemDescription(this.getDataSource().getSystemName()).getSystemType();
	}
	if (oFF.notNull(systemType) && systemType.isTypeOf(oFF.SystemType.HANA))
	{
		if (dimension.hasExternalHierarchies())
		{
			let valuehelpFilter = dimension.getSelectorContainer();
			if (oFF.notNull(model))
			{
				valuehelpFilter = model.getFilter().getValuehelpFilter();
				let visibilityFilter = model.getFilter().getValuehelpVisibilityFilter();
				if (this.m_isUsingVisibilityFilter)
				{
					valuehelpFilter.copyFrom(visibilityFilter, null);
				}
				else
				{
					visibilityFilter.copyFrom(valuehelpFilter, null);
				}
				this.updateFilterOperations(visibilityFilter, (visFilterOp) => {
					visFilterOp.setConvertToFlatFilter(requestAncestors);
					visFilterOp.setDepth(0);
				});
			}
			this.updateFilterOperations(valuehelpFilter, (vhFilterOp) => {
				vhFilterOp.setConvertToFlatFilter(requestAncestors);
				vhFilterOp.setDepth(-1);
				this.setSelectorInitialDrillLevel(-1);
			});
		}
		else
		{
			if (!keepUsingDynamicFilterForLBH && !this.m_isUsingVisibilityFilter && dimension.getLeveledHierarchy(this.getHierarchyName()) !== null && oFF.notNull(model))
			{
				model.getFilter().getValuehelpVisibilityFilter().copyFrom(model.getFilter().getValuehelpFilter(), null);
				this.clearSelectorFilter();
				this.setSelectorUseVisibilityFilter(true);
			}
			this.updateFilterOperations(dimension.getSelectorContainer(), (filterOp) => {
				filterOp.setConvertToFlatFilter(requestAncestors);
				filterOp.setDepth(0);
				this.setSelectorInitialDrillLevel(-1);
			});
		}
	}
	else
	{
		this.updateFilterOperations(dimension.getSelectorContainer(), (bwFilterOp) => {
			bwFilterOp.setConvertToFlatFilter(requestAncestors);
		});
	}
};
oFF.QDimensionSelector.prototype.convertCartesianProductToSimpleAndFilter = function(cartesianProduct)
{
	let qFilterAnd = oFF.QFactory.createFilterAnd(cartesianProduct.getContext());
	for (let listIndex = 0; listIndex < cartesianProduct.size(); listIndex++)
	{
		let cartesianList = cartesianProduct.get(listIndex);
		if (cartesianList.hasElements())
		{
			qFilterAnd.add(cartesianList);
		}
	}
	return qFilterAnd.hasElements() ? qFilterAnd : null;
};
oFF.QDimensionSelector.prototype.convertCartesianToComplex = function(cartesianProduct)
{
	let newFilterOr = oFF.QFactory.createFilterOr(this.getSelectorContainer());
	newFilterOr.add(cartesianProduct);
	this.getSelectorContainer().setComplexRoot(newFilterOr);
};
oFF.QDimensionSelector.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, null);
	let otherDimSelector = other;
	this.m_selectorRootLevel = otherDimSelector.m_selectorRootLevel;
};
oFF.QDimensionSelector.prototype.createFilterOperation = function(field, lowValue, highValue, comparisonOperator)
{
	let newFilterOperation = oFF.QFactory.createFilterOperationWithOperator(this.getSelectorContainer(), field, comparisonOperator);
	newFilterOperation.getLow().setValue(lowValue);
	if (oFF.notNull(highValue))
	{
		newFilterOperation.getHigh().setValue(highValue);
	}
	return newFilterOperation;
};
oFF.QDimensionSelector.prototype.createXValue = function(value, field, comparisonOperator)
{
	if (oFF.isNull(field))
	{
		return null;
	}
	let keyType;
	let dimension = field.getDimension();
	if (oFF.notNull(comparisonOperator) && (comparisonOperator.isTypeOf(oFF.ComparisonOperator.LIKE) || comparisonOperator.isTypeOf(oFF.ComparisonOperator.MATCH) || comparisonOperator.isTypeOf(oFF.ComparisonOperator.NOT_MATCH) || comparisonOperator.isTypeOf(oFF.ComparisonOperator.FUZZY)))
	{
		keyType = oFF.XValueType.STRING;
	}
	else if (dimension.baseValueTypeOnSearchCriteria(value, dimension, false))
	{
		keyType = dimension.getFlatKeyField().getValueType();
	}
	else
	{
		keyType = field.getValueType();
	}
	return this.createXValuePlain(value, keyType);
};
oFF.QDimensionSelector.prototype.createXValuePlain = function(value, keyType)
{
	return oFF.XValueUtil.getValueFromString(value, keyType);
};
oFF.QDimensionSelector.prototype.getCartesian = function()
{
	let selectorContainer = this._getFilter();
	return oFF.isNull(selectorContainer) ? null : selectorContainer.getCartesianProduct();
};
oFF.QDimensionSelector.prototype.getComplexRoot = function()
{
	let selectorContainer = this._getFilter();
	return oFF.isNull(selectorContainer) ? null : selectorContainer.getComplexRoot();
};
oFF.QDimensionSelector.prototype.getDimension = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_dimension);
};
oFF.QDimensionSelector.prototype.getDirectChildFilterOperationForSameDimension = function(newFilterOperation, children)
{
	while (children.hasNext())
	{
		let next = children.next();
		let olapComponentType = next.getOlapComponentType();
		if (olapComponentType === oFF.FilterComponentType.OPERATION)
		{
			let filterOperation = next;
			if (oFF.XString.isEqual(filterOperation.getDimensionName(), newFilterOperation.getDimensionName()))
			{
				return filterOperation;
			}
		}
	}
	return null;
};
oFF.QDimensionSelector.prototype.getHierarchyName = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.m_selectorHierarchyName) ? this.m_selectorHierarchyName : this.getDimension().getHierarchyName();
};
oFF.QDimensionSelector.prototype.getMeasureHelpMetadataSelector = function()
{
	return this.m_measureHelpMetadataSelector;
};
oFF.QDimensionSelector.prototype.getNavigationNodes = function()
{
	return this.m_selectorHierarchyNavigations;
};
oFF.QDimensionSelector.prototype.getSelectorContainer = function()
{
	let dim = this.getDimension();
	let queryModel = dim.getQueryModel();
	if (oFF.isNull(queryModel))
	{
		let planningCommand = dim.getContext();
		return planningCommand.getSelector().getValuehelpFilter();
	}
	let filter = queryModel.getFilter();
	if (oFF.QueryFilterUsage.QUERY_FILTER_EFFECTIVE === this.getSelectorFilterUsage())
	{
		return filter.getDynamicFilter();
	}
	return this.m_isUsingVisibilityFilter ? filter.getValuehelpVisibilityFilter() : filter.getValuehelpFilter();
};
oFF.QDimensionSelector.prototype.getSelectorDisplayKeyField = function()
{
	if (this.m_selectorHierarchyActive)
	{
		return this.getDimension().getHierarchyDisplayKeyField();
	}
	return this.getDimension().getFlatDisplayKeyField();
};
oFF.QDimensionSelector.prototype.getSelectorFilterUsage = function()
{
	return this.m_selectorFilterUsage;
};
oFF.QDimensionSelector.prototype.getSelectorHierarchyName = function()
{
	return this.m_selectorHierarchyName;
};
oFF.QDimensionSelector.prototype.getSelectorHierarchyNode = function()
{
	return this.m_selectorHierarchyNode;
};
oFF.QDimensionSelector.prototype.getSelectorHierarchyNodeName = function()
{
	return this.m_selectorHierarchyNodeName;
};
oFF.QDimensionSelector.prototype.getSelectorHierarchyNodeSid = function()
{
	return this.m_selectorHierarchyNodeSid;
};
oFF.QDimensionSelector.prototype.getSelectorKeyField = function()
{
	if (this.m_selectorHierarchyActive)
	{
		return this.getDimension().getHierarchyKeyField();
	}
	return this.getDimension().getFlatKeyField();
};
oFF.QDimensionSelector.prototype.getSelectorLowerLevelNodeAlignment = function()
{
	return this.m_selectorLowerLevelNodeAlignment;
};
oFF.QDimensionSelector.prototype.getSelectorMaxResultRecords = function()
{
	return this.m_selectorMaxResultRecords;
};
oFF.QDimensionSelector.prototype.getSelectorOrder = function()
{
	return this.m_selectorSorting;
};
oFF.QDimensionSelector.prototype.getSelectorPagingEnd = function()
{
	return this.m_selectorPagingEnd;
};
oFF.QDimensionSelector.prototype.getSelectorPagingStart = function()
{
	return this.m_selectorPagingStart;
};
oFF.QDimensionSelector.prototype.getSelectorRootLevel = function()
{
	return this.m_selectorRootLevel;
};
oFF.QDimensionSelector.prototype.getSelectorSortType = function()
{
	return this.m_sortType;
};
oFF.QDimensionSelector.prototype.getSelectorTextField = function()
{
	if (oFF.notNull(this.m_customTextField))
	{
		return this.m_customTextField;
	}
	let dim = this.getDimension();
	return dim.isSelectorHierarchyActive() ? dim.getHierarchyTextField() : dim.getFlatTextField();
};
oFF.QDimensionSelector.prototype.hasFilterOperationsForDimOnly = function(filterWrapper, dimName)
{
	let children = filterWrapper.getChildren();
	while (children.hasNext())
	{
		let child = children.next();
		if (child.getOlapComponentType() === oFF.FilterComponentType.OPERATION && !oFF.XString.isEqual(child.getDimension().getName(), dimName))
		{
			return false;
		}
		if (!this.hasFilterOperationsForDimOnly(child, dimName))
		{
			return false;
		}
	}
	return true;
};
oFF.QDimensionSelector.prototype.isSelectorFilteringOnDisplayKey = function()
{
	return this.m_useDisplayKey;
};
oFF.QDimensionSelector.prototype.isSelectorGettingInterval = function()
{
	return this.m_isGettingInterval && !this.m_selectorHierarchyActive;
};
oFF.QDimensionSelector.prototype.isSelectorHierarchyActive = function()
{
	return this.m_selectorHierarchyActive;
};
oFF.QDimensionSelector.prototype.isSelectorUseQueryDrillOperations = function()
{
	return this.m_useQueryDrillOperations;
};
oFF.QDimensionSelector.prototype.isValidFilterForBwF4 = function(fieldMd, filterExpression)
{
	if (oFF.isNull(fieldMd))
	{
		return false;
	}
	let supportsF4FilterForText = false;
	let supportsSidPresentation = false;
	let capabilities = this.getModelCapabilities();
	if (oFF.notNull(capabilities))
	{
		if (!capabilities.getSystemType().isTypeOf(oFF.SystemType.ABAP))
		{
			return false;
		}
		supportsF4FilterForText = capabilities.supportsF4FilterForTextField();
		supportsSidPresentation = capabilities.supportsSidPresentation();
	}
	let dimension = this.getDimension();
	let isSelectorUsage = oFF.notNull(dimension) && dimension.getSelectorFilterUsage() === oFF.QueryFilterUsage.SELECTOR_FILTER;
	let f4Container = oFF.notNull(filterExpression) && (oFF.XString.isEqual(filterExpression.getName(), oFF.QFilter.VALUEHELP_FILTER_CONTAINER) || oFF.XString.isEqual(filterExpression.getName(), oFF.QFilter.VALUEHELP_VISIBILITY_FILTER_CONTAINER));
	let filterOnHeirNavField = f4Container && isSelectorUsage && oFF.notNull(dimension) && oFF.XObjectExt.areEqual(fieldMd, dimension.getHierarchyNavigationField().getMetadata());
	if (supportsSidPresentation && filterOnHeirNavField)
	{
		return true;
	}
	return supportsF4FilterForText && f4Container && isSelectorUsage && fieldMd.getPresentationType().isTypeOf(oFF.PresentationType.ABSTRACT_TEXT);
};
oFF.QDimensionSelector.prototype.measureMatchesFilter = function(measure, filterOps)
{
	if (!oFF.XCollectionUtils.hasElements(filterOps))
	{
		return true;
	}
	for (let filterIdx = 0; filterIdx < filterOps.size(); filterIdx++)
	{
		let op = filterOps.get(filterIdx);
		let comparisonOperator = op.getComparisonOperator();
		let text;
		if (oFF.XString.isEqual(op.getField().getName(), this.getSelectorKeyField().getName()))
		{
			text = measure.getName();
		}
		else if (oFF.XString.isEqual(op.getField().getName(), this.getSelectorDisplayKeyField().getName()))
		{
			let displayKeyFieldValue = measure.getFieldValue(this.getSelectorDisplayKeyField());
			text = oFF.notNull(displayKeyFieldValue) ? displayKeyFieldValue.getString() : measure.getName();
		}
		else
		{
			text = measure.getText();
		}
		let measureNameCompare = oFF.XString.compare(text, op.getLow().getString());
		let isIncluding = op.getSetSign() === oFF.SetSign.INCLUDING;
		if (comparisonOperator === oFF.ComparisonOperator.EQUAL)
		{
			if (measureNameCompare === 0 && isIncluding)
			{
				return true;
			}
			if (measureNameCompare !== 0 && !isIncluding)
			{
				return true;
			}
		}
		else if (comparisonOperator === oFF.ComparisonOperator.NOT_EQUAL)
		{
			if (measureNameCompare !== 0 && isIncluding)
			{
				return true;
			}
			if (measureNameCompare === 0 && !isIncluding)
			{
				return true;
			}
		}
		else if (comparisonOperator === oFF.ComparisonOperator.LIKE || comparisonOperator === oFF.ComparisonOperator.MATCH)
		{
			if (this.measureMatchesLike(op, isIncluding, text))
			{
				return true;
			}
		}
		else if (comparisonOperator === oFF.ComparisonOperator.LESS_THAN)
		{
			if (measureNameCompare < 0 && isIncluding)
			{
				return true;
			}
			if (measureNameCompare >= 0 && !isIncluding)
			{
				return true;
			}
		}
		else if (comparisonOperator === oFF.ComparisonOperator.LESS_EQUAL)
		{
			if (measureNameCompare <= 0 && isIncluding)
			{
				return true;
			}
			if (measureNameCompare > 0 && !isIncluding)
			{
				return true;
			}
		}
		else if (comparisonOperator === oFF.ComparisonOperator.GREATER_THAN)
		{
			if (measureNameCompare > 0 && isIncluding)
			{
				return true;
			}
			if (measureNameCompare <= 0 && !isIncluding)
			{
				return true;
			}
		}
		else if (comparisonOperator === oFF.ComparisonOperator.GREATER_EQUAL)
		{
			if (measureNameCompare >= 0 && isIncluding)
			{
				return true;
			}
			if (measureNameCompare < 0 && !isIncluding)
			{
				return true;
			}
		}
		else if (comparisonOperator === oFF.ComparisonOperator.BETWEEN)
		{
			let measureNameCompareBetween = oFF.XString.compare(text, op.getHigh().getString());
			if (measureNameCompare >= 0 && measureNameCompareBetween <= 0 && isIncluding)
			{
				return true;
			}
			if ((measureNameCompare < 0 || measureNameCompareBetween > 0) && !isIncluding)
			{
				return true;
			}
		}
		else if (comparisonOperator === oFF.ComparisonOperator.BETWEEN_EXCLUDING)
		{
			let measureNameCompareBetweenExcluding = oFF.XString.compare(text, op.getHigh().getString());
			if (measureNameCompare > 0 && measureNameCompareBetweenExcluding < 0 && isIncluding)
			{
				return true;
			}
			if ((measureNameCompare <= 0 || measureNameCompareBetweenExcluding >= 0) && !isIncluding)
			{
				return true;
			}
		}
	}
	return false;
};
oFF.QDimensionSelector.prototype.measureMatchesLike = function(op, isIncluding, text)
{
	let searchPattern = op.getLow().getString();
	let startsWithWildcard = oFF.XString.startsWith(searchPattern, "*");
	let endsWithWildcard = oFF.XString.endsWith(searchPattern, "*");
	if (startsWithWildcard || endsWithWildcard)
	{
		let start = startsWithWildcard ? 1 : 0;
		let end = endsWithWildcard ? oFF.XString.size(searchPattern) - 1 : oFF.XString.size(searchPattern);
		searchPattern = oFF.XString.substring(searchPattern, start, end);
	}
	let measureNameContained = oFF.XStringUtils.containsString(text, searchPattern, true);
	return measureNameContained && isIncluding || !measureNameContained && !isIncluding;
};
oFF.QDimensionSelector.prototype.measureMatchesSelector = function(measure)
{
	let match = oFF.isNull(this.m_measureHelpMetadataSelector);
	if (!match)
	{
		match = this.m_measureHelpMetadataSelector.getDataType() === null || measure.getDataType() === this.m_measureHelpMetadataSelector.getDataType();
		match = match && (this.m_measureHelpMetadataSelector.getMeasureType() === null || oFF.XObjectExt.areEqual(measure.getMemberType(), this.m_measureHelpMetadataSelector.getMeasureType()));
		match = match && (this.m_measureHelpMetadataSelector.getNumericPrecision() === null || oFF.XObjectExt.areEqual(measure.getNumericPrecision(), this.m_measureHelpMetadataSelector.getNumericPrecision()));
		match = match && (this.m_measureHelpMetadataSelector.getNumericScale() === null || oFF.XObjectExt.areEqual(measure.getNumericScale(), this.m_measureHelpMetadataSelector.getNumericScale()));
		match = match && (this.m_measureHelpMetadataSelector.getNumericShift() === null || oFF.XObjectExt.areEqual(measure.getNumericShift(), this.m_measureHelpMetadataSelector.getNumericShift()));
		match = match && (this.m_measureHelpMetadataSelector.getNumericPrecision() === null || oFF.XObjectExt.areEqual(measure.getNumericPrecision(), this.m_measureHelpMetadataSelector.getNumericPrecision()));
		match = match && (this.m_measureHelpMetadataSelector.getDataTypeScale() === null || oFF.XObjectExt.areEqual(measure.getDataTypeScale(), this.m_measureHelpMetadataSelector.getDataTypeScale()));
		match = match && (this.m_measureHelpMetadataSelector.getDataTypePrecision() === null || oFF.XObjectExt.areEqual(measure.getDataTypePrecision(), this.m_measureHelpMetadataSelector.getDataTypePrecision()));
		match = match && (this.m_measureHelpMetadataSelector.getRateType() === null || measure.getRateType() === this.m_measureHelpMetadataSelector.getRateType());
		match = match && (this.m_measureHelpMetadataSelector.getUnitDimensionName() === null || oFF.XString.isEqual(measure.getUnitDimensionName(), this.m_measureHelpMetadataSelector.getUnitDimensionName()));
		match = match && (this.m_measureHelpMetadataSelector.getUnitDimensionProperty() === null || oFF.XString.isEqual(measure.getUnitDimensionProperty(), this.m_measureHelpMetadataSelector.getUnitDimensionProperty()));
		match = match && (this.m_measureHelpMetadataSelector.getUnitFixed() === null || oFF.XString.isEqual(measure.getUnitFixed(), this.m_measureHelpMetadataSelector.getUnitFixed()));
		match = match && (this.m_measureHelpMetadataSelector.getUnitName() === null || oFF.XString.isEqual(measure.getUnitName(), this.m_measureHelpMetadataSelector.getUnitName()));
		match = match && (this.m_measureHelpMetadataSelector.getUnitTextName() === null || oFF.XString.isEqual(measure.getUnitTextName(), this.m_measureHelpMetadataSelector.getUnitTextName()));
		match = match && (this.m_measureHelpMetadataSelector.getUnitType() === null || measure.getUnitType() === this.m_measureHelpMetadataSelector.getUnitType());
		match = match && (this.m_measureHelpMetadataSelector.getDataTypeInternal() === null || measure.getDataTypeInternal() === this.m_measureHelpMetadataSelector.getDataTypeInternal());
		match = match && (!this.m_measureHelpMetadataSelector.isVisibleMeasuresOnly() || measure.getResultVisibility() === null || !measure.getResultVisibility().isTypeOf(oFF.ResultVisibility.HIDDEN));
	}
	return match;
};
oFF.QDimensionSelector.prototype.mergeDeepRecursive = function(settings, other)
{
	let otherSel = other;
	this.m_selectorHierarchyActive = otherSel.isSelectorHierarchyActive();
	this.m_selectorHierarchyName = otherSel.getSelectorHierarchyName();
};
oFF.QDimensionSelector.prototype.processIsNodeChildOfParent = function(nodeName, parentName, syncType, listener, customIdentifier)
{
	let dim = this.getDimension();
	if (!dim.getModelCapabilities().supportsUniqueHierarchyPath())
	{
		return false;
	}
	if (oFF.XStringUtils.isNullOrEmpty(nodeName) || oFF.XStringUtils.isNullOrEmpty(parentName))
	{
		return false;
	}
	if (!this.m_selectorHierarchyActive)
	{
		return false;
	}
	if (oFF.XString.isEqual(nodeName, parentName))
	{
		return false;
	}
	let pathField = dim.getHierarchyPathField();
	if (oFF.isNull(pathField))
	{
		return false;
	}
	let selectorFields = dim.getSelectorFields();
	let isPathFieldContained = selectorFields.contains(pathField);
	if (!isPathFieldContained)
	{
		selectorFields.add(pathField);
	}
	let pagingStartCache = this.m_selectorPagingStart;
	let pagingEndCache = this.m_selectorPagingEnd;
	this.setSelectorPagingDefault();
	let cartesianDimensionList = this.getSelectorContainer().getCartesianProductWithDefault().getCartesianListWithDefault(dim);
	let childFilter = cartesianDimensionList.addNewCartesianElement();
	childFilter.setField(this.getSelectorKeyField());
	childFilter.setComparisonOperator(oFF.ComparisonOperator.EQUAL);
	childFilter.setLowString(nodeName);
	cartesianDimensionList.setHierarchyName(this.getHierarchyName());
	let processMemberHelp = dim.processValueHelp(syncType, oFF.ValueHelpListenerDecorator.create(listener), customIdentifier);
	this.m_selectorPagingStart = pagingStartCache;
	this.m_selectorPagingEnd = pagingEndCache;
	cartesianDimensionList.removeElement(childFilter);
	oFF.MessageUtil.checkNoError(processMemberHelp);
	let data = processMemberHelp.getData();
	if (data.isEmpty())
	{
		return false;
	}
	let childNode = null;
	let nodeIterator = data.getIterator();
	while (nodeIterator.hasNext())
	{
		let next = nodeIterator.next();
		if (oFF.XString.isEqual(next.getName(), nodeName))
		{
			childNode = next;
			break;
		}
	}
	oFF.XObjectExt.release(nodeIterator);
	if (oFF.isNull(childNode))
	{
		return false;
	}
	let fieldValue = childNode.getDimensionMember().getFieldValue(pathField);
	let stringValue = fieldValue.getString();
	let parser = oFF.JsonParserFactory.newInstance();
	let hierarchyPathStructure = parser.parse(stringValue);
	oFF.XObjectExt.release(parser);
	let uniqueHierarchyPath = hierarchyPathStructure.getListByKey(oFF.QDimensionSelector.QY_UNIQUE_NAME);
	for (let idx = 0; idx < uniqueHierarchyPath.size(); idx++)
	{
		if (oFF.XString.isEqual(uniqueHierarchyPath.getStringAt(idx), parentName))
		{
			return true;
		}
	}
	return false;
};
oFF.QDimensionSelector.prototype.processMeasureHelp = function()
{
	let dim = this.getDimension();
	let allStructureMembers = dim.getAllStructureMembers();
	let measureList = oFF.XList.create();
	let messageManager = oFF.MessageManager.createMessageManagerExt(this.getSession());
	let selectionContainer;
	let selectorFilterUsage = this.getSelectorFilterUsage();
	if (selectorFilterUsage === oFF.QueryFilterUsage.QUERY_FILTER)
	{
		selectionContainer = dim.getQueryModel().getFilter().getDynamicFilter();
	}
	else if (selectorFilterUsage === oFF.QueryFilterUsage.QUERY_FILTER_EFFECTIVE)
	{
		selectionContainer = dim.getQueryModel().getFilter().getEffectiveFilter();
	}
	else if (selectorFilterUsage === oFF.QueryFilterUsage.SELECTOR_FILTER)
	{
		selectionContainer = this._getFilter();
	}
	else
	{
		messageManager.addWarning(oFF.ErrorCodes.INVALID_OPERATOR, "Filter on other dimensions not supported for measurehelp.");
		selectionContainer = null;
	}
	let filterOps = null;
	if (oFF.notNull(selectionContainer) && selectionContainer.isCartesianProduct())
	{
		let cartesianProduct = selectionContainer.getCartesianProduct();
		if (oFF.notNull(cartesianProduct))
		{
			filterOps = oFF.XCollectionUtils.map(cartesianProduct.getCartesianListByDimensionName(dim.getName()), (cartesianElement) => {
				return cartesianElement;
			});
		}
	}
	else if (oFF.notNull(selectionContainer) && selectionContainer.isComplexFilter() && selectionContainer.getFilterRootElement().getOlapComponentType() === oFF.FilterComponentType.OR)
	{
		filterOps = oFF.XStream.of(selectionContainer.getFilterRootElement().getValuesAsReadOnlyList()).filter((filterElement) => {
			return filterElement.getOlapComponentType().isTypeOf(oFF.FilterComponentType.OPERATION);
		}).map((filterOp) => {
			return filterOp;
		}).collect(oFF.XStreamCollector.toList());
	}
	else
	{
		messageManager.addWarning(oFF.ErrorCodes.INVALID_OPERATOR, "Complex filters are ignored for measurehelp.");
	}
	let measureSize = allStructureMembers.size();
	let measureIdx;
	for (measureIdx = 0; measureIdx < measureSize; measureIdx++)
	{
		let measure = allStructureMembers.get(measureIdx);
		if (this.measureMatchesFilter(measure, filterOps) && this.measureMatchesSelector(measure))
		{
			measureList.add(oFF.QFactory.createMeasureHelpNode(measure.getName(), measure));
		}
	}
	let end = this.getSelectorPagingEnd();
	if (end < 0 || end > measureSize)
	{
		end = measureSize;
	}
	while (end < measureList.size())
	{
		measureList.removeAt(measureList.size() - 1);
	}
	let start = this.getSelectorPagingStart();
	while (start > 0)
	{
		measureList.removeAt(0);
		start--;
	}
	let selectorOrder = this.getSelectorOrder();
	if (selectorOrder === oFF.XSortDirection.ASCENDING || selectorOrder === oFF.XSortDirection.DESCENDING)
	{
		measureList.sortByDirection(selectorOrder);
	}
	return oFF.ExtResult.create(measureList, messageManager);
};
oFF.QDimensionSelector.prototype.releaseObject = function()
{
	this.m_parentFilter = oFF.XObjectExt.release(this.m_parentFilter);
	this.m_selectorHierarchyNavigations = oFF.XObjectExt.release(this.m_selectorHierarchyNavigations);
	this.m_selectorSorting = null;
	this.m_selectorHierarchyNode = null;
	this.m_dimension = oFF.XObjectExt.release(this.m_dimension);
	this.m_selectorHierarchyNodeName = null;
	this.m_selectorHierarchyNodeSid = null;
	this.m_selectorFilterUsage = null;
	this.m_measureHelpMetadataSelector = null;
	this.m_selectorHierarchyName = null;
	this.m_selectorLowerLevelNodeAlignment = null;
	this.m_customTextField = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QDimensionSelector.prototype.removeDimensionFilter = function(filter, dimension)
{
	if (filter.getOlapComponentType() === oFF.FilterComponentType.CARTESIAN_PRODUCT)
	{
		filter.removeByDimensionName(dimension.getName());
	}
	else if (filter.getOlapComponentType().isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA))
	{
		oFF.XCollectionUtils.forEach(filter, (child) => {
			this.removeDimensionFilter(child, dimension);
		});
	}
};
oFF.QDimensionSelector.prototype.removeFilterElement = function(filter)
{
	if (oFF.isNull(filter))
	{
		return;
	}
	let complexRoot = this.getComplexRoot();
	if (oFF.isNull(complexRoot))
	{
		let cartesianProduct = this.getCartesian();
		if (oFF.notNull(cartesianProduct))
		{
			cartesianProduct.removeElement(filter);
		}
	}
	else
	{
		complexRoot.removeElement(filter);
	}
};
oFF.QDimensionSelector.prototype.removeNavigationsWithDisplayLevelGreaterNewParent = function(newParentDisplayLevel)
{
	let idx = 0;
	while (idx < this.m_selectorHierarchyNavigations.size())
	{
		let node = this.m_selectorHierarchyNavigations.get(idx);
		if (node.getDisplayLevel() >= newParentDisplayLevel)
		{
			this.m_selectorHierarchyNavigations.removeElement(node);
		}
		else
		{
			idx++;
		}
	}
};
oFF.QDimensionSelector.prototype.requiresMeasureValueHelp = function()
{
	let dimension = this.getDimension();
	return oFF.notNull(dimension) && dimension.isStructure() && !dimension.isHierarchyActive();
};
oFF.QDimensionSelector.prototype.setMeasureHelpMetadataSelector = function(measureHelpMetadataSelector)
{
	if (!this.getDimension().isMeasureStructure())
	{
		throw oFF.XException.createIllegalStateException(oFF.XStringUtils.concatenate3("Dimension ", this.getDimension().getName(), " is not a measure structure."));
	}
	this.m_measureHelpMetadataSelector = measureHelpMetadataSelector;
};
oFF.QDimensionSelector.prototype.setSelectorCascadingReadModeAndFilter = function()
{
	let dimension = this.getDimension();
	dimension.setReadModeGraceful(oFF.QContextType.SELECTOR, oFF.QMemberReadMode.BOOKED_AND_SPACE_AND_STATE);
	let queryModel = dimension.getQueryModel();
	if (oFF.notNull(queryModel) && (!queryModel.getSystemType().isTypeOf(oFF.SystemType.ABAP) || queryModel.getQueryManager().getResultSetSyncState() === oFF.SyncState.OUT_OF_SYNC))
	{
		this.clearSelectorFilter();
		let filter = queryModel.getFilter();
		let effectiveFilter = filter.getEffectiveFilter();
		if (effectiveFilter.getFilterRootElement() !== null && (!effectiveFilter.getFilterRootElement().getOlapComponentType().isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA) || effectiveFilter.getFilterRootElement().getChildren().hasNext()))
		{
			try
			{
				let effectiveFilterClone = oFF.QFilterUtil.createFilterElementFromOrigin(effectiveFilter.getFilterRootElement(), filter.getValuehelpFilter());
				this.removeDimensionFilter(effectiveFilterClone, dimension);
				if (effectiveFilterClone.getOlapComponentType() === oFF.FilterComponentType.CARTESIAN_PRODUCT)
				{
					filter.getValuehelpFilter().setCartesianProduct(effectiveFilterClone);
				}
				else if (effectiveFilterClone.getOlapComponentType() === oFF.FilterComponentType.CARTESIAN_LIST)
				{
					if (effectiveFilterClone.getDimension() !== dimension)
					{
						filter.getValuehelpFilter().getCartesianProductWithDefault().add(effectiveFilterClone);
					}
				}
				else if (effectiveFilterClone.getOlapComponentType() === oFF.FilterComponentType.AND)
				{
					filter.getValuehelpFilter().setComplexRoot(effectiveFilterClone);
				}
				else
				{
					let andFilter = oFF.QFactory.createFilterAnd(filter);
					andFilter.add(effectiveFilterClone);
					filter.getValuehelpFilter().setComplexRoot(andFilter);
				}
			}
			catch (e)
			{
				let logger = queryModel.getSession().getLogger();
				if (oFF.notNull(logger))
				{
					logger.logWarning(oFF.XStringUtils.concatenate2("Unknown filter type: ", effectiveFilter.getOlapComponentType().getName()));
				}
			}
		}
	}
};
oFF.QDimensionSelector.prototype.setSelectorComplexSelectionRoot = function(complexSelection)
{
	this.getSelectorContainer().setComplexRoot(complexSelection);
};
oFF.QDimensionSelector.prototype.setSelectorCustomTextField = function(textField)
{
	this.m_customTextField = textField;
};
oFF.QDimensionSelector.prototype.setSelectorFields = function(fields, addMainKeyAndTextFields)
{
	let dimension = this.getDimension();
	dimension.setSelectorFieldLayoutType(oFF.FieldLayoutType.FIELD_BASED);
	let selectorFields = dimension.getSelectorFields();
	if (!selectorFields.isFixed())
	{
		selectorFields.clear();
		oFF.XStream.of(fields).filterNullValues().forEach((field) => {
			oFF.XCollectionUtils.addIfNotPresent(selectorFields, field);
		});
		if (addMainKeyAndTextFields || !oFF.XCollectionUtils.hasElements(selectorFields))
		{
			oFF.XCollectionUtils.addIfNotPresent(selectorFields, dimension.getSelectorKeyField());
			oFF.XCollectionUtils.addIfNotPresent(selectorFields, dimension.isCompound() && (!this.isSelectorHierarchyActive() || oFF.XStringUtils.isNullOrEmpty(this.getSelectorHierarchyName())) ? dimension.getFirstFieldByType(oFF.PresentationType.KEY_NOT_COMPOUND) : null);
			oFF.XCollectionUtils.addIfNotPresent(selectorFields, this.getSelectorDisplayKeyField());
			oFF.XCollectionUtils.addIfNotPresent(selectorFields, this.getSelectorTextField());
			if (this.isSelectorHierarchyActive())
			{
				let modelCapabilities = this.getModelCapabilities();
				if (oFF.notNull(modelCapabilities) && modelCapabilities.supportsSidPresentation())
				{
					oFF.XCollectionUtils.addIfNotPresent(selectorFields, dimension.getHierarchyNavigationField());
				}
			}
		}
	}
};
oFF.QDimensionSelector.prototype.setSelectorFilterOnDisplayKey = function(isUsingDisplayKey)
{
	this.m_useDisplayKey = isUsingDisplayKey;
};
oFF.QDimensionSelector.prototype.setSelectorFilterUsage = function(queryFilterUsage)
{
	this.m_selectorFilterUsage = queryFilterUsage;
};
oFF.QDimensionSelector.prototype.setSelectorGettingInterval = function(doGetInterval)
{
	this.m_isGettingInterval = doGetInterval;
	return this.isSelectorGettingInterval();
};
oFF.QDimensionSelector.prototype.setSelectorHierarchy = function(hierarchyActive, hierarchyName, initialDrillLevel)
{
	this.setSelectorHierarchyActive(hierarchyActive);
	this.setSelectorHierarchyName(hierarchyName);
	this.setSelectorInitialDrillLevel(initialDrillLevel);
};
oFF.QDimensionSelector.prototype.setSelectorHierarchyActive = function(isActive)
{
	this.m_selectorHierarchyActive = isActive;
};
oFF.QDimensionSelector.prototype.setSelectorHierarchyName = function(hierarchyName)
{
	this.m_selectorHierarchyName = hierarchyName;
};
oFF.QDimensionSelector.prototype.setSelectorHierarchyNode = function(parent)
{
	if (oFF.isNull(this.m_selectorHierarchyNavigations))
	{
		this.m_selectorHierarchyNavigations = oFF.XList.create();
	}
	this.m_selectorHierarchyNode = parent;
	if (oFF.isNull(parent))
	{
		this.m_selectorHierarchyNavigations.clear();
		this.setSelectorHierarchyNodeByName(null);
	}
	else
	{
		this.removeNavigationsWithDisplayLevelGreaterNewParent(parent.getDisplayLevel());
		this.m_selectorHierarchyNavigations.add(parent);
		let filterValue;
		if (this.isSelectorFilteringOnDisplayKey())
		{
			filterValue = parent.getDimensionMember().getFieldValue(this.getSelectorDisplayKeyField()).getString();
		}
		else
		{
			filterValue = parent.getName();
		}
		this.setSelectorHierarchyNodeByName(filterValue);
	}
};
oFF.QDimensionSelector.prototype.setSelectorHierarchyNodeByName = function(parent)
{
	this.removeFilterElement(this.m_parentFilter);
	this.m_selectorHierarchyNodeName = parent;
	if (oFF.notNull(parent))
	{
		this.m_parentFilter = this.addSelectorFilterForKey(parent, oFF.ComparisonOperator.EQUAL);
	}
};
oFF.QDimensionSelector.prototype.setSelectorHierarchyWithNodeSid = function(nodeSid, nodeName)
{
	let qm = this.getQueryModel();
	let capabilities = qm.getModelCapabilities();
	if (oFF.XStringUtils.isNullOrEmpty(nodeSid) || oFF.notNull(capabilities) && !capabilities.supportsSidPresentation())
	{
		this.setSelectorHierarchyNodeByName(nodeName);
	}
	else
	{
		this.removeFilterElement(this.m_parentFilter);
		this.m_selectorHierarchyNodeSid = nodeSid;
		this.m_selectorHierarchyNodeName = nodeName;
		let filterField = this.getDimension().getHierarchyNavigationField();
		if (oFF.notNull(filterField))
		{
			this.m_parentFilter = this.addFilterByField(filterField, this.createXValuePlain(nodeSid, filterField.getValueType()), null, oFF.ComparisonOperator.EQUAL, false);
		}
		else
		{
			throw oFF.XException.createIllegalStateException("Filtering on non existing field");
		}
	}
};
oFF.QDimensionSelector.prototype.setSelectorInitialDrillLevel = function(relativeLevelCount)
{
	this.m_selectorRootLevel = relativeLevelCount;
};
oFF.QDimensionSelector.prototype.setSelectorLowerLevelNodeAlignment = function(alignment)
{
	this.m_selectorLowerLevelNodeAlignment = alignment;
};
oFF.QDimensionSelector.prototype.setSelectorMaxResultRecords = function(maxResultRecords)
{
	this.m_selectorMaxResultRecords = maxResultRecords;
};
oFF.QDimensionSelector.prototype.setSelectorOrder = function(direction)
{
	this.m_selectorSorting = direction;
};
oFF.QDimensionSelector.prototype.setSelectorPaging = function(start, end)
{
	this.m_selectorPagingEnd = end;
	this.m_selectorPagingStart = start;
};
oFF.QDimensionSelector.prototype.setSelectorPagingDefault = function()
{
	this.m_selectorPagingStart = 0;
	this.m_selectorPagingEnd = -1;
};
oFF.QDimensionSelector.prototype.setSelectorPagingEnd = function(end)
{
	this.m_selectorPagingEnd = end;
};
oFF.QDimensionSelector.prototype.setSelectorPagingStart = function(start)
{
	this.m_selectorPagingStart = start;
};
oFF.QDimensionSelector.prototype.setSelectorSortType = function(sortType)
{
	this.m_sortType = sortType;
};
oFF.QDimensionSelector.prototype.setSelectorUseQueryDrillOperations = function(useQueryDrillOperations)
{
	this.m_useQueryDrillOperations = useQueryDrillOperations;
};
oFF.QDimensionSelector.prototype.setSelectorUseVisibilityFilter = function(isUsingVisibilityFilter)
{
	let modelCapabilities = this.getModelCapabilities();
	this.m_isUsingVisibilityFilter = isUsingVisibilityFilter && oFF.notNull(modelCapabilities) && modelCapabilities.supportsVisibilityFilter();
};
oFF.QDimensionSelector.prototype.setupDimensionSelector = function(dimension)
{
	this.setupModelComponent(dimension, dimension);
	this.m_dimension = oFF.XWeakReferenceUtil.getWeakRef(dimension);
	this.setupSelectorSettings();
};
oFF.QDimensionSelector.prototype.setupSelectorSettings = function()
{
	this.m_selectorSorting = oFF.XSortDirection.DEFAULT_VALUE;
	this.m_selectorPagingEnd = -1;
	this.m_selectorPagingStart = 0;
	this.m_selectorMaxResultRecords = -1;
	this.m_selectorFilterUsage = oFF.QueryFilterUsage.SELECTOR_FILTER;
	this.m_selectorRootLevel = 0;
	this.m_selectorHierarchyActive = false;
	this.m_selectorHierarchyName = null;
	this.m_selectorLowerLevelNodeAlignment = null;
	this.m_useDisplayKey = false;
	this.m_isUsingVisibilityFilter = false;
	this.m_isGettingInterval = false;
	this.m_useQueryDrillOperations = false;
	this.m_selectorHierarchyNodeSid = null;
	this.m_sortType = null;
	this.m_customTextField = null;
};
oFF.QDimensionSelector.prototype.supportsComparisonOperatorForMeasure = function(operator)
{
	return operator !== oFF.ComparisonOperator.FUZZY && operator !== oFF.ComparisonOperator.NOT_MATCH && operator !== oFF.ComparisonOperator.SEARCH && operator !== oFF.ComparisonOperator.UNDEFINED && operator !== oFF.ComparisonOperator.IN;
};
oFF.QDimensionSelector.prototype.updateFilterOperations = function(filter, operationUpdater)
{
	if (filter.getOlapComponentType().isTypeOf(oFF.FilterComponentType.OPERATION))
	{
		operationUpdater(filter);
	}
	else
	{
		let children = filter.getChildren();
		while (children.hasNext())
		{
			this.updateFilterOperations(children.next(), operationUpdater);
		}
		oFF.XObjectExt.release(children);
	}
};

oFF.QFormulaCalcDimProperties = function() {};
oFF.QFormulaCalcDimProperties.prototype = new oFF.QModelComponent();
oFF.QFormulaCalcDimProperties.prototype._ff_c = "QFormulaCalcDimProperties";

oFF.QFormulaCalcDimProperties._createFormulaCalcDimProperties = function(context, parent)
{
	let properties = new oFF.QFormulaCalcDimProperties();
	properties.setContext(context);
	properties.setParent(parent);
	properties._setupFormulaCalcDimProperties(context);
	return properties;
};
oFF.QFormulaCalcDimProperties.prototype.m_aggregationDimensions = null;
oFF.QFormulaCalcDimProperties.prototype.m_aggregationFieldNames = null;
oFF.QFormulaCalcDimProperties.prototype.m_displayDescription = null;
oFF.QFormulaCalcDimProperties.prototype.m_displayName = null;
oFF.QFormulaCalcDimProperties.prototype.m_filterContext = null;
oFF.QFormulaCalcDimProperties.prototype.m_filterIdsToApply = null;
oFF.QFormulaCalcDimProperties.prototype.m_formulaCalcFields = null;
oFF.QFormulaCalcDimProperties.prototype.m_formulaCalcFieldsKeyRef = null;
oFF.QFormulaCalcDimProperties.prototype.m_isApplyAdditionalFilterContext = false;
oFF.QFormulaCalcDimProperties.prototype.m_layeredFilters = null;
oFF.QFormulaCalcDimProperties.prototype._setupFormulaCalcDimProperties = function(context)
{
	this.m_formulaCalcFields = oFF.QFieldList.createFieldList(this.getParent(), "FormulaCalcFields", null);
	this.m_aggregationFieldNames = oFF.XList.create();
	this.m_filterContext = oFF.QFactory.createFilterExpression(context, this);
	this.m_layeredFilters = oFF.QLayeredFilter.create(context, null);
	this.m_aggregationDimensions = oFF.XList.create();
	this.m_isApplyAdditionalFilterContext = false;
	this.m_filterIdsToApply = oFF.XList.create();
};
oFF.QFormulaCalcDimProperties.prototype.addAdditionalAggregationDimension = function(dimensionName, hierarchyName, activateHierarchy)
{
	this.m_aggregationDimensions.add(oFF.QAggregationDimension.createAggregationDimension(dimensionName, hierarchyName, activateHierarchy));
	this.notifyNodeChanged();
};
oFF.QFormulaCalcDimProperties.prototype.addAggregationFieldName = function(fieldName)
{
	this.m_aggregationFieldNames.add(fieldName);
	this.notifyNodeChanged();
};
oFF.QFormulaCalcDimProperties.prototype.addFilterIdsToApply = function(filterId)
{
	if (!this.m_filterIdsToApply.contains(filterId))
	{
		this.m_filterIdsToApply.add(filterId);
	}
};
oFF.QFormulaCalcDimProperties.prototype.addNewFormulaCalcField = function(presentationType, name)
{
	let field = oFF.QFieldFormulaCalc._createFormulaCalcField(this.getContext(), this.getParent(), presentationType, name);
	this.getFormulaCalcFields().add(field);
	field.addSecondaryParent(this);
	this.notifyNodeChanged();
	return field;
};
oFF.QFormulaCalcDimProperties.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let otherObj = other;
	this.m_formulaCalcFields.clear();
	let formulaCalcFieldList;
	if (oFF.notNull(otherObj.m_formulaCalcFieldsKeyRef))
	{
		let clientQueryObjectManager = this.getOlapEnv().getClientQueryObjectManager();
		formulaCalcFieldList = clientQueryObjectManager.getClientQueryObjectByKeyRef(otherObj.m_formulaCalcFieldsKeyRef);
	}
	else
	{
		formulaCalcFieldList = otherObj.m_formulaCalcFields;
	}
	let fieldsIter = formulaCalcFieldList.getIterator();
	let context = this.getContext();
	let parentDimension = this.getParent();
	while (fieldsIter.hasNext())
	{
		let origField = fieldsIter.next();
		let cloneField = oFF.QFieldFormulaCalc._createFormulaCalcField(context, parentDimension, origField.getPresentationType(), origField.getName());
		cloneField.copyFrom(origField, flags);
		this.m_formulaCalcFields.add(cloneField);
	}
	this.m_aggregationFieldNames = otherObj.m_aggregationFieldNames.createListCopy();
	this.m_filterContext.copyFrom(otherObj.m_filterContext, flags);
	this.m_layeredFilters.copyFrom(otherObj.m_layeredFilters, flags);
	this.m_aggregationDimensions.clear();
	let aggregationDimensionsIter = otherObj.m_aggregationDimensions.getIterator();
	while (aggregationDimensionsIter.hasNext())
	{
		let aggregationDimension = aggregationDimensionsIter.next();
		this.addAdditionalAggregationDimension(aggregationDimension.getDimensionName(), aggregationDimension.getHierarchyName(), aggregationDimension.activateHierarchy());
	}
	this.m_isApplyAdditionalFilterContext = otherObj.m_isApplyAdditionalFilterContext;
	this.m_filterIdsToApply = otherObj.m_filterIdsToApply.createListCopy();
	this.m_displayDescription = otherObj.m_displayDescription;
	this.m_displayName = otherObj.m_displayName;
};
oFF.QFormulaCalcDimProperties.prototype.getAdditionalAggregationDimensions = function()
{
	return this.m_aggregationDimensions;
};
oFF.QFormulaCalcDimProperties.prototype.getAggregationFieldNames = function()
{
	return this.m_aggregationFieldNames;
};
oFF.QFormulaCalcDimProperties.prototype.getDisplayDescription = function()
{
	return this.m_displayDescription;
};
oFF.QFormulaCalcDimProperties.prototype.getDisplayName = function()
{
	return this.m_displayName;
};
oFF.QFormulaCalcDimProperties.prototype.getFilterContext = function()
{
	return this.m_filterContext;
};
oFF.QFormulaCalcDimProperties.prototype.getFilterIdsToApply = function()
{
	return this.m_filterIdsToApply;
};
oFF.QFormulaCalcDimProperties.prototype.getFormulaCalcFields = function()
{
	if (oFF.notNull(this.m_formulaCalcFieldsKeyRef) && this.getOlapEnv() !== null)
	{
		let clientQueryObjectManager = this.getOlapEnv().getClientQueryObjectManager();
		let fieldList = clientQueryObjectManager.getClientQueryObjectByKeyRef(this.m_formulaCalcFieldsKeyRef);
		return fieldList;
	}
	return this.m_formulaCalcFields;
};
oFF.QFormulaCalcDimProperties.prototype.getLayeredFilters = function()
{
	return this.m_layeredFilters;
};
oFF.QFormulaCalcDimProperties.prototype.getNestedDependentMemberNames = function(context)
{
	let depMemberNames = oFF.XHashSetOfString.create();
	let fieldsItr = this.getFormulaCalcFields().getIterator();
	while (fieldsItr.hasNext())
	{
		let field = fieldsItr.next();
		let formulaFieldDepMemberNamesItr = field.getNestedDependentMemberNames(context).getIterator();
		while (formulaFieldDepMemberNamesItr.hasNext())
		{
			let formulaFieldDepMemberName = formulaFieldDepMemberNamesItr.next();
			depMemberNames.add(formulaFieldDepMemberName);
		}
	}
	let dimensionsUsedInFilterItr = this.getFilterContext().getDimensionsUsedInFilter().getIterator();
	while (dimensionsUsedInFilterItr.hasNext())
	{
		let dimensionName = dimensionsUsedInFilterItr.next();
		let depFormulaCalcDimProperties = context.getOlapEnv().getClientQueryObjectManager().getFormulaCalcDimProperties(dimensionName, context.getQueryManager().getClientQueryObjectStorageName());
		if (oFF.notNull(depFormulaCalcDimProperties))
		{
			let measuresFromDepFormulaItr = depFormulaCalcDimProperties.getNestedDependentMemberNames(context).getIterator();
			while (measuresFromDepFormulaItr.hasNext())
			{
				let measureNameFromDepFormula = measuresFromDepFormulaItr.next();
				depMemberNames.add(measureNameFromDepFormula);
			}
		}
	}
	return depMemberNames.getValuesAsReadOnlyList();
};
oFF.QFormulaCalcDimProperties.prototype.isApplyAdditionalFilterContext = function()
{
	return this.m_isApplyAdditionalFilterContext;
};
oFF.QFormulaCalcDimProperties.prototype.isMeasureBased = function()
{
	let result = false;
	let fields = this.getFormulaCalcFields();
	if (oFF.notNull(fields) && fields.hasElements())
	{
		let calcKeyField = fields.getFirstFieldByType(oFF.PresentationType.KEY);
		let formulaItemInfo = oFF.FormulaItemUtils.getFieldNamesFromFormula(calcKeyField.getFormulaItem());
		result = formulaItemInfo.getMemberNames().hasElements();
	}
	return result;
};
oFF.QFormulaCalcDimProperties.prototype.releaseObject = function()
{
	this.m_formulaCalcFields = oFF.XObjectExt.release(this.m_formulaCalcFields);
	this.m_formulaCalcFieldsKeyRef = null;
	this.m_aggregationFieldNames = oFF.XObjectExt.release(this.m_aggregationFieldNames);
	this.m_aggregationDimensions = oFF.XObjectExt.release(this.m_aggregationDimensions);
	this.m_filterContext = oFF.XObjectExt.release(this.m_filterContext);
	this.m_layeredFilters = oFF.XObjectExt.release(this.m_layeredFilters);
	this.m_filterIdsToApply = oFF.XObjectExt.release(this.m_filterIdsToApply);
	this.m_displayDescription = null;
	this.m_displayName = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QFormulaCalcDimProperties.prototype.removeAdditionalAggregationDimensionByName = function(dimensionName)
{
	let index = -1;
	for (let i = 0; i < this.m_aggregationDimensions.size(); i++)
	{
		if (oFF.XString.isEqual(this.m_aggregationDimensions.get(i).getDimensionName(), dimensionName))
		{
			index = i;
			break;
		}
	}
	if (index > -1)
	{
		this.m_aggregationDimensions.removeAt(index);
		this.notifyNodeChanged();
	}
};
oFF.QFormulaCalcDimProperties.prototype.removeAggregationFieldName = function(fieldName)
{
	this.m_aggregationFieldNames.removeElement(fieldName);
	this.notifyNodeChanged();
};
oFF.QFormulaCalcDimProperties.prototype.removeFormulaCalcFieldByName = function(name)
{
	let formulaCalcFields = this.getFormulaCalcFields();
	let field = formulaCalcFields.getFieldByName(name);
	formulaCalcFields.removeElement(field);
	this.notifyNodeChanged();
};
oFF.QFormulaCalcDimProperties.prototype.reset = function()
{
	this.m_aggregationFieldNames.clear();
	this.m_aggregationDimensions.clear();
	if (this.m_filterContext.isCartesianProduct())
	{
		this.m_filterContext.getCartesianProduct().clear();
	}
	else if (this.m_filterContext.isComplexFilter())
	{
		this.m_filterContext.setComplexRoot(null);
	}
	this.m_layeredFilters.clear();
	this.m_formulaCalcFields.clear();
	if (oFF.notNull(this.m_formulaCalcFieldsKeyRef))
	{
		this.getFormulaCalcFields().clear();
	}
	this.m_isApplyAdditionalFilterContext = false;
	this.m_filterIdsToApply.clear();
	this.notifyNodeChanged();
};
oFF.QFormulaCalcDimProperties.prototype.setDisplayDescription = function(displayDescription)
{
	this.m_displayDescription = displayDescription;
};
oFF.QFormulaCalcDimProperties.prototype.setDisplayName = function(displayName)
{
	this.m_displayName = displayName;
};
oFF.QFormulaCalcDimProperties.prototype.setFormulaCalcFieldsKeyRef = function(keyRef)
{
	this.m_formulaCalcFieldsKeyRef = keyRef;
	let clientQueryObjectManager = this.getOlapEnv().getClientQueryObjectManager();
	let formulaCalcFields = clientQueryObjectManager.getClientQueryObjectByKeyRef(this.m_formulaCalcFieldsKeyRef);
	if (oFF.notNull(formulaCalcFields))
	{
		formulaCalcFields.addSecondaryParent(this);
	}
};
oFF.QFormulaCalcDimProperties.prototype.setIsApplyAdditionalFilterContext = function(isApplyAdditionalFilterContext)
{
	this.m_isApplyAdditionalFilterContext = isApplyAdditionalFilterContext;
};

oFF.QSelectValue = function() {};
oFF.QSelectValue.prototype = new oFF.QModelComponent();
oFF.QSelectValue.prototype._ff_c = "QSelectValue";

oFF.QSelectValue._createDimensionElement2 = function(context, selectField, hierarchyName, value)
{
	let newObject = new oFF.QSelectValue();
	newObject.setupSelectElement(context, selectField, hierarchyName, value);
	return newObject;
};
oFF.QSelectValue._createDimensionElementWithMemberType = function(memberType, selectField, hierarchyName, value)
{
	let selectValue = oFF.QSelectValue._createDimensionElement2(selectField.getContext(), selectField, hierarchyName, value);
	selectValue.m_selectMemberType = memberType;
	return selectValue;
};
oFF.QSelectValue.prototype.m_selectField = null;
oFF.QSelectValue.prototype.m_selectHierarchyName = null;
oFF.QSelectValue.prototype.m_selectMemberType = null;
oFF.QSelectValue.prototype.m_selectValue = null;
oFF.QSelectValue.prototype.getDimension = function()
{
	return this.getSelectField().getDimension();
};
oFF.QSelectValue.prototype.getMemberType = function()
{
	return oFF.MemberType.SELECT_VALUE;
};
oFF.QSelectValue.prototype.getSelectField = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_selectField);
};
oFF.QSelectValue.prototype.getSelectHierarchyName = function()
{
	return this.m_selectHierarchyName;
};
oFF.QSelectValue.prototype.getSelectMemberType = function()
{
	return this.m_selectMemberType;
};
oFF.QSelectValue.prototype.getSelectValue = function()
{
	let selectValue = this.m_selectValue;
	let dimension = this.getDimension();
	if (oFF.notNull(dimension) && dimension.areHierarchicalDimensionMemberNamesStoredAsFlat() && dimension.isHierarchyActive())
	{
		let memberName = null;
		if (oFF.QDimensionMemberNameUtil.isMDXHierarchyKey(this.m_selectValue))
		{
			let hierarchyAndMemberName = oFF.QDimensionMemberNameUtil.parseHierarchyAndFlatMemberName(this.m_selectValue);
			if (oFF.notNull(hierarchyAndMemberName))
			{
				memberName = hierarchyAndMemberName.getSecondString();
			}
		}
		else
		{
			memberName = this.m_selectValue;
		}
		if (oFF.notNull(memberName))
		{
			let structureMember = dimension.getStructureMember(memberName);
			if (oFF.notNull(structureMember))
			{
				selectValue = structureMember.getName();
			}
		}
	}
	return selectValue;
};
oFF.QSelectValue.prototype.getSelectableElement = function()
{
	return this;
};
oFF.QSelectValue.prototype.getType = function()
{
	return this.getMemberType();
};
oFF.QSelectValue.prototype.isNode = function()
{
	return this.getMemberType().isNode();
};
oFF.QSelectValue.prototype.releaseObject = function()
{
	this.m_selectField = oFF.XObjectExt.release(this.m_selectField);
	this.m_selectHierarchyName = null;
	this.m_selectValue = null;
	this.m_selectMemberType = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QSelectValue.prototype.setupSelectElement = function(context, selectField, hierarchyName, value)
{
	this.setupModelComponent(context, null);
	this.m_selectField = oFF.XWeakReferenceUtil.getWeakRef(selectField);
	this.m_selectHierarchyName = hierarchyName;
	this.m_selectValue = value;
};

oFF.QDocumentsIdsRequest = function() {};
oFF.QDocumentsIdsRequest.prototype = new oFF.QModelComponent();
oFF.QDocumentsIdsRequest.prototype._ff_c = "QDocumentsIdsRequest";

oFF.QDocumentsIdsRequest._create = function(context, parentNode)
{
	let di = new oFF.QDocumentsIdsRequest();
	di.setupModelComponent(context, parentNode);
	di.setupValues();
	return di;
};
oFF.QDocumentsIdsRequest.prototype.m_documentsDirectory = null;
oFF.QDocumentsIdsRequest.prototype.m_documentsIdsScope = null;
oFF.QDocumentsIdsRequest.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let origin = other;
	this.m_documentsIdsScope = origin.getDocumentsIdsScope();
	this.m_documentsDirectory = origin.getDocumentsDirectory();
};
oFF.QDocumentsIdsRequest.prototype.getDocumentsDirectory = function()
{
	return this.m_documentsDirectory;
};
oFF.QDocumentsIdsRequest.prototype.getDocumentsIdsScope = function()
{
	return this.m_documentsIdsScope;
};
oFF.QDocumentsIdsRequest.prototype.releaseObject = function()
{
	oFF.QModelComponent.prototype.releaseObject.call( this );
	this.m_documentsIdsScope = null;
	this.m_documentsDirectory = null;
};
oFF.QDocumentsIdsRequest.prototype.setDocumentsDirectory = function(documentsDirectory)
{
	let documentsInfo = this.getQueryModel() === null ? null : this.getQueryModel().getDocumentsInfo();
	if (oFF.notNull(documentsInfo) && oFF.XCollectionUtils.hasElements(documentsInfo.getDocumentsDirectories()))
	{
		if (documentsInfo.getDocumentsDirectories().contains(documentsDirectory))
		{
			this.m_documentsDirectory = documentsDirectory;
			documentsInfo.setActiveDocumentsDirectory(documentsDirectory);
			documentsInfo.setDocumentsServicePath(documentsDirectory);
		}
		else
		{
			throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate4("Documents directory ", documentsDirectory, " not valid. Valid directories are: ", oFF.XCollectionUtils.join(documentsInfo.getDocumentsDirectories(), ", ")));
		}
	}
	else
	{
		throw oFF.XException.createIllegalStateException("Document directories not supported for current query");
	}
};
oFF.QDocumentsIdsRequest.prototype.setDocumentsIdsScope = function(documentsIdsScope)
{
	this.m_documentsIdsScope = documentsIdsScope;
};
oFF.QDocumentsIdsRequest.prototype.setupValues = function()
{
	this.m_documentsIdsScope = oFF.DocumentsIdsScope.NONE;
	let documentInfo = this.getQueryModel().getDocumentsInfo();
	if (oFF.notNull(documentInfo) && documentInfo.getSupportsDocuments() !== oFF.DocumentsSupportType.NONE)
	{
		if (documentInfo.isBasedOnCDSView())
		{
			this.m_documentsIdsScope = oFF.DocumentsIdsScope.SYSTEM_UNIQUE;
		}
		else
		{
			this.m_documentsIdsScope = oFF.DocumentsIdsScope.RESULT_SET_BOUND;
		}
	}
};

oFF.QDocumentsInfo = function() {};
oFF.QDocumentsInfo.prototype = new oFF.QModelComponent();
oFF.QDocumentsInfo.prototype._ff_c = "QDocumentsInfo";

oFF.QDocumentsInfo._create = function(context, parentNode)
{
	let di = new oFF.QDocumentsInfo();
	di.setupModelComponent(context, parentNode);
	di.setupValues();
	return di;
};
oFF.QDocumentsInfo.prototype.m_activeDocumentsDirectory = null;
oFF.QDocumentsInfo.prototype.m_basedOnCdsView = false;
oFF.QDocumentsInfo.prototype.m_defaultDocumentsDirectory = null;
oFF.QDocumentsInfo.prototype.m_documentsDirectories = null;
oFF.QDocumentsInfo.prototype.m_documentsServicePath = null;
oFF.QDocumentsInfo.prototype.m_supportsDocuments = null;
oFF.QDocumentsInfo.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let origin = other;
	this.m_activeDocumentsDirectory = origin.getActiveDocumentsDirectory();
	this.m_defaultDocumentsDirectory = origin.getDefaultDocumentsDirectory();
	let origDirectories = origin.getDocumentsDirectories();
	if (oFF.notNull(origDirectories))
	{
		this.m_documentsDirectories = origDirectories.createListCopy();
	}
	this.m_documentsServicePath = origin.getDocumentsServicePath();
	this.m_supportsDocuments = origin.getSupportsDocuments();
	this.m_basedOnCdsView = origin.isBasedOnCDSView();
};
oFF.QDocumentsInfo.prototype.getActiveDocumentsDirectory = function()
{
	return this.m_activeDocumentsDirectory;
};
oFF.QDocumentsInfo.prototype.getDefaultDocumentsDirectory = function()
{
	return this.m_defaultDocumentsDirectory;
};
oFF.QDocumentsInfo.prototype.getDocumentsDirectories = function()
{
	return this.m_documentsDirectories;
};
oFF.QDocumentsInfo.prototype.getDocumentsServicePath = function()
{
	return this.m_documentsServicePath;
};
oFF.QDocumentsInfo.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.DOCUMENTS_INFO;
};
oFF.QDocumentsInfo.prototype.getOrCreateDocumentsStoreService = function(withVersions)
{
	return this.getQueryManager().getOrCreateDocumentsStoreService(withVersions);
};
oFF.QDocumentsInfo.prototype.getSupportsDocuments = function()
{
	return this.m_supportsDocuments;
};
oFF.QDocumentsInfo.prototype.isBasedOnCDSView = function()
{
	return this.m_basedOnCdsView;
};
oFF.QDocumentsInfo.prototype.mergeDeepRecursive = function(settings, other)
{
	let origin = other;
	this.m_activeDocumentsDirectory = origin.getActiveDocumentsDirectory();
	this.m_defaultDocumentsDirectory = origin.getDefaultDocumentsDirectory();
	let origDirectories = origin.getDocumentsDirectories();
	if (oFF.notNull(origDirectories))
	{
		this.m_documentsDirectories = origDirectories.createListCopy();
	}
	this.m_documentsServicePath = origin.getDocumentsServicePath();
	this.m_supportsDocuments = origin.getSupportsDocuments();
};
oFF.QDocumentsInfo.prototype.releaseObject = function()
{
	oFF.QModelComponent.prototype.releaseObject.call( this );
	this.m_activeDocumentsDirectory = null;
	this.m_defaultDocumentsDirectory = null;
	this.m_documentsServicePath = null;
	this.m_documentsDirectories = null;
	this.m_supportsDocuments = null;
	this.m_basedOnCdsView = false;
};
oFF.QDocumentsInfo.prototype.setActiveDocumentsDirectory = function(documentsDirectory)
{
	this.m_activeDocumentsDirectory = documentsDirectory;
};
oFF.QDocumentsInfo.prototype.setDefaultDocumentsDirectory = function(documentsDirectory)
{
	this.m_defaultDocumentsDirectory = documentsDirectory;
};
oFF.QDocumentsInfo.prototype.setDocumentsDirectories = function(documentsDirectories)
{
	this.m_documentsDirectories = documentsDirectories;
};
oFF.QDocumentsInfo.prototype.setDocumentsServicePath = function(documentsServicePath)
{
	this.m_documentsServicePath = documentsServicePath;
};
oFF.QDocumentsInfo.prototype.setIsBasedOnCDSView = function(basedOnCDSView)
{
	this.m_basedOnCdsView = basedOnCDSView;
};
oFF.QDocumentsInfo.prototype.setSupportsDocuments = function(supportsDocuments)
{
	this.m_supportsDocuments = supportsDocuments;
};
oFF.QDocumentsInfo.prototype.setupValues = function()
{
	this.m_activeDocumentsDirectory = null;
	this.m_defaultDocumentsDirectory = null;
	this.m_documentsServicePath = null;
	this.m_documentsDirectories = null;
	this.m_supportsDocuments = oFF.DocumentsSupportType.NONE;
};

oFF.QDrillManager = function() {};
oFF.QDrillManager.prototype = new oFF.QModelComponent();
oFF.QDrillManager.prototype._ff_c = "QDrillManager";

oFF.QDrillManager.REST_NODE = "!REST_H";
oFF.QDrillManager.create = function(context, queryModel)
{
	let object = new oFF.QDrillManager();
	object.setupDrillManager(context, queryModel);
	return object;
};
oFF.QDrillManager.prototype.m_backendDrillValidationForAutoSubmit = false;
oFF.QDrillManager.prototype.m_drillCounter = 0;
oFF.QDrillManager.prototype.m_drillOperations = null;
oFF.QDrillManager.prototype.m_drillOperationsMap = null;
oFF.QDrillManager.prototype.m_explicitDrillOnFilteredNodes = null;
oFF.QDrillManager.prototype.m_rootNodeCache = null;
oFF.QDrillManager.prototype.m_stackDrillOperations = null;
oFF.QDrillManager.prototype.m_stickyMembersByDimension = null;
oFF.QDrillManager.prototype.m_supportsDrillCounter = false;
oFF.QDrillManager.prototype.m_transientExplicitDrillOperations = null;
oFF.QDrillManager.prototype.m_validatesContextFree = false;
oFF.QDrillManager.prototype.m_zoomDrillStack = null;
oFF.QDrillManager.prototype.m_zoomOperationsByDimension = null;
oFF.QDrillManager.prototype.addDimensionZoomFilter = function(dimension, dimZoomOperations, globalTupleFilter)
{
	let visList = null;
	let orFilter = null;
	if (this.getModelCapabilities().supportsVisibilityFilter())
	{
		visList = this.getCartesianVisibilityListForDimension(dimension);
		visList.clear();
	}
	else
	{
		visList = this.getCartesianDisplayListForDimension(dimension);
		visList.clear();
		if (oFF.notNull(globalTupleFilter))
		{
			let drillPathSize = dimZoomOperations.get(0).getDrillPath().size();
			if (drillPathSize === 0)
			{
				return;
			}
			else if (drillPathSize > 1)
			{
				orFilter = oFF.QFactory.createFilterOr(this.getQueryModel());
			}
			if (oFF.notNull(orFilter))
			{
				globalTupleFilter.add(orFilter);
			}
		}
	}
	visList.setHierarchyName(dimension.getHierarchyName());
	if (visList.getHierarchyName() === null && dimension.effectivelyUseHierarchyNameVariable())
	{
		visList.setHierarchyName(dimension.getHierarchyNameVariableName());
	}
	visList.setFieldMetadata(dimension.getHierarchyKeyField().getMetadata());
	for (let i = 0; i < dimZoomOperations.size(); i++)
	{
		let operation = dimZoomOperations.get(i);
		let drillPath = operation.getDrillPath();
		let lastDrillElement = drillPath.get(drillPath.size() - 1);
		let zoomInstruction = lastDrillElement.getEffectiveZoomInstruction();
		let field = zoomInstruction.getFirstObject();
		if (oFF.isNull(field) || !field.isFilterable())
		{
			continue;
		}
		let cartEl = visList.addNewCartesianElement();
		cartEl.setComparisonOperator(oFF.ComparisonOperator.EQUAL);
		cartEl.setLowString(zoomInstruction.getSecondObject().getString());
		visList.setField(field);
		cartEl.setField(field);
		if (!oFF.XCollectionUtils.hasElements(this.m_stickyMembersByDimension.getByKey(dimension.getName())) || !this.m_stickyMembersByDimension.getByKey(dimension.getName()).contains(lastDrillElement.getName()))
		{
			cartEl.setLevelOffset(operation.getRelativeLevelOffset());
		}
		if (this.getModelCapabilities().supportsHierarchyTrapezoidFilter())
		{
			cartEl.setDepth(-1);
		}
		let pathSize = drillPath.size();
		if (oFF.notNull(orFilter))
		{
			let algebraFilter = null;
			if (pathSize === 0)
			{
				continue;
			}
			if (pathSize === 1)
			{
				algebraFilter = orFilter;
			}
			else
			{
				algebraFilter = oFF.QFactory.createFilterAnd(this.getQueryModel());
				orFilter.add(algebraFilter);
			}
			for (let j = 0; j < pathSize; j++)
			{
				let selectElement = drillPath.get(j);
				zoomInstruction = selectElement.getEffectiveZoomInstruction();
				let selectField = zoomInstruction.getFirstObject();
				let selectValue = zoomInstruction.getSecondObject().getString();
				if (oFF.notNull(selectField) && selectField.isFilterable())
				{
					let filterOperation = oFF.QFactory.createFilterOperation(this.getQueryModel(), selectField);
					filterOperation.setConvertToFlatFilter(true);
					filterOperation.setHierarchyName(selectElement.getSelectHierarchyName());
					filterOperation.setLowString(selectValue);
					algebraFilter.add(filterOperation);
				}
			}
		}
	}
};
oFF.QDrillManager.prototype.addOperationInternal = function(newOperation)
{
	this.m_drillCounter++;
	let uniqueName = newOperation.getPathUniqueName();
	this.removeElementByKey(uniqueName);
	this.m_drillOperations.add(newOperation);
	this.m_drillOperationsMap.put(uniqueName, newOperation);
	this.notifyNodeChanged();
	return newOperation;
};
oFF.QDrillManager.prototype.addStickyMemberForDimension = function(dimension, memberName)
{
	let dimName = dimension.getName();
	if (!this.m_stickyMembersByDimension.containsKey(dimName))
	{
		this.m_stickyMembersByDimension.put(dimName, oFF.XHashSetOfString.create());
	}
	let stickyMembers = this.m_stickyMembersByDimension.getByKey(dimName);
	if (!stickyMembers.contains(memberName))
	{
		stickyMembers.add(memberName);
		this.notifyNodeChanged();
	}
};
oFF.QDrillManager.prototype.addZoomDrillInternal = function(element, hideRoots, stackPosition)
{
	let newOperation = oFF.QDrillOperation.create(this.getContext(), this, oFF.DrillOperationType.CONTEXT, null, oFF.DrillState.EXPANDED, 1, hideRoots ? 1 : 0, element, this.m_drillCounter, stackPosition);
	return this.addZoomDrillOperationInternal(newOperation);
};
oFF.QDrillManager.prototype.addZoomDrillOperationInternal = function(newOperation)
{
	this.m_drillCounter++;
	this.m_stackDrillOperations.add(newOperation);
	this.notifyNodeChanged();
	return newOperation;
};
oFF.QDrillManager.prototype.addZoomDrillPath = function(drillPath, hideRoots)
{
	if (!oFF.XCollectionUtils.hasElements(drillPath))
	{
		return null;
	}
	let dimension = drillPath.get(drillPath.size() - 1).getDimension();
	if (oFF.isNull(dimension))
	{
		return null;
	}
	let dimensionName = dimension.getName();
	if (this.m_zoomOperationsByDimension.getByKey(dimensionName) === null)
	{
		let newList = oFF.XList.create();
		this.m_zoomOperationsByDimension.put(dimensionName, newList);
		this.m_zoomDrillStack.add(newList);
	}
	let result = this.addZoomDrillInternal(drillPath, hideRoots, this.m_zoomDrillStack.size());
	this.m_zoomOperationsByDimension.getByKey(dimensionName).add(result);
	return result;
};
oFF.QDrillManager.prototype.addZoomDrillPathElement = function(drillPathElement, hideRoots)
{
	let drillPath = oFF.XList.create();
	drillPath.add(drillPathElement);
	return this.addZoomDrillPath(drillPath, hideRoots);
};
oFF.QDrillManager.prototype.applyRootNavigationOffset = function()
{
	let globalVirtualRootNodeName = this.getQueryModel().getVirtualRootNodeName();
	let variablesByDimension = this.getQueryModelBase().getVariableManagerBase().getDimensionMemberVariablesAffectingDynamicFilterByDimension();
	let supportGlobalVirtualRootNodeName = oFF.XStringUtils.isNotNullAndNotEmpty(globalVirtualRootNodeName);
	let newElement;
	let origFilter = this.getQueryModel().getFilter();
	for (let j = 0; j < this.m_drillOperations.size(); j++)
	{
		let curDrillOp = this.m_drillOperations.get(j);
		let targetDim = curDrillOp.getTargetDimension();
		if (!this.isHierarchyActiveForDimensionExt(targetDim))
		{
			continue;
		}
		let dimensionInvisible = !oFF.AxisType.isAxisVisible(targetDim.getAxisType());
		if (dimensionInvisible || !supportGlobalVirtualRootNodeName && !targetDim.isHierarchyActive())
		{
			continue;
		}
		let stickyMembers = this.m_stickyMembersByDimension.getByKey(targetDim.getName());
		if (curDrillOp.getType() === oFF.DrillOperationType.ROOT && (curDrillOp.getRelativeLevelOffset() > 0 || curDrillOp.getRelativeLevelOffset() === -1 || oFF.XCollectionUtils.hasElements(stickyMembers)))
		{
			let levelOffset = curDrillOp.getRelativeLevelOffset() === -1 ? oFF.XMath.max(0, targetDim.getInitialDrillLevel()) : curDrillOp.getRelativeLevelOffset();
			if ((!oFF.XCollectionUtils.hasElements(stickyMembers) && !this.m_explicitDrillOnFilteredNodes.contains(targetDim.getName()) || targetDim.getInitialDrillLevel() !== 0) && !this.m_zoomOperationsByDimension.containsKey(targetDim.getName()))
			{
				let cartListOrig = this.getCartesianListForDimension(targetDim, origFilter.getDynamicFilter(), origFilter.getTmpFilter(), origFilter.getLinkedFilters());
				let hierarchyIdentifier = this.getUniqueHierarchyIdentifier(targetDim);
				let nodeNameList = this.m_rootNodeCache.getByKey(hierarchyIdentifier);
				if (!oFF.XCollectionUtils.hasElements(nodeNameList) && levelOffset > 0 && targetDim.getInitialDrillLevel() !== 0 && !this.m_zoomOperationsByDimension.containsKey(targetDim.getName()))
				{
					if (oFF.XStringUtils.isNotNullAndNotEmpty(globalVirtualRootNodeName))
					{
						nodeNameList = oFF.XList.create();
						nodeNameList.add(globalVirtualRootNodeName);
					}
				}
				let nni = 0;
				let nniSize = oFF.isNull(nodeNameList) ? 0 : nodeNameList.size();
				if (this.getModelCapabilities().supportsVisibilityFilter())
				{
					let visFilterOrig = this.getCartesianListForDimension(targetDim, origFilter.getVisibilityFilter(), origFilter.getTmpVisibilityFilter(), origFilter.getLinkedVisibilityFilters());
					if (oFF.XCollectionUtils.hasElements(visFilterOrig))
					{
						cartListOrig = visFilterOrig;
					}
					let visList = this.getCartesianVisibilityListForDimension(targetDim);
					visList.clear();
					visList.setHierarchyName(targetDim.getHierarchyName());
					visList.setConvertToFlatFilter(false);
					if (oFF.XCollectionUtils.hasElements(cartListOrig) && oFF.XStringUtils.isNotNullAndNotEmpty(cartListOrig.getHierarchyName()) && !cartListOrig.isConvertToFlatFilter())
					{
						visList.setField(targetDim.getFieldByName(cartListOrig.getFieldMetadata().getName()));
						for (let k = 0; k < cartListOrig.size(); k++)
						{
							let oldElement = cartListOrig.getCartesianElement(k);
							if (oldElement.getSetSign() === oFF.SetSign.INCLUDING && !oldElement.isConvertToFlatFilter())
							{
								newElement = visList.addNewCartesianElement();
								newElement.copyFrom(oldElement, null);
								this.clearMemberNavigations(newElement.getLow());
								this.clearMemberNavigations(newElement.getHigh());
								this.clearMemberNavigations(newElement.getThird());
								if (!oFF.XCollectionUtils.hasElements(stickyMembers) || !stickyMembers.contains(newElement.getLow().getString()))
								{
									newElement.setLevelOffset(levelOffset);
								}
								if (this.getModelCapabilities().supportsHierarchyTrapezoidFilter())
								{
									if (oldElement.hasDepth())
									{
										newElement.setDepth(oldElement.getDepth());
									}
									else
									{
										newElement.setDepth(-1);
									}
								}
							}
						}
					}
					else if (oFF.XCollectionUtils.hasElements(nodeNameList))
					{
						visList.setField(targetDim.getFieldByPresentationType(oFF.PresentationType.HIERARCHY_KEY));
						for (nni = 0; nni < nniSize; nni++)
						{
							if (oFF.XStringUtils.isNotNullAndNotEmpty(nodeNameList.get(nni)))
							{
								let virtualRootElement = visList.addNewCartesianElement();
								virtualRootElement.setComparisonOperator(oFF.ComparisonOperator.EQUAL);
								virtualRootElement.setLowString(nodeNameList.get(nni));
								virtualRootElement.setHierarchyName(targetDim.getHierarchyName());
								virtualRootElement.setLevelOffset(levelOffset);
								if (this.getModelCapabilities().supportsHierarchyTrapezoidFilter())
								{
									virtualRootElement.setDepth(-1);
								}
							}
						}
					}
				}
				else if (levelOffset > 0)
				{
					let cartListForManipulation = this.getCartesianDisplayListForDimension(targetDim);
					cartListForManipulation.clear();
					let variable = variablesByDimension.getByKey(targetDim.getName());
					cartListForManipulation.setHierarchyName(targetDim.getHierarchyName());
					if (cartListForManipulation.getHierarchyName() === null)
					{
						cartListForManipulation.setHierarchyName(targetDim.getHierarchyName());
					}
					if (cartListForManipulation.getHierarchyName() === null && targetDim.effectivelyUseHierarchyNameVariable())
					{
						cartListForManipulation.setHierarchyName(targetDim.getHierarchyNameVariableName());
					}
					cartListForManipulation.setFieldMetadata(targetDim.getHierarchyKeyField().getMetadata());
					if (oFF.XCollectionUtils.hasElements(cartListOrig) && oFF.XStringUtils.isNotNullAndNotEmpty(cartListOrig.getHierarchyName()) && !cartListOrig.isConvertToFlatFilter())
					{
						for (let l = 0; l < cartListOrig.size(); l++)
						{
							let curElement = cartListOrig.getCartesianElement(l);
							if (!curElement.isConvertToFlatFilter() && curElement.getSetSign() === oFF.SetSign.INCLUDING)
							{
								if (cartListOrig.size() === 1 && oFF.XString.indexOf(curElement.getLow().getString(), oFF.QDrillManager.REST_NODE) !== -1 || oFF.XString.indexOf(curElement.getLow().getString(), oFF.QDrillManager.REST_NODE) === -1 || levelOffset < 2)
								{
									newElement = cartListForManipulation.addNewCartesianElement();
									newElement.copyFrom(curElement, null);
									if (supportGlobalVirtualRootNodeName)
									{
										newElement.setHierarchyName(cartListForManipulation.getHierarchyName());
									}
									newElement.setLevelOffset(levelOffset);
								}
							}
						}
					}
					else if (supportGlobalVirtualRootNodeName && oFF.notNull(variable) && variable.isWinControlInAutoSubmit())
					{
						let varRootElement = cartListForManipulation.addNewCartesianElement();
						varRootElement.setComparisonOperator(oFF.ComparisonOperator.EQUAL);
						varRootElement.getLow().setVariableValue(variable);
						varRootElement.setHierarchyName(cartListForManipulation.getHierarchyName());
						varRootElement.setLevelOffset(levelOffset);
					}
					else if (oFF.XCollectionUtils.hasElements(nodeNameList))
					{
						for (nni = 0; nni < nniSize; nni++)
						{
							if (oFF.XStringUtils.isNotNullAndNotEmpty(nodeNameList.get(nni)))
							{
								if (nniSize === 1 && oFF.XString.indexOf(nodeNameList.get(nni), oFF.QDrillManager.REST_NODE) !== -1 || oFF.XString.indexOf(nodeNameList.get(nni), oFF.QDrillManager.REST_NODE) === -1 || levelOffset < 2)
								{
									let virRootElement = cartListForManipulation.addNewCartesianElement();
									virRootElement.setComparisonOperator(oFF.ComparisonOperator.EQUAL);
									virRootElement.setLowString(nodeNameList.get(nni));
									virRootElement.setHierarchyName(supportGlobalVirtualRootNodeName ? cartListForManipulation.getHierarchyName() : targetDim.getHierarchyName());
									virRootElement.setLevelOffset(levelOffset);
								}
							}
						}
					}
					else
					{
						this.log2("ROOTNODE error for hierarchy: ", targetDim.getHierarchyName());
					}
				}
			}
		}
	}
};
oFF.QDrillManager.prototype.checkRootNodeFetching = function()
{
	if (oFF.XStringUtils.isNullOrEmpty(this.getQueryModel().getVirtualRootNodeName()))
	{
		this.checkRootNodeFetchingInternal();
	}
};
oFF.QDrillManager.prototype.checkRootNodeFetchingInternal = function()
{
	let origFilter = this.getQueryModel().getFilter();
	let dimensionsToCheck = oFF.XList.create();
	let j;
	for (j = 0; j < this.m_drillOperations.size(); j++)
	{
		let curDrillOp = this.m_drillOperations.get(j);
		let targetDim = curDrillOp.getTargetDimension();
		if (oFF.isNull(targetDim) || !targetDim.isHierarchyActive() || oFF.XStringUtils.isNullOrEmpty(targetDim.getHierarchyName()) || !oFF.AxisType.isAxisVisible(targetDim.getAxisType()))
		{
			continue;
		}
		let stickyMembers = this.m_stickyMembersByDimension.getByKey(targetDim.getName());
		if (curDrillOp.getType() === oFF.DrillOperationType.ROOT && (curDrillOp.getRelativeLevelOffset() > 0 || curDrillOp.getRelativeLevelOffset() === -1 || oFF.XCollectionUtils.hasElements(stickyMembers)))
		{
			if (targetDim.getInitialDrillLevel() !== 0 && !this.m_zoomOperationsByDimension.containsKey(targetDim.getName()))
			{
				let cartListOrig = this.getCartesianListForDimension(targetDim, origFilter.getDynamicFilter(), origFilter.getTmpFilter(), origFilter.getLinkedFilters());
				if ((!oFF.XCollectionUtils.hasElements(cartListOrig) || oFF.XStringUtils.isNullOrEmpty(cartListOrig.getHierarchyName()) || cartListOrig.isConvertToFlatFilter()) && !oFF.XCollectionUtils.hasElements(this.m_rootNodeCache.getByKey(this.getUniqueHierarchyIdentifier(targetDim))))
				{
					dimensionsToCheck.add(targetDim);
				}
			}
		}
	}
	let nodeNameList;
	let success = true;
	for (j = 0; j < dimensionsToCheck.size(); j++)
	{
		let newRootNode = dimensionsToCheck.get(j).getVirtualRootNodeName();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(newRootNode))
		{
			nodeNameList = oFF.XList.create();
			nodeNameList.add(newRootNode);
			this.m_rootNodeCache.put(this.getUniqueHierarchyIdentifier(dimensionsToCheck.get(j)), nodeNameList);
		}
		else
		{
			success = false;
		}
	}
	if (!success)
	{
		let qm = this.getQueryManagerBase();
		let systemName = qm.getSystemName();
		let isBatchModeEnabled = qm.getApplication().getConnectionPool().isBatchModeEnabled(systemName);
		let syncType = isBatchModeEnabled ? oFF.SyncType.NON_BLOCKING : oFF.SyncType.BLOCKING;
		let dimensionsToResetSelectorHierarchyActive = oFF.XList.create();
		let variableProcessorState = qm.getVariableProcessorState();
		if (!qm.isDirectVariableTransferEnabled() && !qm.isExecuteAutoVariableSubmit() && !qm.isShallow() && (qm.supportsAndAllowsEmptyExtendedVarDefinition() || qm.hasVariables()) && !qm.isSubmitted() && !variableProcessorState.isFailedSubmit() && !qm.isProcessingAutoSubmit())
		{
			qm.getVariableProcessor().submitVariables(syncType, null, null);
			if (isBatchModeEnabled)
			{
				qm.getApplication().getConnectionPool().executeBatchQueue(oFF.SyncType.BLOCKING, systemName);
			}
		}
		for (j = 0; j < dimensionsToCheck.size(); j++)
		{
			let dimensionToCheck = dimensionsToCheck.get(j);
			let hierarchyIdentifier = this.getUniqueHierarchyIdentifier(dimensionToCheck);
			if (!oFF.XCollectionUtils.hasElements(this.m_rootNodeCache.getByKey(hierarchyIdentifier)))
			{
				if (!dimensionToCheck.isSelectorHierarchyActive())
				{
					dimensionsToResetSelectorHierarchyActive.add(dimensionToCheck);
					dimensionToCheck.setSelectorHierarchyActive(true);
				}
				dimensionToCheck.processValueHelp(syncType, this, oFF.XStringValue.create(hierarchyIdentifier));
			}
		}
		if (isBatchModeEnabled)
		{
			qm.getApplication().getConnectionPool().executeBatchQueue(oFF.SyncType.BLOCKING, systemName);
		}
		for (j = 0; j < dimensionsToResetSelectorHierarchyActive.size(); j++)
		{
			dimensionsToResetSelectorHierarchyActive.get(j).setSelectorHierarchyActive(false);
		}
	}
};
oFF.QDrillManager.prototype.clearMemberNavigations = function(bag)
{
	if (oFF.notNull(bag))
	{
		bag.clearMemberNavigations();
	}
};
oFF.QDrillManager.prototype.clearStickyMembers = function()
{
	this.m_stickyMembersByDimension.clear();
};
oFF.QDrillManager.prototype.clearStickyMembersForDimension = function(dimension)
{
	let dimName = dimension.getName();
	if (this.m_stickyMembersByDimension.containsKey(dimName))
	{
		this.m_stickyMembersByDimension.remove(dimName);
	}
};
oFF.QDrillManager.prototype.conflictsWithUdh = function(zo)
{
	let conflict = false;
	if (oFF.notNull(zo) && this.getModelCapabilities().supportsUniversalDisplayHierarchies())
	{
		let udhs = this.getQueryModel().getUniversalDisplayHierarchies();
		let targetDimension = zo.getTargetDimension();
		if (oFF.notNull(udhs) && oFF.notNull(targetDimension))
		{
			let axisType = targetDimension.getAxisType();
			let udh = udhs.getByAxisType(axisType);
			if (oFF.notNull(udh) && udh.isActive())
			{
				conflict = true;
			}
			if (!conflict && this.getQueryManager().isHierarchyToUDHConversionEnabledForCurrentRs())
			{
				let axis = this.getQueryModel().getAxis(axisType);
				conflict = oFF.XCollectionUtils.contains(axis, (d) => {
					return d.isHierarchyActive() && d.getLeveledHierarchy(d.getHierarchyName()) !== null;
				});
			}
		}
	}
	return conflict;
};
oFF.QDrillManager.prototype.convertZoomDrillOperations = function()
{
	for (let drillStackIdx = this.m_zoomDrillStack.size() - 1; drillStackIdx >= 0; drillStackIdx--)
	{
		let drillOperations = this.m_zoomDrillStack.get(drillStackIdx);
		for (let zoomOpIdx = 0; zoomOpIdx < drillOperations.size(); zoomOpIdx++)
		{
			let drillOperation = drillOperations.get(zoomOpIdx);
			let newOperation = oFF.QDrillOperation.create(this.getContext(), this, oFF.DrillOperationType.CONTEXT, null, oFF.DrillState.EXPANDED, 1, 0, drillOperation.getDrillPath(), drillOperation.getDrillCounter(), -1);
			this.m_drillOperations.insert(0, newOperation);
		}
		this.m_zoomDrillStack.removeAt(drillStackIdx);
	}
	for (let drillOpIdx = 0; drillOpIdx < this.m_drillOperations.size(); drillOpIdx++)
	{
		this.m_drillOperations.get(drillOpIdx).setRelativeLevelOffset(0);
	}
	this.m_zoomOperationsByDimension.clear();
};
oFF.QDrillManager.prototype.copyDrillManager = function(origin)
{
	oFF.QModelComponent.prototype.copyFrom.call( this , origin, null);
	this.m_stickyMembersByDimension.clear();
	this.m_transientExplicitDrillOperations.clear();
	this.m_stackDrillOperations.clear();
	this.m_zoomDrillStack.clear();
	this.m_rootNodeCache.clear();
	this.m_zoomOperationsByDimension.clear();
	this.m_explicitDrillOnFilteredNodes.clear();
	let size = origin.m_drillOperations.size();
	let queryModel = this.getQueryModel();
	for (let i = 0; i < size; i++)
	{
		let origDrillOp = origin.m_drillOperations.get(i);
		let cloneDrillOp = oFF.QDrillOperation.create(this.getContext(), this, origDrillOp.getType(), null, origDrillOp.getDrillState(), origDrillOp.getRelativeLevelCount(), origDrillOp.getRelativeLevelOffset(), origDrillOp.getDrillPath(), origDrillOp.getDrillCounter(), -1);
		let targetDimension = origDrillOp.getTargetDimension();
		if (oFF.notNull(targetDimension))
		{
			cloneDrillOp.setTargetDimension(queryModel.getDimensionByNameFromExistingMetadata(targetDimension.getName()));
		}
		this.addOperationInternal(cloneDrillOp);
	}
	for (let j = 0; j < origin.m_zoomDrillStack.size(); j++)
	{
		let cloneStackElement = oFF.XList.create();
		let originStackElement = origin.m_zoomDrillStack.get(j);
		if (!oFF.XCollectionUtils.hasElements(originStackElement))
		{
			continue;
		}
		let targDim = originStackElement.get(0).getTargetDimension();
		if (oFF.isNull(targDim))
		{
			continue;
		}
		let targDimName = targDim.getName();
		this.m_zoomOperationsByDimension.put(targDimName, cloneStackElement);
		this.m_zoomDrillStack.add(cloneStackElement);
		for (let k = 0; k < originStackElement.size(); k++)
		{
			let origOperation = originStackElement.get(k);
			let cloneOp = oFF.QDrillOperation.create(this.getContext(), this, origOperation.getType(), null, origOperation.getDrillState(), origOperation.getRelativeLevelCount(), origOperation.getRelativeLevelOffset(), origOperation.getDrillPath(), origOperation.getDrillCounter(), j);
			cloneOp.setTargetDimension(queryModel.getDimensionByNameFromExistingMetadata(targDimName));
			cloneStackElement.add(cloneOp);
			this.m_stackDrillOperations.add(cloneOp);
		}
	}
	this.m_drillCounter = origin.m_drillCounter;
	this.m_supportsDrillCounter = origin.m_supportsDrillCounter;
	this.m_validatesContextFree = origin.m_validatesContextFree;
	this.m_backendDrillValidationForAutoSubmit = origin.m_backendDrillValidationForAutoSubmit;
	this.m_explicitDrillOnFilteredNodes = origin.m_explicitDrillOnFilteredNodes.createSetOfStringCopy();
	let stickyDimensions = origin.m_stickyMembersByDimension.getKeysAsIterator();
	while (stickyDimensions.hasNext())
	{
		let stickyDimension = stickyDimensions.next();
		this.m_stickyMembersByDimension.put(stickyDimension, origin.m_stickyMembersByDimension.getByKey(stickyDimension).createSetOfStringCopy());
	}
	this.copyRootNodesFrom(origin);
};
oFF.QDrillManager.prototype.copyRootNodesFrom = function(origin)
{
	let origRootNodeCache = origin.m_rootNodeCache;
	if (oFF.XCollectionUtils.hasElements(origRootNodeCache))
	{
		let rootKeyIt = origRootNodeCache.getKeysAsIterator();
		while (rootKeyIt.hasNext())
		{
			let rootKey = rootKeyIt.next();
			let nodeNameList = origRootNodeCache.getByKey(rootKey);
			if (oFF.XCollectionUtils.hasElements(nodeNameList))
			{
				let newNodeNames = oFF.XList.create();
				newNodeNames.addAll(nodeNameList);
				this.m_rootNodeCache.put(rootKey, newNodeNames);
			}
		}
	}
};
oFF.QDrillManager.prototype.createDrillValueToDrillStateMap = function(drillOperations, timeDimension)
{
	let drillValueToDrillState = oFF.XHashMapByString.create();
	for (let drillOperationIdx = 0; drillOperationIdx < drillOperations.size(); drillOperationIdx++)
	{
		let drillOperation = drillOperations.get(drillOperationIdx);
		let drillPath = drillOperation.getDrillPath();
		for (let drillPathIdx = 0; drillPathIdx < drillPath.size(); drillPathIdx++)
		{
			let drillPathElement = drillPath.get(drillPathIdx);
			if (oFF.XString.isEqual(drillPathElement.getDimension().getName(), timeDimension.getName()))
			{
				drillValueToDrillState.putIfNotNull(this.getEffectiveDrillValue(drillPathElement), drillOperation.getDrillState());
			}
		}
	}
	return drillValueToDrillState;
};
oFF.QDrillManager.prototype.doesDrillValueAffectLowestDrill = function(queryModel, timeDimension, drillValueToDrillState, drillValue)
{
	if (drillValueToDrillState.getByKey(drillValue) === oFF.DrillState.COLLAPSED)
	{
		return false;
	}
	if (oFF.QTimeDimensionUtil.isFlexibleTimeDimension(timeDimension) && this.getSession().hasFeature(oFF.FeatureToggleOlap.FLEXIBLE_TIME_DYNAMIC_TIME))
	{
		return true;
	}
	let timeHierarchy = timeDimension.getLeveledHierarchy(timeDimension.getHierarchyName());
	let drillValueHierarchyLevel = oFF.QCanonicalDateUtil.getHierarchyLevelFromEntityValue(queryModel, timeDimension, timeDimension.getHierarchyName(), drillValue);
	if (drillValueHierarchyLevel.getLevelType() === oFF.HierarchyLevelType.ALL)
	{
		return true;
	}
	let drillValueParentHierarchyLevel = this.getHierarchyLevelWithOffset(timeHierarchy, drillValueHierarchyLevel, -1);
	let drillValueAncestorEntityValues = oFF.XHashMapByString.create();
	if (oFF.QTimeDimensionUtil.isFlexibleTimeDimension(timeDimension) && drillValueParentHierarchyLevel.getLevelType() !== oFF.HierarchyLevelType.ALL)
	{
		drillValueAncestorEntityValues = oFF.QCanonicalDateUtil.getAncestorEntityValues(queryModel, timeDimension, timeHierarchy.getName(), drillValue);
	}
	while (oFF.notNull(drillValueParentHierarchyLevel))
	{
		let drillValueParentEntityValue;
		if (drillValueParentHierarchyLevel.getLevelType() === oFF.HierarchyLevelType.ALL)
		{
			drillValueParentEntityValue = this.getDrillValueWithLevelTypeAll(queryModel, timeDimension, timeDimension.getHierarchyName(), drillValueToDrillState);
		}
		else if (oFF.QTimeDimensionUtil.isFlexibleTimeDimension(timeDimension))
		{
			drillValueParentEntityValue = drillValueAncestorEntityValues.getByKey(drillValueParentHierarchyLevel.getLevelName());
		}
		else
		{
			let drillValueCanonicalDate = oFF.QCanonicalDateUtil.createCanonicalDateFromEntityValue(queryModel, timeDimension, timeDimension.getHierarchyName(), drillValue);
			let drillValueParentCanonicalDate = oFF.QCanonicalDateUtil.castCanonicalDateToLevel(queryModel, timeDimension, timeDimension.getHierarchyName(), drillValueCanonicalDate, drillValueParentHierarchyLevel.getLevelType(), false);
			drillValueParentEntityValue = oFF.QCanonicalDateUtil.createEntityValueFromCanonicalDate(queryModel, timeDimension, timeDimension.getHierarchyName(), drillValueParentCanonicalDate);
		}
		if (oFF.notNull(drillValueParentEntityValue) && drillValueToDrillState.getByKey(drillValueParentEntityValue) === oFF.DrillState.COLLAPSED)
		{
			return false;
		}
		drillValueParentHierarchyLevel = this.getHierarchyLevelWithOffset(timeHierarchy, drillValueParentHierarchyLevel, -1);
	}
	return true;
};
oFF.QDrillManager.prototype.doesFilterAffectDrill = function(filterContext)
{
	return !filterContext.isConvertToFlatFilter() && filterContext.getHierarchyName() !== null;
};
oFF.QDrillManager.prototype.drillOnFiltersInternal = function(dimension, resultList)
{
	let origFilter = this.getQueryModel().getFilter();
	let cartList = this.getCartesianListForDimension(dimension, origFilter.getDynamicFilter(), origFilter.getTmpFilter(), origFilter.getLinkedFilters());
	if (this.getModelCapabilities().supportsVisibilityFilter() && oFF.XCollectionUtils.hasElements(cartList) && oFF.XStringUtils.isNotNullAndNotEmpty(cartList.getHierarchyName()) && !cartList.isConvertToFlatFilter())
	{
		let visList = this.getCartesianVisibilityListForDimension(dimension);
		visList.clear();
		visList.setHierarchyName(dimension.getHierarchyName());
		for (let i = 0; i < cartList.size(); i++)
		{
			let element = cartList.get(i);
			if (element.getComparisonOperator() !== oFF.ComparisonOperator.EQUAL)
			{
				continue;
			}
			let lowString = element.getLow().getString();
			let path = oFF.XList.create();
			let dpe = oFF.QFactory.createDrillPathElement(dimension, lowString, dimension);
			let elementFieldName = element.getFieldMetadata().getName();
			if (oFF.XStringUtils.isNullOrEmpty(elementFieldName))
			{
				elementFieldName = cartList.getFieldMetadata().getName();
			}
			dpe.setFieldName(elementFieldName);
			path.add(dpe);
			let newOperation = oFF.QDrillOperation.create(this.getContext(), this, oFF.DrillOperationType.CONTEXT, dimension, oFF.DrillState.EXPANDED, 1, 0, path, this.m_drillCounter, -2);
			this.m_transientExplicitDrillOperations.add(newOperation);
			resultList.add(newOperation);
			let field = dimension.getFieldByName(elementFieldName);
			visList.setField(field);
			if (!this.isZoomDrillActiveOn(dimension, lowString))
			{
				let cartEl = visList.addNewCartesianElement();
				cartEl.setComparisonOperator(oFF.ComparisonOperator.EQUAL);
				cartEl.setLowString(lowString);
				cartEl.setField(field);
				if (this.getModelCapabilities().supportsHierarchyTrapezoidFilter())
				{
					cartEl.setDepth(0);
				}
			}
		}
	}
};
oFF.QDrillManager.prototype.drillStickyMembersOnDimension = function(dimension, stickyMembers, resultList)
{
	if (this.getModelCapabilities().supportsVisibilityFilter())
	{
		let visList = this.getCartesianVisibilityListForDimension(dimension);
		let stickyIterator = stickyMembers.getIterator();
		while (stickyIterator.hasNext())
		{
			let memberName = stickyIterator.next();
			let dpe = oFF.QFactory.createDrillPathElement(dimension, memberName, dimension);
			let elementField = dimension.getKeyField();
			dpe.setFieldName(elementField.getName());
			let path = oFF.XList.create();
			path.add(dpe);
			let newOperation = oFF.QDrillOperation.create(this.getContext(), this, oFF.DrillOperationType.CONTEXT, dimension, oFF.DrillState.EXPANDED, 1, 0, path, this.m_drillCounter, -2);
			this.m_transientExplicitDrillOperations.add(newOperation);
			resultList.add(newOperation);
			let visElement = visList.addNewCartesianElement();
			visElement.setField(elementField);
			visElement.setComparisonOperator(oFF.ComparisonOperator.EQUAL);
			visElement.setLowString(memberName);
			visElement.setLevelOffset(0);
			visElement.setDepth(0);
		}
	}
};
oFF.QDrillManager.prototype.filterNonVisibleLevels = function(queryModel, timeDimension, filterRootElement, zoomVisibilityFilter, visibleLevelCandidates)
{
	let visibilityFilterTimeCartesianLists = oFF.QFilterUtil.collectAllTimeCartesianLists(filterRootElement, timeDimension);
	let zoomExpression = oFF.QFactory.createFilterExpression(zoomVisibilityFilter.getContext(), zoomVisibilityFilter.getParent());
	zoomExpression.setComplexRoot(zoomVisibilityFilter);
	visibilityFilterTimeCartesianLists.addAll(oFF.QFilterUtil.collectAllTimeCartesianLists(zoomExpression, timeDimension));
	let visibilityFilterLevelTypes = this.getAvailableLevelFromTimeCartesianLists(queryModel, timeDimension, visibilityFilterTimeCartesianLists, true);
	if (visibilityFilterLevelTypes.isEmpty())
	{
		return visibleLevelCandidates;
	}
	let visibleLevelTypes = oFF.XList.create();
	for (let visibleLevelCandidatesIterator = visibleLevelCandidates.getIterator(); visibleLevelCandidatesIterator.hasNext(); )
	{
		let visibleLevelTypeCandidate = visibleLevelCandidatesIterator.next();
		if (visibilityFilterLevelTypes.contains(visibleLevelTypeCandidate))
		{
			visibleLevelTypes.add(visibleLevelTypeCandidate);
		}
	}
	return visibleLevelTypes;
};
oFF.QDrillManager.prototype.getAllDrillOperations = function()
{
	let resultList = oFF.XList.create();
	for (let i = 0; i < this.m_drillOperations.size(); i++)
	{
		let curOp = this.m_drillOperations.get(i);
		if (curOp.getType() === oFF.DrillOperationType.CONTEXT)
		{
			resultList.add(curOp);
		}
	}
	return resultList;
};
oFF.QDrillManager.prototype.getAllZoomDrillOperationsForDimension = function(dimension)
{
	let result = oFF.XList.create();
	if (oFF.isNull(dimension) || !oFF.XCollectionUtils.hasElements(this.m_zoomOperationsByDimension))
	{
		return result;
	}
	let dimensionName = dimension.getName();
	for (let i = 0; i < this.m_stackDrillOperations.size(); i++)
	{
		let curDO = this.m_stackDrillOperations.get(i);
		if (curDO.getTargetDimension() !== null && oFF.XString.isEqual(dimensionName, curDO.getTargetDimension().getName()))
		{
			result.add(curDO);
		}
	}
	return result;
};
oFF.QDrillManager.prototype.getAvailableLevelFromTimeCartesianLists = function(queryModel, timeDimension, timeCartesianLists, shouldRespectDepth)
{
	let availableLevelTypes = oFF.XList.create();
	for (let idxCartesianList = 0; idxCartesianList < timeCartesianLists.size(); idxCartesianList++)
	{
		let timeCartesianList = timeCartesianLists.get(idxCartesianList);
		if (oFF.notNull(timeCartesianList) && this.doesFilterAffectDrill(timeCartesianList))
		{
			for (let idxCartesianElement = 0; idxCartesianElement < timeCartesianList.size(); idxCartesianElement++)
			{
				let timeCartesianElement = timeCartesianList.getCartesianElement(idxCartesianElement);
				if (this.isIncludeCartesianElement(timeCartesianElement) && !timeCartesianElement.isConvertToFlatFilter())
				{
					availableLevelTypes.addAll(this.getAvailableLevelTypesFromTimeCartesianElement(queryModel, timeDimension, timeCartesianList.getHierarchyName(), timeCartesianElement, shouldRespectDepth));
				}
			}
		}
	}
	return availableLevelTypes;
};
oFF.QDrillManager.prototype.getAvailableLevelTypesFromTimeCartesianElement = function(queryModel, timeDimension, cartesianListHierarchyName, timeCartesianElement, shouldRespectDepth)
{
	let availableLevels = oFF.XList.create();
	let timeHierarchy = timeDimension.getLeveledHierarchy(cartesianListHierarchyName);
	let levelOffset;
	if (timeCartesianElement.hasLevelOffset())
	{
		levelOffset = timeCartesianElement.getLevelOffset();
	}
	else
	{
		levelOffset = 0;
	}
	let selectedValueLevel = null;
	if (oFF.QTimeDimensionUtil.isFlexibleTimeDimension(timeDimension) && this.getSession().hasFeature(oFF.FeatureToggleOlap.FLEXIBLE_TIME_DYNAMIC_TIME))
	{
		selectedValueLevel = oFF.QFilterUtil.getHierarchyLevelFromCartesianElement(timeDimension, cartesianListHierarchyName, timeCartesianElement);
	}
	else
	{
		selectedValueLevel = oFF.QCanonicalDateUtil.getHierarchyLevelFromEntityValue(queryModel, timeDimension, cartesianListHierarchyName, timeCartesianElement.getLow().getString());
	}
	let selectedValueLevelWithOffset = null;
	if (oFF.notNull(selectedValueLevel))
	{
		selectedValueLevelWithOffset = this.getHierarchyLevelWithOffset(timeHierarchy, selectedValueLevel, levelOffset);
	}
	if (oFF.notNull(selectedValueLevelWithOffset))
	{
		availableLevels.add(selectedValueLevelWithOffset);
	}
	if (shouldRespectDepth && queryModel.getModelCapabilities().supportsHierarchyTrapezoidFilter())
	{
		let depth = timeCartesianElement.getDepth();
		if (depth === -1)
		{
			depth = timeHierarchy.getAllLevel().size();
		}
		for (let start = 1; start <= depth && oFF.notNull(selectedValueLevelWithOffset); start++)
		{
			selectedValueLevelWithOffset = this.getHierarchyLevelWithOffset(timeHierarchy, selectedValueLevel, timeCartesianElement.getLevelOffset() + start);
			if (oFF.notNull(selectedValueLevelWithOffset))
			{
				availableLevels.add(selectedValueLevelWithOffset);
			}
		}
	}
	return availableLevels;
};
oFF.QDrillManager.prototype.getCartesianDisplayListForDimension = function(dimension)
{
	return this.getQueryModel().getFilter().getTransientZoomDisplayFilter().getCartesianListWithDefault(dimension);
};
oFF.QDrillManager.prototype.getCartesianListForDimension = function(dimension, dynamicFilter, tmpFilter, externalFilters)
{
	let list = this.getListForDimension(dynamicFilter, dimension);
	if (oFF.isNull(list))
	{
		list = this.getListForDimension(tmpFilter, dimension);
	}
	if (oFF.isNull(list))
	{
		let keyIterator = externalFilters.getKeysAsIterator();
		while (oFF.isNull(list) && keyIterator.hasNext())
		{
			let key = keyIterator.next();
			list = this.getListForDimension(externalFilters.getByKey(key), dimension);
		}
	}
	return list;
};
oFF.QDrillManager.prototype.getCartesianVisibilityListForDimension = function(dimension)
{
	return this.getQueryModel().getFilter().getTransientZoomVisibilityFilter().getCartesianListWithDefault(dimension);
};
oFF.QDrillManager.prototype.getDrillOperations = function()
{
	return this.m_drillOperations;
};
oFF.QDrillManager.prototype.getDrillOperationsByDimension = function(dimension)
{
	let resultList = oFF.XList.create();
	for (let i = 0; i < this.m_drillOperations.size(); i++)
	{
		let curOp = this.m_drillOperations.get(i);
		if (curOp.getType() === oFF.DrillOperationType.CONTEXT && oFF.XString.isEqual(curOp.getTargetDimension().getName(), dimension.getName()))
		{
			resultList.add(curOp);
		}
	}
	return resultList;
};
oFF.QDrillManager.prototype.getDrillOperationsByDimensionAndType = function(dimension, drillState)
{
	let resultList = oFF.XList.create();
	for (let i = 0; i < this.m_drillOperations.size(); i++)
	{
		let curOp = this.m_drillOperations.get(i);
		if (curOp.getType() === oFF.DrillOperationType.CONTEXT && curOp.getDrillState() === drillState && oFF.XString.isEqual(curOp.getTargetDimension().getName(), dimension.getName()))
		{
			resultList.add(curOp);
		}
	}
	return resultList;
};
oFF.QDrillManager.prototype.getDrillOperationsByDrillState = function(drillState)
{
	let resultList = oFF.XList.create();
	for (let i = 0; i < this.m_drillOperations.size(); i++)
	{
		let curOp = this.m_drillOperations.get(i);
		if (curOp.getType() === oFF.DrillOperationType.CONTEXT && curOp.getDrillState() === drillState)
		{
			resultList.add(curOp);
		}
	}
	return resultList;
};
oFF.QDrillManager.prototype.getDrillOperationsForInAData = function()
{
	this.getQueryModel().getFilter().resetTransientZoomFilters();
	let resultList = oFF.XList.create();
	resultList.addAll(this.m_drillOperations);
	if (oFF.XCollectionUtils.hasElements(this.m_zoomOperationsByDimension))
	{
		let zoomDimensionsIterator = this.m_zoomOperationsByDimension.getKeysAsIterator();
		let globalTupleFilter = this.getZoomDataFilterRoot();
		while (zoomDimensionsIterator.hasNext())
		{
			let zoomDim = zoomDimensionsIterator.next();
			let zoomDimension = this.getQueryModel().getDimensionByName(zoomDim);
			if (this.isHierarchyActiveForDimensionExt(zoomDimension))
			{
				let zoomOpList = this.m_zoomOperationsByDimension.getByKey(zoomDim);
				if (oFF.XCollectionUtils.hasElements(zoomOpList))
				{
					if (!this.getModelCapabilities().supportsUniversalDisplayHierarchies())
					{
						resultList.addAll(zoomOpList);
					}
					else
					{
						resultList.addAll(oFF.XStream.of(zoomOpList).filter((zo) => {
							return !this.conflictsWithUdh(zo);
						}).collect(oFF.XStreamCollector.toList()));
					}
					let filterable = oFF.XStream.of(zoomOpList).allMatch((op) => {
						let dp = op.getDrillPath();
						let lde = dp.get(dp.size() - 1);
						let zoomInstruction = lde.getEffectiveZoomInstruction();
						return zoomInstruction.getFirstObject() !== null && zoomInstruction.getFirstObject().isFilterable();
					});
					if (filterable)
					{
						this.addDimensionZoomFilter(zoomDimension, zoomOpList, globalTupleFilter);
					}
					if (this.m_stickyMembersByDimension.containsKey(zoomDim))
					{
						this.drillStickyMembersOnDimension(zoomDimension, this.m_stickyMembersByDimension.getByKey(zoomDim), resultList);
					}
				}
			}
		}
	}
	let dimension;
	let dim;
	let stickyDimensions = this.m_stickyMembersByDimension.getKeysAsIterator();
	while (stickyDimensions.hasNext())
	{
		dim = stickyDimensions.next();
		dimension = this.getQueryModel().getDimensionByName(dim);
		if (oFF.notNull(dimension) && dimension.isHierarchyActive() && oFF.XStringUtils.isNotNullAndNotEmpty(dimension.getHierarchyName()))
		{
			if (dimension.getInitialDrillLevel() === 0)
			{
				if (!oFF.XCollectionUtils.hasElements(this.m_zoomOperationsByDimension.getByKey(dim)) && !this.m_explicitDrillOnFilteredNodes.contains(dim))
				{
					this.drillOnFiltersInternal(dimension, resultList);
				}
			}
			else
			{
				let stickyMembers = this.m_stickyMembersByDimension.getByKey(dim);
				if (!oFF.XCollectionUtils.hasElements(this.m_zoomOperationsByDimension.getByKey(dim)) && oFF.XCollectionUtils.hasElements(stickyMembers))
				{
					dimension = this.getQueryModel().getDimensionByName(dim);
					this.drillStickyMembersOnDimension(dimension, stickyMembers, resultList);
				}
			}
		}
	}
	let explicitDimensions = this.m_explicitDrillOnFilteredNodes.getIterator();
	while (explicitDimensions.hasNext())
	{
		dim = explicitDimensions.next();
		dimension = this.getQueryModel().getDimensionByName(dim);
		if (oFF.notNull(dimension) && dimension.isHierarchyActive() && oFF.XStringUtils.isNotNullAndNotEmpty(dimension.getHierarchyName()))
		{
			if (!oFF.XCollectionUtils.hasElements(this.m_zoomOperationsByDimension.getByKey(dim)))
			{
				dimension = this.getQueryModel().getDimensionByName(dim);
				if (dimension.getInitialDrillLevel() === 0)
				{
					this.drillOnFiltersInternal(dimension, resultList);
				}
			}
		}
	}
	this.applyRootNavigationOffset();
	return resultList;
};
oFF.QDrillManager.prototype.getDrillOperationsForInARepo = function()
{
	let resultList = oFF.XList.create();
	resultList.addAll(this.m_drillOperations);
	for (let i = 0; i < this.m_zoomDrillStack.size(); i++)
	{
		resultList.addAll(this.m_zoomDrillStack.get(i));
	}
	return resultList;
};
oFF.QDrillManager.prototype.getDrillValueWithLevelTypeAll = function(queryModel, timeDimension, hierarchyName, drillValueToDrillState)
{
	for (let iterator = drillValueToDrillState.getKeysAsIterator(); iterator.hasNext(); )
	{
		let drillValue = iterator.next();
		let drillValueLevelType = oFF.QCanonicalDateUtil.getHierarchyLevelTypeFromEntityValue(queryModel, timeDimension, hierarchyName, drillValue);
		if (drillValueLevelType === oFF.HierarchyLevelType.ALL)
		{
			return drillValue;
		}
	}
	return null;
};
oFF.QDrillManager.prototype.getEffectiveDrillValue = function(drillPathElement)
{
	return drillPathElement.getEffectiveZoomInstruction().getSecondObject().getString();
};
oFF.QDrillManager.prototype.getHierarchyLevelWithOffset = function(hierarchy, startHierarchyLevel, offset)
{
	return hierarchy.getLevel(startHierarchyLevel.getLevelNumber() + offset);
};
oFF.QDrillManager.prototype.getIndexedChildren = function()
{
	return oFF.XIteratorWrapper.create(this.m_drillOperations.getIterator());
};
oFF.QDrillManager.prototype.getListForDimension = function(filterExpression, dimension)
{
	if (oFF.isNull(filterExpression) || filterExpression.getFilterRootElement() === null)
	{
		return null;
	}
	let children = filterExpression.getFilterRootElement().getChildrenIterator();
	while (children.hasNext())
	{
		let component = children.next();
		let isList = component.getOlapComponentType().isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST);
		if (isList && oFF.XString.isEqual(component.getDimensionName(), dimension.getName()))
		{
			let cartesianList = component;
			let globalFlat = cartesianList.isConvertToFlatFilter();
			let globalNoHierarchy = oFF.XStringUtils.isNullOrEmpty(cartesianList.getHierarchyName());
			if (!globalFlat)
			{
				for (let i = 0; i < cartesianList.size(); i++)
				{
					let curElement = cartesianList.getCartesianElement(i);
					let localFlat = curElement.isConvertToFlatFilter() || globalNoHierarchy && oFF.XStringUtils.isNullOrEmpty(curElement.getHierarchyName());
					if (curElement.getSetSign() === oFF.SetSign.INCLUDING && !localFlat && !this.isDrivenByHierarchyNodeVariable(dimension.getQueryModel().getVirtualRootNodeName(), curElement))
					{
						return cartesianList;
					}
				}
			}
		}
	}
	return null;
};
oFF.QDrillManager.prototype.getLowestLevel = function(levels, timeDimension)
{
	if (oFF.isNull(levels) || levels.size() === 0)
	{
		throw oFF.XException.createIllegalArgumentException("levels cannot be empty or null");
	}
	let lowestLevel = null;
	for (let iterator = levels.getIterator(); iterator.hasNext(); )
	{
		let level = iterator.next();
		if (oFF.isNull(lowestLevel) || level.getLevelNumber() > lowestLevel.getLevelNumber())
		{
			lowestLevel = level;
		}
	}
	return lowestLevel;
};
oFF.QDrillManager.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.DRILL_MANAGER;
};
oFF.QDrillManager.prototype.getRootExpandingLevels = function(dimension)
{
	let size = this.m_drillOperations.size();
	for (let i = 0; i < size; i++)
	{
		let drillOperation = this.m_drillOperations.get(i);
		if (drillOperation.getType() === oFF.DrillOperationType.ROOT && oFF.XString.isEqual(drillOperation.getTargetDimensionName(), oFF.DfNameObject.getSafeName(dimension)))
		{
			return drillOperation;
		}
	}
	return null;
};
oFF.QDrillManager.prototype.getStickyMembersByDimension = function(dimension)
{
	let dimName = dimension.getName();
	return !oFF.XCollectionUtils.hasElements(this.m_stickyMembersByDimension.getByKey(dimName)) ? null : this.m_stickyMembersByDimension.getByKey(dimName).getValuesAsReadOnlyList();
};
oFF.QDrillManager.prototype.getTimeDimensionLowestDrillLevel = function(timeDimension)
{
	let visibleLevelCandidates = oFF.XList.create();
	let hierarchy = timeDimension.getLeveledHierarchy(timeDimension.getHierarchyName());
	if (oFF.isNull(hierarchy))
	{
		return null;
	}
	try
	{
		visibleLevelCandidates.add(hierarchy.getLevel(0));
		visibleLevelCandidates.addAll(this.getVisibleLevelCandidatesFromDataFilters(timeDimension));
		visibleLevelCandidates.addAll(this.getVisibleLevelCandidatesFromInitialDrillLevel(hierarchy, timeDimension.getInitialDrillLevel(), visibleLevelCandidates));
		visibleLevelCandidates.addAll(this.getVisibleLevelTypeCandidatesFromDrill(this.getQueryModel(), timeDimension));
		let effectiveVisibilityFilter = this.getQueryModel().getFilter().getEffectiveVisibilityFilter();
		let zoomVisibilityFilter = this.getQueryModel().getFilter().getTransientZoomVisibilityFilter();
		let visibleLevels = visibleLevelCandidates;
		if (this.getQueryModel().getModelCapabilities().supportsVisibilityFilter())
		{
			visibleLevels = oFF.XList.create();
			visibleLevels.addAll(this.filterNonVisibleLevels(this.getQueryModel(), timeDimension, effectiveVisibilityFilter, zoomVisibilityFilter, visibleLevelCandidates));
		}
		return this.getLowestLevel(visibleLevels, timeDimension);
	}
	catch (t)
	{
		return null;
	}
};
oFF.QDrillManager.prototype.getTimeDimensionLowestDrillLevelType = function(timeDimension)
{
	let level = this.getTimeDimensionLowestDrillLevel(timeDimension);
	return oFF.notNull(level) ? level.getLevelType() : null;
};
oFF.QDrillManager.prototype.getTopMostZoomDrillOperationsForDimension = function(dimension)
{
	if (oFF.isNull(dimension) || !oFF.XCollectionUtils.hasElements(this.m_zoomOperationsByDimension) || !this.m_zoomOperationsByDimension.containsKey(dimension.getName()))
	{
		return oFF.XList.create();
	}
	return this.m_zoomOperationsByDimension.getByKey(dimension.getName());
};
oFF.QDrillManager.prototype.getUniqueHierarchyIdentifier = function(targetDim)
{
	let hierarchyUniqueName = targetDim.getHierarchyUniqueName(targetDim.getHierarchyName());
	let hVersion = targetDim.getHierarchyVersion();
	let hDueDate = targetDim.getHierarchyDueDate();
	return oFF.XStringUtils.concatenate2(hierarchyUniqueName, oFF.XStringUtils.concatenate5(".[", oFF.isNull(hVersion) ? "" : hVersion, "].[", oFF.isNull(hDueDate) ? "" : hDueDate.toIsoFormat(), "]"));
};
oFF.QDrillManager.prototype.getVisibleLevelCandidatesFromDataFilterRootElement = function(timeDimension, filterElementRoot)
{
	let timeCartesianLists = oFF.XListOfNameObject.create();
	let timeFilters = oFF.QFilterUtil.collectAllTimeCartesianListsAndOperations(filterElementRoot, timeDimension);
	for (let i = 0; i < timeFilters.size(); i++)
	{
		let filterElement = timeFilters.get(i);
		if (filterElement.getOlapComponentType().isTypeOf(oFF.FilterComponentType.OPERATION))
		{
			if (oFF.QFilterUtil.isFilterIsSetWithShowOnlyLeaves(filterElement))
			{
				let hierarchy = timeDimension.getLeveledHierarchy(timeDimension.getHierarchyName());
				let visibleLevelCandidates = oFF.XList.create();
				visibleLevelCandidates.add(hierarchy.getMostGranularLevel());
				return visibleLevelCandidates;
			}
		}
		else
		{
			timeCartesianLists.add(filterElement);
		}
	}
	return this.getAvailableLevelFromTimeCartesianLists(this.getQueryModel(), timeDimension, timeCartesianLists, false);
};
oFF.QDrillManager.prototype.getVisibleLevelCandidatesFromDataFilters = function(timeDimension)
{
	let visibleLevelTypeCandidates = oFF.XList.create();
	let filter = this.getQueryModel().getFilter();
	if (filter.isDynamicFilterInitialized() && filter.getEffectiveFilter().getFilterRootElement() !== null)
	{
		visibleLevelTypeCandidates.addAll(this.getVisibleLevelCandidatesFromDataFilterRootElement(timeDimension, filter.getEffectiveFilter().getFilterRootElement()));
	}
	if (filter.isFixedFilterInitialized() && filter.getFixedFilter().getFilterRootElement() !== null)
	{
		visibleLevelTypeCandidates.addAll(this.getVisibleLevelCandidatesFromDataFilterRootElement(timeDimension, filter.getFixedFilter().getFilterRootElement()));
	}
	return visibleLevelTypeCandidates;
};
oFF.QDrillManager.prototype.getVisibleLevelCandidatesFromInitialDrillLevel = function(timeHierarchy, initialDrillLevel, initialVisibleLevels)
{
	let allHierarchyLevels = timeHierarchy.getAllLevel();
	let expandedLevels = oFF.XList.create();
	if (initialDrillLevel === -1)
	{
		for (let i = 0; i < allHierarchyLevels.size(); i++)
		{
			expandedLevels.add(allHierarchyLevels.get(i));
		}
	}
	else if (initialDrillLevel > 0)
	{
		for (let initialVisibleLevelsIterator = initialVisibleLevels.getIterator(); initialVisibleLevelsIterator.hasNext(); )
		{
			let visibleHierarchyLevelCandidate = initialVisibleLevelsIterator.next();
			for (let allLevelsIterator = allHierarchyLevels.getIterator(); allLevelsIterator.hasNext(); )
			{
				let hierarchyLevel = allLevelsIterator.next();
				if (hierarchyLevel.getLevelNumber() > visibleHierarchyLevelCandidate.getLevelNumber() && hierarchyLevel.getLevelNumber() <= visibleHierarchyLevelCandidate.getLevelNumber() + initialDrillLevel)
				{
					expandedLevels.add(hierarchyLevel);
				}
			}
		}
	}
	return expandedLevels;
};
oFF.QDrillManager.prototype.getVisibleLevelTypeCandidatesFromDrill = function(queryModel, timeDimension)
{
	let expandedLevelTypes = oFF.XList.create();
	let timeHierarchy = timeDimension.getLeveledHierarchy(timeDimension.getHierarchyName());
	let drillOperations = this.getZoomAwareDrillOperationsForDimension(timeDimension);
	let drillValueToDrillState = this.createDrillValueToDrillStateMap(drillOperations, timeDimension);
	for (let drillOperationIdx = 0; drillOperationIdx < drillOperations.size(); ++drillOperationIdx)
	{
		let drillOperation = drillOperations.get(drillOperationIdx);
		let drillPath = drillOperation.getDrillPath();
		for (let drillPathIdx = 0; drillPathIdx < drillPath.size(); ++drillPathIdx)
		{
			let drillPathElement = drillPath.get(drillPathIdx);
			if (oFF.XString.isEqual(drillPathElement.getDimension().getName(), timeDimension.getName()))
			{
				let drillValue = this.getEffectiveDrillValue(drillPathElement);
				if (this.doesDrillValueAffectLowestDrill(queryModel, timeDimension, drillValueToDrillState, drillValue))
				{
					let drillValueLevel = oFF.QCanonicalDateUtil.getHierarchyLevelFromEntityValue(queryModel, timeDimension, timeDimension.getHierarchyName(), drillValue);
					if (oFF.notNull(drillValueLevel))
					{
						let drillValueLevelTypeWithOffset = this.getHierarchyLevelWithOffset(timeHierarchy, drillValueLevel, 1);
						if (oFF.notNull(drillValueLevelTypeWithOffset))
						{
							expandedLevelTypes.add(drillValueLevelTypeWithOffset);
						}
						else
						{
							expandedLevelTypes.add(drillValueLevel);
						}
					}
				}
			}
		}
	}
	return expandedLevelTypes;
};
oFF.QDrillManager.prototype.getZoomAwareDrillOperationsForDimension = function(dimension)
{
	let initialDrillOperationList = this.getDrillOperationsForInAData();
	let resultList = oFF.XList.create();
	for (let i = 0; i < initialDrillOperationList.size(); i++)
	{
		let currentDrillOperation = initialDrillOperationList.get(i);
		if (currentDrillOperation.getType() === oFF.DrillOperationType.CONTEXT && currentDrillOperation.getTargetDimension() === dimension)
		{
			resultList.add(currentDrillOperation);
		}
	}
	return resultList;
};
oFF.QDrillManager.prototype.getZoomDataFilterRoot = function()
{
	return this.getQueryModel().getFilter().getZoomDataFilter();
};
oFF.QDrillManager.prototype.getZoomDrillOperations = function()
{
	return this.m_stackDrillOperations;
};
oFF.QDrillManager.prototype.hasStickyMemberByDimension = function(dimension, memberName)
{
	let dimName = dimension.getName();
	return oFF.XCollectionUtils.hasElements(this.m_stickyMembersByDimension.getByKey(dimName)) && this.m_stickyMembersByDimension.getByKey(dimName).contains(memberName);
};
oFF.QDrillManager.prototype.hasStickyMembers = function()
{
	return oFF.XCollectionUtils.hasElements(this.m_stickyMembersByDimension);
};
oFF.QDrillManager.prototype.hasStickyMembersByDimension = function(dimension)
{
	return oFF.XCollectionUtils.hasElements(this.m_stickyMembersByDimension.getByKey(dimension.getName()));
};
oFF.QDrillManager.prototype.hasZoomDrill = function(dimension)
{
	if (oFF.isNull(dimension))
	{
		return oFF.XCollectionUtils.hasElements(this.m_zoomOperationsByDimension);
	}
	return oFF.XCollectionUtils.hasElements(this.m_zoomOperationsByDimension.getByKey(dimension.getName()));
};
oFF.QDrillManager.prototype.isBackendDrillValidationForAutoSubmit = function()
{
	return this.m_backendDrillValidationForAutoSubmit;
};
oFF.QDrillManager.prototype.isDrillStateValid = function(tupleElement, drillState)
{
	let currentDrillState = tupleElement.getDrillState();
	if (currentDrillState === oFF.DrillState.LEAF)
	{
		return false;
	}
	else if (currentDrillState === oFF.DrillState.LEAF_UDH)
	{
		return drillState === oFF.DrillState.COLLAPSED;
	}
	if (drillState === oFF.DrillState.DRILLED)
	{
		if (currentDrillState === oFF.DrillState.LEAF_UDH_EXPAND_ALLOWED)
		{
			return false;
		}
		return tupleElement.getDimension().isUniversalDisplayHierarchyDimension();
	}
	else if (drillState === oFF.DrillState.EXPANDED)
	{
		return currentDrillState !== oFF.DrillState.LEAF_DRILLDOWN_ALLOWED;
	}
	return true;
};
oFF.QDrillManager.prototype.isDrivenByHierarchyNodeVariable = function(virtualRootNodeName, element)
{
	let low = oFF.isNull(element) ? null : element.getLow();
	let variable = oFF.isNull(low) ? null : low.getVariableValue();
	return oFF.notNull(variable) && variable.getVariableType().isTypeOf(oFF.VariableType.HIERARCHY_NODE_VARIABLE);
};
oFF.QDrillManager.prototype.isExplicitDrillOnFilteredNodes = function(dimension)
{
	return this.m_explicitDrillOnFilteredNodes.contains(dimension.getName());
};
oFF.QDrillManager.prototype.isHierarchyActiveForDimensionExt = function(dimension)
{
	return oFF.notNull(dimension) && (dimension.isHierarchyActive() && oFF.XStringUtils.isNotNullAndNotEmpty(dimension.getHierarchyName()) || this.getQueryManagerBase().isExecuteAutoVariableSubmit() && dimension.effectivelyUseHierarchyNameVariable() && this.getQueryModel().getVariable(dimension.getHierarchyNameVariableName()) !== null && !this.getQueryModel().getVariable(dimension.getHierarchyNameVariableName()).isEmpty());
};
oFF.QDrillManager.prototype.isIncludeCartesianElement = function(cartesianElement)
{
	return cartesianElement.getSetSign() === oFF.SetSign.INCLUDING && (cartesianElement.getComparisonOperator() === oFF.ComparisonOperator.IN || cartesianElement.getComparisonOperator() === oFF.ComparisonOperator.BETWEEN || cartesianElement.getComparisonOperator() === oFF.ComparisonOperator.EQUAL);
};
oFF.QDrillManager.prototype.isValidatingContextFreeNavigations = function()
{
	return this.m_validatesContextFree;
};
oFF.QDrillManager.prototype.isZoomDrillActiveOn = function(dimension, lowString)
{
	let zoomOperations = this.m_zoomOperationsByDimension.getByKey(dimension.getName());
	if (oFF.XCollectionUtils.hasElements(zoomOperations))
	{
		for (let k = 0; k < zoomOperations.size(); k++)
		{
			let drillPath = zoomOperations.get(k).getDrillPath();
			for (let l = 0; l < drillPath.size(); l++)
			{
				let drillPathElement = drillPath.get(l);
				if (oFF.XString.isEqual(drillPathElement.getName(), lowString))
				{
					return true;
				}
			}
		}
	}
	return false;
};
oFF.QDrillManager.prototype.onValuehelpExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	if (!extResult.hasErrors())
	{
		let data = extResult.getData();
		let nodeNameList = oFF.XList.create();
		for (let i = 0; i < data.size(); i++)
		{
			if (data.get(i).getParentNode() === null)
			{
				let nodeValue = data.get(i).getDimensionMember().getValueAsString();
				if (oFF.XStringUtils.isNotNullAndNotEmpty(nodeValue))
				{
					nodeNameList.add(nodeValue);
				}
			}
		}
		if (oFF.XCollectionUtils.hasElements(nodeNameList))
		{
			this.m_rootNodeCache.put(customIdentifier.getString(), nodeNameList);
		}
	}
};
oFF.QDrillManager.prototype.popZoomDrill = function(dimension)
{
	return this.removeZoomDrillInternal(dimension, false);
};
oFF.QDrillManager.prototype.processDeltaDrill = function(drillPath, syncType, listener, customIdentifier)
{
	let drillOperation = this.setDrillState(drillPath, oFF.DrillState.EXPANDED);
	let targetDimension = drillOperation.getTargetDimension();
	if (oFF.isNull(targetDimension))
	{
		return oFF.ExtResult.createWithErrorMessage("TargetDimension of DrillOperation is null!");
	}
	targetDimension.getHierarchyManagerBase().setHierarchyNavigationDeltaMode(true);
	let queryExecution = this.getQueryModel().getQueryManager().processQueryExecution(syncType, listener, customIdentifier);
	targetDimension.getHierarchyManagerBase().setHierarchyNavigationDeltaMode(false);
	this.notifyNodeChanged();
	return queryExecution;
};
oFF.QDrillManager.prototype.pushEmptyZoomDrillForDimension = function(dimension)
{
	let dimensionName = dimension.getName();
	if (this.m_zoomOperationsByDimension.getByKey(dimensionName) === null || oFF.XCollectionUtils.hasElements(this.m_zoomOperationsByDimension.getByKey(dimensionName)))
	{
		let drillList = oFF.XList.create();
		this.m_zoomOperationsByDimension.put(dimensionName, drillList);
		this.m_zoomDrillStack.add(drillList);
	}
};
oFF.QDrillManager.prototype.pushZoomDrill = function(drillPaths, hideRoots)
{
	let result = this.pushZoomDrillOperation(drillPaths, hideRoots);
	this.m_zoomDrillStack.add(result);
	return result;
};
oFF.QDrillManager.prototype.pushZoomDrillOperation = function(drillPaths, hideRoots)
{
	let dimensionName = null;
	let fieldName = null;
	let drillList = oFF.XList.create();
	let stackPosition = this.m_zoomDrillStack.size() + 1;
	for (let i = 0; i < drillPaths.size(); i++)
	{
		let element = drillPaths.get(i);
		if (!oFF.XCollectionUtils.hasElements(element))
		{
			throw oFF.XException.createIllegalArgumentException("invallid drill paths: empty element");
		}
		if (i === 0)
		{
			let dim = element.get(element.size() - 1).getDimension();
			dimensionName = dim.getName();
			fieldName = element.get(element.size() - 1).getFieldName();
		}
		if (!oFF.XString.isEqual(element.get(element.size() - 1).getDimension().getName(), dimensionName))
		{
			throw oFF.XException.createIllegalArgumentException("inconsistent compound drill: paths have to yield same dimension");
		}
		if (!oFF.XString.isEqual(element.get(element.size() - 1).getFieldName(), fieldName))
		{
			throw oFF.XException.createIllegalArgumentException("inconsistent compound drill: paths have to yield same field name");
		}
		drillList.add(this.addZoomDrillInternal(element, hideRoots, stackPosition));
	}
	this.m_zoomOperationsByDimension.put(dimensionName, drillList);
	return drillList;
};
oFF.QDrillManager.prototype.releaseObject = function()
{
	this.m_drillOperations = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_drillOperations);
	this.m_stackDrillOperations = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_stackDrillOperations);
	this.m_transientExplicitDrillOperations = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_transientExplicitDrillOperations);
	this.m_drillOperationsMap = oFF.XObjectExt.release(this.m_drillOperationsMap);
	this.m_zoomOperationsByDimension = oFF.XObjectExt.release(this.m_zoomOperationsByDimension);
	this.m_zoomDrillStack = oFF.XObjectExt.release(this.m_zoomDrillStack);
	this.m_explicitDrillOnFilteredNodes = oFF.XObjectExt.release(this.m_explicitDrillOnFilteredNodes);
	this.m_stickyMembersByDimension = oFF.XObjectExt.release(this.m_stickyMembersByDimension);
	this.m_rootNodeCache = oFF.XObjectExt.release(this.m_rootNodeCache);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QDrillManager.prototype.removeAllContextDrillOperations = function()
{
	for (let drillIdx = 0; drillIdx < this.m_drillOperations.size(); drillIdx++)
	{
		let iqDrillOperation = this.m_drillOperations.get(drillIdx);
		if (iqDrillOperation.getType().isEqualTo(oFF.DrillOperationType.CONTEXT))
		{
			this.removeElementByKey(iqDrillOperation.getPathUniqueName());
			drillIdx--;
		}
	}
};
oFF.QDrillManager.prototype.removeAllZoomDrillOperations = function()
{
	this.removeZoomDrillInternal(null, true);
};
oFF.QDrillManager.prototype.removeDrillOperationByDrillCounter = function(drillCounter)
{
	oFF.XStream.of(this.m_drillOperations).filter((dro) => {
		return dro.getDrillCounter() === drillCounter;
	}).forEach((mdo) => {
		this.m_drillOperations.removeElement(mdo);
	});
	oFF.XStream.ofString(this.m_zoomOperationsByDimension.getKeysAsReadOnlyList()).filter((zd) => {
		return oFF.XStream.of(this.m_zoomOperationsByDimension.getByKey(zd.getString())).anyMatch((zo) => {
			return zo.getDrillCounter() === drillCounter;
		});
	}).forEach((na) => {
		let ndim = this.getQueryModel().getDimensionByName(na.getString());
		this.removeZoomDrillOperationsByDimension(ndim);
		ndim.setInitialDrillOffset(0);
		ndim.setInitialDrillLevel(0);
	});
};
oFF.QDrillManager.prototype.removeDrillOperationsByAxisType = function(axisType)
{
	this.removeDrillOperationsByPredicate((dim) => {
		return dim.getAxisType() === axisType || dim.isUniversalDisplayHierarchyDimension() && dim.getUniversalDisplayHierarchy() !== null && dim.getUniversalDisplayHierarchy().getHierarchyDedicatedAxis() !== null && dim.getUniversalDisplayHierarchy().getHierarchyDedicatedAxis().getType() === axisType;
	});
};
oFF.QDrillManager.prototype.removeDrillOperationsByDimension = function(dimension)
{
	this.removeDrillOperationsByPredicate((dim) => {
		return dim.isEqualTo(dimension);
	});
};
oFF.QDrillManager.prototype.removeDrillOperationsByDimensionAndMemberName = function(dimensionName, memberName)
{
	let drillOperationsToRemove = oFF.XList.create();
	let drillOperations = this.getAllDrillOperations();
	let drillOpIt = drillOperations.getIterator();
	while (drillOpIt.hasNext())
	{
		let drillOperation = drillOpIt.next();
		let drillPathIt = drillOperation.getDrillPath().getIterator();
		while (drillPathIt.hasNext())
		{
			let drillPath = drillPathIt.next();
			let dimension = drillPath.getDimension();
			if (oFF.notNull(dimension))
			{
				let drillPathDimName = dimension.getName();
				let drillPathMemberName = this.getEffectiveDrillValue(drillPath);
				if (oFF.XString.isEqual(drillPathDimName, dimensionName) && oFF.XString.endsWith(drillPathMemberName, memberName))
				{
					drillOperationsToRemove.add(drillOperation.getPathUniqueName());
					break;
				}
			}
		}
	}
	oFF.XCollectionUtils.forEach(drillOperationsToRemove, (key) => {
		this.removeElementByKey(key);
	});
};
oFF.QDrillManager.prototype.removeDrillOperationsByDrillCountersSilently = function(list)
{
	let size = oFF.XCollectionUtils.size(list);
	for (let i = 0; i < size; i++)
	{
		this.removeDrillOperationByDrillCounter(list.getIntegerAt(i));
	}
};
oFF.QDrillManager.prototype.removeDrillOperationsByPredicate = function(predicate)
{
	let removedOperation = false;
	let idxDrillOperation = 0;
	while (idxDrillOperation < this.m_drillOperations.size())
	{
		let drillOperation = this.m_drillOperations.get(idxDrillOperation);
		if (drillOperation.getType().isEqualTo(oFF.DrillOperationType.CONTEXT))
		{
			let drillPath = drillOperation.getDrillPath();
			let isPartOfDrillPath = false;
			let idxDrillPathElement = 0;
			let drillPathSize = drillPath.size();
			while (idxDrillPathElement < drillPathSize)
			{
				if (predicate(drillPath.get(idxDrillPathElement).getDimension()))
				{
					isPartOfDrillPath = true;
					break;
				}
				idxDrillPathElement++;
			}
			if (isPartOfDrillPath)
			{
				removedOperation = true;
				this.removeElementByKey(drillOperation.getPathUniqueName());
			}
			else
			{
				idxDrillOperation++;
			}
		}
		else
		{
			idxDrillOperation++;
		}
	}
	if (removedOperation)
	{
		this.notifyNodeChanged();
	}
};
oFF.QDrillManager.prototype.removeElementByKey = function(uniqueName)
{
	let oldOperation = this.m_drillOperationsMap.getByKey(uniqueName);
	if (oFF.notNull(oldOperation))
	{
		this.m_drillOperations.removeElement(oldOperation);
		this.m_drillOperationsMap.remove(uniqueName);
	}
};
oFF.QDrillManager.prototype.removeInvalidDrillOperations = function(changedNode)
{
	let variableProcessorState = this.getQueryManager().getVariableProcessorState();
	if (!this.isBackendDrillValidationForAutoSubmit() || !(variableProcessorState.isTypeOf(oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT) || variableProcessorState.isTypeOf(oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT_AFTER_REINIT)))
	{
		this.removeInvalidDrillOperationsInternal(changedNode, this.m_drillOperations, false);
		let zoomedDimensionNames = this.m_zoomOperationsByDimension.getKeysAsReadOnlyList();
		for (let zoomedDimensionIndex = 0; zoomedDimensionIndex < zoomedDimensionNames.size(); zoomedDimensionIndex++)
		{
			let dimensionName = zoomedDimensionNames.get(zoomedDimensionIndex);
			let zoomOperations = this.m_zoomOperationsByDimension.getByKey(dimensionName);
			let removed = this.removeInvalidDrillOperationsInternal(changedNode, zoomOperations, true);
			if (removed)
			{
				this.removeZoomDrillOperationsByDimension(this.getQueryModel().getDimensionByName(dimensionName));
			}
		}
	}
};
oFF.QDrillManager.prototype.removeInvalidDrillOperationsInternal = function(changedNode, drillOperations, isZoomOperation)
{
	for (let idxDrillOperation = 0; idxDrillOperation < drillOperations.size(); )
	{
		let doRemove = false;
		let drillOperation = drillOperations.get(idxDrillOperation);
		if (drillOperation.getType().isEqualTo(oFF.DrillOperationType.CONTEXT))
		{
			let drillPath = drillOperation.getDrillPath();
			for (let idxDrillPath = 0; idxDrillPath < drillPath.size(); idxDrillPath++)
			{
				let drillPathElement = drillPath.get(idxDrillPath);
				let dimension = drillPathElement.getDimension();
				if (oFF.isNull(dimension))
				{
					if (!drillOperation.getDrillState().isOnlyForUdh())
					{
						doRemove = true;
					}
					break;
				}
				let udh = this.getQueryModel().getUniversalDisplayHierarchies().getByName(dimension.getName());
				if (oFF.notNull(udh))
				{
					if (!udh.isActive() || changedNode === udh || this.udhDimensionsChanged(udh))
					{
						doRemove = true;
					}
					break;
				}
				if (dimension.getAxisType() === oFF.AxisType.FREE)
				{
					doRemove = true;
					break;
				}
				if (!this.isValidatingContextFreeNavigations() && drillPath.size() < 2)
				{
					break;
				}
				if (dimension.getIndexOnAxis() !== idxDrillPath)
				{
					doRemove = true;
					break;
				}
				let selectedHierarchyName = drillPathElement.getSelectHierarchyName();
				let hierarchyName = dimension.getHierarchyName();
				if (!oFF.XString.isEqual(hierarchyName, selectedHierarchyName))
				{
					doRemove = true;
					break;
				}
			}
		}
		if (doRemove)
		{
			if (isZoomOperation)
			{
				return true;
			}
			else
			{
				this.removeElementByKey(drillOperation.getPathUniqueName());
			}
		}
		else
		{
			idxDrillOperation++;
		}
	}
	return false;
};
oFF.QDrillManager.prototype.removeStickyMemberForDimension = function(dimension, memberName)
{
	let dimName = dimension.getName();
	if (this.m_stickyMembersByDimension.containsKey(dimName))
	{
		this.m_stickyMembersByDimension.getByKey(dimName).removeElement(memberName);
	}
};
oFF.QDrillManager.prototype.removeZoomDrillInternal = function(dimension, all)
{
	let curElement;
	let dimensionName = null;
	let i = this.m_zoomDrillStack.size() - 1;
	for (; i > -1; i--)
	{
		let popElements = this.m_zoomDrillStack.get(i);
		if (!oFF.XCollectionUtils.hasElements(popElements))
		{
			this.m_zoomDrillStack.removeAt(i);
			continue;
		}
		curElement = popElements.get(0);
		dimensionName = curElement.getTargetDimension().getName();
		if (oFF.isNull(dimension) || oFF.XString.isEqual(dimension.getName(), dimensionName))
		{
			this.m_zoomDrillStack.removeAt(i);
			for (let j = 0; j < popElements.size(); j++)
			{
				this.m_stackDrillOperations.removeElement(popElements.get(j));
			}
			if (this.m_zoomOperationsByDimension.containsKey(dimensionName))
			{
				this.m_zoomOperationsByDimension.remove(dimensionName);
			}
			if (!all)
			{
				break;
			}
		}
	}
	if (oFF.isNull(dimensionName))
	{
		return false;
	}
	i--;
	for (; i > -1; i--)
	{
		let pushElements = this.m_zoomDrillStack.get(i);
		if (!oFF.XCollectionUtils.hasElements(pushElements))
		{
			this.m_zoomDrillStack.removeAt(i);
			continue;
		}
		curElement = pushElements.get(0);
		if (oFF.XString.isEqual(dimensionName, curElement.getTargetDimension().getName()))
		{
			this.m_zoomOperationsByDimension.put(dimensionName, pushElements);
			break;
		}
	}
	this.notifyNodeChanged();
	return true;
};
oFF.QDrillManager.prototype.removeZoomDrillOperation = function(zoomDrillOperation)
{
	if (oFF.isNull(zoomDrillOperation) || zoomDrillOperation.getTargetDimension() === null || this.m_zoomOperationsByDimension.getByKey(zoomDrillOperation.getTargetDimension().getName()) === null)
	{
		return false;
	}
	let drillList = this.m_zoomOperationsByDimension.getByKey(zoomDrillOperation.getTargetDimension().getName());
	for (let i = 0; i < drillList.size(); i++)
	{
		let foundZoomDrillOperation = drillList.get(i);
		if (oFF.XString.isEqual(foundZoomDrillOperation.getPathUniqueName(), zoomDrillOperation.getPathUniqueName()))
		{
			this.m_stackDrillOperations.removeElement(foundZoomDrillOperation);
			drillList.removeAt(i);
			return true;
		}
	}
	return false;
};
oFF.QDrillManager.prototype.removeZoomDrillOperationsByDimension = function(dimension)
{
	this.removeZoomDrillInternal(dimension, true);
};
oFF.QDrillManager.prototype.setBackendDrillValidationForAutoSubmit = function(drillValidation)
{
	this.m_backendDrillValidationForAutoSubmit = drillValidation;
};
oFF.QDrillManager.prototype.setDrillState = function(drillPath, drillState)
{
	let newOperation = oFF.QDrillOperation.create(this.getContext(), this, oFF.DrillOperationType.CONTEXT, null, drillState, 1, 0, drillPath, this.m_drillCounter, -1);
	return this.addOperationInternal(newOperation);
};
oFF.QDrillManager.prototype.setDrillStateElement = function(drillElement, drillState)
{
	let drillPath = oFF.XList.create();
	drillPath.add(drillElement);
	let newOperation = oFF.QDrillOperation.create(this.getContext(), this, oFF.DrillOperationType.CONTEXT, null, drillState, 1, 0, drillPath, this.m_drillCounter, -1);
	return this.addOperationInternal(newOperation);
};
oFF.QDrillManager.prototype.setExplicitDrillOnFilteredNodes = function(dimension, explicit)
{
	if (explicit === this.isExplicitDrillOnFilteredNodes(dimension))
	{
		return;
	}
	if (explicit)
	{
		this.m_explicitDrillOnFilteredNodes.add(dimension.getName());
	}
	else
	{
		this.m_explicitDrillOnFilteredNodes.removeElement(dimension.getName());
	}
	this.notifyNodeChanged();
};
oFF.QDrillManager.prototype.setRootExpandingLevels = function(dimension, relativeLevelCount)
{
	let oldOperation = this.getRootExpandingLevels(dimension);
	let offset = 0;
	if (oFF.notNull(oldOperation))
	{
		offset = oldOperation.getRelativeLevelOffset();
	}
	let newOperation = oFF.QDrillOperation.create(this.getContext(), this, oFF.DrillOperationType.ROOT, dimension, oFF.DrillState.EXPANDED, relativeLevelCount, offset, null, this.m_drillCounter, -1);
	return this.addOperationInternal(newOperation);
};
oFF.QDrillManager.prototype.setRootOffsetLevels = function(dimension, relativeLevelOffset)
{
	let oldOperation = this.getRootExpandingLevels(dimension);
	if (oFF.notNull(oldOperation))
	{
		oldOperation.setRelativeLevelOffset(relativeLevelOffset);
		this.notifyNodeChanged();
		return oldOperation;
	}
	let newOperation = oFF.QDrillOperation.create(this.getContext(), this, oFF.DrillOperationType.ROOT, dimension, oFF.DrillState.EXPANDED, -1, relativeLevelOffset, null, this.m_drillCounter, -1);
	return this.addOperationInternal(newOperation);
};
oFF.QDrillManager.prototype.setSupportsDrillCounter = function(supportsDrillCounter)
{
	this.m_supportsDrillCounter = supportsDrillCounter;
};
oFF.QDrillManager.prototype.setValidateContextFreeNavigations = function(isValidating)
{
	this.m_validatesContextFree = isValidating;
};
oFF.QDrillManager.prototype.setupDrillManager = function(context, queryModel)
{
	this.setupModelComponent(context, queryModel);
	this.m_drillOperations = oFF.QModelComponentList.createModelComponentList(context, this, true, "Drill Operations");
	this.m_transientExplicitDrillOperations = oFF.QModelComponentList.createModelComponentList(context, null, true, "Drill Operations on explicitly filtered Nodes");
	this.m_stackDrillOperations = oFF.QModelComponentList.createModelComponentList(context, this, true, "Drill Operations put on zoom drill stack");
	this.m_drillOperationsMap = oFF.XHashMapByString.create();
	this.m_zoomDrillStack = oFF.XList.create();
	this.m_zoomOperationsByDimension = oFF.XHashMapByString.create();
	this.m_explicitDrillOnFilteredNodes = oFF.XHashSetOfString.create();
	this.m_validatesContextFree = true;
	this.m_stickyMembersByDimension = oFF.XHashMapByString.create();
	this.m_rootNodeCache = oFF.XHashMapByString.create();
};
oFF.QDrillManager.prototype.supportsComplexZoomDrill = function()
{
	return this.getModelCapabilities().supportsVisibilityFilter() || this.getModelCapabilities().supportsComplexTupleFilter();
};
oFF.QDrillManager.prototype.supportsDrillCounter = function()
{
	return this.m_supportsDrillCounter;
};
oFF.QDrillManager.prototype.udhDimensionsChanged = function(udh)
{
	if (this.getModelCapabilities().supportsUniversalDisplayHierarchiesCustomDimensions() && udh.hasCustomDimensions())
	{
		return false;
	}
	let udhDimensions = udh.getDimensionNames();
	if (!oFF.XCollectionUtils.hasElements(udhDimensions))
	{
		return false;
	}
	let queryModel = this.getQueryModel();
	let rowsAxis = queryModel.getRowsAxis();
	let columnsAxis = queryModel.getColumnsAxis();
	return !rowsAxis.getDimensionNames().isEqualTo(udhDimensions) && !columnsAxis.getDimensionNames().isEqualTo(udhDimensions);
};

oFF.QDrillPathElement = function() {};
oFF.QDrillPathElement.prototype = new oFF.QModelComponent();
oFF.QDrillPathElement.prototype._ff_c = "QDrillPathElement";

oFF.QDrillPathElement._create = function(context)
{
	let object = new oFF.QDrillPathElement();
	object.setupModelComponent(context, null);
	return object;
};
oFF.QDrillPathElement.prototype.m_dimension = null;
oFF.QDrillPathElement.prototype.m_fieldName = null;
oFF.QDrillPathElement.prototype.m_hierarchyName = null;
oFF.QDrillPathElement.prototype.m_shadowKeyFieldName = null;
oFF.QDrillPathElement.prototype.m_shadowKeyFieldValue = null;
oFF.QDrillPathElement.prototype.m_zoomKeyFieldName = null;
oFF.QDrillPathElement.prototype.m_zoomKeyFieldValue = null;
oFF.QDrillPathElement.prototype.cloneOlapComponent = function(context, parent)
{
	let clone = oFF.QDrillPathElement._create(context);
	clone.copyFrom(this, null);
	clone.m_dimension = this.m_dimension;
	clone.m_hierarchyName = this.m_hierarchyName;
	clone.m_fieldName = this.m_fieldName;
	clone.m_shadowKeyFieldName = this.m_shadowKeyFieldName;
	clone.m_shadowKeyFieldValue = this.m_shadowKeyFieldValue;
	clone.m_zoomKeyFieldName = this.m_zoomKeyFieldName;
	clone.m_zoomKeyFieldValue = this.m_zoomKeyFieldValue;
	return clone;
};
oFF.QDrillPathElement.prototype.getDimension = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_dimension);
};
oFF.QDrillPathElement.prototype.getEffectiveZoomInstruction = function()
{
	let dimension = this.getDimension();
	let field = null;
	let value = null;
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_zoomKeyFieldValue) && oFF.XStringUtils.isNotNullAndNotEmpty(this.m_zoomKeyFieldName))
	{
		field = dimension.getFieldByName(this.m_zoomKeyFieldName);
		value = this.m_zoomKeyFieldValue;
	}
	else
	{
		field = dimension.getFieldByName(this.getFieldName());
		if (field.isFilterable())
		{
			value = this.getSelectValue();
		}
		else if (oFF.XStringUtils.isNotNullAndNotEmpty(this.getShadowKeyFieldName()) && oFF.XStringUtils.isNotNullAndNotEmpty(this.getShadowKeyFieldValue()))
		{
			field = dimension.getFieldByName(this.getShadowKeyFieldName());
			value = this.getShadowKeyFieldValue();
		}
	}
	return oFF.XPair.create(field, oFF.XStringValue.create(value));
};
oFF.QDrillPathElement.prototype.getFieldName = function()
{
	return this.m_fieldName;
};
oFF.QDrillPathElement.prototype.getMemberType = function()
{
	return oFF.MemberType.DRILL_PATH_ELEMENT;
};
oFF.QDrillPathElement.prototype.getNameForInAExport = function()
{
	let name = this.getName();
	let dimension = this.getDimension();
	if (oFF.notNull(name) && oFF.notNull(dimension) && oFF.notNull(this.m_fieldName) && dimension.getModelCapabilities().supportsSapDate())
	{
		let field = dimension.getFieldByName(this.m_fieldName);
		if (oFF.notNull(field))
		{
			let valueType = field.getValueType();
			let dateTimeExport = null;
			if (valueType === oFF.XValueType.DATE)
			{
				dateTimeExport = oFF.XDate.createDateSafe(name);
			}
			else if (valueType === oFF.XValueType.TIME)
			{
				dateTimeExport = oFF.XTime.createTimeSafe(name);
			}
			else if (valueType === oFF.XValueType.DATE_TIME)
			{
				dateTimeExport = oFF.XDateTime.createDateTimeSafe(name);
			}
			if (oFF.notNull(dateTimeExport))
			{
				return dateTimeExport.toSAPFormat();
			}
		}
	}
	return name;
};
oFF.QDrillPathElement.prototype.getOlapComponentType = function()
{
	return this.getMemberType();
};
oFF.QDrillPathElement.prototype.getSelectField = function()
{
	if (oFF.isNull(this.m_dimension))
	{
		return null;
	}
	return this.getDimension().getFieldByName(this.m_fieldName);
};
oFF.QDrillPathElement.prototype.getSelectHierarchyName = function()
{
	return this.m_hierarchyName;
};
oFF.QDrillPathElement.prototype.getSelectMemberType = function()
{
	return null;
};
oFF.QDrillPathElement.prototype.getSelectValue = function()
{
	return this.getName();
};
oFF.QDrillPathElement.prototype.getSelectableElement = function()
{
	return this;
};
oFF.QDrillPathElement.prototype.getShadowKeyFieldName = function()
{
	return this.m_shadowKeyFieldName;
};
oFF.QDrillPathElement.prototype.getShadowKeyFieldValue = function()
{
	return this.m_shadowKeyFieldValue;
};
oFF.QDrillPathElement.prototype.getType = function()
{
	return this.getMemberType();
};
oFF.QDrillPathElement.prototype.getZoomKeyFieldName = function()
{
	return this.m_zoomKeyFieldName;
};
oFF.QDrillPathElement.prototype.getZoomKeyFieldValue = function()
{
	return this.m_zoomKeyFieldValue;
};
oFF.QDrillPathElement.prototype.isNode = function()
{
	return this.getMemberType().isNode();
};
oFF.QDrillPathElement.prototype.releaseObject = function()
{
	this.m_dimension = oFF.XObjectExt.release(this.m_dimension);
	this.m_hierarchyName = null;
	this.m_fieldName = null;
	this.m_shadowKeyFieldValue = null;
	this.m_shadowKeyFieldName = null;
	this.m_zoomKeyFieldName = null;
	this.m_zoomKeyFieldValue = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QDrillPathElement.prototype.setDimension = function(dimension)
{
	this.m_dimension = oFF.XWeakReferenceUtil.getWeakRef(dimension);
	if (oFF.notNull(dimension))
	{
		this.m_hierarchyName = dimension.getHierarchyName();
		if (this.getFieldName() === null && dimension.getKeyField() !== null)
		{
			this.setFieldName(dimension.getKeyField().getName());
		}
	}
};
oFF.QDrillPathElement.prototype.setFieldName = function(fieldName)
{
	this.m_fieldName = fieldName;
};
oFF.QDrillPathElement.prototype.setShadowKeyFieldName = function(shadowKeyFieldName)
{
	this.m_shadowKeyFieldName = shadowKeyFieldName;
};
oFF.QDrillPathElement.prototype.setShadowKeyFieldValue = function(shadowKeyFieldValue)
{
	this.m_shadowKeyFieldValue = shadowKeyFieldValue;
};
oFF.QDrillPathElement.prototype.setZoomKeyFieldName = function(zoomKeyFieldName)
{
	this.m_zoomKeyFieldName = zoomKeyFieldName;
};
oFF.QDrillPathElement.prototype.setZoomKeyFieldValue = function(zoomKeyFieldValue)
{
	this.m_zoomKeyFieldValue = zoomKeyFieldValue;
};

oFF.QAbstractThresholdEvaluateList = function() {};
oFF.QAbstractThresholdEvaluateList.prototype = new oFF.QModelComponent();
oFF.QAbstractThresholdEvaluateList.prototype._ff_c = "QAbstractThresholdEvaluateList";

oFF.QAbstractThresholdEvaluateList.prototype.m_evaluates = null;
oFF.QAbstractThresholdEvaluateList.prototype.m_thresholds = null;
oFF.QAbstractThresholdEvaluateList.prototype._addNewEvaluateWithFieldInternal = function(field, lowValue)
{
	let evaluate = this.newEvaluateWithField(field, lowValue);
	this.m_evaluates.addInternal(evaluate);
	return evaluate;
};
oFF.QAbstractThresholdEvaluateList.prototype._addNewThresholdInternal = function(lowValue, alertLevel)
{
	let threshold = this.newThreshold(lowValue, alertLevel);
	this.m_thresholds.addInternal(threshold);
	return threshold;
};
oFF.QAbstractThresholdEvaluateList.prototype._addNewThresholdWithStringInternal = function(lowValue, alertLevel)
{
	let threshold = this.newThresholdWithString(lowValue, alertLevel);
	this.m_thresholds.addInternal(threshold);
	return threshold;
};
oFF.QAbstractThresholdEvaluateList.prototype.addEvaluate = function(evaluate)
{
	this.insertEvaluate(this.m_evaluates.size(), evaluate);
};
oFF.QAbstractThresholdEvaluateList.prototype.addNewEvaluate = function(dimension, lowValue)
{
	let evaluate = this.newEvaluate(dimension, lowValue);
	this.insertEvaluate(this.m_evaluates.size(), evaluate);
	return evaluate;
};
oFF.QAbstractThresholdEvaluateList.prototype.addNewEvaluateWithField = function(field, lowValue)
{
	let evaluate = this.newEvaluateWithField(field, lowValue);
	this.insertEvaluate(this.m_evaluates.size(), evaluate);
	return evaluate;
};
oFF.QAbstractThresholdEvaluateList.prototype.addNewThreshold = function(lowValue, alertLevel)
{
	let threshold = this.newThreshold(lowValue, alertLevel);
	this.insertThreshold(this.m_thresholds.size(), threshold);
	return threshold;
};
oFF.QAbstractThresholdEvaluateList.prototype.addNewThresholdWithString = function(lowValue, alertLevel)
{
	let threshold = this.newThresholdWithString(lowValue, alertLevel);
	this.insertThreshold(this.m_thresholds.size(), threshold);
	return threshold;
};
oFF.QAbstractThresholdEvaluateList.prototype.addThreshold = function(threshold)
{
	this.insertThreshold(this.m_thresholds.size(), threshold);
};
oFF.QAbstractThresholdEvaluateList.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originObj = other;
	let i;
	let size;
	if (oFF.XCollectionUtils.hasElements(originObj.m_thresholds))
	{
		this.removeAllThresholds();
		size = originObj.m_thresholds.size();
		for (i = 0; i < size; i++)
		{
			let originThreshold = originObj.m_thresholds.get(i);
			let cloneThreshold = this._addNewThresholdInternal(0, originThreshold.getAlertLevel());
			cloneThreshold.copyThreshold(originThreshold);
		}
		this.m_thresholds.copyFrom(originObj.m_thresholds, flags);
	}
	let queryModel = this.getQueryModel();
	if (oFF.notNull(originObj.m_evaluates))
	{
		this.removeAllEvaluates();
		size = originObj.m_evaluates.size();
		for (i = 0; i < size; i++)
		{
			let originEvaluate = originObj.m_evaluates.get(i);
			let dimensionName = originEvaluate.getDimension().getName();
			let dimension = queryModel.getDimensionByNameFromExistingMetadata(dimensionName);
			if (oFF.isNull(dimension) && queryModel.isBlendingModel())
			{
				let aliasDimensionName = oFF.XStringUtils.concatenate3(oFF.BlendingUtils.getQueryAliasName(originEvaluate.getDimension().getQueryManager()), ".", dimensionName);
				dimension = queryModel.getDimensionByNameFromExistingMetadata(aliasDimensionName);
			}
			if (oFF.notNull(dimension))
			{
				let originLowValue = originEvaluate.getLowValue();
				let cloneEvaluate = oFF.QEvaluate.createEvaluate(dimension, oFF.notNull(originLowValue) && originLowValue.getValue() !== null ? originLowValue.getValue().clone() : null, this);
				cloneEvaluate.copyEvaluate(originEvaluate);
				this.addEvaluate(cloneEvaluate);
			}
		}
		this.m_evaluates.copyFrom(originObj.m_evaluates, flags);
	}
};
oFF.QAbstractThresholdEvaluateList.prototype.getEvaluates = function()
{
	if (oFF.isNull(this.m_evaluates))
	{
		return oFF.XList.create();
	}
	return this.m_evaluates;
};
oFF.QAbstractThresholdEvaluateList.prototype.getThresholds = function()
{
	return this.m_thresholds;
};
oFF.QAbstractThresholdEvaluateList.prototype.insertEvaluate = function(index, evaluate)
{
	this.assertIsChangeable();
	oFF.XObjectExt.assertNotNullExt(evaluate, "The evaluate is null.");
	if (evaluate.getException() !== this)
	{
		throw oFF.XException.createIllegalArgumentException("The evaluate was created by another exception and can't be bound to this one.");
	}
	if (index >= this.m_evaluates.size())
	{
		this.m_evaluates.add(evaluate);
	}
	else if (index >= 0)
	{
		this.m_evaluates.set(index, evaluate);
	}
	else
	{
		this.m_evaluates.insert(0, evaluate);
	}
};
oFF.QAbstractThresholdEvaluateList.prototype.insertThreshold = function(index, threshold)
{
	this.assertIsChangeable();
	oFF.XObjectExt.assertNotNullExt(threshold, "The threshold is null.");
	if (threshold.getException() !== this)
	{
		throw oFF.XException.createIllegalArgumentException("The threshold was created by another exception and can't be bound to this one.");
	}
	if (index >= this.m_thresholds.size())
	{
		this.m_thresholds.add(threshold);
	}
	else if (index >= 0)
	{
		this.m_thresholds.set(index, threshold);
	}
	else
	{
		this.m_thresholds.insert(0, threshold);
	}
};
oFF.QAbstractThresholdEvaluateList.prototype.newEvaluate = function(dimension, lowValue)
{
	oFF.XObjectExt.assertNotNullExt(dimension, "The dimension is null.");
	let lowValueActual = oFF.isNull(lowValue) ? null : oFF.XValueUtil.convertValueStrict(lowValue, dimension.getKeyField().getValueType());
	return oFF.QEvaluate.createEvaluate(dimension, lowValueActual, this);
};
oFF.QAbstractThresholdEvaluateList.prototype.newEvaluateWithField = function(field, lowValue)
{
	oFF.XObjectExt.assertNotNullExt(field, "The field is null.");
	let lowValueActual = oFF.isNull(lowValue) ? null : oFF.XValueUtil.convertValueStrict(lowValue, field.getValueType());
	return oFF.QEvaluate.createEvaluateWithField(field, lowValueActual, this);
};
oFF.QAbstractThresholdEvaluateList.prototype.newThreshold = function(lowValue, alertLevel)
{
	return oFF.QThreshold.createThreshold(this.getContext(), lowValue, alertLevel, this);
};
oFF.QAbstractThresholdEvaluateList.prototype.newThresholdWithString = function(lowValue, alertLevel)
{
	return oFF.QThreshold.createThresholdWithString(this.getContext(), lowValue, alertLevel, this);
};
oFF.QAbstractThresholdEvaluateList.prototype.releaseObject = function()
{
	this.m_thresholds = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_thresholds);
	this.m_evaluates = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_evaluates);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QAbstractThresholdEvaluateList.prototype.removeAllEvaluates = function()
{
	this.m_evaluates.clear();
};
oFF.QAbstractThresholdEvaluateList.prototype.removeAllThresholds = function()
{
	this.m_thresholds.clear();
};
oFF.QAbstractThresholdEvaluateList.prototype.removeEvaluateAt = function(index)
{
	this.m_evaluates.removeAt(index);
};
oFF.QAbstractThresholdEvaluateList.prototype.removeThresholdAt = function(index)
{
	this.m_thresholds.removeAt(index);
};
oFF.QAbstractThresholdEvaluateList.prototype.setupThresholdEvaluateList = function(context)
{
	this.m_thresholds = oFF.QModelComponentList.createModelComponentList(context, this, true, "Thresholds");
	this.m_evaluates = oFF.QModelComponentList.createModelComponentList(context, this, true, "Evaluates");
};

oFF.QEvaluate = function() {};
oFF.QEvaluate.prototype = new oFF.QModelComponent();
oFF.QEvaluate.prototype._ff_c = "QEvaluate";

oFF.QEvaluate.createEvaluate = function(dimension, lowValue, exception)
{
	if (oFF.isNull(dimension) || oFF.isNull(exception))
	{
		return null;
	}
	let evaluate = new oFF.QEvaluate();
	evaluate.setupModelComponent(exception.getContext(), exception.getEvaluates());
	evaluate.setField(dimension.getKeyField());
	evaluate.setupEvaluate(lowValue, exception);
	return evaluate;
};
oFF.QEvaluate.createEvaluateWithField = function(field, lowValue, exception)
{
	if (oFF.isNull(field) || oFF.isNull(exception))
	{
		return null;
	}
	let evaluate = new oFF.QEvaluate();
	evaluate.setupModelComponent(exception.getContext(), exception.getEvaluates());
	evaluate.setField(field);
	evaluate.setupEvaluate(lowValue, exception);
	return evaluate;
};
oFF.QEvaluate.prototype.m_evaluate = null;
oFF.QEvaluate.prototype.m_field = null;
oFF.QEvaluate.prototype.m_highValue = null;
oFF.QEvaluate.prototype.m_lowValue = null;
oFF.QEvaluate.prototype.m_operator = null;
oFF.QEvaluate.prototype.assertExceptionChangeable = function()
{
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.INA_REPOSITORY_DELTA))
	{
		this.getException().assertIsChangeable();
	}
};
oFF.QEvaluate.prototype.copyEvaluate = function(origin)
{
	oFF.QModelComponent.prototype.copyFrom.call( this , origin, null);
	let field = this.getField().getDimension().getFieldByName(origin.getField().getName());
	if (oFF.notNull(field))
	{
		this.setField(field);
	}
	this.m_operator = origin.m_operator;
	this.m_evaluate = origin.m_evaluate;
	if (oFF.notNull(origin.m_highValue) && origin.m_highValue.getValue() !== null)
	{
		this.setHighValue(origin.m_highValue.getValue().clone());
	}
};
oFF.QEvaluate.prototype.getDimension = function()
{
	return this.getField().getDimension();
};
oFF.QEvaluate.prototype.getEvaluate = function()
{
	return this.m_evaluate;
};
oFF.QEvaluate.prototype.getException = function()
{
	return this.getParent();
};
oFF.QEvaluate.prototype.getField = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_field);
};
oFF.QEvaluate.prototype.getHighValue = function()
{
	if (oFF.isNull(this.m_highValue))
	{
		this.m_highValue = oFF.XValueAccess.create();
	}
	return this.m_highValue;
};
oFF.QEvaluate.prototype.getLowValue = function()
{
	return this.m_lowValue;
};
oFF.QEvaluate.prototype.getOperator = function()
{
	return this.m_operator;
};
oFF.QEvaluate.prototype.getParent = function()
{
	let listOfEvaluates = oFF.QModelComponent.prototype.getParent.call( this );
	return oFF.notNull(listOfEvaluates) ? listOfEvaluates.getParent() : null;
};
oFF.QEvaluate.prototype.getValueType = function()
{
	return this.getField().getValueType();
};
oFF.QEvaluate.prototype.releaseObject = function()
{
	this.m_operator = null;
	this.m_lowValue = oFF.XObjectExt.release(this.m_lowValue);
	this.m_highValue = oFF.XObjectExt.release(this.m_highValue);
	this.m_evaluate = null;
	this.m_field = oFF.XObjectExt.release(this.m_field);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QEvaluate.prototype.setDimension = function(dimension)
{
	oFF.XObjectExt.assertNotNullExt(dimension, "The dimension is null.");
	this.setField(dimension.getKeyField());
};
oFF.QEvaluate.prototype.setEvaluate = function(evaluate)
{
	this.assertExceptionChangeable();
	this.m_evaluate = evaluate;
	this.notifyNodeChanged();
};
oFF.QEvaluate.prototype.setField = function(field)
{
	this.assertExceptionChangeable();
	oFF.XObjectExt.assertNotNullExt(field, "The field is null.");
	this.m_field = oFF.XWeakReferenceUtil.getWeakRef(field);
	this.notifyNodeChanged();
};
oFF.QEvaluate.prototype.setHighValue = function(highValue)
{
	this.setXValue(highValue, this.getHighValue());
};
oFF.QEvaluate.prototype.setIntervall = function(lowValue, highValue)
{
	if (!lowValue.getValueType().isEqualTo(highValue.getValueType()))
	{
		throw oFF.XException.createIllegalArgumentException("Value type of low value and high value differ.");
	}
	this.queueEventing();
	this.setLowValue(lowValue);
	this.setHighValue(highValue);
	this.resumeEventing();
};
oFF.QEvaluate.prototype.setLowValue = function(lowValue)
{
	this.setXValue(oFF.XValueUtil.convertValueStrict(lowValue, this.getValueType()), this.m_lowValue);
};
oFF.QEvaluate.prototype.setOperator = function(comparisonOperator)
{
	this.assertExceptionChangeable();
	if (this.m_operator !== comparisonOperator)
	{
		this.m_operator = comparisonOperator;
		this.notifyNodeChanged();
	}
};
oFF.QEvaluate.prototype.setXValue = function(valueOrigin, mValueAccess)
{
	if (oFF.isNull(valueOrigin))
	{
		return;
	}
	this.assertExceptionChangeable();
	let valueType = this.getValueType();
	let value = oFF.XValueUtil.convertValueStrict(valueOrigin, valueType);
	if (valueType === oFF.XValueType.INTEGER)
	{
		mValueAccess.setInteger(value.getInteger());
	}
	else if (valueType === oFF.XValueType.STRING)
	{
		mValueAccess.setString(value.getString());
	}
	else if (valueType === oFF.XValueType.DOUBLE)
	{
		mValueAccess.setDouble(value.getDouble());
	}
	else if (valueType === oFF.XValueType.DECIMAL_FLOAT)
	{
		mValueAccess.setDecFloat(value);
	}
	else if (valueType === oFF.XValueType.BOOLEAN)
	{
		mValueAccess.setBoolean(value.getBoolean());
	}
	else if (valueType === oFF.XValueType.DATE)
	{
		mValueAccess.setDate(value);
	}
	else if (valueType === oFF.XValueType.TIME)
	{
		mValueAccess.setTime(value);
	}
	else if (valueType === oFF.XValueType.DATE_TIME)
	{
		mValueAccess.setDateTime(value);
	}
	else if (valueType === oFF.XValueType.TIMESPAN)
	{
		mValueAccess.setTimeSpan(value);
	}
	else if (valueType === oFF.XValueType.LONG)
	{
		mValueAccess.setLong(value.getLong());
	}
	else
	{
		let message = oFF.XStringBuffer.create();
		message.append("Value type of Evaluate is not supported. Expected '").append(valueType.getName()).append("'!");
		throw oFF.XException.createIllegalArgumentException(message.toString());
	}
	this.notifyNodeChanged();
};
oFF.QEvaluate.prototype.setupEvaluate = function(lowValue, exception)
{
	this.m_operator = oFF.ComparisonOperator.EQUAL;
	this.m_lowValue = oFF.XValueAccess.create();
	this.setLowValue(lowValue);
	this.m_evaluate = oFF.QExceptionEvalType.ALL;
};

oFF.QSettings = function() {};
oFF.QSettings.prototype = new oFF.QModelComponent();
oFF.QSettings.prototype._ff_c = "QSettings";

oFF.QSettings.createSetting = function(context, name, priority, threshold)
{
	if (oFF.isNull(threshold) || !threshold.getModelCapabilities().supportsExceptionSettings())
	{
		return null;
	}
	let setting = new oFF.QSettings();
	setting.setName(name);
	setting.setupSetting(context, priority, threshold);
	return setting;
};
oFF.QSettings.createSettingWithConstant = function(context, exceptionSetting, priority, threshold)
{
	if (oFF.isNull(threshold))
	{
		return null;
	}
	let setting = new oFF.QSettings();
	setting.setName(exceptionSetting.getName());
	setting.setupSetting(context, priority, threshold);
	return setting;
};
oFF.QSettings.prototype.m_priority = 0;
oFF.QSettings.prototype.m_setting = null;
oFF.QSettings.prototype.m_value = null;
oFF.QSettings.prototype.compareTo = function(objectToCompare)
{
	if (oFF.isNull(objectToCompare))
	{
		return 1;
	}
	let otherSetting = objectToCompare;
	if (!oFF.XString.isEqual(this.getName(), otherSetting.getName()))
	{
		return oFF.XString.compare(this.getName(), otherSetting.getName());
	}
	if (!oFF.XString.isEqual(this.getValue(), otherSetting.getValue()))
	{
		return oFF.XString.compare(this.getValue(), otherSetting.getValue());
	}
	if (this.getPriority() !== otherSetting.getPriority())
	{
		return this.getPriority() - otherSetting.getPriority();
	}
	return 0;
};
oFF.QSettings.prototype.getPriority = function()
{
	return this.m_priority;
};
oFF.QSettings.prototype.getSetting = function()
{
	return this.m_setting;
};
oFF.QSettings.prototype.getValue = function()
{
	return this.m_value;
};
oFF.QSettings.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let otherSetting = other;
	if (!oFF.XString.isEqual(this.getName(), otherSetting.getName()))
	{
		return false;
	}
	if (!oFF.XString.isEqual(this.getValue(), otherSetting.getValue()))
	{
		return false;
	}
	if (this.getPriority() !== otherSetting.getPriority())
	{
		return false;
	}
	return true;
};
oFF.QSettings.prototype.releaseObject = function()
{
	this.m_setting = null;
	this.m_value = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QSettings.prototype.setPriority = function(priority)
{
	let oldValue = this.m_priority;
	this.m_priority = priority;
	this.notifyPropertyIntegerChanged(oFF.QExceptionProperties.QY_PRIORITY, oldValue, priority);
};
oFF.QSettings.prototype.setSetting = function(setting)
{
	oFF.XObjectExt.assertNotNullExt(setting, "The ExceptionSetting must not be null.");
	this.m_setting = setting;
	this.setName(setting.getName());
	this.notifyNodeChanged();
};
oFF.QSettings.prototype.setValue = function(value)
{
	this.m_value = value;
	this.notifyNodeChanged();
};
oFF.QSettings.prototype.setupSetting = function(context, priority, threshold)
{
	this.setupModelComponent(context, threshold);
	this.m_priority = priority;
};
oFF.QSettings.prototype.toString = function()
{
	let sb = oFF.XStringBuffer.create();
	sb.append(this.getName());
	sb.append(": ");
	sb.append(this.getValue());
	sb.append(" Prio: ");
	sb.appendInt(this.getPriority());
	return sb.toString();
};

oFF.QExceptionAggregation = function() {};
oFF.QExceptionAggregation.prototype = new oFF.QModelComponent();
oFF.QExceptionAggregation.prototype._ff_c = "QExceptionAggregation";

oFF.QExceptionAggregation._create = function(excepAggrMgr)
{
	let object = new oFF.QExceptionAggregation();
	object._setupExceptionAggregation(excepAggrMgr);
	return object;
};
oFF.QExceptionAggregation.prototype.m_aggregationType = null;
oFF.QExceptionAggregation.prototype.m_exceptionAggregationGroup = null;
oFF.QExceptionAggregation.prototype.m_usedDimensionNames = null;
oFF.QExceptionAggregation.prototype._addDimension = function(dimName)
{
	let actuallyAdded = false;
	if (this._isUsable(dimName) && !this._isUsedDimension(dimName))
	{
		this.m_usedDimensionNames.add(dimName);
		this.m_usedDimensionNames.sortByDirection(oFF.XSortDirection.ASCENDING);
		this.notifyNodeChanged();
		actuallyAdded = true;
	}
	return actuallyAdded;
};
oFF.QExceptionAggregation.prototype._clearUsedDimensions = function()
{
	this.m_usedDimensionNames.clear();
	this.notifyNodeChanged();
};
oFF.QExceptionAggregation.prototype._getAggregationType = function()
{
	return this.m_aggregationType;
};
oFF.QExceptionAggregation.prototype._getUsedDimensionNames = function()
{
	return this.m_usedDimensionNames;
};
oFF.QExceptionAggregation.prototype._isUsable = function(dimName)
{
	if (oFF.isNull(this.m_exceptionAggregationGroup))
	{
		return true;
	}
	let dimensionsMaxSize = this.m_exceptionAggregationGroup._getNumberOfAllowedDimensions();
	return dimensionsMaxSize === -1 || this.m_exceptionAggregationGroup._supportsDimension(dimName) && this.m_usedDimensionNames.size() < dimensionsMaxSize;
};
oFF.QExceptionAggregation.prototype._isUsedDimension = function(dimName)
{
	return this.m_usedDimensionNames.contains(dimName);
};
oFF.QExceptionAggregation.prototype._removeDimension = function(dimName)
{
	let removedElement = this.m_usedDimensionNames.removeElement(dimName);
	this.notifyNodeChanged();
	return removedElement;
};
oFF.QExceptionAggregation.prototype._setAggregationGroupAndValidate = function(memberType, aggrType)
{
	let excepAggrMgr = this.getParent();
	if (oFF.isNull(this.m_exceptionAggregationGroup))
	{
		this.m_exceptionAggregationGroup = oFF.QExceptionAggregationGroup._createForClone(excepAggrMgr);
	}
	let exceptionAggregationGroup = excepAggrMgr._getExceptionAggregationGroup(memberType, aggrType);
	if (oFF.notNull(exceptionAggregationGroup))
	{
		this.m_exceptionAggregationGroup.copyFrom(exceptionAggregationGroup, null);
	}
	else
	{
		this._clearUsedDimensions();
		return 4;
	}
	if (oFF.isNull(this.m_exceptionAggregationGroup))
	{
		throw oFF.XException.createIllegalArgumentException("Aggregation or Member type is not supported for exception aggregation!");
	}
	return this._validateUsedDimensions();
};
oFF.QExceptionAggregation.prototype._setAggregationType = function(memberType, aggrType)
{
	if (oFF.notNull(aggrType))
	{
		let validationCode = this._setAggregationGroupAndValidate(memberType, aggrType);
		if (validationCode === 2)
		{
			throw oFF.XException.createIllegalArgumentException("Maximum number of allowed dimensions is exceeded!");
		}
		else if (validationCode === 3)
		{
			throw oFF.XException.createIllegalArgumentException("Invalid use of dimensions with the aggregation type!");
		}
		if (validationCode === 1 && this.m_aggregationType !== aggrType)
		{
			this.m_aggregationType = aggrType;
			this.notifyNodeChanged();
		}
	}
	else if (this.m_aggregationType !== aggrType)
	{
		this.m_aggregationType = null;
		this.m_exceptionAggregationGroup = null;
		this.notifyNodeChanged();
	}
};
oFF.QExceptionAggregation.prototype._setUsedDimensionNames = function(dimensionNames)
{
	let actuallySet = false;
	let oldValue = this.m_usedDimensionNames.createListCopy();
	oldValue.sortByDirection(oFF.XSortDirection.ASCENDING);
	dimensionNames.sortByDirection(oFF.XSortDirection.ASCENDING);
	if (!oldValue.isEqualTo(dimensionNames))
	{
		this._clearUsedDimensions();
		this.m_usedDimensionNames = dimensionNames;
		actuallySet = true;
	}
	return actuallySet;
};
oFF.QExceptionAggregation.prototype._setupExceptionAggregation = function(excepAggrMgr)
{
	this.setupModelComponent(excepAggrMgr, excepAggrMgr);
	this.m_usedDimensionNames = oFF.XList.create();
};
oFF.QExceptionAggregation.prototype._validateUsedDimensions = function()
{
	let valid = 1;
	let limitExceeded = 2;
	let invalidDim = 3;
	let maxDimSize = this.m_exceptionAggregationGroup._getNumberOfAllowedDimensions();
	if (maxDimSize === -1)
	{
		return valid;
	}
	if (oFF.XCollectionUtils.hasElements(this.m_usedDimensionNames))
	{
		let dimSize = this.m_usedDimensionNames.size();
		if (dimSize > maxDimSize)
		{
			return limitExceeded;
		}
		for (let i = 0; i < dimSize; i++)
		{
			let dimName = this.m_usedDimensionNames.get(i);
			if (!this.m_exceptionAggregationGroup._supportsDimension(dimName))
			{
				return invalidDim;
			}
		}
	}
	return valid;
};
oFF.QExceptionAggregation.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originExceptionAggregation = other;
	this.m_aggregationType = originExceptionAggregation.m_aggregationType;
	this.m_usedDimensionNames.clear();
	this.m_usedDimensionNames.addAll(originExceptionAggregation.m_usedDimensionNames);
	if (oFF.isNull(originExceptionAggregation.m_exceptionAggregationGroup))
	{
		this.m_exceptionAggregationGroup = null;
	}
	else
	{
		if (oFF.isNull(this.m_exceptionAggregationGroup))
		{
			this.m_exceptionAggregationGroup = oFF.QExceptionAggregationGroup._createForClone(this.getParent());
		}
		this.m_exceptionAggregationGroup.copyFrom(originExceptionAggregation.m_exceptionAggregationGroup, flags);
	}
};
oFF.QExceptionAggregation.prototype.releaseObject = function()
{
	this.m_exceptionAggregationGroup = oFF.XObjectExt.release(this.m_exceptionAggregationGroup);
	this.m_usedDimensionNames = oFF.XObjectExt.release(this.m_usedDimensionNames);
	this.m_aggregationType = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};

oFF.QExceptionAggregationGroup = function() {};
oFF.QExceptionAggregationGroup.prototype = new oFF.QModelComponent();
oFF.QExceptionAggregationGroup.prototype._ff_c = "QExceptionAggregationGroup";

oFF.QExceptionAggregationGroup._create = function(excpAggrManager, groupName, membersCode, maxNumOfDim, dimensionsSetName, supportedAggregations)
{
	let object = new oFF.QExceptionAggregationGroup();
	object._initialSetup(excpAggrManager);
	object._setupGroupMembers(groupName, membersCode, maxNumOfDim, dimensionsSetName, supportedAggregations);
	return object;
};
oFF.QExceptionAggregationGroup._createForClone = function(excpAggrManager)
{
	let object = new oFF.QExceptionAggregationGroup();
	object._initialSetup(excpAggrManager);
	return object;
};
oFF.QExceptionAggregationGroup.prototype.m_aggregationNames = null;
oFF.QExceptionAggregationGroup.prototype.m_dimensionsSetName = null;
oFF.QExceptionAggregationGroup.prototype.m_maxNumberOfDimensions = 0;
oFF.QExceptionAggregationGroup.prototype.m_membersCode = 0;
oFF.QExceptionAggregationGroup.prototype._addAllStrings = function(source, target)
{
	if (oFF.notNull(source) && source !== target)
	{
		let list = source.getValuesAsReadOnlyList();
		let size = list.size();
		for (let i = 0; i < size; i++)
		{
			target.add(list.get(i));
		}
	}
};
oFF.QExceptionAggregationGroup.prototype._getMembersCode = function()
{
	return this.m_membersCode;
};
oFF.QExceptionAggregationGroup.prototype._getNumberOfAllowedDimensions = function()
{
	return this.m_maxNumberOfDimensions;
};
oFF.QExceptionAggregationGroup.prototype._getSupportedAggregationTypeNames = function()
{
	return this.m_aggregationNames;
};
oFF.QExceptionAggregationGroup.prototype._getSupportedDimensionSetName = function()
{
	return this.m_dimensionsSetName;
};
oFF.QExceptionAggregationGroup.prototype._getSupportedMembers = function()
{
	return oFF.MemberType.getSupportedMembersForCode(this.m_membersCode);
};
oFF.QExceptionAggregationGroup.prototype._initialSetup = function(excpAggrManager)
{
	this.setupModelComponent(excpAggrManager, excpAggrManager);
	this.m_aggregationNames = oFF.XList.create();
};
oFF.QExceptionAggregationGroup.prototype._setupGroupMembers = function(groupName, membersCode, maxNumOfDim, dimensionsSetName, supportedAggregations)
{
	this.setName(groupName);
	this.m_membersCode = membersCode;
	this.m_maxNumberOfDimensions = maxNumOfDim;
	this.m_dimensionsSetName = dimensionsSetName;
	this._addAllStrings(supportedAggregations, this.m_aggregationNames);
};
oFF.QExceptionAggregationGroup.prototype._supportsAggregationType = function(aggrType)
{
	return oFF.notNull(aggrType) && this.m_aggregationNames.contains(aggrType.getName());
};
oFF.QExceptionAggregationGroup.prototype._supportsDimension = function(dimName)
{
	return this.m_maxNumberOfDimensions === -1 || oFF.XStringUtils.isNullOrEmpty(this.m_dimensionsSetName) || this.getParent()._getSupportedDimensions(this.m_dimensionsSetName).contains(dimName);
};
oFF.QExceptionAggregationGroup.prototype._supportsMember = function(memberType)
{
	return oFF.notNull(memberType) && this._getSupportedMembers().contains(memberType);
};
oFF.QExceptionAggregationGroup.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originExceptionAggregationGroup = other;
	this.m_membersCode = originExceptionAggregationGroup.m_membersCode;
	this.m_maxNumberOfDimensions = originExceptionAggregationGroup.m_maxNumberOfDimensions;
	this.m_dimensionsSetName = originExceptionAggregationGroup.m_dimensionsSetName;
	this.m_aggregationNames.clear();
	this._addAllStrings(originExceptionAggregationGroup.m_aggregationNames, this.m_aggregationNames);
};
oFF.QExceptionAggregationGroup.prototype.releaseObject = function()
{
	this.m_dimensionsSetName = null;
	this.m_aggregationNames = oFF.XObjectExt.release(this.m_aggregationNames);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};

oFF.QExceptionAggregationManager = function() {};
oFF.QExceptionAggregationManager.prototype = new oFF.QModelComponent();
oFF.QExceptionAggregationManager.prototype._ff_c = "QExceptionAggregationManager";

oFF.QExceptionAggregationManager._create = function(queryModel)
{
	let object = new oFF.QExceptionAggregationManager();
	object._setupExceptionAggregationManager(queryModel);
	return object;
};
oFF.QExceptionAggregationManager.removeOfDimensionAggregations = function(supportedAggregationTypes)
{
	supportedAggregationTypes.removeElement(oFF.AggregationType.FIRST_OF_DIMENSION.getName());
	supportedAggregationTypes.removeElement(oFF.AggregationType.LAST_OF_DIMENSION.getName());
	supportedAggregationTypes.removeElement(oFF.AggregationType.AVERAGE_OF_DIMENSION.getName());
};
oFF.QExceptionAggregationManager.prototype.m_defaultMembersCode = 0;
oFF.QExceptionAggregationManager.prototype.m_dimensionSets = null;
oFF.QExceptionAggregationManager.prototype.m_exceptionAggregationGroups = null;
oFF.QExceptionAggregationManager.prototype._addDimensionSet = function(dimSetName, supportedDimensions)
{
	this.m_dimensionSets.put(dimSetName, supportedDimensions);
};
oFF.QExceptionAggregationManager.prototype._addExceptionAggregationGroup = function(excepAggrGroup)
{
	this.m_exceptionAggregationGroups.add(excepAggrGroup);
};
oFF.QExceptionAggregationManager.prototype._clear = function()
{
	this.m_dimensionSets.clear();
	this.m_exceptionAggregationGroups.clear();
};
oFF.QExceptionAggregationManager.prototype._copyDimensionSets = function(originDimensionSets)
{
	if (oFF.notNull(originDimensionSets))
	{
		let keys = originDimensionSets.getKeysAsReadOnlyList();
		let keysSize = keys.size();
		for (let k = 0; k < keysSize; k++)
		{
			let dimSetName = keys.get(k);
			let dimensions = oFF.XList.create();
			dimensions.addAll(originDimensionSets.getByKey(dimSetName));
			this._addDimensionSet(dimSetName, dimensions);
		}
	}
};
oFF.QExceptionAggregationManager.prototype._copyExceptionAggregationGroups = function(originGroups)
{
	if (oFF.notNull(originGroups))
	{
		let groupSize = originGroups.size();
		for (let i = 0; i < groupSize; i++)
		{
			let clonedGroup = oFF.QExceptionAggregationGroup._createForClone(this);
			clonedGroup.copyFrom(originGroups.get(i), null);
			this._addExceptionAggregationGroup(clonedGroup);
		}
	}
};
oFF.QExceptionAggregationManager.prototype._getDefaultMembersCode = function()
{
	return this.m_defaultMembersCode;
};
oFF.QExceptionAggregationManager.prototype._getDimensionSets = function()
{
	return this.m_dimensionSets;
};
oFF.QExceptionAggregationManager.prototype._getExceptionAggregationGroup = function(memberType, aggrType)
{
	if (oFF.notNull(aggrType))
	{
		if (oFF.XCollectionUtils.hasElements(this.m_exceptionAggregationGroups))
		{
			let groupsSize = this.m_exceptionAggregationGroups.size();
			for (let i = 0; i < groupsSize; i++)
			{
				let excepAggrGroup = this.m_exceptionAggregationGroups.get(i);
				if (excepAggrGroup._supportsAggregationType(aggrType) && (oFF.isNull(memberType) || excepAggrGroup._supportsMember(memberType)))
				{
					return excepAggrGroup;
				}
			}
		}
	}
	return null;
};
oFF.QExceptionAggregationManager.prototype._getExceptionAggregationGroups = function()
{
	return this.m_exceptionAggregationGroups;
};
oFF.QExceptionAggregationManager.prototype._getMaxNumberOfAllowedDimensions = function(memberType, aggrType)
{
	if (oFF.isNull(aggrType) || oFF.isNull(memberType) || !this._getSupportedAggregationTypesForMember(memberType).contains(aggrType.getName()))
	{
		return 0;
	}
	let excepAggrGroup = this._getExceptionAggregationGroup(memberType, aggrType);
	return oFF.isNull(excepAggrGroup) ? 0 : excepAggrGroup._getNumberOfAllowedDimensions();
};
oFF.QExceptionAggregationManager.prototype._getSupportedAggregationTypesForMember = function(memberType)
{
	let groupsSize = this.m_exceptionAggregationGroups.size();
	let aggrTypeList = oFF.XList.create();
	for (let i = 0; i < groupsSize; i++)
	{
		let excepAggrGroup = this.m_exceptionAggregationGroups.get(i);
		if (excepAggrGroup._supportsMember(memberType))
		{
			aggrTypeList.addAll(excepAggrGroup._getSupportedAggregationTypeNames());
		}
	}
	return aggrTypeList;
};
oFF.QExceptionAggregationManager.prototype._getSupportedDimensions = function(dimensionSetName)
{
	if (oFF.XStringUtils.isNullOrEmpty(dimensionSetName))
	{
		return oFF.XList.create();
	}
	return this.m_dimensionSets.getByKey(dimensionSetName);
};
oFF.QExceptionAggregationManager.prototype._getSupportedDimensionsForMemberAndAggregation = function(memberType, aggrType)
{
	let excepAggrGroup = this._getExceptionAggregationGroup(memberType, aggrType);
	if (oFF.isNull(memberType) || oFF.isNull(excepAggrGroup))
	{
		return oFF.XList.create();
	}
	return this._getSupportedDimensions(excepAggrGroup._getSupportedDimensionSetName());
};
oFF.QExceptionAggregationManager.prototype._getSupportedMembersForAggregationType = function(aggrType)
{
	let excepAggrGroup = this._getExceptionAggregationGroup(null, aggrType);
	return oFF.isNull(excepAggrGroup) ? oFF.XList.create() : oFF.MemberType.getSupportedMembersForCode(excepAggrGroup._getMembersCode());
};
oFF.QExceptionAggregationManager.prototype._loadBasicMeasureDefaults = function()
{
	let allAggregationNames = oFF.XList.create();
	allAggregationNames.addAll(oFF.AggregationType.getAll().getKeysAsReadOnlyList());
	if (!this.getModelCapabilities().supportsAverageCountNullZero())
	{
		allAggregationNames.removeElement(oFF.AggregationType.AVERAGE_NULL.getName());
		allAggregationNames.removeElement(oFF.AggregationType.AVERAGE_NULL_ZERO.getName());
		allAggregationNames.removeElement(oFF.AggregationType.COUNT_NULL.getName());
		allAggregationNames.removeElement(oFF.AggregationType.COUNT_NULL_ZERO.getName());
	}
	if (!this.getQueryModel().getModelCapabilities().supportsStatisticalAggregations())
	{
		this._removeStatisticalAggregations(allAggregationNames);
	}
	if (!this.getModelCapabilities().supportsAggregationsFirstLastAverageOfDimension())
	{
		oFF.QExceptionAggregationManager.removeOfDimensionAggregations(allAggregationNames);
	}
	this._addExceptionAggregationGroup(oFF.QExceptionAggregationGroup._create(this, oFF.MemberType.BASIC_MEASURE.getName(), oFF.MemberType.BASIC_MEASURE_CODE, -1, "", allAggregationNames));
};
oFF.QExceptionAggregationManager.prototype._loadFormulaDefaults = function()
{
	let allAggregationNames = oFF.XList.create();
	allAggregationNames.addAll(oFF.AggregationType.getAll().getKeysAsReadOnlyList());
	let qm = this.getQueryModel();
	let capabilities = qm.getModelCapabilities();
	if (!capabilities.supportsAverageCountNullZero())
	{
		allAggregationNames.removeElement(oFF.AggregationType.AVERAGE_NULL.getName());
		allAggregationNames.removeElement(oFF.AggregationType.AVERAGE_NULL_ZERO.getName());
		allAggregationNames.removeElement(oFF.AggregationType.COUNT_NULL.getName());
		allAggregationNames.removeElement(oFF.AggregationType.COUNT_NULL_ZERO.getName());
	}
	if (!capabilities.supportsStatisticalAggregations())
	{
		this._removeStatisticalAggregations(allAggregationNames);
	}
	if (!this.getModelCapabilities().supportsAggregationsFirstLastAverageOfDimension())
	{
		oFF.QExceptionAggregationManager.removeOfDimensionAggregations(allAggregationNames);
	}
	this._addExceptionAggregationGroup(oFF.QExceptionAggregationGroup._create(this, oFF.MemberType.FORMULA.getName(), oFF.MemberType.FORMULA_CODE, -1, "", allAggregationNames));
};
oFF.QExceptionAggregationManager.prototype._loadRestrictedMeasureDefaults = function()
{
	let allAggregationNames = oFF.XList.create();
	allAggregationNames.addAll(oFF.AggregationType.getAll().getKeysAsReadOnlyList());
	let qm = this.getQueryModel();
	let capabilities = qm.getModelCapabilities();
	if (!capabilities.supportsExceptionAggregationAvgNullSelectionMember() || !capabilities.supportsAverageCountNullZero())
	{
		allAggregationNames.removeElement(oFF.AggregationType.AVERAGE_NULL.getName());
		allAggregationNames.removeElement(oFF.AggregationType.AVERAGE_NULL_ZERO.getName());
	}
	if (!capabilities.supportsExceptionAggregationCountNullSelectionMember() || !capabilities.supportsAverageCountNullZero())
	{
		allAggregationNames.removeElement(oFF.AggregationType.COUNT_NULL.getName());
		allAggregationNames.removeElement(oFF.AggregationType.COUNT_NULL_ZERO.getName());
	}
	if (!capabilities.supportsExceptionAggregationFirstLastSelectionMember())
	{
		allAggregationNames.removeElement(oFF.AggregationType.FIRST.getName());
		allAggregationNames.removeElement(oFF.AggregationType.LAST.getName());
	}
	if (!capabilities.supportsStatisticalAggregations())
	{
		this._removeStatisticalAggregations(allAggregationNames);
	}
	if (!this.getModelCapabilities().supportsAggregationsFirstLastAverageOfDimension())
	{
		oFF.QExceptionAggregationManager.removeOfDimensionAggregations(allAggregationNames);
	}
	this._addExceptionAggregationGroup(oFF.QExceptionAggregationGroup._create(this, oFF.MemberType.RESTRICTED_MEASURE.getName(), oFF.MemberType.RESTRICTED_MEASURE_CODE, -1, "", allAggregationNames));
};
oFF.QExceptionAggregationManager.prototype._removeStatisticalAggregations = function(supportedAggregationTypes)
{
	supportedAggregationTypes.removeElement(oFF.AggregationType.MEDIAN.getName());
	supportedAggregationTypes.removeElement(oFF.AggregationType.MEDIAN_NULL.getName());
	supportedAggregationTypes.removeElement(oFF.AggregationType.MEDIAN_NULL_ZERO.getName());
	supportedAggregationTypes.removeElement(oFF.AggregationType.FIRST_QUARTILE.getName());
	supportedAggregationTypes.removeElement(oFF.AggregationType.FIRST_QUARTILE_NULL.getName());
	supportedAggregationTypes.removeElement(oFF.AggregationType.FIRST_QUARTILE_NULL_ZERO.getName());
	supportedAggregationTypes.removeElement(oFF.AggregationType.THIRD_QUARTILE.getName());
	supportedAggregationTypes.removeElement(oFF.AggregationType.THIRD_QUARTILE_NULL.getName());
	supportedAggregationTypes.removeElement(oFF.AggregationType.THIRD_QUARTILE_NULL_ZERO.getName());
	supportedAggregationTypes.removeElement(oFF.AggregationType.OUTLIERS.getName());
	supportedAggregationTypes.removeElement(oFF.AggregationType.OUTLIERS_NULL.getName());
	supportedAggregationTypes.removeElement(oFF.AggregationType.OUTLIERS_NULL_ZERO.getName());
};
oFF.QExceptionAggregationManager.prototype._setupDefaultConfigurations = function()
{
	this._loadBasicMeasureDefaults();
	this._loadRestrictedMeasureDefaults();
	this._loadFormulaDefaults();
};
oFF.QExceptionAggregationManager.prototype._setupExceptionAggregationManager = function(queryModel)
{
	this.setupModelComponent(queryModel, queryModel);
	this.m_dimensionSets = oFF.XHashMapByString.create();
	this.m_exceptionAggregationGroups = oFF.XLinkedMap.createLinkedMap();
	this.m_defaultMembersCode = oFF.MemberType.FORMULA_CODE + oFF.MemberType.RESTRICTED_MEASURE_CODE + oFF.MemberType.BASIC_MEASURE_CODE;
};
oFF.QExceptionAggregationManager.prototype._supportsAggregationType = function(aggrType)
{
	let groupsSize = this.m_exceptionAggregationGroups.size();
	let aggrTypeList = oFF.XList.create();
	for (let i = 0; i < groupsSize; i++)
	{
		let excepAggrGroup = this.m_exceptionAggregationGroups.get(i);
		aggrTypeList.addAll(excepAggrGroup._getSupportedAggregationTypeNames());
	}
	return oFF.notNull(aggrType) && aggrTypeList.contains(aggrType.getName());
};
oFF.QExceptionAggregationManager.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originExceptionManager = other;
	this._clear();
	this._copyDimensionSets(originExceptionManager.m_dimensionSets);
	this._copyExceptionAggregationGroups(originExceptionManager.m_exceptionAggregationGroups);
};
oFF.QExceptionAggregationManager.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.EXCEPTION_AGGREGATION_MANAGER;
};
oFF.QExceptionAggregationManager.prototype.mergeDeepRecursive = function(settings, other)
{
	this.copyFrom(other, null);
};
oFF.QExceptionAggregationManager.prototype.releaseObject = function()
{
	this.m_dimensionSets = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_dimensionSets);
	this.m_exceptionAggregationGroups = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_exceptionAggregationGroups);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};

oFF.QField = function() {};
oFF.QField.prototype = new oFF.QModelComponent();
oFF.QField.prototype._ff_c = "QField";

oFF.QField._createField = function(context, dimension, type)
{
	let attribute = new oFF.QField();
	attribute.setupField(context, dimension, type);
	return attribute;
};
oFF.QField.prototype.m_alwaysRequested = false;
oFF.QField.prototype.m_attributeName = null;
oFF.QField.prototype.m_displayFormat = null;
oFF.QField.prototype.m_isHierarchyNavigationField = false;
oFF.QField.prototype.m_metadata = null;
oFF.QField.prototype.m_mimeType = null;
oFF.QField.prototype.m_obtainability = null;
oFF.QField.prototype.m_presentationType = null;
oFF.QField.prototype.m_textTransformationType = null;
oFF.QField.prototype._setHierarchyNavigationField = function(isHierarchyNavField)
{
	if (this.getQueryManager().isShallow())
	{
		this.m_isHierarchyNavigationField = isHierarchyNavField;
	}
};
oFF.QField.prototype._setMimeType = function(mimeType)
{
	if (this.getQueryManager().isShallow())
	{
		this.m_mimeType = mimeType;
	}
};
oFF.QField.prototype._setPresentationType = function(presentationType)
{
	if (this.getQueryManager().isShallow())
	{
		this.m_presentationType = presentationType;
	}
};
oFF.QField.prototype.cloneOlapComponent = function(context, parent)
{
	let clone = oFF.QField._createField(context, null, this.getPresentationType());
	clone.copyFrom(this, null);
	return clone;
};
oFF.QField.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originField = other;
	this.m_attributeName = originField.m_attributeName;
	this.m_obtainability = originField.m_obtainability;
	this.m_textTransformationType = originField.m_textTransformationType;
	this.m_alwaysRequested = originField.m_alwaysRequested;
	this.m_displayFormat = originField.m_displayFormat;
	if (originField.getDimension().getDimensionType().isTypeOf(oFF.DimensionType.CALCULATED_DIMENSION))
	{
		this.getMetadataBase().setValueType(originField.getValueType());
	}
	else
	{
		let metadata = originField.getMetadata();
		if (oFF.notNull(metadata))
		{
			this.m_metadata = oFF.XWeakReferenceUtil.getWeakRef(this.getOlapEnv().getFieldMetadataByKey(metadata.getCacheKey()));
		}
	}
};
oFF.QField.prototype.createFieldLiteralValue = function()
{
	return oFF.QFieldValue.createLiteral(this.getContext(), this);
};
oFF.QField.prototype.getAliasName = function()
{
	return this.getMetadata().getAliasName();
};
oFF.QField.prototype.getAttribute = function()
{
	let dimension = this.getDimension();
	let universalDisplayHierarchy = dimension.getUniversalDisplayHierarchy();
	if (oFF.notNull(universalDisplayHierarchy))
	{
		let originalField = universalDisplayHierarchy.mapFieldToOriginalDimension(this);
		if (oFF.notNull(originalField) && originalField !== this)
		{
			return originalField.getAttribute();
		}
	}
	return dimension.getAttributeByName(this.m_attributeName);
};
oFF.QField.prototype.getAttributeType = function()
{
	return this.getMetadata().getAttributeType();
};
oFF.QField.prototype.getConversionRoutine = function()
{
	return this.getMetadata().getConversionRoutine();
};
oFF.QField.prototype.getDecimals = function()
{
	return this.getMetadata().getDecimals();
};
oFF.QField.prototype.getDependencyFields = function()
{
	return this.getMetadata().getDependencyFields();
};
oFF.QField.prototype.getDimension = function()
{
	return this.getParentComponent();
};
oFF.QField.prototype.getDimensionBase = function()
{
	return this.getParentComponent();
};
oFF.QField.prototype.getDimensionMetadata = function()
{
	return this.getMetadata().getDimensionMetadata();
};
oFF.QField.prototype.getDisplayFormat = function()
{
	return this.m_displayFormat;
};
oFF.QField.prototype.getFixedLength = function()
{
	return this.getMetadata().getFixedLength();
};
oFF.QField.prototype.getInfoObjectType = function()
{
	return this.getMetadata().getInfoObjectType();
};
oFF.QField.prototype.getInitialValue = function()
{
	return this.getMetadata().getInitialValue();
};
oFF.QField.prototype.getIsLowerCaseEnabled = function()
{
	return this.isLowerCaseEnabled();
};
oFF.QField.prototype.getLength = function()
{
	return this.getMetadata().getLength();
};
oFF.QField.prototype.getLongestAttribute = oFF.noSupport;
oFF.QField.prototype.getLowerBound = function()
{
	return this.getMetadata().getLowerBound();
};
oFF.QField.prototype.getMappedColumnName = function()
{
	return this.getMetadata().getMappedColumnName();
};
oFF.QField.prototype.getMetadata = function()
{
	return this.getMetadataBase();
};
oFF.QField.prototype.getMetadataBase = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_metadata);
};
oFF.QField.prototype.getMimeType = function()
{
	let mimeType = null;
	let metadata = this.getMetadata();
	if (oFF.notNull(metadata))
	{
		mimeType = metadata.getMimeType();
	}
	else if (this.getQueryManager().isShallow())
	{
		mimeType = this.m_mimeType;
	}
	return mimeType;
};
oFF.QField.prototype.getNavigationalAttributeDescription = function()
{
	return this.getMetadata().getNavigationalAttributeDescription();
};
oFF.QField.prototype.getObtainability = function()
{
	return this.m_obtainability;
};
oFF.QField.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.FIELD;
};
oFF.QField.prototype.getPrecision = function()
{
	return this.getMetadata().getPrecision();
};
oFF.QField.prototype.getPresentationType = function()
{
	let pt = oFF.PresentationType.UNDEFINED;
	let metadata = this.getMetadata();
	if (oFF.notNull(metadata))
	{
		pt = metadata.getPresentationType();
	}
	else if (this.getQueryManager().isShallow())
	{
		pt = this.m_presentationType;
	}
	return pt;
};
oFF.QField.prototype.getResultSetSorting = function()
{
	let sorting = null;
	let queryModel = this.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		let sortManager = queryModel.getSortingManager();
		sorting = sortManager.getFieldSorting(this, true);
	}
	return sorting;
};
oFF.QField.prototype.getSemanticType = function()
{
	return this.getMetadata().getSemanticType();
};
oFF.QField.prototype.getSqlType = function()
{
	return this.getMetadata().getSqlType();
};
oFF.QField.prototype.getTextTransformation = function()
{
	return this.m_textTransformationType;
};
oFF.QField.prototype.getUpperBound = function()
{
	return this.getMetadata().getUpperBound();
};
oFF.QField.prototype.getUsageType = function()
{
	return this.getMetadata().getUsageType();
};
oFF.QField.prototype.getValueType = function()
{
	return this.getMetadata().getValueType();
};
oFF.QField.prototype.getVisibilityType = function()
{
	return this.getMetadata().getVisibilityType();
};
oFF.QField.prototype.hasComparisonGroups = function()
{
	let filterCapabilities = this.getDimension().getFilterCapabilities().getFilterCapabilitiesByField(this);
	if (oFF.notNull(filterCapabilities))
	{
		return filterCapabilities.isFilterCapabilityGroup();
	}
	return false;
};
oFF.QField.prototype.hasSorting = function()
{
	let hasSorting = false;
	let queryModel = this.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		let sortManager = queryModel.getSortingManager();
		let fieldSorting = sortManager.getFieldSorting(this, false);
		hasSorting = oFF.notNull(fieldSorting);
	}
	return hasSorting;
};
oFF.QField.prototype.haveAnyInAPropertiesChanged = function()
{
	return this.hasPropertyChanged(oFF.QFieldProperties.QY_OBTAINABILITY);
};
oFF.QField.prototype.isAlwaysRequested = function()
{
	return this.m_alwaysRequested;
};
oFF.QField.prototype.isCubeBlendingPropertiesField = function()
{
	return this.getMetadata().isCubeBlendingPropertiesField();
};
oFF.QField.prototype.isDefaultTextField = function()
{
	return this.getMetadata().isDefaultTextField();
};
oFF.QField.prototype.isDisplayAttributeField = function()
{
	return this.getMetadata().isDisplayAttributeField();
};
oFF.QField.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let xOther = other;
	if (this.getAttribute() !== xOther.getAttribute())
	{
		return false;
	}
	if (this.getDimension() !== xOther.getDimension())
	{
		return false;
	}
	return oFF.XString.isEqual(this.getName(), xOther.getName());
};
oFF.QField.prototype.isExcludedFromValueHelp = function()
{
	return this.getMetadata().isExcludedFromValueHelp();
};
oFF.QField.prototype.isFilterable = function()
{
	return this.getMetadata().isFilterable();
};
oFF.QField.prototype.isFilterableForValueHelpAndReadMode = function(readMode)
{
	return this.getMetadata().isFilterableForValueHelpAndReadMode(readMode);
};
oFF.QField.prototype.isFlatKeyField = function()
{
	return this.getMetadata().isFlatKeyField();
};
oFF.QField.prototype.isHierarchyKeyField = function()
{
	return this.getMetadata().isHierarchyKeyField();
};
oFF.QField.prototype.isHierarchyNavigationField = function()
{
	let isHierarchyNavigationField = false;
	if (this.getQueryManager().isShallow())
	{
		isHierarchyNavigationField = this.m_isHierarchyNavigationField;
	}
	else if (this.getMetadata() !== null)
	{
		if (this.getModelCapabilities().supportsSidPresentation())
		{
			isHierarchyNavigationField = this.getMetadata().isHierarchyNavigationField();
		}
		else
		{
			isHierarchyNavigationField = this.isHierarchyKeyField();
		}
	}
	return isHierarchyNavigationField;
};
oFF.QField.prototype.isHierarchyPathField = function()
{
	return this.getMetadata().isHierarchyPathField();
};
oFF.QField.prototype.isKeyField = function()
{
	return this.getMetadata().isKeyField();
};
oFF.QField.prototype.isLowerCaseEnabled = function()
{
	return this.getMetadata().isLowerCaseEnabled();
};
oFF.QField.prototype.isNamePathField = function()
{
	return this.getMetadata().isNamePathField();
};
oFF.QField.prototype.isVirtualDescription = function()
{
	return this.getMetadata().isVirtualDescription();
};
oFF.QField.prototype.releaseObject = function()
{
	let metadata = this.getMetadata();
	if (oFF.notNull(metadata))
	{
		let olapEnv = this.getOlapEnv();
		if (oFF.notNull(olapEnv))
		{
			let cacheKey = metadata.getCacheKey();
			olapEnv.releaseFieldMetadataByKey(cacheKey);
		}
	}
	this.m_metadata = oFF.XObjectExt.release(this.m_metadata);
	this.m_obtainability = null;
	this.m_attributeName = null;
	this.m_textTransformationType = null;
	this.m_displayFormat = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QField.prototype.setAlwaysRequested = function(alwaysRequested)
{
	this.m_alwaysRequested = alwaysRequested;
};
oFF.QField.prototype.setAttribute = function(attribute)
{
	this.m_attributeName = attribute.getName();
};
oFF.QField.prototype.setDimension = function(dimension)
{
	this.setParent(dimension);
};
oFF.QField.prototype.setDisplayFormat = function(displayFormat)
{
	this.m_displayFormat = displayFormat;
};
oFF.QField.prototype.setMetadata = function(metadata)
{
	this.m_metadata = oFF.XWeakReferenceUtil.getWeakRef(metadata);
};
oFF.QField.prototype.setObtainability = function(obtainability)
{
	let oldValue = this.m_obtainability;
	this.m_obtainability = obtainability;
	if (this.getDimension().getResultSetFields().contains(this))
	{
		this.notifyPropertyConstantChanged(oFF.QFieldProperties.QY_OBTAINABILITY, oldValue, obtainability);
	}
};
oFF.QField.prototype.setTextTransformation = function(textTransformationType)
{
	if (textTransformationType.isTypeOf(oFF.TextTransformationType.SPATIAL_TRANSFORMATION) && !this.getModelCapabilities().supportsSpatialTransformation())
	{
		this.m_textTransformationType = null;
	}
	else
	{
		this.m_textTransformationType = textTransformationType;
	}
};
oFF.QField.prototype.setValueType = oFF.noSupport;
oFF.QField.prototype.setupField = function(context, dimension, type)
{
	this.setupModelComponent(context, dimension);
	if (type === oFF.PresentationType.KEY)
	{
		this.setText("Key");
		this.setName("KEY");
	}
};
oFF.QField.prototype.supportsSorting = function()
{
	let supportsSorting = false;
	let queryModel = this.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		let modelCapabilities = queryModel.getModelCapabilities();
		supportsSorting = modelCapabilities.supportsFieldSorting(this);
	}
	return supportsSorting;
};
oFF.QField.prototype.usedInFieldOrComplexSorting = function()
{
	let usedInSorting = false;
	let queryModel = this.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		let sortManager = queryModel.getSortingManager();
		usedInSorting = oFF.XCollectionUtils.hasElements(sortManager.getSortOperationsUsingField(this));
	}
	return usedInSorting;
};

oFF.QFieldContainer = function() {};
oFF.QFieldContainer.prototype = new oFF.QModelComponent();
oFF.QFieldContainer.prototype._ff_c = "QFieldContainer";

oFF.QFieldContainer.create = function(context, dimension)
{
	let object = new oFF.QFieldContainer();
	object.setupFieldContainer(context, dimension);
	return object;
};
oFF.QFieldContainer.prototype.m_allFields = null;
oFF.QFieldContainer.prototype.m_clientDefaultKeyField = null;
oFF.QFieldContainer.prototype.m_clientDefaultTextField = null;
oFF.QFieldContainer.prototype.m_cubeBlendingPropertiesField = null;
oFF.QFieldContainer.prototype.m_defaultResultSetFields = null;
oFF.QFieldContainer.prototype.m_defaultResultSetTextField = null;
oFF.QFieldContainer.prototype.m_fieldMapBySemanticType = null;
oFF.QFieldContainer.prototype.m_flatDisplayKeyField = null;
oFF.QFieldContainer.prototype.m_flatFieldMapByType = null;
oFF.QFieldContainer.prototype.m_flatKeyField = null;
oFF.QFieldContainer.prototype.m_flatTextField = null;
oFF.QFieldContainer.prototype.m_geoAreaNameField = null;
oFF.QFieldContainer.prototype.m_geoLevelField = null;
oFF.QFieldContainer.prototype.m_geoPointField = null;
oFF.QFieldContainer.prototype.m_geoShapeField = null;
oFF.QFieldContainer.prototype.m_hasFixedResultSetFields = false;
oFF.QFieldContainer.prototype.m_hierarchyDisplayKeyField = null;
oFF.QFieldContainer.prototype.m_hierarchyFieldMapByType = null;
oFF.QFieldContainer.prototype.m_hierarchyKeyField = null;
oFF.QFieldContainer.prototype.m_hierarchyNavigationField = null;
oFF.QFieldContainer.prototype.m_hierarchyPathField = null;
oFF.QFieldContainer.prototype.m_hierarchyTextField = null;
oFF.QFieldContainer.prototype.m_namePathField = null;
oFF.QFieldContainer.prototype.m_resultSetFields = null;
oFF.QFieldContainer.prototype.m_selectorFields = null;
oFF.QFieldContainer.prototype.m_shouldUseActualField = false;
oFF.QFieldContainer.prototype.addDefaultResultSetField = function(field)
{
	if (!this.m_defaultResultSetFields.contains(field))
	{
		this.m_defaultResultSetFields.add(field);
	}
};
oFF.QFieldContainer.prototype.addField = function(field)
{
	this.addFieldInternal(field);
	this.notifyNodeChanged();
};
oFF.QFieldContainer.prototype.addFieldInternal = function(field)
{
	this.m_allFields.addInternal(field);
	this.addToFieldMaps(field);
};
oFF.QFieldContainer.prototype.addNewField = function(type, name, text)
{
	let dimension = this.getDimension();
	let field = oFF.QFactory.createFieldFromType(this.getContext(), dimension, type, name);
	field.setName(name);
	field.setText(text);
	this.addField(field);
	return field;
};
oFF.QFieldContainer.prototype.addToFieldMaps = function(cloneField)
{
	let usageType = cloneField.getUsageType();
	let presentationName = cloneField.getPresentationType().getName();
	let semanticType = cloneField.getSemanticType();
	if (usageType !== oFF.FieldUsageType.FLAT)
	{
		if (!this.m_hierarchyFieldMapByType.containsKey(presentationName))
		{
			this.m_hierarchyFieldMapByType.put(presentationName, cloneField);
		}
	}
	if (!this.m_flatFieldMapByType.containsKey(presentationName))
	{
		this.m_flatFieldMapByType.put(presentationName, cloneField);
	}
	if (oFF.XStringUtils.isNotNullAndNotEmpty(semanticType) && !this.m_fieldMapBySemanticType.containsKey(semanticType))
	{
		this.m_fieldMapBySemanticType.put(semanticType, cloneField);
	}
};
oFF.QFieldContainer.prototype.clearAllFields = function()
{
	this.queueEventing();
	this.m_defaultResultSetFields.clear();
	this.m_allFields.clear();
	this.m_resultSetFields.clear();
	this.m_selectorFields.clear();
	this.m_flatFieldMapByType.clear();
	this.m_hierarchyFieldMapByType.clear();
	this.m_fieldMapBySemanticType.clear();
	this.m_flatKeyField = null;
	this.m_flatTextField = null;
	this.m_flatDisplayKeyField = null;
	this.m_hierarchyKeyField = null;
	this.m_hierarchyTextField = null;
	this.m_hierarchyDisplayKeyField = null;
	this.m_hierarchyPathField = null;
	this.m_hierarchyNavigationField = null;
	this.m_geoShapeField = null;
	this.m_geoPointField = null;
	this.m_geoLevelField = null;
	this.m_geoAreaNameField = null;
	this.m_cubeBlendingPropertiesField = null;
	this.resumeEventing();
};
oFF.QFieldContainer.prototype.clearDefaultResultSetFields = function()
{
	this.m_defaultResultSetFields.clear();
};
oFF.QFieldContainer.prototype.copyFieldContainer = function(origin, createNewFields)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , origin, null);
	this.m_hasFixedResultSetFields = origin.m_hasFixedResultSetFields;
	let dimension = this.getDimension();
	let i;
	let size;
	if (createNewFields)
	{
		let context = this.getContext();
		size = origin.m_allFields.size();
		for (i = 0; i < size; i++)
		{
			let origField = origin.m_allFields.get(i);
			let cloneField = oFF.QFactory.createFieldFromType(context, dimension, origField.getPresentationType(), origField.getName());
			cloneField.copyFrom(origField, null);
			this.m_allFields.addInternal(cloneField);
			this.addToFieldMaps(cloneField);
		}
	}
	this.m_allFields.copyFrom(origin.m_allFields, null);
	size = origin.m_resultSetFields.size();
	for (i = 0; i < size; i++)
	{
		let origRsFieldName = origin.m_resultSetFields.get(i).getName();
		let rsField = this.m_allFields.getByKey(origRsFieldName);
		if (oFF.isNull(rsField))
		{
			rsField = this.getDimension().getFieldByName(origRsFieldName);
		}
		this.m_resultSetFields.addInternal(rsField);
	}
	this.m_resultSetFields.copyFrom(origin.m_resultSetFields, null);
	size = origin.m_defaultResultSetFields.size();
	for (i = 0; i < size; i++)
	{
		let byKey = this.m_allFields.getByKey(origin.m_defaultResultSetFields.get(i).getName());
		this.m_defaultResultSetFields.add(byKey);
		this.m_selectorFields.addInternal(byKey);
	}
	this.m_selectorFields.copyFrom(origin.m_selectorFields, null);
	if (oFF.notNull(origin.m_flatKeyField))
	{
		this.setFlatKeyField(this.getFieldFromDimensionIfNull(origin.getFlatKeyField().getName()));
	}
	if (oFF.notNull(origin.m_flatTextField))
	{
		this.setFlatTextField(this.getFieldFromDimensionIfNull(origin.getFlatTextField().getName()));
	}
	if (oFF.notNull(origin.m_clientDefaultTextField))
	{
		this.setClientDefaultTextField(this.getFieldFromDimensionIfNull(origin.getClientDefaultTextField().getName()));
	}
	if (oFF.notNull(origin.m_clientDefaultKeyField))
	{
		this.setClientDefaultKeyField(this.getFieldFromDimensionIfNull(origin.getClientDefaultKeyField().getName()));
	}
	if (oFF.notNull(origin.m_flatDisplayKeyField))
	{
		this.setFlatDisplayKeyField(this.getFieldFromDimensionIfNull(origin.getFlatDisplayKeyField().getName()));
	}
	if (oFF.notNull(origin.m_hierarchyKeyField))
	{
		this.setHierachyKeyField(this.getFieldFromDimensionIfNull(origin.getHierarchyKeyField().getName()));
	}
	if (oFF.notNull(origin.m_hierarchyTextField))
	{
		this.setHierarchyTextField(this.getFieldFromDimensionIfNull(origin.getHierarchyTextField().getName()));
	}
	if (oFF.notNull(origin.m_hierarchyDisplayKeyField))
	{
		this.setHierarchyDisplayKeyField(this.getFieldFromDimensionIfNull(origin.getHierarchyDisplayKeyField().getName()));
	}
	if (oFF.notNull(origin.m_hierarchyPathField))
	{
		this.setHierarchyPathField(this.getFieldFromDimensionIfNull(origin.getHierarchyPathField().getName()));
	}
	if (oFF.notNull(origin.m_hierarchyNavigationField))
	{
		this.setHierachyNavigationField(this.getFieldFromDimensionIfNull(origin.getHierarchyNavigationField().getName()));
	}
	if (oFF.notNull(origin.m_namePathField))
	{
		this.setNamePathField(this.getFieldFromDimensionIfNull(origin.getNamePathField().getName()));
	}
	if (oFF.notNull(origin.m_geoShapeField))
	{
		this.setGeoShapeField(this.getFieldFromDimensionIfNull(origin.getGeoShapeField().getName()));
	}
	if (oFF.notNull(origin.m_geoPointField))
	{
		this.setGeoPointField(this.getFieldFromDimensionIfNull(origin.getGeoPointField().getName()));
	}
	if (oFF.notNull(origin.m_geoLevelField))
	{
		this.setGeoLevelField(this.getFieldFromDimensionIfNull(origin.getGeoLevelField().getName()));
	}
	if (oFF.notNull(origin.m_geoAreaNameField))
	{
		this.setGeoAreaNameField(this.getFieldFromDimensionIfNull(origin.getGeoAreaNameField().getName()));
	}
	if (oFF.notNull(origin.m_cubeBlendingPropertiesField))
	{
		this.setCubeBlendingPropertiesField(this.getFieldFromDimensionIfNull(origin.getCubeBlendingPropertiesField().getName()));
	}
	if (oFF.notNull(origin.m_defaultResultSetTextField))
	{
		this.setDefaultResultSetTextField(this.getFieldFromDimensionIfNull(origin.getDefaultResultSetTextField().getName()));
	}
	this.m_shouldUseActualField = origin.getShouldUseActualTextField();
};
oFF.QFieldContainer.prototype.copyFromInternal = function(other, flags)
{
	this.copyFieldContainer(other, true);
};
oFF.QFieldContainer.prototype.getClientDefaultKeyField = function()
{
	return oFF.isNull(this.m_clientDefaultKeyField) ? this.getFallbackClientDefaultKeyField() : oFF.XWeakReferenceUtil.getHardRef(this.m_clientDefaultKeyField);
};
oFF.QFieldContainer.prototype.getClientDefaultTextField = function()
{
	return oFF.isNull(this.m_clientDefaultTextField) ? this.getTextField() : oFF.XWeakReferenceUtil.getHardRef(this.m_clientDefaultTextField);
};
oFF.QFieldContainer.prototype.getCubeBlendingPropertiesField = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_cubeBlendingPropertiesField);
};
oFF.QFieldContainer.prototype.getDefaultResultSetFields = function()
{
	return this.m_defaultResultSetFields;
};
oFF.QFieldContainer.prototype.getDefaultResultSetTextField = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_defaultResultSetTextField);
};
oFF.QFieldContainer.prototype.getDimension = function()
{
	return this.getParentComponent();
};
oFF.QFieldContainer.prototype.getDisplayKeyField = function()
{
	if (this.getDimension().isHierarchyActive())
	{
		return this.getHierarchyDisplayKeyField();
	}
	return this.getFlatDisplayKeyField();
};
oFF.QFieldContainer.prototype.getFallbackClientDefaultKeyField = function()
{
	let fallbackField = this.getMixedDisplayKeyField();
	if (oFF.isNull(fallbackField))
	{
		fallbackField = this.getFieldByPresentationType(oFF.PresentationType.DISPLAY_KEY_NOT_COMPOUND);
	}
	if (oFF.isNull(fallbackField))
	{
		fallbackField = this.getDisplayKeyField();
	}
	if (oFF.isNull(fallbackField))
	{
		fallbackField = this.getFieldByPresentationType(oFF.PresentationType.KEY_NOT_COMPOUND);
	}
	if (oFF.isNull(fallbackField))
	{
		fallbackField = this.getKeyField();
	}
	return fallbackField;
};
oFF.QFieldContainer.prototype.getFieldByName = function(name)
{
	return this.m_allFields.getByKey(name);
};
oFF.QFieldContainer.prototype.getFieldByNameOrAlias = function(name)
{
	return this.m_allFields.getFieldByNameOrAlias(name);
};
oFF.QFieldContainer.prototype.getFieldByPresentationType = function(presentationType)
{
	let field = null;
	if (oFF.notNull(presentationType))
	{
		if (presentationType === oFF.PresentationType.ACTIVE_KEY)
		{
			field = this.getKeyField();
		}
		else if (presentationType === oFF.PresentationType.ACTIVE_DISPLAY_KEY)
		{
			field = this.getDisplayKeyField();
		}
		else if (presentationType === oFF.PresentationType.ACTIVE_TEXT)
		{
			field = this.getTextField();
		}
		else
		{
			if (this.getDimension().isHierarchyActive())
			{
				field = this.m_hierarchyFieldMapByType.getByKey(presentationType.getName());
			}
			else
			{
				field = this.m_flatFieldMapByType.getByKey(presentationType.getName());
			}
		}
	}
	return field;
};
oFF.QFieldContainer.prototype.getFieldBySemanticType = function(semanticType)
{
	return this.m_fieldMapBySemanticType.getByKey(semanticType);
};
oFF.QFieldContainer.prototype.getFieldFromDimensionIfNull = function(fieldName)
{
	let fieldByName = this.m_allFields.getByKey(fieldName);
	if (oFF.isNull(fieldByName))
	{
		fieldByName = this.getDimension().getFieldByName(fieldName);
	}
	return fieldByName;
};
oFF.QFieldContainer.prototype.getFieldIterator = function()
{
	return this.m_allFields.getIterator();
};
oFF.QFieldContainer.prototype.getFieldLayoutType = function()
{
	return oFF.FieldLayoutType.FIELD_BASED;
};
oFF.QFieldContainer.prototype.getFields = function()
{
	return this.m_allFields;
};
oFF.QFieldContainer.prototype.getFieldsExt = function(context)
{
	if (context === oFF.QContextType.RESULT_SET)
	{
		return this.m_resultSetFields;
	}
	return this.m_selectorFields;
};
oFF.QFieldContainer.prototype.getFieldsList = function(usageType)
{
	let fields = oFF.XListOfNameObject.create();
	let size = this.m_allFields.size();
	for (let i = 0; i < size; i++)
	{
		let field = this.m_allFields.get(i);
		let currentUsageType = field.getUsageType();
		if (field.isAlwaysRequested() || currentUsageType === oFF.FieldUsageType.ALL || currentUsageType === usageType)
		{
			fields.add(field);
		}
	}
	return fields;
};
oFF.QFieldContainer.prototype.getFieldsListByActiveUsageType = oFF.noSupport;
oFF.QFieldContainer.prototype.getFieldsListByActiveUsageTypeExt = oFF.noSupport;
oFF.QFieldContainer.prototype.getFirstFieldByType = function(type)
{
	return this.m_allFields.getFirstFieldByType(type);
};
oFF.QFieldContainer.prototype.getFlatDisplayKeyField = function()
{
	if (oFF.isNull(this.m_flatDisplayKeyField))
	{
		this.m_flatDisplayKeyField = oFF.XWeakReferenceUtil.getWeakRef(this.getFirstFieldByType(oFF.PresentationType.DISPLAY_KEY));
		if (oFF.isNull(this.m_flatDisplayKeyField))
		{
			this.m_flatDisplayKeyField = oFF.XWeakReferenceUtil.getWeakRef(this.getFlatKeyField());
		}
	}
	return oFF.XWeakReferenceUtil.getHardRef(this.m_flatDisplayKeyField);
};
oFF.QFieldContainer.prototype.getFlatFieldsList = function()
{
	return this.getFieldsList(oFF.FieldUsageType.FLAT);
};
oFF.QFieldContainer.prototype.getFlatKeyField = function()
{
	if (oFF.isNull(this.m_flatKeyField))
	{
		let size = this.m_allFields.size();
		for (let i = 0; i < size; i++)
		{
			let field = this.m_allFields.get(i);
			if (field.isFlatKeyField())
			{
				this.m_flatKeyField = oFF.XWeakReferenceUtil.getWeakRef(field);
				break;
			}
		}
		if (oFF.isNull(this.m_flatKeyField))
		{
			let field2 = this.getFirstFieldByType(oFF.PresentationType.KEY);
			this.m_flatKeyField = oFF.XWeakReferenceUtil.getWeakRef(field2);
		}
	}
	return oFF.XWeakReferenceUtil.getHardRef(this.m_flatKeyField);
};
oFF.QFieldContainer.prototype.getFlatTextField = function()
{
	if (oFF.isNull(this.m_flatTextField))
	{
		let size = this.m_allFields.size();
		for (let i = 0; i < size; i++)
		{
			let field = this.m_allFields.get(i);
			if (field.isDefaultTextField())
			{
				this.m_flatTextField = oFF.XWeakReferenceUtil.getWeakRef(field);
				break;
			}
		}
		if (this.getDimension().isUniversalDisplayHierarchyDimension())
		{
			this.m_flatTextField = oFF.XWeakReferenceUtil.getWeakRef(this.getFirstFieldByType(oFF.PresentationType.TEXT));
		}
		if (this.getDimension().getDimensionType().isTypeOf(oFF.DimensionType.ABSTRACT_STRUCTURE) && oFF.isNull(this.m_flatTextField))
		{
			this.m_flatTextField = oFF.XWeakReferenceUtil.getWeakRef(this.getFirstFieldByType(oFF.PresentationType.TEXT));
		}
	}
	return oFF.XWeakReferenceUtil.getHardRef(this.m_flatTextField);
};
oFF.QFieldContainer.prototype.getGeoAreaNameField = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_geoAreaNameField);
};
oFF.QFieldContainer.prototype.getGeoLevelField = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_geoLevelField);
};
oFF.QFieldContainer.prototype.getGeoPointField = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_geoPointField);
};
oFF.QFieldContainer.prototype.getGeoShapeField = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_geoShapeField);
};
oFF.QFieldContainer.prototype.getHierarchyDisplayKeyField = function()
{
	if (oFF.isNull(this.m_hierarchyDisplayKeyField))
	{
		this.m_hierarchyDisplayKeyField = oFF.XWeakReferenceUtil.getWeakRef(this.getFirstFieldByType(oFF.PresentationType.HIERARCHY_DISPLAY_KEY));
		if (oFF.isNull(this.m_hierarchyDisplayKeyField))
		{
			this.m_hierarchyDisplayKeyField = oFF.XWeakReferenceUtil.getWeakRef(this.getFlatDisplayKeyField());
		}
	}
	return oFF.XWeakReferenceUtil.getHardRef(this.m_hierarchyDisplayKeyField);
};
oFF.QFieldContainer.prototype.getHierarchyFieldsList = function()
{
	return this.getFieldsList(oFF.FieldUsageType.HIERARCHY);
};
oFF.QFieldContainer.prototype.getHierarchyKeyField = function()
{
	if (oFF.isNull(this.m_hierarchyKeyField))
	{
		this.m_hierarchyKeyField = oFF.XWeakReferenceUtil.getWeakRef(this.getFirstFieldByType(oFF.PresentationType.HIERARCHY_KEY));
		if (oFF.isNull(this.m_hierarchyKeyField))
		{
			this.m_hierarchyKeyField = oFF.XWeakReferenceUtil.getWeakRef(this.getFlatKeyField());
		}
	}
	return oFF.XWeakReferenceUtil.getHardRef(this.m_hierarchyKeyField);
};
oFF.QFieldContainer.prototype.getHierarchyNavigationField = function()
{
	if (oFF.isNull(this.m_hierarchyNavigationField))
	{
		this.m_hierarchyNavigationField = oFF.XWeakReferenceUtil.getWeakRef(this.getHierarchyKeyField());
	}
	return oFF.XWeakReferenceUtil.getHardRef(this.m_hierarchyNavigationField);
};
oFF.QFieldContainer.prototype.getHierarchyPathField = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_hierarchyPathField);
};
oFF.QFieldContainer.prototype.getHierarchyTextField = function()
{
	if (oFF.isNull(this.m_hierarchyTextField))
	{
		this.m_hierarchyTextField = oFF.XWeakReferenceUtil.getWeakRef(this.getFirstFieldByType(oFF.PresentationType.HIERARCHY_TEXT));
		if (oFF.isNull(this.m_hierarchyTextField))
		{
			this.m_hierarchyTextField = oFF.XWeakReferenceUtil.getWeakRef(this.getFlatTextField());
		}
	}
	return oFF.XWeakReferenceUtil.getHardRef(this.m_hierarchyTextField);
};
oFF.QFieldContainer.prototype.getIndexedChildren = function()
{
	let children = oFF.XList.create();
	children.add(this.m_allFields);
	children.add(this.m_resultSetFields);
	children.add(this.m_selectorFields);
	return children.getIterator();
};
oFF.QFieldContainer.prototype.getKeyField = function()
{
	let field;
	if (this.getDimension().isHierarchyActive())
	{
		field = this.getHierarchyKeyField();
	}
	else
	{
		field = this.getFlatKeyField();
	}
	return field;
};
oFF.QFieldContainer.prototype.getKeyFieldExt = function(context)
{
	if (context === oFF.QContextType.RESULT_SET)
	{
		if (this.getDimension().isHierarchyActive())
		{
			return this.getHierarchyKeyField();
		}
		return this.getFlatKeyField();
	}
	if (this.getDimension().isSelectorHierarchyActive())
	{
		return this.getHierarchyKeyField();
	}
	return this.getFlatKeyField();
};
oFF.QFieldContainer.prototype.getMixedDisplayKeyField = function()
{
	return this.getFieldByPresentationType(oFF.PresentationType.DISPLAY_KEY_MIXED_COMPOUNDMENT);
};
oFF.QFieldContainer.prototype.getMixedDisplayKeyFieldExt = function()
{
	return this.getModelCapabilities().supportsMixedDisplayKey() ? this.getMixedDisplayKeyField() : this.getDisplayKeyField();
};
oFF.QFieldContainer.prototype.getNamePathField = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_namePathField);
};
oFF.QFieldContainer.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.FIELD_CONTAINER;
};
oFF.QFieldContainer.prototype.getResultSetFields = function()
{
	return this.m_resultSetFields;
};
oFF.QFieldContainer.prototype.getSelectorFields = function()
{
	return this.m_selectorFields;
};
oFF.QFieldContainer.prototype.getShouldUseActualTextField = function()
{
	return this.m_shouldUseActualField || this.getQueryModel() !== null && this.getQueryModel().getShouldUseActualTextField();
};
oFF.QFieldContainer.prototype.getTextField = function()
{
	if (this.getDimension().isHierarchyActive())
	{
		return this.getHierarchyTextField();
	}
	return this.getFlatTextField();
};
oFF.QFieldContainer.prototype.hasFixedResultSetFields = function()
{
	return this.m_hasFixedResultSetFields;
};
oFF.QFieldContainer.prototype.isComponentNode = function()
{
	return true;
};
oFF.QFieldContainer.prototype.isUseServerDefaultKeyField = function()
{
	return oFF.isNull(this.m_clientDefaultKeyField);
};
oFF.QFieldContainer.prototype.isUseServerDefaultTextField = function()
{
	return oFF.isNull(this.m_clientDefaultTextField);
};
oFF.QFieldContainer.prototype.mergeDeepRecursive = function(settings, other)
{
	let otherAttribute = other;
	let otherFields = otherAttribute.getResultSetFields();
	this.m_resultSetFields.clear();
	for (let i = 0; i < otherFields.size(); i++)
	{
		let otherField = otherFields.get(i);
		let name = otherField.getName();
		let field = this.getFieldByName(name);
		if (oFF.notNull(field))
		{
			this.m_resultSetFields.add(field);
		}
	}
};
oFF.QFieldContainer.prototype.notifyChildChanged = function(changedNodes)
{
	this.queueEventing();
	oFF.QModelComponent.prototype.notifyChildChanged.call( this , changedNodes);
	let dimension = this.getDimension();
	let fieldLayoutType = this.getFieldLayoutType();
	let size = changedNodes.size();
	for (let i = 0; i < size; i++)
	{
		let next = changedNodes.get(i);
		if (next === this.m_selectorFields)
		{
			dimension.setSelectorFieldLayoutType(fieldLayoutType);
		}
		else if (next === this.m_resultSetFields)
		{
			dimension.setFieldLayoutType(fieldLayoutType);
		}
	}
	this.resumeEventing();
};
oFF.QFieldContainer.prototype.reinit = function(origin)
{
	this.m_defaultResultSetFields.clear();
	oFF.XCollectionUtils.releaseEntriesFromCollection(this.m_resultSetFields);
	this.m_resultSetFields.clear();
	oFF.XCollectionUtils.releaseEntriesFromCollection(this.m_selectorFields);
	this.m_selectorFields.clear();
	oFF.XCollectionUtils.releaseEntriesFromCollection(this.m_allFields);
	this.m_allFields.clear();
	this.m_flatFieldMapByType.clear();
	this.m_hierarchyFieldMapByType.clear();
	this.m_fieldMapBySemanticType.clear();
	this.m_flatKeyField = null;
	this.m_flatTextField = null;
	this.m_flatDisplayKeyField = null;
	this.m_hierarchyKeyField = null;
	this.m_hierarchyTextField = null;
	this.m_hierarchyDisplayKeyField = null;
	this.m_hierarchyPathField = null;
	this.m_hierarchyNavigationField = null;
	this.m_namePathField = null;
	this.m_geoShapeField = null;
	this.m_geoPointField = null;
	this.m_geoLevelField = null;
	this.m_geoAreaNameField = null;
	this.m_cubeBlendingPropertiesField = null;
	this.copyFrom(origin, null);
};
oFF.QFieldContainer.prototype.releaseObject = function()
{
	this.m_defaultResultSetFields = oFF.XObjectExt.release(this.m_defaultResultSetFields);
	this.m_resultSetFields = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_resultSetFields);
	this.m_selectorFields = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_selectorFields);
	this.m_allFields = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_allFields);
	this.m_flatFieldMapByType = oFF.XObjectExt.release(this.m_flatFieldMapByType);
	this.m_hierarchyFieldMapByType = oFF.XObjectExt.release(this.m_hierarchyFieldMapByType);
	this.m_fieldMapBySemanticType = oFF.XObjectExt.release(this.m_fieldMapBySemanticType);
	this.m_flatKeyField = null;
	this.m_flatTextField = null;
	this.m_flatDisplayKeyField = null;
	this.m_clientDefaultTextField = null;
	this.m_clientDefaultKeyField = null;
	this.m_hierarchyKeyField = null;
	this.m_hierarchyTextField = null;
	this.m_hierarchyDisplayKeyField = null;
	this.m_hierarchyPathField = null;
	this.m_hierarchyNavigationField = null;
	this.m_namePathField = null;
	this.m_geoShapeField = null;
	this.m_geoPointField = null;
	this.m_geoLevelField = null;
	this.m_geoAreaNameField = null;
	this.m_cubeBlendingPropertiesField = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QFieldContainer.prototype.removeFieldByName = function(fieldName)
{
	let fieldToRemove = this.m_allFields.getFieldByName(fieldName);
	if (oFF.notNull(fieldToRemove))
	{
		this.m_defaultResultSetFields.removeAt(this.m_allFields.getIndex(fieldToRemove));
		this.m_allFields.removeElement(fieldToRemove);
		this.m_resultSetFields.removeElement(fieldToRemove);
		this.m_selectorFields.removeElement(fieldToRemove);
		this.m_flatFieldMapByType.remove(fieldName);
		if (this.getFlatKeyField() === fieldToRemove)
		{
			this.m_flatKeyField = null;
		}
	}
};
oFF.QFieldContainer.prototype.setClientDefaultKeyField = function(field)
{
	this.m_clientDefaultKeyField = oFF.XWeakReferenceUtil.getWeakRef(field);
};
oFF.QFieldContainer.prototype.setClientDefaultTextField = function(field)
{
	this.m_clientDefaultTextField = oFF.XWeakReferenceUtil.getWeakRef(field);
};
oFF.QFieldContainer.prototype.setCubeBlendingPropertiesField = function(blendingPropertiesField)
{
	this.m_cubeBlendingPropertiesField = oFF.XWeakReferenceUtil.getWeakRef(blendingPropertiesField);
};
oFF.QFieldContainer.prototype.setDefaultResultSetTextField = function(field)
{
	if (oFF.isNull(this.m_defaultResultSetTextField))
	{
		this.m_defaultResultSetTextField = oFF.XWeakReferenceUtil.getWeakRef(field);
	}
};
oFF.QFieldContainer.prototype.setFlatDisplayKeyField = function(field)
{
	this.m_flatDisplayKeyField = oFF.XWeakReferenceUtil.getWeakRef(field);
};
oFF.QFieldContainer.prototype.setFlatKeyField = function(field)
{
	this.m_flatKeyField = oFF.XWeakReferenceUtil.getWeakRef(field);
};
oFF.QFieldContainer.prototype.setFlatTextField = function(field)
{
	this.m_flatTextField = oFF.XWeakReferenceUtil.getWeakRef(field);
};
oFF.QFieldContainer.prototype.setGeoAreaNameField = function(field)
{
	this.m_geoAreaNameField = oFF.XWeakReferenceUtil.getWeakRef(field);
};
oFF.QFieldContainer.prototype.setGeoLevelField = function(field)
{
	this.m_geoLevelField = oFF.XWeakReferenceUtil.getWeakRef(field);
};
oFF.QFieldContainer.prototype.setGeoPointField = function(field)
{
	this.m_geoPointField = oFF.XWeakReferenceUtil.getWeakRef(field);
};
oFF.QFieldContainer.prototype.setGeoShapeField = function(field)
{
	this.m_geoShapeField = oFF.XWeakReferenceUtil.getWeakRef(field);
};
oFF.QFieldContainer.prototype.setHasFixedResultSetFields = function(hasFixedResultSetFields)
{
	let oldValue = this.m_hasFixedResultSetFields;
	this.m_hasFixedResultSetFields = hasFixedResultSetFields;
	this.notifyPropertyBooleanChanged(oFF.QFieldProperties.QY_RS_FIXED_ATTRIBUTES, oldValue, hasFixedResultSetFields);
};
oFF.QFieldContainer.prototype.setHierachyKeyField = function(field)
{
	this.m_hierarchyKeyField = oFF.XWeakReferenceUtil.getWeakRef(field);
};
oFF.QFieldContainer.prototype.setHierachyNavigationField = function(field)
{
	this.m_hierarchyNavigationField = oFF.XWeakReferenceUtil.getWeakRef(field);
};
oFF.QFieldContainer.prototype.setHierarchyDisplayKeyField = function(field)
{
	this.m_hierarchyDisplayKeyField = oFF.XWeakReferenceUtil.getWeakRef(field);
};
oFF.QFieldContainer.prototype.setHierarchyPathField = function(field)
{
	this.m_hierarchyPathField = oFF.XWeakReferenceUtil.getWeakRef(field);
};
oFF.QFieldContainer.prototype.setHierarchyTextField = function(field)
{
	this.m_hierarchyTextField = oFF.XWeakReferenceUtil.getWeakRef(field);
};
oFF.QFieldContainer.prototype.setNamePathField = function(field)
{
	this.m_namePathField = oFF.XWeakReferenceUtil.getWeakRef(field);
};
oFF.QFieldContainer.prototype.setShouldUseActualTextField = function(shouldUseActualField)
{
	this.m_shouldUseActualField = shouldUseActualField;
};
oFF.QFieldContainer.prototype.setupFieldContainer = function(context, dimension)
{
	this.setupModelComponentWithName(context, dimension, "Fields");
	this.m_defaultResultSetFields = oFF.XListWeakRef.create();
	this.m_resultSetFields = oFF.QFieldList.createFieldList(this, "Result Set Fields", oFF.QContextType.RESULT_SET);
	this.m_selectorFields = oFF.QFieldList.createFieldList(this, "Selector Fields", oFF.QContextType.SELECTOR);
	this.m_allFields = oFF.QFieldList.createFieldList(this, "All Fields", null);
	this.m_flatFieldMapByType = oFF.XWeakMap.create();
	this.m_hierarchyFieldMapByType = oFF.XWeakMap.create();
	this.m_fieldMapBySemanticType = oFF.XWeakMap.create();
	this.m_clientDefaultTextField = null;
	this.m_clientDefaultKeyField = null;
};

oFF.QFilterCapability = function() {};
oFF.QFilterCapability.prototype = new oFF.QModelComponent();
oFF.QFilterCapability.prototype._ff_c = "QFilterCapability";

oFF.QFilterCapability._createFilterCapability = function(context, parentContext, field)
{
	return oFF.QFilterCapability._createFilterCapabilityWithName(context, parentContext, oFF.isNull(field) ? null : field.getName());
};
oFF.QFilterCapability._createFilterCapabilityWithName = function(context, parentContext, fieldName)
{
	let selectionCapabilities = new oFF.QFilterCapability();
	selectionCapabilities.setupFilterCapabilities(context, parentContext, fieldName);
	return selectionCapabilities;
};
oFF.QFilterCapability.prototype.m_fieldName = null;
oFF.QFilterCapability.prototype.m_isSameAcrossContexts = true;
oFF.QFilterCapability.prototype.m_supportedComparisonOperatorsForQueryContext = null;
oFF.QFilterCapability.prototype.m_supportedComparisonOperatorsForValueHelpContext = null;
oFF.QFilterCapability.prototype.m_supportedSetSignsForQueryContext = null;
oFF.QFilterCapability.prototype.m_supportedSetSignsForValueHelpContext = null;
oFF.QFilterCapability.prototype.m_supportsValueHelpOnly = false;
oFF.QFilterCapability.prototype._isSameAcrossContexts = function()
{
	return this.m_isSameAcrossContexts;
};
oFF.QFilterCapability.prototype.addSetSign = function(setSign, list, operators)
{
	if (list.contains(setSign))
	{
		return;
	}
	list.add(setSign);
	operators.put(setSign.getName(), oFF.XListOfNameObject.create());
};
oFF.QFilterCapability.prototype.addSupportedSetSign = function(setSign)
{
	this.addSupportedSetSignByContext(setSign, null);
};
oFF.QFilterCapability.prototype.addSupportedSetSignByContext = function(setSign, context)
{
	if (context === oFF.QContextType.SELECTOR && !this.m_isSameAcrossContexts)
	{
		this.addSetSign(setSign, this.m_supportedSetSignsForValueHelpContext, this.m_supportedComparisonOperatorsForValueHelpContext);
	}
	else
	{
		this.addSetSign(setSign, this.m_supportedSetSignsForQueryContext, this.m_supportedComparisonOperatorsForQueryContext);
	}
};
oFF.QFilterCapability.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originFilterCapability = other;
	this.m_supportedSetSignsForQueryContext.addAll(originFilterCapability.m_supportedSetSignsForQueryContext);
	this.m_supportedSetSignsForValueHelpContext.addAll(originFilterCapability.m_supportedSetSignsForValueHelpContext);
	this.m_supportedComparisonOperatorsForQueryContext = originFilterCapability.m_supportedComparisonOperatorsForQueryContext.createMapByStringCopy();
	this.m_supportedComparisonOperatorsForValueHelpContext = originFilterCapability.m_supportedComparisonOperatorsForValueHelpContext.createMapByStringCopy();
	this.m_fieldName = originFilterCapability.m_fieldName;
	this.m_isSameAcrossContexts = originFilterCapability.m_isSameAcrossContexts;
	this.m_supportsValueHelpOnly = originFilterCapability.m_supportsValueHelpOnly;
};
oFF.QFilterCapability.prototype.getFieldName = function()
{
	return this.m_fieldName;
};
oFF.QFilterCapability.prototype.getModifiableSupportedComparisonOperators = function(setSign)
{
	return this.getSupportedComparisonOperatorsForContext(setSign, oFF.QContextType.RESULT_SET);
};
oFF.QFilterCapability.prototype.getModifiableSupportedComparisonOperatorsByContext = function(setSign, context)
{
	return this.getSupportedComparisonOperatorsForContext(setSign, context);
};
oFF.QFilterCapability.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.FILTER_CAPABILITY;
};
oFF.QFilterCapability.prototype.getSupportedComparisonOperators = function(setSign)
{
	return this.getModifiableSupportedComparisonOperators(setSign);
};
oFF.QFilterCapability.prototype.getSupportedComparisonOperatorsForContext = function(setSign, context)
{
	return (context === oFF.QContextType.SELECTOR && !this.m_isSameAcrossContexts) ? this.m_supportedComparisonOperatorsForValueHelpContext.getByKey(setSign.getName()) : this.m_supportedComparisonOperatorsForQueryContext.getByKey(setSign.getName());
};
oFF.QFilterCapability.prototype.getSupportedComparisonOperatorsForValueHelpAndReadMode = function(setSign, readMode)
{
	return this.getSupportedComparisonOperatorsForContext(setSign, readMode === oFF.QMemberReadMode.MASTER || this.m_supportsValueHelpOnly ? oFF.QContextType.SELECTOR : oFF.QContextType.RESULT_SET);
};
oFF.QFilterCapability.prototype.getSupportedSetSign = function()
{
	return this.getSupportedSetSignForContext(oFF.QContextType.RESULT_SET);
};
oFF.QFilterCapability.prototype.getSupportedSetSignForContext = function(context)
{
	return context === oFF.QContextType.SELECTOR && !this.m_isSameAcrossContexts ? this.m_supportedSetSignsForValueHelpContext : this.m_supportedSetSignsForQueryContext;
};
oFF.QFilterCapability.prototype.getSupportedSetSignsForValueHelpAndReadMode = function(readMode)
{
	return this.getSupportedSetSignForContext(readMode === oFF.QMemberReadMode.MASTER || this.m_supportsValueHelpOnly ? oFF.QContextType.SELECTOR : oFF.QContextType.RESULT_SET);
};
oFF.QFilterCapability.prototype.isFilterCapabilityGroup = function()
{
	return false;
};
oFF.QFilterCapability.prototype.releaseObject = function()
{
	this.m_fieldName = null;
	this.m_supportedSetSignsForQueryContext = oFF.XObjectExt.release(this.m_supportedSetSignsForQueryContext);
	this.m_supportedSetSignsForValueHelpContext = oFF.XObjectExt.release(this.m_supportedSetSignsForValueHelpContext);
	this.m_supportedComparisonOperatorsForQueryContext = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_supportedComparisonOperatorsForQueryContext);
	this.m_supportedComparisonOperatorsForValueHelpContext = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_supportedComparisonOperatorsForValueHelpContext);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QFilterCapability.prototype.setIsSameAcrossContexts = function(isSameAcrossContexts)
{
	this.m_isSameAcrossContexts = isSameAcrossContexts;
};
oFF.QFilterCapability.prototype.setSupportsValueHelpOnly = function(supportsValueHelpOnly)
{
	this.m_supportsValueHelpOnly = supportsValueHelpOnly;
	this.m_isSameAcrossContexts = false;
};
oFF.QFilterCapability.prototype.setupFilterCapabilities = function(context, parentContext, fieldName)
{
	this.setupModelComponent(context, parentContext);
	this.m_fieldName = fieldName;
	this.m_supportedSetSignsForValueHelpContext = oFF.XListOfNameObject.create();
	this.m_supportedSetSignsForQueryContext = oFF.XListOfNameObject.create();
	this.m_supportedComparisonOperatorsForValueHelpContext = oFF.XHashMapByString.create();
	this.m_supportedComparisonOperatorsForQueryContext = oFF.XHashMapByString.create();
};
oFF.QFilterCapability.prototype.supportsSetSign = function(setSign)
{
	return this.supportsSetSignByContext(setSign, oFF.QContextType.RESULT_SET);
};
oFF.QFilterCapability.prototype.supportsSetSignByContext = function(setSign, context)
{
	return (context === oFF.QContextType.SELECTOR && !this.m_isSameAcrossContexts) ? this.m_supportedSetSignsForValueHelpContext.contains(setSign) : this.m_supportedSetSignsForQueryContext.contains(setSign);
};
oFF.QFilterCapability.prototype.supportsSetSignForValueHelpAndReadMode = function(setSign, readMode)
{
	return this.supportsSetSignByContext(setSign, readMode === oFF.QMemberReadMode.MASTER || this.m_supportsValueHelpOnly ? oFF.QContextType.SELECTOR : oFF.QContextType.RESULT_SET);
};
oFF.QFilterCapability.prototype.supportsValueHelpOnly = function()
{
	return this.m_supportsValueHelpOnly;
};

oFF.QFilterCapabilityList = function() {};
oFF.QFilterCapabilityList.prototype = new oFF.QModelComponent();
oFF.QFilterCapabilityList.prototype._ff_c = "QFilterCapabilityList";

oFF.QFilterCapabilityList.createFilterCapabilitiesForDimension = function()
{
	let capabilities = new oFF.QFilterCapabilityList();
	capabilities.setupFilterCapabilities(null, null);
	return capabilities;
};
oFF.QFilterCapabilityList.createFilterCapabilitiesForVariable = function(context, variable)
{
	let selectionSignedSetCapabilities = new oFF.QFilterCapabilityList();
	selectionSignedSetCapabilities.setupFilterCapabilities(context, variable);
	return selectionSignedSetCapabilities;
};
oFF.QFilterCapabilityList.prototype.m_filterCapabilities = null;
oFF.QFilterCapabilityList.prototype.m_filterableFields = null;
oFF.QFilterCapabilityList.prototype.m_supportsMultipleValues = false;
oFF.QFilterCapabilityList.prototype.addFilterCapability = function(capability)
{
	let fieldName = capability.getFieldName();
	if (!this.m_filterCapabilities.containsKey(fieldName))
	{
		this.m_filterableFields.add(fieldName);
	}
	this.m_filterCapabilities.put(fieldName, capability);
};
oFF.QFilterCapabilityList.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originFilterCapabilityList = other;
	this.m_filterableFields = originFilterCapabilityList.m_filterableFields.createListCopy();
	this.m_supportsMultipleValues = originFilterCapabilityList.m_supportsMultipleValues;
	this.m_filterCapabilities = originFilterCapabilityList.m_filterCapabilities.clone();
};
oFF.QFilterCapabilityList.prototype.createAndAddFilterCapabilitiesForFieldName = function(fieldName)
{
	if (this.m_filterCapabilities.containsKey(fieldName))
	{
		return this.m_filterCapabilities.getByKey(fieldName);
	}
	let selectionCapabilities = oFF.QFilterCapability._createFilterCapabilityWithName(this.getContext(), this, fieldName);
	this.addFilterCapability(selectionCapabilities);
	return selectionCapabilities;
};
oFF.QFilterCapabilityList.prototype.getFilterCapabilitiesByField = function(field)
{
	return this.m_filterCapabilities.getByKey(field.getName());
};
oFF.QFilterCapabilityList.prototype.getFilterCapabilitiesByFieldName = function(fieldName)
{
	return this.m_filterCapabilities.getByKey(fieldName);
};
oFF.QFilterCapabilityList.prototype.getSelectableFieldNames = function()
{
	return this.m_filterableFields;
};
oFF.QFilterCapabilityList.prototype.releaseObject = function()
{
	this.m_filterCapabilities = oFF.XObjectExt.release(this.m_filterCapabilities);
	this.m_filterableFields = oFF.XObjectExt.release(this.m_filterableFields);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QFilterCapabilityList.prototype.setSupportsMultipleValues = function(supportsMultipleValues)
{
	this.m_supportsMultipleValues = supportsMultipleValues;
};
oFF.QFilterCapabilityList.prototype.setupFilterCapabilities = function(context, deltaNode)
{
	this.setupModelComponent(context, deltaNode);
	this.m_filterCapabilities = oFF.XHashMapByString.create();
	this.m_filterableFields = oFF.XList.create();
};
oFF.QFilterCapabilityList.prototype.supportsMultipleValues = function()
{
	return this.m_supportsMultipleValues;
};

oFF.QFilterElement = function() {};
oFF.QFilterElement.prototype = new oFF.QModelComponent();
oFF.QFilterElement.prototype._ff_c = "QFilterElement";

oFF.QFilterElement.prototype.m_filterContainer = null;
oFF.QFilterElement.prototype.m_uniqueId = null;
oFF.QFilterElement.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originFilterElement = other;
	this.m_uniqueId = originFilterElement.m_uniqueId;
};
oFF.QFilterElement.prototype.getFilterExpression = function()
{
	let filterExpression = oFF.XWeakReferenceUtil.getHardRef(this.m_filterContainer);
	if (oFF.notNull(filterExpression))
	{
		return filterExpression;
	}
	let context = this.getContext();
	if (oFF.notNull(context) && context.getComponentType() === oFF.OlapComponentType.FILTER_EXPRESSION)
	{
		return context;
	}
	let parentComponent = this.getParent();
	if (oFF.notNull(parentComponent) && parentComponent.getOlapComponentType().isTypeOf(oFF.OlapComponentType.FILTER_ELEMENT))
	{
		return parentComponent.getFilterExpression();
	}
	return null;
};
oFF.QFilterElement.prototype.getMemberNamesFromFilter = function(dimName)
{
	return oFF.QFilterUtil.getMemberNamesFromFilter(this, dimName);
};
oFF.QFilterElement.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.FILTER_ELEMENT;
};
oFF.QFilterElement.prototype.getUniqueId = function()
{
	return this.m_uniqueId;
};
oFF.QFilterElement.prototype.releaseObject = function()
{
	this.m_filterContainer = oFF.XObjectExt.release(this.m_filterContainer);
	this.m_uniqueId = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QFilterElement.prototype.setParent = function(parent)
{
	let currentParent = this.getParent();
	if (oFF.notNull(currentParent))
	{
		let filterExpression = null;
		if (currentParent.getComponentType() === oFF.OlapComponentType.FILTER_EXPRESSION)
		{
			filterExpression = currentParent;
		}
		else if (currentParent.getComponentType().isTypeOf(oFF.OlapComponentType.FILTER_ELEMENT))
		{
			let filterParent = currentParent;
			filterExpression = filterParent.getFilterExpression();
		}
		if (oFF.notNull(filterExpression))
		{
			let filterExpressionParent = filterExpression.getParent();
			if (oFF.notNull(filterExpressionParent) && filterExpressionParent.getComponentType() === oFF.OlapComponentType.OLAP_FILTER_MANAGER)
			{
				return;
			}
		}
	}
	oFF.QModelComponent.prototype.setParent.call( this , parent);
};
oFF.QFilterElement.prototype.setUniqueId = function(uniqueId)
{
	this.m_uniqueId = uniqueId;
};
oFF.QFilterElement.prototype.setupFilterElement = function(context, filterContainer, parentNode)
{
	this.setupModelComponent(context, parentNode);
	this.m_filterContainer = oFF.XWeakReferenceUtil.getWeakRef(filterContainer);
	this.m_uniqueId = oFF.XGuid.getGuid();
};

oFF.QFilterUiSettings = function() {};
oFF.QFilterUiSettings.prototype = new oFF.QModelComponent();
oFF.QFilterUiSettings.prototype._ff_c = "QFilterUiSettings";

oFF.QFilterUiSettings.create = function(context, parent)
{
	let settings = new oFF.QFilterUiSettings();
	settings.setupModelComponent(context, parent);
	return settings;
};
oFF.QFilterUiSettings.prototype.m_displayInfo = null;
oFF.QFilterUiSettings.prototype.m_readMode = null;
oFF.QFilterUiSettings.prototype.cloneOlapComponent = function(context, parent)
{
	let newSettings = oFF.QFilterUiSettings.create(context, parent);
	newSettings.copyFrom(this, null);
	return newSettings;
};
oFF.QFilterUiSettings.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let otherSettings = other;
	this.m_readMode = otherSettings.m_readMode;
	this.m_displayInfo = otherSettings.m_displayInfo;
};
oFF.QFilterUiSettings.prototype.getDisplayInfo = function()
{
	return this.m_displayInfo;
};
oFF.QFilterUiSettings.prototype.getReadMode = function()
{
	return this.m_readMode;
};
oFF.QFilterUiSettings.prototype.releaseObject = function()
{
	oFF.QModelComponent.prototype.releaseObject.call( this );
	this.m_readMode = null;
	this.m_displayInfo = null;
};
oFF.QFilterUiSettings.prototype.setDisplayInfo = function(displayInfo)
{
	this.m_displayInfo = displayInfo;
	this.notifyNodeChanged();
};
oFF.QFilterUiSettings.prototype.setReadMode = function(readMode)
{
	this.m_readMode = readMode;
	this.notifyNodeChanged();
};

oFF.QLayeredFilter = function() {};
oFF.QLayeredFilter.prototype = new oFF.QModelComponent();
oFF.QLayeredFilter.prototype._ff_c = "QLayeredFilter";

oFF.QLayeredFilter.create = function(context, parent)
{
	let layeredFilter = new oFF.QLayeredFilter();
	layeredFilter.setupLayer(context, parent);
	return layeredFilter;
};
oFF.QLayeredFilter.prototype.m_layeredFilters = null;
oFF.QLayeredFilter.prototype.becomeSecondaryParent = function(filterExpression)
{
	filterExpression.addSecondaryParent(this.getParentComponent());
	filterExpression.registerChangedListener(this.getParentComponent(), null);
};
oFF.QLayeredFilter.prototype.clear = function()
{
	let iterator = this.m_layeredFilters.getIterator();
	while (iterator.hasNext())
	{
		let filterLayer = iterator.next();
		this.freeAsSecondaryParent(filterLayer);
	}
	this.m_layeredFilters.clear();
	this.notifyNodeChanged();
};
oFF.QLayeredFilter.prototype.contains = function(layer)
{
	return this.m_layeredFilters.contains(layer);
};
oFF.QLayeredFilter.prototype.copy = function(layeredFilter)
{
	if (oFF.notNull(layeredFilter))
	{
		let iterator = layeredFilter.getKeysAsIterator();
		while (iterator.hasNext())
		{
			let layerName = iterator.next();
			let layer = layeredFilter.getByKey(layerName);
			this.m_layeredFilters.put(layerName, layer);
			this.becomeSecondaryParent(layer);
		}
		this.notifyNodeChanged();
	}
};
oFF.QLayeredFilter.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originLayeredFilter = other;
	let iterator = originLayeredFilter.m_layeredFilters.getKeysAsIterator();
	while (iterator.hasNext())
	{
		let layerName = iterator.next();
		this.putLayer(layerName, originLayeredFilter.m_layeredFilters.getByKey(layerName));
	}
};
oFF.QLayeredFilter.prototype.freeAsSecondaryParent = function(filterExpression)
{
	filterExpression.unregisterChangedListener(this.getParentComponent());
	filterExpression.removeSecondaryParent(this.getParentComponent());
};
oFF.QLayeredFilter.prototype.getIterator = function()
{
	return this.m_layeredFilters.getIterator();
};
oFF.QLayeredFilter.prototype.getLayer = function(name)
{
	return this.m_layeredFilters.getByKey(name);
};
oFF.QLayeredFilter.prototype.putLayer = function(name, layer)
{
	let curFilterLayer = this.m_layeredFilters.getByKey(name);
	if (curFilterLayer === layer)
	{
		return;
	}
	if (oFF.notNull(curFilterLayer))
	{
		this.freeAsSecondaryParent(curFilterLayer);
	}
	if (oFF.isNull(layer))
	{
		this.m_layeredFilters.remove(name);
	}
	else
	{
		this.m_layeredFilters.put(name, layer);
		this.becomeSecondaryParent(layer);
	}
	this.notifyNodeChanged();
};
oFF.QLayeredFilter.prototype.releaseObject = function()
{
	let layeredFilters = this.m_layeredFilters.getIterator();
	while (layeredFilters.hasNext())
	{
		this.freeAsSecondaryParent(layeredFilters.next());
	}
	this.m_layeredFilters = oFF.XObjectExt.release(this.m_layeredFilters);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QLayeredFilter.prototype.setupLayer = function(context, parent)
{
	this.setupModelComponentWithName(context, parent, "LayeredFilter");
	this.m_layeredFilters = oFF.XLinkedHashMapByString.create();
};
oFF.QLayeredFilter.prototype.toReadOnly = function()
{
	let layeredFilters = oFF.XHashMapByString.create();
	let filterLayer = this.m_layeredFilters.getKeysAsIterator();
	while (filterLayer.hasNext())
	{
		let layerName = filterLayer.next();
		layeredFilters.put(layerName, this.m_layeredFilters.getByKey(layerName));
	}
	return layeredFilters;
};

oFF.QBlendableFormulaItem = function() {};
oFF.QBlendableFormulaItem.prototype = new oFF.QModelComponent();
oFF.QBlendableFormulaItem.prototype._ff_c = "QBlendableFormulaItem";

oFF.QBlendableFormulaItem.prototype.m_dimensionContext = null;
oFF.QBlendableFormulaItem.prototype.copyBlendingFormulaItem = function(other)
{
	this.setDimensionContext(other.getDimensionContext());
};
oFF.QBlendableFormulaItem.prototype.getDimensionContext = function()
{
	return this.m_dimensionContext;
};
oFF.QBlendableFormulaItem.prototype.releaseObject = function()
{
	this.m_dimensionContext = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QBlendableFormulaItem.prototype.setDimensionContext = function(dimension)
{
	if (oFF.notNull(dimension))
	{
		if (dimension.getQueryModel() !== null && dimension.getQueryModel().getDatasetId() !== null)
		{
			this.m_dimensionContext = dimension;
		}
		else
		{
			throw oFF.XException.createIllegalArgumentException("dimension context query model context containing dataset Id.");
		}
	}
};

oFF.QFormulaItemConstant = function() {};
oFF.QFormulaItemConstant.prototype = new oFF.QModelComponent();
oFF.QFormulaItemConstant.prototype._ff_c = "QFormulaItemConstant";

oFF.QFormulaItemConstant._createConstant = function(context, parentNode)
{
	let formula = new oFF.QFormulaItemConstant();
	formula.setupFormula(context, parentNode);
	return formula;
};
oFF.QFormulaItemConstant.prototype.m_constantValue = null;
oFF.QFormulaItemConstant.prototype.m_currency = null;
oFF.QFormulaItemConstant.prototype.m_unit = null;
oFF.QFormulaItemConstant.prototype.m_values = null;
oFF.QFormulaItemConstant.prototype.m_variable = null;
oFF.QFormulaItemConstant.prototype.m_variableValue = null;
oFF.QFormulaItemConstant.prototype.cloneOlapComponent = function(context, parent)
{
	let newItem = oFF.QFormulaItemConstant._createConstant(context, parent);
	newItem.copyFormulaItemConstant(this);
	return newItem;
};
oFF.QFormulaItemConstant.prototype.copyFormulaItemConstant = function(origin)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , origin, null);
	this.m_currency = origin.m_currency;
	this.m_unit = origin.m_unit;
	this.m_constantValue.copyFrom(origin, null);
	if (origin.getValueType() === oFF.XValueType.VARIABLE)
	{
		let variableContainer = this.getContext().getVariableContainer();
		let origVar = origin.getVariable();
		if (oFF.notNull(origVar))
		{
			this.setVariable(variableContainer.getVariables().getByKey(origVar.getName()));
		}
		else
		{
			let origVarVal = origin.getVariableValue();
			this.setVariableValue(oFF.QFactory.createVariableValue(variableContainer.getVariables().getByKey(origVarVal.getVariable().getName())));
		}
	}
	else
	{
		let originValue = origin.m_constantValue.getValue();
		if (oFF.notNull(originValue))
		{
			this.m_constantValue.copyFrom(origin.m_constantValue, null);
		}
		else
		{
			oFF.XObjectExt.release(this.m_constantValue);
			this.m_constantValue = oFF.XValueAccess.createWithType(origin.m_constantValue.getValueType());
		}
	}
	if (oFF.XCollectionUtils.hasElements(origin.m_values))
	{
		this.m_values = oFF.XCollectionUtils.createListCopy(origin.m_values);
	}
};
oFF.QFormulaItemConstant.prototype.copyFromInternal = function(other, flags)
{
	this.copyFormulaItemConstant(other);
};
oFF.QFormulaItemConstant.prototype.getBoolean = function()
{
	return this.m_constantValue.getBoolean();
};
oFF.QFormulaItemConstant.prototype.getCurrency = function()
{
	return this.m_currency;
};
oFF.QFormulaItemConstant.prototype.getDate = function()
{
	return this.m_constantValue.getDate();
};
oFF.QFormulaItemConstant.prototype.getDateTime = function()
{
	return this.m_constantValue.getDateTime();
};
oFF.QFormulaItemConstant.prototype.getDecFloat = function()
{
	return this.m_constantValue.getDecFloat();
};
oFF.QFormulaItemConstant.prototype.getDouble = function()
{
	return this.m_constantValue.getDouble();
};
oFF.QFormulaItemConstant.prototype.getFormattedValue = function()
{
	return this.getString();
};
oFF.QFormulaItemConstant.prototype.getGeometry = function()
{
	let value = this.getValue();
	return value;
};
oFF.QFormulaItemConstant.prototype.getInteger = function()
{
	return this.m_constantValue.getInteger();
};
oFF.QFormulaItemConstant.prototype.getLineString = function()
{
	return this.m_constantValue.getLineString();
};
oFF.QFormulaItemConstant.prototype.getLong = function()
{
	return this.m_constantValue.getLong();
};
oFF.QFormulaItemConstant.prototype.getMultiLineString = function()
{
	return this.m_constantValue.getMultiLineString();
};
oFF.QFormulaItemConstant.prototype.getMultiPoint = function()
{
	return this.m_constantValue.getMultiPoint();
};
oFF.QFormulaItemConstant.prototype.getMultiPolygon = function()
{
	return this.m_constantValue.getMultiPolygon();
};
oFF.QFormulaItemConstant.prototype.getNull = function()
{
	return this.m_constantValue.getNull();
};
oFF.QFormulaItemConstant.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.FORMULA_CONSTANT;
};
oFF.QFormulaItemConstant.prototype.getPoint = function()
{
	return this.m_constantValue.getPoint();
};
oFF.QFormulaItemConstant.prototype.getPolygon = function()
{
	return this.m_constantValue.getPolygon();
};
oFF.QFormulaItemConstant.prototype.getString = function()
{
	return this.m_constantValue.getString();
};
oFF.QFormulaItemConstant.prototype.getStringValues = function()
{
	return this.m_values;
};
oFF.QFormulaItemConstant.prototype.getTime = function()
{
	return this.m_constantValue.getTime();
};
oFF.QFormulaItemConstant.prototype.getTimeSpan = function()
{
	return this.m_constantValue.getTimeSpan();
};
oFF.QFormulaItemConstant.prototype.getUnit = function()
{
	return this.m_unit;
};
oFF.QFormulaItemConstant.prototype.getValue = function()
{
	return this.m_constantValue.getValue();
};
oFF.QFormulaItemConstant.prototype.getValueType = function()
{
	if (oFF.notNull(this.m_variable))
	{
		return oFF.XValueType.VARIABLE;
	}
	else if (oFF.XCollectionUtils.hasElements(this.m_values))
	{
		return oFF.XValueType.STRING_ARRAY;
	}
	return this.m_constantValue.getValueType();
};
oFF.QFormulaItemConstant.prototype.getVariable = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_variable);
};
oFF.QFormulaItemConstant.prototype.getVariableValue = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_variableValue);
};
oFF.QFormulaItemConstant.prototype.hasValue = function()
{
	if (oFF.isNull(this.m_variable))
	{
		return this.m_constantValue.hasValue();
	}
	try
	{
		return this.getVariable().getValueByString() !== null;
	}
	catch (unExpectedValue)
	{
		return false;
	}
};
oFF.QFormulaItemConstant.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let xOther = other;
	if (!this.getValue().isEqualTo(xOther.getValue()))
	{
		return false;
	}
	if (!oFF.XString.isEqual(this.getCurrency(), xOther.getCurrency()))
	{
		return false;
	}
	if (!oFF.XString.isEqual(this.getUnit(), xOther.getUnit()))
	{
		return false;
	}
	return true;
};
oFF.QFormulaItemConstant.prototype.parseString = function(value)
{
	if (oFF.notNull(this.m_variable))
	{
		oFF.noSupport();
	}
	return this.m_constantValue.parseString(value);
};
oFF.QFormulaItemConstant.prototype.releaseObject = function()
{
	this.m_constantValue = oFF.XObjectExt.release(this.m_constantValue);
	this.m_variableValue = null;
	this.m_variable = null;
	this.m_currency = null;
	this.m_unit = null;
	this.m_values = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_values);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QFormulaItemConstant.prototype.setBoolean = function(value)
{
	this.m_constantValue.setBoolean(value);
	this.notifyNodeChanged();
};
oFF.QFormulaItemConstant.prototype.setCurrency = function(currency)
{
	this.m_currency = currency;
	this.m_unit = null;
	this.notifyNodeChanged();
};
oFF.QFormulaItemConstant.prototype.setDate = function(value)
{
	this.m_constantValue.setDate(value);
	this.notifyNodeChanged();
};
oFF.QFormulaItemConstant.prototype.setDateTime = function(value)
{
	this.m_constantValue.setDateTime(value);
	this.notifyNodeChanged();
};
oFF.QFormulaItemConstant.prototype.setDecFloat = function(value)
{
	this.m_constantValue.setDecFloat(value);
	this.notifyNodeChanged();
};
oFF.QFormulaItemConstant.prototype.setDouble = function(value)
{
	this.m_constantValue.setDouble(value);
	this.notifyNodeChanged();
};
oFF.QFormulaItemConstant.prototype.setInteger = function(value)
{
	this.m_constantValue.setInteger(value);
	this.notifyNodeChanged();
};
oFF.QFormulaItemConstant.prototype.setLineString = function(value)
{
	this.m_constantValue.setLineString(value);
	this.notifyNodeChanged();
};
oFF.QFormulaItemConstant.prototype.setLong = function(value)
{
	this.m_constantValue.setLong(value);
	this.notifyNodeChanged();
};
oFF.QFormulaItemConstant.prototype.setMultiLineString = function(value)
{
	this.m_constantValue.setMultiLineString(value);
	this.notifyNodeChanged();
};
oFF.QFormulaItemConstant.prototype.setMultiPoint = function(value)
{
	this.m_constantValue.setMultiPoint(value);
	this.notifyNodeChanged();
};
oFF.QFormulaItemConstant.prototype.setMultiPolygon = function(value)
{
	this.m_constantValue.setMultiPolygon(value);
	this.notifyNodeChanged();
};
oFF.QFormulaItemConstant.prototype.setNullByType = function(nullValueType)
{
	this.m_constantValue.setNullByType(nullValueType);
	this.notifyNodeChanged();
};
oFF.QFormulaItemConstant.prototype.setPoint = function(value)
{
	this.m_constantValue.setPoint(value);
	this.notifyNodeChanged();
};
oFF.QFormulaItemConstant.prototype.setPolygon = function(value)
{
	this.m_constantValue.setPolygon(value);
	this.notifyNodeChanged();
};
oFF.QFormulaItemConstant.prototype.setString = function(value)
{
	this.m_constantValue.setString(value);
	this.notifyNodeChanged();
};
oFF.QFormulaItemConstant.prototype.setStringValues = function(values)
{
	oFF.XStream.ofString(values).forEach((value) => {
		let constantValue = oFF.XValueAccess.create();
		constantValue.setString(value.getString());
		this.m_values.add(constantValue);
	});
	this.notifyNodeChanged();
};
oFF.QFormulaItemConstant.prototype.setTime = function(value)
{
	this.m_constantValue.setTime(value);
	this.notifyNodeChanged();
};
oFF.QFormulaItemConstant.prototype.setTimeSpan = function(value)
{
	this.m_constantValue.setTimeSpan(value);
	this.notifyNodeChanged();
};
oFF.QFormulaItemConstant.prototype.setUnit = function(unit)
{
	this.m_unit = unit;
	this.m_currency = null;
	this.notifyNodeChanged();
};
oFF.QFormulaItemConstant.prototype.setVariable = function(variable)
{
	this.m_variable = oFF.XWeakReferenceUtil.getWeakRef(variable);
	this.notifyNodeChanged();
};
oFF.QFormulaItemConstant.prototype.setVariableValue = function(variableValue)
{
	this.m_variableValue = oFF.XWeakReferenceUtil.getWeakRef(variableValue);
	if (oFF.notNull(this.m_variableValue))
	{
		this.setVariable(variableValue.getVariable());
	}
	else
	{
		this.m_variable = null;
	}
	this.notifyNodeChanged();
};
oFF.QFormulaItemConstant.prototype.setXValue = function(value)
{
	oFF.XObjectExt.release(this.m_constantValue);
	this.m_constantValue = oFF.XValueAccess.createWithValue(value);
};
oFF.QFormulaItemConstant.prototype.setupFormula = function(context, parentNode)
{
	this.setupModelComponent(context, parentNode);
	this.m_constantValue = oFF.XValueAccess.create();
	this.m_values = oFF.XList.create();
};

oFF.QFormulaItemOperation = function() {};
oFF.QFormulaItemOperation.prototype = new oFF.QModelComponent();
oFF.QFormulaItemOperation.prototype._ff_c = "QFormulaItemOperation";

oFF.QFormulaItemOperation._createOperation = function(context, parentNode)
{
	let formula = new oFF.QFormulaItemOperation();
	formula.setupModelComponent(context, parentNode);
	return formula;
};
oFF.QFormulaItemOperation.prototype.m_leftSide = null;
oFF.QFormulaItemOperation.prototype.m_operator = null;
oFF.QFormulaItemOperation.prototype.m_rightSide = null;
oFF.QFormulaItemOperation.prototype.cloneOlapComponent = function(context, parent)
{
	let newItem = oFF.QFormulaItemOperation._createOperation(context, parent);
	newItem.copyFormulaItemOperation(this);
	return newItem;
};
oFF.QFormulaItemOperation.prototype.copyFormulaItemOperation = function(origin)
{
	this.copyFrom(origin, null);
	this.m_operator = origin.m_operator;
	if (oFF.notNull(origin.m_leftSide))
	{
		this.m_leftSide = this.copySide(origin.m_leftSide);
	}
	if (oFF.notNull(origin.m_rightSide))
	{
		this.m_rightSide = this.copySide(origin.m_rightSide);
	}
};
oFF.QFormulaItemOperation.prototype.copySide = function(originItem)
{
	let cloneItem = originItem.cloneOlapComponent(this, this);
	return cloneItem;
};
oFF.QFormulaItemOperation.prototype.getLeftSide = function()
{
	return this.m_leftSide;
};
oFF.QFormulaItemOperation.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.FORMULA_OPERATION;
};
oFF.QFormulaItemOperation.prototype.getOperator = function()
{
	return this.m_operator;
};
oFF.QFormulaItemOperation.prototype.getRightSide = function()
{
	return this.m_rightSide;
};
oFF.QFormulaItemOperation.prototype.releaseObject = function()
{
	this.m_leftSide = oFF.XObjectExt.release(this.m_leftSide);
	this.m_rightSide = oFF.XObjectExt.release(this.m_rightSide);
	this.m_operator = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QFormulaItemOperation.prototype.setLeftSide = function(item)
{
	this.m_leftSide = item;
	this.notifyNodeChanged();
};
oFF.QFormulaItemOperation.prototype.setOperator = function(theOperator)
{
	this.m_operator = theOperator;
	this.notifyNodeChanged();
};
oFF.QFormulaItemOperation.prototype.setRightSide = function(item)
{
	this.m_rightSide = item;
	this.notifyNodeChanged();
};

oFF.QFormulaIteration = function() {};
oFF.QFormulaIteration.prototype = new oFF.QModelComponent();
oFF.QFormulaIteration.prototype._ff_c = "QFormulaIteration";

oFF.QFormulaIteration._createFormulaIteration = function(context, parentNode)
{
	let iteration = new oFF.QFormulaIteration();
	iteration.setupModelComponent(context, parentNode);
	iteration.m_iterationDimensions = oFF.XList.create();
	return iteration;
};
oFF.QFormulaIteration.prototype.m_iterationDimensions = null;
oFF.QFormulaIteration.prototype.m_memberName = null;
oFF.QFormulaIteration.prototype.addIterationDimension = function(iterationDimension)
{
	iterationDimension.setParent(this);
	this.m_iterationDimensions.add(iterationDimension);
	this.notifyNodeChanged();
};
oFF.QFormulaIteration.prototype.clearIterationDimensions = function()
{
	this.m_iterationDimensions.clear();
	this.notifyNodeChanged();
};
oFF.QFormulaIteration.prototype.cloneOlapComponent = function(context, parent)
{
	let newItem = oFF.QFormulaIteration._createFormulaIteration(context, parent);
	newItem.copyFrom(this, null);
	return newItem;
};
oFF.QFormulaIteration.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	if (other.getOlapComponentType() === oFF.OlapComponentType.FORMULA_ITERATOR)
	{
		let origin = other;
		let size = origin.m_iterationDimensions.size();
		for (let i = 0; i < size; i++)
		{
			let newIter = oFF.QFormulaIterationDimension._createFormulaIterationDimension(this.getContext(), this);
			newIter.copyFrom(origin.m_iterationDimensions.get(i), null);
			this.m_iterationDimensions.add(newIter);
		}
		this.m_memberName = origin.m_memberName;
	}
};
oFF.QFormulaIteration.prototype.getIterationDimensions = function()
{
	return this.m_iterationDimensions;
};
oFF.QFormulaIteration.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.FORMULA_ITERATOR;
};
oFF.QFormulaIteration.prototype.getStartValueMemberName = function()
{
	return this.m_memberName;
};
oFF.QFormulaIteration.prototype.releaseObject = function()
{
	this.m_memberName = null;
	this.m_iterationDimensions = oFF.XObjectExt.release(this.m_iterationDimensions);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QFormulaIteration.prototype.setStartValueMember = function(member)
{
	this.setStartValueMemberName(member.getName());
};
oFF.QFormulaIteration.prototype.setStartValueMemberName = function(name)
{
	if (!oFF.XString.isEqual(this.m_memberName, name))
	{
		this.m_memberName = name;
		this.notifyNodeChanged();
	}
};

oFF.QFormulaIterationDimension = function() {};
oFF.QFormulaIterationDimension.prototype = new oFF.QModelComponent();
oFF.QFormulaIterationDimension.prototype._ff_c = "QFormulaIterationDimension";

oFF.QFormulaIterationDimension._createFormulaIterationDimension = function(context, parentNode)
{
	let iterationDimension = new oFF.QFormulaIterationDimension();
	iterationDimension.setupModelComponent(context, parentNode);
	return iterationDimension;
};
oFF.QFormulaIterationDimension.prototype.m_dimensionName = null;
oFF.QFormulaIterationDimension.prototype.m_partitionLevelName = null;
oFF.QFormulaIterationDimension.prototype.cloneOlapComponent = function(context, parent)
{
	let newItem = oFF.QFormulaIterationDimension._createFormulaIterationDimension(context, parent);
	newItem.copyFrom(this, null);
	return newItem;
};
oFF.QFormulaIterationDimension.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	if (other.getOlapComponentType() === oFF.OlapComponentType.FORMULA_ITERATION_DIMENSION)
	{
		let origin = other;
		this.m_dimensionName = origin.m_dimensionName;
		this.m_partitionLevelName = origin.m_partitionLevelName;
	}
};
oFF.QFormulaIterationDimension.prototype.getDimensionName = function()
{
	return this.m_dimensionName;
};
oFF.QFormulaIterationDimension.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.FORMULA_ITERATION_DIMENSION;
};
oFF.QFormulaIterationDimension.prototype.getPartitionLevelName = function()
{
	return this.m_partitionLevelName;
};
oFF.QFormulaIterationDimension.prototype.releaseObject = function()
{
	this.m_dimensionName = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QFormulaIterationDimension.prototype.setDimension = function(dimension)
{
	this.setDimensionName(dimension.getName());
};
oFF.QFormulaIterationDimension.prototype.setDimensionName = function(name)
{
	if (!oFF.XString.isEqual(this.m_dimensionName, name))
	{
		this.m_dimensionName = name;
		this.notifyNodeChanged();
	}
};
oFF.QFormulaIterationDimension.prototype.setPartitionLevel = function(hierarchyLevel)
{
	this.setPartitionLevelName(hierarchyLevel.getLevelName());
};
oFF.QFormulaIterationDimension.prototype.setPartitionLevelName = function(name)
{
	if (!oFF.XString.isEqual(this.m_partitionLevelName, name))
	{
		this.m_partitionLevelName = name;
		this.notifyNodeChanged();
	}
};

oFF.QCustomHierarchyDefinition = function() {};
oFF.QCustomHierarchyDefinition.prototype = new oFF.QModelComponent();
oFF.QCustomHierarchyDefinition.prototype._ff_c = "QCustomHierarchyDefinition";

oFF.QCustomHierarchyDefinition.create = function(dimension, description)
{
	let object = new oFF.QCustomHierarchyDefinition();
	let queryManager = dimension.getQueryManager();
	object.setupHierarchyDefinition(queryManager.getSystemName(), dimension.getDataSource().getName(), dimension.getName(), description, queryManager.getSystemType().isTypeOf(oFF.SystemType.ABAP));
	return object;
};
oFF.QCustomHierarchyDefinition.createByData = function(system, dataSource, dimensionName, description, ignoreDatasource)
{
	let object = new oFF.QCustomHierarchyDefinition();
	object.setupHierarchyDefinition(system, dataSource, dimensionName, description, ignoreDatasource);
	return object;
};
oFF.QCustomHierarchyDefinition.prototype.m_dataSource = null;
oFF.QCustomHierarchyDefinition.prototype.m_description = null;
oFF.QCustomHierarchyDefinition.prototype.m_dimension = null;
oFF.QCustomHierarchyDefinition.prototype.m_nodes = null;
oFF.QCustomHierarchyDefinition.prototype.m_system = null;
oFF.QCustomHierarchyDefinition.prototype.addMemberNode = function(memberName)
{
	let memberNode = oFF.CustomHierarchyMemberElement.create(memberName);
	this.m_nodes.add(memberNode);
	return memberNode;
};
oFF.QCustomHierarchyDefinition.prototype.addTextNode = function(text)
{
	let textNode = oFF.CustomHierarchyTextElement.create(text);
	this.m_nodes.add(textNode);
	return textNode;
};
oFF.QCustomHierarchyDefinition.prototype.clearChildNodes = function()
{
	this.m_nodes.clear();
};
oFF.QCustomHierarchyDefinition.prototype.copyFromInternal = function(other, flags)
{
	let originCustomHierarchyDefinition = other;
	this.setName(originCustomHierarchyDefinition.getName());
	this.m_system = originCustomHierarchyDefinition.getSystemName();
	this.m_dataSource = originCustomHierarchyDefinition.getDataSourceName();
	this.m_dimension = originCustomHierarchyDefinition.getDimensionName();
	this.m_description = originCustomHierarchyDefinition.getDescription();
	this.m_nodes = oFF.XCollectionUtils.createListOfClones(originCustomHierarchyDefinition.getChildNodes());
};
oFF.QCustomHierarchyDefinition.prototype.getChildNodes = function()
{
	return this.m_nodes;
};
oFF.QCustomHierarchyDefinition.prototype.getDataSourceName = function()
{
	return this.m_dataSource;
};
oFF.QCustomHierarchyDefinition.prototype.getDescription = function()
{
	return this.m_description;
};
oFF.QCustomHierarchyDefinition.prototype.getDimensionName = function()
{
	return this.m_dimension;
};
oFF.QCustomHierarchyDefinition.prototype.getSystemName = function()
{
	return this.m_system;
};
oFF.QCustomHierarchyDefinition.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let otherDef = other;
	if (!oFF.XString.isEqual(this.getDescription(), otherDef.getDescription()) || !oFF.XString.isEqual(this.m_system, otherDef.getSystemName()) || !oFF.XString.isEqual(this.m_dataSource, otherDef.getDataSourceName()) || !oFF.XString.isEqual(this.m_dimension, otherDef.getDimensionName()) || !oFF.XString.isEqual(this.getName(), otherDef.getName()))
	{
		return false;
	}
	return oFF.XObjectExt.areEqual(this.m_nodes, otherDef.getChildNodes());
};
oFF.QCustomHierarchyDefinition.prototype.isMemberElement = function()
{
	return false;
};
oFF.QCustomHierarchyDefinition.prototype.releaseObject = function()
{
	this.m_system = null;
	this.m_dataSource = null;
	this.m_description = null;
	this.m_dimension = null;
	this.m_nodes = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_nodes);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QCustomHierarchyDefinition.prototype.removeChildNode = function(childNode)
{
	this.m_nodes.removeElement(childNode);
};
oFF.QCustomHierarchyDefinition.prototype.setDescription = function(description)
{
	this.m_description = description;
};
oFF.QCustomHierarchyDefinition.prototype.setupHierarchyDefinition = function(system, dataSource, dimension, description, ignoreDatasource)
{
	this.m_system = system;
	this.m_dataSource = ignoreDatasource ? null : dataSource;
	this.m_dimension = dimension;
	this.m_description = description;
	this.m_nodes = oFF.XList.create();
};
oFF.QCustomHierarchyDefinition.prototype.toString = function()
{
	let sb = oFF.XStringBuffer.create();
	sb.append("QCustomHierarchyDefinition [");
	sb.append("System:").append(this.m_system);
	sb.append(", DataSource:").append(this.m_dataSource);
	sb.append(", Dimension:").append(this.m_dimension);
	if (this.getName() !== null)
	{
		sb.append(", Name:").append(this.getName());
	}
	sb.append("]");
	return sb.toString();
};

oFF.QHierarchy = function() {};
oFF.QHierarchy.prototype = new oFF.QModelComponent();
oFF.QHierarchy.prototype._ff_c = "QHierarchy";

oFF.QHierarchy.create = function(context, dimension, name)
{
	let object = new oFF.QHierarchy();
	object.setupModelComponentWithName(context, dimension, name);
	object.m_isCustomHierarchy = false;
	return object;
};
oFF.QHierarchy.createCustomHierarchy = function(context, dimension, name, description)
{
	let object = new oFF.QHierarchy();
	object.setupModelComponentWithName(context, dimension, name);
	object.m_isCustomHierarchy = true;
	object.m_hierarchyDescription = description;
	return object;
};
oFF.QHierarchy.prototype.m_dateFrom = null;
oFF.QHierarchy.prototype.m_dateTo = null;
oFF.QHierarchy.prototype.m_dueDate = null;
oFF.QHierarchy.prototype.m_hierId = null;
oFF.QHierarchy.prototype.m_hierType = null;
oFF.QHierarchy.prototype.m_hierarchyDescription = null;
oFF.QHierarchy.prototype.m_hierarchyType = null;
oFF.QHierarchy.prototype.m_isCustomHierarchy = false;
oFF.QHierarchy.prototype.m_isModeled = false;
oFF.QHierarchy.prototype.m_isRemote = false;
oFF.QHierarchy.prototype.m_objectVersion = null;
oFF.QHierarchy.prototype.m_owner = null;
oFF.QHierarchy.prototype.m_uniqueName = null;
oFF.QHierarchy.prototype.m_version = null;
oFF.QHierarchy.prototype.m_versionDescription = null;
oFF.QHierarchy.prototype.copyHierarchy = function(origin)
{
	this.copyFrom(origin, null);
	this.m_uniqueName = origin.m_uniqueName;
	this.m_hierarchyDescription = origin.m_hierarchyDescription;
	this.m_version = origin.m_version;
	this.m_versionDescription = origin.m_versionDescription;
	this.m_dateTo = oFF.XObjectExt.cloneIfNotNull(origin.m_dateTo);
	this.m_dateFrom = oFF.XObjectExt.cloneIfNotNull(origin.m_dateFrom);
	this.m_dueDate = oFF.XObjectExt.cloneIfNotNull(origin.m_dueDate);
	this.m_hierarchyType = origin.m_hierarchyType;
	this.m_owner = origin.m_owner;
	this.m_hierId = origin.m_hierId;
	this.m_hierType = origin.m_hierType;
	this.m_objectVersion = origin.m_objectVersion;
	this.m_isRemote = origin.m_isRemote;
	this.m_isModeled = origin.m_isModeled;
	this.m_isCustomHierarchy = origin.m_isCustomHierarchy;
};
oFF.QHierarchy.prototype.getDateFrom = function()
{
	return this.m_dateFrom;
};
oFF.QHierarchy.prototype.getDateTo = function()
{
	return this.m_dateTo;
};
oFF.QHierarchy.prototype.getDimension = function()
{
	return this.getParentComponent();
};
oFF.QHierarchy.prototype.getDueDate = function()
{
	return this.m_dueDate;
};
oFF.QHierarchy.prototype.getHierId = function()
{
	return this.m_hierId;
};
oFF.QHierarchy.prototype.getHierType = function()
{
	return this.m_hierType;
};
oFF.QHierarchy.prototype.getHierarchyDescription = function()
{
	return this.m_hierarchyDescription;
};
oFF.QHierarchy.prototype.getHierarchyDueDate = function()
{
	return this.m_dueDate;
};
oFF.QHierarchy.prototype.getHierarchyName = function()
{
	return this.getName();
};
oFF.QHierarchy.prototype.getHierarchyType = function()
{
	return this.m_hierarchyType;
};
oFF.QHierarchy.prototype.getHierarchyUniqueName = function()
{
	return this.m_uniqueName;
};
oFF.QHierarchy.prototype.getHierarchyVersion = function()
{
	return this.m_version;
};
oFF.QHierarchy.prototype.getObjectVersion = function()
{
	return this.m_objectVersion;
};
oFF.QHierarchy.prototype.getOwner = function()
{
	return this.m_owner;
};
oFF.QHierarchy.prototype.getVersion = function()
{
	return this.getHierarchyVersion();
};
oFF.QHierarchy.prototype.getVersionDescription = function()
{
	return this.m_versionDescription;
};
oFF.QHierarchy.prototype.isCustomHierarchy = function()
{
	return this.m_isCustomHierarchy;
};
oFF.QHierarchy.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let otherHierarchy = other;
	if (!oFF.XString.isEqual(this.getHierarchyDescription(), otherHierarchy.getHierarchyDescription()))
	{
		return false;
	}
	if (!oFF.XString.isEqual(this.getHierarchyName(), otherHierarchy.getHierarchyName()))
	{
		return false;
	}
	if (!oFF.XString.isEqual(this.getHierarchyVersion(), otherHierarchy.getHierarchyVersion()))
	{
		return false;
	}
	if (!oFF.XString.isEqual(this.getVersionDescription(), otherHierarchy.getVersionDescription()))
	{
		return false;
	}
	if (!oFF.XString.isEqual(this.getOwner(), otherHierarchy.getOwner()))
	{
		return false;
	}
	if (!oFF.XString.isEqual(this.getHierId(), otherHierarchy.getHierId()))
	{
		return false;
	}
	if (!oFF.XString.isEqual(this.getHierType(), otherHierarchy.getHierType()))
	{
		return false;
	}
	if (!oFF.XString.isEqual(this.getObjectVersion(), otherHierarchy.getObjectVersion()))
	{
		return false;
	}
	if (this.isRemote() !== otherHierarchy.isRemote())
	{
		return false;
	}
	if (this.isModeled() !== otherHierarchy.isModeled())
	{
		return false;
	}
	if (!oFF.XObjectExt.areEqual(this.getDateFrom(), otherHierarchy.getDateFrom()))
	{
		return false;
	}
	if (!oFF.XObjectExt.areEqual(this.getHierarchyDueDate(), otherHierarchy.getHierarchyDueDate()))
	{
		return false;
	}
	if (!oFF.XObjectExt.areEqual(this.getDateTo(), otherHierarchy.getDateTo()))
	{
		return false;
	}
	if (this.isCustomHierarchy() !== otherHierarchy.isCustomHierarchy())
	{
		return false;
	}
	return true;
};
oFF.QHierarchy.prototype.isModeled = function()
{
	return this.m_isModeled;
};
oFF.QHierarchy.prototype.isRemote = function()
{
	return this.m_isRemote;
};
oFF.QHierarchy.prototype.releaseObject = function()
{
	this.m_dateTo = oFF.XObjectExt.release(this.m_dateTo);
	this.m_dateFrom = oFF.XObjectExt.release(this.m_dateFrom);
	this.m_dueDate = oFF.XObjectExt.release(this.m_dueDate);
	this.m_uniqueName = null;
	this.m_hierarchyDescription = null;
	this.m_version = null;
	this.m_versionDescription = null;
	this.m_owner = null;
	this.m_hierId = null;
	this.m_hierType = null;
	this.m_objectVersion = null;
	this.m_hierarchyType = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QHierarchy.prototype.setDateFrom = function(dateFrom)
{
	this.m_dateFrom = dateFrom;
};
oFF.QHierarchy.prototype.setDateTo = function(dateTo)
{
	this.m_dateTo = dateTo;
};
oFF.QHierarchy.prototype.setHierId = function(hierId)
{
	this.m_hierId = hierId;
};
oFF.QHierarchy.prototype.setHierType = function(hierType)
{
	this.m_hierType = hierType;
};
oFF.QHierarchy.prototype.setHierarchyDescription = function(hierarchyDescription)
{
	this.m_hierarchyDescription = hierarchyDescription;
};
oFF.QHierarchy.prototype.setHierarchyDueDate = function(dueDate)
{
	this.m_dueDate = dueDate;
};
oFF.QHierarchy.prototype.setHierarchyName = function(name)
{
	this.setName(name);
};
oFF.QHierarchy.prototype.setHierarchyType = function(hierarchyType)
{
	this.m_hierarchyType = hierarchyType;
};
oFF.QHierarchy.prototype.setHierarchyUniqueName = function(uniqueName)
{
	this.m_uniqueName = uniqueName;
};
oFF.QHierarchy.prototype.setHierarchyVersion = function(version)
{
	this.m_version = version;
};
oFF.QHierarchy.prototype.setIsModeled = function(isModeled)
{
	let oldValue = this.m_isModeled;
	this.m_isModeled = isModeled;
	this.notifyPropertyBooleanChanged(oFF.QHierarchyProperties.QY_IS_MODELED, oldValue, isModeled);
};
oFF.QHierarchy.prototype.setIsRemote = function(isRemote)
{
	this.m_isRemote = isRemote;
};
oFF.QHierarchy.prototype.setObjectVersion = function(objectVersion)
{
	this.m_objectVersion = objectVersion;
};
oFF.QHierarchy.prototype.setOwner = function(owner)
{
	this.m_owner = owner;
};
oFF.QHierarchy.prototype.setVersionDescription = function(versionDescription)
{
	this.m_versionDescription = versionDescription;
};

oFF.QHierarchyManager = function() {};
oFF.QHierarchyManager.prototype = new oFF.QModelComponent();
oFF.QHierarchyManager.prototype._ff_c = "QHierarchyManager";

oFF.QHierarchyManager.create = function(context, parentNode)
{
	let object = new oFF.QHierarchyManager();
	object.setupHierarchy(context, parentNode);
	return object;
};
oFF.QHierarchyManager.isStringSimilar = function(first, second)
{
	if (oFF.XString.isEqual(first, second))
	{
		return true;
	}
	if (oFF.isNull(first) && oFF.XString.isEqual(second, ""))
	{
		return true;
	}
	return oFF.isNull(second) && oFF.XString.isEqual(first, "");
};
oFF.QHierarchyManager.prototype.m_activeBeforeAutoSubmit = false;
oFF.QHierarchyManager.prototype.m_activeDefault = null;
oFF.QHierarchyManager.prototype.m_assignedHierarchy = null;
oFF.QHierarchyManager.prototype.m_assignedHierarchyModCount = 0;
oFF.QHierarchyManager.prototype.m_customHierarchies = null;
oFF.QHierarchyManager.prototype.m_customHierarchyDefinition = null;
oFF.QHierarchyManager.prototype.m_defaultHierarchyName = null;
oFF.QHierarchyManager.prototype.m_displayHierarchyFixInFilter = false;
oFF.QHierarchyManager.prototype.m_enforceHierarchyDueDateVariableOrDefault = false;
oFF.QHierarchyManager.prototype.m_enforceHierarchyNameVariable = false;
oFF.QHierarchyManager.prototype.m_enforceHierarchyVersionVariableOrDefault = false;
oFF.QHierarchyManager.prototype.m_geoHierarchies = null;
oFF.QHierarchyManager.prototype.m_hasExternalHierarchies = false;
oFF.QHierarchyManager.prototype.m_hasTimeDependentHierarchies = false;
oFF.QHierarchyManager.prototype.m_hasVersionDependentHierarchies = false;
oFF.QHierarchyManager.prototype.m_hierarchies = null;
oFF.QHierarchyManager.prototype.m_hierarchiesWithFetchedLevels = null;
oFF.QHierarchyManager.prototype.m_hierarchyCatalogFetched = false;
oFF.QHierarchyManager.prototype.m_hierarchyCatalogKeyDate = null;
oFF.QHierarchyManager.prototype.m_hierarchyCatalogManager = null;
oFF.QHierarchyManager.prototype.m_hierarchyCatalogResultListeners = null;
oFF.QHierarchyManager.prototype.m_hierarchyDueDateVariableName = null;
oFF.QHierarchyManager.prototype.m_hierarchyHelp = null;
oFF.QHierarchyManager.prototype.m_hierarchyLevelsCatalogManager = null;
oFF.QHierarchyManager.prototype.m_hierarchyLevelsCatalogResultListeners = null;
oFF.QHierarchyManager.prototype.m_hierarchyNameVariableName = null;
oFF.QHierarchyManager.prototype.m_hierarchyNavigationDeltaMode = false;
oFF.QHierarchyManager.prototype.m_hierarchyNodeCondensation = false;
oFF.QHierarchyManager.prototype.m_hierarchySelectionDueDate = null;
oFF.QHierarchyManager.prototype.m_hierarchySelectionModCount = 0;
oFF.QHierarchyManager.prototype.m_hierarchySelectionName = null;
oFF.QHierarchyManager.prototype.m_hierarchySelectionVersion = null;
oFF.QHierarchyManager.prototype.m_hierarchyVersionVariableName = null;
oFF.QHierarchyManager.prototype.m_includeCustomHierarchies = false;
oFF.QHierarchyManager.prototype.m_initialHierarchyDueDate = null;
oFF.QHierarchyManager.prototype.m_initialHierarchyName = null;
oFF.QHierarchyManager.prototype.m_initialHierarchyVersion = null;
oFF.QHierarchyManager.prototype.m_isHierarchyActive = false;
oFF.QHierarchyManager.prototype.m_lowerLevelNodeAlignment = null;
oFF.QHierarchyManager.prototype.m_maxDrillLevel = 0;
oFF.QHierarchyManager.prototype.m_maxRuntimeLevel = 0;
oFF.QHierarchyManager.prototype.m_memberOfPostedNodeVisibility = null;
oFF.QHierarchyManager.prototype.m_numberOfHierarchies = 0;
oFF.QHierarchyManager.prototype.m_supportsHierarchy = false;
oFF.QHierarchyManager.prototype.m_useDefaultDrillLevelOnChange = false;
oFF.QHierarchyManager.prototype.m_useHierarchyDueDateVariable = false;
oFF.QHierarchyManager.prototype.m_useHierarchyNameVariable = false;
oFF.QHierarchyManager.prototype.m_useHierarchyVersionVariable = false;
oFF.QHierarchyManager.prototype._setHierarchyActive = function(active)
{
	let oldValue = this.m_isHierarchyActive;
	this.m_isHierarchyActive = active;
	this.notifyPropertyBooleanChanged(oFF.QHierarchyProperties.QY_HIERARCHY_ACTIVE, oldValue, active);
};
oFF.QHierarchyManager.prototype._setHierarchyDueDate = function(dueDate)
{
	if (dueDate !== this.getHierarchyDueDate())
	{
		let oldValue = this.m_hierarchySelectionDueDate;
		this.m_hierarchySelectionDueDate = dueDate;
		this.notifyPropertyChanged(oFF.QHierarchyProperties.QY_DUE_DATE, oldValue, dueDate);
	}
};
oFF.QHierarchyManager.prototype.activateHierarchy = function(name, version, dueDate)
{
	this.assertSupportsHierarchyChange();
	this.setHierarchySelection(name, version);
	this.setHierarchyDueDate(dueDate);
	this.setHierarchyActive(true);
};
oFF.QHierarchyManager.prototype.addCustomHierarchy = function(customHierarchy)
{
	if (oFF.isNull(this.m_customHierarchies))
	{
		this.m_customHierarchies = oFF.XList.create();
	}
	for (let i = this.m_customHierarchies.size() - 1; i >= 0; i--)
	{
		if (oFF.XString.isEqual(this.m_customHierarchies.get(i).getName(), customHierarchy.getName()))
		{
			this.m_customHierarchies.removeAt(i);
		}
	}
	this.m_customHierarchies.add(customHierarchy);
};
oFF.QHierarchyManager.prototype.addStickyMember = function(memberName)
{
	if (this.getDrillManager() === null)
	{
		return;
	}
	this.getDrillManager().addStickyMemberForDimension(this.getDimension(), memberName);
};
oFF.QHierarchyManager.prototype.assertSupportsHierarchyChange = function()
{
	if (!this.supportsHierarchy())
	{
		throw oFF.XException.createIllegalStateException(oFF.XStringUtils.concatenate2("Hierarchies are not supported on the dimension ", this.getName()));
	}
	if (this.isDisplayHierarchyFixInFilter())
	{
		throw oFF.XException.createIllegalStateException(oFF.XStringUtils.concatenate2("Hierarchy selections are supported only by setting a dimension name variable on the dimension ", this.getName()));
	}
};
oFF.QHierarchyManager.prototype.clearStickyMembers = function()
{
	if (this.getDrillManager() === null)
	{
		return;
	}
	this.getDrillManager().clearStickyMembersForDimension(this.getDimension());
};
oFF.QHierarchyManager.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originHierarchy = other;
	this.m_supportsHierarchy = originHierarchy.supportsHierarchy();
	this.m_hasExternalHierarchies = originHierarchy.hasExternalHierarchies();
	this.m_hierarchySelectionName = originHierarchy.getHierarchyName();
	this.m_hierarchySelectionVersion = originHierarchy.getHierarchyVersion();
	this.m_hierarchySelectionDueDate = oFF.XObjectExt.cloneIfNotNull(originHierarchy.getHierarchyDueDate());
	this.m_lowerLevelNodeAlignment = originHierarchy.getLowerLevelNodeAlignment();
	this.m_memberOfPostedNodeVisibility = originHierarchy.getMemberOfPostedNodeVisibility();
	this.m_hierarchyNodeCondensation = originHierarchy.hasNodeCondensation();
	this.m_hierarchyNameVariableName = originHierarchy.getHierarchyNameVariableName();
	this.m_useHierarchyNameVariable = originHierarchy.useHierarchyNameVariable();
	this.m_enforceHierarchyNameVariable = originHierarchy.isEnforceHierarchyNameVariable();
	this.m_hierarchyDueDateVariableName = originHierarchy.getHierarchyDueDateVariableName();
	this.m_useHierarchyDueDateVariable = originHierarchy.useHierarchyDueDateVariable();
	this.m_enforceHierarchyDueDateVariableOrDefault = originHierarchy.isEnforceHierarchyDueDateVariableOrDefault();
	this.m_hierarchyVersionVariableName = originHierarchy.getHierarchyVersionVariableName();
	this.m_useHierarchyVersionVariable = originHierarchy.useHierarchyVersionVariable();
	this.m_enforceHierarchyVersionVariableOrDefault = originHierarchy.isEnforceHierarchyVersionVariableOrDefault();
	this.m_useDefaultDrillLevelOnChange = originHierarchy.useDefaultDrillLevelOnChange();
	this.m_isHierarchyActive = originHierarchy.isHierarchyActive();
	this.m_maxDrillLevel = originHierarchy.getMaxDrillLevel();
	this.m_maxRuntimeLevel = originHierarchy.getMaxRuntimeLevel();
	let otherHierarchy = originHierarchy.getHierarchy();
	if (oFF.notNull(otherHierarchy))
	{
		this.m_assignedHierarchy = oFF.QHierarchy.create(this.getContext(), this.getDimension(), otherHierarchy.getName());
		this.m_assignedHierarchy.copyHierarchy(otherHierarchy);
	}
	this.setHierarchies(oFF.XObjectExt.cloneIfNotNull(originHierarchy.getHierarchies()));
	this.m_defaultHierarchyName = originHierarchy.getDefaultHierarchyName();
	this.m_numberOfHierarchies = originHierarchy.getNumberOfHierarchies();
	let otherCustomHierarchyDefinition = originHierarchy.getCustomHierarchyDefinition();
	if (oFF.notNull(otherCustomHierarchyDefinition))
	{
		this.m_customHierarchyDefinition = oFF.QFactory.createCustomHierarchyDefinition(this.getDimensionAccessor().getDimensionByName(otherCustomHierarchyDefinition.getDimensionName()), otherCustomHierarchyDefinition.getDescription());
		this.m_customHierarchyDefinition.copyFrom(otherCustomHierarchyDefinition, flags);
	}
	this.m_displayHierarchyFixInFilter = originHierarchy.isDisplayHierarchyFixInFilter();
	let iterator = originHierarchy.getGeoShapeHierarchies().getIterator();
	while (iterator.hasNext())
	{
		let element = iterator.next();
		let cloneObj = element.cloneOlapComponent(null, null);
		this.getGeoShapeHierarchiesBase().add(cloneObj);
	}
	oFF.XObjectExt.release(iterator);
	this.m_hierarchyNavigationDeltaMode = originHierarchy.isHierarchyNavigationDeltaMode();
	this.m_includeCustomHierarchies = originHierarchy.customHierarchiesIncluded();
	this.m_hasTimeDependentHierarchies = originHierarchy.hasTimeDependentHierarchies();
	this.m_hasVersionDependentHierarchies = originHierarchy.hasVersionDependentHierarchies();
	this.m_initialHierarchyVersion = originHierarchy.getInitialHierarchyVersion();
	this.m_initialHierarchyDueDate = originHierarchy.getInitialHierarchyDueDate();
	this.m_initialHierarchyName = originHierarchy.getInitialHierarchyName();
	this.m_activeDefault = originHierarchy.isHierarchyActiveByDefault();
};
oFF.QHierarchyManager.prototype.createCatalogItemLevelCopy = function(level, existingItem)
{
	let copy = oFF.HierarchyCatalogLevel.createCopy(level);
	oFF.XStream.of(existingItem.getHierarchyLevels()).find((hierarchyLevel) => {
		return oFF.XString.isEqual(hierarchyLevel.getLevelUniqueName(), level.getLevelUniqueName());
	}).ifPresent((existingLevel) => {
		copy.setLevelDimensionName(existingLevel.getLevelDimensionName());
	});
	return copy;
};
oFF.QHierarchyManager.prototype.customHierarchiesIncluded = function()
{
	return this.m_includeCustomHierarchies;
};
oFF.QHierarchyManager.prototype.effectivelyUseHierarchyDueDateVariable = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.getHierarchyDueDateVariableName()) && (this.useHierarchyDueDateVariable() || (this.isHierarchyActive() || this.effectivelyUseHierarchyNameVariable()) && this.isEnforceHierarchyDueDateVariableOrDefault());
};
oFF.QHierarchyManager.prototype.effectivelyUseHierarchyNameVariable = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.getHierarchyNameVariableName()) && (this.useHierarchyNameVariable() || this.isEnforceHierarchyNameVariable());
};
oFF.QHierarchyManager.prototype.effectivelyUseHierarchyVersionVariable = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.getHierarchyVersionVariableName()) && (this.useHierarchyVersionVariable() || (this.isHierarchyActive() || this.effectivelyUseHierarchyNameVariable()) && this.isEnforceHierarchyVersionVariableOrDefault());
};
oFF.QHierarchyManager.prototype.fetchHierarchyCatalog = function(syncType, listener, customIdentifier)
{
	if (syncType !== oFF.SyncType.BLOCKING && syncType !== oFF.SyncType.NON_BLOCKING)
	{
		throw oFF.XException.createIllegalArgumentException("This API only supports SyncType.BLOCKING and SyncType.NON_BLOCKING.");
	}
	let hasMatchingDueDateResult = oFF.notNull(this.m_hierarchyCatalogManager) && (this.m_hierarchyCatalogManager.getFilterHierarchyDate() === null && this.getDueDate() === null || this.m_hierarchyCatalogManager.getFilterHierarchyDate() !== null && this.m_hierarchyCatalogManager.getFilterHierarchyDate().isEqualTo(this.getDueDate()));
	let hasMatchingVariables = !this.getQueryModel().hasVariables() || oFF.notNull(this.m_hierarchyCatalogManager) && this.m_hierarchyCatalogManager.hasMatchingVariables(this.getQueryModel().getVariableManager());
	if (!this.getDimension().isStructure() && (!this.m_hierarchyCatalogFetched || !hasMatchingDueDateResult || !hasMatchingVariables) && this.supportsHierarchy() && (this.getQueryManager().getSystemType() === oFF.SystemType.BW || this.hasExternalHierarchies() || !this.getModelCapabilities().supportsHierarchyLevelMetadata()) && oFF.HierarchyCatalogUtil.supportsHierarchyCatalog2(this.getApplication(), this.getQueryManager().getSystemDescription()))
	{
		let isRequestPending = syncType === oFF.SyncType.NON_BLOCKING && this.m_hierarchyCatalogResultListeners.size() > 0;
		if (oFF.notNull(listener))
		{
			this.m_hierarchyCatalogResultListeners.add(oFF.XPair.create(listener, customIdentifier));
		}
		if (isRequestPending)
		{
			return oFF.ExtResult.create(null, oFF.MessageManager.createMessageManagerExt(this.getSession()));
		}
		return this.getHierarchyCatalog(syncType, false, null);
	}
	else
	{
		let extResult = oFF.ExtResult.create(this.m_hierarchies, oFF.MessageManager.createMessageManagerExt(this.getSession()));
		if (oFF.notNull(listener))
		{
			listener.onHierarchyCatalogResult(extResult, this.m_hierarchies, customIdentifier);
		}
		return extResult;
	}
};
oFF.QHierarchyManager.prototype.fetchHierarchyLevels = function(syncType, listener, customIdentifier, hierarchyUniqueName)
{
	if (syncType !== oFF.SyncType.BLOCKING && syncType !== oFF.SyncType.NON_BLOCKING)
	{
		throw oFF.XException.createIllegalArgumentException("This API only supports SyncType.BLOCKING and SyncType.NON_BLOCKING.");
	}
	let extResult;
	if (!this.getDimension().isStructure() && this.supportsHierarchy() && this.getQueryManager().getSystemType().isTypeOf(oFF.SystemType.HANA) && oFF.HierarchyCatalogUtil.supportsHierarchyCatalog2(this.getApplication(), this.getQueryManager().getSystemDescription()))
	{
		let hasMatchingDueDateResult = oFF.notNull(this.m_hierarchyLevelsCatalogManager) && (this.m_hierarchyLevelsCatalogManager.getFilterHierarchyDate() === null && this.getDueDate() === null || this.m_hierarchyLevelsCatalogManager.getFilterHierarchyDate() !== null && this.m_hierarchyLevelsCatalogManager.getFilterHierarchyDate().isEqualTo(this.getDueDate()));
		let hasMatchingVariables = !this.getQueryModel().hasVariables() || oFF.notNull(this.m_hierarchyLevelsCatalogManager) && this.m_hierarchyLevelsCatalogManager.hasMatchingVariables(this.getQueryModel().getVariableManager());
		if (!hasMatchingDueDateResult || !hasMatchingVariables)
		{
			this.m_hierarchiesWithFetchedLevels.clear();
		}
		let hierarchyNameNotNull = oFF.XStringUtils.nullToEmpty(hierarchyUniqueName);
		let isRequestPending = syncType === oFF.SyncType.NON_BLOCKING && oFF.XCollectionUtils.hasElements(this.m_hierarchyLevelsCatalogResultListeners.getByKey(hierarchyNameNotNull));
		let hasLevelsLoaded = this.m_hierarchiesWithFetchedLevels.contains(hierarchyNameNotNull) || oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyUniqueName) && this.m_hierarchiesWithFetchedLevels.contains("");
		if (!hasLevelsLoaded || isRequestPending)
		{
			this.m_hierarchiesWithFetchedLevels.add(hierarchyNameNotNull);
			if (oFF.notNull(listener))
			{
				if (!this.m_hierarchyLevelsCatalogResultListeners.containsKey(hierarchyNameNotNull))
				{
					this.m_hierarchyLevelsCatalogResultListeners.put(hierarchyNameNotNull, oFF.XList.create());
				}
				this.m_hierarchyLevelsCatalogResultListeners.getByKey(hierarchyNameNotNull).add(oFF.XPair.create(listener, customIdentifier));
			}
			return isRequestPending ? oFF.ExtResult.create(null, oFF.MessageManager.createMessageManagerExt(this.getSession())) : this.getHierarchyCatalog(syncType, true, hierarchyUniqueName);
		}
		else
		{
			if (oFF.notNull(this.m_hierarchies) && oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyUniqueName))
			{
				let hierarchyCatalogResult = oFF.QFactory.createHierarchyCatalogResult();
				let catalogItem = oFF.XCollectionUtils.findFirst(this.m_hierarchies.getObjects(), (item) => {
					return oFF.XString.isEqual(this.getHierarchyUniqueNameFromCatalogItem(item), hierarchyUniqueName);
				});
				if (oFF.notNull(catalogItem))
				{
					hierarchyCatalogResult.addItem(catalogItem);
				}
				extResult = oFF.ExtResult.create(hierarchyCatalogResult, oFF.MessageManager.createMessageManagerExt(this.getSession()));
			}
			else
			{
				extResult = oFF.ExtResult.create(this.m_hierarchies, oFF.MessageManager.createMessageManagerExt(this.getSession()));
			}
		}
	}
	else
	{
		extResult = oFF.ExtResult.create(null, oFF.MessageManager.createMessageManagerExt(this.getSession()));
	}
	if (oFF.notNull(listener))
	{
		listener.onHierarchyCatalogResult(extResult, extResult.getData(), customIdentifier);
	}
	return extResult;
};
oFF.QHierarchyManager.prototype.getCatalogItemHierarchyUniqueName = function(hierarchyName)
{
	let uniqueName = this.getHierarchyUniqueName(hierarchyName);
	if (oFF.notNull(this.m_hierarchies) && oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyName))
	{
		let catalogItem = oFF.XCollectionUtils.findFirst(this.m_hierarchies.getObjects(), (item) => {
			return oFF.XString.isEqual(item.getHierarchyName(), hierarchyName);
		});
		if (oFF.notNull(catalogItem))
		{
			uniqueName = this.getHierarchyUniqueNameFromCatalogItem(catalogItem);
		}
	}
	return uniqueName;
};
oFF.QHierarchyManager.prototype.getCustomHierarchies = function()
{
	return this.m_customHierarchies;
};
oFF.QHierarchyManager.prototype.getCustomHierarchyDefinition = function()
{
	if (oFF.notNull(this.m_customHierarchyDefinition))
	{
		if (this.m_customHierarchyDefinition.getName() === null)
		{
			return this.m_customHierarchyDefinition;
		}
		this.m_hierarchySelectionName = this.m_customHierarchyDefinition.getName();
		this.m_customHierarchyDefinition = null;
	}
	return this.getOlapEnv().getCustomHierarchyRepository().getCustomHierarchyDefinitionByName(this.m_hierarchySelectionName);
};
oFF.QHierarchyManager.prototype.getDefaultHierarchyName = function()
{
	return this.m_defaultHierarchyName;
};
oFF.QHierarchyManager.prototype.getDefaultInitialDrillLevel = function()
{
	let metaValue = this.getMetaValue(oFF.QHierarchyProperties.QY_DRILL_LEVEL);
	if (oFF.notNull(metaValue))
	{
		return oFF.XInteger.convertFromString(metaValue.toString());
	}
	return this.getInitialDrillLevel();
};
oFF.QHierarchyManager.prototype.getDimension = function()
{
	return this.getParent();
};
oFF.QHierarchyManager.prototype.getDueDate = function()
{
	let newKeyDate = this.m_hierarchyCatalogKeyDate;
	if (oFF.isNull(newKeyDate))
	{
		let hierarchy = this.getDimension().getHierarchy();
		newKeyDate = oFF.isNull(hierarchy) ? null : hierarchy.getHierarchyDueDate();
	}
	if (oFF.isNull(newKeyDate) && this.getQueryModel().getCubeInfo() !== null)
	{
		newKeyDate = this.getQueryModel().getCubeInfo().getDueDate();
	}
	let bValidNewKeyDate = oFF.notNull(newKeyDate) && newKeyDate.getDayOfMonth() > 0 && newKeyDate.getMonthOfYear() > 0 && newKeyDate.getMonthOfYear() > 0;
	return bValidNewKeyDate ? newKeyDate : null;
};
oFF.QHierarchyManager.prototype.getEffectiveHierarchyDueDate = function()
{
	return this.isEnforceHierarchyDueDateVariableOrDefault() ? null : this.getHierarchyDueDate();
};
oFF.QHierarchyManager.prototype.getEffectiveHierarchyVersion = function()
{
	return this.isEnforceHierarchyVersionVariableOrDefault() ? null : this.getHierarchyVersion();
};
oFF.QHierarchyManager.prototype.getGeoShapeHierarchies = function()
{
	if (oFF.isNull(this.m_geoHierarchies))
	{
		return null;
	}
	let geoHierarchies = oFF.XList.create();
	oFF.XCollectionUtils.addAll(geoHierarchies, this.m_geoHierarchies);
	return geoHierarchies;
};
oFF.QHierarchyManager.prototype.getGeoShapeHierarchiesBase = function()
{
	return this.m_geoHierarchies;
};
oFF.QHierarchyManager.prototype.getHierarchies = function()
{
	return this.m_hierarchies;
};
oFF.QHierarchyManager.prototype.getHierarchy = function()
{
	return this.supportsHierarchy() ? this.m_assignedHierarchy : null;
};
oFF.QHierarchyManager.prototype.getHierarchyCatalog = function(syncType, requestLevels, hierarchyNameFilter)
{
	let catalogManager = requestLevels ? this.m_hierarchyLevelsCatalogManager : this.m_hierarchyCatalogManager;
	if (oFF.isNull(catalogManager))
	{
		let serviceConfig = oFF.OlapApiModule.SERVICE_TYPE_HIERARCHY_CATALOG.createServiceConfig(this.getApplication());
		serviceConfig.setSystemName(this.getQueryManager().getSystemName());
		serviceConfig.setDataSourceName(this.getQueryManager().getDataSource().getFullQualifiedName());
		serviceConfig.setDimension(this.getDimension());
		serviceConfig.setRequestHierarchyLevels(requestLevels);
		let processHierarchyCatalogManagerCreation;
		if (syncType === oFF.SyncType.BLOCKING)
		{
			processHierarchyCatalogManagerCreation = serviceConfig.processHierarchyCatalogManagerCreation(syncType, null, null);
			if (!processHierarchyCatalogManagerCreation.hasErrors() && !processHierarchyCatalogManagerCreation.containsCode(oFF.Severity.WARNING, oFF.ErrorCodes.INVALID_DIMENSION))
			{
				if (requestLevels)
				{
					this.m_hierarchyLevelsCatalogManager = processHierarchyCatalogManagerCreation.getData();
					catalogManager = this.m_hierarchyLevelsCatalogManager;
				}
				else
				{
					this.m_hierarchyCatalogManager = processHierarchyCatalogManagerCreation.getData();
					catalogManager = this.m_hierarchyCatalogManager;
				}
			}
			else
			{
				let errorResult = oFF.ExtResult.createWithErrorMessage("failed to create hierarchy catalog manager");
				this.processHierarchyResultListeners(errorResult, null, requestLevels, hierarchyNameFilter);
				return errorResult;
			}
		}
		else
		{
			serviceConfig.processHierarchyCatalogManagerCreation(syncType, this, oFF.XStringValue.create(hierarchyNameFilter));
			return oFF.ExtResult.create(null, oFF.MessageManager.createMessageManagerExt(this.getSession()));
		}
	}
	return this.processHierarchyResult(catalogManager, syncType, hierarchyNameFilter);
};
oFF.QHierarchyManager.prototype.getHierarchyDueDate = function()
{
	return this.supportsHierarchy() ? this.m_hierarchySelectionDueDate : null;
};
oFF.QHierarchyManager.prototype.getHierarchyDueDateVariableName = function()
{
	return this.m_hierarchyDueDateVariableName;
};
oFF.QHierarchyManager.prototype.getHierarchyName = function()
{
	return this.supportsHierarchy() ? this.m_hierarchySelectionName : null;
};
oFF.QHierarchyManager.prototype.getHierarchyNameVariableName = function()
{
	return this.m_hierarchyNameVariableName;
};
oFF.QHierarchyManager.prototype.getHierarchyObjects = function()
{
	let hierarchies = this.getHierarchies();
	if (oFF.isNull(hierarchies))
	{
		return oFF.XList.create();
	}
	let hierarchyObjects = hierarchies.getObjects();
	if (oFF.isNull(hierarchyObjects))
	{
		return oFF.XList.create();
	}
	return hierarchyObjects;
};
oFF.QHierarchyManager.prototype.getHierarchyUniqueName = function(hierarchyName)
{
	return oFF.XStringUtils.concatenate5("[", this.getDimension().getName(), "].[", hierarchyName, "]");
};
oFF.QHierarchyManager.prototype.getHierarchyUniqueNameFromCatalogItem = function(item)
{
	let name = item.getHierarchyUniqueName();
	return oFF.XStringUtils.isNotNullAndNotEmpty(name) ? name : this.getHierarchyUniqueName(item.getHierarchyName());
};
oFF.QHierarchyManager.prototype.getHierarchyValueHelp = function(syncType)
{
	if (oFF.isNull(this.m_hierarchyHelp))
	{
		this.m_hierarchyHelp = oFF.QHierarchyValueHelp.createModelComponent(this.getContext(), this.getDimension(), "Available Hierarchies", syncType);
	}
	return this.m_hierarchyHelp;
};
oFF.QHierarchyManager.prototype.getHierarchyVersion = function()
{
	return this.supportsHierarchy() ? this.m_hierarchySelectionVersion : null;
};
oFF.QHierarchyManager.prototype.getHierarchyVersionVariableName = function()
{
	return this.m_hierarchyVersionVariableName;
};
oFF.QHierarchyManager.prototype.getInitialDrillLevel = function()
{
	if (this.getDrillManager() === null)
	{
		return 0;
	}
	let rootOperation = this.getRootDrillOperation();
	return oFF.isNull(rootOperation) ? 0 : rootOperation.getRelativeLevelCount();
};
oFF.QHierarchyManager.prototype.getInitialDrillOffset = function()
{
	if (this.getDrillManager() === null)
	{
		return 0;
	}
	let rootOperation = this.getRootDrillOperation();
	return oFF.isNull(rootOperation) ? 0 : rootOperation.getRelativeLevelOffset();
};
oFF.QHierarchyManager.prototype.getInitialHierarchyDueDate = function()
{
	return this.m_initialHierarchyDueDate;
};
oFF.QHierarchyManager.prototype.getInitialHierarchyName = function()
{
	return this.m_initialHierarchyName;
};
oFF.QHierarchyManager.prototype.getInitialHierarchyVersion = function()
{
	return this.m_initialHierarchyVersion;
};
oFF.QHierarchyManager.prototype.getLeveledHierarchies = function()
{
	return this.getQueryManager().getMetadataModel().getLeveledHierarchiesByDimension(this.getDimension());
};
oFF.QHierarchyManager.prototype.getLeveledHierarchy = function(name)
{
	let leveledHierarchies = this.getLeveledHierarchies();
	if (oFF.notNull(leveledHierarchies))
	{
		let size = leveledHierarchies.size();
		for (let i = 0; i < size; i++)
		{
			let leveledHierarchy = leveledHierarchies.get(i);
			if (oFF.XString.isEqual(leveledHierarchy.getName(), name))
			{
				return leveledHierarchy;
			}
		}
	}
	return null;
};
oFF.QHierarchyManager.prototype.getLowerLevelNodeAlignment = function()
{
	return this.m_lowerLevelNodeAlignment;
};
oFF.QHierarchyManager.prototype.getMaxDrillLevel = function()
{
	return this.m_maxDrillLevel;
};
oFF.QHierarchyManager.prototype.getMaxRuntimeLevel = function()
{
	return this.m_maxRuntimeLevel;
};
oFF.QHierarchyManager.prototype.getMemberOfPostedNodeVisibility = function()
{
	return this.m_memberOfPostedNodeVisibility;
};
oFF.QHierarchyManager.prototype.getNumberOfHierarchies = function()
{
	return this.m_numberOfHierarchies;
};
oFF.QHierarchyManager.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.HIERARCHY_MANAGER;
};
oFF.QHierarchyManager.prototype.getRestNodeName = function()
{
	let hierarchyObjects = this.getHierarchyObjects();
	let size = hierarchyObjects.size();
	for (let i = 0; i < size; i++)
	{
		let hierarchyCatalogItem = hierarchyObjects.get(i);
		if (oFF.XString.isEqual(hierarchyCatalogItem.getHierarchyName(), this.getHierarchyName()))
		{
			return hierarchyCatalogItem.getRestNode();
		}
	}
	return null;
};
oFF.QHierarchyManager.prototype.getRootDrillOperation = function()
{
	let drillManager = this.getDrillManager();
	let dimension = this.getDimension();
	return drillManager.getRootExpandingLevels(dimension);
};
oFF.QHierarchyManager.prototype.getStickyMembers = function()
{
	if (this.getDrillManager() === null)
	{
		return null;
	}
	return this.getDrillManager().getStickyMembersByDimension(this.getDimension());
};
oFF.QHierarchyManager.prototype.getVirtualRootNodeName = function()
{
	let hierarchyObjects = this.getHierarchyObjects();
	let size = hierarchyObjects.size();
	for (let i = 0; i < size; i++)
	{
		let hierarchyCatalogItem = hierarchyObjects.get(i);
		if (oFF.XString.isEqual(hierarchyCatalogItem.getHierarchyName(), this.getHierarchyName()))
		{
			return hierarchyCatalogItem.getVirtualRootNode();
		}
	}
	return null;
};
oFF.QHierarchyManager.prototype.hasDefaultLowerLevelNodeAlignment = function()
{
	return this.m_lowerLevelNodeAlignment === oFF.Alignment.DEFAULT_VALUE;
};
oFF.QHierarchyManager.prototype.hasExternalHierarchies = function()
{
	return this.m_hasExternalHierarchies;
};
oFF.QHierarchyManager.prototype.hasNodeCondensation = function()
{
	return this.m_hierarchyNodeCondensation;
};
oFF.QHierarchyManager.prototype.hasStickyMember = function(memberName)
{
	if (this.getDrillManager() === null)
	{
		return false;
	}
	return this.getDrillManager().hasStickyMemberByDimension(this.getDimension(), memberName);
};
oFF.QHierarchyManager.prototype.hasStickyMembers = function()
{
	if (this.getDrillManager() === null)
	{
		return false;
	}
	return this.getDrillManager().hasStickyMembersByDimension(this.getDimension());
};
oFF.QHierarchyManager.prototype.hasTimeDependentHierarchies = function()
{
	return this.m_hasTimeDependentHierarchies;
};
oFF.QHierarchyManager.prototype.hasVersionDependentHierarchies = function()
{
	return this.m_hasVersionDependentHierarchies;
};
oFF.QHierarchyManager.prototype.hasZoomDrill = function()
{
	if (this.getDrillManager() === null)
	{
		return false;
	}
	return this.getDrillManager().hasZoomDrill(this.getDimension());
};
oFF.QHierarchyManager.prototype.isDisplayHierarchyFixInFilter = function()
{
	return this.m_displayHierarchyFixInFilter;
};
oFF.QHierarchyManager.prototype.isEnforceAnyHierarchyInfoVariable = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.getHierarchyNameVariableName()) && this.isEnforceHierarchyNameVariable() || oFF.XStringUtils.isNotNullAndNotEmpty(this.getHierarchyDueDateVariableName()) && this.isEnforceHierarchyDueDateVariableOrDefault() || oFF.XStringUtils.isNotNullAndNotEmpty(this.getHierarchyVersionVariableName()) && this.isEnforceHierarchyVersionVariableOrDefault();
};
oFF.QHierarchyManager.prototype.isEnforceHierarchyDueDateVariableOrDefault = function()
{
	return this.m_enforceHierarchyDueDateVariableOrDefault;
};
oFF.QHierarchyManager.prototype.isEnforceHierarchyNameVariable = function()
{
	return this.m_enforceHierarchyNameVariable;
};
oFF.QHierarchyManager.prototype.isEnforceHierarchyVersionVariableOrDefault = function()
{
	return this.m_enforceHierarchyVersionVariableOrDefault;
};
oFF.QHierarchyManager.prototype.isExplicitDrillOnFilteredNodes = function()
{
	if (this.getDrillManager() === null)
	{
		return false;
	}
	return this.getDrillManager().isExplicitDrillOnFilteredNodes(this.getDimension());
};
oFF.QHierarchyManager.prototype.isHierarchyActive = function()
{
	return this.supportsHierarchy() && this.m_isHierarchyActive;
};
oFF.QHierarchyManager.prototype.isHierarchyActiveBeforeAutoSubmit = function()
{
	return this.m_activeBeforeAutoSubmit;
};
oFF.QHierarchyManager.prototype.isHierarchyActiveByDefault = function()
{
	return this.m_activeDefault;
};
oFF.QHierarchyManager.prototype.isHierarchyAssigned = function()
{
	if (this.supportsHierarchy())
	{
		return this.getHierarchy() !== null;
	}
	return false;
};
oFF.QHierarchyManager.prototype.isHierarchyAssignedAndActive = function()
{
	if (this.supportsHierarchy())
	{
		return this.isHierarchyAssigned() && this.isHierarchyActive();
	}
	return false;
};
oFF.QHierarchyManager.prototype.isHierarchyNavigationDeltaMode = function()
{
	return this.m_hierarchyNavigationDeltaMode;
};
oFF.QHierarchyManager.prototype.isInitialDrillLevelZeroBased = function()
{
	return this.getDimension().isInitialDrillLevelZeroBased();
};
oFF.QHierarchyManager.prototype.mapHierarchyLevelsResult = function(extResult)
{
	if (extResult.isValid() && extResult.getData() !== null && oFF.notNull(this.m_hierarchies))
	{
		let dimensionHierarchiesResult = oFF.HierarchyCatalogResult.create();
		oFF.XCollectionUtils.forEach(this.m_hierarchies.getObjects(), (hierarchyItem) => {
			let resultCatalogItem = oFF.XCollectionUtils.findFirst(extResult.getData().getObjects(), (resultItem) => {
				return oFF.XString.isEqual(this.getHierarchyUniqueNameFromCatalogItem(resultItem), this.getHierarchyUniqueNameFromCatalogItem(hierarchyItem));
			});
			if (oFF.notNull(resultCatalogItem))
			{
				dimensionHierarchiesResult.addItem(hierarchyItem);
				hierarchyItem.setSupportsHierarchyLevels(resultCatalogItem.supportsHierarchyLevels());
				if (resultCatalogItem.supportsHierarchyLevels())
				{
					let levels = oFF.XList.create();
					oFF.XCollectionUtils.forEach(resultCatalogItem.getHierarchyLevels(), (level) => {
						levels.add(this.createCatalogItemLevelCopy(level, hierarchyItem));
					});
					hierarchyItem.setHierarchyLevels(levels);
				}
			}
		});
		return oFF.ExtResult.create(dimensionHierarchiesResult, extResult);
	}
	return extResult;
};
oFF.QHierarchyManager.prototype.mergeDeepRecursive = function(settings, other)
{
	let fixedInFilter = this.isDisplayHierarchyFixInFilter();
	this.setDisplayHierarchyFixInFilter(false);
	let otherObj = other;
	if (this.supportsHierarchy())
	{
		if (!otherObj.isHierarchyActive())
		{
			this.setHierarchyActive(false);
		}
		else
		{
			let hierarchyName = otherObj.getHierarchyName();
			let otherDueDate = otherObj.getHierarchyDueDate();
			let hierarchyVersion = otherObj.getHierarchyVersion();
			let useHierarchyNameVariable = otherObj.useHierarchyNameVariable();
			let useHierarchyDueDateVariable = otherObj.useHierarchyDueDateVariable();
			let useHierarchyVersionVariable = otherObj.useHierarchyVersionVariable();
			let delta = !this.isHierarchyActive();
			if (!delta)
			{
				delta = !oFF.QHierarchyManager.isStringSimilar(hierarchyName, this.getHierarchyName());
				if (!delta)
				{
					delta = !oFF.QHierarchyManager.isStringSimilar(hierarchyVersion, this.getHierarchyVersion());
					if (!delta)
					{
						let myDueDate = this.getHierarchyDueDate();
						if (oFF.isNull(myDueDate) && oFF.isNull(otherDueDate))
						{
							delta = false;
						}
						else if (oFF.notNull(myDueDate) && oFF.notNull(otherDueDate))
						{
							delta = !oFF.XString.isEqual(otherDueDate.toIsoFormat(), myDueDate.toIsoFormat());
						}
						else
						{
							delta = true;
						}
					}
				}
			}
			if (settings.isInitialBWMerge() || delta)
			{
				this.activateHierarchy(hierarchyName, hierarchyVersion, otherDueDate);
				let assignedHierarchy = this.getHierarchy();
				assignedHierarchy.setHierarchyDescription(otherObj.getHierarchy().getHierarchyDescription());
				this.setUseHierarchyDueDateVariable(useHierarchyDueDateVariable);
				if (useHierarchyDueDateVariable)
				{
					this.setHierarchyDueDateVariableName(otherObj.getHierarchyDueDateVariableName());
				}
				let queryManager = this.getQueryManagerBase();
				if (oFF.notNull(queryManager) && queryManager.isExecuteAutoVariableSubmit())
				{
					this.setUseHierarchyNameVariable(useHierarchyNameVariable);
					if (useHierarchyNameVariable)
					{
						this.setHierarchyNameVariableName(otherObj.getHierarchyNameVariableName());
					}
					this.setUseHierarchyVersionVariable(useHierarchyVersionVariable);
					if (useHierarchyVersionVariable)
					{
						this.setHierarchyVersionVariableName(otherObj.getHierarchyVersionVariableName());
					}
				}
				this.setInitialDrillLevel(otherObj.getInitialDrillLevel());
				this.setLowerLevelNodeAlignment(otherObj.getLowerLevelNodeAlignment());
				this.setHasNodeCondensation(otherObj.hasNodeCondensation());
			}
		}
	}
	this.setDisplayHierarchyFixInFilter(fixedInFilter);
};
oFF.QHierarchyManager.prototype.onHierarchyCatalogManagerCreated = function(extResult, hierarchyCatalogManager, customIdentifier)
{
	let isHierarchyLevelsRequest = hierarchyCatalogManager.isHierarchyLevelsRequest();
	if (!extResult.hasErrors())
	{
		if (isHierarchyLevelsRequest)
		{
			this.m_hierarchyLevelsCatalogManager = hierarchyCatalogManager;
		}
		else
		{
			this.m_hierarchyCatalogManager = hierarchyCatalogManager;
		}
		this.processHierarchyResult(hierarchyCatalogManager, oFF.SyncType.NON_BLOCKING, customIdentifier.toString());
	}
	else
	{
		this.processHierarchyResultListeners(oFF.ExtResult.createWithErrorMessage("failed to create hierarchy catalog manager"), null, isHierarchyLevelsRequest, hierarchyCatalogManager.getFilterHierarchyName());
	}
};
oFF.QHierarchyManager.prototype.onHierarchyCatalogResult = function(extResult, result, customIdentifier)
{
	let catalogManager = customIdentifier;
	let isHierarchyLevelsResult = catalogManager.isHierarchyLevelsRequest();
	if (isHierarchyLevelsResult)
	{
		let dimensionHierarchiesResult = this.mapHierarchyLevelsResult(extResult);
		this.processHierarchyResultListeners(dimensionHierarchiesResult, dimensionHierarchiesResult.getData(), isHierarchyLevelsResult, catalogManager.getFilterHierarchyName());
	}
	else
	{
		this.m_hierarchyCatalogFetched = true;
		if (!extResult.hasErrors())
		{
			this.setHierarchies(result);
			this.notifyNodeChanged();
		}
		this.processHierarchyResultListeners(extResult, result, isHierarchyLevelsResult, catalogManager.getFilterHierarchyName());
	}
};
oFF.QHierarchyManager.prototype.processHierarchyResult = function(catalogManager, syncType, hierarchyNameFilter)
{
	this.setHierarchiesKeyDate(catalogManager);
	catalogManager.setIncludeCustomHierarchies(this.customHierarchiesIncluded());
	if (oFF.XStringUtils.isNullOrEmpty(hierarchyNameFilter) && catalogManager === this.m_hierarchyLevelsCatalogManager)
	{
		catalogManager.setFilterHierarchyNames(this.m_hierarchies);
	}
	else
	{
		catalogManager.setFilterHierarchyName(hierarchyNameFilter, oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyNameFilter));
	}
	let extResult = catalogManager.processGetResult(syncType, this, catalogManager);
	if (syncType === oFF.SyncType.BLOCKING && catalogManager === this.m_hierarchyLevelsCatalogManager)
	{
		return this.mapHierarchyLevelsResult(extResult);
	}
	return extResult;
};
oFF.QHierarchyManager.prototype.processHierarchyResultListeners = function(extResult, result, isHierarchyLevelsResult, hierarchyName)
{
	let listeners = isHierarchyLevelsResult ? this.m_hierarchyLevelsCatalogResultListeners.getByKey(oFF.XStringUtils.nullToEmpty(hierarchyName)) : this.m_hierarchyCatalogResultListeners;
	let size = oFF.notNull(listeners) ? listeners.size() : 0;
	for (let i = size - 1; i >= 0; i--)
	{
		let listenerPair = listeners.removeAt(i);
		let listener = listenerPair.getFirstObject();
		listener.onHierarchyCatalogResult(extResult, result, listenerPair.getSecondObject());
	}
};
oFF.QHierarchyManager.prototype.reevaluateHierarchySelection = function()
{
	if (this.m_hierarchySelectionModCount !== this.m_assignedHierarchyModCount)
	{
		this.assertSupportsHierarchyChange();
		if (!this.setHierarchyActive(this.isHierarchyActive()))
		{
			this.notifyNodeChanged();
		}
	}
};
oFF.QHierarchyManager.prototype.releaseObject = function()
{
	this.m_hierarchySelectionName = null;
	this.m_hierarchySelectionVersion = null;
	this.m_hierarchySelectionDueDate = null;
	this.m_lowerLevelNodeAlignment = null;
	this.m_memberOfPostedNodeVisibility = null;
	this.m_hierarchyNameVariableName = null;
	this.m_hierarchyDueDateVariableName = null;
	this.m_hierarchyVersionVariableName = null;
	this.m_hierarchies = oFF.XObjectExt.release(this.m_hierarchies);
	this.m_hierarchiesWithFetchedLevels = oFF.XObjectExt.release(this.m_hierarchiesWithFetchedLevels);
	this.m_assignedHierarchy = oFF.XObjectExt.release(this.m_assignedHierarchy);
	this.m_hierarchyHelp = oFF.XObjectExt.release(this.m_hierarchyHelp);
	this.m_defaultHierarchyName = null;
	this.m_customHierarchyDefinition = oFF.XObjectExt.release(this.m_customHierarchyDefinition);
	this.m_customHierarchies = oFF.XObjectExt.release(this.m_customHierarchies);
	this.m_hierarchyCatalogManager = oFF.XObjectExt.release(this.m_hierarchyCatalogManager);
	this.m_hierarchyLevelsCatalogManager = oFF.XObjectExt.release(this.m_hierarchyLevelsCatalogManager);
	this.m_hierarchyCatalogResultListeners = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_hierarchyCatalogResultListeners);
	this.m_hierarchyLevelsCatalogResultListeners = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_hierarchyLevelsCatalogResultListeners);
	this.m_hierarchyCatalogFetched = false;
	this.m_includeCustomHierarchies = false;
	this.m_hasExternalHierarchies = false;
	this.m_initialHierarchyName = null;
	this.m_initialHierarchyDueDate = null;
	this.m_initialHierarchyVersion = null;
	this.m_activeDefault = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QHierarchyManager.prototype.removeStickyMember = function(memberName)
{
	if (this.getDrillManager() === null)
	{
		return;
	}
	this.getDrillManager().removeStickyMemberForDimension(this.getDimension(), memberName);
};
oFF.QHierarchyManager.prototype.resetHierarchyCatalogFetched = function()
{
	this.m_hierarchyCatalogFetched = false;
};
oFF.QHierarchyManager.prototype.setCustomHierarchyDefinition = function(customHierarchyDefinition)
{
	if (this.getModelCapabilities().supportsCustomHierarchy())
	{
		if (oFF.isNull(customHierarchyDefinition))
		{
			if (this.getCustomHierarchyDefinition() !== null)
			{
				this.setHierarchy(null);
				this.m_customHierarchyDefinition = null;
				this.m_hierarchySelectionName = null;
				this._setHierarchyActive(false);
			}
		}
		else if (customHierarchyDefinition.getName() === null)
		{
			this.setHierarchy(null);
			this.m_customHierarchyDefinition = customHierarchyDefinition;
			this.m_hierarchySelectionName = null;
			this._setHierarchyActive(true);
		}
		else if (!oFF.XString.isEqual(customHierarchyDefinition.getName(), this.m_hierarchySelectionName))
		{
			this.setHierarchy(null);
			this.m_hierarchySelectionName = customHierarchyDefinition.getName();
			this._setHierarchyActive(true);
			this.getOlapEnv().getCustomHierarchyRepository().addCustomHierarchy(customHierarchyDefinition);
		}
	}
};
oFF.QHierarchyManager.prototype.setDefaultHierarchyName = function(defaultHierarchyName)
{
	this.m_defaultHierarchyName = defaultHierarchyName;
};
oFF.QHierarchyManager.prototype.setDisplayHierarchyFixInFilter = function(displayHierarchyFixInFilter)
{
	if (this.getModelCapabilities() !== null && this.getModelCapabilities().supportsDisplayHierarchyFixInFilter())
	{
		this.m_displayHierarchyFixInFilter = displayHierarchyFixInFilter;
	}
};
oFF.QHierarchyManager.prototype.setEnforceHierarchyDueDateVariableOrDefault = function(enforce)
{
	if (this.m_enforceHierarchyDueDateVariableOrDefault !== enforce)
	{
		this.m_enforceHierarchyDueDateVariableOrDefault = enforce;
		this.notifyNodeChanged();
	}
};
oFF.QHierarchyManager.prototype.setEnforceHierarchyNameVariable = function(enforce)
{
	if (this.m_enforceHierarchyNameVariable !== enforce)
	{
		this.m_enforceHierarchyNameVariable = enforce;
		this.notifyNodeChanged();
	}
};
oFF.QHierarchyManager.prototype.setEnforceHierarchyVersionVariableOrDefault = function(enforce)
{
	if (this.m_enforceHierarchyVersionVariableOrDefault !== enforce)
	{
		this.m_enforceHierarchyVersionVariableOrDefault = enforce;
		this.notifyNodeChanged();
	}
};
oFF.QHierarchyManager.prototype.setExplicitDrillOnFilteredNodes = function(drillOnFilteredNodes)
{
	if (this.getDrillManager() === null)
	{
		return;
	}
	this.getDrillManager().setExplicitDrillOnFilteredNodes(this.getDimension(), drillOnFilteredNodes);
};
oFF.QHierarchyManager.prototype.setHasExternalHierarchies = function(hasExternalHierarchies)
{
	this.m_hasExternalHierarchies = hasExternalHierarchies;
};
oFF.QHierarchyManager.prototype.setHasNodeCondensation = function(condense)
{
	let oldValue = this.m_hierarchyNodeCondensation;
	this.m_hierarchyNodeCondensation = condense;
	this.notifyPropertyBooleanChanged(oFF.QHierarchyProperties.QY_NODE_CONDENSATION, oldValue, condense);
};
oFF.QHierarchyManager.prototype.setHasTimeDependentHierarchies = function(hasTimeDependentHierarchies)
{
	this.m_hasTimeDependentHierarchies = hasTimeDependentHierarchies;
};
oFF.QHierarchyManager.prototype.setHasVersionDependentHierarchies = function(hasVersionDependentHierarchies)
{
	this.m_hasVersionDependentHierarchies = hasVersionDependentHierarchies;
};
oFF.QHierarchyManager.prototype.setHierarchies = function(hierarchies)
{
	this.m_hierarchies = hierarchies;
	this.m_hierarchiesWithFetchedLevels.clear();
};
oFF.QHierarchyManager.prototype.setHierarchiesKeyDate = function(hierarchyCatalogManager)
{
	let newKeyDate = this.getDueDate();
	if (oFF.notNull(newKeyDate))
	{
		if (oFF.notNull(hierarchyCatalogManager))
		{
			let oldKeyDate = hierarchyCatalogManager.getFilterHierarchyDate();
			if (!newKeyDate.isEqualTo(oldKeyDate))
			{
				hierarchyCatalogManager.setFilterHierarchyDate(newKeyDate, true);
			}
		}
	}
};
oFF.QHierarchyManager.prototype.setHierarchy = function(hierarchy)
{
	this.assertSupportsHierarchyChange();
	if (!this.isHierarchyAssigned() || !this.getHierarchy().isEqualTo(hierarchy))
	{
		this._setHierarchyActive(oFF.notNull(hierarchy));
		if (oFF.isNull(hierarchy))
		{
			this.setHierarchySelection(null, null);
			this.setHierarchyDueDate(null);
			this.m_customHierarchyDefinition = null;
		}
		else
		{
			this.getQueryModel().assertHierarchyUniqueName(this.getHierarchyUniqueName(this.m_hierarchySelectionName), false);
			this.m_hierarchySelectionName = hierarchy.getName();
			this.m_hierarchySelectionVersion = hierarchy.getHierarchyVersion();
			let dueDate = hierarchy.getHierarchyDueDate();
			if (oFF.isNull(dueDate))
			{
				dueDate = hierarchy.getDateFrom();
			}
			this._setHierarchyDueDate(dueDate);
			if (oFF.notNull(this.m_customHierarchyDefinition) && !oFF.XString.isEqual(this.m_customHierarchyDefinition.getName(), hierarchy.getName()))
			{
				this.m_customHierarchyDefinition = null;
			}
		}
		this.m_hierarchySelectionModCount++;
		this.m_assignedHierarchyModCount = this.m_hierarchySelectionModCount;
		this.m_assignedHierarchy = hierarchy;
		this.notifyNodeChanged();
	}
	else
	{
		this.m_hierarchySelectionName = hierarchy.getName();
		this.m_hierarchySelectionVersion = hierarchy.getHierarchyVersion();
		this.m_hierarchySelectionDueDate = hierarchy.getHierarchyDueDate();
	}
};
oFF.QHierarchyManager.prototype.setHierarchyActive = function(active)
{
	this.assertSupportsHierarchyChange();
	let isChanged = false;
	if (active)
	{
		if (!this.isHierarchyAssigned() && this.getCustomHierarchyDefinition() !== null)
		{
			this._setHierarchyActive(true);
			this.m_hierarchySelectionModCount++;
			this.notifyPropertyBooleanChanged(oFF.QHierarchyProperties.QY_HIERARCHY_ACTIVE, false, true);
		}
		else if (this.isHierarchyAssigned() || this.m_hierarchySelectionModCount !== this.m_assignedHierarchyModCount)
		{
			if (this.getHierarchyName() === null)
			{
				throw oFF.XException.createIllegalArgumentException("No hierarchy name is given");
			}
			let currentHierarchy = this.getHierarchy();
			let hierarchy;
			if (oFF.notNull(currentHierarchy) && currentHierarchy.isCustomHierarchy())
			{
				hierarchy = oFF.QHierarchy.createCustomHierarchy(this.getContext(), this.getDimension(), this.getHierarchyName(), currentHierarchy.getHierarchyDescription());
			}
			else
			{
				hierarchy = oFF.QHierarchy.create(this.getContext(), this.getDimension(), this.getHierarchyName());
				let currentHierarchyDescription = oFF.notNull(currentHierarchy) ? currentHierarchy.getHierarchyDescription() : null;
				hierarchy.setHierarchyDescription(currentHierarchyDescription);
			}
			hierarchy.setHierarchyVersion(this.getHierarchyVersion());
			hierarchy.setHierarchyDueDate(this.getHierarchyDueDate());
			if (!hierarchy.isEqualTo(currentHierarchy))
			{
				let oldHierarchyUniqueName = this.getHierarchyUniqueName(this.getHierarchyName());
				this.getQueryModel().assertHierarchyUniqueName(oldHierarchyUniqueName, false);
				this.setHierarchy(hierarchy);
				isChanged = true;
			}
			if (!this.isHierarchyActive())
			{
				isChanged = true;
				this.m_hierarchySelectionModCount++;
			}
		}
	}
	else
	{
		if (this.isHierarchyActive())
		{
			isChanged = true;
			this.m_hierarchySelectionModCount++;
		}
	}
	if (isChanged)
	{
		let newHierarchyUniqueName = this.getHierarchyUniqueName(this.getHierarchyName());
		this.getQueryModel().assertHierarchyUniqueName(newHierarchyUniqueName, active);
		this._setHierarchyActive(active);
		this.updateDimensionFilter();
	}
	return isChanged;
};
oFF.QHierarchyManager.prototype.setHierarchyActiveBeforeAutoSubmit = function(activeBeforeAutoSubmit)
{
	this.m_activeBeforeAutoSubmit = activeBeforeAutoSubmit;
};
oFF.QHierarchyManager.prototype.setHierarchyActiveByDefault = function(activeDefault)
{
	this.m_activeDefault = activeDefault;
};
oFF.QHierarchyManager.prototype.setHierarchyCatalogKeyDate = function(keyDate)
{
	this.m_hierarchyCatalogKeyDate = keyDate;
};
oFF.QHierarchyManager.prototype.setHierarchyDueDate = function(dueDate)
{
	this.assertSupportsHierarchyChange();
	if (dueDate !== this.getHierarchyDueDate())
	{
		this._setHierarchyDueDate(dueDate);
		this.m_hierarchySelectionModCount++;
	}
	this.reevaluateHierarchySelection();
};
oFF.QHierarchyManager.prototype.setHierarchyDueDateVariableName = function(name)
{
	let queryManager = this.getQueryManagerBase();
	if (queryManager.getModelCapabilities().supportsAutoVariableSubmit())
	{
		if (oFF.XStringUtils.isNullOrEmpty(this.m_hierarchyDueDateVariableName) && queryManager.getVariableProcessorState() === oFF.VariableProcessorState.CHANGEABLE_STARTUP)
		{
			this.m_hierarchyDueDateVariableName = name;
		}
	}
	else
	{
		this.m_hierarchyDueDateVariableName = name;
	}
};
oFF.QHierarchyManager.prototype.setHierarchyName = function(name)
{
	if (!oFF.XString.isEqual(name, this.getHierarchyName()))
	{
		this.assertSupportsHierarchyChange();
		let dimension = this.getDimension();
		let queryModel = this.getQueryModel();
		if (oFF.notNull(queryModel))
		{
			let cmds = queryModel.getConvenienceCommands();
			if (!this.updateDimensionFilter())
			{
				cmds.clearFiltersByDimension(dimension);
			}
			cmds.clearVisibilityFiltersByDimension(dimension);
		}
		dimension.clearSelectorFilterByDimension(dimension);
		let selectorHierarchyNode = dimension.getSelectorHierarchyNode();
		if (oFF.notNull(selectorHierarchyNode) && selectorHierarchyNode.getDimension() === dimension)
		{
			dimension.clearSelectorHierarchyNode();
		}
		let currentHierarchy = this.getHierarchy();
		if (oFF.notNull(currentHierarchy) && currentHierarchy.isCustomHierarchy() && !oFF.XString.isEqual(currentHierarchy.getName(), name))
		{
			this.m_assignedHierarchy = null;
		}
		if (oFF.notNull(this.m_customHierarchyDefinition) && !oFF.XString.isEqual(this.m_customHierarchyDefinition.getName(), name))
		{
			this.m_customHierarchyDefinition = null;
		}
		if (oFF.isNull(name))
		{
			this.setHierarchyActive(false);
		}
		this.m_hierarchySelectionName = name;
		this.m_hierarchySelectionModCount++;
	}
	this.reevaluateHierarchySelection();
};
oFF.QHierarchyManager.prototype.setHierarchyNameVariableName = function(name)
{
	if (this.getQueryManagerBase().getModelCapabilities().supportsAutoVariableSubmit() && oFF.XStringUtils.isNullOrEmpty(this.m_hierarchyNameVariableName) && this.getQueryManager().getVariableProcessorState() === oFF.VariableProcessorState.CHANGEABLE_STARTUP)
	{
		this.m_hierarchyNameVariableName = name;
	}
};
oFF.QHierarchyManager.prototype.setHierarchyNavigationDeltaMode = function(isDeltaMode)
{
	let capabilities = this.getModelCapabilities();
	if (isDeltaMode && !capabilities.supportsHierarchyNavigationDeltaMode())
	{
		oFF.noSupport();
	}
	this.m_hierarchyNavigationDeltaMode = isDeltaMode;
};
oFF.QHierarchyManager.prototype.setHierarchySelection = function(name, version)
{
	this.assertSupportsHierarchyChange();
	this.setHierarchyName(name);
	this.setHierarchyVersion(version);
	this.reevaluateHierarchySelection();
};
oFF.QHierarchyManager.prototype.setHierarchyVersion = function(version)
{
	this.assertSupportsHierarchyChange();
	if (!oFF.XString.isEqual(version, this.getHierarchyVersion()))
	{
		let oldValue = this.m_hierarchySelectionVersion;
		this.m_hierarchySelectionVersion = version;
		this.m_hierarchySelectionModCount++;
		this.notifyPropertyStringChanged(oFF.QHierarchyProperties.QY_HIERARCHY_VERSION, oldValue, version);
	}
	this.reevaluateHierarchySelection();
};
oFF.QHierarchyManager.prototype.setHierarchyVersionVariableName = function(name)
{
	if (this.getQueryManagerBase().getModelCapabilities().supportsAutoVariableSubmit() && oFF.XStringUtils.isNullOrEmpty(this.m_hierarchyVersionVariableName) && this.getQueryManager().getVariableProcessorState() === oFF.VariableProcessorState.CHANGEABLE_STARTUP)
	{
		this.m_hierarchyVersionVariableName = name;
	}
};
oFF.QHierarchyManager.prototype.setIncludeCustomHierarchies = function(includeCustomHierarchies)
{
	this.m_includeCustomHierarchies = includeCustomHierarchies;
};
oFF.QHierarchyManager.prototype.setInitialDrillLevel = function(relativeLevelCount)
{
	if (this.getDrillManager() === null)
	{
		return;
	}
	let rootOperation = this.getRootDrillOperation();
	if (oFF.isNull(rootOperation) || rootOperation.getRelativeLevelCount() !== relativeLevelCount)
	{
		let oldDrillLevel = oFF.notNull(rootOperation) ? rootOperation.getRelativeLevelCount() : 0;
		this.getDrillManager().setRootExpandingLevels(this.getDimension(), relativeLevelCount);
		this.setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_DO_NOT_RAISEEVENTS);
		this.notifyPropertyIntegerChanged(oFF.QHierarchyProperties.QY_DRILL_LEVEL, oldDrillLevel, relativeLevelCount);
		this.resumeEventing();
	}
};
oFF.QHierarchyManager.prototype.setInitialDrillOffset = function(relativeLevelOffset)
{
	if (this.getDrillManager() === null)
	{
		return;
	}
	let rootOperation = this.getRootDrillOperation();
	if (oFF.isNull(rootOperation) || rootOperation.getRelativeLevelOffset() !== relativeLevelOffset)
	{
		this.getDrillManager().setRootOffsetLevels(this.getDimension(), relativeLevelOffset);
	}
};
oFF.QHierarchyManager.prototype.setInitialHierarchyDueDate = function(initialHierarchyDueDate)
{
	this.m_initialHierarchyDueDate = initialHierarchyDueDate;
};
oFF.QHierarchyManager.prototype.setInitialHierarchyName = function(initialHierarchyName)
{
	this.m_initialHierarchyName = initialHierarchyName;
};
oFF.QHierarchyManager.prototype.setInitialHierarchyVersion = function(initialHierarchyVersion)
{
	this.m_initialHierarchyVersion = initialHierarchyVersion;
};
oFF.QHierarchyManager.prototype.setLowerLevelNodeAlignment = function(alignment)
{
	let oldAlignment = this.m_lowerLevelNodeAlignment;
	this.m_lowerLevelNodeAlignment = alignment;
	this.synchronizeAxisWideNodeAlignment(alignment);
	this.notifyPropertyConstantChanged(oFF.QHierarchyProperties.QY_LOWER_LEVEL_NODE_ALIGNMENT, oldAlignment, alignment);
};
oFF.QHierarchyManager.prototype.setLowerLevelNodeAlignmentForRepoImport = function(alignment)
{
	let oldAlignment = this.m_lowerLevelNodeAlignment;
	this.m_lowerLevelNodeAlignment = alignment;
	this.notifyPropertyConstantChanged(oFF.QHierarchyProperties.QY_LOWER_LEVEL_NODE_ALIGNMENT, oldAlignment, alignment);
};
oFF.QHierarchyManager.prototype.setMaxDrillLevel = function(maxDrillLevel)
{
	if (maxDrillLevel !== this.m_maxDrillLevel)
	{
		let oldValue = this.m_maxDrillLevel;
		this.m_maxDrillLevel = maxDrillLevel;
		this.notifyPropertyChanged(oFF.QHierarchyProperties.QY_MAX_DRILL_LEVEL, oFF.XIntegerValue.create(oldValue), oFF.XIntegerValue.create(maxDrillLevel));
	}
};
oFF.QHierarchyManager.prototype.setMaxRuntimeLevel = function(maxRuntimeLevel)
{
	if (maxRuntimeLevel !== this.m_maxRuntimeLevel)
	{
		let oldValue = this.m_maxRuntimeLevel;
		this.m_maxRuntimeLevel = maxRuntimeLevel;
		this.notifyPropertyChanged(oFF.QHierarchyProperties.QY_MAX_RUNTIME_LEVEL, oFF.XIntegerValue.create(oldValue), oFF.XIntegerValue.create(maxRuntimeLevel));
	}
};
oFF.QHierarchyManager.prototype.setMemberOfPostedNodeVisibility = function(visibility)
{
	let oldValue = this.m_memberOfPostedNodeVisibility;
	this.m_memberOfPostedNodeVisibility = visibility;
	this.notifyPropertyConstantChanged(oFF.QHierarchyProperties.QY_MEMBER_OF_POSTED_NODE_VISIBILITY, oldValue, visibility);
};
oFF.QHierarchyManager.prototype.setNumberOfHierarchies = function(numberOfHierarchies)
{
	this.m_numberOfHierarchies = numberOfHierarchies;
};
oFF.QHierarchyManager.prototype.setSupportsHierarchy = function(supportsHierarchy)
{
	this.m_supportsHierarchy = supportsHierarchy;
};
oFF.QHierarchyManager.prototype.setUseDefaultDrillLevelOnChange = function(useDefaultDrillLevelOnChange)
{
	if (this.getQueryManagerBase().isExecuteAutoVariableSubmit() && this.m_useDefaultDrillLevelOnChange !== useDefaultDrillLevelOnChange)
	{
		this.m_useDefaultDrillLevelOnChange = useDefaultDrillLevelOnChange;
		this.notifyNodeChanged();
	}
};
oFF.QHierarchyManager.prototype.setUseHierarchyDueDateVariable = function(useVariable)
{
	if (this.m_useHierarchyDueDateVariable !== useVariable)
	{
		this.m_useHierarchyDueDateVariable = useVariable;
		this.notifyNodeChanged();
	}
};
oFF.QHierarchyManager.prototype.setUseHierarchyNameVariable = function(useVariable)
{
	if (this.m_useHierarchyNameVariable !== useVariable)
	{
		this.m_useHierarchyNameVariable = useVariable;
		this.notifyNodeChanged();
	}
};
oFF.QHierarchyManager.prototype.setUseHierarchyVersionVariable = function(useVariable)
{
	if (this.m_useHierarchyVersionVariable !== useVariable)
	{
		this.m_useHierarchyVersionVariable = useVariable;
		this.notifyNodeChanged();
	}
};
oFF.QHierarchyManager.prototype.setupHierarchy = function(context, parentNode)
{
	oFF.QModelComponent.prototype.setupModelComponent.call( this , context, parentNode);
	this.m_supportsHierarchy = true;
	this.m_hasExternalHierarchies = false;
	this.m_lowerLevelNodeAlignment = oFF.Alignment.DEFAULT_VALUE;
	this.m_memberOfPostedNodeVisibility = oFF.ResultVisibility.VISIBLE;
	this.m_hierarchies = null;
	this.m_hierarchiesWithFetchedLevels = oFF.XHashSetOfString.create();
	this.m_geoHierarchies = oFF.XList.create();
	this.m_hierarchyCatalogResultListeners = oFF.XList.create();
	this.m_hierarchyLevelsCatalogResultListeners = oFF.XHashMapByString.create();
	this.m_hierarchyCatalogFetched = false;
	this.m_includeCustomHierarchies = false;
	this.m_maxDrillLevel = -1;
	this.m_maxRuntimeLevel = -1;
	this.m_activeDefault = oFF.TriStateBool._DEFAULT;
};
oFF.QHierarchyManager.prototype.shouldExportInRepoDeltaFormat = function()
{
	return this.getModCounter() > 0 || this.getDrillManager().getModCounter() > 0 || this.getDimension().isRRIAffectedComponent();
};
oFF.QHierarchyManager.prototype.supportsHierarchy = function()
{
	return this.m_supportsHierarchy;
};
oFF.QHierarchyManager.prototype.synchronizeAxisWideNodeAlignment = function(alignment)
{
	let dimension = this.getDimension();
	let axis = oFF.isNull(dimension) ? null : dimension.getAxis();
	if (oFF.notNull(axis))
	{
		axis.synchronizeWithDimensionNodeAlignment(alignment);
	}
};
oFF.QHierarchyManager.prototype.updateDimensionFilter = function()
{
	if (this.getQueryModel().getFilter().isConvertFiltersToFlatOnHierarchyChange())
	{
		let filter = this.getDimension().getFilter();
		if (oFF.notNull(filter))
		{
			filter.setConvertToFlatFilter(oFF.XStringUtils.isNotNullAndNotEmpty(filter.getHierarchyName()) && this.isHierarchyActive() && !oFF.XString.isEqual(filter.getHierarchyName(), this.getHierarchyName()));
			return true;
		}
	}
	return false;
};
oFF.QHierarchyManager.prototype.useDefaultDrillLevelOnChange = function()
{
	return this.m_useDefaultDrillLevelOnChange;
};
oFF.QHierarchyManager.prototype.useHierarchyDueDateVariable = function()
{
	return this.m_useHierarchyDueDateVariable;
};
oFF.QHierarchyManager.prototype.useHierarchyNameVariable = function()
{
	return this.m_useHierarchyNameVariable;
};
oFF.QHierarchyManager.prototype.useHierarchyVersionVariable = function()
{
	return this.m_useHierarchyVersionVariable;
};

oFF.QHierarchyValueHelp = function() {};
oFF.QHierarchyValueHelp.prototype = new oFF.QModelComponent();
oFF.QHierarchyValueHelp.prototype._ff_c = "QHierarchyValueHelp";

oFF.QHierarchyValueHelp.create = function(context, dimension, objectVersion, name, syncType)
{
	let object = new oFF.QHierarchyValueHelp();
	object.setupHierarchyValueHelp(context, null, dimension, objectVersion, name, syncType);
	return object;
};
oFF.QHierarchyValueHelp.createModelComponent = function(context, dimensionBase, name, syncType)
{
	let object = new oFF.QHierarchyValueHelp();
	object.setupHierarchyValueHelp(context, dimensionBase, null, "A", name, syncType);
	return object;
};
oFF.QHierarchyValueHelp.prototype.m_dimension = null;
oFF.QHierarchyValueHelp.prototype.m_hierarchies = null;
oFF.QHierarchyValueHelp.prototype.m_isInitialized = false;
oFF.QHierarchyValueHelp.prototype.m_objectVersion = null;
oFF.QHierarchyValueHelp.prototype.m_queryModelHierarchyHelp = null;
oFF.QHierarchyValueHelp.prototype.m_syncType = null;
oFF.QHierarchyValueHelp.prototype.getDimension = function()
{
	return this.m_dimension.getReference();
};
oFF.QHierarchyValueHelp.prototype.getHierarchies = function()
{
	return this.m_hierarchies;
};
oFF.QHierarchyValueHelp.prototype.getIndexedChildren = function()
{
	let children = oFF.XList.create();
	if (oFF.notNull(this.m_hierarchies))
	{
		oFF.XCollectionUtils.addAll(children, this.m_hierarchies);
	}
	else if (!this.m_isInitialized)
	{
		this.initializeHierarchyValueHelp();
		children.add(oFF.QModelComponentNode.createLeave(this.getContext(), "Loading..."));
	}
	return children.getIterator();
};
oFF.QHierarchyValueHelp.prototype.getQueryModel = function()
{
	return this.m_queryModelHierarchyHelp;
};
oFF.QHierarchyValueHelp.prototype.initializeHierarchyValueHelp = function()
{
	if (oFF.isNull(this.m_dimension) || this.m_isInitialized)
	{
		return;
	}
	this.m_isInitialized = true;
	let dimension = this.m_dimension.getReference();
	let application = dimension.getApplication();
	let systemName = dimension.getQueryModel().getDataSource().getSystemName();
	if (oFF.isNull(systemName) && application.getSystemLandscape().getSystemNames().size() === 1)
	{
		systemName = application.getSystemLandscape().getSystemNames().get(0);
	}
	let systemDescription = application.getSystemLandscape().getSystemDescription(systemName);
	oFF.XObjectExt.assertNotNullExt(systemDescription, oFF.XStringUtils.concatenate2("System Description not found. System Name: ", systemName));
	oFF.XBooleanUtils.checkTrue(oFF.HierarchyCatalogUtil.supportsHierarchyCatalog2(application, systemDescription), "Hierarchy Catalog Service is not supported");
	let serviceConfig = oFF.OlapApiModule.SERVICE_TYPE_HIERARCHY_CATALOG.createServiceConfig(application);
	serviceConfig.setSystemName(systemName);
	let dataSource = dimension.getQueryModel().getDataSource().getFullQualifiedName();
	serviceConfig.setDataSourceName(dataSource);
	serviceConfig.setDimension(dimension);
	serviceConfig.processHierarchyCatalogManagerCreation(oFF.SyncType.BLOCKING, this, null);
};
oFF.QHierarchyValueHelp.prototype.isComponentNode = function()
{
	return true;
};
oFF.QHierarchyValueHelp.prototype.onHierarchyCatalogManagerCreated = function(extResult, hierarchyCatalogManager, customIdentifier)
{
	if (extResult.hasErrors() || oFF.isNull(hierarchyCatalogManager))
	{
		throw oFF.XException.createRuntimeException(extResult.getSummary());
	}
	this.m_queryModelHierarchyHelp = oFF.XWeakReferenceUtil.getWeakRef(hierarchyCatalogManager.getQueryManager().getQueryModel());
	hierarchyCatalogManager.setFilterHierarchyObjectVersion(this.m_objectVersion, true);
	hierarchyCatalogManager.processGetResult(this.m_syncType, this, null);
};
oFF.QHierarchyValueHelp.prototype.onHierarchyCatalogResult = function(extResult, result, customIdentifier)
{
	this.processHierarchyCatalogResult(result);
};
oFF.QHierarchyValueHelp.prototype.processHierarchyCatalogResult = function(hierarchyCatalogResult)
{
	if (oFF.isNull(hierarchyCatalogResult))
	{
		return;
	}
	let catalogItems = oFF.HierarchyCatalogUtil.getHierarchyItems(hierarchyCatalogResult);
	if (catalogItems.hasElements())
	{
		let dimension = this.m_dimension.getReference();
		this.m_hierarchies = oFF.XList.create();
		let changedNodes = oFF.XList.create();
		for (let i = 0; i < catalogItems.size(); i++)
		{
			let catalogItem = catalogItems.get(i);
			let dimensionName = catalogItem.getDimensionName();
			oFF.XBooleanUtils.checkTrue(oFF.XString.isEqual(dimension.getName(), dimensionName), oFF.XStringUtils.concatenate4("Hierarchy Catalog: different dimension names. (1)", dimension.getName(), " (2) ", dimensionName));
			let hierarchy = oFF.QHierarchy.create(dimension.getContext(), dimension, catalogItem.getHierarchyName());
			hierarchy.setHierarchyDescription(catalogItem.getHierarchyDescription());
			hierarchy.setHierarchyVersion(catalogItem.getVersionName());
			hierarchy.setVersionDescription(catalogItem.getVersionDescription());
			hierarchy.setDateTo(catalogItem.getDateTo());
			hierarchy.setDateFrom(catalogItem.getDateFrom());
			hierarchy.setOwner(catalogItem.getOwner());
			hierarchy.setHierId(catalogItem.getHierId());
			hierarchy.setHierType(catalogItem.getHierType());
			hierarchy.setObjectVersion(catalogItem.getObjectVersion());
			hierarchy.setIsRemote(catalogItem.isRemote());
			this.m_hierarchies.add(hierarchy);
			changedNodes.add(this.m_hierarchies.get(i));
		}
		this.notifyNodeChanged();
	}
	else
	{
		this.m_hierarchies = null;
	}
};
oFF.QHierarchyValueHelp.prototype.releaseObject = function()
{
	this.m_hierarchies = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_hierarchies);
	this.m_dimension = null;
	this.m_objectVersion = null;
	this.m_queryModelHierarchyHelp = null;
	this.m_syncType = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QHierarchyValueHelp.prototype.setupHierarchyValueHelp = function(context, dimensionBase, dimension, objectVersion, name, syncType)
{
	oFF.QModelComponent.prototype.setupModelComponentWithName.call( this , context, dimensionBase, name);
	if (oFF.notNull(dimensionBase))
	{
		this.m_dimension = oFF.XWeakReferenceUtil.getWeakRef(dimensionBase);
	}
	else if (oFF.notNull(dimension))
	{
		this.m_dimension = oFF.XWeakReferenceUtil.getWeakRef(dimension);
	}
	this.m_objectVersion = objectVersion;
	this.m_isInitialized = false;
	this.m_syncType = syncType;
	if (oFF.isNull(this.m_syncType))
	{
		this.m_syncType = oFF.SyncType.NON_BLOCKING;
	}
	this.initializeHierarchyValueHelp();
};
oFF.QHierarchyValueHelp.prototype.toString = function()
{
	if (oFF.notNull(this.m_hierarchies))
	{
		return this.m_hierarchies.toString();
	}
	return "[]";
};

oFF.InputReadinessFilter = function() {};
oFF.InputReadinessFilter.prototype = new oFF.QModelComponent();
oFF.InputReadinessFilter.prototype._ff_c = "InputReadinessFilter";

oFF.InputReadinessFilter.createFilter = function(context, parentNode, mode)
{
	return oFF.InputReadinessFilter.createFilterWithStates(context, parentNode, mode, oFF.XList.create());
};
oFF.InputReadinessFilter.createFilterWithStates = function(context, parentNode, mode, states)
{
	let obj = new oFF.InputReadinessFilter();
	obj.setupModelComponent(context, parentNode);
	obj.m_mode = mode;
	obj.m_states = states;
	return obj;
};
oFF.InputReadinessFilter.prototype.m_mode = null;
oFF.InputReadinessFilter.prototype.m_states = null;
oFF.InputReadinessFilter.prototype.addState = function(state)
{
	this.m_states.add(state);
};
oFF.InputReadinessFilter.prototype.cloneExt = function(flags)
{
	return oFF.InputReadinessFilter.createFilterWithStates(this.getContext(), this.getParentComponent(), this.m_mode, oFF.XCollectionUtils.createListOfClones(this.m_states));
};
oFF.InputReadinessFilter.prototype.getMode = function()
{
	return this.m_mode;
};
oFF.InputReadinessFilter.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.INPUT_READINESS_FILTER;
};
oFF.InputReadinessFilter.prototype.getStates = function()
{
	return this.m_states;
};
oFF.InputReadinessFilter.prototype.releaseObject = function()
{
	this.m_mode = null;
	this.m_states = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};

oFF.QInteropManager = function() {};
oFF.QInteropManager.prototype = new oFF.QModelComponent();
oFF.QInteropManager.prototype._ff_c = "QInteropManager";

oFF.QInteropManager.ICON_ALERT = "sap-icon://fpa/threshold-alert";
oFF.QInteropManager.ICON_COLOR = "sap-icon://fpa/color";
oFF.QInteropManager.ICON_DIAMOND = "sap-icon://fpa/diamond";
oFF.QInteropManager.ICON_INFORMATION = "sap-icon://fpa/threshold-information";
oFF.QInteropManager.ICON_OUTLINE_FILL = "sap-icon://fpa/outline-fill";
oFF.QInteropManager.ICON_SAP_ALERT = "sap-icon://alert";
oFF.QInteropManager.ICON_SAP_CHECKMARK = "sap-icon://sys-enter-2";
oFF.QInteropManager.ICON_SAP_ERROR = "sap-icon://error";
oFF.QInteropManager.ICON_SAP_INFORMATION = "sap-icon://information";
oFF.QInteropManager.ICON_WARNING = "sap-icon://fpa/threshold-warning";
oFF.QInteropManager.K_COLOR = "color";
oFF.QInteropManager.K_CUSTOM_TITLE = "customTitle";
oFF.QInteropManager.K_DIM_ID = "dimensionId";
oFF.QInteropManager.K_FILTER = "filter";
oFF.QInteropManager.K_FILTERS = "filters";
oFF.QInteropManager.K_ICON = "icon";
oFF.QInteropManager.K_ID = "id";
oFF.QInteropManager.K_INTERVALS = "intervals";
oFF.QInteropManager.K_NAME = "name";
oFF.QInteropManager.K_STORY = "story";
oFF.QInteropManager.VISUALIZATION_TABLE_DEFINITION = "TableDefinition";
oFF.QInteropManager.create = function(queryModel)
{
	let interopManager = new oFF.QInteropManager();
	interopManager.setupModelComponent(queryModel, queryModel);
	return interopManager;
};
oFF.QInteropManager.createThresholdFormattingStyle = function(formattingStyle, alertColor, alertSymbol, styleType)
{
	let thshldStyleType = oFF.isNull(styleType) ? oFF.QbConditionalFormattingStyleType.SYMBOL : styleType;
	if (thshldStyleType.isEqualTo(oFF.QbConditionalFormattingStyleType.SYMBOL))
	{
		formattingStyle.setAlertSymbol(alertSymbol);
		formattingStyle.setAlertColor(alertColor);
	}
	else if (thshldStyleType.isEqualTo(oFF.QbConditionalFormattingStyleType.FONT_COLOR))
	{
		formattingStyle.setFontColor(alertColor);
	}
	else if (thshldStyleType.isEqualTo(oFF.QbConditionalFormattingStyleType.CELL_FILL))
	{
		formattingStyle.setFillColor(alertColor);
	}
	else if (thshldStyleType.isEqualTo(oFF.QbConditionalFormattingStyleType.CELL_FILL_WITHOUT_TRANSPARENCY))
	{
		formattingStyle.setFillColor(alertColor);
	}
	else if (thshldStyleType.isEqualTo(oFF.QbConditionalFormattingStyleType.CELL_FILL_AND_FONT_COLOR))
	{
		formattingStyle.setFillColor(alertColor);
		formattingStyle.setFontColor(oFF.QbConditionalFormattingStyleConstants.FONT_COLOR_INVISIBLE);
	}
	return formattingStyle;
};
oFF.QInteropManager.prototype.m_model = null;
oFF.QInteropManager.prototype.addDataPointStyle = function(tableDefinition, intervalStruct, thresholdsId, filterSize, curThresholdId, intervalIndex, styleStr, title)
{
	let intervalId = intervalStruct.getStringByKey(oFF.QInteropManager.K_ID);
	let intervalName = intervalStruct.getStringByKey(oFF.QInteropManager.K_NAME);
	let intervalColor = intervalStruct.getStringByKey(oFF.QInteropManager.K_COLOR);
	let intervalIcon = intervalStruct.getStringByKey(oFF.QInteropManager.K_ICON);
	let alertSymbol = this.getAlertSymbol(intervalIcon);
	let formattingStyle = tableDefinition.addNewFormattingStyle(intervalId, intervalName);
	let thresholdStyle = oFF.QbConditionalFormattingStyleType.lookup(styleStr).get();
	formattingStyle = oFF.QInteropManager.createThresholdFormattingStyle(formattingStyle, intervalColor, alertSymbol, thresholdStyle);
	let idWithIntervalIndex = oFF.XStringBuffer.create().append(curThresholdId).append(":").appendInt(intervalIndex).toString();
	let idWithIntervalIndexA = oFF.XStringUtils.concatenate2(idWithIntervalIndex, "A");
	let idWithIntervalIndexB = oFF.XStringUtils.concatenate2(idWithIntervalIndex, "B");
	let hasFilterOn2ndStruct = false;
	let updatedFilterSize = filterSize;
	if (filterSize > 0)
	{
		hasFilterOn2ndStruct = true;
	}
	else
	{
		updatedFilterSize = 1;
	}
	for (let filterIdx = 1; filterIdx <= updatedFilterSize; filterIdx++)
	{
		if (hasFilterOn2ndStruct)
		{
			idWithIntervalIndex = oFF.XStringBuffer.create().append(curThresholdId).append("#").appendChar(filterIdx).append(":").appendInt(intervalIndex).toString();
			idWithIntervalIndexA = oFF.XStringUtils.concatenate2(idWithIntervalIndex, "A");
			idWithIntervalIndexB = oFF.XStringUtils.concatenate2(idWithIntervalIndex, "B");
			if (!(thresholdsId.contains(idWithIntervalIndex) || thresholdsId.contains(idWithIntervalIndexA) || thresholdsId.contains(idWithIntervalIndexB)))
			{
				idWithIntervalIndex = oFF.XStringBuffer.create().append(curThresholdId).append(":").appendInt(intervalIndex).append("#").appendChar(filterIdx).toString();
				idWithIntervalIndexA = oFF.XStringUtils.concatenate2(idWithIntervalIndex, "A");
				idWithIntervalIndexB = oFF.XStringUtils.concatenate2(idWithIntervalIndex, "B");
			}
		}
		if (!thresholdsId.contains(idWithIntervalIndex))
		{
			if (thresholdsId.contains(idWithIntervalIndexA))
			{
				let dpStyleA = tableDefinition.addNewDataPointStyle(title, title);
				dpStyleA.setExceptionName(idWithIntervalIndexA);
				dpStyleA.setFormattingStyle(formattingStyle);
			}
			if (thresholdsId.contains(idWithIntervalIndexB))
			{
				idWithIntervalIndex = idWithIntervalIndexB;
			}
		}
		let dpStyle = tableDefinition.addNewDataPointStyle(title, title);
		dpStyle.setExceptionName(idWithIntervalIndex);
		dpStyle.setFormattingStyle(formattingStyle);
	}
};
oFF.QInteropManager.prototype.addVizDefinition = function(thresholdJsonStr, thresholdStyleStr)
{
	if (oFF.XStringUtils.isNullOrEmpty(thresholdJsonStr))
	{
		return this;
	}
	let styleStr = oFF.XStringUtils.isNullOrEmpty(thresholdStyleStr) ? oFF.QbConditionalFormattingStyleType.SYMBOL.getName() : thresholdStyleStr;
	this.ensureInteropManagerIsInitialized();
	let tableDefinition = this.m_model.getVisualizationManager().getOrCreateVisualisationDefinition(oFF.QInteropManager.VISUALIZATION_TABLE_DEFINITION, oFF.ProtocolBindingType.SAC_TABLE_GRID, oFF.SemanticBindingType.TABLE);
	let stories = this.stringToJsonAsStruct(thresholdJsonStr).getStructureByKey(oFF.QInteropManager.K_STORY);
	if (oFF.isNull(stories))
	{
		return this;
	}
	let thresholdsId = oFF.XHashSetOfString.create();
	oFF.XStream.of(this.getQueryModel().getExceptionManager().getValuesAsReadOnlyList()).forEach((exception) => {
		thresholdsId.add(exception.getName());
	});
	oFF.XStream.of(this.getQueryModel().getFormulaExceptionManager().getValuesAsReadOnlyList()).forEach((formulaException) => {
		let thresholds = formulaException.getThresholds();
		oFF.XStream.of(thresholds).forEach((thrshld) => {
			thresholdsId.add(thrshld.getName());
		});
	});
	let storyIt = stories.getKeysAsIterator();
	while (storyIt.hasNext())
	{
		let story = storyIt.next();
		let storyStruct = stories.getStructureByKey(story);
		let membersIt = storyStruct.getKeysAsIterator();
		while (membersIt.hasNext())
		{
			let member = membersIt.next();
			let memberStruct = storyStruct.getStructureByKey(member);
			let thresholdIt = memberStruct.getKeysAsIterator();
			while (thresholdIt.hasNext())
			{
				let threshold = thresholdIt.next();
				let thresholdStruct = memberStruct.getStructureByKey(threshold);
				let curThresholdId = thresholdStruct.getStringByKey(oFF.QInteropManager.K_ID);
				let title = thresholdStruct.getStringByKey(oFF.QInteropManager.K_CUSTOM_TITLE);
				let filterSize = 0;
				if (this.m_model.getConvenienceCommands().isBw())
				{
					filterSize = this.getFiltersSizeOn2ndStruct(thresholdStruct);
				}
				let intervals = thresholdStruct.getListByKey(oFF.QInteropManager.K_INTERVALS);
				if (oFF.isNull(intervals))
				{
					continue;
				}
				let intervalIndex = 0;
				let intervalIt = intervals.getIterator();
				while (intervalIt.hasNext())
				{
					let interval = intervalIt.next();
					if (!interval.isStructure())
					{
						continue;
					}
					let intervalStruct = interval;
					this.addDataPointStyle(tableDefinition, intervalStruct, thresholdsId, filterSize, curThresholdId, intervalIndex, styleStr, title);
					intervalIndex++;
				}
			}
			oFF.XObjectExt.release(thresholdIt);
		}
		oFF.XObjectExt.release(membersIt);
	}
	oFF.XObjectExt.release(storyIt);
	thresholdsId.clear();
	oFF.XObjectExt.release(thresholdsId);
	return this;
};
oFF.QInteropManager.prototype.clearThresholdsSettings = function()
{
	this.ensureInteropManagerIsInitialized();
	let formulaExceptionManager = this.getQueryModel().getFormulaExceptionManager();
	let formulaExceptionIterator = formulaExceptionManager.getIterator();
	while (formulaExceptionIterator.hasNext())
	{
		let formulaException = formulaExceptionIterator.next();
		if (oFF.notNull(formulaException))
		{
			let modelFormulaException = formulaExceptionManager.getModelFormulaException(formulaException.getName());
			if (oFF.notNull(modelFormulaException))
			{
				formulaExceptionManager.removeElement(formulaException);
			}
			else
			{
				oFF.XCollectionUtils.forEach(formulaException.getThresholds(), (threshold) => {
					if (oFF.notNull(threshold))
					{
						threshold.clear();
					}
				});
			}
		}
	}
	return this;
};
oFF.QInteropManager.prototype.convertChartDrillsToTableDrills = function()
{
	this.ensureInteropManagerIsInitialized();
	this.m_model.getQueryManager().getDataRequest();
	let transientFilter;
	if (this.m_model.getQueryManager().getModelCapabilities().supportsVisibilityFilter())
	{
		transientFilter = this.m_model.getFilter().getTransientZoomVisibilityFilter();
	}
	else
	{
		transientFilter = this.m_model.getFilter().getTransientZoomDisplayFilter();
	}
	if (oFF.notNull(transientFilter))
	{
		oFF.QFilterUtil.convertTrapezoidFilterToSimpleFilter(transientFilter);
		let dynamicFilter = this.m_model.getFilter().getDynamicFilter();
		let filterManager = this.m_model.getFilter();
		filterManager.setVisibilityFilter(null);
		let cartesianLists = oFF.QFilterUtil.collectAllCartesianLists(transientFilter);
		this.m_model.getFilter().resetTransientZoomFilters();
		for (let listIdx = 0; listIdx < cartesianLists.size(); listIdx++)
		{
			let cartesianList = cartesianLists.get(listIdx);
			let dimension = cartesianList.getDimension();
			if (dimension.hasZoomDrill())
			{
				dimension.setInitialDrillLevel(0);
			}
			dimension.setExplicitDrillOnFilteredNodes(false);
			if (dynamicFilter.isComplexFilter())
			{
				for (let i = 0; i < cartesianList.size(); i++)
				{
					let element = cartesianList.getCartesianElement(i);
					if (element.getLow().hasValue())
					{
						let isMdsAll = oFF.XString.isEqual(element.getLow().getString(), "(MDS-all)");
						let isEqualOperation = element.getComparisonOperator() === oFF.ComparisonOperator.EQUAL;
						if (isMdsAll && isEqualOperation)
						{
							cartesianList.removeAt(i);
						}
					}
				}
				dynamicFilter.getComplexRoot().add(cartesianList);
			}
			else
			{
				dynamicFilter.getCartesianProductWithDefault().add(cartesianList);
			}
		}
	}
	let drillManager = this.m_model.getDrillManager();
	drillManager.convertZoomDrillOperations();
	return this;
};
oFF.QInteropManager.prototype.copySharedCalculations = function(storageNameTagKey, calculationIds)
{
	this.ensureInteropManagerIsInitialized();
	let udmInstanceId = this.m_model.getTagging().getByKey(storageNameTagKey);
	let clientQueryObjectManager = this.m_model.getOlapEnv().getClientQueryObjectManager();
	for (let i = 0; i < calculationIds.size(); i++)
	{
		let calculationId = calculationIds.get(i);
		let calcDim = this.tryCreateNonSharedCalcDim(calculationId, udmInstanceId);
		if (oFF.notNull(calcDim))
		{
			continue;
		}
		let member = this.getSharedStructuredMember(clientQueryObjectManager, calculationId, udmInstanceId);
		if (oFF.isNull(member))
		{
			let datasetId = this.m_model.getDatasetId();
			calculationId = oFF.XStringUtils.concatenate3(datasetId, "-", calculationId);
			member = this.getSharedStructuredMember(clientQueryObjectManager, calculationId, udmInstanceId);
			if (oFF.isNull(member))
			{
				continue;
			}
		}
		let measureDimension = null;
		if (member.getDimension() === null)
		{
			continue;
		}
		if (member.getDimension().isMeasureStructure())
		{
			measureDimension = this.m_model.getMeasureDimension();
		}
		else if (member.getDimension().getDimensionType() === oFF.DimensionType.ACCOUNT)
		{
			measureDimension = this.m_model.getAccountDimension();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(member.getPreferredHierarchy()) && !oFF.XString.isEqual(measureDimension.getHierarchyName(), member.getPreferredHierarchy()))
			{
				continue;
			}
		}
		else if (member.getDimension().getDimensionType() === oFF.DimensionType.SECONDARY_STRUCTURE)
		{
			measureDimension = this.m_model.getSecondaryCalculationDimension();
		}
		else
		{
			continue;
		}
		if (measureDimension.getAllStructureMembers().getByKey(calculationId) !== null)
		{
			measureDimension.removeMeasure(calculationId);
		}
		this.createNonSharedMember(measureDimension, member);
	}
	this.removeInvalidCalculatedDimensions(calculationIds);
	return this;
};
oFF.QInteropManager.prototype.copySharedFormulaExceptions = function()
{
	let formulaExceptionManager = this.getQueryModel().getFormulaExceptionManager();
	let olapEnv = formulaExceptionManager.getOlapEnv();
	let formulaExceptionIterator = formulaExceptionManager.getIterator();
	while (formulaExceptionIterator.hasNext())
	{
		let formulaException = formulaExceptionIterator.next();
		if (olapEnv.getClientQueryObjectManager().getClientQueryObjectIncludeReleasedByKeyRef(formulaException, null) !== null)
		{
			formulaExceptionManager.removeFormulaException(formulaException.getName());
			let cloneException = formulaExceptionManager.addNewFormulaException(formulaException.getName(), formulaException.getText());
			cloneException.copyFrom(formulaException, null);
		}
	}
	formulaExceptionManager.setFormulaResultVisible(false);
};
oFF.QInteropManager.prototype.copySharedObjects = function()
{
	this.ensureInteropManagerIsInitialized();
	this.copySharedFormulaExceptions();
	return this;
};
oFF.QInteropManager.prototype.copySharedThresholdsOnCalculations = function(thresholdJsonStr)
{
	if (oFF.XStringUtils.isNullOrEmpty(thresholdJsonStr))
	{
		return this;
	}
	this.ensureInteropManagerIsInitialized();
	let stories = this.stringToJsonAsStruct(thresholdJsonStr).getStructureByKey(oFF.QInteropManager.K_STORY);
	if (oFF.isNull(stories))
	{
		return this;
	}
	let storyIterator = stories.getKeysAsIterator();
	while (storyIterator.hasNext())
	{
		let story = storyIterator.next();
		let storyStructure = stories.getStructureByKey(story);
		let accountMemberIterator = storyStructure.getKeysAsIterator();
		while (accountMemberIterator.hasNext())
		{
			let accountMember = accountMemberIterator.next();
			let accountMemberStructure = storyStructure.getStructureByKey(accountMember);
			let thresholdIterator = accountMemberStructure.getKeysAsIterator();
			while (thresholdIterator.hasNext())
			{
				let threshold = thresholdIterator.next();
				let thresholdStructure = accountMemberStructure.getStructureByKey(threshold);
				let thresholdId = thresholdStructure.getStringByKey(oFF.QInteropManager.K_ID);
				if (this.m_model.getFormulaExceptionManager().getByKey(thresholdId) !== null)
				{
					continue;
				}
				let formulaException = this.m_model.getOlapEnv().getClientQueryObjectManager().getFormulaException(thresholdId, this.getQueryModel().getTagging().getByKey("UDM_INSTANCE_ID"));
				if (oFF.notNull(formulaException))
				{
					let structure = this.m_model.getStructureByName(formulaException.getBaseMeasureName());
					if (oFF.notNull(structure) && oFF.MemberType.BASIC_MEASURE !== structure.getMemberType())
					{
						let copiedFormula = this.m_model.getFormulaExceptionManager().addNewFormulaException(formulaException.getName(), formulaException.getText());
						copiedFormula.copyFrom(formulaException, null);
					}
				}
			}
			oFF.XObjectExt.release(thresholdIterator);
		}
		oFF.XObjectExt.release(accountMemberIterator);
	}
	return this;
};
oFF.QInteropManager.prototype.createNonSharedMember = function(measureDimension, originalMember)
{
	if (oFF.isNull(measureDimension))
	{
		return null;
	}
	let memberType = originalMember.getMemberType();
	if (memberType === oFF.MemberType.BASIC_MEASURE)
	{
		return null;
	}
	let nonSharedMember = null;
	if (memberType === oFF.MemberType.FORMULA)
	{
		nonSharedMember = measureDimension.addNewFormulaMeasure(originalMember.getName(), originalMember.getText());
	}
	else if (memberType === oFF.MemberType.RESTRICTED_MEASURE)
	{
		nonSharedMember = measureDimension.addNewRestrictedMeasure(originalMember.getName(), originalMember.getText());
	}
	else if (memberType === oFF.MemberType.VARIANCE)
	{
		nonSharedMember = measureDimension.addNewVarianceMeasure(originalMember.getName(), originalMember.getText());
	}
	else if (memberType === oFF.MemberType.EXCEPTION_AGGREGATION)
	{
		nonSharedMember = measureDimension.addNewExceptionAggregationMeasure(originalMember.getName(), originalMember.getText());
	}
	else if (memberType === oFF.MemberType.CURRENCY_MEASURE)
	{
		nonSharedMember = measureDimension.addNewCurrencyMeasure(originalMember.getName(), originalMember.getText());
	}
	else if (memberType === oFF.MemberType.UNIT_MEASURE)
	{
		nonSharedMember = measureDimension.addNewUnitMeasure(originalMember.getName(), originalMember.getText());
	}
	else if (memberType === oFF.MemberType.RUNNING_TOTAL)
	{
		nonSharedMember = measureDimension.addNewRunningTotalMeasure(originalMember.getName(), originalMember.getText());
	}
	else
	{
		return null;
	}
	nonSharedMember.copyFrom(originalMember, null);
	let needsPlaceholderAssignment = measureDimension.getDimensionType().isTypeOf(oFF.DimensionType.ACCOUNT) && oFF.XCollectionUtils.hasElements(measureDimension.getPlaceholderIds());
	if (needsPlaceholderAssignment)
	{
		if (nonSharedMember.getAliasName() === null)
		{
			nonSharedMember.setAliasName(nonSharedMember.getName());
		}
		measureDimension.assignPlaceholderIdByAlias(measureDimension.getNextFreePlaceholderId(), nonSharedMember.getAliasName());
	}
	measureDimension.setAlternativeFieldValue(false, nonSharedMember.getName(), oFF.AlternativeFieldValue.DISPLAY_NAME.getName(), oFF.XStringValue.create(originalMember.getDisplayName()), "");
	measureDimension.setAlternativeFieldValue(false, nonSharedMember.getName(), oFF.AlternativeFieldValue.DISPLAY_DESCRIPTION.getName(), oFF.XStringValue.create(originalMember.getDisplayDescription()), "");
	return nonSharedMember;
};
oFF.QInteropManager.prototype.ensureInteropManagerIsInitialized = function()
{
	if (oFF.isNull(this.m_model))
	{
		this.initInterop(true);
	}
};
oFF.QInteropManager.prototype.getAlertSymbol = function(intervalIcon)
{
	let alertSymbol = oFF.AlertSymbol.GOOD;
	switch (intervalIcon)
	{
		case oFF.QInteropManager.ICON_WARNING:
			alertSymbol = oFF.AlertSymbol.WARNING;
			break;

		case oFF.QInteropManager.ICON_ALERT:
			alertSymbol = oFF.AlertSymbol.ALERT;
			break;

		case oFF.QInteropManager.ICON_COLOR:
			alertSymbol = oFF.AlertSymbol.ALERT;
			break;

		case oFF.QInteropManager.ICON_DIAMOND:
			alertSymbol = oFF.AlertSymbol.DIAMOND;
			break;

		case oFF.QInteropManager.ICON_INFORMATION:
			alertSymbol = oFF.AlertSymbol.INFORMATION;
			break;

		case oFF.QInteropManager.ICON_SAP_CHECKMARK:
			alertSymbol = oFF.AlertSymbol.SAP_CHECKMARK;
			break;

		case oFF.QInteropManager.ICON_SAP_ALERT:
			alertSymbol = oFF.AlertSymbol.SAP_ALERT;
			break;

		case oFF.QInteropManager.ICON_SAP_ERROR:
			alertSymbol = oFF.AlertSymbol.SAP_ERROR;
			break;

		case oFF.QInteropManager.ICON_SAP_INFORMATION:
			alertSymbol = oFF.AlertSymbol.SAP_INFORMATION;
			break;

		case oFF.QInteropManager.ICON_OUTLINE_FILL:
			alertSymbol = oFF.AlertSymbol.OUTLINE_FILL;
			break;

		default:
			break;
	}
	return alertSymbol;
};
oFF.QInteropManager.prototype.getFiltersSizeOn2ndStruct = function(thresholdStruct)
{
	let filterSize = 0;
	if (thresholdStruct.getListByKey(oFF.QInteropManager.K_FILTERS) === null)
	{
		return filterSize;
	}
	let filtersIt = thresholdStruct.getListByKey(oFF.QInteropManager.K_FILTERS).getIterator();
	while (filtersIt.hasNext())
	{
		let filter = filtersIt.next();
		if (!filter.isStructure())
		{
			continue;
		}
		let filterStruct = filter;
		let elementType = filterStruct.getElementTypeByKey(oFF.QInteropManager.K_ID);
		let dimName = null;
		if (elementType === oFF.PrElementType.STRUCTURE)
		{
			let idStruct = filterStruct.getStructureByKey(oFF.QInteropManager.K_ID);
			if (oFF.isNull(idStruct))
			{
				continue;
			}
			dimName = idStruct.getStringByKey(oFF.QInteropManager.K_ID);
		}
		else if (elementType === oFF.PrElementType.STRING)
		{
			let idStr = filterStruct.getStringByKey(oFF.QInteropManager.K_ID);
			let idElementsIt = this.stringToJsonAsList(idStr).getIterator();
			while (idElementsIt.hasNext())
			{
				let idElement = idElementsIt.next();
				if (!filter.isStructure())
				{
					continue;
				}
				dimName = idElement.asStructure().getStringByKey(oFF.QInteropManager.K_DIM_ID);
				if (oFF.notNull(dimName))
				{
					break;
				}
			}
		}
		if (oFF.isNull(dimName))
		{
			continue;
		}
		let ffDim = this.getQueryModel().getDimensionByName(dimName);
		if (oFF.isNull(ffDim) || !ffDim.isStructure())
		{
			continue;
		}
		let filterIt = filterStruct.getListByKey(oFF.QInteropManager.K_FILTER).getIterator();
		while (filterIt.hasNext())
		{
			filterSize++;
			filterIt.next();
		}
		oFF.XObjectExt.release(filterIt);
		break;
	}
	oFF.XObjectExt.release(filtersIt);
	return filterSize;
};
oFF.QInteropManager.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.QUERY_MODEL;
};
oFF.QInteropManager.prototype.getQueryManager = function()
{
	return oFF.notNull(this.m_model) ? this.m_model.getQueryManager() : this.getContext().getQueryManager();
};
oFF.QInteropManager.prototype.getQueryModel = function()
{
	return oFF.notNull(this.m_model) ? this.m_model : this.getContext().getQueryModel();
};
oFF.QInteropManager.prototype.getSharedStructuredMember = function(clientQueryObjectManager, calculationId, udmInstanceId)
{
	let member = clientQueryObjectManager.getStructuredMemberIncludeReleased(calculationId, udmInstanceId, true);
	if (oFF.isNull(member))
	{
		member = clientQueryObjectManager.getStructuredMemberIncludeReleased(calculationId, udmInstanceId, false);
	}
	return member;
};
oFF.QInteropManager.prototype.initInterop = function(useClonedQueryModel)
{
	if (useClonedQueryModel)
	{
		let originalModel = this.getContext().getQueryModel();
		this.m_model = originalModel.getQueryManager().cloneQueryManager().getQueryModel();
		this.m_model.getFilter().linkFilters(originalModel.getFilter().getLinkedFilters());
	}
	else
	{
		this.m_model = this.getContext().getQueryModel();
	}
	return this;
};
oFF.QInteropManager.prototype.keepSortOperationsGrouped = function()
{
	this.ensureInteropManagerIsInitialized();
	oFF.XCollectionUtils.forEach(this.m_model.getSortingManager().getSortingOperations(), (so) => {
		so.setPreserveGrouping(true);
	});
	return this;
};
oFF.QInteropManager.prototype.reduceFilters = function()
{
	this.ensureInteropManagerIsInitialized();
	let filter = this.m_model.getFilter();
	let dynamicFilter = filter.getDynamicFilter();
	let effectiveRootElement = filter.getEffectiveFilter().getFilterRootElement();
	if (oFF.notNull(effectiveRootElement))
	{
		let newFilterRootElement = oFF.QFilterUtil.createFilterElementFromOrigin(effectiveRootElement, dynamicFilter);
		if (dynamicFilter.getModelCapabilities().supportsMultiComplexFilter())
		{
			dynamicFilter.setComplexRoot(newFilterRootElement);
		}
		else
		{
			dynamicFilter.setCartesianProduct(oFF.QFilterUtil.convertComplexFilterToCartesianExt(newFilterRootElement, true));
		}
	}
	filter.unlinkFilters();
	return this;
};
oFF.QInteropManager.prototype.releaseObject = function()
{
	oFF.QModelComponent.prototype.releaseObject.call( this );
	this.m_model = null;
};
oFF.QInteropManager.prototype.removeInvalidCalculatedDimensions = function(calculationIds)
{
	let validCalculations = oFF.XHashSetOfString.create();
	for (let i = 0; i < calculationIds.size(); i++)
	{
		validCalculations.add(calculationIds.get(i));
	}
	oFF.XCollectionUtils.forEach(this.m_model.getDimensionsByType(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION), (calcDim) => {
		if (!validCalculations.contains(calcDim.getName()))
		{
			this.m_model.removeDimension(calcDim);
		}
	});
};
oFF.QInteropManager.prototype.setActiveException = function(id, isActive)
{
	let formulaExceptionManager = this.getQueryModel().getFormulaExceptionManager();
	let formulaException = formulaExceptionManager.containsKey(id) ? formulaExceptionManager.getByKey(id) : formulaExceptionManager.getModelFormulaException(id);
	if (oFF.notNull(formulaException))
	{
		formulaException.setActive(isActive);
	}
	else
	{
		let exceptionManager = this.getQueryModel().getExceptionManager();
		let exceptionIterator = exceptionManager.getIterator();
		let exceptionIdPrefix = oFF.XStringUtils.concatenate2(id, ":");
		while (exceptionIterator.hasNext())
		{
			let exception = exceptionIterator.next();
			if (oFF.XString.startsWith(exception.getName(), exceptionIdPrefix))
			{
				exception.setActive(isActive);
			}
		}
	}
};
oFF.QInteropManager.prototype.setThresholdsActivationInfo = function(thresholdActivationInfoJsonStr)
{
	if (!oFF.XStringUtils.isNullOrEmpty(thresholdActivationInfoJsonStr))
	{
		let activationInfo = this.stringToJsonAsStruct(thresholdActivationInfoJsonStr);
		let formulaIdList = activationInfo.getKeysAsReadOnlyList();
		for (let i = 0; i < formulaIdList.size(); i++)
		{
			let id = formulaIdList.get(i);
			this.setActiveException(id, activationInfo.getBooleanByKey(id));
		}
	}
	return this;
};
oFF.QInteropManager.prototype.stringToJson = function(stringToConvert)
{
	let parser = oFF.JsonParserFactory.newInstance();
	let tmpElement = parser.parse(stringToConvert);
	oFF.XObjectExt.release(parser);
	return tmpElement;
};
oFF.QInteropManager.prototype.stringToJsonAsList = function(stringToConvert)
{
	let tmpElement = this.stringToJson(stringToConvert);
	let jsonList = null;
	if (oFF.notNull(tmpElement) && tmpElement.isList())
	{
		jsonList = tmpElement;
	}
	return jsonList;
};
oFF.QInteropManager.prototype.stringToJsonAsStruct = function(stringToConvert)
{
	let tmpElement = this.stringToJson(stringToConvert);
	let jsonStruct = null;
	if (oFF.notNull(tmpElement) && tmpElement.isStructure())
	{
		jsonStruct = tmpElement;
	}
	return jsonStruct;
};
oFF.QInteropManager.prototype.tryCreateNonSharedCalcDim = function(calculationId, udmInstanceId)
{
	let calcDimProperties = this.m_model.getOlapEnv().getClientQueryObjectManager().getFormulaCalcDimProperties(calculationId, udmInstanceId);
	if (oFF.notNull(calcDimProperties))
	{
		let sharedDimension = this.m_model.getDimensionByName(calculationId);
		if (oFF.isNull(sharedDimension))
		{
			sharedDimension = oFF.QFactory.createFormulaCalculatedDimension(this.m_model, calculationId);
			sharedDimension.setPropertiesKeyRef(calcDimProperties);
		}
		if (sharedDimension.getPropertiesKeyRef() !== null)
		{
			let newFormulaCalcDim = oFF.QFactory.createFormulaCalculatedDimension(this.m_model, sharedDimension.getName());
			let axis = sharedDimension.getAxisType();
			let axisIndex = oFF.AxisType.isAxisVisible(axis) ? sharedDimension.getIndexOnAxis() : 0;
			newFormulaCalcDim.copyFrom(sharedDimension, null);
			newFormulaCalcDim.setPropertiesKeyRef(null);
			newFormulaCalcDim.getProperties().copyFrom(sharedDimension.getProperties(), null);
			newFormulaCalcDim.getTagging().remove(oFF.QTransientConstants.TAG_IS_TRANSIENT);
			newFormulaCalcDim.getTagging().put(oFF.QTransientConstants.TAG_IS_INTEROP_GENERATED, "");
			this.m_model.removeDimension(sharedDimension);
			this.m_model.addDimension(newFormulaCalcDim);
			this.m_model.getAxis(oFF.isNull(axis) ? oFF.AxisType.FREE : axis).insert(axisIndex, newFormulaCalcDim);
			newFormulaCalcDim.setClientDefaultKeyField(newFormulaCalcDim.getKeyField());
			newFormulaCalcDim.setClientDefaultTextField(newFormulaCalcDim.getTextField());
			let resultSetFields = newFormulaCalcDim.getResultSetFields();
			if (newFormulaCalcDim.getTextField() !== null)
			{
				resultSetFields.add(newFormulaCalcDim.getTextField());
			}
			else if (newFormulaCalcDim.getDisplayKeyField() !== null)
			{
				resultSetFields.add(newFormulaCalcDim.getDisplayKeyField());
			}
			else if (newFormulaCalcDim.getKeyField() !== null)
			{
				resultSetFields.add(newFormulaCalcDim.getKeyField());
			}
			return newFormulaCalcDim;
		}
	}
	return null;
};

oFF.QKeyRefList = function() {};
oFF.QKeyRefList.prototype = new oFF.DfAbstractList();
oFF.QKeyRefList.prototype._ff_c = "QKeyRefList";

oFF.QKeyRefList.create = function(storage, type)
{
	let newObj = new oFF.QKeyRefList();
	newObj.m_list = oFF.XCollectionFactory.createNamedList(type);
	newObj.m_storage = storage;
	return newObj;
};
oFF.QKeyRefList.prototype.m_list = null;
oFF.QKeyRefList.prototype.m_storage = null;
oFF.QKeyRefList.prototype.add = function(element)
{
	let keyRef = oFF.QKeyRefProxy.createProxy(this.m_storage, element);
	this.m_list.add(keyRef);
};
oFF.QKeyRefList.prototype.addKeyRef = function(keyRef)
{
	this.m_list.add(oFF.QKeyRefProxy.createProxyWithRef(this.m_storage, keyRef));
};
oFF.QKeyRefList.prototype.clear = function()
{
	this.m_list.clear();
};
oFF.QKeyRefList.prototype.containsKey = function(key)
{
	return this.m_list.containsKey(key);
};
oFF.QKeyRefList.prototype.createArrayCopy = function()
{
	let target = oFF.XArray.create(this.size());
	oFF.XArrayUtils.copyFromObjectArray(this, target, 0, 0, this.size());
	return target;
};
oFF.QKeyRefList.prototype.createListCopy = function()
{
	return oFF.XListUtils.sublist(this, oFF.XList.create(), 0, this.size() - 1);
};
oFF.QKeyRefList.prototype.createMapByStringCopy = function()
{
	let copy = oFF.XHashMapByString.create();
	oFF.XCollectionUtils.mapEntries(this.m_list, (key, value) => {
		copy.put(key, value.get());
	});
	return copy;
};
oFF.QKeyRefList.prototype.get = function(index)
{
	let proxy = this.m_list.get(index);
	return proxy.get();
};
oFF.QKeyRefList.prototype.getByKey = function(key)
{
	let keyRef = this.m_list.getByKey(key);
	if (oFF.isNull(keyRef))
	{
		return null;
	}
	return keyRef.get();
};
oFF.QKeyRefList.prototype.getIterator = function()
{
	return this.getValuesAsReadOnlyList().getIterator();
};
oFF.QKeyRefList.prototype.getKeysAsIterator = function()
{
	return this.m_list.getKeysAsIterator();
};
oFF.QKeyRefList.prototype.getKeysAsReadOnlyList = function()
{
	return this.m_list.getKeysAsReadOnlyList();
};
oFF.QKeyRefList.prototype.getValuesAsReadOnlyList = function()
{
	return this.createListCopy();
};
oFF.QKeyRefList.prototype.hasElements = function()
{
	return this.m_list.hasElements();
};
oFF.QKeyRefList.prototype.insert = function(index, element)
{
	let keyRef = oFF.QKeyRefProxy.createProxy(this.m_storage, element);
	this.m_list.insert(index, keyRef);
};
oFF.QKeyRefList.prototype.insertKeyRef = function(index, keyRef)
{
	this.m_list.insert(index, oFF.QKeyRefProxy.createProxyWithRef(this.m_storage, keyRef));
};
oFF.QKeyRefList.prototype.moveElement = function(fromIndex, toIndex)
{
	this.m_list.moveElement(fromIndex, toIndex);
};
oFF.QKeyRefList.prototype.releaseObject = function()
{
	oFF.XObjectExt.release(this.m_list);
	oFF.DfAbstractList.prototype.releaseObject.call( this );
};
oFF.QKeyRefList.prototype.removeAt = function(index)
{
	let keyRef = this.m_list.removeAt(index);
	return keyRef.get();
};
oFF.QKeyRefList.prototype.removeKeyRef = oFF.noSupport;
oFF.QKeyRefList.prototype.set = function(index, element)
{
	this.m_list.set(index, oFF.QKeyRefProxy.createProxy(this.m_storage, element));
};
oFF.QKeyRefList.prototype.size = function()
{
	return this.m_list.size();
};
oFF.QKeyRefList.prototype.sortByComparator = function(comparator)
{
	let keyRefComparator = oFF.QKeyRefComparator.create(comparator);
	this.m_list.sortByComparator(keyRefComparator);
};
oFF.QKeyRefList.prototype.sortByDirection = function(sortDirection)
{
	this.m_list.sortByDirection(sortDirection);
};
oFF.QKeyRefList.prototype.sublist = function(beginIndex, endIndex)
{
	return oFF.XListUtils.sublist(this, oFF.XList.create(), beginIndex, endIndex);
};

oFF.QFieldLink = function() {};
oFF.QFieldLink.prototype = new oFF.QModelComponent();
oFF.QFieldLink.prototype._ff_c = "QFieldLink";

oFF.QFieldLink.createFieldLink = function(context, parent, first, second)
{
	let newLink = new oFF.QFieldLink();
	newLink.setupModelComponent(context, parent);
	newLink.m_first = first;
	newLink.m_second = second;
	return newLink;
};
oFF.QFieldLink.prototype.m_first = null;
oFF.QFieldLink.prototype.m_second = null;
oFF.QFieldLink.prototype.cloneOlapComponent = function(context, parent)
{
	return oFF.QFieldLink.createFieldLink(context, parent, this.getFirstPart(), this.getSecondPart());
};
oFF.QFieldLink.prototype.doesEitherLinkPartMatchKey = function(dimensionOrFieldKey)
{
	return this.getFirstPart().isSameDimensionOrField(dimensionOrFieldKey) || this.getSecondPart().isSameDimensionOrField(dimensionOrFieldKey);
};
oFF.QFieldLink.prototype.getFirstPart = function()
{
	return this.m_first;
};
oFF.QFieldLink.prototype.getSecondPart = function()
{
	return this.m_second;
};
oFF.QFieldLink.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (other === this)
	{
		return true;
	}
	let xOther = other;
	return this.getFirstPart().isEqualTo(xOther.getFirstPart()) && this.getSecondPart().isEqualTo(xOther.getSecondPart()) || this.getFirstPart().isEqualTo(xOther.getSecondPart()) && this.getSecondPart().isEqualTo(xOther.getFirstPart());
};
oFF.QFieldLink.prototype.releaseObject = function()
{
	this.m_first = oFF.XObjectExt.release(this.m_first);
	this.m_second = oFF.XObjectExt.release(this.m_second);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};

oFF.QFieldLinkPart = function() {};
oFF.QFieldLinkPart.prototype = new oFF.QModelComponent();
oFF.QFieldLinkPart.prototype._ff_c = "QFieldLinkPart";

oFF.QFieldLinkPart.prototype.m_cubeName = null;
oFF.QFieldLinkPart.prototype.m_dimensionName = null;
oFF.QFieldLinkPart.prototype.m_fieldKey = null;
oFF.QFieldLinkPart.prototype.m_fieldName = null;
oFF.QFieldLinkPart.prototype.m_includeHierarchyNodeChildren = false;
oFF.QFieldLinkPart.prototype.m_systemName = null;
oFF.QFieldLinkPart.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let otherPart = other;
	this.m_systemName = otherPart.m_systemName;
	this.m_cubeName = otherPart.m_cubeName;
	this.m_dimensionName = otherPart.m_dimensionName;
	this.m_fieldName = otherPart.m_fieldName;
	this.m_fieldKey = oFF.XObjectExt.cloneIfNotNull(otherPart.m_fieldKey);
	this.m_includeHierarchyNodeChildren = otherPart.m_includeHierarchyNodeChildren;
};
oFF.QFieldLinkPart.prototype.getCubeName = function()
{
	return this.m_cubeName;
};
oFF.QFieldLinkPart.prototype.getDataSourceHashKey = function()
{
	return oFF.notNull(this.m_fieldKey) ? this.m_fieldKey.getDataSourceHashKey() : null;
};
oFF.QFieldLinkPart.prototype.getDimensionName = function()
{
	return this.m_dimensionName;
};
oFF.QFieldLinkPart.prototype.getFieldKey = function()
{
	return this.m_fieldKey;
};
oFF.QFieldLinkPart.prototype.getFieldName = function()
{
	return this.m_fieldName;
};
oFF.QFieldLinkPart.prototype.getSystemName = function()
{
	return this.m_systemName;
};
oFF.QFieldLinkPart.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (other === this)
	{
		return true;
	}
	let xOther = other;
	return this.m_includeHierarchyNodeChildren === xOther.isIncludeHierarchyNodeChildren() && oFF.XString.isEqual(this.getSystemName(), xOther.getSystemName()) && oFF.XString.isEqual(this.getCubeName(), xOther.getCubeName()) && oFF.XString.isEqual(this.getDimensionName(), xOther.getDimensionName()) && oFF.XString.isEqual(this.getFieldName(), xOther.getFieldName());
};
oFF.QFieldLinkPart.prototype.isIncludeHierarchyNodeChildren = function()
{
	return this.m_includeHierarchyNodeChildren;
};
oFF.QFieldLinkPart.prototype.isSameDimension = function(dimension)
{
	let dimensionOrFieldKey = dimension.getMetadata().getCacheKey();
	return this.isSameDimensionOrField(dimensionOrFieldKey);
};
oFF.QFieldLinkPart.prototype.isSameDimensionOrField = function(dimensionOrFieldKey)
{
	if (!oFF.XString.isEqual(this.getSystemName(), dimensionOrFieldKey.getSystemName()) || !oFF.XString.isEqual(this.getDataSourceHashKey(), dimensionOrFieldKey.getDataSourceHashKey()) || this.m_fieldKey.getValidationHash() !== null && !oFF.XString.isEqual(this.m_fieldKey.getValidationHash(), dimensionOrFieldKey.getValidationHash()))
	{
		return false;
	}
	if (dimensionOrFieldKey.getKey2() === null)
	{
		return oFF.XString.isEqual(this.getDimensionName(), dimensionOrFieldKey.getKey1());
	}
	else
	{
		return oFF.XString.isEqual(this.getDimensionName(), dimensionOrFieldKey.getKey2()) && oFF.XString.isEqual(this.getFieldName(), dimensionOrFieldKey.getKey1());
	}
};
oFF.QFieldLinkPart.prototype.releaseObject = function()
{
	this.m_systemName = null;
	this.m_cubeName = null;
	this.m_dimensionName = null;
	this.m_fieldName = null;
	this.m_fieldKey = oFF.XObjectExt.release(this.m_fieldKey);
};
oFF.QFieldLinkPart.prototype.setIncludeHierarchyNodeChildren = function(includeHierarchyNodeChildren)
{
	this.m_includeHierarchyNodeChildren = includeHierarchyNodeChildren;
};

oFF.QExplainQueryContext = function() {};
oFF.QExplainQueryContext.prototype = new oFF.QModelComponent();
oFF.QExplainQueryContext.prototype._ff_c = "QExplainQueryContext";

oFF.QExplainQueryContext.create = function(context, queryModel)
{
	let instance = new oFF.QExplainQueryContext();
	instance.setRowIndex(-1);
	instance.setColumnIndex(-1);
	instance.setupModelComponent(context, queryModel);
	return instance;
};
oFF.QExplainQueryContext.prototype.m_columnIndex = 0;
oFF.QExplainQueryContext.prototype.m_rowIndex = 0;
oFF.QExplainQueryContext.prototype.getColumnIndex = function()
{
	return this.m_columnIndex;
};
oFF.QExplainQueryContext.prototype.getRowIndex = function()
{
	return this.m_rowIndex;
};
oFF.QExplainQueryContext.prototype.isSet = function()
{
	return this.m_rowIndex !== -1 || this.m_columnIndex !== -1;
};
oFF.QExplainQueryContext.prototype.reset = function()
{
	this.m_rowIndex = -1;
	this.m_columnIndex = -1;
};
oFF.QExplainQueryContext.prototype.setColumnIndex = function(columnIndex)
{
	if (columnIndex !== this.m_columnIndex)
	{
		this.m_columnIndex = columnIndex;
		this.notifyNodeChanged();
	}
};
oFF.QExplainQueryContext.prototype.setRowIndex = function(rowIndex)
{
	if (rowIndex !== this.m_rowIndex)
	{
		this.m_rowIndex = rowIndex;
		this.notifyNodeChanged();
	}
};

oFF.QInfoProvider = function() {};
oFF.QInfoProvider.prototype = new oFF.QModelComponent();
oFF.QInfoProvider.prototype._ff_c = "QInfoProvider";

oFF.QInfoProvider.createInfoProvider = function(queryModel, name, text, baseInfoProvider)
{
	let infoProvider = new oFF.QInfoProvider();
	infoProvider.setupInfoProvider(queryModel, name, text, baseInfoProvider);
	return infoProvider;
};
oFF.QInfoProvider.prototype.m_baseInfoProvider = null;
oFF.QInfoProvider.prototype.getBaseInfoProvider = function()
{
	return this.m_baseInfoProvider;
};
oFF.QInfoProvider.prototype.releaseObject = function()
{
	this.m_baseInfoProvider = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QInfoProvider.prototype.setupInfoProvider = function(queryModel, name, text, baseInfoProvider)
{
	oFF.QModelComponent.prototype.setupModelComponentWithName.call( this , queryModel, queryModel, name);
	this.setText(text);
	this.m_baseInfoProvider = baseInfoProvider;
};

oFF.QRankSettings = function() {};
oFF.QRankSettings.prototype = new oFF.QModelComponent();
oFF.QRankSettings.prototype._ff_c = "QRankSettings";

oFF.QRankSettings.create = function()
{
	let rankSettings = new oFF.QRankSettings();
	rankSettings.m_appliedDimensions = oFF.XList.create();
	rankSettings.m_isBreakGrouping = true;
	rankSettings.m_relatedElements = oFF.XList.create();
	return rankSettings;
};
oFF.QRankSettings.prototype.m_appliedDimensions = null;
oFF.QRankSettings.prototype.m_comparisonOperator = null;
oFF.QRankSettings.prototype.m_isApplyRankingsWithoutReset = false;
oFF.QRankSettings.prototype.m_isBlendedPrimaryMeasure = false;
oFF.QRankSettings.prototype.m_isBlendedSecondaryMeasure = false;
oFF.QRankSettings.prototype.m_isBreakGrouping = false;
oFF.QRankSettings.prototype.m_isRankOnAllDimensions = false;
oFF.QRankSettings.prototype.m_maxRows = 0;
oFF.QRankSettings.prototype.m_measure = null;
oFF.QRankSettings.prototype.m_preserveSort = false;
oFF.QRankSettings.prototype.m_primaryMeasureDatasetId = null;
oFF.QRankSettings.prototype.m_relatedElements = null;
oFF.QRankSettings.prototype.m_secondaryMeasure = null;
oFF.QRankSettings.prototype.m_secondaryMeasureDatasetId = null;
oFF.QRankSettings.prototype.m_useClientSideRanking = false;
oFF.QRankSettings.prototype.m_useDefaultSort = false;
oFF.QRankSettings.prototype.m_useRankConditions = true;
oFF.QRankSettings.prototype.m_versionDimension = null;
oFF.QRankSettings.prototype.m_versionElementId = null;
oFF.QRankSettings.prototype.addAppliedDimension = function(dimension)
{
	this.m_appliedDimensions.add(dimension);
};
oFF.QRankSettings.prototype.clearAppliedDimensions = function()
{
	this.m_appliedDimensions.clear();
};
oFF.QRankSettings.prototype.cloneExt = function(flags)
{
	let copyRankSettings = oFF.QRankSettings.create();
	copyRankSettings.copyFrom(this, null);
	return copyRankSettings;
};
oFF.QRankSettings.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let queryModel = this.getQueryModel();
	let otherRankSettings = other;
	this.m_measure = otherRankSettings.getMeasure();
	this.m_secondaryMeasure = otherRankSettings.getSecondaryMeasure();
	this.m_primaryMeasureDatasetId = otherRankSettings.getPrimaryMeasureDatasetId();
	this.m_secondaryMeasureDatasetId = otherRankSettings.getSecondaryMeasureDatasetId();
	this.m_comparisonOperator = otherRankSettings.getComparisonOperator();
	this.m_maxRows = otherRankSettings.getMaxRows();
	this.m_appliedDimensions = oFF.XCollectionUtils.createListCopy(otherRankSettings.getAppliedDimensions());
	this.m_versionElementId = otherRankSettings.getVersionElementId();
	this.m_versionDimension = otherRankSettings.getVersionDimension();
	this.m_useRankConditions = otherRankSettings.useRankConditions();
	this.m_useDefaultSort = otherRankSettings.useDefaultSort();
	this.m_isBlendedPrimaryMeasure = otherRankSettings.isBlendedPrimaryMeasure();
	this.m_isBlendedSecondaryMeasure = otherRankSettings.isBlendedSecondaryMeasure();
	this.m_useClientSideRanking = otherRankSettings.isUseClientSideRanking();
	this.m_isRankOnAllDimensions = otherRankSettings.isRankOnAllDimensions();
	this.m_isApplyRankingsWithoutReset = otherRankSettings.isApplyRankingsWithoutReset();
	this.m_preserveSort = otherRankSettings.isPreserveSort();
	this.m_isBreakGrouping = otherRankSettings.isBreakGrouping();
	let temp = oFF.XList.create();
	let size = otherRankSettings.getRelatedElements().size();
	for (let i = 0; i < size; i++)
	{
		let origElement = otherRankSettings.getRelatedElements().get(i);
		temp.add(oFF.QFactory.createDimensionElement(queryModel.getFieldByName(origElement.getSelectField().getName()), origElement.getSelectHierarchyName(), origElement.getSelectValue()));
	}
	this.m_relatedElements = temp;
};
oFF.QRankSettings.prototype.getAppliedDimensions = function()
{
	return this.m_appliedDimensions;
};
oFF.QRankSettings.prototype.getComparisonOperator = function()
{
	return this.m_comparisonOperator;
};
oFF.QRankSettings.prototype.getMaxRows = function()
{
	return this.m_maxRows;
};
oFF.QRankSettings.prototype.getMeasure = function()
{
	return this.m_measure;
};
oFF.QRankSettings.prototype.getPrimaryMeasureDatasetId = function()
{
	return this.m_primaryMeasureDatasetId;
};
oFF.QRankSettings.prototype.getRelatedElements = function()
{
	return this.m_relatedElements;
};
oFF.QRankSettings.prototype.getSecondaryMeasure = function()
{
	return this.m_secondaryMeasure;
};
oFF.QRankSettings.prototype.getSecondaryMeasureDatasetId = function()
{
	return this.m_secondaryMeasureDatasetId;
};
oFF.QRankSettings.prototype.getVersionDimension = function()
{
	return this.m_versionDimension;
};
oFF.QRankSettings.prototype.getVersionElementId = function()
{
	return this.m_versionElementId;
};
oFF.QRankSettings.prototype.isApplyRankingsWithoutReset = function()
{
	return this.m_isApplyRankingsWithoutReset;
};
oFF.QRankSettings.prototype.isBlendedPrimaryMeasure = function()
{
	return this.m_isBlendedPrimaryMeasure;
};
oFF.QRankSettings.prototype.isBlendedSecondaryMeasure = function()
{
	return this.m_isBlendedSecondaryMeasure;
};
oFF.QRankSettings.prototype.isBreakGrouping = function()
{
	return this.m_isBreakGrouping;
};
oFF.QRankSettings.prototype.isPreserveSort = function()
{
	return this.m_preserveSort;
};
oFF.QRankSettings.prototype.isRankOnAllDimensions = function()
{
	return this.m_isRankOnAllDimensions;
};
oFF.QRankSettings.prototype.isUseClientSideRanking = function()
{
	return this.m_useClientSideRanking;
};
oFF.QRankSettings.prototype.releaseObject = function()
{
	this.m_measure = null;
	this.m_secondaryMeasure = null;
	this.m_comparisonOperator = null;
	this.m_maxRows = 0;
	this.m_appliedDimensions.clear();
	this.m_versionElementId = null;
	this.m_versionDimension = null;
	this.m_useClientSideRanking = false;
	this.m_isRankOnAllDimensions = false;
	this.m_isApplyRankingsWithoutReset = false;
	this.m_preserveSort = false;
	this.m_relatedElements = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_relatedElements);
};
oFF.QRankSettings.prototype.removeAppliedDimension = function(dimensionName)
{
	for (let i = this.m_appliedDimensions.size() - 1; i >= 0; i--)
	{
		if (oFF.XString.isEqual(this.m_appliedDimensions.get(i).getName(), dimensionName))
		{
			return this.m_appliedDimensions.removeAt(i);
		}
	}
	return null;
};
oFF.QRankSettings.prototype.setBreakGrouping = function(breakGrouping)
{
	this.m_isBreakGrouping = breakGrouping;
};
oFF.QRankSettings.prototype.setComparisonOperator = function(comparisonOperator)
{
	this.m_comparisonOperator = comparisonOperator;
};
oFF.QRankSettings.prototype.setIsApplyRankingsWithoutReset = function(isApplyRankingsWithoutReset)
{
	this.m_isApplyRankingsWithoutReset = isApplyRankingsWithoutReset;
};
oFF.QRankSettings.prototype.setIsBlendedPrimaryMeasure = function(isBlendedMeasure)
{
	this.m_isBlendedPrimaryMeasure = isBlendedMeasure;
};
oFF.QRankSettings.prototype.setIsBlendedSecondaryMeasure = function(isBlendedMeasure)
{
	this.m_isBlendedSecondaryMeasure = isBlendedMeasure;
};
oFF.QRankSettings.prototype.setIsRankOnAllDimensions = function(isRankOnAllDimensions)
{
	this.m_isRankOnAllDimensions = isRankOnAllDimensions;
};
oFF.QRankSettings.prototype.setMaxRows = function(maxRows)
{
	this.m_maxRows = maxRows;
};
oFF.QRankSettings.prototype.setMeasure = function(measure)
{
	this.m_measure = measure;
};
oFF.QRankSettings.prototype.setPreserveSort = function(preserveSort)
{
	this.m_preserveSort = preserveSort;
};
oFF.QRankSettings.prototype.setPrimaryDatasetId = function(datasetId)
{
	this.m_primaryMeasureDatasetId = datasetId;
};
oFF.QRankSettings.prototype.setRelatedElements = function(relatedElements)
{
	this.m_relatedElements.clear();
	this.m_relatedElements.addAll(relatedElements);
};
oFF.QRankSettings.prototype.setSecondaryDatasetId = function(datasetId)
{
	this.m_secondaryMeasureDatasetId = datasetId;
};
oFF.QRankSettings.prototype.setSecondaryMeasure = function(secondaryMeasure)
{
	this.m_secondaryMeasure = secondaryMeasure;
};
oFF.QRankSettings.prototype.setUseClientSideRanking = function(useClientSideRanking)
{
	this.m_useClientSideRanking = useClientSideRanking;
};
oFF.QRankSettings.prototype.setUseDefaultSort = function(useDefaultSort)
{
	this.m_useDefaultSort = useDefaultSort;
};
oFF.QRankSettings.prototype.setUseRankConditions = function(useRankConditions)
{
	this.m_useRankConditions = useRankConditions;
};
oFF.QRankSettings.prototype.setVersionDimension = function(versionDimension)
{
	this.m_versionDimension = versionDimension;
};
oFF.QRankSettings.prototype.setVersionElementId = function(versionElementId)
{
	this.m_versionElementId = versionElementId;
};
oFF.QRankSettings.prototype.useDefaultSort = function()
{
	return this.m_useDefaultSort;
};
oFF.QRankSettings.prototype.useRankConditions = function()
{
	return this.m_useRankConditions;
};

oFF.ReturnedUniqueAxisProperties = function() {};
oFF.ReturnedUniqueAxisProperties.prototype = new oFF.QModelComponent();
oFF.ReturnedUniqueAxisProperties.prototype._ff_c = "ReturnedUniqueAxisProperties";

oFF.ReturnedUniqueAxisProperties.create = function(context, parent)
{
	let instance = new oFF.ReturnedUniqueAxisProperties();
	instance.setupModelComponent(context, parent);
	instance.setup();
	return instance;
};
oFF.ReturnedUniqueAxisProperties.prototype.m_columnProperties = null;
oFF.ReturnedUniqueAxisProperties.prototype.m_defaultAxisProperties = null;
oFF.ReturnedUniqueAxisProperties.prototype.m_rowProperties = null;
oFF.ReturnedUniqueAxisProperties.prototype.m_supportedReturnedDataSelections = null;
oFF.ReturnedUniqueAxisProperties.prototype.checkPropertySelection = function(properties, returnedDataSelection)
{
	return oFF.isNull(returnedDataSelection) && oFF.XStream.of(properties).anyMatch((prop) => {
		return prop.getBoolean();
	}) || this.isPropertyActive(properties, returnedDataSelection);
};
oFF.ReturnedUniqueAxisProperties.prototype.clearReturnedDataSelections = function(axisType)
{
	if (axisType === oFF.AxisType.COLUMNS)
	{
		this.m_columnProperties.clear();
		this.notifyNodeChanged();
	}
	else if (axisType === oFF.AxisType.ROWS)
	{
		this.m_rowProperties.clear();
		this.notifyNodeChanged();
	}
	else if (oFF.isNull(axisType))
	{
		this.m_defaultAxisProperties.clear();
		this.notifyNodeChanged();
	}
};
oFF.ReturnedUniqueAxisProperties.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let orig = other;
	this.m_rowProperties = orig.m_rowProperties.createMapCopy();
	this.m_columnProperties = orig.m_columnProperties.createMapCopy();
	this.m_defaultAxisProperties = orig.m_defaultAxisProperties.createMapCopy();
};
oFF.ReturnedUniqueAxisProperties.prototype.getColumnProperties = function()
{
	return this.m_columnProperties;
};
oFF.ReturnedUniqueAxisProperties.prototype.getDefaultAxisProperties = function()
{
	return this.m_defaultAxisProperties;
};
oFF.ReturnedUniqueAxisProperties.prototype.getEffectiveColumnProperties = function()
{
	let result;
	let queryModel = this.getQueryModel();
	let leadingStructure = queryModel.isLeadingStructureAccount() ? queryModel.getAccountDimension() : queryModel.getMeasureDimension();
	if (oFF.isNull(leadingStructure) || leadingStructure.getAxisType() !== oFF.AxisType.ROWS)
	{
		result = this.mergeAxisProperties(this.getColumnProperties());
	}
	else
	{
		result = this.getColumnProperties();
	}
	return result;
};
oFF.ReturnedUniqueAxisProperties.prototype.getEffectiveRowProperties = function()
{
	let result;
	let queryModel = this.getQueryModel();
	let leadingStructure = queryModel.isLeadingStructureAccount() ? queryModel.getAccountDimension() : queryModel.getMeasureDimension();
	if (oFF.notNull(leadingStructure) && leadingStructure.getAxisType() === oFF.AxisType.ROWS)
	{
		result = this.mergeAxisProperties(this.getRowProperties());
	}
	else
	{
		result = this.getRowProperties();
	}
	return result;
};
oFF.ReturnedUniqueAxisProperties.prototype.getRowProperties = function()
{
	return this.m_rowProperties;
};
oFF.ReturnedUniqueAxisProperties.prototype.hasActiveReturnedDataSelection = function(axisType, returnedDataSelection)
{
	let result = false;
	if (axisType === oFF.AxisType.COLUMNS)
	{
		result = this.checkPropertySelection(this.m_columnProperties, returnedDataSelection);
	}
	else if (axisType === oFF.AxisType.ROWS)
	{
		result = this.checkPropertySelection(this.m_rowProperties, returnedDataSelection);
	}
	else if (oFF.isNull(axisType))
	{
		result = this.checkPropertySelection(this.m_columnProperties, returnedDataSelection) || this.checkPropertySelection(this.m_rowProperties, returnedDataSelection);
	}
	return result;
};
oFF.ReturnedUniqueAxisProperties.prototype.isPropertyActive = function(properties, returnedDataSelection)
{
	return oFF.notNull(returnedDataSelection) && oFF.notNull(properties) && properties.containsKey(returnedDataSelection) && properties.getByKey(returnedDataSelection).getBoolean();
};
oFF.ReturnedUniqueAxisProperties.prototype.mergeAxisProperties = function(specificMap)
{
	let resultMap = oFF.XSimpleMap.create();
	oFF.XMapUtils.putAllObjects(specificMap, resultMap);
	oFF.XCollectionUtils.forEach(this.m_defaultAxisProperties.getKeysAsReadOnlyList(), (uap) => {
		let val = this.m_defaultAxisProperties.getByKey(uap);
		if (val.getBoolean())
		{
			resultMap.put(uap, val);
		}
	});
	return resultMap;
};
oFF.ReturnedUniqueAxisProperties.prototype.releaseObject = function()
{
	this.m_defaultAxisProperties = oFF.XObjectExt.release(this.m_defaultAxisProperties);
	this.m_rowProperties = oFF.XObjectExt.release(this.m_rowProperties);
	this.m_columnProperties = oFF.XObjectExt.release(this.m_columnProperties);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.ReturnedUniqueAxisProperties.prototype.setup = function()
{
	this.m_defaultAxisProperties = oFF.XSimpleMap.create();
	this.m_rowProperties = oFF.XSimpleMap.create();
	this.m_columnProperties = oFF.XSimpleMap.create();
	this.m_supportedReturnedDataSelections = oFF.XList.create();
	let caps = this.getModelCapabilities();
	let systemType = oFF.isNull(caps) ? null : caps.getSystemType();
	if (oFF.notNull(systemType))
	{
		if (systemType.isTypeOf(oFF.SystemType.BW))
		{
			this.m_supportedReturnedDataSelections.add(oFF.UniqueAxisPropertyType.NUMERIC_SHIFT);
			this.m_supportedReturnedDataSelections.add(oFF.UniqueAxisPropertyType.NUMERIC_ROUNDING);
			this.m_supportedReturnedDataSelections.add(oFF.UniqueAxisPropertyType.CELL_VALUE_TYPES);
			this.m_supportedReturnedDataSelections.add(oFF.UniqueAxisPropertyType.UNIT_INDEX);
			this.m_supportedReturnedDataSelections.add(oFF.UniqueAxisPropertyType.UNIT_TYPES);
			this.m_supportedReturnedDataSelections.add(oFF.UniqueAxisPropertyType.UNIT_DESCRIPTIONS);
			this.m_supportedReturnedDataSelections.add(oFF.UniqueAxisPropertyType.UNITS);
		}
		else if (systemType.isTypeOf(oFF.SystemType.HANA))
		{
			this.m_supportedReturnedDataSelections.add(oFF.UniqueAxisPropertyType.NUMERIC_SHIFT);
			this.m_supportedReturnedDataSelections.add(oFF.UniqueAxisPropertyType.UNIT_INDEX);
			this.m_supportedReturnedDataSelections.add(oFF.UniqueAxisPropertyType.UNITS);
			this.m_supportedReturnedDataSelections.add(oFF.UniqueAxisPropertyType.NUMERIC_ROUNDING);
			this.m_supportedReturnedDataSelections.add(oFF.UniqueAxisPropertyType.LONGEST_ATTRIBUTE);
			this.m_supportedReturnedDataSelections.add(oFF.UniqueAxisPropertyType.LONGEST_CELL_VALUE_ROUNDED);
			this.m_supportedReturnedDataSelections.add(oFF.UniqueAxisPropertyType.LONGEST_CELL_VALUE_FORMATTED);
		}
	}
};
oFF.ReturnedUniqueAxisProperties.prototype.supportsReturnedDataSelection = function(returnedDataSelection)
{
	return this.m_supportedReturnedDataSelections.contains(returnedDataSelection);
};
oFF.ReturnedUniqueAxisProperties.prototype.swapAxes = function()
{
	let swapProperties = this.m_rowProperties;
	this.m_rowProperties = this.m_columnProperties;
	this.m_columnProperties = swapProperties;
	this.notifyNodeChanged();
};
oFF.ReturnedUniqueAxisProperties.prototype.toggleActivation = function(axisType, dataSelection, enable)
{
	let properties;
	if (axisType === oFF.AxisType.ROWS)
	{
		properties = this.m_rowProperties;
	}
	else if (axisType === oFF.AxisType.COLUMNS)
	{
		properties = this.m_columnProperties;
	}
	else
	{
		properties = this.m_defaultAxisProperties;
	}
	if (oFF.notNull(properties))
	{
		if (!properties.containsKey(dataSelection) || properties.getByKey(dataSelection).getBoolean() !== enable)
		{
			properties.put(dataSelection, oFF.XBooleanValue.create(enable));
			this.notifyNodeChanged();
		}
	}
};

oFF.QResultStructureItem = function() {};
oFF.QResultStructureItem.prototype = new oFF.QModelComponent();
oFF.QResultStructureItem.prototype._ff_c = "QResultStructureItem";

oFF.QResultStructureItem.createResultStructureItem = function(context, parent, element, visibility)
{
	let item = new oFF.QResultStructureItem();
	item.setupResultStructureItem(context, parent, element, visibility);
	return item;
};
oFF.QResultStructureItem.prototype.m_element = null;
oFF.QResultStructureItem.prototype.m_visibility = null;
oFF.QResultStructureItem.prototype.getResultStructureElement = function()
{
	return this.m_element;
};
oFF.QResultStructureItem.prototype.getResultVisibility = function()
{
	return this.m_visibility;
};
oFF.QResultStructureItem.prototype.releaseObject = function()
{
	this.m_element = null;
	this.m_visibility = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QResultStructureItem.prototype.setResultStructureElement = function(element)
{
	if (this.m_element !== element)
	{
		this.m_element = element;
		this.notifyNodeChanged();
	}
};
oFF.QResultStructureItem.prototype.setResultVisibility = function(visibility)
{
	if (this.m_visibility !== visibility)
	{
		this.m_visibility = visibility;
		this.notifyNodeChanged();
	}
};
oFF.QResultStructureItem.prototype.setupResultStructureItem = function(context, parent, element, visibility)
{
	oFF.QModelComponent.prototype.setupModelComponent.call( this , context, parent);
	this.m_element = element;
	this.m_visibility = visibility;
};
oFF.QResultStructureItem.prototype.toString = function()
{
	if (oFF.notNull(this.m_element) && oFF.notNull(this.m_visibility))
	{
		return oFF.XStringUtils.concatenate3(this.m_element.getName(), ": ", this.m_visibility.getName());
	}
	return oFF.QModelComponent.prototype.toString.call( this );
};

oFF.QMeasuresSupportedRunningAggregationSet = function() {};
oFF.QMeasuresSupportedRunningAggregationSet.prototype = new oFF.QModelComponent();
oFF.QMeasuresSupportedRunningAggregationSet.prototype._ff_c = "QMeasuresSupportedRunningAggregationSet";

oFF.QMeasuresSupportedRunningAggregationSet.create = function(runAggrManager, name, runningAggrSet, measures)
{
	let object = new oFF.QMeasuresSupportedRunningAggregationSet();
	object.setupModelComponent(runAggrManager, runAggrManager);
	object.m_measures = oFF.XList.create();
	if (oFF.notNull(name))
	{
		object.setupProperties(name, runningAggrSet, measures);
	}
	return object;
};
oFF.QMeasuresSupportedRunningAggregationSet.prototype.m_measures = null;
oFF.QMeasuresSupportedRunningAggregationSet.prototype.m_runningAggregationSet = null;
oFF.QMeasuresSupportedRunningAggregationSet.prototype.containsMeasure = function(measureName)
{
	return this.m_measures.contains(measureName);
};
oFF.QMeasuresSupportedRunningAggregationSet.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let origin = other;
	this.m_runningAggregationSet = origin.m_runningAggregationSet;
	this.setMeasures(origin.m_measures);
};
oFF.QMeasuresSupportedRunningAggregationSet.prototype.getMeasures = function()
{
	return this.m_measures;
};
oFF.QMeasuresSupportedRunningAggregationSet.prototype.getRunningAggregationSet = function()
{
	return this.m_runningAggregationSet;
};
oFF.QMeasuresSupportedRunningAggregationSet.prototype.releaseObject = function()
{
	this.m_runningAggregationSet = null;
	this.m_measures = oFF.XObjectExt.release(this.m_measures);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QMeasuresSupportedRunningAggregationSet.prototype.setMeasures = function(measures)
{
	if (oFF.notNull(measures) && measures !== this.m_measures)
	{
		this.m_measures = measures.createListCopy();
	}
};
oFF.QMeasuresSupportedRunningAggregationSet.prototype.setupProperties = function(name, runningAggrSet, measures)
{
	this.setName(name);
	this.m_runningAggregationSet = runningAggrSet;
	this.setMeasures(measures);
};

oFF.QRunningAggregationManager = function() {};
oFF.QRunningAggregationManager.prototype = new oFF.QModelComponent();
oFF.QRunningAggregationManager.prototype._ff_c = "QRunningAggregationManager";

oFF.QRunningAggregationManager.create = function(queryModel)
{
	let object = new oFF.QRunningAggregationManager();
	object.setupRunningAggregationManager(queryModel);
	return object;
};
oFF.QRunningAggregationManager.prototype.m_measuresSupportedRunningAggrSets = null;
oFF.QRunningAggregationManager.prototype.m_runningAggrSets = null;
oFF.QRunningAggregationManager.prototype.addMeasuresSupportedRunAggrSet = function(set)
{
	this.m_measuresSupportedRunningAggrSets.add(set);
};
oFF.QRunningAggregationManager.prototype.addRunningAggregationSet = function(setName, operators)
{
	this.m_runningAggrSets.put(setName, operators);
};
oFF.QRunningAggregationManager.prototype.clear = function()
{
	this.m_runningAggrSets.clear();
	this.m_measuresSupportedRunningAggrSets.clear();
};
oFF.QRunningAggregationManager.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let origin = other;
	this.clear();
	this.copyRunningAggrSets(origin.m_runningAggrSets);
	this.copyMeasuresSupportedRunningAggrSets(origin.m_measuresSupportedRunningAggrSets);
};
oFF.QRunningAggregationManager.prototype.copyMeasuresSupportedRunningAggrSets = function(originSets)
{
	if (oFF.notNull(originSets))
	{
		let setSize = originSets.size();
		for (let i = 0; i < setSize; i++)
		{
			let clonedMeasuresSet = oFF.QMeasuresSupportedRunningAggregationSet.create(this, null, null, null);
			clonedMeasuresSet.copyFrom(originSets.get(i), null);
			this.addMeasuresSupportedRunAggrSet(clonedMeasuresSet);
		}
	}
};
oFF.QRunningAggregationManager.prototype.copyRunningAggrSets = function(originRunningAggrSets)
{
	if (oFF.notNull(originRunningAggrSets))
	{
		let keys = originRunningAggrSets.getKeysAsReadOnlyList();
		let keysSize = keys.size();
		for (let k = 0; k < keysSize; k++)
		{
			let setName = keys.get(k);
			let operators = oFF.XList.create();
			operators.addAll(originRunningAggrSets.getByKey(setName));
			this.addRunningAggregationSet(setName, operators);
		}
	}
};
oFF.QRunningAggregationManager.prototype.getMeasuresSupportedRunningAggregationSet = function()
{
	return this.m_measuresSupportedRunningAggrSets;
};
oFF.QRunningAggregationManager.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.RUNNING_AGGREGATION_MANAGER;
};
oFF.QRunningAggregationManager.prototype.getOperatorsOfSet = function(setName)
{
	return this.m_runningAggrSets.getByKey(setName);
};
oFF.QRunningAggregationManager.prototype.getRunningAggregationOperatorsSupportedByMeasure = function(measureName)
{
	if (oFF.notNull(measureName))
	{
		let aggrSet = oFF.XCollectionUtils.findFirst(this.m_measuresSupportedRunningAggrSets, (set) => {
			return set.containsMeasure(measureName);
		});
		if (oFF.notNull(aggrSet))
		{
			return this.getOperatorsOfSet(aggrSet.getRunningAggregationSet());
		}
	}
	return null;
};
oFF.QRunningAggregationManager.prototype.getRunningAggregationSets = function()
{
	return this.m_runningAggrSets;
};
oFF.QRunningAggregationManager.prototype.getStandardRunningAggregationOperators = function()
{
	return this.getOperatorsOfSet("COMMON");
};
oFF.QRunningAggregationManager.prototype.isRunningAggregationSubmitAvailable = function(memberAxisType)
{
	let dimAxisType = memberAxisType === oFF.AxisType.ROWS ? oFF.AxisType.COLUMNS : oFF.AxisType.ROWS;
	let dimensions = this.getQueryModel().getDimensions();
	return !oFF.XStream.of(dimensions).anyMatch((dim) => {
		return dim.getAxisType() === dimAxisType && dim.isHierarchyActive();
	});
};
oFF.QRunningAggregationManager.prototype.mergeDeepRecursive = function(settings, other)
{
	this.copyFrom(other, null);
};
oFF.QRunningAggregationManager.prototype.releaseObject = function()
{
	this.m_runningAggrSets = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_runningAggrSets);
	this.m_measuresSupportedRunningAggrSets = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_measuresSupportedRunningAggrSets);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QRunningAggregationManager.prototype.setupRunningAggregationManager = function(queryModel)
{
	this.setupModelComponent(queryModel, queryModel);
	this.m_runningAggrSets = oFF.XHashMapByString.create();
	this.m_measuresSupportedRunningAggrSets = oFF.XLinkedMap.createLinkedMap();
};

oFF.QSimulationManager = function() {};
oFF.QSimulationManager.prototype = new oFF.QModelComponent();
oFF.QSimulationManager.prototype._ff_c = "QSimulationManager";

oFF.QSimulationManager._create = function(context, parentNode)
{
	let simulationManager = new oFF.QSimulationManager();
	simulationManager.setupSimulation(context, parentNode);
	return simulationManager;
};
oFF.QSimulationManager.prototype.m_simulationStructure = null;
oFF.QSimulationManager.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originSimulationManager = other;
	this.m_simulationStructure = oFF.PrUtils.createElementDeepCopy(originSimulationManager.getSimulationStructure());
};
oFF.QSimulationManager.prototype.getSimulationStructure = function()
{
	return this.m_simulationStructure;
};
oFF.QSimulationManager.prototype.releaseObject = function()
{
	this.m_simulationStructure = oFF.XObjectExt.release(this.m_simulationStructure);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QSimulationManager.prototype.setSimulationStructure = function(simulationStructure)
{
	this.m_simulationStructure = simulationStructure;
};
oFF.QSimulationManager.prototype.setupSimulation = function(context, parentNode)
{
	oFF.QModelComponent.prototype.setupModelComponent.call( this , context, parentNode);
};

oFF.QGenericSorting = function() {};
oFF.QGenericSorting.prototype = new oFF.QModelComponent();
oFF.QGenericSorting.prototype._ff_c = "QGenericSorting";

oFF.QGenericSorting.prototype.m_caseSensitive = false;
oFF.QGenericSorting.prototype.m_createdFromMetadata = false;
oFF.QGenericSorting.prototype.m_customOrder = null;
oFF.QGenericSorting.prototype.m_customSortPosition = null;
oFF.QGenericSorting.prototype.m_direction = null;
oFF.QGenericSorting.prototype.m_icuLocale = null;
oFF.QGenericSorting.prototype.m_preserveGroups = false;
oFF.QGenericSorting.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originGenericSorting = other;
	this.m_direction = originGenericSorting.m_direction;
	this.m_preserveGroups = originGenericSorting.m_preserveGroups;
	this.m_caseSensitive = originGenericSorting.m_caseSensitive;
	this.m_icuLocale = originGenericSorting.m_icuLocale;
	if (oFF.notNull(originGenericSorting.m_customOrder))
	{
		this.m_customOrder = originGenericSorting.m_customOrder.createListCopy();
	}
	this.m_customSortPosition = originGenericSorting.m_customSortPosition;
	this.m_createdFromMetadata = originGenericSorting.m_createdFromMetadata;
};
oFF.QGenericSorting.prototype.dimensionSorting = function()
{
	let capabilities = this.getModelCapabilities();
	return oFF.OlapComponentType.DIMENSION_SORTING === this.getOlapComponentType() && (capabilities.supportsCustomMeasureSortOrder() && this.getDimension().isMeasureStructure() || capabilities.supportsCustomMemberKeySortOrder() && !this.getDimension().isMeasureStructure() || this.getSortingManager().supportsCustomSortingExtended() && this.getDimension().isStructure());
};
oFF.QGenericSorting.prototype.fieldSorting = function()
{
	return oFF.OlapComponentType.FIELD_SORTING === this.getOlapComponentType() && this.getModelCapabilities().supportsCustomSort();
};
oFF.QGenericSorting.prototype.getCustomSort = function()
{
	return this.m_customOrder;
};
oFF.QGenericSorting.prototype.getCustomSortPosition = function()
{
	return this.m_customSortPosition;
};
oFF.QGenericSorting.prototype.getDimension = oFF.noSupport;
oFF.QGenericSorting.prototype.getDirection = function()
{
	return this.m_direction;
};
oFF.QGenericSorting.prototype.getLocale = function()
{
	return this.m_icuLocale;
};
oFF.QGenericSorting.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.GENERIC_SORTING;
};
oFF.QGenericSorting.prototype.getSortingManager = function()
{
	return this.getQueryModel().getSortingManager();
};
oFF.QGenericSorting.prototype.isBreakGroupingEnabled = function()
{
	return !this.m_preserveGroups;
};
oFF.QGenericSorting.prototype.isCaseSensitive = function()
{
	return this.m_caseSensitive;
};
oFF.QGenericSorting.prototype.isCreatedFromMetadata = function()
{
	return this.m_createdFromMetadata;
};
oFF.QGenericSorting.prototype.isPreserveGroupingEnabled = function()
{
	return this.m_preserveGroups;
};
oFF.QGenericSorting.prototype.releaseObject = function()
{
	this.m_direction = null;
	this.m_icuLocale = null;
	this.m_customOrder = oFF.XObjectExt.release(this.m_customOrder);
	this.m_customSortPosition = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QGenericSorting.prototype.setBreakGrouping = function(breaking)
{
	this.setPreserveGrouping(!breaking);
};
oFF.QGenericSorting.prototype.setCreatedFromMetadata = function(createdFromMetadata)
{
	this.m_createdFromMetadata = createdFromMetadata;
};
oFF.QGenericSorting.prototype.setCustomSort = function(customOrder)
{
	if (oFF.XCollectionUtils.hasElements(customOrder) && (this.fieldSorting() || this.dimensionSorting()))
	{
		this.m_customOrder = customOrder.createListCopy();
		this.notifyNodeChanged();
	}
};
oFF.QGenericSorting.prototype.setCustomSortPosition = function(customSortPosition)
{
	if (this.fieldSorting() || this.dimensionSorting())
	{
		this.m_customSortPosition = customSortPosition;
		this.notifyNodeChanged();
	}
};
oFF.QGenericSorting.prototype.setDimension = oFF.noSupport;
oFF.QGenericSorting.prototype.setDirection = function(direction)
{
	if (this.m_direction !== direction)
	{
		this.m_direction = direction;
		this.notifyNodeChanged();
	}
};
oFF.QGenericSorting.prototype.setIsCaseSensitive = function(isCaseSensitive)
{
	if (this.getModelCapabilities().supportsLocaleSorting())
	{
		let oldValue = this.m_caseSensitive;
		this.m_caseSensitive = isCaseSensitive;
		this.notifyPropertyBooleanChanged(oFF.QSortProperties.QY_CASE_SENSITIVE, oldValue, isCaseSensitive);
	}
};
oFF.QGenericSorting.prototype.setLocale = function(icuLocale)
{
	if (this.getModelCapabilities().supportsLocaleSorting())
	{
		this.m_icuLocale = icuLocale;
	}
};
oFF.QGenericSorting.prototype.setPreserveGrouping = function(preserve)
{
	if (preserve)
	{
		oFF.XBooleanUtils.checkTrue(this.supportsPreserveGrouping(), "Group preserving is not supported");
	}
	else
	{
		oFF.XBooleanUtils.checkTrue(this.supportsBreakGrouping(), "Group breaking is not supported");
	}
	let oldValue = this.m_preserveGroups;
	this.m_preserveGroups = preserve;
	this.notifyPropertyBooleanChanged(oFF.QSortProperties.QY_PRESERVE_GROUPING, oldValue, preserve);
};
oFF.QGenericSorting.prototype.setupGenericSorting = function(parentNode)
{
	this.setupModelComponent(parentNode.getContext(), parentNode);
	this.m_direction = oFF.XSortDirection.DEFAULT_VALUE;
	this.m_preserveGroups = true;
};
oFF.QGenericSorting.prototype.supportsBreakGrouping = function()
{
	let modelCapabilities = this.getModelCapabilities();
	return modelCapabilities.supportsBreakGrouping(this.getSortingType());
};
oFF.QGenericSorting.prototype.supportsDimension = function()
{
	return false;
};
oFF.QGenericSorting.prototype.supportsPreserveGrouping = function()
{
	let modelCapabilities = this.getModelCapabilities();
	return modelCapabilities.supportsPreserveGrouping(this.getSortingType());
};
oFF.QGenericSorting.prototype.toString = function()
{
	let buffer = oFF.XStringBuffer.create();
	buffer.append(this.getOlapComponentType().getName());
	buffer.append(" - Dir: ");
	buffer.append(this.getDirection().getName());
	if (this.supportsBreakGrouping())
	{
		if (this.isBreakGroupingEnabled())
		{
			buffer.append(" - break grouping");
		}
	}
	return buffer.toString();
};

oFF.QSortingManager = function() {};
oFF.QSortingManager.prototype = new oFF.QModelComponent();
oFF.QSortingManager.prototype._ff_c = "QSortingManager";

oFF.QSortingManager.create = function(queryModel)
{
	let object = new oFF.QSortingManager();
	object.setupSortManager(queryModel);
	return object;
};
oFF.QSortingManager.prototype.m_sortOperations = null;
oFF.QSortingManager.prototype.addSortOperation = function(sortOperation)
{
	if (oFF.notNull(sortOperation))
	{
		this.m_sortOperations.add(sortOperation);
	}
};
oFF.QSortingManager.prototype.addSupportedBreakGrouping = function(sortType)
{
	this.getModelCapabilities().addSupportedBreakGrouping(sortType);
};
oFF.QSortingManager.prototype.addSupportedSortType = function(sortType)
{
	this.getModelCapabilities().addSupportedSortType(sortType);
};
oFF.QSortingManager.prototype.applyCustomSort = function(dimension, field, customOrder, sortDirection, customSortPosition, createNewSortOperation)
{
	let capabilities = this.getModelCapabilities();
	let sortingOperation = null;
	if (oFF.notNull(dimension) && (capabilities.supportsCustomMeasureSortOrder() && dimension.isMeasureStructure() || capabilities.supportsCustomMemberKeySortOrder() && !dimension.isMeasureStructure() || capabilities.supportsCustomSortingExtended() && dimension.isStructure()))
	{
		let dimensionSorting = null;
		if (createNewSortOperation)
		{
			dimensionSorting = this.newDimensionSorting(dimension);
			this.addSortOperation(dimensionSorting);
		}
		else
		{
			dimensionSorting = this.getDimensionSorting(dimension, true);
		}
		dimensionSorting.setSortType(oFF.SortType.MEMBER_KEY);
		dimensionSorting.setDirection(sortDirection);
		dimensionSorting.setCustomSort(customOrder);
		dimensionSorting.setCustomSortPosition(customSortPosition);
		sortingOperation = dimensionSorting;
	}
	else if (oFF.notNull(field) && capabilities.supportsCustomSort())
	{
		let fieldSorting = null;
		if (createNewSortOperation)
		{
			fieldSorting = this.newFieldSorting(field);
			this.addSortOperation(fieldSorting);
		}
		else
		{
			fieldSorting = this.getFieldSorting(field, true);
		}
		fieldSorting.setDirection(sortDirection);
		fieldSorting.setCustomSort(customOrder);
		fieldSorting.setCustomSortPosition(customSortPosition);
		sortingOperation = fieldSorting;
	}
	return sortingOperation;
};
oFF.QSortingManager.prototype.clearSupportedSortType = function()
{
	this.getModelCapabilities().clearSupportedSortType();
};
oFF.QSortingManager.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let capabilities = this.getModelCapabilities();
	let originSortingManager = other;
	this.m_sortOperations.clear();
	let queryModel = this.getQueryModel();
	let size = originSortingManager.m_sortOperations.size();
	for (let i = 0; i < size; i++)
	{
		let originSorting = originSortingManager.m_sortOperations.get(i);
		let originType = originSorting.getSortingType();
		let cloneSorting = null;
		if (originType === oFF.SortType.FIELD)
		{
			cloneSorting = this.newFieldSorting(queryModel.getFieldByName(originSorting.getField().getName()));
		}
		else if (originType === oFF.SortType.MEASURE)
		{
			let structureMember = queryModel.getMeasureDimension().getStructureMember(originSorting.getMeasure().getName());
			if (oFF.notNull(structureMember))
			{
				cloneSorting = this.newMeasureSorting(structureMember);
			}
		}
		else if (originSorting.getOlapComponentType() === oFF.OlapComponentType.DIMENSION_SORTING)
		{
			if (capabilities.supportsDimensionSorting(originSorting.getDimension(), originSorting.getSortingType()))
			{
				cloneSorting = this.newDimensionSorting(queryModel.getDimensionByNameFromExistingMetadata(originSorting.getDimension().getName()));
			}
		}
		else if (originType === oFF.SortType.DATA_CELL_VALUE)
		{
			cloneSorting = this.newDataCellSorting(null);
		}
		else if (originType === oFF.SortType.COMPLEX)
		{
			cloneSorting = oFF.QComplexSorting.create(this, null);
		}
		if (oFF.notNull(cloneSorting))
		{
			cloneSorting.copyFrom(originSorting, flags);
			this.m_sortOperations.addInternal(cloneSorting);
		}
	}
};
oFF.QSortingManager.prototype.getComplexSorting = function(path, createIfNotExist)
{
	let result = null;
	let uniqueName = oFF.QComplexAndDataCellSorting.createPathUniqueName(path);
	let size = this.m_sortOperations.size();
	for (let i = 0; i < size; i++)
	{
		let sortOperation = this.m_sortOperations.get(i);
		let componentType = sortOperation.getComponentType();
		if (componentType === oFF.OlapComponentType.COMPLEX_SORTING)
		{
			let tupleSorting = sortOperation;
			let tsUniqueName = tupleSorting.getPathUniqueName();
			if (oFF.XString.isEqual(tsUniqueName, uniqueName))
			{
				result = tupleSorting;
				break;
			}
		}
	}
	if (oFF.isNull(result) && createIfNotExist)
	{
		result = this.newComplexSorting(path);
		this.addSortOperation(result);
	}
	return result;
};
oFF.QSortingManager.prototype.getDataCellSorting = function(path, createIfNotExist)
{
	let result = null;
	let uniqueName = oFF.QComplexAndDataCellSorting.createPathUniqueName(path);
	let size = this.m_sortOperations.size();
	for (let i = 0; i < size; i++)
	{
		let sortOperation = this.m_sortOperations.get(i);
		let componentType = sortOperation.getComponentType();
		if (componentType === oFF.OlapComponentType.DATA_CELL_SORTING)
		{
			let tupleSorting = sortOperation;
			let tsUniqueName = tupleSorting.getPathUniqueName();
			if (oFF.XString.isEqual(tsUniqueName, uniqueName))
			{
				result = tupleSorting;
				break;
			}
		}
	}
	if (oFF.isNull(result) && createIfNotExist)
	{
		result = this.newDataCellSorting(path);
		this.addSortOperation(result);
	}
	return result;
};
oFF.QSortingManager.prototype.getDimensionSorting = function(dimension, createIfNotExist)
{
	let result = null;
	if (oFF.notNull(dimension))
	{
		let size = this.m_sortOperations.size();
		for (let i = 0; i < size; i++)
		{
			let sortOperation = this.m_sortOperations.get(i);
			let componentType = sortOperation.getComponentType();
			if (componentType === oFF.OlapComponentType.DIMENSION_SORTING)
			{
				let dimSorting = sortOperation;
				if (dimSorting.getDimension() === dimension)
				{
					result = dimSorting;
					break;
				}
			}
		}
		if (oFF.isNull(result) && createIfNotExist)
		{
			result = this.newDimensionSorting(dimension);
			this.addSortOperation(result);
		}
	}
	return result;
};
oFF.QSortingManager.prototype.getFieldSorting = function(field, createIfNotExist)
{
	let result = null;
	let size = this.m_sortOperations.size();
	for (let i = 0; i < size; i++)
	{
		let sortOperation = this.m_sortOperations.get(i);
		let componentType = sortOperation.getComponentType();
		if (componentType === oFF.OlapComponentType.FIELD_SORTING)
		{
			let fieldSorting = sortOperation;
			if (fieldSorting.getField() === field)
			{
				result = fieldSorting;
				break;
			}
		}
	}
	if (oFF.isNull(result) && createIfNotExist)
	{
		result = this.newFieldSorting(field);
		this.addSortOperation(result);
	}
	return result;
};
oFF.QSortingManager.prototype.getMeasureSorting = function(member, createIfNotExist)
{
	let structure = this.getQueryModel().getNonMeasureDimension();
	if (oFF.isNull(member) || oFF.notNull(structure) && member.getDimension() === structure)
	{
		return null;
	}
	let result = null;
	let size = this.m_sortOperations.size();
	for (let i = 0; i < size; i++)
	{
		let sortOperation = this.m_sortOperations.get(i);
		let componentType = sortOperation.getComponentType();
		if (componentType === oFF.OlapComponentType.MEASURE_SORTING)
		{
			let memberSorting = sortOperation;
			if (memberSorting.getMeasure() === member)
			{
				result = memberSorting;
				break;
			}
		}
	}
	if (oFF.isNull(result) && createIfNotExist)
	{
		result = this.newMeasureSorting(member);
		this.addSortOperation(result);
		if (oFF.notNull(structure) && structure.getLoadedStructureMembers().size() > 0)
		{
			result.setSecondaryMeasure(structure.getLoadedStructureMembers().get(0));
		}
	}
	return result;
};
oFF.QSortingManager.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.SORT_MANAGER;
};
oFF.QSortingManager.prototype.getSortOperationsUsingField = function(field)
{
	let resultList = oFF.XList.create();
	let size = this.m_sortOperations.size();
	for (let i = 0; i < size; i++)
	{
		let sortOperation = this.m_sortOperations.get(i);
		let componentType = sortOperation.getComponentType();
		if (componentType === oFF.OlapComponentType.FIELD_SORTING)
		{
			let fieldSorting = sortOperation;
			if (fieldSorting.getField() === field && oFF.XSortDirection.isExplicit(fieldSorting.getDirection()))
			{
				resultList.add(fieldSorting);
			}
		}
		else if (componentType === oFF.OlapComponentType.DATA_CELL_SORTING || componentType === oFF.OlapComponentType.COMPLEX_SORTING)
		{
			let complexSorting = sortOperation;
			if (oFF.XSortDirection.isExplicit(complexSorting.getDirection()) && oFF.XStream.of(complexSorting.getElementPath()).anyMatch((pe) => {
				return pe.getSelectField() === field;
			}))
			{
				resultList.add(complexSorting);
			}
		}
	}
	return resultList;
};
oFF.QSortingManager.prototype.getSortingOperations = function()
{
	return this.m_sortOperations;
};
oFF.QSortingManager.prototype.hasOverrulingSortingOperationForDimension = function(dimension)
{
	let overrulingMeasureSort = false;
	let sortOperation;
	let orthogonalAxisType = oFF.AxisType.getOrthogonalTypeForAxis(dimension.getAxisType());
	let sortOpSize = this.m_sortOperations.size();
	let i = 0;
	for (; i < sortOpSize; i++)
	{
		sortOperation = this.m_sortOperations.get(i);
		let sortDirection = sortOperation.getDirection();
		if (sortDirection !== oFF.XSortDirection.ASCENDING && sortDirection !== oFF.XSortDirection.DESCENDING)
		{
			continue;
		}
		if (sortOperation.getSortingType().isTypeOf(oFF.SortType.ABSTRACT_DIMENSION_SORT) && sortOperation.getDimension() === dimension)
		{
			break;
		}
	}
	for (; i < sortOpSize; i++)
	{
		sortOperation = this.m_sortOperations.get(i);
		let sortDirection = sortOperation.getDirection();
		if (sortDirection !== oFF.XSortDirection.ASCENDING && sortDirection !== oFF.XSortDirection.DESCENDING)
		{
			continue;
		}
		let sortType = sortOperation.getSortingType();
		if (sortType === oFF.SortType.MEASURE)
		{
			overrulingMeasureSort = true;
			break;
		}
		if (sortType === oFF.SortType.DATA_CELL_VALUE || sortType === oFF.SortType.COMPLEX)
		{
			let elementPath = sortOperation.getElementPath();
			if (oFF.XStream.of(elementPath).find((element) => {
				return element.getDimension().getAxisType() === orthogonalAxisType;
			}).isPresent())
			{
				overrulingMeasureSort = true;
				break;
			}
		}
	}
	return overrulingMeasureSort;
};
oFF.QSortingManager.prototype.mergeDeepRecursive = function(settings, other)
{
	let otherSort = other;
	this.copyFrom(otherSort, null);
};
oFF.QSortingManager.prototype.newComplexSorting = function(path)
{
	let capabilities = this.getModelCapabilities();
	if (capabilities.supportsComplexSorting())
	{
		return oFF.QComplexSorting.create(this, path);
	}
	throw oFF.XException.createIllegalArgumentException("Complex sorting not allowed");
};
oFF.QSortingManager.prototype.newCustomSorting = function(dimension, field, sortFromStart, sortFromEnd)
{
	let capabilities = this.getModelCapabilities();
	if (oFF.notNull(dimension) && (capabilities.supportsCustomMeasureSortOrder() && dimension.isMeasureStructure() || capabilities.supportsCustomMemberKeySortOrder() && !dimension.isMeasureStructure()))
	{
		if (oFF.XCollectionUtils.hasElements(sortFromStart))
		{
			let dimensionSortingStart = this.newDimensionSorting(dimension);
			dimensionSortingStart.setSortType(oFF.SortType.MEMBER_KEY);
			this.setSortingValues(sortFromStart, dimensionSortingStart, oFF.CustomSortPosition.TOP);
		}
		if (oFF.XCollectionUtils.hasElements(sortFromEnd))
		{
			let dimensionSortingEnd = this.newDimensionSorting(dimension);
			dimensionSortingEnd.setSortType(oFF.SortType.MEMBER_KEY);
			this.setSortingValues(sortFromEnd, dimensionSortingEnd, oFF.CustomSortPosition.BOTTOM);
		}
	}
	else if (oFF.notNull(field) && capabilities.supportsCustomSort())
	{
		if (oFF.XCollectionUtils.hasElements(sortFromStart))
		{
			let fieldSortingStart = this.newFieldSorting(field);
			this.setSortingValues(sortFromStart, fieldSortingStart, oFF.CustomSortPosition.TOP);
		}
		if (oFF.XCollectionUtils.hasElements(sortFromEnd))
		{
			let fieldSortingEnd = this.newFieldSorting(field);
			this.setSortingValues(sortFromEnd, fieldSortingEnd, oFF.CustomSortPosition.BOTTOM);
		}
	}
};
oFF.QSortingManager.prototype.newDataCellSorting = function(path)
{
	let capabilities = this.getModelCapabilities();
	if (capabilities.supportsDataCellSorting())
	{
		return oFF.QDataCellSorting.create(this, path);
	}
	throw oFF.XException.createIllegalArgumentException("Tuple sorting not allowed");
};
oFF.QSortingManager.prototype.newDimensionSorting = function(dimension)
{
	if (oFF.isNull(dimension))
	{
		return null;
	}
	let capabilities = this.getModelCapabilities();
	if (capabilities.supportsDimensionSorting(dimension, null))
	{
		let dimBase = dimension;
		return oFF.QDimensionSorting.create(this, dimBase);
	}
	throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate2("Dimension sorting not allowed on dimension ", dimension.getName()));
};
oFF.QSortingManager.prototype.newFieldSorting = function(field)
{
	let capabilities = this.getModelCapabilities();
	if (capabilities.supportsFieldSorting(field))
	{
		let fieldBase = field;
		return oFF.QFieldSorting.create(this, fieldBase);
	}
	throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate2("Field sorting not allowed on field ", field.getName()));
};
oFF.QSortingManager.prototype.newMeasureSorting = function(member)
{
	let capabilities = this.getModelCapabilities();
	if (capabilities.supportsMeasureSorting())
	{
		let structureMember = member;
		return oFF.QMeasureSorting.create(this, structureMember);
	}
	throw oFF.XException.createIllegalArgumentException("Structure member sorting not allowed");
};
oFF.QSortingManager.prototype.releaseObject = function()
{
	this.m_sortOperations = oFF.XObjectExt.release(this.m_sortOperations);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QSortingManager.prototype.removeComplexSorting = function(axisType)
{
	let size = this.m_sortOperations.size();
	let i = 0;
	while (i < size)
	{
		let sortOperation = this.m_sortOperations.get(i);
		let componentType = sortOperation.getComponentType();
		if (componentType === oFF.OlapComponentType.COMPLEX_SORTING)
		{
			let complexSorting = sortOperation;
			if (oFF.XStream.of(complexSorting.getElementPath()).find((pathElement) => {
				return pathElement.getDimension().getAxisType() === axisType;
			}).isPresent())
			{
				this.m_sortOperations.removeAt(i);
				size = this.m_sortOperations.size();
				continue;
			}
		}
		i++;
	}
};
oFF.QSortingManager.prototype.removeDataCellSorting = function(axisType)
{
	let size = this.m_sortOperations.size();
	let i = 0;
	while (i < size)
	{
		let sortOperation = this.m_sortOperations.get(i);
		let componentType = sortOperation.getComponentType();
		if (componentType === oFF.OlapComponentType.DATA_CELL_SORTING)
		{
			let dataCellSorting = sortOperation;
			if (oFF.XStream.of(dataCellSorting.getElementPath()).find((pathElement) => {
				return pathElement.getDimension().getAxisType() === axisType;
			}).isPresent())
			{
				this.m_sortOperations.removeAt(i);
				size = this.m_sortOperations.size();
				continue;
			}
		}
		i++;
	}
};
oFF.QSortingManager.prototype.removeDimensionSorting = function(dimension)
{
	let size = this.m_sortOperations.size();
	let i = 0;
	while (i < size)
	{
		let sortOperation = this.m_sortOperations.get(i);
		let componentType = sortOperation.getComponentType();
		if (componentType === oFF.OlapComponentType.DIMENSION_SORTING)
		{
			let dimSorting = sortOperation;
			if (dimSorting.getDimension() === dimension)
			{
				this.m_sortOperations.removeAt(i);
				size = this.m_sortOperations.size();
				continue;
			}
		}
		i++;
	}
};
oFF.QSortingManager.prototype.removeFieldSorting = function(field)
{
	let size = this.m_sortOperations.size();
	let i = 0;
	while (i < size)
	{
		let sortOperation = this.m_sortOperations.get(i);
		let componentType = sortOperation.getComponentType();
		if (componentType === oFF.OlapComponentType.FIELD_SORTING)
		{
			let fieldSorting = sortOperation;
			if (fieldSorting.getField() === field)
			{
				this.m_sortOperations.removeAt(i);
				size = this.m_sortOperations.size();
				continue;
			}
		}
		i++;
	}
};
oFF.QSortingManager.prototype.removeFieldSortingByDimension = function(dimension)
{
	let size = this.m_sortOperations.size();
	let i = 0;
	while (i < size)
	{
		let sortOperation = this.m_sortOperations.get(i);
		let componentType = sortOperation.getComponentType();
		if (componentType === oFF.OlapComponentType.FIELD_SORTING)
		{
			let fieldSorting = sortOperation;
			if (fieldSorting.getField().getDimension() === dimension)
			{
				this.m_sortOperations.removeAt(i);
				size = this.m_sortOperations.size();
				continue;
			}
		}
		i++;
	}
};
oFF.QSortingManager.prototype.removeInvalidSortingOperations = function()
{
	let size = this.m_sortOperations.size();
	let i = 0;
	while (i < size)
	{
		let sortOperation = this.m_sortOperations.get(i);
		let componentType = sortOperation.getComponentType();
		if (componentType === oFF.OlapComponentType.DATA_CELL_SORTING || componentType === oFF.OlapComponentType.COMPLEX_SORTING)
		{
			let complexSorting = sortOperation;
			if (!complexSorting.isValid())
			{
				this.m_sortOperations.removeAt(i);
				size = this.m_sortOperations.size();
				continue;
			}
		}
		i++;
	}
};
oFF.QSortingManager.prototype.removeMeasureSorting = function(member)
{
	let size = this.m_sortOperations.size();
	let i = 0;
	while (i < size)
	{
		let sortOperation = this.m_sortOperations.get(i);
		let componentType = sortOperation.getComponentType();
		if (componentType === oFF.OlapComponentType.MEASURE_SORTING)
		{
			let measureSorting = sortOperation;
			if (measureSorting.getMeasure() === member)
			{
				this.m_sortOperations.removeAt(i);
				size = this.m_sortOperations.size();
				continue;
			}
		}
		i++;
	}
};
oFF.QSortingManager.prototype.setSortingValues = function(sortFromStart, dimensionSortingStart, sortPosition)
{
	this.addSortOperation(dimensionSortingStart);
	dimensionSortingStart.setDirection(oFF.XSortDirection.ASCENDING);
	dimensionSortingStart.setCustomSort(sortFromStart);
	dimensionSortingStart.setCustomSortPosition(sortPosition);
};
oFF.QSortingManager.prototype.setupSortManager = function(queryModel)
{
	this.setupModelComponent(queryModel, queryModel);
	this.m_sortOperations = oFF.QModelComponentList.createModelComponentList(queryModel, this, true, "SortOperations");
};
oFF.QSortingManager.prototype.supportsBreakGrouping = function(sortType)
{
	return this.getModelCapabilities().supportsBreakGrouping(sortType);
};
oFF.QSortingManager.prototype.supportsComplexSorting = function()
{
	return this.getModelCapabilities().supportsComplexSorting();
};
oFF.QSortingManager.prototype.supportsCustomSortingExtended = function()
{
	return this.getModelCapabilities().supportsCustomSortingExtended();
};
oFF.QSortingManager.prototype.supportsDataCellSorting = function()
{
	return this.getModelCapabilities().supportsDataCellSorting();
};
oFF.QSortingManager.prototype.supportsDimensionSorting = function(dimension, sortType)
{
	return this.getModelCapabilities().supportsDimensionSorting(dimension, sortType);
};
oFF.QSortingManager.prototype.supportsFieldSorting = function(field)
{
	return this.getModelCapabilities().supportsFieldSorting(field);
};
oFF.QSortingManager.prototype.supportsMeasureSorting = function()
{
	return this.getModelCapabilities().supportsMeasureSorting();
};
oFF.QSortingManager.prototype.supportsPreserveGrouping = function(sortType)
{
	return this.getModelCapabilities().supportsPreserveGrouping(sortType);
};
oFF.QSortingManager.prototype.supportsServerSideSorts = function()
{
	return this.getModelCapabilities().supportsServerSideSorts();
};
oFF.QSortingManager.prototype.supportsSortType = function(sortType)
{
	return this.getModelCapabilities().supportsSortType(sortType);
};

oFF.QFormulaInverseFormula = function() {};
oFF.QFormulaInverseFormula.prototype = new oFF.QModelComponent();
oFF.QFormulaInverseFormula.prototype._ff_c = "QFormulaInverseFormula";

oFF.QFormulaInverseFormula.createForCopy = function(context, parentFormulaMeasure)
{
	let inverseFormula = new oFF.QFormulaInverseFormula();
	inverseFormula.setupModelComponent(context, parentFormulaMeasure);
	return inverseFormula;
};
oFF.QFormulaInverseFormula.createInverseFormula = function(context, parentFormulaMeasure, conditionFormulaItem, targetMemberName, inverseFormulaItem)
{
	let inverseFormula = new oFF.QFormulaInverseFormula();
	inverseFormula.setupModelComponent(context, parentFormulaMeasure);
	inverseFormula.m_conditionFormulaItem = conditionFormulaItem;
	inverseFormula.m_target = targetMemberName;
	inverseFormula.m_internalFormulaItem = inverseFormulaItem;
	return inverseFormula;
};
oFF.QFormulaInverseFormula.prototype.m_conditionFormulaItem = null;
oFF.QFormulaInverseFormula.prototype.m_internalFormulaItem = null;
oFF.QFormulaInverseFormula.prototype.m_parentFormulaMeasure = null;
oFF.QFormulaInverseFormula.prototype.m_target = null;
oFF.QFormulaInverseFormula.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originInverseFormula = other;
	let orgTargetMemberName = originInverseFormula.getTarget();
	let orgInternalFormulaItem = originInverseFormula.getInternalFormulaItem();
	let orgConditionFormulaItem = originInverseFormula.getCondition();
	let internalFormulaItem = orgInternalFormulaItem.cloneOlapComponent(this.getContext(), this);
	let conditionFormulaItem = null;
	if (oFF.notNull(orgConditionFormulaItem))
	{
		conditionFormulaItem = orgConditionFormulaItem.cloneOlapComponent(this.getContext(), this);
	}
	this.m_conditionFormulaItem = conditionFormulaItem;
	this.m_target = orgTargetMemberName;
	this.m_internalFormulaItem = internalFormulaItem;
};
oFF.QFormulaInverseFormula.prototype.getCondition = function()
{
	return this.m_conditionFormulaItem;
};
oFF.QFormulaInverseFormula.prototype.getInternalFormulaItem = function()
{
	return this.m_internalFormulaItem;
};
oFF.QFormulaInverseFormula.prototype.getParentFormulaMeasure = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_parentFormulaMeasure);
};
oFF.QFormulaInverseFormula.prototype.getTarget = function()
{
	return this.m_target;
};
oFF.QFormulaInverseFormula.prototype.releaseObject = function()
{
	this.m_internalFormulaItem = oFF.XObjectExt.release(this.m_internalFormulaItem);
	this.m_conditionFormulaItem = oFF.XObjectExt.release(this.m_conditionFormulaItem);
	this.m_target = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QFormulaInverseFormula.prototype.setCondition = function(condition)
{
	this.m_conditionFormulaItem = condition;
	this.notifyNodeChanged();
};
oFF.QFormulaInverseFormula.prototype.setInternalFormulaItem = function(internalFormula)
{
	this.m_internalFormulaItem = internalFormula;
	this.notifyNodeChanged();
};
oFF.QFormulaInverseFormula.prototype.setTarget = function(targetMember)
{
	this.m_target = targetMember;
	this.notifyNodeChanged();
};

oFF.QOverdefinedMemberManager = function() {};
oFF.QOverdefinedMemberManager.prototype = new oFF.QModelComponent();
oFF.QOverdefinedMemberManager.prototype._ff_c = "QOverdefinedMemberManager";

oFF.QOverdefinedMemberManager._createOverdefineMemberManager = function(context, parent)
{
	let overdefineMemberManager = new oFF.QOverdefinedMemberManager();
	overdefineMemberManager.setupModelComponent(context, parent);
	overdefineMemberManager.m_visibilityOverrideMap = oFF.XHashMapByString.create();
	overdefineMemberManager.m_numericScaleOverrideMap = oFF.XHashMapByString.create();
	overdefineMemberManager.m_numericShiftOverrideMap = oFF.XHashMapByString.create();
	overdefineMemberManager.m_numericPrecisionOverrideMap = oFF.XHashMapByString.create();
	return overdefineMemberManager;
};
oFF.QOverdefinedMemberManager.prototype.m_numericPrecisionOverrideMap = null;
oFF.QOverdefinedMemberManager.prototype.m_numericScaleOverrideMap = null;
oFF.QOverdefinedMemberManager.prototype.m_numericShiftOverrideMap = null;
oFF.QOverdefinedMemberManager.prototype.m_visibilityOverrideMap = null;
oFF.QOverdefinedMemberManager.prototype.containsOverdefinedProperty = function(aliasOrMemberName)
{
	return this.m_visibilityOverrideMap.containsKey(aliasOrMemberName) || this.m_numericScaleOverrideMap.containsKey(aliasOrMemberName) || this.m_numericShiftOverrideMap.containsKey(aliasOrMemberName) || this.m_numericPrecisionOverrideMap.containsKey(aliasOrMemberName);
};
oFF.QOverdefinedMemberManager.prototype.copyFromInternal = function(other, flags)
{
	let origin = other;
	let memberName;
	let memberNames;
	this.m_visibilityOverrideMap.clear();
	memberNames = origin.m_visibilityOverrideMap.getKeysAsIterator();
	while (memberNames.hasNext())
	{
		memberName = memberNames.next();
		this.m_visibilityOverrideMap.put(memberName, origin.m_visibilityOverrideMap.getByKey(memberName));
	}
	this.m_numericScaleOverrideMap.clear();
	memberNames = origin.m_numericScaleOverrideMap.getKeysAsIterator();
	while (memberNames.hasNext())
	{
		memberName = memberNames.next();
		this.m_numericScaleOverrideMap.put(memberName, origin.m_numericScaleOverrideMap.getByKey(memberName));
	}
	this.m_numericShiftOverrideMap.clear();
	memberNames = origin.m_numericShiftOverrideMap.getKeysAsIterator();
	while (memberNames.hasNext())
	{
		memberName = memberNames.next();
		this.m_numericShiftOverrideMap.put(memberName, origin.m_numericShiftOverrideMap.getByKey(memberName));
	}
	this.m_numericPrecisionOverrideMap.clear();
	memberNames = origin.m_numericPrecisionOverrideMap.getKeysAsIterator();
	while (memberNames.hasNext())
	{
		memberName = memberNames.next();
		this.m_numericPrecisionOverrideMap.put(memberName, origin.m_numericPrecisionOverrideMap.getByKey(memberName));
	}
};
oFF.QOverdefinedMemberManager.prototype.getNumericPrecisionOverride = function(aliasOrMemberName)
{
	return this.m_numericPrecisionOverrideMap.getByKey(aliasOrMemberName);
};
oFF.QOverdefinedMemberManager.prototype.getNumericPrecisionOverrideMap = function()
{
	return this.m_numericPrecisionOverrideMap;
};
oFF.QOverdefinedMemberManager.prototype.getNumericScaleOverride = function(aliasOrMemberName)
{
	return this.m_numericScaleOverrideMap.getByKey(aliasOrMemberName);
};
oFF.QOverdefinedMemberManager.prototype.getNumericScaleOverrideMap = function()
{
	return this.m_numericScaleOverrideMap;
};
oFF.QOverdefinedMemberManager.prototype.getNumericShiftOverride = function(aliasOrMemberName)
{
	return this.m_numericShiftOverrideMap.getByKey(aliasOrMemberName);
};
oFF.QOverdefinedMemberManager.prototype.getNumericShiftOverrideMap = function()
{
	return this.m_numericShiftOverrideMap;
};
oFF.QOverdefinedMemberManager.prototype.getVisibilityOverride = function(aliasOrMemberName)
{
	return this.m_visibilityOverrideMap.getByKey(aliasOrMemberName);
};
oFF.QOverdefinedMemberManager.prototype.getVisibilityOverrideMap = function()
{
	return this.m_visibilityOverrideMap;
};
oFF.QOverdefinedMemberManager.prototype.releaseObject = function()
{
	this.m_visibilityOverrideMap.clear();
	this.m_numericScaleOverrideMap.clear();
	this.m_numericShiftOverrideMap.clear();
	this.m_numericPrecisionOverrideMap.clear();
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QOverdefinedMemberManager.prototype.removeNumericPrecisionOverride = function(aliasOrMemberName)
{
	this.m_numericPrecisionOverrideMap.remove(aliasOrMemberName);
	this.notifyNodeChanged();
};
oFF.QOverdefinedMemberManager.prototype.removeNumericScaleOverride = function(aliasOrMemberName)
{
	this.m_numericScaleOverrideMap.remove(aliasOrMemberName);
	this.notifyNodeChanged();
};
oFF.QOverdefinedMemberManager.prototype.removeNumericShiftOverride = function(aliasOrMemberName)
{
	this.m_numericShiftOverrideMap.remove(aliasOrMemberName);
	this.notifyNodeChanged();
};
oFF.QOverdefinedMemberManager.prototype.removeOverdefinedMember = function(aliasOrMemberName)
{
	this.m_numericScaleOverrideMap.remove(aliasOrMemberName);
	this.m_numericShiftOverrideMap.remove(aliasOrMemberName);
	this.m_visibilityOverrideMap.remove(aliasOrMemberName);
	this.m_numericPrecisionOverrideMap.remove(aliasOrMemberName);
};
oFF.QOverdefinedMemberManager.prototype.removeVisiblityOverride = function(aliasOrMemberName)
{
	this.m_visibilityOverrideMap.remove(aliasOrMemberName);
	this.notifyNodeChanged();
};
oFF.QOverdefinedMemberManager.prototype.setNumericPrecisionOverride = function(aliasOrMemberName, precision)
{
	this.m_numericPrecisionOverrideMap.put(aliasOrMemberName, oFF.XIntegerValue.create(precision));
	this.notifyNodeChanged();
};
oFF.QOverdefinedMemberManager.prototype.setNumericScaleOverride = function(aliasOrMemberName, scale)
{
	this.m_numericScaleOverrideMap.put(aliasOrMemberName, oFF.XIntegerValue.create(scale));
	this.notifyNodeChanged();
};
oFF.QOverdefinedMemberManager.prototype.setNumericShiftOverride = function(aliasOrMemberName, shift)
{
	this.m_numericShiftOverrideMap.put(aliasOrMemberName, oFF.XIntegerValue.create(shift));
	this.notifyNodeChanged();
};
oFF.QOverdefinedMemberManager.prototype.setVisibilityOverride = function(aliasOrMemberName, visibility)
{
	this.m_visibilityOverrideMap.put(aliasOrMemberName, visibility);
	this.notifyNodeChanged();
};

oFF.QTimeOperation = function() {};
oFF.QTimeOperation.prototype = new oFF.QModelComponent();
oFF.QTimeOperation.prototype._ff_c = "QTimeOperation";

oFF.QTimeOperation.create = function(context, structureMember)
{
	let capabilities = context.getModelCapabilities();
	if (!capabilities.supportsDynamicTimeMeasure())
	{
		oFF.noSupport();
	}
	let timeOperation = new oFF.QTimeOperation();
	timeOperation.setupTimeOperation(context, structureMember);
	return timeOperation;
};
oFF.QTimeOperation.prototype.m_dimensionName = null;
oFF.QTimeOperation.prototype.m_filterElementContext = null;
oFF.QTimeOperation.prototype.m_forceMemberNavigationGeneration = false;
oFF.QTimeOperation.prototype.m_function = null;
oFF.QTimeOperation.prototype.m_granularity = null;
oFF.QTimeOperation.prototype.m_hierarchyLevelName = null;
oFF.QTimeOperation.prototype.m_period = 0;
oFF.QTimeOperation.prototype.m_timePeriodOperationLevel = null;
oFF.QTimeOperation.prototype.m_useToDateFlatRangeSelection = false;
oFF.QTimeOperation.prototype.accumulateDependentTimeOperationsToInitialTimeSelection = function(queryModel, messageManager, initialTimeSelection, dependentRestrictedMeasure)
{
	let resultTimeSelection = initialTimeSelection;
	if (oFF.notNull(dependentRestrictedMeasure) && dependentRestrictedMeasure.needsTransientTimeSelection(queryModel, messageManager))
	{
		if (this.getFunction() === oFF.QTimeOperationFunction.TO_DATE)
		{
			resultTimeSelection = dependentRestrictedMeasure.generateFlattenTransientTimeSelection(queryModel, messageManager, dependentRestrictedMeasure.getTimeOperation(), this.getFilterElementContext());
			let clonedTimeOperation = oFF.QTimeOperation.create(queryModel, null);
			clonedTimeOperation.copyFrom(this, null);
			clonedTimeOperation.setFilterElementContext(resultTimeSelection);
			resultTimeSelection = clonedTimeOperation.generateTransientTimeSelection(queryModel, messageManager);
			oFF.XObjectExt.release(clonedTimeOperation);
		}
		else
		{
			resultTimeSelection = dependentRestrictedMeasure.generateFlattenTransientTimeSelection(queryModel, messageManager, dependentRestrictedMeasure.getTimeOperation(), resultTimeSelection);
		}
	}
	return resultTimeSelection;
};
oFF.QTimeOperation.prototype.addPersistedPlaceholderTagging = function(queryModel, timeDimension, hierarchyName, timeFilterOp, canonicalDate, tagType, persistedFilterPlaceholderTagging)
{
	let levelType = oFF.QCanonicalDateUtil.convertDateTimeGranularityToHierarchyLevelType(canonicalDate.getGranularity());
	let currentDate = oFF.QCanonicalDateUtil.createCurrentCanonicalDate(queryModel, timeDimension, hierarchyName);
	let timeSelectionPlaceholder;
	if (tagType === oFF.QPersistedPlaceholderTagType.DYNAMIC_TIME_CALCULATION_TO_DATE_SELECTION_PLACEHOLDER)
	{
		timeSelectionPlaceholder = new oFF.QTimeSelectionPlaceholderToDate();
		let opLevelType = oFF.QCanonicalDateUtil.convertTimeOperationGranularityToHierarchyLevelType(this.getGranularity());
		if (oFF.notNull(opLevelType))
		{
			let opGranularity = oFF.QCanonicalDateUtil.convertHierarchyLevelTypeToDateTimeGranularity(opLevelType);
			timeSelectionPlaceholder.setTimeOperationGranularity(opGranularity);
		}
	}
	else
	{
		timeSelectionPlaceholder = new oFF.QTimeSelectionPlaceholder();
	}
	timeSelectionPlaceholder.setGranularity(canonicalDate.getGranularity());
	timeSelectionPlaceholder.setShift(oFF.QCanonicalDateUtil.getDifferenceBetweenCanonicalDates(queryModel, timeDimension, hierarchyName, canonicalDate, currentDate, levelType));
	let filterPlaceholderTag = oFF.QPersistedPlaceholderTagFilter.createFromPlaceholderString(persistedFilterPlaceholderTagging);
	if (oFF.notNull(filterPlaceholderTag))
	{
		let ccdId = filterPlaceholderTag.getCustomCurrentDateId();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(ccdId))
		{
			timeSelectionPlaceholder.setCcdId(ccdId);
		}
	}
	timeSelectionPlaceholder.setOriginalLowValue(timeFilterOp.getLow().getString());
	let canonicalDateContext = oFF.QFactory.createCanonicalDateContext(queryModel, timeDimension, hierarchyName);
	let canonicalDateContextJson = canonicalDateContext.serializeToJson();
	let tag = oFF.QFactory.createPersistedPlaceholderTagCalculation(tagType.getName(), timeSelectionPlaceholder.getStringRepresentation(), canonicalDateContextJson.getStringRepresentation());
	timeFilterOp.getLow().getTagging().put(oFF.QPersistedPlaceholderTag.PERSISTED_QUERY_PLACEHOLDER, tag.getPlaceholderString());
};
oFF.QTimeOperation.prototype.convertToLagPeriod = function(opPeriod, opGranularity, currentDrillLevelType)
{
	let lagPeriod = null;
	if (opGranularity === oFF.QTimeOperationGranularity.PERIOD || opGranularity === oFF.QTimeOperationGranularity.OTHER)
	{
		lagPeriod = oFF.QTimeOperationLagPeriod.NO_LAG_PERIOD;
	}
	else
	{
		let opLevelType = oFF.QCanonicalDateUtil.convertTimeOperationGranularityToHierarchyLevelType(opGranularity);
		if (opLevelType === currentDrillLevelType)
		{
			lagPeriod = oFF.QTimeOperationLagPeriod.NO_LAG_PERIOD;
		}
		else if (opLevelType === oFF.HierarchyLevelType.TIME_YEAR)
		{
			if (currentDrillLevelType === oFF.HierarchyLevelType.TIME_HALF_YEAR)
			{
				lagPeriod = oFF.QTimeOperationLagPeriod.YEAR_TO_HALF_YEAR;
			}
			else if (currentDrillLevelType === oFF.HierarchyLevelType.TIME_QUARTER)
			{
				lagPeriod = oFF.QTimeOperationLagPeriod.YEAR_TO_QUARTER;
			}
			else if (currentDrillLevelType === oFF.HierarchyLevelType.TIME_MONTH)
			{
				lagPeriod = oFF.QTimeOperationLagPeriod.YEAR_TO_MONTH;
			}
		}
		else if (opLevelType === oFF.HierarchyLevelType.TIME_HALF_YEAR)
		{
			if (currentDrillLevelType === oFF.HierarchyLevelType.TIME_QUARTER)
			{
				lagPeriod = oFF.QTimeOperationLagPeriod.HALF_YEAR_TO_QUARTER;
			}
			else if (currentDrillLevelType === oFF.HierarchyLevelType.TIME_MONTH)
			{
				lagPeriod = oFF.QTimeOperationLagPeriod.HALF_YEAR_TO_MONTH;
			}
		}
		else if (opLevelType === oFF.HierarchyLevelType.TIME_QUARTER)
		{
			if (currentDrillLevelType === oFF.HierarchyLevelType.TIME_MONTH)
			{
				lagPeriod = oFF.QTimeOperationLagPeriod.QUARTER_TO_MONTH;
			}
		}
		else if (opLevelType === oFF.HierarchyLevelType.TIME_WEEK)
		{
			if (currentDrillLevelType === oFF.HierarchyLevelType.TIME_DAY)
			{
				lagPeriod = oFF.QTimeOperationLagPeriod.WEEK_TO_DAY;
			}
		}
		if (oFF.isNull(lagPeriod))
		{
			return 0;
		}
	}
	return lagPeriod.getLagPeriod() * opPeriod;
};
oFF.QTimeOperation.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originTimeOperation = other;
	this.m_dimensionName = originTimeOperation.getDimensionName();
	this.m_function = originTimeOperation.getFunction();
	this.m_granularity = originTimeOperation.getGranularity();
	this.m_period = originTimeOperation.getPeriod();
	this.m_filterElementContext = originTimeOperation.getFilterElementContext();
	this.m_forceMemberNavigationGeneration = originTimeOperation.getForceMemberNavigationGeneration();
	this.m_useToDateFlatRangeSelection = originTimeOperation.getUseToDateFlatRangeSelection();
	this.m_timePeriodOperationLevel = originTimeOperation.getTimePeriodOperationLevel();
	this.m_hierarchyLevelName = originTimeOperation.getHierarchyLevelName();
};
oFF.QTimeOperation.prototype.createAndAddHierarchyTimeFilterFromCanonicalDate = function(queryModel, timeDimension, hierarchyName, cartesianList, canonicalDate, persistedPlaceholderTagging, forceAddPersistedPlaceholderTagging)
{
	if (canonicalDate.getGranularity() === oFF.DateTimeGranularityType.WEEK)
	{
		let startOfWeek = oFF.QCanonicalDateUtil.castCanonicalDateToLevel(queryModel, timeDimension, hierarchyName, canonicalDate, oFF.HierarchyLevelType.TIME_DAY, false);
		let endOfWeek = oFF.QCanonicalDateUtil.castCanonicalDateToLevel(queryModel, timeDimension, hierarchyName, canonicalDate, oFF.HierarchyLevelType.TIME_DAY, true);
		if (startOfWeek.getYear() !== endOfWeek.getYear())
		{
			while (!oFF.QCanonicalDateUtil.isEqual(startOfWeek, endOfWeek))
			{
				cartesianList.add(this.createHierarchyTimeFilterOperationFromCanonicalDate(queryModel, timeDimension, hierarchyName, startOfWeek, persistedPlaceholderTagging, forceAddPersistedPlaceholderTagging));
				startOfWeek = oFF.QCanonicalDateUtil.incrementCanonicalDate(queryModel, timeDimension, hierarchyName, startOfWeek, 1, oFF.HierarchyLevelType.TIME_DAY);
			}
			cartesianList.add(this.createHierarchyTimeFilterOperationFromCanonicalDate(queryModel, timeDimension, hierarchyName, startOfWeek, persistedPlaceholderTagging, forceAddPersistedPlaceholderTagging));
			return;
		}
	}
	cartesianList.add(this.createHierarchyTimeFilterOperationFromCanonicalDate(queryModel, timeDimension, hierarchyName, canonicalDate, persistedPlaceholderTagging, forceAddPersistedPlaceholderTagging));
};
oFF.QTimeOperation.prototype.createHierarchyTimeFilterOperationFromCanonicalDate = function(queryModel, timeDimension, hierarchyName, canonicalDate, persistedPlaceholderTagging, forceAddPersistedPlaceholderTagging)
{
	let timeFilterOp = oFF.QFactory.createFilterOperation(queryModel, timeDimension.getHierarchyKeyField());
	timeFilterOp.setHierarchyName(hierarchyName);
	timeFilterOp.setLowString(oFF.QCanonicalDateUtil.createEntityValueFromCanonicalDate(queryModel, timeDimension, hierarchyName, canonicalDate));
	if (forceAddPersistedPlaceholderTagging || oFF.XStringUtils.isNotNullAndNotEmpty(persistedPlaceholderTagging))
	{
		this.addPersistedPlaceholderTagging(queryModel, timeDimension, hierarchyName, timeFilterOp, canonicalDate, oFF.QPersistedPlaceholderTagType.DYNAMIC_TIME_CALCULATION_SELECTION_PLACEHOLDER, persistedPlaceholderTagging);
	}
	return timeFilterOp;
};
oFF.QTimeOperation.prototype.createToDateFlatRangeSelectionFromCanonicalDates = function(queryModel, timeDimension, filterHierarchyName, filterLevelType, cartesianList, lowFilterValueCanonicalDate, highFilterValueCanonicalDate, messageManager, persistedPlaceholderTagging)
{
	let leveledHierarchy = timeDimension.getLeveledHierarchy(filterHierarchyName);
	if (oFF.isNull(leveledHierarchy))
	{
		return false;
	}
	let toDateLevelType = filterLevelType;
	let level = leveledHierarchy.getLevelByType(toDateLevelType);
	if (oFF.isNull(level))
	{
		return false;
	}
	if (toDateLevelType === oFF.HierarchyLevelType.TIME_HALF_YEAR)
	{
		let newLevel = leveledHierarchy.getLevel(level.getLevelNumber() + 1);
		if (oFF.notNull(newLevel))
		{
			toDateLevelType = newLevel.getLevelType();
			level = newLevel;
		}
	}
	let opGranularity = this.getGranularity();
	let opLevelType = oFF.QCanonicalDateUtil.convertTimeOperationGranularityToHierarchyLevelType(opGranularity);
	if (opGranularity === oFF.QTimeOperationGranularity.PERIOD)
	{
		messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_INVALID_TO_DATE_FUNCTION_GRANULARITY, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_INVALID_TO_DATE_FUNCTION_GRANULARITY, oFF.XList.create(), this.getParentAliasOrMemberName(), this.getDimensionName()));
		return false;
	}
	let startCanonicalDateInOpGranularity = oFF.QCanonicalDateUtil.castCanonicalDateToLevel(queryModel, timeDimension, filterHierarchyName, lowFilterValueCanonicalDate, opLevelType, false);
	let startCanonicalDate = oFF.QCanonicalDateUtil.castCanonicalDateToLevel(queryModel, timeDimension, filterHierarchyName, startCanonicalDateInOpGranularity, toDateLevelType, false);
	let endCanonicalDate = highFilterValueCanonicalDate;
	if (endCanonicalDate.getGranularity() !== startCanonicalDate.getGranularity())
	{
		endCanonicalDate = oFF.QCanonicalDateUtil.castCanonicalDateToLevel(queryModel, timeDimension, filterHierarchyName, endCanonicalDate, toDateLevelType, true);
	}
	let endCanonicalDateInOpGranularity = oFF.QCanonicalDateUtil.castCanonicalDateToLevel(queryModel, timeDimension, filterHierarchyName, highFilterValueCanonicalDate, opLevelType, false);
	if (!this.validateToDateSpansAcrossMultipleValues(startCanonicalDateInOpGranularity, endCanonicalDateInOpGranularity, messageManager))
	{
		return false;
	}
	let dimensionLevel = queryModel.getDimensionByName(level.getLevelDimensionName());
	if (oFF.notNull(dimensionLevel))
	{
		let flatKeyField = dimensionLevel.getFlatKeyField();
		cartesianList.setField(flatKeyField);
		let timeFilterOp = oFF.QFactory.createFilterOperation(queryModel, flatKeyField);
		timeFilterOp.setComparisonOperator(oFF.ComparisonOperator.BETWEEN);
		let lowValue = oFF.QCanonicalDateUtil.getEntityValueKeyFromCanonicalDate(queryModel, timeDimension, filterHierarchyName, startCanonicalDate);
		let highValue = oFF.QCanonicalDateUtil.getEntityValueKeyFromCanonicalDate(queryModel, timeDimension, filterHierarchyName, endCanonicalDate);
		oFF.QTimeDimensionUtil.setCartesianElementValues(timeFilterOp, lowValue, highValue, flatKeyField);
		if (oFF.XStringUtils.isNotNullAndNotEmpty(persistedPlaceholderTagging))
		{
			this.addPersistedPlaceholderTagging(queryModel, timeDimension, filterHierarchyName, timeFilterOp, endCanonicalDate, oFF.QPersistedPlaceholderTagType.DYNAMIC_TIME_CALCULATION_TO_DATE_SELECTION_PLACEHOLDER, persistedPlaceholderTagging);
		}
		cartesianList.add(timeFilterOp);
	}
	return true;
};
oFF.QTimeOperation.prototype.determineFilterElementContextToUse = function(queryModel)
{
	let filterContextRoot;
	if (oFF.notNull(this.m_filterElementContext))
	{
		filterContextRoot = this.m_filterElementContext;
	}
	else
	{
		filterContextRoot = queryModel.getFilter().getEffectiveFilter().getFilterRootElement();
	}
	return filterContextRoot;
};
oFF.QTimeOperation.prototype.flattenDependentTimeOperations = function(queryModel, messageManager, transientTimeSelection, dependentRestrictedMeasure)
{
	if (this.getFunction() === oFF.QTimeOperationFunction.CURRENT_DATE)
	{
		return transientTimeSelection;
	}
	let timeDimensionName = this.getDimensionName();
	let timeDimension = queryModel.getDimensionByName(timeDimensionName);
	if (this.shouldGenerateSingleValueFilterBasedTransientTimeSelection(timeDimension.getAxisType()))
	{
		return this.accumulateDependentTimeOperationsToInitialTimeSelection(queryModel, messageManager, transientTimeSelection, dependentRestrictedMeasure);
	}
	return this.getDependentMemberNavigationsIfApplicable(queryModel, messageManager, transientTimeSelection, dependentRestrictedMeasure);
};
oFF.QTimeOperation.prototype.generateSingleValueFilterBasedTransientTimeSelection = function(queryModel, timeDimension, messageManager, singleValueTimeCartesianList)
{
	let lowFilterValue = null;
	let filterLevelType = null;
	let filterHierarchyName = null;
	let filterElement = singleValueTimeCartesianList.getCartesianElement(0);
	if (filterElement.getSetSign() === oFF.SetSign.INCLUDING && (oFF.QFilterUtil.isSingleValueFilterElement(filterElement) || oFF.QFilterUtil.isSingleValueSourceCartesianList(singleValueTimeCartesianList)))
	{
		lowFilterValue = oFF.QFilterUtil.getValueFromValueBag(filterElement.getLow());
		filterHierarchyName = singleValueTimeCartesianList.getHierarchyName();
		if (oFF.isNull(filterHierarchyName))
		{
			let levelTypesToSearch = oFF.XList.create();
			let timeOperationHierarchyLevelType = oFF.QCanonicalDateUtil.convertTimeOperationGranularityToHierarchyLevelType(this.getGranularity());
			if (oFF.notNull(timeOperationHierarchyLevelType))
			{
				levelTypesToSearch.add(timeOperationHierarchyLevelType);
			}
			if (oFF.QFilterUtil.isSingleValueSourceCartesianList(singleValueTimeCartesianList))
			{
				levelTypesToSearch.add(singleValueTimeCartesianList.getHierarchyLevelType());
			}
			let hierarchyNameAndLevelTypeName = oFF.QFilterUtil.getCompatibleFilterHierarchyNameAndLevelTypeName(queryModel, timeDimension, filterElement.getFieldMetadata(), levelTypesToSearch);
			if (oFF.notNull(hierarchyNameAndLevelTypeName))
			{
				filterHierarchyName = hierarchyNameAndLevelTypeName.getFirstString();
				filterLevelType = oFF.HierarchyLevelType.lookup(hierarchyNameAndLevelTypeName.getSecondString());
			}
		}
	}
	if (oFF.isNull(lowFilterValue) || oFF.isNull(filterHierarchyName))
	{
		let errorMsgArgs = oFF.XList.create();
		errorMsgArgs.add(this.getHierarchyOrGranularityLevelName());
		errorMsgArgs.add(this.getParentTextOrName());
		messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY_NOT_IN_HIERARCHY, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY_NOT_IN_HIERARCHY, errorMsgArgs, this.getParentAliasOrMemberName(), this.getDimensionName()));
		return null;
	}
	let isFlat = oFF.notNull(filterLevelType);
	let lowFilterValueCanonicalDate = oFF.QFilterUtil.convertFilterValueToCanonicalDate(queryModel, timeDimension, filterLevelType, lowFilterValue, filterHierarchyName, isFlat);
	if (oFF.isNull(filterLevelType))
	{
		filterLevelType = oFF.QCanonicalDateUtil.convertDateTimeGranularityToHierarchyLevelType(lowFilterValueCanonicalDate.getGranularity());
	}
	let leveledHierarchy = timeDimension.getLeveledHierarchy(filterHierarchyName);
	let filterLevel = leveledHierarchy.getLevelByType(filterLevelType);
	if (!this.validateTimeHierarchyContainsTimeOperationHierarchyLevel(filterHierarchyName, timeDimension, messageManager) || !this.validateSingleValueFilterDrillLevel(filterLevel, filterHierarchyName, messageManager, timeDimension) || !this.validateSingleValueFilterSpansAcrossWeek(queryModel, timeDimension, filterHierarchyName, lowFilterValueCanonicalDate, messageManager))
	{
		return null;
	}
	return this.generateTimeSelections(singleValueTimeCartesianList, filterLevelType, filterHierarchyName, queryModel, timeDimension, messageManager);
};
oFF.QTimeOperation.prototype.generateSingleValueFilterErrorMessage = function(messageManager)
{
	let errorMsgArgs = oFF.XList.create();
	let timeDimensionTextOrName = this.getTimeDimensionTextOrName();
	errorMsgArgs.add(timeDimensionTextOrName);
	errorMsgArgs.add(timeDimensionTextOrName);
	errorMsgArgs.add(this.getParentTextOrName());
	messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_NO_TIME_IN_AXIS_OR_SINGLE_VALUE_FILTER, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_NO_TIME_IN_AXIS_OR_SINGLE_VALUE_FILTER, errorMsgArgs, this.getParentAliasOrMemberName(), this.getDimensionName()));
	return null;
};
oFF.QTimeOperation.prototype.generateTimeSelection = function(queryModel, messageManager)
{
	return this.generateTransientTimeSelection(queryModel, messageManager);
};
oFF.QTimeOperation.prototype.generateTimeSelections = function(singleValueTimeCartesianList, filterLevelType, filterHierarchyName, queryModel, timeDimension, messageManager)
{
	let filterElement = singleValueTimeCartesianList.getCartesianElement(0);
	let targetFilterLevelType = filterLevelType;
	let lowFilterValue = filterElement.getLow().getString();
	let highFilterValue = null;
	if (oFF.QFilterUtil.isSingleValueSourceCartesianList(singleValueTimeCartesianList) && filterElement.getComparisonOperator() === oFF.ComparisonOperator.BETWEEN)
	{
		highFilterValue = filterElement.getHigh().getString();
	}
	let isFlat = singleValueTimeCartesianList.getHierarchyName() === null;
	let persistedPlaceholderTagging = filterElement.getLow().getTagging().getByKey(oFF.QPersistedPlaceholderTag.PERSISTED_QUERY_PLACEHOLDER);
	let isToDateWithFlatRangeSelection = this.getFunction() === oFF.QTimeOperationFunction.TO_DATE && this.getUseToDateFlatRangeSelection();
	let transientCartesianList;
	if (isToDateWithFlatRangeSelection)
	{
		transientCartesianList = oFF.QFactory.createFilterCartesianList(queryModel);
	}
	else
	{
		if (oFF.QFilterUtil.isSingleValueSourceCartesianList(singleValueTimeCartesianList))
		{
			let singleValueConvertedTimeCartesianList = singleValueTimeCartesianList;
			let originalHierarchyLevelType = singleValueConvertedTimeCartesianList.getHierarchyLevelType();
			if (oFF.notNull(originalHierarchyLevelType))
			{
				targetFilterLevelType = originalHierarchyLevelType;
			}
			let convertedTimeCartesianList = oFF.QFactory.createFilterConvertedTimeCartesianListWithField(queryModel, timeDimension.getHierarchyKeyField());
			convertedTimeCartesianList.setIsSingleValueSourceCartesianList(true);
			convertedTimeCartesianList.setHierarchyLevelType(originalHierarchyLevelType);
			transientCartesianList = convertedTimeCartesianList;
		}
		else if (this.getFunction() === oFF.QTimeOperationFunction.TO_DATE)
		{
			let convertedToDateTimeCartesianList = oFF.QFactory.createFilterConvertedTimeCartesianListWithField(queryModel, timeDimension.getHierarchyKeyField());
			convertedToDateTimeCartesianList.setIsSingleValueSourceCartesianList(true);
			transientCartesianList = convertedToDateTimeCartesianList;
		}
		else
		{
			transientCartesianList = oFF.QFactory.createFilterCartesianListWithField(queryModel, timeDimension.getHierarchyKeyField());
		}
		transientCartesianList.setConvertToFlatFilter(true);
		transientCartesianList.setHierarchyName(filterHierarchyName);
	}
	if (isToDateWithFlatRangeSelection)
	{
		let lowestToDateFilterValueCanonicalDate = null;
		let highestToDateFilterValueCanonicalDate = null;
		isFlat = singleValueTimeCartesianList.getHierarchyName() === null;
		for (let cartesianListIdx = 0; cartesianListIdx < singleValueTimeCartesianList.size(); cartesianListIdx++)
		{
			filterElement = singleValueTimeCartesianList.getCartesianElement(cartesianListIdx);
			lowFilterValue = filterElement.getLow().getString();
			let filterValueCanonicalDate = oFF.QFilterUtil.convertFilterValueToCanonicalDate(queryModel, timeDimension, filterLevelType, lowFilterValue, filterHierarchyName, isFlat);
			if (oFF.isNull(lowestToDateFilterValueCanonicalDate) || oFF.QCanonicalDateUtil.isBefore(queryModel, timeDimension, filterHierarchyName, filterValueCanonicalDate, lowestToDateFilterValueCanonicalDate))
			{
				lowestToDateFilterValueCanonicalDate = filterValueCanonicalDate;
			}
			if (oFF.notNull(highFilterValue))
			{
				filterValueCanonicalDate = oFF.QFilterUtil.convertFilterValueToCanonicalDate(queryModel, timeDimension, filterLevelType, highFilterValue, filterHierarchyName, isFlat);
			}
			if (oFF.isNull(highestToDateFilterValueCanonicalDate) || oFF.QCanonicalDateUtil.isAfter(queryModel, timeDimension, filterHierarchyName, filterValueCanonicalDate, highestToDateFilterValueCanonicalDate))
			{
				highestToDateFilterValueCanonicalDate = filterValueCanonicalDate;
			}
			persistedPlaceholderTagging = filterElement.getLow().getTagging().getByKey(oFF.QPersistedPlaceholderTag.PERSISTED_QUERY_PLACEHOLDER);
		}
		if (!this.createToDateFlatRangeSelectionFromCanonicalDates(queryModel, timeDimension, filterHierarchyName, filterLevelType, transientCartesianList, lowestToDateFilterValueCanonicalDate, highestToDateFilterValueCanonicalDate, messageManager, persistedPlaceholderTagging))
		{
			return null;
		}
	}
	else if (oFF.isNull(highFilterValue) || this.getFunction() === oFF.QTimeOperationFunction.TO_DATE)
	{
		isFlat = singleValueTimeCartesianList.getHierarchyName() === null;
		for (let i = 0; i < singleValueTimeCartesianList.size(); i++)
		{
			filterElement = singleValueTimeCartesianList.getCartesianElement(i);
			lowFilterValue = oFF.QFilterUtil.getValueFromValueBag(filterElement.getLow());
			let lowFilterValueCanonicalDate = oFF.QFilterUtil.convertFilterValueToCanonicalDate(queryModel, timeDimension, filterLevelType, lowFilterValue, filterHierarchyName, isFlat);
			persistedPlaceholderTagging = filterElement.getLow().getTagging().getByKey(oFF.QPersistedPlaceholderTag.PERSISTED_QUERY_PLACEHOLDER);
			if (isToDateWithFlatRangeSelection)
			{
				let highFilterValueCanonicalDate = lowFilterValueCanonicalDate;
				if (oFF.notNull(highFilterValue))
				{
					highFilterValueCanonicalDate = oFF.QFilterUtil.convertFilterValueToCanonicalDate(queryModel, timeDimension, filterLevelType, highFilterValue, filterHierarchyName, isFlat);
				}
				if (!this.createToDateFlatRangeSelectionFromCanonicalDates(queryModel, timeDimension, filterHierarchyName, filterLevelType, transientCartesianList, lowFilterValueCanonicalDate, highFilterValueCanonicalDate, messageManager, persistedPlaceholderTagging))
				{
					return null;
				}
			}
			else
			{
				if (!this.performTimeShiftAndAddToCartesianList(queryModel, timeDimension, filterHierarchyName, targetFilterLevelType, lowFilterValueCanonicalDate, messageManager, transientCartesianList, persistedPlaceholderTagging))
				{
					return null;
				}
				if (this.getFunction() === oFF.QTimeOperationFunction.TO_DATE)
				{
					break;
				}
			}
		}
	}
	else
	{
		let lowRangeFilterValueCanonicalDate = oFF.QFilterUtil.convertFilterValueToCanonicalDate(queryModel, timeDimension, filterLevelType, lowFilterValue, filterHierarchyName, isFlat);
		let highRangeFilterValueCanonicalDate = oFF.QFilterUtil.convertFilterValueToCanonicalDate(queryModel, timeDimension, filterLevelType, highFilterValue, filterHierarchyName, isFlat);
		highRangeFilterValueCanonicalDate = oFF.QCanonicalDateUtil.incrementCanonicalDate(queryModel, timeDimension, filterHierarchyName, highRangeFilterValueCanonicalDate, 1, filterLevelType);
		while (!oFF.QCanonicalDateUtil.isEqual(lowRangeFilterValueCanonicalDate, highRangeFilterValueCanonicalDate))
		{
			if (!this.performTimeShiftAndAddToCartesianList(queryModel, timeDimension, filterHierarchyName, targetFilterLevelType, lowRangeFilterValueCanonicalDate, messageManager, transientCartesianList, persistedPlaceholderTagging))
			{
				return null;
			}
			lowRangeFilterValueCanonicalDate = oFF.QCanonicalDateUtil.incrementCanonicalDate(queryModel, timeDimension, filterHierarchyName, lowRangeFilterValueCanonicalDate, 1, filterLevelType);
		}
	}
	return transientCartesianList;
};
oFF.QTimeOperation.prototype.generateTransientCurrentDateSelection = function(queryModel, timeDimension)
{
	let filterHierarchyName = timeDimension.getHierarchyName();
	let cartesianList = oFF.QFactory.createFilterCartesianListWithField(queryModel.getContext(), timeDimension.getHierarchyKeyField());
	let leveledHierarchy;
	if (oFF.QTimeDimensionUtil.isFlexibleTimeDimension(timeDimension) && this.getSession().hasFeature(oFF.FeatureToggleOlap.FLEXIBLE_TIME_DYNAMIC_TIME))
	{
		if (oFF.isNull(filterHierarchyName))
		{
			leveledHierarchy = oFF.QTimeDimensionUtil.findFirstLeveledHierarchyWithLevelName(timeDimension, this.getHierarchyLevelName());
			filterHierarchyName = leveledHierarchy.getHierarchyName();
		}
		let currentPeriod = oFF.QVariableUtils.getCurrentPeriodVariableByDimensionAndHierarchyName(queryModel, timeDimension.getName(), filterHierarchyName);
		if (oFF.notNull(currentPeriod))
		{
			let timeFilterOp = oFF.QFactory.createFilterOperation(queryModel, timeDimension.getHierarchyKeyField());
			timeFilterOp.setHierarchyName(filterHierarchyName);
			timeFilterOp.getLow().setVariableValue(currentPeriod);
			let ancestor = oFF.QFactory.createMemberNavigation(oFF.CurrentMemberFunction.ANCESTOR);
			let hierarchyLevelName = this.getHierarchyLevelName();
			if (oFF.isNull(hierarchyLevelName))
			{
				let hierarchyLevelType = oFF.QCanonicalDateUtil.convertTimeOperationGranularityToHierarchyLevelType(this.getGranularity());
				hierarchyLevelName = this.getDimensionLevelNameByLevelType(timeDimension, filterHierarchyName, hierarchyLevelType);
			}
			ancestor.addParameter(oFF.QFactory.createNavigationParameterWithLevelLiteral(hierarchyLevelName));
			timeFilterOp.getLow().getMemberNavigations().add(ancestor);
			timeFilterOp.setComparisonOperator(oFF.ComparisonOperator.EQUAL);
			cartesianList.add(timeFilterOp);
			cartesianList.setConvertToFlatFilter(true);
			cartesianList.setHierarchyName(filterHierarchyName);
			oFF.QFilterUtil.setCurrentDateVariable(queryModel);
		}
	}
	else
	{
		let minutesPerDay = 24 * 60;
		if (oFF.isNull(filterHierarchyName))
		{
			leveledHierarchy = oFF.QTimeDimensionUtil.findFirstLeveledHierarchyWithLevelType(timeDimension, oFF.QCanonicalDateUtil.convertTimeOperationGranularityToHierarchyLevelType(this.getGranularity()));
			filterHierarchyName = leveledHierarchy.getHierarchyName();
		}
		let currentCanonicalDate;
		let hasInvalidUTCOffset = oFF.XMath.abs(this.getPeriod()) >= minutesPerDay;
		if (hasInvalidUTCOffset)
		{
			currentCanonicalDate = oFF.QCanonicalDateUtil.createCurrentCanonicalDate(queryModel, timeDimension, filterHierarchyName);
		}
		else
		{
			currentCanonicalDate = oFF.QCanonicalDateUtil.createCurrentCanonicalDateWithTimeZoneOffset(queryModel, timeDimension, filterHierarchyName, this.getPeriod());
		}
		currentCanonicalDate = oFF.QCanonicalDateUtil.castCanonicalDateToLevel(queryModel, timeDimension, filterHierarchyName, currentCanonicalDate, oFF.QCanonicalDateUtil.convertTimeOperationGranularityToHierarchyLevelType(this.getGranularity()), false);
		cartesianList.setConvertToFlatFilter(true);
		cartesianList.setHierarchyName(filterHierarchyName);
		this.createAndAddHierarchyTimeFilterFromCanonicalDate(queryModel, timeDimension, filterHierarchyName, cartesianList, currentCanonicalDate, null, true);
	}
	return cartesianList;
};
oFF.QTimeOperation.prototype.generateTransientIgnoredExternalDimensions = function(queryModel, messageManager)
{
	let timeDimension = queryModel.getDimensionByName(this.getDimensionName());
	if (!this.validateTimeDimensionOperation(queryModel, timeDimension, messageManager) || !this.needsTransientTimeSelection())
	{
		return null;
	}
	if (this.shouldGenerateSingleValueFilterBasedTransientTimeSelection(timeDimension.getAxisType()) || this.getFunction() === oFF.QTimeOperationFunction.CURRENT_DATE)
	{
		let dimensionLevelNames = oFF.QTimeDimensionUtil.getAllLevelNamesFilterLevelTypeAll(timeDimension);
		dimensionLevelNames.add(timeDimension.getName());
		return dimensionLevelNames.getValuesAsReadOnlyList();
	}
	return null;
};
oFF.QTimeOperation.prototype.generateTransientTimeMemberNavigations = function(queryModel, timeDimension, messageManager)
{
	if (!timeDimension.isHierarchyActive() || timeDimension.getHierarchyName() === null || timeDimension.getLeveledHierarchy(timeDimension.getHierarchyName()) === null)
	{
		messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_INVALID_TIME_DIMENSION, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_INVALID_TIME_DIMENSION, oFF.XList.create(), this.getParentAliasOrMemberName(), this.getDimensionName()));
		return null;
	}
	let timeFilterOp = oFF.QFactory.createFilterOperation(queryModel, timeDimension.getKeyField());
	timeFilterOp.setHierarchyName(timeDimension.getHierarchyName());
	timeFilterOp.getLow().setFilterValueType(oFF.XValueType.CURRENT_MEMBER);
	let memberNavigations = timeFilterOp.getLow().getMemberNavigations();
	let memberNav;
	let opFunction = this.getFunction();
	let opGranularity = this.getGranularity();
	let opPeriod = this.getPeriod();
	let lowestDrillLevel = null;
	let hierarchyLevel = null;
	let opLevel = null;
	let leveledHierarchy = timeDimension.getLeveledHierarchy(timeDimension.getHierarchyName());
	if (opGranularity !== oFF.QTimeOperationGranularity.OTHER)
	{
		let opLevelType = oFF.QCanonicalDateUtil.convertTimeOperationGranularityToHierarchyLevelType(opGranularity);
		opLevel = leveledHierarchy.getLevelByType(opLevelType);
	}
	else
	{
		hierarchyLevel = this.getAndValidateHierarchyLevelFromTimeDimension(timeDimension, timeDimension.getHierarchyName(), messageManager);
		if (oFF.isNull(hierarchyLevel))
		{
			return null;
		}
		opLevel = leveledHierarchy.getLevelByName(this.getHierarchyLevelName());
	}
	lowestDrillLevel = queryModel.getDrillManager().getTimeDimensionLowestDrillLevel(timeDimension);
	if (!this.validateMemberNavigationDrillLevel(queryModel, timeDimension, lowestDrillLevel, timeDimension.getHierarchyName(), messageManager))
	{
		return null;
	}
	if (opFunction === oFF.QTimeOperationFunction.PREVIOUS)
	{
		if (oFF.notNull(hierarchyLevel))
		{
			memberNav = oFF.QTimeMemberNavigationGenerator.createParallelPeriodMemberNavigation(this.getContext(), hierarchyLevel.getLevelName(), opPeriod, leveledHierarchy);
		}
		else
		{
			let levelName = oFF.notNull(opLevel) ? opLevel.getLevelName() : null;
			if (oFF.isNull(lowestDrillLevel) || this.m_timePeriodOperationLevel === oFF.QTimePeriodOperationLevel.ALL_LEVELS)
			{
				if (opGranularity === oFF.QTimeOperationGranularity.PERIOD && opPeriod === 1)
				{
					memberNav = oFF.QFactory.createMemberNavigation(oFF.CurrentMemberFunction.PREV_MEMBER);
				}
				else if (opGranularity === oFF.QTimeOperationGranularity.PERIOD && opPeriod > 1)
				{
					memberNav = oFF.QFactory.createMemberNavigation(oFF.CurrentMemberFunction.LAG);
					memberNav.addParameter(oFF.QFactory.createNavigationParameterWithIntegerConstant(opPeriod));
				}
				else
				{
					memberNav = oFF.QTimeMemberNavigationGenerator.createParallelPeriodMemberNavigation(this.getContext(), levelName, opPeriod, leveledHierarchy);
				}
			}
			else if (this.m_timePeriodOperationLevel === oFF.QTimePeriodOperationLevel.LOWEST_LEVEL)
			{
				let adjustedLagPeriod = this.convertToLagPeriod(opPeriod, opGranularity, lowestDrillLevel.getLevelType());
				if (adjustedLagPeriod !== 0 && (!oFF.QTimeDimensionUtil.isFlexibleTimeDimension(timeDimension) || opGranularity === oFF.QTimeOperationGranularity.PERIOD))
				{
					if (this.getContext().getModelCapabilities().supportsInaCurrentMember() && this.getSession().hasFeature(oFF.FeatureToggleOlap.INA_SHIFT_PERIOD_FOR_TRANSIENT_TIME_OPERATIONS) && this.getContext().getModelCapabilities().supportsErrorAboveLevel())
					{
						memberNav = oFF.QTimeMemberNavigationGenerator.createParallelPeriodMemberNavigation(this.getContext(), levelName, oFF.XStringUtils.isNotNullAndNotEmpty(levelName) ? 1 : adjustedLagPeriod, leveledHierarchy);
					}
					else
					{
						memberNav = oFF.QTimeMemberNavigationGenerator.createParallelPeriodMemberNavigation(this.getContext(), lowestDrillLevel.getLevelName(), adjustedLagPeriod, leveledHierarchy);
					}
				}
				else
				{
					memberNav = oFF.QTimeMemberNavigationGenerator.createParallelPeriodMemberNavigation(this.getContext(), levelName, opPeriod, leveledHierarchy);
				}
			}
			else
			{
				oFF.noSupport();
			}
		}
	}
	else if (opFunction === oFF.QTimeOperationFunction.NEXT)
	{
		let leadAdjustedLagPeriod = this.convertToLagPeriod(opPeriod, opGranularity, lowestDrillLevel.getLevelType());
		memberNav = oFF.QFactory.createMemberNavigation(oFF.CurrentMemberFunction.LEAD);
		memberNav.addParameter(oFF.QFactory.createNavigationParameterWithIntegerConstant(leadAdjustedLagPeriod));
	}
	else if (opFunction === oFF.QTimeOperationFunction.TO_DATE)
	{
		if (opGranularity === oFF.QTimeOperationGranularity.YEAR)
		{
			memberNav = oFF.QFactory.createMemberNavigation(oFF.CurrentMemberFunction.YTD);
		}
		else if (opGranularity === oFF.QTimeOperationGranularity.QUARTER)
		{
			memberNav = oFF.QFactory.createMemberNavigation(oFF.CurrentMemberFunction.QTD);
		}
		else if (opGranularity === oFF.QTimeOperationGranularity.MONTH)
		{
			memberNav = oFF.QFactory.createMemberNavigation(oFF.CurrentMemberFunction.MTD);
		}
		else if (opGranularity === oFF.QTimeOperationGranularity.WEEK)
		{
			memberNav = oFF.QFactory.createMemberNavigation(oFF.CurrentMemberFunction.WTD);
		}
		else if (oFF.QTimeDimensionUtil.isFlexibleTimeDimension(timeDimension) && this.getSession().hasFeature(oFF.FeatureToggleOlap.FLEXIBLE_TIME_DYNAMIC_TIME) && oFF.XStringUtils.isNotNullAndNotEmpty(this.getHierarchyLevelName()))
		{
			memberNav = oFF.QTimeMemberNavigationGenerator.createPeriodsToDateMemberNavigation(this.getHierarchyLevelName());
		}
		else
		{
			messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_INVALID_TO_DATE_FUNCTION_GRANULARITY, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_INVALID_TO_DATE_FUNCTION_GRANULARITY, oFF.XList.create(), this.getParentAliasOrMemberName(), this.getDimensionName()));
			return null;
		}
	}
	else
	{
		messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_FUNCTION, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_FUNCTION, oFF.XList.create(), this.getParentAliasOrMemberName(), this.getDimensionName()));
		return null;
	}
	memberNavigations.add(memberNav);
	let timeCartesianList = oFF.QFactory.createFilterCartesianListWithField(queryModel, timeDimension.getKeyField());
	timeCartesianList.add(timeFilterOp);
	timeCartesianList.setHierarchyName(timeDimension.getHierarchyName());
	return timeCartesianList;
};
oFF.QTimeOperation.prototype.generateTransientTimeSelection = function(queryModel, messageManager)
{
	if (!this.needsTransientTimeSelection())
	{
		return null;
	}
	let timeDimensionName = this.getDimensionName();
	let timeDimension = queryModel.getDimensionByName(timeDimensionName);
	if (!this.validateTimeDimensionOperation(queryModel, timeDimension, messageManager))
	{
		return null;
	}
	if (this.getFunction() === oFF.QTimeOperationFunction.CURRENT_DATE)
	{
		return this.generateTransientCurrentDateSelection(queryModel, timeDimension);
	}
	try
	{
		if (this.shouldGenerateSingleValueFilterBasedTransientTimeSelection(timeDimension.getAxisType()))
		{
			let singleValueTimeCartesianList;
			if (oFF.QTimeDimensionUtil.isFlexibleTimeDimension(timeDimension) && this.getSession().hasFeature(oFF.FeatureToggleOlap.FLEXIBLE_TIME_DYNAMIC_TIME))
			{
				singleValueTimeCartesianList = oFF.QFilterUtil.findFinestSingleValueTimeCartesianListByHierarchyLevel(queryModel, timeDimension, this.determineFilterElementContextToUse(queryModel));
				if (oFF.isNull(singleValueTimeCartesianList))
				{
					return this.generateSingleValueFilterErrorMessage(messageManager);
				}
				let timeFilterOp = oFF.QFactory.createFilterOperation(queryModel, timeDimension.getHierarchyKeyField());
				let hierarchyName = singleValueTimeCartesianList.getHierarchyName();
				timeFilterOp.setHierarchyName(hierarchyName);
				let isVariableFilter = singleValueTimeCartesianList.getCartesianElement(0).getLow().getValueType() === oFF.XValueType.VARIABLE;
				if (isVariableFilter)
				{
					timeFilterOp.getLow().setVariableValue(singleValueTimeCartesianList.getCartesianElement(0).getLow().getVariableValue());
				}
				else
				{
					timeFilterOp.getLow().setString(singleValueTimeCartesianList.getCartesianElement(0).getLow().getFieldValue().getString());
				}
				let levelName = null;
				let memberNavigations = oFF.XList.create();
				if (this.getFunction() === oFF.QTimeOperationFunction.TO_DATE)
				{
					if (this.getGranularity() === oFF.QTimeOperationGranularity.OTHER)
					{
						let toDateLevel = this.getAndValidateHierarchyLevelFromTimeDimension(timeDimension, hierarchyName, messageManager);
						levelName = oFF.notNull(toDateLevel) ? toDateLevel.getLevelName() : null;
					}
					else
					{
						let toDateLevelType = oFF.QCanonicalDateUtil.convertTimeOperationGranularityToHierarchyLevelType(this.getGranularity());
						levelName = this.getDimensionLevelNameByLevelType(timeDimension, hierarchyName, toDateLevelType);
					}
					if (oFF.notNull(levelName))
					{
						memberNavigations.add(oFF.QTimeMemberNavigationGenerator.createPeriodsToDateMemberNavigation(levelName));
					}
				}
				else
				{
					if (this.getGranularity() === oFF.QTimeOperationGranularity.PERIOD && this.getPeriod() === 1)
					{
						memberNavigations.add(oFF.QFactory.createMemberNavigation(this.getFunction() === oFF.QTimeOperationFunction.NEXT ? oFF.CurrentMemberFunction.NEXT_MEMBER : oFF.CurrentMemberFunction.PREV_MEMBER));
					}
					else if (this.getGranularity() === oFF.QTimeOperationGranularity.PERIOD && this.getPeriod() > 1)
					{
						let lagMemberNav = oFF.QFactory.createMemberNavigation(this.getFunction() === oFF.QTimeOperationFunction.NEXT ? oFF.CurrentMemberFunction.LEAD : oFF.CurrentMemberFunction.LAG);
						lagMemberNav.addParameter(oFF.QFactory.createNavigationParameterWithIntegerConstant(this.getPeriod()));
						memberNavigations.add(lagMemberNav);
					}
					else if (this.validateTimeHierarchyContainsTimeOperationHierarchyLevel(hierarchyName, timeDimension, messageManager))
					{
						let filterLevel;
						if (isVariableFilter)
						{
							let leveledHierarchy = timeDimension.getLeveledHierarchy(hierarchyName);
							filterLevel = leveledHierarchy.getMostGranularLevel();
						}
						else
						{
							filterLevel = oFF.QFilterUtil.getHierarchyLevelFromEntityValue(timeDimension, singleValueTimeCartesianList.getHierarchyName(), singleValueTimeCartesianList.getCartesianElement(0).getLow().getFieldValue().getString());
						}
						if (oFF.notNull(filterLevel))
						{
							if (this.validateSingleValueFilterDrillLevel(filterLevel, hierarchyName, messageManager, timeDimension))
							{
								if (this.getGranularity() === oFF.QTimeOperationGranularity.OTHER && this.getHierarchyLevelName() !== null)
								{
									let level = this.getAndValidateHierarchyLevelFromTimeDimension(timeDimension, hierarchyName, messageManager);
									levelName = oFF.notNull(level) ? level.getLevelName() : null;
								}
								else
								{
									let levelType = oFF.QCanonicalDateUtil.convertTimeOperationGranularityToHierarchyLevelType(this.getGranularity());
									levelName = this.getDimensionLevelNameByLevelType(timeDimension, hierarchyName, levelType);
								}
							}
						}
					}
					if (oFF.notNull(levelName))
					{
						memberNavigations.add(oFF.QTimeMemberNavigationGenerator.createParallelPeriodMemberNavigation(queryModel, levelName, this.getPeriod(), timeDimension.getLeveledHierarchy(hierarchyName)));
					}
				}
				if (memberNavigations.isEmpty())
				{
					return null;
				}
				let singleValueMemberNavigation = singleValueTimeCartesianList.getCartesianElement(0).getLow().getMemberNavigations();
				timeFilterOp.getLow().getMemberNavigations().addAll(singleValueMemberNavigation);
				timeFilterOp.getLow().getMemberNavigations().addAll(memberNavigations);
				let timeCartesianList = oFF.QFactory.createFilterCartesianListWithField(queryModel, timeDimension.getKeyField());
				timeCartesianList.setHierarchyName(hierarchyName);
				timeCartesianList.add(timeFilterOp);
				return timeCartesianList;
			}
			else
			{
				try
				{
					singleValueTimeCartesianList = oFF.QFilterUtil.findFinestSingleValueTimeCartesianList(queryModel, timeDimension, this.determineFilterElementContextToUse(queryModel));
					if (oFF.isNull(singleValueTimeCartesianList))
					{
						return this.generateSingleValueFilterErrorMessage(messageManager);
					}
					return this.generateSingleValueFilterBasedTransientTimeSelection(queryModel, timeDimension, messageManager, singleValueTimeCartesianList);
				}
				catch (t)
				{
					let errorMsgArgs = oFF.XList.create();
					errorMsgArgs.add(this.getParentTextOrName());
					errorMsgArgs.add(this.getTimeDimensionTextOrName());
					messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_INVALID_FILTER_VALUE, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_INVALID_FILTER_VALUE, errorMsgArgs, this.getParentAliasOrMemberName(), this.getDimensionName()));
					return null;
				}
			}
		}
		return this.generateTransientTimeMemberNavigations(queryModel, timeDimension, messageManager);
	}
	catch (t)
	{
		messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_INVALID_DYNAMIC_TIME_CALCULATION, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_INVALID_DYNAMIC_TIME_CALCULATION, oFF.XList.create(), this.getParentAliasOrMemberName(), this.getDimensionName()));
		return null;
	}
};
oFF.QTimeOperation.prototype.getAndValidateHierarchyLevelFromTimeDimension = function(timeDimension, hierarchyName, messageManager)
{
	let hierarchyLevel = this.getHierarchyLevelFromTimeDimension(timeDimension, hierarchyName);
	if (oFF.isNull(hierarchyLevel) && oFF.notNull(messageManager))
	{
		let errorMsgArgs = oFF.XList.create();
		errorMsgArgs.add(this.getHierarchyOrGranularityLevelName());
		errorMsgArgs.add(this.getParentTextOrName());
		messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY_NOT_IN_HIERARCHY, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY_NOT_IN_HIERARCHY, errorMsgArgs, this.getParentAliasOrMemberName(), this.getDimensionName()));
		return null;
	}
	return hierarchyLevel;
};
oFF.QTimeOperation.prototype.getDependentMemberNavigationsIfApplicable = function(queryModel, messageManager, transientTimeSelection, dependentRestrictedMeasure)
{
	let dependentFilterElement = dependentRestrictedMeasure.generateFlattenTransientTimeSelection(queryModel, messageManager, dependentRestrictedMeasure.getTimeOperation(), null);
	if (oFF.isNull(dependentFilterElement))
	{
		return null;
	}
	let newSelection = transientTimeSelection;
	let memberNavigations = oFF.XList.create();
	let memberNav = null;
	if (newSelection.getComponentType().isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
	{
		let transientTimeCartesianList = newSelection;
		for (let idxTransientCartesian = 0; idxTransientCartesian < transientTimeCartesianList.size(); idxTransientCartesian++)
		{
			let cartesianElement = transientTimeCartesianList.getCartesianElement(idxTransientCartesian);
			memberNavigations = cartesianElement.getLow().getMemberNavigations();
			if (memberNavigations.size() === 1)
			{
				memberNav = memberNavigations.get(0);
				memberNavigations.clear();
			}
		}
	}
	if (!dependentRestrictedMeasure.hasNestedTimeOperation(queryModel, messageManager))
	{
		let filterAnd = oFF.QFactory.createFilterAnd(queryModel);
		filterAnd.add(newSelection);
		filterAnd.add(dependentFilterElement);
		newSelection = filterAnd;
	}
	else if (!dependentFilterElement.getComponentType().isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
	{
		let childrenIterator = dependentFilterElement.getChildrenIterator();
		while (childrenIterator.hasNext())
		{
			let filterRootChild = childrenIterator.next();
			if (filterRootChild.getOlapComponentType().isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
			{
				let dependentFilterCartesianList = filterRootChild;
				for (let i = 0; i < dependentFilterCartesianList.size(); i++)
				{
					let dependentFilterCartesianElement = dependentFilterCartesianList.getCartesianElement(i);
					memberNavigations = dependentFilterCartesianElement.getLow().getMemberNavigations();
				}
				break;
			}
		}
		newSelection = dependentFilterElement;
	}
	else
	{
		let dependentTimeCartesianList = dependentFilterElement;
		for (let idxDependentCartesian = 0; idxDependentCartesian < dependentTimeCartesianList.size(); idxDependentCartesian++)
		{
			let dependentCartesianElement = dependentTimeCartesianList.getCartesianElement(idxDependentCartesian);
			memberNavigations.addAll(dependentCartesianElement.getLow().getMemberNavigations());
		}
	}
	if (oFF.notNull(memberNav))
	{
		if (memberNavigations.size() > 0 && oFF.CurrentMemberFunction.isToDate(memberNavigations.get(memberNavigations.size() - 1).getMemberFunction()))
		{
			memberNavigations.insert(memberNavigations.size() - 1, memberNav);
		}
		else
		{
			memberNavigations.add(memberNav);
		}
	}
	return newSelection;
};
oFF.QTimeOperation.prototype.getDimensionLevelNameByLevelType = function(timeDimension, hierarchyName, levelType)
{
	let hierarchy = timeDimension.getLeveledHierarchy(hierarchyName);
	if (oFF.notNull(hierarchy))
	{
		let level = hierarchy.getLevelByType(levelType);
		if (oFF.notNull(level))
		{
			return level.getLevelName();
		}
	}
	return null;
};
oFF.QTimeOperation.prototype.getDimensionName = function()
{
	return this.m_dimensionName;
};
oFF.QTimeOperation.prototype.getFilterElementContext = function()
{
	return this.m_filterElementContext;
};
oFF.QTimeOperation.prototype.getForceMemberNavigationGeneration = function()
{
	return this.m_forceMemberNavigationGeneration;
};
oFF.QTimeOperation.prototype.getFunction = function()
{
	return this.m_function;
};
oFF.QTimeOperation.prototype.getGranularity = function()
{
	return this.m_granularity;
};
oFF.QTimeOperation.prototype.getHierarchyLevelFromTimeDimension = function(timeDimension, hierarchyName)
{
	let leveledHierarchy = timeDimension.getLeveledHierarchy(hierarchyName);
	if (oFF.notNull(leveledHierarchy))
	{
		return leveledHierarchy.getLevelByName(this.getHierarchyLevelName());
	}
	return null;
};
oFF.QTimeOperation.prototype.getHierarchyLevelName = function()
{
	return this.m_hierarchyLevelName;
};
oFF.QTimeOperation.prototype.getHierarchyOrGranularityLevelName = function()
{
	return this.getGranularity() === oFF.QTimeOperationGranularity.OTHER ? this.getHierarchyLevelName() : this.getGranularity().getName();
};
oFF.QTimeOperation.prototype.getLevelTypeFromGranularityOrLevelName = function(granularity, timeDimension, hierarchyName)
{
	if (granularity !== oFF.QTimeOperationGranularity.OTHER)
	{
		return oFF.QCanonicalDateUtil.convertTimeOperationGranularityToHierarchyLevelType(granularity);
	}
	let hierarchyLevel = this.getHierarchyLevelFromTimeDimension(timeDimension, hierarchyName);
	if (oFF.notNull(hierarchyLevel))
	{
		return hierarchyLevel.getLevelType();
	}
	return null;
};
oFF.QTimeOperation.prototype.getParentAliasOrMemberName = function()
{
	let text = "";
	let parent = this.getParent();
	if (oFF.notNull(parent))
	{
		text = parent.getAliasOrMemberName();
	}
	return text;
};
oFF.QTimeOperation.prototype.getParentTextOrName = function()
{
	let text = "";
	let parent = this.getParent();
	if (oFF.notNull(parent))
	{
		text = parent.getDisplayDescription();
		if (oFF.XStringUtils.isNullOrEmpty(text))
		{
			text = parent.getText();
			if (oFF.XStringUtils.isNullOrEmpty(text))
			{
				text = parent.getAliasOrMemberName();
			}
		}
	}
	return text;
};
oFF.QTimeOperation.prototype.getPeriod = function()
{
	return this.m_period;
};
oFF.QTimeOperation.prototype.getTimeDimensionTextOrName = function()
{
	let text = "";
	let timeDimension = this.getQueryModel().getDimensionByName(this.getDimensionName());
	if (oFF.notNull(timeDimension))
	{
		text = timeDimension.getText();
		if (oFF.XStringUtils.isNullOrEmpty(text))
		{
			text = timeDimension.getName();
		}
	}
	return text;
};
oFF.QTimeOperation.prototype.getTimePeriodOperationLevel = function()
{
	return this.m_timePeriodOperationLevel;
};
oFF.QTimeOperation.prototype.getUseToDateFlatRangeSelection = function()
{
	return this.m_useToDateFlatRangeSelection;
};
oFF.QTimeOperation.prototype.needsTransientTimeSelection = function()
{
	return this.getFunction() !== oFF.QTimeOperationFunction.CURRENT;
};
oFF.QTimeOperation.prototype.performTimeShiftAndAddToCartesianList = function(queryModel, timeDimension, filterHierarchyName, filterLevelType, canonicalDateParam, messageManager, transientCartesianList, persistedPlaceholderTagging)
{
	let canonicalDate = canonicalDateParam;
	let opFunction = this.getFunction();
	let opGranularity = this.getGranularity();
	let opLevelType = oFF.QCanonicalDateUtil.convertTimeOperationGranularityToHierarchyLevelType(opGranularity);
	let opPeriod = this.getPeriod();
	if (opFunction === oFF.QTimeOperationFunction.PREVIOUS || opFunction === oFF.QTimeOperationFunction.NEXT)
	{
		let targetLevelType;
		if (opGranularity === oFF.QTimeOperationGranularity.PERIOD)
		{
			targetLevelType = filterLevelType;
		}
		else
		{
			targetLevelType = opLevelType;
		}
		let timeShift = opPeriod;
		if (opFunction === oFF.QTimeOperationFunction.PREVIOUS)
		{
			timeShift = timeShift * -1;
		}
		canonicalDate = oFF.QCanonicalDateUtil.incrementCanonicalDate(queryModel, timeDimension, filterHierarchyName, canonicalDate, timeShift, targetLevelType);
		this.createAndAddHierarchyTimeFilterFromCanonicalDate(queryModel, timeDimension, filterHierarchyName, transientCartesianList, canonicalDate, persistedPlaceholderTagging, false);
	}
	else if (opFunction === oFF.QTimeOperationFunction.TO_DATE)
	{
		if (opGranularity === oFF.QTimeOperationGranularity.PERIOD)
		{
			messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_INVALID_TO_DATE_FUNCTION_GRANULARITY, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_INVALID_TO_DATE_FUNCTION_GRANULARITY, oFF.XList.create(), this.getParentAliasOrMemberName(), this.getDimensionName()));
			return false;
		}
		let startCanonicalDateInOpGranularity = oFF.QCanonicalDateUtil.castCanonicalDateToLevel(queryModel, timeDimension, filterHierarchyName, canonicalDate, opLevelType, false);
		let startCanonicalDateInFilterGranularity = oFF.QCanonicalDateUtil.castCanonicalDateToLevel(queryModel, timeDimension, filterHierarchyName, startCanonicalDateInOpGranularity, filterLevelType, false);
		if (canonicalDate.getGranularity() !== startCanonicalDateInFilterGranularity.getGranularity())
		{
			canonicalDate = oFF.QCanonicalDateUtil.castCanonicalDateToLevel(queryModel, timeDimension, filterHierarchyName, canonicalDate, oFF.QCanonicalDateUtil.convertDateTimeGranularityToHierarchyLevelType(startCanonicalDateInFilterGranularity.getGranularity()), false);
		}
		while (!oFF.QCanonicalDateUtil.isEqual(startCanonicalDateInFilterGranularity, canonicalDate))
		{
			this.createAndAddHierarchyTimeFilterFromCanonicalDate(queryModel, timeDimension, filterHierarchyName, transientCartesianList, startCanonicalDateInFilterGranularity, null, false);
			startCanonicalDateInFilterGranularity = oFF.QCanonicalDateUtil.incrementCanonicalDate(queryModel, timeDimension, filterHierarchyName, startCanonicalDateInFilterGranularity, 1, filterLevelType);
		}
		this.createAndAddHierarchyTimeFilterFromCanonicalDate(queryModel, timeDimension, filterHierarchyName, transientCartesianList, startCanonicalDateInFilterGranularity, null, false);
	}
	else
	{
		messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_FUNCTION, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_FUNCTION, oFF.XList.create(), this.getParentAliasOrMemberName(), this.getDimensionName()));
		return false;
	}
	return true;
};
oFF.QTimeOperation.prototype.releaseObject = function()
{
	this.m_dimensionName = null;
	this.m_function = null;
	this.m_granularity = null;
	this.m_filterElementContext = null;
	this.m_timePeriodOperationLevel = null;
	this.m_hierarchyLevelName = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QTimeOperation.prototype.setDimensionName = function(dimensionName)
{
	this.m_dimensionName = dimensionName;
	this.notifyNodeChanged();
};
oFF.QTimeOperation.prototype.setFilterElementContext = function(filterContext)
{
	this.m_filterElementContext = filterContext;
};
oFF.QTimeOperation.prototype.setForceMemberNavigationGeneration = function(forceMemberNavigationGeneration)
{
	this.m_forceMemberNavigationGeneration = forceMemberNavigationGeneration;
	this.notifyNodeChanged();
};
oFF.QTimeOperation.prototype.setFunction = function(timeFunction)
{
	this.m_function = timeFunction;
	this.notifyNodeChanged();
};
oFF.QTimeOperation.prototype.setGranularity = function(granularity)
{
	this.m_granularity = granularity;
	this.notifyNodeChanged();
};
oFF.QTimeOperation.prototype.setHierarchyLevelName = function(hierarchyLevelName)
{
	this.m_hierarchyLevelName = hierarchyLevelName;
	this.notifyNodeChanged();
};
oFF.QTimeOperation.prototype.setPeriod = function(period)
{
	this.m_period = period;
	this.notifyNodeChanged();
};
oFF.QTimeOperation.prototype.setTimePeriodOperationLevel = function(timePeriodOperationLevel)
{
	this.m_timePeriodOperationLevel = timePeriodOperationLevel;
	this.notifyNodeChanged();
};
oFF.QTimeOperation.prototype.setUseToDateFlatRangeSelection = function(useToDateFlatRangeSelection)
{
	this.m_useToDateFlatRangeSelection = useToDateFlatRangeSelection;
	this.notifyNodeChanged();
};
oFF.QTimeOperation.prototype.setupTimeOperation = function(context, structureMember)
{
	this.setupModelComponent(context, structureMember);
	this.m_forceMemberNavigationGeneration = false;
	this.m_useToDateFlatRangeSelection = false;
	this.m_timePeriodOperationLevel = oFF.QTimePeriodOperationLevel.LOWEST_LEVEL;
};
oFF.QTimeOperation.prototype.shouldGenerateSingleValueFilterBasedTransientTimeSelection = function(timeDimensionAxis)
{
	return !this.m_forceMemberNavigationGeneration && (timeDimensionAxis === oFF.AxisType.FREE || oFF.notNull(this.m_filterElementContext));
};
oFF.QTimeOperation.prototype.supportsTimeMeasureWithFlatAndHierarchicalFilter = function(queryModel)
{
	if (queryModel.getSession().hasFeature(oFF.FeatureToggleOlap.TIME_MEASURE_WITH_FLAT_AND_HIERARCHICAL_FILTER))
	{
		let mdsHints = queryModel.getOptimizerHintsByExecutionEngine(oFF.ExecutionEngine.MDS);
		return oFF.notNull(mdsHints) && oFF.XString.isEqual(mdsHints.getByKey(oFF.OptimizerHint.MDS_PLAN_USE_CE_NEW.getName()), "true");
	}
	return false;
};
oFF.QTimeOperation.prototype.validateMemberNavigationDrillLevel = function(queryModel, timeDimension, drillLevelToValidate, hierarchyNameToValidate, messageManager)
{
	let isValid = true;
	let hasInvalidDrillLevelWarning = false;
	let numOfWarningsBeforeValidation = 0;
	let errorMsgArgs = oFF.XList.create();
	if (oFF.notNull(messageManager))
	{
		numOfWarningsBeforeValidation = messageManager.getWarnings().size();
	}
	if (oFF.isNull(drillLevelToValidate))
	{
		if (oFF.notNull(messageManager))
		{
			errorMsgArgs.add(this.getParentTextOrName());
			errorMsgArgs.add(this.getTimeDimensionTextOrName());
			messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_INVALID_DRILL_PATH_VALUE, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_INVALID_DRILL_PATH_VALUE, errorMsgArgs, this.getParentAliasOrMemberName(), this.getDimensionName()));
		}
		isValid = false;
	}
	else if (drillLevelToValidate.getLevelType() === oFF.HierarchyLevelType.ALL && this.getGranularity() === oFF.QTimeOperationGranularity.PERIOD)
	{
		if (oFF.notNull(messageManager))
		{
			errorMsgArgs.add(this.getTimeDimensionTextOrName());
			errorMsgArgs.add(this.getParentTextOrName());
			messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_INVALID_PREVIOUS_PERIOD_NOT_DRILLED, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_INVALID_PREVIOUS_PERIOD_NOT_DRILLED, errorMsgArgs, this.getParentAliasOrMemberName(), this.getDimensionName()));
		}
		isValid = false;
	}
	else if (this.getGranularity() !== oFF.QTimeOperationGranularity.PERIOD)
	{
		isValid = this.validateTimeHierarchyContainsTimeOperationHierarchyLevel(hierarchyNameToValidate, timeDimension, messageManager) && this.validateTimeOperationHierarchyLevelFinerThanDrillLevel(drillLevelToValidate, hierarchyNameToValidate, timeDimension, messageManager, true) && this.validateWeekAndDayDrillLevelTimeOperationConstraints(drillLevelToValidate, messageManager, true, timeDimension);
	}
	if (oFF.notNull(messageManager))
	{
		hasInvalidDrillLevelWarning = messageManager.getWarnings().size() > numOfWarningsBeforeValidation;
	}
	return isValid && this.validateMemberNavigationWithTimeFilter(queryModel, timeDimension, messageManager, hasInvalidDrillLevelWarning);
};
oFF.QTimeOperation.prototype.validateMemberNavigationWithTimeFilter = function(queryModel, timeDimension, messageManager, hasInvalidDrillLevelWarning)
{
	let capabilities = this.getContext().getModelCapabilities();
	if (capabilities.supportsTimeBasedVarianceWithNavigationAndExternalFilter())
	{
		return true;
	}
	let hasFlatTimeFilter = false;
	let hasHierarchicalTimeFilter = false;
	let filterRootElement = queryModel.getFilter().getEffectiveFilter().getFilterRootElement();
	let timeCartesianLists = oFF.QFilterUtil.collectAllTimeCartesianLists(filterRootElement, timeDimension);
	for (let i = 0; i < timeCartesianLists.size(); i++)
	{
		let timeCartesianList = timeCartesianLists.get(i);
		if (timeCartesianList.isConvertToFlatFilter() || timeCartesianList.getHierarchyName() === null)
		{
			hasFlatTimeFilter = true;
		}
		else
		{
			hasHierarchicalTimeFilter = true;
		}
	}
	let isNestedUsingFormulaMeasure = false;
	let parent = this.getParent();
	if (oFF.notNull(parent) && parent.getMemberType() === oFF.MemberType.RESTRICTED_MEASURE)
	{
		let rmParent = parent;
		let dimensionContext = rmParent.getDimensionContext(queryModel.getQueryManager());
		let dependentMemberNames = oFF.XList.createWithList(oFF.QFilterUtil.getMemberNamesFromFilter(rmParent.getFilter().getFilterRootElement(), dimensionContext.getName()));
		if (dependentMemberNames.size() === 1)
		{
			let memberName = dependentMemberNames.get(0);
			let member = dimensionContext.getStructureMemberByAliasOrMember(memberName);
			if (oFF.isNull(member))
			{
				let isPrimary = dimensionContext === queryModel.getPrimaryCalculationDimension();
				member = this.getOlapEnv().getClientQueryObjectManager().getStructuredMember(memberName, this.getStorageName(), isPrimary);
			}
			if (oFF.notNull(member) && member.getMemberType() === oFF.MemberType.FORMULA && !member.isModelDefinedMember())
			{
				isNestedUsingFormulaMeasure = true;
			}
		}
	}
	let errorMsgArgs = oFF.XList.create();
	errorMsgArgs.add(this.getTimeDimensionTextOrName());
	if (hasFlatTimeFilter && hasHierarchicalTimeFilter && !isNestedUsingFormulaMeasure && !this.supportsTimeMeasureWithFlatAndHierarchicalFilter(queryModel))
	{
		messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_INVALID_MEMBER_NAVIGATION_WITH_FLAT_AND_HIERARCHICAL_FILTER, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_INVALID_MEMBER_NAVIGATION_WITH_FLAT_AND_HIERARCHICAL_FILTER, errorMsgArgs, this.getParentAliasOrMemberName(), this.getDimensionName()));
		return false;
	}
	else if (hasFlatTimeFilter && !this.supportsTimeMeasureWithFlatAndHierarchicalFilter(queryModel) && !hasInvalidDrillLevelWarning)
	{
		messageManager.addInfo(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_OUT_OF_BOUND_MEMBER_NAVIGATION_WITH_FLAT_FILTER, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_OUT_OF_BOUND_MEMBER_NAVIGATION_WITH_FLAT_FILTER, errorMsgArgs, this.getParentAliasOrMemberName(), this.getDimensionName()));
	}
	return true;
};
oFF.QTimeOperation.prototype.validateSingleValueFilterDrillLevel = function(drillLevelToValidate, hierarchyNameToValidate, messageManager, timeDimension)
{
	if (oFF.notNull(drillLevelToValidate) && this.getGranularity() !== oFF.QTimeOperationGranularity.PERIOD)
	{
		return this.validateTimeOperationHierarchyLevelFinerThanDrillLevel(drillLevelToValidate, hierarchyNameToValidate, timeDimension, messageManager, false) && this.validateWeekAndDayDrillLevelTimeOperationConstraints(drillLevelToValidate, messageManager, false, timeDimension);
	}
	return true;
};
oFF.QTimeOperation.prototype.validateSingleValueFilterSpansAcrossWeek = function(queryModel, timeDimension, hierarchyName, canonicalDate, messageManager)
{
	if (oFF.QCanonicalDateUtil.doesCanonicalDateSpanAcrossYears(queryModel, timeDimension, hierarchyName, canonicalDate))
	{
		messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_INVALID_WEEK_ACROSS_YEAR_SINGLE_VALUE_FILTER, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_INVALID_WEEK_ACROSS_YEAR_SINGLE_VALUE_FILTER, oFF.XList.create(), this.getParentAliasOrMemberName(), this.getDimensionName()));
		return false;
	}
	return true;
};
oFF.QTimeOperation.prototype.validateTimeDimensionOperation = function(queryModel, timeDimension, messageManager)
{
	let capabilities = queryModel.getContext().getModelCapabilities();
	if (!capabilities.supportsDynamicTimeMeasure())
	{
		messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_NOT_SUPPORTED, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_NOT_SUPPORTED, oFF.XList.create(), this.getParentAliasOrMemberName(), this.getDimensionName()));
		return false;
	}
	if (oFF.notNull(timeDimension) && oFF.QTimeDimensionUtil.isDateOrTimeLikeDimension(timeDimension))
	{
		return true;
	}
	messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_INVALID_TIME_DIMENSION, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_INVALID_TIME_DIMENSION, oFF.XList.create(), this.getParentAliasOrMemberName(), this.getDimensionName()));
	return false;
};
oFF.QTimeOperation.prototype.validateTimeHierarchyContainsTimeOperationHierarchyLevel = function(hierarchyNameToValidate, timeDimension, messageManager)
{
	let granularity = this.getGranularity();
	if (granularity !== oFF.QTimeOperationGranularity.PERIOD && this.getDimensionLevelNameByLevelType(timeDimension, hierarchyNameToValidate, this.getLevelTypeFromGranularityOrLevelName(granularity, timeDimension, hierarchyNameToValidate)) === null)
	{
		let errorMsgArgs = oFF.XList.create();
		errorMsgArgs.add(this.getHierarchyOrGranularityLevelName());
		errorMsgArgs.add(this.getParentTextOrName());
		messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY_NOT_IN_HIERARCHY, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY_NOT_IN_HIERARCHY, errorMsgArgs, this.getParentAliasOrMemberName(), this.getDimensionName()));
		return false;
	}
	return true;
};
oFF.QTimeOperation.prototype.validateTimeOperationHierarchyLevelFinerThanDrillLevel = function(drillLevelToValidate, hierarchyNameToValidate, timeDimension, messageManager, isTimeInAxis)
{
	let leveledHierarchy = timeDimension.getLeveledHierarchy(hierarchyNameToValidate);
	let opLevel;
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.getHierarchyLevelName()))
	{
		opLevel = leveledHierarchy.getLevelByName(this.getHierarchyLevelName());
	}
	else
	{
		let opLevelType = this.getLevelTypeFromGranularityOrLevelName(this.getGranularity(), timeDimension, hierarchyNameToValidate);
		opLevel = leveledHierarchy.getLevelByType(opLevelType);
	}
	let isValid = opLevel.getLevelNumber() <= drillLevelToValidate.getLevelNumber();
	if (!isValid)
	{
		let errorMsgArgs = oFF.XList.create();
		errorMsgArgs.add(this.getTimeDimensionTextOrName());
		errorMsgArgs.add(this.getHierarchyOrGranularityLevelName());
		errorMsgArgs.add(this.getParentTextOrName());
		if (isTimeInAxis)
		{
			messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY_IS_FINER_THAN_DRILL_LEVEL, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY_IS_FINER_THAN_DRILL_LEVEL, errorMsgArgs, this.getParentAliasOrMemberName(), this.getDimensionName()));
		}
		else
		{
			messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY_IS_FINER_THAN_FILTER_LEVEL, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY_IS_FINER_THAN_FILTER_LEVEL, errorMsgArgs, this.getParentAliasOrMemberName(), this.getDimensionName()));
		}
		return false;
	}
	return true;
};
oFF.QTimeOperation.prototype.validateToDateSpansAcrossMultipleValues = function(startCanonicalDateInOpGranularity, endCanonicalDateInOpGranularity, messageManager)
{
	if (!oFF.QCanonicalDateUtil.isEqual(startCanonicalDateInOpGranularity, endCanonicalDateInOpGranularity))
	{
		let errorMsgArgs = oFF.XList.create();
		errorMsgArgs.add(this.getParentTextOrName());
		errorMsgArgs.add(oFF.XString.toLowerCase(this.getHierarchyOrGranularityLevelName()));
		messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_INVALID_TO_DATE_ACROSS_MULTIPLE_VALUES, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_INVALID_TO_DATE_ACROSS_MULTIPLE_VALUES, errorMsgArgs, this.getParentAliasOrMemberName(), this.getDimensionName()));
		return false;
	}
	return true;
};
oFF.QTimeOperation.prototype.validateWeekAndDayDrillLevelTimeOperationConstraints = function(drillLevelToValidate, messageManager, isTimeInAxis, timeDimension)
{
	let opLevelType = oFF.QCanonicalDateUtil.convertTimeOperationGranularityToHierarchyLevelType(this.getGranularity());
	if (oFF.QTimeDimensionUtil.isFlexibleTimeDimension(timeDimension) && this.getSession().hasFeature(oFF.FeatureToggleOlap.FLEXIBLE_TIME_DYNAMIC_TIME))
	{
		return true;
	}
	if (oFF.QTimeDimensionUtil.isFlexibleTimeDimension(timeDimension) && drillLevelToValidate.getLevelType() === oFF.HierarchyLevelType.TIME_WEEK)
	{
		return true;
	}
	if (this.getFunction() !== oFF.QTimeOperationFunction.TO_DATE)
	{
		if (drillLevelToValidate.getLevelType() === oFF.HierarchyLevelType.TIME_WEEK || drillLevelToValidate.getLevelType() === oFF.HierarchyLevelType.TIME_DAY)
		{
			if (opLevelType === oFF.HierarchyLevelType.TIME_YEAR || opLevelType === oFF.HierarchyLevelType.TIME_HALF_YEAR || opLevelType === oFF.HierarchyLevelType.TIME_QUARTER || opLevelType === oFF.HierarchyLevelType.TIME_MONTH)
			{
				let errorMsgArgs = oFF.XList.create();
				errorMsgArgs.add(this.getTimeDimensionTextOrName());
				errorMsgArgs.add(this.getParentTextOrName());
				if (oFF.QTimeDimensionUtil.isFlexibleTimeDimension(timeDimension))
				{
					if (isTimeInAxis)
					{
						messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY_ON_DAY_DRILL_LEVEL, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY_ON_DAY_DRILL_LEVEL, errorMsgArgs, this.getParentAliasOrMemberName(), this.getDimensionName()));
					}
					else
					{
						messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY_ON_DAY_FILTER_LEVEL, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY_ON_DAY_FILTER_LEVEL, errorMsgArgs, this.getParentAliasOrMemberName(), this.getDimensionName()));
					}
				}
				else
				{
					if (isTimeInAxis)
					{
						messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY_ON_WEEK_DAY_DRILL_LEVEL, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY_ON_WEEK_DAY_DRILL_LEVEL, errorMsgArgs, this.getParentAliasOrMemberName(), this.getDimensionName()));
					}
					else
					{
						messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY_ON_WEEK_DAY_FILTER_LEVEL, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_INVALID_TIME_OPERATION_GRANULARITY_ON_WEEK_DAY_FILTER_LEVEL, errorMsgArgs, this.getParentAliasOrMemberName(), this.getDimensionName()));
					}
				}
				return false;
			}
		}
	}
	return true;
};

oFF.QUniversalDisplayHierarchies = function() {};
oFF.QUniversalDisplayHierarchies.prototype = new oFF.QModelComponent();
oFF.QUniversalDisplayHierarchies.prototype._ff_c = "QUniversalDisplayHierarchies";

oFF.QUniversalDisplayHierarchies.create = function(context, queryModel)
{
	let udh = new oFF.QUniversalDisplayHierarchies();
	udh.setupUniversalDisplayHierarchies(context, queryModel);
	return udh;
};
oFF.QUniversalDisplayHierarchies.prototype.m_hierarchies = null;
oFF.QUniversalDisplayHierarchies.prototype.addHierarchy = function(name, dimensionNames, initialDrillLevel, alignment, active, axis, customDimensions, udhKeyName, requestUdhKey)
{
	let existingHierarchy = this.getByName(name);
	if (oFF.notNull(existingHierarchy))
	{
		existingHierarchy.setDimensionNames(dimensionNames);
		existingHierarchy.setInitialDrillLevel(initialDrillLevel);
		existingHierarchy.setAlignment(alignment);
		existingHierarchy.setActive(active);
		existingHierarchy.setAxis(axis);
		existingHierarchy.setCustomDimensions(customDimensions);
		existingHierarchy.setUdhKeyName(udhKeyName);
		existingHierarchy.setRequestUdhKey(requestUdhKey);
	}
	else
	{
		let hierarchy = oFF.QUniversalDisplayHierarchy.create(this.getContext(), this.getQueryModelBase(), name, dimensionNames, initialDrillLevel, alignment, active, udhKeyName, requestUdhKey);
		hierarchy.setAxis(axis);
		hierarchy.setCustomDimensions(customDimensions);
		this.m_hierarchies.add(hierarchy);
	}
};
oFF.QUniversalDisplayHierarchies.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originUniversalDisplayHierarchies = other;
	let queryModel = this.getQueryModel();
	let hierarchies = originUniversalDisplayHierarchies.getHierarchies();
	let size = hierarchies.size();
	for (let i = 0; i < size; i++)
	{
		let originHierarchy = hierarchies.get(i);
		let dimensionNames = oFF.XList.create();
		dimensionNames.addAll(originHierarchy.getDimensionNames());
		let axis = queryModel.getAxis(originHierarchy.getHierarchyDedicatedAxis().getType());
		this.addHierarchy(originHierarchy.getName(), dimensionNames, originHierarchy.getInitialDrillLevel(), originHierarchy.getAlignment(), originHierarchy.isActive(), axis, originHierarchy.hasCustomDimensions(), originHierarchy.getUdhKeyName(), originHierarchy.isRequestUdhKey());
		let dimension = queryModel.getDimensionByNameFromExistingMetadata(originHierarchy.getName());
		queryModel.getVirtualAxis().add(dimension);
	}
};
oFF.QUniversalDisplayHierarchies.prototype.getByAxisType = function(axisType)
{
	for (let i = 0; i < this.m_hierarchies.size(); i++)
	{
		let hierarchy = this.m_hierarchies.get(i);
		if (hierarchy.getHierarchyDedicatedAxis().getType() === axisType)
		{
			return hierarchy;
		}
	}
	return null;
};
oFF.QUniversalDisplayHierarchies.prototype.getByIncludedDimension = function(dimension)
{
	for (let i = 0; i < this.m_hierarchies.size(); i++)
	{
		let hierarchy = this.m_hierarchies.get(i);
		hierarchy.updateIncludedDimensions();
		if (hierarchy.getDimensionNames().contains(dimension.getName()))
		{
			return hierarchy;
		}
	}
	return null;
};
oFF.QUniversalDisplayHierarchies.prototype.getByName = function(hierarchyName)
{
	return this.m_hierarchies.getByKey(hierarchyName);
};
oFF.QUniversalDisplayHierarchies.prototype.getHierarchies = function()
{
	return this.m_hierarchies;
};
oFF.QUniversalDisplayHierarchies.prototype.getIndexedChildren = function()
{
	return oFF.XIteratorWrapper.create(this.m_hierarchies.getIterator());
};
oFF.QUniversalDisplayHierarchies.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.UNIVERSAL_DISPLAY_HIERARCHIES;
};
oFF.QUniversalDisplayHierarchies.prototype.mergeDeepRecursive = function(settings, other)
{
	if (oFF.notNull(other))
	{
		this.m_hierarchies.clear();
		this.copyFrom(other, null);
	}
};
oFF.QUniversalDisplayHierarchies.prototype.releaseObject = function()
{
	oFF.QModelComponent.prototype.releaseObject.call( this );
	this.m_hierarchies = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_hierarchies);
};
oFF.QUniversalDisplayHierarchies.prototype.setHierarchy = function(dimensionNames, initialDrillLevel, active)
{
	let queryManager = this.getQueryManager();
	if (this.m_hierarchies.isEmpty() && oFF.notNull(queryManager) && queryManager.hasVariables() && !queryManager.isSubmitted())
	{
		throw oFF.XException.createIllegalArgumentException("Ensure variables have been submitted before updating a universal display hierarchy");
	}
	if (!oFF.XCollectionUtils.hasElements(dimensionNames))
	{
		throw oFF.XException.createIllegalArgumentException("The list of dimensions must not be empty");
	}
	let dimension = this.getQueryModel().getDimensionByName(dimensionNames.get(0));
	if (oFF.isNull(dimension))
	{
		throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate3("The dimensions ", dimensionNames.toString(), " must exist and be placed next to each other on the axis."));
	}
	let axis = dimension.getAxis();
	for (let i = 0; i < this.m_hierarchies.size(); i++)
	{
		let hierarchy = this.m_hierarchies.get(i);
		if (hierarchy.getHierarchyDedicatedAxis() === axis)
		{
			let originalDimensionNames = hierarchy.getDimensionNames();
			hierarchy.setDimensionNames(dimensionNames);
			if (active && !hierarchy.isDimensionListValid())
			{
				hierarchy.setDimensionNames(originalDimensionNames.createListCopy());
				throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate3("The dimensions ", dimensionNames.toString(), " must exist and be placed next to each other on the axis."));
			}
			hierarchy.setActive(active);
			hierarchy.setInitialDrillLevel(initialDrillLevel);
			return hierarchy;
		}
	}
	throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate5("No suitable UDH could be found for dimensions ", dimensionNames.toString(), " and hierarchy ", this.m_hierarchies.toString(), ". Ensure these dimensions have been added to rows or columns before (de)activating a hierarchy."));
};
oFF.QUniversalDisplayHierarchies.prototype.setupUniversalDisplayHierarchies = function(context, queryModel)
{
	this.setupModelComponent(context, queryModel);
	this.m_hierarchies = oFF.XListOfNameObject.create();
};
oFF.QUniversalDisplayHierarchies.prototype.toString = function()
{
	return this.m_hierarchies.toString();
};
oFF.QUniversalDisplayHierarchies.prototype.updateIncludedDimensions = function()
{
	for (let i = 0; i < this.m_hierarchies.size(); i++)
	{
		this.m_hierarchies.get(i).updateIncludedDimensions();
	}
};

oFF.QUniversalDisplayHierarchy = function() {};
oFF.QUniversalDisplayHierarchy.prototype = new oFF.QModelComponent();
oFF.QUniversalDisplayHierarchy.prototype._ff_c = "QUniversalDisplayHierarchy";

oFF.QUniversalDisplayHierarchy.create = function(context, queryModel, name, dimensionNames, initialDrillLevel, alignment, active, udhKeyName, requestUdhKey)
{
	let udh = new oFF.QUniversalDisplayHierarchy();
	udh.setName(name);
	udh.setupUniversalDisplayHierarchy(context, queryModel, dimensionNames, initialDrillLevel, alignment, active, udhKeyName, requestUdhKey);
	return udh;
};
oFF.QUniversalDisplayHierarchy.prototype.m_active = false;
oFF.QUniversalDisplayHierarchy.prototype.m_alignment = null;
oFF.QUniversalDisplayHierarchy.prototype.m_axis = null;
oFF.QUniversalDisplayHierarchy.prototype.m_customDimensions = false;
oFF.QUniversalDisplayHierarchy.prototype.m_dimensionNames = null;
oFF.QUniversalDisplayHierarchy.prototype.m_initialDrillLevel = 0;
oFF.QUniversalDisplayHierarchy.prototype.m_requestUdhKey = false;
oFF.QUniversalDisplayHierarchy.prototype.m_udhKeyName = null;
oFF.QUniversalDisplayHierarchy.prototype.addDimension = function(dimensionName)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(dimensionName) && !this.m_dimensionNames.contains(dimensionName))
	{
		this.setCustomDimensions(true);
		let oldValue = this.m_dimensionNames;
		this.m_dimensionNames.add(dimensionName);
		this.notifyPropertyChanged(oFF.QUniversalDisplayHierarchyProperties.QY_DIMENSION_NAMES, oldValue, this.m_dimensionNames);
	}
};
oFF.QUniversalDisplayHierarchy.prototype.getAlignment = function()
{
	return this.m_alignment;
};
oFF.QUniversalDisplayHierarchy.prototype.getDimensionNames = function()
{
	return this.m_dimensionNames;
};
oFF.QUniversalDisplayHierarchy.prototype.getDisplayKeyField = function(udhDimension)
{
	let queryModel = udhDimension.getQueryModel();
	let size = this.m_dimensionNames.size();
	for (let i = 0; i < size; i++)
	{
		let dim = queryModel.getDimensionByName(this.m_dimensionNames.get(i));
		if (oFF.notNull(dim))
		{
			let field = this.getUdhField(udhDimension, dim.getFlatDisplayKeyField());
			if (oFF.notNull(field))
			{
				return field;
			}
		}
	}
	return null;
};
oFF.QUniversalDisplayHierarchy.prototype.getHierarchyDedicatedAxis = function()
{
	return this.m_axis;
};
oFF.QUniversalDisplayHierarchy.prototype.getInitialDrillLevel = function()
{
	return this.m_initialDrillLevel;
};
oFF.QUniversalDisplayHierarchy.prototype.getKeyField = function(udhDimension, attributes, key, name)
{
	if (oFF.notNull(attributes))
	{
		let size = attributes.size();
		for (let i = 0; i < size; i++)
		{
			let attribute = attributes.getStructureAt(i);
			if (attribute.getBooleanByKeyExt(key, false))
			{
				let keyField = udhDimension.getFieldByName(attribute.getStringByKey(name));
				if (oFF.notNull(keyField))
				{
					return keyField;
				}
			}
		}
	}
	return null;
};
oFF.QUniversalDisplayHierarchy.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.UNIVERSAL_DISPLAY_HIERARCHY;
};
oFF.QUniversalDisplayHierarchy.prototype.getTextField = function(udhDimension)
{
	let queryModel = udhDimension.getQueryModel();
	let size = this.m_dimensionNames.size();
	for (let i = 0; i < size; i++)
	{
		let dim = queryModel.getDimensionByName(this.m_dimensionNames.get(i));
		if (oFF.notNull(dim))
		{
			let field = this.getUdhField(udhDimension, dim.getFlatTextField());
			if (oFF.notNull(field))
			{
				return field;
			}
		}
	}
	return null;
};
oFF.QUniversalDisplayHierarchy.prototype.getUdhField = function(udhDimension, dimensionField)
{
	if (oFF.notNull(dimensionField))
	{
		let udhFieldName = oFF.XString.replace(dimensionField.getName(), dimensionField.getDimension().getName(), this.getName());
		let field = udhDimension.getFieldByName(udhFieldName);
		if (oFF.notNull(field))
		{
			return field;
		}
	}
	return null;
};
oFF.QUniversalDisplayHierarchy.prototype.getUdhKeyName = function()
{
	return this.m_udhKeyName;
};
oFF.QUniversalDisplayHierarchy.prototype.hasCustomDimensions = function()
{
	return this.m_customDimensions;
};
oFF.QUniversalDisplayHierarchy.prototype.isActive = function()
{
	return this.m_active;
};
oFF.QUniversalDisplayHierarchy.prototype.isDimensionListValid = function()
{
	let axis = this.getHierarchyDedicatedAxis();
	let indexes = oFF.XList.create();
	for (let i = 0; i < this.m_dimensionNames.size(); i++)
	{
		let dimension = this.getQueryModel().getDimensionByName(this.m_dimensionNames.get(i));
		indexes.add(oFF.XInteger.convertToString(axis.getIndex(dimension)));
	}
	indexes.sortByDirection(oFF.XSortDirection.ASCENDING);
	let lastIndex = -1;
	for (let k = 0; k < indexes.size(); k++)
	{
		let index = oFF.XInteger.convertFromString(indexes.get(k));
		if (index === -1 || lastIndex >= 0 && index !== lastIndex + 1)
		{
			return false;
		}
		lastIndex = index;
	}
	return true;
};
oFF.QUniversalDisplayHierarchy.prototype.isRequestUdhKey = function()
{
	return this.m_requestUdhKey;
};
oFF.QUniversalDisplayHierarchy.prototype.mapFieldToOriginalDimension = function(udhField)
{
	if (oFF.notNull(udhField) && oFF.XString.startsWith(udhField.getName(), this.getName()))
	{
		let fieldNameWithoutDimPrefix = oFF.XString.replace(udhField.getName(), this.getName(), "");
		let queryModel = this.getQueryModel();
		let size = this.m_dimensionNames.size();
		for (let i = 0; i < size; i++)
		{
			let dim = queryModel.getDimensionByName(this.m_dimensionNames.get(i));
			let originalFieldName = oFF.XStringUtils.concatenate2(dim.getName(), fieldNameWithoutDimPrefix);
			let field = dim.getFieldByName(originalFieldName);
			if (oFF.notNull(field))
			{
				return field;
			}
		}
	}
	return null;
};
oFF.QUniversalDisplayHierarchy.prototype.releaseObject = function()
{
	oFF.QModelComponent.prototype.releaseObject.call( this );
	this.m_dimensionNames = oFF.XObjectExt.release(this.m_dimensionNames);
	this.m_alignment = null;
	this.m_axis = null;
	this.m_udhKeyName = null;
	this.m_requestUdhKey = false;
};
oFF.QUniversalDisplayHierarchy.prototype.removeDimension = function(dimensionName)
{
	if (this.m_dimensionNames.contains(dimensionName))
	{
		this.setCustomDimensions(true);
		let oldValue = this.m_dimensionNames;
		this.m_dimensionNames.removeElement(dimensionName);
		this.notifyPropertyChanged(oFF.QUniversalDisplayHierarchyProperties.QY_DIMENSION_NAMES, oldValue, this.m_dimensionNames);
	}
};
oFF.QUniversalDisplayHierarchy.prototype.setActive = function(active)
{
	let oldValue = this.m_active;
	this.m_active = active;
	this.notifyPropertyBooleanChanged(oFF.QUniversalDisplayHierarchyProperties.QY_ACTIVE, oldValue, active);
};
oFF.QUniversalDisplayHierarchy.prototype.setAlignment = function(alignment)
{
	if (oFF.isNull(alignment))
	{
		return;
	}
	let oldValue = this.m_alignment;
	this.m_alignment = alignment;
	this.notifyPropertyConstantChanged(oFF.QUniversalDisplayHierarchyProperties.QY_LOWER_LEVEL_NODE_ALIGNMENT, oldValue, alignment);
};
oFF.QUniversalDisplayHierarchy.prototype.setAxis = function(axis)
{
	if (oFF.notNull(axis))
	{
		this.m_axis = axis;
	}
};
oFF.QUniversalDisplayHierarchy.prototype.setCustomDimensions = function(useCustomDimensions)
{
	let oldValue = this.m_customDimensions;
	this.m_customDimensions = useCustomDimensions;
	this.notifyPropertyBooleanChanged(oFF.QUniversalDisplayHierarchyProperties.QY_CUSTOM_DIMENSIONS, oldValue, useCustomDimensions);
};
oFF.QUniversalDisplayHierarchy.prototype.setDimensionNames = function(dimensionNames)
{
	if (!this.m_dimensionNames.isEqualTo(dimensionNames))
	{
		this.setCustomDimensions(true);
		let oldValue = this.m_dimensionNames;
		this.m_dimensionNames.clear();
		this.m_dimensionNames.addAll(dimensionNames);
		this.notifyPropertyChanged(oFF.QUniversalDisplayHierarchyProperties.QY_DIMENSION_NAMES, oldValue, this.m_dimensionNames);
	}
};
oFF.QUniversalDisplayHierarchy.prototype.setInitialDrillLevel = function(initialDrillLevel)
{
	let oldValue = this.m_initialDrillLevel;
	this.m_initialDrillLevel = initialDrillLevel;
	this.notifyPropertyIntegerChanged(oFF.QUniversalDisplayHierarchyProperties.QY_INITIAL_DRILL_LEVEL, oldValue, initialDrillLevel);
};
oFF.QUniversalDisplayHierarchy.prototype.setRequestUdhKey = function(requestUdhKey)
{
	if (this.m_requestUdhKey !== requestUdhKey)
	{
		let oldValue = this.m_requestUdhKey;
		this.m_requestUdhKey = requestUdhKey;
		this.notifyPropertyBooleanChanged(oFF.QUniversalDisplayHierarchyProperties.QY_REQUEST_UDH_KEY, oldValue, requestUdhKey);
	}
};
oFF.QUniversalDisplayHierarchy.prototype.setUdhKeyName = function(udhKeyName)
{
	this.m_udhKeyName = udhKeyName;
};
oFF.QUniversalDisplayHierarchy.prototype.setupUniversalDisplayHierarchy = function(context, queryModel, dimensionNames, initialDrillLevel, alignment, active, udhKeyName, requestUdhKey)
{
	this.setupModelComponent(context, queryModel);
	this.m_dimensionNames = dimensionNames;
	this.m_initialDrillLevel = initialDrillLevel;
	this.m_alignment = alignment;
	this.m_active = active;
	this.m_customDimensions = false;
	this.m_udhKeyName = udhKeyName;
	this.m_requestUdhKey = requestUdhKey;
};
oFF.QUniversalDisplayHierarchy.prototype.toString = function()
{
	let buffer = oFF.XStringBuffer.create();
	buffer.append("{name: ").append(this.getName());
	buffer.append(", active: ").appendBoolean(this.isActive());
	buffer.append(", initialDrillLevel: ").appendInt(this.getInitialDrillLevel());
	buffer.append(", dimensions: ").append(this.getDimensionNames().toString());
	buffer.append("}");
	return buffer.toString();
};
oFF.QUniversalDisplayHierarchy.prototype.updateIncludedDimensions = function()
{
	if (this.getModelCapabilities().supportsUniversalDisplayHierarchiesCustomDimensions() && this.m_customDimensions)
	{
		return;
	}
	let axis = this.getHierarchyDedicatedAxis();
	if (oFF.notNull(axis))
	{
		this.m_dimensionNames.clear();
		let dimensions = axis.getIterator();
		while (dimensions.hasNext())
		{
			let dimensionName = dimensions.next().getName();
			if (!oFF.XString.isEqual(dimensionName, this.getName()))
			{
				this.m_dimensionNames.add(dimensionName);
			}
		}
	}
};

oFF.QMeasureUnitTranslation = function() {};
oFF.QMeasureUnitTranslation.prototype = new oFF.QModelComponent();
oFF.QMeasureUnitTranslation.prototype._ff_c = "QMeasureUnitTranslation";

oFF.QMeasureUnitTranslation.createWithName = function(context, modelComponentBase, name, text)
{
	let newInstance = new oFF.QMeasureUnitTranslation();
	newInstance.setupModelComponentWithName(context, modelComponentBase, name);
	newInstance.setText(text);
	newInstance.m_sourceUnit = oFF.QUnitLookupValue.create(newInstance);
	newInstance.m_targetUnit = oFF.QUnitLookupValue.create(newInstance);
	return newInstance;
};
oFF.QMeasureUnitTranslation.prototype.m_dimensionName = null;
oFF.QMeasureUnitTranslation.prototype.m_errorHandlingMode = null;
oFF.QMeasureUnitTranslation.prototype.m_metadataDefined = false;
oFF.QMeasureUnitTranslation.prototype.m_rateLookup = null;
oFF.QMeasureUnitTranslation.prototype.m_sourceUnit = null;
oFF.QMeasureUnitTranslation.prototype.m_targetUnit = null;
oFF.QMeasureUnitTranslation.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originUnitTranslation = other;
	this.m_sourceUnit = oFF.QUnitLookupValue.create(this);
	if (originUnitTranslation.getSourceUnit() !== null)
	{
		this.m_sourceUnit.copyFrom(originUnitTranslation.getSourceUnit(), flags);
	}
	this.m_targetUnit = oFF.QUnitLookupValue.create(this);
	if (originUnitTranslation.getTargetUnit() !== null)
	{
		this.m_targetUnit.copyFrom(originUnitTranslation.getTargetUnit(), flags);
	}
	this.m_dimensionName = originUnitTranslation.m_dimensionName;
	this.m_rateLookup = originUnitTranslation.m_rateLookup;
	this.m_errorHandlingMode = originUnitTranslation.m_errorHandlingMode;
	this.m_metadataDefined = originUnitTranslation.m_metadataDefined;
};
oFF.QMeasureUnitTranslation.prototype.getDimensionName = function()
{
	return this.m_dimensionName;
};
oFF.QMeasureUnitTranslation.prototype.getErrorHandling = function()
{
	return this.m_errorHandlingMode;
};
oFF.QMeasureUnitTranslation.prototype.getFixedTargetUnitAsString = function()
{
	return oFF.isNull(this.m_targetUnit) ? null : this.m_targetUnit.getFixedValueAsString();
};
oFF.QMeasureUnitTranslation.prototype.getRateLookup = function()
{
	return this.m_rateLookup;
};
oFF.QMeasureUnitTranslation.prototype.getSourceUnit = function()
{
	return this.m_sourceUnit;
};
oFF.QMeasureUnitTranslation.prototype.getTargetUnit = function()
{
	return this.m_targetUnit;
};
oFF.QMeasureUnitTranslation.prototype.getTargetUnitFieldName = function()
{
	return oFF.isNull(this.m_targetUnit) ? null : this.m_targetUnit.getFieldName();
};
oFF.QMeasureUnitTranslation.prototype.getTargetUnitVariableName = function()
{
	return oFF.isNull(this.m_targetUnit) ? null : this.m_targetUnit.getVariableName();
};
oFF.QMeasureUnitTranslation.prototype.isMetadataDefined = function()
{
	return this.m_metadataDefined;
};
oFF.QMeasureUnitTranslation.prototype.isMissingErrorHandling = function()
{
	return oFF.isNull(this.m_errorHandlingMode);
};
oFF.QMeasureUnitTranslation.prototype.isMissingRateLookup = function()
{
	return oFF.isNull(this.m_rateLookup);
};
oFF.QMeasureUnitTranslation.prototype.isMissingTargetUnit = function()
{
	return oFF.QUnitLookupValue.isEmpty(this.m_targetUnit);
};
oFF.QMeasureUnitTranslation.prototype.isParametersComplete = function()
{
	return !this.isMissingTargetUnit() && !this.isMissingErrorHandling() && !this.isMissingRateLookup();
};
oFF.QMeasureUnitTranslation.prototype.isTargetUnitFieldBased = function()
{
	return oFF.notNull(this.m_targetUnit) && this.m_targetUnit.isFieldBased();
};
oFF.QMeasureUnitTranslation.prototype.isTargetUnitFixed = function()
{
	return oFF.notNull(this.m_targetUnit) && this.m_targetUnit.isFixed();
};
oFF.QMeasureUnitTranslation.prototype.isTargetUnitVariableBased = function()
{
	return oFF.notNull(this.m_targetUnit) && this.m_targetUnit.isVariableBased();
};
oFF.QMeasureUnitTranslation.prototype.releaseObject = function()
{
	this.m_sourceUnit = oFF.XObjectExt.release(this.m_sourceUnit);
	this.m_targetUnit = oFF.XObjectExt.release(this.m_targetUnit);
	this.m_dimensionName = null;
	this.m_rateLookup = null;
	this.m_errorHandlingMode = null;
};
oFF.QMeasureUnitTranslation.prototype.setDimensionName = function(dimensionName)
{
	if (!oFF.XString.isEqual(this.m_dimensionName, dimensionName))
	{
		this.m_dimensionName = dimensionName;
		this.m_metadataDefined = false;
		this.notifyNodeChanged();
	}
};
oFF.QMeasureUnitTranslation.prototype.setErrorHandling = function(errorHandlingMode)
{
	if (this.m_errorHandlingMode !== errorHandlingMode)
	{
		this.m_errorHandlingMode = errorHandlingMode;
		this.m_metadataDefined = false;
		this.notifyNodeChanged();
	}
};
oFF.QMeasureUnitTranslation.prototype.setFixedTargetUnitByString = function(unitName)
{
	if (oFF.notNull(unitName) && !oFF.XString.isEqual(unitName, this.getFixedTargetUnitAsString()))
	{
		if (oFF.notNull(this.m_targetUnit))
		{
			this.m_targetUnit.setFixedValue(oFF.XStringValue.create(unitName));
		}
		else
		{
			this.m_targetUnit = oFF.QUnitLookupValue.createFixedByValue(this, oFF.XStringValue.create(unitName));
		}
	}
	this.notifyNodeChanged();
};
oFF.QMeasureUnitTranslation.prototype.setMetadataDefined = function(metadataDefined)
{
	this.m_metadataDefined = metadataDefined;
};
oFF.QMeasureUnitTranslation.prototype.setRateLookup = function(rateLookup)
{
	if (this.m_rateLookup !== rateLookup)
	{
		this.m_rateLookup = rateLookup;
		this.m_metadataDefined = false;
		this.notifyNodeChanged();
	}
};
oFF.QMeasureUnitTranslation.prototype.setTargetUnitByFieldName = function(unitFieldName)
{
	this.m_targetUnit = oFF.QUnitLookupValue.createByFieldName(this, unitFieldName);
	this.notifyNodeChanged();
};
oFF.QMeasureUnitTranslation.prototype.setTargetUnitByVariableName = function(variableName)
{
	this.m_targetUnit = oFF.QUnitLookupValue.createByVariableName(this, variableName);
	this.notifyNodeChanged();
};

oFF.QUnitLookupValue = function() {};
oFF.QUnitLookupValue.prototype = new oFF.QModelComponent();
oFF.QUnitLookupValue.prototype._ff_c = "QUnitLookupValue";

oFF.QUnitLookupValue.create = function(parent)
{
	return oFF.QUnitLookupValue.createNewUnitLookupValueInstance(parent);
};
oFF.QUnitLookupValue.createByFieldName = function(parent, fieldName)
{
	let newInstance = oFF.QUnitLookupValue.createNewUnitLookupValueInstance(parent);
	newInstance.setFieldName(fieldName);
	return newInstance;
};
oFF.QUnitLookupValue.createByVariableName = function(parent, variableName)
{
	let newInstance = oFF.QUnitLookupValue.createNewUnitLookupValueInstance(parent);
	newInstance.setVariableName(variableName);
	return newInstance;
};
oFF.QUnitLookupValue.createFixedByValue = function(parent, value)
{
	let newInstance = oFF.QUnitLookupValue.createNewUnitLookupValueInstance(parent);
	newInstance.setFixedValue(value);
	return newInstance;
};
oFF.QUnitLookupValue.createNewUnitLookupValueInstance = function(parent)
{
	let newInstance = new oFF.QUnitLookupValue();
	if (oFF.notNull(parent))
	{
		newInstance.setupModelComponent(parent.getContext(), parent);
	}
	return newInstance;
};
oFF.QUnitLookupValue.isEmpty = function(lookupValue)
{
	return oFF.isNull(lookupValue) || lookupValue.getFixedValue() === null && oFF.XStringUtils.isNullOrEmpty(lookupValue.getFieldName()) && oFF.XStringUtils.isNullOrEmpty(lookupValue.getVariableName());
};
oFF.QUnitLookupValue.prototype.m_fieldName = null;
oFF.QUnitLookupValue.prototype.m_fixedValue = null;
oFF.QUnitLookupValue.prototype.m_variableName = null;
oFF.QUnitLookupValue.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originValue = other;
	this.m_fixedValue = oFF.XObjectExt.cloneExtIfNotNull(originValue.m_fixedValue, flags);
	this.m_fieldName = originValue.m_fieldName;
	this.m_variableName = originValue.m_variableName;
};
oFF.QUnitLookupValue.prototype.getField = function()
{
	return this.getQueryModel().getFieldByName(this.m_fieldName);
};
oFF.QUnitLookupValue.prototype.getFieldName = function()
{
	return this.m_fieldName;
};
oFF.QUnitLookupValue.prototype.getFixedValue = function()
{
	return this.m_fixedValue;
};
oFF.QUnitLookupValue.prototype.getFixedValueAsString = function()
{
	return oFF.isNull(this.m_fixedValue) ? null : this.m_fixedValue.getStringRepresentation();
};
oFF.QUnitLookupValue.prototype.getVariable = function()
{
	return this.getQueryModel().getVariable(this.m_variableName);
};
oFF.QUnitLookupValue.prototype.getVariableName = function()
{
	return this.m_variableName;
};
oFF.QUnitLookupValue.prototype.isDefined = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.m_variableName) || oFF.XStringUtils.isNotNullAndNotEmpty(this.m_fieldName) || oFF.notNull(this.m_fixedValue);
};
oFF.QUnitLookupValue.prototype.isFieldBased = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.m_fieldName);
};
oFF.QUnitLookupValue.prototype.isFixed = function()
{
	return oFF.notNull(this.m_fixedValue);
};
oFF.QUnitLookupValue.prototype.isVariableBased = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.m_variableName);
};
oFF.QUnitLookupValue.prototype.releaseObject = function()
{
	this.m_fixedValue = oFF.XObjectExt.release(this.m_fixedValue);
	this.m_fieldName = null;
	this.m_variableName = null;
};
oFF.QUnitLookupValue.prototype.reset = function()
{
	this.m_fixedValue = null;
	this.m_fieldName = null;
	this.m_variableName = null;
};
oFF.QUnitLookupValue.prototype.setExplicitlyDefined = function()
{
	let parent = this.getParent();
	if (oFF.notNull(parent) && parent.getOlapComponentType() === oFF.OlapComponentType.UNIT_TRANSLATION_ITEM)
	{
		parent.setMetadataDefined(false);
	}
};
oFF.QUnitLookupValue.prototype.setField = function(field)
{
	this.setFieldName(oFF.isNull(field) ? null : field.getName());
};
oFF.QUnitLookupValue.prototype.setFieldName = function(fieldName)
{
	this.reset();
	this.m_fieldName = fieldName;
	this.setExplicitlyDefined();
	this.notifyNodeChanged();
};
oFF.QUnitLookupValue.prototype.setFixedValue = function(value)
{
	this.reset();
	this.m_fixedValue = value;
	this.setExplicitlyDefined();
	this.notifyNodeChanged();
};
oFF.QUnitLookupValue.prototype.setVariable = function(variable)
{
	this.setVariableName(oFF.isNull(variable) ? null : variable.getName());
};
oFF.QUnitLookupValue.prototype.setVariableName = function(variableName)
{
	this.reset();
	this.m_variableName = variableName;
	this.setExplicitlyDefined();
	this.notifyNodeChanged();
};

oFF.QUnitTranslationManager = function() {};
oFF.QUnitTranslationManager.prototype = new oFF.QModelComponent();
oFF.QUnitTranslationManager.prototype._ff_c = "QUnitTranslationManager";

oFF.QUnitTranslationManager.create = function(queryModel)
{
	let newInstance = new oFF.QUnitTranslationManager();
	newInstance.initializeUnitTranslationList();
	newInstance.setupUnitTranslationManager(queryModel);
	return newInstance;
};
oFF.QUnitTranslationManager.prototype.m_measureUnitTranslations = null;
oFF.QUnitTranslationManager.prototype.addNewMeasureUnitTranslation = function(name, description)
{
	return this.addNewMeasureUnitTranslationBase(name, description);
};
oFF.QUnitTranslationManager.prototype.addNewMeasureUnitTranslationBase = function(name, description)
{
	let unitTranslation = oFF.QMeasureUnitTranslation.createWithName(this.getContext(), this, name, description);
	this.m_measureUnitTranslations.add(unitTranslation);
	return unitTranslation;
};
oFF.QUnitTranslationManager.prototype.clearMeasureUnitTranslations = function()
{
	this.m_measureUnitTranslations.clear();
};
oFF.QUnitTranslationManager.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let i;
	let originUnitTranslationManager = other;
	if (oFF.notNull(originUnitTranslationManager.m_measureUnitTranslations))
	{
		if (oFF.isNull(this.m_measureUnitTranslations))
		{
			this.m_measureUnitTranslations = oFF.XListOfNameObject.create();
		}
		this.m_measureUnitTranslations.clear();
		let keys = originUnitTranslationManager.m_measureUnitTranslations.getKeysAsReadOnlyList();
		for (i = 0; i < keys.size(); i++)
		{
			let key = keys.get(i);
			let originUnitTranslation = originUnitTranslationManager.m_measureUnitTranslations.getByKey(key);
			this.addNewMeasureUnitTranslationBase(key, originUnitTranslation.getText()).copyFrom(originUnitTranslation, flags);
		}
	}
};
oFF.QUnitTranslationManager.prototype.getMeasureUnitTranslation = function(name)
{
	return oFF.isNull(name) ? null : this.m_measureUnitTranslations.getByKey(name);
};
oFF.QUnitTranslationManager.prototype.getMeasureUnitTranslations = function()
{
	return oFF.isNull(this.m_measureUnitTranslations) ? null : this.m_measureUnitTranslations.getValuesAsReadOnlyList();
};
oFF.QUnitTranslationManager.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.UNIT_TRANSLATION_MANAGER;
};
oFF.QUnitTranslationManager.prototype.initializeUnitTranslationList = function()
{
	this.m_measureUnitTranslations = oFF.XListOfNameObject.create();
};
oFF.QUnitTranslationManager.prototype.releaseObject = function()
{
	this.m_measureUnitTranslations = oFF.XObjectExt.release(this.m_measureUnitTranslations);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QUnitTranslationManager.prototype.removeMeasureUnitTranslation = function(unitTranslation)
{
	this.m_measureUnitTranslations.removeElement(unitTranslation);
};
oFF.QUnitTranslationManager.prototype.removeMeasureUnitTranslationByName = function(unitTranslationName)
{
	this.m_measureUnitTranslations.removeElement(this.m_measureUnitTranslations.getByKey(unitTranslationName));
};
oFF.QUnitTranslationManager.prototype.setupUnitTranslationManager = function(queryModel)
{
	this.setupModelComponent(queryModel, queryModel);
};

oFF.QValueHelpVarDimMember = function() {};
oFF.QValueHelpVarDimMember.prototype = new oFF.QModelComponent();
oFF.QValueHelpVarDimMember.prototype._ff_c = "QValueHelpVarDimMember";

oFF.QValueHelpVarDimMember.create = function(context, dimMemberVariable)
{
	let newObj = new oFF.QValueHelpVarDimMember();
	newObj.setupValueHelp(context, dimMemberVariable);
	return newObj;
};
oFF.QValueHelpVarDimMember.prototype.m_dimMemberVariable = null;
oFF.QValueHelpVarDimMember.prototype.m_maxRows = 0;
oFF.QValueHelpVarDimMember.prototype.m_offsetRows = 0;
oFF.QValueHelpVarDimMember.prototype.m_rootNode = null;
oFF.QValueHelpVarDimMember.prototype.m_valueHelpDimension = null;
oFF.QValueHelpVarDimMember.prototype.m_valueHelpManager = null;
oFF.QValueHelpVarDimMember.prototype.getDimension = function()
{
	return this.m_dimMemberVariable.getDimension();
};
oFF.QValueHelpVarDimMember.prototype.getMaxRows = function()
{
	return this.m_maxRows;
};
oFF.QValueHelpVarDimMember.prototype.getOffsetRows = function()
{
	return this.m_offsetRows;
};
oFF.QValueHelpVarDimMember.prototype.getQueryManager = function()
{
	return this.m_valueHelpManager;
};
oFF.QValueHelpVarDimMember.prototype.getRootNode = function()
{
	return this.m_rootNode;
};
oFF.QValueHelpVarDimMember.prototype.getValueHelpDimension = function()
{
	return this.m_valueHelpDimension;
};
oFF.QValueHelpVarDimMember.prototype.getValueHelpMembers = function()
{
	return null;
};
oFF.QValueHelpVarDimMember.prototype.getVariable = function()
{
	return this.m_dimMemberVariable;
};
oFF.QValueHelpVarDimMember.prototype.hasMoreRowRecordsAvailable = function()
{
	return false;
};
oFF.QValueHelpVarDimMember.prototype.prepareQueryLayout = function(instanceId)
{
	let originDim = this.m_dimMemberVariable.getDimension();
	let dimName = originDim.getName();
	let valueHelpModel = this.m_valueHelpManager.getQueryModel();
	let sys = this.m_valueHelpManager.getSystemDescription();
	let systemType = sys.getSystemType();
	if (systemType.isTypeOf(oFF.SystemType.BW))
	{
		let dataSource = valueHelpModel.getDataSourceBase();
		dataSource.setInstanceId(instanceId);
		if (dataSource.getType() === oFF.MetaObjectType.CDS_PROJECTION_VIEW)
		{
			dataSource.setType(oFF.MetaObjectType.CDS_PROJECTION_VIEW_VALUEHELP);
		}
		else
		{
			dataSource.setType(oFF.MetaObjectType.QUERY_VALUEHELP);
		}
		let variableProcessor = this.m_valueHelpManager.getVariableProcessor();
		variableProcessor.setVariableProcessorState(oFF.VariableProcessorState.VALUE_HELP);
	}
	let sortingManager = valueHelpModel.getSortingManager();
	let sortingOperations = sortingManager.getSortingOperations();
	sortingOperations.clear();
	let cmds = valueHelpModel.getConvenienceCommands();
	cmds.clearAxis(oFF.AxisType.ROWS);
	cmds.clearAxis(oFF.AxisType.COLUMNS);
	this.m_valueHelpDimension = valueHelpModel.getDimensionByName(dimName);
	cmds.moveDimensionToAxis(dimName, oFF.AxisType.ROWS);
	if (this.m_valueHelpDimension.supportsHierarchy())
	{
		let hierarchyName = this.m_dimMemberVariable.getHierarchyName();
		let hierarchyVersion = this.m_dimMemberVariable.getHierarchyVersion();
		if (oFF.isNull(hierarchyName))
		{
			this.m_valueHelpDimension.setHierarchyActive(false);
		}
		else
		{
			this.m_valueHelpDimension.activateHierarchy(hierarchyName, hierarchyVersion, null);
		}
	}
	if (!this.m_valueHelpDimension.isHierarchyActive())
	{
		let resultSetSorting = this.m_valueHelpDimension.getResultSetSorting();
		resultSetSorting.setSortByKey();
		resultSetSorting.setDirection(oFF.XSortDirection.ASCENDING);
	}
	let selectorReadModes = this.m_valueHelpDimension.getSupportedReadModes(oFF.QContextType.SELECTOR).getIterator();
	let readModeManagerBase = this.m_valueHelpDimension.getReadModeManagerBase();
	readModeManagerBase.clearReadModes(oFF.QContextType.RESULT_SET);
	let defaultValueBest = null;
	let defaultValueFallback = null;
	while (selectorReadModes.hasNext())
	{
		defaultValueFallback = selectorReadModes.next();
		if (defaultValueFallback.isTypeOf(oFF.QMemberReadMode.BOOKED))
		{
			if (oFF.isNull(defaultValueBest))
			{
				defaultValueBest = defaultValueFallback;
			}
			else if (defaultValueBest.getOrder() < defaultValueFallback.getOrder())
			{
				defaultValueBest = defaultValueFallback;
			}
		}
		readModeManagerBase.addSupportedReadMode(oFF.QContextType.RESULT_SET, defaultValueFallback);
	}
	oFF.XObjectExt.release(selectorReadModes);
	let readMode = this.m_valueHelpDimension.getReadMode(oFF.QContextType.SELECTOR);
	if (oFF.isNull(readMode))
	{
		if (oFF.notNull(defaultValueBest))
		{
			readMode = defaultValueBest;
		}
		else
		{
			readMode = defaultValueFallback;
		}
	}
	this.m_valueHelpDimension.setReadMode(oFF.QContextType.RESULT_SET, readMode);
	let filter = valueHelpModel.getFilterBase();
	if (filter.isValueHelpFilterInitialized())
	{
		let selectorContainer = filter.getValuehelpFilter();
		filter.setDynamicFilter(selectorContainer);
	}
	if (systemType.isTypeOf(oFF.SystemType.BW))
	{
		let variableManagerBase = valueHelpModel.getVariableManagerBase();
		let excludeName = this.m_dimMemberVariable.getName();
		let variablesCopy = oFF.XCollectionUtils.createListCopy(variableManagerBase.getVariables());
		let iterator = variablesCopy.getIterator();
		while (iterator.hasNext())
		{
			let variable = iterator.next();
			let name = variable.getName();
			if (!oFF.XString.isEqual(excludeName, name))
			{
				variableManagerBase.removeVariable(name);
			}
		}
	}
	this.m_valueHelpManager.applyValueHelpCapabilities();
};
oFF.QValueHelpVarDimMember.prototype.process = oFF.noSupport;
oFF.QValueHelpVarDimMember.prototype.releaseObject = function()
{
	this.m_dimMemberVariable = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QValueHelpVarDimMember.prototype.setMaxRows = function(max)
{
	this.m_maxRows = max;
	return null;
};
oFF.QValueHelpVarDimMember.prototype.setOffsetRows = function(offset)
{
	this.m_offsetRows = offset;
	return null;
};
oFF.QValueHelpVarDimMember.prototype.setupValueHelp = function(context, dimMemberVariable)
{
	oFF.QModelComponent.prototype.setupModelComponent.call( this , context, dimMemberVariable);
	this.m_dimMemberVariable = dimMemberVariable;
	let queryModel = dimMemberVariable.getDimension().getQueryModel();
	if (oFF.notNull(queryModel))
	{
		let queryManager = queryModel.getQueryManager();
		let instanceId = queryModel.getDataSource().getInstanceId();
		this.m_valueHelpManager = queryManager.cloneQueryManager();
		this.prepareQueryLayout(instanceId);
	}
	this.m_rootNode = oFF.QFactory.createValueHelpNode(this, null, null, 0, -1);
};

oFF.QVariableModelComponent = function() {};
oFF.QVariableModelComponent.prototype = new oFF.QModelComponent();
oFF.QVariableModelComponent.prototype._ff_c = "QVariableModelComponent";


oFF.QDimensionMemberSelection = function() {};
oFF.QDimensionMemberSelection.prototype = new oFF.QModelComponent();
oFF.QDimensionMemberSelection.prototype._ff_c = "QDimensionMemberSelection";

oFF.QDimensionMemberSelection.createQDimensionMemberSelection = function(context, dimension, parent)
{
	let instance = new oFF.QDimensionMemberSelection();
	instance.setupInternal(context, dimension, parent);
	return instance;
};
oFF.QDimensionMemberSelection.prototype.m_dimension = null;
oFF.QDimensionMemberSelection.prototype.m_dimensionMembers = null;
oFF.QDimensionMemberSelection.prototype.addMember = function(member)
{
	this.m_dimensionMembers.add(member);
};
oFF.QDimensionMemberSelection.prototype.clearMembers = function()
{
	this.m_dimensionMembers.clear();
};
oFF.QDimensionMemberSelection.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let origin = other;
	let originDimension = origin.getDimension();
	if (oFF.notNull(originDimension))
	{
		this.m_dimension = this.getQueryModel().getDimensionByName(originDimension.getName());
	}
	this.m_dimensionMembers.clear();
	let originDimensionMembers = origin.getMembers();
	if (oFF.XCollectionUtils.hasElements(originDimensionMembers))
	{
		for (let i = 0; i < originDimensionMembers.size(); i++)
		{
			this.m_dimensionMembers.add(this.m_dimension.getDimensionMember(originDimensionMembers.get(i).getName()));
		}
	}
};
oFF.QDimensionMemberSelection.prototype.getDimension = function()
{
	return this.m_dimension;
};
oFF.QDimensionMemberSelection.prototype.getMembers = function()
{
	return this.m_dimensionMembers;
};
oFF.QDimensionMemberSelection.prototype.getName = function()
{
	if (oFF.notNull(this.m_dimension))
	{
		return this.m_dimension.getName();
	}
	return null;
};
oFF.QDimensionMemberSelection.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.VISUALIZATION_AXIS_MEMBER_SELECTION;
};
oFF.QDimensionMemberSelection.prototype.getText = function()
{
	if (oFF.notNull(this.m_dimension))
	{
		return this.m_dimension.getText();
	}
	return null;
};
oFF.QDimensionMemberSelection.prototype.insertMember = function(index, member)
{
	this.m_dimensionMembers.insert(index, member);
};
oFF.QDimensionMemberSelection.prototype.removeMember = function(member)
{
	this.m_dimensionMembers.removeElement(member);
};
oFF.QDimensionMemberSelection.prototype.removeMemberAt = function(index)
{
	this.m_dimensionMembers.removeAt(index);
};
oFF.QDimensionMemberSelection.prototype.setMember = function(index, member)
{
	this.m_dimensionMembers.set(index, member);
};
oFF.QDimensionMemberSelection.prototype.setupInternal = function(context, dimension, parent)
{
	this.setupModelComponent(context, parent);
	this.m_dimension = dimension;
	this.m_dimensionMembers = oFF.XList.create();
};

oFF.QDimensionVisualizationSelection = function() {};
oFF.QDimensionVisualizationSelection.prototype = new oFF.QModelComponent();
oFF.QDimensionVisualizationSelection.prototype._ff_c = "QDimensionVisualizationSelection";

oFF.QDimensionVisualizationSelection.createQDimensionSelection = function(context, parent, fallbackDimensionNameProvider, measureFallback)
{
	let instance = new oFF.QDimensionVisualizationSelection();
	instance.setupInternal(context, parent, fallbackDimensionNameProvider, measureFallback);
	return instance;
};
oFF.QDimensionVisualizationSelection.prototype.m_colorSchemeKey = null;
oFF.QDimensionVisualizationSelection.prototype.m_dimensionNames = null;
oFF.QDimensionVisualizationSelection.prototype.m_fallbackDimensionNameProvider = null;
oFF.QDimensionVisualizationSelection.prototype.m_measureFallback = null;
oFF.QDimensionVisualizationSelection.prototype.m_shouldIncludeKeyFigureDimension = null;
oFF.QDimensionVisualizationSelection.prototype.addDimension = function(dimension)
{
	if (oFF.notNull(dimension))
	{
		this.ensureDimensionNames();
		this.m_dimensionNames.add(dimension.getName());
		this.invalidateVisualizationContainer();
	}
};
oFF.QDimensionVisualizationSelection.prototype.addDimensionName = function(dimensionName)
{
	this.ensureDimensionNames();
	this.m_dimensionNames.add(dimensionName);
	this.invalidateVisualizationContainer();
};
oFF.QDimensionVisualizationSelection.prototype.clearDimensions = function()
{
	if (oFF.notNull(this.m_dimensionNames))
	{
		this.m_dimensionNames.clear();
		this.invalidateVisualizationContainer();
	}
};
oFF.QDimensionVisualizationSelection.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let orig = other;
	this.m_colorSchemeKey = orig.m_colorSchemeKey;
	this.m_shouldIncludeKeyFigureDimension = orig.shouldIncludeKeyFigureDimensionInternal();
	if (oFF.isNull(orig.m_dimensionNames))
	{
		this.m_dimensionNames = null;
	}
	else
	{
		if (oFF.notNull(this.m_dimensionNames))
		{
			this.m_dimensionNames.clear();
		}
		else
		{
			this.m_dimensionNames = oFF.XList.create();
		}
		this.m_dimensionNames.addAll(orig.getDimensionNamesInternal());
	}
};
oFF.QDimensionVisualizationSelection.prototype.createEmptyDimensionList = function()
{
	this.m_dimensionNames = oFF.XList.create();
	this.invalidateVisualizationContainer();
};
oFF.QDimensionVisualizationSelection.prototype.ensureDimensionNames = function()
{
	if (oFF.isNull(this.m_dimensionNames))
	{
		this.m_dimensionNames = oFF.XList.create();
	}
};
oFF.QDimensionVisualizationSelection.prototype.getColorSchemeKey = function()
{
	return this.m_colorSchemeKey;
};
oFF.QDimensionVisualizationSelection.prototype.getDimensionNames = function()
{
	let result;
	if (oFF.notNull(this.m_dimensionNames) || oFF.isNull(this.m_fallbackDimensionNameProvider))
	{
		result = this.m_dimensionNames;
	}
	else
	{
		result = this.m_fallbackDimensionNameProvider();
	}
	if (oFF.isNull(result))
	{
		result = oFF.XList.create();
	}
	return result;
};
oFF.QDimensionVisualizationSelection.prototype.getDimensionNamesInternal = function()
{
	return this.m_dimensionNames;
};
oFF.QDimensionVisualizationSelection.prototype.getDimensions = function()
{
	let queryModel = this.getQueryModel();
	let effectiveDimNames = this.getDimensionNames();
	let dimensions = oFF.XList.create();
	for (let i = 0; i < effectiveDimNames.size(); i++)
	{
		dimensions.add(queryModel.getDimensionByName(effectiveDimNames.get(i)));
	}
	return dimensions;
};
oFF.QDimensionVisualizationSelection.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.VISUALIZATION_AXIS_DIMENSION_SELECTION;
};
oFF.QDimensionVisualizationSelection.prototype.hasDimensionsEffectively = function()
{
	return oFF.XCollectionUtils.hasElements(this.getDimensionNames());
};
oFF.QDimensionVisualizationSelection.prototype.inferFromDrill = function(enforce)
{
	if ((oFF.isNull(this.m_dimensionNames) || enforce) && oFF.notNull(this.m_fallbackDimensionNameProvider))
	{
		this.m_dimensionNames = oFF.XList.create();
		this.m_dimensionNames.addAll(this.m_fallbackDimensionNameProvider());
		this.invalidateVisualizationContainer();
	}
};
oFF.QDimensionVisualizationSelection.prototype.insertDimension = function(index, dimension)
{
	if (oFF.notNull(dimension))
	{
		this.ensureDimensionNames();
		this.m_dimensionNames.insert(index, dimension.getName());
		this.invalidateVisualizationContainer();
	}
};
oFF.QDimensionVisualizationSelection.prototype.insertDimensionName = function(index, dimensionName)
{
	this.ensureDimensionNames();
	this.m_dimensionNames.insert(index, dimensionName);
	this.invalidateVisualizationContainer();
};
oFF.QDimensionVisualizationSelection.prototype.invalidateVisualizationContainer = function()
{
	let parent = this.getParent();
	if (oFF.notNull(parent) && parent.getOlapComponentType() === oFF.OlapComponentType.VISUALIZATION_CHART_SETTING)
	{
		parent.getVisualizationDefinition().invalidateVisualizationContainer();
	}
};
oFF.QDimensionVisualizationSelection.prototype.isEnforceEmptyDimensionsList = function()
{
	return oFF.isNull(this.m_dimensionNames);
};
oFF.QDimensionVisualizationSelection.prototype.removeDimension = function(dimension)
{
	if (oFF.notNull(dimension) && oFF.notNull(this.m_dimensionNames))
	{
		this.m_dimensionNames.removeElement(dimension.getName());
		this.invalidateVisualizationContainer();
	}
};
oFF.QDimensionVisualizationSelection.prototype.removeDimensionAt = function(index)
{
	if (oFF.notNull(this.m_dimensionNames))
	{
		this.m_dimensionNames.removeAt(index);
		this.invalidateVisualizationContainer();
	}
};
oFF.QDimensionVisualizationSelection.prototype.removeDimensionName = function(dimensionName)
{
	if (oFF.notNull(this.m_dimensionNames))
	{
		this.m_dimensionNames.removeElement(dimensionName);
		this.invalidateVisualizationContainer();
	}
};
oFF.QDimensionVisualizationSelection.prototype.resetDimensionList = function()
{
	this.m_dimensionNames = null;
	this.invalidateVisualizationContainer();
};
oFF.QDimensionVisualizationSelection.prototype.resetShouldIncludeKeyFigureDimension = function()
{
	this.m_shouldIncludeKeyFigureDimension = null;
};
oFF.QDimensionVisualizationSelection.prototype.setColorSchemeKey = function(colorSchemeKey)
{
	this.m_colorSchemeKey = colorSchemeKey;
	this.invalidateVisualizationContainer();
};
oFF.QDimensionVisualizationSelection.prototype.setDimension = function(index, dimension)
{
	if (oFF.notNull(dimension))
	{
		this.ensureDimensionNames();
		this.m_dimensionNames.set(index, dimension.getName());
	}
};
oFF.QDimensionVisualizationSelection.prototype.setDimensionName = function(index, dimensionName)
{
	this.ensureDimensionNames();
	this.m_dimensionNames.set(index, dimensionName);
	this.invalidateVisualizationContainer();
};
oFF.QDimensionVisualizationSelection.prototype.setShouldIncludeKeyFigureDimension = function(shouldIncludeKeyFigureDimension)
{
	this.m_shouldIncludeKeyFigureDimension = oFF.TriStateBool.lookup(shouldIncludeKeyFigureDimension);
};
oFF.QDimensionVisualizationSelection.prototype.setupInternal = function(context, parent, fallbackDimensionNameProvider, measureFallback)
{
	this.setupModelComponent(context, parent);
	this.m_fallbackDimensionNameProvider = fallbackDimensionNameProvider;
	this.m_measureFallback = measureFallback;
};
oFF.QDimensionVisualizationSelection.prototype.shouldIncludeKeyFigureDimension = function()
{
	return this.m_shouldIncludeKeyFigureDimension === oFF.TriStateBool._TRUE || this.m_shouldIncludeKeyFigureDimension !== oFF.TriStateBool._FALSE && oFF.notNull(this.m_measureFallback) && this.m_measureFallback().getBoolean();
};
oFF.QDimensionVisualizationSelection.prototype.shouldIncludeKeyFigureDimensionInternal = function()
{
	return this.m_shouldIncludeKeyFigureDimension;
};

oFF.QTableViewportPageSettings = function() {};
oFF.QTableViewportPageSettings.prototype = new oFF.QModelComponent();
oFF.QTableViewportPageSettings.prototype._ff_c = "QTableViewportPageSettings";

oFF.QTableViewportPageSettings.create = function(tableDefinition)
{
	let instance = new oFF.QTableViewportPageSettings();
	instance.setupModelComponent(tableDefinition, tableDefinition);
	instance.m_rowPageBreakIsStylingBoundary = true;
	instance.m_columnPageBreakIsStylingBoundary = true;
	return instance;
};
oFF.QTableViewportPageSettings.prototype.m_columnPage = 0;
oFF.QTableViewportPageSettings.prototype.m_columnPageBreakIsStylingBoundary = false;
oFF.QTableViewportPageSettings.prototype.m_endColumn = 0;
oFF.QTableViewportPageSettings.prototype.m_endRow = 0;
oFF.QTableViewportPageSettings.prototype.m_maxColumns = 0;
oFF.QTableViewportPageSettings.prototype.m_maxHeight = 0;
oFF.QTableViewportPageSettings.prototype.m_maxRecommendedColumns = 0;
oFF.QTableViewportPageSettings.prototype.m_maxRecommendedHeight = 0;
oFF.QTableViewportPageSettings.prototype.m_maxRecommendedRows = 0;
oFF.QTableViewportPageSettings.prototype.m_maxRecommendedWidth = 0;
oFF.QTableViewportPageSettings.prototype.m_maxRows = 0;
oFF.QTableViewportPageSettings.prototype.m_maxWidth = 0;
oFF.QTableViewportPageSettings.prototype.m_rowPage = 0;
oFF.QTableViewportPageSettings.prototype.m_rowPageBreakIsStylingBoundary = false;
oFF.QTableViewportPageSettings.prototype.m_startColumn = 0;
oFF.QTableViewportPageSettings.prototype.m_startRow = 0;
oFF.QTableViewportPageSettings.prototype.columnPagingActive = function()
{
	return this.strictColumnPagingActive() || this.m_endColumn > 0;
};
oFF.QTableViewportPageSettings.prototype.copyFromInternal = function(other, flags)
{
	let orig = other;
	this.m_maxColumns = orig.m_maxColumns;
	this.m_maxRows = orig.m_maxRows;
	this.m_maxHeight = orig.m_maxHeight;
	this.m_maxWidth = orig.m_maxWidth;
	this.m_maxRecommendedColumns = orig.m_maxRecommendedColumns;
	this.m_maxRecommendedRows = orig.m_maxRecommendedRows;
	this.m_maxRecommendedHeight = orig.m_maxRecommendedHeight;
	this.m_maxRecommendedWidth = orig.m_maxRecommendedWidth;
	this.m_columnPage = orig.m_columnPage;
	this.m_rowPage = orig.m_rowPage;
	this.m_startColumn = orig.m_startColumn;
	this.m_endColumn = orig.m_endColumn;
	this.m_startRow = orig.m_startRow;
	this.m_endRow = orig.m_endRow;
	this.m_rowPageBreakIsStylingBoundary = orig.m_rowPageBreakIsStylingBoundary;
	this.m_columnPageBreakIsStylingBoundary = orig.m_columnPageBreakIsStylingBoundary;
};
oFF.QTableViewportPageSettings.prototype.getColumnPage = function()
{
	return this.strictColumnPagingActive() ? this.m_columnPage : -1;
};
oFF.QTableViewportPageSettings.prototype.getEndColumn = function()
{
	return this.m_endColumn;
};
oFF.QTableViewportPageSettings.prototype.getEndRow = function()
{
	return this.m_endRow;
};
oFF.QTableViewportPageSettings.prototype.getEstimatedColumnPages = function()
{
	return this.getIntegerValue((sat) => {
		return oFF.XIntegerValue.create(sat.getEstimatedColumnPageCount());
	});
};
oFF.QTableViewportPageSettings.prototype.getEstimatedRowPages = function()
{
	return this.getIntegerValue((sat) => {
		return oFF.XIntegerValue.create(sat.getEstimatedRowPageCount());
	});
};
oFF.QTableViewportPageSettings.prototype.getFilledColumnPages = function()
{
	return this.getIntegerValue((sat) => {
		return oFF.XIntegerValue.create(sat.getFilledColumnPageCount());
	});
};
oFF.QTableViewportPageSettings.prototype.getFilledRowPages = function()
{
	return this.getIntegerValue((sat) => {
		return oFF.XIntegerValue.create(sat.getFilledRowPageCount());
	});
};
oFF.QTableViewportPageSettings.prototype.getIntegerValue = function(integerSupplier)
{
	let tableDefinition = this.getParent();
	let tableContainer = oFF.isNull(tableDefinition) ? null : tableDefinition.getAvailableTableContainer();
	let analyticTable = oFF.isNull(tableContainer) ? null : tableContainer.getVisualizationData();
	return oFF.isNull(analyticTable) ? 0 : integerSupplier(analyticTable).getInteger();
};
oFF.QTableViewportPageSettings.prototype.getMaxColumns = function()
{
	return this.m_maxColumns;
};
oFF.QTableViewportPageSettings.prototype.getMaxHeight = function()
{
	return this.m_maxHeight;
};
oFF.QTableViewportPageSettings.prototype.getMaxRecommendedColumns = function()
{
	return this.m_maxRecommendedColumns;
};
oFF.QTableViewportPageSettings.prototype.getMaxRecommendedHeight = function()
{
	return this.m_maxRecommendedHeight;
};
oFF.QTableViewportPageSettings.prototype.getMaxRecommendedRows = function()
{
	return this.m_maxRecommendedRows;
};
oFF.QTableViewportPageSettings.prototype.getMaxRecommendedWidth = function()
{
	return this.m_maxRecommendedWidth;
};
oFF.QTableViewportPageSettings.prototype.getMaxRows = function()
{
	return this.m_maxRows;
};
oFF.QTableViewportPageSettings.prototype.getMaxWidth = function()
{
	return this.m_maxWidth;
};
oFF.QTableViewportPageSettings.prototype.getRowPage = function()
{
	return this.strictRowPagingActive() ? this.m_rowPage : -1;
};
oFF.QTableViewportPageSettings.prototype.getStartColumn = function()
{
	return this.m_startColumn;
};
oFF.QTableViewportPageSettings.prototype.getStartRow = function()
{
	return this.m_startRow;
};
oFF.QTableViewportPageSettings.prototype.isColumnPageBreakIsStylingBoundary = function()
{
	return this.m_columnPageBreakIsStylingBoundary;
};
oFF.QTableViewportPageSettings.prototype.isRowPageBreakIsStylingBoundary = function()
{
	return this.m_rowPageBreakIsStylingBoundary;
};
oFF.QTableViewportPageSettings.prototype.resetContainer = function()
{
	this.getParent().resetVisualizationContainer();
};
oFF.QTableViewportPageSettings.prototype.rowPagingActive = function()
{
	return this.strictRowPagingActive() || this.m_endRow > 0;
};
oFF.QTableViewportPageSettings.prototype.setColumnPage = function(columnPage)
{
	this.m_columnPage = columnPage;
	this.validateColumnPage(oFF.XMath.min(this.getFilledColumnPages(), this.getEstimatedColumnPages() - 1));
	this.resetContainer();
};
oFF.QTableViewportPageSettings.prototype.setColumnPageBreakIsStylingBoundary = function(columnPageBreakIsStylingBoundary)
{
	this.m_columnPageBreakIsStylingBoundary = columnPageBreakIsStylingBoundary;
	this.resetContainer();
};
oFF.QTableViewportPageSettings.prototype.setEndColumn = function(endColumn)
{
	this.m_endColumn = endColumn;
	this.resetContainer();
};
oFF.QTableViewportPageSettings.prototype.setEndRow = function(endRow)
{
	this.m_endRow = endRow;
	this.resetContainer();
};
oFF.QTableViewportPageSettings.prototype.setMaxColumns = function(maxColumns)
{
	this.m_maxColumns = maxColumns;
	this.resetContainer();
};
oFF.QTableViewportPageSettings.prototype.setMaxHeight = function(maxHeight)
{
	this.m_maxHeight = maxHeight;
	this.resetContainer();
};
oFF.QTableViewportPageSettings.prototype.setMaxRecommendedColumns = function(maxRecommendedColumns)
{
	this.m_maxRecommendedColumns = maxRecommendedColumns;
	this.resetContainer();
};
oFF.QTableViewportPageSettings.prototype.setMaxRecommendedHeight = function(maxRecommendedHeight)
{
	this.m_maxRecommendedHeight = maxRecommendedHeight;
	this.resetContainer();
};
oFF.QTableViewportPageSettings.prototype.setMaxRecommendedRows = function(maxRecommendedRows)
{
	this.m_maxRecommendedRows = maxRecommendedRows;
	this.resetContainer();
};
oFF.QTableViewportPageSettings.prototype.setMaxRecommendedWidth = function(maxRecommendedWidth)
{
	this.m_maxRecommendedWidth = maxRecommendedWidth;
	this.resetContainer();
};
oFF.QTableViewportPageSettings.prototype.setMaxRows = function(maxRows)
{
	this.m_maxRows = maxRows;
	this.resetContainer();
};
oFF.QTableViewportPageSettings.prototype.setMaxWidth = function(maxWidth)
{
	this.m_maxWidth = maxWidth;
	this.resetContainer();
};
oFF.QTableViewportPageSettings.prototype.setRowPage = function(rowPage)
{
	this.m_rowPage = oFF.XMath.max(0, rowPage);
	this.validateRowPage(oFF.XMath.min(this.getFilledRowPages(), this.getEstimatedRowPages() - 1));
	this.resetContainer();
};
oFF.QTableViewportPageSettings.prototype.setRowPageBreakIsStylingBoundary = function(rowPageBreakIsStylingBoundary)
{
	this.m_rowPageBreakIsStylingBoundary = rowPageBreakIsStylingBoundary;
	this.resetContainer();
};
oFF.QTableViewportPageSettings.prototype.setStartColumn = function(startColumn)
{
	this.m_startColumn = startColumn;
	this.resetContainer();
};
oFF.QTableViewportPageSettings.prototype.setStartRow = function(startRow)
{
	this.m_startRow = startRow;
	this.resetContainer();
};
oFF.QTableViewportPageSettings.prototype.strictColumnPagingActive = function()
{
	return this.m_maxWidth > 0 || this.m_maxRecommendedWidth > 0 || this.m_maxColumns > 0 || this.m_maxRecommendedColumns > 0;
};
oFF.QTableViewportPageSettings.prototype.strictRowPagingActive = function()
{
	return this.m_maxHeight > 0 || this.m_maxRecommendedHeight > 0 || this.m_maxRows > 0 || this.m_maxRecommendedRows > 0;
};
oFF.QTableViewportPageSettings.prototype.validate = function(maxRowPages, maxColumnPages)
{
	this.validateRowPage(maxRowPages);
	this.validateColumnPage(maxColumnPages);
};
oFF.QTableViewportPageSettings.prototype.validateColumnPage = function(maxColumnPages)
{
	if (this.columnPagingActive())
	{
		if (maxColumnPages > -1)
		{
			this.m_columnPage = oFF.XMath.min(maxColumnPages, this.m_columnPage);
		}
		this.m_columnPage = oFF.XMath.max(0, this.m_columnPage);
	}
};
oFF.QTableViewportPageSettings.prototype.validateRowPage = function(maxRowPages)
{
	if (this.rowPagingActive())
	{
		if (maxRowPages > -1)
		{
			this.m_rowPage = oFF.XMath.min(maxRowPages, this.m_rowPage);
		}
		this.m_rowPage = oFF.XMath.max(0, this.m_rowPage);
	}
};

oFF.QVisualizationManager = function() {};
oFF.QVisualizationManager.prototype = new oFF.QModelComponent();
oFF.QVisualizationManager.prototype._ff_c = "QVisualizationManager";

oFF.QVisualizationManager.create = function(context, modelComponentBase)
{
	let instance = new oFF.QVisualizationManager();
	instance.setupInternal(context, modelComponentBase);
	return instance;
};
oFF.QVisualizationManager.prototype.m_activeCollector = null;
oFF.QVisualizationManager.prototype.m_activeListCollectors = null;
oFF.QVisualizationManager.prototype.m_applicationSettings = null;
oFF.QVisualizationManager.prototype.m_currentActiveVisualization = null;
oFF.QVisualizationManager.prototype.m_datapointVariableContainers = null;
oFF.QVisualizationManager.prototype.m_defaultChartTemplateLinker = null;
oFF.QVisualizationManager.prototype.m_defaultTableTemplateLinker = null;
oFF.QVisualizationManager.prototype.m_repoSerializationActive = false;
oFF.QVisualizationManager.prototype.m_resultSetCollectorListeners = null;
oFF.QVisualizationManager.prototype.m_visualizationDefinitions = null;
oFF.QVisualizationManager.prototype.m_visualizationVariableContainer = null;
oFF.QVisualizationManager.prototype.m_viz2QmSynchronizer = null;
oFF.QVisualizationManager.prototype.addNewDatapointVariableContainer = function(name, text)
{
	let invalidator = () => {
		this.invalidateChartDefinitions();
		this.invalidateTableDefinitions();
	};
	let dataPointVariableContainer = oFF.QVizDataPointVariableContainer.create(this.getContext(), this, name, text, invalidator);
	this.m_datapointVariableContainers.add(dataPointVariableContainer);
	return dataPointVariableContainer;
};
oFF.QVisualizationManager.prototype.addNewSimpleTypeVariable = function(valueType, name, text, supportsMultipleValues)
{
	return this.m_visualizationVariableContainer.addNewSimpleTypeVariable(valueType, name, text, supportsMultipleValues);
};
oFF.QVisualizationManager.prototype.addVisualizationDefinition = function(visualisationDefinition)
{
	this.m_visualizationDefinitions.put(visualisationDefinition.getName(), visualisationDefinition);
};
oFF.QVisualizationManager.prototype.areAllVisualizationContainersInSync = function()
{
	return oFF.XStream.of(this.m_visualizationDefinitions).allMatch((vd) => {
		return vd.hasValidVisualizationContainer();
	});
};
oFF.QVisualizationManager.prototype.attachResultSetCollectorListener = function(listener, customIdentifier)
{
	this.m_resultSetCollectorListeners.put(listener, oFF.XPair.create(listener, customIdentifier));
};
oFF.QVisualizationManager.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	this.m_visualizationDefinitions.clear();
	let origin = other;
	this.m_applicationSettings.copyFrom(origin.m_applicationSettings, null);
	this.m_viz2QmSynchronizer.copyFrom(origin.m_viz2QmSynchronizer, null);
	if (oFF.XCollectionUtils.hasElements(origin.m_visualizationDefinitions))
	{
		let keysIterator = origin.m_visualizationDefinitions.getKeysAsIterator();
		this.m_visualizationDefinitions.clear();
		while (keysIterator.hasNext())
		{
			let key = keysIterator.next();
			let origVisualizationDefinition = origin.m_visualizationDefinitions.getByKey(key);
			let newVisualizationDefinition = this.createVisualizationDefinition(this.getContext(), this, key, origVisualizationDefinition.getProtocolBindingType(), origVisualizationDefinition.getSemanticBindingType());
			newVisualizationDefinition.copyFrom(origVisualizationDefinition, flags);
			this.addVisualizationDefinition(newVisualizationDefinition);
			if (origin.m_currentActiveVisualization === origVisualizationDefinition)
			{
				this.m_currentActiveVisualization = newVisualizationDefinition;
			}
		}
	}
	this.m_visualizationVariableContainer.copyFrom(origin.m_visualizationVariableContainer, flags);
	if (oFF.XCollectionUtils.hasElements(origin.m_datapointVariableContainers))
	{
		this.m_datapointVariableContainers.clear();
		oFF.XCollectionUtils.forEach(origin.m_datapointVariableContainers, (dvc) => {
			let newDvc = this.addNewDatapointVariableContainer(dvc.getName(), dvc.getText());
			newDvc.copyFrom(dvc, flags);
		});
	}
	this.m_defaultChartTemplateLinker.copyFrom(origin.m_defaultChartTemplateLinker, flags);
	this.m_defaultTableTemplateLinker.copyFrom(origin.m_defaultTableTemplateLinker, flags);
};
oFF.QVisualizationManager.prototype.createVisualizationDefinition = function(context, parent, name, protocolBindingType, semanticBindingType)
{
	let result = null;
	if (semanticBindingType === oFF.SemanticBindingType.TABLE)
	{
		result = oFF.QTableDefinition.create(context, this, name, protocolBindingType, semanticBindingType);
	}
	else if (semanticBindingType === oFF.SemanticBindingType.CHART)
	{
		result = oFF.QChartDefinition.create(context, this, name, protocolBindingType, semanticBindingType);
	}
	if (oFF.isNull(this.m_currentActiveVisualization))
	{
		this.m_currentActiveVisualization = result;
	}
	return result;
};
oFF.QVisualizationManager.prototype.detachResultSetCollectorListener = function(listener)
{
	this.m_resultSetCollectorListeners.remove(listener);
};
oFF.QVisualizationManager.prototype.getApplicationSettings = function()
{
	return this.m_applicationSettings;
};
oFF.QVisualizationManager.prototype.getChartTemplateLinker = function()
{
	return this.m_defaultChartTemplateLinker;
};
oFF.QVisualizationManager.prototype.getChartVisualizations = function()
{
	return oFF.XStream.of(this.m_visualizationDefinitions).filter((vd) => {
		return vd.getOlapComponentType().isTypeOf(oFF.OlapComponentType.VISUALIZATION_CHART_DEFINITION);
	}).map((e) => {
		return e;
	}).collect(oFF.XStreamCollector.toListOfNameObject());
};
oFF.QVisualizationManager.prototype.getCurrentActiveVisualizationDefinition = function()
{
	return this.m_currentActiveVisualization;
};
oFF.QVisualizationManager.prototype.getDatapointVariableContainers = function()
{
	return this.m_datapointVariableContainers;
};
oFF.QVisualizationManager.prototype.getDatapointVariableContainersByExceptionName = function(exceptionName)
{
	return oFF.XStream.of(this.m_datapointVariableContainers).filter((vc) => {
		return oFF.XString.isEqual(vc.getExceptionName(), exceptionName);
	}).collect(oFF.XStreamCollector.toListOfNameObject());
};
oFF.QVisualizationManager.prototype.getGridCollector = function()
{
	if (oFF.isNull(this.m_activeCollector) || this.m_activeCollector.isReleased())
	{
		this.m_activeCollector = oFF.RscResultsetCollectorFactory.createGridCollector(this);
	}
	return this.m_activeCollector;
};
oFF.QVisualizationManager.prototype.getListCollector = function(leadingAxis, structuresToRemap)
{
	let key = oFF.XStringUtils.concatenate3(leadingAxis.getName(), "_", oFF.XCollectionUtils.join(oFF.XStream.of(structuresToRemap).filterNullValues().collect(oFF.XStreamCollector.toListOfString((o) => {
		return o.getName();
	})), "_"));
	if (!this.m_activeListCollectors.containsKey(key) || this.m_activeListCollectors.getByKey(key).isReleased())
	{
		this.m_activeListCollectors.put(key, oFF.RscResultsetCollectorFactory.createListCollector(this.getGridCollector(), leadingAxis, structuresToRemap));
	}
	return this.m_activeListCollectors.getByKey(key);
};
oFF.QVisualizationManager.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.VISUALIZATION_MANAGER;
};
oFF.QVisualizationManager.prototype.getOrCreateVisualisationDefinition = function(name, protocolBindingType, semanticBindingType)
{
	if (!this.m_visualizationDefinitions.containsKey(name))
	{
		let newInstance = this.createVisualizationDefinition(this.getContext(), this, name, protocolBindingType, semanticBindingType);
		this.m_visualizationDefinitions.put(name, newInstance);
	}
	return this.m_visualizationDefinitions.getByKey(name);
};
oFF.QVisualizationManager.prototype.getResultSetCollectorListeners = function()
{
	return this.m_resultSetCollectorListeners.getValuesAsReadOnlyList();
};
oFF.QVisualizationManager.prototype.getSynchronizedGridCollector = function()
{
	let avd = this.getCurrentActiveVisualizationDefinition();
	if (oFF.notNull(avd) && avd.getOlapComponentType().isTypeOf(oFF.OlapComponentType.VISUALIZATION_CHART_DEFINITION))
	{
		avd.getChartSetting().synchronizeChartSetting();
	}
	return this.getGridCollector();
};
oFF.QVisualizationManager.prototype.getTableTemplateLinker = function()
{
	return this.m_defaultTableTemplateLinker;
};
oFF.QVisualizationManager.prototype.getTableVisualizations = function()
{
	return oFF.XStream.of(this.m_visualizationDefinitions).filter((vd) => {
		return vd.getOlapComponentType().isTypeOf(oFF.OlapComponentType.VISUALIZATION_TABLE_DEFINITION);
	}).map((e) => {
		return e;
	}).collect(oFF.XStreamCollector.toListOfNameObject());
};
oFF.QVisualizationManager.prototype.getVariable = function(variableName)
{
	return this.m_visualizationVariableContainer.getVariable(variableName);
};
oFF.QVisualizationManager.prototype.getVariableHolderForDataPoint = oFF.noSupport;
oFF.QVisualizationManager.prototype.getVariableOrFallback = function(variableName)
{
	let variable = this.m_visualizationVariableContainer.getVariable(variableName);
	if (oFF.isNull(variable) || variable.isEmpty())
	{
		let fallbackVariable = this.getOlapEnv().getVisualizationTemplateManager().getVisualizationVariableHolder().getVariable(variableName);
		if (oFF.notNull(fallbackVariable))
		{
			variable = fallbackVariable;
		}
	}
	return variable;
};
oFF.QVisualizationManager.prototype.getVisualizationDefinitionByName = function(name)
{
	return this.m_visualizationDefinitions.getByKey(name);
};
oFF.QVisualizationManager.prototype.getVisualizationDefinitions = function()
{
	return this.m_visualizationDefinitions.getValuesAsReadOnlyList();
};
oFF.QVisualizationManager.prototype.getVisualizationVariableContainer = function()
{
	return this.m_visualizationVariableContainer.getVariableProcessor().getVariableContainer();
};
oFF.QVisualizationManager.prototype.getVisualizationVariableHolder = function()
{
	return this.m_visualizationVariableContainer;
};
oFF.QVisualizationManager.prototype.getVisualizationVariableProcessor = function()
{
	return this.m_visualizationVariableContainer.getVariableProcessor();
};
oFF.QVisualizationManager.prototype.getViz2QmSynchronizer = function()
{
	return this.m_viz2QmSynchronizer;
};
oFF.QVisualizationManager.prototype.invalidateChartDefinitions = function()
{
	oFF.XCollectionUtils.forEach(this.getChartVisualizations(), (tv) => {
		tv.invalidateVisualizationContainer();
	});
};
oFF.QVisualizationManager.prototype.invalidateGridCollector = function()
{
	if (oFF.notNull(this.m_activeCollector))
	{
		this.m_activeCollector.invalidate();
		this.m_activeCollector = oFF.XObjectExt.release(this.m_activeCollector);
	}
	oFF.XCollectionUtils.forEach(this.m_activeListCollectors.getKeysAsReadOnlyList(), (key) => {
		let removedElement = this.m_activeListCollectors.remove(key);
		removedElement.invalidate();
		oFF.XObjectExt.release(removedElement);
	});
};
oFF.QVisualizationManager.prototype.invalidateTableDefinitions = function()
{
	oFF.XCollectionUtils.forEach(this.getTableVisualizations(), (tv) => {
		tv.invalidateVisualizationContainer();
	});
};
oFF.QVisualizationManager.prototype.isRepoSerializationActive = function()
{
	return this.m_repoSerializationActive;
};
oFF.QVisualizationManager.prototype.reformatTableDefinitions = function()
{
	oFF.XCollectionUtils.forEach(this.getTableVisualizations(), (tv) => {
		tv.markNeedsReapplyFormatting();
	});
};
oFF.QVisualizationManager.prototype.releaseObject = function()
{
	this.m_visualizationDefinitions = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_visualizationDefinitions);
	this.m_repoSerializationActive = false;
	this.m_currentActiveVisualization = null;
	this.m_applicationSettings = oFF.XObjectExt.release(this.m_applicationSettings);
	this.m_activeCollector = oFF.XObjectExt.release(this.m_activeCollector);
	this.m_activeListCollectors = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_activeListCollectors);
	this.m_visualizationVariableContainer = oFF.XObjectExt.release(this.m_visualizationVariableContainer);
	this.m_datapointVariableContainers = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_datapointVariableContainers);
	this.m_viz2QmSynchronizer = oFF.XObjectExt.release(this.m_viz2QmSynchronizer);
	this.m_defaultTableTemplateLinker = oFF.XObjectExt.release(this.m_defaultTableTemplateLinker);
	this.m_defaultChartTemplateLinker = oFF.XObjectExt.release(this.m_defaultChartTemplateLinker);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QVisualizationManager.prototype.removeDatapointVariableContainerByName = function(name)
{
	this.m_datapointVariableContainers.removeElement(this.m_datapointVariableContainers.getByKey(name));
};
oFF.QVisualizationManager.prototype.removeVisualizationDefinition = function(visualisationDefinition)
{
	if (oFF.notNull(visualisationDefinition))
	{
		this.m_visualizationDefinitions.remove(visualisationDefinition.getName());
	}
};
oFF.QVisualizationManager.prototype.removeVisualizationDefinitionByName = function(name)
{
	this.m_visualizationDefinitions.remove(name);
};
oFF.QVisualizationManager.prototype.setCurrentActiveVisualizationDefinition = function(currentActiveVisualization)
{
	let oldValue = this.m_currentActiveVisualization;
	this.m_currentActiveVisualization = currentActiveVisualization;
	if (oFF.notNull(oldValue) && !oFF.XString.isEqual(oldValue.getName(), currentActiveVisualization.getName()))
	{
		if (currentActiveVisualization.getProtocolBindingType() === oFF.ProtocolBindingType.SAC_TABLE_GRID)
		{
			this.m_viz2QmSynchronizer.resetAxesOfMeasures();
		}
		this.setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_DO_NOT_RAISEEVENTS);
		this.notifyNodeChanged();
		this.resumeEventing();
	}
};
oFF.QVisualizationManager.prototype.setRepoSerializationActive = function(repoSerializationActive)
{
	this.m_repoSerializationActive = repoSerializationActive;
};
oFF.QVisualizationManager.prototype.setupInternal = function(context, modelComponentBase)
{
	this.setupModelComponent(context, modelComponentBase);
	let invalidator = () => {
		this.invalidateChartDefinitions();
		this.invalidateTableDefinitions();
	};
	this.m_visualizationVariableContainer = oFF.QVisualizationVariableHolder.create(context, this, invalidator);
	this.m_visualizationDefinitions = oFF.XHashMapByString.create();
	this.m_applicationSettings = oFF.XTransientVisualizationApplicationSettings.create();
	this.m_resultSetCollectorListeners = oFF.XSimpleMap.create();
	this.m_activeListCollectors = oFF.XHashMapByString.create();
	this.m_datapointVariableContainers = oFF.XListOfNameObject.create();
	this.m_repoSerializationActive = true;
	let chartInvalidator = () => {
		this.invalidateChartDefinitions();
	};
	this.m_defaultChartTemplateLinker = oFF.QVisualizationTemplateLinker.create(this, chartInvalidator, chartInvalidator);
	this.m_defaultTableTemplateLinker = oFF.QVisualizationTemplateLinker.create(this, () => {
		this.invalidateTableDefinitions();
	}, () => {
		this.reformatTableDefinitions();
	});
	this.m_viz2QmSynchronizer = oFF.QViz2QmSynchronizer.create(context, this);
};

oFF.QVisualizationVariableHolder = function() {};
oFF.QVisualizationVariableHolder.prototype = new oFF.QModelComponent();
oFF.QVisualizationVariableHolder.prototype._ff_c = "QVisualizationVariableHolder";

oFF.QVisualizationVariableHolder.create = function(context, modelComponentBase, invalidator)
{
	let instance = new oFF.QVisualizationVariableHolder();
	instance.setInvalidator(invalidator);
	instance.setupInternal(context, modelComponentBase);
	return instance;
};
oFF.QVisualizationVariableHolder.transferDefaultValues = function(variableHolder, variableContext)
{
	let variableHolderTarget = variableContext.getVisualizationVariableHolder();
	let context = variableHolderTarget.getContext();
	oFF.XCollectionUtils.forEach(variableHolder.getVariables(), (variable) => {
		let variableName = variable.getName();
		let variableText = variable.getText();
		let variableType = variable.getVariableType();
		let newVariable = null;
		if (variableHolderTarget.getVariable(variableName) === null)
		{
			if (variableType.isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
			{
				newVariable = oFF.QDimensionMemberVariable.createDimensionMemberVariable(context, null, variableName, variableText);
			}
			else if (variableType.isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE))
			{
				newVariable = oFF.QSimpleTypeVariable.createOptionListVariable(context, null, variableName, variableText, variable.supportsMultipleValues());
			}
			else if (variableType.isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
			{
				newVariable = oFF.QSimpleTypeVariable.createSimpleTypeVariable(context, null, variable.getValueType(), variableName, variableText, variable.supportsMultipleValues());
			}
			if (oFF.notNull(newVariable))
			{
				newVariable.resetToDefaultValues();
			}
		}
	});
};
oFF.QVisualizationVariableHolder.prototype.m_invalidator = null;
oFF.QVisualizationVariableHolder.prototype.m_stylingVariableProcessor = null;
oFF.QVisualizationVariableHolder.prototype.m_stylingVariableProcessorProvider = null;
oFF.QVisualizationVariableHolder.prototype.m_variables = null;
oFF.QVisualizationVariableHolder.prototype.addNewSimpleTypeVariable = function(valueType, name, text, supportsMultipleValues)
{
	let variable = oFF.QSimpleTypeVariable.createSimpleTypeVariable(this.getContext(), this.getVariableContainerBase(), valueType, name, text, supportsMultipleValues);
	variable.setInputEnabled(true);
	this.addVariable(variable);
	return variable;
};
oFF.QVisualizationVariableHolder.prototype.addVariable = function(variable)
{
	this.m_variables.add(variable);
};
oFF.QVisualizationVariableHolder.prototype.clearExternalVariablesRepresentations = function()
{
	this.queueEventing();
	oFF.QVariableUtils.clearExternalVariablesRepresentations(this.getVariables());
	this.resumeEventing();
};
oFF.QVisualizationVariableHolder.prototype.clearVariable = function(name)
{
	this.removeVariable(name);
};
oFF.QVisualizationVariableHolder.prototype.clearVariables = function()
{
	this.m_variables.clear();
};
oFF.QVisualizationVariableHolder.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let origin = other;
	let context = this.getContext();
	let originalVariables = origin.getVariables();
	let size = originalVariables.size();
	this.m_variables.clear();
	let i;
	for (i = 0; i < size; i++)
	{
		let originVariable = originalVariables.get(i);
		let cloneVar = oFF.QFactory.createVariable(context, null, originVariable);
		cloneVar.copyFrom(originVariable, flags);
		this.addVariable(cloneVar);
	}
	for (i = 0; i < size; i++)
	{
		this.m_variables.get(i).copyVariableDependencies(originalVariables.get(i));
	}
};
oFF.QVisualizationVariableHolder.prototype.getDimensionMemberVariables = function()
{
	return oFF.QVariableUtils.getDimensionMemberVariables(this.getVariables());
};
oFF.QVisualizationVariableHolder.prototype.getHierarchyNameVariable = function(name)
{
	return oFF.QVariableUtils.getVariableByType(this.getVariables(), name, oFF.VariableType.HIERARCHY_NAME_VARIABLE);
};
oFF.QVisualizationVariableHolder.prototype.getHierarchyNameVariables = function()
{
	return oFF.QVariableUtils.getHierarchyNameVariables(this.getVariables());
};
oFF.QVisualizationVariableHolder.prototype.getHierarchyNodeVariable = function(name)
{
	return oFF.QVariableUtils.getVariableByType(this.getVariables(), name, oFF.VariableType.HIERARCHY_NODE_VARIABLE);
};
oFF.QVisualizationVariableHolder.prototype.getInputEnabledAndNonTechnicalVariables = function()
{
	return oFF.QVariableUtils.getInputEnabledAndNonTechnicalVariables(this.getVariables());
};
oFF.QVisualizationVariableHolder.prototype.getInputEnabledVariable = function(name)
{
	return oFF.QVariableUtils.getInputEnabledVariable(this.getVariables(), name);
};
oFF.QVisualizationVariableHolder.prototype.getInputEnabledVariables = function()
{
	return oFF.QVariableUtils.getInputEnabledVariables(this.getVariables());
};
oFF.QVisualizationVariableHolder.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.VARIABLE_CONTAINER;
};
oFF.QVisualizationVariableHolder.prototype.getSystemDescription = function()
{
	return null;
};
oFF.QVisualizationVariableHolder.prototype.getSystemType = function()
{
	return null;
};
oFF.QVisualizationVariableHolder.prototype.getVariable = function(name)
{
	return oFF.XStream.of(this.getVariables()).find((_var) => {
		return oFF.XString.isEqual(_var.getName(), name);
	}).orElse(null);
};
oFF.QVisualizationVariableHolder.prototype.getVariableBaseAt = function(index)
{
	return null;
};
oFF.QVisualizationVariableHolder.prototype.getVariableBaseByName = function(name)
{
	return null;
};
oFF.QVisualizationVariableHolder.prototype.getVariableContainerBase = function()
{
	return this.m_stylingVariableProcessor;
};
oFF.QVisualizationVariableHolder.prototype.getVariableMode = function()
{
	return oFF.VariableMode.DIRECT_VALUE_TRANSFER;
};
oFF.QVisualizationVariableHolder.prototype.getVariableProcessor = function()
{
	return this.m_stylingVariableProcessor;
};
oFF.QVisualizationVariableHolder.prototype.getVariables = function()
{
	return this.m_variables;
};
oFF.QVisualizationVariableHolder.prototype.hasInputEnabledAndNonTechnicalVariables = function()
{
	return oFF.XCollectionUtils.hasElements(this.getInputEnabledAndNonTechnicalVariables());
};
oFF.QVisualizationVariableHolder.prototype.hasInputEnabledVariables = function()
{
	return oFF.QVariableUtils.hasInputEnabledVariables(this.getVariables());
};
oFF.QVisualizationVariableHolder.prototype.hasMandatoryVariables = function()
{
	return oFF.QVariableUtils.hasMandatoryVariables(this.getVariables());
};
oFF.QVisualizationVariableHolder.prototype.hasVariables = function()
{
	return this.getVariables().hasElements();
};
oFF.QVisualizationVariableHolder.prototype.onModelComponentChanged = function(modelComponent, customIdentifier)
{
	if (oFF.notNull(this.m_invalidator))
	{
		this.m_invalidator();
	}
};
oFF.QVisualizationVariableHolder.prototype.releaseObject = function()
{
	this.m_variables = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_variables);
	this.m_stylingVariableProcessorProvider = oFF.XObjectExt.release(this.m_stylingVariableProcessorProvider);
	this.m_stylingVariableProcessor = oFF.XObjectExt.release(this.m_stylingVariableProcessor);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QVisualizationVariableHolder.prototype.removeVariable = function(name)
{
	let object = this.m_variables.getByKey(name);
	if (oFF.notNull(object))
	{
		this.m_variables.removeElement(object);
	}
};
oFF.QVisualizationVariableHolder.prototype.setInvalidator = function(invalidator)
{
	this.m_invalidator = invalidator;
};
oFF.QVisualizationVariableHolder.prototype.setVariableProcessorBase = function(processor)
{
	this.m_stylingVariableProcessor = processor;
};
oFF.QVisualizationVariableHolder.prototype.setWinControlInAutoSubmitByType = function(variableType, isWinControlInAutoSubmit, isLimitToExitVariable)
{
	return;
};
oFF.QVisualizationVariableHolder.prototype.setupInternal = function(context, modelComponentBase)
{
	this.setupModelComponent(context, modelComponentBase);
	this.m_stylingVariableProcessorProvider = oFF.QVisualizationVariableProvider.create();
	this.m_stylingVariableProcessor = oFF.QVariableProcessor.createVariableProcessor(this, null, this.m_stylingVariableProcessorProvider, this);
	this.m_stylingVariableProcessor.registerChangedListener(this, null);
	this.m_variables = oFF.XListOfNameObject.create();
};

oFF.QViz2QmSynchronizer = function() {};
oFF.QViz2QmSynchronizer.prototype = new oFF.QModelComponent();
oFF.QViz2QmSynchronizer.prototype._ff_c = "QViz2QmSynchronizer";

oFF.QViz2QmSynchronizer.create = function(context, parent)
{
	let instance = new oFF.QViz2QmSynchronizer();
	instance.setMode(oFF.Viz2QmSynchronizationMode.MAXIMAL_CONSISTENCY);
	instance.setupModelComponent(context, parent);
	return instance;
};
oFF.QViz2QmSynchronizer.prototype.m_accountDetails = null;
oFF.QViz2QmSynchronizer.prototype.m_measureAxisUDHActive = false;
oFF.QViz2QmSynchronizer.prototype.m_measureDetails = null;
oFF.QViz2QmSynchronizer.prototype.m_mode = null;
oFF.QViz2QmSynchronizer.prototype.m_synchronizedChartType = null;
oFF.QViz2QmSynchronizer.prototype.m_synchronizedSetting = null;
oFF.QViz2QmSynchronizer.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let origin = other;
	this.m_mode = origin.m_mode;
	this.m_measureAxisUDHActive = origin.m_measureAxisUDHActive;
	if (oFF.notNull(origin.m_measureDetails))
	{
		this.m_measureDetails = oFF.XPair.create(oFF.XWeakReferenceUtil.getWeakRef(origin.m_measureDetails.getFirstObject().getReference()), oFF.XIntegerValue.create(origin.m_measureDetails.getSecondObject().getInteger()));
	}
	if (oFF.notNull(origin.m_accountDetails))
	{
		this.m_accountDetails = oFF.XPair.create(oFF.XWeakReferenceUtil.getWeakRef(origin.m_accountDetails.getFirstObject().getReference()), oFF.XIntegerValue.create(origin.m_accountDetails.getSecondObject().getInteger()));
	}
};
oFF.QViz2QmSynchronizer.prototype.getMode = function()
{
	return this.m_mode;
};
oFF.QViz2QmSynchronizer.prototype.moveMeasureToColumns = function(measureDimension, convenienceCommands)
{
	if (oFF.notNull(measureDimension))
	{
		let dimensionType = measureDimension.getDimensionType();
		let originalAxis = measureDimension.getAxis();
		let originalIndex = originalAxis.getIndex(measureDimension);
		if (dimensionType === oFF.DimensionType.ACCOUNT)
		{
			this.setAccountOriginalAxis(originalAxis, originalIndex);
		}
		else
		{
			this.setMeasureOriginalAxis(originalAxis, originalIndex);
		}
		if (measureDimension.getAxisType() !== oFF.AxisType.COLUMNS)
		{
			convenienceCommands.moveDimensionByTypeToAxis(dimensionType, oFF.AxisType.COLUMNS);
		}
	}
};
oFF.QViz2QmSynchronizer.prototype.processCurrentQMState = function(chartSetting, visualizationIsActive)
{
	if (visualizationIsActive)
	{
		this.processCurrentQMStateByMode(chartSetting, this.m_mode);
	}
};
oFF.QViz2QmSynchronizer.prototype.processCurrentQMStateByMode = function(chartSetting, mode)
{
	let chartSettingBase = chartSetting;
	let chartType = chartSetting.getChartType();
	if ((!chartSetting.getChartDefinition().isActiveContainerValid() || this.m_synchronizedSetting !== chartSetting || this.m_synchronizedChartType !== chartType) && mode.getLevel() > oFF.Viz2QmSynchronizationMode.NONE.getLevel())
	{
		this.m_synchronizedChartType = chartType;
		this.m_synchronizedSetting = chartSetting;
		if (!chartSetting.isDrillCompatibleToDimensionSelection())
		{
			chartSetting.enforceDrillForDimensionSelection();
		}
		let qm = this.getQueryModel();
		let rowDimensions = qm.getAxis(oFF.AxisType.ROWS).getDimensions();
		let columnsDimensions = qm.getAxis(oFF.AxisType.COLUMNS).getDimensions();
		this.setupWithInitialSettings(mode, qm, chartType);
		if (mode === oFF.Viz2QmSynchronizationMode.MAXIMAL_CONSISTENCY && chartType.getFeedForQueryModelAxis(oFF.AxisType.COLUMNS) === null && oFF.XCollectionUtils.hasElements(this.getQueryModel().getColumnsAxis()))
		{
			let dimList = oFF.XList.create();
			dimList.addAll(oFF.XStream.of(this.getQueryModel().getColumnsAxis()).filter((dim) => {
				return !dim.isStructure() && !dim.getDimensionType().isTypeOf(oFF.DimensionType.ACCOUNT);
			}).collect(oFF.XStreamCollector.toList()));
			let cmd = this.getConvenienceCommands();
			oFF.XCollectionUtils.forEach(dimList, (di) => {
				cmd.moveDimensionToRows(di.getName());
			});
		}
		if (mode === oFF.Viz2QmSynchronizationMode.MAXIMAL_CONSISTENCY)
		{
			if (chartType.getFeedForQueryModelAxis(oFF.AxisType.COLUMNS) === null && oFF.XCollectionUtils.hasElements(this.getQueryModel().getColumnsAxis()))
			{
				let dimList = oFF.XList.create();
				dimList.addAll(oFF.XStream.of(this.getQueryModel().getColumnsAxis()).filter((dim) => {
					return !dim.isStructure() && !dim.getDimensionType().isTypeOf(oFF.DimensionType.ACCOUNT);
				}).collect(oFF.XStreamCollector.toList()));
				let cmd = this.getConvenienceCommands();
				oFF.XCollectionUtils.forEach(dimList, (di) => {
					cmd.moveDimensionToRows(di.getName());
				});
			}
			chartSettingBase.clearTypedValueSelectionsForTypeInternal(chartType.getFeedForQueryModelAxis(oFF.AxisType.ROWS));
			for (let i = 0; i < rowDimensions.size(); i++)
			{
				let rowDimension = rowDimensions.get(i);
				if (oFF.DimensionType.ACCOUNT.isEqualTo(rowDimension.getDimensionType()))
				{
					chartSettingBase.addStructureToFeedInternal(chartSetting, rowDimension, chartType.getPrimaryValueFeed(), chartType.getSecondaryValueFeed());
				}
				else if (rowDimension.isStructure())
				{
					chartSettingBase.addStructureToFeedInternal(chartSetting, rowDimension, chartType.getFeedForQueryModelAxis(oFF.AxisType.ROWS), chartType.getSecondaryValueFeed());
				}
				else
				{
					chartSettingBase.addTypedValueSelectionInternal(chartType.getFeedForQueryModelAxis(oFF.AxisType.ROWS), oFF.QKeyFigureSelection.create(chartSetting, rowDimension.getDimensionMember(rowDimension.getDefaultMemberValue()), this, chartType.getFeedForQueryModelAxis(oFF.AxisType.ROWS)));
				}
			}
			chartSettingBase.clearTypedValueSelectionsForTypeInternal(chartType.getFeedForQueryModelAxis(oFF.AxisType.COLUMNS));
			for (let j = 0; j < columnsDimensions.size(); j++)
			{
				let columnDimension = columnsDimensions.get(j);
				if (oFF.DimensionType.ACCOUNT.isEqualTo(columnDimension.getDimensionType()))
				{
					chartSettingBase.addStructureToFeedInternal(chartSetting, columnDimension, chartType.getPrimaryValueFeed(), chartType.getSecondaryValueFeed());
				}
				else if (columnDimension.isMeasureStructure() && !qm.isAccountModel())
				{
					chartSettingBase.addStructureToFeedInternal(chartSetting, columnDimension, chartType.getPrimaryValueFeed(), chartType.getSecondaryValueFeed());
				}
				else if (columnDimension.isMeasureStructure() && qm.isAccountModel() || columnDimension.isStructure())
				{
					chartSettingBase.addStructureToFeedInternal(chartSetting, columnDimension, chartType.getFeedForQueryModelAxis(oFF.AxisType.COLUMNS), chartType.getFeedForQueryModelAxis(oFF.AxisType.ROWS));
				}
				else
				{
					chartSettingBase.addTypedValueSelectionInternal(chartType.getFeedForQueryModelAxis(oFF.AxisType.COLUMNS), oFF.QKeyFigureSelection.create(chartSetting, columnDimension.getDimensionMember(columnDimension.getDefaultMemberValue()), this, chartType.getFeedForQueryModelAxis(oFF.AxisType.ROWS)));
				}
			}
		}
	}
};
oFF.QViz2QmSynchronizer.prototype.releaseObject = function()
{
	this.m_mode = null;
	this.m_measureAxisUDHActive = false;
	this.m_measureDetails = oFF.XObjectExt.release(this.m_measureDetails);
	this.m_accountDetails = oFF.XObjectExt.release(this.m_accountDetails);
	this.m_synchronizedSetting = null;
	this.m_synchronizedChartType = null;
};
oFF.QViz2QmSynchronizer.prototype.removeDateTimeMeasures = function(convenienceCommands, measureDimension)
{
	return (allMembers) => {
		let visibleMembers = convenienceCommands.getVisibleMembers(measureDimension, allMembers);
		let membersToRemove = oFF.XList.create();
		oFF.XCollectionUtils.forEach(visibleMembers, (visMemberName) => {
			let visStructureMember = measureDimension.getStructureMember(visMemberName);
			if (visStructureMember.getCellValueType() !== null && visStructureMember.getCellValueType().isDateTime())
			{
				membersToRemove.add(visStructureMember.getName());
			}
		});
		if (oFF.XCollectionUtils.hasElements(membersToRemove))
		{
			for (let i = 0; i < membersToRemove.size(); i++)
			{
				let memberName = membersToRemove.get(i);
				visibleMembers.removeElement(memberName);
			}
		}
		if (oFF.XCollectionUtils.hasElements(membersToRemove))
		{
			if (oFF.XCollectionUtils.hasElements(visibleMembers))
			{
				convenienceCommands.clearFiltersByDimension(measureDimension);
			}
			for (let j = 0; j < visibleMembers.size(); j++)
			{
				convenienceCommands.addSingleMeasureFilter(visibleMembers.get(j));
			}
		}
		return null;
	};
};
oFF.QViz2QmSynchronizer.prototype.resetAxesOfMeasures = function()
{
	this.m_synchronizedSetting = null;
	this.m_synchronizedChartType = null;
	let convenienceCommands = this.getQueryManager().getConvenienceCommands();
	if (oFF.notNull(this.m_measureDetails))
	{
		let measureAxis = this.m_measureDetails.getFirstObject();
		let measureOriginAxis = oFF.XWeakReferenceUtil.getHardRef(measureAxis);
		let measureDimension = this.getQueryModel().getMeasureDimension();
		if (oFF.notNull(measureOriginAxis) && measureOriginAxis !== measureDimension.getAxis())
		{
			let measurePositionOnAxis = this.m_measureDetails.getSecondObject();
			let positionSaved1 = measurePositionOnAxis.getInteger();
			let movePosition1 = measureOriginAxis.size() < positionSaved1 ? -1 : positionSaved1;
			convenienceCommands.moveDimensionExt(null, measureDimension.getName(), measureOriginAxis.getType(), movePosition1);
		}
		this.m_measureDetails = null;
	}
	if (oFF.notNull(this.m_accountDetails))
	{
		let accountAxis = this.m_accountDetails.getFirstObject();
		let accountOriginAxis = oFF.XWeakReferenceUtil.getHardRef(accountAxis);
		let accountDimension = this.getQueryModel().getAccountDimension();
		if (oFF.notNull(accountOriginAxis) && oFF.notNull(accountDimension) && accountOriginAxis !== accountDimension.getAxis())
		{
			let accountPositionOnAxis = this.m_accountDetails.getSecondObject();
			let positionSaved2 = accountPositionOnAxis.getInteger();
			let movePosition2 = accountOriginAxis.size() < positionSaved2 ? -1 : positionSaved2;
			convenienceCommands.moveDimensionExt(null, accountDimension.getName(), accountOriginAxis.getType(), movePosition2);
		}
		this.m_accountDetails = null;
	}
	if (this.m_measureAxisUDHActive)
	{
		this.getQueryModel().getMeasureDimension().getUDHWithThisDimensionIncluded().setActive(true);
		this.m_measureAxisUDHActive = false;
	}
};
oFF.QViz2QmSynchronizer.prototype.setAccountOriginalAxis = function(axis, originalIndex)
{
	if (oFF.isNull(this.m_accountDetails))
	{
		let accountAxis = oFF.XWeakReferenceUtil.getWeakRef(axis);
		this.m_accountDetails = oFF.XPair.create(accountAxis, oFF.XIntegerValue.create(originalIndex));
	}
};
oFF.QViz2QmSynchronizer.prototype.setMeasureOriginalAxis = function(axis, originalIndex)
{
	if (oFF.isNull(this.m_measureDetails))
	{
		let measureAxis = oFF.XWeakReferenceUtil.getWeakRef(axis);
		this.m_measureDetails = oFF.XPair.create(measureAxis, oFF.XIntegerValue.create(originalIndex));
	}
};
oFF.QViz2QmSynchronizer.prototype.setMeasureUDHActive = function(active)
{
	this.m_measureAxisUDHActive = active;
};
oFF.QViz2QmSynchronizer.prototype.setMode = function(mode)
{
	this.m_mode = mode;
};
oFF.QViz2QmSynchronizer.prototype.setupWithInitialSettings = function(mode, qm, chartType)
{
	let measureDimension = qm.getMeasureDimension();
	let convenienceCommands = qm.getConvenienceCommands();
	if (mode === oFF.Viz2QmSynchronizationMode.MAXIMAL_CONSISTENCY)
	{
		if (qm.isAccountModel())
		{
			this.moveMeasureToColumns(qm.getAccountDimension(), convenienceCommands);
			if (oFF.notNull(chartType) && chartType.isSingleMeasureChartType())
			{
				if (oFF.notNull(measureDimension) && measureDimension.getAxisType() === oFF.AxisType.COLUMNS)
				{
					convenienceCommands.moveDimensionToRows(measureDimension.getName());
				}
			}
		}
		else
		{
			this.moveMeasureToColumns(measureDimension, convenienceCommands);
		}
	}
	if (mode !== oFF.Viz2QmSynchronizationMode.NONE && oFF.notNull(measureDimension) && measureDimension.isPartOfActiveUDH())
	{
		this.setMeasureUDHActive(true);
		measureDimension.getUDHWithThisDimensionIncluded().setActive(false);
	}
	if (mode !== oFF.Viz2QmSynchronizationMode.NONE && oFF.notNull(measureDimension))
	{
		let allMembersPromise = measureDimension.getMemberManager().getMembers();
		allMembersPromise.then(this.removeDateTimeMeasures(convenienceCommands, measureDimension), null);
	}
};

oFF.QVizVisualizationDefinitionContext = function() {};
oFF.QVizVisualizationDefinitionContext.prototype = new oFF.QModelComponent();
oFF.QVizVisualizationDefinitionContext.prototype._ff_c = "QVizVisualizationDefinitionContext";

oFF.QVizVisualizationDefinitionContext.prototype.getVisualizationDefinition = function()
{
	let parent = this;
	while (oFF.notNull(parent) && !parent.getOlapComponentType().isTypeOf(oFF.OlapComponentType.VISUALIZATION_DEFINITION))
	{
		parent = parent.getParent();
	}
	if (oFF.notNull(parent))
	{
		return parent;
	}
	return null;
};

oFF.QVizCellTypeRestriction = function() {};
oFF.QVizCellTypeRestriction.prototype = new oFF.QModelComponent();
oFF.QVizCellTypeRestriction.prototype._ff_c = "QVizCellTypeRestriction";

oFF.QVizCellTypeRestriction.create = function()
{
	let instance = new oFF.QVizCellTypeRestriction();
	instance.setup();
	return instance;
};
oFF.QVizCellTypeRestriction.prototype.m_cellTypes = null;
oFF.QVizCellTypeRestriction.prototype.m_expanded = null;
oFF.QVizCellTypeRestriction.prototype.m_inHierarchy = null;
oFF.QVizCellTypeRestriction.prototype.m_inTotalsContext = null;
oFF.QVizCellTypeRestriction.prototype.m_merged = null;
oFF.QVizCellTypeRestriction.prototype.m_repeatedMemberName = null;
oFF.QVizCellTypeRestriction.prototype.addCellType = function(cellType)
{
	this.m_cellTypes.add(cellType);
};
oFF.QVizCellTypeRestriction.prototype.clearCellTypes = function()
{
	this.m_cellTypes.clear();
};
oFF.QVizCellTypeRestriction.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originObj = other;
	this.m_expanded = originObj.m_expanded;
	this.m_inHierarchy = originObj.m_inHierarchy;
	this.m_inTotalsContext = originObj.m_inTotalsContext;
	this.m_merged = originObj.m_merged;
	this.m_repeatedMemberName = originObj.m_repeatedMemberName;
	this.m_cellTypes.clear();
	this.m_cellTypes.addAll(originObj.m_cellTypes);
};
oFF.QVizCellTypeRestriction.prototype.getMatchingCellTypes = function()
{
	return this.m_cellTypes;
};
oFF.QVizCellTypeRestriction.prototype.isExpanded = function()
{
	return this.m_expanded;
};
oFF.QVizCellTypeRestriction.prototype.isInHierarchy = function()
{
	return this.m_inHierarchy;
};
oFF.QVizCellTypeRestriction.prototype.isInTotalsContext = function()
{
	return this.m_inTotalsContext;
};
oFF.QVizCellTypeRestriction.prototype.isMerged = function()
{
	return this.m_merged;
};
oFF.QVizCellTypeRestriction.prototype.isRepeatedMemberName = function()
{
	return this.m_repeatedMemberName;
};
oFF.QVizCellTypeRestriction.prototype.releaseObject = function()
{
	this.m_cellTypes = oFF.XObjectExt.release(this.m_cellTypes);
	this.m_inHierarchy = null;
	this.m_expanded = null;
	this.m_merged = null;
	this.m_repeatedMemberName = null;
	this.m_inTotalsContext = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QVizCellTypeRestriction.prototype.setExpanded = function(expanded)
{
	this.m_expanded = expanded;
};
oFF.QVizCellTypeRestriction.prototype.setInHierarchy = function(inHierarchy)
{
	this.m_inHierarchy = inHierarchy;
};
oFF.QVizCellTypeRestriction.prototype.setInTotalsContext = function(inTotalsContext)
{
	this.m_inTotalsContext = inTotalsContext;
};
oFF.QVizCellTypeRestriction.prototype.setMerged = function(merged)
{
	this.m_merged = merged;
};
oFF.QVizCellTypeRestriction.prototype.setRepeatedMemberName = function(repeatedMemberName)
{
	this.m_repeatedMemberName = repeatedMemberName;
};
oFF.QVizCellTypeRestriction.prototype.setup = function()
{
	oFF.QModelComponent.prototype.setup.call( this );
	this.m_cellTypes = oFF.XList.create();
};

oFF.QStylingValueAbstract = function() {};
oFF.QStylingValueAbstract.prototype = new oFF.QModelComponent();
oFF.QStylingValueAbstract.prototype._ff_c = "QStylingValueAbstract";

oFF.QStylingValueAbstract.prototype.m_value = null;
oFF.QStylingValueAbstract.prototype.m_variableName = null;
oFF.QStylingValueAbstract.prototype.acquireOtherValue = function(variableMerger, otherValue)
{
	let otherResolved = otherValue.getResolvedValue(variableMerger);
	if (oFF.notNull(otherResolved))
	{
		this.setFixedValue(otherResolved);
	}
};
oFF.QStylingValueAbstract.prototype.acquireOtherValueIfNeeded = function(variableMerger, otherValue)
{
	if (!this.isValueAvailable(variableMerger))
	{
		this.acquireOtherValue(variableMerger, otherValue);
	}
};
oFF.QStylingValueAbstract.prototype.clear = function()
{
	this.m_variableName = null;
	this.m_value = this.clearValue(this.m_value);
};
oFF.QStylingValueAbstract.prototype.clearValue = function(value)
{
	return null;
};
oFF.QStylingValueAbstract.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let origin = other;
	this.clear();
	this.m_value = this.copyValue(origin.m_value);
	this.m_variableName = origin.m_variableName;
};
oFF.QStylingValueAbstract.prototype.copyValue = function(value)
{
	return value;
};
oFF.QStylingValueAbstract.prototype.getFixedValue = function()
{
	return this.m_value;
};
oFF.QStylingValueAbstract.prototype.getVariableExt = function(variableContainers, variableMerger)
{
	let size = oFF.XCollectionUtils.size(variableContainers);
	let variable = null;
	for (let i = 0; i < size; i++)
	{
		variable = variableContainers.get(i).getVariable(this.m_variableName);
		if (oFF.notNull(variable))
		{
			break;
		}
	}
	if (oFF.notNull(variableMerger) && oFF.isNull(variable))
	{
		variable = variableMerger.getVariableOrFallback(this.m_variableName);
	}
	return variable;
};
oFF.QStylingValueAbstract.prototype.getVariableName = function()
{
	return this.m_variableName;
};
oFF.QStylingValueAbstract.prototype.isEqualTo = function(other)
{
	let orig = other;
	return oFF.XString.isEqual(this.m_variableName, orig.m_variableName) && oFF.XObjectExt.areEqual(this.m_value, orig.m_value);
};
oFF.QStylingValueAbstract.prototype.isFixedValue = function()
{
	return oFF.notNull(this.m_value);
};
oFF.QStylingValueAbstract.prototype.isValueAvailable = function(variableMerger)
{
	return this.getResolvedValue(variableMerger) !== null;
};
oFF.QStylingValueAbstract.prototype.isVariable = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.m_variableName);
};
oFF.QStylingValueAbstract.prototype.releaseObject = function()
{
	this.clear();
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QStylingValueAbstract.prototype.setFixedValue = function(fixedValue)
{
	this.clear();
	this.m_value = fixedValue;
};
oFF.QStylingValueAbstract.prototype.setVariable = function(variable)
{
	this.setVariableName(oFF.isNull(variable) ? null : variable.getName());
};
oFF.QStylingValueAbstract.prototype.setVariableName = function(variableName)
{
	this.clear();
	this.m_variableName = variableName;
};

oFF.QStylingValueAbstractList = function() {};
oFF.QStylingValueAbstractList.prototype = new oFF.QModelComponent();
oFF.QStylingValueAbstractList.prototype._ff_c = "QStylingValueAbstractList";

oFF.QStylingValueAbstractList.prototype.m_values = null;
oFF.QStylingValueAbstractList.prototype.m_variableName = null;
oFF.QStylingValueAbstractList.prototype.addFixedValue = function(fixedValue)
{
	if (oFF.isNull(this.m_values))
	{
		this.clear();
		this.m_values = oFF.XList.create();
	}
	this.m_values.add(fixedValue);
};
oFF.QStylingValueAbstractList.prototype.clear = function()
{
	this.m_variableName = null;
	this.m_values = oFF.XObjectExt.release(this.m_values);
};
oFF.QStylingValueAbstractList.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let origin = other;
	this.clear();
	if (oFF.notNull(origin.m_values))
	{
		this.m_values = oFF.XList.create();
		this.m_values.addAll(origin.m_values);
	}
	this.m_variableName = origin.m_variableName;
};
oFF.QStylingValueAbstractList.prototype.getFixedValues = function()
{
	return this.m_values;
};
oFF.QStylingValueAbstractList.prototype.getVariable = function(variableMerger)
{
	return oFF.isNull(variableMerger) ? null : variableMerger.getVariableOrFallback(this.m_variableName);
};
oFF.QStylingValueAbstractList.prototype.getVariableName = function()
{
	return this.m_variableName;
};
oFF.QStylingValueAbstractList.prototype.isEqualTo = function(other)
{
	let orig = other;
	return oFF.XString.isEqual(this.m_variableName, orig.m_variableName) && oFF.XObjectExt.areEqual(this.m_values, orig.m_values);
};
oFF.QStylingValueAbstractList.prototype.isFixedValue = function()
{
	return oFF.notNull(this.m_values);
};
oFF.QStylingValueAbstractList.prototype.isValueAvailable = function(variableMerger)
{
	return this.getResolvedValues(variableMerger) !== null;
};
oFF.QStylingValueAbstractList.prototype.isVariable = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.m_variableName);
};
oFF.QStylingValueAbstractList.prototype.releaseObject = function()
{
	this.clear();
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QStylingValueAbstractList.prototype.setVariable = function(variable)
{
	this.setVariableName(oFF.isNull(variable) ? null : variable.getName());
};
oFF.QStylingValueAbstractList.prototype.setVariableName = function(variableName)
{
	this.clear();
	this.m_variableName = variableName;
};

oFF.QVizDataPointVariableContainer = function() {};
oFF.QVizDataPointVariableContainer.prototype = new oFF.QModelComponent();
oFF.QVizDataPointVariableContainer.prototype._ff_c = "QVizDataPointVariableContainer";

oFF.QVizDataPointVariableContainer.create = function(context, parent, name, text, invalidator)
{
	let instance = new oFF.QVizDataPointVariableContainer();
	instance.setupModelComponent(context, parent);
	instance.setName(name);
	instance.setText(text);
	instance.setInvalidator(invalidator);
	instance.setup();
	return instance;
};
oFF.QVizDataPointVariableContainer.prototype.m_alertLevelMax = null;
oFF.QVizDataPointVariableContainer.prototype.m_alertLevelMin = null;
oFF.QVizDataPointVariableContainer.prototype.m_axisPathElements = null;
oFF.QVizDataPointVariableContainer.prototype.m_dataPointCategoryName = null;
oFF.QVizDataPointVariableContainer.prototype.m_dataPointCategoryText = null;
oFF.QVizDataPointVariableContainer.prototype.m_exceptionName = null;
oFF.QVizDataPointVariableContainer.prototype.m_invalidator = null;
oFF.QVizDataPointVariableContainer.prototype.m_priority = 0;
oFF.QVizDataPointVariableContainer.prototype.m_stylingVariableHolder = null;
oFF.QVizDataPointVariableContainer.prototype.m_tags = null;
oFF.QVizDataPointVariableContainer.prototype.m_unmatchedAlertLevels = false;
oFF.QVizDataPointVariableContainer.prototype.m_unmatchedExceptions = false;
oFF.QVizDataPointVariableContainer.prototype.m_unmatchedPathElements = false;
oFF.QVizDataPointVariableContainer.prototype.m_unmatchedTags = false;
oFF.QVizDataPointVariableContainer.prototype.m_unmatchedValueSigns = false;
oFF.QVizDataPointVariableContainer.prototype.m_valueSign = null;
oFF.QVizDataPointVariableContainer.prototype.addNewPathElement = function()
{
	let reference = oFF.QVizAxisPathElement.create(this.getContext(), this);
	this.m_axisPathElements.add(reference);
	this.m_unmatchedPathElements = false;
	return reference;
};
oFF.QVizDataPointVariableContainer.prototype.addNewSimpleTypeVariable = function(valueType, name, text, supportsMultipleValues)
{
	return this.m_stylingVariableHolder.addNewSimpleTypeVariable(valueType, name, text, supportsMultipleValues);
};
oFF.QVizDataPointVariableContainer.prototype.addTag = function(tag)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(tag))
	{
		this.m_tags.add(tag);
		this.m_unmatchedTags = false;
	}
};
oFF.QVizDataPointVariableContainer.prototype.clearPathElements = function()
{
	this.m_unmatchedPathElements = false;
	this.m_axisPathElements.clear();
};
oFF.QVizDataPointVariableContainer.prototype.clearTags = function()
{
	this.m_tags.clear();
};
oFF.QVizDataPointVariableContainer.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originObj = other;
	this.m_alertLevelMin = originObj.m_alertLevelMin;
	this.m_alertLevelMax = originObj.m_alertLevelMax;
	this.m_exceptionName = originObj.m_exceptionName;
	this.m_valueSign = originObj.m_valueSign;
	this.m_axisPathElements.clear();
	oFF.XCollectionUtils.forEach(originObj.getPathElements(), (pe) => {
		this.addNewPathElement().copyFrom(pe, flags);
	});
	this.m_unmatchedExceptions = originObj.m_unmatchedExceptions;
	this.m_unmatchedAlertLevels = originObj.m_unmatchedAlertLevels;
	this.m_unmatchedValueSigns = originObj.m_unmatchedValueSigns;
	this.m_unmatchedPathElements = originObj.m_unmatchedPathElements;
	this.m_dataPointCategoryName = originObj.m_dataPointCategoryName;
	this.m_dataPointCategoryText = originObj.m_dataPointCategoryText;
	this.m_tags = originObj.m_tags.createListCopy();
	this.m_unmatchedTags = originObj.m_unmatchedTags;
	this.m_priority = originObj.m_priority;
	this.m_stylingVariableHolder.copyFrom(originObj.m_stylingVariableHolder, flags);
};
oFF.QVizDataPointVariableContainer.prototype.getAlertLevel = function()
{
	return this.m_alertLevelMin === this.m_alertLevelMax ? this.m_alertLevelMin : null;
};
oFF.QVizDataPointVariableContainer.prototype.getAlertLevelMax = function()
{
	return this.m_alertLevelMax;
};
oFF.QVizDataPointVariableContainer.prototype.getAlertLevelMin = function()
{
	return this.m_alertLevelMin;
};
oFF.QVizDataPointVariableContainer.prototype.getDataPointCategoryName = function()
{
	return this.m_dataPointCategoryName;
};
oFF.QVizDataPointVariableContainer.prototype.getDataPointCategoryText = function()
{
	return this.m_dataPointCategoryText;
};
oFF.QVizDataPointVariableContainer.prototype.getException = function()
{
	return oFF.isNull(this.m_exceptionName) || this.getQueryModel() === null || this.getQueryModel().getExceptionManager() === null ? null : this.getQueryModel().getExceptionManager().getByKey(this.m_exceptionName);
};
oFF.QVizDataPointVariableContainer.prototype.getExceptionName = function()
{
	return this.m_exceptionName;
};
oFF.QVizDataPointVariableContainer.prototype.getPathElements = function()
{
	return this.m_axisPathElements;
};
oFF.QVizDataPointVariableContainer.prototype.getPriority = function()
{
	return this.m_priority;
};
oFF.QVizDataPointVariableContainer.prototype.getTags = function()
{
	return this.m_tags;
};
oFF.QVizDataPointVariableContainer.prototype.getValueSign = function()
{
	return this.m_valueSign;
};
oFF.QVizDataPointVariableContainer.prototype.getVariableHolder = function()
{
	return this.m_stylingVariableHolder;
};
oFF.QVizDataPointVariableContainer.prototype.isUnmatchedAlertLevels = function()
{
	return this.m_unmatchedAlertLevels;
};
oFF.QVizDataPointVariableContainer.prototype.isUnmatchedExceptions = function()
{
	return this.m_unmatchedExceptions;
};
oFF.QVizDataPointVariableContainer.prototype.isUnmatchedPathElements = function()
{
	return this.m_unmatchedPathElements;
};
oFF.QVizDataPointVariableContainer.prototype.isUnmatchedTags = function()
{
	return this.m_unmatchedTags;
};
oFF.QVizDataPointVariableContainer.prototype.isUnmatchedValueSigns = function()
{
	return this.m_unmatchedValueSigns;
};
oFF.QVizDataPointVariableContainer.prototype.releaseObject = function()
{
	this.m_exceptionName = null;
	this.m_alertLevelMin = null;
	this.m_alertLevelMax = null;
	this.m_valueSign = null;
	this.m_unmatchedExceptions = false;
	this.m_unmatchedAlertLevels = false;
	this.m_unmatchedValueSigns = false;
	this.m_unmatchedPathElements = false;
	this.m_dataPointCategoryName = null;
	this.m_dataPointCategoryText = null;
	this.m_unmatchedTags = false;
	this.m_tags = oFF.XObjectExt.release(this.m_tags);
	this.m_priority = 0;
	this.m_axisPathElements = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_axisPathElements);
	this.m_stylingVariableHolder = oFF.XObjectExt.release(this.m_stylingVariableHolder);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QVizDataPointVariableContainer.prototype.setAlertLevel = function(alertLevel)
{
	if (oFF.notNull(alertLevel))
	{
		this.m_unmatchedAlertLevels = false;
	}
	this.m_alertLevelMin = alertLevel;
	this.m_alertLevelMax = alertLevel;
};
oFF.QVizDataPointVariableContainer.prototype.setAlertLevelMax = function(alertLevelMax)
{
	if (oFF.notNull(alertLevelMax))
	{
		this.m_unmatchedAlertLevels = false;
	}
	this.m_alertLevelMax = alertLevelMax;
};
oFF.QVizDataPointVariableContainer.prototype.setAlertLevelMin = function(alertLevelMin)
{
	if (oFF.notNull(alertLevelMin))
	{
		this.m_unmatchedAlertLevels = false;
	}
	this.m_alertLevelMin = alertLevelMin;
};
oFF.QVizDataPointVariableContainer.prototype.setDataPointCategoryName = function(dataPointCategoryName)
{
	this.m_dataPointCategoryName = dataPointCategoryName;
};
oFF.QVizDataPointVariableContainer.prototype.setDataPointCategoryText = function(dataPointCategoryText)
{
	this.m_dataPointCategoryText = dataPointCategoryText;
};
oFF.QVizDataPointVariableContainer.prototype.setException = function(exception)
{
	this.m_exceptionName = oFF.isNull(exception) ? null : exception.getName();
};
oFF.QVizDataPointVariableContainer.prototype.setExceptionName = function(exceptionName)
{
	if (oFF.notNull(exceptionName))
	{
		this.m_unmatchedExceptions = false;
	}
	this.m_exceptionName = exceptionName;
};
oFF.QVizDataPointVariableContainer.prototype.setInvalidator = function(invalidator)
{
	this.m_invalidator = invalidator;
};
oFF.QVizDataPointVariableContainer.prototype.setPriority = function(priority)
{
	this.m_priority = priority;
};
oFF.QVizDataPointVariableContainer.prototype.setUnmatchedAlertLevels = function()
{
	this.m_unmatchedAlertLevels = true;
	this.m_alertLevelMax = null;
	this.m_alertLevelMin = null;
};
oFF.QVizDataPointVariableContainer.prototype.setUnmatchedExceptions = function()
{
	this.m_unmatchedExceptions = true;
	this.m_exceptionName = null;
};
oFF.QVizDataPointVariableContainer.prototype.setUnmatchedPathElements = function()
{
	this.m_axisPathElements.clear();
	this.m_unmatchedPathElements = true;
};
oFF.QVizDataPointVariableContainer.prototype.setUnmatchedTags = function()
{
	this.m_unmatchedTags = true;
	this.m_tags.clear();
};
oFF.QVizDataPointVariableContainer.prototype.setUnmatchedValueSigns = function()
{
	this.m_valueSign = null;
	this.m_unmatchedValueSigns = true;
};
oFF.QVizDataPointVariableContainer.prototype.setValueSign = function(valueSign)
{
	if (oFF.notNull(valueSign))
	{
		this.m_unmatchedValueSigns = false;
	}
	this.m_valueSign = valueSign;
};
oFF.QVizDataPointVariableContainer.prototype.setup = function()
{
	oFF.QModelComponent.prototype.setup.call( this );
	this.m_stylingVariableHolder = oFF.QVisualizationVariableHolder.create(this.getContext(), this, this.m_invalidator);
	this.m_axisPathElements = oFF.XList.create();
	this.m_tags = oFF.XList.create();
};

oFF.QVisualizationTemplateLinker = function() {};
oFF.QVisualizationTemplateLinker.prototype = new oFF.QModelComponent();
oFF.QVisualizationTemplateLinker.prototype._ff_c = "QVisualizationTemplateLinker";

oFF.QVisualizationTemplateLinker.create = function(parentNode, invalidator, reformatter)
{
	let instance = new oFF.QVisualizationTemplateLinker();
	instance.setupModelComponent(parentNode.getContext(), parentNode);
	instance.m_linkedDefinitionNames = oFF.XLinkedHashMapByString.create();
	instance.m_linkedDefinitions = oFF.XHashMapByString.create();
	instance.m_invalidator = invalidator;
	instance.m_reformatter = reformatter;
	return instance;
};
oFF.QVisualizationTemplateLinker.getEffectiveLinkedDefinitionName = function(linkDomain, localLinker, globalLinker, templates)
{
	let effectiveDefinitionName = null;
	if (oFF.XObjectExt.isValidObject(localLinker) && localLinker.getLinkedDefinitionNames().containsKey(linkDomain))
	{
		effectiveDefinitionName = localLinker.getLinkedDefinitionName(linkDomain);
	}
	else if (oFF.XObjectExt.isValidObject(globalLinker) && globalLinker.getLinkedDefinitionNames().containsKey(linkDomain))
	{
		effectiveDefinitionName = globalLinker.getLinkedDefinitionName(linkDomain);
	}
	else if (oFF.XObjectExt.isValidObject(templates) && templates.containsKey(linkDomain))
	{
		effectiveDefinitionName = templates.getByKey(linkDomain).getActiveTemplateName();
	}
	return effectiveDefinitionName;
};
oFF.QVisualizationTemplateLinker.getLinkedStylesOrdered = function(localTemplateLinker, globalTemplateLinker, templatesInventory)
{
	let resultList = oFF.XList.create();
	oFF.XCollectionUtils.forEach(localTemplateLinker.getLinkedDefinitions().getKeysAsReadOnlyList(), (ldn) => {
		oFF.XCollectionUtils.addIfNotPresent(resultList, localTemplateLinker.getLinkedDefinition(ldn));
	});
	oFF.XCollectionUtils.forEach(globalTemplateLinker.getLinkedDefinitions().getKeysAsReadOnlyList(), (gdn) => {
		if (localTemplateLinker.getLinkedDefinition(gdn) === null)
		{
			oFF.XCollectionUtils.addIfNotPresent(resultList, globalTemplateLinker.getLinkedDefinition(gdn));
		}
	});
	oFF.XStream.of(templatesInventory).filter((tl) => {
		return localTemplateLinker.getLinkedDefinitions().getByKey(tl.getName()) === null && globalTemplateLinker.getLinkedDefinitions().getByKey(tl.getName()) === null;
	}).sorted(oFF.XComparatorWrapFunction.create((vtl) => {
		return oFF.XIntegerValue.create(vtl.getPriority());
	}, oFF.XComparatorInteger.create())).forEach((ttl) => {
		let templateAreaName = ttl.getName();
		let activeTemplateName = null;
		if (localTemplateLinker.getLinkedDefinitionNames().containsKey(templateAreaName))
		{
			activeTemplateName = localTemplateLinker.getLinkedDefinitionName(templateAreaName);
		}
		else if (globalTemplateLinker.getLinkedDefinitionNames().containsKey(templateAreaName))
		{
			activeTemplateName = globalTemplateLinker.getLinkedDefinitionName(templateAreaName);
		}
		else
		{
			activeTemplateName = ttl.getActiveTemplateName();
		}
		if (oFF.notNull(activeTemplateName))
		{
			oFF.XCollectionUtils.addIfNotNull(resultList, ttl.getByKey(activeTemplateName));
		}
	});
	return resultList;
};
oFF.QVisualizationTemplateLinker.prototype.m_invalidator = null;
oFF.QVisualizationTemplateLinker.prototype.m_linkedDefinitionNames = null;
oFF.QVisualizationTemplateLinker.prototype.m_linkedDefinitions = null;
oFF.QVisualizationTemplateLinker.prototype.m_reformatter = null;
oFF.QVisualizationTemplateLinker.prototype.clearLinkedDefinitionNames = function()
{
	this.m_linkedDefinitionNames.clear();
};
oFF.QVisualizationTemplateLinker.prototype.clearLinkedDefinitions = function()
{
	this.m_linkedDefinitions.clear();
	this.invalidateVisualizationContainer();
	this.markNeedsReapplyFormatting();
};
oFF.QVisualizationTemplateLinker.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let origin = other;
	this.m_linkedDefinitionNames = origin.m_linkedDefinitionNames.createMapByStringCopy();
	this.m_linkedDefinitions = origin.m_linkedDefinitions.createMapByStringCopy();
};
oFF.QVisualizationTemplateLinker.prototype.getLinkedDefinition = function(linkId)
{
	return this.m_linkedDefinitions.getByKey(linkId);
};
oFF.QVisualizationTemplateLinker.prototype.getLinkedDefinitionName = function(linkDomain)
{
	return oFF.isNull(this.m_linkedDefinitions) ? null : this.m_linkedDefinitionNames.getByKey(linkDomain);
};
oFF.QVisualizationTemplateLinker.prototype.getLinkedDefinitionNames = function()
{
	return this.m_linkedDefinitionNames;
};
oFF.QVisualizationTemplateLinker.prototype.getLinkedDefinitions = function()
{
	return this.m_linkedDefinitions;
};
oFF.QVisualizationTemplateLinker.prototype.invalidateVisualizationContainer = function()
{
	if (oFF.notNull(this.m_invalidator))
	{
		this.m_invalidator();
	}
};
oFF.QVisualizationTemplateLinker.prototype.isEmpty = function()
{
	return !oFF.XCollectionUtils.hasElements(this.m_linkedDefinitionNames) && !oFF.XCollectionUtils.hasElements(this.m_linkedDefinitions);
};
oFF.QVisualizationTemplateLinker.prototype.markNeedsReapplyFormatting = function()
{
	if (oFF.notNull(this.m_reformatter))
	{
		this.m_reformatter();
	}
};
oFF.QVisualizationTemplateLinker.prototype.putLinkedDefinition = function(linkId, tableDefinition)
{
	this.m_linkedDefinitionNames.remove(linkId);
	if (oFF.isNull(tableDefinition))
	{
		this.unlinkDefinitionInternal(linkId);
	}
	else
	{
		tableDefinition.addSecondaryParent(this);
		this.m_linkedDefinitions.put(linkId, tableDefinition);
	}
	this.invalidateVisualizationContainer();
	this.markNeedsReapplyFormatting();
};
oFF.QVisualizationTemplateLinker.prototype.putLinkedDefinitionName = function(linkDomain, domainLinkId)
{
	this.unlinkDefinitionInternal(linkDomain);
	this.m_linkedDefinitionNames.put(linkDomain, domainLinkId);
	this.markNeedsReapplyFormatting();
};
oFF.QVisualizationTemplateLinker.prototype.releaseObject = function()
{
	this.m_linkedDefinitionNames = oFF.XObjectExt.release(this.m_linkedDefinitionNames);
	this.m_linkedDefinitions = oFF.XObjectExt.release(this.m_linkedDefinitions);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QVisualizationTemplateLinker.prototype.unlinkDefinition = function(linkId)
{
	this.unlinkDefinitionInternal(linkId);
	this.m_linkedDefinitionNames.remove(linkId);
	this.invalidateVisualizationContainer();
	this.markNeedsReapplyFormatting();
};
oFF.QVisualizationTemplateLinker.prototype.unlinkDefinitionInternal = function(linkDomain)
{
	if (oFF.XCollectionUtils.hasElements(this.m_linkedDefinitions))
	{
		let removedItem = this.m_linkedDefinitions.remove(linkDomain);
		if (oFF.notNull(removedItem))
		{
			removedItem.removeSecondaryParent(this);
		}
	}
};

oFF.QVizDef = function() {};
oFF.QVizDef.prototype = new oFF.QModelComponent();
oFF.QVizDef.prototype._ff_c = "QVizDef";

oFF.QVizDef.create = function(context)
{
	let udh = new oFF.QVizDef();
	udh.setupVizDef(context);
	return udh;
};
oFF.QVizDef.prototype.m_dataBindingType = null;
oFF.QVizDef.prototype.getSemanticBindingType = function()
{
	return this.m_dataBindingType;
};
oFF.QVizDef.prototype.setSemanticBindingType = function(type)
{
	this.m_dataBindingType = type;
};
oFF.QVizDef.prototype.setupVizDef = function(context)
{
	this.setupModelComponent(context, null);
};

oFF.QVizManager = function() {};
oFF.QVizManager.prototype = new oFF.QModelComponent();
oFF.QVizManager.prototype._ff_c = "QVizManager";

oFF.QVizManager.create = function(queryModel)
{
	let object = new oFF.QVizManager();
	object.setupSortManager(queryModel);
	return object;
};
oFF.QVizManager.prototype.m_globalDef = null;
oFF.QVizManager.prototype.m_operations = null;
oFF.QVizManager.prototype.m_vizDef = null;
oFF.QVizManager.prototype.copyVizManager = function(origin)
{
	oFF.QModelComponent.prototype.copyFrom.call( this , origin, null);
};
oFF.QVizManager.prototype.getGlobalDef = function()
{
	return this.m_globalDef;
};
oFF.QVizManager.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.VIZ_MANAGER;
};
oFF.QVizManager.prototype.getVizDef = function()
{
	return this.m_vizDef;
};
oFF.QVizManager.prototype.getVizDefinitions = function()
{
	return this.m_operations;
};
oFF.QVizManager.prototype.releaseObject = function()
{
	this.m_operations = oFF.XObjectExt.release(this.m_operations);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QVizManager.prototype.setGlobalDef = function(globalDef)
{
	this.m_globalDef = globalDef;
};
oFF.QVizManager.prototype.setVizDef = function(vizDef)
{
	this.m_vizDef = vizDef;
};
oFF.QVizManager.prototype.setupSortManager = function(queryModel)
{
	this.setupModelComponent(queryModel, queryModel);
	this.m_operations = oFF.QModelComponentList.createModelComponentList(queryModel, this, true, null);
};

oFF.QWindowFunction = function() {};
oFF.QWindowFunction.prototype = new oFF.QModelComponent();
oFF.QWindowFunction.prototype._ff_c = "QWindowFunction";

oFF.QWindowFunction._createWindowFunction = function(type)
{
	let functions = new oFF.QWindowFunction();
	functions.m_type = type;
	functions.m_notInPartitionDimensions = oFF.XList.create();
	functions.m_sortDimensions = oFF.XList.create();
	return functions;
};
oFF.QWindowFunction.prototype.m_frame = null;
oFF.QWindowFunction.prototype.m_notInPartitionDimensions = null;
oFF.QWindowFunction.prototype.m_sortDimensions = null;
oFF.QWindowFunction.prototype.m_type = null;
oFF.QWindowFunction.prototype.addNotInPartitionDimension = function(name)
{
	this.m_notInPartitionDimensions.add(name);
	this.notifyNodeChanged();
};
oFF.QWindowFunction.prototype.addSortDimension = function(name, direction, nulls)
{
	let sortDimension = oFF.QSortDimension._createSortDimension(name, direction, nulls);
	this.m_sortDimensions.add(sortDimension);
	this.notifyNodeChanged();
};
oFF.QWindowFunction.prototype.clearNotInPartitionDimensions = function()
{
	this.m_notInPartitionDimensions.clear();
	this.notifyNodeChanged();
};
oFF.QWindowFunction.prototype.clearSortDimensions = function()
{
	this.m_sortDimensions.clear();
	this.notifyNodeChanged();
};
oFF.QWindowFunction.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originWindowFunction = other;
	this.m_type = originWindowFunction.getType();
	this.m_sortDimensions = oFF.XCollectionUtils.createListOfClones(originWindowFunction.getSortDimensions());
	this.m_notInPartitionDimensions = originWindowFunction.getNotInPartitionDimensions().createListCopy();
	this.m_frame = oFF.XObjectExt.cloneIfNotNull(originWindowFunction.getFrame());
};
oFF.QWindowFunction.prototype.getFrame = function()
{
	return this.m_frame;
};
oFF.QWindowFunction.prototype.getNotInPartitionDimensions = function()
{
	return this.m_notInPartitionDimensions;
};
oFF.QWindowFunction.prototype.getSortDimensions = function()
{
	return this.m_sortDimensions;
};
oFF.QWindowFunction.prototype.getType = function()
{
	return this.m_type;
};
oFF.QWindowFunction.prototype.releaseObject = function()
{
	this.m_type = null;
	this.m_sortDimensions = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_sortDimensions);
	this.m_notInPartitionDimensions = oFF.XObjectExt.release(this.m_notInPartitionDimensions);
	this.m_frame = oFF.XObjectExt.release(this.m_frame);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QWindowFunction.prototype.removeNotInPartitionDimension = function(name)
{
	if (this.m_notInPartitionDimensions.contains(name))
	{
		this.m_notInPartitionDimensions.removeElement(name);
		this.notifyNodeChanged();
		return true;
	}
	return false;
};
oFF.QWindowFunction.prototype.removeSortDimension = function(name)
{
	let removeIndex = oFF.XCollectionUtils.getIndexByName(this.m_sortDimensions, name);
	if (removeIndex !== -1)
	{
		this.m_sortDimensions.removeAt(removeIndex);
		this.notifyNodeChanged();
		return true;
	}
	return false;
};
oFF.QWindowFunction.prototype.setFrame = function(start, startPreceding, end, endFollowing)
{
	this.m_frame = oFF.QFrame._createFrame(start, startPreceding, end, endFollowing);
	this.notifyNodeChanged();
};
oFF.QWindowFunction.prototype.setType = function(type)
{
	this.m_type = type;
	this.notifyNodeChanged();
};

oFF.QCurrencyTranslationDetails = function() {};
oFF.QCurrencyTranslationDetails.prototype = new oFF.QModelComponent();
oFF.QCurrencyTranslationDetails.prototype._ff_c = "QCurrencyTranslationDetails";

oFF.QCurrencyTranslationDetails.create = function(currencyTranslationManager)
{
	if (oFF.XString.isEqual(oFF.CurrencyTranslationConstants.NO_CURRENCY, currencyTranslationManager.getCurrencyTranslationEnabledType()))
	{
		throw oFF.XException.createIllegalArgumentException("Currency Translation not allowed on this Query.");
	}
	let currencyTranslationDetails = new oFF.QCurrencyTranslationDetails();
	currencyTranslationDetails.setupModelComponent(currencyTranslationManager.getContext(), currencyTranslationManager);
	return currencyTranslationDetails;
};
oFF.QCurrencyTranslationDetails.prototype.m_currencyTranslationName = null;
oFF.QCurrencyTranslationDetails.prototype.m_currencyTranslationOperation = null;
oFF.QCurrencyTranslationDetails.prototype.m_currencyTranslationTarget = null;
oFF.QCurrencyTranslationDetails.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let currencyTranslationDetails = other;
	this.m_currencyTranslationName = currencyTranslationDetails.getCurrencyTranslationName();
	this.m_currencyTranslationTarget = currencyTranslationDetails.getCurrencyTranslationTarget();
	this.m_currencyTranslationOperation = currencyTranslationDetails.getCurrencyTranslationOperation();
};
oFF.QCurrencyTranslationDetails.prototype.getCurrencyTranslationName = function()
{
	return this.m_currencyTranslationName;
};
oFF.QCurrencyTranslationDetails.prototype.getCurrencyTranslationObject = function()
{
	let map = this.getQueryModelBase().getCurrencyTranslationManagerBase().getAvailableCurrencyTranslationObjectsMap();
	if (oFF.notNull(map))
	{
		return map.getByKey(this.m_currencyTranslationName);
	}
	return null;
};
oFF.QCurrencyTranslationDetails.prototype.getCurrencyTranslationOperation = function()
{
	return this.m_currencyTranslationOperation;
};
oFF.QCurrencyTranslationDetails.prototype.getCurrencyTranslationTarget = function()
{
	return this.m_currencyTranslationTarget;
};
oFF.QCurrencyTranslationDetails.prototype.getDateOffset = function()
{
	return 0;
};
oFF.QCurrencyTranslationDetails.prototype.getDateOffsetGranularity = function()
{
	return null;
};
oFF.QCurrencyTranslationDetails.prototype.getErrorHandling = function()
{
	return null;
};
oFF.QCurrencyTranslationDetails.prototype.getFixedCategory = function()
{
	return null;
};
oFF.QCurrencyTranslationDetails.prototype.getFixedRateName = function()
{
	return null;
};
oFF.QCurrencyTranslationDetails.prototype.getFixedRateType = function()
{
	return null;
};
oFF.QCurrencyTranslationDetails.prototype.getFixedRateVersion = function()
{
	return null;
};
oFF.QCurrencyTranslationDetails.prototype.getFixedReferenceDate = function()
{
	return null;
};
oFF.QCurrencyTranslationDetails.prototype.getFixedReferenceDateAsString = function()
{
	return null;
};
oFF.QCurrencyTranslationDetails.prototype.getFixedTargetCurrency = function()
{
	return this.m_currencyTranslationTarget;
};
oFF.QCurrencyTranslationDetails.prototype.getRateNameField = function()
{
	return null;
};
oFF.QCurrencyTranslationDetails.prototype.getRateNameFieldName = function()
{
	return null;
};
oFF.QCurrencyTranslationDetails.prototype.getReferenceDateField = function()
{
	return null;
};
oFF.QCurrencyTranslationDetails.prototype.getReferenceDateFieldName = function()
{
	return null;
};
oFF.QCurrencyTranslationDetails.prototype.getTargetCurrencyField = function()
{
	return null;
};
oFF.QCurrencyTranslationDetails.prototype.getTargetCurrencyFieldName = function()
{
	return null;
};
oFF.QCurrencyTranslationDetails.prototype.getTargetCurrencyVariable = function()
{
	return null;
};
oFF.QCurrencyTranslationDetails.prototype.getTargetCurrencyVariableName = function()
{
	return null;
};
oFF.QCurrencyTranslationDetails.prototype.isApplyDefinedCurrencyTranslation = function()
{
	return oFF.notNull(this.m_currencyTranslationOperation) && this.m_currencyTranslationOperation.isConsiderClientDefinedCurrencyTranslation();
};
oFF.QCurrencyTranslationDetails.prototype.isApplyPredefinedCurrencyTranslation = function()
{
	return oFF.notNull(this.m_currencyTranslationOperation) && this.m_currencyTranslationOperation.isConsiderMetadataDefinedCurrencyTranslation();
};
oFF.QCurrencyTranslationDetails.prototype.isApplyToDefaultCurrencyTranslation = oFF.noSupport;
oFF.QCurrencyTranslationDetails.prototype.isDefaultCurrency = function()
{
	return false;
};
oFF.QCurrencyTranslationDetails.prototype.isFixedRateName = function()
{
	return false;
};
oFF.QCurrencyTranslationDetails.prototype.isMissingRateName = function()
{
	return false;
};
oFF.QCurrencyTranslationDetails.prototype.isMissingReferenceDate = function()
{
	return false;
};
oFF.QCurrencyTranslationDetails.prototype.isMissingTargetCurrency = function()
{
	return false;
};
oFF.QCurrencyTranslationDetails.prototype.isParametersComplete = function()
{
	return !this.isMissingTargetCurrency();
};
oFF.QCurrencyTranslationDetails.prototype.isRateNameField = function()
{
	return false;
};
oFF.QCurrencyTranslationDetails.prototype.isReferenceDateField = function()
{
	return false;
};
oFF.QCurrencyTranslationDetails.prototype.isReferenceDateFixed = function()
{
	return false;
};
oFF.QCurrencyTranslationDetails.prototype.isTargetCurrencyField = function()
{
	return false;
};
oFF.QCurrencyTranslationDetails.prototype.isTargetCurrencyFixed = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.m_currencyTranslationTarget);
};
oFF.QCurrencyTranslationDetails.prototype.isTargetCurrencyVariable = function()
{
	return false;
};
oFF.QCurrencyTranslationDetails.prototype.releaseObject = function()
{
	this.m_currencyTranslationName = null;
	this.m_currencyTranslationTarget = null;
	this.m_currencyTranslationOperation = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QCurrencyTranslationDetails.prototype.requiresRateName = function()
{
	return false;
};
oFF.QCurrencyTranslationDetails.prototype.requiresReferenceDate = function()
{
	return false;
};
oFF.QCurrencyTranslationDetails.prototype.requiresTargetCurrency = function()
{
	let map = this.getQueryModelBase().getCurrencyTranslationManagerBase().getAvailableCurrencyTranslationObjectsMap();
	return oFF.notNull(map) && map.getByKey(this.m_currencyTranslationName) !== null && map.getByKey(this.m_currencyTranslationName).supportsTargetCurrency();
};
oFF.QCurrencyTranslationDetails.prototype.reset = function()
{
	this.setCurrencyTranslationName("");
	this.setCurrencyTranslationOperation(null);
	this.setCurrencyTranslationTarget("");
};
oFF.QCurrencyTranslationDetails.prototype.setApplyDefinedCurrencyTranslation = function(intermediate)
{
	if (intermediate)
	{
		if (this.isApplyPredefinedCurrencyTranslation())
		{
			this.setCurrencyTranslationOperation(oFF.CurrencyTranslationOperation.BOTH);
		}
		else
		{
			this.setCurrencyTranslationOperation(oFF.CurrencyTranslationOperation.TARGET);
		}
	}
	else
	{
		if (this.isApplyPredefinedCurrencyTranslation())
		{
			this.setCurrencyTranslationOperation(oFF.CurrencyTranslationOperation.DEFINITION);
		}
		else
		{
			this.setCurrencyTranslationOperation(oFF.CurrencyTranslationOperation.ORIGINAL);
		}
	}
};
oFF.QCurrencyTranslationDetails.prototype.setApplyPredefinedCurrencyTranslation = function(intermediate)
{
	if (intermediate)
	{
		if (this.isApplyDefinedCurrencyTranslation())
		{
			this.setCurrencyTranslationOperation(oFF.CurrencyTranslationOperation.BOTH);
		}
		else
		{
			this.setCurrencyTranslationOperation(oFF.CurrencyTranslationOperation.DEFINITION);
		}
	}
	else
	{
		if (this.isApplyDefinedCurrencyTranslation())
		{
			this.setCurrencyTranslationOperation(oFF.CurrencyTranslationOperation.TARGET);
		}
		else
		{
			this.setCurrencyTranslationOperation(oFF.CurrencyTranslationOperation.ORIGINAL);
		}
	}
};
oFF.QCurrencyTranslationDetails.prototype.setApplyToDefaultCurrencyTranslation = oFF.noSupport;
oFF.QCurrencyTranslationDetails.prototype.setCurrencyTranslationName = function(currencyTranslationName)
{
	this.m_currencyTranslationName = currencyTranslationName;
	let map = this.getQueryModelBase().getCurrencyTranslationManagerBase().getAvailableCurrencyTranslationObjectsMap();
	let targetCurrency;
	if (oFF.notNull(map) && map.containsKey(currencyTranslationName))
	{
		targetCurrency = map.getByKey(currencyTranslationName).getFixedTargetCurrency();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(targetCurrency))
		{
			this.m_currencyTranslationTarget = targetCurrency;
		}
	}
	this.notifyNodeChanged();
};
oFF.QCurrencyTranslationDetails.prototype.setCurrencyTranslationObject = function(currencyTranslationObject)
{
	this.setCurrencyTranslationName(currencyTranslationObject.getName());
};
oFF.QCurrencyTranslationDetails.prototype.setCurrencyTranslationOperation = function(currencyTranslationOperation)
{
	if (oFF.XString.isEqual(oFF.CurrencyTranslationConstants.POSSIBLE, this.getQueryModel().getCurrencyTranslationManager().getCurrencyTranslationEnabledType()) && (oFF.CurrencyTranslationOperation.BOTH === currencyTranslationOperation || oFF.CurrencyTranslationOperation.DEFINITION === currencyTranslationOperation))
	{
		throw oFF.XException.createIllegalArgumentException("Property CurrencyTranslationEnabled on the Query is 'Possible'. Allowed Operation values are Original or Target. ");
	}
	let oldValue = this.m_currencyTranslationOperation;
	this.m_currencyTranslationOperation = currencyTranslationOperation;
	this.notifyPropertyConstantChanged(oFF.QCurrencyTranslationProperties.QY_CURRENCY_TRANSLATION_OPERATION, oldValue, currencyTranslationOperation);
};
oFF.QCurrencyTranslationDetails.prototype.setCurrencyTranslationTarget = function(currencyTranslationTarget)
{
	this.m_currencyTranslationTarget = currencyTranslationTarget;
	this.notifyNodeChanged();
};
oFF.QCurrencyTranslationDetails.prototype.setDefaultCurrency = oFF.noSupport;
oFF.QCurrencyTranslationDetails.prototype.setDynamicRateType = oFF.noSupport;
oFF.QCurrencyTranslationDetails.prototype.setDynamicRateVersionAndCategory = oFF.noSupport;
oFF.QCurrencyTranslationDetails.prototype.setDynamicReferenceDate = oFF.noSupport;
oFF.QCurrencyTranslationDetails.prototype.setDynamicReferenceDateWithOffsetAndGranularity = oFF.noSupport;
oFF.QCurrencyTranslationDetails.prototype.setErrorHandling = oFF.noSupport;
oFF.QCurrencyTranslationDetails.prototype.setFixedCategory = oFF.noSupport;
oFF.QCurrencyTranslationDetails.prototype.setFixedRateNameByString = oFF.noSupport;
oFF.QCurrencyTranslationDetails.prototype.setFixedRateType = oFF.noSupport;
oFF.QCurrencyTranslationDetails.prototype.setFixedRateVersion = oFF.noSupport;
oFF.QCurrencyTranslationDetails.prototype.setFixedReferenceDateByDateValue = oFF.noSupport;
oFF.QCurrencyTranslationDetails.prototype.setFixedReferenceDateByString = oFF.noSupport;
oFF.QCurrencyTranslationDetails.prototype.setFixedTargetCurrencyByString = function(currencyName)
{
	this.m_currencyTranslationTarget = currencyName;
};
oFF.QCurrencyTranslationDetails.prototype.setRateNameByField = oFF.noSupport;
oFF.QCurrencyTranslationDetails.prototype.setRateNameByFieldName = oFF.noSupport;
oFF.QCurrencyTranslationDetails.prototype.setReferenceDateByField = oFF.noSupport;
oFF.QCurrencyTranslationDetails.prototype.setReferenceDateByFieldName = oFF.noSupport;
oFF.QCurrencyTranslationDetails.prototype.setReferenceDateByFieldNameOffsetAndGranularity = oFF.noSupport;
oFF.QCurrencyTranslationDetails.prototype.setReferenceDateByFieldOffsetAndGranularity = oFF.noSupport;
oFF.QCurrencyTranslationDetails.prototype.setTargetCurrencyByField = oFF.noSupport;
oFF.QCurrencyTranslationDetails.prototype.setTargetCurrencyByFieldName = oFF.noSupport;
oFF.QCurrencyTranslationDetails.prototype.setTargetCurrencyByVariable = oFF.noSupport;
oFF.QCurrencyTranslationDetails.prototype.setTargetCurrencyByVariableName = oFF.noSupport;
oFF.QCurrencyTranslationDetails.prototype.supportsDefaultCurrency = function()
{
	return false;
};
oFF.QCurrencyTranslationDetails.prototype.supportsErrorHandling = function()
{
	return false;
};
oFF.QCurrencyTranslationDetails.prototype.supportsOffsetInDays = function()
{
	return false;
};
oFF.QCurrencyTranslationDetails.prototype.supportsOffsetInMonths = function()
{
	return false;
};
oFF.QCurrencyTranslationDetails.prototype.supportsPlanningParameters = function()
{
	return false;
};
oFF.QCurrencyTranslationDetails.prototype.supportsPredefinedCurrencyTranslation = function()
{
	let enabledType = this.getQueryModel().getCurrencyTranslationManager().getCurrencyTranslationEnabledType();
	return oFF.XString.isEqual(enabledType, oFF.CurrencyTranslationConstants.DEFINED);
};
oFF.QCurrencyTranslationDetails.prototype.supportsRateName = function()
{
	return false;
};
oFF.QCurrencyTranslationDetails.prototype.supportsReferenceDate = function()
{
	return false;
};
oFF.QCurrencyTranslationDetails.prototype.supportsReferenceDateAsField = function()
{
	return false;
};
oFF.QCurrencyTranslationDetails.prototype.supportsTargetCurrency = function()
{
	let map = this.getQueryModelBase().getCurrencyTranslationManagerBase().getAvailableCurrencyTranslationObjectsMap();
	return oFF.notNull(map) && map.getByKey(this.m_currencyTranslationName) !== null && map.getByKey(this.m_currencyTranslationName).requiresTargetCurrency();
};
oFF.QCurrencyTranslationDetails.prototype.supportsTargetCurrencyAsField = function()
{
	return false;
};
oFF.QCurrencyTranslationDetails.prototype.supportsTargetCurrencyAsVariable = function()
{
	return false;
};

oFF.QCurrencyTranslationManager = function() {};
oFF.QCurrencyTranslationManager.prototype = new oFF.QModelComponent();
oFF.QCurrencyTranslationManager.prototype._ff_c = "QCurrencyTranslationManager";

oFF.QCurrencyTranslationManager.create = function(queryModel)
{
	let supportsQueryCurrencyTranslation = queryModel.getModelCapabilities().supportsQueryCurrencyTranslation();
	let supportsMeasureCurrencyTranslation = queryModel.getModelCapabilities().supportsCurrencyTranslation();
	let object = new oFF.QCurrencyTranslationManager();
	object.setupCatalogLists();
	object.setupCurrencyTranslationManager(queryModel);
	if (supportsMeasureCurrencyTranslation)
	{
		object.initializeCurrencyTranslationList();
	}
	if (supportsQueryCurrencyTranslation)
	{
		object.initializeCurrencyTranslationDetailsBW();
	}
	else
	{
		object.initializeMeasure2QueryCurrencyTranslationProxy();
	}
	return object;
};
oFF.QCurrencyTranslationManager.createForModelling = function(cttdFieldName, rateTypeFieldName, rateVersionFieldName, categoryFieldName)
{
	let object = new oFF.QCurrencyTranslationManager();
	object.setupCatalogLists();
	object.setCurrencyTranslationTimeDimensionFieldName(cttdFieldName);
	object.setRateTypeFieldName(rateTypeFieldName);
	object.setRateVersionFieldName(rateVersionFieldName);
	object.setCategoryFieldName(categoryFieldName);
	object.setSupportsExtendedRateNameParameters(true);
	return object;
};
oFF.QCurrencyTranslationManager.prototype.m_activeSyncType = null;
oFF.QCurrencyTranslationManager.prototype.m_availableCOsComplete = false;
oFF.QCurrencyTranslationManager.prototype.m_availableCTOsComplete = false;
oFF.QCurrencyTranslationManager.prototype.m_availableCategories = null;
oFF.QCurrencyTranslationManager.prototype.m_availableCurrencies = null;
oFF.QCurrencyTranslationManager.prototype.m_availableCurrencyTranslations = null;
oFF.QCurrencyTranslationManager.prototype.m_availableCurrencyTranslationsMap = null;
oFF.QCurrencyTranslationManager.prototype.m_availableRateTypes = null;
oFF.QCurrencyTranslationManager.prototype.m_availableRateVersions = null;
oFF.QCurrencyTranslationManager.prototype.m_bwCatalogLoadedListener = null;
oFF.QCurrencyTranslationManager.prototype.m_categoryFieldName = null;
oFF.QCurrencyTranslationManager.prototype.m_currencyDimensionKeyFieldName = null;
oFF.QCurrencyTranslationManager.prototype.m_currencyTranslationDetails = null;
oFF.QCurrencyTranslationManager.prototype.m_currencyTranslationTimeDimensionKeyFieldName = null;
oFF.QCurrencyTranslationManager.prototype.m_currencyTranslationTypeEnabled = null;
oFF.QCurrencyTranslationManager.prototype.m_defaultCurrency = null;
oFF.QCurrencyTranslationManager.prototype.m_legacyMeasureCurrencyTranslationAccountModel = false;
oFF.QCurrencyTranslationManager.prototype.m_maximumNumberOfTranslations = 0;
oFF.QCurrencyTranslationManager.prototype.m_measureCurrencyTranslations = null;
oFF.QCurrencyTranslationManager.prototype.m_query2measureCurrencyTranslationBridge = null;
oFF.QCurrencyTranslationManager.prototype.m_rateTableId = null;
oFF.QCurrencyTranslationManager.prototype.m_rateTypeFieldName = null;
oFF.QCurrencyTranslationManager.prototype.m_rateTypeFromAccountDimension = false;
oFF.QCurrencyTranslationManager.prototype.m_rateVersionFieldName = null;
oFF.QCurrencyTranslationManager.prototype.m_resetCurrencyTranslationDetails = false;
oFF.QCurrencyTranslationManager.prototype.m_supportsExtendedRateNameParameters = false;
oFF.QCurrencyTranslationManager.prototype.addAvailableCategory = function(category)
{
	this.m_availableCategories.add(category);
};
oFF.QCurrencyTranslationManager.prototype.addAvailableCurrency = function(name, text)
{
	if (oFF.isNull(this.m_availableCurrencies))
	{
		this.m_availableCurrencies = oFF.XList.create();
	}
	else
	{
		this.m_availableCurrencies.add(oFF.QCurrencyObject.create(name, text));
	}
};
oFF.QCurrencyTranslationManager.prototype.addAvailableRateType = function(rateType)
{
	this.m_availableRateTypes.add(rateType);
};
oFF.QCurrencyTranslationManager.prototype.addAvailableRateVersion = function(name, text)
{
	this.m_availableRateVersions.add(oFF.QCurrencyObject.create(name, text));
};
oFF.QCurrencyTranslationManager.prototype.addMeasureCurrencyTranslation = function(measureCurrencyTranslation)
{
	this.m_measureCurrencyTranslations.put(measureCurrencyTranslation.getName(), measureCurrencyTranslation);
};
oFF.QCurrencyTranslationManager.prototype.addNewMeasureCurrencyTranslation = function(name, description)
{
	return this.addNewMeasureCurrencyTranslationBase(name, description);
};
oFF.QCurrencyTranslationManager.prototype.addNewMeasureCurrencyTranslationBase = function(name, description)
{
	let currencyTranslation = oFF.QMeasureCurrencyTranslation.createWithName(this.getContext(), this, name, description);
	this.m_measureCurrencyTranslations.put(name, currencyTranslation);
	this.m_availableCurrencyTranslationsMap.put(name, currencyTranslation);
	this.m_availableCurrencyTranslations.add(currencyTranslation);
	return currencyTranslation;
};
oFF.QCurrencyTranslationManager.prototype.addNewModellingMeasureCurrencyTranslation = function(name, description)
{
	return this.addNewMeasureCurrencyTranslationBase(name, description);
};
oFF.QCurrencyTranslationManager.prototype.clearAvailableCategories = function()
{
	if (oFF.isNull(this.m_availableCategories))
	{
		this.m_availableCategories = oFF.XList.create();
	}
	else
	{
		this.m_availableCategories.clear();
	}
};
oFF.QCurrencyTranslationManager.prototype.clearAvailableCurrencies = function()
{
	if (oFF.isNull(this.m_availableCurrencies))
	{
		this.m_availableCurrencies = oFF.XList.create();
	}
	else
	{
		this.m_availableCurrencies.clear();
	}
};
oFF.QCurrencyTranslationManager.prototype.clearAvailableRateTypes = function()
{
	if (oFF.isNull(this.m_availableRateTypes))
	{
		this.m_availableRateTypes = oFF.XList.create();
	}
	else
	{
		this.m_availableRateTypes.clear();
	}
};
oFF.QCurrencyTranslationManager.prototype.clearAvailableRateVersions = function()
{
	if (oFF.isNull(this.m_availableRateVersions))
	{
		this.m_availableRateVersions = oFF.XList.create();
	}
	else
	{
		this.m_availableRateVersions.clear();
	}
};
oFF.QCurrencyTranslationManager.prototype.clearMeasureCurrencyTranslations = function()
{
	this.m_measureCurrencyTranslations.clear();
};
oFF.QCurrencyTranslationManager.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let i;
	let originCurrencyTranslationManager = other;
	this.m_legacyMeasureCurrencyTranslationAccountModel = originCurrencyTranslationManager.m_legacyMeasureCurrencyTranslationAccountModel;
	this.m_supportsExtendedRateNameParameters = originCurrencyTranslationManager.m_supportsExtendedRateNameParameters;
	this.m_rateTypeFromAccountDimension = originCurrencyTranslationManager.m_rateTypeFromAccountDimension;
	this.m_currencyTranslationTypeEnabled = originCurrencyTranslationManager.m_currencyTranslationTypeEnabled;
	if (oFF.notNull(originCurrencyTranslationManager.m_currencyTranslationDetails))
	{
		if (oFF.isNull(this.m_currencyTranslationDetails))
		{
			this.initializeCurrencyTranslationDetailsBW();
		}
		this.m_currencyTranslationDetails.copyFrom(originCurrencyTranslationManager.m_currencyTranslationDetails, flags);
	}
	if (oFF.notNull(originCurrencyTranslationManager.m_measureCurrencyTranslations))
	{
		if (oFF.isNull(this.m_measureCurrencyTranslations))
		{
			this.initializeCurrencyTranslationList();
		}
		this.m_measureCurrencyTranslations.clear();
		let keys = originCurrencyTranslationManager.m_measureCurrencyTranslations.getKeysAsReadOnlyList();
		for (i = 0; i < keys.size(); i++)
		{
			let key = keys.get(i);
			let originTranslation = originCurrencyTranslationManager.m_measureCurrencyTranslations.getByKey(key);
			this.addNewMeasureCurrencyTranslationBase(key, originTranslation.getText()).copyFrom(originTranslation, flags);
		}
	}
	if (oFF.notNull(originCurrencyTranslationManager.m_query2measureCurrencyTranslationBridge))
	{
		if (oFF.isNull(this.m_query2measureCurrencyTranslationBridge))
		{
			this.initializeMeasure2QueryCurrencyTranslationProxy();
		}
		this.m_query2measureCurrencyTranslationBridge.copyFrom(originCurrencyTranslationManager.m_query2measureCurrencyTranslationBridge, flags);
	}
	this.m_maximumNumberOfTranslations = originCurrencyTranslationManager.m_maximumNumberOfTranslations;
	this.m_currencyTranslationTimeDimensionKeyFieldName = originCurrencyTranslationManager.m_currencyTranslationTimeDimensionKeyFieldName;
	this.m_currencyDimensionKeyFieldName = originCurrencyTranslationManager.m_currencyDimensionKeyFieldName;
	this.m_rateTypeFieldName = originCurrencyTranslationManager.m_rateTypeFieldName;
	this.m_rateVersionFieldName = originCurrencyTranslationManager.m_rateVersionFieldName;
	this.m_categoryFieldName = originCurrencyTranslationManager.m_categoryFieldName;
	this.m_defaultCurrency = originCurrencyTranslationManager.m_defaultCurrency;
	if (oFF.notNull(originCurrencyTranslationManager.m_availableCurrencies))
	{
		this.m_availableCurrencies = oFF.XList.create();
		this.m_availableCurrencies.addAll(originCurrencyTranslationManager.m_availableCurrencies);
	}
	if (oFF.notNull(originCurrencyTranslationManager.m_availableRateTypes))
	{
		this.m_availableRateTypes = oFF.XList.create();
		this.m_availableRateTypes.addAll(originCurrencyTranslationManager.m_availableRateTypes);
	}
	if (oFF.notNull(originCurrencyTranslationManager.m_availableRateVersions))
	{
		this.m_availableRateVersions = oFF.XList.create();
		this.m_availableRateVersions.addAll(originCurrencyTranslationManager.m_availableRateVersions);
	}
	if (oFF.notNull(originCurrencyTranslationManager.m_availableCategories))
	{
		this.m_availableCategories = oFF.XList.create();
		this.m_availableCategories.addAll(originCurrencyTranslationManager.m_availableCategories);
	}
	if (oFF.notNull(originCurrencyTranslationManager.m_availableCurrencyTranslations))
	{
		this.m_availableCurrencyTranslations = oFF.XList.create();
		this.m_availableCurrencyTranslations.addAll(originCurrencyTranslationManager.m_availableCurrencyTranslations);
	}
	if (oFF.notNull(originCurrencyTranslationManager.m_availableCurrencyTranslationsMap))
	{
		this.m_availableCurrencyTranslationsMap = oFF.XHashMapByString.create();
		this.m_availableCurrencyTranslationsMap.putAll(originCurrencyTranslationManager.m_availableCurrencyTranslationsMap);
	}
	this.m_rateTableId = originCurrencyTranslationManager.m_rateTableId;
};
oFF.QCurrencyTranslationManager.prototype.deriveRateTypeFromAccount = function()
{
	return this.m_rateTypeFromAccountDimension;
};
oFF.QCurrencyTranslationManager.prototype.getAvailableCategories = function()
{
	return this.m_availableCategories;
};
oFF.QCurrencyTranslationManager.prototype.getAvailableCurrencies = function()
{
	return this.m_availableCurrencies;
};
oFF.QCurrencyTranslationManager.prototype.getAvailableCurrencyTranslationObjects = function()
{
	return this.m_availableCurrencyTranslations;
};
oFF.QCurrencyTranslationManager.prototype.getAvailableCurrencyTranslationObjectsMap = function()
{
	return this.m_availableCurrencyTranslationsMap;
};
oFF.QCurrencyTranslationManager.prototype.getAvailableRateNames = function()
{
	return null;
};
oFF.QCurrencyTranslationManager.prototype.getAvailableRateTypes = function()
{
	return this.m_availableRateTypes;
};
oFF.QCurrencyTranslationManager.prototype.getAvailableRateVersions = function()
{
	return this.m_availableRateVersions;
};
oFF.QCurrencyTranslationManager.prototype.getCategoryFieldName = function()
{
	return this.m_categoryFieldName;
};
oFF.QCurrencyTranslationManager.prototype.getCurrencyDimensionKeyFieldName = function()
{
	return this.m_currencyDimensionKeyFieldName;
};
oFF.QCurrencyTranslationManager.prototype.getCurrencyRateTableId = function()
{
	return this.m_rateTableId;
};
oFF.QCurrencyTranslationManager.prototype.getCurrencyTranslationCrossCalculation = function(currencyMeasureAlias)
{
	let measureDimension = this.getQueryModel().getMeasureDimension();
	return measureDimension.getPlaceholderIdByAlias(currencyMeasureAlias);
};
oFF.QCurrencyTranslationManager.prototype.getCurrencyTranslationDetails = function()
{
	return this.m_currencyTranslationDetails;
};
oFF.QCurrencyTranslationManager.prototype.getCurrencyTranslationDetailsReset = function()
{
	return this.m_resetCurrencyTranslationDetails;
};
oFF.QCurrencyTranslationManager.prototype.getCurrencyTranslationEnabledType = function()
{
	return this.m_currencyTranslationTypeEnabled;
};
oFF.QCurrencyTranslationManager.prototype.getDateField = function(dimension)
{
	let fields = dimension.getFields();
	let size = fields.size();
	for (let i = 0; i < size; i++)
	{
		let field = fields.getFieldAt(i);
		if (field.getValueType() === oFF.XValueType.DATE)
		{
			return field;
		}
	}
	return dimension.getKeyField();
};
oFF.QCurrencyTranslationManager.prototype.getDefaultCurrency = function()
{
	return this.m_defaultCurrency;
};
oFF.QCurrencyTranslationManager.prototype.getDefaultMeasureCurrencyTranslation = function()
{
	return this.getDefaultMeasureCurrencyTranslationBase();
};
oFF.QCurrencyTranslationManager.prototype.getDefaultMeasureCurrencyTranslationBase = function()
{
	if (oFF.notNull(this.m_query2measureCurrencyTranslationBridge) && oFF.XStringUtils.isNotNullAndNotEmpty(this.m_query2measureCurrencyTranslationBridge.getCurrencyTranslationName()) && this.m_query2measureCurrencyTranslationBridge.isApplyDefinedCurrencyTranslation())
	{
		return this.m_query2measureCurrencyTranslationBridge.getMeasureCurrencyTranslation();
	}
	return null;
};
oFF.QCurrencyTranslationManager.prototype.getDefaultReferenceDateFieldName = function()
{
	return this.m_currencyTranslationTimeDimensionKeyFieldName;
};
oFF.QCurrencyTranslationManager.prototype.getMaxNumberOfTranslations = function()
{
	return this.m_maximumNumberOfTranslations;
};
oFF.QCurrencyTranslationManager.prototype.getMeasureCurrencyTranslation = function(currencyTranslationName)
{
	return oFF.isNull(currencyTranslationName) ? null : this.m_measureCurrencyTranslations.getByKey(currencyTranslationName);
};
oFF.QCurrencyTranslationManager.prototype.getMeasureCurrencyTranslationModelling = function(currencyTranslationName)
{
	return oFF.isNull(currencyTranslationName) ? null : this.m_measureCurrencyTranslations.getByKey(currencyTranslationName);
};
oFF.QCurrencyTranslationManager.prototype.getMeasureCurrencyTranslations = function()
{
	return oFF.isNull(this.m_measureCurrencyTranslations) ? null : this.m_measureCurrencyTranslations.getValuesAsReadOnlyList();
};
oFF.QCurrencyTranslationManager.prototype.getMeasureCurrencyTranslationsForInaData = function()
{
	let resultList = oFF.XList.create();
	if (!this.isLegacyMeasureCurrencyTranslationAccountModel())
	{
		let defaultCurrencyTranslation = this.getDefaultMeasureCurrencyTranslationBase();
		let structureMembers = this.getQueryModel().getMeasureDimension().getAllStructureMembers();
		let size = structureMembers.size();
		let uniqSet = oFF.XHashSetOfString.create();
		for (let i = 0; i < size; i++)
		{
			let cuStMe = structureMembers.get(i);
			let currencyTranslation = this.getMeasureCurrencyTranslation(cuStMe.getCurrencyTranslationName());
			if (oFF.isNull(currencyTranslation) && (cuStMe.getUnitType() === oFF.UnitType.CURRENCY || !this.getModelCapabilities().supportsCustomMeasuresInMetadata()))
			{
				currencyTranslation = defaultCurrencyTranslation;
			}
			if (oFF.notNull(currencyTranslation) && !currencyTranslation.isMetadataDefined())
			{
				if (!currencyTranslation.isParametersComplete())
				{
					let missing = oFF.XStringBuffer.create();
					if (currencyTranslation.isMissingTargetCurrency())
					{
						missing.append(", Target Currency");
					}
					if (currencyTranslation.isMissingReferenceDate())
					{
						missing.append(", Reference Date");
					}
					if (currencyTranslation.isMissingRateName())
					{
						missing.append(", Rate Name");
					}
					let missingHint = "";
					let missingLength = missing.length();
					if (missingLength > 2)
					{
						missingHint = oFF.XString.substring(missing.toString(), 1, missingLength);
					}
					throw oFF.XException.createIllegalStateException(oFF.XStringUtils.concatenate5("Currency Translation with name: ", currencyTranslation.getName(), " not fully specified. Please check the parameters", missingHint, "."));
				}
				this.handleInaDataCurrencyTranslationMeasure(resultList, uniqSet, currencyTranslation, cuStMe);
			}
		}
	}
	return resultList;
};
oFF.QCurrencyTranslationManager.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.CURRENCY_TRANSLATION_MANAGER;
};
oFF.QCurrencyTranslationManager.prototype.getQuery2MeasureCurrencyTranslationBridge = function()
{
	return this.m_query2measureCurrencyTranslationBridge;
};
oFF.QCurrencyTranslationManager.prototype.getQueryCurrencyTranslation = function()
{
	if (oFF.notNull(this.m_currencyTranslationDetails))
	{
		return this.m_currencyTranslationDetails;
	}
	if (oFF.notNull(this.m_query2measureCurrencyTranslationBridge))
	{
		return this.m_query2measureCurrencyTranslationBridge;
	}
	return null;
};
oFF.QCurrencyTranslationManager.prototype.getRateTypeFieldName = function()
{
	return this.m_rateTypeFieldName;
};
oFF.QCurrencyTranslationManager.prototype.getRateVersionFieldName = function()
{
	return this.m_rateVersionFieldName;
};
oFF.QCurrencyTranslationManager.prototype.handleInaDataCurrencyTranslationMeasure = function(resultList, uniqSet, currencyTranslation, structureMember)
{
	if (oFF.notNull(currencyTranslation) && !currencyTranslation.isIgnore())
	{
		let mappedName = currencyTranslation.getMappedName(structureMember.getRuntimeRateType());
		if (!uniqSet.contains(mappedName))
		{
			uniqSet.add(mappedName);
			if (oFF.XString.isEqual(mappedName, currencyTranslation.getName()))
			{
				resultList.add(currencyTranslation);
			}
			else
			{
				let mappedInstance = oFF.QMeasureCurrencyTranslation.createWithName(this.getContext(), null, mappedName, mappedName);
				mappedInstance.copyFrom(currencyTranslation, null);
				mappedInstance.setName(mappedName);
				mappedInstance.setFixedRateType(structureMember.getRuntimeRateType());
				resultList.add(mappedInstance);
			}
		}
	}
};
oFF.QCurrencyTranslationManager.prototype.initializeCurrencyTranslationDetailsBW = function()
{
	this.m_currencyTranslationDetails = oFF.QCurrencyTranslationDetails.create(this);
};
oFF.QCurrencyTranslationManager.prototype.initializeCurrencyTranslationList = function()
{
	this.m_measureCurrencyTranslations = oFF.XHashMapByString.create();
};
oFF.QCurrencyTranslationManager.prototype.initializeLegacyCurrencyTranslation = function(legacyCurrencyTranslation)
{
	this.m_legacyMeasureCurrencyTranslationAccountModel = legacyCurrencyTranslation;
};
oFF.QCurrencyTranslationManager.prototype.initializeMeasure2QueryCurrencyTranslationProxy = function()
{
	this.m_query2measureCurrencyTranslationBridge = oFF.QMeasure2QueryCurrencyTranslation.createFromMeasureCurrencyTranslation(this.getContext(), this);
};
oFF.QCurrencyTranslationManager.prototype.isLegacyMeasureCurrencyTranslationAccountModel = function()
{
	return this.m_legacyMeasureCurrencyTranslationAccountModel;
};
oFF.QCurrencyTranslationManager.prototype.onQueryExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	oFF.MessageUtil.checkNoError(extResult);
	let rows = resultSetContainer.getCursorResultSet().getCursorRowsAxis();
	let name;
	let text;
	let target;
	let fieldValue;
	if (customIdentifier === oFF.MetaObjectType.CURRENCY_TRANSLATION)
	{
		this.m_availableCurrencyTranslations.clear();
		while (rows.hasNextTuple())
		{
			rows.nextTuple();
			name = "";
			text = "";
			target = "";
			while (rows.hasNextTupleElement())
			{
				rows.nextTupleElement();
				while (rows.hasNextFieldValue())
				{
					fieldValue = rows.nextFieldValue();
					switch (fieldValue.getField().getName())
					{
						case "Name.KEY":
							name = fieldValue.getString();
							break;

						case "Name.LONG_TEXT":
							text = fieldValue.getString();
							break;

						case "Target.KEY":
							target = fieldValue.getString();
							break;
					}
				}
			}
			this.m_availableCurrencyTranslationsMap.put(name, oFF.QCurrencyTranslationObject.create(name, text, target));
			this.m_availableCurrencyTranslations.add(oFF.QCurrencyTranslationObject.create(name, text, target));
		}
		this.m_availableCTOsComplete = true;
	}
	else if (customIdentifier === oFF.MetaObjectType.CURRENCY)
	{
		this.m_availableCurrencies.clear();
		while (rows.hasNextTuple())
		{
			rows.nextTuple();
			name = "";
			text = "";
			while (rows.hasNextTupleElement())
			{
				rows.nextTupleElement();
				while (rows.hasNextFieldValue())
				{
					fieldValue = rows.nextFieldValue();
					switch (fieldValue.getField().getName())
					{
						case "Currency.KEY":
							name = fieldValue.getString();
							break;

						case "Currency.LONG_TEXT":
							text = fieldValue.getString();
							break;
					}
				}
			}
			this.m_availableCurrencies.add(oFF.QCurrencyObject.create(name, text));
		}
		this.m_availableCOsComplete = true;
	}
	if (this.m_availableCTOsComplete && this.m_availableCOsComplete && oFF.notNull(this.m_bwCatalogLoadedListener))
	{
		this.m_bwCatalogLoadedListener.onCatalogsLoaded();
		this.m_bwCatalogLoadedListener = null;
	}
};
oFF.QCurrencyTranslationManager.prototype.onQueryManagerCreated = function(extResult, queryManager, customIdentifier)
{
	oFF.MessageUtil.checkNoError(extResult);
	let currencyTranslationQueryManager = extResult.getData();
	currencyTranslationQueryManager.getClientInfo().copyFromContext(this.getQueryManager());
	currencyTranslationQueryManager.processQueryExecution(this.m_activeSyncType, this, customIdentifier);
};
oFF.QCurrencyTranslationManager.prototype.postImportInitialization = function()
{
	let i;
	let size;
	let field;
	let fieldsList;
	if (oFF.XStringUtils.isNullOrEmpty(this.m_rateTypeFieldName))
	{
		let accountDimension = this.getQueryModel().getDimensionByType(oFF.DimensionType.ACCOUNT);
		if (oFF.notNull(accountDimension))
		{
			fieldsList = accountDimension.getFields();
			size = fieldsList.size();
			for (i = 0; i < size; i++)
			{
				field = fieldsList.get(i);
				if (oFF.XString.isEqual(field.getSemanticType(), oFF.CurrencyTranslationConstants.SAC_RATE_TYPE))
				{
					this.m_rateTypeFieldName = field.getName();
					break;
				}
			}
		}
	}
	if (oFF.XStringUtils.isNullOrEmpty(this.m_rateVersionFieldName) || oFF.XStringUtils.isNullOrEmpty(this.m_categoryFieldName))
	{
		let versionDimension = this.getQueryModel().getVersionDimension();
		if (oFF.notNull(versionDimension))
		{
			fieldsList = versionDimension.getFields();
			size = fieldsList.size();
			for (i = 0; i < size; i++)
			{
				field = fieldsList.get(i);
				if (oFF.XString.isEqual(field.getSemanticType(), oFF.CurrencyTranslationConstants.SAC_RATE_VERSION))
				{
					this.m_rateVersionFieldName = field.getName();
					if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_categoryFieldName))
					{
						break;
					}
				}
				else if (oFF.XString.isEqual(field.getSemanticType(), oFF.CurrencyTranslationConstants.SAC_CURRENCY_CONVERSION_CATEGORY))
				{
					this.m_categoryFieldName = field.getName();
					if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_rateVersionFieldName))
					{
						break;
					}
				}
			}
		}
	}
};
oFF.QCurrencyTranslationManager.prototype.releaseObject = function()
{
	this.m_currencyTranslationDetails = oFF.XObjectExt.release(this.m_currencyTranslationDetails);
	this.m_measureCurrencyTranslations = oFF.XObjectExt.release(this.m_measureCurrencyTranslations);
	this.m_query2measureCurrencyTranslationBridge = oFF.XObjectExt.release(this.m_query2measureCurrencyTranslationBridge);
	this.m_availableCurrencyTranslations = oFF.XObjectExt.release(this.m_availableCurrencyTranslations);
	this.m_availableCurrencies = oFF.XObjectExt.release(this.m_availableCurrencies);
	this.m_availableCategories = oFF.XObjectExt.release(this.m_availableCategories);
	this.m_availableRateTypes = oFF.XObjectExt.release(this.m_availableRateTypes);
	this.m_availableRateVersions = oFF.XObjectExt.release(this.m_availableRateVersions);
	this.m_defaultCurrency = null;
	this.m_currencyTranslationTypeEnabled = null;
	this.m_legacyMeasureCurrencyTranslationAccountModel = false;
	this.m_currencyTranslationTimeDimensionKeyFieldName = null;
	this.m_currencyDimensionKeyFieldName = null;
	this.m_rateTypeFieldName = null;
	this.m_rateVersionFieldName = null;
	this.m_categoryFieldName = null;
	this.m_supportsExtendedRateNameParameters = false;
	this.m_maximumNumberOfTranslations = -1;
	this.m_rateTypeFromAccountDimension = false;
	this.m_rateTableId = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QCurrencyTranslationManager.prototype.removeMeasureCurrencyTranslationByName = function(name)
{
	this.m_measureCurrencyTranslations.remove(name);
};
oFF.QCurrencyTranslationManager.prototype.resetCurrencyTranslationDetails = function()
{
	let currencyTranslationDetails = this.getCurrencyTranslationDetails();
	if (oFF.notNull(currencyTranslationDetails))
	{
		currencyTranslationDetails.reset();
		this.m_resetCurrencyTranslationDetails = true;
	}
};
oFF.QCurrencyTranslationManager.prototype.setCategoryFieldName = function(fieldName)
{
	this.m_categoryFieldName = fieldName;
};
oFF.QCurrencyTranslationManager.prototype.setCurrencyDimensionName = function(dimName)
{
	let dimension = this.getQueryModel().getDimensionByName(dimName);
	if (oFF.notNull(dimension))
	{
		this.m_currencyDimensionKeyFieldName = dimension.getKeyField().getName();
	}
};
oFF.QCurrencyTranslationManager.prototype.setCurrencyRateTableId = function(rateTableId)
{
	this.m_rateTableId = rateTableId;
};
oFF.QCurrencyTranslationManager.prototype.setCurrencyTranslationDetails = function(currencyTranslationDetails)
{
	if (!this.getModelCapabilities().supportsQueryCurrencyTranslation())
	{
		throw oFF.XException.createIllegalArgumentException("Capability QueryCurrencyTranslation not supported.");
	}
	this.m_currencyTranslationDetails = currencyTranslationDetails;
};
oFF.QCurrencyTranslationManager.prototype.setCurrencyTranslationDetailsReset = function(resetCurrencyTranslationDetails)
{
	this.m_resetCurrencyTranslationDetails = resetCurrencyTranslationDetails;
};
oFF.QCurrencyTranslationManager.prototype.setCurrencyTranslationEnabledProperty = function(currencyTranslationEnabled)
{
	this.m_currencyTranslationTypeEnabled = currencyTranslationEnabled;
};
oFF.QCurrencyTranslationManager.prototype.setCurrencyTranslationTimeDimensionFieldName = function(cttdFieldName)
{
	this.m_currencyTranslationTimeDimensionKeyFieldName = cttdFieldName;
};
oFF.QCurrencyTranslationManager.prototype.setCurrencyTranslationTimeDimensionName = function(dimName)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(dimName))
	{
		let cttd = this.getQueryModel().getDimensionByName(dimName);
		if (oFF.notNull(cttd))
		{
			this.m_currencyTranslationTimeDimensionKeyFieldName = this.getDateField(cttd).getName();
		}
	}
};
oFF.QCurrencyTranslationManager.prototype.setDefaultCurrency = function(defaultCurrency)
{
	this.m_defaultCurrency = defaultCurrency;
};
oFF.QCurrencyTranslationManager.prototype.setDeriveRateTypeFromAccount = function(rateTypeFromAccount)
{
	this.m_rateTypeFromAccountDimension = rateTypeFromAccount;
};
oFF.QCurrencyTranslationManager.prototype.setMaxNumberOfTranslations = function(maximumNumber)
{
	let oldValue = this.m_maximumNumberOfTranslations;
	this.m_maximumNumberOfTranslations = maximumNumber;
	this.notifyPropertyIntegerChanged(oFF.QCurrencyTranslationProperties.QY_MAX_NUMBER_OF_CONVERSIONS, oldValue, maximumNumber);
};
oFF.QCurrencyTranslationManager.prototype.setRateTypeFieldName = function(fieldName)
{
	this.m_rateTypeFieldName = fieldName;
};
oFF.QCurrencyTranslationManager.prototype.setRateVersionFieldName = function(fieldName)
{
	this.m_rateVersionFieldName = fieldName;
};
oFF.QCurrencyTranslationManager.prototype.setSupportsExtendedRateNameParameters = function(extendedRateType)
{
	this.m_supportsExtendedRateNameParameters = extendedRateType;
};
oFF.QCurrencyTranslationManager.prototype.setupBwCatalogs = function(syncType, listener)
{
	if (!this.getModelCapabilities().supportsQueryCurrencyTranslation() && this.getModelCapabilities().supportsCurrencyTranslation() && oFF.notNull(listener))
	{
		listener.onCatalogsLoaded();
	}
	else if (this.m_availableCOsComplete && this.m_availableCTOsComplete && oFF.notNull(listener))
	{
		listener.onCatalogsLoaded();
	}
	else if (!this.m_availableCTOsComplete && !this.m_availableCOsComplete)
	{
		this.m_bwCatalogLoadedListener = listener;
		this.setupCatalog(oFF.MetaObjectType.CURRENCY_TRANSLATION, syncType);
		this.setupCatalog(oFF.MetaObjectType.CURRENCY, syncType);
	}
};
oFF.QCurrencyTranslationManager.prototype.setupCatalog = function(metaObjectType, syncType)
{
	this.m_activeSyncType = syncType;
	let currencyTranslationDataSource = oFF.QFactory.createDataSourceWithType(metaObjectType, "$$DataSource$$");
	let currencyTranslationServiceConfig = oFF.QueryServiceConfig.createWithDataSource(this.getApplication(), this.getQueryModel().getSystemName(), currencyTranslationDataSource);
	currencyTranslationServiceConfig.getClientInfo().copyFromContext(this.getQueryManager());
	currencyTranslationServiceConfig.processQueryManagerCreation(this.m_activeSyncType, this, metaObjectType);
};
oFF.QCurrencyTranslationManager.prototype.setupCatalogLists = function()
{
	this.m_measureCurrencyTranslations = oFF.XHashMapByString.create();
	this.m_availableCurrencyTranslationsMap = oFF.XHashMapByString.create();
	this.m_availableCurrencyTranslations = oFF.XList.create();
	this.m_availableCurrencies = oFF.XList.create();
};
oFF.QCurrencyTranslationManager.prototype.setupCurrencyTranslationManager = function(queryModel)
{
	this.setupModelComponent(queryModel, queryModel);
};
oFF.QCurrencyTranslationManager.prototype.shouldExportInAList = function(mode)
{
	if (mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY) || this.isLegacyMeasureCurrencyTranslationAccountModel())
	{
		return false;
	}
	return oFF.XCollectionUtils.hasElements(this.m_measureCurrencyTranslations) || this.getDefaultMeasureCurrencyTranslation() !== null;
};
oFF.QCurrencyTranslationManager.prototype.shouldExportInAStructure = function(mode)
{
	if (mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY) && (oFF.XCollectionUtils.hasElements(this.m_measureCurrencyTranslations) || this.getDefaultMeasureCurrencyTranslation() !== null || oFF.notNull(this.m_currencyTranslationDetails)))
	{
		return true;
	}
	if (oFF.notNull(this.m_currencyTranslationDetails) && (this.m_resetCurrencyTranslationDetails || oFF.XStringUtils.isNotNullAndNotEmpty(this.m_currencyTranslationDetails.getCurrencyTranslationName())))
	{
		return true;
	}
	return false;
};
oFF.QCurrencyTranslationManager.prototype.supportsCurrencyTranslation = function()
{
	return this.isLegacyMeasureCurrencyTranslationAccountModel() || this.supportsMeasureBasedCurrencyTranslation();
};
oFF.QCurrencyTranslationManager.prototype.supportsEpmModelledCurrencyTranslation = function()
{
	return this.isLegacyMeasureCurrencyTranslationAccountModel() || this.supportsExtendedRateNameParameters();
};
oFF.QCurrencyTranslationManager.prototype.supportsExtendedRateNameParameters = function()
{
	return this.m_supportsExtendedRateNameParameters;
};
oFF.QCurrencyTranslationManager.prototype.supportsGlobalQueryCurrencyTranslation = function()
{
	let modelCapabilities = this.getModelCapabilities();
	return modelCapabilities.supportsQueryCurrencyTranslation() || modelCapabilities.supportsCustomMeasuresInMetadata();
};
oFF.QCurrencyTranslationManager.prototype.supportsMeasureBasedCurrencyTranslation = function()
{
	return this.getModelCapabilities().supportsCurrencyTranslation();
};
oFF.QCurrencyTranslationManager.prototype.supportsSimpleFixedTargetCurrencyTranslation = function()
{
	if (this.isLegacyMeasureCurrencyTranslationAccountModel() && this.supportsGlobalQueryCurrencyTranslation())
	{
		let queryCurrencyTranslation = this.getQueryCurrencyTranslation();
		if (oFF.notNull(queryCurrencyTranslation))
		{
			return !queryCurrencyTranslation.requiresReferenceDate() && !queryCurrencyTranslation.requiresRateName();
		}
	}
	return false;
};

oFF.QMeasure2QueryCurrencyTranslation = function() {};
oFF.QMeasure2QueryCurrencyTranslation.prototype = new oFF.QModelComponent();
oFF.QMeasure2QueryCurrencyTranslation.prototype._ff_c = "QMeasure2QueryCurrencyTranslation";

oFF.QMeasure2QueryCurrencyTranslation.createFromMeasureCurrencyTranslation = function(context, modelComponentBase)
{
	let newInstance = new oFF.QMeasure2QueryCurrencyTranslation();
	newInstance.setupModelComponent(context, modelComponentBase);
	newInstance.setupOperationProxy(context, modelComponentBase);
	return newInstance;
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.m_applyDefinedCurrencyTranslation = false;
oFF.QMeasure2QueryCurrencyTranslation.prototype.m_applyToDefaultCurrencyTranslation = false;
oFF.QMeasure2QueryCurrencyTranslation.prototype.m_currencyTranslationName = null;
oFF.QMeasure2QueryCurrencyTranslation.prototype.m_measureCurrencyTranslation = null;
oFF.QMeasure2QueryCurrencyTranslation.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let origin = other;
	this.m_currencyTranslationName = origin.m_currencyTranslationName;
	this.m_measureCurrencyTranslation.copyFrom(origin.m_measureCurrencyTranslation, flags);
	this.m_applyDefinedCurrencyTranslation = origin.m_applyDefinedCurrencyTranslation;
	this.m_applyToDefaultCurrencyTranslation = origin.m_applyToDefaultCurrencyTranslation;
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.getCurrencyTranslationName = function()
{
	return this.m_currencyTranslationName;
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.getCurrencyTranslationObject = function()
{
	return this.getQueryModelBase().getCurrencyTranslationManagerBase().getMeasureCurrencyTranslation(this.getCurrencyTranslationName());
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.getDateOffset = function()
{
	return this.getMeasureCurrencyTranslation().getDateOffset();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.getDateOffsetGranularity = function()
{
	return this.getMeasureCurrencyTranslation().getDateOffsetGranularity();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.getErrorHandling = function()
{
	return this.getMeasureCurrencyTranslation().getErrorHandling();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.getFixedCategory = function()
{
	return this.getMeasureCurrencyTranslation().getFixedCategory();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.getFixedRateName = function()
{
	return this.getMeasureCurrencyTranslation().getFixedRateName();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.getFixedRateType = function()
{
	return this.getMeasureCurrencyTranslation().getFixedRateType();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.getFixedRateVersion = function()
{
	return this.getMeasureCurrencyTranslation().getFixedRateVersion();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.getFixedReferenceDate = function()
{
	return this.getMeasureCurrencyTranslation().getFixedReferenceDate();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.getFixedReferenceDateAsString = function()
{
	return this.getMeasureCurrencyTranslation().getFixedReferenceDateAsString();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.getFixedTargetCurrency = function()
{
	return this.getMeasureCurrencyTranslation().getFixedTargetCurrency();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.getMeasureCurrencyTranslation = function()
{
	return this.m_measureCurrencyTranslation;
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.getRateNameField = function()
{
	return this.getMeasureCurrencyTranslation().getRateNameField();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.getRateNameFieldName = function()
{
	return this.getMeasureCurrencyTranslation().getRateNameFieldName();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.getReferenceDateField = function()
{
	return this.getMeasureCurrencyTranslation().getReferenceDateField();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.getReferenceDateFieldName = function()
{
	return this.getMeasureCurrencyTranslation().getReferenceDateFieldName();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.getTargetCurrencyField = function()
{
	return this.getMeasureCurrencyTranslation().getTargetCurrencyField();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.getTargetCurrencyFieldName = function()
{
	return this.getMeasureCurrencyTranslation().getTargetCurrencyFieldName();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.getTargetCurrencyVariable = function()
{
	return this.getMeasureCurrencyTranslation().getTargetCurrencyVariable();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.getTargetCurrencyVariableName = function()
{
	return this.getMeasureCurrencyTranslation().getTargetCurrencyVariableName();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.isApplyDefinedCurrencyTranslation = function()
{
	return this.m_applyDefinedCurrencyTranslation;
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.isApplyPredefinedCurrencyTranslation = function()
{
	return false;
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.isApplyToDefaultCurrencyTranslation = function()
{
	return this.m_applyToDefaultCurrencyTranslation;
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.isDefaultCurrency = function()
{
	return this.getMeasureCurrencyTranslation().isDefaultCurrency();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.isFixedRateName = function()
{
	return this.getMeasureCurrencyTranslation().isFixedRateName();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.isMissingRateName = function()
{
	return this.getMeasureCurrencyTranslation().isMissingRateName();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.isMissingReferenceDate = function()
{
	return this.getMeasureCurrencyTranslation().isMissingReferenceDate();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.isMissingTargetCurrency = function()
{
	return this.getMeasureCurrencyTranslation().isMissingTargetCurrency();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.isParametersComplete = function()
{
	return this.getMeasureCurrencyTranslation().isParametersComplete();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.isRateNameField = function()
{
	return this.getMeasureCurrencyTranslation().isRateNameField();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.isReferenceDateField = function()
{
	return this.getMeasureCurrencyTranslation().isReferenceDateField();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.isReferenceDateFixed = function()
{
	return this.getMeasureCurrencyTranslation().isReferenceDateFixed();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.isTargetCurrencyField = function()
{
	return this.getMeasureCurrencyTranslation().isTargetCurrencyField();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.isTargetCurrencyFixed = function()
{
	return this.getMeasureCurrencyTranslation().isTargetCurrencyFixed();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.isTargetCurrencyVariable = function()
{
	return this.getMeasureCurrencyTranslation().isTargetCurrencyVariable();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.releaseObject = function()
{
	this.m_measureCurrencyTranslation = oFF.XObjectExt.release(this.m_measureCurrencyTranslation);
	this.m_currencyTranslationName = null;
	this.m_applyDefinedCurrencyTranslation = false;
	this.m_applyToDefaultCurrencyTranslation = false;
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.requiresRateName = function()
{
	return this.getMeasureCurrencyTranslation().requiresRateName();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.requiresReferenceDate = function()
{
	return this.getMeasureCurrencyTranslation().requiresReferenceDate();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.requiresTargetCurrency = function()
{
	return this.getMeasureCurrencyTranslation().requiresTargetCurrency();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.reset = function() {};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setApplyDefinedCurrencyTranslation = function(intermediate)
{
	if (intermediate !== this.m_applyDefinedCurrencyTranslation)
	{
		this.m_applyDefinedCurrencyTranslation = intermediate;
		this.notifyNodeChanged();
	}
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setApplyPredefinedCurrencyTranslation = oFF.noSupport;
oFF.QMeasure2QueryCurrencyTranslation.prototype.setApplyToDefaultCurrencyTranslation = function(apply)
{
	if (apply !== this.m_applyToDefaultCurrencyTranslation)
	{
		this.m_applyToDefaultCurrencyTranslation = apply;
		this.notifyNodeChanged();
	}
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setCurrencyTranslationName = function(currencyTranslationName)
{
	this.m_currencyTranslationName = currencyTranslationName;
	if (oFF.notNull(currencyTranslationName))
	{
		let measureCurrencyTranslation = this.getQueryModel().getCurrencyTranslationManager().getMeasureCurrencyTranslation(currencyTranslationName);
		if (oFF.notNull(measureCurrencyTranslation))
		{
			this.m_measureCurrencyTranslation.copyFrom(measureCurrencyTranslation, null);
			if (!measureCurrencyTranslation.isMetadataDefined())
			{
				this.m_measureCurrencyTranslation.setName(oFF.CurrencyTranslationConstants.QUERY_LEVEL);
			}
		}
	}
	this.notifyNodeChanged();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setCurrencyTranslationObject = function(currencyTranslationObject)
{
	this.setCurrencyTranslationName(currencyTranslationObject.getName());
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setDefaultCurrency = function()
{
	this.getMeasureCurrencyTranslation().setDefaultCurrency();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setDynamicRateType = function()
{
	this.getMeasureCurrencyTranslation().setDynamicRateType();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setDynamicRateVersionAndCategory = function()
{
	this.getMeasureCurrencyTranslation().setDynamicRateVersionAndCategory();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setDynamicReferenceDate = function()
{
	this.getMeasureCurrencyTranslation().setDynamicReferenceDate();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setDynamicReferenceDateWithOffsetAndGranularity = function(offset, offsetGranularity)
{
	this.getMeasureCurrencyTranslation().setDynamicReferenceDateWithOffsetAndGranularity(offset, offsetGranularity);
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setErrorHandling = function(errorHandlingMode)
{
	this.getMeasureCurrencyTranslation().setErrorHandling(errorHandlingMode);
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setFixedCategory = function(category)
{
	this.getMeasureCurrencyTranslation().setFixedCategory(category);
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setFixedRateNameByString = function(rateNameString)
{
	this.getMeasureCurrencyTranslation().setFixedRateNameByString(rateNameString);
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setFixedRateType = function(rateType)
{
	this.getMeasureCurrencyTranslation().setFixedRateType(rateType);
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setFixedRateVersion = function(rateVersion)
{
	this.getMeasureCurrencyTranslation().setFixedRateVersion(rateVersion);
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setFixedReferenceDateByDateValue = function(referenceDateValue)
{
	this.getMeasureCurrencyTranslation().setFixedReferenceDateByDateValue(referenceDateValue);
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setFixedReferenceDateByString = function(referenceDateString)
{
	this.getMeasureCurrencyTranslation().setFixedReferenceDateByString(referenceDateString);
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setFixedTargetCurrencyByString = function(currencyName)
{
	this.getMeasureCurrencyTranslation().setFixedTargetCurrencyByString(currencyName);
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setRateNameByField = function(field)
{
	this.getMeasureCurrencyTranslation().setRateNameByField(field);
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setRateNameByFieldName = function(fieldName)
{
	this.getMeasureCurrencyTranslation().setRateNameByFieldName(fieldName);
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setReferenceDateByField = function(field)
{
	this.getMeasureCurrencyTranslation().setReferenceDateByField(field);
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setReferenceDateByFieldName = function(fieldName)
{
	this.getMeasureCurrencyTranslation().setReferenceDateByFieldName(fieldName);
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setReferenceDateByFieldNameOffsetAndGranularity = function(fieldName, offset, offsetGranularity)
{
	this.getMeasureCurrencyTranslation().setReferenceDateByFieldNameOffsetAndGranularity(fieldName, offset, offsetGranularity);
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setReferenceDateByFieldOffsetAndGranularity = function(field, offset, offsetGranularity)
{
	this.getMeasureCurrencyTranslation().setReferenceDateByFieldOffsetAndGranularity(field, offset, offsetGranularity);
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setTargetCurrencyByField = function(currencyField)
{
	this.getMeasureCurrencyTranslation().setTargetCurrencyByField(currencyField);
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setTargetCurrencyByFieldName = function(currencyFieldName)
{
	this.getMeasureCurrencyTranslation().setTargetCurrencyByFieldName(currencyFieldName);
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setTargetCurrencyByVariable = function(variable)
{
	this.getMeasureCurrencyTranslation().setTargetCurrencyByVariable(variable);
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setTargetCurrencyByVariableName = function(variableName)
{
	this.getMeasureCurrencyTranslation().setTargetCurrencyByVariableName(variableName);
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.setupOperationProxy = function(context, modelComponentBase)
{
	this.m_currencyTranslationName = oFF.CurrencyTranslationConstants.QUERY_LEVEL;
	this.m_measureCurrencyTranslation = oFF.QMeasureCurrencyTranslation.createWithName(context, modelComponentBase, oFF.CurrencyTranslationConstants.QUERY_LEVEL, oFF.CurrencyTranslationConstants.QUERY_LEVEL);
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.supportsDefaultCurrency = function()
{
	return this.getMeasureCurrencyTranslation().supportsDefaultCurrency();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.supportsErrorHandling = function()
{
	return this.getMeasureCurrencyTranslation().supportsTargetCurrency();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.supportsOffsetInDays = function()
{
	return this.getMeasureCurrencyTranslation().supportsOffsetInDays();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.supportsOffsetInMonths = function()
{
	return this.getMeasureCurrencyTranslation().supportsOffsetInMonths();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.supportsPlanningParameters = function()
{
	return this.getMeasureCurrencyTranslation().supportsPlanningParameters();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.supportsPredefinedCurrencyTranslation = function()
{
	return false;
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.supportsRateName = function()
{
	return this.getMeasureCurrencyTranslation().supportsRateName();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.supportsReferenceDate = function()
{
	return this.getMeasureCurrencyTranslation().supportsReferenceDate();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.supportsReferenceDateAsField = function()
{
	return this.getMeasureCurrencyTranslation().supportsReferenceDateAsField();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.supportsTargetCurrency = function()
{
	return this.getMeasureCurrencyTranslation().supportsTargetCurrency();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.supportsTargetCurrencyAsField = function()
{
	return this.getMeasureCurrencyTranslation().supportsTargetCurrencyAsField();
};
oFF.QMeasure2QueryCurrencyTranslation.prototype.supportsTargetCurrencyAsVariable = function()
{
	return this.getMeasureCurrencyTranslation().supportsTargetCurrencyAsVariable();
};

oFF.QMeasureCurrencyTranslation = function() {};
oFF.QMeasureCurrencyTranslation.prototype = new oFF.QModelComponent();
oFF.QMeasureCurrencyTranslation.prototype._ff_c = "QMeasureCurrencyTranslation";

oFF.QMeasureCurrencyTranslation.createWithName = function(context, modelComponentBase, name, text)
{
	let newInstance = new oFF.QMeasureCurrencyTranslation();
	newInstance.setupModelComponentWithName(context, modelComponentBase, name);
	newInstance.setText(text);
	return newInstance;
};
oFF.QMeasureCurrencyTranslation.prototype.m_category = null;
oFF.QMeasureCurrencyTranslation.prototype.m_dateOffset = 0;
oFF.QMeasureCurrencyTranslation.prototype.m_dateOffsetGranularity = null;
oFF.QMeasureCurrencyTranslation.prototype.m_defaultCurrency = false;
oFF.QMeasureCurrencyTranslation.prototype.m_errorHandlingMode = null;
oFF.QMeasureCurrencyTranslation.prototype.m_metadataDefined = false;
oFF.QMeasureCurrencyTranslation.prototype.m_modelDefined = false;
oFF.QMeasureCurrencyTranslation.prototype.m_rateName = null;
oFF.QMeasureCurrencyTranslation.prototype.m_rateType = null;
oFF.QMeasureCurrencyTranslation.prototype.m_rateVersion = null;
oFF.QMeasureCurrencyTranslation.prototype.m_referenceDate = null;
oFF.QMeasureCurrencyTranslation.prototype.m_sourceCurrency = null;
oFF.QMeasureCurrencyTranslation.prototype.m_targetCurrency = null;
oFF.QMeasureCurrencyTranslation.prototype._setCategory = function(rateCategory)
{
	let oldValue = this.m_category;
	this.m_category = rateCategory;
	this.notifyPropertyConstantChanged(oFF.QCurrencyTranslationProperties.QY_CATEGORY, oldValue, rateCategory);
};
oFF.QMeasureCurrencyTranslation.prototype._setRateName = function(rateName)
{
	this.m_rateName = rateName;
	this.notifyNodeChanged();
};
oFF.QMeasureCurrencyTranslation.prototype._setRateType = function(rateType)
{
	let oldValue = this.m_rateType;
	this.m_rateType = rateType;
	this.notifyPropertyConstantChanged(oFF.QCurrencyTranslationProperties.QY_RATE_TYPE, oldValue, rateType);
};
oFF.QMeasureCurrencyTranslation.prototype._setRateVersion = function(rateVersion)
{
	if (!oFF.XString.isEqual(this.m_rateVersion, rateVersion))
	{
		this.m_rateVersion = rateVersion;
		this.notifyNodeChanged();
	}
};
oFF.QMeasureCurrencyTranslation.prototype.assertOffset = function(offsetGranularity)
{
	if (!this.supportsReferenceDate())
	{
		throw oFF.XException.createIllegalStateException("The Currency Translation Object does not allow to set the ReferenceDate");
	}
	if (!this.supportsOffsetInMonths())
	{
		throw oFF.XException.createIllegalStateException("The Currency Translation Object does not allow to set the ReferenceDate Offset");
	}
	if (!this.supportsOffsetInDays() && (offsetGranularity === oFF.DateOffsetGranularity.WEEK || offsetGranularity === oFF.DateOffsetGranularity.DAY))
	{
		throw oFF.XException.createIllegalStateException("The Currency Translation Object does not allow to set an offset below month granularity");
	}
};
oFF.QMeasureCurrencyTranslation.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originCurrencyTranslation = other;
	this.m_rateName = oFF.QCurrencyLookupValue.create(this);
	if (originCurrencyTranslation.getRateName() !== null)
	{
		this.m_rateName.copyFrom(originCurrencyTranslation.getRateName(), flags);
	}
	this.m_referenceDate = oFF.QCurrencyLookupValue.create(this);
	if (originCurrencyTranslation.getReferenceDate() !== null)
	{
		this.m_referenceDate.copyFrom(originCurrencyTranslation.getReferenceDate(), flags);
	}
	this.m_sourceCurrency = oFF.QCurrencyLookupValue.create(this);
	if (originCurrencyTranslation.getSourceCurrency() !== null)
	{
		this.m_sourceCurrency.copyFrom(originCurrencyTranslation.getSourceCurrency(), flags);
	}
	this.m_targetCurrency = oFF.QCurrencyLookupValue.create(this);
	if (originCurrencyTranslation.getTargetCurrency() !== null)
	{
		this.m_targetCurrency.copyFrom(originCurrencyTranslation.getTargetCurrency(), flags);
	}
	this.m_rateType = originCurrencyTranslation.m_rateType;
	this.m_rateVersion = originCurrencyTranslation.m_rateVersion;
	this.m_category = originCurrencyTranslation.m_category;
	this.m_dateOffset = originCurrencyTranslation.m_dateOffset;
	this.m_dateOffsetGranularity = originCurrencyTranslation.m_dateOffsetGranularity;
	this.m_metadataDefined = originCurrencyTranslation.m_metadataDefined;
	this.m_modelDefined = originCurrencyTranslation.m_modelDefined;
	this.m_errorHandlingMode = originCurrencyTranslation.m_errorHandlingMode;
};
oFF.QMeasureCurrencyTranslation.prototype.getCurrencyTranslationManager = function()
{
	let queryModel = this.getQueryModelBase();
	if (oFF.notNull(queryModel))
	{
		return queryModel.getCurrencyTranslationManagerBase();
	}
	let parent = this.getParentComponent();
	if (oFF.notNull(parent) && parent.getComponentType() === oFF.OlapComponentType.CURRENCY_TRANSLATION_MANAGER)
	{
		return parent;
	}
	return null;
};
oFF.QMeasureCurrencyTranslation.prototype.getDateOffset = function()
{
	return this.m_dateOffset;
};
oFF.QMeasureCurrencyTranslation.prototype.getDateOffsetGranularity = function()
{
	return this.m_dateOffsetGranularity;
};
oFF.QMeasureCurrencyTranslation.prototype.getErrorHandling = function()
{
	return this.m_errorHandlingMode;
};
oFF.QMeasureCurrencyTranslation.prototype.getFixedCategory = function()
{
	return this.m_category;
};
oFF.QMeasureCurrencyTranslation.prototype.getFixedRateName = function()
{
	return oFF.isNull(this.m_rateName) ? null : this.m_rateName.getFixedValueAsString();
};
oFF.QMeasureCurrencyTranslation.prototype.getFixedRateType = function()
{
	return this.m_rateType;
};
oFF.QMeasureCurrencyTranslation.prototype.getFixedRateVersion = function()
{
	return this.m_rateVersion;
};
oFF.QMeasureCurrencyTranslation.prototype.getFixedReferenceDate = function()
{
	return oFF.isNull(this.m_referenceDate) ? null : this.m_referenceDate.getFixedValueAsDate();
};
oFF.QMeasureCurrencyTranslation.prototype.getFixedReferenceDateAsString = function()
{
	return oFF.isNull(this.m_referenceDate) ? null : this.m_referenceDate.getFixedValueAsString();
};
oFF.QMeasureCurrencyTranslation.prototype.getFixedTargetCurrency = function()
{
	return oFF.isNull(this.m_targetCurrency) ? null : this.m_targetCurrency.getFixedValueAsString();
};
oFF.QMeasureCurrencyTranslation.prototype.getMappedName = function(rateType)
{
	if (!this.needsRemapping(rateType))
	{
		return this.getName();
	}
	return oFF.XStringUtils.concatenate3(this.getName(), "@@@", rateType.getName());
};
oFF.QMeasureCurrencyTranslation.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.CURRENCY_TRANSLATION_ITEM;
};
oFF.QMeasureCurrencyTranslation.prototype.getRateName = function()
{
	return this.m_rateName;
};
oFF.QMeasureCurrencyTranslation.prototype.getRateNameField = function()
{
	return oFF.isNull(this.m_rateName) ? null : this.m_rateName.getField();
};
oFF.QMeasureCurrencyTranslation.prototype.getRateNameFieldName = function()
{
	return oFF.isNull(this.m_rateName) ? null : this.m_rateName.getFieldName();
};
oFF.QMeasureCurrencyTranslation.prototype.getReferenceDate = function()
{
	return this.m_referenceDate;
};
oFF.QMeasureCurrencyTranslation.prototype.getReferenceDateField = function()
{
	return oFF.isNull(this.m_referenceDate) ? null : this.m_referenceDate.getField();
};
oFF.QMeasureCurrencyTranslation.prototype.getReferenceDateFieldName = function()
{
	return oFF.isNull(this.m_referenceDate) ? null : this.m_referenceDate.getFieldName();
};
oFF.QMeasureCurrencyTranslation.prototype.getSourceCurrency = function()
{
	return this.m_sourceCurrency;
};
oFF.QMeasureCurrencyTranslation.prototype.getTargetCurrency = function()
{
	return this.m_targetCurrency;
};
oFF.QMeasureCurrencyTranslation.prototype.getTargetCurrencyField = function()
{
	return oFF.isNull(this.m_targetCurrency) ? null : this.m_targetCurrency.getField();
};
oFF.QMeasureCurrencyTranslation.prototype.getTargetCurrencyFieldName = function()
{
	return oFF.isNull(this.m_targetCurrency) ? null : this.m_targetCurrency.getFieldName();
};
oFF.QMeasureCurrencyTranslation.prototype.getTargetCurrencyVariable = function()
{
	return oFF.isNull(this.m_targetCurrency) ? null : this.m_targetCurrency.getVariable();
};
oFF.QMeasureCurrencyTranslation.prototype.getTargetCurrencyVariableName = function()
{
	return oFF.isNull(this.m_targetCurrency) ? null : this.m_targetCurrency.getVariableName();
};
oFF.QMeasureCurrencyTranslation.prototype.isDefaultCurrency = function()
{
	return this.m_defaultCurrency;
};
oFF.QMeasureCurrencyTranslation.prototype.isFixedRateName = function()
{
	return oFF.notNull(this.m_rateName) && this.m_rateName.isFixed();
};
oFF.QMeasureCurrencyTranslation.prototype.isIgnore = function()
{
	let targetCurrencyVariable = this.getTargetCurrencyVariable();
	let externalVariable = oFF.isNull(targetCurrencyVariable) ? null : targetCurrencyVariable.getExternalRepresentation();
	if (oFF.notNull(externalVariable))
	{
		targetCurrencyVariable = externalVariable;
	}
	return oFF.notNull(targetCurrencyVariable) && (targetCurrencyVariable.isEmpty() || oFF.XStringUtils.isNullOrEmpty(targetCurrencyVariable.getValueByString()));
};
oFF.QMeasureCurrencyTranslation.prototype.isMetadataDefined = function()
{
	return this.m_metadataDefined;
};
oFF.QMeasureCurrencyTranslation.prototype.isMissingRateName = function()
{
	return oFF.QCurrencyLookupValue.isEmpty(this.m_rateName) && this.requiresRateName();
};
oFF.QMeasureCurrencyTranslation.prototype.isMissingReferenceDate = function()
{
	return oFF.QCurrencyLookupValue.isEmpty(this.m_referenceDate) && this.requiresReferenceDate();
};
oFF.QMeasureCurrencyTranslation.prototype.isMissingTargetCurrency = function()
{
	return oFF.QCurrencyLookupValue.isEmpty(this.m_targetCurrency) && !this.m_defaultCurrency && this.requiresTargetCurrency();
};
oFF.QMeasureCurrencyTranslation.prototype.isModelDefinedCurrencyTranslation = function()
{
	return this.m_modelDefined;
};
oFF.QMeasureCurrencyTranslation.prototype.isParametersComplete = function()
{
	return !this.isMissingRateName() && !this.isMissingReferenceDate() && !this.isMissingTargetCurrency();
};
oFF.QMeasureCurrencyTranslation.prototype.isRateNameField = function()
{
	return oFF.notNull(this.m_rateName) && this.m_rateName.isFieldBased();
};
oFF.QMeasureCurrencyTranslation.prototype.isReferenceDateField = function()
{
	return oFF.notNull(this.m_referenceDate) && this.m_referenceDate.isFieldBased();
};
oFF.QMeasureCurrencyTranslation.prototype.isReferenceDateFixed = function()
{
	return oFF.notNull(this.m_referenceDate) && this.m_referenceDate.isFixed();
};
oFF.QMeasureCurrencyTranslation.prototype.isTargetCurrencyField = function()
{
	return oFF.notNull(this.m_targetCurrency) && this.m_targetCurrency.isFieldBased();
};
oFF.QMeasureCurrencyTranslation.prototype.isTargetCurrencyFixed = function()
{
	return oFF.notNull(this.m_targetCurrency) && this.m_targetCurrency.isFixed();
};
oFF.QMeasureCurrencyTranslation.prototype.isTargetCurrencyVariable = function()
{
	return oFF.notNull(this.m_targetCurrency) && this.m_targetCurrency.isVariableBased();
};
oFF.QMeasureCurrencyTranslation.prototype.needsRemapping = function(rateTypeLocal)
{
	return !this.getCurrencyTranslationManager().deriveRateTypeFromAccount() && this.supportsRateName() && this.supportsPlanningParameters() && oFF.QCurrencyLookupValue.isEmpty(this.m_rateName) && !oFF.CtRateType.isDefined(this.m_rateType) && oFF.CtRateType.isDefined(rateTypeLocal);
};
oFF.QMeasureCurrencyTranslation.prototype.releaseObject = function()
{
	this.m_rateName = oFF.XObjectExt.release(this.m_rateName);
	this.m_referenceDate = oFF.XObjectExt.release(this.m_referenceDate);
	this.m_sourceCurrency = oFF.XObjectExt.release(this.m_sourceCurrency);
	this.m_targetCurrency = oFF.XObjectExt.release(this.m_targetCurrency);
	this.m_rateVersion = null;
	this.m_category = null;
	this.m_rateType = null;
	this.m_dateOffsetGranularity = null;
	this.m_dateOffset = 0;
	this.m_errorHandlingMode = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QMeasureCurrencyTranslation.prototype.requiresRateName = function()
{
	let curTrans = this.getCurrencyTranslationManager();
	return this.supportsRateName() && !curTrans.supportsExtendedRateNameParameters();
};
oFF.QMeasureCurrencyTranslation.prototype.requiresReferenceDate = function()
{
	let curTrans = this.getCurrencyTranslationManager();
	return this.supportsReferenceDate() && curTrans.getDefaultReferenceDateFieldName() === null && !curTrans.isLegacyMeasureCurrencyTranslationAccountModel();
};
oFF.QMeasureCurrencyTranslation.prototype.requiresTargetCurrency = function()
{
	return this.supportsTargetCurrency();
};
oFF.QMeasureCurrencyTranslation.prototype.setDateOffset = function(offset)
{
	let oldValue = this.m_dateOffset;
	this.m_dateOffset = offset;
	this.notifyPropertyIntegerChanged(oFF.QCurrencyTranslationProperties.QY_DATE_OFFSET, oldValue, offset);
};
oFF.QMeasureCurrencyTranslation.prototype.setDateOffsetGranularity = function(dateOffsetGranularity)
{
	let oldValue = this.m_dateOffsetGranularity;
	this.m_dateOffsetGranularity = dateOffsetGranularity;
	this.notifyPropertyConstantChanged(oFF.QCurrencyTranslationProperties.QY_DATE_OFFSET_GRANULARITY, oldValue, dateOffsetGranularity);
};
oFF.QMeasureCurrencyTranslation.prototype.setDefaultCurrency = function()
{
	if (!this.m_defaultCurrency)
	{
		if (!this.supportsDefaultCurrency())
		{
			throw oFF.XException.createIllegalStateException("The Currency Translation Object does not allow to set the default target currency");
		}
		this.m_targetCurrency = null;
		this.m_defaultCurrency = true;
		this.notifyNodeChanged();
	}
};
oFF.QMeasureCurrencyTranslation.prototype.setDynamicRateType = function()
{
	if (!this.supportsPlanningParameters())
	{
		throw oFF.XException.createIllegalStateException("Planning parameters not allowed in this Translation Operation");
	}
	this._setRateName(null);
	this._setRateType(null);
};
oFF.QMeasureCurrencyTranslation.prototype.setDynamicRateVersionAndCategory = function()
{
	if (!this.supportsPlanningParameters())
	{
		throw oFF.XException.createIllegalStateException("Planning parameters not allowed in this Translation Operation");
	}
	this._setRateName(null);
	this._setRateVersion(null);
	this._setCategory(null);
};
oFF.QMeasureCurrencyTranslation.prototype.setDynamicReferenceDate = function()
{
	if (this.requiresReferenceDate())
	{
		throw oFF.XException.createIllegalStateException("Reference Date has to be set explicitly");
	}
	this.setDateOffset(0);
	this.m_referenceDate = null;
	this.notifyNodeChanged();
};
oFF.QMeasureCurrencyTranslation.prototype.setDynamicReferenceDateWithOffsetAndGranularity = function(offset, offsetGranularity)
{
	this.assertOffset(offsetGranularity);
	if (this.requiresReferenceDate())
	{
		throw oFF.XException.createIllegalStateException("Reference Date has to be set explicitly");
	}
	this.m_referenceDate = null;
	this.setDateOffset(offset);
	this.setDateOffsetGranularity(offsetGranularity);
	this.notifyNodeChanged();
};
oFF.QMeasureCurrencyTranslation.prototype.setErrorHandling = function(errorHandlingMode)
{
	if (this.m_errorHandlingMode !== errorHandlingMode)
	{
		this.m_errorHandlingMode = errorHandlingMode;
		this.notifyNodeChanged();
	}
};
oFF.QMeasureCurrencyTranslation.prototype.setFixedCategory = function(category)
{
	if (!this.supportsPlanningParameters())
	{
		throw oFF.XException.createIllegalStateException("Planning parameters not allowed in this Translation Operation");
	}
	this._setRateName(null);
	this._setRateVersion(null);
	this._setCategory(category);
};
oFF.QMeasureCurrencyTranslation.prototype.setFixedRateNameByString = function(rateNameString)
{
	if (!this.supportsRateName())
	{
		throw oFF.XException.createIllegalStateException("The Currency Translation Object does not allow to set the rate name");
	}
	this._setRateType(null);
	this._setCategory(null);
	this._setRateVersion(null);
	this._setRateName(oFF.QCurrencyLookupValue.createFixedByValue(this, oFF.XStringValue.create(rateNameString)));
};
oFF.QMeasureCurrencyTranslation.prototype.setFixedRateType = function(rateType)
{
	if (!this.supportsPlanningParameters())
	{
		throw oFF.XException.createIllegalStateException("Planning parameters not allowed in this Translation Operation");
	}
	this._setRateName(null);
	this._setRateType(rateType);
};
oFF.QMeasureCurrencyTranslation.prototype.setFixedRateVersion = function(rateVersion)
{
	if (!this.supportsPlanningParameters())
	{
		throw oFF.XException.createIllegalStateException("Planning parameters not allowed in this Translation Operation");
	}
	this._setRateName(null);
	this._setCategory(null);
	this._setRateVersion(rateVersion);
};
oFF.QMeasureCurrencyTranslation.prototype.setFixedReferenceDateByDateValue = function(referenceDateValue)
{
	if (!this.supportsReferenceDate())
	{
		throw oFF.XException.createIllegalStateException("The Currency Translation Object does not allow to set the ReferenceDate");
	}
	this.setDateOffset(0);
	this.m_referenceDate = oFF.QCurrencyLookupValue.createFixedByValue(this, referenceDateValue);
	this.notifyNodeChanged();
};
oFF.QMeasureCurrencyTranslation.prototype.setFixedReferenceDateByString = function(referenceDateString)
{
	if (!this.supportsReferenceDate())
	{
		throw oFF.XException.createIllegalStateException("The Currency Translation Object does not allow to set the ReferenceDate");
	}
	this.setDateOffset(0);
	this.m_referenceDate = oFF.QCurrencyLookupValue.createFixedByValue(this, oFF.XDate.createDateSafe(referenceDateString));
	this.notifyNodeChanged();
};
oFF.QMeasureCurrencyTranslation.prototype.setFixedSourceCurrencyByString = function(currencyName)
{
	this.m_sourceCurrency = oFF.QCurrencyLookupValue.createFixedByValue(this, oFF.XStringValue.create(currencyName));
	return this.m_sourceCurrency;
};
oFF.QMeasureCurrencyTranslation.prototype.setFixedTargetCurrencyByString = function(currencyName)
{
	if (!this.supportsTargetCurrency())
	{
		throw oFF.XException.createIllegalStateException("The Currency Translation Object does not allow to set the TargetCurrency");
	}
	if (oFF.notNull(currencyName) && !oFF.XString.isEqual(this.getFixedTargetCurrency(), currencyName))
	{
		this.m_defaultCurrency = false;
		if (oFF.notNull(this.m_targetCurrency))
		{
			this.m_targetCurrency.setFixedValue(oFF.XStringValue.create(currencyName));
		}
		else
		{
			this.m_targetCurrency = oFF.QCurrencyLookupValue.createFixedByValue(this, oFF.XStringValue.create(currencyName));
		}
		this.notifyNodeChanged();
	}
};
oFF.QMeasureCurrencyTranslation.prototype.setMetadataDefined = function(metadataDefined)
{
	this.m_metadataDefined = metadataDefined;
};
oFF.QMeasureCurrencyTranslation.prototype.setModelDefinedCurrencyTranslation = function(modelDefinedCurrencyTranslation)
{
	this.m_modelDefined = modelDefinedCurrencyTranslation;
};
oFF.QMeasureCurrencyTranslation.prototype.setRateName = function(rateName)
{
	this._setRateType(null);
	this._setCategory(null);
	this._setRateVersion(null);
	this._setRateName(rateName);
};
oFF.QMeasureCurrencyTranslation.prototype.setRateNameByField = function(field)
{
	if (!this.supportsRateName())
	{
		throw oFF.XException.createIllegalStateException("The Currency Translation Object does not allow to set the rate name");
	}
	this._setRateType(null);
	this._setCategory(null);
	this._setRateVersion(null);
	this._setRateName(oFF.QCurrencyLookupValue.createByFieldName(this, field.getName()));
};
oFF.QMeasureCurrencyTranslation.prototype.setRateNameByFieldName = function(fieldName)
{
	if (!this.supportsRateName())
	{
		throw oFF.XException.createIllegalStateException("The Currency Translation Object does not allow to set the rate name");
	}
	this._setRateType(null);
	this._setCategory(null);
	this._setRateVersion(null);
	this._setRateName(oFF.QCurrencyLookupValue.createByFieldName(this, fieldName));
};
oFF.QMeasureCurrencyTranslation.prototype.setRateNameByFormulaItem = function(formulaItem)
{
	if (!this.supportsRateName())
	{
		throw oFF.XException.createIllegalStateException("The Currency Translation Object does not allow to set the rate name");
	}
	this._setRateType(null);
	this._setCategory(null);
	this._setRateVersion(null);
	this._setRateName(oFF.QCurrencyLookupValue.createByFormulaItem(this, formulaItem));
	return this.m_rateName;
};
oFF.QMeasureCurrencyTranslation.prototype.setReferenceDate = function(conversionDateLookup)
{
	this.setDateOffset(0);
	this.m_referenceDate = conversionDateLookup;
	this.notifyNodeChanged();
};
oFF.QMeasureCurrencyTranslation.prototype.setReferenceDateByField = function(field)
{
	if (!this.supportsReferenceDateAsField())
	{
		throw oFF.XException.createIllegalStateException("The Currency Translation Object does not allow to set the ReferenceDate");
	}
	this.setDateOffset(0);
	this.m_referenceDate = oFF.QCurrencyLookupValue.createByFieldName(this, field.getName());
	this.notifyNodeChanged();
};
oFF.QMeasureCurrencyTranslation.prototype.setReferenceDateByFieldName = function(fieldName)
{
	if (!this.supportsTargetCurrencyAsField())
	{
		throw oFF.XException.createIllegalStateException("The Currency Translation Object does not allow to set the ReferenceDate");
	}
	this.setDateOffset(0);
	this.m_referenceDate = oFF.QCurrencyLookupValue.createByFieldName(this, fieldName);
	this.notifyNodeChanged();
};
oFF.QMeasureCurrencyTranslation.prototype.setReferenceDateByFieldNameOffsetAndGranularity = function(fieldName, offset, offsetGranularity)
{
	if (!this.supportsReferenceDateAsField())
	{
		throw oFF.XException.createIllegalStateException("The Currency Translation Object does not allow to set the ReferenceDate");
	}
	this.assertOffset(offsetGranularity);
	this.m_referenceDate = oFF.QCurrencyLookupValue.createByFieldName(this, fieldName);
	this.setDateOffset(offset);
	this.setDateOffsetGranularity(offsetGranularity);
	this.notifyNodeChanged();
};
oFF.QMeasureCurrencyTranslation.prototype.setReferenceDateByFieldOffsetAndGranularity = function(field, offset, offsetGranularity)
{
	if (!this.supportsReferenceDateAsField())
	{
		throw oFF.XException.createIllegalStateException("The Currency Translation Object does not allow to set the ReferenceDate");
	}
	this.assertOffset(offsetGranularity);
	this.m_referenceDate = oFF.QCurrencyLookupValue.createByFieldName(this, field.getName());
	this.setDateOffset(offset);
	this.setDateOffsetGranularity(offsetGranularity);
	this.notifyNodeChanged();
};
oFF.QMeasureCurrencyTranslation.prototype.setReferenceDateByFormulaItem = function(dateFormula)
{
	if (!this.supportsReferenceDateAsFormulaItem())
	{
		throw oFF.XException.createIllegalStateException("The Currency Translation Object does not allow to set the ReferenceDate");
	}
	this.setDateOffset(0);
	this.m_referenceDate = oFF.QCurrencyLookupValue.createByFormulaItem(this, dateFormula);
	return this.m_referenceDate;
};
oFF.QMeasureCurrencyTranslation.prototype.setSourceCurrency = function(sourceCurrency)
{
	this.m_sourceCurrency = sourceCurrency;
};
oFF.QMeasureCurrencyTranslation.prototype.setSourceCurrencyByFieldName = function(currencyFieldName)
{
	this.m_sourceCurrency = oFF.QCurrencyLookupValue.createByFieldName(this, currencyFieldName);
	return this.m_sourceCurrency;
};
oFF.QMeasureCurrencyTranslation.prototype.setTargetCurrency = function(targetCurrency)
{
	this.m_targetCurrency = targetCurrency;
	this.m_defaultCurrency = false;
};
oFF.QMeasureCurrencyTranslation.prototype.setTargetCurrencyByField = function(currencyField)
{
	if (!this.supportsTargetCurrencyAsField())
	{
		throw oFF.XException.createIllegalStateException("The Currency Translation Object does not allow to set the TargetCurrency");
	}
	this.m_targetCurrency = oFF.QCurrencyLookupValue.createByFieldName(this, currencyField.getName());
	this.notifyNodeChanged();
};
oFF.QMeasureCurrencyTranslation.prototype.setTargetCurrencyByFieldName = function(currencyFieldName)
{
	if (!this.supportsTargetCurrencyAsField())
	{
		throw oFF.XException.createIllegalStateException("The Currency Translation Object does not allow to set the TargetCurrency");
	}
	this.m_defaultCurrency = false;
	this.m_targetCurrency = oFF.QCurrencyLookupValue.createByFieldName(this, currencyFieldName);
	this.notifyNodeChanged();
};
oFF.QMeasureCurrencyTranslation.prototype.setTargetCurrencyByVariable = function(variable)
{
	this.setTargetCurrencyByVariableName(oFF.isNull(variable) ? null : variable.getName());
};
oFF.QMeasureCurrencyTranslation.prototype.setTargetCurrencyByVariableName = function(variableName)
{
	if (!this.supportsTargetCurrencyAsVariable())
	{
		throw oFF.XException.createIllegalStateException("The Currency Translation Object does not allow to set the TargetCurrency via variables");
	}
	this.m_defaultCurrency = false;
	this.m_targetCurrency = oFF.QCurrencyLookupValue.createByVariableName(this, variableName);
	this.notifyNodeChanged();
};
oFF.QMeasureCurrencyTranslation.prototype.supportsDefaultCurrency = function()
{
	return !this.m_metadataDefined && oFF.XStringUtils.isNotNullAndNotEmpty(this.getCurrencyTranslationManager().getDefaultCurrency());
};
oFF.QMeasureCurrencyTranslation.prototype.supportsErrorHandling = function()
{
	return !this.m_metadataDefined && !this.getCurrencyTranslationManager().isLegacyMeasureCurrencyTranslationAccountModel();
};
oFF.QMeasureCurrencyTranslation.prototype.supportsOffsetInDays = function()
{
	return !this.m_metadataDefined && !this.getCurrencyTranslationManager().isLegacyMeasureCurrencyTranslationAccountModel();
};
oFF.QMeasureCurrencyTranslation.prototype.supportsOffsetInMonths = function()
{
	return !this.m_metadataDefined;
};
oFF.QMeasureCurrencyTranslation.prototype.supportsPlanningParameters = function()
{
	let curTrans = this.getCurrencyTranslationManager();
	return curTrans.isLegacyMeasureCurrencyTranslationAccountModel() || curTrans.supportsExtendedRateNameParameters();
};
oFF.QMeasureCurrencyTranslation.prototype.supportsRateName = function()
{
	return !this.m_metadataDefined && !this.getCurrencyTranslationManager().isLegacyMeasureCurrencyTranslationAccountModel();
};
oFF.QMeasureCurrencyTranslation.prototype.supportsReferenceDate = function()
{
	return !this.m_metadataDefined;
};
oFF.QMeasureCurrencyTranslation.prototype.supportsReferenceDateAsField = function()
{
	return !this.m_metadataDefined && !this.getCurrencyTranslationManager().isLegacyMeasureCurrencyTranslationAccountModel();
};
oFF.QMeasureCurrencyTranslation.prototype.supportsReferenceDateAsFormulaItem = function()
{
	return !this.m_metadataDefined && !this.getCurrencyTranslationManager().isLegacyMeasureCurrencyTranslationAccountModel();
};
oFF.QMeasureCurrencyTranslation.prototype.supportsTargetCurrency = function()
{
	return !this.m_metadataDefined;
};
oFF.QMeasureCurrencyTranslation.prototype.supportsTargetCurrencyAsField = function()
{
	return !this.m_metadataDefined && !this.getCurrencyTranslationManager().isLegacyMeasureCurrencyTranslationAccountModel();
};
oFF.QMeasureCurrencyTranslation.prototype.supportsTargetCurrencyAsVariable = function()
{
	return !this.m_metadataDefined && !this.getCurrencyTranslationManager().isLegacyMeasureCurrencyTranslationAccountModel();
};

oFF.QDimension = function() {};
oFF.QDimension.prototype = new oFF.QModelComponent();
oFF.QDimension.prototype._ff_c = "QDimension";

oFF.QDimension._create = function(context, parentNode)
{
	let dim = new oFF.QDimension();
	dim.setupDimension(context, parentNode);
	return dim;
};
oFF.QDimension.prototype.m_allStructureMembers = null;
oFF.QDimension.prototype.m_alternativeFieldValues = null;
oFF.QDimension.prototype.m_areHierarchicalDimensionMemberNamesStoredAsFlat = false;
oFF.QDimension.prototype.m_attributeContainer = null;
oFF.QDimension.prototype.m_axis = null;
oFF.QDimension.prototype.m_defaultAxisType = null;
oFF.QDimension.prototype.m_designTimeMode = false;
oFF.QDimension.prototype.m_fieldContainer = null;
oFF.QDimension.prototype.m_fieldLayoutType = null;
oFF.QDimension.prototype.m_hierarchyManager = null;
oFF.QDimension.prototype.m_isCumulative = false;
oFF.QDimension.prototype.m_isIgnoredOnExport = false;
oFF.QDimension.prototype.m_memberManager = null;
oFF.QDimension.prototype.m_metadata = null;
oFF.QDimension.prototype.m_nameValuePairs = null;
oFF.QDimension.prototype.m_overdefinedMemberManager = null;
oFF.QDimension.prototype.m_overrideText = null;
oFF.QDimension.prototype.m_placeholderIdMemberNameMap = null;
oFF.QDimension.prototype.m_placeholderIds = null;
oFF.QDimension.prototype.m_readModeManager = null;
oFF.QDimension.prototype.m_resultMemberTotal = null;
oFF.QDimension.prototype.m_resultMemberTotalIncluded = null;
oFF.QDimension.prototype.m_resultMemberTotalRemaining = null;
oFF.QDimension.prototype.m_resultOthersFromConditions = null;
oFF.QDimension.prototype.m_resultStructureController = null;
oFF.QDimension.prototype.m_runtimeDisplayGroupName = null;
oFF.QDimension.prototype.m_runtimeDisplayGroupText = null;
oFF.QDimension.prototype.m_selector = null;
oFF.QDimension.prototype.m_selectorFieldLayoutType = null;
oFF.QDimension.prototype.m_skip = 0;
oFF.QDimension.prototype.m_skipMetadataValidationOnRepoImport = false;
oFF.QDimension.prototype.m_structureLayout = null;
oFF.QDimension.prototype.m_structureMemberLazyLoader = null;
oFF.QDimension.prototype.m_top = 0;
oFF.QDimension.prototype.m_totalsModified = false;
oFF.QDimension.prototype._mergeDeepRecursiveMembers = function(settings, otherDim)
{
	let allStructureMembers = otherDim.getAllStructureMembers();
	if (this.isStructure())
	{
		if (!oFF.XCollectionUtils.hasElements(allStructureMembers))
		{
			return;
		}
		let memberSize = allStructureMembers.size();
		for (let i = 0; i < memberSize; i++)
		{
			let otherStructureMember = allStructureMembers.get(i);
			let structureMember = this.getStructureMemberIncludeReleasedByKey(otherStructureMember.getName(), false);
			if (oFF.notNull(structureMember))
			{
				structureMember.mergeDeepRecursive(settings, otherStructureMember);
			}
		}
	}
};
oFF.QDimension.prototype._processVariableValueHelp = function(variableName, syncType, listener, customIdentifier, valueHelpProvider, variable, dimension)
{
	if (oFF.isNull(variable))
	{
		return this._valHelpError(oFF.XStringUtils.concatenate3("Variable '", variableName, "' is null."), listener, customIdentifier);
	}
	let variableType = variable.getVariableType();
	if (variableType.isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
	{
		let memberVariable = variable;
		if (memberVariable.supportsValueHelp())
		{
			return valueHelpProvider.processVarHelp(dimension, memberVariable, syncType, listener, customIdentifier);
		}
		return this._valHelpError(oFF.XStringUtils.concatenate3("Variable '", variableName, "' does not support valuehelp."), listener, customIdentifier);
	}
	return this._valHelpError(oFF.XStringUtils.concatenate2("Valuehelp is not supported for variables of the type ", variableType.getName()), listener, customIdentifier);
};
oFF.QDimension.prototype._valHelpError = function(errorMessage, listener, customIdentifier)
{
	let extResult = oFF.ExtResult.createWithErrorMessage(errorMessage);
	if (oFF.notNull(listener))
	{
		listener.onValuehelpExecuted(extResult, null, customIdentifier);
	}
	return extResult;
};
oFF.QDimension.prototype._valHelpResultSetError = function(errorMessage, listener, customIdentifier)
{
	let extResult = oFF.ExtResult.createWithErrorMessage(errorMessage);
	if (oFF.notNull(listener))
	{
		listener.onValuehelpExecuted(extResult, null, customIdentifier);
	}
	return extResult;
};
oFF.QDimension.prototype.activateHierarchy = function(name, version, dueDate)
{
	this.m_hierarchyManager.activateHierarchy(name, version, dueDate);
};
oFF.QDimension.prototype.addMeasure = function(newMeasure)
{
	if (this.supportsBasicStructureMembers() && newMeasure.getMemberType() === oFF.MemberType.BASIC_MEASURE || this.supportsCustomMembers())
	{
		this.addMeasureInternal(newMeasure, true);
	}
};
oFF.QDimension.prototype.addMeasureInternal = function(newMeasure, withEvent)
{
	if (oFF.notNull(newMeasure))
	{
		let measureBase = newMeasure;
		if (this.m_placeholderIds.size() > 0)
		{
			this.assignFreePlaceholderToMember(measureBase);
		}
		this.assertMemberUniqueName(measureBase.getName());
		let storageName = measureBase.getStorageName();
		if (oFF.XStringUtils.isNullOrEmpty(storageName))
		{
			storageName = this.getQueryManager().getClientQueryObjectStorageName();
		}
		if (this.getOlapEnv().getClientQueryObjectManager().getClientQueryObjectIncludeReleasedByKeyRef(measureBase, storageName) !== null || this.getKeyRefStorage().get(oFF.KeyRefConstants.MAIN_STORAGE, measureBase.getStorageGroupName(), measureBase.getStorageObjectName()) !== null)
		{
			measureBase.initializeFieldValues();
			let keyRef = oFF.QFactory.createKeyRef(storageName, measureBase.getStorageGroupName(), measureBase.getStorageObjectName());
			this.addQueryDataCells(measureBase);
			if (withEvent)
			{
				this.m_structureLayout.addKeyRef(keyRef);
				this.m_allStructureMembers.addKeyRef(keyRef);
			}
			else
			{
				this.m_structureLayout.addKeyRefInternal(keyRef);
				this.m_allStructureMembers.addKeyRefInternal(keyRef);
			}
		}
		else
		{
			measureBase.setParent(this);
			measureBase.initializeFieldValues();
			if (withEvent)
			{
				this.m_allStructureMembers.add(newMeasure);
				this.m_structureLayout.add(newMeasure);
			}
			else
			{
				this.m_allStructureMembers.addInternal(newMeasure);
				this.m_structureLayout.addInternal(newMeasure);
			}
		}
	}
};
oFF.QDimension.prototype.addModellerMember = function(member)
{
	this.getKeyRefStorage().putExt(member, this.getName(), member.getStorageObjectName());
	this.notifyNodeChanged();
};
oFF.QDimension.prototype.addNameValuePair = function(nameValuePair)
{
	if (oFF.isNull(this.m_nameValuePairs))
	{
		this.m_nameValuePairs = oFF.XHashMapByString.create();
	}
	if (oFF.notNull(nameValuePair) && !this.m_nameValuePairs.containsKey(nameValuePair.getName()))
	{
		this.m_nameValuePairs.put(nameValuePair.getName(), nameValuePair);
	}
};
oFF.QDimension.prototype.addNewBasicMeasure = function(name, text)
{
	if (this.supportsBasicStructureMembers())
	{
		let member = oFF.QBasicMeasure._createBasicMeasure(this.getContext(), this);
		member.setName(name);
		member.setText(text);
		this.addMeasureInternal(member, false);
		return member;
	}
	return null;
};
oFF.QDimension.prototype.addNewCurrencyMeasure = function(name, text)
{
	if (this.supportsCustomMembers() && this.supportsCurrencyTranslationMembers())
	{
		let newMember = oFF.QCurrencyMeasure._createCurrencyMeasure(this.getContext(), this);
		newMember.setName(name);
		newMember.setText(text);
		this.addMeasureInternal(newMember, true);
		this.addQueryDataCells(newMember);
		return newMember;
	}
	return null;
};
oFF.QDimension.prototype.addNewExceptionAggregationMeasure = function(name, text)
{
	if (this.supportsCustomMembers())
	{
		let newMember = oFF.QExceptionAggregationMeasure._createExceptionAggregationMeasure(this.getContext(), this);
		newMember.setName(name);
		newMember.setText(text);
		this.addMeasureInternal(newMember, true);
		this.addQueryDataCells(newMember);
		return newMember;
	}
	return null;
};
oFF.QDimension.prototype.addNewFormulaMeasure = function(name, text)
{
	if (this.supportsCustomMembers())
	{
		let newMember = oFF.QFormulaMeasure._createFormulaMeasure(this.getContext(), this);
		newMember.setName(name);
		newMember.setText(text);
		this.addMeasureInternal(newMember, true);
		this.addQueryDataCells(newMember);
		return newMember;
	}
	return null;
};
oFF.QDimension.prototype.addNewRestrictedMeasure = function(name, text)
{
	if (this.supportsCustomMembers())
	{
		let newMember = oFF.QRestrictedMeasure._createRestrictedMeasure(this, this);
		newMember.setName(name);
		newMember.setText(text);
		this.addMeasureInternal(newMember, true);
		this.addQueryDataCells(newMember);
		return newMember;
	}
	return null;
};
oFF.QDimension.prototype.addNewRunningTotalMeasure = function(name, text)
{
	if (this.supportsRunningTotalMeasures())
	{
		let newMember = oFF.QRunningTotalMeasure._createRunningTotalMeasure(this.getContext(), this);
		newMember.setName(name);
		newMember.setText(text);
		this.addMeasureInternal(newMember, true);
		this.addQueryDataCells(newMember);
		return newMember;
	}
	return null;
};
oFF.QDimension.prototype.addNewUnitMeasure = function(name, text)
{
	if (this.supportsCustomMembers() && this.supportsUnitTranslationMembers())
	{
		let newMember = oFF.QUnitMeasure._createUnitMeasure(this.getContext(), this);
		newMember.setName(name);
		newMember.setText(text);
		this.addMeasureInternal(newMember, true);
		this.addQueryDataCells(newMember);
		return newMember;
	}
	return null;
};
oFF.QDimension.prototype.addNewVarianceMeasure = function(name, text)
{
	if (this.supportsCustomMembers())
	{
		let newMember = oFF.QVarianceMeasure._createVarianceMeasure(this, this);
		newMember.setName(name);
		newMember.setText(text);
		this.addMeasureInternal(newMember, true);
		this.addQueryDataCells(newMember);
		return newMember;
	}
	return null;
};
oFF.QDimension.prototype.addPlaceholderId = function(placeholderId)
{
	if (this.getDimensionType() !== oFF.DimensionType.ACCOUNT && this.getDimensionType() !== oFF.DimensionType.MEASURE_STRUCTURE)
	{
		oFF.noSupport();
	}
	this.m_placeholderIds.add(this.convertLegacyPlaceholderName(placeholderId));
};
oFF.QDimension.prototype.addQueryDataCells = function(member)
{
	let modelCapabilities = this.getModelCapabilities();
	if (modelCapabilities.supportsDataCells() && modelCapabilities.supportsRestrictedMeasures() && !member.isReleased())
	{
		this.getQueryModelBase().getQueryDataCellsBase().newQueryDataCellsForMember(member);
	}
};
oFF.QDimension.prototype.addRsField = oFF.noSupport;
oFF.QDimension.prototype.addRsField2 = oFF.noSupport;
oFF.QDimension.prototype.addSearchForKey = function(searchValue)
{
	return this.getSelector().addSearchForKey(searchValue);
};
oFF.QDimension.prototype.addSearchForKeyUsingDynamicFilter = function(searchValue)
{
	return this.getSelector().addSearchForKeyUsingDynamicFilter(searchValue);
};
oFF.QDimension.prototype.addSearchForText = function(searchValue)
{
	return this.getSelector().addSearchForText(searchValue);
};
oFF.QDimension.prototype.addSearchForTextUsingDynamicFilter = function(searchValue)
{
	return this.getSelector().addSearchForTextUsingDynamicFilter(searchValue);
};
oFF.QDimension.prototype.addSelectorFilter = function(filterValue, field, comparisonOperator)
{
	return this.getSelector().addSelectorFilter(filterValue, field, comparisonOperator);
};
oFF.QDimension.prototype.addSelectorFilterForFields = function(filterValue, fields, comparisonOperator, requestParents, doWildcardSearch)
{
	return this.getSelector().addSelectorFilterForFields(filterValue, fields, comparisonOperator, requestParents, doWildcardSearch);
};
oFF.QDimension.prototype.addSelectorFilterForKey = function(filterValue, comparisonOperator)
{
	return this.getSelector().addSelectorFilterForKey(filterValue, comparisonOperator);
};
oFF.QDimension.prototype.addSelectorFilterForSpecificKeys = function(keys, displayKeys)
{
	return this.getSelector().addSelectorFilterForSpecificKeys(keys, displayKeys);
};
oFF.QDimension.prototype.addSelectorFilterForText = function(filterValue, comparisonOperator)
{
	return this.getSelector().addSelectorFilterForText(filterValue, comparisonOperator);
};
oFF.QDimension.prototype.addSelectorFilterInterval = function(lowValue, highValue, field, comparisonOperator)
{
	return this.getSelector().addSelectorFilterInterval(lowValue, highValue, field, comparisonOperator);
};
oFF.QDimension.prototype.addSelectorFilterIntervalForKey = function(lowValue, highValue, comparisonOperator)
{
	return this.getSelector().addSelectorFilterIntervalForKey(lowValue, highValue, comparisonOperator);
};
oFF.QDimension.prototype.addSelectorForValuesAndExternalFilter = function(externalFilterName, values, searchMode)
{
	this.getSelector().addSelectorForValuesAndExternalFilter(externalFilterName, values, searchMode);
};
oFF.QDimension.prototype.addStickyMember = function(memberName)
{
	this.m_hierarchyManager.addStickyMember(memberName);
};
oFF.QDimension.prototype.areHierarchicalDimensionMemberNamesStoredAsFlat = function()
{
	return this.m_areHierarchicalDimensionMemberNamesStoredAsFlat;
};
oFF.QDimension.prototype.assertMemberUniqueName = function(name)
{
	if (oFF.isNull(name))
	{
		throw oFF.XException.createRuntimeException("The measure has no name");
	}
	oFF.XBooleanUtils.checkFalse(this.containsStructureMember(name), oFF.XStringUtils.concatenate3("The MeasureStructure already has a measure '", name, "' defined. You can call removeMeasure(String name) to remove a custom measure previously defined."));
};
oFF.QDimension.prototype.assertSupportsFieldLayoutType = function(type)
{
	if (!this.getMetadata().supportsFieldLayoutType(type))
	{
		throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate2("Field layout type is not supported ", type.getName()));
	}
};
oFF.QDimension.prototype.assignFreePlaceholderToMember = function(member)
{
	if (this.getMetadata().getDimensionType() === oFF.DimensionType.ACCOUNT)
	{
		let measureAlias = member.getAliasName();
		let placeholderId = this.getPlaceholderIdByAlias(measureAlias);
		if (oFF.isNull(placeholderId))
		{
			if (this.m_placeholderIds.contains(member.getName()))
			{
				placeholderId = member.getName();
			}
			else if (oFF.notNull(measureAlias) || member.getName() === null)
			{
				placeholderId = this.getNextFreePlaceholderId();
			}
		}
		if (oFF.notNull(placeholderId))
		{
			if (member.getName() === null)
			{
				member.setName(placeholderId);
			}
			this.m_placeholderIdMemberNameMap.put(placeholderId, member.getAliasOrMemberName());
		}
	}
	else if (this.getMetadata().getDimensionType() === oFF.DimensionType.MEASURE_STRUCTURE)
	{
		let currencyTranslationManager = this.getQueryModel().getCurrencyTranslationManager();
		if (currencyTranslationManager.isLegacyMeasureCurrencyTranslationAccountModel() && member.getComponentType().isEqualTo(oFF.MemberType.CURRENCY_MEASURE))
		{
			let currencyMeasureName = member.getName();
			let currencyPlaceholderId = this.getPlaceholderIdByAlias(currencyMeasureName);
			if (oFF.isNull(currencyPlaceholderId))
			{
				if (oFF.XString.isEqual(currencyMeasureName, oFF.CurrencyConstants.LOCAL_CURRENCY) && this.m_placeholderIds.contains(oFF.CurrencyTranslationConstants.SIGNED_DATA_LOCAL))
				{
					currencyPlaceholderId = oFF.CurrencyTranslationConstants.SIGNED_DATA_LOCAL;
				}
				else if (oFF.XString.isEqual(currencyMeasureName, oFF.CurrencyConstants.DEFAULT_CURRENCY) && this.m_placeholderIds.contains(oFF.CurrencyTranslationConstants.SIGNED_DATA))
				{
					currencyPlaceholderId = oFF.CurrencyTranslationConstants.SIGNED_DATA;
				}
				else
				{
					currencyPlaceholderId = this.getNextFreeCurrencyPlaceholderId();
				}
			}
			if (oFF.notNull(currencyPlaceholderId))
			{
				let assignedMember = null;
				let assignedMemberName = null;
				if (oFF.XString.isEqual(currencyMeasureName, oFF.CurrencyConstants.DEFAULT_CURRENCY) && this.m_placeholderIds.contains(oFF.CurrencyTranslationConstants.SIGNED_DATA))
				{
					assignedMemberName = this.m_placeholderIdMemberNameMap.getByKey(oFF.CurrencyTranslationConstants.SIGNED_DATA);
					assignedMember = this.getStructureMemberByAliasOrMember(assignedMemberName);
				}
				if (oFF.notNull(assignedMember) && assignedMember !== member)
				{
					let nextPlaceholderId = this.getNextFreeCurrencyPlaceholderId();
					if (oFF.notNull(nextPlaceholderId))
					{
						member.setAliasName(currencyMeasureName);
						this.m_placeholderIdMemberNameMap.put(currencyPlaceholderId, member.getAliasOrMemberName());
						this.m_placeholderIdMemberNameMap.put(nextPlaceholderId, assignedMemberName);
					}
				}
				else
				{
					member.setAliasName(currencyMeasureName);
					this.m_placeholderIdMemberNameMap.put(currencyPlaceholderId, currencyMeasureName);
				}
			}
		}
	}
};
oFF.QDimension.prototype.assignPlaceholderIdByAlias = function(placeholderId, aliasName)
{
	let member = this.getStructureMemberByAlias(aliasName);
	if (oFF.notNull(member))
	{
		this.m_placeholderIdMemberNameMap.put(this.convertLegacyPlaceholderName(placeholderId), aliasName);
	}
};
oFF.QDimension.prototype.baseValueTypeOnLowValueType = function(lowValueType, checkEitherHierarchy)
{
	let hierarchyActive = checkEitherHierarchy && this.isHierarchyActive() || this.isSelectorHierarchyActive();
	return hierarchyActive && this.getQueryModel() !== null && this.getQueryModel().getSystemType().isTypeOf(oFF.SystemType.ABAP) && this.getFlatKeyField().getValueType() === oFF.XValueType.DATE && lowValueType === oFF.XValueType.DATE;
};
oFF.QDimension.prototype.baseValueTypeOnSearchCriteria = function(name, dimension, checkEitherHierarchy)
{
	let hierarchyActive = checkEitherHierarchy && dimension.isHierarchyActive() || dimension.isSelectorHierarchyActive();
	return hierarchyActive && dimension.getQueryModel() !== null && dimension.getQueryModel().getSystemType().isTypeOf(oFF.SystemType.ABAP) && dimension.getFlatKeyField().getValueType() === oFF.XValueType.DATE && oFF.XStringUtils.isNotNullAndNotEmpty(name) && oFF.XString.indexOf(name, "!") === -1;
};
oFF.QDimension.prototype.canBeAggregated = function()
{
	return this.getMetadata().canBeAggregated();
};
oFF.QDimension.prototype.clearAlternativeFieldValues = function()
{
	this.m_alternativeFieldValues = oFF.XObjectExt.release(this.m_alternativeFieldValues);
};
oFF.QDimension.prototype.clearNonModelDefinedMemberAlternativeFieldValues = function()
{
	if (oFF.isNull(this.m_alternativeFieldValues))
	{
		return;
	}
	let alternativeFieldValues = this.m_alternativeFieldValues.getKeysAsIterator();
	while (alternativeFieldValues.hasNext())
	{
		let keyTypeRepresentationKey = alternativeFieldValues.next();
		let memberKeyMap = this.m_alternativeFieldValues.getByKey(keyTypeRepresentationKey);
		let memberKeys = memberKeyMap.getKeysAsIterator();
		while (memberKeys.hasNext())
		{
			let memberKey = memberKeys.next();
			let member = this.getStructureMember(memberKey);
			if (oFF.notNull(member) && !member.isModelDefinedMember())
			{
				let toRelease = memberKeyMap.remove(memberKey);
				oFF.XObjectExt.release(toRelease);
			}
		}
	}
	return;
};
oFF.QDimension.prototype.clearOrphanKeyRefs = function()
{
	for (let structureMemberIdx = this.m_allStructureMembers.size() - 1; structureMemberIdx >= 0; structureMemberIdx--)
	{
		if (this.m_allStructureMembers.get(structureMemberIdx) === null)
		{
			this.m_allStructureMembers.removeAt(structureMemberIdx);
		}
	}
	for (let structureLayoutIdx = this.m_structureLayout.size() - 1; structureLayoutIdx >= 0; structureLayoutIdx--)
	{
		if (this.m_structureLayout.get(structureLayoutIdx) === null)
		{
			this.m_structureLayout.removeAt(structureLayoutIdx);
		}
	}
	let placeholderIdsIter = this.m_placeholderIdMemberNameMap.getKeysAsIterator();
	while (placeholderIdsIter.hasNext())
	{
		let placeholderId = placeholderIdsIter.next();
		let assignedMemberName = this.m_placeholderIdMemberNameMap.getByKey(placeholderId);
		let assignedMember = this.getStructureMemberByAliasOrMember(assignedMemberName);
		if (oFF.notNull(assignedMember) && assignedMember.isReleased())
		{
			this.m_placeholderIdMemberNameMap.remove(placeholderId);
		}
	}
	this.notifyNodeChanged();
};
oFF.QDimension.prototype.clearOthersFromConditionsVisibilitySettings = function()
{
	this.m_resultStructureController.clearOthersFromConditionsVisibilitySettings();
};
oFF.QDimension.prototype.clearPlaceholderIds = function()
{
	this.m_placeholderIds.clear();
	this.m_placeholderIdMemberNameMap.clear();
};
oFF.QDimension.prototype.clearResultVisibilitySettings = function()
{
	this.m_resultStructureController.clearResultVisibilitySettings();
};
oFF.QDimension.prototype.clearSelectorFilter = function()
{
	this.getSelector().clearSelectorFilter();
};
oFF.QDimension.prototype.clearSelectorFilterByDimension = function(dimension)
{
	this.getSelector().clearSelectorFilterByDimension(dimension);
};
oFF.QDimension.prototype.clearSelectorHierarchyNode = function()
{
	this.getSelector().clearSelectorHierarchyNode();
};
oFF.QDimension.prototype.clearSelectorSettings = function()
{
	this.getSelector().clearSelectorSettings();
};
oFF.QDimension.prototype.clearStickyMembers = function()
{
	this.m_hierarchyManager.clearStickyMembers();
};
oFF.QDimension.prototype.cloneOlapComponent = function(context, parent)
{
	let clone = oFF.QDimension._create(context, parent);
	clone.copyDimension(this);
	clone.copyDimensionMember(this);
	return clone;
};
oFF.QDimension.prototype.configureSelectorFilters = function(requestParents, keepUsingDynamicFilterForLBH)
{
	this.getSelector().configureSelectorFilters(requestParents, keepUsingDynamicFilterForLBH);
};
oFF.QDimension.prototype.containsStructureMember = function(name)
{
	if (oFF.isNull(this.m_allStructureMembers) || oFF.isNull(name))
	{
		return false;
	}
	return this.getStructureMemberByKey(name, true) !== null;
};
oFF.QDimension.prototype.convertLegacyPlaceholderName = function(name)
{
	if (oFF.notNull(name) && this.getSession().hasFeature(oFF.FeatureToggleOlap.MULTIPLE_ACCOUNT_HIERARCHIES) && this.getDimensionType() === oFF.DimensionType.ACCOUNT)
	{
		let placeholderPattern = oFF.XStringUtils.concatenate2("].&[", oFF.QModelConstants.CALCULATION_PLACEHOLDER_ID_PREFIX);
		if (oFF.XString.startsWith(name, "[") && oFF.XString.indexOf(name, placeholderPattern) !== -1)
		{
			let index = oFF.XString.indexOf(name, oFF.QModelConstants.CALCULATION_PLACEHOLDER_ID_PREFIX);
			let endindex = oFF.XString.indexOfFrom(name, "]", index);
			let noPrefixMemberName = oFF.XString.substring(name, index, endindex);
			return noPrefixMemberName;
		}
	}
	return name;
};
oFF.QDimension.prototype.convertPlaceholderIdToRuntimePlaceholderId = function(placeholderId)
{
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.MULTIPLE_ACCOUNT_HIERARCHIES) && this.getDimensionType() === oFF.DimensionType.ACCOUNT)
	{
		if (oFF.XString.startsWith(placeholderId, oFF.QModelConstants.CALCULATION_PLACEHOLDER_ID_PREFIX))
		{
			let hierarchyName = this.getHierarchyName() !== null ? this.getHierarchyName() : this.getDefaultHierarchyName();
			let placeholderPrefix = oFF.XStringUtils.concatenate5("[", this.getName(), "].[", hierarchyName, "].&[");
			return oFF.XStringUtils.concatenate3(placeholderPrefix, placeholderId, "]");
		}
	}
	return placeholderId;
};
oFF.QDimension.prototype.convertToFieldLayoutType = function(type)
{
	if (this.m_fieldLayoutType !== type)
	{
		if (this.getMetadata().supportsFieldLayoutType(type))
		{
			if (type === oFF.FieldLayoutType.FIELD_BASED)
			{
				let effectiveResultSetFields = this.getEffectiveResultSetFields();
				let fields = this.getResultSetFields();
				fields.queueEventing();
				fields.clear();
				fields.addAll(effectiveResultSetFields);
				fields.resumeEventing();
				this.setFieldLayoutType(type);
			}
		}
	}
};
oFF.QDimension.prototype.copyDimension = function(origin)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , origin, null);
	let metadata = origin.getMetadata();
	if (oFF.notNull(metadata) && !this.getDimensionType().isTypeOf(oFF.DimensionType.CALCULATED_DIMENSION))
	{
		let originalCacheKey = origin.getMetadata().getCacheKey();
		let originDimMd = this.getOlapEnv().getDimensionMetadataByKey(originalCacheKey);
		this.m_metadata = oFF.XWeakReferenceUtil.getWeakRef(originDimMd);
		let queryModel = origin.getQueryModelBase();
		if (oFF.isNull(this.m_metadata) && queryModel.isPartialResponse())
		{
			this.m_metadata = oFF.XWeakReferenceUtil.getWeakRef(metadata);
		}
	}
	this.setDimensionType(origin.getDimensionType());
	this.m_defaultAxisType = origin.m_defaultAxisType;
	this.m_areHierarchicalDimensionMemberNamesStoredAsFlat = origin.m_areHierarchicalDimensionMemberNamesStoredAsFlat;
	this.m_fieldContainer.copyFrom(origin.m_fieldContainer, null);
	this.m_attributeContainer.copyFrom(origin.m_attributeContainer, null);
	this.m_fieldLayoutType = origin.m_fieldLayoutType;
	this.m_selectorFieldLayoutType = origin.m_selectorFieldLayoutType;
	this.m_skip = origin.m_skip;
	this.m_top = origin.m_top;
	this.m_designTimeMode = origin.m_designTimeMode;
	this.m_resultStructureController.copyFrom(origin.m_resultStructureController, null);
	if (oFF.notNull(origin.m_resultMemberTotal))
	{
		this.createResultMember(oFF.MemberType.RESULT);
	}
	if (oFF.notNull(origin.m_resultMemberTotalIncluded))
	{
		this.createResultMember(oFF.MemberType.CONDITION_RESULT);
	}
	if (oFF.notNull(origin.m_resultMemberTotalRemaining))
	{
		this.createResultMember(oFF.MemberType.CONDITION_OTHERS_RESULT);
	}
	if (oFF.notNull(origin.m_resultOthersFromConditions))
	{
		this.createResultMember(oFF.MemberType.OTHERS_FROM_CONDITIONS_RESULT);
	}
	this.m_readModeManager.copyFrom(origin.m_readModeManager, null);
	this.m_isCumulative = origin.m_isCumulative;
	if (oFF.notNull(origin.m_nameValuePairs))
	{
		this.m_nameValuePairs = origin.m_nameValuePairs.createMapByStringCopy();
	}
	this.m_isIgnoredOnExport = origin.m_isIgnoredOnExport;
	this.m_hierarchyManager.copyFrom(origin.getHierarchyManager(), null);
	this.m_skipMetadataValidationOnRepoImport = origin.m_skipMetadataValidationOnRepoImport;
	let originAxis = origin.getAxis();
	if (oFF.notNull(originAxis))
	{
		this.setAxis(this.getQueryModel().getAxis(originAxis.getType()));
	}
	this.m_placeholderIds = origin.m_placeholderIds.createListCopy();
	this.m_placeholderIdMemberNameMap = origin.m_placeholderIdMemberNameMap.createMapByStringCopy();
	this.m_overdefinedMemberManager.copyFrom(origin.m_overdefinedMemberManager, null);
	this.m_overrideText = origin.m_overrideText;
	if (oFF.notNull(origin.m_selector))
	{
		this.getSelector().copyFrom(origin.m_selector, null);
	}
	this.m_runtimeDisplayGroupName = origin.m_runtimeDisplayGroupName;
	this.m_runtimeDisplayGroupText = origin.m_runtimeDisplayGroupText;
	this.m_totalsModified = origin.m_totalsModified;
};
oFF.QDimension.prototype.copyDimensionMember = function(origin)
{
	if (origin.getKeyRefStorage() !== this.getKeyRefStorage())
	{
		this.getKeyRefStorage().removeObjectsByGroup(oFF.KeyRefConstants.MAIN_STORAGE, this.getName(), true);
		let originModellerMembers = origin.getKeyRefStorage().getObjectsByGroup(oFF.KeyRefConstants.MAIN_STORAGE, this.getName());
		let originModellerMembersIter = originModellerMembers.getIterator();
		while (originModellerMembersIter.hasNext())
		{
			let originModellerMember = originModellerMembersIter.next();
			let newModellerMember = oFF.QStructureMember.createMeasure(originModellerMember.getMemberType(), this.getContext(), this);
			oFF.QStructureMember.copyMeasure(newModellerMember, originModellerMember);
			this.getKeyRefStorage().putExt(newModellerMember, this.getName(), newModellerMember.getStorageObjectName());
		}
	}
	if (oFF.notNull(origin.m_allStructureMembers))
	{
		let clientQueryObjectStorageName = origin.getQueryManager().getClientQueryObjectStorageName();
		let context = this.getContext();
		let i;
		let size = origin.m_allStructureMembers.size();
		for (i = 0; i < size; i++)
		{
			let origMeasure = origin.m_allStructureMembers.get(i);
			if (oFF.isNull(origMeasure))
			{
				continue;
			}
			let newMeasure = context.getOlapEnv().getClientQueryObjectManager().getClientQueryObjectIncludeReleasedByKeyRef(origMeasure, clientQueryObjectStorageName);
			if (oFF.isNull(newMeasure))
			{
				newMeasure = this.getKeyRefStorage().get(oFF.KeyRefConstants.MAIN_STORAGE, this.getName(), origMeasure.getStorageObjectName());
			}
			if (oFF.isNull(newMeasure))
			{
				newMeasure = oFF.QStructureMember.createMeasure(origMeasure.getMemberType(), this.getContext(), this);
				oFF.QStructureMember.copyMeasure(newMeasure, origMeasure);
			}
			this.addMeasureInternal(newMeasure, false);
			if (origMeasure.getMemberType() !== oFF.MemberType.BASIC_MEASURE)
			{
				this.addQueryDataCells(newMeasure);
			}
		}
		if (origin.m_structureLayout.isEmpty())
		{
			this.m_structureLayout.clear();
		}
		let newSortedList = oFF.QModelComponentList.createModelComponentWithNameList(context, this, false, "Structure Layout", true);
		for (let n = 0; n < origin.m_structureLayout.size(); n++)
		{
			let currentMemberOrigin = origin.m_structureLayout.get(n);
			if (oFF.isNull(currentMemberOrigin))
			{
				continue;
			}
			let foundMember = this.m_structureLayout.getByKey(currentMemberOrigin.getStorageObjectName());
			if (oFF.notNull(foundMember))
			{
				newSortedList.addInternal(foundMember);
			}
			else if (this.getOlapEnv().getClientQueryObjectManager().getClientQueryObjectIncludeReleasedByKeyRef(currentMemberOrigin, clientQueryObjectStorageName) !== null)
			{
				newSortedList.addInternal(currentMemberOrigin);
			}
		}
		this.m_structureLayout = newSortedList;
		if (oFF.notNull(origin.m_alternativeFieldValues))
		{
			this.m_alternativeFieldValues = origin.m_alternativeFieldValues.createMapByStringCopy();
		}
	}
	if (oFF.notNull(origin.m_structureMemberLazyLoader))
	{
		this.setStructureMemberLazyLoader(origin.m_structureMemberLazyLoader.copyStructureMemberLazyLoader(this));
	}
};
oFF.QDimension.prototype.copyFromInternal = function(other, flags)
{
	this.copyDimension(other);
};
oFF.QDimension.prototype.createFilterList = function()
{
	let hierarchyName = null;
	if (this.isHierarchyActive())
	{
		hierarchyName = this.getHierarchyName();
	}
	return oFF.QFilterCartesianList._createMd(this.getContext(), null, this.getKeyField().getMetadata(), hierarchyName);
};
oFF.QDimension.prototype.createResultMember = function(type)
{
	if (type === oFF.MemberType.RESULT)
	{
		if (oFF.isNull(this.m_resultMemberTotal))
		{
			this.m_resultMemberTotal = oFF.QDimensionMemberResult.createQDimensionMember(this.getContext(), this, type);
		}
		return this.m_resultMemberTotal;
	}
	if (type === oFF.MemberType.CONDITION_RESULT)
	{
		if (oFF.isNull(this.m_resultMemberTotalIncluded))
		{
			this.m_resultMemberTotalIncluded = oFF.QDimensionMemberResult.createQDimensionMember(this.getContext(), this, type);
		}
		return this.m_resultMemberTotalIncluded;
	}
	if (type === oFF.MemberType.CONDITION_OTHERS_RESULT)
	{
		if (oFF.isNull(this.m_resultMemberTotalRemaining))
		{
			this.m_resultMemberTotalRemaining = oFF.QDimensionMemberResult.createQDimensionMember(this.getContext(), this, type);
		}
		return this.m_resultMemberTotalRemaining;
	}
	if (type === oFF.MemberType.OTHERS_FROM_CONDITIONS_RESULT)
	{
		if (oFF.isNull(this.m_resultOthersFromConditions))
		{
			this.m_resultOthersFromConditions = oFF.QDimensionMemberResult.createQDimensionMember(this.getContext(), this, type);
		}
		return this.m_resultOthersFromConditions;
	}
	return null;
};
oFF.QDimension.prototype.customHierarchiesIncluded = function()
{
	return this.getHierarchyManager().customHierarchiesIncluded();
};
oFF.QDimension.prototype.determineBestReadMode = function(context, mode)
{
	return this.m_readModeManager.determineBestReadMode(context, mode);
};
oFF.QDimension.prototype.effectivelyUseHierarchyDueDateVariable = function()
{
	return this.m_hierarchyManager.effectivelyUseHierarchyDueDateVariable();
};
oFF.QDimension.prototype.effectivelyUseHierarchyNameVariable = function()
{
	return this.m_hierarchyManager.effectivelyUseHierarchyNameVariable();
};
oFF.QDimension.prototype.effectivelyUseHierarchyVersionVariable = function()
{
	return this.m_hierarchyManager.effectivelyUseHierarchyVersionVariable();
};
oFF.QDimension.prototype.fetchHierarchyCatalog = function(syncType, listener, customIdentifier)
{
	return this.getHierarchyManager().fetchHierarchyCatalog(syncType, listener, customIdentifier);
};
oFF.QDimension.prototype.fetchHierarchyLevels = function(syncType, listener, customIdentifier, hierarchyUniqueName)
{
	return this.getHierarchyManager().fetchHierarchyLevels(syncType, listener, customIdentifier, hierarchyUniqueName);
};
oFF.QDimension.prototype.findKeyField = function()
{
	let field = this.getKeyField();
	oFF.XObjectExt.assertNotNullExt(field, oFF.XStringUtils.concatenate2("Cannot find key field for dimension ", this.getName()));
	return field;
};
oFF.QDimension.prototype.getAccountTypeAttributeName = function()
{
	return this.getMetadata().getAccountTypeAttributeName();
};
oFF.QDimension.prototype.getActualLanguage = function()
{
	let queryManager = this.getQueryManagerBase();
	if (oFF.isNull(queryManager))
	{
		return null;
	}
	let language = null;
	let connection = queryManager.getConnection();
	if (oFF.notNull(connection))
	{
		let systemConnect = connection.getSystemConnect();
		if (oFF.notNull(systemConnect))
		{
			let serverMetadata = systemConnect.getServerMetadata();
			if (oFF.notNull(serverMetadata))
			{
				language = serverMetadata.getUserLanguage();
			}
		}
	}
	if (oFF.isNull(language))
	{
		let sysDesc = queryManager.getSystemDescription();
		if (oFF.notNull(sysDesc))
		{
			language = sysDesc.getLanguage();
		}
	}
	return language;
};
oFF.QDimension.prototype.getAdditionalPeriods = function()
{
	return this.getMetadata().getAdditionalPeriods();
};
oFF.QDimension.prototype.getAdvancedResultStructure = function()
{
	return this.m_resultStructureController.getAdvancedResultStructure();
};
oFF.QDimension.prototype.getAlignmentPriority = function()
{
	return this.m_resultStructureController.getAlignmentPriority();
};
oFF.QDimension.prototype.getAllDimensionMembers = function()
{
	let member = oFF.XList.create();
	if (this.isMeasureStructure())
	{
		let allStructureMembers = this.getAllStructureMembers();
		oFF.XCollectionUtils.addAll(member, allStructureMembers);
	}
	else
	{
		let allDimensionMembers = this.processValueHelp(oFF.SyncType.BLOCKING, null, null).getData();
		member = this.nodeToMember(allDimensionMembers);
	}
	return member;
};
oFF.QDimension.prototype.getAllFields = oFF.noSupport;
oFF.QDimension.prototype.getAllStructureMembers = function()
{
	if (oFF.notNull(this.m_structureMemberLazyLoader))
	{
		this.m_structureMemberLazyLoader.loadAllStructureMembers();
	}
	return this.m_allStructureMembers;
};
oFF.QDimension.prototype.getAlternateFieldValueWithActualLanguageOrLanguageParam = function(hierarchyKey, memberKey, fieldName, withActualLanguage, languageParameter)
{
	if (oFF.notNull(this.m_alternativeFieldValues))
	{
		let keyMap = this.m_alternativeFieldValues.getByKey(oFF.XBoolean.convertToString(hierarchyKey));
		if (oFF.notNull(keyMap))
		{
			let fieldMap = keyMap.getByKey(memberKey);
			if (oFF.notNull(fieldMap))
			{
				let languageMap = fieldMap.getByKey(fieldName);
				if (oFF.notNull(languageMap))
				{
					let language = languageParameter;
					if (withActualLanguage)
					{
						language = this.getActualLanguage();
					}
					if (oFF.XStringUtils.isNullOrEmpty(language) || languageMap.getByKey(language) === null)
					{
						return languageMap.getByKey("");
					}
					return languageMap.getByKey(language);
				}
			}
		}
	}
	return null;
};
oFF.QDimension.prototype.getAlternativeFieldValue = function(hierarchyKey, memberKey, fieldName, language)
{
	return this.getAlternateFieldValueWithActualLanguageOrLanguageParam(hierarchyKey, memberKey, fieldName, false, language);
};
oFF.QDimension.prototype.getAlternativeFieldValueFields = function(hierarchyKey, memberKey)
{
	if (oFF.notNull(this.m_alternativeFieldValues))
	{
		let keyMap = this.m_alternativeFieldValues.getByKey(oFF.XBoolean.convertToString(hierarchyKey));
		if (oFF.notNull(keyMap))
		{
			let fieldMap = keyMap.getByKey(memberKey);
			if (oFF.notNull(fieldMap))
			{
				return fieldMap.getKeysAsReadOnlyList();
			}
		}
	}
	return null;
};
oFF.QDimension.prototype.getAlternativeFieldValueLanguageOption = function(hierarchyKey, memberKey, fieldName)
{
	return this.getAlternateFieldValueWithActualLanguageOrLanguageParam(hierarchyKey, memberKey, fieldName, true, null);
};
oFF.QDimension.prototype.getAlternativeFieldValueLanguages = function(hierarchyKey, memberKey, fieldName)
{
	if (oFF.notNull(this.m_alternativeFieldValues))
	{
		let keyMap = this.m_alternativeFieldValues.getByKey(oFF.XBoolean.convertToString(hierarchyKey));
		if (oFF.notNull(keyMap))
		{
			let fieldMap = keyMap.getByKey(memberKey);
			if (oFF.notNull(fieldMap))
			{
				let languageMap = fieldMap.getByKey(fieldName);
				if (oFF.notNull(languageMap))
				{
					return languageMap.getKeysAsReadOnlyList();
				}
			}
		}
	}
	return null;
};
oFF.QDimension.prototype.getAlternativeFieldValueMemberKeys = function(hierarchyKey)
{
	if (oFF.notNull(this.m_alternativeFieldValues))
	{
		let keyMap = this.m_alternativeFieldValues.getByKey(oFF.XBoolean.convertToString(hierarchyKey));
		if (oFF.notNull(keyMap))
		{
			return keyMap.getKeysAsReadOnlyList();
		}
	}
	return null;
};
oFF.QDimension.prototype.getAttributeByName = function(name)
{
	return this.m_attributeContainer.getAttributeByName(name);
};
oFF.QDimension.prototype.getAttributeContainer = function()
{
	return this.m_attributeContainer;
};
oFF.QDimension.prototype.getAttributeContainerBase = function()
{
	return this.m_attributeContainer;
};
oFF.QDimension.prototype.getAttributeViewName = function()
{
	return this.getMetadata().getAttributeViewName();
};
oFF.QDimension.prototype.getAttributes = function()
{
	return this.m_attributeContainer.getAttributes();
};
oFF.QDimension.prototype.getAttributesExt = function(context)
{
	return this.m_attributeContainer.getAttributesExt(context);
};
oFF.QDimension.prototype.getAxis = function()
{
	return this.getAxisBase();
};
oFF.QDimension.prototype.getAxisBase = function()
{
	let udh = this.getUniversalDisplayHierarchy();
	if (oFF.notNull(udh) && udh.isActive())
	{
		return udh.getHierarchyDedicatedAxis();
	}
	return oFF.XWeakReferenceUtil.getHardRef(this.m_axis);
};
oFF.QDimension.prototype.getAxisType = function()
{
	let axis = this.getAxisBase();
	return oFF.isNull(axis) ? null : axis.getType();
};
oFF.QDimension.prototype.getBasicStructureMembers = function()
{
	if (this.supportsBasicStructureMembers())
	{
		return this.getStructureMembers(true);
	}
	return null;
};
oFF.QDimension.prototype.getCacheKey = function()
{
	return this.getMetadata().getCacheKey();
};
oFF.QDimension.prototype.getCartesianListFromSelectionStateContainer = function(selectionStateContainer)
{
	let cartList = null;
	if (oFF.notNull(selectionStateContainer))
	{
		let complexSelectionRoot = selectionStateContainer.getFilterRootElement();
		if (oFF.isNull(complexSelectionRoot) || selectionStateContainer.isCartesianProduct())
		{
			let cartesianProduct = selectionStateContainer.getCartesianProductWithDefault();
			cartList = cartesianProduct.getCartesianListByDimensionName(this.getName());
		}
		if (selectionStateContainer.isComplexFilter())
		{
			cartList = this.getFilterFromComplexSelection(complexSelectionRoot);
		}
	}
	return cartList;
};
oFF.QDimension.prototype.getCatalogItemHierarchyUniqueName = function(hierarchyName)
{
	return this.m_hierarchyManager.getCatalogItemHierarchyUniqueName(hierarchyName);
};
oFF.QDimension.prototype.getClientDefaultKeyField = function()
{
	return this.m_fieldContainer.getClientDefaultKeyField();
};
oFF.QDimension.prototype.getClientDefaultTextField = function()
{
	return this.m_fieldContainer.getClientDefaultTextField();
};
oFF.QDimension.prototype.getCubeBlendingPropertiesField = function()
{
	return this.m_fieldContainer.getCubeBlendingPropertiesField();
};
oFF.QDimension.prototype.getCustomHierarchies = function()
{
	return this.m_hierarchyManager.getCustomHierarchies();
};
oFF.QDimension.prototype.getCustomHierarchyDefinition = function()
{
	return this.m_hierarchyManager.getCustomHierarchyDefinition();
};
oFF.QDimension.prototype.getCustomStructureMembers = function()
{
	return oFF.XStream.of(this.getAllStructureMembers()).filter((member) => {
		return oFF.notNull(member) && !member.isReleased() && !member.isModelDefinedMember() && !member.isCreatedFromMetadata();
	}).collect(oFF.XStreamCollector.toListOfNameObject());
};
oFF.QDimension.prototype.getDefaultAxisType = function()
{
	return this.m_defaultAxisType;
};
oFF.QDimension.prototype.getDefaultFieldLayoutType = function()
{
	return this.getMetadata().getDefaultFieldLayoutType();
};
oFF.QDimension.prototype.getDefaultHierarchyName = function()
{
	return this.m_hierarchyManager.getDefaultHierarchyName();
};
oFF.QDimension.prototype.getDefaultInitialDrillLevel = function()
{
	return this.m_hierarchyManager.getDefaultInitialDrillLevel();
};
oFF.QDimension.prototype.getDefaultMemberValue = function()
{
	return this.getMetadata().getDefaultMemberValue();
};
oFF.QDimension.prototype.getDefaultResultSetAttributes = function()
{
	return this.m_attributeContainer.getDefaultResultSetAttributes();
};
oFF.QDimension.prototype.getDefaultResultSetFields = function()
{
	return this.m_fieldContainer.getDefaultResultSetFields();
};
oFF.QDimension.prototype.getDefaultResultSetTextField = function()
{
	return this.m_fieldContainer.getDefaultResultSetTextField();
};
oFF.QDimension.prototype.getDesignDisplayGroupName = function()
{
	return this.getMetadata().getDesignDisplayGroupName();
};
oFF.QDimension.prototype.getDesignDisplayGroupText = function()
{
	return this.getMetadata().getDesignDisplayGroupText();
};
oFF.QDimension.prototype.getDimension = function()
{
	return this;
};
oFF.QDimension.prototype.getDimensionMember = function(name)
{
	let remappedName = this.remapIfDefaultMemberName(name);
	if (this.supportsBasicStructureMembers())
	{
		let structureMember = this.getStructureMemberByKey(remappedName, false);
		if (oFF.notNull(structureMember) || this.getDimensionType() !== oFF.DimensionType.ACCOUNT)
		{
			return structureMember;
		}
	}
	return this.getDimensionMemberWithFormat(remappedName, null);
};
oFF.QDimension.prototype.getDimensionMemberByDate = function(keyValue)
{
	return this.getDimensionMemberWithFormat(keyValue.toIsoFormat(), oFF.DateTimeFormat.ISO);
};
oFF.QDimension.prototype.getDimensionMemberByDouble = function(keyValue)
{
	return this.getDimensionMemberWithFormat(oFF.XDouble.convertToString(keyValue), null);
};
oFF.QDimension.prototype.getDimensionMemberByInt = function(keyValue)
{
	return this.getDimensionMemberWithFormat(oFF.XInteger.convertToString(keyValue), null);
};
oFF.QDimension.prototype.getDimensionMemberByLong = function(keyValue)
{
	return this.getDimensionMemberWithFormat(oFF.XLong.convertToString(keyValue), null);
};
oFF.QDimension.prototype.getDimensionMemberWithFormat = function(name, valueFormat)
{
	let keyField = this.findKeyField();
	return this.getDimensionMemberWithFormatInternal(name, keyField.getValueType(), keyField);
};
oFF.QDimension.prototype.getDimensionMemberWithFormatInternal = function(name, valueType, keyField)
{
	let dimensionMember = null;
	if (this.supportsBasicStructureMembers())
	{
		let structureMember = this.getStructureMemberByKey(name, false);
		if (oFF.notNull(structureMember) && this.getDimensionType() !== oFF.DimensionType.ACCOUNT)
		{
			dimensionMember = structureMember;
		}
	}
	if (oFF.isNull(dimensionMember))
	{
		dimensionMember = oFF.QDimensionMember.createDimensionMember(this.getContext(), this);
	}
	dimensionMember.setName(name);
	let replaceValueType = this.baseValueTypeOnSearchCriteria(name, this, true);
	let value = oFF.XValueUtil.getValueFromString(name, replaceValueType ? dimensionMember.getDimension().getFlatKeyField().getValueType() : valueType);
	dimensionMember.createAndAddFieldWithValue(keyField, value);
	return dimensionMember;
};
oFF.QDimension.prototype.getDimensionMemberWithValue = function(name, field)
{
	let valueType = field.getValueType();
	let replaceValueType = this.baseValueTypeOnLowValueType(name.getValueType(), true);
	if (replaceValueType)
	{
		valueType = field.getDimension().getFlatKeyField().getValueType();
	}
	if (!valueType.isTypeOf(name.getValueType()))
	{
		throw oFF.XException.createIllegalStateException("incompatible value types");
	}
	let dimensionMember = oFF.QDimensionMember.createDimensionMember(this.getContext(), this);
	oFF.XObjectExt.assertNotNullExt(dimensionMember.createAndAddFieldWithValue(field, name), "internal error");
	dimensionMember.setName(name.toString());
	return dimensionMember;
};
oFF.QDimension.prototype.getDimensionType = function()
{
	let metadata = this.getMetadata();
	if (oFF.isNull(metadata))
	{
		return oFF.DimensionType.DIMENSION;
	}
	return metadata.getDimensionType();
};
oFF.QDimension.prototype.getDisplayKeyField = function()
{
	return this.m_fieldContainer.getDisplayKeyField();
};
oFF.QDimension.prototype.getEffectiveHierarchyDueDate = function()
{
	return this.m_hierarchyManager.getEffectiveHierarchyDueDate();
};
oFF.QDimension.prototype.getEffectiveHierarchyVersion = function()
{
	return this.m_hierarchyManager.getEffectiveHierarchyVersion();
};
oFF.QDimension.prototype.getEffectiveResultSetFields = function()
{
	if (this.m_fieldLayoutType === oFF.FieldLayoutType.FIELD_BASED)
	{
		return this.m_fieldContainer.getResultSetFields();
	}
	return this.m_attributeContainer.getResultSetAttributes().getEffectiveFields(oFF.QContextType.RESULT_SET);
};
oFF.QDimension.prototype.getExtendedStructureMembers = function()
{
	if (this.isStructure())
	{
		return this.getStructureMembers(false);
	}
	return null;
};
oFF.QDimension.prototype.getExternalName = function()
{
	return this.getMetadata().getExternalName();
};
oFF.QDimension.prototype.getFieldByName = function(name)
{
	return this.m_fieldContainer.getFieldByName(name);
};
oFF.QDimension.prototype.getFieldByNameOrAlias = function(name)
{
	return this.m_fieldContainer.getFieldByNameOrAlias(name);
};
oFF.QDimension.prototype.getFieldByPresentationType = function(presentationType)
{
	let mainAttribute = this.getMainAttribute();
	if (oFF.isNull(mainAttribute))
	{
		return this.m_fieldContainer.getFieldByPresentationType(presentationType);
	}
	return mainAttribute.getFieldByPresentationType(presentationType);
};
oFF.QDimension.prototype.getFieldBySemanticType = function(semanticType)
{
	return this.m_fieldContainer.getFieldBySemanticType(semanticType);
};
oFF.QDimension.prototype.getFieldContainer = function()
{
	return this.m_fieldContainer;
};
oFF.QDimension.prototype.getFieldContainerBase = function()
{
	return this.m_fieldContainer;
};
oFF.QDimension.prototype.getFieldIterator = function()
{
	return this.m_fieldContainer.getFieldIterator();
};
oFF.QDimension.prototype.getFieldLayoutType = function()
{
	return this.m_fieldLayoutType;
};
oFF.QDimension.prototype.getFieldLayoutTypeExt = function(context)
{
	if (context === oFF.QContextType.RESULT_SET)
	{
		return this.m_fieldLayoutType;
	}
	return this.m_selectorFieldLayoutType;
};
oFF.QDimension.prototype.getFields = function()
{
	return this.m_fieldContainer.getFields();
};
oFF.QDimension.prototype.getFieldsExt = function(context)
{
	return this.m_fieldContainer.getFieldsExt(context);
};
oFF.QDimension.prototype.getFieldsListByActiveUsageType = function()
{
	let result;
	if (this.isHierarchyAssignedAndActive())
	{
		result = this.m_fieldContainer.getHierarchyFieldsList();
	}
	else
	{
		result = this.m_fieldContainer.getFlatFieldsList();
	}
	return result;
};
oFF.QDimension.prototype.getFieldsListByActiveUsageTypeExt = function(context)
{
	let result = null;
	if (context === oFF.QContextType.RESULT_SET)
	{
		result = this.getFieldsListByActiveUsageType();
	}
	return result;
};
oFF.QDimension.prototype.getFilter = function()
{
	let queryModel = this.getQueryModel();
	if (oFF.isNull(queryModel))
	{
		return null;
	}
	let selectionStateContainer = queryModel.getFilter().getDynamicFilter();
	return this.getCartesianListFromSelectionStateContainer(selectionStateContainer);
};
oFF.QDimension.prototype.getFilterCapabilities = function()
{
	return this.getMetadata().getFilterCapabilities();
};
oFF.QDimension.prototype.getFilterConsideringLinkedFilters = function()
{
	let listOfCartesianElements = oFF.XList.create();
	let cartList = this.getFilter();
	if (oFF.notNull(cartList))
	{
		listOfCartesianElements.add(cartList);
	}
	listOfCartesianElements.addAll(this.getLinkedFilter());
	return listOfCartesianElements;
};
oFF.QDimension.prototype.getFilterFromComplexSelection = function(complexSelectionRoot)
{
	let cartesianList = null;
	if (complexSelectionRoot.getOlapComponentType() === oFF.FilterComponentType.AND)
	{
		let selectionIterator = complexSelectionRoot.getChildrenIterator();
		while (selectionIterator.hasNext())
		{
			let component = selectionIterator.next();
			if (component.getOlapComponentType().isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
			{
				let dimensionName = component.getDimensionName();
				if (oFF.XString.isEqual(dimensionName, this.getName()))
				{
					if (oFF.notNull(cartesianList))
					{
						return null;
					}
					cartesianList = component;
				}
			}
		}
	}
	return cartesianList;
};
oFF.QDimension.prototype.getFirstFieldByType = function(type)
{
	return this.m_fieldContainer.getFirstFieldByType(type);
};
oFF.QDimension.prototype.getFirstWeekDay = function()
{
	return this.getMetadata().getFirstWeekDay();
};
oFF.QDimension.prototype.getFirstYearWeekIndicator = function()
{
	return this.getMetadata().getFirstYearWeekIndicator();
};
oFF.QDimension.prototype.getFiscalDisplayPeriod = function()
{
	return this.getMetadata().getFiscalDisplayPeriod();
};
oFF.QDimension.prototype.getFiscalEnabled = function()
{
	return this.getMetadata().getFiscalEnabled();
};
oFF.QDimension.prototype.getFiscalPeriodPrefix = function()
{
	return this.getMetadata().getFiscalPeriodPrefix();
};
oFF.QDimension.prototype.getFiscalShift = function()
{
	return this.getMetadata().getFiscalShift();
};
oFF.QDimension.prototype.getFlatDisplayKeyField = function()
{
	return this.m_fieldContainer.getFlatDisplayKeyField();
};
oFF.QDimension.prototype.getFlatFieldsList = function()
{
	return this.m_fieldContainer.getFlatFieldsList();
};
oFF.QDimension.prototype.getFlatKeyField = function()
{
	return this.m_fieldContainer.getFlatKeyField();
};
oFF.QDimension.prototype.getFlatMemberNameWithMatchingHierarchy = function(name)
{
	let memberName = name;
	let memberNameHierarchy = null;
	if (oFF.notNull(memberName) && this.areHierarchicalDimensionMemberNamesStoredAsFlat() && oFF.QDimensionMemberNameUtil.isMDXHierarchyKey(memberName))
	{
		let hierarchyAndMemberName = oFF.QDimensionMemberNameUtil.parseHierarchyAndFlatMemberName(memberName);
		memberNameHierarchy = hierarchyAndMemberName.getFirstString();
		memberName = hierarchyAndMemberName.getSecondString();
	}
	if (oFF.isNull(memberNameHierarchy) || this.getHierarchyName() === null && oFF.XString.isEqual(memberNameHierarchy, this.getDefaultHierarchyName()) || this.getHierarchyName() !== null && oFF.XString.isEqual(memberNameHierarchy, this.getHierarchyName()))
	{
		return memberName;
	}
	return null;
};
oFF.QDimension.prototype.getFlatTextField = function()
{
	return this.m_fieldContainer.getFlatTextField();
};
oFF.QDimension.prototype.getFreePlaceholderIds = function()
{
	let freePlaceholderIds = oFF.XList.create();
	let placeholderIter = this.m_placeholderIds.getIterator();
	while (placeholderIter.hasNext())
	{
		let placeholderId = placeholderIter.next();
		if (!this.m_placeholderIdMemberNameMap.containsKey(placeholderId))
		{
			freePlaceholderIds.add(placeholderId);
		}
	}
	return freePlaceholderIds;
};
oFF.QDimension.prototype.getGeoAreaNameField = function()
{
	return this.m_fieldContainer.getGeoAreaNameField();
};
oFF.QDimension.prototype.getGeoLevelField = function()
{
	return this.m_fieldContainer.getGeoLevelField();
};
oFF.QDimension.prototype.getGeoPointField = function()
{
	return this.m_fieldContainer.getGeoPointField();
};
oFF.QDimension.prototype.getGeoShapeField = function()
{
	return this.m_fieldContainer.getGeoShapeField();
};
oFF.QDimension.prototype.getGeoShapeHierarchies = function()
{
	return this.m_hierarchyManager.getGeoShapeHierarchies();
};
oFF.QDimension.prototype.getGroupedDimensions = function()
{
	return this.getMetadata().getGroupedDimensions(this.getDimensionAccessor(), this);
};
oFF.QDimension.prototype.getGroupingDimensionNames = function()
{
	return this.getMetadata().getGroupingDimensionNames(this.getDimensionAccessor());
};
oFF.QDimension.prototype.getGroupingDimensions = function()
{
	return this.getMetadata().getGroupingDimensions(this.getDimensionAccessor());
};
oFF.QDimension.prototype.getHasCheckTable = function()
{
	return this.getMetadata().getHasCheckTable();
};
oFF.QDimension.prototype.getHierarchies = function()
{
	return this.m_hierarchyManager.getHierarchies();
};
oFF.QDimension.prototype.getHierarchy = function()
{
	return this.m_hierarchyManager.getHierarchy();
};
oFF.QDimension.prototype.getHierarchyDisplayKeyField = function()
{
	return this.m_fieldContainer.getHierarchyDisplayKeyField();
};
oFF.QDimension.prototype.getHierarchyDueDate = function()
{
	return this.m_hierarchyManager.getHierarchyDueDate();
};
oFF.QDimension.prototype.getHierarchyDueDateVariableName = function()
{
	return this.m_hierarchyManager.getHierarchyDueDateVariableName();
};
oFF.QDimension.prototype.getHierarchyFieldsList = function()
{
	return this.m_fieldContainer.getHierarchyFieldsList();
};
oFF.QDimension.prototype.getHierarchyKeyField = function()
{
	return this.m_fieldContainer.getHierarchyKeyField();
};
oFF.QDimension.prototype.getHierarchyManager = function()
{
	return this.m_hierarchyManager;
};
oFF.QDimension.prototype.getHierarchyManagerBase = function()
{
	return this.m_hierarchyManager;
};
oFF.QDimension.prototype.getHierarchyName = function()
{
	return this.m_hierarchyManager.getHierarchyName();
};
oFF.QDimension.prototype.getHierarchyNameVariableName = function()
{
	return this.m_hierarchyManager.getHierarchyNameVariableName();
};
oFF.QDimension.prototype.getHierarchyNavigationField = function()
{
	return this.m_fieldContainer.getHierarchyNavigationField();
};
oFF.QDimension.prototype.getHierarchyPathField = function()
{
	return this.m_fieldContainer.getHierarchyPathField();
};
oFF.QDimension.prototype.getHierarchyTextField = function()
{
	return this.m_fieldContainer.getHierarchyTextField();
};
oFF.QDimension.prototype.getHierarchyUniqueName = function(hierarchyName)
{
	return this.m_hierarchyManager.getHierarchyUniqueName(hierarchyName);
};
oFF.QDimension.prototype.getHierarchyValueHelp = function(syncType)
{
	return this.m_hierarchyManager.getHierarchyValueHelp(syncType);
};
oFF.QDimension.prototype.getHierarchyVersion = function()
{
	return this.m_hierarchyManager.getHierarchyVersion();
};
oFF.QDimension.prototype.getHierarchyVersionVariableName = function()
{
	return this.m_hierarchyManager.getHierarchyVersionVariableName();
};
oFF.QDimension.prototype.getId = function()
{
	return this.getMetadata().getId();
};
oFF.QDimension.prototype.getIndexOnAxis = function()
{
	let udh = this.getUniversalDisplayHierarchy();
	if (oFF.notNull(udh) && udh.isActive())
	{
		let udhDimensions = udh.getDimensionNames();
		let axisDimensions = this.getAxis().getDimensionNames().createListCopy();
		let size = axisDimensions.size();
		for (let i = 0; i < size; i++)
		{
			if (udhDimensions.contains(axisDimensions.get(i)))
			{
				return i;
			}
		}
	}
	return this.getAxis().getIndex(this);
};
oFF.QDimension.prototype.getIndexedChildren = function()
{
	let children = oFF.XList.create();
	if (oFF.notNull(this.m_allStructureMembers))
	{
		for (let i = 0; i < this.m_allStructureMembers.size(); i++)
		{
			let structureMember = this.m_allStructureMembers.get(i);
			if (oFF.notNull(structureMember) && structureMember.getMemberType() === oFF.MemberType.RESTRICTED_MEASURE)
			{
				children.add(structureMember);
			}
		}
	}
	return children.getIterator();
};
oFF.QDimension.prototype.getInitialDrillLevel = function()
{
	return this.m_hierarchyManager.getInitialDrillLevel();
};
oFF.QDimension.prototype.getInitialDrillOffset = function()
{
	return this.m_hierarchyManager.getInitialDrillOffset();
};
oFF.QDimension.prototype.getInitialHierarchyDueDate = function()
{
	return this.m_hierarchyManager.getInitialHierarchyDueDate();
};
oFF.QDimension.prototype.getInitialHierarchyName = function()
{
	return this.m_hierarchyManager.getInitialHierarchyName();
};
oFF.QDimension.prototype.getInitialHierarchyVersion = function()
{
	return this.m_hierarchyManager.getInitialHierarchyVersion();
};
oFF.QDimension.prototype.getKeyAttributesNames = function()
{
	return this.getMetadata().getKeyAttributesNames();
};
oFF.QDimension.prototype.getKeyField = function()
{
	return this.m_fieldContainer.getKeyField();
};
oFF.QDimension.prototype.getKeyFieldExt = function(context)
{
	return this.m_fieldContainer.getKeyFieldExt(context);
};
oFF.QDimension.prototype.getLastAssignedCurrencyPlaceholderId = function()
{
	let placeholderIds = this.m_placeholderIdMemberNameMap.getKeysAsReadOnlyList();
	let lastPlaceholderId = null;
	for (let i = placeholderIds.size() - 1; i >= 0; i--)
	{
		let placeholderId = placeholderIds.get(i);
		if (!oFF.XString.isEqual(placeholderId, oFF.CurrencyTranslationConstants.SIGNED_DATA) && !oFF.XString.isEqual(placeholderId, oFF.CurrencyTranslationConstants.SIGNED_DATA_LOCAL))
		{
			lastPlaceholderId = placeholderId;
			break;
		}
	}
	return lastPlaceholderId;
};
oFF.QDimension.prototype.getLeveledHierarchies = function()
{
	return this.m_hierarchyManager.getLeveledHierarchies();
};
oFF.QDimension.prototype.getLeveledHierarchy = function(name)
{
	return this.m_hierarchyManager.getLeveledHierarchy(name);
};
oFF.QDimension.prototype.getLinkedFilter = function()
{
	let queryModel = this.getQueryModel();
	let listOfCartesianElements = oFF.XList.create();
	let linkedFilters = queryModel.getFilter().getLinkedFilters().getValuesAsReadOnlyList();
	let cartList = null;
	for (let i = 0; i < linkedFilters.size(); i++)
	{
		let selectionStateContainer = linkedFilters.get(i);
		cartList = this.getCartesianListFromSelectionStateContainer(selectionStateContainer);
		if (oFF.notNull(cartList))
		{
			listOfCartesianElements.add(cartList);
		}
	}
	return listOfCartesianElements;
};
oFF.QDimension.prototype.getLoadedStructureMember = function(memberName)
{
	return this.getStructureMemberByKey(memberName, true);
};
oFF.QDimension.prototype.getLoadedStructureMembers = function()
{
	return this.m_allStructureMembers;
};
oFF.QDimension.prototype.getLowerLevelNodeAlignment = function()
{
	if (this.isUniversalDisplayHierarchyDimension() && this.getModelCapabilities().supportsUdhAlignment())
	{
		return this.getAxis().getResultAlignment() === oFF.ResultAlignment.TOP ? oFF.Alignment.CHILDREN_BELOW_PARENT : oFF.Alignment.CHILDREN_ABOVE_PARENT;
	}
	return this.m_hierarchyManager.getLowerLevelNodeAlignment();
};
oFF.QDimension.prototype.getMainAttribute = function()
{
	return this.m_attributeContainer.getMainAttribute();
};
oFF.QDimension.prototype.getMaxDrillLevel = function()
{
	return this.m_hierarchyManager.getMaxDrillLevel();
};
oFF.QDimension.prototype.getMaxRuntimeLevel = function()
{
	return this.m_hierarchyManager.getMaxRuntimeLevel();
};
oFF.QDimension.prototype.getMeasureHelpMetadataSelector = function()
{
	return this.getSelector().getMeasureHelpMetadataSelector();
};
oFF.QDimension.prototype.getMemberManager = function()
{
	if (oFF.isNull(this.m_memberManager))
	{
		this.m_memberManager = oFF.QMemberManager.create(this);
	}
	return this.m_memberManager;
};
oFF.QDimension.prototype.getMemberOfPostedNodeVisibility = function()
{
	return this.m_hierarchyManager.getMemberOfPostedNodeVisibility();
};
oFF.QDimension.prototype.getMetadata = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_metadata);
};
oFF.QDimension.prototype.getMetadataBase = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_metadata);
};
oFF.QDimension.prototype.getMixedDisplayKeyField = function()
{
	return this.m_fieldContainer.getMixedDisplayKeyField();
};
oFF.QDimension.prototype.getMixedDisplayKeyFieldExt = function()
{
	return this.m_fieldContainer.getMixedDisplayKeyFieldExt();
};
oFF.QDimension.prototype.getModelLevel = function()
{
	return this.m_resultStructureController.getModelLevel();
};
oFF.QDimension.prototype.getModellerMemberKeyRef = function(storageObjectName)
{
	return this.getKeyRefStorage().get(oFF.KeyRefConstants.MAIN_STORAGE, this.getName(), storageObjectName);
};
oFF.QDimension.prototype.getNamePathField = function()
{
	return this.m_fieldContainer.getNamePathField();
};
oFF.QDimension.prototype.getNameValuePair = function(name)
{
	if (oFF.notNull(this.m_nameValuePairs) && this.m_nameValuePairs.containsKey(name))
	{
		return this.m_nameValuePairs.getByKey(name);
	}
	return null;
};
oFF.QDimension.prototype.getNameValuePairs = function()
{
	if (oFF.isNull(this.m_nameValuePairs))
	{
		return oFF.XList.create();
	}
	return this.m_nameValuePairs.getValuesAsReadOnlyList();
};
oFF.QDimension.prototype.getNamedChildren = function()
{
	let map = oFF.XHashMapByString.create();
	if (oFF.notNull(this.m_fieldContainer))
	{
		map.put("FieldContainer", this.m_fieldContainer);
	}
	if (oFF.notNull(this.m_attributeContainer))
	{
		map.put("AttributeContainer", this.m_attributeContainer);
	}
	return map;
};
oFF.QDimension.prototype.getNavigationNodes = function()
{
	return this.getSelector().getNavigationNodes();
};
oFF.QDimension.prototype.getNextFreeCurrencyPlaceholderId = function()
{
	if (this.m_placeholderIdMemberNameMap.size() === 0 && this.m_placeholderIds.contains(oFF.CurrencyTranslationConstants.SIGNED_DATA))
	{
		return oFF.CurrencyTranslationConstants.SIGNED_DATA;
	}
	else
	{
		let placeholderIter = this.m_placeholderIds.getIterator();
		while (placeholderIter.hasNext())
		{
			let placeholderId = placeholderIter.next();
			if (!this.m_placeholderIdMemberNameMap.containsKey(placeholderId) && !oFF.XString.isEqual(placeholderId, oFF.CurrencyTranslationConstants.SIGNED_DATA_LOCAL))
			{
				return placeholderId;
			}
		}
	}
	return null;
};
oFF.QDimension.prototype.getNextFreePlaceholderId = function()
{
	let placeholderIter = this.m_placeholderIds.getIterator();
	while (placeholderIter.hasNext())
	{
		let placeholderId = placeholderIter.next();
		if (!this.m_placeholderIdMemberNameMap.containsKey(placeholderId) && this.getStructureMember(placeholderId) === null)
		{
			return placeholderId;
		}
	}
	throw oFF.XException.createIllegalStateException(oFF.ErrorMessages.FREE_PLACEHOLDER_NOT_FOUND);
};
oFF.QDimension.prototype.getNumberOfHierarchies = function()
{
	return this.getHierarchyManager().getNumberOfHierarchies();
};
oFF.QDimension.prototype.getOlapComponentType = function()
{
	let metadata = this.getMetadata();
	if (oFF.notNull(metadata))
	{
		return metadata.getDimensionType();
	}
	return null;
};
oFF.QDimension.prototype.getOrderedStructureMemberNames = function()
{
	if (oFF.isNull(this.m_allStructureMembers) || this.m_allStructureMembers.isEmpty())
	{
		return null;
	}
	return this.m_allStructureMembers.getKeysAsReadOnlyList();
};
oFF.QDimension.prototype.getOriginalText = function()
{
	return oFF.QModelComponent.prototype.getText.call( this );
};
oFF.QDimension.prototype.getOverdefinedMemberManager = function()
{
	return this.m_overdefinedMemberManager;
};
oFF.QDimension.prototype.getOverrideText = function()
{
	return this.m_overrideText;
};
oFF.QDimension.prototype.getParentResultStructureController = function()
{
	let axis = this.getAxis();
	if (oFF.notNull(axis))
	{
		return axis.getResultStructureController();
	}
	let queryModel = this.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		return queryModel.getResultStructureController();
	}
	return null;
};
oFF.QDimension.prototype.getPeriodPrefix = function()
{
	return this.getMetadata().getPeriodPrefix();
};
oFF.QDimension.prototype.getPlaceholderIdByAlias = function(aliasName)
{
	if (oFF.notNull(aliasName))
	{
		let placeholderIdIter = this.m_placeholderIdMemberNameMap.getKeysAsIterator();
		while (placeholderIdIter.hasNext())
		{
			let placeholderId = placeholderIdIter.next();
			let memberName = this.m_placeholderIdMemberNameMap.getByKey(placeholderId);
			let member = this.getStructureMemberByAliasOrMember(memberName);
			if (oFF.notNull(member) && oFF.XString.isEqual(member.getAliasName(), aliasName) || oFF.XString.isEqual(memberName, aliasName))
			{
				return placeholderId;
			}
		}
	}
	return null;
};
oFF.QDimension.prototype.getPlaceholderIdMemberMap = function()
{
	let placeholderIdMemberMap = oFF.XHashMapByString.create();
	let placeholderIdsIter = this.m_placeholderIdMemberNameMap.getKeysAsIterator();
	while (placeholderIdsIter.hasNext())
	{
		let placeholderId = placeholderIdsIter.next();
		let memberName = this.m_placeholderIdMemberNameMap.getByKey(placeholderId);
		let member = this.getStructureMemberByAliasOrMember(memberName);
		if (oFF.notNull(member))
		{
			placeholderIdMemberMap.put(placeholderId, member);
		}
	}
	return placeholderIdMemberMap;
};
oFF.QDimension.prototype.getPlaceholderIds = function()
{
	return this.m_placeholderIds;
};
oFF.QDimension.prototype.getReadMode = function(context)
{
	return this.m_readModeManager.getReadMode(context);
};
oFF.QDimension.prototype.getReadModeDefault = function(context)
{
	return this.m_readModeManager.getReadModeDefault(context);
};
oFF.QDimension.prototype.getReadModeManagerBase = function()
{
	return this.m_readModeManager;
};
oFF.QDimension.prototype.getRestNodeName = function()
{
	return this.m_hierarchyManager.getRestNodeName();
};
oFF.QDimension.prototype.getResultAlignment = function()
{
	return this.m_resultStructureController.getResultAlignment();
};
oFF.QDimension.prototype.getResultMember = function(type)
{
	if (type === oFF.MemberType.RESULT && oFF.notNull(this.m_resultMemberTotal))
	{
		return this.m_resultMemberTotal;
	}
	if (type === oFF.MemberType.CONDITION_RESULT && oFF.notNull(this.m_resultMemberTotalIncluded))
	{
		return this.m_resultMemberTotalIncluded;
	}
	if (type === oFF.MemberType.CONDITION_OTHERS_RESULT && oFF.notNull(this.m_resultMemberTotalRemaining))
	{
		return this.m_resultMemberTotalRemaining;
	}
	if (type === oFF.MemberType.OTHERS_FROM_CONDITIONS_RESULT && oFF.notNull(this.m_resultOthersFromConditions))
	{
		return this.m_resultOthersFromConditions;
	}
	return this.createResultMember(type);
};
oFF.QDimension.prototype.getResultSetAttributes = function()
{
	return this.m_attributeContainer.getResultSetAttributes();
};
oFF.QDimension.prototype.getResultSetFields = function()
{
	return this.m_fieldContainer.getResultSetFields();
};
oFF.QDimension.prototype.getResultSetSorting = function()
{
	let queryModel = this.getQueryModel();
	if (oFF.isNull(queryModel))
	{
		return null;
	}
	return queryModel.getSortingManager().getDimensionSorting(this, true);
};
oFF.QDimension.prototype.getResultStructureChildren = function()
{
	return null;
};
oFF.QDimension.prototype.getResultStructureController = function()
{
	return this.m_resultStructureController;
};
oFF.QDimension.prototype.getResultStructureControllerBase = function()
{
	return this.m_resultStructureController;
};
oFF.QDimension.prototype.getResultVisibility = function()
{
	return this.m_resultStructureController.getResultVisibility();
};
oFF.QDimension.prototype.getResultVisibilityByElement = function(element)
{
	return this.m_resultStructureController.getResultVisibilityByElement(element);
};
oFF.QDimension.prototype.getResultVisibilityByElementAndAlignment = function(alignment, element)
{
	return this.m_resultStructureController.getResultVisibilityByElementAndAlignment(alignment, element);
};
oFF.QDimension.prototype.getResultVisibilitySettings = function()
{
	return this.m_resultStructureController.getResultVisibilitySettings();
};
oFF.QDimension.prototype.getRuntimeDisplayGroupName = function()
{
	return this.m_runtimeDisplayGroupName;
};
oFF.QDimension.prototype.getRuntimeDisplayGroupText = function()
{
	return this.m_runtimeDisplayGroupText;
};
oFF.QDimension.prototype.getRuntimePlaceholderIdByAlias = function(aliasName)
{
	if (oFF.notNull(aliasName))
	{
		let placeholderIdIter = this.m_placeholderIdMemberNameMap.getKeysAsIterator();
		while (placeholderIdIter.hasNext())
		{
			let placeholderId = placeholderIdIter.next();
			let memberName = this.m_placeholderIdMemberNameMap.getByKey(placeholderId);
			let member = this.getStructureMemberByAliasOrMember(memberName);
			if (oFF.notNull(member) && oFF.XString.isEqual(member.getAliasName(), aliasName))
			{
				return this.convertPlaceholderIdToRuntimePlaceholderId(placeholderId);
			}
		}
	}
	return null;
};
oFF.QDimension.prototype.getRuntimePlaceholderIdMemberMap = function()
{
	let remappedPlaceholderIdMemberMap = oFF.XHashMapByString.create();
	let placeholderIdIter = this.m_placeholderIdMemberNameMap.getKeysAsIterator();
	while (placeholderIdIter.hasNext())
	{
		let placeholderId = placeholderIdIter.next();
		let memberName = this.m_placeholderIdMemberNameMap.getByKey(placeholderId);
		let member = this.getStructureMemberByAliasOrMember(memberName);
		if (oFF.notNull(member))
		{
			let runtimePlaceholderId = this.convertPlaceholderIdToRuntimePlaceholderId(placeholderId);
			remappedPlaceholderIdMemberMap.put(runtimePlaceholderId, member);
		}
	}
	return remappedPlaceholderIdMemberMap;
};
oFF.QDimension.prototype.getSelector = function()
{
	if (oFF.isNull(this.m_selector))
	{
		this.m_selector = oFF.QFactory.createDimensionSelector(this);
	}
	return this.m_selector;
};
oFF.QDimension.prototype.getSelectorAttributes = function()
{
	return this.m_attributeContainer.getSelectorAttributes();
};
oFF.QDimension.prototype.getSelectorContainer = function()
{
	return this.getSelector().getSelectorContainer();
};
oFF.QDimension.prototype.getSelectorDisplayKeyField = function()
{
	return this.getSelector().getSelectorDisplayKeyField();
};
oFF.QDimension.prototype.getSelectorFieldLayoutType = function()
{
	return this.m_selectorFieldLayoutType;
};
oFF.QDimension.prototype.getSelectorFields = function()
{
	return this.m_fieldContainer.getSelectorFields();
};
oFF.QDimension.prototype.getSelectorFilterUsage = function()
{
	return this.getSelector().getSelectorFilterUsage();
};
oFF.QDimension.prototype.getSelectorHierarchyName = function()
{
	return this.getSelector().getSelectorHierarchyName();
};
oFF.QDimension.prototype.getSelectorHierarchyNode = function()
{
	return this.getSelector().getSelectorHierarchyNode();
};
oFF.QDimension.prototype.getSelectorHierarchyNodeName = function()
{
	return this.getSelector().getSelectorHierarchyNodeName();
};
oFF.QDimension.prototype.getSelectorHierarchyNodeSid = function()
{
	return this.getSelector().getSelectorHierarchyNodeSid();
};
oFF.QDimension.prototype.getSelectorKeyField = function()
{
	return this.getSelector().getSelectorKeyField();
};
oFF.QDimension.prototype.getSelectorLowerLevelNodeAlignment = function()
{
	return this.getSelector().getSelectorLowerLevelNodeAlignment();
};
oFF.QDimension.prototype.getSelectorMaxResultRecords = function()
{
	return this.getSelector().getSelectorMaxResultRecords();
};
oFF.QDimension.prototype.getSelectorOrder = function()
{
	return this.getSelector().getSelectorOrder();
};
oFF.QDimension.prototype.getSelectorPagingEnd = function()
{
	return this.getSelector().getSelectorPagingEnd();
};
oFF.QDimension.prototype.getSelectorPagingStart = function()
{
	return this.getSelector().getSelectorPagingStart();
};
oFF.QDimension.prototype.getSelectorRootLevel = function()
{
	return this.getSelector().getSelectorRootLevel();
};
oFF.QDimension.prototype.getSelectorSortType = function()
{
	return this.getSelector().getSelectorSortType();
};
oFF.QDimension.prototype.getSelectorTextField = function()
{
	return this.getSelector().getSelectorTextField();
};
oFF.QDimension.prototype.getSemanticObject = function()
{
	let metadata = this.getMetadata();
	return oFF.isNull(metadata) ? null : metadata.getSemanticObject();
};
oFF.QDimension.prototype.getShouldUseActualTextField = function()
{
	return this.m_fieldContainer.getShouldUseActualTextField();
};
oFF.QDimension.prototype.getSkipEntries = function()
{
	return this.m_skip;
};
oFF.QDimension.prototype.getSkipMetadataValidationOnRepoImport = function()
{
	return this.m_skipMetadataValidationOnRepoImport;
};
oFF.QDimension.prototype.getStickyMembers = function()
{
	return this.m_hierarchyManager.getStickyMembers();
};
oFF.QDimension.prototype.getStructureLayout = function()
{
	if (this.supportsBasicStructureMembers())
	{
		return this.m_structureLayout;
	}
	return null;
};
oFF.QDimension.prototype.getStructureMember = function(name)
{
	if (oFF.isNull(this.m_allStructureMembers) || oFF.isNull(name))
	{
		return null;
	}
	let member = this.getStructureMemberByKey(name, false);
	if (oFF.isNull(member))
	{
		member = this.remapIfLegacyCalculationPlaceholderName(name);
	}
	return member;
};
oFF.QDimension.prototype.getStructureMemberByAlias = function(aliasName)
{
	if (oFF.isNull(this.m_allStructureMembers) || oFF.isNull(aliasName))
	{
		return null;
	}
	let iterator = this.m_allStructureMembers.getIterator();
	while (iterator.hasNext())
	{
		let member = iterator.next();
		if (oFF.notNull(member) && !member.isReleased() && oFF.XString.isEqual(member.getAliasName(), aliasName))
		{
			return member;
		}
	}
	return null;
};
oFF.QDimension.prototype.getStructureMemberByAliasOrMember = function(name)
{
	let foundMember = this.getStructureMember(name);
	if (oFF.isNull(foundMember))
	{
		return this.getStructureMemberByAlias(name);
	}
	return foundMember;
};
oFF.QDimension.prototype.getStructureMemberByKey = function(name, shouldNotLazyLoad)
{
	return this.getStructureMemberByKeyInternal(name, shouldNotLazyLoad, false);
};
oFF.QDimension.prototype.getStructureMemberByKeyInternal = function(name, shouldNotLazyLoad, includeReleased)
{
	let memberName = name;
	let structureMember = this.m_allStructureMembers.getByKey(memberName);
	if (oFF.notNull(name) && oFF.isNull(structureMember))
	{
		memberName = this.getFlatMemberNameWithMatchingHierarchy(memberName);
		if (oFF.notNull(memberName))
		{
			if (oFF.notNull(this.m_structureMemberLazyLoader) && !shouldNotLazyLoad)
			{
				this.m_structureMemberLazyLoader.loadStructureMember(memberName);
			}
			structureMember = this.m_allStructureMembers.getByKey(memberName);
			let queryModel = this.getQueryModel();
			if (oFF.notNull(queryModel) && oFF.isNull(structureMember))
			{
				let datasetId = queryModel.getDatasetId();
				if ((oFF.XString.isEqual(memberName, oFF.CurrencyConstants.DEFAULT_CURRENCY) || oFF.XString.isEqual(memberName, oFF.CurrencyConstants.LOCAL_CURRENCY)) && this.supportsCurrencyTranslationMembers())
				{
					if (oFF.notNull(datasetId))
					{
						structureMember = this.m_allStructureMembers.getByKey(oFF.XStringUtils.concatenate3(datasetId, "-", memberName));
					}
				}
				else if (oFF.notNull(datasetId) && oFF.XString.isEqual(memberName, oFF.MeasureModelConstants.DEFAULT_CUSTOMDIMENSION2_MEMBER) && this.getDimensionType() === oFF.DimensionType.SECONDARY_STRUCTURE)
				{
					structureMember = this.m_allStructureMembers.getByKey(oFF.XStringUtils.concatenate3(datasetId, "-", memberName));
				}
			}
		}
	}
	return includeReleased || oFF.notNull(structureMember) && !structureMember.isReleased() ? structureMember : null;
};
oFF.QDimension.prototype.getStructureMemberIncludeReleasedByKey = function(name, shouldNotLazyLoad)
{
	return this.getStructureMemberByKeyInternal(name, shouldNotLazyLoad, true);
};
oFF.QDimension.prototype.getStructureMemberLazyLoader = function()
{
	return this.m_structureMemberLazyLoader;
};
oFF.QDimension.prototype.getStructureMembers = function(getBasicMembers)
{
	let list = oFF.XListOfNameObject.create();
	for (let i = 0; i < this.m_allStructureMembers.size(); i++)
	{
		let member = this.m_allStructureMembers.get(i);
		if (oFF.notNull(member) && !member.isReleased() && member.getMemberType() === oFF.MemberType.BASIC_MEASURE === getBasicMembers)
		{
			list.add(member);
		}
	}
	list.sortByDirection(oFF.XSortDirection.ASCENDING);
	return list;
};
oFF.QDimension.prototype.getSupportedAxesTypes = function()
{
	let axes = null;
	let metadata = this.getMetadata();
	if (oFF.notNull(metadata))
	{
		axes = metadata.getSupportedAxesTypes();
	}
	return axes;
};
oFF.QDimension.prototype.getSupportedReadModes = function(context)
{
	return this.m_readModeManager.getSupportedReadModes(context);
};
oFF.QDimension.prototype.getText = function()
{
	let text = oFF.QModelComponent.prototype.getText.call( this );
	if (oFF.notNull(this.m_overrideText))
	{
		text = this.m_overrideText;
	}
	else
	{
		if (this.getQueryModel() !== null && this.getMetadata() !== null)
		{
			let cacheKey = this.getMetadata().getCacheKey();
			let olapEnvCube = this.getOlapEnv().getCubeContainer(cacheKey);
			if (oFF.notNull(olapEnvCube))
			{
				let storageName = this.getQueryModel().getQueryManager().getClientQueryObjectStorageName();
				let datasetId = this.getQueryModel().getDatasetId();
				let overrideText = olapEnvCube.getDimensionOverrideTextByDatasetId(storageName, this.getName(), datasetId);
				if (oFF.notNull(overrideText))
				{
					text = overrideText;
				}
			}
		}
	}
	return text;
};
oFF.QDimension.prototype.getTextField = function()
{
	return this.m_fieldContainer.getTextField();
};
oFF.QDimension.prototype.getTimeConfigPattern = function()
{
	return this.getMetadata().getTimeConfigPattern();
};
oFF.QDimension.prototype.getTopEntries = function()
{
	return this.m_top;
};
oFF.QDimension.prototype.getTotalsStructure = function()
{
	return this.m_resultStructureController.getTotalsStructure();
};
oFF.QDimension.prototype.getUDHWithThisDimensionIncluded = function()
{
	let queryModel = this.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		let universalDisplayHierarchies = queryModel.getUniversalDisplayHierarchies();
		if (oFF.notNull(universalDisplayHierarchies))
		{
			return universalDisplayHierarchies.getByIncludedDimension(this);
		}
	}
	return null;
};
oFF.QDimension.prototype.getUnassignedMember = function()
{
	return this.getMetadata().getUnassignedMember();
};
oFF.QDimension.prototype.getUniversalDisplayHierarchy = function()
{
	let queryModel = this.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		let universalDisplayHierarchies = queryModel.getUniversalDisplayHierarchies();
		if (oFF.notNull(universalDisplayHierarchies))
		{
			return universalDisplayHierarchies.getByName(this.getName());
		}
	}
	return null;
};
oFF.QDimension.prototype.getUseMonthLabel = function()
{
	return this.getMetadata().getUseMonthLabel();
};
oFF.QDimension.prototype.getValueHelpDimensionMemberWithFormat = function(name, valueType)
{
	return this.getDimensionMemberWithFormatInternal(name, oFF.notNull(valueType) && valueType !== oFF.XValueType.UNSUPPORTED ? valueType : this.getSelectorKeyField().getValueType(), this.findKeyField());
};
oFF.QDimension.prototype.getValueType = function()
{
	return this.getMetadata().getValueType();
};
oFF.QDimension.prototype.getVirtualRootNodeName = function()
{
	return this.m_hierarchyManager.getVirtualRootNodeName();
};
oFF.QDimension.prototype.getVisibility = function()
{
	return this.getMetadata().getVisibility();
};
oFF.QDimension.prototype.hasAlternativeFieldValuesDefined = function()
{
	return oFF.notNull(this.m_alternativeFieldValues);
};
oFF.QDimension.prototype.hasDayTimeYYYYMMDDFormat = function()
{
	return this.getMetadata().hasDayTimeYYYYMMDDFormat();
};
oFF.QDimension.prototype.hasDefaultLowerLevelNodeAlignment = function()
{
	return this.m_hierarchyManager.hasDefaultLowerLevelNodeAlignment();
};
oFF.QDimension.prototype.hasExternalHierarchies = function()
{
	return this.m_hierarchyManager.hasExternalHierarchies();
};
oFF.QDimension.prototype.hasFixedResultSetFields = function()
{
	return this.m_fieldContainer.hasFixedResultSetFields();
};
oFF.QDimension.prototype.hasFunctionalVariables = function()
{
	return this.getMetadata().hasFunctionalVariables();
};
oFF.QDimension.prototype.hasNodeCondensation = function()
{
	return this.m_hierarchyManager.hasNodeCondensation();
};
oFF.QDimension.prototype.hasPlaceHolderForHierarchyInfo = function()
{
	return this.effectivelyUseHierarchyNameVariable() && oFF.XStringUtils.isNotNullAndNotEmpty(this.getHierarchyNameVariableName()) || this.effectivelyUseHierarchyDueDateVariable() && oFF.XStringUtils.isNotNullAndNotEmpty(this.getHierarchyDueDateVariableName()) || this.effectivelyUseHierarchyVersionVariable() && oFF.XStringUtils.isNotNullAndNotEmpty(this.getHierarchyVersionVariableName());
};
oFF.QDimension.prototype.hasPreviousMasterReadModes = function(contextType)
{
	let indexOnAxis = this.getIndexOnAxis() - 1;
	let axis = this.getAxis();
	let result = false;
	while (indexOnAxis > -1)
	{
		let dimension = axis.get(indexOnAxis);
		let actualReadMode = dimension.getReadMode(contextType);
		if (dimension.hasReadModeDefault(contextType) && oFF.notNull(actualReadMode) && actualReadMode.isTypeOf(oFF.QMemberReadMode.MASTER))
		{
			result = true;
			break;
		}
		indexOnAxis--;
	}
	return result;
};
oFF.QDimension.prototype.hasReadModeDefault = function(context)
{
	return this.m_readModeManager.hasReadModeDefault(context);
};
oFF.QDimension.prototype.hasSorting = function()
{
	let queryModel = this.getQueryModel();
	if (oFF.isNull(queryModel))
	{
		return false;
	}
	let sortManager = queryModel.getSortingManager();
	let dimSorting = sortManager.getDimensionSorting(this, false);
	return oFF.notNull(dimSorting);
};
oFF.QDimension.prototype.hasStickyMember = function(memberName)
{
	return this.m_hierarchyManager.hasStickyMember(memberName);
};
oFF.QDimension.prototype.hasStickyMembers = function()
{
	return this.m_hierarchyManager.hasStickyMembers();
};
oFF.QDimension.prototype.hasSubsequentBookedReadModes = function(contextType)
{
	let indexOnAxis = this.getIndexOnAxis() + 1;
	let axis = this.getAxis();
	let result = false;
	let axisSize = axis.size();
	while (indexOnAxis < axisSize)
	{
		let dimension = axis.get(indexOnAxis);
		let actualReadMode = dimension.getReadMode(contextType);
		if (dimension.hasReadModeDefault(contextType) && oFF.notNull(actualReadMode) && actualReadMode.isTypeOf(oFF.QMemberReadMode.BOOKED))
		{
			result = true;
			break;
		}
		indexOnAxis++;
	}
	return result;
};
oFF.QDimension.prototype.hasTimeDependentHierarchies = function()
{
	return this.m_hierarchyManager.hasTimeDependentHierarchies();
};
oFF.QDimension.prototype.hasVersionDependentHierarchies = function()
{
	return this.m_hierarchyManager.hasVersionDependentHierarchies();
};
oFF.QDimension.prototype.hasZoomDrill = function()
{
	return this.getHierarchyManager().hasZoomDrill();
};
oFF.QDimension.prototype.isClustered = oFF.noSupport;
oFF.QDimension.prototype.isComponentNode = function()
{
	return true;
};
oFF.QDimension.prototype.isCompound = function()
{
	let metadata = this.getMetadataBase();
	if (metadata.isCompoundBase() === oFF.TriStateBool._DEFAULT)
	{
		let hasCompound = this.getFirstFieldByType(oFF.PresentationType.DISPLAY_KEY_NOT_COMPOUND) !== null || this.getFirstFieldByType(oFF.PresentationType.KEY_NOT_COMPOUND) !== null || this.getFirstFieldByType(oFF.PresentationType.DISPLAY_KEY_MIXED_COMPOUNDMENT) !== null || this.getKeyAttributesNames().size() > 1;
		metadata.setIsCompoundBase(oFF.TriStateBool.lookup(hasCompound));
	}
	return metadata.isCompound();
};
oFF.QDimension.prototype.isCumulative = function()
{
	if (!this.supportsCumulative())
	{
		return false;
	}
	return this.m_isCumulative;
};
oFF.QDimension.prototype.isDesignTimeMode = function()
{
	return this.m_designTimeMode;
};
oFF.QDimension.prototype.isDisplayHierarchyFixInFilter = function()
{
	return this.getHierarchyManager().isDisplayHierarchyFixInFilter();
};
oFF.QDimension.prototype.isEnforceAnyHierarchyInfoVariable = function()
{
	return this.m_hierarchyManager.isEnforceAnyHierarchyInfoVariable();
};
oFF.QDimension.prototype.isEnforceHierarchyDueDateVariableOrDefault = function()
{
	return this.m_hierarchyManager.isEnforceHierarchyDueDateVariableOrDefault();
};
oFF.QDimension.prototype.isEnforceHierarchyNameVariable = function()
{
	return this.m_hierarchyManager.isEnforceHierarchyNameVariable();
};
oFF.QDimension.prototype.isEnforceHierarchyVersionVariableOrDefault = function()
{
	return this.m_hierarchyManager.isEnforceHierarchyVersionVariableOrDefault();
};
oFF.QDimension.prototype.isEnforcedDynamicValue = function()
{
	if (this.getMetadataBase() === null)
	{
		return false;
	}
	return this.getMetadataBase().isEnforcedDynamicValue();
};
oFF.QDimension.prototype.isExplicitDrillOnFilteredNodes = function()
{
	return this.m_hierarchyManager.isExplicitDrillOnFilteredNodes();
};
oFF.QDimension.prototype.isGroupingDimension = function()
{
	return this.getMetadata().isGroupingDimension();
};
oFF.QDimension.prototype.isHierarchyActive = function()
{
	return this.m_hierarchyManager.isHierarchyActive();
};
oFF.QDimension.prototype.isHierarchyActiveByDefault = function()
{
	return this.m_hierarchyManager.isHierarchyActiveByDefault();
};
oFF.QDimension.prototype.isHierarchyAssigned = function()
{
	return this.m_hierarchyManager.isHierarchyAssigned();
};
oFF.QDimension.prototype.isHierarchyAssignedAndActive = function()
{
	return this.m_hierarchyManager.isHierarchyAssignedAndActive();
};
oFF.QDimension.prototype.isHierarchyMandatory = function()
{
	return this.getMetadata().isHierarchyMandatory();
};
oFF.QDimension.prototype.isHierarchyNavigationDeltaMode = function()
{
	return this.m_hierarchyManager.isHierarchyNavigationDeltaMode();
};
oFF.QDimension.prototype.isIgnoredOnOptimizedExport = function()
{
	return this.m_isIgnoredOnExport;
};
oFF.QDimension.prototype.isInitialDrillLevelZeroBased = function()
{
	return !this.isStructure() || !this.getQueryManager().getSystemType().isTypeOf(oFF.SystemType.BW);
};
oFF.QDimension.prototype.isMeasureStructure = function()
{
	return this.getMetadata().isMeasureStructure();
};
oFF.QDimension.prototype.isOwnerDimension = function()
{
	return this.getMetadata().isOwnerDimension();
};
oFF.QDimension.prototype.isPartOfActiveUDH = function()
{
	let udh = this.getUDHWithThisDimensionIncluded();
	return oFF.notNull(udh) && udh.isActive();
};
oFF.QDimension.prototype.isPrivate = function()
{
	return this.getMetadata().isPrivate();
};
oFF.QDimension.prototype.isSelectable = function()
{
	let axis = this.getAxis();
	return oFF.isNull(axis) ? true : this.getMetadata().isSelectable(axis.getType());
};
oFF.QDimension.prototype.isSelectorFilteringOnDisplayKey = function()
{
	return this.getSelector().isSelectorFilteringOnDisplayKey();
};
oFF.QDimension.prototype.isSelectorGettingInterval = function()
{
	return this.getSelector().isSelectorGettingInterval();
};
oFF.QDimension.prototype.isSelectorHierarchyActive = function()
{
	return this.getSelector().isSelectorHierarchyActive();
};
oFF.QDimension.prototype.isSelectorUseQueryDrillOperations = function()
{
	return this.getSelector().isSelectorUseQueryDrillOperations();
};
oFF.QDimension.prototype.isStructure = function()
{
	return this.getMetadata().isStructure();
};
oFF.QDimension.prototype.isStructureMemberLazyLoadSupported = function()
{
	return oFF.notNull(this.m_structureMemberLazyLoader) && this.m_structureMemberLazyLoader.hasUnloadedStructureMembers();
};
oFF.QDimension.prototype.isTechnicalDimension = function()
{
	let metadata = this.getMetadata();
	return oFF.notNull(metadata) && metadata.isTechnicalDimension();
};
oFF.QDimension.prototype.isTimeConfigEnablePattern = function()
{
	return this.getMetadata().isTimeConfigEnablePattern();
};
oFF.QDimension.prototype.isTotalsAlignmentOnDefault = function()
{
	return this.m_resultStructureController.isTotalsAlignmentOnDefault();
};
oFF.QDimension.prototype.isTotalsModified = function()
{
	return this.m_totalsModified;
};
oFF.QDimension.prototype.isTotalsStructureOnDefault = function()
{
	return this.m_resultStructureController.isTotalsStructureOnDefault();
};
oFF.QDimension.prototype.isTotalsVisibilityOnDefault = function()
{
	return this.m_resultStructureController.isTotalsVisibilityOnDefault();
};
oFF.QDimension.prototype.isUniversalDisplayHierarchyDimension = function()
{
	return this.getUniversalDisplayHierarchy() !== null;
};
oFF.QDimension.prototype.isUseServerDefaultKeyField = function()
{
	return this.m_fieldContainer.isUseServerDefaultKeyField();
};
oFF.QDimension.prototype.isUseServerDefaultTextField = function()
{
	return this.m_fieldContainer.isUseServerDefaultTextField();
};
oFF.QDimension.prototype.isUsedInFilter = function(filterExpression)
{
	return oFF.DimensionUsageAnalyzer2.addDimensionsUsedInContainer(filterExpression, null).contains(this.getName());
};
oFF.QDimension.prototype.isUserManaged = function()
{
	return this.getMetadata().isUserManaged();
};
oFF.QDimension.prototype.loadStructureMembers = function(memberNames)
{
	if (this.isStructureMemberLazyLoadSupported())
	{
		let validNames = oFF.XList.create();
		for (let index = 0; index < memberNames.size(); ++index)
		{
			let memberName = this.getFlatMemberNameWithMatchingHierarchy(memberNames.get(index));
			if (oFF.notNull(memberName))
			{
				validNames.add(memberName);
			}
		}
		this.m_structureMemberLazyLoader.loadStructureMembers(validNames);
	}
};
oFF.QDimension.prototype.mergeDeepRecursive = function(settings, other)
{
	let otherDim = other;
	if (!this.isPropertyUpdatedByModelerMetadata(oFF.QDimensionProperties.DIMENSION_TEXT))
	{
		this.setText(otherDim.getOriginalText());
	}
	this.setOverrideText(otherDim.getOverrideText());
	this.m_hierarchyManager.mergeDeepRecursive(settings, otherDim);
	if (oFF.notNull(settings) && settings.isInitialBWMerge())
	{
		if (this.getFieldLayoutType() === oFF.FieldLayoutType.ATTRIBUTE_BASED)
		{
			let otherFieldLayout = otherDim.getFieldLayoutType();
			this.setFieldLayoutType(otherFieldLayout);
			if (otherFieldLayout === oFF.FieldLayoutType.ATTRIBUTE_BASED)
			{
				let attributeContainer = this.getAttributeContainerBase();
				let otherAttributeContainer = otherDim.getAttributeContainer();
				attributeContainer.mergeDeepRecursive(settings, otherAttributeContainer);
			}
		}
	}
	let selector = this.getSelector();
	selector.mergeDeepRecursive(settings, otherDim.getSelector());
	this.m_readModeManager.mergeDeepRecursive(settings, otherDim);
	this._mergeDeepRecursiveMembers(settings, otherDim);
};
oFF.QDimension.prototype.newDimensionMemberEmpty = function()
{
	return oFF.QDimensionMember.createDimensionMember(this.getContext(), this);
};
oFF.QDimension.prototype.newHierarchy = function(name)
{
	return oFF.QHierarchy.create(this.getContext(), this, name);
};
oFF.QDimension.prototype.newValueHelpMembers = function()
{
	return null;
};
oFF.QDimension.prototype.nodeToMember = function(list)
{
	let member = oFF.XList.create();
	if (oFF.XCollectionUtils.hasElements(list))
	{
		let iterator = list.getIterator();
		while (iterator.hasNext())
		{
			member.add(iterator.next().getDimensionMember());
		}
		oFF.XObjectExt.release(iterator);
	}
	return member;
};
oFF.QDimension.prototype.processFunctionalVariableHelp = function(syncType, listener, customIdentifier)
{
	let extResult = null;
	if (this.getQueryModel() === null || !this.getQueryModel().getModelCapabilities().supportsFunctionalVariables())
	{
		extResult = oFF.ExtResult.createWithErrorMessage("Valuehelp is not supported in this context");
	}
	else if (!this.getMetadata().hasFunctionalVariables())
	{
		extResult = oFF.ExtResult.create(oFF.XList.create(), oFF.MessageManagerSimple.createMessageManager());
	}
	else
	{
		let functionalVariables = oFF.QVariableUtils.getFunctionalVariables(this.getVariableContainer().getVariables(), this);
		if (oFF.XCollectionUtils.hasElements(functionalVariables))
		{
			extResult = oFF.ExtResult.create(functionalVariables, oFF.MessageManagerSimple.createMessageManager());
		}
	}
	if (oFF.notNull(extResult) && oFF.notNull(listener))
	{
		listener.onFunctionalVariablesValueHelpExecuted(extResult, customIdentifier);
		return extResult;
	}
	return this.getQueryManagerBase().getValueHelpProvider().processFunctionalVariableHelp(this, syncType, listener, customIdentifier);
};
oFF.QDimension.prototype.processIsNodeChildOfParent = function(nodeName, parentName, syncType, listener, customIdentifier)
{
	return this.getSelector().processIsNodeChildOfParent(nodeName, parentName, syncType, listener, customIdentifier);
};
oFF.QDimension.prototype.processMemberHelp = function(syncType, listener, customIdentifier)
{
	let listenerDecorator = oFF.QFactory.createValueHelpListenerDecorator(listener);
	this.processValueHelp(syncType, listenerDecorator, customIdentifier);
	return listenerDecorator.getResult();
};
oFF.QDimension.prototype.processValueHelp = function(syncType, listener, customIdentifier)
{
	let queryModel = this.getQueryModelBase();
	if (oFF.isNull(queryModel))
	{
		return this._valHelpError("Valuehelp is not supported in this context", listener, customIdentifier);
	}
	if (queryModel.isBlendingModel())
	{
		return this._valHelpError("Valuehelp is not supported for Blending", listener, customIdentifier);
	}
	let queryManager = queryModel.getQueryManagerBase();
	return queryManager.getValueHelpProvider().processValueHelp(this, syncType, listener, customIdentifier);
};
oFF.QDimension.prototype.processValueHelpResultSet = function(syncType, listener, customIdentifier)
{
	let queryModel = this.getQueryModelBase();
	if (oFF.isNull(queryModel))
	{
		return this._valHelpResultSetError("Valuehelp is not supported in this context", listener, customIdentifier);
	}
	if (queryModel.isBlendingModel())
	{
		return this._valHelpResultSetError("Valuehelp is not supported for Blending", listener, customIdentifier);
	}
	let queryManager = queryModel.getQueryManagerBase();
	return queryManager.getValueHelpProvider().processValueHelpResultSet(this, syncType, listener, customIdentifier);
};
oFF.QDimension.prototype.processVarHelp = function(variableName, syncType, listener, customIdentifier)
{
	let dimension = this;
	let valueHelpProvider;
	let variable;
	if (this.getQueryManagerBase() !== null)
	{
		let queryManager = this.getQueryManagerBase();
		if (queryManager.supportsReInitVariables() && queryManager.isSubmitted())
		{
			return this._valHelpError("Valuehelp for variables is not allowed if variables are already submitted.", listener, customIdentifier);
		}
		valueHelpProvider = queryManager.getValueHelpProvider();
		variable = queryManager.getVariableProcessor().getVariables().getByKey(variableName);
	}
	else if (this.getDataSource().getType() === oFF.MetaObjectType.PLANNING_SEQUENCE || this.getDataSource().getType() === oFF.MetaObjectType.PLANNING_FUNCTION)
	{
		let planningService = this.getContext().getPlanningContext().getPlanningService();
		if (planningService.supportsPlanningValueHelp())
		{
			valueHelpProvider = this.getContext().getVariableHelpProvider();
		}
		else if (this.getDataSource().getType() === oFF.MetaObjectType.PLANNING_SEQUENCE)
		{
			let dimQm = this.getContext().getQueryManagerForDimension(this);
			valueHelpProvider = dimQm.getValueHelpProvider();
			dimension = dimQm.getQueryModel().getDimensionByName(this.getName());
		}
		else
		{
			return this._valHelpError("Valuehelp is not supported in this context", listener, customIdentifier);
		}
		variable = this.getContext().getVariableContainer().getVariable(variableName);
	}
	else
	{
		return this._valHelpError("Valuehelp is not supported in this context", listener, customIdentifier);
	}
	return this._processVariableValueHelp(variableName, syncType, listener, customIdentifier, valueHelpProvider, variable, dimension);
};
oFF.QDimension.prototype.processVarHelpWithVariable = function(variable, syncType, listener, customIdentifier)
{
	let dimension = this;
	let valueHelpProvider;
	if (this.getQueryManagerBase() !== null)
	{
		valueHelpProvider = this.getQueryManagerBase().getValueHelpProvider();
	}
	else if (this.getDataSource().getType() === oFF.MetaObjectType.PLANNING_SEQUENCE || this.getDataSource().getType() === oFF.MetaObjectType.PLANNING_FUNCTION)
	{
		let planningService = this.getContext().getPlanningContext().getPlanningService();
		if (planningService.supportsPlanningValueHelp())
		{
			valueHelpProvider = this.getContext().getVariableHelpProvider();
		}
		else if (this.getDataSource().getType() === oFF.MetaObjectType.PLANNING_SEQUENCE)
		{
			let dimQm = this.getContext().getQueryManagerForDimension(this);
			valueHelpProvider = dimQm.getValueHelpProvider();
			dimension = dimQm.getQueryModel().getDimensionByName(this.getName());
		}
		else
		{
			return this._valHelpError("Valuehelp is not supported in this context", listener, customIdentifier);
		}
	}
	else
	{
		return this._valHelpError("Valuehelp is not supported in this context", listener, customIdentifier);
	}
	return this._processVariableValueHelp(variable.getName(), syncType, listener, customIdentifier, valueHelpProvider, variable, dimension);
};
oFF.QDimension.prototype.processVariableHelp = function(variableName, syncType, listener, customIdentifier)
{
	let listenerDecorator = oFF.QFactory.createValueHelpListenerDecorator(listener);
	this.processVarHelp(variableName, syncType, listenerDecorator, customIdentifier);
	return listenerDecorator.getResult();
};
oFF.QDimension.prototype.processVariableHelpWithVariable = function(variable, syncType, listener, customIdentifier)
{
	let listenerDecorator = oFF.QFactory.createValueHelpListenerDecorator(listener);
	this.processVarHelpWithVariable(variable, syncType, listenerDecorator, customIdentifier);
	return listenerDecorator.getResult();
};
oFF.QDimension.prototype.reOrderStructureMembers = function(orderedStructureMemberNames)
{
	oFF.XListUtils.reorderList(this.m_allStructureMembers, orderedStructureMemberNames);
};
oFF.QDimension.prototype.releaseObject = function()
{
	this.m_fieldLayoutType = null;
	this.m_selectorFieldLayoutType = null;
	if (this.supportsCustomMembers())
	{
		let memberSize = this.m_allStructureMembers.size();
		for (let measureIdx = 0; measureIdx < memberSize; measureIdx++)
		{
			let structureMember = this.m_allStructureMembers.get(measureIdx);
			if (oFF.notNull(structureMember) && !structureMember.isReleased())
			{
				let memberType = structureMember.getMemberType();
				if (oFF.notNull(memberType) && memberType.isCustomMember() && oFF.XString.isEqual(structureMember.getStorageName(), this.getStorageName()))
				{
					oFF.XObjectExt.release(structureMember);
				}
			}
		}
	}
	this.m_alternativeFieldValues = oFF.XObjectExt.release(this.m_alternativeFieldValues);
	this.m_defaultAxisType = null;
	this.m_resultStructureController = oFF.XObjectExt.release(this.m_resultStructureController);
	this.m_resultMemberTotal = oFF.XObjectExt.release(this.m_resultMemberTotal);
	this.m_resultMemberTotalIncluded = oFF.XObjectExt.release(this.m_resultMemberTotalIncluded);
	this.m_resultMemberTotalRemaining = oFF.XObjectExt.release(this.m_resultMemberTotalRemaining);
	this.m_resultOthersFromConditions = oFF.XObjectExt.release(this.m_resultOthersFromConditions);
	this.m_selector = oFF.XObjectExt.release(this.m_selector);
	this.m_fieldContainer = oFF.XObjectExt.release(this.m_fieldContainer);
	this.m_attributeContainer = oFF.XObjectExt.release(this.m_attributeContainer);
	this.m_readModeManager = oFF.XObjectExt.release(this.m_readModeManager);
	this.m_nameValuePairs = oFF.XObjectExt.release(this.m_nameValuePairs);
	this.m_allStructureMembers = oFF.XObjectExt.release(this.m_allStructureMembers);
	this.m_structureLayout = oFF.XObjectExt.release(this.m_structureLayout);
	this.m_placeholderIds = oFF.XObjectExt.release(this.m_placeholderIds);
	this.m_placeholderIdMemberNameMap = oFF.XObjectExt.release(this.m_placeholderIdMemberNameMap);
	try
	{
		if (this.getKeyRefStorage() !== null)
		{
			this.getKeyRefStorage().removeObjectsByGroup(oFF.KeyRefConstants.MAIN_STORAGE, this.getName(), true);
		}
	}
	catch (t)
	{
		this.logExt(this.getLogLayer(), oFF.Severity.DEBUG, 0, "this.getKeyRefStorage() - throw unsupported operation");
	}
	let metadata = this.getMetadata();
	if (oFF.notNull(metadata))
	{
		if (!metadata.isIncompleteDimensionMetadata())
		{
			if (this.getOlapEnv() !== null)
			{
				this.getOlapEnv().releaseDimensionMetadataByKey(metadata.getCacheKey());
			}
		}
	}
	this.m_metadata = oFF.XObjectExt.release(this.m_metadata);
	this.m_overdefinedMemberManager = oFF.XObjectExt.release(this.m_overdefinedMemberManager);
	this.m_overrideText = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QDimension.prototype.remapIfDefaultMemberName = function(name)
{
	let queryModel = this.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		let datasetId = queryModel.getDatasetId();
		if (oFF.notNull(datasetId) && oFF.XString.isEqual(name, oFF.MeasureModelConstants.DEFAULT_CUSTOMDIMENSION2_MEMBER) && this.getDimensionType() === oFF.DimensionType.SECONDARY_STRUCTURE)
		{
			return oFF.XStringUtils.concatenate3(datasetId, "-", name);
		}
	}
	return name;
};
oFF.QDimension.prototype.remapIfLegacyCalculationPlaceholderName = function(name)
{
	let member = null;
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.MULTIPLE_ACCOUNT_HIERARCHIES) && this.getDimensionType() === oFF.DimensionType.ACCOUNT && oFF.QDimensionMemberNameUtil.isCalculationPlaceholderMemberName(name))
	{
		let index = oFF.XString.indexOf(name, oFF.QModelConstants.CALCULATION_PLACEHOLDER_ID_PREFIX);
		let endindex = oFF.XString.indexOfFrom(name, "]", index);
		let noPrefixMemberName = oFF.XString.substring(name, index, endindex);
		member = this.getPlaceholderIdMemberMap().getByKey(noPrefixMemberName);
	}
	return member;
};
oFF.QDimension.prototype.removeAssignedPlaceholderId = function(placeholderId)
{
	this.m_placeholderIdMemberNameMap.remove(this.convertLegacyPlaceholderName(placeholderId));
};
oFF.QDimension.prototype.removeCurrencyPlaceHolderIdMember = function(member)
{
	let assignedMemberName;
	let placeholderIdsIter = this.m_placeholderIdMemberNameMap.getKeysAsIterator();
	let deletePlaceholderId = null;
	while (placeholderIdsIter.hasNext())
	{
		let placeholderId = placeholderIdsIter.next();
		assignedMemberName = this.m_placeholderIdMemberNameMap.getByKey(placeholderId);
		if (oFF.notNull(assignedMemberName) && oFF.XString.isEqual(assignedMemberName, member.getAliasName()))
		{
			deletePlaceholderId = placeholderId;
			break;
		}
	}
	if (oFF.notNull(deletePlaceholderId))
	{
		this.m_placeholderIdMemberNameMap.remove(deletePlaceholderId);
		if (oFF.XString.isEqual(deletePlaceholderId, oFF.CurrencyTranslationConstants.SIGNED_DATA))
		{
			let lastPlaceholderId = this.getLastAssignedCurrencyPlaceholderId();
			if (oFF.notNull(lastPlaceholderId))
			{
				assignedMemberName = this.m_placeholderIdMemberNameMap.getByKey(lastPlaceholderId);
				this.m_placeholderIdMemberNameMap.remove(lastPlaceholderId);
				this.m_placeholderIdMemberNameMap.put(oFF.CurrencyTranslationConstants.SIGNED_DATA, assignedMemberName);
			}
		}
	}
};
oFF.QDimension.prototype.removeCustomMembers = function()
{
	if (this.supportsCustomMembers())
	{
		this.m_structureLayout.queueEventing();
		for (let measureIdx = 0; measureIdx < this.m_allStructureMembers.size(); measureIdx++)
		{
			let iqStructureMember = this.m_allStructureMembers.get(measureIdx);
			if (oFF.isNull(iqStructureMember))
			{
				this.m_allStructureMembers.removeAt(measureIdx);
				this.m_structureLayout.removeAt(measureIdx);
				measureIdx--;
			}
			else if (iqStructureMember.isReleased())
			{
				this.m_allStructureMembers.removeElement(iqStructureMember);
				this.m_structureLayout.removeElement(iqStructureMember);
				measureIdx--;
			}
			else if (iqStructureMember.getMemberType().isCustomMember() && !iqStructureMember.isModelDefinedMember())
			{
				if (this.removeMeasure(iqStructureMember.getName()))
				{
					measureIdx--;
				}
			}
		}
		this.m_structureLayout.resumeEventing();
	}
};
oFF.QDimension.prototype.removeCustomMembersWithWhiteList = function(measuresToKeep)
{
	if (oFF.isNull(measuresToKeep) || measuresToKeep.isEmpty())
	{
		this.removeCustomMembers();
	}
	else
	{
		if (this.supportsCustomMembers())
		{
			this.m_structureLayout.queueEventing();
			for (let measureIdx = 0; measureIdx < this.m_allStructureMembers.size(); measureIdx++)
			{
				let structureMember = this.m_allStructureMembers.get(measureIdx);
				if (oFF.isNull(structureMember) || structureMember.isReleased())
				{
					this.m_allStructureMembers.removeAt(measureIdx);
					this.m_structureLayout.removeAt(measureIdx);
					measureIdx--;
				}
				else
				{
					let memberName = structureMember.getName();
					if (!measuresToKeep.contains(memberName) && structureMember.getMemberType().isCustomMember() && !structureMember.isModelDefinedMember())
					{
						if (this.removeMeasure(memberName))
						{
							measureIdx--;
						}
					}
				}
			}
			this.m_structureLayout.resumeEventing();
		}
	}
};
oFF.QDimension.prototype.removeMeasure = function(name)
{
	if (this.supportsCustomMembers())
	{
		let member = this.getStructureMemberIncludeReleasedByKey(name, false);
		if (oFF.notNull(member))
		{
			let memberType = member.getMemberType();
			if (!memberType.isCustomMember() && !member.getTagging().containsKey(oFF.QTransientConstants.TAG_IS_TRANSIENT_MEMBER_COPY))
			{
				throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate2("Structure member cannot be removed: ", name));
			}
			if (member.isCreatedFromMetadata())
			{
				return false;
			}
		}
		return this.removeMeasureWithNoValidation(name);
	}
	return false;
};
oFF.QDimension.prototype.removeMeasureWithNoValidation = function(name)
{
	if (this.supportsCustomMembers())
	{
		let member = this.getStructureMemberIncludeReleasedByKey(name, false);
		if (oFF.notNull(member))
		{
			let queryModel = this.getQueryModelBase();
			queryModel.getQueryDataCellsBase().removeByMember(member);
			let isTransientMemberTag = oFF.QTransientConstants.createIsTransientMemberTag(member.getAliasOrMemberName());
			let isTransientMember = this.getTagging().containsKey(isTransientMemberTag);
			let isKeyRefMeasure = queryModel.getOlapEnv().getClientQueryObjectManager().getClientQueryObjectIncludeReleasedByKeyRef(member, queryModel.getQueryManager().getClientQueryObjectStorageName()) !== null;
			if (!isTransientMember && !isKeyRefMeasure)
			{
				let sortingManager = queryModel.getSortingManager();
				let measureSorting = sortingManager.getMeasureSorting(member, false);
				if (oFF.notNull(measureSorting))
				{
					sortingManager.getSortingOperations().removeElement(measureSorting);
				}
			}
			if (isTransientMember)
			{
				this.getTagging().remove(isTransientMemberTag);
			}
			let currencyTranslationManager = queryModel.getCurrencyTranslationManager();
			if (currencyTranslationManager.isLegacyMeasureCurrencyTranslationAccountModel() && member.getComponentType().isEqualTo(oFF.MemberType.CURRENCY_MEASURE))
			{
				this.removeCurrencyPlaceHolderIdMember(member);
			}
			else
			{
				this.removePlaceholderIdMember(member);
			}
			queryModel.getExceptionManager().removeAllExceptionsOfMeasure(member);
		}
		let filter = this.getFilter();
		if (oFF.notNull(filter))
		{
			for (let i = 0; i < filter.size(); i++)
			{
				let filterElement = filter.getOp(i);
				let comparisonOperator = filterElement.getComparisonOperator();
				if (comparisonOperator.getNumberOfParameters() === 1)
				{
					let dimensionMember = filterElement.getLow().getDimensionMember();
					if (oFF.notNull(dimensionMember) && oFF.XString.isEqual(dimensionMember.getName(), name))
					{
						filter.removeAt(i);
						break;
					}
				}
			}
		}
		if (oFF.notNull(member))
		{
			this.m_allStructureMembers.removeElement(member);
			this.m_structureLayout.removeElement(member);
			this.m_overdefinedMemberManager.removeOverdefinedMember(name);
			return true;
		}
	}
	return false;
};
oFF.QDimension.prototype.removeModellerMember = function(storageObjectName)
{
	this.getKeyRefStorage().removeObject(oFF.KeyRefConstants.MAIN_STORAGE, this.getName(), storageObjectName, true);
	this.notifyNodeChanged();
};
oFF.QDimension.prototype.removeOverdefinedAccount = function(name)
{
	if (this.getMetadata().getDimensionType() === oFF.DimensionType.ACCOUNT)
	{
		let member = this.getStructureMemberIncludeReleasedByKey(name, false);
		let dimMember = this.getDimensionMemberWithFormat(name, null);
		if (oFF.isNull(member))
		{
			return;
		}
		let memberType = member.getMemberType();
		if (!memberType.isCustomMember())
		{
			throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate2("Structure member cannot be removed: ", name));
		}
		let filter = this.getFilter();
		if (oFF.notNull(filter))
		{
			for (let i = 0; i < filter.size(); i++)
			{
				let filterElement = filter.getOp(i);
				let comparisonOperator = filterElement.getComparisonOperator();
				if (comparisonOperator.getNumberOfParameters() === 1)
				{
					let dimensionMember = filterElement.getLow().getDimensionMember();
					if (dimensionMember === member)
					{
						filterElement.getLow().setDimensionMember(dimMember);
						break;
					}
				}
			}
		}
		this.removePlaceholderIdMember(member);
		this.m_allStructureMembers.removeElement(member);
		this.m_structureLayout.removeElement(member);
	}
};
oFF.QDimension.prototype.removePlaceholderIdMember = function(member)
{
	if (this.m_placeholderIds.contains(member.getName()))
	{
		this.m_placeholderIdMemberNameMap.remove(member.getName());
	}
	else
	{
		let placeholderIdsIter = this.m_placeholderIdMemberNameMap.getKeysAsIterator();
		let deletePlaceholderId = null;
		while (placeholderIdsIter.hasNext())
		{
			let placeholderId = placeholderIdsIter.next();
			let assignedMemberName = this.m_placeholderIdMemberNameMap.getByKey(placeholderId);
			if (oFF.notNull(assignedMemberName) && oFF.XString.isEqual(assignedMemberName, member.getName()))
			{
				deletePlaceholderId = placeholderId;
				break;
			}
		}
		if (oFF.notNull(deletePlaceholderId))
		{
			this.m_placeholderIdMemberNameMap.remove(deletePlaceholderId);
		}
	}
};
oFF.QDimension.prototype.removeStickyMember = function(memberName)
{
	this.m_hierarchyManager.removeStickyMember(memberName);
};
oFF.QDimension.prototype.reorderPlaceholderIds = function(orderedPlaceholderIds)
{
	if (this.m_placeholderIds.size() === orderedPlaceholderIds.size())
	{
		let convertedPlaceholderIds = oFF.XList.create();
		for (let j = 0; j < this.m_placeholderIds.size(); j++)
		{
			convertedPlaceholderIds.add(this.convertLegacyPlaceholderName(orderedPlaceholderIds.get(j)));
		}
		for (let i = 0; i < this.m_placeholderIds.size(); i++)
		{
			if (!convertedPlaceholderIds.contains(this.m_placeholderIds.get(i)))
			{
				return;
			}
		}
		this.m_placeholderIds.clear();
		this.m_placeholderIds.addAll(convertedPlaceholderIds);
	}
};
oFF.QDimension.prototype.resetFieldsToDefault = function()
{
	let fieldLayoutType = this.getFieldLayoutType();
	let defaultFieldLayoutType = this.getDefaultFieldLayoutType();
	if (fieldLayoutType !== defaultFieldLayoutType)
	{
		this.setFieldLayoutType(defaultFieldLayoutType);
	}
	if (defaultFieldLayoutType === oFF.FieldLayoutType.FIELD_BASED)
	{
		let dimDefaultResultSetFields = this.getDefaultResultSetFields();
		let dimResultSetFields = this.getResultSetFields();
		dimResultSetFields.clear();
		dimResultSetFields.addAll(dimDefaultResultSetFields);
	}
	else
	{
		let defaultResultSetAttributes = this.getDefaultResultSetAttributes();
		let dimResultSetAttributes = this.getResultSetAttributes();
		dimResultSetAttributes.clear();
		for (let j = 0; j < defaultResultSetAttributes.size(); j++)
		{
			let currentAttribute = defaultResultSetAttributes.get(j);
			let attributeDefaultResultSetFields = currentAttribute.getDefaultResultSetFields();
			let attributeResultSetFields = currentAttribute.getResultSetFields();
			attributeResultSetFields.clear();
			attributeResultSetFields.addAll(attributeDefaultResultSetFields);
			dimResultSetAttributes.add(currentAttribute);
		}
	}
};
oFF.QDimension.prototype.resetHierarchyCatalogFetched = function()
{
	this.getHierarchyManager().resetHierarchyCatalogFetched();
};
oFF.QDimension.prototype.resetToDefaultReadMode = function(context)
{
	this.toggleDefaultingProcess(true);
	let metaConstantString = context === oFF.QContextType.RESULT_SET ? oFF.QDimensionProperties.QY_READ_MODE : context === oFF.QContextType.SELECTOR ? oFF.QDimensionProperties.QY_SELECTOR_READ_MODE : oFF.QDimensionProperties.QY_VARIABLE_READ_MODE;
	let metaValue = this.getMetaValue(metaConstantString);
	let defaultReadMode = null;
	if (oFF.notNull(metaValue))
	{
		defaultReadMode = oFF.QMemberReadMode.lookup(metaValue.toString());
		this.setReadMode(context, defaultReadMode);
	}
	this.toggleDefaultingProcess(false);
	return defaultReadMode;
};
oFF.QDimension.prototype.restoreTotalsAlignment = function(restoreAction, recurseChildren)
{
	this.m_resultStructureController.restoreTotalsAlignment(restoreAction, recurseChildren);
};
oFF.QDimension.prototype.restoreTotalsVisibility = function(restoreAction, recurseChildren)
{
	this.m_resultStructureController.restoreTotalsVisibility(restoreAction, recurseChildren);
};
oFF.QDimension.prototype.serializeValueHelpForPersistedInA = function()
{
	let queryManager = this.getQueryManagerBase();
	if (queryManager.getModelCapabilities().supportsPersistedInA())
	{
		return queryManager.getValueHelpProvider().serializeForPersistedInA(this);
	}
	return null;
};
oFF.QDimension.prototype.setAlignmentPriority = function(alignmentPriority)
{
	this.m_resultStructureController.setAlignmentPriority(alignmentPriority);
};
oFF.QDimension.prototype.setAlternativeFieldValue = function(hierarchyKey, memberKey, fieldName, value, language)
{
	let internalLanguage;
	if (oFF.isNull(language))
	{
		internalLanguage = "";
	}
	else
	{
		internalLanguage = language;
	}
	if (oFF.isNull(this.m_alternativeFieldValues))
	{
		this.m_alternativeFieldValues = oFF.XHashMapByString.create();
	}
	let keyTypeStringRepresentation = oFF.XBoolean.convertToString(hierarchyKey);
	let keyMap = this.m_alternativeFieldValues.getByKey(keyTypeStringRepresentation);
	if (oFF.isNull(keyMap))
	{
		keyMap = oFF.XHashMapByString.create();
		this.m_alternativeFieldValues.put(keyTypeStringRepresentation, keyMap);
	}
	let fieldMap = keyMap.getByKey(memberKey);
	if (oFF.isNull(fieldMap))
	{
		fieldMap = oFF.XHashMapByString.create();
		keyMap.put(memberKey, fieldMap);
	}
	let languageMap = fieldMap.getByKey(fieldName);
	if (oFF.isNull(languageMap))
	{
		languageMap = oFF.XHashMapByString.create();
		fieldMap.put(fieldName, languageMap);
	}
	languageMap.put(internalLanguage, value);
};
oFF.QDimension.prototype.setAxis = function(axis)
{
	if (this.getAxis() !== axis)
	{
		this.m_axis = oFF.XWeakReferenceUtil.getWeakRef(axis);
		this.notifyNodeChanged();
	}
};
oFF.QDimension.prototype.setClientDefaultKeyField = function(field)
{
	this.m_fieldContainer.setClientDefaultKeyField(field);
};
oFF.QDimension.prototype.setClientDefaultTextField = function(field)
{
	this.m_fieldContainer.setClientDefaultTextField(field);
};
oFF.QDimension.prototype.setCustomHierarchyDefinition = function(customHierarchyDefinition)
{
	this.m_hierarchyManager.setCustomHierarchyDefinition(customHierarchyDefinition);
};
oFF.QDimension.prototype.setDefaultAxisType = function(axisType)
{
	this.m_defaultAxisType = axisType;
};
oFF.QDimension.prototype.setDesignTimeMode = function(designTimeMode)
{
	this.m_designTimeMode = designTimeMode;
};
oFF.QDimension.prototype.setDimensionType = function(type)
{
	if (oFF.notNull(type))
	{
		if (this.isStructure())
		{
			this.m_resultStructureController.setSupportsTotals(false);
		}
		if (this.supportsCustomMembers())
		{
			this.m_allStructureMembers = oFF.QModelComponentList.createModelComponentWithNameList(this.getContext(), this, false, "Structure Members", true);
			this.m_structureLayout = oFF.QModelComponentList.createModelComponentWithNameList(this.getContext(), this, false, "Structure Layout", true);
		}
	}
};
oFF.QDimension.prototype.setEnforceHierarchyDueDateVariableOrDefault = function(enforce)
{
	this.m_hierarchyManager.setEnforceHierarchyDueDateVariableOrDefault(enforce);
};
oFF.QDimension.prototype.setEnforceHierarchyNameVariable = function(enforce)
{
	this.m_hierarchyManager.setEnforceHierarchyNameVariable(enforce);
};
oFF.QDimension.prototype.setEnforceHierarchyVersionVariableOrDefault = function(enforce)
{
	this.m_hierarchyManager.setEnforceHierarchyVersionVariableOrDefault(enforce);
};
oFF.QDimension.prototype.setExplicitDrillOnFilteredNodes = function(drillOnFilteredNodes)
{
	this.m_hierarchyManager.setExplicitDrillOnFilteredNodes(drillOnFilteredNodes);
};
oFF.QDimension.prototype.setFieldLayoutType = function(type)
{
	if (oFF.notNull(type))
	{
		this.assertSupportsFieldLayoutType(type);
		let oldValue = this.m_fieldLayoutType;
		this.m_fieldLayoutType = type;
		this.notifyPropertyConstantChanged(oFF.QDimensionProperties.QY_FIELD_LAYOUT_TYPE, oldValue, type);
	}
};
oFF.QDimension.prototype.setHasNodeCondensation = function(condense)
{
	this.m_hierarchyManager.setHasNodeCondensation(condense);
};
oFF.QDimension.prototype.setHierarchicalDimensionMemberNamesStoredAsFlat = function(storeAsFlat)
{
	this.m_areHierarchicalDimensionMemberNamesStoredAsFlat = storeAsFlat;
};
oFF.QDimension.prototype.setHierarchy = function(hierarchy)
{
	this.m_hierarchyManager.setHierarchy(hierarchy);
};
oFF.QDimension.prototype.setHierarchyActive = function(active)
{
	return this.m_hierarchyManager.setHierarchyActive(active);
};
oFF.QDimension.prototype.setHierarchyCatalogKeyDate = function(keyDate)
{
	this.m_hierarchyManager.setHierarchyCatalogKeyDate(keyDate);
};
oFF.QDimension.prototype.setHierarchyDueDate = function(dueDate)
{
	this.m_hierarchyManager.setHierarchyDueDate(dueDate);
};
oFF.QDimension.prototype.setHierarchyDueDateVariableName = function(name)
{
	this.m_hierarchyManager.setHierarchyDueDateVariableName(name);
};
oFF.QDimension.prototype.setHierarchyName = function(name)
{
	this.m_hierarchyManager.setHierarchyName(name);
};
oFF.QDimension.prototype.setHierarchySelection = function(name, version)
{
	this.m_hierarchyManager.setHierarchySelection(name, version);
};
oFF.QDimension.prototype.setHierarchyVersion = function(version)
{
	this.m_hierarchyManager.setHierarchyVersion(version);
};
oFF.QDimension.prototype.setIgnoreOnOptimizedExport = function(isIgnored)
{
	this.m_isIgnoredOnExport = isIgnored;
};
oFF.QDimension.prototype.setIncludeCustomHierarchies = function(includeCustomHierarchies)
{
	this.getHierarchyManager().setIncludeCustomHierarchies(includeCustomHierarchies);
};
oFF.QDimension.prototype.setInitialDrillLevel = function(relativeLevelCount)
{
	this.m_hierarchyManager.setInitialDrillLevel(relativeLevelCount);
};
oFF.QDimension.prototype.setInitialDrillOffset = function(relativeLevelOffset)
{
	this.m_hierarchyManager.setInitialDrillOffset(relativeLevelOffset);
};
oFF.QDimension.prototype.setIsCumulative = function(isEnabled)
{
	if (!this.supportsCumulative())
	{
		oFF.noSupport();
	}
	let oldValue = this.m_isCumulative;
	this.m_isCumulative = isEnabled;
	this.notifyPropertyBooleanChanged(oFF.QDimensionProperties.IS_CUMULATIVE, oldValue, isEnabled);
};
oFF.QDimension.prototype.setLowerLevelNodeAlignment = function(alignment)
{
	this.m_hierarchyManager.setLowerLevelNodeAlignment(alignment);
};
oFF.QDimension.prototype.setMeasureHelpMetadataSelector = function(measureHelpMetadataSelector)
{
	this.getSelector().setMeasureHelpMetadataSelector(measureHelpMetadataSelector);
};
oFF.QDimension.prototype.setMemberOfPostedNodeVisibility = function(visibility)
{
	this.m_hierarchyManager.setMemberOfPostedNodeVisibility(visibility);
};
oFF.QDimension.prototype.setMetadata = function(metadata)
{
	this.m_metadata = oFF.XWeakReferenceUtil.getWeakRef(metadata);
};
oFF.QDimension.prototype.setOverrideText = function(overrideText)
{
	if (!oFF.XString.isEqual(overrideText, "") && !oFF.XString.isEqual(overrideText, this.m_overrideText))
	{
		let oldValue = this.m_overrideText;
		this.m_overrideText = overrideText;
		this.notifyPropertyStringChanged(oFF.QDimensionProperties.QY_OVERRIDE_TEXT, oldValue, this.m_overrideText);
	}
};
oFF.QDimension.prototype.setPlaceholderIds = function(placeholderIds)
{
	this.m_placeholderIds.clear();
	for (let i = 0; i < placeholderIds.size(); i++)
	{
		let placeholderId = placeholderIds.get(i);
		this.addPlaceholderId(placeholderId);
	}
};
oFF.QDimension.prototype.setReadMode = function(context, mode)
{
	let oldValue = this.m_readModeManager.getReadMode(context);
	this.m_readModeManager.setReadMode(context, mode);
	if (context === oFF.QContextType.RESULT_SET)
	{
		this.notifyPropertyConstantChanged(oFF.QDimensionProperties.QY_READ_MODE, oldValue, mode);
		this.synchronizeAxisReadModeSettings(context, mode);
	}
	else
	{
		let whatChanged = context === oFF.QContextType.SELECTOR ? oFF.QDimensionProperties.QY_SELECTOR_READ_MODE : oFF.QDimensionProperties.QY_VARIABLE_READ_MODE;
		this.setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_DO_NOT_RAISEEVENTS);
		this.notifyPropertyConstantChanged(whatChanged, oldValue, mode);
		this.resumeEventing();
	}
};
oFF.QDimension.prototype.setReadModeGraceful = function(context, mode)
{
	this.synchronizeAxisReadModeSettings(context, mode);
	return this.setReadModeGracefulInternal(context, mode);
};
oFF.QDimension.prototype.setReadModeGracefulInternal = function(context, mode)
{
	let oldValue = this.m_readModeManager.getReadMode(context);
	let setReadMode = this.m_readModeManager.setReadModeGraceful(context, mode);
	if (context === oFF.QContextType.RESULT_SET)
	{
		this.notifyPropertyConstantChanged(oFF.QDimensionProperties.QY_READ_MODE, oldValue, setReadMode);
	}
	else
	{
		let whatChanged = context === oFF.QContextType.SELECTOR ? oFF.QDimensionProperties.QY_SELECTOR_READ_MODE : oFF.QDimensionProperties.QY_VARIABLE_READ_MODE;
		this.setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_DO_NOT_RAISEEVENTS);
		this.notifyPropertyConstantChanged(whatChanged, oldValue, setReadMode);
		this.resumeEventing();
	}
	return setReadMode;
};
oFF.QDimension.prototype.setResultAlignment = function(alignment)
{
	this.m_resultStructureController.setResultAlignment(alignment);
};
oFF.QDimension.prototype.setResultVisibility = function(visibility)
{
	this.m_resultStructureController.setResultVisibility(visibility);
};
oFF.QDimension.prototype.setResultVisibilityByElement = function(element, visibility)
{
	this.m_resultStructureController.setResultVisibilityByElement(element, visibility);
};
oFF.QDimension.prototype.setResultVisibilityByElementAndAlignment = function(alignment, element, visibility)
{
	this.m_resultStructureController.setResultVisibilityByElementAndAlignment(alignment, element, visibility);
};
oFF.QDimension.prototype.setRsDimensionType = oFF.noSupport;
oFF.QDimension.prototype.setRuntimeDisplayGroupName = function(groupName)
{
	this.m_runtimeDisplayGroupName = groupName;
};
oFF.QDimension.prototype.setRuntimeDisplayGroupText = function(groupText)
{
	this.m_runtimeDisplayGroupText = groupText;
};
oFF.QDimension.prototype.setSelectorCascadingReadModeAndFilter = function()
{
	this.getSelector().setSelectorCascadingReadModeAndFilter();
};
oFF.QDimension.prototype.setSelectorComplexSelectionRoot = function(complexSelection)
{
	this.getSelector().setSelectorComplexSelectionRoot(complexSelection);
};
oFF.QDimension.prototype.setSelectorCustomTextField = function(textField)
{
	this.getSelector().setSelectorCustomTextField(textField);
};
oFF.QDimension.prototype.setSelectorFieldLayoutType = function(type)
{
	if (oFF.notNull(this.m_selectorFieldLayoutType) && oFF.notNull(type))
	{
		this.assertSupportsFieldLayoutType(type);
		if (this.m_selectorFieldLayoutType !== type)
		{
			this.m_selectorFieldLayoutType = type;
			this.notifyNodeChanged();
		}
	}
};
oFF.QDimension.prototype.setSelectorFields = function(fields, addMainKeyAndTextFields)
{
	this.getSelector().setSelectorFields(fields, addMainKeyAndTextFields);
};
oFF.QDimension.prototype.setSelectorFilterOnDisplayKey = function(isUsingDisplayKey)
{
	this.getSelector().setSelectorFilterOnDisplayKey(isUsingDisplayKey);
};
oFF.QDimension.prototype.setSelectorFilterUsage = function(queryFilterUsage)
{
	this.getSelector().setSelectorFilterUsage(queryFilterUsage);
};
oFF.QDimension.prototype.setSelectorGettingInterval = function(doGetInterval)
{
	return this.getSelector().setSelectorGettingInterval(doGetInterval);
};
oFF.QDimension.prototype.setSelectorHierarchy = function(hierarchyActive, hierarchyName, initialDrillLevel)
{
	this.getSelector().setSelectorHierarchy(hierarchyActive, hierarchyName, initialDrillLevel);
};
oFF.QDimension.prototype.setSelectorHierarchyActive = function(isActive)
{
	this.getSelector().setSelectorHierarchyActive(isActive);
};
oFF.QDimension.prototype.setSelectorHierarchyName = function(hierarchyName)
{
	this.getSelector().setSelectorHierarchyName(hierarchyName);
};
oFF.QDimension.prototype.setSelectorHierarchyNode = function(parent)
{
	this.getSelector().setSelectorHierarchyNode(parent);
};
oFF.QDimension.prototype.setSelectorHierarchyNodeByName = function(parent)
{
	this.getSelector().setSelectorHierarchyNodeByName(parent);
};
oFF.QDimension.prototype.setSelectorHierarchyWithNodeSid = function(nodeSid, nodeName)
{
	this.getSelector().setSelectorHierarchyWithNodeSid(nodeSid, nodeName);
};
oFF.QDimension.prototype.setSelectorInitialDrillLevel = function(relativeLevelCount)
{
	this.getSelector().setSelectorInitialDrillLevel(relativeLevelCount);
};
oFF.QDimension.prototype.setSelectorLowerLevelNodeAlignment = function(alignment)
{
	this.getSelector().setSelectorLowerLevelNodeAlignment(alignment);
};
oFF.QDimension.prototype.setSelectorMaxResultRecords = function(maxResultRecords)
{
	this.getSelector().setSelectorMaxResultRecords(maxResultRecords);
};
oFF.QDimension.prototype.setSelectorOrder = function(direction)
{
	this.getSelector().setSelectorOrder(direction);
};
oFF.QDimension.prototype.setSelectorPaging = function(start, end)
{
	this.getSelector().setSelectorPaging(start, end);
};
oFF.QDimension.prototype.setSelectorPagingDefault = function()
{
	this.getSelector().setSelectorPagingDefault();
};
oFF.QDimension.prototype.setSelectorPagingEnd = function(end)
{
	this.getSelector().setSelectorPagingEnd(end);
};
oFF.QDimension.prototype.setSelectorPagingStart = function(start)
{
	this.getSelector().setSelectorPagingStart(start);
};
oFF.QDimension.prototype.setSelectorSortType = function(sortType)
{
	this.getSelector().setSelectorSortType(sortType);
};
oFF.QDimension.prototype.setSelectorUseQueryDrillOperations = function(useQueryDrillOperations)
{
	this.getSelector().setSelectorUseQueryDrillOperations(useQueryDrillOperations);
};
oFF.QDimension.prototype.setSelectorUseVisibilityFilter = function(isUsingVisibilityFilter)
{
	this.getSelector().setSelectorUseVisibilityFilter(isUsingVisibilityFilter);
};
oFF.QDimension.prototype.setSkipEntries = function(amount)
{
	let oldValue = this.m_skip;
	this.m_skip = amount;
	this.notifyPropertyIntegerChanged(oFF.QDimensionProperties.QY_SKIP, oldValue, amount);
};
oFF.QDimension.prototype.setSkipMetadataValidationOnRepoImport = function(skipMetadataValidationOnRepoImport)
{
	this.m_skipMetadataValidationOnRepoImport = skipMetadataValidationOnRepoImport;
};
oFF.QDimension.prototype.setStructureMemberLazyLoader = function(structureMemberLazyLoader)
{
	this.m_structureMemberLazyLoader = structureMemberLazyLoader;
};
oFF.QDimension.prototype.setStructuredLayout = function(customStructureLayout)
{
	if (oFF.notNull(this.m_structureLayout))
	{
		this.m_structureLayout.clear();
		this.m_structureLayout.addAll(customStructureLayout);
	}
};
oFF.QDimension.prototype.setText = function(text)
{
	let oldText = null;
	if (this.isNotingModelerChanges())
	{
		oldText = this.getOriginalText();
	}
	oFF.QModelComponent.prototype.setText.call( this , text);
	if (this.isNotingModelerChanges())
	{
		this.notifyPropertyStringChanged(oFF.QDimensionProperties.DIMENSION_TEXT, oldText, text);
	}
};
oFF.QDimension.prototype.setTopEntries = function(amount)
{
	let oldValue = this.m_top;
	this.m_top = amount;
	this.notifyPropertyIntegerChanged(oFF.QDimensionProperties.QY_TOP, oldValue, amount);
};
oFF.QDimension.prototype.setTotalsModified = function(totalsModified)
{
	this.m_totalsModified = totalsModified;
};
oFF.QDimension.prototype.setUseDefaultDrillLevelOnChange = function(useDefaultDrillLevelOnChange)
{
	this.m_hierarchyManager.setUseDefaultDrillLevelOnChange(useDefaultDrillLevelOnChange);
};
oFF.QDimension.prototype.setUseHierarchyDueDateVariable = function(useVariable)
{
	this.m_hierarchyManager.setUseHierarchyDueDateVariable(useVariable);
};
oFF.QDimension.prototype.setupDimension = function(context, parentNode)
{
	oFF.QModelComponent.prototype.setupModelComponent.call( this , context, parentNode);
	this.m_hierarchyManager = oFF.QFactory.createHierarchyManager(context, this);
	this.m_selectorFieldLayoutType = oFF.FieldLayoutType.FIELD_BASED;
	this.m_fieldLayoutType = oFF.FieldLayoutType.FIELD_BASED;
	this.m_fieldContainer = oFF.QFactory.createFieldContainer(context, this);
	this.m_attributeContainer = oFF.QFactory.createAttributeContainer(context, this);
	this.m_readModeManager = oFF.QFactory.createReadModeManager(this);
	this.m_resultStructureController = oFF.QFactory.createResultStructureController(context, this, oFF.QModelLevel.DIMENSIONS);
	this.m_placeholderIds = oFF.XList.create();
	this.m_placeholderIdMemberNameMap = oFF.XHashMapByString.create();
	this.m_overdefinedMemberManager = oFF.QOverdefinedMemberManager._createOverdefineMemberManager(this.getContext(), this);
	this.m_defaultAxisType = oFF.AxisType.FREE;
};
oFF.QDimension.prototype.supportsAdvancedResultStructure = function()
{
	if (this.isStructure())
	{
		return false;
	}
	return this.m_resultStructureController.supportsAdvancedResultStructure();
};
oFF.QDimension.prototype.supportsAxis = function(axisType)
{
	return this.getMetadata().supportsAxis(axisType);
};
oFF.QDimension.prototype.supportsBasicStructureMembers = function()
{
	return this.getMetadata().supportsBasicStructureMembers();
};
oFF.QDimension.prototype.supportsCalculatedBeforeAggregation = function()
{
	return this.getMetadata().supportsCalculatedBeforeAggregation();
};
oFF.QDimension.prototype.supportsCumulative = function()
{
	return this.getMetadata().supportsCumulative();
};
oFF.QDimension.prototype.supportsCurrencyTranslationMembers = function()
{
	if (!this.isMeasureStructure())
	{
		return false;
	}
	if (this.getModelCapabilities().supportsCurrencyTranslation())
	{
		return true;
	}
	let currencyTranslationManager = this.getQueryModelBase().getCurrencyTranslationManagerBase();
	return oFF.notNull(currencyTranslationManager) && currencyTranslationManager.isLegacyMeasureCurrencyTranslationAccountModel();
};
oFF.QDimension.prototype.supportsCustomMembers = function()
{
	return this.getMetadata() !== null && this.getMetadata().supportsCustomMembers();
};
oFF.QDimension.prototype.supportsFieldLayoutType = function(type)
{
	return this.getMetadata().supportsFieldLayoutType(type);
};
oFF.QDimension.prototype.supportsHierarchy = function()
{
	return this.m_hierarchyManager.supportsHierarchy();
};
oFF.QDimension.prototype.supportsHierarchyMetadata = function()
{
	return this.getModelCapabilities().supportsHierarchyMetadata();
};
oFF.QDimension.prototype.supportsLowerCase = function()
{
	return this.getMetadata().supportsLowerCase();
};
oFF.QDimension.prototype.supportsReadMode = function(context, readMode)
{
	return this.m_readModeManager.supportsReadMode(context, readMode);
};
oFF.QDimension.prototype.supportsResultAlignment = function()
{
	if (this.isStructure())
	{
		return false;
	}
	return this.m_resultStructureController.supportsResultAlignment();
};
oFF.QDimension.prototype.supportsResultVisibility = function()
{
	if (this.isStructure())
	{
		return false;
	}
	return this.m_resultStructureController.supportsResultVisibility();
};
oFF.QDimension.prototype.supportsRunningTotalMeasures = function()
{
	return this.supportsCustomMembers() && this.getModelCapabilities().supportsIteratedFormula();
};
oFF.QDimension.prototype.supportsSorting = function(sortType)
{
	let supportedSortTypes = this.getMetadata().getSupportedSortTypes();
	if (oFF.notNull(supportedSortTypes) && oFF.notNull(sortType) && !supportedSortTypes.contains(sortType))
	{
		return false;
	}
	let queryModel = this.getQueryModel();
	if (oFF.isNull(queryModel))
	{
		return false;
	}
	let modelCapabilities = queryModel.getModelCapabilities();
	return !this.isUniversalDisplayHierarchyDimension() && modelCapabilities.supportsDimensionSorting(null, sortType);
};
oFF.QDimension.prototype.supportsTotals = function()
{
	return this.getMetadata().canBeAggregated() && this.m_resultStructureController.supportsTotals();
};
oFF.QDimension.prototype.supportsUnitTranslationMembers = function()
{
	if (!this.isMeasureStructure())
	{
		return false;
	}
	if (this.getModelCapabilities().supportsUnitTranslation())
	{
		return true;
	}
	let unitTranslationManager = this.getQueryModelBase().getUnitTranslationManagerBase();
	return oFF.notNull(unitTranslationManager);
};
oFF.QDimension.prototype.synchronizeAxisReadModeSettings = function(context, mode)
{
	let axis = this.getAxisBase();
	if (context === oFF.QContextType.RESULT_SET && oFF.notNull(axis) && axis.isReadModeAndSuppressionSynchronized())
	{
		let indexOnAxis = this.getIndexOnAxis();
		let axisSize = axis.size();
		let index;
		if (oFF.XConstantWithParent.isObjectTypeOf(mode, oFF.QMemberReadMode.BOOKED))
		{
			for (index = indexOnAxis - 1; index > -1; index--)
			{
				axis.synchronizeReadmode(index, context, mode);
			}
		}
		else if (oFF.XConstantWithParent.isObjectTypeOf(mode, oFF.QMemberReadMode.MASTER))
		{
			axis.setZeroSuppressionType(oFF.ZeroSuppressionType.NONE);
			for (index = indexOnAxis + 1; index < axisSize; index++)
			{
				axis.synchronizeReadmode(index, context, mode);
			}
		}
	}
};
oFF.QDimension.prototype.useDefaultDrillLevelOnChange = function()
{
	return this.m_hierarchyManager.useDefaultDrillLevelOnChange();
};
oFF.QDimension.prototype.useHierarchyDueDateVariable = function()
{
	return this.m_hierarchyManager.useHierarchyDueDateVariable();
};
oFF.QDimension.prototype.useHierarchyNameVariable = function()
{
	return this.m_hierarchyManager.useHierarchyNameVariable();
};
oFF.QDimension.prototype.useHierarchyVersionVariable = function()
{
	return this.m_hierarchyManager.useHierarchyVersionVariable();
};

oFF.QAbstractDimensionMember = function() {};
oFF.QAbstractDimensionMember.prototype = new oFF.AbstractValueAccessComponent();
oFF.QAbstractDimensionMember.prototype._ff_c = "QAbstractDimensionMember";

oFF.QAbstractDimensionMember.prototype.m_dimension = null;
oFF.QAbstractDimensionMember.prototype.m_memberType = null;
oFF.QAbstractDimensionMember.prototype.copyAbstractDimensionMember = function(origin)
{
	oFF.AbstractValueAccessComponent.prototype.copyFromInternal.call( this , origin, null);
	let queryModel = this.getQueryModel();
	let originDimension = origin.getDimension();
	if (oFF.isNull(originDimension))
	{
		originDimension = origin.getParentComponent();
	}
	let dimension = queryModel.getDimensionByNameFromExistingMetadata(originDimension.getName());
	if (oFF.notNull(dimension))
	{
		this.setDimension(dimension);
	}
};
oFF.QAbstractDimensionMember.prototype.copyAttributesFromDimensionMember = function(origin)
{
	let context = this.getContext();
	let allFieldValues = origin.getAllFieldValues();
	let keys = allFieldValues.getKeysAsReadOnlyList();
	let size = keys.size();
	for (let i = 0; i < size; i++)
	{
		this.addFieldValue(allFieldValues.getByKey(keys.get(i)).cloneOlapComponent(context, this));
	}
};
oFF.QAbstractDimensionMember.prototype.getDimension = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_dimension);
};
oFF.QAbstractDimensionMember.prototype.getDimensionMember = function()
{
	return this;
};
oFF.QAbstractDimensionMember.prototype.getMemberType = function()
{
	return this.m_memberType;
};
oFF.QAbstractDimensionMember.prototype.getOlapComponentType = function()
{
	return this.m_memberType;
};
oFF.QAbstractDimensionMember.prototype.getSelectableElement = function()
{
	return this;
};
oFF.QAbstractDimensionMember.prototype.getType = function()
{
	return this.getMemberType();
};
oFF.QAbstractDimensionMember.prototype.isNode = function()
{
	return this.getMemberType().isNode();
};
oFF.QAbstractDimensionMember.prototype.releaseObject = function()
{
	this.m_dimension = oFF.XObjectExt.release(this.m_dimension);
	this.m_memberType = null;
	oFF.AbstractValueAccessComponent.prototype.releaseObject.call( this );
};
oFF.QAbstractDimensionMember.prototype.setDimension = function(dimension)
{
	this.m_dimension = oFF.XWeakReferenceUtil.getWeakRef(dimension);
};
oFF.QAbstractDimensionMember.prototype.setType = function(type)
{
	this.m_memberType = type;
};
oFF.QAbstractDimensionMember.prototype.setupAbstractDimensionMember = function(context, dimension)
{
	this.setupModelComponent(context, dimension);
	this.setDimension(dimension);
};

oFF.QDrillOperation = function() {};
oFF.QDrillOperation.prototype = new oFF.QModelComponent();
oFF.QDrillOperation.prototype._ff_c = "QDrillOperation";

oFF.QDrillOperation.create = function(context, parent, type, targetDimension, drillState, expandLevels, offsetLevels, drillPath, drillCounter, zoomStackPosition)
{
	let object = new oFF.QDrillOperation();
	object.setupDrillOperation(context, parent, type, targetDimension, drillState, expandLevels, offsetLevels, drillPath, drillCounter, zoomStackPosition);
	return object;
};
oFF.QDrillOperation.prototype.m_drillCounter = 0;
oFF.QDrillOperation.prototype.m_drillPath = null;
oFF.QDrillOperation.prototype.m_drillState = null;
oFF.QDrillOperation.prototype.m_elementPath = null;
oFF.QDrillOperation.prototype.m_expandLevels = 0;
oFF.QDrillOperation.prototype.m_offsetLevels = 0;
oFF.QDrillOperation.prototype.m_targetDimensionName = null;
oFF.QDrillOperation.prototype.m_type = null;
oFF.QDrillOperation.prototype.m_zoomStackPosition = 0;
oFF.QDrillOperation.prototype.cloneOlapComponent = function(context, parent)
{
	let targetDim = context.getDimensionAccessor().getDimensionByNameFromExistingMetadata(this.m_targetDimensionName);
	let clone = oFF.QDrillOperation.create(context, null, this.m_type, targetDim, this.m_drillState, this.m_expandLevels, this.m_offsetLevels, this.m_drillPath, this.m_drillCounter, this.m_zoomStackPosition);
	clone.copyFrom(this, null);
	clone.m_elementPath = this.m_elementPath.createListCopy();
	return clone;
};
oFF.QDrillOperation.prototype.getDrillCounter = function()
{
	return this.m_drillCounter;
};
oFF.QDrillOperation.prototype.getDrillManager = function()
{
	let result = this.getParent().getParent();
	if (oFF.isNull(result))
	{
		let queryModel = this.getQueryModel();
		if (oFF.notNull(queryModel))
		{
			result = queryModel.getDrillManager();
		}
	}
	return result;
};
oFF.QDrillOperation.prototype.getDrillPath = function()
{
	return this.m_drillPath;
};
oFF.QDrillOperation.prototype.getDrillState = function()
{
	return this.m_drillState;
};
oFF.QDrillOperation.prototype.getElementPath = function()
{
	return this.m_elementPath;
};
oFF.QDrillOperation.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.DRILL_OPERATION;
};
oFF.QDrillOperation.prototype.getPathUniqueName = function()
{
	return this.getUniqueName();
};
oFF.QDrillOperation.prototype.getRelativeLevelCount = function()
{
	return this.m_expandLevels;
};
oFF.QDrillOperation.prototype.getRelativeLevelOffset = function()
{
	return this.m_offsetLevels;
};
oFF.QDrillOperation.prototype.getTargetDimension = function()
{
	return oFF.isNull(this.m_targetDimensionName) ? null : this.getDimensionAccessor().getDimensionByNameFromExistingMetadataOrFormulaCalcDim(this.m_targetDimensionName);
};
oFF.QDrillOperation.prototype.getTargetDimensionName = function()
{
	return this.m_targetDimensionName;
};
oFF.QDrillOperation.prototype.getType = function()
{
	return this.m_type;
};
oFF.QDrillOperation.prototype.getUniqueName = function()
{
	let buffer = oFF.XStringBuffer.create();
	buffer.append("[");
	buffer.append(this.m_type.getName());
	buffer.append(":");
	if (oFF.notNull(this.m_targetDimensionName))
	{
		buffer.append(this.m_targetDimensionName);
	}
	buffer.append("]");
	if (oFF.notNull(this.m_drillPath))
	{
		let size = this.m_drillPath.size();
		for (let i = 0; i < size; i++)
		{
			if (i > 0)
			{
				buffer.append("/");
			}
			let element = this.m_drillPath.get(i);
			buffer.append("[");
			let dimension = element.getDimension();
			if (oFF.notNull(dimension))
			{
				buffer.append(dimension.getName());
			}
			buffer.append("]");
			if (element.getName() !== null)
			{
				buffer.append("{ ");
				buffer.append(element.getName());
				buffer.append("} ");
			}
		}
	}
	return buffer.toString();
};
oFF.QDrillOperation.prototype.getZoomStackPosition = function()
{
	return this.m_zoomStackPosition;
};
oFF.QDrillOperation.prototype.releaseObject = function()
{
	this.m_elementPath = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_elementPath);
	this.m_drillPath = null;
	this.m_drillState = null;
	this.m_targetDimensionName = null;
	this.m_type = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QDrillOperation.prototype.setDrillCounter = function(drillCounter)
{
	this.m_drillCounter = drillCounter;
};
oFF.QDrillOperation.prototype.setDrillState = function(drillState)
{
	let oldValue = this.m_drillState;
	this.m_drillState = drillState;
	this.notifyPropertyConstantChanged(oFF.QDrillProperties.QY_DRILL_STATE, oldValue, drillState);
};
oFF.QDrillOperation.prototype.setRelativeLevelCount = function(level)
{
	let oldValue = this.m_expandLevels;
	this.m_expandLevels = level;
	this.notifyPropertyIntegerChanged(oFF.QDrillProperties.QY_DRILL_LEVEL, oldValue, level);
};
oFF.QDrillOperation.prototype.setRelativeLevelOffset = function(relativeLevelOffset)
{
	let oldValue = this.m_offsetLevels;
	this.m_offsetLevels = relativeLevelOffset;
	this.notifyPropertyIntegerChanged(oFF.QDrillProperties.QY_INITIAL_DRILL_OFFSET, oldValue, relativeLevelOffset);
};
oFF.QDrillOperation.prototype.setTargetDimension = function(targetDimension)
{
	this.m_targetDimensionName = oFF.DfNameObject.getSafeName(targetDimension);
};
oFF.QDrillOperation.prototype.setupDrillOperation = function(context, parent, type, targetDimension, drillState, expandLevels, offsetLevels, drillPath, drillCounter, zoomStackPosition)
{
	this.setupModelComponent(context, parent);
	this.m_type = type;
	this.m_expandLevels = expandLevels;
	this.m_offsetLevels = offsetLevels;
	this.m_drillPath = drillPath;
	this.m_drillState = drillState;
	this.m_targetDimensionName = oFF.DfNameObject.getSafeName(targetDimension);
	this.m_drillCounter = drillCounter;
	this.m_zoomStackPosition = zoomStackPosition;
	if (oFF.notNull(drillPath))
	{
		this.m_elementPath = oFF.XList.create();
		let size = drillPath.size();
		for (let i = 0; i < size; i++)
		{
			let dimensionElement = drillPath.get(i);
			let dimensionElementCopy = oFF.QFactory.createDimensionElementWithContext(context, dimensionElement.getSelectField(), dimensionElement.getSelectHierarchyName(), dimensionElement.getSelectValue());
			this.m_elementPath.add(dimensionElementCopy);
		}
		if (oFF.isNull(targetDimension) && size > 0)
		{
			this.m_targetDimensionName = oFF.DfNameObject.getSafeName(drillPath.get(size - 1).getDimension());
		}
	}
};
oFF.QDrillOperation.prototype.supportsDrillCounter = function()
{
	let drillManager = this.getDrillManager();
	if (oFF.isNull(drillManager))
	{
		return false;
	}
	return drillManager.supportsDrillCounter();
};
oFF.QDrillOperation.prototype.toString = function()
{
	return this.getPathUniqueName();
};

oFF.QException = function() {};
oFF.QException.prototype = new oFF.QAbstractThresholdEvaluateList();
oFF.QException.prototype._ff_c = "QException";

oFF.QException.createException = function(context, model, name, text)
{
	let exception = new oFF.QException();
	exception.setupException(context, model, name, text);
	return exception;
};
oFF.QException.prototype.m_displayOnMeasureMember = null;
oFF.QException.prototype.m_displayOnStructureMember = null;
oFF.QException.prototype.m_evaluateAllMeasureMembers = false;
oFF.QException.prototype.m_evaluateAllStructureMembers = false;
oFF.QException.prototype.m_evaluateDefault = null;
oFF.QException.prototype.m_evaluatedBeforePostAggregation = false;
oFF.QException.prototype.m_headerSetting = null;
oFF.QException.prototype.m_isActive = false;
oFF.QException.prototype.m_isChangeable = false;
oFF.QException.prototype.m_measure = null;
oFF.QException.prototype.m_structure = null;
oFF.QException.prototype.assertBw = function()
{
	oFF.XBooleanUtils.checkTrue(this.getQueryModel().getSystemType().isTypeOf(oFF.SystemType.BW), "This is only supported for BW systems!");
};
oFF.QException.prototype.assertIsChangeable = function()
{
	oFF.XBooleanUtils.checkTrue(this.m_isChangeable, oFF.XStringUtils.concatenate3("The exception '", this.getName(), "' is not changeable!"));
};
oFF.QException.prototype.assertSupportsExceptionsV2 = function()
{
	if (!this.getModelCapabilities().supportsExceptionsV2())
	{
		oFF.noSupport();
	}
};
oFF.QException.prototype.canMaterializeCompleteObject = function()
{
	return this.isChangeable();
};
oFF.QException.prototype.copyFromInternal = function(other, flags)
{
	oFF.QAbstractThresholdEvaluateList.prototype.copyFromInternal.call( this , other, flags);
	let originObj = other;
	let capabilities = this.getModelCapabilities();
	let origMeasure = originObj.getMeasure();
	let origStructureMember = originObj.getStructure();
	let targetMeasure = this.resolveTargetMember(origMeasure);
	let targetStructureMember = this.resolveTargetMember(origStructureMember);
	if (oFF.notNull(targetMeasure))
	{
		this.setMeasure(targetMeasure);
	}
	if (oFF.notNull(targetStructureMember))
	{
		this.setStructure(targetStructureMember);
	}
	if (capabilities.supportsExceptionsV2())
	{
		if (oFF.notNull(origMeasure))
		{
			let origDisplayOnOtherMember1 = originObj.getDisplayOnOtherMember(origMeasure);
			if (oFF.notNull(origDisplayOnOtherMember1))
			{
				let targetDisplayOnOtherMember1 = this.resolveTargetMember(origDisplayOnOtherMember1);
				this.displayOnOtherMember(targetMeasure, targetDisplayOnOtherMember1);
			}
		}
		if (oFF.notNull(origStructureMember))
		{
			let origDisplayOnOtherMember2 = originObj.getDisplayOnOtherMember(origStructureMember);
			if (oFF.notNull(origDisplayOnOtherMember2))
			{
				let targetDisplayOnOtherMember2 = this.resolveTargetMember(origDisplayOnOtherMember2);
				this.displayOnOtherMember(targetStructureMember, targetDisplayOnOtherMember2);
			}
		}
	}
	this.m_evaluateDefault = originObj.m_evaluateDefault;
	this.m_headerSetting = originObj.m_headerSetting;
	this.m_evaluatedBeforePostAggregation = originObj.m_evaluatedBeforePostAggregation;
	this.m_isActive = originObj.m_isActive;
	this.m_isChangeable = originObj.m_isChangeable;
	this.m_evaluateAllMeasureMembers = originObj.m_evaluateAllMeasureMembers;
	this.m_evaluateAllStructureMembers = originObj.m_evaluateAllStructureMembers;
};
oFF.QException.prototype.displayOnOtherMember = function(member, memberToDisplayOn)
{
	this.assertSupportsExceptionsV2();
	this.assertIsChangeable();
	if (oFF.notNull(member))
	{
		let measureMember = this.getMeasure();
		let structureMember = this.getStructure();
		if (measureMember === member)
		{
			this.m_displayOnMeasureMember = oFF.XWeakReferenceUtil.getWeakRef(memberToDisplayOn);
			this.notifyNodeChanged();
		}
		else if (structureMember === member)
		{
			this.m_displayOnStructureMember = oFF.XWeakReferenceUtil.getWeakRef(memberToDisplayOn);
			this.notifyNodeChanged();
		}
	}
};
oFF.QException.prototype.getDisplayOnOtherMember = function(member)
{
	this.assertSupportsExceptionsV2();
	let result = null;
	if (oFF.notNull(member))
	{
		if (this.getMeasure() === member && oFF.notNull(this.m_displayOnMeasureMember))
		{
			result = oFF.XWeakReferenceUtil.getHardRef(this.m_displayOnMeasureMember);
		}
		else if (this.getStructure() === member && oFF.notNull(this.m_displayOnStructureMember))
		{
			result = oFF.XWeakReferenceUtil.getHardRef(this.m_displayOnStructureMember);
		}
	}
	return result;
};
oFF.QException.prototype.getEvaluateDefault = function()
{
	return this.m_evaluateDefault;
};
oFF.QException.prototype.getHeaderSetting = function()
{
	return this.m_headerSetting;
};
oFF.QException.prototype.getMeasure = function()
{
	let m1 = oFF.XWeakReferenceUtil.getHardRef(this.m_measure);
	return m1;
};
oFF.QException.prototype.getStructure = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_structure);
};
oFF.QException.prototype.isActive = function()
{
	return this.m_isActive;
};
oFF.QException.prototype.isChangeable = function()
{
	return this.m_isChangeable;
};
oFF.QException.prototype.isEvaluateAllMembers = function(dimension)
{
	this.assertSupportsExceptionsV2();
	let result = false;
	if (oFF.notNull(dimension))
	{
		if (this.getMeasure() !== null && this.getMeasure().getDimension() === dimension)
		{
			result = this.m_evaluateAllMeasureMembers;
		}
		else if (this.getStructure() !== null && this.getStructure().getDimension() === dimension)
		{
			result = this.m_evaluateAllStructureMembers;
		}
	}
	return result;
};
oFF.QException.prototype.isEvaluatedAfterCalculations = function()
{
	return this.m_evaluatedBeforePostAggregation;
};
oFF.QException.prototype.releaseObject = function()
{
	this.m_evaluateDefault = null;
	this.m_headerSetting = null;
	this.m_measure = oFF.XObjectExt.release(this.m_measure);
	this.m_structure = oFF.XObjectExt.release(this.m_structure);
	this.m_displayOnMeasureMember = oFF.XObjectExt.release(this.m_displayOnMeasureMember);
	this.m_displayOnStructureMember = oFF.XObjectExt.release(this.m_displayOnStructureMember);
	oFF.QAbstractThresholdEvaluateList.prototype.releaseObject.call( this );
};
oFF.QException.prototype.resolveTargetMember = function(sourceMember)
{
	let myStructureMemberTarget3 = null;
	if (oFF.notNull(sourceMember))
	{
		let myDimensionTarget3 = this.getQueryModel().getDimensionByNameFromExistingMetadata(sourceMember.getDimension().getName());
		myStructureMemberTarget3 = myDimensionTarget3.getStructureMember(sourceMember.getName());
	}
	return myStructureMemberTarget3;
};
oFF.QException.prototype.setActive = function(active)
{
	let oldValue = this.m_isActive;
	this.m_isActive = active;
	this.notifyPropertyBooleanChanged(oFF.QExceptionProperties.QY_ACTIVE, oldValue, active);
};
oFF.QException.prototype.setEvaluateAllMembers = function(dimension, evaluateAllMembers)
{
	this.assertSupportsExceptionsV2();
	this.assertIsChangeable();
	oFF.XObjectExt.assertNotNullExt(dimension, "The dimension is null.");
	if (this.getMeasure() !== null && this.getMeasure().getDimension() === dimension)
	{
		let oldValue1 = this.m_evaluateAllMeasureMembers;
		this.m_evaluateAllMeasureMembers = evaluateAllMembers;
		this.notifyPropertyBooleanChanged(oFF.QExceptionProperties.QY_EVALUATE_ALL_MEMBERS_MEASURE_DIMENSION, oldValue1, evaluateAllMembers);
	}
	else if (this.getStructure() !== null && this.getStructure().getDimension() === dimension)
	{
		let oldValue2 = this.m_evaluateAllStructureMembers;
		this.m_evaluateAllStructureMembers = evaluateAllMembers;
		this.notifyPropertyBooleanChanged(oFF.QExceptionProperties.QY_EVALUATE_ALL_MEMBERS_SECONDARY_STRUCTURE, oldValue2, evaluateAllMembers);
	}
};
oFF.QException.prototype.setEvaluateDefault = function(evaluateDefault)
{
	this.assertIsChangeable();
	this.m_evaluateDefault = evaluateDefault;
	this.notifyNodeChanged();
};
oFF.QException.prototype.setEvaluationAfterCalculations = function(afterCalculations)
{
	this.assertIsChangeable();
	let oldValue = this.m_evaluatedBeforePostAggregation;
	this.m_evaluatedBeforePostAggregation = afterCalculations;
	this.notifyPropertyBooleanChanged(oFF.QExceptionProperties.QY_EVALUATE_BEFORE_POST_AGGREGATION, oldValue, afterCalculations);
};
oFF.QException.prototype.setHeaderSetting = function(headerSetting)
{
	if (this.m_headerSetting !== headerSetting)
	{
		this.assertIsChangeable();
		this.assertBw();
		this.m_headerSetting = headerSetting;
		this.notifyNodeChanged();
	}
};
oFF.QException.prototype.setHeaderSettingBase = function(headerSetting)
{
	this.m_headerSetting = headerSetting;
};
oFF.QException.prototype.setIsChangeable = function(isChangeable)
{
	let oldValue = this.m_isChangeable;
	this.m_isChangeable = isChangeable;
	this.notifyPropertyBooleanChanged(oFF.QExceptionProperties.QY_CHANGEABLE, oldValue, isChangeable);
};
oFF.QException.prototype.setMeasure = function(measure)
{
	if (measure.getModelCapabilities().supportsExceptionsV2() && measure.getDimension().getDimensionType() === oFF.DimensionType.SECONDARY_STRUCTURE)
	{
		this.setStructure(measure);
	}
	else
	{
		this.assertIsChangeable();
		oFF.XObjectExt.assertNotNullExt(measure, "The measure member is null.");
		if (oFF.isNull(this.m_measure) || !oFF.XString.isEqual(this.getMeasure().getName(), measure.getName()))
		{
			let exceptions = measure.getExceptions();
			if (oFF.notNull(exceptions))
			{
				if (oFF.XCollectionUtils.getByName(exceptions, this.getName()) !== null)
				{
					throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate3("The exception name '", this.getName(), "' is not unique!"));
				}
			}
			this.m_measure = oFF.XWeakReferenceUtil.getWeakRef(measure);
			measure.notifyNodeChanged();
			this.notifyNodeChanged();
		}
	}
};
oFF.QException.prototype.setStructure = function(structure)
{
	if (structure.getDimension().getDimensionType() !== oFF.DimensionType.SECONDARY_STRUCTURE)
	{
		this.setMeasure(structure);
	}
	else
	{
		this.assertSupportsExceptionsV2();
		this.assertIsChangeable();
		oFF.XObjectExt.assertNotNullExt(structure, "The structure member is null.");
		this.m_structure = oFF.XWeakReferenceUtil.getWeakRef(structure);
		structure.notifyNodeChanged();
		this.notifyNodeChanged();
	}
};
oFF.QException.prototype.setupException = function(context, model, name, text)
{
	this.setupThresholdEvaluateList(context);
	this.setupModelComponentWithName(context, model, name);
	this.setText(text);
	this.m_isChangeable = true;
	this.m_evaluateDefault = oFF.QExceptionEvalType.ALL;
	this.m_headerSetting = oFF.QExceptionHeaderSettings.NONE;
	this.m_evaluatedBeforePostAggregation = false;
	this.m_isActive = true;
	this.m_evaluateAllMeasureMembers = false;
	this.m_evaluateAllStructureMembers = false;
};

oFF.QFormulaException = function() {};
oFF.QFormulaException.prototype = new oFF.QAbstractThresholdEvaluateList();
oFF.QFormulaException.prototype._ff_c = "QFormulaException";

oFF.QFormulaException.createFormulaException = function(context, model, name, text)
{
	let exception = new oFF.QFormulaException();
	exception.setupFormulaException(context, model, name, text);
	return exception;
};
oFF.QFormulaException.prototype.m_baseMeasure = null;
oFF.QFormulaException.prototype.m_baseMeasureName = null;
oFF.QFormulaException.prototype.m_evaluateDefault = null;
oFF.QFormulaException.prototype.m_formulaType = null;
oFF.QFormulaException.prototype.m_isActive = false;
oFF.QFormulaException.prototype.m_isAutoSignFlip = false;
oFF.QFormulaException.prototype.m_isHandleExcludedFilters = false;
oFF.QFormulaException.prototype.m_isHandleNullAsZero = false;
oFF.QFormulaException.prototype.m_isPrimaryMeasure = false;
oFF.QFormulaException.prototype.m_isRatioVarianceCalculated = false;
oFF.QFormulaException.prototype.m_measure = null;
oFF.QFormulaException.prototype.m_referenceMeasure = null;
oFF.QFormulaException.prototype.m_referenceMeasureName = null;
oFF.QFormulaException.prototype.m_structure = null;
oFF.QFormulaException.prototype.addFormulaMeasureLinkedMemberFilter = function(linkedFilters, dimension)
{
	let keyIterator = linkedFilters.getKeysAsIterator();
	while (keyIterator.hasNext())
	{
		let key = keyIterator.next();
		let linkedFilter = linkedFilters.getByKey(key);
		let list = linkedFilter.getCartesianList(dimension);
		if (oFF.notNull(list))
		{
			linkedFilter.addSingleMemberFilterByDimension(dimension, this.getName(), oFF.ComparisonOperator.EQUAL);
			return true;
		}
	}
	return false;
};
oFF.QFormulaException.prototype.addNewThresholdWithName = function(name, lowValue, alertLevel)
{
	let threshold = this.newThresholdWithName(name, lowValue, alertLevel);
	this.addThreshold(threshold);
	return threshold;
};
oFF.QFormulaException.prototype.addOrRemoveAsSecondaryParent = function(memberName, isAdd)
{
	let queryModel = this.getQueryModel();
	let olapEnv = this.getOlapEnv();
	if (oFF.notNull(queryModel) && oFF.notNull(olapEnv))
	{
		let member = olapEnv.getClientQueryObjectManager().getStructuredMember(memberName, queryModel.getQueryManager().getClientQueryObjectStorageName(), this.m_isPrimaryMeasure);
		if (oFF.notNull(member))
		{
			if (isAdd)
			{
				member.addSecondaryParent(this);
			}
			else
			{
				member.removeSecondaryParent(this);
			}
		}
	}
};
oFF.QFormulaException.prototype.addThresholdFilterToMeasureDimension = function(queryModel)
{
	if (this.m_isHandleExcludedFilters)
	{
		this.addThresholdFilterToMeasureDimensionWithExcludedFilters(queryModel);
	}
	else
	{
		let dimension = this.getCalculationDimension(queryModel);
		let linkedFilters = queryModel.getFilter().getLinkedFilters();
		let addedToLinkedFilters = this.addFormulaMeasureLinkedMemberFilter(linkedFilters, dimension);
		if (!addedToLinkedFilters)
		{
			let dynamicFilter = queryModel.getFilter().getDynamicFilter();
			dynamicFilter.addSingleMemberFilterByDimension(dimension, this.getName(), oFF.ComparisonOperator.EQUAL);
		}
	}
};
oFF.QFormulaException.prototype.addThresholdFilterToMeasureDimensionWithExcludedFilters = function(queryModel)
{
	let dimension = this.getCalculationDimension(queryModel);
	let linkedFilters = queryModel.getFilter().getLinkedFilters();
	let addedToLinkedFilters = this.addFormulaMeasureLinkedMemberFilter(linkedFilters, dimension);
	let dynamicFilter = queryModel.getFilter().getDynamicFilter();
	let dynamicFilters = dynamicFilter.getCartesianList(this.getCalculationDimension(queryModel));
	let hasExcludingFilters = this.hasExcludingFilters(dynamicFilters);
	if (!addedToLinkedFilters && oFF.notNull(dynamicFilters) && dynamicFilters.size() > 0 && !hasExcludingFilters)
	{
		dynamicFilter.addSingleMemberFilterByDimension(dimension, this.getName(), oFF.ComparisonOperator.EQUAL);
	}
	else if (hasExcludingFilters)
	{
		let filter = dynamicFilter.addSingleMemberFilterByDimension(dimension, this.getName(), oFF.ComparisonOperator.EQUAL);
		filter.setSetSign(oFF.SetSign.EXCLUDING);
	}
};
oFF.QFormulaException.prototype.addVisibilityFilter = function(queryModel, dimension)
{
	let linkedFilters = queryModel.getFilter().getLinkedVisibilityFilters();
	let addedToLinkedFilters = this.addFormulaMeasureLinkedMemberFilter(linkedFilters, dimension);
	if (!addedToLinkedFilters)
	{
		let visibilityFilter = queryModel.getFilter().getVisibilityFilter();
		let visibilityFilterList = visibilityFilter.getCartesianList(dimension);
		if (oFF.notNull(visibilityFilterList) && visibilityFilterList.size() > 0)
		{
			let filter = visibilityFilter.addSingleMemberFilterByDimension(dimension, this.getName(), oFF.ComparisonOperator.EQUAL);
			filter.setDepth(0);
		}
	}
};
oFF.QFormulaException.prototype.assertIsChangeable = function() {};
oFF.QFormulaException.prototype.copyFromInternal = function(other, flags)
{
	oFF.QAbstractThresholdEvaluateList.prototype.copyFromInternal.call( this , other, flags);
	let originObj = other;
	if (originObj.getMeasure() !== null)
	{
		this.setMeasure(originObj.getMeasure());
	}
	if (originObj.getBaseMeasure() !== null)
	{
		this.setBaseMeasure(originObj.getBaseMeasure());
	}
	this.m_baseMeasureName = originObj.m_baseMeasureName;
	if (originObj.getReferenceMeasure() !== null)
	{
		this.setReferenceMeasure(originObj.getReferenceMeasure());
	}
	this.m_referenceMeasureName = originObj.m_referenceMeasureName;
	if (originObj.getStructure() !== null && originObj.getStructure().isPresent())
	{
		this.setStructure(originObj.getStructure().get());
	}
	this.m_formulaType = originObj.m_formulaType;
	this.m_isHandleNullAsZero = originObj.m_isHandleNullAsZero;
	this.m_isAutoSignFlip = originObj.m_isAutoSignFlip;
	this.m_isPrimaryMeasure = originObj.m_isPrimaryMeasure;
	this.m_isActive = originObj.m_isActive;
	this.m_evaluateDefault = originObj.m_evaluateDefault;
	this.m_isHandleExcludedFilters = originObj.m_isHandleExcludedFilters;
	this.m_isRatioVarianceCalculated = originObj.m_isRatioVarianceCalculated;
};
oFF.QFormulaException.prototype.destroyTransientLinkedFilters = function(dimension, linkedFilters)
{
	let filterKeyIterator = linkedFilters.getKeysAsIterator();
	while (filterKeyIterator.hasNext())
	{
		let filterKey = filterKeyIterator.next();
		let filter = linkedFilters.getByKey(filterKey);
		let list = filter.getCartesianList(dimension);
		if (oFF.notNull(list))
		{
			filter.removeSingleMemberFilterByDimension(dimension, this.getName(), oFF.ComparisonOperator.EQUAL);
		}
	}
};
oFF.QFormulaException.prototype.destroyTransientMeasure = function(context, measureName)
{
	let queryModel = context.getQueryModel();
	let dimension = this.getCalculationDimension(queryModel);
	if (oFF.notNull(dimension) && oFF.notNull(measureName))
	{
		let structureMember = dimension.getStructureMemberByAliasOrMember(measureName);
		if (oFF.notNull(structureMember))
		{
			let tagging = structureMember.getTagging();
			if (tagging.containsKey(oFF.QTransientConstants.TAG_SERIALIZE_MEMBER))
			{
				tagging.remove(oFF.QTransientConstants.TAG_SERIALIZE_MEMBER);
			}
			if (tagging.containsKey(oFF.QTransientConstants.TAG_RESULT_IS_HIDDEN))
			{
				tagging.remove(oFF.QTransientConstants.TAG_RESULT_IS_HIDDEN);
				structureMember.setResultVisibility(oFF.ResultVisibility.HIDDEN);
			}
			if (dimension.getTagging().containsKey(oFF.QTransientConstants.createIsTransientMemberTag(structureMember.getAliasOrMemberName())))
			{
				dimension.getTagging().remove(oFF.QTransientConstants.createIsTransientMemberTag(structureMember.getAliasOrMemberName()));
				structureMember.destroyTransientObjects(context);
				dimension.removeMeasure(structureMember.getName());
				if (tagging.containsKey(oFF.QTransientConstants.TAG_IS_TRANSIENT_MEMBER_COPY))
				{
					tagging.remove(oFF.QTransientConstants.TAG_IS_TRANSIENT_MEMBER_COPY);
				}
			}
		}
	}
};
oFF.QFormulaException.prototype.destroyTransientObjects = function(context)
{
	let queryModel = context.getQueryModel();
	let dimension = this.getCalculationDimension(queryModel);
	if (oFF.notNull(dimension))
	{
		let transientMeasure = dimension.getStructureMemberByAliasOrMember(this.getName());
		if (oFF.notNull(transientMeasure) && dimension.getTagging().containsKey(oFF.QTransientConstants.createIsTransientMemberTag(transientMeasure.getAliasOrMemberName())))
		{
			let dynamicFilter = queryModel.getFilter().getDynamicFilter();
			dynamicFilter.removeSingleMemberFilterByDimension(dimension, this.getName(), oFF.ComparisonOperator.EQUAL);
			let linkedFilters = queryModel.getFilter().getLinkedFilters();
			this.destroyTransientLinkedFilters(dimension, linkedFilters);
			let visibilityFilter = queryModel.getFilter().getVisibilityFilter();
			visibilityFilter.removeSingleMemberFilterByDimension(dimension, this.getName(), oFF.ComparisonOperator.EQUAL);
			let linkedVisFilters = queryModel.getFilter().getLinkedVisibilityFilters();
			this.destroyTransientLinkedFilters(dimension, linkedVisFilters);
			dimension.removeMeasure(transientMeasure.getName());
			dimension.getOverdefinedMemberManager().removeOverdefinedMember(this.getName());
		}
	}
	let baseMeasureName = this.getBaseMeasureNameInternal();
	this.destroyTransientMeasure(context, baseMeasureName);
	let referenceMeasureName = this.getReferenceMeasureNameInternal();
	this.destroyTransientMeasure(context, referenceMeasureName);
	let exceptionManager = queryModel.getExceptionManager();
	for (let i = 0; i < this.m_thresholds.size(); i++)
	{
		let threshold = this.m_thresholds.get(i);
		let thresholdException = exceptionManager.getByKey(threshold.getName());
		if (oFF.notNull(thresholdException))
		{
			exceptionManager.removeElement(thresholdException);
		}
	}
};
oFF.QFormulaException.prototype.generateTransientMeasure = function(context, messageManager, measureName, needsOverdefined)
{
	let queryModel = context.getQueryModel();
	let dimension = this.getCalculationDimension(queryModel);
	let measureValid = true;
	if (oFF.notNull(measureName))
	{
		let member = dimension.getStructureMemberByAliasOrMember(measureName);
		if (oFF.isNull(member))
		{
			let clientQueryObjectManager = queryModel.getOlapEnv().getClientQueryObjectManager();
			let measure = clientQueryObjectManager.getStructuredMember(measureName, this.getStorageName(), this.m_isPrimaryMeasure);
			if (oFF.notNull(measure))
			{
				dimension.getTagging().put(oFF.QTransientConstants.createIsTransientMemberTag(measure.getAliasOrMemberName()), "");
				dimension.addMeasure(measure);
			}
			else if (this.getSession().hasFeature(oFF.FeatureToggleOlap.MULTIPLE_ACCOUNT_HIERARCHIES) && dimension.getDimensionType() === oFF.DimensionType.ACCOUNT)
			{
				let index = oFF.XString.indexOf(measureName, "].&[");
				if (index >= 0 && oFF.XString.endsWith(measureName, "]"))
				{
					let noPrefixMemberName = oFF.XString.substring(measureName, index + 4, oFF.XString.lastIndexOf(measureName, "]"));
					let uniqueNamePrefix = oFF.XStringUtils.concatenate5("[", dimension.getName(), "].[", dimension.getDefaultHierarchyName(), "].&[");
					let altMemberName = oFF.XStringUtils.concatenate3(uniqueNamePrefix, noPrefixMemberName, "]");
					member = dimension.getStructureMemberByAliasOrMember(altMemberName);
					if (oFF.notNull(member))
					{
						let isOverdefined = needsOverdefined && member.isModelDefinedMember();
						let copyMeasure = oFF.QStructureMember.createMeasure(member.getMemberType(), context, dimension);
						oFF.QStructureMember.copyMeasure(copyMeasure, member);
						copyMeasure.setName(measureName);
						copyMeasure.getTagging().put(oFF.QTransientConstants.TAG_IS_TRANSIENT_MEMBER_COPY, "");
						dimension.getTagging().put(oFF.QTransientConstants.createIsTransientMemberTag(copyMeasure.getAliasOrMemberName()), "");
						dimension.addMeasure(copyMeasure);
						if (isOverdefined)
						{
							copyMeasure.getTagging().put(oFF.QTransientConstants.TAG_SERIALIZE_MEMBER, "");
							if (copyMeasure.getResultVisibility() === oFF.ResultVisibility.HIDDEN)
							{
								copyMeasure.getTagging().put(oFF.QTransientConstants.TAG_RESULT_IS_HIDDEN, "");
								copyMeasure.setResultVisibility(oFF.ResultVisibility.VISIBLE);
							}
						}
						copyMeasure.generateTransientObjects(context, messageManager);
					}
					else
					{
						measureValid = false;
					}
				}
			}
			else
			{
				measureValid = false;
			}
		}
		else if (member.isModelDefinedMember())
		{
			if (needsOverdefined)
			{
				member.getTagging().put(oFF.QTransientConstants.TAG_SERIALIZE_MEMBER, "");
				if (member.getResultVisibility() === oFF.ResultVisibility.HIDDEN)
				{
					member.getTagging().put(oFF.QTransientConstants.TAG_RESULT_IS_HIDDEN, "");
					member.setResultVisibility(oFF.ResultVisibility.VISIBLE);
				}
			}
		}
		else
		{
			measureValid = member.validate(context, messageManager, true, true);
		}
	}
	return measureValid;
};
oFF.QFormulaException.prototype.generateTransientObjects = function(context, messageManager)
{
	let queryModel = context.getQueryModel();
	let dimension = this.getCalculationDimension(queryModel);
	let baseMeasureName = this.getBaseMeasureNameInternal();
	let exceptionValid = this.generateTransientMeasure(context, messageManager, baseMeasureName, true);
	let referenceMeasureName = this.getReferenceMeasureNameInternal();
	exceptionValid = exceptionValid && this.generateTransientMeasure(context, messageManager, referenceMeasureName, false);
	if (this.getFormulaExceptionType() === oFF.FormulaExceptionType.POSITIVE_RATIO_NEGATIVE_VARIANCE)
	{
		exceptionValid = exceptionValid && oFF.notNull(referenceMeasureName);
	}
	if (exceptionValid)
	{
		let formulaMeasure = dimension.getStructureMemberByAliasOrMember(this.getName());
		if (oFF.isNull(formulaMeasure))
		{
			formulaMeasure = this.getFormulaMeasureInternal(context);
			if (oFF.notNull(formulaMeasure))
			{
				dimension.getTagging().put(oFF.QTransientConstants.createIsTransientMemberTag(formulaMeasure.getAliasOrMemberName()), "");
				dimension.getOverdefinedMemberManager().setVisibilityOverride(this.getName(), formulaMeasure.getResultVisibility());
				formulaMeasure.generateTransientObjects(context, messageManager);
				dimension.addMeasure(formulaMeasure);
			}
		}
		let exceptionManager = queryModel.getExceptionManager();
		let exception = exceptionManager.newException(this.getName(), this.getText());
		exception.setEvaluateDefault(this.m_evaluateDefault);
		let displayMeasure = this.getMeasure();
		if (oFF.isNull(displayMeasure))
		{
			displayMeasure = this.getBaseMeasureInternal(context);
		}
		let formulaExceptionManager = queryModel.getFormulaExceptionManager();
		let capabilities = this.getModelCapabilities();
		if (capabilities.supportsExceptionsV2())
		{
			if (oFF.notNull(formulaMeasure) && oFF.notNull(displayMeasure))
			{
				exception.setMeasure(formulaMeasure);
				exception.displayOnOtherMember(formulaMeasure, displayMeasure);
				if (formulaExceptionManager.isFormulaResultVisible())
				{
					this.addThresholdFilterToMeasureDimension(queryModel);
					this.addVisibilityFilter(queryModel, dimension);
				}
			}
			else if (oFF.notNull(displayMeasure))
			{
				exception.setMeasure(displayMeasure);
			}
			else
			{
				messageManager.addError(oFF.ErrorCodes.FORMULA_EXCEPTION_INVALID_DISPLAY_MEASURE, oFF.ErrorMessages.FORMULA_EXCEPTION_INVALID_DISPLAY_MEASURE);
				this.destroyTransientObjects(context);
				return;
			}
			if (oFF.notNull(this.m_structure))
			{
				exception.setStructure(this.m_structure.getReference());
			}
		}
		else
		{
			if (queryModel.getAccountDimension() !== null && oFF.isNull(displayMeasure))
			{
				displayMeasure = queryModel.getMeasureDimension().getStructureMember("SignedData");
			}
			if (oFF.notNull(displayMeasure))
			{
				exception.setMeasure(displayMeasure);
				if (oFF.notNull(formulaMeasure) && !queryModel.isBlendingModel())
				{
					this.addThresholdFilterToMeasureDimension(queryModel);
					if (formulaExceptionManager.isFormulaResultVisible())
					{
						this.addVisibilityFilter(queryModel, dimension);
					}
				}
			}
			else
			{
				messageManager.addError(oFF.ErrorCodes.FORMULA_EXCEPTION_INVALID_DISPLAY_MEASURE, oFF.ErrorMessages.FORMULA_EXCEPTION_INVALID_DISPLAY_MEASURE);
				this.destroyTransientObjects(context);
				return;
			}
		}
		if (oFF.isNull(formulaMeasure))
		{
			if (oFF.notNull(baseMeasureName))
			{
				exception.addNewEvaluate(dimension, oFF.XStringValue.create(baseMeasureName));
			}
		}
		else
		{
			exception.addNewEvaluate(dimension, oFF.XStringValue.create(formulaMeasure.getAliasOrMemberName()));
		}
		for (let j = 0; j < this.m_evaluates.size(); j++)
		{
			let evaluate = this.m_evaluates.get(j);
			let newEvaluate = oFF.QEvaluate.createEvaluateWithField(evaluate.getField(), evaluate.getLowValue().getValue(), exception);
			newEvaluate.copyEvaluate(evaluate);
			exception.addEvaluate(newEvaluate);
		}
		for (let i = 0; i < this.m_thresholds.size(); i++)
		{
			let threshold = this.m_thresholds.get(i);
			let thresholdException = exceptionManager.newException(threshold.getName(), this.getText());
			thresholdException.copyFrom(exception, null);
			thresholdException.setName(threshold.getName());
			let newThreshold = oFF.QThreshold.createThreshold(context, threshold.getLowValue(), threshold.getAlertLevel(), thresholdException);
			newThreshold.copyThreshold(threshold);
			if (this.isRatioVarianceCalculated() && this.getFormulaExceptionType() === oFF.FormulaExceptionType.POSITIVE_RATIO_NEGATIVE_VARIANCE)
			{
				if (newThreshold.getLowXValue() !== null)
				{
					newThreshold.setLowValue(newThreshold.getLowValue() / 100);
				}
				if (newThreshold.getHighXValue() !== null)
				{
					newThreshold.setHighValue(newThreshold.getHighValue() / 100);
				}
			}
			thresholdException.addThreshold(newThreshold);
			let byKey = exceptionManager.getByKey(thresholdException.getName());
			if (oFF.notNull(byKey))
			{
				let exists = byKey.getMeasure() === thresholdException.getMeasure() && byKey.getStructure() === thresholdException.getStructure();
				if (exists)
				{
					exceptionManager.removeElement(byKey);
				}
			}
			exceptionManager.add(thresholdException);
		}
	}
};
oFF.QFormulaException.prototype.getBaseMeasure = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_baseMeasure);
};
oFF.QFormulaException.prototype.getBaseMeasureInternal = function(context)
{
	return this.getMeasureInternal(context, this.m_baseMeasure, this.m_baseMeasureName);
};
oFF.QFormulaException.prototype.getBaseMeasureName = function()
{
	return this.m_baseMeasureName;
};
oFF.QFormulaException.prototype.getBaseMeasureNameInternal = function()
{
	let baseMeasureName = this.m_baseMeasureName;
	if (oFF.isNull(baseMeasureName) && oFF.notNull(this.m_baseMeasure))
	{
		baseMeasureName = this.getBaseMeasure().getAliasOrMemberName();
	}
	return baseMeasureName;
};
oFF.QFormulaException.prototype.getBaseMember = function(context)
{
	let member = oFF.QFactory.createFormulaMember(context);
	let baseMeasure = this.getBaseMeasureInternal(context);
	if (oFF.isNull(baseMeasure))
	{
		baseMeasure = this.getMeasureStructureMember(context.getQueryModel(), this.m_baseMeasureName);
	}
	member.setMember(baseMeasure);
	return member;
};
oFF.QFormulaException.prototype.getCalculationDimension = function(queryModel)
{
	let dimension;
	if (this.m_isPrimaryMeasure)
	{
		dimension = queryModel.getPrimaryCalculationDimension();
	}
	else
	{
		dimension = queryModel.getSecondaryCalculationDimension();
	}
	return dimension;
};
oFF.QFormulaException.prototype.getEvaluateDefault = function()
{
	return this.m_evaluateDefault;
};
oFF.QFormulaException.prototype.getFormulaExceptionType = function()
{
	return this.m_formulaType;
};
oFF.QFormulaException.prototype.getFormulaMeasure = function(context)
{
	let formulaMeasure = this.getFormulaMeasureInternal(context);
	if (oFF.notNull(formulaMeasure))
	{
		formulaMeasure.setResultVisibility(oFF.ResultVisibility.VISIBLE);
	}
	return formulaMeasure;
};
oFF.QFormulaException.prototype.getFormulaMeasureInternal = function(context)
{
	if (this.m_formulaType === oFF.FormulaExceptionType.POSITIVE_RATIO_NEGATIVE_VARIANCE)
	{
		return this.getPositiveRatioNegativeVarianceFormula(context);
	}
	else if (this.m_formulaType === oFF.FormulaExceptionType.BASE_MEASURE_ONLY)
	{
		return null;
	}
	return null;
};
oFF.QFormulaException.prototype.getMeasure = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_measure);
};
oFF.QFormulaException.prototype.getMeasureFormulaItem = function(context, member)
{
	if (this.m_isHandleNullAsZero)
	{
		if (this.getModelCapabilities().supportsVarianceOperator())
		{
			let nDivPercentageFunction = oFF.QFactory.createFormulaFunctionWithName(context, oFF.FormulaOperator.NDIV0.getName());
			nDivPercentageFunction.add(member);
			return nDivPercentageFunction;
		}
		let ifNull = oFF.QFactory.createFormulaFunctionWithName(context, oFF.FormulaOperator.IF.getName());
		let isNull = oFF.QFactory.createFormulaFunctionWithName(context, oFF.FormulaOperator.ISNULL.getName());
		isNull.add(member);
		ifNull.add(isNull);
		ifNull.add(oFF.QFactory.createFormulaConstantWithIntValue(context, 0));
		ifNull.add(member);
		return ifNull;
	}
	return member;
};
oFF.QFormulaException.prototype.getMeasureInternal = function(context, measureRef, measureName)
{
	if (oFF.notNull(measureRef))
	{
		return oFF.XWeakReferenceUtil.getHardRef(measureRef);
	}
	if (oFF.notNull(measureName))
	{
		let queryModel = context.getQueryModel();
		let dimension = this.getCalculationDimension(queryModel);
		let measure = dimension.getStructureMemberByAliasOrMember(measureName);
		return measure;
	}
	return null;
};
oFF.QFormulaException.prototype.getMeasureStructureMember = function(queryModel, measureName)
{
	let structureMember = null;
	if (oFF.notNull(measureName))
	{
		let dimension = this.getCalculationDimension(queryModel);
		structureMember = dimension.getStructureMemberByAliasOrMember(measureName);
		if (oFF.isNull(structureMember))
		{
			structureMember = this.getOlapEnv().getClientQueryObjectManager().getStructuredMember(measureName, queryModel.getQueryManager().getClientQueryObjectStorageName(), this.m_isPrimaryMeasure);
		}
		if (oFF.isNull(structureMember))
		{
			let hierarchyAndMemberName = oFF.QDimensionMemberNameUtil.parseHierarchyAndFlatMemberName(measureName);
			structureMember = dimension.getStructureMemberByAliasOrMember(hierarchyAndMemberName.getSecondString());
		}
	}
	return structureMember;
};
oFF.QFormulaException.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.FORMULA_EXCEPTION;
};
oFF.QFormulaException.prototype.getPositiveRatioNegativeVarianceFormula = function(context)
{
	let baseMeasure = this.getMeasureFormulaItem(context, this.getBaseMember(context));
	let referenceMeasure = this.getMeasureFormulaItem(context, this.getReferenceMember(context));
	let transientMeasureName = this.getName();
	let queryModel = context.getQueryModel();
	let dimension = this.getCalculationDimension(queryModel);
	let formulaMeasure = oFF.QFactory.createFormulaMeasure(context, dimension, null, transientMeasureName, null);
	formulaMeasure.setAutoSignFlip(this.m_isAutoSignFlip);
	formulaMeasure.setNumericScale(7);
	formulaMeasure.setNumericPrecision(31);
	if (dimension.getPlaceholderIds().size() > 0)
	{
		formulaMeasure.setAliasName(transientMeasureName);
	}
	else
	{
		formulaMeasure.setName(transientMeasureName);
	}
	let formulaExceptionManager = queryModel.getFormulaExceptionManager();
	if (formulaExceptionManager.isFormulaResultVisible())
	{
		formulaMeasure.setResultVisibility(oFF.ResultVisibility.VISIBLE);
	}
	else
	{
		formulaMeasure.setResultVisibility(oFF.ResultVisibility.HIDDEN);
	}
	let ifNull = oFF.QFactory.createFormulaFunctionWithName(context, oFF.FormulaOperator.IF.getName());
	let isNull = oFF.QFactory.createFormulaFunctionWithName(context, oFF.FormulaOperator.ISNULL.getName());
	ifNull.add(isNull);
	isNull.add(baseMeasure);
	ifNull.add(baseMeasure);
	let ifReferenceZero = oFF.QFactory.createFormulaFunctionWithName(context, oFF.FormulaOperator.IF.getName());
	let referenceIsZero = oFF.QFactory.createFormulaFunctionWithName(context, oFF.FormulaOperator.EQ.getName());
	ifNull.add(ifReferenceZero);
	ifReferenceZero.add(referenceIsZero);
	referenceIsZero.add(referenceMeasure);
	referenceIsZero.add(oFF.QFactory.createFormulaConstantWithIntValue(context, 0));
	let ifBaseZero = oFF.QFactory.createFormulaFunctionWithName(context, oFF.FormulaOperator.IF.getName());
	let baseIsZero = oFF.QFactory.createFormulaFunctionWithName(context, oFF.FormulaOperator.EQ.getName());
	ifReferenceZero.add(ifBaseZero);
	ifBaseZero.add(baseIsZero);
	baseIsZero.add(baseMeasure);
	baseIsZero.add(oFF.QFactory.createFormulaConstantWithIntValue(context, 0));
	let nullConstant = oFF.QFactory.createFormulaConstant(context);
	nullConstant.setNullByType(oFF.XValueType.INTEGER);
	ifBaseZero.add(nullConstant);
	let baseOverAbsBase = oFF.QFactory.createFormulaOperation(context);
	let absBase = oFF.QFactory.createFormulaFunctionWithName(context, oFF.FormulaOperator.ABS.getName());
	ifBaseZero.add(baseOverAbsBase);
	baseOverAbsBase.setOperator(oFF.MathOperator.DIV);
	baseOverAbsBase.setLeftSide(baseMeasure);
	absBase.add(baseMeasure);
	baseOverAbsBase.setRightSide(absBase);
	let ifMeasuresAreNegative = oFF.QFactory.createFormulaFunctionWithName(context, oFF.FormulaOperator.IF.getName());
	let baseOrMeasure = oFF.QFactory.createFormulaFunctionWithName(context, oFF.FormulaOperator.OR.getName());
	let baseLessThan = oFF.QFactory.createFormulaOperation(context);
	let referenceLessThan = oFF.QFactory.createFormulaOperation(context);
	ifReferenceZero.add(ifMeasuresAreNegative);
	ifMeasuresAreNegative.add(baseOrMeasure);
	baseOrMeasure.add(baseLessThan);
	baseLessThan.setOperator(oFF.ComparisonOperator.LESS_THAN);
	baseLessThan.setLeftSide(baseMeasure);
	baseLessThan.setRightSide(oFF.QFactory.createFormulaConstantWithIntValue(context, 0));
	baseOrMeasure.add(referenceLessThan);
	referenceLessThan.setOperator(oFF.ComparisonOperator.LESS_THAN);
	referenceLessThan.setLeftSide(referenceMeasure);
	referenceLessThan.setRightSide(oFF.QFactory.createFormulaConstantWithIntValue(context, 0));
	let varianceCalc = oFF.QFactory.createFormulaOperation(context);
	let baseMinusReference = oFF.QFactory.createFormulaOperation(context);
	let absReference = oFF.QFactory.createFormulaFunctionWithName(context, oFF.FormulaOperator.ABS.getName());
	ifMeasuresAreNegative.add(varianceCalc);
	varianceCalc.setOperator(oFF.MathOperator.DIV);
	varianceCalc.setLeftSide(baseMinusReference);
	baseMinusReference.setOperator(oFF.MathOperator.MINUS);
	baseMinusReference.setLeftSide(baseMeasure);
	baseMinusReference.setRightSide(referenceMeasure);
	varianceCalc.setRightSide(absReference);
	absReference.add(referenceMeasure);
	let ratioCalc = oFF.QFactory.createFormulaOperation(context);
	ifMeasuresAreNegative.add(ratioCalc);
	ratioCalc.setOperator(oFF.MathOperator.DIV);
	ratioCalc.setLeftSide(baseMeasure);
	ratioCalc.setRightSide(referenceMeasure);
	if (context.getQueryModel().getSystemType().isTypeOf(oFF.SystemType.BW))
	{
		formulaMeasure.setFormula(ifReferenceZero);
	}
	else
	{
		formulaMeasure.setFormula(ifNull);
	}
	return formulaMeasure;
};
oFF.QFormulaException.prototype.getReferenceMeasure = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_referenceMeasure);
};
oFF.QFormulaException.prototype.getReferenceMeasureInternal = function(context)
{
	return this.getMeasureInternal(context, this.m_referenceMeasure, this.m_referenceMeasureName);
};
oFF.QFormulaException.prototype.getReferenceMeasureName = function()
{
	return this.m_referenceMeasureName;
};
oFF.QFormulaException.prototype.getReferenceMeasureNameInternal = function()
{
	let referenceMeasureName = this.m_referenceMeasureName;
	if (oFF.isNull(referenceMeasureName) && oFF.notNull(this.m_referenceMeasure))
	{
		referenceMeasureName = this.getReferenceMeasure().getAliasOrMemberName();
	}
	return referenceMeasureName;
};
oFF.QFormulaException.prototype.getReferenceMember = function(context)
{
	let member = oFF.QFactory.createFormulaMember(context);
	let refMeasure = this.getReferenceMeasureInternal(context);
	if (oFF.isNull(refMeasure))
	{
		refMeasure = this.getMeasureStructureMember(context.getQueryModel(), this.m_referenceMeasureName);
	}
	member.setMember(refMeasure);
	return member;
};
oFF.QFormulaException.prototype.getStructure = function()
{
	if (oFF.notNull(this.m_structure))
	{
		return oFF.XOptional.of(this.m_structure.getReference());
	}
	return oFF.XOptional.empty();
};
oFF.QFormulaException.prototype.hasExcludingFilters = function(filters)
{
	if (oFF.notNull(filters))
	{
		for (let i = 0; i < filters.size(); i++)
		{
			if (filters.getCartesianElement(i) !== null && filters.getCartesianElement(i).getSetSign().isEqualTo(oFF.SetSign.EXCLUDING))
			{
				return true;
			}
		}
	}
	return false;
};
oFF.QFormulaException.prototype.insertThreshold = function(index, threshold)
{
	let byKey = this.m_thresholds.getByKey(threshold.getName());
	if (oFF.notNull(byKey))
	{
		throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate3("The threshold name '", threshold.getName(), "' is not unique!"));
	}
	oFF.QAbstractThresholdEvaluateList.prototype.insertThreshold.call( this , index, threshold);
};
oFF.QFormulaException.prototype.isActive = function()
{
	return this.m_isActive;
};
oFF.QFormulaException.prototype.isAutoSignFlip = function()
{
	return this.m_isAutoSignFlip;
};
oFF.QFormulaException.prototype.isHandleExcludedFilters = function()
{
	return this.m_isHandleExcludedFilters;
};
oFF.QFormulaException.prototype.isHandleNullAsZero = function()
{
	return this.m_isHandleNullAsZero;
};
oFF.QFormulaException.prototype.isPrimaryMeasure = function()
{
	return this.m_isPrimaryMeasure;
};
oFF.QFormulaException.prototype.isRatioVarianceCalculated = function()
{
	return this.m_isRatioVarianceCalculated;
};
oFF.QFormulaException.prototype.newThresholdWithName = function(name, lowValue, alertLevel)
{
	let threshold = oFF.QAbstractThresholdEvaluateList.prototype.newThreshold.call( this , lowValue, alertLevel);
	threshold.setName(name);
	return threshold;
};
oFF.QFormulaException.prototype.releaseObject = function()
{
	this.m_measure = oFF.XObjectExt.release(this.m_measure);
	this.m_baseMeasure = oFF.XObjectExt.release(this.m_baseMeasure);
	this.m_baseMeasureName = null;
	this.m_referenceMeasure = oFF.XObjectExt.release(this.m_referenceMeasure);
	this.m_referenceMeasureName = null;
	this.m_evaluateDefault = oFF.XObjectExt.release(this.m_evaluateDefault);
	this.m_structure = oFF.XObjectExt.release(this.m_structure);
	this.m_formulaType = null;
	oFF.QAbstractThresholdEvaluateList.prototype.releaseObject.call( this );
};
oFF.QFormulaException.prototype.setActive = function(active)
{
	let oldValue = this.m_isActive;
	this.m_isActive = active;
	this.notifyPropertyBooleanChanged(oFF.QExceptionProperties.QY_ACTIVE, oldValue, active);
};
oFF.QFormulaException.prototype.setAutoSignFlip = function(autoSignFlip)
{
	let oldValue = this.m_isAutoSignFlip;
	this.m_isAutoSignFlip = autoSignFlip;
	this.notifyPropertyBooleanChanged(oFF.QExceptionProperties.QY_AUTO_SIGN_FLIP, oldValue, autoSignFlip);
};
oFF.QFormulaException.prototype.setBaseMeasure = function(measure)
{
	oFF.XObjectExt.assertNotNullExt(measure, "The measure member is null.");
	if (this.getBaseMeasure() !== null)
	{
		this.addOrRemoveAsSecondaryParent(this.getBaseMeasure().getAliasOrMemberName(), false);
	}
	this.m_baseMeasure = oFF.XWeakReferenceUtil.getWeakRef(measure);
	this.addOrRemoveAsSecondaryParent(measure.getAliasOrMemberName(), true);
	this.notifyNodeChanged();
};
oFF.QFormulaException.prototype.setBaseMeasureName = function(name)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_baseMeasureName))
	{
		this.addOrRemoveAsSecondaryParent(this.m_baseMeasureName, false);
	}
	this.m_baseMeasureName = name;
	this.addOrRemoveAsSecondaryParent(name, true);
	this.notifyNodeChanged();
};
oFF.QFormulaException.prototype.setCalculateRatioVariance = function(isRatioVarianceCalculated)
{
	this.m_isRatioVarianceCalculated = isRatioVarianceCalculated;
};
oFF.QFormulaException.prototype.setEvaluateDefault = function(evaluateDefault)
{
	this.m_evaluateDefault = evaluateDefault;
};
oFF.QFormulaException.prototype.setFormulaExceptionType = function(type)
{
	this.m_formulaType = type;
	this.notifyNodeChanged();
};
oFF.QFormulaException.prototype.setHandleExcludedFilters = function(isHandleExcludedFilters)
{
	this.m_isHandleExcludedFilters = isHandleExcludedFilters;
};
oFF.QFormulaException.prototype.setHandleNullAsZero = function(nullAsZero)
{
	let oldValue = this.m_isHandleNullAsZero;
	this.m_isHandleNullAsZero = nullAsZero;
	this.notifyPropertyBooleanChanged(oFF.QExceptionProperties.QY_NULL_AS_ZERO, oldValue, nullAsZero);
};
oFF.QFormulaException.prototype.setIsPrimaryMeasure = function(isPrimaryMeasure)
{
	let oldValue = this.m_isPrimaryMeasure;
	this.m_isPrimaryMeasure = isPrimaryMeasure;
	this.notifyPropertyBooleanChanged(oFF.QExceptionProperties.QY_IS_PRIMARY, oldValue, isPrimaryMeasure);
};
oFF.QFormulaException.prototype.setMeasure = function(measure)
{
	oFF.XObjectExt.assertNotNullExt(measure, "The measure member is null.");
	this.m_measure = oFF.XWeakReferenceUtil.getWeakRef(measure);
	this.notifyNodeChanged();
};
oFF.QFormulaException.prototype.setReferenceMeasure = function(measure)
{
	oFF.XObjectExt.assertNotNullExt(measure, "The measure member is null.");
	if (this.getReferenceMeasure() !== null)
	{
		this.addOrRemoveAsSecondaryParent(this.getReferenceMeasure().getAliasOrMemberName(), false);
	}
	this.m_referenceMeasure = oFF.XWeakReferenceUtil.getWeakRef(measure);
	this.addOrRemoveAsSecondaryParent(measure.getAliasOrMemberName(), true);
	this.notifyNodeChanged();
};
oFF.QFormulaException.prototype.setReferenceMeasureName = function(name)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_referenceMeasureName))
	{
		this.addOrRemoveAsSecondaryParent(this.m_referenceMeasureName, false);
	}
	this.m_referenceMeasureName = name;
	this.addOrRemoveAsSecondaryParent(name, true);
	this.notifyNodeChanged();
};
oFF.QFormulaException.prototype.setStructure = function(structure)
{
	this.m_structure = oFF.XWeakReferenceUtil.getWeakRef(structure);
};
oFF.QFormulaException.prototype.setupFormulaException = function(context, model, name, text)
{
	this.setupThresholdEvaluateList(context);
	this.setupModelComponentWithName(context, model, name);
	this.setText(text);
	this.m_thresholds = oFF.QModelComponentList.createModelComponentWithNameList(context, this, false, "Thresholds", false);
	this.m_isPrimaryMeasure = true;
	this.m_formulaType = oFF.FormulaExceptionType.BASE_MEASURE_ONLY;
	this.m_isActive = true;
	this.m_evaluateDefault = oFF.QExceptionEvalType.ALL;
	this.m_isHandleExcludedFilters = false;
	this.m_isRatioVarianceCalculated = false;
};
oFF.QFormulaException.prototype.validateWithDataModelScope = function(context)
{
	let validationResult = oFF.MessageManager.createMessageManagerExt(this.getSession());
	let queryModel = context.getQueryModel();
	let baseMeasureName = this.getBaseMeasureNameInternal();
	let baseMeasure = this.getMeasureStructureMember(queryModel, baseMeasureName);
	if (oFF.notNull(baseMeasure) && baseMeasure.getMemberType() === oFF.MemberType.FORMULA)
	{
		let formulaMeasure = baseMeasure;
		if (formulaMeasure.getFormulaType() === oFF.QFormulaType.MODEL_LINK)
		{
			validationResult.addErrorExt(oFF.OriginLayer.APPLICATION, oFF.ErrorCodes.THRESHOLD_INVALID_MEASURE_WITH_LINK_FORMULA, "", oFF.XStringValue.create(baseMeasureName));
		}
	}
	if (this.m_formulaType === oFF.FormulaExceptionType.POSITIVE_RATIO_NEGATIVE_VARIANCE)
	{
		let referenceMeasureName = this.getReferenceMeasureNameInternal();
		if (oFF.notNull(referenceMeasureName))
		{
			let referenceMeasure = this.getMeasureStructureMember(queryModel, referenceMeasureName);
			if (oFF.notNull(referenceMeasure) && referenceMeasure.getResultVisibility() !== oFF.ResultVisibility.HIDDEN)
			{
				let referenceMeasureValidation = referenceMeasure.validateWithDataModelScope(context);
				if (referenceMeasureValidation.getMessages().size() > 0)
				{
					validationResult.addErrorExt(oFF.OriginLayer.APPLICATION, oFF.ErrorCodes.THRESHOLD_INVALID_REFERENCE_MEASURE, "", oFF.XStringValue.create(referenceMeasureName));
				}
				let requestedProperties = oFF.XList.create();
				requestedProperties.add(oFF.QStructureMemberQueryProperties.ALL_REQUIRED_DIMENSIONS);
				let nestedMemberProperties = referenceMeasure.getNestedMemberQueryProperties(context, validationResult, requestedProperties, false);
				let allRequiredDimensionNames = nestedMemberProperties.getByKey(oFF.QStructureMemberQueryProperties.ALL_REQUIRED_DIMENSIONS.getName());
				let iterator = allRequiredDimensionNames.getValuesAsReadOnlyList().getIterator();
				while (iterator.hasNext())
				{
					let dimension = queryModel.getDimensionByName(iterator.next());
					if (oFF.notNull(dimension) && dimension.getHierarchies() !== null)
					{
						let hierarchies = oFF.HierarchyCatalogUtil.getHierarchyItems(dimension.getHierarchies());
						let hierarchyIterator = hierarchies.getIterator();
						while (hierarchyIterator.hasNext())
						{
							let hierarchyItem = hierarchyIterator.next();
							if (hierarchyItem.getHierarchyLevels() !== null && hierarchyItem.getHierarchyLevels().size() > 1)
							{
								validationResult.addErrorExt(oFF.OriginLayer.APPLICATION, oFF.ErrorCodes.THRESHOLD_INVALID_REFERENCE_MEASURE_WITH_HIER_REQ_DIM, "", oFF.XStringValue.create(referenceMeasureName));
								break;
							}
						}
					}
				}
			}
			else
			{
				validationResult.addErrorExt(oFF.OriginLayer.APPLICATION, oFF.ErrorCodes.THRESHOLD_MISSING_REFERENCE_MEASURE, "", oFF.XStringValue.create(referenceMeasureName));
			}
		}
	}
	return validationResult;
};
oFF.QFormulaException.prototype.validateWithQueryModelScope = function(context)
{
	let validationResult = oFF.MessageManager.createMessageManagerExt(this.getSession());
	if (this.m_formulaType === oFF.FormulaExceptionType.POSITIVE_RATIO_NEGATIVE_VARIANCE)
	{
		let referenceMeasureName = this.getReferenceMeasureNameInternal();
		if (oFF.notNull(referenceMeasureName))
		{
			let referenceMeasure = this.getMeasureStructureMember(context.getQueryModel(), referenceMeasureName);
			if (oFF.notNull(referenceMeasure))
			{
				validationResult.addAllMessages(referenceMeasure.validateWithQueryModelScope(context));
			}
		}
	}
	return validationResult;
};

oFF.QFieldCalcDim = function() {};
oFF.QFieldCalcDim.prototype = new oFF.QField();
oFF.QFieldCalcDim.prototype._ff_c = "QFieldCalcDim";

oFF.QFieldCalcDim._createFieldCalcDim = function(context, dimension, type, name)
{
	let fieldCalcDim = new oFF.QFieldCalcDim();
	fieldCalcDim.setupFieldCalcDim(context, dimension, type, name);
	return fieldCalcDim;
};
oFF.QFieldCalcDim.prototype.m_calcMetadata = null;
oFF.QFieldCalcDim.prototype.getValueType = function()
{
	let metadata = this.getMetadata();
	return oFF.isNull(metadata) ? oFF.XValueType.STRING : metadata.getValueType();
};
oFF.QFieldCalcDim.prototype.releaseObject = function()
{
	oFF.QField.prototype.releaseObject.call( this );
	this.m_calcMetadata = oFF.XObjectExt.release(this.m_calcMetadata);
};
oFF.QFieldCalcDim.prototype.setValueType = function(valueType)
{
	this.getMetadataBase().setValueType(valueType);
};
oFF.QFieldCalcDim.prototype.setupFieldCalcDim = function(context, dimension, type, name)
{
	this.setupField(context, dimension, type);
	this.setName(name);
	let cacheKey = oFF.QFactory.createCacheKeyForField(context, name, dimension.getName());
	let metadata = oFF.QFieldMetadata.create(cacheKey);
	metadata.setDimensionMetadata(dimension.getMetadataBase());
	metadata.setIsFilterable(true);
	metadata.setValueType(oFF.XValueType.STRING);
	metadata.setIsFlatKeyField(type === oFF.PresentationType.KEY);
	metadata.setPresentationType(type);
	this.setMetadata(metadata);
	this.m_calcMetadata = metadata;
};

oFF.QFieldValue = function() {};
oFF.QFieldValue.prototype = new oFF.AbstractValueAccessComponent();
oFF.QFieldValue.prototype._ff_c = "QFieldValue";

oFF.QFieldValue._create = function(context)
{
	let fieldValue = new oFF.QFieldValue();
	fieldValue.setupFieldValue(context, null, null, oFF.MemberType.FIELD_VALUE);
	return fieldValue;
};
oFF.QFieldValue.create = function(context, field, dimensionMember)
{
	let fieldValue = new oFF.QFieldValue();
	fieldValue.setupFieldValue(context, field, dimensionMember, oFF.MemberType.FIELD_VALUE);
	return fieldValue;
};
oFF.QFieldValue.createLiteral = function(context, field)
{
	let fieldValue = new oFF.QFieldValue();
	fieldValue.setupFieldValue(context, field, null, oFF.MemberType.LITERAL_MEMBER);
	return fieldValue;
};
oFF.QFieldValue.createWithValue = function(context, field, dimensionMember, value)
{
	let fieldValue = new oFF.QFieldValue();
	fieldValue.setupFieldValue(context, field, dimensionMember, oFF.MemberType.FIELD_VALUE);
	fieldValue.m_value = value;
	return fieldValue;
};
oFF.QFieldValue.prototype.m_dimensionMember = null;
oFF.QFieldValue.prototype.m_dimensionMemberDerived = false;
oFF.QFieldValue.prototype.m_field = null;
oFF.QFieldValue.prototype.m_formattedValue = null;
oFF.QFieldValue.prototype.m_isStarWildcardEnabled = false;
oFF.QFieldValue.prototype.m_memberType = null;
oFF.QFieldValue.prototype.m_value = null;
oFF.QFieldValue.prototype.m_valueException = null;
oFF.QFieldValue.prototype.areHierarchicalDimensionMemberNamesStoredAsFlat = function()
{
	let dimension = this.getDimension();
	return oFF.notNull(this.m_field) && this.m_field.getMetadata() !== null && this.m_field.isHierarchyKeyField() && oFF.notNull(dimension) && dimension.areHierarchicalDimensionMemberNamesStoredAsFlat() && oFF.notNull(this.m_dimensionMember);
};
oFF.QFieldValue.prototype.assertNumeric = function(value)
{
	if (oFF.XMath.isNaN(value))
	{
		throw oFF.XException.createIllegalArgumentException("The value must not be NaN!");
	}
};
oFF.QFieldValue.prototype.cloneOlapComponent = function(context, parent)
{
	let clone = new oFF.QFieldValue();
	clone.setupFieldValue(context, null, null, this.m_memberType);
	clone.copyFieldValue(this);
	return clone;
};
oFF.QFieldValue.prototype.copyFieldValue = function(origin)
{
	oFF.AbstractValueAccessComponent.prototype.copyFromInternal.call( this , origin, null);
	if (oFF.isNull(origin.m_value))
	{
		this.m_value = null;
	}
	else
	{
		this.m_value = origin.m_value.clone();
		if (origin.m_value.getValueType() === oFF.XValueType.VARIABLE)
		{
			let variableValue = this.m_value;
			let variable = variableValue.getVariable();
			if (oFF.notNull(variable) && this.getVariableContainer() !== null)
			{
				let correctVariable = this.getVariableContainer().getVariable(variable.getName());
				variableValue.setVariable(correctVariable);
			}
		}
	}
	this.m_valueException = origin.m_valueException;
	this.m_formattedValue = origin.m_formattedValue;
	if (oFF.notNull(origin.m_field) && this.getContext().getFieldAccessorSingle() !== null)
	{
		this.m_field = this.getContext().getFieldAccessorSingle().getFieldByName(origin.m_field.getName());
	}
	this.m_memberType = origin.m_memberType;
	this.m_isStarWildcardEnabled = origin.m_isStarWildcardEnabled;
	if (oFF.notNull(origin.m_dimensionMember))
	{
		let origMember = origin.getDimensionMember();
		if (oFF.notNull(origMember))
		{
			let originName = origMember.getName();
			if (oFF.notNull(originName))
			{
				let origMemberDimension = origMember.getDimension();
				if (oFF.notNull(origMemberDimension) && this.getDimensionAccessor() !== null && !origin.m_dimensionMemberDerived)
				{
					let dimName = origMemberDimension.getName();
					let cloneDimension = this.getDimensionAccessor().getDimensionByNameFromExistingMetadataOrFormulaCalcDim(dimName);
					if (oFF.notNull(cloneDimension))
					{
						let cloneMember = cloneDimension.getDimensionMember(originName);
						if (oFF.notNull(cloneMember))
						{
							this.setDimensionMember(cloneMember);
						}
					}
				}
			}
		}
	}
};
oFF.QFieldValue.prototype.copyFromInternal = function(other, flags)
{
	this.copyFieldValue(other);
};
oFF.QFieldValue.prototype.getDimension = function()
{
	let field = this.getField();
	return oFF.isNull(field) ? null : field.getDimension();
};
oFF.QFieldValue.prototype.getDimensionMember = function()
{
	if (oFF.isNull(this.m_dimensionMember))
	{
		let field = this.getField();
		if (oFF.notNull(field) && field.isKeyField())
		{
			this.m_dimensionMember = field.getDimension().getDimensionMemberWithValue(this.getValue(), field);
			this.m_dimensionMemberDerived = true;
		}
	}
	return this.m_dimensionMember;
};
oFF.QFieldValue.prototype.getField = function()
{
	return this.m_field;
};
oFF.QFieldValue.prototype.getFieldBase = function()
{
	return this.m_field;
};
oFF.QFieldValue.prototype.getFormattedValue = function()
{
	if (this.getField() !== null && this.getField().getPresentationType() === oFF.PresentationType.URL)
	{
		return oFF.XHttpUtils.decodeURIComponent(this.m_formattedValue);
	}
	if (this.getField() !== null && this.getField().getPresentationType() === oFF.PresentationType.BLOB && oFF.XStringUtils.isNotNullAndNotEmpty(this.m_formattedValue))
	{
		let queryManager = this.getQueryManager();
		let connection = queryManager.getConnection();
		let xxlPathWithSchemeHostPortPrefix = connection.getXXLPathWithSchemeHostPortPrefix();
		return oFF.XStringUtils.concatenate2(xxlPathWithSchemeHostPortPrefix, this.m_formattedValue);
	}
	let overrideText = this.getOverrideTextFromDimensionMember();
	if (oFF.notNull(overrideText))
	{
		return overrideText;
	}
	return this.m_formattedValue;
};
oFF.QFieldValue.prototype.getFormattedValueForImageRequest = function()
{
	if (this.getField() !== null && this.getField().getPresentationType() === oFF.PresentationType.BLOB)
	{
		return this.m_formattedValue;
	}
	return null;
};
oFF.QFieldValue.prototype.getMemberType = function()
{
	return this.m_memberType;
};
oFF.QFieldValue.prototype.getOverrideTextFromDimensionMember = function()
{
	if (oFF.notNull(this.m_field) && this.m_field.getDimension() !== null && (this.m_field.getDimension().isStructure() || this.m_field.getDimension().getDimensionType().isTypeOf(oFF.DimensionType.ACCOUNT)) && this.m_field.getDimension().getTextField() !== null && oFF.XString.isEqual(this.m_field.getName(), this.m_field.getDimension().getTextField().getName()) && oFF.notNull(this.m_dimensionMember) && this.m_dimensionMember.hasOverrideTextDefined())
	{
		return this.m_dimensionMember.getText();
	}
	return null;
};
oFF.QFieldValue.prototype.getSelectField = function()
{
	return this.m_field;
};
oFF.QFieldValue.prototype.getSelectHierarchyName = function()
{
	return null;
};
oFF.QFieldValue.prototype.getSelectMemberType = oFF.noSupport;
oFF.QFieldValue.prototype.getSelectValue = function()
{
	return this.getString();
};
oFF.QFieldValue.prototype.getSelectableElement = function()
{
	return this;
};
oFF.QFieldValue.prototype.getString = function()
{
	let value = this.getValue();
	if (oFF.isNull(value))
	{
		return this.m_formattedValue;
	}
	else if (value.getValueType() === oFF.XValueType.STRING)
	{
		return value.getString();
	}
	return value.toString();
};
oFF.QFieldValue.prototype.getType = function()
{
	return this.getMemberType();
};
oFF.QFieldValue.prototype.getValue = function()
{
	let value = this.m_value;
	let overrideText = this.getOverrideTextFromDimensionMember();
	if (oFF.notNull(overrideText))
	{
		value = oFF.XStringValue.create(overrideText);
	}
	else if (this.areHierarchicalDimensionMemberNamesStoredAsFlat())
	{
		value = oFF.XStringValue.create(this.m_dimensionMember.getName());
	}
	return value;
};
oFF.QFieldValue.prototype.getValueException = function()
{
	return this.m_valueException;
};
oFF.QFieldValue.prototype.hasValue = function()
{
	return oFF.notNull(this.m_value);
};
oFF.QFieldValue.prototype.isEqualTo = function(other)
{
	if (this === other)
	{
		return true;
	}
	if (oFF.isNull(other))
	{
		return false;
	}
	let xOther = other;
	if (this.m_dimensionMember !== xOther.m_dimensionMember)
	{
		return false;
	}
	if (this.m_field !== xOther.m_field)
	{
		return false;
	}
	if (!oFF.XString.isEqual(this.m_formattedValue, xOther.m_formattedValue))
	{
		return false;
	}
	if (this.m_isStarWildcardEnabled !== xOther.m_isStarWildcardEnabled)
	{
		return false;
	}
	if (this.m_memberType !== xOther.m_memberType)
	{
		return false;
	}
	if (!oFF.XObjectExt.areEqual(this.m_value, xOther.m_value))
	{
		return false;
	}
	if (this.m_valueException !== xOther.m_valueException)
	{
		return false;
	}
	return true;
};
oFF.QFieldValue.prototype.isNode = function()
{
	return this.getMemberType().isNode();
};
oFF.QFieldValue.prototype.isStarWildcardEnabled = function()
{
	return this.m_isStarWildcardEnabled;
};
oFF.QFieldValue.prototype.mergeDeepRecursive = function(settings, other)
{
	let otherFieldValue = other;
	let otherValue = otherFieldValue.getValue();
	if (oFF.notNull(this.m_value) && oFF.notNull(otherValue) && !this.m_value.isEqualTo(otherValue))
	{
		this.m_value = otherValue.clone();
	}
};
oFF.QFieldValue.prototype.parseString = oFF.noSupport;
oFF.QFieldValue.prototype.releaseObject = function()
{
	this.m_value = oFF.XObjectExt.release(this.m_value);
	this.m_dimensionMember = null;
	this.m_dimensionMemberDerived = false;
	this.m_formattedValue = null;
	this.m_valueException = null;
	this.m_field = null;
	oFF.AbstractValueAccessComponent.prototype.releaseObject.call( this );
};
oFF.QFieldValue.prototype.setBoolean = function(value)
{
	this.setValue(oFF.XBooleanValue.create(value));
};
oFF.QFieldValue.prototype.setDate = function(value)
{
	this.setValue(value);
};
oFF.QFieldValue.prototype.setDateTime = function(value)
{
	this.setValue(value);
};
oFF.QFieldValue.prototype.setDecFloat = function(value)
{
	this.setValue(value);
};
oFF.QFieldValue.prototype.setDimensionMember = function(dimensionMember)
{
	this.m_dimensionMember = dimensionMember;
	this.m_dimensionMemberDerived = false;
};
oFF.QFieldValue.prototype.setDouble = function(value)
{
	this.assertNumeric(value);
	this.setValue(oFF.XDoubleValue.create(value));
};
oFF.QFieldValue.prototype.setFieldValue = function(other)
{
	if (oFF.notNull(other))
	{
		this.m_value = other.getValue() === null ? null : other.getValue().clone();
		this.m_valueException = other.getValueException();
		this.m_formattedValue = other.getFormattedValue();
		this.m_field = other.getField();
		this.m_memberType = other.getMemberType();
		let otherMember = other.getDimensionMember();
		if (!other.m_dimensionMemberDerived)
		{
			this.setDimensionMember(otherMember);
		}
		this.notifyNodeChanged();
	}
};
oFF.QFieldValue.prototype.setFormattedValue = function(formattedValue)
{
	this.m_formattedValue = formattedValue;
};
oFF.QFieldValue.prototype.setInteger = function(value)
{
	this.assertNumeric(value);
	this.setValue(oFF.XIntegerValue.create(value));
};
oFF.QFieldValue.prototype.setIsStarWildcardEnabled = function(isEnabled)
{
	this.m_isStarWildcardEnabled = isEnabled;
};
oFF.QFieldValue.prototype.setLineString = function(value)
{
	this.setValue(value);
};
oFF.QFieldValue.prototype.setLiteralDate = function(value)
{
	this.setDate(value);
};
oFF.QFieldValue.prototype.setLiteralDouble = function(value)
{
	this.setDouble(value);
};
oFF.QFieldValue.prototype.setLiteralInt = function(value)
{
	this.setInteger(value);
};
oFF.QFieldValue.prototype.setLiteralLong = function(value)
{
	this.setLong(value);
};
oFF.QFieldValue.prototype.setLiteralPoint = function(value)
{
	this.setPoint(value);
};
oFF.QFieldValue.prototype.setLiteralPolygon = function(value)
{
	this.setPolygon(value);
};
oFF.QFieldValue.prototype.setLiteralString = function(value)
{
	this.setString(value);
};
oFF.QFieldValue.prototype.setLiteralTimespan = function(timespan)
{
	this.setTimeSpan(oFF.XTimeSpan.create(timespan));
};
oFF.QFieldValue.prototype.setLong = function(value)
{
	this.assertNumeric(value);
	this.setValue(oFF.XLongValue.create(value));
};
oFF.QFieldValue.prototype.setMultiLineString = function(value)
{
	this.setValue(value);
};
oFF.QFieldValue.prototype.setMultiPoint = function(value)
{
	this.setValue(value);
};
oFF.QFieldValue.prototype.setMultiPolygon = function(value)
{
	this.setValue(value);
};
oFF.QFieldValue.prototype.setNullByType = function(nullValueType) {};
oFF.QFieldValue.prototype.setPoint = function(value)
{
	this.setValue(value);
};
oFF.QFieldValue.prototype.setPolygon = function(value)
{
	this.setValue(value);
};
oFF.QFieldValue.prototype.setPropertiesValue = function(properties)
{
	this.setValue(properties);
};
oFF.QFieldValue.prototype.setString = function(value)
{
	this.setValue(oFF.XStringValue.create(value));
};
oFF.QFieldValue.prototype.setStructureListValue = function(value)
{
	this.setValue(value);
};
oFF.QFieldValue.prototype.setStructureValue = function(value)
{
	this.setValue(value);
};
oFF.QFieldValue.prototype.setTime = function(value)
{
	this.setValue(value);
};
oFF.QFieldValue.prototype.setTimeSpan = function(value)
{
	this.setValue(value);
};
oFF.QFieldValue.prototype.setValue = function(value)
{
	this.m_value = value;
	this.notifyNodeChanged();
};
oFF.QFieldValue.prototype.setValueException = function(valueException)
{
	this.m_valueException = valueException;
};
oFF.QFieldValue.prototype.setXValue = function(value)
{
	this.setValue(value);
};
oFF.QFieldValue.prototype.setupFieldValue = function(context, field, dimensionMember, memberType)
{
	this.setupModelComponent(context, null);
	this.setDimensionMember(dimensionMember);
	this.m_field = field;
	this.m_memberType = memberType;
};
oFF.QFieldValue.prototype.supportsStarWildcard = function()
{
	return true;
};
oFF.QFieldValue.prototype.toString = function()
{
	let buffer = oFF.XStringBuffer.create();
	if (oFF.notNull(this.m_field))
	{
		buffer.append(this.m_field.toString());
	}
	if (oFF.notNull(this.m_value))
	{
		buffer.append(": '").append(this.m_value.toString()).append("'");
	}
	return buffer.toString();
};

oFF.AbstractTransientFilter = function() {};
oFF.AbstractTransientFilter.prototype = new oFF.QFilterElement();
oFF.AbstractTransientFilter.prototype._ff_c = "AbstractTransientFilter";

oFF.AbstractTransientFilter.prototype.m_layeredFilters = null;
oFF.AbstractTransientFilter.prototype.m_transientFilterCapabilities = null;
oFF.AbstractTransientFilter.prototype.m_transientRefCount = 0;
oFF.AbstractTransientFilter.prototype.addCalcDimAndDependencies = function(calcDim, queryModel, secondaryQueryModel, messageManager)
{
	if (oFF.notNull(calcDim))
	{
		queryModel.addDimension(calcDim);
		let filterIterator = this.m_layeredFilters.getIterator();
		while (filterIterator.hasNext())
		{
			let filterElement = filterIterator.next().getFilterRootElement();
			if (oFF.isNull(filterElement) || filterElement.getQueryModel() !== null && !oFF.XString.isEqual(filterElement.getQueryModel().getDatasetId(), queryModel.getDatasetId()))
			{
				continue;
			}
			let componentType = filterElement.getComponentType();
			if (componentType === oFF.FilterComponentType.FILTER_ACROSS_MODELS || componentType === oFF.FilterComponentType.FILTER_MEASURE_BASED)
			{
				let elementName = filterElement.getName();
				filterElement.generateTransientObjects(secondaryQueryModel, messageManager);
				let depCalcDim = secondaryQueryModel.getDimensionByName(elementName);
				if (oFF.notNull(depCalcDim) && depCalcDim.getDimensionType().isTypeOf(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION))
				{
					calcDim.addDependentCalculatedDimension(depCalcDim);
					queryModel.addDimension(depCalcDim);
				}
			}
			else
			{
				this.checkCalcDimFilter(filterElement, calcDim, queryModel);
			}
		}
	}
};
oFF.AbstractTransientFilter.prototype.checkCalcDimFilter = function(filterElement, calcDim, queryModel)
{
	let componentType = filterElement.getComponentType();
	if (componentType.isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
	{
		let filterList = filterElement;
		let listDimensionMetadata = filterList.getFieldMetadata().getDimensionMetadata();
		let listDimension = queryModel.getDimensionByName(listDimensionMetadata.getName());
		if (oFF.notNull(listDimension) && listDimension.getDimensionType().isTypeOf(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION))
		{
			calcDim.addDependentCalculatedDimension(listDimension);
		}
	}
	else if (componentType === oFF.FilterComponentType.OPERATION)
	{
		let filterOperation = filterElement;
		let opDimensionMetadata = filterOperation.getFieldMetadata().getDimensionMetadata();
		let opDimension = queryModel.getDimensionByName(opDimensionMetadata.getName());
		if (oFF.notNull(opDimension) && opDimension.getDimensionType().isTypeOf(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION))
		{
			calcDim.addDependentCalculatedDimension(opDimension);
		}
	}
	else if (componentType.isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA))
	{
		let filterAlgebra = filterElement;
		let iterator = filterAlgebra.getIterator();
		while (iterator.hasNext())
		{
			this.checkCalcDimFilter(iterator.next(), calcDim, queryModel);
		}
	}
};
oFF.AbstractTransientFilter.prototype.clearCachedQueryDependentObjects = function()
{
	return;
};
oFF.AbstractTransientFilter.prototype.clearCachedQueryDependentObjectsAndNotifyNodeChanged = function()
{
	this.clearCachedQueryDependentObjects();
	this.notifyNodeChanged();
};
oFF.AbstractTransientFilter.prototype.copyFromInternal = function(other, flags)
{
	oFF.QFilterElement.prototype.copyFromInternal.call( this , other, flags);
	let originAbstractTransientFilter = other;
	this.m_layeredFilters.copyFrom(originAbstractTransientFilter.m_layeredFilters, flags);
	this.m_transientRefCount = originAbstractTransientFilter.m_transientRefCount;
};
oFF.AbstractTransientFilter.prototype.destroyTransientFromExternalFilters = function(context)
{
	let filterIterator = this.m_layeredFilters.getIterator();
	while (filterIterator.hasNext())
	{
		let filterElement = filterIterator.next().getFilterRootElement();
		if (oFF.isNull(filterElement))
		{
			continue;
		}
		if (filterElement.getComponentType().isTypeOf(oFF.FilterComponentType.TRANSIENT_FILTER))
		{
			filterElement.destroyTransientObjects(context);
		}
	}
};
oFF.AbstractTransientFilter.prototype.getBackProjectionFilterIds = function()
{
	return null;
};
oFF.AbstractTransientFilter.prototype.getExternalizedFilterName = oFF.noSupport;
oFF.AbstractTransientFilter.prototype.getExternalizedNonVariableFilterName = oFF.noSupport;
oFF.AbstractTransientFilter.prototype.getInternalLinkedFilterIds = function()
{
	return null;
};
oFF.AbstractTransientFilter.prototype.getLinkedFilter = function(filterName)
{
	return this.m_layeredFilters.getLayer(filterName);
};
oFF.AbstractTransientFilter.prototype.getLinkedFilters = function()
{
	return this.m_layeredFilters.toReadOnly();
};
oFF.AbstractTransientFilter.prototype.getModelCapabilities = function()
{
	return this.m_transientFilterCapabilities;
};
oFF.AbstractTransientFilter.prototype.getTransientDimensionsForQueryModel = function(queryModel)
{
	let transientObjects = oFF.XList.create();
	let dimension = queryModel.getDimensionByName(this.getName());
	if (oFF.notNull(dimension) && !dimension.isReleased() && dimension.getDimensionType().isTypeOf(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION))
	{
		transientObjects.add(dimension);
	}
	return transientObjects;
};
oFF.AbstractTransientFilter.prototype.linkFilter = function(filterName, filter)
{
	this.m_layeredFilters.putLayer(filterName, filter);
	this.clearCachedQueryDependentObjectsAndNotifyNodeChanged();
};
oFF.AbstractTransientFilter.prototype.linkFilterElement = function(filterName, filterElement)
{
	let filterExpression = oFF.QFilterExpression.create(this, this);
	filterExpression.setComplexRoot(filterElement);
	this.linkFilter(filterName, filterExpression);
};
oFF.AbstractTransientFilter.prototype.linkFilterElementIfApplicable = function(filterName, filterElement)
{
	let filterExpression = oFF.QFilterExpression.create(this, this);
	filterExpression.setComplexRoot(filterElement);
	let isApplicable = oFF.QFilterUtil.isFilterApplicable(filterExpression, this.getModelCapabilities());
	if (isApplicable)
	{
		this.linkFilter(filterName, filterExpression);
	}
	return isApplicable;
};
oFF.AbstractTransientFilter.prototype.linkFilterExt = function(filterName, filter, isBackProjection, isInternalLinkForLov)
{
	if (!isBackProjection)
	{
		this.linkFilter(filterName, filter);
	}
};
oFF.AbstractTransientFilter.prototype.linkFilterExtIfApplicable = function(filterName, filter, isBackProjection, isInternalLinkForLov)
{
	let isApplicable = oFF.QFilterUtil.isFilterApplicable(filter, this.getModelCapabilities());
	if (isApplicable)
	{
		this.linkFilterExt(filterName, filter, isBackProjection, isInternalLinkForLov);
	}
	return isApplicable;
};
oFF.AbstractTransientFilter.prototype.linkFilterIfApplicable = function(filterName, filter)
{
	let isApplicable = oFF.QFilterUtil.isFilterApplicable(filter, this.getModelCapabilities());
	if (isApplicable)
	{
		this.linkFilter(filterName, filter);
	}
	return isApplicable;
};
oFF.AbstractTransientFilter.prototype.linkFilters = function(layeredFilter)
{
	this.m_layeredFilters.copy(layeredFilter);
	this.clearCachedQueryDependentObjectsAndNotifyNodeChanged();
};
oFF.AbstractTransientFilter.prototype.linkFiltersIfApplicable = function(layeredFilter)
{
	if (!oFF.XCollectionUtils.hasElements(layeredFilter))
	{
		return false;
	}
	let modelCapabilities = this.getModelCapabilities();
	let iterator = layeredFilter.getIterator();
	while (iterator.hasNext())
	{
		if (!oFF.QFilterUtil.isFilterApplicable(iterator.next(), modelCapabilities))
		{
			return false;
		}
	}
	this.linkFilters(layeredFilter);
	return true;
};
oFF.AbstractTransientFilter.prototype.onModelComponentChanged = function(modelComponent, customIdentifier)
{
	this.clearCachedQueryDependentObjects();
};
oFF.AbstractTransientFilter.prototype.releaseObject = function()
{
	this.m_transientFilterCapabilities = oFF.XObjectExt.release(this.m_transientFilterCapabilities);
	this.m_layeredFilters = oFF.XObjectExt.release(this.m_layeredFilters);
	this.m_transientRefCount = 0;
	oFF.QFilterElement.prototype.releaseObject.call( this );
};
oFF.AbstractTransientFilter.prototype.removeCalcDimByName = function(calcDimName, context)
{
	if (oFF.notNull(context))
	{
		let queryModel = context.getQueryModel();
		if (oFF.notNull(queryModel))
		{
			let dimToRelease = queryModel.getDimensionByName(calcDimName);
			queryModel.removeCalculatedDimensionByName(calcDimName);
			oFF.XObjectExt.release(dimToRelease);
		}
	}
};
oFF.AbstractTransientFilter.prototype.setFilterContext = function(calcDim)
{
	let layeredFilters = calcDim.getLayeredFilters();
	let keyIterator = this.m_layeredFilters.toReadOnly().getKeysAsIterator();
	while (keyIterator.hasNext())
	{
		let key = keyIterator.next();
		layeredFilters.putLayer(key, this.m_layeredFilters.getLayer(key));
	}
};
oFF.AbstractTransientFilter.prototype.setParent = function(parent)
{
	oFF.QFilterElement.prototype.setParent.call( this , parent);
	this.m_transientFilterCapabilities.updateContext(this);
};
oFF.AbstractTransientFilter.prototype.setupTransientFilter = function(context, name, filterContainer)
{
	oFF.QFilterElement.prototype.setupFilterElement.call( this , context, filterContainer, context.getQueryModel());
	this.setName(name);
	this.m_layeredFilters = oFF.QLayeredFilter.create(context, this);
	this.m_transientFilterCapabilities = oFF.QFactory.createCapabilitiesDecorator(this);
	this.m_transientFilterCapabilities.setSupportsComplexFilter(true);
	this.m_transientFilterCapabilities.setSupportsIntersectLayers(true);
	this.m_transientFilterCapabilities.setSupportsVisibilityFilter(true);
	this.m_transientFilterCapabilities.setSupportsCellValueOperand(true);
	this.m_transientFilterCapabilities.setSupportsComplexTupleFilter(true);
	this.m_transientFilterCapabilities.setSupportsCalculatedDimensions(true);
	this.m_transientFilterCapabilities.setSupportsFormulaMeasures(true);
};
oFF.AbstractTransientFilter.prototype.unlinkExternalFilters = function()
{
	let linkedFilters = this.getLinkedFilters();
	let keysToClean = oFF.XStream.ofString(linkedFilters.getKeysAsReadOnlyList()).filter((key) => {
		return !linkedFilters.getByKey(key.getString()).isPreservedInRepoSerialization();
	}).collect(oFF.XStreamCollector.toListOfString((ks) => {
		return ks.getString();
	}));
	oFF.XCollectionUtils.forEach(keysToClean, (ktc) => {
		this.linkFilter(ktc, null);
	});
	this.clearCachedQueryDependentObjectsAndNotifyNodeChanged();
};
oFF.AbstractTransientFilter.prototype.unlinkFilters = function()
{
	this.m_layeredFilters.clear();
	this.clearCachedQueryDependentObjectsAndNotifyNodeChanged();
};
oFF.AbstractTransientFilter.prototype.unlinkInternalFilters = function()
{
	let linkedFilters = this.getLinkedFilters();
	let keysToClean = oFF.XStream.ofString(linkedFilters.getKeysAsReadOnlyList()).filter((key) => {
		return linkedFilters.getByKey(key.getString()).isPreservedInRepoSerialization();
	}).collect(oFF.XStreamCollector.toListOfString((ks) => {
		return ks.getString();
	}));
	oFF.XCollectionUtils.forEach(keysToClean, (ktc) => {
		this.linkFilter(ktc, null);
	});
	this.clearCachedQueryDependentObjectsAndNotifyNodeChanged();
};

oFF.QDimensionLink = function() {};
oFF.QDimensionLink.prototype = new oFF.QFieldLink();
oFF.QDimensionLink.prototype._ff_c = "QDimensionLink";

oFF.QDimensionLink.createDimensionLink = function(context, parent, first, second, linkOnMatchingHierarchies, treatFlatToFlatAsMatchingHierarchy)
{
	if (oFF.isNull(first) || oFF.isNull(second) || first === second)
	{
		return null;
	}
	let newLink = new oFF.QDimensionLink();
	newLink.setupModelComponent(context, parent);
	newLink.m_first = oFF.QDimensionLinkPart.createDimensionLinkPart(context, first, null, null);
	newLink.m_second = oFF.QDimensionLinkPart.createDimensionLinkPart(context, second, null, null);
	newLink.m_firstFieldKey = oFF.XObjectExt.cloneIfNotNull(first);
	newLink.m_secondFieldKey = oFF.XObjectExt.cloneIfNotNull(second);
	newLink.m_linkOnMatchingHierarchies = linkOnMatchingHierarchies;
	newLink.m_treatFlatToFlatAsMatchingHierarchy = treatFlatToFlatAsMatchingHierarchy;
	return newLink;
};
oFF.QDimensionLink.createDimensionLinkFromParts = function(context, parent, first, second, linkOnMatchingHierarchies, treatFlatToFlatAsMatchingHierarchy)
{
	let newLink = new oFF.QDimensionLink();
	newLink.setupModelComponent(context, parent);
	newLink.m_first = first;
	newLink.m_second = second;
	newLink.m_firstFieldKey = oFF.XObjectExt.cloneIfNotNull(first.getFieldKey());
	newLink.m_secondFieldKey = oFF.XObjectExt.cloneIfNotNull(second.getFieldKey());
	newLink.m_linkOnMatchingHierarchies = linkOnMatchingHierarchies;
	newLink.m_treatFlatToFlatAsMatchingHierarchy = treatFlatToFlatAsMatchingHierarchy;
	first.setParent(newLink);
	second.setParent(newLink);
	return newLink;
};
oFF.QDimensionLink.prototype.m_firstFieldKey = null;
oFF.QDimensionLink.prototype.m_linkOnMatchingHierarchies = false;
oFF.QDimensionLink.prototype.m_secondFieldKey = null;
oFF.QDimensionLink.prototype.m_treatFlatToFlatAsMatchingHierarchy = false;
oFF.QDimensionLink.prototype.arePartsLinkedOnSameHierarchy = function()
{
	return oFF.XString.isEqual(this.getFirstPart().getHierarchyName(), this.getSecondPart().getHierarchyName()) && oFF.XString.isEqual(this.getFirstPart().getHierId(), this.getSecondPart().getHierId());
};
oFF.QDimensionLink.prototype.cloneOlapComponent = function(context, parent)
{
	return oFF.QDimensionLink.createDimensionLinkFromParts(context, parent, oFF.XObjectExt.cloneIfNotNull(this.getFirstPart()), oFF.XObjectExt.cloneIfNotNull(this.getSecondPart()), this.isLinkOnMatchingHierarchies(), this.isTreatFlatToFlatAsMatchingHierarchy());
};
oFF.QDimensionLink.prototype.getFirst = function()
{
	return this.m_firstFieldKey;
};
oFF.QDimensionLink.prototype.getSecond = function()
{
	return this.m_secondFieldKey;
};
oFF.QDimensionLink.prototype.isLinkOnMatchingHierarchies = function()
{
	return this.m_linkOnMatchingHierarchies;
};
oFF.QDimensionLink.prototype.isTreatFlatToFlatAsMatchingHierarchy = function()
{
	return this.m_treatFlatToFlatAsMatchingHierarchy;
};
oFF.QDimensionLink.prototype.releaseObject = function()
{
	oFF.QFieldLink.prototype.releaseObject.call( this );
	this.m_firstFieldKey = oFF.XObjectExt.release(this.m_firstFieldKey);
	this.m_secondFieldKey = oFF.XObjectExt.release(this.m_secondFieldKey);
};
oFF.QDimensionLink.prototype.setLinkOnMatchingHierarchies = function(linkOnMatchingHierarchies)
{
	this.m_linkOnMatchingHierarchies = linkOnMatchingHierarchies;
};
oFF.QDimensionLink.prototype.setTreatFlatToFlatAsMatchingHierarchy = function(treatFlatToFlatAsMatchingHierarchy)
{
	this.m_treatFlatToFlatAsMatchingHierarchy = treatFlatToFlatAsMatchingHierarchy;
};

oFF.QDimensionLinkPart = function() {};
oFF.QDimensionLinkPart.prototype = new oFF.QFieldLinkPart();
oFF.QDimensionLinkPart.prototype._ff_c = "QDimensionLinkPart";

oFF.QDimensionLinkPart.createDimensionLinkPart = function(context, fieldKey, hierarchyName, queryManagerKey)
{
	let linkPart = new oFF.QDimensionLinkPart();
	linkPart.setupModelComponent(context, null);
	linkPart.m_systemName = fieldKey.getSystemName();
	if (oFF.notNull(context))
	{
		let olapEnv = context.getOlapEnv();
		let cubeContainer = olapEnv.getCubeContainer(fieldKey);
		let dataSource = cubeContainer.getDataSource();
		if (oFF.notNull(dataSource))
		{
			linkPart.m_cubeName = dataSource.getFullQualifiedName();
			oFF.XObjectExt.assertStringNotInitial(linkPart.m_cubeName);
		}
	}
	linkPart.m_dimensionName = fieldKey.getKey2();
	linkPart.m_fieldName = fieldKey.getKey1();
	linkPart.m_hierarchyName = hierarchyName;
	linkPart.m_fieldKey = oFF.XObjectExt.cloneIfNotNull(fieldKey);
	linkPart.m_queryManagerKey = queryManagerKey;
	linkPart.m_propagateOnDefaultHierarchyKey = false;
	linkPart.m_propagateFlexibleTimeRangeFiltersDirect = true;
	linkPart.m_propagateDirectFlexibleTimeMemberFiltersUsingHierarchy = false;
	return linkPart;
};
oFF.QDimensionLinkPart.prototype.m_containsEmptyDescriptionField = false;
oFF.QDimensionLinkPart.prototype.m_hierId = null;
oFF.QDimensionLinkPart.prototype.m_hierarchyName = null;
oFF.QDimensionLinkPart.prototype.m_isLinkOnKeyField = false;
oFF.QDimensionLinkPart.prototype.m_propagateDirectFlexibleTimeMemberFiltersUsingHierarchy = false;
oFF.QDimensionLinkPart.prototype.m_propagateFlexibleTimeRangeFiltersDirect = false;
oFF.QDimensionLinkPart.prototype.m_propagateOnDefaultHierarchyKey = false;
oFF.QDimensionLinkPart.prototype.m_queryManagerKey = null;
oFF.QDimensionLinkPart.prototype.cloneOlapComponent = function(context, parent)
{
	let dimensionLinkPart = new oFF.QDimensionLinkPart();
	dimensionLinkPart.setupModelComponent(context, parent);
	dimensionLinkPart.copyFrom(this, null);
	dimensionLinkPart.setContext(this.getContext());
	return dimensionLinkPart;
};
oFF.QDimensionLinkPart.prototype.containsEmptyDescriptionField = function()
{
	return this.m_containsEmptyDescriptionField;
};
oFF.QDimensionLinkPart.prototype.copyFromInternal = function(other, flags)
{
	oFF.QFieldLinkPart.prototype.copyFromInternal.call( this , other, flags);
	let otherPart = other;
	this.m_hierarchyName = otherPart.m_hierarchyName;
	this.m_hierId = otherPart.m_hierId;
	this.m_queryManagerKey = otherPart.m_queryManagerKey;
	this.m_propagateOnDefaultHierarchyKey = otherPart.m_propagateOnDefaultHierarchyKey;
	this.m_propagateFlexibleTimeRangeFiltersDirect = otherPart.m_propagateFlexibleTimeRangeFiltersDirect;
	this.m_propagateDirectFlexibleTimeMemberFiltersUsingHierarchy = otherPart.m_propagateDirectFlexibleTimeMemberFiltersUsingHierarchy;
	this.setContainsEmptyDescriptionField(otherPart.m_containsEmptyDescriptionField);
	this.setLinkOnKeyField(otherPart.m_isLinkOnKeyField);
};
oFF.QDimensionLinkPart.prototype.getHierId = function()
{
	return this.m_hierId;
};
oFF.QDimensionLinkPart.prototype.getHierarchyName = function()
{
	return this.m_hierarchyName;
};
oFF.QDimensionLinkPart.prototype.getPropagateDirectFlexibleTimeMemberFiltersUsingHierarchy = function()
{
	return this.m_propagateDirectFlexibleTimeMemberFiltersUsingHierarchy;
};
oFF.QDimensionLinkPart.prototype.getPropagateFlexibleTimeRangeFiltersDirect = function()
{
	return this.m_propagateFlexibleTimeRangeFiltersDirect;
};
oFF.QDimensionLinkPart.prototype.getPropagateOnDefaultHierarchyKey = function()
{
	return this.m_propagateOnDefaultHierarchyKey;
};
oFF.QDimensionLinkPart.prototype.getQueryManagerKey = function()
{
	return this.m_queryManagerKey;
};
oFF.QDimensionLinkPart.prototype.isEqualTo = function(other)
{
	if (!oFF.QFieldLinkPart.prototype.isEqualTo.call( this , other))
	{
		return false;
	}
	let xOther = other;
	return oFF.XString.isEqual(this.getQueryManagerKey(), xOther.getQueryManagerKey()) && oFF.XString.isEqual(this.getHierarchyName(), xOther.getHierarchyName()) && oFF.XString.isEqual(this.getHierId(), xOther.getHierId());
};
oFF.QDimensionLinkPart.prototype.isHierarchical = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.getHierarchyName());
};
oFF.QDimensionLinkPart.prototype.isLinkOnKeyField = function()
{
	return this.m_isLinkOnKeyField;
};
oFF.QDimensionLinkPart.prototype.isSameDataSourceOrDatasetIdAsContext = function(context)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_queryManagerKey) && oFF.XStringUtils.isNotNullAndNotEmpty(context.getQueryModel().getDatasetId()))
	{
		return oFF.XString.isEqual(this.m_queryManagerKey, context.getQueryModel().getDatasetId());
	}
	else
	{
		return this.getFieldKey().isSameDataSourceAsContext(context);
	}
};
oFF.QDimensionLinkPart.prototype.isSameDimension = function(dimension)
{
	if (this.getQueryManagerKey() === null)
	{
		let dimensionOrFieldKey = dimension.getMetadata().getCacheKey();
		return this.isSameDimensionOrField(dimensionOrFieldKey);
	}
	return oFF.XString.isEqual(this.getDimensionName(), dimension.getName()) && oFF.XString.isEqual(this.getQueryManagerKey(), dimension.getQueryModel().getDatasetId());
};
oFF.QDimensionLinkPart.prototype.releaseObject = function()
{
	oFF.QFieldLinkPart.prototype.releaseObject.call( this );
	this.m_hierarchyName = null;
	this.m_hierId = null;
	this.m_queryManagerKey = null;
};
oFF.QDimensionLinkPart.prototype.setContainsEmptyDescriptionField = function(containsEmptyDescriptionField)
{
	this.m_containsEmptyDescriptionField = containsEmptyDescriptionField;
	this.notifyNodeChanged();
};
oFF.QDimensionLinkPart.prototype.setHierId = function(hierId)
{
	this.m_hierId = hierId;
	this.notifyNodeChanged();
};
oFF.QDimensionLinkPart.prototype.setLinkOnKeyField = function(linkOnKeyField)
{
	this.m_isLinkOnKeyField = linkOnKeyField;
	this.notifyNodeChanged();
};
oFF.QDimensionLinkPart.prototype.setPropagateDirectFlexibleTimeMemberFiltersUsingHierarchy = function(propagateUsingHierarchy)
{
	this.m_propagateDirectFlexibleTimeMemberFiltersUsingHierarchy = propagateUsingHierarchy;
	this.notifyNodeChanged();
};
oFF.QDimensionLinkPart.prototype.setPropagateFlexibleTimeRangeFiltersDirect = function(propagateAsDirect)
{
	this.m_propagateFlexibleTimeRangeFiltersDirect = propagateAsDirect;
	this.notifyNodeChanged();
};
oFF.QDimensionLinkPart.prototype.setPropagateOnDefaultHierarchyKey = function(propagateOnDefaultHierarchyKey)
{
	this.m_propagateOnDefaultHierarchyKey = propagateOnDefaultHierarchyKey;
	this.notifyNodeChanged();
};

oFF.QFilter = function() {};
oFF.QFilter.prototype = new oFF.QModelComponent();
oFF.QFilter.prototype._ff_c = "QFilter";

oFF.QFilter.DEFAULT_FILTER_LAYER = "externalFilter";
oFF.QFilter.DYNAMIC_FILTER_CONTAINER = "selectionStateContainer";
oFF.QFilter.EFFECTIVE_FILTER_CONTAINER = "effectiveSelectionContainer";
oFF.QFilter.EFFECTIVE_VISIBILITY_FILTER_CONTAINER = "effectiveSelectionVisibilityContainer";
oFF.QFilter.FIXED_FILTER_CONTAINER = "selectionSpaceContainer";
oFF.QFilter.NON_VARIABLE_LAYER_SUFFIX = "-externalizedNonVariable";
oFF.QFilter.TEMPORARY_FILTER_CONTAINER = "selectionTmpContainer";
oFF.QFilter.TEMPORARY_VISIBILITY_FILTER_CONTAINER = "selectionVisibilityTmpContainer";
oFF.QFilter.VALUEHELP_FILTER_CONTAINER = "selectorContainer";
oFF.QFilter.VALUEHELP_VISIBILITY_FILTER_CONTAINER = "selectorVisibilityContainer";
oFF.QFilter.VISIBILITY_FILTER_CONTAINER = "selectionVisibilityContainer";
oFF.QFilter.addCellValueFilters = function(source, target)
{
	if (oFF.isNull(source))
	{
		return;
	}
	if (!source.getModelCapabilities().supportsCellValueOperand())
	{
		return;
	}
	let cellValueOperands = source.getCellValueOperands();
	if (oFF.isNull(cellValueOperands))
	{
		return;
	}
	for (let i = 0; i < cellValueOperands.size(); i++)
	{
		target.addCellValueFilter(cellValueOperands.get(i));
	}
	if (source.isSuppressingNulls())
	{
		target.setIsSuppressingNulls(true);
	}
};
oFF.QFilter.addFilterExpressionRootIfNotNull = function(filterExpression, filterExpressionRoots)
{
	if (oFF.isNull(filterExpression))
	{
		return;
	}
	let filterRootElement = filterExpression.getFilterRootElement();
	if (oFF.notNull(filterRootElement))
	{
		filterExpressionRoots.add(filterRootElement);
	}
};
oFF.QFilter.createWithModelComponent = function(context, modelComponent)
{
	let filter = new oFF.QFilter();
	filter.setupFilter(context, modelComponent);
	return filter;
};
oFF.QFilter.mergeCartesianProducts = function(cartesianProductA, cartesianProductB, context, parent)
{
	if (oFF.isNull(cartesianProductA) && oFF.isNull(cartesianProductB))
	{
		return null;
	}
	if (oFF.isNull(cartesianProductA))
	{
		return cartesianProductB.clone();
	}
	if (oFF.isNull(cartesianProductB))
	{
		return cartesianProductA.clone();
	}
	let newCartesianProduct = oFF.QFilterCartesianProduct._create(context, cartesianProductA.getFilterExpression());
	newCartesianProduct.copyFrom(cartesianProductA, null);
	newCartesianProduct.setParent(parent);
	let sizeProduct = cartesianProductB.size();
	for (let i = 0; i < sizeProduct; i++)
	{
		let cartesianChildB = cartesianProductB.getCartesianChild(i);
		let dimensionName = cartesianChildB.getDimensionName();
		let existingListForDimension = newCartesianProduct.getCartesianListByDimensionName(dimensionName);
		if (oFF.isNull(existingListForDimension))
		{
			let cloneOfCartesianChildB = cartesianChildB.cloneOlapComponent(context, null);
			cloneOfCartesianChildB.setParent(newCartesianProduct);
			newCartesianProduct.add(cloneOfCartesianChildB);
		}
		else
		{
			let sizeList = cartesianChildB.size();
			for (let n = 0; n < sizeList; n++)
			{
				let cartesianElement = cartesianChildB.getCartesianElement(n);
				let clonedCartesianElement = existingListForDimension.addNewCartesianElement();
				clonedCartesianElement.copyFrom(cartesianElement, null);
			}
		}
	}
	return newCartesianProduct;
};
oFF.QFilter.prototype.m_backProjectionFilterIds = null;
oFF.QFilter.prototype.m_convertFiltersToFlatOnHierarchyChange = false;
oFF.QFilter.prototype.m_dynamicFilter = null;
oFF.QFilter.prototype.m_effectiveFilter = null;
oFF.QFilter.prototype.m_effectiveVisibilityFilter = null;
oFF.QFilter.prototype.m_fixedFilter = null;
oFF.QFilter.prototype.m_flattenHierarchyNodeFiltersFromVariables = false;
oFF.QFilter.prototype.m_ignoreInternalNonMeasureFilters = false;
oFF.QFilter.prototype.m_internalLinkedFilterIds = null;
oFF.QFilter.prototype.m_layeredFilters = null;
oFF.QFilter.prototype.m_layeredVisibilityFilters = null;
oFF.QFilter.prototype.m_tmpFilter = null;
oFF.QFilter.prototype.m_tmpVisibilityFilter = null;
oFF.QFilter.prototype.m_transientZoomDataFilter = null;
oFF.QFilter.prototype.m_transientZoomDisplayFilter = null;
oFF.QFilter.prototype.m_transientZoomVisibilityFilter = null;
oFF.QFilter.prototype.m_uiSettings = null;
oFF.QFilter.prototype.m_valuehelpFilter = null;
oFF.QFilter.prototype.m_valuehelpVisibilityFilter = null;
oFF.QFilter.prototype.m_visibilityFilter = null;
oFF.QFilter.prototype._createEffectiveFilter = function(isVisibility)
{
	let effectiveFilter = this.createFilter();
	let modelCapabilities = this.getModelCapabilities();
	if (oFF.notNull(modelCapabilities) && modelCapabilities.supportsCartesianFilterIntersect())
	{
		effectiveFilter.getModelCapabilities().setSupportsComplexFilter(true);
	}
	effectiveFilter.setName(isVisibility ? oFF.QFilter.EFFECTIVE_VISIBILITY_FILTER_CONTAINER : oFF.QFilter.EFFECTIVE_FILTER_CONTAINER);
	effectiveFilter.setParent(this);
	effectiveFilter.setIsLocked(true);
	return effectiveFilter;
};
oFF.QFilter.prototype._getSourceFilters = function(isVisibility)
{
	let sourceFilters = oFF.XList.create();
	oFF.QFilter.addFilterExpressionRootIfNotNull(isVisibility ? this.m_visibilityFilter : this.m_dynamicFilter, sourceFilters);
	oFF.QFilter.addFilterExpressionRootIfNotNull(isVisibility ? this.m_tmpVisibilityFilter : this.m_tmpFilter, sourceFilters);
	let layeredFilters = isVisibility ? this.m_layeredVisibilityFilters : this.m_layeredFilters;
	let layeredFilter = layeredFilters.getIterator();
	while (layeredFilter.hasNext())
	{
		oFF.QFilter.addFilterExpressionRootIfNotNull(layeredFilter.next(), sourceFilters);
	}
	return sourceFilters;
};
oFF.QFilter.prototype._resolveConflicts = function(filter)
{
	if (filter.getCartesianProduct() !== null)
	{
		let externalizedFilterName = this.getExternalizedFilterName();
		let serverFilter = this.m_layeredFilters.getLayer(externalizedFilterName);
		if (oFF.notNull(serverFilter) && serverFilter !== filter)
		{
			let cartesianProduct = serverFilter.getCartesianProduct();
			if (oFF.notNull(cartesianProduct))
			{
				let iterator = filter.getDimensionsUsedInFilter().getIterator();
				while (iterator.hasNext())
				{
					let dimensionName = iterator.next();
					let cartesianList = cartesianProduct.getCartesianListByDimensionName(dimensionName);
					if (oFF.notNull(cartesianList))
					{
						cartesianProduct.removeByDimensionName(dimensionName);
					}
				}
				if (cartesianProduct.isEmpty())
				{
					this.m_layeredFilters.putLayer(externalizedFilterName, null);
				}
			}
		}
	}
};
oFF.QFilter.prototype.applyFilter = function(filterToApply)
{
	oFF.XObjectExt.assertNotNullExt(filterToApply, "filter to apply must not be null");
	let serializedFilter = filterToApply.serializeToElement(oFF.QModelFormat.INA_REPOSITORY);
	oFF.XObjectExt.assertNotNullExt(serializedFilter, "could not serialize filter to apply");
	let deserializeExt = this.deserializeFromElementExt(oFF.QModelFormat.INA_REPOSITORY, serializedFilter);
	oFF.MessageUtil.checkNoError(deserializeExt);
};
oFF.QFilter.prototype.becomePrimaryParentAndSetName = function(filterExpression, newName)
{
	filterExpression.setParent(this);
	filterExpression.registerChangedListener(this, null);
	filterExpression.setName(newName);
};
oFF.QFilter.prototype.copyFilterManager = function(origin)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , origin, null);
	if (oFF.notNull(origin.m_fixedFilter) && this.getQueryModel() !== null && !this.getQueryModel().isBasedOnMicroCube())
	{
		this.getFixedFilter().copyFrom(origin.m_fixedFilter, null);
	}
	if (oFF.notNull(origin.m_dynamicFilter))
	{
		this.getDynamicFilter().copyFrom(origin.m_dynamicFilter, null);
	}
	if (oFF.notNull(origin.m_visibilityFilter))
	{
		this.getVisibilityFilter().copyFrom(origin.m_visibilityFilter, null);
	}
	let session = this.getSession();
	if (oFF.notNull(session) && session.hasFeature(oFF.FeatureToggleOlap.CLONE_LINKED_FILTERS))
	{
		this.m_layeredFilters.copyFrom(origin.m_layeredFilters, null);
		this.m_layeredVisibilityFilters.copyFrom(origin.m_layeredVisibilityFilters, null);
	}
	this.m_backProjectionFilterIds.clear();
	this.m_backProjectionFilterIds.addAll(origin.m_backProjectionFilterIds);
	this.m_internalLinkedFilterIds.clear();
	this.m_internalLinkedFilterIds.addAll(origin.m_internalLinkedFilterIds);
	this.m_ignoreInternalNonMeasureFilters = origin.m_ignoreInternalNonMeasureFilters;
	this.m_flattenHierarchyNodeFiltersFromVariables = origin.m_flattenHierarchyNodeFiltersFromVariables;
	this.m_convertFiltersToFlatOnHierarchyChange = origin.m_convertFiltersToFlatOnHierarchyChange;
	if (oFF.notNull(origin.m_uiSettings))
	{
		this.m_uiSettings = oFF.XHashMapByString.create();
		this.m_uiSettings.putIfNotNull(oFF.QContextType.RESULT_SET.getName(), oFF.XObjectExt.cloneIfNotNull(origin.m_uiSettings.getByKey(oFF.QContextType.RESULT_SET.getName())));
		this.m_uiSettings.putIfNotNull(oFF.QContextType.SELECTOR.getName(), oFF.XObjectExt.cloneIfNotNull(origin.m_uiSettings.getByKey(oFF.QContextType.SELECTOR.getName())));
		this.m_uiSettings.putIfNotNull(oFF.QContextType.VARIABLE.getName(), oFF.XObjectExt.cloneIfNotNull(origin.m_uiSettings.getByKey(oFF.QContextType.VARIABLE.getName())));
	}
};
oFF.QFilter.prototype.copyFromInternal = function(other, flags)
{
	this.copyFilterManager(other);
};
oFF.QFilter.prototype.createFilter = function()
{
	return oFF.QFilterExpression.create(this, this);
};
oFF.QFilter.prototype.freeAsPrimaryParent = function(filterExpression)
{
	filterExpression.unregisterChangedListener(this);
	oFF.XObjectExt.release(filterExpression);
};
oFF.QFilter.prototype.freeAsSecondaryParent = function(filterExpression)
{
	filterExpression.unregisterChangedListener(this);
	filterExpression.removeSecondaryParent(this);
};
oFF.QFilter.prototype.getBackProjectionFilterIds = function()
{
	return this.m_backProjectionFilterIds;
};
oFF.QFilter.prototype.getDynamicFilter = function()
{
	if (oFF.isNull(this.m_dynamicFilter))
	{
		this.stopEventing();
		this.setDynamicFilter(this.createFilter());
		this.resumeEventing();
	}
	return this.m_dynamicFilter;
};
oFF.QFilter.prototype.getEffectiveFilter = function()
{
	if (oFF.isNull(this.m_effectiveFilter))
	{
		this.m_effectiveFilter = this._createEffectiveFilter(false);
		this.updateEffectiveFilter(false, false);
	}
	return this.m_effectiveFilter;
};
oFF.QFilter.prototype.getEffectiveVisibilityFilter = function()
{
	if (oFF.isNull(this.m_effectiveVisibilityFilter))
	{
		this.m_effectiveVisibilityFilter = this._createEffectiveFilter(true);
		this.updateEffectiveFilter(false, true);
	}
	return this.m_effectiveVisibilityFilter;
};
oFF.QFilter.prototype.getExternalFilter = function()
{
	return this.getLinkedFilter(oFF.QFilter.DEFAULT_FILTER_LAYER);
};
oFF.QFilter.prototype.getExternalizedFilterName = function()
{
	return this.getQueryManager().getInstanceId();
};
oFF.QFilter.prototype.getExternalizedNonVariableFilterName = function()
{
	return oFF.XStringUtils.concatenate2(this.getQueryManager().getInstanceId(), oFF.QFilter.NON_VARIABLE_LAYER_SUFFIX);
};
oFF.QFilter.prototype.getFixedFilter = function()
{
	if (oFF.isNull(this.m_fixedFilter))
	{
		this.stopEventing();
		this.setFixedFilter(this.createFilter());
		this.resumeEventing();
	}
	return this.m_fixedFilter;
};
oFF.QFilter.prototype.getInternalLinkedFilterIds = function()
{
	return this.m_internalLinkedFilterIds;
};
oFF.QFilter.prototype.getLinkedFilter = function(filterName)
{
	return this.m_layeredFilters.getLayer(filterName);
};
oFF.QFilter.prototype.getLinkedFilters = function()
{
	return this.m_layeredFilters.toReadOnly();
};
oFF.QFilter.prototype.getLinkedVisibilityFilter = function(filterName)
{
	return this.m_layeredVisibilityFilters.getLayer(oFF.QFilter.DEFAULT_FILTER_LAYER);
};
oFF.QFilter.prototype.getLinkedVisibilityFilters = function()
{
	return this.m_layeredVisibilityFilters.toReadOnly();
};
oFF.QFilter.prototype.getNamedChildren = function()
{
	let map = oFF.XHashMapByString.create();
	if (this.isFixedFilterInitialized())
	{
		map.put("SelectionSpaceContainer", this.getFixedFilter());
	}
	if (this.isDynamicFilterInitialized())
	{
		map.put("SelectionStateContainer", this.getDynamicFilter());
	}
	if (this.isTmpFilterInitialized())
	{
		map.put("SelectionTmpContainer", this.getTmpFilter());
	}
	if (this.isVisibilityFilterInitialized())
	{
		map.put("SelectionVisibilityContainer", this.getVisibilityFilter());
	}
	if (this.isTmpVisibilityFilterInitialized())
	{
		map.put("SelectionVisibilityTmpContainer", this.getTmpVisibilityFilter());
	}
	return map;
};
oFF.QFilter.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.SELECTOR;
};
oFF.QFilter.prototype.getSelectableDimensions = function()
{
	this.stopEventing();
	let dimList = oFF.QDimensionList.createDimensionList(this.getContext(), this, "Selectable Dimension List");
	let queryModel = this.getContext().getQueryModel();
	let dimensions;
	if (oFF.isNull(queryModel))
	{
		dimensions = this.getDimensionAccessor().getDimensions();
	}
	else
	{
		dimensions = queryModel.getLoadedDimensions();
	}
	let len = dimensions.size();
	for (let i = 0; i < len; i++)
	{
		let dimension = dimensions.get(i);
		if (dimension.isSelectable())
		{
			dimList.add(dimension);
		}
	}
	this.resumeEventing();
	return dimList;
};
oFF.QFilter.prototype.getTmpFilter = function()
{
	if (oFF.isNull(this.m_tmpFilter))
	{
		this.stopEventing();
		this.setTmpFilter(this.createFilter());
		this.resumeEventing();
	}
	return this.m_tmpFilter;
};
oFF.QFilter.prototype.getTmpVisibilityFilter = function()
{
	if (oFF.isNull(this.m_tmpVisibilityFilter))
	{
		this.stopEventing();
		this.setTmpVisibilityFilter(this.createFilter());
		this.resumeEventing();
	}
	return this.m_tmpVisibilityFilter;
};
oFF.QFilter.prototype.getTransientZoomDisplayFilter = function()
{
	if (oFF.isNull(this.m_transientZoomDisplayFilter))
	{
		this.m_transientZoomDisplayFilter = oFF.QFilterCartesianProduct._create(this.getContext(), null);
	}
	return this.m_transientZoomDisplayFilter;
};
oFF.QFilter.prototype.getTransientZoomVisibilityFilter = function()
{
	if (oFF.isNull(this.m_transientZoomVisibilityFilter) && this.getModelCapabilities().supportsVisibilityFilter())
	{
		this.m_transientZoomVisibilityFilter = oFF.QFilterCartesianProduct._create(this.getContext(), null);
	}
	return this.m_transientZoomVisibilityFilter;
};
oFF.QFilter.prototype.getUiSettings = function(contextType)
{
	if (oFF.isNull(this.m_uiSettings))
	{
		this.m_uiSettings = oFF.XHashMapByString.create();
	}
	if (!this.m_uiSettings.containsKey(contextType.getName()))
	{
		this.m_uiSettings.put(contextType.getName(), oFF.QFilterUiSettings.create(this, this));
	}
	return this.m_uiSettings.getByKey(contextType.getName());
};
oFF.QFilter.prototype.getValuehelpFilter = function()
{
	if (oFF.isNull(this.m_valuehelpFilter))
	{
		this.m_valuehelpFilter = this.createFilter();
		this.m_valuehelpFilter.setName(oFF.QFilter.VALUEHELP_FILTER_CONTAINER);
		this.m_valuehelpFilter.setParent(null);
	}
	return this.m_valuehelpFilter;
};
oFF.QFilter.prototype.getValuehelpVisibilityFilter = function()
{
	if (oFF.isNull(this.m_valuehelpVisibilityFilter))
	{
		this.m_valuehelpVisibilityFilter = this.createFilter();
		this.m_valuehelpVisibilityFilter.setName(oFF.QFilter.VALUEHELP_VISIBILITY_FILTER_CONTAINER);
		this.m_valuehelpVisibilityFilter.setParent(null);
	}
	return this.m_valuehelpVisibilityFilter;
};
oFF.QFilter.prototype.getVisibilityFilter = function()
{
	if (oFF.isNull(this.m_visibilityFilter))
	{
		this.stopEventing();
		this.setVisibilityFilter(this.createFilter());
		this.resumeEventing();
	}
	return this.m_visibilityFilter;
};
oFF.QFilter.prototype.getZoomDataFilter = function()
{
	if (oFF.isNull(this.m_transientZoomDataFilter) && !this.getModelCapabilities().supportsVisibilityFilter() && this.getModelCapabilities().supportsComplexTupleFilter())
	{
		this.m_transientZoomDataFilter = oFF.QFilterAnd._create(this.getContext(), null);
	}
	return this.m_transientZoomDataFilter;
};
oFF.QFilter.prototype.hasUiSettings = function(contextType)
{
	return oFF.notNull(this.m_uiSettings) && this.m_uiSettings.getByKey(contextType.getName()) !== null;
};
oFF.QFilter.prototype.invalidateEffectiveFilter = function(isVisibility)
{
	if (isVisibility)
	{
		this.m_effectiveVisibilityFilter = null;
	}
	else
	{
		this.m_effectiveFilter = null;
	}
};
oFF.QFilter.prototype.isComponentNode = function()
{
	return true;
};
oFF.QFilter.prototype.isConvertFiltersToFlatOnHierarchyChange = function()
{
	return this.m_convertFiltersToFlatOnHierarchyChange;
};
oFF.QFilter.prototype.isDimensionConflictingWithLinkedFilters = function(dimension)
{
	return oFF.notNull(dimension) && this.isDimensionNameConflictingWithLinkedFilters(dimension.getName());
};
oFF.QFilter.prototype.isDimensionConflictingWithLocalFilter = function(dimension)
{
	return oFF.notNull(dimension) && this.isDimensionNameConflictingWithLocalFilter(dimension.getName());
};
oFF.QFilter.prototype.isDimensionNameConflictingWithLinkedFilters = function(dimensionName)
{
	let dimensionAccessor = this.getDimensionAccessor();
	if (oFF.notNull(dimensionAccessor) && oFF.XStringUtils.isNotNullAndNotEmpty(dimensionName))
	{
		let layeredFilters = this.m_layeredFilters.getIterator();
		while (layeredFilters.hasNext())
		{
			let filterLayer = layeredFilters.next();
			if (oFF.notNull(filterLayer) && filterLayer.isAll() && filterLayer.isCartesianProduct())
			{
				let cartesianProduct = filterLayer.getFilterExpression().getCartesianProduct();
				if (oFF.notNull(cartesianProduct))
				{
					let cartesianList = cartesianProduct.getCartesianListByDimensionName(dimensionName);
					return oFF.XCollectionUtils.hasElements(cartesianList);
				}
			}
		}
	}
	return false;
};
oFF.QFilter.prototype.isDimensionNameConflictingWithLocalFilter = function(dimensionName)
{
	let dimensionAccessor = this.getDimensionAccessor();
	if (oFF.notNull(dimensionAccessor) && oFF.XStringUtils.isNotNullAndNotEmpty(dimensionName))
	{
		let dimension = dimensionAccessor.getDimensionByName(dimensionName);
		let effectiveFilter = this.getEffectiveFilter();
		if (oFF.notNull(dimension) && oFF.notNull(effectiveFilter) && effectiveFilter.isAll() && effectiveFilter.isCartesianProduct())
		{
			let cartesianProduct = effectiveFilter.getFilterExpression().getCartesianProduct();
			if (oFF.notNull(cartesianProduct))
			{
				let cartesianList = cartesianProduct.getCartesianList(dimension);
				return oFF.XCollectionUtils.hasElements(cartesianList);
			}
		}
	}
	return false;
};
oFF.QFilter.prototype.isDynamicFilterInitialized = function()
{
	return oFF.notNull(this.m_dynamicFilter);
};
oFF.QFilter.prototype.isFilterConflictingWithLocalFilter = function(filter)
{
	if (oFF.notNull(filter) && filter.isCartesianProduct())
	{
		let cartesianProduct = filter.getCartesianProduct();
		for (let i = 0; i < cartesianProduct.size(); i++)
		{
			let cartesianList = cartesianProduct.getCartesianChild(i);
			let currentDimensionName = cartesianList.getDimensionName();
			if (oFF.notNull(currentDimensionName))
			{
				let conflictDetected = this.isDimensionNameConflictingWithLocalFilter(currentDimensionName);
				if (conflictDetected)
				{
					return true;
				}
			}
		}
	}
	return false;
};
oFF.QFilter.prototype.isFixedFilterInitialized = function()
{
	return oFF.notNull(this.m_fixedFilter);
};
oFF.QFilter.prototype.isFlattenHierarchyNodeFiltersFromVariables = function()
{
	return this.m_flattenHierarchyNodeFiltersFromVariables;
};
oFF.QFilter.prototype.isIgnoreInternalNonMeasureFilter = function()
{
	return this.m_ignoreInternalNonMeasureFilters;
};
oFF.QFilter.prototype.isTmpFilterInitialized = function()
{
	return oFF.notNull(this.m_tmpFilter);
};
oFF.QFilter.prototype.isTmpVisibilityFilterInitialized = function()
{
	return oFF.notNull(this.m_tmpVisibilityFilter);
};
oFF.QFilter.prototype.isValueHelpFilterInitialized = function()
{
	return oFF.notNull(this.m_valuehelpFilter);
};
oFF.QFilter.prototype.isValueHelpVisibilityFilterInitialized = function()
{
	return oFF.notNull(this.m_valuehelpVisibilityFilter);
};
oFF.QFilter.prototype.isVisibilityFilterInitialized = function()
{
	return oFF.notNull(this.m_visibilityFilter);
};
oFF.QFilter.prototype.linkFilter = function(filterName, filter)
{
	this.m_layeredFilters.putLayer(filterName, filter);
	this.invalidateEffectiveFilter(false);
};
oFF.QFilter.prototype.linkFilterElement = function(filterName, filterElement)
{
	let filterExpression = oFF.QFilterExpression.create(this, this);
	filterExpression.setComplexRoot(filterElement);
	this.linkFilter(filterName, filterExpression);
};
oFF.QFilter.prototype.linkFilterElementIfApplicable = function(filterName, filterElement)
{
	let filterExpression = oFF.QFilterExpression.create(this, this);
	filterExpression.setComplexRoot(filterElement);
	let isApplicable = oFF.QFilterUtil.isFilterApplicable(filterExpression, this.getModelCapabilities());
	if (isApplicable)
	{
		this.linkFilter(filterName, filterExpression);
	}
	return isApplicable;
};
oFF.QFilter.prototype.linkFilterExt = function(filterName, filter, isBackProjection, isInternalLinkForLov)
{
	if (isBackProjection)
	{
		if (oFF.isNull(filter))
		{
			let filterLayerToUnlink = this.m_layeredFilters.getLayer(filterName);
			if (oFF.notNull(filterLayerToUnlink))
			{
				this.m_backProjectionFilterIds.removeElement(filterLayerToUnlink.getUniqueId());
			}
		}
		else
		{
			this._resolveConflicts(filter);
			this.m_backProjectionFilterIds.add(filter.getUniqueId());
		}
	}
	if (isInternalLinkForLov)
	{
		if (oFF.isNull(filter))
		{
			this.m_internalLinkedFilterIds.removeElement(filterName);
		}
		else
		{
			this.m_internalLinkedFilterIds.add(filterName);
		}
	}
	this.linkFilter(filterName, filter);
};
oFF.QFilter.prototype.linkFilterExtIfApplicable = function(filterName, filter, isBackProjection, isInternalLinkForLov)
{
	let isApplicable = oFF.QFilterUtil.isFilterApplicable(filter, this.getModelCapabilities());
	if (isApplicable)
	{
		this.linkFilterExt(filterName, filter, isBackProjection, isInternalLinkForLov);
	}
	return isApplicable;
};
oFF.QFilter.prototype.linkFilterIfApplicable = function(filterName, filter)
{
	let isApplicable = oFF.QFilterUtil.isFilterApplicable(filter, this.getModelCapabilities());
	if (isApplicable)
	{
		this.linkFilter(filterName, filter);
	}
	return isApplicable;
};
oFF.QFilter.prototype.linkFilters = function(layeredFilter)
{
	this.m_layeredFilters.copy(layeredFilter);
	this.invalidateEffectiveFilter(false);
};
oFF.QFilter.prototype.linkFiltersIfApplicable = function(layeredFilter)
{
	if (!oFF.XCollectionUtils.hasElements(layeredFilter))
	{
		return false;
	}
	let modelCapabilities = this.getModelCapabilities();
	let iterator = layeredFilter.getIterator();
	while (iterator.hasNext())
	{
		if (!oFF.QFilterUtil.isFilterApplicable(iterator.next(), modelCapabilities))
		{
			return false;
		}
	}
	this.linkFilters(layeredFilter);
	return true;
};
oFF.QFilter.prototype.linkVisibilityFilter = function(filterName, visibilityFilter)
{
	if (this.getModelCapabilities().supportsVisibilityFilter())
	{
		this.m_layeredVisibilityFilters.putLayer(filterName, visibilityFilter);
		this.invalidateEffectiveFilter(true);
	}
};
oFF.QFilter.prototype.linkVisibilityFilterIfApplicable = function(filterName, visibilityFilter)
{
	if (!this.getModelCapabilities().supportsVisibilityFilter())
	{
		return false;
	}
	let isApplicable = oFF.QFilterUtil.isFilterApplicable(visibilityFilter, this.getModelCapabilities());
	if (isApplicable)
	{
		this.linkVisibilityFilter(filterName, visibilityFilter);
	}
	return isApplicable;
};
oFF.QFilter.prototype.mergeDeepRecursive = function(settings, other)
{
	let otherObj = other;
	if (otherObj.isDynamicFilterInitialized() || this.isDynamicFilterInitialized())
	{
		this.getDynamicFilter().mergeDeepRecursive(settings, otherObj.getDynamicFilter());
	}
	if (otherObj.isFixedFilterInitialized() || this.isFixedFilterInitialized())
	{
		this.getFixedFilter().mergeDeepRecursive(settings, otherObj.getFixedFilter());
	}
};
oFF.QFilter.prototype.onModelComponentChanged = function(modelComponent, customIdentifier)
{
	if (oFF.isNull(modelComponent))
	{
		return;
	}
	if (modelComponent.getOlapComponentType() === oFF.OlapComponentType.FILTER_EXPRESSION)
	{
		if (modelComponent === this.m_dynamicFilter || modelComponent === this.m_tmpFilter || this.m_layeredFilters.contains(modelComponent))
		{
			this.invalidateEffectiveFilter(false);
		}
		if (modelComponent === this.m_visibilityFilter || modelComponent === this.m_tmpVisibilityFilter || this.m_layeredVisibilityFilters.contains(modelComponent))
		{
			this.invalidateEffectiveFilter(true);
		}
	}
};
oFF.QFilter.prototype.releaseObject = function()
{
	this.m_effectiveFilter = oFF.XObjectExt.release(this.m_effectiveFilter);
	this.m_effectiveVisibilityFilter = oFF.XObjectExt.release(this.m_effectiveVisibilityFilter);
	this.m_layeredFilters = oFF.XObjectExt.release(this.m_layeredFilters);
	this.m_layeredVisibilityFilters = oFF.XObjectExt.release(this.m_layeredVisibilityFilters);
	if (oFF.notNull(this.m_tmpFilter))
	{
		this.freeAsSecondaryParent(this.m_tmpFilter);
		this.m_tmpFilter = null;
	}
	this.m_fixedFilter = oFF.XObjectExt.release(this.m_fixedFilter);
	this.m_dynamicFilter = oFF.XObjectExt.release(this.m_dynamicFilter);
	this.m_visibilityFilter = oFF.XObjectExt.release(this.m_visibilityFilter);
	this.m_tmpVisibilityFilter = oFF.XObjectExt.release(this.m_tmpVisibilityFilter);
	this.m_valuehelpFilter = oFF.XObjectExt.release(this.m_valuehelpFilter);
	this.m_valuehelpVisibilityFilter = oFF.XObjectExt.release(this.m_valuehelpVisibilityFilter);
	this.m_backProjectionFilterIds = oFF.XObjectExt.release(this.m_backProjectionFilterIds);
	this.m_internalLinkedFilterIds = oFF.XObjectExt.release(this.m_internalLinkedFilterIds);
	this.m_transientZoomVisibilityFilter = oFF.XObjectExt.release(this.m_transientZoomVisibilityFilter);
	this.m_transientZoomDataFilter = oFF.XObjectExt.release(this.m_transientZoomDataFilter);
	this.m_transientZoomDisplayFilter = oFF.XObjectExt.release(this.m_transientZoomDisplayFilter);
	this.m_uiSettings = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_uiSettings);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QFilter.prototype.resetEffectiveFilter = function()
{
	this.m_effectiveFilter = oFF.XObjectExt.release(this.m_effectiveFilter);
};
oFF.QFilter.prototype.resetTransientZoomFilters = function()
{
	if (oFF.notNull(this.m_transientZoomDataFilter))
	{
		this.m_transientZoomDataFilter.clear();
	}
	if (oFF.notNull(this.m_transientZoomVisibilityFilter))
	{
		this.m_transientZoomVisibilityFilter.clear();
	}
	if (oFF.notNull(this.m_transientZoomDisplayFilter))
	{
		this.m_transientZoomDisplayFilter.clear();
	}
};
oFF.QFilter.prototype.setConvertFiltersToFlatOnHierarchyChange = function(convertFiltersToFlatOnHierarchyChange)
{
	this.m_convertFiltersToFlatOnHierarchyChange = convertFiltersToFlatOnHierarchyChange;
};
oFF.QFilter.prototype.setDynamicFilter = function(dynamicFilter)
{
	if (this.m_dynamicFilter === dynamicFilter)
	{
		return;
	}
	if (oFF.notNull(this.m_dynamicFilter))
	{
		this.freeAsPrimaryParent(this.m_dynamicFilter);
		this.m_dynamicFilter = null;
	}
	if (oFF.notNull(dynamicFilter))
	{
		this.m_dynamicFilter = dynamicFilter;
		this.becomePrimaryParentAndSetName(this.m_dynamicFilter, oFF.QFilter.DYNAMIC_FILTER_CONTAINER);
	}
	this.notifyNodeChanged();
	this.invalidateEffectiveFilter(false);
};
oFF.QFilter.prototype.setExternalFilter = function(externalFilter)
{
	this.linkFilter(oFF.QFilter.DEFAULT_FILTER_LAYER, externalFilter);
};
oFF.QFilter.prototype.setFixedFilter = function(fixedFilter)
{
	if (this.m_fixedFilter === fixedFilter)
	{
		return;
	}
	if (oFF.notNull(this.m_fixedFilter))
	{
		this.freeAsPrimaryParent(this.m_fixedFilter);
		this.m_fixedFilter.setIsLocked(false);
		this.m_fixedFilter = null;
	}
	if (oFF.notNull(fixedFilter))
	{
		this.m_fixedFilter = fixedFilter;
		this.m_fixedFilter.setIsLocked(true);
		this.becomePrimaryParentAndSetName(this.m_fixedFilter, oFF.QFilter.FIXED_FILTER_CONTAINER);
	}
	this.notifyNodeChanged();
};
oFF.QFilter.prototype.setFlattenHierarchyNodeFiltersFromVariables = function(flattenHierarchyNodeFiltersFromVariables)
{
	this.m_flattenHierarchyNodeFiltersFromVariables = flattenHierarchyNodeFiltersFromVariables;
};
oFF.QFilter.prototype.setIgnoreInternalNonMeasureFilters = function(ignore)
{
	this.m_ignoreInternalNonMeasureFilters = ignore;
	this.notifyNodeChanged();
};
oFF.QFilter.prototype.setTmpFilter = function(tmpFilter)
{
	if (this.m_tmpFilter === tmpFilter)
	{
		return;
	}
	if (oFF.notNull(this.m_tmpFilter))
	{
		this.freeAsPrimaryParent(this.m_tmpFilter);
		this.m_tmpFilter = null;
	}
	if (oFF.notNull(tmpFilter))
	{
		this.m_tmpFilter = tmpFilter;
		this.becomePrimaryParentAndSetName(this.m_tmpFilter, oFF.QFilter.TEMPORARY_FILTER_CONTAINER);
	}
	this.notifyNodeChanged();
	this.invalidateEffectiveFilter(false);
};
oFF.QFilter.prototype.setTmpVisibilityFilter = function(tmpVisibilityFilter)
{
	if (this.m_tmpVisibilityFilter === tmpVisibilityFilter)
	{
		return;
	}
	if (oFF.notNull(this.m_tmpVisibilityFilter))
	{
		this.freeAsPrimaryParent(this.m_tmpVisibilityFilter);
		this.m_tmpVisibilityFilter = null;
	}
	if (oFF.notNull(tmpVisibilityFilter))
	{
		this.m_tmpVisibilityFilter = tmpVisibilityFilter;
		this.becomePrimaryParentAndSetName(this.m_tmpVisibilityFilter, oFF.QFilter.TEMPORARY_VISIBILITY_FILTER_CONTAINER);
	}
	this.notifyNodeChanged();
	this.invalidateEffectiveFilter(true);
};
oFF.QFilter.prototype.setVisibilityFilter = function(visibilityFilter)
{
	if (this.m_visibilityFilter === visibilityFilter)
	{
		return;
	}
	if (oFF.notNull(this.m_visibilityFilter))
	{
		this.freeAsPrimaryParent(this.m_visibilityFilter);
		this.m_visibilityFilter = null;
	}
	if (oFF.notNull(visibilityFilter))
	{
		this.m_visibilityFilter = visibilityFilter;
		this.becomePrimaryParentAndSetName(this.m_visibilityFilter, oFF.QFilter.VISIBILITY_FILTER_CONTAINER);
	}
	this.notifyNodeChanged();
	this.invalidateEffectiveFilter(true);
};
oFF.QFilter.prototype.setupFilter = function(context, parentComponent)
{
	this.setupModelComponentWithName(context, parentComponent, "filterManager");
	this.m_layeredFilters = oFF.QLayeredFilter.create(this.getContext(), this);
	this.m_layeredVisibilityFilters = oFF.QLayeredFilter.create(this.getContext(), this);
	this.m_backProjectionFilterIds = oFF.XHashSetOfString.create();
	this.m_internalLinkedFilterIds = oFF.XHashSetOfString.create();
};
oFF.QFilter.prototype.unlinkExternalFilters = function()
{
	let linkedFilters = this.getLinkedFilters();
	let keysToClean = oFF.XStream.ofString(linkedFilters.getKeysAsReadOnlyList()).filter((key) => {
		return !linkedFilters.getByKey(key.getString()).isPreservedInRepoSerialization();
	}).collect(oFF.XStreamCollector.toListOfString((ks) => {
		return ks.getString();
	}));
	oFF.XCollectionUtils.forEach(keysToClean, (ktc) => {
		this.linkFilter(ktc, null);
	});
	this.invalidateEffectiveFilter(false);
};
oFF.QFilter.prototype.unlinkFilters = function()
{
	this.m_layeredFilters.clear();
	this.invalidateEffectiveFilter(false);
};
oFF.QFilter.prototype.unlinkInternalFilters = function()
{
	let linkedFilters = this.getLinkedFilters();
	let keysToClean = oFF.XStream.ofString(linkedFilters.getKeysAsReadOnlyList()).filter((key) => {
		return linkedFilters.getByKey(key.getString()).isPreservedInRepoSerialization();
	}).collect(oFF.XStreamCollector.toListOfString((ks) => {
		return ks.getString();
	}));
	oFF.XCollectionUtils.forEach(keysToClean, (ktc) => {
		this.linkFilter(ktc, null);
	});
	this.invalidateEffectiveFilter(false);
};
oFF.QFilter.prototype.updateEffectiveFilter = function(withEvents, isVisibility)
{
	let effectiveFilter = isVisibility ? this.m_effectiveVisibilityFilter : this.m_effectiveFilter;
	if (oFF.isNull(effectiveFilter))
	{
		return;
	}
	let sourceFilterRoots = this._getSourceFilters(isVisibility);
	if (withEvents)
	{
		effectiveFilter.queueEventing();
	}
	else
	{
		effectiveFilter.stopEventing();
	}
	let isLocked = effectiveFilter.isLocked();
	if (isLocked)
	{
		effectiveFilter.setIsLocked(false);
	}
	if (effectiveFilter.isCartesianProduct())
	{
		effectiveFilter.setCartesianProduct(null);
	}
	if (effectiveFilter.isComplexFilter())
	{
		effectiveFilter.setComplexRoot(null);
	}
	let effectiveModelCapabilities = effectiveFilter.getModelCapabilities();
	if (effectiveModelCapabilities.supportsCellValueOperand())
	{
		effectiveFilter.clearCellValueFilter();
		effectiveFilter.setIsSuppressingNulls(false);
	}
	let sizeSourceRoots = sourceFilterRoots.size();
	if (sizeSourceRoots > 0)
	{
		if (effectiveModelCapabilities.supportsMultiComplexFilter())
		{
			if (sizeSourceRoots === 1)
			{
				effectiveFilter.setComplexRoot(sourceFilterRoots.get(0));
			}
			else
			{
				let rootElementAnd = oFF.QFactory.createFilterAnd(effectiveFilter);
				rootElementAnd.setHasChildOwnership(false);
				rootElementAnd.addAll(sourceFilterRoots);
				effectiveFilter.setComplexRoot(rootElementAnd);
			}
		}
		else
		{
			if (sizeSourceRoots === 1)
			{
				let singleCartesianElement = sourceFilterRoots.get(0);
				let filterExpression = singleCartesianElement.getFilterExpression();
				if (oFF.notNull(filterExpression))
				{
					let singleCartesianProduct = filterExpression.getCartesianProduct();
					if (oFF.notNull(singleCartesianProduct) && singleCartesianProduct.hasElements())
					{
						let singleCartesianProductClone = oFF.QFactory.createFilterCartesianProduct(effectiveFilter);
						singleCartesianProductClone.copyFrom(singleCartesianProduct, null);
						effectiveFilter.setCartesianProduct(singleCartesianProductClone);
					}
				}
			}
			else
			{
				let cartesianProduct = oFF.QFactory.createFilterCartesianProduct(effectiveFilter);
				let context = cartesianProduct.getContext();
				for (let n = 0; n < sizeSourceRoots; n++)
				{
					let currentFilterElement = sourceFilterRoots.get(n);
					let currentCartesianProduct = currentFilterElement.getFilterExpression().getCartesianProduct();
					cartesianProduct = oFF.QFilter.mergeCartesianProducts(cartesianProduct, currentCartesianProduct, context, cartesianProduct);
				}
				if (cartesianProduct.hasElements())
				{
					effectiveFilter.setCartesianProduct(cartesianProduct);
				}
			}
		}
		if (effectiveModelCapabilities.supportsCellValueOperand())
		{
			for (let k = 0; k < sizeSourceRoots; k++)
			{
				oFF.QFilter.addCellValueFilters(sourceFilterRoots.get(k).getFilterExpression(), effectiveFilter);
			}
		}
	}
	if (isLocked)
	{
		effectiveFilter.setIsLocked(true);
	}
	effectiveFilter.resumeEventing();
};

oFF.QFilterCapabilityGroup = function() {};
oFF.QFilterCapabilityGroup.prototype = new oFF.QModelComponent();
oFF.QFilterCapabilityGroup.prototype._ff_c = "QFilterCapabilityGroup";

oFF.QFilterCapabilityGroup._createFilterCapabilityGroup = function(context, parentContext, field)
{
	let selectionCapabilities = new oFF.QFilterCapabilityGroup();
	selectionCapabilities.setupSelectionCapabilities(context, parentContext, field);
	return selectionCapabilities;
};
oFF.QFilterCapabilityGroup.prototype.m_fieldName = null;
oFF.QFilterCapabilityGroup.prototype.m_groupQuery = null;
oFF.QFilterCapabilityGroup.prototype.m_groupValueHelp = null;
oFF.QFilterCapabilityGroup.prototype.m_isSameAcrossContexts = true;
oFF.QFilterCapabilityGroup.prototype.addSupportedSetSign = oFF.noSupport;
oFF.QFilterCapabilityGroup.prototype.addSupportedSetSignByContext = oFF.noSupport;
oFF.QFilterCapabilityGroup.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originFilterCapabilityGroup = other;
	this.m_fieldName = originFilterCapabilityGroup.m_fieldName;
	this.m_groupQuery = originFilterCapabilityGroup.m_groupQuery;
	this.m_groupValueHelp = originFilterCapabilityGroup.m_groupValueHelp;
	this.m_isSameAcrossContexts = originFilterCapabilityGroup.m_isSameAcrossContexts;
};
oFF.QFilterCapabilityGroup.prototype.getFieldName = function()
{
	return this.m_fieldName;
};
oFF.QFilterCapabilityGroup.prototype.getGroup = function()
{
	return this.getGroupByContext(null);
};
oFF.QFilterCapabilityGroup.prototype.getGroupByContext = function(context)
{
	return (context === oFF.QContextType.SELECTOR && !this.m_isSameAcrossContexts) ? this.m_groupValueHelp : this.m_groupQuery;
};
oFF.QFilterCapabilityGroup.prototype.getModifiableSupportedComparisonOperators = oFF.noSupport;
oFF.QFilterCapabilityGroup.prototype.getModifiableSupportedComparisonOperatorsByContext = oFF.noSupport;
oFF.QFilterCapabilityGroup.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.FILTER_CAPABILITY_GROUP;
};
oFF.QFilterCapabilityGroup.prototype.getSupportedComparisonOperators = function(setSign)
{
	return this.getSupportedComparisonOperatorsForContext(setSign, oFF.QContextType.RESULT_SET);
};
oFF.QFilterCapabilityGroup.prototype.getSupportedComparisonOperatorsForContext = function(setSign, context)
{
	let group = this.getGroupByContext(context);
	if (oFF.isNull(group) || group.getComparisonOperatorsForSign(setSign) === null)
	{
		return oFF.XListOfNameObject.create();
	}
	return group.getComparisonOperatorsForSign(setSign);
};
oFF.QFilterCapabilityGroup.prototype.getSupportedComparisonOperatorsForValueHelpAndReadMode = function(setSign, readMode)
{
	return this.getSupportedComparisonOperatorsForContext(setSign, readMode === oFF.QMemberReadMode.MASTER ? oFF.QContextType.SELECTOR : oFF.QContextType.RESULT_SET);
};
oFF.QFilterCapabilityGroup.prototype.getSupportedSetSign = function()
{
	return this.getSupportedSetSignForContext(oFF.QContextType.RESULT_SET);
};
oFF.QFilterCapabilityGroup.prototype.getSupportedSetSignForContext = function(context)
{
	let ctx = context;
	if (ctx === oFF.QContextType.SELECTOR && this.m_isSameAcrossContexts)
	{
		ctx = oFF.QContextType.RESULT_SET;
	}
	let group = this.getGroupByContext(ctx);
	if (oFF.isNull(group) || group.getSetSigns() === null)
	{
		return oFF.XListOfNameObject.create();
	}
	return group.getSetSigns();
};
oFF.QFilterCapabilityGroup.prototype.getSupportedSetSignsForValueHelpAndReadMode = function(readMode)
{
	return this.getSupportedSetSignForContext(readMode === oFF.QMemberReadMode.MASTER ? oFF.QContextType.SELECTOR : oFF.QContextType.RESULT_SET);
};
oFF.QFilterCapabilityGroup.prototype.isFilterCapabilityGroup = function()
{
	return true;
};
oFF.QFilterCapabilityGroup.prototype.releaseObject = function()
{
	this.m_fieldName = null;
	this.m_groupQuery = null;
	this.m_groupValueHelp = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QFilterCapabilityGroup.prototype.setGroup = function(group)
{
	this.setGroupByContext(group, null);
};
oFF.QFilterCapabilityGroup.prototype.setGroupByContext = function(group, context)
{
	if (context === oFF.QContextType.SELECTOR && !this.m_isSameAcrossContexts)
	{
		this.m_groupValueHelp = group;
	}
	else
	{
		this.m_groupQuery = group;
	}
};
oFF.QFilterCapabilityGroup.prototype.setIsSameAcrossContexts = function(isSameAcrossContexts)
{
	this.m_isSameAcrossContexts = isSameAcrossContexts;
};
oFF.QFilterCapabilityGroup.prototype.setSupportsValueHelpOnly = oFF.noSupport;
oFF.QFilterCapabilityGroup.prototype.setupSelectionCapabilities = function(context, parentContext, field)
{
	this.setupModelComponent(context, parentContext);
	if (oFF.notNull(field))
	{
		this.m_fieldName = field.getName();
	}
};
oFF.QFilterCapabilityGroup.prototype.supportsSetSign = function(setSign)
{
	return this.supportsSetSignForValueHelpAndReadMode(setSign, null);
};
oFF.QFilterCapabilityGroup.prototype.supportsSetSignForValueHelpAndReadMode = function(setSign, readMode)
{
	let group = this.getGroupByContext(readMode === oFF.QMemberReadMode.MASTER ? oFF.QContextType.SELECTOR : oFF.QContextType.RESULT_SET);
	return oFF.notNull(group) && group.getSetSigns().contains(setSign);
};
oFF.QFilterCapabilityGroup.prototype.supportsValueHelpOnly = function()
{
	return false;
};

oFF.QFilterCellValueOperand = function() {};
oFF.QFilterCellValueOperand.prototype = new oFF.QFilterElement();
oFF.QFilterCellValueOperand.prototype._ff_c = "QFilterCellValueOperand";

oFF.QFilterCellValueOperand._create = function(context, parentNode, lowValue, highValue, comparisonOperator)
{
	let cvo = new oFF.QFilterCellValueOperand();
	cvo.setupCellValueOperand(context, parentNode, lowValue, highValue, comparisonOperator);
	return cvo;
};
oFF.QFilterCellValueOperand.createForNullSuppression = function(context, parentNode)
{
	let cvo = new oFF.QFilterCellValueOperand();
	cvo.setupCellValueOperand(context, parentNode, null, null, oFF.ComparisonOperator.IS_NULL);
	cvo.setIsExcluding(true);
	return cvo;
};
oFF.QFilterCellValueOperand.createWithExpression = function(context, selectionContainer, parentNode)
{
	let obj = new oFF.QFilterCellValueOperand();
	obj.setupFilterElement(context, selectionContainer, parentNode);
	obj.setupCellValueOperand(context, parentNode, null, null, oFF.ComparisonOperator.EQUAL);
	return obj;
};
oFF.QFilterCellValueOperand.createWithVariable = function(context, parentNode, lowVariable, highVariable, comparisonOperator)
{
	let cvo = new oFF.QFilterCellValueOperand();
	cvo.setupCellValueOperand(context, parentNode, lowVariable.getName(), null, comparisonOperator);
	cvo.m_lowValue.setVariableValue(lowVariable);
	cvo.m_highValue.setVariableValue(highVariable);
	return cvo;
};
oFF.QFilterCellValueOperand.prototype.m_highValue = null;
oFF.QFilterCellValueOperand.prototype.m_isExcluding = false;
oFF.QFilterCellValueOperand.prototype.m_lowValue = null;
oFF.QFilterCellValueOperand.prototype.m_operator = null;
oFF.QFilterCellValueOperand.prototype.copyFromInternal = function(other, flags)
{
	oFF.QFilterElement.prototype.copyFromInternal.call( this , other, flags);
	let originFilterCellValueOperand = other;
	this.m_operator = originFilterCellValueOperand.m_operator;
	this.m_isExcluding = originFilterCellValueOperand.m_isExcluding;
	if (oFF.notNull(originFilterCellValueOperand.m_lowValue))
	{
		this.getLowValue().copyFrom(originFilterCellValueOperand.getLowValue(), flags);
	}
	if (oFF.notNull(originFilterCellValueOperand.m_highValue))
	{
		this.getHighValue().copyFrom(originFilterCellValueOperand.getHighValue(), flags);
	}
};
oFF.QFilterCellValueOperand.prototype.getComparisonOperator = function()
{
	return this.m_operator;
};
oFF.QFilterCellValueOperand.prototype.getHigh = function()
{
	return this.m_highValue.getString();
};
oFF.QFilterCellValueOperand.prototype.getHighValue = function()
{
	return this.m_highValue;
};
oFF.QFilterCellValueOperand.prototype.getLow = function()
{
	return this.m_lowValue.getString();
};
oFF.QFilterCellValueOperand.prototype.getLowValue = function()
{
	return this.m_lowValue;
};
oFF.QFilterCellValueOperand.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.FILTER_CELL_VALUE_OPERAND;
};
oFF.QFilterCellValueOperand.prototype.getValueAt = function(index)
{
	if (index === 0)
	{
		return this.m_lowValue;
	}
	if (index === 1)
	{
		return this.m_highValue;
	}
	return null;
};
oFF.QFilterCellValueOperand.prototype.hasElements = function()
{
	return true;
};
oFF.QFilterCellValueOperand.prototype.isEmpty = function()
{
	return false;
};
oFF.QFilterCellValueOperand.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let otherCvo = other;
	if (!oFF.XString.isEqual(this.getLow(), otherCvo.getLow()))
	{
		return false;
	}
	if (this.isLowVariable() !== otherCvo.isLowVariable())
	{
		return false;
	}
	if (!oFF.XString.isEqual(this.getHigh(), otherCvo.getHigh()))
	{
		return false;
	}
	if (this.isHighVariable() !== otherCvo.isHighVariable())
	{
		return false;
	}
	if (this.getComparisonOperator() !== otherCvo.getComparisonOperator())
	{
		return false;
	}
	if (this.isExcluding() !== otherCvo.isExcluding())
	{
		return false;
	}
	return true;
};
oFF.QFilterCellValueOperand.prototype.isExcluding = function()
{
	return this.m_isExcluding;
};
oFF.QFilterCellValueOperand.prototype.isHighVariable = function()
{
	return this.m_highValue.getValueType() === oFF.XValueType.VARIABLE;
};
oFF.QFilterCellValueOperand.prototype.isLowVariable = function()
{
	return this.m_lowValue.getValueType() === oFF.XValueType.VARIABLE;
};
oFF.QFilterCellValueOperand.prototype.releaseObject = function()
{
	this.m_highValue = oFF.XObjectExt.release(this.m_highValue);
	this.m_lowValue = oFF.XObjectExt.release(this.m_lowValue);
	this.m_operator = null;
	oFF.QFilterElement.prototype.releaseObject.call( this );
};
oFF.QFilterCellValueOperand.prototype.setComparisonOperator = function(comparisonOperator)
{
	this.m_operator = comparisonOperator;
};
oFF.QFilterCellValueOperand.prototype.setHigh = function(highValue)
{
	this.m_highValue.setString(highValue);
};
oFF.QFilterCellValueOperand.prototype.setHighVariable = function(variable)
{
	if (oFF.isNull(variable))
	{
		this.setHigh(null);
	}
	else
	{
		this.m_highValue.setVariableValue(variable);
	}
};
oFF.QFilterCellValueOperand.prototype.setIsExcluding = function(isExcluding)
{
	this.m_isExcluding = isExcluding;
};
oFF.QFilterCellValueOperand.prototype.setLow = function(lowValue)
{
	this.m_lowValue.setString(lowValue);
};
oFF.QFilterCellValueOperand.prototype.setLowVariable = function(variable)
{
	if (oFF.isNull(variable))
	{
		this.setLow(null);
	}
	else
	{
		this.m_lowValue.setVariableValue(variable);
	}
};
oFF.QFilterCellValueOperand.prototype.setupCellValueOperand = function(context, parentNode, lowValue, highValue, comparisonOperator)
{
	this.setupModelComponent(context, parentNode);
	this.m_isExcluding = false;
	this.setComparisonOperator(comparisonOperator);
	this.m_lowValue = oFF.QFactory.createFilterValueBag(context, null, this);
	this.m_lowValue.setString(lowValue);
	this.m_highValue = oFF.QFactory.createFilterValueBag(context, null, this);
	this.m_highValue.setString(highValue);
};
oFF.QFilterCellValueOperand.prototype.size = function()
{
	return 2;
};

oFF.QFilterExpression = function() {};
oFF.QFilterExpression.prototype = new oFF.QModelComponent();
oFF.QFilterExpression.prototype._ff_c = "QFilterExpression";

oFF.QFilterExpression.compareDimension = function(d1, d2)
{
	if (d1 === d2)
	{
		return true;
	}
	if (oFF.isNull(d1) || oFF.isNull(d2))
	{
		return false;
	}
	if (d1.getQueryModel() !== d2.getQueryModel())
	{
		return false;
	}
	return oFF.XString.isEqual(d1.getName(), d2.getName());
};
oFF.QFilterExpression.compareField = function(f1, f2)
{
	if (f1 === f2)
	{
		return true;
	}
	if (oFF.isNull(f1) || oFF.isNull(f2))
	{
		return false;
	}
	return oFF.QFilterExpression.compareDimension(f1.getDimension(), f2.getDimension());
};
oFF.QFilterExpression.compareFilter = function(s1, s2)
{
	if (oFF.isNull(s1) || oFF.isNull(s2))
	{
		throw oFF.XException.createRuntimeException("null comparison");
	}
	if (s1.getComparisonOperator() !== s2.getComparisonOperator())
	{
		return false;
	}
	if (s1.getExactness() !== s2.getExactness())
	{
		return false;
	}
	if (!oFF.QFilterExpression.compareField(s1.getField(), s2.getField()))
	{
		return false;
	}
	if (s1.hasDepth() !== s2.hasDepth())
	{
		return false;
	}
	if (s1.hasDepth() && s1.getDepth() !== s2.getDepth())
	{
		return false;
	}
	if (s1.hasLevelOffset() !== s2.hasLevelOffset())
	{
		return false;
	}
	if (s1.getLevelOffset() !== s2.getLevelOffset())
	{
		return false;
	}
	if (!oFF.QFilterExpression.compareFilterValueBag(s1.getHigh(), s2.getHigh()))
	{
		return false;
	}
	return oFF.QFilterExpression.compareFilterValueBag(s1.getLow(), s2.getLow());
};
oFF.QFilterExpression.compareFilterValueBag = function(b1, b2)
{
	if (b1 === b2)
	{
		return false;
	}
	if (oFF.isNull(b1) || oFF.isNull(b2))
	{
		return false;
	}
	let starWildcard1 = b1.supportsStarWildcard() && b1.isStarWildcardEnabled();
	let starWildcard2 = b2.supportsStarWildcard() && b2.isStarWildcardEnabled();
	return starWildcard1 === starWildcard2 && oFF.QFilterExpression.compareValue(b1.getValue(), b2.getValue());
};
oFF.QFilterExpression.compareValue = function(v1, v2)
{
	if (v1 === v2)
	{
		return true;
	}
	if (oFF.isNull(v1) || oFF.isNull(v2))
	{
		return false;
	}
	if (v1.getValueType() !== v2.getValueType())
	{
		return false;
	}
	return v1.isEqualTo(v2);
};
oFF.QFilterExpression.create = function(context, selector)
{
	let filterExp = new oFF.QFilterExpression();
	filterExp.setupFilterExpression(context, selector);
	return filterExp;
};
oFF.QFilterExpression.createTransient = function(context)
{
	let filterExp = new oFF.QFilterExpression();
	filterExp.setupTransientFilterExpression(context);
	return filterExp;
};
oFF.QFilterExpression.prototype.m_cellValueOperands = null;
oFF.QFilterExpression.prototype.m_filterCapabilities = null;
oFF.QFilterExpression.prototype.m_filterIdsFromVariables = null;
oFF.QFilterExpression.prototype.m_filterRootElement = null;
oFF.QFilterExpression.prototype.m_isLocked = false;
oFF.QFilterExpression.prototype.m_isMergable = false;
oFF.QFilterExpression.prototype.m_isSuppressingNulls = false;
oFF.QFilterExpression.prototype.m_preservedDuringSubmit = false;
oFF.QFilterExpression.prototype.m_preservedOnRepoSerialization = false;
oFF.QFilterExpression.prototype.m_uniqueId = null;
oFF.QFilterExpression.prototype._loadCellValueOperands = function()
{
	if (oFF.isNull(this.m_cellValueOperands))
	{
		this.m_cellValueOperands = oFF.XList.create();
	}
};
oFF.QFilterExpression.prototype.addCellValueFilter = function(cellValueOperand)
{
	this.assertSupportsCellValueOperand();
	this._loadCellValueOperands();
	this.m_cellValueOperands.add(cellValueOperand);
	this.notifyNodeChanged();
};
oFF.QFilterExpression.prototype.addNewCellValueFilter = function(lowValue, highValue, comparisonOperator)
{
	this.assertSupportsCellValueOperand();
	this._loadCellValueOperands();
	let cellValueFilter = oFF.QFilterCellValueOperand._create(this.getContext(), this, lowValue, highValue, comparisonOperator);
	this.m_cellValueOperands.add(cellValueFilter);
	this.notifyNodeChanged();
	return cellValueFilter;
};
oFF.QFilterExpression.prototype.addNewCellValueFilterVariable = function(lowVariable, highVariable, comparisonOperator)
{
	this.assertSupportsCellValueOperand();
	this._loadCellValueOperands();
	let cellValueFilter = oFF.QFilterCellValueOperand.createWithVariable(this.getContext(), this, lowVariable, highVariable, comparisonOperator);
	this.m_cellValueOperands.add(cellValueFilter);
	this.notifyNodeChanged();
	return cellValueFilter;
};
oFF.QFilterExpression.prototype.addSingleMemberFilterByDimension = function(dimension, memberName, theOperator)
{
	let dimensionMember = dimension.getDimensionMember(memberName);
	return oFF.isNull(dimensionMember) ? null : this.addSingleMemberFilterByDimensionMember(dimensionMember, theOperator);
};
oFF.QFilterExpression.prototype.addSingleMemberFilterByDimensionMember = function(dimensionMember, theOperator)
{
	oFF.XObjectExt.assertNotNullExt(dimensionMember, "The DimensionMember must not be null!");
	let isParentRestrictedMeasure = this.getParentComponent() !== null && this.getParentComponent().getOlapComponentType().isTypeOf(oFF.MemberType.RESTRICTED_MEASURE);
	let isMeasureNotSelectable = dimensionMember.getMemberType().isTypeOf(oFF.MemberType.MEASURE) && !dimensionMember.isSelectionCandidate();
	if (isParentRestrictedMeasure && isMeasureNotSelectable)
	{
		return null;
	}
	let forbiddenDimensionNames = oFF.XList.create();
	let queryModel = this.getQueryModel();
	if (isParentRestrictedMeasure && oFF.notNull(queryModel) && queryModel.getSystemType().isTypeOf(oFF.SystemType.ABAP) && this.getFilterRootElement() !== null)
	{
		let measureDimension = queryModel.getMeasureDimension();
		let cartesianMeasureList = this.getCartesianList(measureDimension);
		if (oFF.notNull(cartesianMeasureList))
		{
			let sizeMeasureList = cartesianMeasureList.size();
			for (let idxMeasureList = 0; idxMeasureList < sizeMeasureList; idxMeasureList++)
			{
				let op = cartesianMeasureList.getOp(idxMeasureList);
				let low = op.getLow();
				let selectedStructure = null;
				let selectedDimensionMember = low.getDimensionMember();
				if (oFF.notNull(selectedDimensionMember) && selectedDimensionMember.getMemberType().isTypeOf(oFF.MemberType.MEASURE))
				{
					selectedStructure = selectedDimensionMember;
				}
				if (oFF.isNull(selectedStructure))
				{
					selectedStructure = measureDimension.getStructureMember(low.getString());
				}
				if (oFF.notNull(selectedStructure))
				{
					forbiddenDimensionNames.addAll(selectedStructure.getDefaultSelectedDimensionNames());
				}
			}
		}
	}
	let dimension = null;
	if (dimensionMember.getDimension() !== null)
	{
		if (this.getQueryModel() !== null)
		{
			dimension = this.getQueryModel().getDimensionByName(dimensionMember.getDimension().getName());
		}
		if (oFF.isNull(dimension))
		{
			dimension = dimensionMember.getDimension();
		}
	}
	if (oFF.isNull(dimension) || dimension.isUniversalDisplayHierarchyDimension())
	{
		return null;
	}
	if (forbiddenDimensionNames.contains(dimension.getName()))
	{
		return null;
	}
	let keyField = dimension.getKeyField();
	let isValueHelpFilter = this.getQueryModel() !== null && (this.getQueryModel().getFilter() !== null) && this.getQueryModel().getFilter().isValueHelpFilterInitialized() && this === this.getQueryModel().getFilter().getValuehelpFilter();
	let isFilterableKeyFieldInValueHelp = isValueHelpFilter && keyField.isFilterableForValueHelpAndReadMode(dimension.getReadMode(oFF.QContextType.SELECTOR));
	let isFilterableKeyField = isValueHelpFilter ? isFilterableKeyFieldInValueHelp : keyField.isFilterable();
	if (!isFilterableKeyField && oFF.notNull(queryModel) && this.getModelCapabilities().supportsCustomDimensionFilterCapability() && !(queryModel.getSession().hasFeature(oFF.FeatureToggleOlap.SORT_AND_RANK_BY_SECONDARY_MEASURE_ENHANCEMENT) && dimension.getDimensionType().isTypeOf(oFF.DimensionType.SECONDARY_STRUCTURE) && !queryModel.getSystemType().isTypeOf(oFF.SystemType.BW)))
	{
		return null;
	}
	if (oFF.notNull(queryModel) && queryModel.isBlendingModel() && queryModel.getBlendingDefinition().getMappingByAliasName(dimension.getName()).getLinkType() === oFF.BlendingLinkType.COEXIST && dimension.isHierarchyActive())
	{
		throw oFF.XException.createRuntimeException("Adding a hierarchy filter to a coexist blended dimension is currently not supported");
	}
	let cartesianList;
	if (this.isComplexFilter())
	{
		cartesianList = this.getCartesianListWithDefault(dimension);
	}
	else
	{
		let cartesianProduct = this.getCartesianProduct();
		if (oFF.isNull(cartesianProduct))
		{
			cartesianProduct = oFF.QFactory.createFilterCartesianProduct(this);
			this.setCartesianProduct(cartesianProduct);
		}
		cartesianList = cartesianProduct.getCartesianList(dimension);
		if (oFF.isNull(cartesianList))
		{
			cartesianList = dimension.createFilterList();
			cartesianProduct.add(cartesianList);
		}
	}
	if (dimension.isHierarchyActive())
	{
		cartesianList.setHierarchyName(dimension.getHierarchyName());
	}
	else
	{
		cartesianList.setHierarchyName(null);
	}
	let memberFilter = oFF.QFactory.createFilterOperation(this.getContext(), dimension.getKeyField());
	memberFilter.getLow().setDimensionMember(dimensionMember);
	memberFilter.setComparisonOperator(theOperator);
	let size = cartesianList.size();
	for (let i = 0; i < size; i++)
	{
		let sms = cartesianList.getOp(i);
		if (oFF.QFilterExpression.compareFilter(memberFilter, sms))
		{
			if (memberFilter.getSetSign() !== sms.getSetSign())
			{
				sms.setSetSign(memberFilter.getSetSign());
			}
			return sms;
		}
	}
	cartesianList.add(memberFilter);
	return memberFilter;
};
oFF.QFilterExpression.prototype.addSingleMemberFilterByName = function(dimensionName, memberName, theOperator)
{
	let dimension = this.getDimensionAccessor().getDimensionByName(dimensionName);
	return oFF.isNull(dimension) ? null : this.addSingleMemberFilterByDimension(dimension, memberName, theOperator);
};
oFF.QFilterExpression.prototype.addSingleMemberFilterByType = function(structureType, memberName, theOperator)
{
	let dimension = this.getDimensionAccessor().getDimensionByType(structureType);
	return oFF.isNull(dimension) ? null : this.addSingleMemberFilterByDimension(dimension, memberName, theOperator);
};
oFF.QFilterExpression.prototype.assertSupportsCellValueOperand = function()
{
	oFF.XBooleanUtils.checkTrue(this.getModelCapabilities().supportsCellValueOperand(), "CellValueOperand is not supported");
};
oFF.QFilterExpression.prototype.clearCellValueFilter = function()
{
	this.assertSupportsCellValueOperand();
	if (oFF.notNull(this.m_cellValueOperands))
	{
		this.m_cellValueOperands.clear();
		this.notifyNodeChanged();
	}
};
oFF.QFilterExpression.prototype.containsMeasureBasedFilter = function()
{
	return this.isComplexFilter() && this.containsMeasureBasedFilterInternal(this.m_filterRootElement);
};
oFF.QFilterExpression.prototype.containsMeasureBasedFilterInternal = function(filterElement)
{
	let componentType = filterElement.getComponentType();
	if (componentType.isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA))
	{
		let filterAlgebra = filterElement;
		for (let i = 0; i < filterAlgebra.size(); i++)
		{
			if (this.containsMeasureBasedFilterInternal(filterAlgebra.get(i)))
			{
				return true;
			}
		}
	}
	return componentType.isTypeOf(oFF.FilterComponentType.FILTER_MEASURE_BASED);
};
oFF.QFilterExpression.prototype.copyFilterExpression = function(origin)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , origin, null);
	if (origin.getModelCapabilities() !== null)
	{
		this.m_filterCapabilities.copyFrom(origin.getModelCapabilities(), null);
	}
	if (oFF.notNull(origin.m_filterRootElement))
	{
		this.m_filterRootElement = oFF.QFilterUtil.createFilterElementFromOrigin(origin.m_filterRootElement, this);
		this.notifyChildAttached(this.m_filterRootElement);
	}
	this.m_isSuppressingNulls = origin.m_isSuppressingNulls;
	this.m_isLocked = origin.m_isLocked;
	this.m_uniqueId = origin.m_uniqueId;
	this.m_preservedOnRepoSerialization = origin.m_preservedOnRepoSerialization;
	this.m_isMergable = origin.m_isMergable;
	if (oFF.notNull(origin.m_cellValueOperands))
	{
		this.m_cellValueOperands = oFF.XList.create();
		let size = origin.m_cellValueOperands.size();
		for (let i = 0; i < size; i++)
		{
			let origCellValueOp = origin.m_cellValueOperands.get(i);
			let cloneCellValueOp = oFF.QFilterCellValueOperand.createForNullSuppression(this, this);
			cloneCellValueOp.copyFrom(origCellValueOp, null);
			this.m_cellValueOperands.add(cloneCellValueOp);
		}
	}
};
oFF.QFilterExpression.prototype.copyFromInternal = function(other, flags)
{
	this.copyFilterExpression(other);
};
oFF.QFilterExpression.prototype.getCartesianList = function(dimension)
{
	if (this.getFilterRootElement() !== null && oFF.notNull(dimension))
	{
		let children = this.getFilterRootElement().getChildrenIterator();
		while (children.hasNext())
		{
			let component = children.next();
			if (component.getOlapComponentType().isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST) && oFF.XString.isEqual(component.getDimensionName(), dimension.getName()))
			{
				return component;
			}
		}
	}
	return null;
};
oFF.QFilterExpression.prototype.getCartesianListByField = function(field)
{
	if (this.isComplexFilter())
	{
		let dimensionName = field.getDimension().getName();
		let dimensionContext = this.getDimensionAccessor().getDimensionByName(dimensionName);
		if (oFF.isNull(dimensionContext))
		{
			dimensionContext = field.getDimension();
		}
		let list = this.getCartesianListWithDefault(dimensionContext);
		return list.getField() === field ? list : null;
	}
	return this.getCartesianProductWithDefault().getCartesianListByField(field);
};
oFF.QFilterExpression.prototype.getCartesianListWithDefault = function(dimension)
{
	let list = this.getCartesianList(dimension);
	if (oFF.isNull(list))
	{
		list = dimension.createFilterList();
		this.getFilterRootElement().add(list);
	}
	return list;
};
oFF.QFilterExpression.prototype.getCartesianProduct = function()
{
	return this.isCartesianProduct() ? this.m_filterRootElement : null;
};
oFF.QFilterExpression.prototype.getCartesianProductWithDefault = function()
{
	if (this.isComplexFilter())
	{
		throw oFF.XException.createIllegalStateException("A complex selection already exists");
	}
	if (oFF.isNull(this.m_filterRootElement))
	{
		this.setCartesianProduct(oFF.QFactory.createFilterCartesianProduct(this));
	}
	return this.m_filterRootElement;
};
oFF.QFilterExpression.prototype.getCellValueOperands = function()
{
	this.assertSupportsCellValueOperand();
	this._loadCellValueOperands();
	return this.m_cellValueOperands;
};
oFF.QFilterExpression.prototype.getChildById = function(parent, uniqueId)
{
	let iterator = parent.getChildrenIterator();
	while (iterator.hasNext())
	{
		let filterElement = iterator.next();
		if (oFF.XString.isEqual(filterElement.getUniqueId(), uniqueId))
		{
			return filterElement;
		}
		let element = this.getChildById(filterElement, uniqueId);
		if (oFF.notNull(element))
		{
			return element;
		}
	}
	return null;
};
oFF.QFilterExpression.prototype.getComplexRoot = function()
{
	return this.isComplexFilter() ? this.m_filterRootElement : null;
};
oFF.QFilterExpression.prototype.getConvertedTimeCartesianListWithDefault = function(dimension)
{
	let list = this.getCartesianList(dimension);
	if (oFF.isNull(list))
	{
		list = oFF.QFilterConvertedTimeCartesianList._create(dimension.getContext(), null, dimension.getKeyField().getMetadata(), dimension.isHierarchyActive() ? dimension.getHierarchyName() : null);
		this.getFilterRootElement().add(list);
	}
	else if (list.getOlapComponentType() !== oFF.FilterComponentType.CONVERTED_TIME_CARTESIAN_LIST)
	{
		this.getFilterRootElement().removeElement(list);
		list = oFF.QFilterConvertedTimeCartesianList._createFromCartesianList(list);
		this.getFilterRootElement().add(list);
	}
	return list;
};
oFF.QFilterExpression.prototype.getDimensionsUsedInFilter = function()
{
	return oFF.DimensionUsageAnalyzer2.getDimensionsUsedInFilter(this);
};
oFF.QFilterExpression.prototype.getFilterById = function(uniqueId)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(uniqueId) && oFF.notNull(this.m_filterRootElement))
	{
		if (oFF.XString.isEqual(this.m_uniqueId, uniqueId))
		{
			return this;
		}
		if (oFF.XString.isEqual(this.m_filterRootElement.getUniqueId(), uniqueId))
		{
			return this.m_filterRootElement;
		}
		return this.getChildById(this.m_filterRootElement, uniqueId);
	}
	return null;
};
oFF.QFilterExpression.prototype.getFilterExpression = function()
{
	return this;
};
oFF.QFilterExpression.prototype.getFilterIdsFromVariables = function()
{
	return this.m_filterIdsFromVariables;
};
oFF.QFilterExpression.prototype.getFilterRootElement = function()
{
	return this.m_filterRootElement;
};
oFF.QFilterExpression.prototype.getIndexedChildren = function()
{
	let list = oFF.XList.create();
	if (oFF.notNull(this.m_filterRootElement))
	{
		list.add(this.m_filterRootElement);
	}
	return list.getIterator();
};
oFF.QFilterExpression.prototype.getMemberNamesFromFilter = function(dimName)
{
	return oFF.QFilterUtil.getMemberNamesFromFilter(this, dimName);
};
oFF.QFilterExpression.prototype.getModelCapabilities = function()
{
	return this.m_filterCapabilities;
};
oFF.QFilterExpression.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.FILTER_EXPRESSION;
};
oFF.QFilterExpression.prototype.getUniqueId = function()
{
	return this.m_uniqueId;
};
oFF.QFilterExpression.prototype.getUsedCustomHierarchies = function()
{
	let usedCustomHierarchies = oFF.XList.create();
	let customHierarchyRepo = this.getOlapEnv().getCustomHierarchyRepository();
	if (customHierarchyRepo.getCustomHierarchyDefinitions().size() === 0)
	{
		return usedCustomHierarchies;
	}
	let usedHierarchyNames = this.getUsedHierarchyNames();
	let iterator = usedHierarchyNames.getIterator();
	while (iterator.hasNext())
	{
		let customHierarchyDefinition = customHierarchyRepo.getCustomHierarchyDefinitionByName(iterator.next());
		if (oFF.notNull(customHierarchyDefinition))
		{
			usedCustomHierarchies.add(customHierarchyDefinition);
		}
	}
	return usedCustomHierarchies;
};
oFF.QFilterExpression.prototype.getUsedHierarchyNames = function()
{
	return this.getUsedHierarchyNamesInternal(this.m_filterRootElement, oFF.XHashSetOfString.create());
};
oFF.QFilterExpression.prototype.getUsedHierarchyNamesInternal = function(filterElement, hierarchies)
{
	if (oFF.notNull(filterElement))
	{
		let children = filterElement.getChildrenIterator();
		while (children.hasNext())
		{
			let element = children.next();
			if (element.getOlapComponentType().isTypeOf(oFF.FilterComponentType.OPERATION) || element.getOlapComponentType().isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
			{
				let hierarchyName = element.getHierarchyName();
				if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyName) && !hierarchies.contains(hierarchyName))
				{
					hierarchies.add(hierarchyName);
				}
			}
			else if (element.getOlapComponentType().isTypeOf(oFF.FilterComponentType.FILTER_ACROSS_MODELS))
			{
				hierarchies.addAll(element.getUsedHierarchyNamesInFilters());
			}
			this.getUsedHierarchyNamesInternal(element, hierarchies);
		}
	}
	return hierarchies;
};
oFF.QFilterExpression.prototype.hasComplexDimensionSelection = function()
{
	return oFF.DimensionUsageAnalyzer2.hasComplexDimensionSelection(this);
};
oFF.QFilterExpression.prototype.isAll = function()
{
	return this.isCartesianProduct() || this.isComplexFilter();
};
oFF.QFilterExpression.prototype.isCartesianProduct = function()
{
	return oFF.notNull(this.m_filterRootElement) && this.m_filterRootElement.getOlapComponentType() === oFF.FilterComponentType.CARTESIAN_PRODUCT;
};
oFF.QFilterExpression.prototype.isComplexFilter = function()
{
	return oFF.notNull(this.m_filterRootElement) && this.m_filterRootElement.getOlapComponentType() !== oFF.FilterComponentType.CARTESIAN_PRODUCT;
};
oFF.QFilterExpression.prototype.isComponentNode = function()
{
	return true;
};
oFF.QFilterExpression.prototype.isLocked = function()
{
	return this.m_isLocked;
};
oFF.QFilterExpression.prototype.isMergable = function()
{
	return this.m_isMergable;
};
oFF.QFilterExpression.prototype.isPreservedDuringSubmit = function()
{
	return this.m_preservedDuringSubmit;
};
oFF.QFilterExpression.prototype.isPreservedInRepoSerialization = function()
{
	return this.m_preservedOnRepoSerialization;
};
oFF.QFilterExpression.prototype.isSuppressingNulls = function()
{
	return this.m_isSuppressingNulls;
};
oFF.QFilterExpression.prototype.mergeDeepRecursive = function(settings, other)
{
	if (this.isPreservedDuringSubmit())
	{
		return;
	}
	let otherObj = other;
	this.m_filterRootElement = null;
	if (oFF.XString.isEqual(this.getName(), oFF.QFilter.DYNAMIC_FILTER_CONTAINER))
	{
		this.mergeDynamicFilter(otherObj);
	}
	else
	{
		this.copyFilterExpression(otherObj);
	}
};
oFF.QFilterExpression.prototype.mergeDynamicFilter = function(otherDynamicFilter)
{
	if (otherDynamicFilter.isCartesianProduct())
	{
		let otherQueryModel = otherDynamicFilter.getQueryModel();
		let queryModel = this.getQueryModel();
		if (oFF.notNull(queryModel) && oFF.notNull(otherQueryModel))
		{
			if (oFF.isNull(this.m_filterIdsFromVariables))
			{
				this.m_filterIdsFromVariables = oFF.XHashSetOfString.create();
			}
			else
			{
				this.m_filterIdsFromVariables.clear();
			}
			let otherCartesianProduct = otherDynamicFilter.getCartesianProduct();
			let size = otherCartesianProduct.size();
			for (let idx = 0; idx < size; idx++)
			{
				let otherCartesianList = otherCartesianProduct.getCartesianChild(idx);
				let dimension = queryModel.getDimensionByName(otherCartesianList.getDimensionName());
				let cartesianList = this.getCartesianList(dimension);
				if (oFF.isNull(cartesianList))
				{
					cartesianList = this.getCartesianProductWithDefault().getCartesianListWithDefault(dimension);
				}
				let idsBeforeMerge = oFF.XHashSetOfString.create();
				let childrenIterator = cartesianList.getIterator();
				while (childrenIterator.hasNext())
				{
					idsBeforeMerge.add(childrenIterator.next().getUniqueId());
				}
				cartesianList.copyFrom(otherCartesianList, null);
				childrenIterator = cartesianList.getIterator();
				while (childrenIterator.hasNext())
				{
					let uniqueId = childrenIterator.next().getUniqueId();
					if (!idsBeforeMerge.contains(uniqueId))
					{
						this.m_filterIdsFromVariables.add(uniqueId);
						this.m_filterIdsFromVariables.add(cartesianList.getUniqueId());
					}
				}
			}
		}
	}
	else
	{
		this.m_filterRootElement = null;
		this.copyFilterExpression(otherDynamicFilter);
	}
};
oFF.QFilterExpression.prototype.releaseObject = function()
{
	this.m_filterCapabilities = oFF.XObjectExt.release(this.m_filterCapabilities);
	this.m_cellValueOperands = oFF.XObjectExt.release(this.m_cellValueOperands);
	this.m_filterRootElement = null;
	this.m_uniqueId = null;
	this.m_filterIdsFromVariables = oFF.XObjectExt.release(this.m_filterIdsFromVariables);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QFilterExpression.prototype.removeCellValueFilter = function(cellValueOperand)
{
	this.assertSupportsCellValueOperand();
	this._loadCellValueOperands();
	this.m_cellValueOperands.removeElement(cellValueOperand);
	this.notifyNodeChanged();
};
oFF.QFilterExpression.prototype.removeChildById = function(parent, uniqueId)
{
	let iterator = parent.getChildrenIterator();
	while (iterator.hasNext())
	{
		let filterElement = iterator.next();
		if (oFF.XString.isEqual(filterElement.getUniqueId(), uniqueId))
		{
			parent.removeElement(filterElement);
			return;
		}
		this.removeChildById(filterElement, uniqueId);
	}
};
oFF.QFilterExpression.prototype.removeFilterById = function(uniqueId)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(uniqueId) && oFF.notNull(this.m_filterRootElement) && !oFF.XString.isEqual(this.m_uniqueId, uniqueId))
	{
		if (oFF.XString.isEqual(this.m_filterRootElement.getUniqueId(), uniqueId))
		{
			this.setComplexRoot(null);
		}
		else
		{
			this.removeChildById(this.m_filterRootElement, uniqueId);
		}
	}
};
oFF.QFilterExpression.prototype.removeSingleMemberFilterByDimension = function(dimension, memberName, theOperator)
{
	let dimensionMember = dimension.getDimensionMember(memberName);
	this.removeSingleMemberFilterByMember(dimensionMember, theOperator);
};
oFF.QFilterExpression.prototype.removeSingleMemberFilterByMember = function(member, theOperator)
{
	let operation = null;
	let cartesianList = null;
	if (this.isCartesianProduct())
	{
		operation = this.getCartesianProduct();
		cartesianList = operation.getCartesianList(member.getDimension());
	}
	else if (this.isComplexFilter())
	{
		operation = this.getComplexRoot();
		cartesianList = this.getCartesianList(member.getDimension());
	}
	if (oFF.notNull(operation) && oFF.notNull(cartesianList))
	{
		let valueToRemove = member.getKeyFieldValue().getString();
		for (let i = cartesianList.size() - 1; i >= 0; i--)
		{
			let sms = cartesianList.getOp(i);
			let valueInFilter = sms.getLow().getString();
			if (oFF.XString.isEqual(valueInFilter, valueToRemove) && sms.getComparisonOperator() === theOperator)
			{
				if (cartesianList.size() === 1)
				{
					operation.removeElement(cartesianList);
				}
				else
				{
					cartesianList.removeAt(i);
				}
			}
		}
	}
};
oFF.QFilterExpression.prototype.removeSingleMemberFilterByName = function(dimensionName, memberName, theOperator)
{
	let dimension = this.getDimensionAccessor().getDimensionByName(dimensionName);
	if (oFF.notNull(dimension))
	{
		this.removeSingleMemberFilterByDimension(dimension, memberName, theOperator);
	}
};
oFF.QFilterExpression.prototype.setCartesianProduct = function(cartesianProduct)
{
	this.m_filterRootElement = cartesianProduct;
	this.notifyChildAttached(cartesianProduct);
};
oFF.QFilterExpression.prototype.setComplexRoot = function(complexFilter)
{
	let modelCapabilities = this.getModelCapabilities();
	if (oFF.notNull(complexFilter) && !modelCapabilities.supportsMultiComplexFilter() && complexFilter.getOlapComponentType() !== oFF.FilterComponentType.CARTESIAN_PRODUCT)
	{
		throw oFF.XException.createIllegalArgumentException("Only cartesian product allowed!");
	}
	if (oFF.notNull(this.m_filterRootElement))
	{
		this.m_filterRootElement.setParent(null);
	}
	this.m_filterRootElement = complexFilter;
	this.notifyChildAttached(this.m_filterRootElement);
};
oFF.QFilterExpression.prototype.setIsLocked = function(isLocked)
{
	this.m_isLocked = isLocked;
};
oFF.QFilterExpression.prototype.setIsMergable = function(isMergable)
{
	this.m_isMergable = isMergable;
};
oFF.QFilterExpression.prototype.setIsSuppressingNulls = function(isSuppressingNulls)
{
	this.assertSupportsCellValueOperand();
	let oldValue = this.m_isSuppressingNulls;
	this.m_isSuppressingNulls = isSuppressingNulls;
	this.notifyPropertyBooleanChanged(oFF.QFilterProperties.QY_IS_SUPPRESSING_NULLS, oldValue, isSuppressingNulls);
};
oFF.QFilterExpression.prototype.setParent = function(parent)
{
	if (this.getParent() !== parent)
	{
		oFF.QModelComponent.prototype.setParent.call( this , parent);
		if (!oFF.XString.isEqual(this.getName(), oFF.QFilter.VALUEHELP_FILTER_CONTAINER) && !oFF.XString.isEqual(this.getName(), oFF.QFilter.VALUEHELP_VISIBILITY_FILTER_CONTAINER))
		{
			this.m_filterCapabilities = oFF.XObjectExt.release(this.m_filterCapabilities);
			this.setupCapabilityDecorator(parent, parent);
		}
	}
};
oFF.QFilterExpression.prototype.setPreserveDuringSubmit = function(preserve)
{
	this.m_preservedDuringSubmit = preserve;
};
oFF.QFilterExpression.prototype.setPreserveOnRepoSerialization = function(preserve)
{
	this.m_preservedOnRepoSerialization = preserve;
};
oFF.QFilterExpression.prototype.setUniqueId = function(uniqueId)
{
	this.m_uniqueId = uniqueId;
};
oFF.QFilterExpression.prototype.setupCapabilityDecorator = function(context, parentNode)
{
	this.m_filterCapabilities = oFF.QFactory.createCapabilitiesDecorator(this);
	if (oFF.isNull(parentNode) || context.getModelCapabilities() === null)
	{
		this.m_filterCapabilities.setSupportsComplexFilter(false);
		this.m_filterCapabilities.setSupportsComplexTupleFilter(false);
		this.m_filterCapabilities.setSupportsCellValueOperand(false);
	}
};
oFF.QFilterExpression.prototype.setupFilterExpression = function(context, parentNode)
{
	this.setupModelComponent(context, parentNode);
	this.m_isLocked = false;
	this.m_isSuppressingNulls = false;
	this.m_uniqueId = oFF.XGuid.getGuid();
	this.setupCapabilityDecorator(context, parentNode);
};
oFF.QFilterExpression.prototype.setupTransientFilterExpression = function(context)
{
	this.setupModelComponent(context, null);
	this.m_isLocked = false;
	this.m_isSuppressingNulls = false;
	this.m_uniqueId = oFF.XGuid.getGuid();
	if (context.getQueryModel() !== null)
	{
		this.m_filterCapabilities = oFF.QFactory.createCapabilitiesDecorator(context.getQueryModel());
	}
};

oFF.QFilterOperation = function() {};
oFF.QFilterOperation.prototype = new oFF.QFilterElement();
oFF.QFilterOperation.prototype._ff_c = "QFilterOperation";

oFF.QFilterOperation._create = function(context, selectionContainer, parentNode)
{
	let object = new oFF.QFilterOperation();
	object.setupFilterOperation(context, selectionContainer, parentNode);
	return object;
};
oFF.QFilterOperation.prototype.m_comparisonOperator = null;
oFF.QFilterOperation.prototype.m_convertToFlatFilter = false;
oFF.QFilterOperation.prototype.m_dataSource = null;
oFF.QFilterOperation.prototype.m_depth = 0;
oFF.QFilterOperation.prototype.m_exactness = 0.0;
oFF.QFilterOperation.prototype.m_fieldContext = null;
oFF.QFilterOperation.prototype.m_fieldMd = null;
oFF.QFilterOperation.prototype.m_fieldName = null;
oFF.QFilterOperation.prototype.m_firstValue = null;
oFF.QFilterOperation.prototype.m_hasDepth = false;
oFF.QFilterOperation.prototype.m_hasLevelOffset = false;
oFF.QFilterOperation.prototype.m_hierarchyDueDate = null;
oFF.QFilterOperation.prototype.m_hierarchyName = null;
oFF.QFilterOperation.prototype.m_hierarchyVersion = null;
oFF.QFilterOperation.prototype.m_levelOffset = 0;
oFF.QFilterOperation.prototype.m_secondValue = null;
oFF.QFilterOperation.prototype.m_setSign = null;
oFF.QFilterOperation.prototype.m_thirdValue = null;
oFF.QFilterOperation.prototype._getContext = function()
{
	let context = this.getContext();
	if (oFF.notNull(context))
	{
		return context;
	}
	let parent = this.getParent();
	if (oFF.notNull(parent))
	{
		let parentContext = parent.getContext();
		if (oFF.notNull(parentContext))
		{
			return parentContext;
		}
	}
	let filterExpression = this.getFilterExpression();
	if (oFF.notNull(filterExpression))
	{
		let feContext = filterExpression.getContext();
		if (oFF.notNull(feContext))
		{
			return feContext;
		}
	}
	return oFF.XWeakReferenceUtil.getHardRef(this.m_fieldContext);
};
oFF.QFilterOperation.prototype._updateValue = function(filterValue, newValue)
{
	filterValue.setValue(oFF.XObjectExt.cloneIfNotNull(newValue));
};
oFF.QFilterOperation.prototype.areValuesInitialized = function()
{
	return this.isEmpty() || oFF.notNull(this.m_firstValue) || oFF.notNull(this.m_secondValue) || oFF.notNull(this.m_thirdValue);
};
oFF.QFilterOperation.prototype.configureBetweenWithMembers = function(firstMember, secondMember)
{
	this.setComparisonOperator(oFF.ComparisonOperator.BETWEEN);
	this.getLow().setDimensionMember(firstMember);
	this.getHigh().setDimensionMember(secondMember);
};
oFF.QFilterOperation.prototype.configureDoubleParameterExpression = function(firstValue, secondValue, comparisonOperator)
{
	this.setComparisonOperator(comparisonOperator);
	this.getLow().setValue(firstValue);
	this.getHigh().setValue(secondValue);
};
oFF.QFilterOperation.prototype.configureSingleParameterExpression = function(value, comparisonOperator)
{
	this.setComparisonOperator(comparisonOperator);
	this.getLow().setValue(value);
};
oFF.QFilterOperation.prototype.configureTripleParameterExpression = function(firstValue, secondValue, thirdValue, comparisonOperator)
{
	this.setComparisonOperator(comparisonOperator);
	this.getLow().setValue(firstValue);
	this.getHigh().setValue(secondValue);
	this.getThird().setValue(thirdValue);
};
oFF.QFilterOperation.prototype.containsFunctionalVariable = function()
{
	return oFF.notNull(this.m_firstValue) && this.m_firstValue.isFunctionalVariableValue() || oFF.notNull(this.m_secondValue) && this.m_secondValue.isFunctionalVariableValue() || oFF.notNull(this.m_thirdValue) && this.m_thirdValue.isFunctionalVariableValue();
};
oFF.QFilterOperation.prototype.copyFromInternal = function(other, flags)
{
	oFF.QFilterElement.prototype.copyFromInternal.call( this , other, flags);
	let originFilterOperation = other;
	if (oFF.notNull(originFilterOperation.m_firstValue))
	{
		this.getLow().copyFrom(originFilterOperation.m_firstValue, flags);
	}
	if (oFF.notNull(originFilterOperation.m_secondValue))
	{
		this.getHigh().copyFrom(originFilterOperation.m_secondValue, flags);
	}
	if (oFF.notNull(originFilterOperation.m_thirdValue))
	{
		this.getThird().copyFrom(originFilterOperation.m_thirdValue, flags);
	}
	this.m_comparisonOperator = originFilterOperation.m_comparisonOperator;
	if (oFF.notNull(originFilterOperation.m_fieldMd))
	{
		this.setFieldMetadata(originFilterOperation.getFieldMetadata());
	}
	this.m_setSign = originFilterOperation.m_setSign;
	this.m_hasDepth = originFilterOperation.m_hasDepth;
	this.m_depth = originFilterOperation.m_depth;
	this.m_hasLevelOffset = originFilterOperation.hasLevelOffset();
	this.m_levelOffset = originFilterOperation.m_levelOffset;
	this.m_exactness = originFilterOperation.m_exactness;
	this.m_convertToFlatFilter = originFilterOperation.m_convertToFlatFilter;
	this.m_hierarchyName = originFilterOperation.m_hierarchyName;
	this.m_hierarchyDueDate = oFF.XObjectExt.cloneIfNotNull(originFilterOperation.m_hierarchyDueDate);
	this.m_hierarchyVersion = originFilterOperation.m_hierarchyVersion;
	if (oFF.notNull(originFilterOperation.m_dataSource))
	{
		this.setDataSource(originFilterOperation.m_dataSource);
	}
};
oFF.QFilterOperation.prototype.getComparisonOperator = function()
{
	if (oFF.isNull(this.m_comparisonOperator) && oFF.notNull(this.m_firstValue) && this.m_firstValue.getValue() !== null)
	{
		this.m_comparisonOperator = oFF.ComparisonOperator.EQUAL;
	}
	return this.m_comparisonOperator;
};
oFF.QFilterOperation.prototype.getDataSource = function()
{
	return this.m_dataSource;
};
oFF.QFilterOperation.prototype.getDepth = function()
{
	return this.m_depth;
};
oFF.QFilterOperation.prototype.getDimension = function()
{
	let field = this.getField();
	return oFF.isNull(field) ? null : field.getDimension();
};
oFF.QFilterOperation.prototype.getDimensionName = function()
{
	let fieldMetadata = this.getFieldMetadata();
	if (oFF.notNull(fieldMetadata))
	{
		let dimensionMetadata = fieldMetadata.getDimensionMetadata();
		if (oFF.notNull(dimensionMetadata))
		{
			return dimensionMetadata.getName();
		}
	}
	let dimension = this.getDimension();
	return oFF.notNull(dimension) ? dimension.getName() : null;
};
oFF.QFilterOperation.prototype.getExactness = function()
{
	return this.m_exactness;
};
oFF.QFilterOperation.prototype.getField = function()
{
	let fieldMetadata = this.getFieldMetadata();
	if (oFF.isNull(fieldMetadata))
	{
		return null;
	}
	let context = this._getContext();
	let fieldAccessorSingle = context.getFieldAccessorSingle();
	return oFF.notNull(fieldAccessorSingle) ? fieldAccessorSingle.getFieldByName(fieldMetadata.getName()) : null;
};
oFF.QFilterOperation.prototype.getFieldMetadata = function()
{
	if (oFF.isNull(this.m_fieldMd))
	{
		let parentComponent = this.getParentComponent();
		if (oFF.notNull(parentComponent))
		{
			let parentType = parentComponent.getComponentType();
			if (parentType.isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
			{
				let cartesianList = parentComponent;
				this.m_fieldMd = oFF.XWeakReferenceUtil.getWeakRef(cartesianList.getFieldMetadata());
			}
		}
	}
	let hardRef = oFF.XWeakReferenceUtil.getHardRef(this.m_fieldMd);
	if (oFF.isNull(hardRef) && oFF.notNull(this.m_fieldMd))
	{
		let reference = this.m_fieldMd.getReference();
		if (oFF.notNull(reference))
		{
			let olapEnv = this.getOlapEnv();
			if (oFF.notNull(olapEnv))
			{
				let fieldMetadata = olapEnv.getFieldMetadata(reference.getCacheKey());
				this.setFieldMetadata(fieldMetadata);
				return fieldMetadata;
			}
		}
	}
	return hardRef;
};
oFF.QFilterOperation.prototype.getFieldName = function()
{
	return this.m_fieldName;
};
oFF.QFilterOperation.prototype.getHierarchyDueDate = function()
{
	return this.m_hierarchyDueDate;
};
oFF.QFilterOperation.prototype.getHierarchyName = function()
{
	return this.m_hierarchyName;
};
oFF.QFilterOperation.prototype.getHierarchyVersion = function()
{
	return this.m_hierarchyVersion;
};
oFF.QFilterOperation.prototype.getHigh = function()
{
	if (oFF.isNull(this.m_secondValue))
	{
		this.m_secondValue = oFF.QFactory.createFilterValueBag(this.getContext(), this.getFilterExpression(), this);
	}
	return this.m_secondValue;
};
oFF.QFilterOperation.prototype.getLevelOffset = function()
{
	return this.m_levelOffset;
};
oFF.QFilterOperation.prototype.getLow = function()
{
	if (oFF.isNull(this.m_firstValue))
	{
		this.m_firstValue = oFF.QFactory.createFilterValueBag(this.getContext(), this.getFilterExpression(), this);
	}
	return this.m_firstValue;
};
oFF.QFilterOperation.prototype.getOlapComponentType = function()
{
	return oFF.FilterComponentType.OPERATION;
};
oFF.QFilterOperation.prototype.getSetSign = function()
{
	return this.m_setSign;
};
oFF.QFilterOperation.prototype.getThird = function()
{
	if (oFF.isNull(this.m_thirdValue))
	{
		this.m_thirdValue = oFF.QFactory.createFilterValueBag(this.getContext(), this.getFilterExpression(), this);
	}
	return this.m_thirdValue;
};
oFF.QFilterOperation.prototype.getValueAt = function(index)
{
	if (index === 0)
	{
		return this.getLow();
	}
	if (index === 1)
	{
		return this.getHigh();
	}
	if (index === 2)
	{
		return this.getThird();
	}
	return null;
};
oFF.QFilterOperation.prototype.hasDepth = function()
{
	return this.m_hasDepth;
};
oFF.QFilterOperation.prototype.hasDepthChanged = function(depth, hasDepth)
{
	return this.m_depth !== depth || this.m_hasDepth !== hasDepth;
};
oFF.QFilterOperation.prototype.hasElements = function()
{
	return this.size() > 0;
};
oFF.QFilterOperation.prototype.hasLevelOffset = function()
{
	return this.m_hasLevelOffset;
};
oFF.QFilterOperation.prototype.hasLevelOffsetChanged = function(levelOffset, hasLevelOffSet)
{
	return this.m_levelOffset !== levelOffset || this.m_hasLevelOffset !== hasLevelOffSet;
};
oFF.QFilterOperation.prototype.isConvertToFlatFilter = function()
{
	return this.m_convertToFlatFilter;
};
oFF.QFilterOperation.prototype.isEmpty = function()
{
	return this.size() === 0;
};
oFF.QFilterOperation.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (other === this)
	{
		return true;
	}
	if (other.getComponentType() !== oFF.FilterComponentType.OPERATION)
	{
		return false;
	}
	let xOther = other;
	if (this.getField() !== xOther.getField())
	{
		return false;
	}
	if (this.m_comparisonOperator !== xOther.m_comparisonOperator)
	{
		return false;
	}
	if (this.m_exactness !== xOther.m_exactness)
	{
		return false;
	}
	if (this.m_levelOffset !== xOther.m_levelOffset)
	{
		return false;
	}
	if (this.m_depth !== xOther.m_depth)
	{
		return false;
	}
	if (this.m_setSign !== xOther.m_setSign)
	{
		return false;
	}
	if (this.m_convertToFlatFilter !== xOther.m_convertToFlatFilter)
	{
		return false;
	}
	if (!oFF.XString.isEqual(this.m_hierarchyName, xOther.m_hierarchyName))
	{
		return false;
	}
	let qm = this.getQueryModel();
	if (oFF.notNull(qm) && this.getSession().hasFeature(oFF.FeatureToggleOlap.HIERARCHY_INFO_IN_FILTER) && qm.getSystemType().isTypeOf(oFF.SystemType.ABAP))
	{
		if (!oFF.XObjectExt.areEqual(this.m_hierarchyDueDate, xOther.m_hierarchyDueDate))
		{
			return false;
		}
		if (!oFF.XString.isEqual(this.m_hierarchyVersion, xOther.m_hierarchyVersion))
		{
			return false;
		}
	}
	if (!oFF.XObjectExt.areEqual(this.m_firstValue, xOther.m_firstValue))
	{
		return false;
	}
	if (!oFF.XObjectExt.areEqual(this.m_secondValue, xOther.m_secondValue))
	{
		return false;
	}
	if (!oFF.XObjectExt.areEqual(this.m_thirdValue, xOther.m_thirdValue))
	{
		return false;
	}
	return true;
};
oFF.QFilterOperation.prototype.parseStringValues = function(low, high, comparisonOperator)
{
	this.queueEventing();
	if (oFF.notNull(comparisonOperator))
	{
		this.setComparisonOperator(comparisonOperator);
	}
	if (comparisonOperator === oFF.ComparisonOperator.MATCH || comparisonOperator === oFF.ComparisonOperator.NOT_MATCH)
	{
		this.setLowString(low);
		this.setHighString(high);
	}
	else
	{
		let fieldMd = this.getFieldMetadata();
		let valueAccess = oFF.XValueAccess.createWithType(fieldMd.getValueType());
		valueAccess.parseString(low);
		this._updateValue(this.getLow(), valueAccess.getValue());
		valueAccess.parseString(high);
		this._updateValue(this.getHigh(), valueAccess.getValue());
		oFF.XObjectExt.release(valueAccess);
	}
	this.resumeEventing();
};
oFF.QFilterOperation.prototype.releaseObject = function()
{
	this.m_firstValue = oFF.XObjectExt.release(this.m_firstValue);
	this.m_secondValue = oFF.XObjectExt.release(this.m_secondValue);
	this.m_thirdValue = oFF.XObjectExt.release(this.m_thirdValue);
	this.m_dataSource = oFF.XObjectExt.release(this.m_dataSource);
	this.m_fieldMd = oFF.XObjectExt.release(this.m_fieldMd);
	this.m_fieldContext = oFF.XObjectExt.release(this.m_fieldContext);
	this.m_setSign = null;
	this.m_hierarchyName = null;
	this.m_hierarchyDueDate = oFF.XObjectExt.release(this.m_hierarchyDueDate);
	this.m_hierarchyVersion = null;
	this.m_comparisonOperator = null;
	oFF.QFilterElement.prototype.releaseObject.call( this );
};
oFF.QFilterOperation.prototype.resetDepth = function()
{
	if (this.hasDepthChanged(0, false))
	{
		this.m_depth = 0;
		this.m_hasDepth = false;
		this.notifyNodeChanged();
	}
};
oFF.QFilterOperation.prototype.resetLevelOffset = function()
{
	if (this.hasLevelOffsetChanged(0, false))
	{
		this.m_levelOffset = 0;
		this.m_hasLevelOffset = false;
		this.notifyNodeChanged();
	}
};
oFF.QFilterOperation.prototype.setComparisonOperator = function(comparisonOperator)
{
	if (this.m_comparisonOperator !== comparisonOperator)
	{
		this.m_comparisonOperator = comparisonOperator;
		this.notifyNodeChanged();
	}
};
oFF.QFilterOperation.prototype.setConvertToFlatFilter = function(convertToFlatFilter)
{
	let oldValue = this.m_convertToFlatFilter;
	this.m_convertToFlatFilter = convertToFlatFilter;
	this.notifyPropertyBooleanChanged(oFF.QFilterProperties.QY_CONVERT_TO_FLAT_SELECTION_FO, oldValue, convertToFlatFilter);
};
oFF.QFilterOperation.prototype.setDataSource = function(dataSource)
{
	if (oFF.isNull(dataSource))
	{
		this.m_dataSource = null;
	}
	else
	{
		if (oFF.isNull(this.m_dataSource))
		{
			this.m_dataSource = oFF.QFactory.createDataSource();
		}
		this.m_dataSource.copyFrom(dataSource, null);
	}
	this.notifyNodeChanged();
};
oFF.QFilterOperation.prototype.setDepth = function(depth)
{
	if (!this.getModelCapabilities().supportsHierarchyTrapezoidFilter())
	{
		throw oFF.XException.createIllegalStateException("Depth is not supported by backend!");
	}
	if (this.hasDepthChanged(depth, true))
	{
		this.m_depth = depth;
		this.m_hasDepth = true;
		this.notifyNodeChanged();
	}
};
oFF.QFilterOperation.prototype.setExactness = function(exactness)
{
	this.m_exactness = exactness;
};
oFF.QFilterOperation.prototype.setField = function(field)
{
	if (oFF.notNull(field))
	{
		this.setFieldMetadata(field.getMetadata());
		if (this.getContext() === null)
		{
			this.setContext(field.getContext());
		}
		this.m_fieldContext = oFF.XWeakReferenceUtil.getWeakRef(field.getContext());
	}
};
oFF.QFilterOperation.prototype.setFieldMetadata = function(fieldMd)
{
	if (oFF.notNull(fieldMd))
	{
		if (this.getModelCapabilities() !== null && !this.getModelCapabilities().supportsFilterCapabilityExtended())
		{
			let isKeyType = fieldMd.getPresentationType().isTypeOf(oFF.PresentationType.ABSTRACT_KEY);
			let isVariable = false;
			let isValidFilterForBwF4 = false;
			let context = this.getContext();
			if (oFF.notNull(context))
			{
				let componentType = context.getComponentType();
				isVariable = oFF.notNull(componentType) && (componentType.isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE) || componentType.isTypeOf(oFF.OlapComponentType.VARIABLE_MANAGER));
				let dimensionAccessor = context.getDimensionAccessor();
				let dimensionMetadata = fieldMd.getDimensionMetadata();
				let fieldMdCacheKey = fieldMd.getCacheKey();
				let contextCacheKey = oFF.QFactory.createCacheKeyByContext(context);
				let isSameDataSource = oFF.isNull(contextCacheKey) || oFF.XString.isEqual(fieldMdCacheKey.getSystemName(), contextCacheKey.getSystemName()) && oFF.XString.isEqual(fieldMdCacheKey.getDataSourceHashKey(), contextCacheKey.getDataSourceHashKey());
				if (oFF.notNull(dimensionAccessor) && oFF.notNull(dimensionMetadata) && isSameDataSource)
				{
					let dimension = dimensionAccessor.getDimensionByName(dimensionMetadata.getName());
					isValidFilterForBwF4 = oFF.notNull(dimension) && dimension.getSelector().isValidFilterForBwF4(fieldMd, this.getFilterExpression());
				}
			}
			if (!isKeyType && !isVariable && !isValidFilterForBwF4 && !fieldMd.isFilterable())
			{
				throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate3("The field '", fieldMd.getName(), "' is not filterable!"));
			}
		}
		this.m_fieldMd = oFF.XWeakReferenceUtil.getWeakRef(fieldMd);
	}
};
oFF.QFilterOperation.prototype.setFieldName = function(fieldName)
{
	oFF.XObjectExt.assertNull(this.getContext());
	oFF.XObjectExt.assertNull(this.m_fieldMd);
	this.m_fieldName = fieldName;
};
oFF.QFilterOperation.prototype.setHierarchyDueDate = function(hierarchyDueDate)
{
	let qm = this.getQueryModel();
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.HIERARCHY_INFO_IN_FILTER) && (oFF.isNull(qm) || qm.getSystemType().isTypeOf(oFF.SystemType.ABAP)))
	{
		if (!oFF.XObjectExt.areEqual(hierarchyDueDate, this.m_hierarchyDueDate))
		{
			this.m_hierarchyDueDate = hierarchyDueDate;
			this.notifyNodeChanged();
		}
	}
};
oFF.QFilterOperation.prototype.setHierarchyInfo = function(hierarchyName, hierarchyDueDate, hierarchyVersion)
{
	this.setHierarchyName(hierarchyName);
	this.setHierarchyDueDate(hierarchyDueDate);
	this.setHierarchyVersion(hierarchyVersion);
};
oFF.QFilterOperation.prototype.setHierarchyName = function(name)
{
	if (!oFF.XString.isEqual(name, this.m_hierarchyName))
	{
		this.m_hierarchyName = name;
		this.notifyNodeChanged();
	}
};
oFF.QFilterOperation.prototype.setHierarchyVersion = function(hierarchyVersion)
{
	let qm = this.getQueryModel();
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.HIERARCHY_INFO_IN_FILTER) && (oFF.isNull(qm) || qm.getSystemType().isTypeOf(oFF.SystemType.ABAP)))
	{
		if (!oFF.XString.isEqual(hierarchyVersion, this.m_hierarchyVersion))
		{
			this.m_hierarchyVersion = hierarchyVersion;
			this.notifyNodeChanged();
		}
	}
};
oFF.QFilterOperation.prototype.setHighString = function(value)
{
	this.getHigh().setString(value);
};
oFF.QFilterOperation.prototype.setLevelOffset = function(levelOffset)
{
	let capabilities = this.getModelCapabilities();
	let supportsHierarchyLevelOffsetFilter = capabilities.supportsHierarchyLevelOffsetFilter();
	let supportsHierarchyTrapezoidFilter = capabilities.supportsHierarchyTrapezoidFilter();
	if (!supportsHierarchyTrapezoidFilter && !supportsHierarchyLevelOffsetFilter)
	{
		throw oFF.XException.createIllegalStateException("LevelOffset is not supported by backend!");
	}
	if (this.hasLevelOffsetChanged(levelOffset, true))
	{
		this.m_levelOffset = levelOffset;
		this.m_hasLevelOffset = true;
		this.notifyNodeChanged();
	}
};
oFF.QFilterOperation.prototype.setLowString = function(value)
{
	this.getLow().setString(value);
};
oFF.QFilterOperation.prototype.setSetSign = function(setSign)
{
	if (setSign !== this.m_setSign)
	{
		this.m_setSign = setSign;
		this.notifyNodeChanged();
	}
};
oFF.QFilterOperation.prototype.setupFilterOperation = function(context, filterContainer, parentNode)
{
	oFF.QFilterElement.prototype.setupFilterElement.call( this , context, filterContainer, parentNode);
	this.m_setSign = oFF.SetSign.INCLUDING;
};
oFF.QFilterOperation.prototype.size = function()
{
	let comparisonOperator = this.getComparisonOperator();
	return oFF.isNull(comparisonOperator) ? 0 : comparisonOperator.getNumberOfParameters();
};

oFF.QFilterTuple = function() {};
oFF.QFilterTuple.prototype = new oFF.QFilterElement();
oFF.QFilterTuple.prototype._ff_c = "QFilterTuple";

oFF.QFilterTuple._create = function(context, filterContainer)
{
	let object = new oFF.QFilterTuple();
	object.setupFilterElement(context, filterContainer, null);
	object.m_fieldNames = oFF.XList.create();
	object.m_tuples = oFF.XList.create();
	return object;
};
oFF.QFilterTuple.prototype.m_fieldNames = null;
oFF.QFilterTuple.prototype.m_tuples = null;
oFF.QFilterTuple.prototype.addTupleCriteria = function(tupleCriteria)
{
	if (tupleCriteria.size() !== this.getNumberOfFields())
	{
		throw oFF.XException.createIllegalArgumentException("Tuple Criteria size has to be the same as the number of FieldNames.");
	}
	this.m_tuples.add(tupleCriteria);
};
oFF.QFilterTuple.prototype.copyFromInternal = function(other, flags)
{
	oFF.QFilterElement.prototype.copyFromInternal.call( this , other, flags);
	let originFilterTuple = other;
	this.setFieldNames(originFilterTuple.m_fieldNames.createListCopy());
	this.m_tuples = originFilterTuple.m_tuples.createListCopy();
};
oFF.QFilterTuple.prototype.getDataSourceForColumns = oFF.noSupport;
oFF.QFilterTuple.prototype.getFieldNames = function()
{
	return this.m_fieldNames;
};
oFF.QFilterTuple.prototype.getNumberOfFields = function()
{
	return this.m_fieldNames.size();
};
oFF.QFilterTuple.prototype.getOlapComponentType = function()
{
	return oFF.FilterComponentType.TUPLE;
};
oFF.QFilterTuple.prototype.getSourceColumns = oFF.noSupport;
oFF.QFilterTuple.prototype.getTuples = function()
{
	return this.m_tuples;
};
oFF.QFilterTuple.prototype.hasDataSourceColumns = function()
{
	return false;
};
oFF.QFilterTuple.prototype.hasTuples = function()
{
	return true;
};
oFF.QFilterTuple.prototype.releaseObject = function()
{
	this.m_fieldNames = oFF.XObjectExt.release(this.m_fieldNames);
	this.m_tuples = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_tuples);
	oFF.QFilterElement.prototype.releaseObject.call( this );
};
oFF.QFilterTuple.prototype.setDataSourceByName = oFF.noSupport;
oFF.QFilterTuple.prototype.setFieldNames = function(fieldNames)
{
	this.m_fieldNames.addAll(fieldNames);
};
oFF.QFilterTuple.prototype.setSourceColumns = oFF.noSupport;

oFF.QFilterTupleFromDataSource = function() {};
oFF.QFilterTupleFromDataSource.prototype = new oFF.QFilterElement();
oFF.QFilterTupleFromDataSource.prototype._ff_c = "QFilterTupleFromDataSource";

oFF.QFilterTupleFromDataSource._create = function(context, filterContainer)
{
	let object = new oFF.QFilterTupleFromDataSource();
	object.setupFilterElement(context, filterContainer, null);
	object.m_fieldNames = oFF.XList.create();
	object.m_sourceColumns = oFF.XList.create();
	object.m_dataSource = oFF.QDataSource.create();
	return object;
};
oFF.QFilterTupleFromDataSource.prototype.m_dataSource = null;
oFF.QFilterTupleFromDataSource.prototype.m_fieldNames = null;
oFF.QFilterTupleFromDataSource.prototype.m_sourceColumns = null;
oFF.QFilterTupleFromDataSource.prototype.addTupleCriteria = oFF.noSupport;
oFF.QFilterTupleFromDataSource.prototype.copyFromInternal = function(other, flags)
{
	oFF.QFilterElement.prototype.copyFromInternal.call( this , other, flags);
	let originFilterTuple = other;
	this.setFieldNames(originFilterTuple.m_fieldNames.createListCopy());
	this.m_sourceColumns.addAll(originFilterTuple.m_sourceColumns.createListCopy());
	this.m_dataSource.copyFrom(originFilterTuple.m_dataSource, flags);
};
oFF.QFilterTupleFromDataSource.prototype.getDataSourceForColumns = function()
{
	return this.m_dataSource;
};
oFF.QFilterTupleFromDataSource.prototype.getFieldNames = function()
{
	return this.m_fieldNames;
};
oFF.QFilterTupleFromDataSource.prototype.getNumberOfFields = function()
{
	return this.m_fieldNames.size();
};
oFF.QFilterTupleFromDataSource.prototype.getOlapComponentType = function()
{
	return oFF.FilterComponentType.TUPLE;
};
oFF.QFilterTupleFromDataSource.prototype.getSourceColumns = function()
{
	return this.m_sourceColumns;
};
oFF.QFilterTupleFromDataSource.prototype.getTuples = oFF.noSupport;
oFF.QFilterTupleFromDataSource.prototype.hasDataSourceColumns = function()
{
	return true;
};
oFF.QFilterTupleFromDataSource.prototype.hasTuples = function()
{
	return false;
};
oFF.QFilterTupleFromDataSource.prototype.releaseObject = function()
{
	this.m_fieldNames = oFF.XObjectExt.release(this.m_fieldNames);
	this.m_sourceColumns = oFF.XObjectExt.release(this.m_sourceColumns);
	this.m_dataSource = oFF.XObjectExt.release(this.m_dataSource);
};
oFF.QFilterTupleFromDataSource.prototype.setDataSourceByName = function(dataSourceName)
{
	let identifierBase = oFF.QFactory.createDataSource();
	identifierBase.setFullQualifiedName(dataSourceName);
	this.m_dataSource = identifierBase;
	this.notifyNodeChanged();
};
oFF.QFilterTupleFromDataSource.prototype.setDataSourceForColumns = function(dataSource)
{
	this.m_dataSource = dataSource;
	this.notifyNodeChanged();
};
oFF.QFilterTupleFromDataSource.prototype.setFieldNames = function(fieldNames)
{
	this.m_fieldNames.clear();
	this.m_fieldNames.addAll(fieldNames);
	this.notifyNodeChanged();
};
oFF.QFilterTupleFromDataSource.prototype.setSourceColumns = function(sourceColumns)
{
	this.m_sourceColumns.clear();
	this.m_sourceColumns.addAll(sourceColumns);
	this.notifyNodeChanged();
};

oFF.QFilterValueBag = function() {};
oFF.QFilterValueBag.prototype = new oFF.QFilterElement();
oFF.QFilterValueBag.prototype._ff_c = "QFilterValueBag";

oFF.QFilterValueBag._create = function(context, filterExpression, parentNode)
{
	let object = new oFF.QFilterValueBag();
	object.setupValueBag(context, filterExpression, parentNode);
	return object;
};
oFF.QFilterValueBag.prototype.m_externalComponents = null;
oFF.QFilterValueBag.prototype.m_fieldValue = null;
oFF.QFilterValueBag.prototype.m_filterValue = null;
oFF.QFilterValueBag.prototype.m_filterValueType = null;
oFF.QFilterValueBag.prototype.m_internalComponents = null;
oFF.QFilterValueBag.prototype.m_isManualInput = false;
oFF.QFilterValueBag.prototype.m_isStarWildcardEnabled = false;
oFF.QFilterValueBag.prototype.m_memberNavigations = null;
oFF.QFilterValueBag.prototype.m_supplements = null;
oFF.QFilterValueBag.prototype._getSupplementByFieldType = function(memberFilter, presentationType)
{
	if (oFF.isNull(memberFilter) || memberFilter.isEmpty())
	{
		return null;
	}
	let supplementValue = null;
	let supplementFields = memberFilter.getSupplementFields();
	for (let i = 0; i < supplementFields.size(); i++)
	{
		let supplementField = supplementFields.get(i);
		if (supplementField.getPresentationType().isTypeOf(presentationType))
		{
			supplementValue = this.getSupplementValueString(supplementField.getName());
			break;
		}
	}
	return supplementValue;
};
oFF.QFilterValueBag.prototype.addNewFilterValueCompound = function(isInternal)
{
	let newComponentGroup = oFF.QFilterValueCompound._create(this.getContext(), this.getFilterExpression(), this);
	newComponentGroup.setInternal(isInternal);
	if (isInternal)
	{
		this.m_internalComponents = newComponentGroup;
	}
	else
	{
		this.m_externalComponents = newComponentGroup;
	}
	return newComponentGroup;
};
oFF.QFilterValueBag.prototype.addSupplementValue = function(fieldName, value)
{
	if (oFF.notNull(fieldName) && oFF.notNull(value))
	{
		let pair = oFF.XKeyValuePair.create();
		pair.setKeyValue(oFF.XStringValue.create(fieldName), oFF.XStringValue.create(value));
		this.m_supplements.add(pair);
	}
};
oFF.QFilterValueBag.prototype.assertNumeric = function(value)
{
	if (oFF.XMath.isNaN(value))
	{
		throw oFF.XException.createIllegalArgumentException("The value must not be NaN!");
	}
};
oFF.QFilterValueBag.prototype.clearMemberNavigations = function()
{
	if (oFF.XCollectionUtils.hasElements(this.m_memberNavigations))
	{
		this.m_memberNavigations.clear();
		this.notifyNodeChanged();
	}
};
oFF.QFilterValueBag.prototype.copyFromInternal = function(other, flags)
{
	oFF.QFilterElement.prototype.copyFromInternal.call( this , other, flags);
	let originFilterValueBag = other;
	this.m_filterValue = originFilterValueBag.m_filterValue;
	this.m_fieldValue.copyFrom(originFilterValueBag.m_fieldValue, flags);
	this.m_isStarWildcardEnabled = originFilterValueBag.m_isStarWildcardEnabled;
	this.m_isManualInput = originFilterValueBag.m_isManualInput;
	if (oFF.notNull(originFilterValueBag.m_supplements))
	{
		this.m_supplements.clear();
		oFF.XCollectionUtils.addAllClones(this.m_supplements, originFilterValueBag.m_supplements);
	}
	this.m_internalComponents = oFF.XObjectExt.cloneIfNotNull(originFilterValueBag.m_internalComponents);
	this.m_externalComponents = oFF.XObjectExt.cloneIfNotNull(originFilterValueBag.m_externalComponents);
	if (oFF.notNull(originFilterValueBag.m_memberNavigations))
	{
		this.m_memberNavigations = originFilterValueBag.m_memberNavigations.createListCopy();
	}
	this.m_filterValueType = originFilterValueBag.m_filterValueType;
};
oFF.QFilterValueBag.prototype.getBoolean = function()
{
	return oFF.XValueUtil.getBoolean(this.getValue(), false, false);
};
oFF.QFilterValueBag.prototype.getDate = function()
{
	return this.getValue();
};
oFF.QFilterValueBag.prototype.getDateTime = function()
{
	return this.getValue();
};
oFF.QFilterValueBag.prototype.getDecFloat = function()
{
	return oFF.XValueUtil.getDecFloat(this.getValue(), false, false);
};
oFF.QFilterValueBag.prototype.getDimension = function()
{
	return oFF.isNull(this.m_fieldValue) ? null : this.m_fieldValue.getDimension();
};
oFF.QFilterValueBag.prototype.getDimensionMember = function()
{
	if (this.m_filterValueType === oFF.XValueType.VARIABLE)
	{
		let varValue = this.getVariableValue();
		if (varValue.getVariableType() === oFF.VariableType.DIMENSION_MEMBER_VARIABLE)
		{
			let dimvar = varValue;
			return dimvar.getDimensionMember();
		}
	}
	return oFF.isNull(this.m_fieldValue) ? null : this.m_fieldValue.getDimensionMember();
};
oFF.QFilterValueBag.prototype.getDisplayKeySupplement = function(memberFilter)
{
	return this._getSupplementByFieldType(memberFilter, oFF.PresentationType.DISPLAY_KEY);
};
oFF.QFilterValueBag.prototype.getDouble = function()
{
	return oFF.XValueUtil.getDouble(this.getValue(), false, false);
};
oFF.QFilterValueBag.prototype.getExternalKeyMembers = function()
{
	return oFF.isNull(this.m_externalComponents) ? null : this.m_externalComponents.getMembers();
};
oFF.QFilterValueBag.prototype.getField = function()
{
	return oFF.isNull(this.m_fieldValue) ? null : this.m_fieldValue.getField();
};
oFF.QFilterValueBag.prototype.getFieldValue = function()
{
	return this.m_fieldValue;
};
oFF.QFilterValueBag.prototype.getFilterValue = function()
{
	return this.m_filterValue;
};
oFF.QFilterValueBag.prototype.getFilterValueType = function()
{
	return this.m_filterValueType;
};
oFF.QFilterValueBag.prototype.getFlatOrHierarchicalDisplayKeySupplement = function(memberFilter)
{
	let supplement = this._getSupplementByFieldType(memberFilter, oFF.PresentationType.DISPLAY_KEY);
	if (oFF.isNull(supplement))
	{
		supplement = this._getSupplementByFieldType(memberFilter, oFF.PresentationType.HIERARCHY_DISPLAY_KEY);
	}
	return supplement;
};
oFF.QFilterValueBag.prototype.getFlatOrHierarchicalTextSupplement = function(memberFilter)
{
	let supplement = this._getSupplementByFieldType(memberFilter, oFF.PresentationType.TEXT);
	if (oFF.isNull(supplement))
	{
		supplement = this._getSupplementByFieldType(memberFilter, oFF.PresentationType.HIERARCHY_TEXT);
	}
	return supplement;
};
oFF.QFilterValueBag.prototype.getFormattedValue = function()
{
	return oFF.isNull(this.m_fieldValue) ? null : this.m_fieldValue.getFormattedValue();
};
oFF.QFilterValueBag.prototype.getFunctionalVariableValueParameter = function(parameter)
{
	return this.isFunctionalVariableValue() && oFF.notNull(parameter) ? this.getValue().getParameterValue(parameter) : null;
};
oFF.QFilterValueBag.prototype.getGeometry = function()
{
	let value = this.getValue();
	return value;
};
oFF.QFilterValueBag.prototype.getInteger = function()
{
	return oFF.XValueUtil.getInteger(this.getValue(), false, false);
};
oFF.QFilterValueBag.prototype.getInternalKeyMembers = function()
{
	return oFF.isNull(this.m_internalComponents) ? null : this.m_internalComponents.getMembers();
};
oFF.QFilterValueBag.prototype.getLineString = function()
{
	return this.getValue();
};
oFF.QFilterValueBag.prototype.getLong = function()
{
	return oFF.XValueUtil.getLong(this.getValue(), false, false);
};
oFF.QFilterValueBag.prototype.getMemberNavigations = function()
{
	if (oFF.isNull(this.m_memberNavigations))
	{
		this.m_memberNavigations = oFF.XList.create();
	}
	return this.m_memberNavigations;
};
oFF.QFilterValueBag.prototype.getMultiLineString = function()
{
	return this.getValue();
};
oFF.QFilterValueBag.prototype.getMultiPoint = function()
{
	return this.getValue();
};
oFF.QFilterValueBag.prototype.getMultiPolygon = function()
{
	return this.getValue();
};
oFF.QFilterValueBag.prototype.getNull = oFF.noSupport;
oFF.QFilterValueBag.prototype.getPoint = function()
{
	return this.getValue();
};
oFF.QFilterValueBag.prototype.getPolygon = function()
{
	return this.getValue();
};
oFF.QFilterValueBag.prototype.getString = function()
{
	if (this.getValue() === null)
	{
		return null;
	}
	if (this.getValueType().isSpatial())
	{
		return this.getValue().toWKT();
	}
	else if (this.getValueType().isVariable())
	{
		let variable = this.getValue();
		return variable.getVariable().getName();
	}
	return this.getValue().toString();
};
oFF.QFilterValueBag.prototype.getSupplementValueString = function(fieldName)
{
	for (let i = 0; i < this.m_supplements.size(); i++)
	{
		let pair = this.m_supplements.get(i);
		if (oFF.XString.isEqual(pair.getKey().toString(), fieldName))
		{
			return pair.getValue().toString();
		}
	}
	return null;
};
oFF.QFilterValueBag.prototype.getSupplementValues = function()
{
	return this.m_supplements.getValuesAsReadOnlyList();
};
oFF.QFilterValueBag.prototype.getTextSupplement = function(memberFilter)
{
	return this._getSupplementByFieldType(memberFilter, oFF.PresentationType.TEXT);
};
oFF.QFilterValueBag.prototype.getTime = function()
{
	return this.getValue();
};
oFF.QFilterValueBag.prototype.getTimeSpan = function()
{
	return this.getValue();
};
oFF.QFilterValueBag.prototype.getValue = function()
{
	return this.m_fieldValue.getValue();
};
oFF.QFilterValueBag.prototype.getValueType = function()
{
	if (oFF.isNull(this.m_filterValueType))
	{
		let value = this.getValue();
		return oFF.isNull(value) ? null : value.getValueType();
	}
	return this.getFilterValueType();
};
oFF.QFilterValueBag.prototype.getVariableValue = function()
{
	let value = this.getValue();
	if (oFF.notNull(value))
	{
		let valueType = value.getValueType();
		if (valueType === oFF.XValueType.VARIABLE)
		{
			let varValue = value;
			return varValue.getVariable();
		}
	}
	return null;
};
oFF.QFilterValueBag.prototype.hasValue = function()
{
	return this.m_fieldValue.hasValue();
};
oFF.QFilterValueBag.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (other === this)
	{
		return true;
	}
	let xOther = other;
	if (!oFF.XString.isEqual(this.m_filterValue, xOther.m_filterValue))
	{
		return false;
	}
	if (this.m_isStarWildcardEnabled !== xOther.m_isStarWildcardEnabled)
	{
		return false;
	}
	if (this.m_isManualInput !== xOther.m_isManualInput)
	{
		return false;
	}
	if (this.m_filterValueType !== xOther.m_filterValueType)
	{
		return false;
	}
	if (!this.m_fieldValue.isEqualTo(xOther.m_fieldValue))
	{
		return false;
	}
	if (!oFF.XObjectExt.areEqual(this.m_memberNavigations, xOther.m_memberNavigations))
	{
		return false;
	}
	if (!oFF.XObjectExt.areEqual(this.m_supplements, xOther.m_supplements))
	{
		return false;
	}
	if (!oFF.XObjectExt.areEqual(this.m_internalComponents, xOther.m_internalComponents))
	{
		return false;
	}
	if (!oFF.XObjectExt.areEqual(this.m_externalComponents, xOther.m_externalComponents))
	{
		return false;
	}
	return true;
};
oFF.QFilterValueBag.prototype.isFunctionalVariableValue = function()
{
	let variableValue = this.getVariableValue();
	return oFF.notNull(variableValue) && variableValue.getVariableType() === oFF.VariableType.FUNCTIONAL_VARIABLE;
};
oFF.QFilterValueBag.prototype.isManualInput = function()
{
	return this.m_isManualInput;
};
oFF.QFilterValueBag.prototype.isStarWildcardEnabled = function()
{
	return this.m_isStarWildcardEnabled;
};
oFF.QFilterValueBag.prototype.releaseObject = function()
{
	this.m_supplements = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_supplements);
	this.m_internalComponents = oFF.XObjectExt.release(this.m_internalComponents);
	this.m_externalComponents = oFF.XObjectExt.release(this.m_externalComponents);
	this.m_memberNavigations = oFF.XObjectExt.release(this.m_memberNavigations);
	this.m_fieldValue = oFF.XObjectExt.release(this.m_fieldValue);
	this.m_filterValue = null;
	this.m_filterValueType = null;
	oFF.QFilterElement.prototype.releaseObject.call( this );
};
oFF.QFilterValueBag.prototype.removeSupplementValue = function(fieldName)
{
	if (oFF.notNull(fieldName))
	{
		for (let i = 0; i < this.m_supplements.size(); i++)
		{
			let pair = this.m_supplements.get(i);
			if (oFF.XString.isEqual(pair.getKey().toString(), fieldName))
			{
				this.m_supplements.removeAt(i);
				return;
			}
		}
	}
};
oFF.QFilterValueBag.prototype.setBoolean = function(value)
{
	this.setValue(oFF.XBooleanValue.create(value));
};
oFF.QFilterValueBag.prototype.setDate = function(value)
{
	this.setValue(value);
};
oFF.QFilterValueBag.prototype.setDateTime = function(value)
{
	this.setValue(value);
};
oFF.QFilterValueBag.prototype.setDecFloat = function(value)
{
	this.setValue(value);
};
oFF.QFilterValueBag.prototype.setDimensionMember = function(member)
{
	if (oFF.isNull(member))
	{
		this.setFieldValue(null);
	}
	else
	{
		let fieldValue = member.getKeyFieldValue();
		if (oFF.isNull(fieldValue))
		{
			let dimension = member.getDimension();
			if (oFF.notNull(dimension))
			{
				fieldValue = member.getFieldValue(dimension.getFlatKeyField());
				if (oFF.isNull(fieldValue))
				{
					fieldValue = member.getFieldValue(dimension.getHierarchyKeyField());
				}
			}
		}
		this.setFieldValue(fieldValue);
	}
};
oFF.QFilterValueBag.prototype.setDouble = function(value)
{
	this.assertNumeric(value);
	this.setValue(oFF.XDoubleValue.create(value));
};
oFF.QFilterValueBag.prototype.setFieldValue = function(fieldValue)
{
	this.m_fieldValue.setFieldValue(fieldValue);
	this.notifyNodeChanged();
};
oFF.QFilterValueBag.prototype.setFilterValue = function(filterValue)
{
	if (!oFF.XString.isEqual(this.m_filterValue, filterValue))
	{
		this.m_filterValue = filterValue;
		this.notifyNodeChanged();
	}
};
oFF.QFilterValueBag.prototype.setFilterValueType = function(valueType)
{
	this.m_filterValueType = valueType;
};
oFF.QFilterValueBag.prototype.setFunctionalVariableValueParameter = function(parameter, parameterValue)
{
	if (this.isFunctionalVariableValue() && oFF.notNull(parameter))
	{
		this.getValue().setParameterValue(parameter, parameterValue);
	}
};
oFF.QFilterValueBag.prototype.setInteger = function(value)
{
	this.assertNumeric(value);
	this.setValue(oFF.XIntegerValue.create(value));
};
oFF.QFilterValueBag.prototype.setIsManualInput = function(isManualInput)
{
	this.m_isManualInput = isManualInput;
};
oFF.QFilterValueBag.prototype.setIsStarWildcardEnabled = function(isEnabled)
{
	if (this.m_isStarWildcardEnabled !== isEnabled)
	{
		this.m_isStarWildcardEnabled = isEnabled;
		this.notifyNodeChanged();
	}
};
oFF.QFilterValueBag.prototype.setLineString = function(value)
{
	this.setValue(value);
};
oFF.QFilterValueBag.prototype.setLong = function(value)
{
	this.assertNumeric(value);
	this.setValue(oFF.XLongValue.create(value));
};
oFF.QFilterValueBag.prototype.setMultiLineString = function(value)
{
	this.setValue(value);
};
oFF.QFilterValueBag.prototype.setMultiPoint = function(value)
{
	this.setValue(value);
};
oFF.QFilterValueBag.prototype.setMultiPolygon = function(value)
{
	this.setValue(value);
};
oFF.QFilterValueBag.prototype.setPoint = function(value)
{
	this.setValue(value);
};
oFF.QFilterValueBag.prototype.setPolygon = function(value)
{
	this.setValue(value);
};
oFF.QFilterValueBag.prototype.setString = function(value)
{
	this.setValue(oFF.XStringValue.create(value));
};
oFF.QFilterValueBag.prototype.setTime = function(value)
{
	this.setValue(value);
};
oFF.QFilterValueBag.prototype.setTimeSpan = function(value)
{
	this.setValue(value);
};
oFF.QFilterValueBag.prototype.setValue = function(value)
{
	this.m_fieldValue.setValue(value);
	this.notifyNodeChanged();
};
oFF.QFilterValueBag.prototype.setVariableValue = function(variable)
{
	if (oFF.isNull(variable))
	{
		this.setValue(null);
	}
	else
	{
		this.setValue(variable.newVariableValue());
	}
	this.setFilterValueType(oFF.XValueType.VARIABLE);
};
oFF.QFilterValueBag.prototype.setupValueBag = function(context, filterExpression, parentNode)
{
	this.setupFilterElement(context, filterExpression, parentNode);
	this.m_supplements = oFF.XList.create();
	this.m_fieldValue = oFF.QFieldValue._create(context);
};
oFF.QFilterValueBag.prototype.supportsStarWildcard = function()
{
	return false;
};
oFF.QFilterValueBag.prototype.updateSupplementValue = function(fieldName, value)
{
	if (oFF.notNull(fieldName) && oFF.notNull(value))
	{
		let existingSupplement = oFF.XCollectionUtils.findFirst(this.m_supplements, (pair) => {
			return oFF.XString.isEqual(pair.getKey().toString(), fieldName);
		});
		if (oFF.notNull(existingSupplement))
		{
			existingSupplement.setValue(oFF.XStringValue.create(value));
		}
		else
		{
			this.addSupplementValue(fieldName, value);
		}
	}
};

oFF.QFilterValueCompound = function() {};
oFF.QFilterValueCompound.prototype = new oFF.QFilterElement();
oFF.QFilterValueCompound.prototype._ff_c = "QFilterValueCompound";

oFF.QFilterValueCompound._create = function(context, filterExpression, parentNode)
{
	let object = new oFF.QFilterValueCompound();
	object.setupValueComponentGroup(context, filterExpression, parentNode);
	return object;
};
oFF.QFilterValueCompound.prototype.m_internal = false;
oFF.QFilterValueCompound.prototype.m_members = null;
oFF.QFilterValueCompound.prototype.addMember = function(fieldName, valueAsString)
{
	let newComponent = oFF.QFilterValueMember._create(this.getContext(), this.getFilterExpression(), this);
	newComponent.setFieldName(fieldName);
	newComponent.setValueAsString(valueAsString);
	this.m_members.add(newComponent);
};
oFF.QFilterValueCompound.prototype.copyFromInternal = function(other, flags)
{
	oFF.QFilterElement.prototype.copyFromInternal.call( this , other, flags);
	let originFilterValueComponentGroup = other;
	this.m_internal = originFilterValueComponentGroup.m_internal;
	if (oFF.notNull(originFilterValueComponentGroup.m_members))
	{
		this.m_members.clear();
		oFF.XCollectionUtils.addAllClones(this.m_members, originFilterValueComponentGroup.m_members);
	}
};
oFF.QFilterValueCompound.prototype.getMembers = function()
{
	return this.m_members;
};
oFF.QFilterValueCompound.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (other === this)
	{
		return true;
	}
	let xOther = other;
	if (this.m_internal !== xOther.m_internal)
	{
		return false;
	}
	if (!oFF.XObjectExt.areEqual(this.m_members, xOther.m_members))
	{
		return false;
	}
	return true;
};
oFF.QFilterValueCompound.prototype.isInternal = function()
{
	return this.m_internal;
};
oFF.QFilterValueCompound.prototype.releaseObject = function()
{
	this.m_members = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_members);
	this.m_internal = false;
	oFF.QFilterElement.prototype.releaseObject.call( this );
};
oFF.QFilterValueCompound.prototype.setInternal = function(internal)
{
	this.m_internal = internal;
};
oFF.QFilterValueCompound.prototype.setupValueComponentGroup = function(context, filterExpression, parentNode)
{
	this.setupFilterElement(context, filterExpression, parentNode);
	this.m_members = oFF.XList.create();
};

oFF.QFilterValueMember = function() {};
oFF.QFilterValueMember.prototype = new oFF.QFilterElement();
oFF.QFilterValueMember.prototype._ff_c = "QFilterValueMember";

oFF.QFilterValueMember._create = function(context, filterExpression, parentNode)
{
	let object = new oFF.QFilterValueMember();
	object.setupValueComponentGroup(context, filterExpression, parentNode);
	return object;
};
oFF.QFilterValueMember.prototype.m_fieldName = null;
oFF.QFilterValueMember.prototype.m_rawValue = null;
oFF.QFilterValueMember.prototype.copyFromInternal = function(other, flags)
{
	oFF.QFilterElement.prototype.copyFromInternal.call( this , other, flags);
	let originFilterValueComponentGroup = other;
	this.m_rawValue = originFilterValueComponentGroup.m_rawValue;
	this.m_fieldName = originFilterValueComponentGroup.m_fieldName;
};
oFF.QFilterValueMember.prototype.getField = function()
{
	return this.getQueryModel() === null ? null : this.getQueryModel().getFieldByName(this.m_fieldName);
};
oFF.QFilterValueMember.prototype.getFieldName = function()
{
	return this.m_fieldName;
};
oFF.QFilterValueMember.prototype.getValue = function()
{
	let value;
	let field = this.getField();
	if (oFF.notNull(field))
	{
		try
		{
			value = oFF.XValueUtil.getValueFromString(this.m_rawValue, field.getValueType());
		}
		catch (t)
		{
			value = oFF.XStringValue.create(this.m_rawValue);
		}
	}
	else
	{
		value = oFF.XStringValue.create(this.m_rawValue);
	}
	return value;
};
oFF.QFilterValueMember.prototype.getValueAsString = function()
{
	return this.m_rawValue;
};
oFF.QFilterValueMember.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (other === this)
	{
		return true;
	}
	let xOther = other;
	if (!oFF.XString.isEqual(this.m_rawValue, xOther.m_rawValue))
	{
		return false;
	}
	if (!oFF.XString.isEqual(this.m_fieldName, xOther.m_fieldName))
	{
		return false;
	}
	return true;
};
oFF.QFilterValueMember.prototype.releaseObject = function()
{
	this.m_rawValue = null;
	this.m_fieldName = null;
	oFF.QFilterElement.prototype.releaseObject.call( this );
};
oFF.QFilterValueMember.prototype.setFieldName = function(fieldName)
{
	this.m_fieldName = fieldName;
};
oFF.QFilterValueMember.prototype.setValueAsString = function(value)
{
	this.m_rawValue = value;
};
oFF.QFilterValueMember.prototype.setupValueComponentGroup = function(context, filterExpression, parentNode)
{
	this.setupFilterElement(context, filterExpression, parentNode);
};

oFF.QFilterVirtualDatasource = function() {};
oFF.QFilterVirtualDatasource.prototype = new oFF.QFilterElement();
oFF.QFilterVirtualDatasource.prototype._ff_c = "QFilterVirtualDatasource";

oFF.QFilterVirtualDatasource._create = function(context, filterContainer)
{
	let object = new oFF.QFilterVirtualDatasource();
	object.setupFilterElement(context, filterContainer, null);
	return object;
};
oFF.QFilterVirtualDatasource.prototype.m_objectName = null;
oFF.QFilterVirtualDatasource.prototype.m_packageName = null;
oFF.QFilterVirtualDatasource.prototype.m_schemaName = null;
oFF.QFilterVirtualDatasource.prototype.copyFromInternal = function(other, flags)
{
	oFF.QFilterElement.prototype.copyFromInternal.call( this , other, flags);
	let originFilterVirtualDatasource = other;
	this.m_schemaName = originFilterVirtualDatasource.getSchemaName();
	this.m_packageName = originFilterVirtualDatasource.getPackageName();
	this.m_objectName = originFilterVirtualDatasource.getObjectName();
};
oFF.QFilterVirtualDatasource.prototype.getObjectName = function()
{
	return this.m_objectName;
};
oFF.QFilterVirtualDatasource.prototype.getOlapComponentType = function()
{
	return oFF.FilterComponentType.VIRTUAL_DATASOURCE;
};
oFF.QFilterVirtualDatasource.prototype.getPackageName = function()
{
	return this.m_packageName;
};
oFF.QFilterVirtualDatasource.prototype.getSchemaName = function()
{
	return this.m_schemaName;
};
oFF.QFilterVirtualDatasource.prototype.releaseObject = function()
{
	this.m_schemaName = null;
	this.m_packageName = null;
	this.m_objectName = null;
	oFF.QFilterElement.prototype.releaseObject.call( this );
};
oFF.QFilterVirtualDatasource.prototype.setDetails = function(schemaName, packageName, objectName)
{
	this.m_schemaName = schemaName;
	this.m_packageName = packageName;
	this.m_objectName = objectName;
};

oFF.QFormulaItemAttribute = function() {};
oFF.QFormulaItemAttribute.prototype = new oFF.QBlendableFormulaItem();
oFF.QFormulaItemAttribute.prototype._ff_c = "QFormulaItemAttribute";

oFF.QFormulaItemAttribute._createMember = function(context, parentNode)
{
	let formula = new oFF.QFormulaItemAttribute();
	formula.setupFormulaAttribute(context, parentNode);
	return formula;
};
oFF.QFormulaItemAttribute.prototype.m_fieldName = null;
oFF.QFormulaItemAttribute.prototype.cloneOlapComponent = function(context, parent)
{
	let newItem = oFF.QFormulaItemAttribute._createMember(context, parent);
	newItem.copyFormulaItemAttribute(this);
	return newItem;
};
oFF.QFormulaItemAttribute.prototype.copyFormulaItemAttribute = function(origin)
{
	this.copyFrom(origin, null);
	this.copyBlendingFormulaItem(origin);
	this.m_fieldName = origin.m_fieldName;
};
oFF.QFormulaItemAttribute.prototype.getFieldName = function()
{
	return this.m_fieldName;
};
oFF.QFormulaItemAttribute.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.FORMULA_ITEM_ATTRIBUTE;
};
oFF.QFormulaItemAttribute.prototype.releaseObject = function()
{
	this.m_fieldName = null;
	oFF.QBlendableFormulaItem.prototype.releaseObject.call( this );
};
oFF.QFormulaItemAttribute.prototype.setFieldByName = function(fieldName)
{
	this.m_fieldName = fieldName;
	this.notifyNodeChanged();
};
oFF.QFormulaItemAttribute.prototype.setupFormulaAttribute = function(context, parentNode)
{
	this.setupModelComponent(context, parentNode);
	this.m_fieldName = null;
};

oFF.QFormulaItemMember = function() {};
oFF.QFormulaItemMember.prototype = new oFF.QBlendableFormulaItem();
oFF.QFormulaItemMember.prototype._ff_c = "QFormulaItemMember";

oFF.QFormulaItemMember._createMember = function(context, parentNode)
{
	let formula = new oFF.QFormulaItemMember();
	formula.setupModelComponent(context, parentNode);
	return formula;
};
oFF.QFormulaItemMember.prototype.m_booked = false;
oFF.QFormulaItemMember.prototype.m_dimensionName = null;
oFF.QFormulaItemMember.prototype.m_memberName = null;
oFF.QFormulaItemMember.prototype.m_memberVariable = null;
oFF.QFormulaItemMember.prototype.m_previous = false;
oFF.QFormulaItemMember.prototype._setBooked = function(booked)
{
	if (this.m_booked !== booked)
	{
		this.m_booked = booked;
		this.notifyNodeChanged();
	}
};
oFF.QFormulaItemMember.prototype._setMemberName = function(name)
{
	if (!oFF.XString.isEqual(this.m_memberName, name))
	{
		this.m_memberName = name;
		this.notifyNodeChanged();
	}
};
oFF.QFormulaItemMember.prototype._setPrevious = function(previous)
{
	if (this.m_previous !== previous)
	{
		this.m_previous = previous;
		this.notifyNodeChanged();
	}
};
oFF.QFormulaItemMember.prototype.cloneOlapComponent = function(context, parent)
{
	let newItem = oFF.QFormulaItemMember._createMember(context, parent);
	newItem.copyFormulaItemMember(this);
	return newItem;
};
oFF.QFormulaItemMember.prototype.copyFormulaItemMember = function(origin)
{
	this.copyFrom(origin, null);
	this.m_memberName = origin.m_memberName;
	this.m_dimensionName = origin.m_dimensionName;
	this.m_booked = origin.m_booked;
	this.m_previous = origin.m_previous;
	if (oFF.notNull(origin.m_memberVariable))
	{
		this.setVariable(this.getContext().getVariableContainer().getVariables().getByKey(origin.getVariable().getName()));
	}
	this.copyBlendingFormulaItem(origin);
};
oFF.QFormulaItemMember.prototype.getDimensionName = function()
{
	return this.m_dimensionName;
};
oFF.QFormulaItemMember.prototype.getMemberName = function()
{
	return this.m_memberName;
};
oFF.QFormulaItemMember.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.FORMULA_ITEM_MEMBER;
};
oFF.QFormulaItemMember.prototype.getVariable = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_memberVariable);
};
oFF.QFormulaItemMember.prototype.isBooked = function()
{
	return this.m_booked;
};
oFF.QFormulaItemMember.prototype.isPrevious = function()
{
	return this.m_previous;
};
oFF.QFormulaItemMember.prototype.releaseObject = function()
{
	this.m_memberName = null;
	this.m_dimensionName = null;
	this.m_memberVariable = null;
	this.m_previous = false;
	this.m_booked = false;
	oFF.QBlendableFormulaItem.prototype.releaseObject.call( this );
};
oFF.QFormulaItemMember.prototype.setBooked = function()
{
	this.m_memberVariable = null;
	this.m_previous = false;
	this.m_booked = true;
	this.m_memberName = null;
};
oFF.QFormulaItemMember.prototype.setDimension = function(dimension)
{
	if (oFF.isNull(dimension))
	{
		this.setDimensionName(null);
	}
	else
	{
		this.setDimensionName(dimension.getName());
	}
};
oFF.QFormulaItemMember.prototype.setDimensionName = function(dimensionName)
{
	if (!oFF.XString.isEqual(this.m_dimensionName, dimensionName))
	{
		this.m_dimensionName = dimensionName;
		this.notifyNodeChanged();
	}
};
oFF.QFormulaItemMember.prototype.setMember = function(member)
{
	this.setMemberName(member.getName());
};
oFF.QFormulaItemMember.prototype.setMemberName = function(name)
{
	this._setMemberName(name);
	this._setBooked(false);
	this._setPrevious(false);
	this.m_memberVariable = null;
};
oFF.QFormulaItemMember.prototype.setPrevious = function()
{
	this._setPrevious(true);
	this._setBooked(false);
	this._setMemberName(null);
	this.m_memberVariable = null;
};
oFF.QFormulaItemMember.prototype.setVariable = function(variable)
{
	this.m_memberVariable = oFF.XWeakReferenceUtil.getWeakRef(variable);
	this._setBooked(false);
	this._setPrevious(false);
	this._setMemberName(null);
	this.setDimensionName(variable.getDimension().getName());
};

oFF.QLeveledHierarchy = function() {};
oFF.QLeveledHierarchy.prototype = new oFF.QModelComponent();
oFF.QLeveledHierarchy.prototype._ff_c = "QLeveledHierarchy";

oFF.QLeveledHierarchy.create = function(context, dimension, name)
{
	let object = new oFF.QLeveledHierarchy();
	object.setupLeveledHierarchy(context, dimension, name);
	if (oFF.notNull(dimension))
	{
		object.m_dimensionName = dimension.getName();
	}
	return object;
};
oFF.QLeveledHierarchy.prototype.m_dateFrom = null;
oFF.QLeveledHierarchy.prototype.m_dateTo = null;
oFF.QLeveledHierarchy.prototype.m_dimensionName = null;
oFF.QLeveledHierarchy.prototype.m_dueDate = null;
oFF.QLeveledHierarchy.prototype.m_hierId = null;
oFF.QLeveledHierarchy.prototype.m_hierType = null;
oFF.QLeveledHierarchy.prototype.m_hierarchyDescription = null;
oFF.QLeveledHierarchy.prototype.m_hierarchyType = null;
oFF.QLeveledHierarchy.prototype.m_isModeled = false;
oFF.QLeveledHierarchy.prototype.m_isRemote = false;
oFF.QLeveledHierarchy.prototype.m_level = null;
oFF.QLeveledHierarchy.prototype.m_objectVersion = null;
oFF.QLeveledHierarchy.prototype.m_owner = null;
oFF.QLeveledHierarchy.prototype.m_uniqueName = null;
oFF.QLeveledHierarchy.prototype.m_version = null;
oFF.QLeveledHierarchy.prototype.m_versionDescription = null;
oFF.QLeveledHierarchy.prototype.cloneOlapComponent = function(context, parent)
{
	let dimension = parent;
	if (oFF.notNull(context) && this.getDimension() !== null && oFF.isNull(dimension))
	{
		dimension = context.getDimensionByName(this.getDimension().getName());
	}
	let clone = oFF.QLeveledHierarchy.create(context, dimension, this.getName());
	clone.setDateFrom(oFF.XObjectExt.cloneIfNotNull(this.getDateFrom()));
	clone.setDateTo(oFF.XObjectExt.cloneIfNotNull(this.getDateTo()));
	clone.setHierarchyDueDate(oFF.XObjectExt.cloneIfNotNull(this.getHierarchyDueDate()));
	clone.setHierarchyDescription(this.getHierarchyDescription());
	clone.setHierarchyUniqueName(this.getHierarchyUniqueName());
	clone.setHierId(this.getHierId());
	clone.setHierType(this.getHierType());
	clone.setIsRemote(this.isRemote());
	clone.setIsModeled(this.isModeled());
	clone.setObjectVersion(this.getObjectVersion());
	clone.setOwner(this.getOwner());
	clone.setHierarchyVersion(this.getHierarchyVersion());
	clone.setVersionDescription(this.getVersionDescription());
	clone.setHierarchyType(this.getHierarchyType());
	clone.setDimensionName(this.getDimensionName());
	oFF.XCollectionUtils.addAllClones(clone.getAllLevelBase(), this.m_level);
	return clone;
};
oFF.QLeveledHierarchy.prototype.getAllHierarchyLevelNames = function(excludedLevelTypes)
{
	let dimensionLevelNames = oFF.XList.create();
	let levels = this.getHierarchyLevels();
	for (let i = 0; i < levels.size(); i++)
	{
		let level = levels.get(i);
		if (!excludedLevelTypes.contains(level.getLevelType()))
		{
			dimensionLevelNames.add(level.getLevelDimensionName());
		}
	}
	return dimensionLevelNames;
};
oFF.QLeveledHierarchy.prototype.getAllLevel = function()
{
	return this.m_level;
};
oFF.QLeveledHierarchy.prototype.getAllLevelBase = function()
{
	return this.m_level;
};
oFF.QLeveledHierarchy.prototype.getAllLevelTypes = function()
{
	let result = oFF.XSetOfNameObject.create();
	let levels = this.getAllLevel();
	for (let i = 0; i < levels.size(); i++)
	{
		result.add(levels.get(i).getLevelType());
	}
	return result;
};
oFF.QLeveledHierarchy.prototype.getDateFrom = function()
{
	return this.m_dateFrom;
};
oFF.QLeveledHierarchy.prototype.getDateTo = function()
{
	return this.m_dateTo;
};
oFF.QLeveledHierarchy.prototype.getDimension = function()
{
	return this.getParentComponent();
};
oFF.QLeveledHierarchy.prototype.getDimensionName = function()
{
	return this.m_dimensionName;
};
oFF.QLeveledHierarchy.prototype.getDueDate = function()
{
	return this.m_dueDate;
};
oFF.QLeveledHierarchy.prototype.getHierId = function()
{
	return this.m_hierId;
};
oFF.QLeveledHierarchy.prototype.getHierType = function()
{
	return this.m_hierType;
};
oFF.QLeveledHierarchy.prototype.getHierarchyDescription = function()
{
	return this.m_hierarchyDescription;
};
oFF.QLeveledHierarchy.prototype.getHierarchyDueDate = function()
{
	return this.m_dueDate;
};
oFF.QLeveledHierarchy.prototype.getHierarchyLevels = function()
{
	return this.getAllLevel();
};
oFF.QLeveledHierarchy.prototype.getHierarchyName = function()
{
	return this.getName();
};
oFF.QLeveledHierarchy.prototype.getHierarchyType = function()
{
	return this.m_hierarchyType;
};
oFF.QLeveledHierarchy.prototype.getHierarchyUniqueName = function()
{
	return this.m_uniqueName;
};
oFF.QLeveledHierarchy.prototype.getHierarchyVersion = function()
{
	return this.m_version;
};
oFF.QLeveledHierarchy.prototype.getLevel = function(level)
{
	let lvlIt = this.m_level.getIterator();
	while (lvlIt.hasNext())
	{
		let lvl = lvlIt.next();
		if (lvl.getLevelNumber() === level)
		{
			oFF.XObjectExt.release(lvlIt);
			return lvl;
		}
	}
	oFF.XObjectExt.release(lvlIt);
	return null;
};
oFF.QLeveledHierarchy.prototype.getLevelByName = function(levelName)
{
	let levels = this.getHierarchyLevels();
	if (oFF.isNull(levels) || levels.size() === 0)
	{
		throw oFF.XException.createIllegalArgumentException("levels cannot be empty or null");
	}
	return oFF.XCollectionUtils.findFirst(levels, (level) => {
		return oFF.XString.isEqual(level.getLevelName(), levelName);
	});
};
oFF.QLeveledHierarchy.prototype.getLevelByType = function(type)
{
	let lvlIt = this.m_level.getIterator();
	while (lvlIt.hasNext())
	{
		let lvl = lvlIt.next();
		if (lvl.getLevelType().isEqualTo(type))
		{
			oFF.XObjectExt.release(lvlIt);
			return lvl;
		}
	}
	oFF.XObjectExt.release(lvlIt);
	return null;
};
oFF.QLeveledHierarchy.prototype.getLevelNumberByType = function(type)
{
	let level = this.getLevelByType(type);
	if (oFF.notNull(level))
	{
		return level.getLevelNumber();
	}
	return -1;
};
oFF.QLeveledHierarchy.prototype.getMostCoarseLevel = function()
{
	let highestLevel = null;
	for (let i = 0; i < this.m_level.size(); i++)
	{
		let level = this.m_level.get(i);
		if (oFF.isNull(highestLevel) || level.getLevelNumber() < highestLevel.getLevelNumber())
		{
			highestLevel = level;
		}
	}
	return highestLevel;
};
oFF.QLeveledHierarchy.prototype.getMostGranularLevel = function()
{
	let lowestLevel = null;
	for (let i = 0; i < this.m_level.size(); i++)
	{
		let level = this.m_level.get(i);
		if (oFF.isNull(lowestLevel) || level.getLevelNumber() > lowestLevel.getLevelNumber())
		{
			lowestLevel = level;
		}
	}
	return lowestLevel;
};
oFF.QLeveledHierarchy.prototype.getObjectVersion = function()
{
	return this.m_objectVersion;
};
oFF.QLeveledHierarchy.prototype.getOwner = function()
{
	return this.m_owner;
};
oFF.QLeveledHierarchy.prototype.getVersion = function()
{
	return this.m_version;
};
oFF.QLeveledHierarchy.prototype.getVersionDescription = function()
{
	return this.m_versionDescription;
};
oFF.QLeveledHierarchy.prototype.isCustomHierarchy = function()
{
	return false;
};
oFF.QLeveledHierarchy.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let xOther = other;
	return oFF.XString.isEqual(this.getHierarchyUniqueName(), xOther.getHierarchyUniqueName()) && oFF.XString.isEqual(this.getHierarchyName(), xOther.getHierarchyName()) && oFF.XString.isEqual(this.getDimensionName(), xOther.getDimensionName()) && oFF.XObjectExt.areEqual(this.getDateFrom(), xOther.getDateFrom()) && oFF.XObjectExt.areEqual(this.getDateTo(), xOther.getDateTo()) && oFF.XString.isEqual(this.getHierarchyVersion(), xOther.getHierarchyVersion());
};
oFF.QLeveledHierarchy.prototype.isModeled = function()
{
	return this.m_isModeled;
};
oFF.QLeveledHierarchy.prototype.isRemote = function()
{
	return this.m_isRemote;
};
oFF.QLeveledHierarchy.prototype.releaseObject = function()
{
	this.m_level = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_level);
	this.m_dateFrom = oFF.XObjectExt.release(this.m_dateFrom);
	this.m_dateTo = oFF.XObjectExt.release(this.m_dateTo);
	this.m_dueDate = oFF.XObjectExt.release(this.m_dueDate);
	this.m_hierarchyDescription = null;
	this.m_hierId = null;
	this.m_hierType = null;
	this.m_objectVersion = null;
	this.m_owner = null;
	this.m_uniqueName = null;
	this.m_version = null;
	this.m_versionDescription = null;
	this.m_hierarchyType = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QLeveledHierarchy.prototype.setDateFrom = function(dateFrom)
{
	this.m_dateFrom = dateFrom;
};
oFF.QLeveledHierarchy.prototype.setDateTo = function(dateTo)
{
	this.m_dateTo = dateTo;
};
oFF.QLeveledHierarchy.prototype.setDimensionName = function(dimensionName)
{
	this.m_dimensionName = dimensionName;
};
oFF.QLeveledHierarchy.prototype.setHierId = function(hierId)
{
	this.m_hierId = hierId;
};
oFF.QLeveledHierarchy.prototype.setHierType = function(hierType)
{
	this.m_hierType = hierType;
};
oFF.QLeveledHierarchy.prototype.setHierarchyDescription = function(hierarchyDescription)
{
	this.m_hierarchyDescription = hierarchyDescription;
};
oFF.QLeveledHierarchy.prototype.setHierarchyDueDate = function(dueDate)
{
	this.m_dueDate = dueDate;
};
oFF.QLeveledHierarchy.prototype.setHierarchyName = function(name)
{
	this.setName(name);
};
oFF.QLeveledHierarchy.prototype.setHierarchyType = function(hierarchyType)
{
	this.m_hierarchyType = hierarchyType;
};
oFF.QLeveledHierarchy.prototype.setHierarchyUniqueName = function(uniqueName)
{
	this.m_uniqueName = uniqueName;
};
oFF.QLeveledHierarchy.prototype.setHierarchyVersion = function(version)
{
	this.m_version = version;
};
oFF.QLeveledHierarchy.prototype.setIsModeled = function(isModeled)
{
	let oldValue = this.m_isModeled;
	this.m_isModeled = isModeled;
	this.notifyPropertyBooleanChanged(oFF.QHierarchyProperties.QY_IS_MODELED, oldValue, isModeled);
};
oFF.QLeveledHierarchy.prototype.setIsRemote = function(isRemote)
{
	this.m_isRemote = isRemote;
};
oFF.QLeveledHierarchy.prototype.setObjectVersion = function(objectVersion)
{
	this.m_objectVersion = objectVersion;
};
oFF.QLeveledHierarchy.prototype.setOwner = function(owner)
{
	this.m_owner = owner;
};
oFF.QLeveledHierarchy.prototype.setVersionDescription = function(versionDescription)
{
	this.m_versionDescription = versionDescription;
};
oFF.QLeveledHierarchy.prototype.setupLeveledHierarchy = function(context, dimension, name)
{
	oFF.QModelComponent.prototype.setupModelComponentWithName.call( this , context, dimension, name);
	this.m_level = oFF.XList.create();
};
oFF.QLeveledHierarchy.prototype.supportsHierarchyLevels = function()
{
	return oFF.XCollectionUtils.hasElements(this.m_level);
};

oFF.QDataSource = function() {};
oFF.QDataSource.prototype = new oFF.QModelComponent();
oFF.QDataSource.prototype._ff_c = "QDataSource";

oFF.QDataSource.ALIAS = "alias";
oFF.QDataSource.CONTEXT = "context";
oFF.QDataSource.CREATED_BY = "created_by";
oFF.QDataSource.CREATED_ON = "created_on";
oFF.QDataSource.DATA_AREA = "data_area";
oFF.QDataSource.DATA_ROLLUP_MAX = "data_rollup_max";
oFF.QDataSource.DATA_ROLLUP_MIN = "data_rollup_min";
oFF.QDataSource.DUE_DATE = "due_date";
oFF.QDataSource.ENVIRONMENT = "environment";
oFF.QDataSource.INSTANCE_ID = "instance_id";
oFF.QDataSource.LAST_DATA_UPDATE_BY = "last_data_updated_by";
oFF.QDataSource.LAST_DATA_UPDATE_ON = "last_data_updated_on";
oFF.QDataSource.META_OBJECT_TYPE = "meta_object_type";
oFF.QDataSource.MICRO_CUBE_NAME = "micro_cube_name";
oFF.QDataSource.MODEL = "model";
oFF.QDataSource.NAME = "name";
oFF.QDataSource.PACKAGE_NAME = "package_name";
oFF.QDataSource.RRI_NAME = "RRI_NAME";
oFF.QDataSource.RRI_VALUE = "RRI_VALUE";
oFF.QDataSource.RUN_AS_USER = "run_as_user";
oFF.QDataSource.SCHEMA_NAME = "schema_name";
oFF.QDataSource.SOURCE_QUERY = "source_query";
oFF.QDataSource.SOURCE_QUERY_INA = "sourceQuery";
oFF.QDataSource.SYSTEM_NAME = "system_name";
oFF.QDataSource.TEXT = "text";
oFF.QDataSource.URI_NAME = "name";
oFF.QDataSource.URI_PACKAGE_NAME = "package";
oFF.QDataSource.URI_SCHEMA_NAME = "schema";
oFF.QDataSource.USER = "user";
oFF.QDataSource.VALIDATION_HASH = "validationHash";
oFF.QDataSource.create = function()
{
	let newDataSource = new oFF.QDataSource();
	newDataSource.setupDataSource(null);
	return newDataSource;
};
oFF.QDataSource.createWithContext = function(context)
{
	let newObject = new oFF.QDataSource();
	newObject.setupDataSource(context);
	return newObject;
};
oFF.QDataSource.prototype.m_blendingDefinition = null;
oFF.QDataSource.prototype.m_blendingSources = null;
oFF.QDataSource.prototype.m_cacheKey = null;
oFF.QDataSource.prototype.m_extendedDimensions = null;
oFF.QDataSource.prototype.m_genericServiceDescription = null;
oFF.QDataSource.prototype.m_mappings = null;
oFF.QDataSource.prototype.m_microCube = null;
oFF.QDataSource.prototype.m_multiSources = null;
oFF.QDataSource.prototype.m_parentCubeInfo = null;
oFF.QDataSource.prototype.m_properties = null;
oFF.QDataSource.prototype.m_recalculateCacheKey = false;
oFF.QDataSource.prototype.addCustomProperty = function(name, value)
{
	if (oFF.XString.isEqual(name, oFF.QDataSource.SOURCE_QUERY_INA))
	{
		this.setSourceQuery(value);
	}
};
oFF.QDataSource.prototype.addNewExtendedDimension = function(name, joinFieldName, joinFieldNameExternal)
{
	let extDim;
	let extDims = this.getExtendedDimensionsBase();
	let foundRs = oFF.XStream.of(extDims).find((ed) => {
		return oFF.XString.isEqual(ed.getName(), name);
	});
	if (foundRs.isPresent())
	{
		extDim = foundRs.get();
	}
	else
	{
		extDim = oFF.QExtendedDimension.create(name, joinFieldName, joinFieldNameExternal);
		extDims.add(extDim);
	}
	return extDim;
};
oFF.QDataSource.prototype.clear = function()
{
	if (oFF.notNull(this.m_multiSources))
	{
		this.m_multiSources.clear();
	}
	if (oFF.notNull(this.m_blendingSources))
	{
		this.m_blendingSources = oFF.XList.create();
	}
	if (oFF.notNull(this.m_properties))
	{
		this.m_properties.clear();
	}
	if (!oFF.PrUtils.isListEmpty(this.m_mappings))
	{
		this.m_mappings.clear();
	}
	this.m_extendedDimensions = null;
	this.m_microCube = null;
	this.m_genericServiceDescription = null;
	this.m_blendingDefinition = null;
	this.m_parentCubeInfo = null;
};
oFF.QDataSource.prototype.cloneOlapComponent = function(context, parent)
{
	let dataSourceClone = oFF.QFactory.createDataSource();
	dataSourceClone.copyFrom(this, null);
	return dataSourceClone;
};
oFF.QDataSource.prototype.copyFromInternal = function(other, flags)
{
	let otherDataSource = other;
	oFF.QModelComponent.prototype.copyFromInternal.call( this , otherDataSource, flags);
	this.clear();
	this.m_properties = oFF.XProperties.createByMapCopy(otherDataSource.getProperties());
	let multiSources = otherDataSource.getMultiSources();
	if (oFF.notNull(multiSources))
	{
		let multiSourceSize = multiSources.size();
		for (let multiSourceIndex = 0; multiSourceIndex < multiSourceSize; multiSourceIndex++)
		{
			let multiSource = multiSources.get(multiSourceIndex);
			this.m_multiSources.add(multiSource.cloneOlapComponent(null, null));
		}
	}
	let otherMappings = otherDataSource.getMappings();
	if (!oFF.PrUtils.isListEmpty(otherMappings))
	{
		this.m_mappings.copyFrom(otherMappings, null);
	}
	let otherExtendedDimensions = otherDataSource.getExtendedDimensions();
	if (oFF.notNull(otherExtendedDimensions))
	{
		let myExtendedDimensions = this.getExtendedDimensionsBase();
		myExtendedDimensions.clear();
		let otherExtendedDimensionsSize = otherExtendedDimensions.size();
		for (let extDimIdx = 0; extDimIdx < otherExtendedDimensionsSize; extDimIdx++)
		{
			myExtendedDimensions.add(otherExtendedDimensions.get(extDimIdx));
		}
	}
	if (otherDataSource.isBasedOnMicroCube())
	{
		this.setMicroCube(otherDataSource.getMicroCube());
	}
	this.m_genericServiceDescription = oFF.PrUtils.createDeepCopyExt(otherDataSource.getGenericServiceDescription(), this.m_genericServiceDescription);
	let blendingDefinition = otherDataSource.getBlendingDefinition();
	this.m_blendingDefinition = oFF.XObjectExt.cloneIfNotNull(blendingDefinition);
	let otherCubeInfo = otherDataSource;
	let parentCubeInfo = otherCubeInfo.getParentCubeInfo();
	if (oFF.notNull(parentCubeInfo))
	{
		let parentCubeInfoClone = parentCubeInfo.clone();
		this.setParentCubeInfo(parentCubeInfoClone);
	}
};
oFF.QDataSource.prototype.escape = function(value)
{
	let first = oFF.XString.replace(value, "[", "[[");
	return oFF.XString.replace(first, "]", "]]");
};
oFF.QDataSource.prototype.extendProperties = function(properties, externalDsProperties)
{
	let externalDsKeyIterator = externalDsProperties.getKeysAsIterator();
	while (externalDsKeyIterator.hasNext())
	{
		let key = externalDsKeyIterator.next();
		if (oFF.XStringUtils.isNullOrEmpty(properties.getByKey(key)))
		{
			properties.put(key, externalDsProperties.getByKey(key));
		}
	}
};
oFF.QDataSource.prototype.extendWithDataSource = function(datasource)
{
	if (oFF.notNull(datasource))
	{
		this.extendProperties(this.m_properties, datasource.getProperties());
		this.m_properties.remove(oFF.QDataSource.CREATED_BY);
		this.m_properties.remove(oFF.QDataSource.CREATED_ON);
		this.m_properties.remove(oFF.QDataSource.LAST_DATA_UPDATE_BY);
		this.m_properties.remove(oFF.QDataSource.LAST_DATA_UPDATE_ON);
		this.m_properties.remove(oFF.QDataSource.DATA_ROLLUP_MAX);
		this.m_properties.remove(oFF.QDataSource.DATA_ROLLUP_MIN);
		this.m_properties.remove(oFF.QDataSource.DUE_DATE);
		this.m_properties.remove(oFF.QDataSource.USER);
		if (this.getType() === oFF.MetaObjectType.MULTI_SOURCE && datasource.getType() === oFF.MetaObjectType.MULTI_SOURCE || this.getType() === oFF.MetaObjectType.BLENDING && datasource.getType() === oFF.MetaObjectType.BLENDING)
		{
			let multisources = datasource.getMultiSources();
			let existingMultiSources = this.getMultiSourcesBase();
			if (oFF.notNull(multisources))
			{
				let multiSourcesSize = multisources.size();
				for (let multiSourceIndex = 0; multiSourceIndex < multiSourcesSize; multiSourceIndex++)
				{
					let multisource = multisources.get(multiSourceIndex);
					if (existingMultiSources.size() > multiSourceIndex)
					{
						let existingMultiSource = existingMultiSources.get(multiSourceIndex);
						existingMultiSource.extendWithDataSource(multisource);
					}
					else
					{
						existingMultiSources.insert(multiSourceIndex, multisource.cloneOlapComponent(null, null));
					}
				}
			}
			let mappings = datasource.getMappings();
			let existingMappings = this.getMappings();
			let len = oFF.PrUtils.getListSize(mappings, 0);
			for (let mappingIndex = 0; mappingIndex < len; mappingIndex++)
			{
				if (oFF.PrUtils.getListSize(existingMappings, 0) > mappingIndex)
				{
					existingMappings.set(mappingIndex, oFF.PrUtils.createDeepCopy(oFF.PrUtils.getElement(mappings, mappingIndex)));
				}
				else
				{
					existingMappings.add(oFF.PrUtils.createDeepCopy(oFF.PrUtils.getElement(mappings, mappingIndex)));
				}
			}
		}
		let extendedDimensions = datasource.getExtendedDimensions();
		if (oFF.notNull(extendedDimensions))
		{
			let extendedDimensionsBase = this.getExtendedDimensionsBase();
			extendedDimensionsBase.clear();
			extendedDimensionsBase.addAll(extendedDimensions);
		}
	}
};
oFF.QDataSource.prototype.getAlias = function()
{
	return this.m_properties.getByKey(oFF.QDataSource.ALIAS);
};
oFF.QDataSource.prototype.getAsMinimalScope = function()
{
	let catalogName = this.getPackageName();
	let asMinimalScope;
	if (oFF.XStringUtils.isNullOrEmpty(catalogName))
	{
		asMinimalScope = this.getObjectName();
	}
	else
	{
		asMinimalScope = oFF.XStringUtils.concatenate3(catalogName, "/", this.getObjectName());
	}
	return asMinimalScope;
};
oFF.QDataSource.prototype.getAsScope = function()
{
	let schemaName = this.getSchemaName();
	let asScope;
	if (oFF.XStringUtils.isNullOrEmpty(schemaName))
	{
		asScope = this.getAsMinimalScope();
	}
	else
	{
		asScope = oFF.XStringUtils.concatenate3(schemaName, ".", this.getAsMinimalScope());
	}
	return asScope;
};
oFF.QDataSource.prototype.getBlendingDefinition = function()
{
	return this.m_blendingDefinition;
};
oFF.QDataSource.prototype.getBlendingSources = function()
{
	return this.m_blendingSources;
};
oFF.QDataSource.prototype.getCacheKeyName = function()
{
	if (oFF.isNull(this.m_cacheKey) || this.m_recalculateCacheKey)
	{
		let cacheKeyName = this.getCacheKeyNameInternal();
		let extendedDimensions = this.getExtendedDimensions();
		if (oFF.notNull(extendedDimensions) && extendedDimensions.size() > 0)
		{
			let extCubeDefBuffer = oFF.XStringBuffer.create();
			extCubeDefBuffer.append(cacheKeyName);
			extCubeDefBuffer.append("~");
			extCubeDefBuffer.append(extendedDimensions.toString());
			cacheKeyName = extCubeDefBuffer.toString();
			cacheKeyName = oFF.XSha1.createSHA1(cacheKeyName);
		}
		this.m_cacheKey = cacheKeyName;
		this.m_recalculateCacheKey = false;
	}
	return this.m_cacheKey;
};
oFF.QDataSource.prototype.getCacheKeyName2 = function()
{
	return this.getCacheKeyName();
};
oFF.QDataSource.prototype.getCacheKeyNameInternal = function()
{
	let type = this.getType();
	let cacheKeyName;
	if (type === oFF.MetaObjectType.MULTI_SOURCE || type === oFF.MetaObjectType.BLENDING)
	{
		cacheKeyName = oFF.PrUtils.serialize(this.getFQNMulti(true, true), true, false, 0);
	}
	else
	{
		cacheKeyName = this.getFQNSingle(true, true);
	}
	let hashKey = oFF.XSha1.createSHA1(cacheKeyName);
	return hashKey;
};
oFF.QDataSource.prototype.getContextParameter = function()
{
	return this.m_properties.getByKey(oFF.QDataSource.CONTEXT);
};
oFF.QDataSource.prototype.getCreatedBy = function()
{
	return this.m_properties.getStringByKey(oFF.QDataSource.CREATED_BY);
};
oFF.QDataSource.prototype.getCreatedOn = function()
{
	let isoFormat = this.m_properties.getStringByKey(oFF.QDataSource.CREATED_ON);
	let dateTime = null;
	if (oFF.notNull(isoFormat))
	{
		dateTime = oFF.XDateTime.createDateTimeFromIsoFormat(isoFormat);
	}
	return dateTime;
};
oFF.QDataSource.prototype.getCustomProperties = function()
{
	let properties = oFF.XProperties.create();
	let sourceQuery = this.getSourceQuery();
	if (oFF.notNull(sourceQuery))
	{
		properties.put(oFF.QDataSource.SOURCE_QUERY_INA, sourceQuery);
	}
	return properties;
};
oFF.QDataSource.prototype.getDataArea = function()
{
	let dataArea = this.m_properties.getByKey(oFF.QDataSource.DATA_AREA);
	if (oFF.XString.isEqual(dataArea, oFF.PlanningConstants.DATA_AREA_DEFAULT))
	{
		return null;
	}
	return dataArea;
};
oFF.QDataSource.prototype.getDataRollUpMax = function()
{
	let isoFormat = this.m_properties.getStringByKey(oFF.QDataSource.DATA_ROLLUP_MAX);
	let dateTime = null;
	if (oFF.notNull(isoFormat))
	{
		dateTime = oFF.XDateTime.createDateTimeFromIsoFormat(isoFormat);
	}
	return dateTime;
};
oFF.QDataSource.prototype.getDataRollUpMin = function()
{
	let isoFormat = this.m_properties.getStringByKey(oFF.QDataSource.DATA_ROLLUP_MIN);
	let dateTime = null;
	if (oFF.notNull(isoFormat))
	{
		dateTime = oFF.XDateTime.createDateTimeFromIsoFormat(isoFormat);
	}
	return dateTime;
};
oFF.QDataSource.prototype.getDueDate = function()
{
	let isoFormat = this.m_properties.getStringByKey(oFF.QDataSource.DUE_DATE);
	let dateTime = null;
	if (oFF.notNull(isoFormat))
	{
		dateTime = oFF.XDateTime.createDateTimeFromIsoFormat(isoFormat);
	}
	return dateTime;
};
oFF.QDataSource.prototype.getEnvironmentName = function()
{
	return this.m_properties.getByKey(oFF.QDataSource.ENVIRONMENT);
};
oFF.QDataSource.prototype.getExtendedDimensions = function()
{
	return this.m_extendedDimensions;
};
oFF.QDataSource.prototype.getExtendedDimensionsBase = function()
{
	if (oFF.isNull(this.m_extendedDimensions))
	{
		this.m_extendedDimensions = oFF.XList.create();
	}
	return this.m_extendedDimensions;
};
oFF.QDataSource.prototype.getFQNMulti = function(includeProperties, isCacheKeyContext)
{
	let rootStructure = oFF.PrFactory.createStructure();
	rootStructure.putString("DataSource", this.getFQNSingle(includeProperties, isCacheKeyContext));
	let sources = rootStructure.putNewList("Sources");
	let multiSources = this.getMultiSources();
	let multiSourcesSize = multiSources.size();
	for (let i = 0; i < multiSourcesSize; i++)
	{
		let multiSource = multiSources.get(i);
		if (multiSource.getType() === oFF.MetaObjectType.MULTI_SOURCE || multiSource.getType() === oFF.MetaObjectType.BLENDING)
		{
			sources.add(multiSource.getFQNMulti(includeProperties, isCacheKeyContext));
		}
		else
		{
			sources.addString(multiSource.getFQNSingle(includeProperties, isCacheKeyContext));
		}
	}
	rootStructure.put("Mappings", oFF.PrFactory.createListDeepCopy(this.getMappings()));
	return rootStructure;
};
oFF.QDataSource.prototype.getFQNSingle = function(includeProperties, isCacheKeyContext)
{
	let buffer = oFF.XStringBuffer.create();
	let runAsUser = this.getRunAsUser();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(runAsUser))
	{
		buffer.append("<").append(runAsUser).append(">");
	}
	let alias = this.getAlias();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(alias))
	{
		buffer.append("~").append(alias).append("~");
	}
	let environmentName = this.getEnvironmentName();
	let hasEnvironmentName = oFF.XStringUtils.isNotNullAndNotEmpty(environmentName);
	let modelName = this.getModelName();
	let hasModelName = oFF.XStringUtils.isNotNullAndNotEmpty(modelName);
	let dataArea = this.getDataArea();
	let hasDataArea = oFF.XStringUtils.isNotNullAndNotEmpty(dataArea);
	let type = this.getType();
	if (hasEnvironmentName || hasModelName || hasDataArea)
	{
		buffer.append("$[");
		if (hasEnvironmentName)
		{
			buffer.append(environmentName);
		}
		buffer.append("][");
		if (hasModelName)
		{
			buffer.append(modelName);
		}
		buffer.append("]");
		if (hasDataArea)
		{
			buffer.append("[").append(dataArea).append("]");
		}
		if (oFF.notNull(type))
		{
			buffer.append("/");
		}
	}
	if (oFF.notNull(type))
	{
		buffer.append(type.getName());
		buffer.append(":");
	}
	let schemaName = this.getSchemaName();
	let hasSchemaName = oFF.XStringUtils.isNotNullAndNotEmpty(schemaName);
	let catalogName = this.getPackageName();
	let hasCatalogName = oFF.XStringUtils.isNotNullAndNotEmpty(catalogName);
	let objectName = this.getObjectName();
	let hasObjectName = oFF.XStringUtils.isNotNullAndNotEmpty(objectName);
	if (oFF.notNull(type) || hasSchemaName || hasCatalogName || hasObjectName)
	{
		buffer.append("[");
		if (hasSchemaName)
		{
			buffer.append(this.escape(schemaName));
		}
		buffer.append("][");
		if (hasCatalogName)
		{
			buffer.append(this.escape(catalogName));
		}
		buffer.append("][");
		if (hasObjectName)
		{
			buffer.append(this.escape(objectName));
		}
		buffer.append("]");
	}
	if (includeProperties === true)
	{
		let copy = this.m_properties.createMapByStringCopy();
		copy.remove(oFF.QDataSource.META_OBJECT_TYPE);
		copy.remove(oFF.QDataSource.SCHEMA_NAME);
		copy.remove(oFF.QDataSource.PACKAGE_NAME);
		copy.remove(oFF.QDataSource.NAME);
		copy.remove(oFF.QDataSource.ENVIRONMENT);
		copy.remove(oFF.QDataSource.MODEL);
		copy.remove(oFF.QDataSource.DATA_AREA);
		copy.remove(oFF.QDataSource.RUN_AS_USER);
		copy.remove(oFF.QDataSource.ALIAS);
		if (isCacheKeyContext)
		{
			copy.remove(oFF.QDataSource.INSTANCE_ID);
			copy.remove(oFF.QDataSource.SYSTEM_NAME);
			copy.remove(oFF.QDataSource.TEXT);
			copy.remove(oFF.QDataSource.RRI_NAME);
			copy.remove(oFF.QDataSource.RRI_VALUE);
			copy.remove(oFF.QDataSource.VALIDATION_HASH);
		}
		let remainingKeys = copy.getKeysAsReadOnlyList();
		if (remainingKeys.size() > 0)
		{
			buffer.append("?");
			for (let i = 0; i < remainingKeys.size(); i++)
			{
				if (i > 0)
				{
					buffer.append("&");
				}
				let key = remainingKeys.get(i);
				let value = copy.getByKey(key);
				let escaped = oFF.XHttpUtils.encodeURIComponent(value);
				buffer.append(key).append("=").append(escaped);
			}
		}
	}
	return buffer.toString();
};
oFF.QDataSource.prototype.getFullQualifiedName = function()
{
	return this.getFullQualifiedNameExt(false);
};
oFF.QDataSource.prototype.getFullQualifiedNameExt = function(includeProperties)
{
	let type = this.getType();
	let fqn;
	if (type === oFF.MetaObjectType.MULTI_SOURCE || type === oFF.MetaObjectType.BLENDING)
	{
		fqn = oFF.PrUtils.serialize(this.getFQNMulti(includeProperties, false), true, false, 0);
	}
	else
	{
		fqn = this.getFQNSingle(includeProperties, false);
	}
	return fqn;
};
oFF.QDataSource.prototype.getGenericServiceDescription = function()
{
	return this.m_genericServiceDescription;
};
oFF.QDataSource.prototype.getInstanceId = function()
{
	return this.m_properties.getByKey(oFF.QDataSource.INSTANCE_ID);
};
oFF.QDataSource.prototype.getMappings = function()
{
	return this.m_mappings;
};
oFF.QDataSource.prototype.getMicroCube = function()
{
	return this.m_microCube;
};
oFF.QDataSource.prototype.getMicroCubeName = function()
{
	return this.m_properties.getByKey(oFF.QDataSource.MICRO_CUBE_NAME);
};
oFF.QDataSource.prototype.getModelName = function()
{
	return this.m_properties.getByKey(oFF.QDataSource.MODEL);
};
oFF.QDataSource.prototype.getMultiSources = function()
{
	return this.m_multiSources;
};
oFF.QDataSource.prototype.getMultiSourcesBase = function()
{
	return this.m_multiSources;
};
oFF.QDataSource.prototype.getName = function()
{
	return this.m_properties.getByKey(oFF.QDataSource.NAME);
};
oFF.QDataSource.prototype.getObjectName = function()
{
	return this.m_properties.getByKey(oFF.QDataSource.NAME);
};
oFF.QDataSource.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.DATA_SOURCE;
};
oFF.QDataSource.prototype.getPackageName = function()
{
	return this.m_properties.getByKey(oFF.QDataSource.PACKAGE_NAME);
};
oFF.QDataSource.prototype.getParentCubeInfo = function()
{
	return this.m_parentCubeInfo;
};
oFF.QDataSource.prototype.getProperties = function()
{
	return this.m_properties;
};
oFF.QDataSource.prototype.getPropertiesBase = function()
{
	return this.m_properties;
};
oFF.QDataSource.prototype.getRriName = function()
{
	return this.m_properties.getByKey(oFF.QDataSource.RRI_NAME);
};
oFF.QDataSource.prototype.getRriValue = function()
{
	return this.m_properties.getByKey(oFF.QDataSource.RRI_VALUE);
};
oFF.QDataSource.prototype.getRunAsUser = function()
{
	return this.m_properties.getByKey(oFF.QDataSource.RUN_AS_USER);
};
oFF.QDataSource.prototype.getSchemaName = function()
{
	return this.m_properties.getByKey(oFF.QDataSource.SCHEMA_NAME);
};
oFF.QDataSource.prototype.getSourceQuery = function()
{
	return this.m_properties.getStringByKey(oFF.QDataSource.SOURCE_QUERY);
};
oFF.QDataSource.prototype.getSystemName = function()
{
	return this.m_properties.getByKey(oFF.QDataSource.SYSTEM_NAME);
};
oFF.QDataSource.prototype.getText = function()
{
	return this.m_properties.getByKey(oFF.QDataSource.TEXT);
};
oFF.QDataSource.prototype.getType = function()
{
	let type = this.m_properties.getByKey(oFF.QDataSource.META_OBJECT_TYPE);
	if (oFF.isNull(type))
	{
		return null;
	}
	return oFF.MetaObjectType.lookup(type);
};
oFF.QDataSource.prototype.getUpdatedBy = function()
{
	return this.m_properties.getStringByKey(oFF.QDataSource.LAST_DATA_UPDATE_BY);
};
oFF.QDataSource.prototype.getUpdatedOn = function()
{
	let isoFormat = this.m_properties.getStringByKey(oFF.QDataSource.LAST_DATA_UPDATE_ON);
	let dateTime = null;
	if (oFF.notNull(isoFormat))
	{
		dateTime = oFF.XDateTime.createDateTimeFromIsoFormat(isoFormat);
	}
	return dateTime;
};
oFF.QDataSource.prototype.getUserName = function()
{
	return this.m_properties.getStringByKey(oFF.QDataSource.USER);
};
oFF.QDataSource.prototype.getValidationHash = function()
{
	return this.m_properties.getByKey(oFF.QDataSource.VALIDATION_HASH);
};
oFF.QDataSource.prototype.hasElements = function()
{
	return this.m_properties.hasElements();
};
oFF.QDataSource.prototype.hasText = function()
{
	return oFF.notNull(this.m_properties) && this.m_properties.containsKey(oFF.QDataSource.TEXT);
};
oFF.QDataSource.prototype.invalidateCacheKeyName = function()
{
	if (!this.m_recalculateCacheKey)
	{
		this.m_recalculateCacheKey = true;
	}
};
oFF.QDataSource.prototype.isBasedOnMicroCube = function()
{
	return this.getMicroCubeName() !== null || this.getMicroCube() !== null;
};
oFF.QDataSource.prototype.isBracketNext = function(fqn, index, len)
{
	if (index + 1 < len)
	{
		let c = oFF.XString.getCharAt(fqn, index + 1);
		return c === 91;
	}
	else
	{
		return false;
	}
};
oFF.QDataSource.prototype.isEmpty = function()
{
	return this.m_properties.isEmpty();
};
oFF.QDataSource.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let otherDataSource = other;
	if (!oFF.XString.isEqual(this.getFullQualifiedName(), otherDataSource.getFullQualifiedName()))
	{
		return false;
	}
	if (!oFF.XObjectExt.areEqual(this.getExtendedDimensions(), otherDataSource.getExtendedDimensions()))
	{
		return false;
	}
	if (!this.getMappings().isEqualTo(otherDataSource.getMappings()))
	{
		return false;
	}
	if (!this.getMultiSources().isEqualTo(otherDataSource.getMultiSources()))
	{
		return false;
	}
	if (!this.getProperties().isEqualTo(otherDataSource.getProperties()))
	{
		return false;
	}
	if (!this.getCustomProperties().isEqualTo(otherDataSource.getCustomProperties()))
	{
		return false;
	}
	return true;
};
oFF.QDataSource.prototype.releaseObject = function()
{
	this.m_multiSources = oFF.XObjectExt.release(this.m_multiSources);
	this.m_blendingSources = oFF.XObjectExt.release(this.m_blendingSources);
	this.m_properties = oFF.XObjectExt.release(this.m_properties);
	this.m_extendedDimensions = oFF.XObjectExt.release(this.m_extendedDimensions);
	this.m_mappings = oFF.XObjectExt.release(this.m_mappings);
	this.m_extendedDimensions = null;
	this.m_microCube = null;
	this.m_genericServiceDescription = null;
	this.m_blendingDefinition = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QDataSource.prototype.searchEnd = function(name, startPosition)
{
	let position = startPosition;
	let len = oFF.XString.size(name);
	while (position < len)
	{
		let x1 = oFF.XString.indexOfFrom(name, "]", position);
		let x2 = oFF.XString.indexOfFrom(name, "]]", position);
		if (x2 === -1)
		{
			if (x1 === -1)
			{
				throw oFF.XException.createRuntimeException("#1 Qualified name format error");
			}
			return x1;
		}
		if (x1 < x2)
		{
			return x1;
		}
		position = x2 + 2;
	}
	throw oFF.XException.createRuntimeException("#2 Qualified name format error");
};
oFF.QDataSource.prototype.setAlias = function(alias)
{
	this.m_properties.put(oFF.QDataSource.ALIAS, alias);
	this.invalidateCacheKeyName();
};
oFF.QDataSource.prototype.setBlendingDefinition = function(blendingDefinition)
{
	this.m_blendingDefinition = blendingDefinition;
};
oFF.QDataSource.prototype.setBlendingSources = function(sources)
{
	oFF.XObjectExt.release(this.m_blendingSources);
	this.m_blendingSources = sources;
};
oFF.QDataSource.prototype.setByJson = function(element)
{
	let jsonStructure = oFF.XJson.extractJsonContent(element);
	if (oFF.PrUtils.getStringProperty(jsonStructure, "DataSource") !== null)
	{
		this.setFQNMulti(jsonStructure);
	}
	else
	{
		this.clear();
		let importer = oFF.QInAImportFactory.createForRepository(null, null);
		let dataSource = importer.importDataSource(jsonStructure);
		oFF.XObjectExt.assertNotNullExt(dataSource, "illegal name");
		this.extendWithDataSource(dataSource);
	}
};
oFF.QDataSource.prototype.setByUri = function(uri)
{
	this.setSystemName(uri.getHost());
	let type = oFF.XString.substring(uri.getPath(), 1, -1);
	let metaObjectType = oFF.MetaObjectType.lookup(type);
	this.setType(metaObjectType);
	let queryElements = uri.getQueryElements();
	let set = oFF.XSetOfNameObject.create();
	let queryElementsSize = queryElements.size();
	for (let i = 0; i < queryElementsSize; i++)
	{
		set.add(queryElements.get(i));
	}
	if (set.containsKey(oFF.QDataSource.URI_NAME))
	{
		this.setName(set.getByKey(oFF.QDataSource.URI_NAME).getValue());
	}
	if (set.containsKey(oFF.QDataSource.URI_PACKAGE_NAME))
	{
		this.setPackageName(set.getByKey(oFF.QDataSource.URI_PACKAGE_NAME).getValue());
	}
	if (set.containsKey(oFF.QDataSource.URI_SCHEMA_NAME))
	{
		this.setSchemaName(set.getByKey(oFF.QDataSource.URI_SCHEMA_NAME).getValue());
	}
};
oFF.QDataSource.prototype.setContextParameter = function(contextParameter)
{
	this.m_properties.put(oFF.QDataSource.CONTEXT, contextParameter);
};
oFF.QDataSource.prototype.setCreatedBy = function(userName)
{
	this.m_properties.putString(oFF.QDataSource.CREATED_BY, userName);
	this.invalidateCacheKeyName();
};
oFF.QDataSource.prototype.setCreatedOn = function(createdOn)
{
	if (oFF.notNull(createdOn))
	{
		let isoFormat = createdOn.toIsoFormat();
		this.m_properties.putString(oFF.QDataSource.CREATED_ON, isoFormat);
	}
	else
	{
		this.m_properties.remove(oFF.QDataSource.CREATED_ON);
	}
	this.invalidateCacheKeyName();
};
oFF.QDataSource.prototype.setCustomProperties = function(properties)
{
	if (oFF.notNull(properties))
	{
		let sourceQuery = properties.getStringByKey(oFF.QDataSource.SOURCE_QUERY_INA);
		if (oFF.notNull(sourceQuery))
		{
			this.setSourceQuery(sourceQuery);
		}
	}
};
oFF.QDataSource.prototype.setDataArea = function(dataArea)
{
	this.m_properties.put(oFF.QDataSource.DATA_AREA, dataArea);
	this.invalidateCacheKeyName();
};
oFF.QDataSource.prototype.setDataRollUpMax = function(dataRollUpMax)
{
	if (oFF.notNull(dataRollUpMax))
	{
		let isoFormat = dataRollUpMax.toIsoFormat();
		this.m_properties.putString(oFF.QDataSource.DATA_ROLLUP_MAX, isoFormat);
	}
	else
	{
		this.m_properties.remove(oFF.QDataSource.DATA_ROLLUP_MAX);
	}
	this.invalidateCacheKeyName();
};
oFF.QDataSource.prototype.setDataRollUpMin = function(dataRollUpMin)
{
	if (oFF.notNull(dataRollUpMin))
	{
		let isoFormat = dataRollUpMin.toIsoFormat();
		this.m_properties.putString(oFF.QDataSource.DATA_ROLLUP_MIN, isoFormat);
	}
	else
	{
		this.m_properties.remove(oFF.QDataSource.DATA_ROLLUP_MIN);
	}
	this.invalidateCacheKeyName();
};
oFF.QDataSource.prototype.setDueDate = function(dueDate)
{
	if (oFF.notNull(dueDate))
	{
		let isoFormat = dueDate.toIsoFormat();
		this.m_properties.putString(oFF.QDataSource.DUE_DATE, isoFormat);
	}
	else
	{
		this.m_properties.remove(oFF.QDataSource.DUE_DATE);
	}
	this.invalidateCacheKeyName();
};
oFF.QDataSource.prototype.setEnvironmentName = function(environmentName)
{
	this.m_properties.put(oFF.QDataSource.ENVIRONMENT, environmentName);
	this.invalidateCacheKeyName();
};
oFF.QDataSource.prototype.setFQNMulti = function(multiStructure)
{
	this.setFQNSingle(oFF.PrUtils.getStringValueProperty(multiStructure, "DataSource", null));
	let type = this.getType();
	if (oFF.isNull(type))
	{
		this.setType(oFF.MetaObjectType.MULTI_SOURCE);
	}
	else
	{
		if (type !== oFF.MetaObjectType.MULTI_SOURCE && type !== oFF.MetaObjectType.BLENDING)
		{
			throw oFF.XException.createRuntimeException("illegal type");
		}
	}
	let sources = oFF.PrUtils.getListProperty(multiStructure, "Sources");
	if (oFF.notNull(sources))
	{
		let sourcesSize = sources.size();
		for (let i = 0; i < sourcesSize; i++)
		{
			let multiSource = oFF.QFactory.createDataSource();
			let source = sources.get(i);
			if (source.getType() === oFF.PrElementType.STRING)
			{
				multiSource.setFQNSingle(source.getString());
			}
			else
			{
				multiSource.setFQNMulti(source);
			}
			this.getMultiSourcesBase().add(multiSource);
		}
	}
	this.setMappings(oFF.PrUtils.getListProperty(multiStructure, "Mappings"));
};
oFF.QDataSource.prototype.setFQNSingle = function(name)
{
	if (oFF.notNull(name))
	{
		let fqn = name;
		if (oFF.XString.startsWith(fqn, "<"))
		{
			let startRunAsUserIndex = 1;
			let endRunAsUserIndex = oFF.XString.indexOfFrom(fqn, ">", startRunAsUserIndex);
			if (endRunAsUserIndex === -1)
			{
				return;
			}
			this.setRunAsUser(oFF.XString.substring(fqn, startRunAsUserIndex, endRunAsUserIndex));
			fqn = oFF.XString.substring(fqn, endRunAsUserIndex + 1, oFF.XString.size(fqn));
		}
		if (oFF.XString.startsWith(fqn, "~"))
		{
			let startAliasIndex = 1;
			let endAliasIndex = oFF.XString.indexOfFrom(fqn, "~", startAliasIndex);
			if (endAliasIndex === -1)
			{
				return;
			}
			this.setAlias(oFF.XString.substring(fqn, startAliasIndex, endAliasIndex));
			fqn = oFF.XString.substring(fqn, endAliasIndex + 1, oFF.XString.size(fqn));
		}
		let len = oFF.XString.size(fqn);
		let startIndex0 = 0;
		if (oFF.XString.startsWith(fqn, "$["))
		{
			let startIndex1 = startIndex0 + 2;
			let endIndex1 = this.searchEnd(fqn, startIndex1);
			let environmentName = this.unescape(oFF.XString.substring(fqn, startIndex1, endIndex1));
			this.setEnvironmentName(environmentName);
			let startIndex2 = endIndex1 + 1;
			if (startIndex2 >= len)
			{
				return;
			}
			let charAt2 = oFF.XString.getCharAt(fqn, startIndex2);
			if (charAt2 === 47)
			{
				startIndex0 = startIndex2 + 1;
			}
			else if (charAt2 === 91)
			{
				startIndex2++;
				let endIndex2 = this.searchEnd(fqn, startIndex2);
				let modelName = this.unescape(oFF.XString.substring(fqn, startIndex2, endIndex2));
				this.setModelName(modelName);
				let startIndex3 = endIndex2 + 1;
				if (startIndex3 >= len)
				{
					return;
				}
				let charAt3 = oFF.XString.getCharAt(fqn, startIndex3);
				if (charAt3 === 47)
				{
					startIndex0 = startIndex3 + 1;
				}
				else
				{
					startIndex3++;
					let endIndex3 = this.searchEnd(fqn, startIndex3);
					let dataArea = this.unescape(oFF.XString.substring(fqn, startIndex3, endIndex3));
					this.setDataArea(dataArea);
					startIndex0 = endIndex3 + 2;
				}
			}
			else
			{
				return;
			}
		}
		if (startIndex0 < len)
		{
			let endIndex = oFF.XString.indexOfFrom(fqn, ":", startIndex0);
			let typeValue = oFF.MetaObjectType.lookup(oFF.XString.substring(fqn, startIndex0, endIndex));
			this.setType(typeValue);
			let startIndex5 = endIndex + 2;
			if (this.isBracketNext(fqn, endIndex, len) && startIndex5 < len)
			{
				endIndex = this.searchEnd(fqn, startIndex5);
				let name5 = this.unescape(oFF.XString.substring(fqn, startIndex5, endIndex));
				let startIndex6 = endIndex + 2;
				if (this.isBracketNext(fqn, endIndex, len) && startIndex6 < len)
				{
					endIndex = this.searchEnd(fqn, startIndex6);
					let name6 = this.unescape(oFF.XString.substring(fqn, startIndex6, endIndex));
					let startIndex7 = endIndex + 2;
					if (this.isBracketNext(fqn, endIndex, len) && startIndex7 < len)
					{
						endIndex = this.searchEnd(fqn, startIndex7);
						let name7 = this.unescape(oFF.XString.substring(fqn, startIndex7, endIndex));
						this.setSchemaName(name5);
						this.setPackageName(name6);
						this.setObjectName(name7);
					}
					else
					{
						this.setPackageName(name5);
						this.setObjectName(name6);
					}
				}
				else
				{
					this.setObjectName(name5);
				}
			}
			startIndex0 = endIndex + 1;
		}
		if (startIndex0 < len)
		{
			let query = oFF.XString.substring(fqn, startIndex0, -1);
			if (oFF.XString.startsWith(query, "?"))
			{
				let queryAsUri = oFF.XUri.createFromUrl(query);
				let queryMap = queryAsUri.getQueryMap();
				this.m_properties.putAll(queryMap);
			}
		}
	}
};
oFF.QDataSource.prototype.setFullQualifiedName = function(name)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(name) && oFF.XString.startsWith(name, "{") && oFF.XString.endsWith(name, "}"))
	{
		let multiSource;
		if (oFF.XString.containsString(name, "'"))
		{
			multiSource = oFF.XString.replace(name, "'", "\"");
		}
		else
		{
			multiSource = name;
		}
		let jsonParser = oFF.JsonParserFactory.newInstance();
		let jsonElement = jsonParser.parse(multiSource);
		oFF.MessageUtil.checkNoError(jsonParser);
		oFF.XObjectExt.release(jsonParser);
		this.setByJson(jsonElement);
	}
	else
	{
		this.setFQNSingle(name);
	}
	this.invalidateCacheKeyName();
};
oFF.QDataSource.prototype.setGenericServiceDescription = function(genericServiceDescription)
{
	this.m_genericServiceDescription = genericServiceDescription;
};
oFF.QDataSource.prototype.setInstanceId = function(instanceId)
{
	this.m_properties.put(oFF.QDataSource.INSTANCE_ID, instanceId);
};
oFF.QDataSource.prototype.setLastUpdateBy = function(userName)
{
	this.m_properties.putString(oFF.QDataSource.LAST_DATA_UPDATE_BY, userName);
	this.invalidateCacheKeyName();
};
oFF.QDataSource.prototype.setLastUpdateOn = function(lastUpdateOn)
{
	if (oFF.notNull(lastUpdateOn))
	{
		let isoFormat = lastUpdateOn.toIsoFormat();
		this.m_properties.putString(oFF.QDataSource.LAST_DATA_UPDATE_ON, isoFormat);
	}
	else
	{
		this.m_properties.remove(oFF.QDataSource.LAST_DATA_UPDATE_ON);
	}
	this.invalidateCacheKeyName();
};
oFF.QDataSource.prototype.setMappings = function(mappings)
{
	if (oFF.PrUtils.isListEmpty(mappings))
	{
		if (this.m_mappings.size() !== 0)
		{
			this.m_mappings.clear();
		}
	}
	else
	{
		this.m_mappings.copyFrom(mappings, null);
	}
};
oFF.QDataSource.prototype.setMicroCube = function(microCube)
{
	this.m_microCube = microCube;
	if (oFF.notNull(microCube))
	{
		this.setMicroCubeName(microCube.getQueryManager().getNameForMicroCubeUse());
	}
};
oFF.QDataSource.prototype.setMicroCubeName = function(microCubeName)
{
	this.m_properties.put(oFF.QDataSource.MICRO_CUBE_NAME, microCubeName);
	this.invalidateCacheKeyName();
};
oFF.QDataSource.prototype.setModelName = function(modelName)
{
	this.m_properties.put(oFF.QDataSource.MODEL, modelName);
	this.invalidateCacheKeyName();
};
oFF.QDataSource.prototype.setName = function(name)
{
	this.m_properties.put(oFF.QDataSource.NAME, name);
	this.invalidateCacheKeyName();
};
oFF.QDataSource.prototype.setObjectName = function(objectName)
{
	this.m_properties.put(oFF.QDataSource.NAME, objectName);
	this.invalidateCacheKeyName();
};
oFF.QDataSource.prototype.setPackageName = function(packageName)
{
	this.m_properties.put(oFF.QDataSource.PACKAGE_NAME, packageName);
	this.invalidateCacheKeyName();
};
oFF.QDataSource.prototype.setParentCubeInfo = function(cubeInfo)
{
	this.m_parentCubeInfo = cubeInfo;
};
oFF.QDataSource.prototype.setRriName = function(rriName)
{
	this.m_properties.put(oFF.QDataSource.RRI_NAME, rriName);
};
oFF.QDataSource.prototype.setRriValue = function(rriValue)
{
	this.m_properties.put(oFF.QDataSource.RRI_VALUE, rriValue);
};
oFF.QDataSource.prototype.setRunAsUser = function(runAsUser)
{
	this.m_properties.put(oFF.QDataSource.RUN_AS_USER, runAsUser);
	this.invalidateCacheKeyName();
};
oFF.QDataSource.prototype.setSchemaName = function(schemaName)
{
	this.m_properties.put(oFF.QDataSource.SCHEMA_NAME, schemaName);
	this.invalidateCacheKeyName();
};
oFF.QDataSource.prototype.setSourceQuery = function(sourceQuery)
{
	this.m_properties.put(oFF.QDataSource.SOURCE_QUERY, sourceQuery);
	this.invalidateCacheKeyName();
};
oFF.QDataSource.prototype.setSystemName = function(systemName)
{
	this.m_properties.put(oFF.QDataSource.SYSTEM_NAME, systemName);
};
oFF.QDataSource.prototype.setText = function(text)
{
	this.m_properties.put(oFF.QDataSource.TEXT, text);
};
oFF.QDataSource.prototype.setType = function(type)
{
	if (oFF.notNull(type))
	{
		this.m_properties.put(oFF.QDataSource.META_OBJECT_TYPE, type.getName());
		this.invalidateCacheKeyName();
	}
};
oFF.QDataSource.prototype.setUserName = function(userName)
{
	this.m_properties.putString(oFF.QDataSource.USER, userName);
	this.invalidateCacheKeyName();
};
oFF.QDataSource.prototype.setValidationHash = function(validationHash)
{
	this.m_properties.put(oFF.QDataSource.VALIDATION_HASH, validationHash);
};
oFF.QDataSource.prototype.setupDataSource = function(context)
{
	this.setupModelComponent(context, null);
	this.m_multiSources = oFF.XList.create();
	this.m_blendingSources = oFF.XList.create();
	this.m_mappings = oFF.PrFactory.createList();
	this.m_properties = oFF.XProperties.create();
	this.m_cacheKey = null;
	this.m_recalculateCacheKey = true;
	this.m_extendedDimensions = null;
	this.m_microCube = null;
	this.m_genericServiceDescription = null;
};
oFF.QDataSource.prototype.size = function()
{
	return this.m_properties.size();
};
oFF.QDataSource.prototype.toString = function()
{
	return this.getFullQualifiedName();
};
oFF.QDataSource.prototype.unescape = function(value)
{
	let first = oFF.XString.replace(value, "[[", "[");
	return oFF.XString.replace(first, "]]", "]");
};

oFF.QueryModel = function() {};
oFF.QueryModel.prototype = new oFF.QModelComponent();
oFF.QueryModel.prototype._ff_c = "QueryModel";

oFF.QueryModel.DATA_EXPORT_RESTRICTED = "DataExportRestricted";
oFF.QueryModel.HAS_USER_DEFINED_MEASURES = "HasUserDefinedMeasures";
oFF.QueryModel.IS_PLANNING = "IsPlanning";
oFF.QueryModel.LEADING_STRUCTURE = "LeadingStructure";
oFF.QueryModel.LEADING_STRUCTURE_ACCOUNT = "AccountStructure";
oFF.QueryModel.LEADING_STRUCTURE_MEASURE = "MeasureStructure";
oFF.QueryModel.MAPPED_VERSION_DIMENSION = "MappedVersionDimension";
oFF.QueryModel.SEMANTIC_OBJECT = "SemanticObject";
oFF.QueryModel.create = function(application, manager, capabilities)
{
	let query = new oFF.QueryModel();
	query.setupQuery(application, manager, capabilities);
	query.setNotificationListener(manager);
	return query;
};
oFF.QueryModel.prototype.m_autoSubmitDisabledByMetadata = false;
oFF.QueryModel.prototype.m_axesManager = null;
oFF.QueryModel.prototype.m_baseDataSource = null;
oFF.QueryModel.prototype.m_cellContextManager = null;
oFF.QueryModel.prototype.m_conditionManager = null;
oFF.QueryModel.prototype.m_cubeInformation = null;
oFF.QueryModel.prototype.m_currencyTranslationManager = null;
oFF.QueryModel.prototype.m_dataCells = null;
oFF.QueryModel.prototype.m_dataEntryEnabled = false;
oFF.QueryModel.prototype.m_dataEntryReadOnly = false;
oFF.QueryModel.prototype.m_dataSource = null;
oFF.QueryModel.prototype.m_dataSourceOrigin = null;
oFF.QueryModel.prototype.m_datasetEpmObject = null;
oFF.QueryModel.prototype.m_deactivateCumulative = false;
oFF.QueryModel.prototype.m_definitionName = null;
oFF.QueryModel.prototype.m_dimensionManager = null;
oFF.QueryModel.prototype.m_documentsIdsRequest = null;
oFF.QueryModel.prototype.m_documentsInfo = null;
oFF.QueryModel.prototype.m_drillManager = null;
oFF.QueryModel.prototype.m_exceptionAggregationManager = null;
oFF.QueryModel.prototype.m_exceptionManager = null;
oFF.QueryModel.prototype.m_explainQueryContext = null;
oFF.QueryModel.prototype.m_exportEachMeasure = false;
oFF.QueryModel.prototype.m_exportFixedFilter = false;
oFF.QueryModel.prototype.m_exportVariables = false;
oFF.QueryModel.prototype.m_filterManager = null;
oFF.QueryModel.prototype.m_formulaExceptionManager = null;
oFF.QueryModel.prototype.m_hasDynamicRriTarget = false;
oFF.QueryModel.prototype.m_hasProcessingStep = false;
oFF.QueryModel.prototype.m_hasRriTarget = false;
oFF.QueryModel.prototype.m_hasStaticRriTarget = false;
oFF.QueryModel.prototype.m_infoProvider = null;
oFF.QueryModel.prototype.m_inputReadinessFilter = null;
oFF.QueryModel.prototype.m_interopManager = null;
oFF.QueryModel.prototype.m_isBasicMeasureAggretionExportedInRepo = false;
oFF.QueryModel.prototype.m_isBasicMeasureSettingsExportedInRepo = false;
oFF.QueryModel.prototype.m_isBatchForMicroCube = false;
oFF.QueryModel.prototype.m_isF4IgnoreQueryDynamicFilter = false;
oFF.QueryModel.prototype.m_isF4UseCompleteEffectiveFilter = false;
oFF.QueryModel.prototype.m_isMetadataExportReduced = false;
oFF.QueryModel.prototype.m_isMetadataUpdatedByAutoSubmit = false;
oFF.QueryModel.prototype.m_isReturnTupleCountTotal = false;
oFF.QueryModel.prototype.m_isSelectorReadModeMasterOnly = false;
oFF.QueryModel.prototype.m_isVersionDimensionValidationEnabled = false;
oFF.QueryModel.prototype.m_keepOriginalTexts = false;
oFF.QueryModel.prototype.m_keyRefStorage = null;
oFF.QueryModel.prototype.m_metadataProperties = null;
oFF.QueryModel.prototype.m_olapEnv = null;
oFF.QueryModel.prototype.m_optimizerHints = null;
oFF.QueryModel.prototype.m_planningMode = null;
oFF.QueryModel.prototype.m_preQueries = null;
oFF.QueryModel.prototype.m_primaryCalculationManager = null;
oFF.QueryModel.prototype.m_queryCapabilities = null;
oFF.QueryModel.prototype.m_queryCellManager = null;
oFF.QueryModel.prototype.m_queryManager = null;
oFF.QueryModel.prototype.m_quickActionManager = null;
oFF.QueryModel.prototype.m_resultStructureController = null;
oFF.QueryModel.prototype.m_returnedDataSelections = null;
oFF.QueryModel.prototype.m_returnedUniqueAxisProperties = null;
oFF.QueryModel.prototype.m_runningAggregationManager = null;
oFF.QueryModel.prototype.m_serializationCurrent = null;
oFF.QueryModel.prototype.m_serializationInitial = null;
oFF.QueryModel.prototype.m_serverBaseSerializationKey = null;
oFF.QueryModel.prototype.m_shouldUseActualField = false;
oFF.QueryModel.prototype.m_simulationManager = null;
oFF.QueryModel.prototype.m_sortManager = null;
oFF.QueryModel.prototype.m_spatialClustering = null;
oFF.QueryModel.prototype.m_staticRriTargets = null;
oFF.QueryModel.prototype.m_supportsDataEntryReadOnly = false;
oFF.QueryModel.prototype.m_transientObjectsGenerated = false;
oFF.QueryModel.prototype.m_uniqueHierarchyNames = null;
oFF.QueryModel.prototype.m_unitTranslationManager = null;
oFF.QueryModel.prototype.m_universalDisplayHierarchies = null;
oFF.QueryModel.prototype.m_variableManager = null;
oFF.QueryModel.prototype.m_virtualRootNodeName = null;
oFF.QueryModel.prototype.m_visualizationManager = null;
oFF.QueryModel.prototype.m_vizManager = null;
oFF.QueryModel.prototype._addDependentSharedCalcDim = function(context, dimensionName, storageName)
{
	let calcDim = this._generateDependentFormulaCalcDim(context, dimensionName, storageName);
	if (oFF.notNull(calcDim))
	{
		this.addDimension(calcDim);
		this.getFreeAxis().insert(0, calcDim);
	}
	return calcDim;
};
oFF.QueryModel.prototype._generateDependentFormulaCalcDim = function(context, dimensionName, storageName)
{
	let dimensionAccessor = context.getDimensionAccessor();
	let dimension = dimensionAccessor.getDimensionByName(dimensionName);
	if (oFF.notNull(dimension))
	{
		return null;
	}
	let olapEnvironment = context.getOlapEnv();
	let clientQueryObjectManager = olapEnvironment.getClientQueryObjectManager();
	let formulaCalcDimProperties = clientQueryObjectManager.getFormulaCalcDimProperties(dimensionName, storageName);
	if (oFF.isNull(formulaCalcDimProperties))
	{
		return null;
	}
	let newFormulaCalculatedDimension = oFF.QFactory.createFormulaCalculatedDimension(context, formulaCalcDimProperties.getName());
	newFormulaCalculatedDimension.setPropertiesKeyRef(formulaCalcDimProperties);
	newFormulaCalculatedDimension.getTagging().put(oFF.QTransientConstants.TAG_IS_TRANSIENT, "");
	return newFormulaCalculatedDimension;
};
oFF.QueryModel.prototype._getExceptionAggregationManagerBase = function()
{
	this._loadExceptionAggregationManager();
	return this.m_exceptionAggregationManager;
};
oFF.QueryModel.prototype._loadExceptionAggregationManager = function()
{
	if (this.m_queryCapabilities.supportsExceptionAggregationDimsFormulas() && oFF.isNull(this.m_exceptionAggregationManager))
	{
		this.m_exceptionAggregationManager = oFF.QExceptionAggregationManager._create(this);
	}
};
oFF.QueryModel.prototype.addDependentSharedCalcDimsFromLinks = function(filterAcrossModels)
{
	let links = filterAcrossModels.getLinks();
	let linkIt = links.getIterator();
	while (linkIt.hasNext())
	{
		let dimensionLink = linkIt.next();
		let thisSide = dimensionLink.getFirstPart().isSameDataSourceOrDatasetIdAsContext(this) ? dimensionLink.getFirstPart() : dimensionLink.getSecondPart();
		let storageName = oFF.QFilterAcrossModelsLinkUtil.getSharedLinkStorageName(links, thisSide);
		this._addDependentSharedCalcDim(this, thisSide.getFieldKey().getKey2(), storageName);
	}
};
oFF.QueryModel.prototype.addDimension = function(dimension)
{
	this.m_dimensionManager.addDimension(dimension);
};
oFF.QueryModel.prototype.addInputReadinessFilterState = function(flag, parameter)
{
	this.m_inputReadinessFilter.addState(oFF.InputReadinessFilterState.create(flag, parameter));
	this.notifyNodeChanged();
};
oFF.QueryModel.prototype.addNewCalculatedDimensionWithName = function(calculatedDimensionName)
{
	return this.m_dimensionManager.addNewCalculatedDimensionWithName(calculatedDimensionName);
};
oFF.QueryModel.prototype.addNewCalculatedDimensionWithNameAndPreQueryName = function(calculatedDimensionName, preQueryName)
{
	this.assertNotBlendingMode();
	let newCalculatedDimension = this.addNewCalculatedDimensionWithName(calculatedDimensionName);
	newCalculatedDimension.setPreQueryName(preQueryName);
	return newCalculatedDimension;
};
oFF.QueryModel.prototype.addNewMeasureCurrencyTranslation = function(name, description)
{
	return this.m_currencyTranslationManager.addNewMeasureCurrencyTranslation(name, description);
};
oFF.QueryModel.prototype.addNewMeasureUnitTranslation = function(name, description)
{
	return this.m_unitTranslationManager.addNewMeasureUnitTranslation(name, description);
};
oFF.QueryModel.prototype.addNewModellingMeasureCurrencyTranslation = function(name, description)
{
	return this.m_currencyTranslationManager.addNewModellingMeasureCurrencyTranslation(name, description);
};
oFF.QueryModel.prototype.addOptimizerHint = function(executionEngine, hintKey, hintValue)
{
	if (this.getModelCapabilities().supportsCeScenarioParams())
	{
		if (oFF.isNull(this.m_optimizerHints))
		{
			this.m_optimizerHints = oFF.XHashMapByString.create();
		}
		let optimizerHintsByEngine = this.m_optimizerHints.getByKey(executionEngine.getName());
		if (oFF.isNull(optimizerHintsByEngine))
		{
			optimizerHintsByEngine = oFF.XHashMapByString.create();
			this.m_optimizerHints.put(executionEngine.getName(), optimizerHintsByEngine);
			this.notifyNodeChanged();
		}
		optimizerHintsByEngine.put(hintKey, hintValue);
	}
};
oFF.QueryModel.prototype.addPreQueryWithName = function(preQuery, preQueryName)
{
	if (oFF.isNull(preQuery))
	{
		this.removePreQueryByName(preQueryName);
		return;
	}
	this.assertNoPreQueryCycle(preQuery, this);
	let newPreQuery = oFF.XNameWeakGenericPair.create(preQueryName, preQuery);
	if (oFF.isNull(this.m_preQueries))
	{
		this.m_preQueries = oFF.XListOfNameObject.create();
	}
	this.m_preQueries.add(newPreQuery);
};
oFF.QueryModel.prototype.addQueryModelIdToMessages = function(messages)
{
	if (oFF.XCollectionUtils.hasElements(messages))
	{
		let instanceId = oFF.XStringValue.create(this.getDataSource().getInstanceId());
		let messageCount = messages.size();
		for (let i = 0; i < messageCount; i++)
		{
			let message = messages.get(i);
			if (message.getExtendedInfo() === null)
			{
				message.setExtendendInfoType(oFF.ExtendedInfoType.QUERY_MODEL_ID);
				message.setExtendendInfo(instanceId);
			}
		}
	}
};
oFF.QueryModel.prototype.addSecondaryMeasureTransientObjectsForSortOrRank = function(outOfContextSecondaryMeasureNames, messageManager)
{
	let secondaryMeasureDimension = this.getSecondaryCalculationDimension();
	if (oFF.notNull(secondaryMeasureDimension))
	{
		let iterator = outOfContextSecondaryMeasureNames.getIterator();
		while (iterator.hasNext())
		{
			this.addTransientObjectsForSortOrRankOrFilter(secondaryMeasureDimension, iterator.next(), messageManager, false);
		}
	}
};
oFF.QueryModel.prototype.addStaticRriTarget = function(rriTarget)
{
	if (oFF.isNull(this.m_staticRriTargets))
	{
		this.m_staticRriTargets = oFF.XList.create();
	}
	this.m_staticRriTargets.add(rriTarget);
};
oFF.QueryModel.prototype.addTransientObjectsForSortOrRankOrFilter = function(dimensionContext, memberName, messageManager, isDefaultVisibility)
{
	if (dimensionContext.getStructureMemberByAliasOrMember(memberName) === null)
	{
		let storageName = this.getQueryManager().getClientQueryObjectStorageName();
		if (oFF.notNull(storageName))
		{
			let isPrimaryStructure = dimensionContext === this.getPrimaryCalculationDimension();
			let structureMember = this.getOlapEnv().getClientQueryObjectManager().getStructuredMember(memberName, storageName, isPrimaryStructure);
			if (oFF.notNull(structureMember))
			{
				structureMember.generateTransientObjects(this, messageManager);
				dimensionContext.getTagging().put(oFF.QTransientConstants.createIsTransientMemberTag(structureMember.getAliasOrMemberName()), "");
				if (isDefaultVisibility)
				{
					structureMember.getTagging().put(oFF.QTransientConstants.TAG_IS_TRANSIENT_DEFAULT_VISIBLITY, "");
				}
				dimensionContext.addMeasure(structureMember);
			}
		}
	}
};
oFF.QueryModel.prototype.assertBlendingMode = function()
{
	if (!this.isBlendingModel())
	{
		oFF.noSupport();
	}
};
oFF.QueryModel.prototype.assertHierarchyUniqueName = function(usedHierarchyUniqueName, isActivated)
{
	if (isActivated)
	{
		if (this.m_uniqueHierarchyNames.contains(usedHierarchyUniqueName))
		{
			throw oFF.XException.createIllegalStateException(oFF.XStringUtils.concatenate3("The hierarchy unique name '", usedHierarchyUniqueName, "' is already activated!"));
		}
		this.m_uniqueHierarchyNames.add(usedHierarchyUniqueName);
	}
	else
	{
		this.m_uniqueHierarchyNames.removeElement(usedHierarchyUniqueName);
	}
};
oFF.QueryModel.prototype.assertNoPreQueryCycle = function(preQuery, mainQuery)
{
	if (preQuery.isReleased())
	{
		throw oFF.XException.createIllegalStateException("A pre query must not be released!");
	}
	let preQueries = preQuery.getPreQueries();
	if (oFF.notNull(preQueries))
	{
		let sizePreQueries = preQueries.size();
		for (let idxPreQueries = 0; idxPreQueries < sizePreQueries; idxPreQueries++)
		{
			this.assertNoPreQueryCycle(preQueries.get(idxPreQueries).getObject(), mainQuery);
		}
	}
	if (mainQuery === preQuery)
	{
		throw oFF.XException.createIllegalArgumentException("Cylce of pre queries and main query detected!");
	}
};
oFF.QueryModel.prototype.assertNotBlendingMode = function()
{
	if (this.isBlendingModel())
	{
		oFF.noSupport();
	}
};
oFF.QueryModel.prototype.augmentSFXMetadata = function()
{
	let epmObject = this.getDatasetEpmObject();
	if (oFF.notNull(epmObject))
	{
		let sfxModellerDocument = this.getOlapEnv().getModelContent(epmObject.getCubeId());
		if (oFF.notNull(sfxModellerDocument))
		{
			let docConverter = oFF.DocConverterFactory.createDocConverter(oFF.QModelFormat.SFX, oFF.QModelFormat.INA_REPOSITORY);
			if (oFF.notNull(docConverter))
			{
				let extConverterResult = docConverter.convert(this.getApplication(), sfxModellerDocument, oFF.QModelFormat.INA_REPOSITORY);
				let inaRepoData = extConverterResult.getData();
				if (oFF.notNull(inaRepoData))
				{
					let originalIsBasicMeasureAggregationExportedInRepo = this.isBasicMeasureAggregationExportedInRepo();
					let originalIsBasicMeasureSettingsExportedInRepo = this.isBasicMeasureSettingsExportedInRepo();
					this.setBasicMeasureAggregationExportForRepo(true);
					this.setBasicMeasureSettingsExportedInRepo(true);
					this.deserializeFromContent(inaRepoData);
					this.setBasicMeasureAggregationExportForRepo(originalIsBasicMeasureAggregationExportedInRepo);
					this.setBasicMeasureSettingsExportedInRepo(originalIsBasicMeasureSettingsExportedInRepo);
				}
			}
		}
	}
};
oFF.QueryModel.prototype.clearAllOptimizerHints = function()
{
	if (oFF.isNull(this.m_optimizerHints) || !this.m_optimizerHints.hasElements())
	{
		return;
	}
	this.clearOptimizerHintsByEngine(oFF.ExecutionEngine.MDS);
	this.clearOptimizerHintsByEngine(oFF.ExecutionEngine.CALC_ENGINE);
	this.clearOptimizerHintsByEngine(oFF.ExecutionEngine.SQL);
};
oFF.QueryModel.prototype.clearCalculatedDimensions = function()
{
	this.m_dimensionManager.clearAllCalculatedDimensions();
};
oFF.QueryModel.prototype.clearClientInfo = function()
{
	this.getQueryManager().getQueryManager().clearClientInfo();
};
oFF.QueryModel.prototype.clearExternalVariablesRepresentations = function()
{
	this.m_variableManager.clearExternalVariablesRepresentations();
};
oFF.QueryModel.prototype.clearInputReadinessFilter = function()
{
	this.m_inputReadinessFilter = oFF.XObjectExt.release(this.m_inputReadinessFilter);
	this.notifyNodeChanged();
};
oFF.QueryModel.prototype.clearMeasureCurrencyTranslations = function()
{
	this.m_currencyTranslationManager.clearMeasureCurrencyTranslations();
};
oFF.QueryModel.prototype.clearMeasureUnitTranslations = function()
{
	this.m_unitTranslationManager.clearMeasureUnitTranslations();
};
oFF.QueryModel.prototype.clearOptimizerHintsByEngine = function(engine)
{
	let hintsForEngine = this.m_optimizerHints.getByKey(engine.getName());
	if (oFF.notNull(hintsForEngine) && hintsForEngine.hasElements())
	{
		hintsForEngine.clear();
	}
};
oFF.QueryModel.prototype.clearOthersFromConditionsVisibilitySettings = function()
{
	this.m_resultStructureController.clearOthersFromConditionsVisibilitySettings();
};
oFF.QueryModel.prototype.clearPreQueries = function()
{
	if (oFF.notNull(this.m_preQueries))
	{
		this.m_preQueries.clear();
	}
};
oFF.QueryModel.prototype.clearResultVisibilitySettings = function()
{
	this.m_resultStructureController.clearResultVisibilitySettings();
};
oFF.QueryModel.prototype.cloneOlapComponent = function(context, parent)
{
	let olapEnv = context.getOlapEnv();
	let queryManager = context.getQueryManager();
	let capabilities = queryManager.getCapabilitiesBase();
	let clone = oFF.QueryModel.create(olapEnv, queryManager, capabilities);
	clone.copyQueryModel(this, null);
	return clone;
};
oFF.QueryModel.prototype.convertToFieldLayoutType = function(type)
{
	this.m_dimensionManager.convertToFieldLayoutType(type);
};
oFF.QueryModel.prototype.copyQueryModel = function(origin, cloneMode)
{
	this.stopEventing();
	if (cloneMode !== oFF.QueryCloneMode.MICRO_CUBE)
	{
		oFF.QModelComponent.prototype.copyFrom.call( this , origin, null);
		this.m_dataSource.copyFrom(origin.m_dataSource, null);
		if (oFF.notNull(origin.m_baseDataSource))
		{
			this.setBaseDataSource(origin.m_baseDataSource);
			this.setInfoProvider(oFF.QInfoProvider.createInfoProvider(this, this.m_baseDataSource.getObjectName(), this.m_baseDataSource.getObjectName(), null));
		}
	}
	if (this.m_queryCapabilities !== origin.m_queryCapabilities)
	{
		this.m_queryCapabilities = origin.m_queryCapabilities;
	}
	this.m_deactivateCumulative = origin.m_deactivateCumulative;
	this.m_isMetadataExportReduced = origin.m_isMetadataExportReduced;
	this.m_isBasicMeasureAggretionExportedInRepo = origin.m_isBasicMeasureAggretionExportedInRepo;
	this.m_isBasicMeasureSettingsExportedInRepo = origin.m_isBasicMeasureSettingsExportedInRepo;
	this.m_definitionName = origin.m_definitionName;
	this.m_keepOriginalTexts = origin.m_keepOriginalTexts;
	this.m_exportFixedFilter = origin.m_exportFixedFilter;
	this.m_exportVariables = origin.m_exportVariables;
	this.m_exportEachMeasure = origin.m_exportEachMeasure;
	this.m_isF4IgnoreQueryDynamicFilter = origin.m_isF4IgnoreQueryDynamicFilter;
	this.m_isF4UseCompleteEffectiveFilter = origin.m_isF4UseCompleteEffectiveFilter;
	this.m_isReturnTupleCountTotal = origin.m_isReturnTupleCountTotal;
	if (oFF.notNull(origin.m_datasetEpmObject))
	{
		this.m_datasetEpmObject = origin.m_datasetEpmObject.clone();
	}
	if (oFF.notNull(this.m_currencyTranslationManager) && oFF.notNull(origin.m_currencyTranslationManager))
	{
		this.m_currencyTranslationManager.copyFrom(origin.m_currencyTranslationManager, null);
	}
	if (oFF.notNull(this.m_unitTranslationManager) && oFF.notNull(origin.m_unitTranslationManager))
	{
		this.m_unitTranslationManager.copyFrom(origin.m_unitTranslationManager, null);
	}
	this.m_resultStructureController.copyFrom(origin.m_resultStructureController, null);
	this.m_dimensionManager.copyFrom(origin.m_dimensionManager, null);
	if (cloneMode !== oFF.QueryCloneMode.MICRO_CUBE)
	{
		this.m_variableManager.copyFrom(origin.m_variableManager, null);
	}
	this.m_dimensionManager.copyDimensionManagerMember(origin.m_dimensionManager);
	this.m_filterManager.copyFrom(origin.m_filterManager, null);
	this.m_axesManager.copyFrom(origin.m_axesManager, null);
	this.m_sortManager.copyFrom(origin.m_sortManager, null);
	if (oFF.isNull(origin.m_exceptionAggregationManager))
	{
		this.m_exceptionAggregationManager = null;
	}
	else
	{
		this._loadExceptionAggregationManager();
		if (oFF.notNull(this.m_exceptionAggregationManager))
		{
			this.m_exceptionAggregationManager.copyFrom(origin.m_exceptionAggregationManager, null);
		}
	}
	if (oFF.isNull(origin.m_runningAggregationManager))
	{
		this.m_runningAggregationManager = null;
	}
	else
	{
		this.loadRunningAggregationManager();
		if (oFF.notNull(this.m_runningAggregationManager))
		{
			this.m_runningAggregationManager.copyFrom(origin.m_runningAggregationManager, null);
		}
	}
	if (oFF.notNull(this.m_vizManager) && oFF.notNull(origin.m_vizManager))
	{
		this.getVizManager().copyVizManager(origin.m_vizManager);
	}
	if (oFF.notNull(this.m_visualizationManager) && oFF.notNull(origin.m_visualizationManager))
	{
		this.getVisualizationManager().copyFrom(origin.m_visualizationManager, null);
	}
	this.m_drillManager.copyDrillManager(origin.m_drillManager);
	this.m_cellContextManager.copyCellContextManager(origin.m_cellContextManager);
	this.m_universalDisplayHierarchies.copyFrom(origin.m_universalDisplayHierarchies, null);
	if (oFF.notNull(origin.m_exceptionManager))
	{
		this.getExceptionManager().copyFrom(origin.m_exceptionManager, null);
	}
	if (oFF.notNull(origin.m_formulaExceptionManager))
	{
		this.getFormulaExceptionManager().copyFrom(origin.m_formulaExceptionManager, null);
	}
	if (oFF.notNull(origin.m_conditionManager))
	{
		this.getConditionManagerBase().copyFrom(origin.m_conditionManager, null);
	}
	if (oFF.notNull(origin.m_simulationManager))
	{
		this.getSimulationManagerBase().copyFrom(origin.m_simulationManager, null);
	}
	if (oFF.XCollectionUtils.hasElements(origin.m_quickActionManager))
	{
		let quickActionManager = this.getQuickActionManager();
		if (oFF.notNull(quickActionManager))
		{
			this.getQuickActionManager().copyFrom(origin.m_quickActionManager, null);
		}
	}
	if (oFF.notNull(origin.m_dataCells))
	{
		this.m_dataCells = oFF.QDataCellList.createQueryDataCellList(this);
		let size = origin.m_dataCells.size();
		for (let i = 0; i < size; i++)
		{
			let originDataCell = origin.m_dataCells.get(i);
			let cloneDataCell = this.m_dataCells.newQueryDataCell(originDataCell.getName());
			cloneDataCell.copyFrom(originDataCell, null);
		}
	}
	this.m_uniqueHierarchyNames = origin.m_uniqueHierarchyNames.createSetOfStringCopy();
	this.m_metadataProperties = oFF.XProperties.createByMapCopy(origin.m_metadataProperties);
	this.m_supportsDataEntryReadOnly = origin.m_supportsDataEntryReadOnly;
	this.m_dataEntryEnabled = origin.m_dataEntryEnabled;
	this.m_dataEntryReadOnly = origin.m_dataEntryReadOnly;
	this.m_planningMode = origin.m_planningMode;
	this.m_inputReadinessFilter = oFF.notNull(origin.m_inputReadinessFilter) ? origin.m_inputReadinessFilter.cloneExt(null) : null;
	if (cloneMode !== oFF.QueryCloneMode.MICRO_CUBE)
	{
		if (oFF.notNull(origin.m_optimizerHints))
		{
			this.m_optimizerHints = oFF.XHashMapByString.create();
			let engineIt = origin.m_optimizerHints.getKeysAsIterator();
			while (engineIt.hasNext())
			{
				let engineName = engineIt.next();
				this.m_optimizerHints.put(engineName, origin.m_optimizerHints.getByKey(engineName).createMapByStringCopy());
			}
		}
		if (oFF.notNull(origin.m_preQueries))
		{
			this.m_preQueries = oFF.XListOfNameObject.create();
			this.m_preQueries.addAll(origin.m_preQueries);
		}
	}
	if (oFF.notNull(origin.m_spatialClustering))
	{
		this.m_spatialClustering = origin.m_spatialClustering.clone();
	}
	if (oFF.notNull(origin.m_queryCellManager))
	{
		this.m_queryCellManager = origin.m_queryCellManager.cloneOlapComponent(this, this);
	}
	if (origin.getQueryManager().supportsReturnedDataSelection())
	{
		this.m_returnedDataSelections = origin.getAllReturnedDataSelections().createMapCopy();
	}
	if (origin.getModelCapabilities().supportsUniqueAxisProperties())
	{
		this.m_returnedUniqueAxisProperties.copyFrom(origin.getReturnedUniqueAxisProperties(), null);
	}
	this.m_documentsInfo.copyFrom(origin.m_documentsInfo, null);
	this.m_documentsIdsRequest.copyFrom(origin.m_documentsIdsRequest, null);
	this.m_isVersionDimensionValidationEnabled = origin.m_isVersionDimensionValidationEnabled;
	this.m_autoSubmitDisabledByMetadata = origin.m_autoSubmitDisabledByMetadata;
	this.m_hasRriTarget = origin.m_hasRriTarget;
	this.m_hasStaticRriTarget = origin.m_hasStaticRriTarget;
	this.m_hasDynamicRriTarget = origin.m_hasDynamicRriTarget;
	if (origin.getModelCapabilities().supportsRRI3())
	{
		this.m_staticRriTargets = oFF.XCollectionUtils.createListCopy(origin.getStaticRriTargets());
	}
	this.m_isSelectorReadModeMasterOnly = origin.m_isSelectorReadModeMasterOnly;
	this.m_virtualRootNodeName = origin.m_virtualRootNodeName;
	this.resumeEventing();
};
oFF.QueryModel.prototype.deactivateCumulative = function()
{
	this.m_deactivateCumulative = true;
};
oFF.QueryModel.prototype.destroyTransientCustomMembers = function()
{
	if (!this.isBlendingModel())
	{
		let accountDim = this.getAccountDimension();
		let membersToProcess = oFF.XListOfNameObject.create();
		if (oFF.notNull(accountDim))
		{
			membersToProcess.addAll(accountDim.getLoadedStructureMembers());
		}
		let measureDim = this.getMeasureDimension();
		if (oFF.notNull(measureDim))
		{
			membersToProcess.addAll(this.getMeasureDimension().getLoadedStructureMembers());
		}
		let secondaryStructureDimName = this.getDimensionNameByType(oFF.DimensionType.SECONDARY_STRUCTURE);
		if (oFF.notNull(secondaryStructureDimName))
		{
			let dimensionReferences = this.getDimensionAccessor().getDimensionReferences();
			if (!dimensionReferences.containsKey(secondaryStructureDimName))
			{
				let secondaryStructure = this.getDimensionByName(secondaryStructureDimName);
				if (oFF.notNull(secondaryStructure))
				{
					membersToProcess.addAll(secondaryStructure.getLoadedStructureMembers());
				}
			}
		}
		let membersToProcessIter = membersToProcess.getIterator();
		while (membersToProcessIter.hasNext())
		{
			let structureMember = membersToProcessIter.next();
			if (!structureMember.isReleased())
			{
				structureMember.destroyTransientObjects(this);
			}
		}
	}
};
oFF.QueryModel.prototype.destroyTransientFormulaCalcPrequeries = function()
{
	let dimensions = this.getLoadedDimensions();
	let dimensionsIterator = dimensions.getIterator();
	while (dimensionsIterator.hasNext())
	{
		let dimension = dimensionsIterator.next();
		if (dimension.getDimensionType().isTypeOf(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION))
		{
			let formulaCalcDim = dimension;
			formulaCalcDim.destroyTransientObjects(this);
		}
	}
};
oFF.QueryModel.prototype.destroyTransientFromCells = function()
{
	let queryCellManager = this.getQueryCellManager();
	if (oFF.notNull(queryCellManager))
	{
		queryCellManager.destroyTransientObjects(this);
	}
};
oFF.QueryModel.prototype.destroyTransientFromFilter = function()
{
	let filter = this.getFilter();
	if (filter.isVisibilityFilterInitialized())
	{
		this.destroyTransientFromFilterElement(filter.getVisibilityFilter().getFilterRootElement());
	}
	let externalVisibilityFilters = filter.getLinkedVisibilityFilters();
	let visibilityFilterIt = externalVisibilityFilters.getKeysAsIterator();
	while (visibilityFilterIt.hasNext())
	{
		let filterElement = externalVisibilityFilters.getByKey(visibilityFilterIt.next()).getFilterRootElement();
		this.destroyTransientFromFilterElement(filterElement);
	}
	if (filter.isDynamicFilterInitialized())
	{
		this.destroyTransientFromFilterElement(filter.getDynamicFilter().getFilterRootElement());
	}
	let externalFilters = filter.getLinkedFilters();
	let filterIt = externalFilters.getKeysAsIterator();
	while (filterIt.hasNext())
	{
		let filterElement = externalFilters.getByKey(filterIt.next()).getFilterRootElement();
		this.destroyTransientFromFilterElement(filterElement);
	}
};
oFF.QueryModel.prototype.destroyTransientFromFilterElement = function(filterElement)
{
	if (oFF.notNull(filterElement) && !filterElement.isReleased())
	{
		filterElement.setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_DO_NOT_RAISEEVENTS);
		let componentType = filterElement.getComponentType();
		if (componentType.isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA))
		{
			let filterCollection = filterElement;
			let size = filterCollection.size();
			for (let i = size - 1; i >= 0; i--)
			{
				this.destroyTransientFromFilterElement(filterCollection.get(i));
			}
		}
		else if (componentType.isTypeOf(oFF.FilterComponentType.FILTER_ASYMMETRIC_VISIBILITY))
		{
			this.destroyTransientFromFilterElement(filterElement.getComplexRoot());
			filterElement.destroyTransientObjects(this);
		}
		else if (componentType.isTypeOf(oFF.FilterComponentType.TRANSIENT_FILTER))
		{
			filterElement.destroyTransientObjects(this);
		}
		filterElement.resumeEventing();
	}
};
oFF.QueryModel.prototype.destroyTransientFromFormulaExceptions = function()
{
	if (oFF.notNull(this.m_formulaExceptionManager))
	{
		this.m_formulaExceptionManager.destroyTransientObjects(this);
	}
};
oFF.QueryModel.prototype.destroyTransientFromSortAndRank = function()
{
	let session = this.getSession();
	if (oFF.notNull(session) && session.hasFeature(oFF.FeatureToggleOlap.SORT_AND_RANK_BY_SECONDARY_MEASURE_ENHANCEMENT))
	{
		let sortingManager = this.getSortingManager();
		let sortingOperations = sortingManager.getSortingOperations();
		let rankInfo = this.getConvenienceCommands().getRank("");
		if (sortingOperations.size() > 0 || oFF.notNull(rankInfo))
		{
			let filter = this.getFilter();
			if (filter.isDynamicFilterInitialized())
			{
				this.removeSecondaryMeasureTransientFilterElements(filter.getDynamicFilter());
			}
			if (filter.getModelCapabilities().supportsVisibilityFilter() && filter.isVisibilityFilterInitialized())
			{
				this.removeSecondaryMeasureTransientFilterElements(filter.getVisibilityFilter());
			}
		}
	}
};
oFF.QueryModel.prototype.destroyTransientObjects = function()
{
	this.m_transientObjectsGenerated = false;
	if (!this.isReleased())
	{
		this.stopEventing();
		this.destroyTransientFormulaCalcPrequeries();
		this.destroyTransientFromFilter();
		this.destroyTransientFromFormulaExceptions();
		this.destroyTransientCustomMembers();
		this.destroyTransientFromCells();
		this.destroyTransientFromSortAndRank();
		let currentDateVariable = oFF.QVariableUtils.getCurrentDateVariable(this);
		if (oFF.notNull(currentDateVariable))
		{
			currentDateVariable.getTagging().remove(oFF.QPersistedPlaceholderTag.PERSISTED_QUERY_PLACEHOLDER);
			currentDateVariable.clear();
		}
		if (this.isBlendingModel())
		{
			let blendingSources = this.getBlendingDefinition().getSources();
			for (let i = 0; i < blendingSources.size(); i++)
			{
				blendingSources.get(i).getQueryModel().destroyTransientObjects();
			}
		}
		this.resumeEventing();
	}
};
oFF.QueryModel.prototype.disableAutoSubmitCompatibility = function()
{
	this.m_autoSubmitDisabledByMetadata = true;
	this.m_queryCapabilities.setSupportsAutoVariableSubmit(false);
};
oFF.QueryModel.prototype.generateFormulaCalcDimPreQueries = function(messageManager)
{
	let dimensions = this.getLoadedDimensions();
	let dimensionsToProcess = oFF.XList.create();
	let usedDimensions = null;
	for (let i = 0; i < dimensions.size(); i++)
	{
		let dimension = dimensions.get(i);
		if (dimension.getDimensionType().isTypeOf(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION))
		{
			let calcDim = dimension;
			if (calcDim.getTagging().containsKey(oFF.QTransientConstants.TAG_IS_TRANSIENT) && calcDim.getAxis() !== null && calcDim.getAxisType() === oFF.AxisType.FREE)
			{
				if (oFF.isNull(usedDimensions))
				{
					usedDimensions = oFF.XHashSetOfString.create();
					oFF.DimensionUsageAnalyzer2.setupHeuristic(this, usedDimensions);
				}
				if (usedDimensions.contains(calcDim.getName()))
				{
					dimensionsToProcess.add(calcDim);
				}
				else
				{
					this.removeCalculatedDimensionByName(calcDim.getName());
				}
			}
			else if (!calcDim.isHidden())
			{
				dimensionsToProcess.add(calcDim);
			}
		}
	}
	let dimensionsToProcessIter = dimensionsToProcess.getIterator();
	while (dimensionsToProcessIter.hasNext())
	{
		let formulaCalcDim = dimensionsToProcessIter.next();
		formulaCalcDim.generateTransientObjects(this, messageManager);
	}
};
oFF.QueryModel.prototype.generateTransientCustomMembers = function(messageManager)
{
	if (!this.isBlendingModel())
	{
		let accountDim = this.getAccountDimension();
		let membersToProcess = oFF.XListOfNameObject.create();
		if (oFF.notNull(accountDim))
		{
			membersToProcess.addAll(accountDim.getLoadedStructureMembers());
		}
		let measureDim = this.getMeasureDimension();
		if (oFF.notNull(measureDim))
		{
			membersToProcess.addAll(this.getMeasureDimension().getLoadedStructureMembers());
		}
		let secondaryStructureDimName = this.getDimensionNameByType(oFF.DimensionType.SECONDARY_STRUCTURE);
		if (oFF.notNull(secondaryStructureDimName))
		{
			let dimensionReferences = this.getDimensionAccessor().getDimensionReferences();
			if (!dimensionReferences.containsKey(secondaryStructureDimName))
			{
				let secondaryStructure = this.getDimensionByName(secondaryStructureDimName);
				if (oFF.notNull(secondaryStructure))
				{
					membersToProcess.addAll(secondaryStructure.getLoadedStructureMembers());
				}
			}
		}
		let membersToProcessIter = membersToProcess.getIterator();
		while (membersToProcessIter.hasNext())
		{
			let structureMember = membersToProcessIter.next();
			if (oFF.notNull(structureMember) && !structureMember.isReleased() && structureMember.getMemberType().isCustomMember() && !structureMember.isModelDefinedMember() && !structureMember.isCreatedFromMetadata())
			{
				structureMember.generateTransientObjects(this, messageManager);
			}
		}
	}
};
oFF.QueryModel.prototype.generateTransientFromCells = function(messageManager)
{
	let queryCellManager = this.getQueryCellManager();
	if (oFF.notNull(queryCellManager))
	{
		queryCellManager.generateTransientObjects(this, messageManager);
	}
};
oFF.QueryModel.prototype.generateTransientFromExternalFilters = function(externalFilters, processedExternalFilters, messageManager)
{
	let filterIt = externalFilters.getKeysAsIterator();
	while (filterIt.hasNext())
	{
		let filterKey = filterIt.next();
		if (!processedExternalFilters.contains(filterKey))
		{
			let element = externalFilters.getByKey(filterKey).getFilterRootElement();
			this.generateTransientFromFilterElement(element, messageManager);
			processedExternalFilters.add(filterKey);
		}
	}
};
oFF.QueryModel.prototype.generateTransientFromFilter = function(messageManager)
{
	this.stopEventing();
	let filter = this.getFilter();
	if (filter.isDynamicFilterInitialized())
	{
		this.generateTransientFromFilterElement(filter.getDynamicFilter().getFilterRootElement(), messageManager);
	}
	if (filter.isTmpFilterInitialized())
	{
		this.generateTransientFromFilterElement(filter.getTmpFilter().getFilterRootElement(), messageManager);
	}
	if (filter.isVisibilityFilterInitialized())
	{
		this.generateTransientFromFilterElement(filter.getVisibilityFilter().getFilterRootElement(), messageManager);
	}
	let processedExternalFilters = oFF.XHashSetOfString.create();
	this.generateTransientFromExternalFilters(filter.getLinkedFilters(), processedExternalFilters, messageManager);
	while (filter.getLinkedFilters().size() > processedExternalFilters.size())
	{
		this.generateTransientFromExternalFilters(filter.getLinkedFilters(), processedExternalFilters, messageManager);
	}
	let processedExternalVisibilityFilters = oFF.XHashSetOfString.create();
	this.generateTransientFromExternalFilters(filter.getLinkedVisibilityFilters(), processedExternalVisibilityFilters, messageManager);
	while (filter.getLinkedVisibilityFilters().size() > processedExternalVisibilityFilters.size())
	{
		this.generateTransientFromExternalFilters(filter.getLinkedVisibilityFilters(), processedExternalVisibilityFilters, messageManager);
	}
	this.resumeEventing();
	return true;
};
oFF.QueryModel.prototype.generateTransientFromFilterElement = function(filterElement, messageManager)
{
	if (oFF.notNull(filterElement))
	{
		filterElement.setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_DO_NOT_RAISEEVENTS);
		let componentType = filterElement.getComponentType();
		if (componentType.isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA))
		{
			let filterCollection = filterElement;
			let size = filterCollection.size();
			for (let i = 0; i < size; i++)
			{
				this.generateTransientFromFilterElement(filterCollection.get(i), messageManager);
			}
		}
		else if (componentType === oFF.FilterComponentType.FILTER_ASYMMETRIC_VISIBILITY)
		{
			let transientFilterElement = filterElement;
			transientFilterElement.generateTransientObjects(this, messageManager);
		}
		else if (componentType === oFF.FilterComponentType.FILTER_ACROSS_MODELS || componentType === oFF.FilterComponentType.FILTER_MEASURE_BASED)
		{
			let transientFilterElement = filterElement;
			transientFilterElement.generateTransientObjects(this, messageManager);
			let transientCalcDim = transientFilterElement.getTransientDimensionsForQueryModel(this);
			oFF.XCollectionUtils.addAll(this.getFreeAxis(), transientCalcDim);
			if (componentType === oFF.FilterComponentType.FILTER_ACROSS_MODELS)
			{
				this.addDependentSharedCalcDimsFromLinks(filterElement);
			}
		}
		else if (componentType.isTypeOf(oFF.FilterComponentType.FILTER_TIME_RANGE))
		{
			let transientDynamicTimeFilterElement = filterElement;
			transientDynamicTimeFilterElement.generateTransientObjects(this, messageManager);
		}
		else if (componentType === oFF.FilterComponentType.OPERATION)
		{
			let filterOperation = filterElement;
			let dimensionName = filterOperation.getDimensionName();
			let keyRefStorage;
			let context = filterOperation.getContext();
			let storageName = this.getQueryManager().getClientQueryObjectStorageName();
			if (oFF.isNull(storageName) && oFF.notNull(context))
			{
				if (context.getComponentType() === oFF.OlapComponentType.QUERY_MANAGER)
				{
					keyRefStorage = filterOperation.getQueryModel().getKeyRefStorage();
				}
				else
				{
					keyRefStorage = context.getKeyRefStorage();
				}
				if (oFF.notNull(keyRefStorage))
				{
					storageName = keyRefStorage.getName();
				}
			}
			let dimension = this.getDimensionByName(dimensionName);
			let filterExpression = filterOperation.getFilterExpression();
			let isMergable = oFF.notNull(filterExpression) && filterExpression.isMergable() || this.getSession().hasFeature(oFF.FeatureToggleOlap.MERGABLE_MEASURE_FILTER);
			if (isMergable && oFF.notNull(dimension) && filterOperation.getComparisonOperator() === oFF.ComparisonOperator.EQUAL)
			{
				let isPrimaryStructure = dimension === this.getPrimaryCalculationDimension();
				if (isPrimaryStructure)
				{
					let memberName = filterOperation.getLow() !== null && filterOperation.getLow().hasValue() && filterOperation.getLow().getValueType() === oFF.XValueType.STRING ? filterOperation.getLow().getString() : null;
					if (oFF.notNull(memberName))
					{
						this.addTransientObjectsForSortOrRankOrFilter(dimension, memberName, messageManager, true);
					}
				}
			}
			this._addDependentSharedCalcDim(this, dimensionName, storageName);
		}
		filterElement.resumeEventing();
	}
	return true;
};
oFF.QueryModel.prototype.generateTransientFromFormulaExceptions = function(messageManager)
{
	if (oFF.notNull(this.m_formulaExceptionManager))
	{
		this.m_formulaExceptionManager.generateTransientObjects(this, messageManager);
	}
};
oFF.QueryModel.prototype.generateTransientFromSortAndRank = function(messageManager)
{
	if (!this.isBlendingModel())
	{
		let session = this.getSession();
		let isSortOrRankByOutOfContextSecondaryMeasureActive = oFF.notNull(session) && session.hasFeature(oFF.FeatureToggleOlap.SORT_AND_RANK_BY_SECONDARY_MEASURE_ENHANCEMENT);
		let outOfContextSecondaryMeasureNames = oFF.XList.create();
		let sortingManager = this.getSortingManager();
		let sortingOperations = sortingManager.getSortingOperations();
		let size = sortingOperations.size();
		for (let i = 0; i < size; i++)
		{
			let sortOp = sortingOperations.get(i);
			let sortingType = sortOp.getSortingType();
			if (sortingType === oFF.SortType.DATA_CELL_VALUE || sortingType === oFF.SortType.COMPLEX)
			{
				let elementPath = sortOp.getElementPath();
				let pathSize = elementPath.size();
				for (let idxPath = 0; idxPath < pathSize; idxPath++)
				{
					let dimElement = elementPath.get(idxPath);
					let memberName = dimElement.getSelectValue();
					let dimensionContext = dimElement.getDimension();
					if (oFF.XStringUtils.isNotNullAndNotEmpty(memberName))
					{
						let isPrimaryStructure = dimensionContext === this.getPrimaryCalculationDimension();
						let isSecondaryStructure = dimensionContext === this.getSecondaryCalculationDimension();
						if (isPrimaryStructure)
						{
							this.addTransientObjectsForSortOrRankOrFilter(dimensionContext, memberName, messageManager, false);
						}
						else if (isSecondaryStructure && isSortOrRankByOutOfContextSecondaryMeasureActive)
						{
							if (this.shouldAddSecondaryMeasureTransientFromSortOrRank(memberName) && !outOfContextSecondaryMeasureNames.contains(memberName))
							{
								outOfContextSecondaryMeasureNames.add(memberName);
							}
						}
					}
				}
			}
			else if (sortingType === oFF.SortType.MEASURE)
			{
				let measureSorting = sortOp;
				let measure = measureSorting.getMeasure();
				if (oFF.notNull(measure))
				{
					this.addTransientObjectsForSortOrRankOrFilter(this.getPrimaryCalculationDimension(), measure.getName(), messageManager, false);
				}
				let secondaryMeasure = measureSorting.getSecondaryMeasure();
				if (oFF.notNull(secondaryMeasure))
				{
					this.addTransientObjectsForSortOrRankOrFilter(this.getSecondaryCalculationDimension(), secondaryMeasure.getName(), messageManager, false);
				}
			}
		}
		if (isSortOrRankByOutOfContextSecondaryMeasureActive)
		{
			let rankInfo = this.getConvenienceCommands().getRank("");
			if (oFF.notNull(rankInfo))
			{
				let secondaryMeasureNameFromRank = rankInfo.getSecondaryMeasure();
				if (this.shouldAddSecondaryMeasureTransientFromSortOrRank(secondaryMeasureNameFromRank) && !outOfContextSecondaryMeasureNames.contains(secondaryMeasureNameFromRank))
				{
					outOfContextSecondaryMeasureNames.add(secondaryMeasureNameFromRank);
				}
			}
			if (outOfContextSecondaryMeasureNames.size() > 0)
			{
				this.addSecondaryMeasureTransientObjectsForSortOrRank(outOfContextSecondaryMeasureNames, messageManager);
				oFF.QFilterUtil.addSecondaryMeasuresIntoFilter(this, this.getFilter().getDynamicFilter(), outOfContextSecondaryMeasureNames, oFF.QTransientConstants.TAG_IS_TRANSIENT_FILTER_ELEMENT);
				let selectedSecondaryMeasureNames = this.getSelectedSecondaryMeasureNamesList(outOfContextSecondaryMeasureNames);
				if (selectedSecondaryMeasureNames.size() > 0)
				{
					oFF.QFilterUtil.addSecondaryMeasuresIntoFilter(this, this.getFilter().getVisibilityFilter(), selectedSecondaryMeasureNames, oFF.QTransientConstants.TAG_IS_TRANSIENT_FILTER_ELEMENT);
				}
			}
		}
	}
};
oFF.QueryModel.prototype.generateTransientObjects = function()
{
	this.setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_DO_NOT_RAISEEVENTS);
	let messageManager = oFF.MessageManager.createMessageManagerExt(this.getSession());
	if (this.m_transientObjectsGenerated)
	{
		this.destroyTransientObjects();
	}
	this.m_transientObjectsGenerated = true;
	this.generateTransientFromFilter(messageManager);
	this.generateTransientFromFormulaExceptions(messageManager);
	this.generateTransientCustomMembers(messageManager);
	this.generateFormulaCalcDimPreQueries(messageManager);
	this.generateTransientFromCells(messageManager);
	this.generateTransientFromSortAndRank(messageManager);
	if (this.isBlendingModel())
	{
		let blendingSources = this.getBlendingDefinition().getSources();
		for (let i = 0; i < blendingSources.size(); i++)
		{
			blendingSources.get(i).getQueryModel().generateTransientObjects();
		}
	}
	this.resumeEventing();
	if (messageManager.hasErrors())
	{
		this.destroyTransientObjects();
		throw oFF.XException.createRuntimeException(messageManager.getErrors().get(0).getText());
	}
	this.getQueryManager().addAllMessages(messageManager);
};
oFF.QueryModel.prototype.getAccountDimension = function()
{
	return this.m_dimensionManager.getAccountDimension();
};
oFF.QueryModel.prototype.getAlignmentPriority = function()
{
	return this.m_resultStructureController.getAlignmentPriority();
};
oFF.QueryModel.prototype.getAllDisabledReturnedDataSelectionConstants = function()
{
	return oFF.XStream.of(this.m_returnedDataSelections.getKeysAsReadOnlyList()).filter((rds) => {
		return !this.m_returnedDataSelections.getByKey(rds).getBoolean();
	}).collect(oFF.XStreamCollector.toList());
};
oFF.QueryModel.prototype.getAllEnabledReturnedDataSelectionConstants = function()
{
	return oFF.XStream.of(this.m_returnedDataSelections.getKeysAsReadOnlyList()).filter((rds) => {
		return this.m_returnedDataSelections.getByKey(rds).getBoolean();
	}).collect(oFF.XStreamCollector.toList());
};
oFF.QueryModel.prototype.getAllReturnedDataSelections = function()
{
	return this.m_returnedDataSelections;
};
oFF.QueryModel.prototype.getAvailableCategories = function()
{
	return this.m_currencyTranslationManager.getAvailableCategories();
};
oFF.QueryModel.prototype.getAvailableCurrencies = function()
{
	return this.m_currencyTranslationManager.getAvailableCurrencies();
};
oFF.QueryModel.prototype.getAvailableCurrencyTranslationObjects = function()
{
	return this.m_currencyTranslationManager.getAvailableCurrencyTranslationObjects();
};
oFF.QueryModel.prototype.getAvailableRateNames = function()
{
	return this.m_currencyTranslationManager.getAvailableRateNames();
};
oFF.QueryModel.prototype.getAvailableRateTypes = function()
{
	return this.m_currencyTranslationManager.getAvailableRateTypes();
};
oFF.QueryModel.prototype.getAvailableRateVersions = function()
{
	return this.m_currencyTranslationManager.getAvailableRateVersions();
};
oFF.QueryModel.prototype.getAxesManager = function()
{
	return this.m_axesManager;
};
oFF.QueryModel.prototype.getAxis = function(axisType)
{
	return this.m_axesManager.getAxis(axisType);
};
oFF.QueryModel.prototype.getAxisBase = function(axis)
{
	return this.m_axesManager.getAxisBase(axis);
};
oFF.QueryModel.prototype.getAxisDef = function(axis)
{
	return this.getAxis(axis);
};
oFF.QueryModel.prototype.getBaseDataSource = function()
{
	return this.m_baseDataSource;
};
oFF.QueryModel.prototype.getBlendingDefinition = function()
{
	this.assertBlendingMode();
	return this.getDataSource().getBlendingDefinition();
};
oFF.QueryModel.prototype.getBlendingSources = function()
{
	this.assertBlendingMode();
	let blendingDefinition = this.getBlendingDefinition();
	if (oFF.isNull(blendingDefinition))
	{
		return null;
	}
	return blendingDefinition.getSources();
};
oFF.QueryModel.prototype.getCellContextManager = function()
{
	return this.m_cellContextManager;
};
oFF.QueryModel.prototype.getCellContextManagerBase = function()
{
	return this.m_cellContextManager;
};
oFF.QueryModel.prototype.getChartCommands = function(chartDefinitionId)
{
	return oFF.QCommandsChart.create(this.getVisualizationManager().getOrCreateVisualisationDefinition(chartDefinitionId, oFF.ProtocolBindingType.HIGH_CHART_PROTOCOL, oFF.SemanticBindingType.CHART));
};
oFF.QueryModel.prototype.getChildElements = function()
{
	let list = oFF.XList.create();
	list.add(this.getDataSource());
	list.add(this.m_dimensionManager);
	return list;
};
oFF.QueryModel.prototype.getChildSetState = function()
{
	return oFF.ChildSetState.COMPLETE;
};
oFF.QueryModel.prototype.getClientComponent = function()
{
	return this.getQueryManager().getClientInfo().getClientComponent();
};
oFF.QueryModel.prototype.getClientIdentifier = function()
{
	return this.getQueryManager().getClientInfo().getClientIdentifier();
};
oFF.QueryModel.prototype.getClientInfo = function()
{
	return this.getQueryManager().getClientInfo();
};
oFF.QueryModel.prototype.getClientVersion = function()
{
	return this.getQueryManager().getClientInfo().getClientVersion();
};
oFF.QueryModel.prototype.getColumnsAxis = function()
{
	return this.m_axesManager.getColumnsAxis();
};
oFF.QueryModel.prototype.getColumnsAxisDef = function()
{
	return this.getColumnsAxis();
};
oFF.QueryModel.prototype.getConditionManager = function()
{
	if (this.m_queryCapabilities.supportsConditions())
	{
		this.lazyLoadConditionManager();
		return this.m_conditionManager;
	}
	return null;
};
oFF.QueryModel.prototype.getConditionManagerBase = function()
{
	if (this.m_queryCapabilities.supportsConditions())
	{
		this.lazyLoadConditionManager();
		return this.m_conditionManager;
	}
	return null;
};
oFF.QueryModel.prototype.getContext = function()
{
	return this;
};
oFF.QueryModel.prototype.getCubeInfo = function()
{
	return this.m_cubeInformation;
};
oFF.QueryModel.prototype.getCurrencyRateTableId = function()
{
	return this.m_currencyTranslationManager.getCurrencyRateTableId();
};
oFF.QueryModel.prototype.getCurrencyTranslationDetails = function()
{
	return this.m_currencyTranslationManager.getCurrencyTranslationDetails();
};
oFF.QueryModel.prototype.getCurrencyTranslationDetailsReset = function()
{
	return this.m_currencyTranslationManager.getCurrencyTranslationDetailsReset();
};
oFF.QueryModel.prototype.getCurrencyTranslationEnabledType = function()
{
	return this.m_currencyTranslationManager.getCurrencyTranslationEnabledType();
};
oFF.QueryModel.prototype.getCurrencyTranslationManager = function()
{
	return this.m_currencyTranslationManager;
};
oFF.QueryModel.prototype.getCurrencyTranslationManagerBase = function()
{
	return this.m_currencyTranslationManager;
};
oFF.QueryModel.prototype.getDataArea = function()
{
	return this.getDataSource().getDataArea();
};
oFF.QueryModel.prototype.getDataSource = function()
{
	return this.getDataSourceBase();
};
oFF.QueryModel.prototype.getDataSourceBase = function()
{
	return this.m_dataSource;
};
oFF.QueryModel.prototype.getDataSourceOrigin = function()
{
	return this.m_dataSourceOrigin;
};
oFF.QueryModel.prototype.getDatasetEpmObject = function()
{
	return this.m_datasetEpmObject;
};
oFF.QueryModel.prototype.getDatasetId = function()
{
	if (this.getDatasetEpmObject() !== null)
	{
		return this.getDatasetEpmObject().getDatasetId();
	}
	return null;
};
oFF.QueryModel.prototype.getDatasetShortDescriptionOrName = function()
{
	if (this.getDatasetEpmObject() !== null)
	{
		return this.getDatasetEpmObject().getDatasetShortDescriptionOrName();
	}
	return null;
};
oFF.QueryModel.prototype.getDatasetUIName = function()
{
	if (this.getDatasetEpmObject() !== null)
	{
		return this.getDatasetEpmObject().getDatasetUIName();
	}
	return null;
};
oFF.QueryModel.prototype.getDefaultCurrency = function()
{
	return this.m_currencyTranslationManager.getDefaultCurrency();
};
oFF.QueryModel.prototype.getDefinitionName = function()
{
	return this.m_definitionName;
};
oFF.QueryModel.prototype.getDimensionAccessor = function()
{
	return this.m_dimensionManager;
};
oFF.QueryModel.prototype.getDimensionByName = function(name)
{
	return this.m_dimensionManager.getDimensionByName(name);
};
oFF.QueryModel.prototype.getDimensionByNameFromExistingMetadata = function(name)
{
	return this.m_dimensionManager.getDimensionByNameFromExistingMetadata(name);
};
oFF.QueryModel.prototype.getDimensionByNameFromExistingMetadataOrFormulaCalcDim = function(name)
{
	return this.m_dimensionManager.getDimensionByNameFromExistingMetadataOrFormulaCalcDim(name);
};
oFF.QueryModel.prototype.getDimensionByType = function(type)
{
	return this.m_dimensionManager.getDimensionByType(type);
};
oFF.QueryModel.prototype.getDimensionCount = function()
{
	return this.m_dimensionManager.getDimensionCount();
};
oFF.QueryModel.prototype.getDimensionManagerBase = function()
{
	return this.m_dimensionManager;
};
oFF.QueryModel.prototype.getDimensionMemberVariables = function()
{
	return this.getVariableContainer().getDimensionMemberVariables();
};
oFF.QueryModel.prototype.getDimensionNameByType = function(type)
{
	return this.m_dimensionManager.getDimensionNameByType(type);
};
oFF.QueryModel.prototype.getDimensionNames = function()
{
	return this.m_dimensionManager.getDimensionNames();
};
oFF.QueryModel.prototype.getDimensions = function()
{
	return this.m_dimensionManager.getDimensions();
};
oFF.QueryModel.prototype.getDimensionsByType = function(type)
{
	return this.m_dimensionManager.getDimensionsByType(type);
};
oFF.QueryModel.prototype.getDocumentsIdsRequest = function()
{
	return this.m_documentsIdsRequest;
};
oFF.QueryModel.prototype.getDocumentsInfo = function()
{
	return this.m_documentsInfo;
};
oFF.QueryModel.prototype.getDrillManager = function()
{
	return this.m_drillManager;
};
oFF.QueryModel.prototype.getDrillManagerBase = function()
{
	return this.m_drillManager;
};
oFF.QueryModel.prototype.getDueDate = function()
{
	let cubeInfo = this.getCubeInfo();
	if (oFF.isNull(cubeInfo))
	{
		return null;
	}
	return cubeInfo.getDueDate();
};
oFF.QueryModel.prototype.getDynamicAxis = function()
{
	return this.m_axesManager.getDynamicAxis();
};
oFF.QueryModel.prototype.getExceptionManager = function()
{
	if (oFF.isNull(this.m_exceptionManager) && !this.isReleased())
	{
		this.m_exceptionManager = oFF.QExceptionManager.createExceptionManager(this);
	}
	return this.m_exceptionManager;
};
oFF.QueryModel.prototype.getExplainQueryContext = function()
{
	if (oFF.isNull(this.m_explainQueryContext))
	{
		this.m_explainQueryContext = oFF.QExplainQueryContext.create(this, this);
	}
	return this.m_explainQueryContext;
};
oFF.QueryModel.prototype.getExtendedDimensions = function()
{
	let dataSource = this.getDataSource();
	if (oFF.isNull(dataSource))
	{
		return null;
	}
	return dataSource.getExtendedDimensions();
};
oFF.QueryModel.prototype.getFieldAccessorSingle = function()
{
	return this.m_dimensionManager;
};
oFF.QueryModel.prototype.getFieldByName = function(name)
{
	return this.m_dimensionManager.getFieldByName(name);
};
oFF.QueryModel.prototype.getFieldByNameOrAlias = function(name)
{
	return this.m_dimensionManager.getFieldByNameOrAlias(name);
};
oFF.QueryModel.prototype.getFilter = function()
{
	return this.m_filterManager;
};
oFF.QueryModel.prototype.getFilterAxis = function()
{
	return this.m_axesManager.getFilterAxis();
};
oFF.QueryModel.prototype.getFilterBase = function()
{
	return this.m_filterManager;
};
oFF.QueryModel.prototype.getFormulaExceptionManager = function()
{
	if (oFF.isNull(this.m_formulaExceptionManager) && !this.isReleased())
	{
		this.m_formulaExceptionManager = oFF.QFormulaExceptionManager.createFormulaExceptionManager(this);
	}
	return this.m_formulaExceptionManager;
};
oFF.QueryModel.prototype.getFormulaExceptionManagerBase = function()
{
	return this.getFormulaExceptionManager();
};
oFF.QueryModel.prototype.getFreeAxis = function()
{
	return this.m_axesManager.getFreeAxis();
};
oFF.QueryModel.prototype.getHierarchyNameVariable = function(name)
{
	return this.getVariableContainer().getHierarchyNameVariable(name);
};
oFF.QueryModel.prototype.getHierarchyNameVariables = function()
{
	return this.getVariableContainer().getHierarchyNameVariables();
};
oFF.QueryModel.prototype.getHierarchyNodeVariable = function(name)
{
	return this.getVariableContainer().getHierarchyNodeVariable(name);
};
oFF.QueryModel.prototype.getInfoProvider = function()
{
	return this.m_infoProvider;
};
oFF.QueryModel.prototype.getInputEnabledAndNonTechnicalVariables = function()
{
	return this.m_variableManager.getInputEnabledAndNonTechnicalVariables();
};
oFF.QueryModel.prototype.getInputEnabledVariable = function(name)
{
	return this.getVariableContainer().getInputEnabledVariable(name);
};
oFF.QueryModel.prototype.getInputEnabledVariables = function()
{
	return this.m_variableManager.getInputEnabledVariables();
};
oFF.QueryModel.prototype.getInputReadinessFilter = function()
{
	return this.m_inputReadinessFilter;
};
oFF.QueryModel.prototype.getInteropManager = function()
{
	if (oFF.isNull(this.m_interopManager))
	{
		this.m_interopManager = oFF.QInteropManager.create(this);
	}
	return this.m_interopManager;
};
oFF.QueryModel.prototype.getKeyRefStorage = function()
{
	return this.m_keyRefStorage;
};
oFF.QueryModel.prototype.getLanguageLocale = function()
{
	return this.getQueryManager().getClientInfo().getLanguageLocale();
};
oFF.QueryModel.prototype.getLoadedDimensions = function()
{
	return this.m_dimensionManager.getLoadedDimensions();
};
oFF.QueryModel.prototype.getMappedVersionDimension = function()
{
	let dimensionName = this.getMetadataProperties().getStringByKey(oFF.QueryModel.MAPPED_VERSION_DIMENSION);
	if (oFF.XStringUtils.isNotNullAndNotEmpty(dimensionName))
	{
		return this.getDimensionByName(dimensionName);
	}
	return null;
};
oFF.QueryModel.prototype.getMaxNumberOfTranslations = function()
{
	return this.m_currencyTranslationManager.getMaxNumberOfTranslations();
};
oFF.QueryModel.prototype.getMdResultStructureControllerBase = function()
{
	return this.m_resultStructureController;
};
oFF.QueryModel.prototype.getMeasureCurrencyTranslation = function(currencyTranslationName)
{
	return this.m_currencyTranslationManager.getMeasureCurrencyTranslation(currencyTranslationName);
};
oFF.QueryModel.prototype.getMeasureCurrencyTranslations = function()
{
	return this.m_currencyTranslationManager.getMeasureCurrencyTranslations();
};
oFF.QueryModel.prototype.getMeasureDimension = function()
{
	return this.m_dimensionManager.getMeasureDimension();
};
oFF.QueryModel.prototype.getMeasureUnitTranslation = function(name)
{
	return this.m_unitTranslationManager.getMeasureUnitTranslation(name);
};
oFF.QueryModel.prototype.getMeasureUnitTranslations = function()
{
	return this.m_unitTranslationManager.getMeasureUnitTranslations();
};
oFF.QueryModel.prototype.getMetadata = function()
{
	return this.m_serializationCurrent;
};
oFF.QueryModel.prototype.getMetadataProperties = function()
{
	return this.m_metadataProperties;
};
oFF.QueryModel.prototype.getMetadataPropertiesBase = function()
{
	return this.m_metadataProperties;
};
oFF.QueryModel.prototype.getModelCapabilities = function()
{
	return this.m_queryCapabilities;
};
oFF.QueryModel.prototype.getModelCapabilitiesBase = function()
{
	return this.m_queryCapabilities;
};
oFF.QueryModel.prototype.getModelLevel = function()
{
	return this.m_resultStructureController.getModelLevel();
};
oFF.QueryModel.prototype.getModellingCurrencyTranslationManager = function()
{
	return this.m_currencyTranslationManager;
};
oFF.QueryModel.prototype.getNamedChildren = function()
{
	let children = oFF.XHashMapByString.create();
	children.put("AxesManager", this.getAxesManager());
	children.put("FilterManager", this.getFilter());
	if (this.getQueryManager().supportsDirectVariableTransfer())
	{
		children.put("VariableManager", this.getVariableManager());
	}
	children.put("DimensionManager", this.getDimensionManagerBase());
	children.put("ResultStructureController", this.getResultStructureController());
	children.put("DrillManager", this.getDrillManager());
	children.put("ExceptionAggregationManager", this._getExceptionAggregationManagerBase());
	children.put("SortManager", this.getSortingManager());
	children.put("ExceptionManager", this.getExceptionManager());
	children.put("FormulaExceptionManager", this.getFormulaExceptionManager());
	children.put("ConditionManager", this.getConditionManager());
	children.put("UniversalDisplayHierarchies", this.getUniversalDisplayHierarchies());
	children.put("CurrencyTranslationManager", this.getCurrencyTranslationManager());
	children.put("UnitTranslationManager", this.getUnitTranslationManager());
	return children;
};
oFF.QueryModel.prototype.getNonMeasureDimension = function()
{
	return this.m_dimensionManager.getNonMeasureDimension();
};
oFF.QueryModel.prototype.getNonMeasureDimension2 = function()
{
	return this.m_dimensionManager.getNonMeasureDimension2();
};
oFF.QueryModel.prototype.getNonStructureCount = function()
{
	return this.m_dimensionManager.getNonStructureCount();
};
oFF.QueryModel.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.QUERY_MODEL;
};
oFF.QueryModel.prototype.getOlapEnv = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_olapEnv);
};
oFF.QueryModel.prototype.getOlapSystemContainer = function()
{
	let systemName = this.getDataSource().getSystemName();
	return this.getOlapEnv().getSystemContainer(systemName);
};
oFF.QueryModel.prototype.getOptimizerHintsByExecutionEngine = function(executionEngine)
{
	if (!this.getModelCapabilities().supportsCeScenarioParams() || oFF.isNull(this.m_optimizerHints))
	{
		return null;
	}
	return this.m_optimizerHints.getByKey(executionEngine.getName());
};
oFF.QueryModel.prototype.getParentResultStructureController = function()
{
	return null;
};
oFF.QueryModel.prototype.getPlanningMode = function()
{
	return this.m_planningMode;
};
oFF.QueryModel.prototype.getPreQueries = function()
{
	return oFF.isNull(this.m_preQueries) ? null : this.m_preQueries.getValuesAsReadOnlyList();
};
oFF.QueryModel.prototype.getPreQueryByName = function(preQueryName)
{
	if (oFF.isNull(this.m_preQueries))
	{
		return null;
	}
	let preQuery = this.m_preQueries.getByKey(preQueryName);
	if (oFF.isNull(preQuery))
	{
		return null;
	}
	return preQuery.getObject();
};
oFF.QueryModel.prototype.getPrimaryCalculationDimension = function()
{
	return this.m_dimensionManager.getPrimaryCalculationDimension();
};
oFF.QueryModel.prototype.getPrimaryCalculationManager = function()
{
	if (oFF.isNull(this.m_primaryCalculationManager))
	{
		this.m_primaryCalculationManager = oFF.QCalculationManager.createCalculationManager(this.getPrimaryCalculationDimension());
	}
	return this.m_primaryCalculationManager;
};
oFF.QueryModel.prototype.getQueryCellManager = function()
{
	if (oFF.isNull(this.m_queryCellManager) && this.getModelCapabilities().supportsUniversalModel())
	{
		this.m_queryCellManager = oFF.QQueryCellManager.create(this, this);
	}
	return this.m_queryCellManager;
};
oFF.QueryModel.prototype.getQueryCurrencyTranslation = function()
{
	return this.m_currencyTranslationManager.getQueryCurrencyTranslation();
};
oFF.QueryModel.prototype.getQueryDataCell = function(name)
{
	return oFF.isNull(this.m_dataCells) ? null : this.m_dataCells.getByKey(name);
};
oFF.QueryModel.prototype.getQueryDataCells = function()
{
	this.lazyLoadQueryDataCells();
	return this.m_dataCells;
};
oFF.QueryModel.prototype.getQueryDataCellsBase = function()
{
	this.lazyLoadQueryDataCells();
	return this.m_dataCells;
};
oFF.QueryModel.prototype.getQueryManager = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_queryManager);
};
oFF.QueryModel.prototype.getQueryManagerBase = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_queryManager);
};
oFF.QueryModel.prototype.getQueryModel = function()
{
	return this;
};
oFF.QueryModel.prototype.getQuickActionManager = function()
{
	if (oFF.isNull(this.m_quickActionManager))
	{
		this.m_quickActionManager = oFF.QFactory.createQuickActionManager(this, this);
	}
	return this.m_quickActionManager;
};
oFF.QueryModel.prototype.getRepositoryAxis = function()
{
	return this.m_axesManager.getRepositoryAxis();
};
oFF.QueryModel.prototype.getResultAlignment = function()
{
	return this.m_resultStructureController.getResultAlignment();
};
oFF.QueryModel.prototype.getResultStructureChildren = function()
{
	let list = oFF.XList.create();
	list.add(this.getRowsAxis().getResultStructureControllerBase());
	list.add(this.getColumnsAxis().getResultStructureControllerBase());
	return list.getIterator();
};
oFF.QueryModel.prototype.getResultStructureController = function()
{
	return this.m_resultStructureController;
};
oFF.QueryModel.prototype.getResultStructureControllerBase = function()
{
	return this.m_resultStructureController;
};
oFF.QueryModel.prototype.getResultVisibility = function()
{
	return this.m_resultStructureController.getResultVisibility();
};
oFF.QueryModel.prototype.getResultVisibilityByElement = function(element)
{
	return this.m_resultStructureController.getResultVisibilityByElement(element);
};
oFF.QueryModel.prototype.getResultVisibilityByElementAndAlignment = function(alignment, element)
{
	return this.m_resultStructureController.getResultVisibilityByElementAndAlignment(alignment, element);
};
oFF.QueryModel.prototype.getResultVisibilitySettings = function()
{
	return this.m_resultStructureController.getResultVisibilitySettings();
};
oFF.QueryModel.prototype.getReturnedUniqueAxisProperties = function()
{
	if (!this.getModelCapabilities().supportsUniqueAxisProperties())
	{
		throw oFF.XException.createIllegalStateException("Unique axis properties are not supported");
	}
	return this.m_returnedUniqueAxisProperties;
};
oFF.QueryModel.prototype.getRowsAxis = function()
{
	return this.m_axesManager.getRowsAxis();
};
oFF.QueryModel.prototype.getRowsAxisDef = function()
{
	return this.getRowsAxis();
};
oFF.QueryModel.prototype.getRunningAggregationManager = function()
{
	return this.getRunningAggregationManagerBase();
};
oFF.QueryModel.prototype.getRunningAggregationManagerBase = function()
{
	this.loadRunningAggregationManager();
	return this.m_runningAggregationManager;
};
oFF.QueryModel.prototype.getRuntimePlaceholderIdMappings = function()
{
	return oFF.QDimensionUtil.getRuntimePlaceholderIdMappingsInternal(this, null, null);
};
oFF.QueryModel.prototype.getSecondaryCalculationDimension = function()
{
	return this.m_dimensionManager.getSecondaryCalculationDimension();
};
oFF.QueryModel.prototype.getSelectedSecondaryMeasureNamesList = function(outOfContextSecondaryMeasureNames)
{
	let selectedSecondaryMeasureNames = oFF.XList.create();
	let secondaryMeasureDimension = this.getSecondaryCalculationDimension();
	if (oFF.notNull(secondaryMeasureDimension))
	{
		let filterRootElement = this.getFilter().getDynamicFilter().getFilterRootElement();
		let memberNames = oFF.QFilterUtil.getMemberNamesFromFilter(filterRootElement, secondaryMeasureDimension.getName());
		for (let index = 0; index < memberNames.size(); index++)
		{
			let memberName = memberNames.get(index);
			if (!outOfContextSecondaryMeasureNames.contains(memberName))
			{
				selectedSecondaryMeasureNames.add(memberName);
			}
		}
	}
	return selectedSecondaryMeasureNames;
};
oFF.QueryModel.prototype.getSemanticObject = function()
{
	return this.getMetadataProperties().getStringByKey(oFF.QueryModel.SEMANTIC_OBJECT);
};
oFF.QueryModel.prototype.getServerBaseSerialization = function()
{
	let cacheKey = this.m_serverBaseSerializationKey;
	return this.getOlapEnv().getQueryMetadata(cacheKey);
};
oFF.QueryModel.prototype.getServerBaseSerializationForBaseState = function()
{
	let cacheKey = oFF.QCacheKey.createCopyWithKey2(this.m_serverBaseSerializationKey, oFF.QueryCloneMode.BASE_STATE.getName());
	return this.getOlapEnv().getQueryMetadata(cacheKey);
};
oFF.QueryModel.prototype.getServerBaseSerializationKey = function()
{
	return this.m_serverBaseSerializationKey;
};
oFF.QueryModel.prototype.getShouldUseActualTextField = function()
{
	return this.m_shouldUseActualField;
};
oFF.QueryModel.prototype.getSimulationManager = function()
{
	if (this.m_queryCapabilities.supportsSimulation() && oFF.isNull(this.m_simulationManager))
	{
		this.m_simulationManager = oFF.QSimulationManager._create(this, this);
	}
	return this.m_simulationManager;
};
oFF.QueryModel.prototype.getSimulationManagerBase = function()
{
	return this.getSimulationManager();
};
oFF.QueryModel.prototype.getSortingManager = function()
{
	return this.m_sortManager;
};
oFF.QueryModel.prototype.getSortingManagerBase = function()
{
	return this.m_sortManager;
};
oFF.QueryModel.prototype.getSpatialClusterSettings = function()
{
	return this.m_spatialClustering;
};
oFF.QueryModel.prototype.getStaticRriTargets = function()
{
	return this.m_staticRriTargets;
};
oFF.QueryModel.prototype.getStoryId = function()
{
	return this.getQueryManager().getClientInfo().getStoryId();
};
oFF.QueryModel.prototype.getStoryName = function()
{
	return this.getQueryManager().getClientInfo().getStoryName();
};
oFF.QueryModel.prototype.getStructureByName = function(name)
{
	return this.isAccountModel() ? this.getAccountDimension().getStructureMember(name) : this.getMeasureDimension().getStructureMember(name);
};
oFF.QueryModel.prototype.getStructureCount = function()
{
	return this.m_dimensionManager.getStructureCount();
};
oFF.QueryModel.prototype.getSystemDescription = function()
{
	return this.getQueryManager().getSystemDescription();
};
oFF.QueryModel.prototype.getSystemName = function()
{
	return this.getQueryManager().getSystemName();
};
oFF.QueryModel.prototype.getSystemType = function()
{
	return this.m_queryCapabilities.getSystemType();
};
oFF.QueryModel.prototype.getTechnicalAxis = function()
{
	return this.m_axesManager.getTechnicalAxis();
};
oFF.QueryModel.prototype.getUnitTranslationManager = function()
{
	return this.m_unitTranslationManager;
};
oFF.QueryModel.prototype.getUnitTranslationManagerBase = function()
{
	return this.m_unitTranslationManager;
};
oFF.QueryModel.prototype.getUniversalDisplayHierarchies = function()
{
	return this.m_universalDisplayHierarchies;
};
oFF.QueryModel.prototype.getUniversalDisplayHierarchiesBase = function()
{
	return this.m_universalDisplayHierarchies;
};
oFF.QueryModel.prototype.getVariable = function(name)
{
	return this.getVariableContainer().getVariable(name);
};
oFF.QueryModel.prototype.getVariableContainer = function()
{
	return this.m_variableManager;
};
oFF.QueryModel.prototype.getVariableManager = function()
{
	return this.m_variableManager;
};
oFF.QueryModel.prototype.getVariableManagerBase = function()
{
	return this.m_variableManager;
};
oFF.QueryModel.prototype.getVariableMode = function()
{
	let queryManager = this.getQueryManager();
	if (oFF.isNull(queryManager))
	{
		return null;
	}
	return queryManager.getVariableMode();
};
oFF.QueryModel.prototype.getVariables = function()
{
	return this.m_variableManager.getVariables();
};
oFF.QueryModel.prototype.getVersionDimension = function()
{
	let versionDimension = this.m_dimensionManager.getVersionDimension();
	if (oFF.isNull(versionDimension))
	{
		versionDimension = this.getMappedVersionDimension();
	}
	return versionDimension;
};
oFF.QueryModel.prototype.getVersionDimensionName = function()
{
	let versionDimensionName = this.m_dimensionManager.getVersionDimensionName();
	if (oFF.XStringUtils.isNullOrEmpty(versionDimensionName))
	{
		let mappedVersionDimension = this.getMappedVersionDimension();
		if (oFF.notNull(mappedVersionDimension))
		{
			versionDimensionName = mappedVersionDimension.getName();
		}
	}
	return versionDimensionName;
};
oFF.QueryModel.prototype.getVirtualAxis = function()
{
	return this.m_axesManager.getVirtualAxis();
};
oFF.QueryModel.prototype.getVirtualRootNodeName = function()
{
	return this.m_virtualRootNodeName;
};
oFF.QueryModel.prototype.getVisualizationManager = function()
{
	if (oFF.isNull(this.m_visualizationManager) && !this.isReleased())
	{
		this.m_visualizationManager = oFF.QVisualizationManager.create(this.getContext(), this);
	}
	return this.m_visualizationManager;
};
oFF.QueryModel.prototype.getVizManager = function()
{
	if (oFF.isNull(this.m_vizManager) && !this.isReleased())
	{
		this.m_vizManager = oFF.QVizManager.create(this);
	}
	return this.m_vizManager;
};
oFF.QueryModel.prototype.getWidgetId = function()
{
	return this.getQueryManager().getClientInfo().getWidgetId();
};
oFF.QueryModel.prototype.hasChildren = function()
{
	return true;
};
oFF.QueryModel.prototype.hasDynamicRriTarget = function()
{
	return this.m_hasDynamicRriTarget;
};
oFF.QueryModel.prototype.hasExplainQueryContext = function()
{
	return oFF.notNull(this.m_explainQueryContext) && this.m_explainQueryContext.isSet();
};
oFF.QueryModel.prototype.hasInputEnabledAndNonTechnicalVariables = function()
{
	return this.m_variableManager.hasInputEnabledAndNonTechnicalVariables();
};
oFF.QueryModel.prototype.hasInputEnabledVariables = function()
{
	return this.m_variableManager.hasInputEnabledVariables();
};
oFF.QueryModel.prototype.hasMandatoryVariables = function()
{
	return this.m_variableManager.hasMandatoryVariables();
};
oFF.QueryModel.prototype.hasProcessingStep = function()
{
	return this.m_hasProcessingStep;
};
oFF.QueryModel.prototype.hasQuickActionManager = function()
{
	return oFF.notNull(this.m_quickActionManager);
};
oFF.QueryModel.prototype.hasRriTarget = function()
{
	return this.m_hasRriTarget;
};
oFF.QueryModel.prototype.hasRuntimeDimensionGroupName = function()
{
	return this.m_dimensionManager.hasRuntimeDimensionGroupName();
};
oFF.QueryModel.prototype.hasStaticRriTarget = function()
{
	return this.m_hasStaticRriTarget;
};
oFF.QueryModel.prototype.hasTransientObjectsGenerated = function()
{
	return this.m_transientObjectsGenerated;
};
oFF.QueryModel.prototype.hasUserDefinedMeasures = function()
{
	return this.getMetadataProperties().getBooleanByKeyExt(oFF.QueryModel.HAS_USER_DEFINED_MEASURES, false);
};
oFF.QueryModel.prototype.hasVariables = function()
{
	return this.m_variableManager.hasVariables();
};
oFF.QueryModel.prototype.isAccountModel = function()
{
	return this.getDimensionByType(oFF.DimensionType.ACCOUNT) !== null;
};
oFF.QueryModel.prototype.isAutoSubmitDisabledByMetadata = function()
{
	return this.m_autoSubmitDisabledByMetadata;
};
oFF.QueryModel.prototype.isBasedOnMicroCube = function()
{
	return this.getDataSource().isBasedOnMicroCube();
};
oFF.QueryModel.prototype.isBasicMeasureAggregationExportedInRepo = function()
{
	return this.m_isBasicMeasureAggretionExportedInRepo;
};
oFF.QueryModel.prototype.isBasicMeasureSettingsExportedInRepo = function()
{
	return this.m_isBasicMeasureSettingsExportedInRepo;
};
oFF.QueryModel.prototype.isBatchModeForMicroCube = function()
{
	return this.m_isBatchForMicroCube;
};
oFF.QueryModel.prototype.isBlendingModel = function()
{
	return this.getQueryManager().getMode() === oFF.QueryManagerMode.BLENDING;
};
oFF.QueryModel.prototype.isComponentNode = function()
{
	return true;
};
oFF.QueryModel.prototype.isCumulativeDeactive = function()
{
	return this.m_deactivateCumulative;
};
oFF.QueryModel.prototype.isDataEntryEnabled = function()
{
	return this.m_dataEntryEnabled;
};
oFF.QueryModel.prototype.isDataEntryReadOnly = function()
{
	return this.m_dataEntryReadOnly;
};
oFF.QueryModel.prototype.isDataExportRestricted = function()
{
	return this.getMetadataProperties().getBooleanByKeyExt(oFF.QueryModel.DATA_EXPORT_RESTRICTED, false);
};
oFF.QueryModel.prototype.isExecuteAutoVariableSubmit = function()
{
	return this.getQueryManagerBase().isExecuteAutoVariableSubmit();
};
oFF.QueryModel.prototype.isExportingEachMeasure = function()
{
	return this.m_exportEachMeasure;
};
oFF.QueryModel.prototype.isExportingFixedFilter = function()
{
	return this.m_exportFixedFilter;
};
oFF.QueryModel.prototype.isExportingVariables = function()
{
	return this.m_exportVariables;
};
oFF.QueryModel.prototype.isInQueryModelMergeFlow = function()
{
	return this.m_currentDeltaPhase === oFF.QDeltaOperationPhase.NOTIFY_PAUSE_MODCOUNTER;
};
oFF.QueryModel.prototype.isKeepingOriginalTexts = function()
{
	if (this.m_queryCapabilities.supportsKeepOriginalTexts())
	{
		return this.m_keepOriginalTexts;
	}
	return false;
};
oFF.QueryModel.prototype.isLeadingStructureAccount = function()
{
	return oFF.XString.isEqual(oFF.QueryModel.LEADING_STRUCTURE_ACCOUNT, this.getMetadataProperties().getStringByKey(oFF.QueryModel.LEADING_STRUCTURE));
};
oFF.QueryModel.prototype.isLeadingStructureMeasure = function()
{
	return oFF.XString.isEqual(oFF.QueryModel.LEADING_STRUCTURE_MEASURE, this.getMetadataProperties().getStringByKey(oFF.QueryModel.LEADING_STRUCTURE));
};
oFF.QueryModel.prototype.isMetadataUpdatedByAutoSubmit = function()
{
	return this.m_isMetadataUpdatedByAutoSubmit;
};
oFF.QueryModel.prototype.isNode = function()
{
	return true;
};
oFF.QueryModel.prototype.isOptimizedExportModeActive = function()
{
	return this.m_isMetadataExportReduced;
};
oFF.QueryModel.prototype.isPartialResponse = function()
{
	let queryManager = this.getQueryManager();
	let queryServiceConfig = queryManager.getQueryServiceConfig();
	return (queryServiceConfig.isLightweight() || oFF.XCollectionUtils.hasElements(queryServiceConfig.getRequiredDimensions())) && (this.getModelCapabilities().supportsDetailedResponseExpansion() || this.getModelCapabilities().supportsMetadataResultFormatOptions());
};
oFF.QueryModel.prototype.isPlanning = function()
{
	return this.getMetadataProperties().getBooleanByKeyExt(oFF.QueryModel.IS_PLANNING, false);
};
oFF.QueryModel.prototype.isReturnTupleCountTotal = function()
{
	return this.m_isReturnTupleCountTotal;
};
oFF.QueryModel.prototype.isSelectorReadModeMasterOnly = function()
{
	return this.m_isSelectorReadModeMasterOnly;
};
oFF.QueryModel.prototype.isTotalsAlignmentOnDefault = function()
{
	return this.m_resultStructureController.isTotalsAlignmentOnDefault();
};
oFF.QueryModel.prototype.isTotalsStructureOnDefault = function()
{
	return this.m_resultStructureController.isTotalsStructureOnDefault();
};
oFF.QueryModel.prototype.isTotalsVisibilityOnDefault = function()
{
	return this.m_resultStructureController.isTotalsVisibilityOnDefault();
};
oFF.QueryModel.prototype.isUniversalAccountModel = function()
{
	return this.hasUserDefinedMeasures() && this.getAccountDimension() !== null;
};
oFF.QueryModel.prototype.isValueHelpIgnoreQueryDynamicFilter = function()
{
	return this.m_isF4IgnoreQueryDynamicFilter;
};
oFF.QueryModel.prototype.isValueHelpUseCompleteEffectiveFilter = function()
{
	return this.m_isF4UseCompleteEffectiveFilter;
};
oFF.QueryModel.prototype.isVersionDimensionValidationEnabled = function()
{
	return this.m_isVersionDimensionValidationEnabled;
};
oFF.QueryModel.prototype.lazyLoadConditionManager = function()
{
	if (oFF.isNull(this.m_conditionManager))
	{
		this.m_conditionManager = oFF.QConditionManager.create(this, this);
	}
};
oFF.QueryModel.prototype.lazyLoadQueryDataCells = function()
{
	if (oFF.isNull(this.m_dataCells))
	{
		this.m_dataCells = oFF.QDataCellList.createQueryDataCellList(this);
	}
};
oFF.QueryModel.prototype.loadRunningAggregationManager = function()
{
	if (this.m_queryCapabilities.supportsSupportsRunningAggregation() && oFF.isNull(this.m_runningAggregationManager))
	{
		this.m_runningAggregationManager = oFF.QRunningAggregationManager.create(this);
	}
};
oFF.QueryModel.prototype.mergeDeepRecursive = function(settings, other)
{
	let otherQm = other;
	let otherDataSource = otherQm.getDataSource();
	let text = otherDataSource.getText();
	this.getDataSourceBase().setText(text);
	this.setText(text);
	this.setCubeInfo(otherQm.getCubeInfo());
	this.m_metadataProperties.putAll(otherQm.getMetadataProperties());
	this.m_dimensionManager.mergeDeepRecursive(settings, otherQm.getDimensionManagerBase());
	this.m_filterManager.mergeDeepRecursive(settings, otherQm.getFilter());
	let otherExcepAggrMgr = otherQm._getExceptionAggregationManagerBase();
	if (oFF.isNull(otherExcepAggrMgr))
	{
		this.m_exceptionAggregationManager = null;
	}
	else
	{
		this._loadExceptionAggregationManager();
		if (oFF.notNull(this.m_exceptionAggregationManager))
		{
			this.m_exceptionAggregationManager.mergeDeepRecursive(settings, otherExcepAggrMgr);
		}
	}
	let otherRunAggrMgr = otherQm.getRunningAggregationManagerBase();
	if (oFF.isNull(otherRunAggrMgr))
	{
		this.m_runningAggregationManager = null;
	}
	else
	{
		this.loadRunningAggregationManager();
		if (oFF.notNull(this.m_runningAggregationManager))
		{
			this.m_runningAggregationManager.mergeDeepRecursive(settings, otherRunAggrMgr);
		}
	}
	if (oFF.notNull(this.m_conditionManager))
	{
		this.m_conditionManager.mergeDeepRecursive(settings, otherQm.getConditionManager());
	}
	if (oFF.notNull(this.m_exceptionManager))
	{
		this.m_exceptionManager.mergeDeepRecursive(settings, otherQm.getExceptionManager());
	}
	if (oFF.notNull(this.m_formulaExceptionManager))
	{
		this.m_formulaExceptionManager.mergeDeepRecursive(settings, otherQm.getFormulaExceptionManager());
	}
	this.m_variableManager.mergeDeepRecursive(settings, otherQm.getVariableManager());
	this.m_sortManager.mergeDeepRecursive(settings, otherQm.getSortingManager());
	this.m_universalDisplayHierarchies.mergeDeepRecursive(settings, otherQm.getUniversalDisplayHierarchies());
	this.m_documentsInfo.mergeDeepRecursive(settings, otherQm.getDocumentsInfo());
};
oFF.QueryModel.prototype.metadataUpdateEventing = function()
{
	this.setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_PAUSE_MODCOUNTER);
};
oFF.QueryModel.prototype.onModelChangeBeforeBroadcast = function(changedNodes)
{
	let size = changedNodes.size();
	for (let i = 0; i < size; i++)
	{
		let changedNode = changedNodes.get(i);
		let componentType = changedNode.getComponentType();
		if (oFF.notNull(componentType))
		{
			if (componentType.isTypeOf(oFF.OlapComponentType.AXIS) || componentType.isTypeOf(oFF.OlapComponentType.DIMENSION_MANAGER) || componentType.isTypeOf(oFF.OlapComponentType.UNIVERSAL_DISPLAY_HIERARCHY))
			{
				this.m_drillManager.removeInvalidDrillOperations(changedNode);
				break;
			}
			else if (componentType.isTypeOf(oFF.OlapComponentType.FIELD_LIST) && this.getOlapEnv() !== null && this.getQueryManager().getClientQueryObjectStorageName() !== null)
			{
				let storageName = this.getQueryManager().getClientQueryObjectStorageName();
				let clientQueryObjectManager = this.getOlapEnv().getClientQueryObjectManager();
				let calcDimFieldList = clientQueryObjectManager.getFormulaCalcDimFieldList(changedNode.getName(), storageName);
				if (oFF.isNull(calcDimFieldList))
				{
					let calcDimProperties = clientQueryObjectManager.getFormulaCalcDimProperties(changedNode.getName(), storageName);
					if (oFF.notNull(calcDimProperties))
					{
						calcDimFieldList = changedNode;
						let calcDimFieldsIterator = calcDimFieldList.getIterator();
						while (calcDimFieldsIterator.hasNext())
						{
							let calcDimField = calcDimFieldsIterator.next();
							this.m_dimensionManager.removeField(calcDimField);
						}
					}
				}
			}
		}
	}
	oFF.QModelComponent.prototype.onModelChangeBeforeBroadcast.call( this , changedNodes);
};
oFF.QueryModel.prototype.processChildFetch = oFF.noSupport;
oFF.QueryModel.prototype.releaseObject = function()
{
	if (!this.isReleased())
	{
		this.m_preQueries = oFF.XObjectExt.release(this.m_preQueries);
		this.m_definitionName = null;
		this.m_infoProvider = null;
		if (this.m_queryCapabilities.supportsCeScenarioParams())
		{
			this.m_optimizerHints = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_optimizerHints);
		}
		this.m_resultStructureController = oFF.XObjectExt.release(this.m_resultStructureController);
		this.m_uniqueHierarchyNames = oFF.XObjectExt.release(this.m_uniqueHierarchyNames);
		this.m_dataSource = null;
		this.m_cubeInformation = null;
		this.m_dimensionManager = oFF.XObjectExt.release(this.m_dimensionManager);
		this.m_drillManager = oFF.XObjectExt.release(this.m_drillManager);
		this.m_cellContextManager = oFF.XObjectExt.release(this.m_cellContextManager);
		this.m_exceptionAggregationManager = oFF.XObjectExt.release(this.m_exceptionAggregationManager);
		this.m_runningAggregationManager = oFF.XObjectExt.release(this.m_runningAggregationManager);
		this.m_sortManager = oFF.XObjectExt.release(this.m_sortManager);
		this.m_vizManager = oFF.XObjectExt.release(this.m_vizManager);
		this.m_visualizationManager = oFF.XObjectExt.release(this.m_visualizationManager);
		this.m_metadataProperties = oFF.XObjectExt.release(this.m_metadataProperties);
		this.m_axesManager = oFF.XObjectExt.release(this.m_axesManager);
		this.m_exceptionManager = oFF.XObjectExt.release(this.m_exceptionManager);
		this.m_formulaExceptionManager = oFF.XObjectExt.release(this.m_formulaExceptionManager);
		this.m_conditionManager = oFF.XObjectExt.release(this.m_conditionManager);
		this.m_filterManager = oFF.XObjectExt.release(this.m_filterManager);
		this.m_primaryCalculationManager = oFF.XObjectExt.release(this.m_primaryCalculationManager);
		this.m_dataCells = oFF.XObjectExt.release(this.m_dataCells);
		this.m_variableManager = oFF.XObjectExt.release(this.m_variableManager);
		this.m_universalDisplayHierarchies = oFF.XObjectExt.release(this.m_universalDisplayHierarchies);
		this.m_spatialClustering = oFF.XObjectExt.release(this.m_spatialClustering);
		this.m_queryCellManager = oFF.XObjectExt.release(this.m_queryCellManager);
		this.m_explainQueryContext = oFF.XObjectExt.release(this.m_explainQueryContext);
		this.m_documentsInfo = oFF.XObjectExt.release(this.m_documentsInfo);
		this.m_documentsIdsRequest = oFF.XObjectExt.release(this.m_documentsIdsRequest);
		this.m_serverBaseSerializationKey = null;
		this.m_queryCapabilities = null;
		this.m_currencyTranslationManager = oFF.XObjectExt.release(this.m_currencyTranslationManager);
		this.m_unitTranslationManager = oFF.XObjectExt.release(this.m_unitTranslationManager);
		this.m_datasetEpmObject = oFF.XObjectExt.release(this.m_datasetEpmObject);
		this.m_returnedDataSelections = oFF.XObjectExt.release(this.m_returnedDataSelections);
		this.m_returnedUniqueAxisProperties = oFF.XObjectExt.release(this.m_returnedUniqueAxisProperties);
		this.m_interopManager = oFF.XObjectExt.release(this.m_interopManager);
		this.m_simulationManager = oFF.XObjectExt.release(this.m_simulationManager);
		this.m_inputReadinessFilter = oFF.XObjectExt.release(this.m_inputReadinessFilter);
		this.m_quickActionManager = oFF.XObjectExt.release(this.m_quickActionManager);
		this.m_staticRriTargets = oFF.XObjectExt.release(this.m_staticRriTargets);
		oFF.QModelComponent.prototype.releaseObject.call( this );
	}
};
oFF.QueryModel.prototype.removeCalculatedDimensionByName = function(calculatedDimensionName)
{
	let calculatedDimension = this.getDimensionByName(calculatedDimensionName);
	if (oFF.notNull(calculatedDimension))
	{
		this.getConvenienceCommands().clearFiltersByDimension(calculatedDimension);
		this.m_dimensionManager.removeCalculatedDimensionByName(calculatedDimensionName);
	}
};
oFF.QueryModel.prototype.removeDimension = function(dimension)
{
	this.m_dimensionManager.removeDimension(dimension);
};
oFF.QueryModel.prototype.removeMeasureCurrencyTranslationByName = function(name)
{
	this.m_currencyTranslationManager.removeMeasureCurrencyTranslationByName(name);
};
oFF.QueryModel.prototype.removeMeasureUnitTranslation = function(unitTranslation)
{
	this.m_unitTranslationManager.removeMeasureUnitTranslation(unitTranslation);
};
oFF.QueryModel.prototype.removeMeasureUnitTranslationByName = function(unitTranslationName)
{
	this.m_unitTranslationManager.removeMeasureUnitTranslationByName(unitTranslationName);
};
oFF.QueryModel.prototype.removeOptimizerHint = function(executionEngine, hintKey)
{
	if (this.getModelCapabilities().supportsCeScenarioParams() && oFF.notNull(this.m_optimizerHints))
	{
		let optimizerHintsByEngine = this.m_optimizerHints.getByKey(executionEngine.getName());
		if (oFF.notNull(optimizerHintsByEngine))
		{
			optimizerHintsByEngine.remove(hintKey);
			this.notifyNodeChanged();
		}
	}
};
oFF.QueryModel.prototype.removePreQueryByName = function(preQueryName)
{
	if (oFF.notNull(this.m_preQueries))
	{
		this.m_preQueries.removeElement(this.m_preQueries.getByKey(preQueryName));
	}
};
oFF.QueryModel.prototype.removeSecondaryMeasureTransientFilterElements = function(filterContainer)
{
	let rootElement = null;
	let cartesianList = null;
	let secondaryCalculationDimension = this.getSecondaryCalculationDimension();
	if (oFF.notNull(secondaryCalculationDimension))
	{
		if (filterContainer.isCartesianProduct())
		{
			rootElement = filterContainer.getCartesianProduct();
			cartesianList = rootElement.getCartesianList(secondaryCalculationDimension);
		}
		else if (filterContainer.isComplexFilter())
		{
			rootElement = filterContainer.getComplexRoot();
			cartesianList = filterContainer.getCartesianList(secondaryCalculationDimension);
		}
		if (oFF.notNull(rootElement) && oFF.notNull(cartesianList))
		{
			for (let i = cartesianList.size() - 1; i >= 0; i--)
			{
				let filterElement = cartesianList.getCartesianElement(i);
				if (oFF.notNull(filterElement) && filterElement.getTagging().containsKey(oFF.QTransientConstants.TAG_IS_TRANSIENT_FILTER_ELEMENT))
				{
					cartesianList.removeAt(i);
					if (cartesianList.size() === 0)
					{
						rootElement.removeElement(cartesianList);
					}
				}
			}
		}
	}
};
oFF.QueryModel.prototype.resetCurrencyTranslationDetails = function()
{
	this.m_currencyTranslationManager.resetCurrencyTranslationDetails();
};
oFF.QueryModel.prototype.restoreTotalsAlignment = function(restoreAction, recurseChildren)
{
	this.m_resultStructureController.restoreTotalsAlignment(restoreAction, recurseChildren);
};
oFF.QueryModel.prototype.restoreTotalsVisibility = function(restoreAction, recurseChildren)
{
	this.m_resultStructureController.restoreTotalsVisibility(restoreAction, recurseChildren);
};
oFF.QueryModel.prototype.setAlignmentPriority = function(alignmentPriority)
{
	this.m_resultStructureController.setAlignmentPriority(alignmentPriority);
};
oFF.QueryModel.prototype.setBaseDataSource = function(baseDatasource)
{
	this.m_baseDataSource = baseDatasource;
};
oFF.QueryModel.prototype.setBasicMeasureAggregationExportForRepo = function(isAggregationExported)
{
	this.m_isBasicMeasureAggretionExportedInRepo = isAggregationExported;
};
oFF.QueryModel.prototype.setBasicMeasureSettingsExportedInRepo = function(isSettingsExported)
{
	this.m_isBasicMeasureSettingsExportedInRepo = isSettingsExported;
};
oFF.QueryModel.prototype.setBatchModeForMicroCube = function(state)
{
	this.m_isBatchForMicroCube = state;
};
oFF.QueryModel.prototype.setClientInfo = function(version, identifier, component)
{
	this.getQueryManager().setClientInfo(version, identifier, component);
};
oFF.QueryModel.prototype.setCubeInfo = function(cubeInfo)
{
	this.m_cubeInformation = cubeInfo;
	if (oFF.notNull(cubeInfo))
	{
		let text = cubeInfo.getText();
		if (oFF.notNull(text))
		{
			this.setText(cubeInfo.getText());
		}
		let dataSourceBase = this.getDataSourceBase();
		dataSourceBase.extendWithDataSource(cubeInfo);
		this.setName(dataSourceBase.getFullQualifiedName());
	}
};
oFF.QueryModel.prototype.setDataEntryEnabled = function(dataEntryEnabled)
{
	this.m_dataEntryEnabled = dataEntryEnabled;
};
oFF.QueryModel.prototype.setDataEntryReadOnly = function(dataEntryReadOnly)
{
	if (!this.supportsDataEntryReadOnly() && !dataEntryReadOnly)
	{
		return;
	}
	if (this.m_dataEntryReadOnly === dataEntryReadOnly)
	{
		return;
	}
	this.m_dataEntryReadOnly = dataEntryReadOnly;
	this.notifyNodeChanged();
};
oFF.QueryModel.prototype.setDataSource = function(dataSource)
{
	let dataSourceBase = this.getDataSourceBase();
	dataSourceBase.extendWithDataSource(dataSource);
	this.setName(dataSourceBase.getFullQualifiedName());
};
oFF.QueryModel.prototype.setDataSourceOrigin = function(dataSourceOrigin)
{
	this.m_dataSourceOrigin = dataSourceOrigin;
};
oFF.QueryModel.prototype.setDatasetEpmObject = function(datasetEpmObject)
{
	this.m_datasetEpmObject = datasetEpmObject;
};
oFF.QueryModel.prototype.setDefinitionName = function(definitionName)
{
	this.m_definitionName = definitionName;
};
oFF.QueryModel.prototype.setDocumentsInfo = function(documentsInfo)
{
	this.m_documentsInfo = documentsInfo;
};
oFF.QueryModel.prototype.setExportEachMeasure = function(exportEachMeasure)
{
	if (this.getQueryManager().supportsServerState())
	{
		this.m_exportEachMeasure = exportEachMeasure;
	}
	return this.m_exportEachMeasure;
};
oFF.QueryModel.prototype.setExportFixedFilter = function(exportFixedFilter)
{
	if (this.getQueryManager().supportsServerState())
	{
		this.m_exportFixedFilter = exportFixedFilter;
	}
	return this.m_exportFixedFilter;
};
oFF.QueryModel.prototype.setExportVariables = function(exportVariables)
{
	if (this.getQueryManager().supportsServerState())
	{
		this.m_exportVariables = exportVariables;
	}
	return this.m_exportVariables;
};
oFF.QueryModel.prototype.setHasDynamicRriTarget = function(hasDynamicRriTarget)
{
	this.m_hasDynamicRriTarget = hasDynamicRriTarget;
};
oFF.QueryModel.prototype.setHasProcessingStep = function(hasProcessingStep)
{
	this.m_hasProcessingStep = hasProcessingStep;
};
oFF.QueryModel.prototype.setHasRriTarget = function(hasRriTarget)
{
	this.m_hasRriTarget = hasRriTarget;
};
oFF.QueryModel.prototype.setHasStaticRriTarget = function(hasStaticRriTarget)
{
	this.m_hasStaticRriTarget = hasStaticRriTarget;
};
oFF.QueryModel.prototype.setIgnoreQueryDynamicFilterInValueHelp = function(ignoreQueryDynamicFilterInValueHelp)
{
	if (this.getSystemType().isTypeOf(oFF.SystemType.BW))
	{
		this.m_isF4IgnoreQueryDynamicFilter = ignoreQueryDynamicFilterInValueHelp;
	}
};
oFF.QueryModel.prototype.setInfoProvider = function(infoProvider)
{
	this.m_infoProvider = infoProvider;
};
oFF.QueryModel.prototype.setInputReadinessFilter = function(mode)
{
	let context = this.getContext();
	this.m_inputReadinessFilter = oFF.XObjectExt.release(this.m_inputReadinessFilter);
	this.m_inputReadinessFilter = oFF.InputReadinessFilter.createFilter(context, this, mode);
	this.notifyNodeChanged();
};
oFF.QueryModel.prototype.setIsMetadataUpdatedByAutoSubmit = function(isMetadataUpdated)
{
	this.m_isMetadataUpdatedByAutoSubmit = isMetadataUpdated;
};
oFF.QueryModel.prototype.setKeepOriginalTexts = function(keepOriginalTexts)
{
	if (this.m_queryCapabilities.supportsKeepOriginalTexts())
	{
		this.m_keepOriginalTexts = keepOriginalTexts;
	}
};
oFF.QueryModel.prototype.setLanguageLocale = function(languageLocale)
{
	this.getQueryManager().getClientInfo().setLanguageLocale(languageLocale);
};
oFF.QueryModel.prototype.setMetadataPropertiesBase = function(properties)
{
	this.m_metadataProperties = properties;
};
oFF.QueryModel.prototype.setModCounter = function(modCounter)
{
	this.updateModCounter(modCounter);
};
oFF.QueryModel.prototype.setOptimizedExportMode = function(isActive)
{
	this.m_isMetadataExportReduced = isActive;
};
oFF.QueryModel.prototype.setPlanningMode = function(planningMode)
{
	if (this.m_planningMode !== planningMode)
	{
		let oldValue = this.m_planningMode;
		this.m_planningMode = planningMode;
		this.notifyPropertyConstantChanged(oFF.QueryModelProperties.QY_PLANNING_MODE, oldValue, planningMode);
	}
};
oFF.QueryModel.prototype.setResultAlignment = function(alignment)
{
	this.m_resultStructureController.setResultAlignment(alignment);
};
oFF.QueryModel.prototype.setResultVisibility = function(visibility)
{
	this.m_resultStructureController.setResultVisibility(visibility);
};
oFF.QueryModel.prototype.setResultVisibilityByElement = function(element, visibility)
{
	this.m_resultStructureController.setResultVisibilityByElement(element, visibility);
};
oFF.QueryModel.prototype.setResultVisibilityByElementAndAlignment = function(alignment, element, visibility)
{
	this.m_resultStructureController.setResultVisibilityByElementAndAlignment(alignment, element, visibility);
};
oFF.QueryModel.prototype.setReturnTupleCountTotal = function(returnTupleCountTotal)
{
	if (this.getModelCapabilities().supportsPagingTupleCountBeforeSlicing() && this.m_isReturnTupleCountTotal !== returnTupleCountTotal)
	{
		this.m_isReturnTupleCountTotal = returnTupleCountTotal;
		this.notifyNodeChanged();
	}
};
oFF.QueryModel.prototype.setSelectorReadModeMasterOnly = function(isSelectorReadModeMasterOnly)
{
	this.m_isSelectorReadModeMasterOnly = isSelectorReadModeMasterOnly;
};
oFF.QueryModel.prototype.setServerBaseSerialization = function(modelFormat, origin, serialization)
{
	if (oFF.isNull(this.m_serializationInitial))
	{
		this.m_serializationInitial = serialization;
	}
	this.m_serializationCurrent = serialization;
	let queryManager = this.getQueryManagerBase();
	if (oFF.notNull(serialization) && oFF.notNull(queryManager))
	{
		let cacheKey = this.setServerBaseSerializationKey();
		if (this.isPartialResponse())
		{
			return;
		}
		let cubeContainer = this.getOlapEnv().getCubeContainer(cacheKey);
		if (cubeContainer.getDataSource() === null)
		{
			cubeContainer.setDataSource(this.getDataSource());
		}
		if (!queryManager.isMetadataCached())
		{
			this.getOlapEnv().setQueryMetadata(cacheKey, serialization);
			let cacheKeyForBaseCloningObj = oFF.QCacheKey.createCopyWithKey2(cacheKey, oFF.QueryCloneMode.BASE_STATE.getName());
			this.getOlapEnv().setQueryMetadata(cacheKeyForBaseCloningObj, serialization);
			queryManager.setIsMetadataCached(true);
		}
		else
		{
			let olapEnv = this.getOlapEnv();
			olapEnv.overwriteQueryMetadata(cacheKey, serialization);
		}
	}
};
oFF.QueryModel.prototype.setServerBaseSerializationKey = function()
{
	if (oFF.isNull(this.m_serverBaseSerializationKey))
	{
		let dataSource = this.getDataSourceBase();
		if (this.isBasedOnMicroCube())
		{
			this.m_serverBaseSerializationKey = dataSource.getMicroCube().getServerBaseSerializationKey();
		}
		else
		{
			this.m_serverBaseSerializationKey = oFF.QFactory.createCacheKeyByContext(this);
		}
	}
	return this.m_serverBaseSerializationKey;
};
oFF.QueryModel.prototype.setShouldUseActualTextField = function(shouldUseActualField)
{
	this.m_shouldUseActualField = shouldUseActualField;
};
oFF.QueryModel.prototype.setSpatialClusterSettings = function(spatialClusterSettings)
{
	if (this.getModelCapabilities().supportsSpatialClustering())
	{
		this.m_spatialClustering = spatialClusterSettings;
	}
};
oFF.QueryModel.prototype.setStoryId = function(storyId)
{
	this.getQueryManager().getClientInfo().setStoryId(storyId);
};
oFF.QueryModel.prototype.setStoryName = function(storyName)
{
	this.getQueryManager().getClientInfo().setStoryName(storyName);
};
oFF.QueryModel.prototype.setSupportsDataEntryReadOnly = function(supportsDataEntryReadOnly)
{
	this.m_supportsDataEntryReadOnly = supportsDataEntryReadOnly;
};
oFF.QueryModel.prototype.setValueHelpUseCompleteEffectiveFilter = function(useCompleteEffectiveFilter)
{
	if (this.getSystemType().isTypeOf(oFF.SystemType.BW))
	{
		this.m_isF4UseCompleteEffectiveFilter = useCompleteEffectiveFilter;
	}
};
oFF.QueryModel.prototype.setVersionDimensionValidationEnabled = function(isVersionDimensionValidationEnabled)
{
	this.m_isVersionDimensionValidationEnabled = isVersionDimensionValidationEnabled;
};
oFF.QueryModel.prototype.setVirtualRootNodeName = function(virtualRootNodeName)
{
	this.m_virtualRootNodeName = virtualRootNodeName;
};
oFF.QueryModel.prototype.setWidgetId = function(widgetId)
{
	this.getQueryManager().getClientInfo().setWidgetId(widgetId);
};
oFF.QueryModel.prototype.setWinControlInAutoSubmitByType = function(variableType, isWinControlInAutoSubmit, isLimitToExitVariable)
{
	this.queueEventing();
	let variables = this.getDimensionMemberVariables();
	for (let i = 0; i < variables.size(); i++)
	{
		let variable = variables.get(i);
		if (variable.getVariableType() === variableType && (!isLimitToExitVariable || variable.isEnforcedDynamicValue()))
		{
			variable.setWinControlInAutoSubmit(isWinControlInAutoSubmit);
		}
	}
	this.resumeEventing();
};
oFF.QueryModel.prototype.setupBwCatalogs = function(syncType, listener)
{
	this.m_currencyTranslationManager.setupBwCatalogs(syncType, listener);
};
oFF.QueryModel.prototype.setupQuery = function(olapEnv, queryManager, capabilities)
{
	this.setupModelComponent(olapEnv.getContext(), null);
	this.m_olapEnv = oFF.XWeakReferenceUtil.getWeakRef(olapEnv);
	if (oFF.isNull(capabilities))
	{
		this.m_queryCapabilities = oFF.QCapabilities.create();
	}
	else
	{
		this.m_queryCapabilities = capabilities;
	}
	this.m_dataSource = oFF.QFactory.createDataSourceExt(this);
	this.m_queryManager = oFF.XWeakReferenceUtil.getWeakRef(queryManager);
	this.m_keyRefStorage = oFF.QKeyRefStorage.create(oFF.KeyRefConstants.MAIN_STORAGE);
	this.m_keyRefStorage.setSubKefRefStore(this.getOlapEnv().getClientQueryObjectManager().getKeyRefStorage());
	this.m_dimensionManager = oFF.QDimensionManager.create(this);
	this.m_drillManager = oFF.QDrillManager.create(this, this);
	this.m_cellContextManager = oFF.QCellContextManager.create(this, this);
	this.m_sortManager = oFF.QSortingManager.create(this);
	this.m_metadataProperties = oFF.XProperties.create();
	this.m_axesManager = oFF.QAxesManager.create(this);
	this.m_filterManager = oFF.QFactory.createFilterForQueryModel(this);
	this.m_variableManager = oFF.QVariableManager.create(this);
	this.m_resultStructureController = oFF.QFactory.createResultStructureController(this, this, oFF.QModelLevel.QUERY);
	this.m_uniqueHierarchyNames = oFF.XHashSetOfString.create();
	this.m_universalDisplayHierarchies = oFF.QUniversalDisplayHierarchies.create(this, this);
	this.m_currencyTranslationManager = oFF.QCurrencyTranslationManager.create(this);
	this.m_unitTranslationManager = oFF.QUnitTranslationManager.create(this);
	let isPlanningSuppressed = this.getSession().hasFeature(oFF.FeatureToggleOlap.EPM_SUPPRESS_PLANNING_ACTIVATION_BY_DEFAULT);
	this.m_planningMode = isPlanningSuppressed ? oFF.PlanningMode.DISABLE_PLANNING : oFF.PlanningMode.FOR_PRIVATE_VERSIONS_ONLY;
	this.m_inputReadinessFilter = null;
	this.m_exportFixedFilter = true;
	this.m_exportVariables = true;
	this.m_exportEachMeasure = true;
	this.m_isBasicMeasureAggretionExportedInRepo = true;
	this.m_isBasicMeasureSettingsExportedInRepo = true;
	this.m_isF4IgnoreQueryDynamicFilter = false;
	this.m_isF4UseCompleteEffectiveFilter = false;
	this.m_isMetadataUpdatedByAutoSubmit = false;
	this.setReturnTupleCountTotal(true);
	this.m_datasetEpmObject = null;
	this.m_returnedDataSelections = oFF.XSimpleMap.create();
	this.m_returnedUniqueAxisProperties = oFF.ReturnedUniqueAxisProperties.create(this.getContext(), this);
	this.m_documentsInfo = oFF.QDocumentsInfo._create(this.getContext(), this);
	this.m_documentsIdsRequest = oFF.QDocumentsIdsRequest._create(this.getContext(), this);
	this.m_isVersionDimensionValidationEnabled = false;
};
oFF.QueryModel.prototype.shouldAddSecondaryMeasureTransientFromSortOrRank = function(targetElementName)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(targetElementName))
	{
		let secondaryCalculationDimension = this.getSecondaryCalculationDimension();
		if (oFF.notNull(secondaryCalculationDimension) && !this.getSystemType().isTypeOf(oFF.SystemType.BW))
		{
			let isApplyToDefaultCurrency = false;
			let currencyTranslationManager = this.getCurrencyTranslationManager();
			if (oFF.notNull(currencyTranslationManager))
			{
				let queryCurrencyTranslation = currencyTranslationManager.getQueryCurrencyTranslation();
				isApplyToDefaultCurrency = oFF.notNull(queryCurrencyTranslation) && currencyTranslationManager.supportsSimpleFixedTargetCurrencyTranslation() && queryCurrencyTranslation.isApplyDefinedCurrencyTranslation() && queryCurrencyTranslation.isApplyToDefaultCurrencyTranslation();
			}
			if (!(isApplyToDefaultCurrency && oFF.XString.isEqual(targetElementName, oFF.CurrencyConstants.DEFAULT_CURRENCY)))
			{
				let dynamicFilter = this.getFilter().getDynamicFilter();
				if (oFF.notNull(dynamicFilter))
				{
					let memberNames = oFF.QFilterUtil.getMemberNamesFromFilter(dynamicFilter.getFilterRootElement(), secondaryCalculationDimension.getName());
					if (memberNames.size() > 0)
					{
						if (!oFF.QFilterUtil.isMatchingMemberName(this, memberNames, targetElementName))
						{
							return true;
						}
					}
				}
			}
		}
	}
	return false;
};
oFF.QueryModel.prototype.supportsCurrencyTranslation = function()
{
	return this.m_currencyTranslationManager.supportsCurrencyTranslation();
};
oFF.QueryModel.prototype.supportsDataEntryReadOnly = function()
{
	return this.m_supportsDataEntryReadOnly;
};
oFF.QueryModel.prototype.supportsDimensionLazyLoad = function()
{
	return this.getQueryManager().getInitSettings().supportsDimensionLazyLoad();
};
oFF.QueryModel.prototype.supportsEpmModelledCurrencyTranslation = function()
{
	return this.m_currencyTranslationManager.supportsEpmModelledCurrencyTranslation();
};
oFF.QueryModel.prototype.supportsGlobalQueryCurrencyTranslation = function()
{
	return this.m_currencyTranslationManager.supportsGlobalQueryCurrencyTranslation();
};
oFF.QueryModel.prototype.supportsMeasureBasedCurrencyTranslation = function()
{
	return this.m_currencyTranslationManager.supportsMeasureBasedCurrencyTranslation();
};
oFF.QueryModel.prototype.supportsResultAlignment = function()
{
	return this.m_resultStructureController.supportsResultAlignment();
};
oFF.QueryModel.prototype.supportsResultVisibility = function()
{
	return this.m_resultStructureController.supportsResultVisibility();
};
oFF.QueryModel.prototype.supportsSimpleFixedTargetCurrencyTranslation = function()
{
	return this.m_currencyTranslationManager.supportsSimpleFixedTargetCurrencyTranslation();
};
oFF.QueryModel.prototype.supportsTotals = function()
{
	return this.m_resultStructureController.supportsTotals();
};
oFF.QueryModel.prototype.toggleReturnedDataSelection = function(dataSelection, enable)
{
	if (this.getQueryManager().supportsReturnedDataSelection())
	{
		if (dataSelection === oFF.ReturnedDataSelection.INPUT_READINESS_STATES && !this.getQueryManager().supportsInputReadinessStates())
		{
			return;
		}
		if (dataSelection === oFF.ReturnedDataSelection.CELL_EXPLAIN && !this.getModelCapabilities().supportsResultSetCellExplain())
		{
			return;
		}
		this.m_returnedDataSelections.put(dataSelection, oFF.XBooleanValue.create(enable));
		this.notifyNodeChanged();
	}
};
oFF.QueryModel.prototype.validateRequiredVersionDimension = function()
{
	let isPrimaryStructureVersionValidationEnabled = this.getSession().hasFeature(oFF.FeatureToggleOlap.VERSION_VALIDATION_PRIMARY_CALC_N_MEASURE);
	if (!this.isVersionDimensionValidationEnabled())
	{
		return;
	}
	let primaryCalculationDimension = this.getPrimaryCalculationDimension();
	let secondaryCalculationDimension = this.getSecondaryCalculationDimension();
	if (!oFF.QDimensionUtil.isDimensionInRowsOrCols(primaryCalculationDimension) && !oFF.QDimensionUtil.isDimensionInRowsOrCols(secondaryCalculationDimension))
	{
		return;
	}
	let versionDimensionName = this.getVersionDimensionName();
	if (oFF.XStringUtils.isNullOrEmpty(versionDimensionName))
	{
		return;
	}
	let messageManager = oFF.MessageManager.createMessageManagerExt(this.getSession());
	let versionDimensionNames = oFF.XHashSetOfString.create();
	versionDimensionNames.add(versionDimensionName);
	let unsatisfiedVersionDimensionNames = oFF.QDimensionUtil.getUnsatisfiedRequiredDimensionNames(this, messageManager, versionDimensionNames, null, null, null, true);
	if (!unsatisfiedVersionDimensionNames.isEmpty())
	{
		let hasSecondaryStructureMembersInUse = false;
		let nonVersionAggregatedStructureMembers = oFF.XHashSetOfString.create();
		if (oFF.notNull(secondaryCalculationDimension))
		{
			let iterator = secondaryCalculationDimension.getLoadedStructureMembers().getIterator();
			while (iterator.hasNext())
			{
				let structureMember = iterator.next();
				if (oFF.notNull(structureMember) && !structureMember.isReleased() && structureMember.isMeasureInUse(this, true))
				{
					hasSecondaryStructureMembersInUse = true;
					if (!structureMember.isVersionAggregated(this))
					{
						nonVersionAggregatedStructureMembers.add(structureMember.getAliasOrMemberName());
					}
				}
			}
		}
		if (isPrimaryStructureVersionValidationEnabled && (!hasSecondaryStructureMembersInUse || !nonVersionAggregatedStructureMembers.isEmpty()))
		{
			let primaryIterator = primaryCalculationDimension.getLoadedStructureMembers().getIterator();
			let hasPrimaryStructureMembersVersionAggregated = false;
			while (primaryIterator.hasNext())
			{
				let primaryStructureMember = primaryIterator.next();
				if (oFF.notNull(primaryStructureMember) && !primaryStructureMember.isReleased() && primaryStructureMember.isMeasureInUse(this, true))
				{
					if (!primaryStructureMember.isVersionAggregated(this))
					{
						hasPrimaryStructureMembersVersionAggregated = true;
						nonVersionAggregatedStructureMembers.add(primaryStructureMember.getAliasOrMemberName());
					}
				}
			}
			if (primaryCalculationDimension.getLoadedStructureMembers().size() > 0 && hasSecondaryStructureMembersInUse && !hasPrimaryStructureMembersVersionAggregated)
			{
				nonVersionAggregatedStructureMembers.clear();
			}
		}
		if (!isPrimaryStructureVersionValidationEnabled && !hasSecondaryStructureMembersInUse || !nonVersionAggregatedStructureMembers.isEmpty())
		{
			let isVirtual = this.getSession().hasFeature(oFF.FeatureToggleOlap.IGNORE_VIRTUAL_VERSION_VALIDATION_ERROR) && oFF.QDimensionUtil.isVirtualVersionDimension(this.getVersionDimension());
			let errorMessageKey = isVirtual ? oFF.ErrorMessages.VIRTUAL_VERSION_INVALID_NO_VERSION_IN_AXIS_OR_SINGLE_VALUE_FILTER : oFF.ErrorMessages.VERSION_INVALID_NO_VERSION_IN_AXIS_OR_SINGLE_VALUE_FILTER;
			let errorCode = isVirtual ? oFF.ErrorCodes.VIRTUAL_VERSION_INVALID_NO_VERSION_IN_AXIS_OR_SINGLE_VALUE_FILTER : oFF.ErrorCodes.VERSION_INVALID_NO_VERSION_IN_AXIS_OR_SINGLE_VALUE_FILTER;
			let args = oFF.XList.create();
			args.add(versionDimensionNames.getValuesAsReadOnlyList().get(0));
			if (this.getDatasetId() !== null)
			{
				args.add(this.getDatasetId());
			}
			let message = oFF.ErrorMessages.getText(errorMessageKey, args, null, null);
			messageManager.addWarningExtWithExtendedInfo(oFF.OriginLayer.APPLICATION, errorCode, message, nonVersionAggregatedStructureMembers);
		}
	}
	this.getQueryManager().addAllMessages(messageManager);
};

oFF.QResultStructureControllerGeneric = function() {};
oFF.QResultStructureControllerGeneric.prototype = new oFF.QModelComponent();
oFF.QResultStructureControllerGeneric.prototype._ff_c = "QResultStructureControllerGeneric";

oFF.QResultStructureControllerGeneric.prototype.m_isAlignmentDefault = false;
oFF.QResultStructureControllerGeneric.prototype.m_isStructureDefault = false;
oFF.QResultStructureControllerGeneric.prototype.m_isVisibilityDefault = false;
oFF.QResultStructureControllerGeneric.prototype.m_modelLevel = null;
oFF.QResultStructureControllerGeneric.prototype.m_supportsTotals = null;
oFF.QResultStructureControllerGeneric.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originResultStructureControllerGen = other;
	this.m_supportsTotals = originResultStructureControllerGen.m_supportsTotals;
	this.m_isAlignmentDefault = originResultStructureControllerGen.m_isAlignmentDefault;
	this.m_isVisibilityDefault = originResultStructureControllerGen.m_isVisibilityDefault;
	this.m_isStructureDefault = originResultStructureControllerGen.m_isStructureDefault;
	this.m_modelLevel = originResultStructureControllerGen.m_modelLevel;
};
oFF.QResultStructureControllerGeneric.prototype.getModelLevel = function()
{
	return this.m_modelLevel;
};
oFF.QResultStructureControllerGeneric.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.TOTALS;
};
oFF.QResultStructureControllerGeneric.prototype.getParentController = function()
{
	let context = this.getResultStructureController();
	return context.getParentResultStructureController();
};
oFF.QResultStructureControllerGeneric.prototype.getResultStructureController = function()
{
	return this.getParentComponent();
};
oFF.QResultStructureControllerGeneric.prototype.getResultVisibility = function()
{
	return this.getResultVisibilityByElement(oFF.ResultStructureElement.TOTAL);
};
oFF.QResultStructureControllerGeneric.prototype.getResultVisibilityByElement = function(element)
{
	return this.getResultVisibilityByElementAndAlignment(this.getResultAlignment(), element);
};
oFF.QResultStructureControllerGeneric.prototype.isTotalsAlignmentOnDefault = function()
{
	return this.m_isAlignmentDefault;
};
oFF.QResultStructureControllerGeneric.prototype.isTotalsStructureOnDefault = function()
{
	return this.m_isStructureDefault;
};
oFF.QResultStructureControllerGeneric.prototype.isTotalsVisibilityOnDefault = function()
{
	return this.m_isVisibilityDefault;
};
oFF.QResultStructureControllerGeneric.prototype.releaseObject = function()
{
	this.m_supportsTotals = null;
	this.m_modelLevel = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QResultStructureControllerGeneric.prototype.restoreTotalsAlignment = function(restoreAction, recurseChildren)
{
	if (this.supportsResultAlignment())
	{
		this.queueEventing();
		let targetIsDefault = restoreAction === oFF.RestoreAction.DEFAULT_VALUE;
		let isChanged = this.m_isAlignmentDefault !== targetIsDefault || restoreAction === oFF.RestoreAction.COPY;
		if (isChanged)
		{
			this.m_isAlignmentDefault = true;
			this.internalSetTotalsAlignmentDefault(!targetIsDefault);
			this.m_isAlignmentDefault = targetIsDefault;
			this.notifyNodeChanged();
		}
		if (recurseChildren)
		{
			let resultStructureController = this.getResultStructureController();
			let children = resultStructureController.getResultStructureChildren();
			if (oFF.notNull(children))
			{
				while (children.hasNext())
				{
					let child = children.next();
					child.restoreTotalsAlignment(oFF.RestoreAction.DEFAULT_VALUE, true);
				}
				oFF.XObjectExt.release(children);
			}
		}
		this.resumeEventing();
	}
};
oFF.QResultStructureControllerGeneric.prototype.restoreTotalsVisibility = function(restoreAction, recurseChildren)
{
	if (this.supportsResultVisibility())
	{
		this.queueEventing();
		let targetIsDefault = restoreAction === oFF.RestoreAction.DEFAULT_VALUE;
		let isChanged = this.m_isVisibilityDefault !== targetIsDefault || restoreAction === oFF.RestoreAction.COPY;
		if (isChanged)
		{
			this.m_isVisibilityDefault = true;
			this.internalSetTotalsVisibilityDefault(!targetIsDefault);
			this.m_isVisibilityDefault = targetIsDefault;
			this.notifyNodeChanged();
		}
		if (recurseChildren)
		{
			let resultStructureController = this.getResultStructureController();
			let children = resultStructureController.getResultStructureChildren();
			if (oFF.notNull(children))
			{
				while (children.hasNext())
				{
					let child = children.next();
					child.restoreTotalsVisibility(oFF.RestoreAction.DEFAULT_VALUE, true);
				}
				oFF.XObjectExt.release(children);
			}
		}
		this.resumeEventing();
	}
};
oFF.QResultStructureControllerGeneric.prototype.setResultVisibility = function(visibility)
{
	this.setResultVisibilityByElement(oFF.ResultStructureElement.TOTAL, visibility);
};
oFF.QResultStructureControllerGeneric.prototype.setSupportsTotals = function(supportsTotals)
{
	this.m_supportsTotals = oFF.TriStateBool.lookup(supportsTotals);
};
oFF.QResultStructureControllerGeneric.prototype.setupGenericController = function(context, parentNode, location)
{
	oFF.QModelComponent.prototype.setupModelComponent.call( this , context, parentNode);
	this.m_modelLevel = location;
	this.m_supportsTotals = oFF.TriStateBool._DEFAULT;
	this.m_isAlignmentDefault = true;
	this.m_isVisibilityDefault = true;
	this.m_isStructureDefault = true;
};
oFF.QResultStructureControllerGeneric.prototype.supportsAdvancedResultStructure = function()
{
	let queryModel = this.getQueryModel();
	if (oFF.isNull(queryModel))
	{
		return false;
	}
	return queryModel.getModelCapabilities().getResultStructureReorderingCapability() === oFF.ReorderingCapability.FULL;
};
oFF.QResultStructureControllerGeneric.prototype.supportsResultAlignment = function()
{
	if (oFF.isNull(this.m_modelLevel))
	{
		return false;
	}
	let level = this.m_modelLevel.getLevel();
	let supportedLevel;
	let modelCapabilities = this.getModelCapabilities();
	if (oFF.notNull(modelCapabilities))
	{
		supportedLevel = modelCapabilities.getSupportedResultAlignmentLevel();
	}
	else
	{
		supportedLevel = oFF.QModelLevel.NONE;
	}
	return level <= supportedLevel.getLevel();
};
oFF.QResultStructureControllerGeneric.prototype.supportsResultVisibility = function()
{
	if (oFF.isNull(this.m_modelLevel))
	{
		return false;
	}
	let level = this.m_modelLevel.getLevel();
	let supportedLevel;
	let modelCapabilities = this.getModelCapabilities();
	if (oFF.notNull(modelCapabilities))
	{
		supportedLevel = modelCapabilities.getSupportedResultVisibilityLevel();
	}
	else
	{
		supportedLevel = oFF.QModelLevel.NONE;
	}
	return level <= supportedLevel.getLevel();
};
oFF.QResultStructureControllerGeneric.prototype.supportsTotals = function()
{
	if (this.m_supportsTotals === oFF.TriStateBool._DEFAULT)
	{
		let parentController = this.getParentController();
		if (oFF.notNull(parentController))
		{
			return parentController.supportsTotals();
		}
	}
	return this.m_supportsTotals.getBoolean();
};

oFF.QComplexAndDataCellSorting = function() {};
oFF.QComplexAndDataCellSorting.prototype = new oFF.QGenericSorting();
oFF.QComplexAndDataCellSorting.prototype._ff_c = "QComplexAndDataCellSorting";

oFF.QComplexAndDataCellSorting.createPathUniqueName = function(elementPath)
{
	let buffer = oFF.XStringBuffer.create();
	if (oFF.notNull(elementPath))
	{
		for (let i = 0; i < elementPath.size(); i++)
		{
			if (i > 0)
			{
				buffer.append("/");
			}
			let element = elementPath.get(i);
			buffer.append("[").append(element.getDimension().getName()).append("]");
			buffer.append("{").append(element.getSelectHierarchyName()).append("} ");
			buffer.append("(").append(element.getSelectValue()).append(")");
		}
	}
	return buffer.toString();
};
oFF.QComplexAndDataCellSorting.prototype.m_appliedTopOnIndividualDimension = false;
oFF.QComplexAndDataCellSorting.prototype.m_elementPath = null;
oFF.QComplexAndDataCellSorting.prototype.m_usedInRanking = false;
oFF.QComplexAndDataCellSorting.prototype.appliedTopOnIndividualDimension = function()
{
	return this.m_appliedTopOnIndividualDimension;
};
oFF.QComplexAndDataCellSorting.prototype.copyFromInternal = function(other, flags)
{
	oFF.QGenericSorting.prototype.copyFromInternal.call( this , other, flags);
	let originComplexAndDataCellSorting = other;
	let queryModel = this.getQueryModel();
	let temp = oFF.XList.create();
	let size = originComplexAndDataCellSorting.m_elementPath.size();
	for (let i = 0; i < size; i++)
	{
		let origElement = originComplexAndDataCellSorting.m_elementPath.get(i);
		let memberType = origElement.getSelectMemberType();
		if (oFF.isNull(memberType))
		{
			temp.add(oFF.QFactory.createDimensionElement(queryModel.getFieldByName(origElement.getSelectField().getName()), origElement.getSelectHierarchyName(), origElement.getSelectValue()));
		}
		else
		{
			temp.add(oFF.QFactory.createDimensionElementWithMemberType(memberType, queryModel.getFieldByName(origElement.getSelectField().getName()), origElement.getSelectHierarchyName(), origElement.getSelectValue()));
		}
		this.m_elementPath = temp;
		this.m_usedInRanking = originComplexAndDataCellSorting.usedInRanking();
	}
};
oFF.QComplexAndDataCellSorting.prototype.getElementPath = function()
{
	return this.m_elementPath;
};
oFF.QComplexAndDataCellSorting.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.COMPLEX_SORTING;
};
oFF.QComplexAndDataCellSorting.prototype.getPathUniqueName = function()
{
	return oFF.QComplexAndDataCellSorting.createPathUniqueName(this.m_elementPath);
};
oFF.QComplexAndDataCellSorting.prototype.getSortingType = function()
{
	return oFF.SortType.COMPLEX;
};
oFF.QComplexAndDataCellSorting.prototype.getTargetDimension = function()
{
	return null;
};
oFF.QComplexAndDataCellSorting.prototype.isValid = function()
{
	return oFF.XStream.of(this.m_elementPath).allMatch((pathElement) => {
		return oFF.AxisType.isAxisVisible(pathElement.getDimension().getAxisType());
	});
};
oFF.QComplexAndDataCellSorting.prototype.releaseObject = function()
{
	this.m_elementPath = null;
	oFF.QGenericSorting.prototype.releaseObject.call( this );
};
oFF.QComplexAndDataCellSorting.prototype.setAppliedTopOnIndividualDimension = function(appliedTopOnIndividualDimension)
{
	this.m_appliedTopOnIndividualDimension = appliedTopOnIndividualDimension;
};
oFF.QComplexAndDataCellSorting.prototype.setTargetDimension = function(targetDimension) {};
oFF.QComplexAndDataCellSorting.prototype.setUsedInRanking = function(usedInRanking)
{
	this.m_usedInRanking = usedInRanking;
};
oFF.QComplexAndDataCellSorting.prototype.setupSorting = function(parentNode, path)
{
	oFF.QGenericSorting.prototype.setupGenericSorting.call( this , parentNode);
	this.m_elementPath = path;
};
oFF.QComplexAndDataCellSorting.prototype.usedInRanking = function()
{
	return this.m_usedInRanking;
};

oFF.QDimensionSorting = function() {};
oFF.QDimensionSorting.prototype = new oFF.QGenericSorting();
oFF.QDimensionSorting.prototype._ff_c = "QDimensionSorting";

oFF.QDimensionSorting.create = function(parentNode, dimension)
{
	let sorting = new oFF.QDimensionSorting();
	sorting.setupSorting(parentNode, dimension);
	return sorting;
};
oFF.QDimensionSorting.prototype.m_dimension = null;
oFF.QDimensionSorting.prototype.m_sortingType = null;
oFF.QDimensionSorting.prototype.copyFromInternal = function(other, flags)
{
	oFF.QGenericSorting.prototype.copyFromInternal.call( this , other, flags);
	this.m_sortingType = other.m_sortingType;
};
oFF.QDimensionSorting.prototype.getDimension = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_dimension);
};
oFF.QDimensionSorting.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.DIMENSION_SORTING;
};
oFF.QDimensionSorting.prototype.getSortingPresentationType = function()
{
	let sortingType = this.getSortingType();
	if (sortingType === oFF.SortType.MEMBER_KEY)
	{
		return oFF.PresentationType.KEY;
	}
	else if (sortingType === oFF.SortType.MEMBER_TEXT)
	{
		return oFF.PresentationType.TEXT;
	}
	return null;
};
oFF.QDimensionSorting.prototype.getSortingType = function()
{
	return this.m_sortingType;
};
oFF.QDimensionSorting.prototype.releaseObject = function()
{
	this.m_dimension = oFF.XObjectExt.release(this.m_dimension);
	this.m_sortingType = null;
	oFF.QGenericSorting.prototype.releaseObject.call( this );
};
oFF.QDimensionSorting.prototype.setDimension = function(dimension)
{
	this.m_dimension = oFF.XWeakReferenceUtil.getWeakRef(dimension);
};
oFF.QDimensionSorting.prototype.setSortByFilter = function()
{
	this.setSortType(oFF.SortType.FILTER);
};
oFF.QDimensionSorting.prototype.setSortByHierarchy = function()
{
	this.setSortType(oFF.SortType.HIERARCHY);
};
oFF.QDimensionSorting.prototype.setSortByKey = function()
{
	this.setSortByPresentation(oFF.PresentationType.KEY);
};
oFF.QDimensionSorting.prototype.setSortByPresentation = function(presentationType)
{
	if (presentationType.isTypeOf(oFF.PresentationType.KEY))
	{
		this.setSortType(oFF.SortType.MEMBER_KEY);
	}
	else if (presentationType.isTypeOf(oFF.PresentationType.TEXT))
	{
		this.setSortType(oFF.SortType.MEMBER_TEXT);
	}
};
oFF.QDimensionSorting.prototype.setSortByText = function()
{
	this.setSortByPresentation(oFF.PresentationType.TEXT);
};
oFF.QDimensionSorting.prototype.setSortType = function(sortType)
{
	if (this.m_sortingType === sortType)
	{
		return false;
	}
	if (!sortType.isTypeOf(oFF.SortType.ABSTRACT_DIMENSION_SORT))
	{
		throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate2("Supports only subtype of dimension sorting: ", sortType.getName()));
	}
	if (!this.supportsSortType(sortType))
	{
		throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate2("Sorting type not supported: ", sortType.getName()));
	}
	this.m_sortingType = sortType;
	this.notifyNodeChanged();
	return true;
};
oFF.QDimensionSorting.prototype.setSortingPresentationType = function(activePresentationType)
{
	this.setSortByPresentation(activePresentationType);
};
oFF.QDimensionSorting.prototype.setupSorting = function(parentNode, dimension)
{
	oFF.QGenericSorting.prototype.setupGenericSorting.call( this , parentNode);
	this.setDimension(dimension);
	if (this.supportsSortType(oFF.SortType.MEMBER_KEY))
	{
		this.m_sortingType = oFF.SortType.MEMBER_KEY;
	}
	else
	{
		this.m_sortingType = null;
	}
};
oFF.QDimensionSorting.prototype.supportsDimension = function()
{
	return true;
};
oFF.QDimensionSorting.prototype.supportsSortByFilter = function()
{
	return this.supportsSortType(oFF.SortType.FILTER);
};
oFF.QDimensionSorting.prototype.supportsSortByHierarchy = function()
{
	return this.supportsSortType(oFF.SortType.HIERARCHY);
};
oFF.QDimensionSorting.prototype.supportsSortByPresentation = function(presentationType)
{
	if (presentationType.isTypeOf(oFF.PresentationType.KEY))
	{
		return this.supportsSortType(oFF.SortType.MEMBER_KEY);
	}
	else if (presentationType.isTypeOf(oFF.PresentationType.TEXT))
	{
		return this.supportsSortType(oFF.SortType.MEMBER_TEXT);
	}
	return false;
};
oFF.QDimensionSorting.prototype.supportsSortType = function(sortType)
{
	return this.getQueryModel().getModelCapabilities().supportsDimensionSorting(this.getDimension(), sortType);
};
oFF.QDimensionSorting.prototype.toString = function()
{
	let buffer = oFF.XStringBuffer.create();
	buffer.append(this.getOlapComponentType().getName());
	buffer.append(" - Dim: ");
	let dimension = this.getDimension();
	if (oFF.isNull(dimension))
	{
		buffer.append("[no dimension defined]");
	}
	else
	{
		buffer.append(dimension.getName());
	}
	buffer.append(" - Type: ");
	buffer.append(this.m_sortingType.getName());
	buffer.append(" - Dir: ");
	buffer.append(this.getDirection().getName());
	return buffer.toString();
};

oFF.QFieldSorting = function() {};
oFF.QFieldSorting.prototype = new oFF.QGenericSorting();
oFF.QFieldSorting.prototype._ff_c = "QFieldSorting";

oFF.QFieldSorting.create = function(parentNode, field)
{
	let sorting = new oFF.QFieldSorting();
	sorting.setupSorting(parentNode, field);
	return sorting;
};
oFF.QFieldSorting.prototype.m_field = null;
oFF.QFieldSorting.prototype.getDimension = function()
{
	let field = this.getField();
	return oFF.isNull(field) ? null : field.getDimension();
};
oFF.QFieldSorting.prototype.getField = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_field);
};
oFF.QFieldSorting.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.FIELD_SORTING;
};
oFF.QFieldSorting.prototype.getSortingType = function()
{
	return oFF.SortType.FIELD;
};
oFF.QFieldSorting.prototype.releaseObject = function()
{
	this.m_field = oFF.XObjectExt.release(this.m_field);
	oFF.QGenericSorting.prototype.releaseObject.call( this );
};
oFF.QFieldSorting.prototype.setupSorting = function(parentNode, field)
{
	oFF.QGenericSorting.prototype.setupGenericSorting.call( this , parentNode);
	this.m_field = oFF.XWeakReferenceUtil.getWeakRef(field);
};

oFF.QMeasureSorting = function() {};
oFF.QMeasureSorting.prototype = new oFF.QGenericSorting();
oFF.QMeasureSorting.prototype._ff_c = "QMeasureSorting";

oFF.QMeasureSorting.create = function(parentNode, structureMember)
{
	let sorting = new oFF.QMeasureSorting();
	sorting.setupSorting(parentNode, structureMember);
	return sorting;
};
oFF.QMeasureSorting.prototype.m_dimension = null;
oFF.QMeasureSorting.prototype.m_primaryMeasure = null;
oFF.QMeasureSorting.prototype.m_primaryMeasureKeyRef = null;
oFF.QMeasureSorting.prototype.m_secondaryMeasure = null;
oFF.QMeasureSorting.prototype.m_secondaryMeasureKeyRef = null;
oFF.QMeasureSorting.prototype.copyFromInternal = function(other, flags)
{
	oFF.QGenericSorting.prototype.copyFromInternal.call( this , other, flags);
	let originMeasureSorting = other;
	let queryModel = this.getQueryModel();
	if (oFF.notNull(originMeasureSorting.m_dimension))
	{
		this.setDimension(queryModel.getDimensionByNameFromExistingMetadata(originMeasureSorting.getDimension().getName()));
	}
	if (oFF.notNull(originMeasureSorting.m_secondaryMeasureKeyRef) || oFF.notNull(originMeasureSorting.m_secondaryMeasure))
	{
		this.setSecondaryMeasure(originMeasureSorting.getSecondaryMeasure());
	}
	if (oFF.notNull(originMeasureSorting.m_primaryMeasureKeyRef) || oFF.notNull(originMeasureSorting.m_primaryMeasure))
	{
		this.setPrimaryMeasure(originMeasureSorting.getMeasure());
	}
};
oFF.QMeasureSorting.prototype.getDimension = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_dimension);
};
oFF.QMeasureSorting.prototype.getMeasure = function()
{
	if (oFF.notNull(this.m_primaryMeasureKeyRef))
	{
		let primaryMeasure = this.getOlapEnv().getClientQueryObjectManager().getClientQueryObjectIncludeReleasedByKeyRef(this.m_primaryMeasureKeyRef, this.getQueryManager().getClientQueryObjectStorageName());
		if (oFF.notNull(primaryMeasure))
		{
			return primaryMeasure;
		}
	}
	return oFF.XWeakReferenceUtil.getHardRef(this.m_primaryMeasure);
};
oFF.QMeasureSorting.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.MEASURE_SORTING;
};
oFF.QMeasureSorting.prototype.getSecondaryMeasure = function()
{
	if (oFF.notNull(this.m_secondaryMeasureKeyRef))
	{
		let secondaryMeasure = this.getOlapEnv().getClientQueryObjectManager().getClientQueryObjectIncludeReleasedByKeyRef(this.m_secondaryMeasureKeyRef, this.getQueryManager().getClientQueryObjectStorageName());
		if (oFF.notNull(secondaryMeasure))
		{
			return secondaryMeasure;
		}
	}
	return oFF.XWeakReferenceUtil.getHardRef(this.m_secondaryMeasure);
};
oFF.QMeasureSorting.prototype.getSortingType = function()
{
	return oFF.SortType.MEASURE;
};
oFF.QMeasureSorting.prototype.getStructure = function()
{
	return this.getSecondaryMeasure();
};
oFF.QMeasureSorting.prototype.releaseObject = function()
{
	this.m_primaryMeasure = oFF.XObjectExt.release(this.m_primaryMeasure);
	this.m_primaryMeasureKeyRef = oFF.XObjectExt.release(this.m_primaryMeasureKeyRef);
	this.m_dimension = oFF.XObjectExt.release(this.m_dimension);
	this.m_secondaryMeasure = oFF.XObjectExt.release(this.m_secondaryMeasure);
	this.m_secondaryMeasureKeyRef = oFF.XObjectExt.release(this.m_secondaryMeasureKeyRef);
	oFF.QGenericSorting.prototype.releaseObject.call( this );
};
oFF.QMeasureSorting.prototype.setDimension = function(dimension)
{
	this.m_dimension = oFF.XWeakReferenceUtil.getWeakRef(dimension);
};
oFF.QMeasureSorting.prototype.setPrimaryMeasure = function(member)
{
	let clientQueryObjectStorageName = this.getQueryManager().getClientQueryObjectStorageName();
	if (member.getStorageGroupName() !== null && oFF.XString.isEqual(member.getStorageName(), clientQueryObjectStorageName) && this.getOlapEnv().getClientQueryObjectManager().getClientQueryObjectIncludeReleasedByKeyRef(member, clientQueryObjectStorageName) !== null)
	{
		this.m_primaryMeasureKeyRef = oFF.QFactory.createKeyRef(member.getStorageName(), member.getStorageGroupName(), member.getStorageObjectName());
	}
	else
	{
		this.m_primaryMeasure = oFF.XWeakReferenceUtil.getWeakRef(member);
	}
};
oFF.QMeasureSorting.prototype.setSecondaryMeasure = function(secondaryMeasure)
{
	let clientQueryObjectStorageName = this.getQueryManager().getClientQueryObjectStorageName();
	if (secondaryMeasure.getStorageGroupName() !== null && oFF.XString.isEqual(secondaryMeasure.getStorageName(), clientQueryObjectStorageName) && this.getOlapEnv().getClientQueryObjectManager().getClientQueryObjectIncludeReleasedByKeyRef(secondaryMeasure, clientQueryObjectStorageName) !== null)
	{
		this.m_secondaryMeasureKeyRef = oFF.QFactory.createKeyRef(secondaryMeasure.getStorageName(), secondaryMeasure.getStorageGroupName(), secondaryMeasure.getStorageObjectName());
	}
	else
	{
		this.m_secondaryMeasure = oFF.XWeakReferenceUtil.getWeakRef(secondaryMeasure);
	}
	this.notifyNodeChanged();
};
oFF.QMeasureSorting.prototype.setStructure = function(structureMember)
{
	this.setSecondaryMeasure(structureMember);
};
oFF.QMeasureSorting.prototype.setupSorting = function(parentNode, structureMember)
{
	oFF.QGenericSorting.prototype.setupGenericSorting.call( this , parentNode);
	this.setPrimaryMeasure(structureMember);
};
oFF.QMeasureSorting.prototype.supportsDimension = function()
{
	return true;
};

oFF.QVariable = function() {};
oFF.QVariable.prototype = new oFF.QVariableModelComponent();
oFF.QVariable.prototype._ff_c = "QVariable";

oFF.QVariable.prototype.m_affectedVariables = null;
oFF.QVariable.prototype.m_customVariable = false;
oFF.QVariable.prototype.m_dependentVariables = null;
oFF.QVariable.prototype.m_dependentVariablesNames = null;
oFF.QVariable.prototype.m_externalVariable = null;
oFF.QVariable.prototype.m_isDynamic = false;
oFF.QVariable.prototype.m_isInitialValueAllowed = false;
oFF.QVariable.prototype.m_isInputEnabled = false;
oFF.QVariable.prototype.m_isInputEnabledAndExit = null;
oFF.QVariable.prototype.m_isMandatory = false;
oFF.QVariable.prototype.m_nameExternal = null;
oFF.QVariable.prototype.m_processingType = null;
oFF.QVariable.prototype.m_valueType = null;
oFF.QVariable.prototype.m_variableContext = null;
oFF.QVariable.prototype.m_variableOrder = 0;
oFF.QVariable.prototype.addDependentVariable = function(variable)
{
	if (!this.m_dependentVariables.contains(variable))
	{
		this.m_dependentVariables.add(variable);
	}
};
oFF.QVariable.prototype.addDependentVariableName = function(name)
{
	this.m_dependentVariablesNames.add(name);
};
oFF.QVariable.prototype.clearAndDeregisterExternalVariable = function()
{
	let externalVariable = this.getExternalRepresentation();
	if (oFF.notNull(externalVariable))
	{
		externalVariable.removeSecondaryParent(this);
		this.m_externalVariable = null;
	}
};
oFF.QVariable.prototype.cloneOlapComponent = function(context, parent)
{
	let cloneVar = oFF.QFactory.createVariable(context, this.getQueryModel().getVariableManager(), this);
	cloneVar.copyFrom(this, null);
	return cloneVar;
};
oFF.QVariable.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVariableModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let originVariable = other;
	this.m_dependentVariablesNames = originVariable.m_dependentVariablesNames.createListCopy();
	this.m_valueType = originVariable.m_valueType;
	this.m_variableOrder = originVariable.m_variableOrder;
	this.m_isInputEnabled = originVariable.m_isInputEnabled;
	this.m_isMandatory = originVariable.m_isMandatory;
	this.m_isInitialValueAllowed = originVariable.m_isInitialValueAllowed;
	this.m_nameExternal = originVariable.m_nameExternal;
	this.m_isDynamic = originVariable.m_isDynamic;
	this.m_customVariable = originVariable.m_customVariable;
	this.m_processingType = originVariable.m_processingType;
	this.m_isInputEnabledAndExit = originVariable.m_isInputEnabledAndExit;
};
oFF.QVariable.prototype.copyVariableDependencies = function(origin)
{
	let size = origin.m_dependentVariables.size();
	for (let i = 0; i < size; i++)
	{
		this.m_dependentVariables.add(this.m_variableContext.getVariableBaseByName(origin.m_dependentVariables.get(i).getName()));
	}
};
oFF.QVariable.prototype.getAffectedVariables = function()
{
	if (oFF.isNull(this.m_affectedVariables))
	{
		this.m_affectedVariables = this.resolveAffectedVariables();
	}
	return this.m_affectedVariables;
};
oFF.QVariable.prototype.getDependentVariables = function()
{
	return this.m_dependentVariables;
};
oFF.QVariable.prototype.getDependentVariablesNames = function()
{
	return this.m_dependentVariablesNames;
};
oFF.QVariable.prototype.getExternalRepresentation = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_externalVariable);
};
oFF.QVariable.prototype.getNameExternal = function()
{
	return this.m_nameExternal;
};
oFF.QVariable.prototype.getOlapComponentType = function()
{
	return this.getVariableType();
};
oFF.QVariable.prototype.getProcessingType = function()
{
	return this.m_processingType;
};
oFF.QVariable.prototype.getValueType = function()
{
	return this.m_valueType;
};
oFF.QVariable.prototype.getVariableContainer = function()
{
	return this.m_variableContext;
};
oFF.QVariable.prototype.getVariableContext = function()
{
	return this.m_variableContext;
};
oFF.QVariable.prototype.getVariableOrder = function()
{
	return this.m_variableOrder;
};
oFF.QVariable.prototype.hasExternalRepresentation = function()
{
	return this.getExternalRepresentation() !== null;
};
oFF.QVariable.prototype.isCustomVariable = function()
{
	return this.m_customVariable;
};
oFF.QVariable.prototype.isDynamicOrExitVariable = function()
{
	if (this.getConvenienceCommands() !== null && this.getConvenienceCommands().isTypeOfAbap())
	{
		return this.isEnforcedDynamicValue();
	}
	return this.m_isDynamic;
};
oFF.QVariable.prototype.isDynamicVariable = function()
{
	return this.m_isDynamic;
};
oFF.QVariable.prototype.isEnforcedDynamicValue = function()
{
	if (this.getVariableType().isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE) && !this.getSession().hasFeature(oFF.FeatureToggleOlap.SIMPLE_VARIABLE_EXIT))
	{
		return false;
	}
	return this.m_isInputEnabledAndExit.getBoolean();
};
oFF.QVariable.prototype.isEnforcedDynamicValueInternal = function()
{
	return this.m_isInputEnabledAndExit;
};
oFF.QVariable.prototype.isInitialValueAllowed = function()
{
	return this.m_isInitialValueAllowed;
};
oFF.QVariable.prototype.isInputEnabled = function()
{
	return this.m_isInputEnabled;
};
oFF.QVariable.prototype.isInputEnabledAndExitProvidedInMd = function()
{
	return this.m_isInputEnabledAndExit !== oFF.TriStateBool._DEFAULT;
};
oFF.QVariable.prototype.isMandatory = function()
{
	return this.m_isMandatory;
};
oFF.QVariable.prototype.isTechnicalVariable = function()
{
	return oFF.QTechnicalVariableNames.isTechnicalVariableName(this.getName()) || this.getSession().hasFeature(oFF.FeatureToggleOlap.DWC_FISCAL_TIME) && oFF.XString.isEqual(this.getExtensionByName(oFF.QVariableUtils.EXTENSION_USAGE), oFF.QVariableUtils.CURRENT_PERIOD);
};
oFF.QVariable.prototype.newVariableValue = function()
{
	return oFF.QFactory.createVariableValue(this);
};
oFF.QVariable.prototype.releaseObject = function()
{
	this.m_variableContext = null;
	this.m_valueType = null;
	this.m_processingType = null;
	this.m_affectedVariables = oFF.XObjectExt.release(this.m_affectedVariables);
	this.m_externalVariable = oFF.XObjectExt.release(this.m_externalVariable);
	this.m_dependentVariables = oFF.XObjectExt.release(this.m_dependentVariables);
	this.m_dependentVariablesNames = oFF.XObjectExt.release(this.m_dependentVariablesNames);
	this.m_nameExternal = null;
	this.m_isInputEnabledAndExit = null;
	oFF.QVariableModelComponent.prototype.releaseObject.call( this );
};
oFF.QVariable.prototype.resolveAffectedVariables = function()
{
	let affectedVariabes = oFF.XListOfNameObject.create();
	let variables = this.getVariableContext().getVariables();
	for (let i = 0; i < this.getVariableContext().getVariables().size(); i++)
	{
		let dependentVariable = variables.get(i);
		if (dependentVariable.getDependentVariables().containsKey(this.getName()))
		{
			affectedVariabes.add(dependentVariable);
		}
	}
	return affectedVariabes;
};
oFF.QVariable.prototype.setCustomVariable = function(customVariable)
{
	this.m_customVariable = customVariable;
};
oFF.QVariable.prototype.setExternalRepresentation = function(variable)
{
	this.clearAndDeregisterExternalVariable();
	if (oFF.notNull(variable))
	{
		this.m_externalVariable = oFF.XWeakReferenceUtil.getWeakRef(variable);
		variable.addSecondaryParent(this);
	}
	this.setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_PAUSE_MODCOUNTER);
	this.notifyNodeChanged();
	this.resumeEventing();
};
oFF.QVariable.prototype.setInitialValueAllowed = function(initialValueAllowed)
{
	this.m_isInitialValueAllowed = initialValueAllowed;
};
oFF.QVariable.prototype.setInputEnabled = function(inputEnabled)
{
	this.m_isInputEnabled = inputEnabled;
};
oFF.QVariable.prototype.setIsDynamicVariable = function(isDynamic)
{
	this.m_isDynamic = isDynamic;
};
oFF.QVariable.prototype.setIsInputEnabledAndExit = function(isInputEnabledAndExit)
{
	this.m_isInputEnabledAndExit = oFF.TriStateBool.lookup(isInputEnabledAndExit);
};
oFF.QVariable.prototype.setMandatory = function(mandatory)
{
	this.m_isMandatory = mandatory;
};
oFF.QVariable.prototype.setNameExternal = function(nameExternal)
{
	this.m_nameExternal = nameExternal;
};
oFF.QVariable.prototype.setProcessingType = function(processingType)
{
	this.m_processingType = processingType;
};
oFF.QVariable.prototype.setValueByString = function(value)
{
	this.setValueByStringExt(value, false);
};
oFF.QVariable.prototype.setValueType = function(type)
{
	this.m_valueType = type;
};
oFF.QVariable.prototype.setVariableOrder = function(orderIndex)
{
	this.m_variableOrder = orderIndex;
};
oFF.QVariable.prototype.setupVariable = function(context, variableContext, valueType, name, description)
{
	let varContextParent = oFF.notNull(variableContext) ? variableContext.getModelComponentBase() : null;
	oFF.QVariableModelComponent.prototype.setupModelComponentWithName.call( this , context, varContextParent, name);
	this.setText(description);
	this.m_variableContext = variableContext;
	this.m_valueType = valueType;
	this.m_dependentVariables = oFF.XListOfNameObject.create();
	this.m_dependentVariablesNames = oFF.XList.create();
	this.m_isInputEnabledAndExit = oFF.TriStateBool._DEFAULT;
};

oFF.QVariableProcessor = function() {};
oFF.QVariableProcessor.prototype = new oFF.QVariableModelComponent();
oFF.QVariableProcessor.prototype._ff_c = "QVariableProcessor";

oFF.QVariableProcessor.createVariableProcessor = function(context, dataSource, provider, requestor)
{
	let variableProcessor = new oFF.QVariableProcessor();
	variableProcessor.setupVariableProcessor(context, dataSource, provider, requestor);
	return variableProcessor;
};
oFF.QVariableProcessor.prototype.m_datasource = null;
oFF.QVariableProcessor.prototype.m_directVariableTransfer = false;
oFF.QVariableProcessor.prototype.m_isSubmitted = false;
oFF.QVariableProcessor.prototype.m_provider = null;
oFF.QVariableProcessor.prototype.m_requestor = null;
oFF.QVariableProcessor.prototype.m_variableProcessorPreviousState = null;
oFF.QVariableProcessor.prototype.m_variableProcessorState = null;
oFF.QVariableProcessor.prototype.m_variables = null;
oFF.QVariableProcessor.prototype.activateVariableVariant = function(variableVariant, syncType, listener, customIdentifier)
{
	return this.m_provider.processActivateVariableVariant(variableVariant, syncType, listener, customIdentifier);
};
oFF.QVariableProcessor.prototype.addVariable = function(variable)
{
	this.m_variables.add(variable);
};
oFF.QVariableProcessor.prototype.addVariableRuntimeInformation = function()
{
	this.m_variables = oFF.XListOfNameObject.create();
	if (this.m_provider.isVariableValuesRuntimeNeeded())
	{
		let extResult = this.m_provider.processRetrieveVariableRuntimeInformation(oFF.SyncType.BLOCKING, null, null);
		oFF.MessageUtil.checkNoError(extResult);
	}
	else
	{
		if (this.m_requestor.hasVariables())
		{
			this.m_variables.addAll(this.m_requestor.getVariables());
		}
	}
};
oFF.QVariableProcessor.prototype.cancelReInitVariables = function(syncType, listener, customIdentifier)
{
	return this.m_provider.processVariableCancel(syncType, listener, customIdentifier);
};
oFF.QVariableProcessor.prototype.checkVariables = function(syncType, listener, customIdentifier)
{
	return this.m_provider.processCheckVariables(syncType, listener, customIdentifier);
};
oFF.QVariableProcessor.prototype.clearExternalVariablesRepresentations = function()
{
	this.queueEventing();
	oFF.QVariableUtils.clearExternalVariablesRepresentations(this.getVariables());
	this.resumeEventing();
};
oFF.QVariableProcessor.prototype.clearVariables = function()
{
	if (oFF.notNull(this.m_variables))
	{
		this.m_variables.clear();
	}
};
oFF.QVariableProcessor.prototype.deleteVariableVariant = function(variableVariant, syncType, listener, customIdentifier)
{
	return this.m_provider.processDeleteVariableVariant(variableVariant, syncType, listener, customIdentifier);
};
oFF.QVariableProcessor.prototype.emptyVariableDefinition = function(syncType, listener, customIdentifier)
{
	return this.m_provider.processSetGetVariableValues(syncType, listener, customIdentifier);
};
oFF.QVariableProcessor.prototype.getDataSource = function()
{
	return this.m_datasource;
};
oFF.QVariableProcessor.prototype.getDimensionAccessor = function()
{
	return this.m_requestor.getDimensionAccessor();
};
oFF.QVariableProcessor.prototype.getDimensionMemberVariables = function()
{
	return oFF.QVariableUtils.getDimensionMemberVariables(this.getVariables());
};
oFF.QVariableProcessor.prototype.getHierarchyNameVariable = function(name)
{
	return oFF.QVariableUtils.getVariableByType(this.getVariables(), name, oFF.VariableType.HIERARCHY_NAME_VARIABLE);
};
oFF.QVariableProcessor.prototype.getHierarchyNameVariables = function()
{
	return oFF.QVariableUtils.getHierarchyNameVariables(this.getVariables());
};
oFF.QVariableProcessor.prototype.getHierarchyNodeVariable = function(name)
{
	return oFF.QVariableUtils.getVariableByType(this.getVariables(), name, oFF.VariableType.HIERARCHY_NODE_VARIABLE);
};
oFF.QVariableProcessor.prototype.getInputEnabledAndNonTechnicalVariables = function()
{
	return oFF.QVariableUtils.getInputEnabledAndNonTechnicalVariables(this.getVariables());
};
oFF.QVariableProcessor.prototype.getInputEnabledVariable = function(name)
{
	return oFF.QVariableUtils.getInputEnabledVariable(this.getVariables(), name);
};
oFF.QVariableProcessor.prototype.getInputEnabledVariables = function()
{
	return oFF.QVariableUtils.getInputEnabledVariables(this.getVariables());
};
oFF.QVariableProcessor.prototype.getModelComponentBase = function()
{
	return this;
};
oFF.QVariableProcessor.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.VARIABLE_CONTAINER;
};
oFF.QVariableProcessor.prototype.getSelectionTagging = function()
{
	return null;
};
oFF.QVariableProcessor.prototype.getVariable = function(name)
{
	return this.getVariableBaseByName(name);
};
oFF.QVariableProcessor.prototype.getVariableBaseAt = function(index)
{
	if (this.m_requestor.hasVariables() && oFF.isNull(this.m_variables))
	{
		this.addVariableRuntimeInformation();
	}
	return this.m_variables.get(index);
};
oFF.QVariableProcessor.prototype.getVariableBaseByName = function(name)
{
	if (this.m_requestor.hasVariables() && oFF.isNull(this.m_variables))
	{
		this.addVariableRuntimeInformation();
	}
	return this.m_variables.getByKey(name);
};
oFF.QVariableProcessor.prototype.getVariableContainer = function()
{
	return this;
};
oFF.QVariableProcessor.prototype.getVariableContainerBase = function()
{
	return this;
};
oFF.QVariableProcessor.prototype.getVariableMode = function()
{
	if (this.m_directVariableTransfer)
	{
		return oFF.VariableMode.DIRECT_VALUE_TRANSFER;
	}
	return oFF.VariableMode.SUBMIT_AND_REINIT;
};
oFF.QVariableProcessor.prototype.getVariableProcessorState = function()
{
	return this.m_variableProcessorState;
};
oFF.QVariableProcessor.prototype.getVariableVariants = function()
{
	return this.getQueryManager() !== null ? this.getQueryManager().getVariableVariants() : null;
};
oFF.QVariableProcessor.prototype.getVariables = function()
{
	if (this.m_requestor.hasVariables() && oFF.isNull(this.m_variables))
	{
		this.addVariableRuntimeInformation();
	}
	return this.m_variables;
};
oFF.QVariableProcessor.prototype.hasInputEnabledAndNonTechnicalVariables = function()
{
	return oFF.XCollectionUtils.hasElements(this.getInputEnabledAndNonTechnicalVariables());
};
oFF.QVariableProcessor.prototype.hasInputEnabledVariables = function()
{
	return oFF.QVariableUtils.hasInputEnabledVariables(this.getVariables());
};
oFF.QVariableProcessor.prototype.hasMandatoryVariables = function()
{
	return oFF.QVariableUtils.hasMandatoryVariables(this.getVariables());
};
oFF.QVariableProcessor.prototype.hasVariables = function()
{
	return oFF.XCollectionUtils.hasElements(this.getVariables());
};
oFF.QVariableProcessor.prototype.isCancelNeeded = function()
{
	return this.getVariableProcessorState().isCancelNeeded();
};
oFF.QVariableProcessor.prototype.isDirectVariableTransferEnabled = function()
{
	return this.m_directVariableTransfer;
};
oFF.QVariableProcessor.prototype.isFailedSubmit = function()
{
	return this.getVariableProcessorState().isFailedSubmit();
};
oFF.QVariableProcessor.prototype.isProcessingAutoSubmit = function()
{
	return this.m_variableProcessorState === oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT || this.m_variableProcessorState === oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT_AFTER_REINIT;
};
oFF.QVariableProcessor.prototype.isReinitNeeded = function()
{
	return this.getVariableProcessorState().isReinitNeeded();
};
oFF.QVariableProcessor.prototype.isSubmitNeeded = function()
{
	return this.getVariableProcessorState().isSubmitNeeded();
};
oFF.QVariableProcessor.prototype.isSubmitted = function()
{
	return this.m_isSubmitted;
};
oFF.QVariableProcessor.prototype.isUsingSavedPromptsForExitVariables = function()
{
	return this.getQueryManager() !== null && this.getQueryManager().isUsingSavedPromptsForExitVariables();
};
oFF.QVariableProcessor.prototype.reInitVariablesAfterSubmit = function(syncType, listener, customIdentifier)
{
	return this.m_provider.processReInitVariableAfterSubmit(syncType, listener, customIdentifier);
};
oFF.QVariableProcessor.prototype.registerVariableProcessorStateChangedListener = function(listener, customIdentifier) {};
oFF.QVariableProcessor.prototype.releaseObject = function()
{
	this.m_datasource = null;
	this.m_requestor = null;
	this.m_provider = null;
	this.m_variableProcessorState = null;
	this.m_variableProcessorPreviousState = null;
	this.m_variables = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_variables);
	oFF.QVariableModelComponent.prototype.releaseObject.call( this );
};
oFF.QVariableProcessor.prototype.removeVariable = function(name)
{
	if (oFF.notNull(this.m_variables))
	{
		let variable = this.m_variables.getByKey(name);
		this.m_variables.removeElement(variable);
	}
};
oFF.QVariableProcessor.prototype.resetExitOrUpdateDynamicVariable = function(syncType, listener, customIdentifier, overwriteDefaultForInputEnabledVar)
{
	this.m_provider.processResetExitOrDynamicVariable(syncType, listener, customIdentifier, overwriteDefaultForInputEnabledVar);
};
oFF.QVariableProcessor.prototype.returnToPreviousProcessorState = function()
{
	if (this.m_variableProcessorPreviousState !== oFF.VariableProcessorState.CHANGEABLE_REINIT && this.m_variableProcessorPreviousState !== oFF.VariableProcessorState.CHANGEABLE_STARTUP && this.m_variableProcessorPreviousState !== oFF.VariableProcessorState.SUBMITTED)
	{
		oFF.XObjectExt.assertNotNullExt(this.m_variableProcessorPreviousState, "Not allowed to return to previous state: [null]");
		throw oFF.XException.createIllegalStateException(oFF.XStringUtils.concatenate2("Not allowed to return to previous state: ", this.m_variableProcessorPreviousState.getName()));
	}
	this.m_variableProcessorState = this.m_variableProcessorPreviousState;
	this.m_variableProcessorPreviousState = null;
	this.m_isSubmitted = false;
};
oFF.QVariableProcessor.prototype.saveVariableVariant = function(variableVariant, syncType, listener, customIdentifier)
{
	return this.m_provider.processSaveVariableVariant(variableVariant, syncType, listener, customIdentifier);
};
oFF.QVariableProcessor.prototype.setDirectVariableTransferEnabled = function(directVariableTransfer)
{
	if (this.m_directVariableTransfer === directVariableTransfer)
	{
		return;
	}
	if (!this.supportsDirectVariableTransfer())
	{
		return;
	}
	this.m_directVariableTransfer = directVariableTransfer;
	this.m_provider.setDirectVariableTransfer(directVariableTransfer);
	this.m_provider.setIsVariableSubmitNeeded(!this.m_directVariableTransfer);
	this.getModelComponentBase().notifyNodeChanged();
};
oFF.QVariableProcessor.prototype.setUseSavedPromptsForExitVariables = function(disableExitVariables)
{
	if (this.getQueryManager() !== null)
	{
		this.getQueryManager().setUseSavedPromptsForExitVariables(disableExitVariables);
	}
};
oFF.QVariableProcessor.prototype.setVariableProcessorState = function(variableProcessorState)
{
	this.m_variableProcessorPreviousState = this.m_variableProcessorState;
	this.m_variableProcessorState = variableProcessorState;
	if (this.m_variableProcessorState === oFF.VariableProcessorState.SUBMITTED)
	{
		this.m_isSubmitted = true;
	}
};
oFF.QVariableProcessor.prototype.setWinControlInAutoSubmitByType = function(variableType, isWinControlInAutoSubmit, isLimitToExitVariable)
{
	let queryModel = this.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		queryModel.setWinControlInAutoSubmitByType(variableType, isWinControlInAutoSubmit, isLimitToExitVariable);
	}
};
oFF.QVariableProcessor.prototype.setupVariableProcessor = function(context, dataSource, provider, requestor)
{
	oFF.QVariableModelComponent.prototype.setupModelComponent.call( this , context, null);
	this.m_requestor = requestor;
	this.m_provider = provider;
	this.m_datasource = dataSource;
	this.m_variableProcessorState = oFF.VariableProcessorState.INITIAL;
	this.m_isSubmitted = false;
};
oFF.QVariableProcessor.prototype.submitVariables = function(syncType, listener, customIdentifier)
{
	return this.m_provider.processVariableSubmit(syncType, listener, customIdentifier);
};
oFF.QVariableProcessor.prototype.supportsCheckVariables = function()
{
	return this.isDirectVariableTransferEnabled();
};
oFF.QVariableProcessor.prototype.supportsDirectVariableTransfer = function()
{
	let queryModel = this.getQueryModelBase();
	if (oFF.isNull(queryModel))
	{
		return false;
	}
	let queryManager = queryModel.getQueryManagerBase();
	if (oFF.isNull(queryManager))
	{
		return false;
	}
	return queryManager.supportsDirectVariableTransfer();
};
oFF.QVariableProcessor.prototype.supportsMaintainsVariableVariants = function()
{
	return this.getQueryManager() !== null && this.getQueryManager().supportsMaintainsVariableVariants();
};
oFF.QVariableProcessor.prototype.supportsReInitVariables = function()
{
	return this.m_provider.supportsReInitVariables();
};
oFF.QVariableProcessor.prototype.supportsVariableMasking = function()
{
	return this.m_provider.supportsVariableMasking();
};
oFF.QVariableProcessor.prototype.transferVariables = function(syncType, listener, customIdentifier)
{
	return this.m_provider.processSetGetVariableValues(syncType, listener, customIdentifier);
};
oFF.QVariableProcessor.prototype.transferVariablesByVariable = function(variable, syncType, listener, customIdentifier)
{
	if (this.getVariables().contains(variable))
	{
		return this.m_provider.processSetGetVariableValues(syncType, listener, customIdentifier);
	}
	return null;
};
oFF.QVariableProcessor.prototype.unregisterVariableProcessorStateChangedListener = function(listener) {};
oFF.QVariableProcessor.prototype.updateDynamicVariables = function(syncType, listener, customIdentifier)
{
	this.m_provider.processUpdateDynamicVariables(syncType, listener, customIdentifier);
};
oFF.QVariableProcessor.prototype.updateVariableVariantValues = function(variableVariant, syncType, listener, customIdentifier)
{
	return this.m_provider.processUpdateVariableVariantValues(variableVariant, syncType, listener, customIdentifier);
};

oFF.QOptionListElement = function() {};
oFF.QOptionListElement.prototype = new oFF.QVariableModelComponent();
oFF.QOptionListElement.prototype._ff_c = "QOptionListElement";

oFF.QOptionListElement.createOptionListElement = function(context, variable, name, text)
{
	let element = new oFF.QOptionListElement();
	element.setupOptionListElement(context, variable, name, text);
	return element;
};
oFF.QOptionListElement.prototype.setupOptionListElement = function(context, variable, name, text)
{
	oFF.QVariableModelComponent.prototype.setupModelComponentWithName.call( this , context, variable, name);
	this.setText(text);
};
oFF.QOptionListElement.prototype.toString = function()
{
	return this.getName();
};

oFF.QVizChartDefinitionContext = function() {};
oFF.QVizChartDefinitionContext.prototype = new oFF.QVizVisualizationDefinitionContext();
oFF.QVizChartDefinitionContext.prototype._ff_c = "QVizChartDefinitionContext";

oFF.QVizChartDefinitionContext.prototype.getChartDefinition = function()
{
	let parent = this.getParent();
	while (oFF.notNull(parent) && parent.getOlapComponentType() !== oFF.OlapComponentType.VISUALIZATION_CHART_DEFINITION)
	{
		parent = parent.getParent();
	}
	if (oFF.notNull(parent))
	{
		return parent;
	}
	return null;
};

oFF.QVizTableDefinitionContext = function() {};
oFF.QVizTableDefinitionContext.prototype = new oFF.QVizVisualizationDefinitionContext();
oFF.QVizTableDefinitionContext.prototype._ff_c = "QVizTableDefinitionContext";

oFF.QVizTableDefinitionContext.prototype.getTableDefinition = function()
{
	let parent = this.getParent();
	while (oFF.notNull(parent) && parent.getOlapComponentType() !== oFF.OlapComponentType.VISUALIZATION_TABLE_DEFINITION)
	{
		parent = parent.getParent();
	}
	if (oFF.notNull(parent))
	{
		return parent;
	}
	return null;
};

oFF.QVizAxisPathElement = function() {};
oFF.QVizAxisPathElement.prototype = new oFF.QVizVisualizationDefinitionContext();
oFF.QVizAxisPathElement.prototype._ff_c = "QVizAxisPathElement";

oFF.QVizAxisPathElement.create = function(context, parent)
{
	let instance = new oFF.QVizAxisPathElement();
	instance.setupModelComponent(context, parent);
	instance.setup();
	return instance;
};
oFF.QVizAxisPathElement.prototype.m_attributeName = null;
oFF.QVizAxisPathElement.prototype.m_axisLevel = 0;
oFF.QVizAxisPathElement.prototype.m_dimensionName = null;
oFF.QVizAxisPathElement.prototype.m_dimensionType = null;
oFF.QVizAxisPathElement.prototype.m_exactHierarchyLevel = false;
oFF.QVizAxisPathElement.prototype.m_fieldName = null;
oFF.QVizAxisPathElement.prototype.m_hierarchyAlignment = null;
oFF.QVizAxisPathElement.prototype.m_hierarchyLevel = 0;
oFF.QVizAxisPathElement.prototype.m_hierarchyLevelName = null;
oFF.QVizAxisPathElement.prototype.m_includeHeaderBand = null;
oFF.QVizAxisPathElement.prototype.m_includeSubDrills = null;
oFF.QVizAxisPathElement.prototype.m_includeTotalsBand = null;
oFF.QVizAxisPathElement.prototype.m_matchesExpanded = null;
oFF.QVizAxisPathElement.prototype.m_matchesLeaves = null;
oFF.QVizAxisPathElement.prototype.m_matchesTotals = null;
oFF.QVizAxisPathElement.prototype.m_memberNames = null;
oFF.QVizAxisPathElement.prototype.m_presentationType = null;
oFF.QVizAxisPathElement.prototype.m_semanticType = null;
oFF.QVizAxisPathElement.prototype.addMemberName = function(memberName)
{
	this.m_memberNames.addString(memberName);
};
oFF.QVizAxisPathElement.prototype.clearMemberNames = function()
{
	this.m_memberNames.clear();
};
oFF.QVizAxisPathElement.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVizVisualizationDefinitionContext.prototype.copyFromInternal.call( this , other, flags);
	let originObj = other;
	this.m_dimensionName.copyFrom(originObj.m_dimensionName, flags);
	this.m_dimensionType.copyFrom(originObj.m_dimensionType, flags);
	this.m_presentationType.copyFrom(originObj.m_presentationType, flags);
	this.m_attributeName.copyFrom(originObj.m_attributeName, flags);
	this.m_fieldName.copyFrom(originObj.m_fieldName, flags);
	this.m_semanticType.copyFrom(originObj.m_semanticType, flags);
	this.m_hierarchyLevel = originObj.getHierarchyLevel();
	this.m_includeSubDrills = originObj.isIncludeSubDrills();
	this.m_includeHeaderBand = originObj.isIncludeHeaderBand();
	this.m_includeTotalsBand = originObj.isIncludeTotalsBand();
	this.m_matchesLeaves = originObj.isMatchesLeaves();
	this.m_matchesTotals = originObj.isMatchesTotals();
	this.m_matchesExpanded = originObj.isMatchesExpanded();
	this.m_hierarchyAlignment = originObj.getHierarchyAlignment();
	this.m_exactHierarchyLevel = originObj.isExactHierarchyLevel();
	this.m_axisLevel = originObj.getAxisLevel();
	this.m_hierarchyLevelName = originObj.getHierarchyLevelName();
	this.m_memberNames.clear();
	this.m_memberNames.copyFrom(originObj.m_memberNames, flags);
};
oFF.QVizAxisPathElement.prototype.getAttribute = function()
{
	let dimension = this.getDimension();
	return oFF.isNull(dimension) ? null : dimension.getAttributeByName(this.getAttributeName());
};
oFF.QVizAxisPathElement.prototype.getAttributeName = function()
{
	return this.m_attributeName.resolveString(this.getVisualizationDefinition());
};
oFF.QVizAxisPathElement.prototype.getAttributeNameRaw = function()
{
	return this.m_attributeName;
};
oFF.QVizAxisPathElement.prototype.getAxisLevel = function()
{
	return this.m_axisLevel;
};
oFF.QVizAxisPathElement.prototype.getDimension = function()
{
	return this.getQueryModel().getDimensionByName(this.getDimensionName());
};
oFF.QVizAxisPathElement.prototype.getDimensionName = function()
{
	return this.m_dimensionName.resolveString(this.getVisualizationDefinition());
};
oFF.QVizAxisPathElement.prototype.getDimensionNameRaw = function()
{
	return this.m_dimensionName;
};
oFF.QVizAxisPathElement.prototype.getDimensionType = function()
{
	return this.m_dimensionType.getResolvedValue(this.getVisualizationDefinition());
};
oFF.QVizAxisPathElement.prototype.getDimensionTypeRaw = function()
{
	return this.m_dimensionType;
};
oFF.QVizAxisPathElement.prototype.getField = function()
{
	return this.getQueryModel().getFieldByName(this.getFieldName());
};
oFF.QVizAxisPathElement.prototype.getFieldName = function()
{
	return this.m_fieldName.resolveString(this.getVisualizationDefinition());
};
oFF.QVizAxisPathElement.prototype.getFieldNameRaw = function()
{
	return this.m_fieldName;
};
oFF.QVizAxisPathElement.prototype.getHierarchyAlignment = function()
{
	return this.m_hierarchyAlignment;
};
oFF.QVizAxisPathElement.prototype.getHierarchyLevel = function()
{
	return this.m_hierarchyLevel;
};
oFF.QVizAxisPathElement.prototype.getHierarchyLevelName = function()
{
	return this.m_hierarchyLevelName;
};
oFF.QVizAxisPathElement.prototype.getMemberNames = function()
{
	return this.m_memberNames.resolveStringList(this.getVisualizationDefinition());
};
oFF.QVizAxisPathElement.prototype.getMemberNamesRaw = function()
{
	return this.m_memberNames;
};
oFF.QVizAxisPathElement.prototype.getPresentationType = function()
{
	return this.m_presentationType.getResolvedValue(this.getVisualizationDefinition());
};
oFF.QVizAxisPathElement.prototype.getPresentationTypeRaw = function()
{
	return this.m_presentationType;
};
oFF.QVizAxisPathElement.prototype.getSemanticType = function()
{
	return this.m_semanticType.resolveString(this.getVisualizationDefinition());
};
oFF.QVizAxisPathElement.prototype.getSemanticTypeRaw = function()
{
	return this.m_semanticType;
};
oFF.QVizAxisPathElement.prototype.isAllDimensions = function()
{
	return oFF.isNull(this.m_dimensionName);
};
oFF.QVizAxisPathElement.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	if (!oFF.XString.isEqual(this.getClassName(), other.getClassName()))
	{
		return false;
	}
	let otherInfo = other;
	return oFF.XObjectExt.areEqual(this.m_dimensionType, otherInfo.m_dimensionType) && oFF.XObjectExt.areEqual(this.m_presentationType, otherInfo.m_presentationType) && this.m_hierarchyLevel === otherInfo.m_hierarchyLevel && this.m_axisLevel === otherInfo.m_axisLevel && this.m_exactHierarchyLevel === otherInfo.m_exactHierarchyLevel && this.m_hierarchyAlignment === otherInfo.m_hierarchyAlignment && oFF.XObjectExt.areEqual(this.m_memberNames, otherInfo.m_memberNames) && oFF.XString.isEqual(this.m_hierarchyLevelName, otherInfo.m_hierarchyLevelName) && oFF.XObjectExt.areEqual(this.m_dimensionName, otherInfo.m_dimensionName) && oFF.XObjectExt.areEqual(this.m_attributeName, otherInfo.m_attributeName) && oFF.XObjectExt.areEqual(this.m_fieldName, otherInfo.m_fieldName) && oFF.XObjectExt.areEqual(this.m_semanticType, otherInfo.m_semanticType) && this.m_includeSubDrills === otherInfo.m_includeSubDrills && this.m_includeHeaderBand === otherInfo.m_includeHeaderBand && this.m_includeTotalsBand === otherInfo.m_includeTotalsBand && this.m_matchesLeaves === otherInfo.m_matchesLeaves && this.m_matchesTotals === otherInfo.m_matchesTotals && this.m_matchesExpanded === otherInfo.m_matchesExpanded;
};
oFF.QVizAxisPathElement.prototype.isExactHierarchyLevel = function()
{
	return this.m_exactHierarchyLevel;
};
oFF.QVizAxisPathElement.prototype.isIncludeHeaderBand = function()
{
	return this.m_includeHeaderBand;
};
oFF.QVizAxisPathElement.prototype.isIncludeSubDrills = function()
{
	return this.m_includeSubDrills;
};
oFF.QVizAxisPathElement.prototype.isIncludeTotalsBand = function()
{
	return this.m_includeTotalsBand;
};
oFF.QVizAxisPathElement.prototype.isMatchesExpanded = function()
{
	return this.m_matchesExpanded;
};
oFF.QVizAxisPathElement.prototype.isMatchesLeaves = function()
{
	return this.m_matchesLeaves;
};
oFF.QVizAxisPathElement.prototype.isMatchesTotals = function()
{
	return this.m_matchesTotals;
};
oFF.QVizAxisPathElement.prototype.releaseObject = function()
{
	this.m_dimensionType = oFF.XObjectExt.release(this.m_dimensionType);
	this.m_dimensionName = oFF.XObjectExt.release(this.m_dimensionName);
	this.m_attributeName = oFF.XObjectExt.release(this.m_attributeName);
	this.m_semanticType = oFF.XObjectExt.release(this.m_semanticType);
	this.m_presentationType = oFF.XObjectExt.release(this.m_presentationType);
	this.m_fieldName = oFF.XObjectExt.release(this.m_fieldName);
	this.m_hierarchyLevel = -2;
	this.m_includeHeaderBand = null;
	this.m_includeTotalsBand = null;
	this.m_includeSubDrills = null;
	this.m_matchesExpanded = null;
	this.m_hierarchyAlignment = null;
	this.m_matchesLeaves = null;
	this.m_matchesTotals = null;
	this.m_exactHierarchyLevel = false;
	this.m_axisLevel = -2;
	this.m_hierarchyLevelName = null;
	this.m_memberNames = oFF.XObjectExt.release(this.m_memberNames);
	oFF.QVizVisualizationDefinitionContext.prototype.releaseObject.call( this );
};
oFF.QVizAxisPathElement.prototype.setAllDimensions = function()
{
	this.m_dimensionName.clear();
	this.m_fieldName.clear();
	this.m_attributeName.clear();
	this.m_semanticType.clear();
	this.m_dimensionType.clear();
};
oFF.QVizAxisPathElement.prototype.setAttribute = function(attribute)
{
	if (oFF.notNull(attribute))
	{
		this.setDimension(attribute.getDimension());
	}
	this.setAttributeName(oFF.isNull(attribute) ? null : attribute.getName());
};
oFF.QVizAxisPathElement.prototype.setAttributeName = function(attributeName)
{
	this.m_attributeName.setString(attributeName);
};
oFF.QVizAxisPathElement.prototype.setAxisLevel = function(axisLevel)
{
	this.m_axisLevel = axisLevel;
};
oFF.QVizAxisPathElement.prototype.setDimension = function(dimension)
{
	this.setDimensionName(oFF.isNull(dimension) ? null : dimension.getName());
};
oFF.QVizAxisPathElement.prototype.setDimensionName = function(dimensionName)
{
	this.setAllDimensions();
	this.m_dimensionName.setString(dimensionName);
};
oFF.QVizAxisPathElement.prototype.setDimensionType = function(dimensionType)
{
	this.setAllDimensions();
	this.m_dimensionType.setFixedValue(dimensionType);
};
oFF.QVizAxisPathElement.prototype.setExactHierarchyLevel = function(exactLevel)
{
	this.m_exactHierarchyLevel = exactLevel;
};
oFF.QVizAxisPathElement.prototype.setField = function(field)
{
	this.setFieldName(oFF.isNull(field) ? null : field.getName());
};
oFF.QVizAxisPathElement.prototype.setFieldName = function(fieldName)
{
	this.setAllDimensions();
	this.m_fieldName.setString(fieldName);
};
oFF.QVizAxisPathElement.prototype.setHierarchyAlignment = function(hierarchyAlignment)
{
	this.m_hierarchyAlignment = hierarchyAlignment;
};
oFF.QVizAxisPathElement.prototype.setHierarchyLevel = function(hierarchyLevel)
{
	this.m_hierarchyLevel = hierarchyLevel;
};
oFF.QVizAxisPathElement.prototype.setHierarchyLevelName = function(hierarchyLevelName)
{
	this.m_hierarchyLevelName = hierarchyLevelName;
};
oFF.QVizAxisPathElement.prototype.setIncludeHeaderBand = function(includeHeaderBand)
{
	this.m_includeHeaderBand = includeHeaderBand;
};
oFF.QVizAxisPathElement.prototype.setIncludeSubDrills = function(includeSubDrills)
{
	this.m_includeSubDrills = includeSubDrills;
};
oFF.QVizAxisPathElement.prototype.setIncludeTotalsBand = function(includeTotalsBand)
{
	this.m_includeTotalsBand = includeTotalsBand;
};
oFF.QVizAxisPathElement.prototype.setMatchesExpanded = function(matchesExpanded)
{
	this.m_matchesExpanded = matchesExpanded;
};
oFF.QVizAxisPathElement.prototype.setMatchesLeaves = function(matchesLeaves)
{
	this.m_matchesLeaves = matchesLeaves;
};
oFF.QVizAxisPathElement.prototype.setMatchesTotals = function(matchesTotals)
{
	this.m_matchesTotals = matchesTotals;
};
oFF.QVizAxisPathElement.prototype.setPresentationType = function(presentationType)
{
	this.m_presentationType.setFixedValue(presentationType);
};
oFF.QVizAxisPathElement.prototype.setSemanticType = function(semanticType)
{
	this.m_semanticType.setString(semanticType);
};
oFF.QVizAxisPathElement.prototype.setup = function()
{
	oFF.QVizVisualizationDefinitionContext.prototype.setup.call( this );
	this.m_hierarchyLevel = -1;
	this.m_axisLevel = -1;
	this.m_memberNames = oFF.QStylingValueStringList.create();
	this.m_presentationType = oFF.QStylingValueConstant.create((p) => {
		return oFF.PresentationType.lookup(p);
	});
	this.m_dimensionType = oFF.QStylingValueConstant.create((c) => {
		return oFF.XComponentType.lookupComponentType(c);
	});
	this.m_dimensionName = oFF.QStylingValueString.create();
	this.m_attributeName = oFF.QStylingValueString.create();
	this.m_semanticType = oFF.QStylingValueString.create();
	this.m_fieldName = oFF.QStylingValueString.create();
};

oFF.QStylingValue = function() {};
oFF.QStylingValue.prototype = new oFF.QStylingValueAbstract();
oFF.QStylingValue.prototype._ff_c = "QStylingValue";

oFF.QStylingValue.prototype.clearValue = function(value)
{
	return oFF.XObjectExt.release(value);
};
oFF.QStylingValue.prototype.copyValue = function(value)
{
	return oFF.XValueUtil.copyValue(value);
};
oFF.QStylingValue.prototype.getResolvedValue = function(variableMerger)
{
	return this.getResolvedValueExtended(null, variableMerger);
};
oFF.QStylingValue.prototype.getResolvedValueExtended = function(variableContainers, variableMerger)
{
	let value = this.getFixedValue();
	let variable = this.getVariableExt(variableContainers, variableMerger);
	if (oFF.isNull(value) && oFF.notNull(variable))
	{
		if (variable.getVariableType().isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
		{
			let simpleTypes = variable.getValues();
			if (oFF.XCollectionUtils.hasElements(simpleTypes))
			{
				value = simpleTypes.get(0);
			}
		}
		else if (variable.getVariableType().isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE))
		{
			value = oFF.XStringValue.create(variable.getCurrentOption().getName());
		}
		else if (variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
		{
			let memberValues = variable.getValues();
			if (oFF.XCollectionUtils.hasElements(memberValues))
			{
				value = memberValues.get(0).getValue();
			}
		}
	}
	return value;
};

oFF.QStylingValueConstant = function() {};
oFF.QStylingValueConstant.prototype = new oFF.QStylingValueAbstract();
oFF.QStylingValueConstant.prototype._ff_c = "QStylingValueConstant";

oFF.QStylingValueConstant.create = function(_function)
{
	let instance = new oFF.QStylingValueConstant();
	instance.m_providerFunction = _function;
	return instance;
};
oFF.QStylingValueConstant.prototype.m_providerFunction = null;
oFF.QStylingValueConstant.prototype.getResolvedValue = function(variableMerger)
{
	return this.getResolvedValueExtended(null, variableMerger);
};
oFF.QStylingValueConstant.prototype.getResolvedValueExtended = function(variableContainers, variableMerger)
{
	let value = this.getFixedValue();
	let variable = this.getVariableExt(variableContainers, variableMerger);
	if (oFF.isNull(value) && oFF.notNull(variable))
	{
		value = this.m_providerFunction(variable.getValueByString());
	}
	return value;
};

oFF.QStylingValueConstantList = function() {};
oFF.QStylingValueConstantList.prototype = new oFF.QStylingValueAbstractList();
oFF.QStylingValueConstantList.prototype._ff_c = "QStylingValueConstantList";

oFF.QStylingValueConstantList.create = function(_function)
{
	let instance = new oFF.QStylingValueConstantList();
	instance.m_providerFunction = _function;
	return instance;
};
oFF.QStylingValueConstantList.prototype.m_providerFunction = null;
oFF.QStylingValueConstantList.prototype.getResolvedValues = function(variableMerger)
{
	let values = this.getFixedValues();
	let variable = this.getVariable(variableMerger);
	if (oFF.isNull(values) && oFF.notNull(variable))
	{
		if (variable.getVariableType().isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE) || variable.getVariableType().isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE))
		{
			values = oFF.XStream.of(variable.getValues()).map((el) => {
				return this.m_providerFunction(el.getStringRepresentation());
			}).collect(oFF.XStreamCollector.toList());
		}
	}
	return values;
};

oFF.QStylingValueList = function() {};
oFF.QStylingValueList.prototype = new oFF.QStylingValueAbstractList();
oFF.QStylingValueList.prototype._ff_c = "QStylingValueList";

oFF.QStylingValueList.prototype.getResolvedValues = function(variableMerger)
{
	let values = this.getFixedValues();
	let variable = this.getVariable(variableMerger);
	if (oFF.isNull(values) && oFF.notNull(variable))
	{
		if (variable.getVariableType().isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
		{
			values = variable.getValues();
		}
		else if (variable.getVariableType().isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE))
		{
			values = variable.getValues();
		}
		else if (variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
		{
			values = oFF.XStream.of(variable.getValues()).map((val) => {
				return val.getValue();
			}).collect(oFF.XStreamCollector.toList());
		}
	}
	return values;
};

oFF.QAttribute = function() {};
oFF.QAttribute.prototype = new oFF.QFieldContainer();
oFF.QAttribute.prototype._ff_c = "QAttribute";

oFF.QAttribute.createAttribute = function(context, dimension)
{
	let attribute = new oFF.QAttribute();
	attribute.setupFieldContainer(context, dimension);
	return attribute;
};
oFF.QAttribute.prototype.m_childAttributes = null;
oFF.QAttribute.prototype.addChildAttribute = function(childAttribute)
{
	if (oFF.isNull(this.m_childAttributes))
	{
		this.m_childAttributes = oFF.XList.create();
	}
	this.m_childAttributes.add(childAttribute);
};
oFF.QAttribute.prototype.addDefaultResultSetField = function(field)
{
	oFF.QFieldContainer.prototype.addDefaultResultSetField.call( this , field);
	this.m_selectorFields.addInternal(field);
	this.m_resultSetFields.addInternal(field);
};
oFF.QAttribute.prototype.addField = function(field)
{
	oFF.QFieldContainer.prototype.addField.call( this , field);
	field.setAttribute(this);
};
oFF.QAttribute.prototype.addFieldInternal = function(field)
{
	oFF.QFieldContainer.prototype.addFieldInternal.call( this , field);
	field.setAttribute(this);
};
oFF.QAttribute.prototype.copyFromInternal = function(other, flags)
{
	let originAttribute = other;
	let dimension = this.getDimension();
	let origFields = originAttribute.getFields();
	let sizeFields = origFields.size();
	this.setName(originAttribute.getName());
	for (let iField = 0; iField < sizeFields; iField++)
	{
		this.addFieldInternal(dimension.getFieldByName(origFields.getFieldAt(iField).getName()));
	}
	this.copyFieldContainer(originAttribute, false);
	if (oFF.notNull(originAttribute.m_childAttributes))
	{
		let context = this.getContext();
		let size = originAttribute.m_childAttributes.size();
		for (let i = 0; i < size; i++)
		{
			let origChild = originAttribute.m_childAttributes.get(i);
			let cloneChild = oFF.QAttribute.createAttribute(context, dimension);
			cloneChild.copyFrom(origChild, flags);
			this.addChildAttribute(cloneChild);
		}
	}
};
oFF.QAttribute.prototype.getChildAttributes = function()
{
	return this.m_childAttributes;
};
oFF.QAttribute.prototype.getFieldLayoutType = function()
{
	return oFF.FieldLayoutType.ATTRIBUTE_BASED;
};
oFF.QAttribute.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.ATTRIBUTE;
};
oFF.QAttribute.prototype.isExcludedFromValueHelp = function()
{
	return oFF.XCollectionUtils.ensureAll(this.getFields(), (field) => {
		return field.isExcludedFromValueHelp();
	});
};
oFF.QAttribute.prototype.releaseObject = function()
{
	this.m_childAttributes = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_childAttributes);
	oFF.QFieldContainer.prototype.releaseObject.call( this );
};

oFF.QModelComponentList = function() {};
oFF.QModelComponentList.prototype = new oFF.QModelComponent();
oFF.QModelComponentList.prototype._ff_c = "QModelComponentList";

oFF.QModelComponentList.createModelComponentList = function(context, parentNode, hasChildOwnership, name)
{
	let object = new oFF.QModelComponentList();
	object.setupOlapList(context, parentNode, hasChildOwnership, name, oFF.XCollectionFactory.LOOKUP_LIST, false);
	return object;
};
oFF.QModelComponentList.createModelComponentWithNameList = function(context, parentNode, hasDynamicLinking, name, useKeyRefList)
{
	let object = new oFF.QModelComponentList();
	object.setupOlapList(context, parentNode, hasDynamicLinking, name, oFF.XCollectionFactory.LINKED_MAP, useKeyRefList);
	return object;
};
oFF.QModelComponentList.prototype.m_hasChildOwnership = false;
oFF.QModelComponentList.prototype.m_keyRefList = null;
oFF.QModelComponentList.prototype.m_list = null;
oFF.QModelComponentList.prototype._notifyNodeChanged = function()
{
	this.notifyNodeChanged();
};
oFF.QModelComponentList.prototype._setAsParent = function(element, parent)
{
	if (this.m_hasChildOwnership)
	{
		element.setParent(parent);
	}
};
oFF.QModelComponentList.prototype.add = function(element)
{
	if (oFF.notNull(element))
	{
		this.addInternal(element);
		this.notifyNodeChanged();
	}
};
oFF.QModelComponentList.prototype.addAll = function(other)
{
	if (oFF.XCollectionUtils.hasElements(other) && other !== this)
	{
		let theList = other.getValuesAsReadOnlyList();
		let len = theList.size();
		for (let i = 0; i < len; i++)
		{
			this.addInternal(theList.get(i));
		}
		this.notifyNodeChanged();
	}
};
oFF.QModelComponentList.prototype.addInternal = function(element)
{
	if (oFF.notNull(element))
	{
		this._setAsParent(element, this);
		this.m_list.add(element);
	}
};
oFF.QModelComponentList.prototype.addKeyRef = function(keyRef)
{
	this.assertKeyRefInitialized();
	this.addKeyRefInternal(keyRef);
	this.notifyNodeChanged();
};
oFF.QModelComponentList.prototype.addKeyRefInternal = function(keyRef)
{
	this.assertKeyRefInitialized();
	this.m_keyRefList.addKeyRef(keyRef);
	let keyRefStorage = this.getKeyRefStorage();
	if (oFF.notNull(keyRefStorage))
	{
		let component = keyRefStorage.get(keyRef.getStorageName(), keyRef.getStorageGroupName(), keyRef.getStorageObjectName());
		component.addSecondaryParent(this);
	}
};
oFF.QModelComponentList.prototype.assertKeyRefInitialized = function()
{
	if (oFF.isNull(this.m_keyRefList))
	{
		oFF.noSupport();
	}
};
oFF.QModelComponentList.prototype.clear = function()
{
	let len = this.m_list.size();
	if (len > 0)
	{
		if (this.m_hasChildOwnership)
		{
			for (let i = 0; i < len; i++)
			{
				let object = this.m_list.get(i);
				let nodeContext = object;
				nodeContext.setParent(null);
			}
		}
		this.m_list.clear();
		this.notifyNodeChanged();
	}
};
oFF.QModelComponentList.prototype.contains = function(element)
{
	return this.m_list.contains(element);
};
oFF.QModelComponentList.prototype.containsKey = function(key)
{
	return this.m_list.containsKey(key);
};
oFF.QModelComponentList.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let theOrigin = other;
	this.m_hasChildOwnership = theOrigin.m_hasChildOwnership;
};
oFF.QModelComponentList.prototype.createArrayCopy = function()
{
	return this.m_list.createArrayCopy();
};
oFF.QModelComponentList.prototype.createListCopy = function()
{
	if (oFF.isNull(this.m_list))
	{
		return oFF.XList.create();
	}
	return this.m_list.createListCopy();
};
oFF.QModelComponentList.prototype.createMapByStringCopy = function()
{
	return this.m_list.createMapByStringCopy();
};
oFF.QModelComponentList.prototype.get = function(index)
{
	return this.m_list.get(index);
};
oFF.QModelComponentList.prototype.getByKey = function(key)
{
	return this.m_list.getByKey(key);
};
oFF.QModelComponentList.prototype.getIndex = function(element)
{
	return this.m_list.getIndex(element);
};
oFF.QModelComponentList.prototype.getIndexedChildren = function()
{
	return oFF.XUniversalIterator.create(this);
};
oFF.QModelComponentList.prototype.getIterator = function()
{
	return this.m_list.getIterator();
};
oFF.QModelComponentList.prototype.getKeysAsIterator = function()
{
	return this.m_list.getKeysAsIterator();
};
oFF.QModelComponentList.prototype.getKeysAsReadOnlyList = function()
{
	return this.m_list.getKeysAsReadOnlyList();
};
oFF.QModelComponentList.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.COMPONENT_LIST;
};
oFF.QModelComponentList.prototype.getValuesAsReadOnlyList = function()
{
	return this.m_list.getValuesAsReadOnlyList();
};
oFF.QModelComponentList.prototype.hasElements = function()
{
	return this.m_list.hasElements();
};
oFF.QModelComponentList.prototype.insert = function(index, element)
{
	this.insertInternal(index, element);
	this.notifyNodeChanged();
};
oFF.QModelComponentList.prototype.insertInternal = function(index, element)
{
	if (oFF.notNull(element))
	{
		this._setAsParent(element, this);
		this.m_list.insert(index, element);
	}
};
oFF.QModelComponentList.prototype.insertKeyRef = function(index, keyRef)
{
	this.assertKeyRefInitialized();
	this.m_keyRefList.insertKeyRef(index, keyRef);
	let keyRefStorage = this.getKeyRefStorage();
	if (oFF.notNull(keyRefStorage))
	{
		let component = keyRefStorage.get(keyRef.getStorageName(), keyRef.getStorageGroupName(), keyRef.getStorageObjectName());
		component.addSecondaryParent(this);
	}
	this.notifyNodeChanged();
};
oFF.QModelComponentList.prototype.isComponentNode = function()
{
	return true;
};
oFF.QModelComponentList.prototype.isEmpty = function()
{
	return this.m_list.isEmpty();
};
oFF.QModelComponentList.prototype.moveElement = function(fromIndex, toIndex)
{
	if (fromIndex !== toIndex)
	{
		this.m_list.moveElement(fromIndex, toIndex);
		this.notifyNodeChanged();
	}
};
oFF.QModelComponentList.prototype.releaseObject = function()
{
	if (oFF.notNull(this.m_list))
	{
		if (this.m_hasChildOwnership)
		{
			oFF.XCollectionUtils.releaseEntriesFromCollection(this.m_list);
		}
		oFF.XObjectExt.release(this.m_list);
		this.m_list = null;
	}
	this.m_keyRefList = null;
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QModelComponentList.prototype.removeAt = function(index)
{
	let old = this.m_list.removeAt(index);
	if (oFF.notNull(old))
	{
		this._setAsParent(old, null);
		this.notifyNodeChanged();
	}
	return old;
};
oFF.QModelComponentList.prototype.removeElement = function(element)
{
	if (oFF.notNull(element))
	{
		this.removeInternal(element);
		this.notifyNodeChanged();
	}
	return element;
};
oFF.QModelComponentList.prototype.removeInternal = function(element)
{
	this._setAsParent(element, null);
	this.m_list.removeElement(element);
};
oFF.QModelComponentList.prototype.removeKeyRef = function(keyRef)
{
	this.assertKeyRefInitialized();
	let retValue = this.m_keyRefList.removeKeyRef(keyRef);
	let keyRefStorage = this.getKeyRefStorage();
	if (oFF.notNull(keyRefStorage))
	{
		let component = keyRefStorage.get(keyRef.getStorageName(), keyRef.getStorageGroupName(), keyRef.getStorageObjectName());
		component.removeSecondaryParent(this);
	}
	this.notifyNodeChanged();
	return retValue;
};
oFF.QModelComponentList.prototype.set = function(index, element)
{
	if (oFF.isNull(element))
	{
		this.removeAt(index);
	}
	else
	{
		let old = this.m_list.get(index);
		this.m_list.set(index, element);
		if (this.m_hasChildOwnership)
		{
			element.setParent(this);
			old.setParent(null);
		}
	}
	this.notifyNodeChanged();
};
oFF.QModelComponentList.prototype.setContext = function(context)
{
	oFF.QModelComponent.prototype.setContext.call( this , context);
	if (this.m_hasChildOwnership)
	{
		let size = this.m_list.size();
		for (let i = 0; i < size; i++)
		{
			let element = this.m_list.get(i);
			element.setContext(context);
		}
	}
};
oFF.QModelComponentList.prototype.setHasChildOwnership = function(hasChildOwnership)
{
	this.m_hasChildOwnership = hasChildOwnership;
};
oFF.QModelComponentList.prototype.setupOlapList = function(context, parentNode, hasChildOwnership, name, type, useKeyRefList)
{
	this.setupModelComponentWithName(context, parentNode, name);
	this.m_hasChildOwnership = hasChildOwnership;
	if (useKeyRefList)
	{
		this.m_keyRefList = oFF.QKeyRefList.create(context.getKeyRefStorage(), type);
		this.m_list = this.m_keyRefList;
	}
	else
	{
		this.m_list = oFF.XCollectionFactory.createNamedList(type);
	}
};
oFF.QModelComponentList.prototype.size = function()
{
	return this.m_list.size();
};
oFF.QModelComponentList.prototype.sortByComparator = function(comparator)
{
	this.m_list.sortByComparator(comparator);
	this.notifyNodeChanged();
};
oFF.QModelComponentList.prototype.sortByDirection = function(sortDirection)
{
	this.m_list.sortByDirection(sortDirection);
	this.notifyNodeChanged();
};
oFF.QModelComponentList.prototype.sublist = function(beginIndex, endIndex)
{
	return this.m_list.sublist(beginIndex, endIndex);
};

oFF.QCalculatedDimension = function() {};
oFF.QCalculatedDimension.prototype = new oFF.QDimension();
oFF.QCalculatedDimension.prototype._ff_c = "QCalculatedDimension";

oFF.QCalculatedDimension._createCalculatedDimension = function(context, parentNode, calculatedDimensionName)
{
	let dim = new oFF.QCalculatedDimension();
	dim.assertCalcDimSupport(context);
	dim.setName(calculatedDimensionName);
	dim.setupDimension(context, parentNode);
	dim.setupCalculatedDimension(context);
	return dim;
};
oFF.QCalculatedDimension.prototype.m_calcDimCapabilities = null;
oFF.QCalculatedDimension.prototype.m_calcMetadata = null;
oFF.QCalculatedDimension.prototype.m_fieldMappings = null;
oFF.QCalculatedDimension.prototype.m_isHidden = false;
oFF.QCalculatedDimension.prototype.m_joinFields = null;
oFF.QCalculatedDimension.prototype.m_joinType = null;
oFF.QCalculatedDimension.prototype.m_preQueryName = null;
oFF.QCalculatedDimension.prototype.m_supportedAxesTypes = null;
oFF.QCalculatedDimension.prototype.m_supportedFieldLayoutType = null;
oFF.QCalculatedDimension.prototype.addFieldMapping = function(fieldMapping)
{
	if (!this.m_fieldMappings.contains(fieldMapping))
	{
		this.m_fieldMappings.add(fieldMapping);
		let presentation = oFF.PresentationType.UNDEFINED;
		if (this.m_fieldMappings.size() === 1)
		{
			presentation = oFF.PresentationType.KEY;
		}
		this.addNewCalcFieldInternal(fieldMapping.getLocaleFieldName(), presentation);
	}
};
oFF.QCalculatedDimension.prototype.addFieldMappingByString = function(localeFieldName, referencedFieldName)
{
	this.addFieldMapping(oFF.QFieldNamePair.create(localeFieldName, referencedFieldName));
};
oFF.QCalculatedDimension.prototype.addFieldToParent = function(newField)
{
	this.getFieldContainerBase().addDefaultResultSetField(newField);
	this.getResultSetFields().add(newField);
	let parentComp = this.getParentComponent();
	if (oFF.notNull(parentComp))
	{
		if (parentComp.getComponentType() === oFF.OlapComponentType.DIMENSION_MANAGER)
		{
			parentComp.addField(newField, this);
		}
		else if (parentComp.getComponentType().isTypeOf(oFF.DimensionType.CALCULATED_DIMENSION))
		{
			parentComp.addFieldToParent(newField);
		}
	}
};
oFF.QCalculatedDimension.prototype.addJoinField = function(joinField)
{
	if (!this.m_joinFields.contains(joinField))
	{
		this.m_joinFields.add(joinField);
	}
};
oFF.QCalculatedDimension.prototype.addJoinFieldByString = function(localeFieldName, referencedFieldName)
{
	this.addJoinField(oFF.QFieldNamePair.create(localeFieldName, referencedFieldName));
};
oFF.QCalculatedDimension.prototype.addNewCalcFieldInternal = function(fieldName, presentation)
{
	let newField = this.getFieldContainerBase().addNewField(presentation, fieldName, null);
	this.addFieldToParent(newField);
	return newField;
};
oFF.QCalculatedDimension.prototype.assertCalcDimSupport = function(context)
{
	if (!context.getModelCapabilities().supportsCalculatedDimensions())
	{
		throw oFF.XException.createRuntimeException("CalculatedDimensions are not supported");
	}
};
oFF.QCalculatedDimension.prototype.clearFieldMappings = function()
{
	this.queueEventing();
	this.getFieldContainerBase().clearAllFields();
	this.m_fieldMappings.clear();
	this.resumeEventing();
};
oFF.QCalculatedDimension.prototype.clearJoinFields = function()
{
	this.m_joinFields.clear();
};
oFF.QCalculatedDimension.prototype.copyCalculatedDimension = function(other)
{
	oFF.QDimension.prototype.copyDimension.call( this , other);
	this.m_preQueryName = other.m_preQueryName;
	this.m_joinType = other.m_joinType;
	this.m_isHidden = other.m_isHidden;
	let size = other.m_joinFields.size();
	let idx;
	for (idx = 0; idx < size; idx++)
	{
		let otherJoinFields = other.m_joinFields.get(idx);
		this.m_joinFields.add(oFF.QFieldNamePair.create(otherJoinFields.getLocaleFieldName(), otherJoinFields.getReferencedFieldName()));
	}
	size = other.m_fieldMappings.size();
	for (idx = 0; idx < size; idx++)
	{
		let otherFieldMapping = other.m_fieldMappings.get(idx);
		this.m_fieldMappings.add(oFF.QFieldNamePair.create(otherFieldMapping.getLocaleFieldName(), otherFieldMapping.getReferencedFieldName()));
	}
};
oFF.QCalculatedDimension.prototype.copyFromInternal = function(other, flags)
{
	this.copyCalculatedDimension(other);
};
oFF.QCalculatedDimension.prototype.getFieldMappings = function()
{
	return this.m_fieldMappings;
};
oFF.QCalculatedDimension.prototype.getJoinFields = function()
{
	return this.m_joinFields;
};
oFF.QCalculatedDimension.prototype.getJoinType = function()
{
	return this.m_joinType;
};
oFF.QCalculatedDimension.prototype.getModelCapabilities = function()
{
	return this.m_calcDimCapabilities;
};
oFF.QCalculatedDimension.prototype.getPreQueryName = function()
{
	return this.m_preQueryName;
};
oFF.QCalculatedDimension.prototype.isHidden = function()
{
	return this.m_isHidden;
};
oFF.QCalculatedDimension.prototype.releaseObject = function()
{
	this.m_preQueryName = null;
	this.m_joinType = null;
	this.m_supportedAxesTypes = oFF.XObjectExt.release(this.m_supportedAxesTypes);
	this.m_joinFields = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_joinFields);
	this.m_fieldMappings = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_fieldMappings);
	this.m_supportedFieldLayoutType = oFF.XObjectExt.release(this.m_supportedFieldLayoutType);
	oFF.QDimension.prototype.releaseObject.call( this );
	this.m_calcMetadata = oFF.XObjectExt.release(this.m_calcMetadata);
};
oFF.QCalculatedDimension.prototype.removeFieldMappingAt = function(index)
{
	let fieldContainerBase = this.getFieldContainerBase();
	fieldContainerBase.removeFieldByName(this.m_fieldMappings.get(index).getLocaleFieldName());
	this.m_fieldMappings.removeAt(index);
	if (index === 0 && this.m_fieldMappings.size() > 0)
	{
		let newKeyFieldPair = this.m_fieldMappings.get(0);
		fieldContainerBase.removeFieldByName(newKeyFieldPair.getLocaleFieldName());
		this.m_fieldMappings.removeAt(0);
		this.addFieldMapping(newKeyFieldPair);
	}
};
oFF.QCalculatedDimension.prototype.removeJoinFieldAt = function(index)
{
	this.m_joinFields.removeAt(index);
};
oFF.QCalculatedDimension.prototype.setDimensionType = function(type)
{
	this.getMetadataBase().setDimensionType(type);
};
oFF.QCalculatedDimension.prototype.setHidden = function(isHidden)
{
	this.m_isHidden = isHidden;
};
oFF.QCalculatedDimension.prototype.setJoinType = function(joinType)
{
	this.m_joinType = joinType;
};
oFF.QCalculatedDimension.prototype.setParent = function(parent)
{
	oFF.QDimension.prototype.setParent.call( this , parent);
	this.m_calcDimCapabilities.updateContext(this);
};
oFF.QCalculatedDimension.prototype.setPreQueryName = function(preQueryName)
{
	this.m_preQueryName = preQueryName;
};
oFF.QCalculatedDimension.prototype.setSelectorFieldLayoutType = function(type)
{
	if (oFF.notNull(this.m_selectorFieldLayoutType) && oFF.notNull(type))
	{
		this.assertSupportsFieldLayoutType(type);
		if (this.m_selectorFieldLayoutType !== type)
		{
			this.m_selectorFieldLayoutType = type;
			this.notifyNodeChanged();
		}
	}
};
oFF.QCalculatedDimension.prototype.setupCalculatedDimension = function(context)
{
	let cacheKey = oFF.QCacheKey.createByContextForDimension(context, this.getName(), null);
	let metadata = oFF.QDimensionMetadata.create(cacheKey);
	metadata.setDimensionType(oFF.DimensionType.CALCULATED_DIMENSION);
	metadata.setIsGroupingDimension(false);
	metadata.addSupportedAxis(oFF.AxisType.ROWS);
	metadata.addSupportedAxis(oFF.AxisType.COLUMNS);
	metadata.addSupportedAxis(oFF.AxisType.FREE);
	metadata.addSupportedAxis(oFF.AxisType.REPOSITORY);
	this.setMetadata(metadata);
	this.m_calcMetadata = metadata;
	this.setDefaultAxisType(oFF.AxisType.FREE);
	this.m_joinType = oFF.JoinType.LEFT_OUTER;
	this.m_joinFields = oFF.XList.create();
	this.m_fieldMappings = oFF.XList.create();
	this.m_readModeManager.addSupportedReadMode(oFF.QContextType.RESULT_SET, oFF.QMemberReadMode.BOOKED);
	this.m_readModeManager.addSupportedReadMode(oFF.QContextType.RESULT_SET, oFF.QMemberReadMode.MASTER);
	this.m_readModeManager.setReadModeDefault(oFF.QContextType.RESULT_SET, oFF.QMemberReadMode.BOOKED, true);
	this.m_readModeManager.addSupportedReadMode(oFF.QContextType.SELECTOR, oFF.QMemberReadMode.BOOKED);
	this.m_readModeManager.addSupportedReadMode(oFF.QContextType.SELECTOR, oFF.QMemberReadMode.MASTER);
	this.m_readModeManager.setReadModeDefault(oFF.QContextType.SELECTOR, oFF.QMemberReadMode.BOOKED, true);
	this.m_calcDimCapabilities = oFF.QFactory.createCapabilitiesDecorator(this);
	this.m_calcDimCapabilities.setSupportsHierarchyMetadata(false);
	this.m_calcDimCapabilities.setSupportsHierarchyLevelMetadata(false);
	this.m_calcDimCapabilities.setSupportsDimensionHierarchyLevels(false);
	this.getHierarchyManagerBase().setDefaultHierarchyName("");
	this.m_isHidden = false;
};
oFF.QCalculatedDimension.prototype.supportsTotals = function()
{
	return this.m_resultStructureController.supportsTotals();
};
oFF.QCalculatedDimension.prototype.validateJoinFields = function(queryModel, messageManager)
{
	if (this.getJoinType() === oFF.JoinType.INNER)
	{
		let joinFieldNames = oFF.XHashSetOfString.create();
		for (let idxJoinField = 0; idxJoinField < this.m_joinFields.size(); idxJoinField++)
		{
			let fieldNamePair = this.m_joinFields.get(idxJoinField);
			joinFieldNames.add(fieldNamePair.getLocaleFieldName());
		}
		let structureMembers = oFF.XListOfNameObject.create();
		let accountDimension = queryModel.getAccountDimension();
		if (oFF.isNull(accountDimension))
		{
			structureMembers.addAll(queryModel.getPrimaryCalculationDimension().getLoadedStructureMembers());
		}
		else
		{
			structureMembers.addAll(queryModel.getPrimaryCalculationDimension().getLoadedStructureMembers());
			structureMembers.addAll(queryModel.getSecondaryCalculationDimension().getLoadedStructureMembers());
		}
		let calculationNames = oFF.XHashSetOfString.create();
		for (let idxStructureMember = 0; idxStructureMember < structureMembers.size(); idxStructureMember++)
		{
			let structureMember = structureMembers.get(idxStructureMember);
			if (oFF.notNull(structureMember) && !structureMember.isReleased() && structureMember.getMemberType() !== oFF.MemberType.BASIC_MEASURE)
			{
				if (structureMember.isIgnoringAllExternalDimensions())
				{
					calculationNames.add(structureMember.getAliasOrMemberName());
				}
				else
				{
					let ignoredExternalDimensions = oFF.XList.create();
					ignoredExternalDimensions.addAll(structureMember.getIgnoredExternalDimensions());
					if (structureMember.getMemberType() === oFF.MemberType.VARIANCE)
					{
						ignoredExternalDimensions.addAll(structureMember.getBaseIgnoredExternalDimensions());
						ignoredExternalDimensions.addAll(structureMember.getReferenceIgnoredExternalDimensions());
					}
					for (let idxIgnoredDim = 0; idxIgnoredDim < ignoredExternalDimensions.size(); idxIgnoredDim++)
					{
						if (joinFieldNames.contains(ignoredExternalDimensions.get(idxIgnoredDim)))
						{
							calculationNames.add(structureMember.getAliasOrMemberName());
							break;
						}
					}
				}
			}
		}
		if (calculationNames.size() > 0)
		{
			let names = calculationNames.getValuesAsReadOnlyList();
			let message = names.get(0);
			for (let idxName = 1; idxName < names.size(); idxName++)
			{
				message = oFF.XStringUtils.concatenate3(message, ",", names.get(idxName));
			}
			messageManager.addWarning(oFF.ErrorCodes.JOIN_FIELD_SET_AS_IGNORED_EXTERNAL_DIMENSION, message);
		}
	}
};

oFF.QDimensionMember = function() {};
oFF.QDimensionMember.prototype = new oFF.QAbstractDimensionMember();
oFF.QDimensionMember.prototype._ff_c = "QDimensionMember";

oFF.QDimensionMember.createDimensionMember = function(context, dimension)
{
	let member = new oFF.QDimensionMember();
	member.setupDimensionMember(context, dimension);
	return member;
};
oFF.QDimensionMember.prototype.m_attributeMemberMap = null;
oFF.QDimensionMember.prototype.m_nameValueException = null;
oFF.QDimensionMember.prototype.m_overrideText = null;
oFF.QDimensionMember.prototype.m_resultVisibility = null;
oFF.QDimensionMember.prototype.m_udhKey = null;
oFF.QDimensionMember.prototype._assertPresentationTypeSelf = function(presentation)
{
	if (presentation !== oFF.PresentationType.SELF)
	{
		oFF.noSupport();
	}
};
oFF.QDimensionMember.prototype.addFieldValue = function(fieldValue)
{
	this.addFieldValueInternal(fieldValue);
};
oFF.QDimensionMember.prototype.addFieldValueInternal = function(newValue)
{
	let fieldName = newValue.getField().getName();
	let dimension = this.getDimension();
	if (oFF.notNull(dimension) && dimension.hasAlternativeFieldValuesDefined())
	{
		let altFieldValue = dimension.getAlternativeFieldValueLanguageOption(dimension.isHierarchyAssignedAndActive(), this.getName(), fieldName);
		if (oFF.notNull(altFieldValue))
		{
			newValue.setValue(altFieldValue);
			newValue.setFormattedValue(altFieldValue.getStringRepresentation());
		}
	}
	this.m_attributeMemberMap.put(fieldName, newValue);
};
oFF.QDimensionMember.prototype.compareTo = function(objectToCompare)
{
	if (oFF.isNull(objectToCompare))
	{
		return -1;
	}
	if (objectToCompare === this)
	{
		return 0;
	}
	let otherMember = objectToCompare;
	let compare = oFF.XString.compare(this.getName(), otherMember.getName());
	if (compare === 0)
	{
		compare = oFF.XString.compare(this.getText(), otherMember.getText());
	}
	return compare;
};
oFF.QDimensionMember.prototype.copyFromInternal = function(other, flags)
{
	let originDimensionMember = other;
	oFF.QAbstractDimensionMember.prototype.copyAbstractDimensionMember.call( this , originDimensionMember);
	let context = this.getContext();
	let it = originDimensionMember.m_attributeMemberMap.getKeysAsIterator();
	while (it.hasNext())
	{
		let key = it.next();
		let cloneFieldValue = originDimensionMember.m_attributeMemberMap.getByKey(key).cloneOlapComponent(context, this);
		this.m_attributeMemberMap.put(key, cloneFieldValue);
	}
	this.m_nameValueException = originDimensionMember.m_nameValueException;
	this.m_resultVisibility = originDimensionMember.m_resultVisibility;
	this.m_overrideText = originDimensionMember.m_overrideText;
	this.m_udhKey = oFF.notNull(originDimensionMember.m_udhKey) ? originDimensionMember.m_udhKey.clone() : null;
};
oFF.QDimensionMember.prototype.createAndAddField = function(field)
{
	let newMember = oFF.QFieldValue.create(field.getContext(), field, this);
	this.addFieldValueInternal(newMember);
	return newMember;
};
oFF.QDimensionMember.prototype.createAndAddFieldValueWithBoolean = function(field, value)
{
	return this.createAndAddFieldWithXvalue(field, oFF.XBooleanValue.create(value));
};
oFF.QDimensionMember.prototype.createAndAddFieldValueWithDate = function(field, value)
{
	return this.createAndAddFieldWithXvalue(field, value);
};
oFF.QDimensionMember.prototype.createAndAddFieldValueWithDouble = function(field, value)
{
	return this.createAndAddFieldWithXvalue(field, oFF.XDoubleValue.create(value));
};
oFF.QDimensionMember.prototype.createAndAddFieldValueWithInteger = function(field, value)
{
	return this.createAndAddFieldWithXvalue(field, oFF.XIntegerValue.create(value));
};
oFF.QDimensionMember.prototype.createAndAddFieldValueWithLong = function(field, value)
{
	return this.createAndAddFieldWithXvalue(field, oFF.XLongValue.create(value));
};
oFF.QDimensionMember.prototype.createAndAddFieldValueWithString = function(field, value)
{
	return this.createAndAddFieldWithXvalue(field, oFF.XStringValue.create(value));
};
oFF.QDimensionMember.prototype.createAndAddFieldValueWithTime = function(field, value)
{
	return this.createAndAddFieldWithXvalue(field, value);
};
oFF.QDimensionMember.prototype.createAndAddFieldWithValue = function(field, value)
{
	if (oFF.notNull(value) && value.getValueType() !== null)
	{
		return this.createAndAddFieldWithXvalue(field, value.clone());
	}
	return null;
};
oFF.QDimensionMember.prototype.createAndAddFieldWithXvalue = function(field, value)
{
	let newMember = oFF.QFieldValue.createWithValue(field.getContext(), field, this, value);
	this.addFieldValueInternal(newMember);
	return newMember;
};
oFF.QDimensionMember.prototype.createFilterOperation = function()
{
	return oFF.QFactory.createFilterOperation(this.getContext(), this.getDimension().getKeyField());
};
oFF.QDimensionMember.prototype.getAllFieldValues = function()
{
	return this.m_attributeMemberMap;
};
oFF.QDimensionMember.prototype.getBoolean = function()
{
	return false;
};
oFF.QDimensionMember.prototype.getDateByPresentation = function(presentation)
{
	this._assertPresentationTypeSelf(presentation);
	return this.getDate();
};
oFF.QDimensionMember.prototype.getDimensionMemberNameValueException = function()
{
	return this.m_nameValueException;
};
oFF.QDimensionMember.prototype.getDisplayDescription = function()
{
	let displayDescription = this.getFieldValueString(oFF.AlternativeFieldValue.DISPLAY_DESCRIPTION);
	return oFF.XStringUtils.isNotNullAndNotEmpty(displayDescription) ? displayDescription : oFF.QAbstractDimensionMember.prototype.getDisplayDescription.call( this );
};
oFF.QDimensionMember.prototype.getDisplayName = function()
{
	let name = this.getFieldValueString(oFF.AlternativeFieldValue.DISPLAY_NAME);
	let isAbap = this.getQueryManager().getSystemType().isTypeOf(oFF.SystemType.ABAP);
	if (isAbap && this.getSession().hasFeature(oFF.FeatureToggleOlap.PREVENT_TECHNICAL_KEYS_IN_UI) && !this.m_memberType.isTypeOf(oFF.MemberType.FORMULA))
	{
		return name;
	}
	if (oFF.XStringUtils.isNullOrEmpty(name))
	{
		let fieldValue = this.getFieldValue(this.getDimension().getDisplayKeyField());
		if (oFF.notNull(fieldValue))
		{
			name = fieldValue.getValue().getStringRepresentation();
		}
	}
	if (oFF.XStringUtils.isNullOrEmpty(name))
	{
		name = this.getFallbackName();
	}
	return name;
};
oFF.QDimensionMember.prototype.getDoubleByPresentation = function(presentation)
{
	this._assertPresentationTypeSelf(presentation);
	return this.getDouble();
};
oFF.QDimensionMember.prototype.getFallbackName = function()
{
	return this.getName();
};
oFF.QDimensionMember.prototype.getFieldValue = function(field)
{
	return oFF.isNull(field) ? null : this.m_attributeMemberMap.getByKey(field.getName());
};
oFF.QDimensionMember.prototype.getFieldValueString = function(fieldValue)
{
	let alternativeFieldValue = this.getDimension().getAlternativeFieldValue(false, this.getName(), fieldValue.getName(), "");
	if (oFF.isNull(alternativeFieldValue) || oFF.XStringUtils.isNullOrEmpty(alternativeFieldValue.getStringRepresentation()))
	{
		alternativeFieldValue = this.getDimension().getAlternativeFieldValue(false, this.getFallbackName(), fieldValue.getName(), "");
	}
	return oFF.isNull(alternativeFieldValue) ? null : alternativeFieldValue.getStringRepresentation();
};
oFF.QDimensionMember.prototype.getFormattedValue = function()
{
	let dimension = this.getDimension();
	if (oFF.notNull(dimension))
	{
		let attributeByType = dimension.getFirstFieldByType(oFF.PresentationType.KEY);
		if (oFF.notNull(attributeByType))
		{
			let attributeMember = this.m_attributeMemberMap.getByKey(attributeByType.getName());
			if (oFF.notNull(attributeMember))
			{
				return attributeMember.getFormattedValue();
			}
		}
	}
	return null;
};
oFF.QDimensionMember.prototype.getIntByPresentation = function(presentation)
{
	this._assertPresentationTypeSelf(presentation);
	return this.getInteger();
};
oFF.QDimensionMember.prototype.getKeyFieldValue = function()
{
	let keyField = this.getDimension().getKeyField();
	return this.getFieldValue(keyField);
};
oFF.QDimensionMember.prototype.getOriginalText = function()
{
	let text = null;
	let dimension = this.getDimension();
	if (oFF.notNull(dimension) && dimension.hasAlternativeFieldValuesDefined())
	{
		let textField = dimension.getTextField();
		if (oFF.notNull(textField))
		{
			let textFieldName = textField.getName();
			let name = this.getName();
			let hierarchyAssignedAndActive = dimension.isHierarchyAssignedAndActive();
			let altFieldValue = dimension.getAlternativeFieldValueLanguageOption(hierarchyAssignedAndActive, name, textFieldName);
			if (oFF.notNull(altFieldValue))
			{
				text = altFieldValue.getStringRepresentation();
			}
			if (oFF.isNull(text))
			{
				altFieldValue = dimension.getAlternativeFieldValue(hierarchyAssignedAndActive, name, textFieldName, null);
				if (oFF.notNull(altFieldValue))
				{
					text = altFieldValue.getStringRepresentation();
				}
			}
		}
	}
	if (oFF.isNull(text))
	{
		text = oFF.QAbstractDimensionMember.prototype.getText.call( this );
	}
	return text;
};
oFF.QDimensionMember.prototype.getOverrideText = function()
{
	return this.m_overrideText;
};
oFF.QDimensionMember.prototype.getPolygonByPresentation = function(presentation)
{
	this._assertPresentationTypeSelf(presentation);
	return this.getPolygon();
};
oFF.QDimensionMember.prototype.getResultSetFieldValues = function()
{
	let rsAttributeMembers = oFF.XList.create();
	let resultSetAttributes = this.getDimension().getResultSetFields();
	for (let i = 0; i < resultSetAttributes.size(); i++)
	{
		let field = resultSetAttributes.getFieldAt(i);
		let fieldValue = this.getFieldValue(field);
		rsAttributeMembers.add(fieldValue);
	}
	return rsAttributeMembers;
};
oFF.QDimensionMember.prototype.getResultVisibility = function()
{
	return this.m_resultVisibility;
};
oFF.QDimensionMember.prototype.getSelectField = function()
{
	return this.getDimension().getFlatKeyField();
};
oFF.QDimensionMember.prototype.getSelectHierarchyName = function()
{
	return null;
};
oFF.QDimensionMember.prototype.getSelectMemberType = function()
{
	return null;
};
oFF.QDimensionMember.prototype.getSelectValue = function()
{
	let fieldValue = this.getFieldValue(this.getSelectField());
	return fieldValue.getSelectValue();
};
oFF.QDimensionMember.prototype.getSharedOverrideText = function()
{
	let overrideText = null;
	if (this.getOlapEnv() !== null && this.getApplication() !== null && this.getSession() !== null && this.getSession().hasFeature(oFF.FeatureToggleOlap.MEMBER_OVERRIDE_TEXTS))
	{
		let dimension = this.getDimension();
		if (this.getQueryModel() !== null && oFF.notNull(dimension) && dimension.getCacheKey() !== null)
		{
			let cacheKey = dimension.getCacheKey();
			let olapEnvCube = this.getOlapEnv().getCubeContainer(cacheKey);
			if (oFF.notNull(olapEnvCube))
			{
				let storageName = this.getQueryModel().getQueryManager().getClientQueryObjectStorageName();
				let datasetId = this.getQueryModel().getDatasetId();
				overrideText = olapEnvCube.getDimensionMemberOverrideTextByDatasetId(storageName, dimension.getName(), this.getName(), datasetId);
			}
		}
	}
	return overrideText;
};
oFF.QDimensionMember.prototype.getStringByPresentation = function(presentation)
{
	this._assertPresentationTypeSelf(presentation);
	return this.getString();
};
oFF.QDimensionMember.prototype.getText = function()
{
	let text = this.m_overrideText;
	if (oFF.isNull(text))
	{
		text = this.getSharedOverrideText();
	}
	if (oFF.isNull(text))
	{
		text = this.getOriginalText();
	}
	return text;
};
oFF.QDimensionMember.prototype.getTimeSpanByPresentation = function(presentation)
{
	this._assertPresentationTypeSelf(presentation);
	return this.getTimeSpan();
};
oFF.QDimensionMember.prototype.getUdhKey = function()
{
	return this.m_udhKey;
};
oFF.QDimensionMember.prototype.getValue = function()
{
	let keyField = this.getDimension().getKeyField();
	if (oFF.notNull(keyField))
	{
		let fieldValue = this.getFieldValue(keyField);
		if (oFF.notNull(fieldValue))
		{
			let value = fieldValue.getValue();
			if (oFF.notNull(value))
			{
				return value;
			}
		}
	}
	let name = this.getName();
	if (oFF.isNull(name))
	{
		return null;
	}
	if (oFF.notNull(keyField))
	{
		let valueType = keyField.getValueType();
		if (valueType === oFF.XValueType.INTEGER)
		{
			return oFF.XIntegerValue.create(oFF.XInteger.convertFromString(name));
		}
		else if (valueType === oFF.XValueType.DATE)
		{
			return oFF.XDate.createDateFromIsoFormat(name);
		}
		else if (valueType === oFF.XValueType.DATE_TIME)
		{
			return oFF.XDateTime.createDateTimeFromIsoFormat(name);
		}
		else if (valueType === oFF.XValueType.TIME)
		{
			return oFF.XTime.createTimeFromIsoFormat(name);
		}
	}
	return oFF.XStringValue.create(name);
};
oFF.QDimensionMember.prototype.getValueAsString = function()
{
	return oFF.XValueUtil.getString(this.getValue());
};
oFF.QDimensionMember.prototype.hasOverrideTextDefined = function()
{
	return oFF.notNull(this.m_overrideText) || this.getSharedOverrideText() !== null;
};
oFF.QDimensionMember.prototype.hasValue = function()
{
	return this.getKeyFieldValue() !== null;
};
oFF.QDimensionMember.prototype.isDisplayDescriptionSet = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.getFieldValueString(oFF.AlternativeFieldValue.DISPLAY_DESCRIPTION));
};
oFF.QDimensionMember.prototype.isDisplayNameSet = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.getFieldValueString(oFF.AlternativeFieldValue.DISPLAY_NAME));
};
oFF.QDimensionMember.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let otherMember = other;
	return oFF.XString.isEqual(this.getName(), otherMember.getName()) && oFF.XString.isEqual(this.getText(), otherMember.getText());
};
oFF.QDimensionMember.prototype.loadBLOBForField = function(syncType, listener, customIdentifier, field)
{
	let fieldValue = this.getFieldValue(field);
	return this.getQueryManager().processBLOB(syncType, listener, customIdentifier, fieldValue.getFormattedValueForImageRequest());
};
oFF.QDimensionMember.prototype.mergeDeepRecursive = function(settings, other)
{
	let otherMember = other;
	let keys = otherMember.m_attributeMemberMap.getKeysAsIterator();
	while (keys.hasNext())
	{
		let key = keys.next();
		let otherValue = otherMember.m_attributeMemberMap.getByKey(key);
		let myValue = this.m_attributeMemberMap.getByKey(key);
		if (oFF.notNull(myValue))
		{
			myValue.mergeDeepRecursive(settings, otherValue);
		}
	}
	this.setText(otherMember.getText());
};
oFF.QDimensionMember.prototype.releaseObject = function()
{
	this.m_attributeMemberMap = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_attributeMemberMap);
	this.m_nameValueException = null;
	this.m_resultVisibility = null;
	this.m_overrideText = null;
	this.m_udhKey = oFF.XObjectExt.release(this.m_udhKey);
	oFF.QAbstractDimensionMember.prototype.releaseObject.call( this );
};
oFF.QDimensionMember.prototype.setDimensionMemberNameValueException = function(valueException)
{
	this.m_nameValueException = valueException;
};
oFF.QDimensionMember.prototype.setOverrideText = function(overrideText)
{
	if (!oFF.XString.isEqual(overrideText, "") && !oFF.XString.isEqual(overrideText, this.m_overrideText))
	{
		let oldValue = this.m_overrideText;
		this.m_overrideText = overrideText;
		this.notifyPropertyStringChanged(oFF.QStructureMemberProperties.QY_OVERRIDE_TEXT, oldValue, overrideText);
	}
};
oFF.QDimensionMember.prototype.setResultVisibility = function(memberVisibility)
{
	if (!this.getModelCapabilities().supportsMemberVisibility())
	{
		oFF.noSupport();
	}
	let oldValue = this.m_resultVisibility;
	this.m_resultVisibility = memberVisibility;
	this.notifyPropertyConstantChanged(oFF.QDimensionMemberProperties.QY_VISIBILITY, oldValue, memberVisibility);
};
oFF.QDimensionMember.prototype.setUdhKey = function(udhKey)
{
	this.m_udhKey = udhKey;
};
oFF.QDimensionMember.prototype.setupDimensionMember = function(context, dimension)
{
	this.setupAbstractDimensionMember(context, dimension);
	this.setType(oFF.MemberType.MEMBER);
	this.m_attributeMemberMap = oFF.XHashMapByString.create();
};

oFF.QDimensionMemberResult = function() {};
oFF.QDimensionMemberResult.prototype = new oFF.QAbstractDimensionMember();
oFF.QDimensionMemberResult.prototype._ff_c = "QDimensionMemberResult";

oFF.QDimensionMemberResult.QY_TOTAL = "Total";
oFF.QDimensionMemberResult.QY_TOTAL_INCLUDING = "Total Including";
oFF.QDimensionMemberResult.QY_TOTAL_REMAINING = "Total Remaining";
oFF.QDimensionMemberResult.createQDimensionMember = function(context, dimension, resultMemberType)
{
	let member = new oFF.QDimensionMemberResult();
	member.setupQDimensionMember(context, dimension, resultMemberType);
	return member;
};
oFF.QDimensionMemberResult.prototype.m_fieldValues = null;
oFF.QDimensionMemberResult.prototype.m_resultStructureElement = null;
oFF.QDimensionMemberResult.prototype.m_value = null;
oFF.QDimensionMemberResult.prototype.addFieldValue = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.createAndAddField = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.createAndAddFieldValueWithBoolean = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.createAndAddFieldValueWithDate = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.createAndAddFieldValueWithDouble = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.createAndAddFieldValueWithInteger = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.createAndAddFieldValueWithLong = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.createAndAddFieldValueWithString = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.createAndAddFieldValueWithTime = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.createAndAddFieldWithValue = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.createFilterOperation = function()
{
	return null;
};
oFF.QDimensionMemberResult.prototype.getAllFieldValues = function()
{
	return this.m_fieldValues;
};
oFF.QDimensionMemberResult.prototype.getBoolean = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getDate = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getDateByPresentation = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getDateTime = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getDimensionMemberNameValueException = function()
{
	return oFF.ValueException.NORMAL;
};
oFF.QDimensionMemberResult.prototype.getDouble = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getDoubleByPresentation = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getErrorValue = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getFieldValue = function(field)
{
	return this.m_fieldValues.getValuesAsReadOnlyList().get(0);
};
oFF.QDimensionMemberResult.prototype.getFormattedValue = function()
{
	return this.m_value.getString();
};
oFF.QDimensionMemberResult.prototype.getGeometry = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getIntByPresentation = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getInteger = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getKeyFieldValue = function()
{
	return this.m_fieldValues.getValuesAsReadOnlyList().get(0);
};
oFF.QDimensionMemberResult.prototype.getLineString = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getLong = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getMultiLineString = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getMultiPoint = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getMultiPolygon = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getNull = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getOriginalText = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getOverrideText = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getPoint = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getPolygon = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getPolygonByPresentation = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getPropertiesValue = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getResultSetFieldValues = function()
{
	return this.m_fieldValues.getValuesAsReadOnlyList();
};
oFF.QDimensionMemberResult.prototype.getResultVisibility = function()
{
	return this.getDimension().getResultVisibilityByElement(this.m_resultStructureElement);
};
oFF.QDimensionMemberResult.prototype.getSelectField = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getSelectHierarchyName = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getSelectMemberType = function()
{
	return null;
};
oFF.QDimensionMemberResult.prototype.getSelectValue = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getString = function()
{
	return this.m_value.getString();
};
oFF.QDimensionMemberResult.prototype.getStringByPresentation = function(presentation)
{
	return this.m_value.getString();
};
oFF.QDimensionMemberResult.prototype.getStructureListValue = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getStructureValue = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getTime = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getTimeSpan = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getTimeSpanByPresentation = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getUdhKey = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.getValue = function()
{
	return this.m_value;
};
oFF.QDimensionMemberResult.prototype.getValueAsString = function()
{
	return this.m_value.getString();
};
oFF.QDimensionMemberResult.prototype.getValueType = function()
{
	return oFF.XValueType.STRING;
};
oFF.QDimensionMemberResult.prototype.hasOverrideTextDefined = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.hasValue = function()
{
	return oFF.notNull(this.m_value);
};
oFF.QDimensionMemberResult.prototype.isDisplayDescriptionSet = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.isDisplayNameSet = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.loadBLOBForField = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.releaseObject = function()
{
	this.m_resultStructureElement = null;
	this.m_value = oFF.XObjectExt.release(this.m_value);
	this.m_fieldValues = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_fieldValues);
	oFF.QAbstractDimensionMember.prototype.releaseObject.call( this );
};
oFF.QDimensionMemberResult.prototype.setDimensionMemberNameValueException = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.setOverrideText = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.setResultVisibility = function(memberVisibility)
{
	this.getDimension().setResultVisibilityByElement(this.m_resultStructureElement, memberVisibility);
};
oFF.QDimensionMemberResult.prototype.setType = function(type)
{
	if (!type.isTypeOf(oFF.MemberType.RESULT))
	{
		throw oFF.XException.createIllegalStateException("Invalid member type for result member!");
	}
	if (type === oFF.MemberType.RESULT)
	{
		this.m_value = oFF.XStringValue.create(oFF.QDimensionMemberResult.QY_TOTAL);
	}
	else if (type === oFF.MemberType.CONDITION_RESULT)
	{
		this.m_value = oFF.XStringValue.create(oFF.QDimensionMemberResult.QY_TOTAL_INCLUDING);
	}
	else
	{
		this.m_value = oFF.XStringValue.create(oFF.QDimensionMemberResult.QY_TOTAL_REMAINING);
	}
	this.m_memberType = type;
	this.m_resultStructureElement = oFF.ResultStructureElement.getStructureElementByMemberType(type);
};
oFF.QDimensionMemberResult.prototype.setUdhKey = oFF.noSupport;
oFF.QDimensionMemberResult.prototype.setupQDimensionMember = function(context, dimension, resultMemberType)
{
	this.setupAbstractDimensionMember(context, dimension);
	this.setType(resultMemberType);
	let literalFieldValue = oFF.QFieldValue.createLiteral(this.getContext(), dimension.getKeyField());
	literalFieldValue.setValue(this.m_value);
	this.m_fieldValues = oFF.XHashMapByString.create();
	this.m_fieldValues.put(dimension.getKeyField().getName(), literalFieldValue);
};

oFF.QFieldFormulaCalc = function() {};
oFF.QFieldFormulaCalc.prototype = new oFF.QFieldCalcDim();
oFF.QFieldFormulaCalc.prototype._ff_c = "QFieldFormulaCalc";

oFF.QFieldFormulaCalc._createFormulaCalcField = function(context, dimension, presentationType, fieldName)
{
	let formulaCalcField = new oFF.QFieldFormulaCalc();
	formulaCalcField.setupFieldCalcDim(context, dimension, presentationType, fieldName);
	return formulaCalcField;
};
oFF.QFieldFormulaCalc.prototype.m_autoSignFlip = false;
oFF.QFieldFormulaCalc.prototype.m_formulaItem = null;
oFF.QFieldFormulaCalc.prototype.m_measureMemberName = null;
oFF.QFieldFormulaCalc.prototype.copyFromInternal = function(other, flags)
{
	oFF.QFieldCalcDim.prototype.copyFromInternal.call( this , other, flags);
	let origField = other;
	if (origField.getFormulaItem() !== null)
	{
		let formulaItem = origField.getFormulaItem();
		this.m_formulaItem = formulaItem.cloneOlapComponent(this, this);
	}
	this.m_autoSignFlip = origField.m_autoSignFlip;
	this.m_measureMemberName = origField.m_measureMemberName;
};
oFF.QFieldFormulaCalc.prototype.getCrossCalculationMeasure = function()
{
	return this.m_measureMemberName;
};
oFF.QFieldFormulaCalc.prototype.getFormulaItem = function()
{
	return this.m_formulaItem;
};
oFF.QFieldFormulaCalc.prototype.getNestedDependentMemberNames = function(context)
{
	let depMemberNames = oFF.XHashSetOfString.create();
	let crossCalcMeasureName = this.getCrossCalculationMeasure();
	if (oFF.notNull(crossCalcMeasureName))
	{
		depMemberNames.add(crossCalcMeasureName);
	}
	let formulaItem = this.getFormulaItem();
	if (oFF.notNull(formulaItem))
	{
		let formulaFieldNames = oFF.FormulaItemUtils.getFieldNamesFromFormula(formulaItem);
		let attributeNamesItr = formulaFieldNames.getAttributeNames().getIterator();
		while (attributeNamesItr.hasNext())
		{
			let attrName = attributeNamesItr.next();
			let depFormulaCalcFieldProperties = context.getOlapEnv().getClientQueryObjectManager().getFormulaCalcDimPropertiesByFieldName(attrName, context.getQueryManager().getClientQueryObjectStorageName());
			if (oFF.notNull(depFormulaCalcFieldProperties))
			{
				let measuresFromDepFormulaItr = depFormulaCalcFieldProperties.getNestedDependentMemberNames(context).getIterator();
				while (measuresFromDepFormulaItr.hasNext())
				{
					let measureNameFromDepFormula = measuresFromDepFormulaItr.next();
					depMemberNames.add(measureNameFromDepFormula);
				}
			}
		}
	}
	return depMemberNames.getValuesAsReadOnlyList();
};
oFF.QFieldFormulaCalc.prototype.isAutoSignFlip = function()
{
	return this.m_autoSignFlip;
};
oFF.QFieldFormulaCalc.prototype.releaseObject = function()
{
	oFF.QFieldCalcDim.prototype.releaseObject.call( this );
	this.m_formulaItem = oFF.XObjectExt.release(this.m_formulaItem);
	this.m_measureMemberName = null;
};
oFF.QFieldFormulaCalc.prototype.setAutoSignFlip = function(autoSignFlip)
{
	let oldValue = this.m_autoSignFlip;
	this.m_autoSignFlip = autoSignFlip;
	this.notifyPropertyBooleanChanged(oFF.QFieldProperties.QY_AUTO_SIGN_FLIP, oldValue, autoSignFlip);
};
oFF.QFieldFormulaCalc.prototype.setCrossCalculationMeasure = function(measureMemberName)
{
	this.m_measureMemberName = measureMemberName;
	this.notifyNodeChanged();
};
oFF.QFieldFormulaCalc.prototype.setFormulaItem = function(formula)
{
	let elementBase = formula;
	if (oFF.notNull(elementBase))
	{
		elementBase.setParent(this);
	}
	this.m_formulaItem = formula;
	this.notifyNodeChanged();
};

oFF.QAbstractFilterTimeRange = function() {};
oFF.QAbstractFilterTimeRange.prototype = new oFF.AbstractTransientFilter();
oFF.QAbstractFilterTimeRange.prototype._ff_c = "QAbstractFilterTimeRange";

oFF.QAbstractFilterTimeRange.prototype.m_convertToFlatFilter = false;
oFF.QAbstractFilterTimeRange.prototype.m_fallBackFilter = null;
oFF.QAbstractFilterTimeRange.prototype.m_hierarchyName = null;
oFF.QAbstractFilterTimeRange.prototype.m_levelName = null;
oFF.QAbstractFilterTimeRange.prototype.m_lowValue = null;
oFF.QAbstractFilterTimeRange.prototype.m_lowValueType = null;
oFF.QAbstractFilterTimeRange.prototype.m_setSign = null;
oFF.QAbstractFilterTimeRange.prototype.m_timeDimensionName = null;
oFF.QAbstractFilterTimeRange.prototype.addValueExcludeFilter = function(queryModel, parentFilter)
{
	let timeDimension = queryModel.getDimensionByName(this.getTimeDimensionName());
	if (oFF.QTimeDimensionUtil.isFlexibleTimeDimension(timeDimension))
	{
		let dateField = timeDimension.getFieldByName(oFF.XStringUtils.concatenate2(timeDimension.getName(), ".DATE"));
		if (oFF.notNull(dateField))
		{
			let cartesianList = oFF.QFactory.createFilterCartesianListWithField(this.getQueryModel(), dateField);
			let filterOperation = cartesianList.addNewCartesianElement();
			filterOperation.setField(dateField);
			filterOperation.setComparisonOperator(oFF.ComparisonOperator.EQUAL);
			filterOperation.setSetSign(oFF.SetSign.EXCLUDING);
			filterOperation.setLowString("");
			parentFilter.add(cartesianList);
		}
	}
};
oFF.QAbstractFilterTimeRange.prototype.copyFromInternal = function(other, flags)
{
	oFF.AbstractTransientFilter.prototype.copyFromInternal.call( this , other, flags);
	let originTimeRangeFilter = other;
	this.setTimeDimensionName(originTimeRangeFilter.m_timeDimensionName);
	this.setHierarchyName(originTimeRangeFilter.m_hierarchyName);
	this.setLevelName(originTimeRangeFilter.m_levelName);
	this.setConvertToFlatFilter(originTimeRangeFilter.m_convertToFlatFilter);
	this.m_lowValue = originTimeRangeFilter.m_lowValue;
	this.m_lowValueType = originTimeRangeFilter.m_lowValueType;
	this.m_setSign = originTimeRangeFilter.m_setSign;
	this.m_fallBackFilter.copyFrom(originTimeRangeFilter.m_fallBackFilter, null);
};
oFF.QAbstractFilterTimeRange.prototype.createCartesianListAndAddFilter = function(queryModel, timeDimension, hierarchyName, filterOperation)
{
	let timeCartesianList = oFF.QFactory.createFilterCartesianListWithField(queryModel, timeDimension.getHierarchyKeyField());
	timeCartesianList.getTagging().put(oFF.QTransientConstants.TAG_IS_TRANSIENT, "");
	timeCartesianList.setHierarchyName(hierarchyName);
	timeCartesianList.setConvertToFlatFilter(this.isConvertToFlatFilter());
	if (oFF.notNull(filterOperation))
	{
		filterOperation.setSetSign(this.getSetSign());
		timeCartesianList.add(filterOperation);
	}
	return timeCartesianList;
};
oFF.QAbstractFilterTimeRange.prototype.destroyTransientObjects = function(context)
{
	this.destroyTransientFromExternalFilters(context);
	let parent = this.getParent();
	let transientFilter = null;
	if (parent.getOlapComponentType().isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA))
	{
		let filterAlgebra = this.getParent();
		transientFilter = oFF.XCollectionUtils.findFirst(filterAlgebra, (child) => {
			return oFF.XString.isEqual(child.getUniqueId(), oFF.XStringUtils.concatenate2(this.getUniqueId(), "_transient"));
		});
		filterAlgebra.removeElement(transientFilter);
	}
	else
	{
		let linkFilterKey = this.getLinkFilterKey();
		transientFilter = context.getQueryModel().getFilter().getLinkedFilter(linkFilterKey);
		context.getQueryModel().getFilter().linkFilter(linkFilterKey, null);
	}
	oFF.XObjectExt.release(transientFilter);
};
oFF.QAbstractFilterTimeRange.prototype.generateTransientObjects = function(context, messageManager)
{
	let queryModel = context.getQueryModel();
	if (!this.validate(queryModel, messageManager))
	{
		return;
	}
	this.stopEventing();
	let transientFilter = this.getTransientFilter(queryModel);
	this.resumeEventing();
	if (oFF.notNull(transientFilter))
	{
		transientFilter.setUniqueId(oFF.XStringUtils.concatenate2(this.getUniqueId(), "_transient"));
		let parent = this.getParent();
		if (parent.getOlapComponentType().isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA))
		{
			let filterAlgebra = this.getParent();
			let filterRootElement = transientFilter.getFilterRootElement();
			if (transientFilter.getFilterRootElement() !== null)
			{
				filterRootElement.setUniqueId(oFF.XStringUtils.concatenate2(this.getUniqueId(), "_transient"));
				filterAlgebra.add(filterRootElement);
			}
		}
		else
		{
			queryModel.getFilter().linkFilter(this.getLinkFilterKey(), transientFilter);
		}
	}
};
oFF.QAbstractFilterTimeRange.prototype.getAllLevelNames = function(context)
{
	let levelNames = oFF.XList.create();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.getLevelName()))
	{
		levelNames.add(this.getLevelName());
	}
	if (oFF.notNull(context) && context.getQueryModel() !== null && oFF.XStringUtils.isNotNullAndNotEmpty(this.getLowValue()))
	{
		let levels = oFF.QFilterUtil.getFilterTimeRangeLowValueLevel(context, this);
		for (let i = 0; i < levels.size(); i++)
		{
			levelNames.add(levels.get(i).getLevelName());
		}
	}
	return levelNames;
};
oFF.QAbstractFilterTimeRange.prototype.getFallbackFilter = function()
{
	return this.m_fallBackFilter;
};
oFF.QAbstractFilterTimeRange.prototype.getHierarchyName = function()
{
	return this.m_hierarchyName;
};
oFF.QAbstractFilterTimeRange.prototype.getLevelName = function()
{
	return this.m_levelName;
};
oFF.QAbstractFilterTimeRange.prototype.getLinkFilterKey = function()
{
	return this.getName();
};
oFF.QAbstractFilterTimeRange.prototype.getLowValue = function()
{
	return this.m_lowValue;
};
oFF.QAbstractFilterTimeRange.prototype.getLowValueType = function()
{
	return this.m_lowValueType;
};
oFF.QAbstractFilterTimeRange.prototype.getOlapComponentType = function()
{
	return oFF.FilterComponentType.FILTER_TIME_RANGE;
};
oFF.QAbstractFilterTimeRange.prototype.getSetSign = function()
{
	return this.m_setSign;
};
oFF.QAbstractFilterTimeRange.prototype.getTimeDimensionName = function()
{
	return this.m_timeDimensionName;
};
oFF.QAbstractFilterTimeRange.prototype.getTransientFallbackFilter = function()
{
	let filterExpression = oFF.QFactory.createFilterExpression(this.getFallbackFilter(), this.getFallbackFilter().getParent());
	filterExpression.copyFrom(this.getFallbackFilter(), null);
	return filterExpression;
};
oFF.QAbstractFilterTimeRange.prototype.getTransientFilter = function(queryModel)
{
	return null;
};
oFF.QAbstractFilterTimeRange.prototype.isConvertToFlatFilter = function()
{
	return this.m_convertToFlatFilter;
};
oFF.QAbstractFilterTimeRange.prototype.isSingleValueDynamicRangeFilter = function()
{
	return false;
};
oFF.QAbstractFilterTimeRange.prototype.releaseObject = function()
{
	this.destroyTransientObjects(this.getContext());
	this.m_timeDimensionName = null;
	this.m_hierarchyName = null;
	this.m_levelName = null;
	this.m_lowValue = null;
	this.m_lowValueType = null;
	this.m_setSign = null;
	this.m_fallBackFilter = oFF.XObjectExt.release(this.m_fallBackFilter);
	oFF.AbstractTransientFilter.prototype.releaseObject.call( this );
};
oFF.QAbstractFilterTimeRange.prototype.setConvertToFlatFilter = function(convertToFlatFilter)
{
	this.m_convertToFlatFilter = convertToFlatFilter;
	this.notifyNodeChanged();
};
oFF.QAbstractFilterTimeRange.prototype.setHierarchyName = function(hierarchyName)
{
	this.m_hierarchyName = hierarchyName;
	this.notifyNodeChanged();
};
oFF.QAbstractFilterTimeRange.prototype.setLevelName = function(levelName)
{
	this.m_levelName = levelName;
	this.notifyNodeChanged();
};
oFF.QAbstractFilterTimeRange.prototype.setLowValue = function(lowValue)
{
	this.m_lowValue = lowValue;
	this.notifyNodeChanged();
};
oFF.QAbstractFilterTimeRange.prototype.setLowValueToTransientFilterOperation = function(filterOp, lowValue)
{
	if (this.getLowValueType() === oFF.XValueType.VARIABLE)
	{
		let variable = this.getQueryModel().getVariable(lowValue);
		if (oFF.notNull(variable))
		{
			filterOp.getLow().setVariableValue(variable);
		}
	}
	else
	{
		filterOp.getLow().setString(lowValue);
	}
};
oFF.QAbstractFilterTimeRange.prototype.setSetSign = function(setSign)
{
	if (setSign !== this.m_setSign)
	{
		this.m_setSign = setSign;
		this.notifyNodeChanged();
	}
};
oFF.QAbstractFilterTimeRange.prototype.setTimeDimensionName = function(timeDimensionName)
{
	this.m_timeDimensionName = timeDimensionName;
	this.notifyNodeChanged();
};
oFF.QAbstractFilterTimeRange.prototype.setupTimeRangeFilter = function(context, name)
{
	this.m_convertToFlatFilter = false;
	this.m_setSign = oFF.SetSign.INCLUDING;
	this.m_fallBackFilter = oFF.QFactory.createFilterExpression(this, this.getParent());
	oFF.AbstractTransientFilter.prototype.setupTransientFilter.call( this , context, name, null);
};
oFF.QAbstractFilterTimeRange.prototype.validate = function(queryModel, messageManager)
{
	let isValid = true;
	let timeDimension = queryModel.getDimensionByName(this.m_timeDimensionName);
	let leveledHierarchy = null;
	if (oFF.notNull(timeDimension))
	{
		leveledHierarchy = timeDimension.getLeveledHierarchy(this.m_hierarchyName);
		if (oFF.notNull(leveledHierarchy))
		{
			let levelName = leveledHierarchy.getLevelByName(this.m_levelName);
			if (oFF.isNull(levelName))
			{
				isValid = false;
				let errorMsgArgs = oFF.XList.create();
				errorMsgArgs.add(this.m_levelName);
				messageManager.addWarning(oFF.ErrorCodes.TIME_RANGE_FILTER_INVALID_HIERARCHY_LEVEL, oFF.ErrorMessages.getText(oFF.ErrorMessages.TIME_RANGE_FILTER_INVALID_HIERARCHY_LEVEL, errorMsgArgs, null, null));
			}
		}
	}
	if (oFF.isNull(leveledHierarchy))
	{
		isValid = false;
		messageManager.addWarning(oFF.ErrorCodes.TIME_RANGE_FILTER_INVALID_DIMENSION_HIERARCHY, oFF.ErrorMessages.TIME_RANGE_FILTER_INVALID_DIMENSION_HIERARCHY);
	}
	return isValid;
};

oFF.QFilterAcrossModels = function() {};
oFF.QFilterAcrossModels.prototype = new oFF.AbstractTransientFilter();
oFF.QFilterAcrossModels.prototype._ff_c = "QFilterAcrossModels";

oFF.QFilterAcrossModels.LINK_FILTER_PREFIX = "__transient|";
oFF.QFilterAcrossModels.QUERY_MANAGER_ACCOUNT_DIMENSION_MATCH = 3;
oFF.QFilterAcrossModels.QUERY_MANAGER_DATASET_ID_EXISTS = 4;
oFF.QFilterAcrossModels.QUERY_MANAGER_MATCHES_NAME = 5;
oFF.QFilterAcrossModels.QUERY_MANAGER_MATCHING_DIMENSIONS = 2;
oFF.QFilterAcrossModels.QUERY_MANAGER_NO_MATCH = 0;
oFF.QFilterAcrossModels.QUERY_MANAGER_SAME_DATA_SOURCE = 1;
oFF.QFilterAcrossModels.REST_CHILD_SUFFIX = "|REST";
oFF.QFilterAcrossModels.createFilterAcrossModels = function(context, name)
{
	let filterAcrossModels = new oFF.QFilterAcrossModels();
	filterAcrossModels.setupFilterAcrossModels(context, name);
	return filterAcrossModels;
};
oFF.QFilterAcrossModels.prototype.m_cachedTransientFiltersWithSharedContext = null;
oFF.QFilterAcrossModels.prototype.m_children = null;
oFF.QFilterAcrossModels.prototype.m_clearCache = false;
oFF.QFilterAcrossModels.prototype.m_isLinkOptimized = false;
oFF.QFilterAcrossModels.prototype.m_links = null;
oFF.QFilterAcrossModels.prototype.m_lov = null;
oFF.QFilterAcrossModels.prototype.m_maxLovRows = null;
oFF.QFilterAcrossModels.prototype.m_measureNames = null;
oFF.QFilterAcrossModels.prototype.m_messageManager = null;
oFF.QFilterAcrossModels.prototype.m_preferPrequeryBasedStrategy = false;
oFF.QFilterAcrossModels.prototype.m_preparationListener = null;
oFF.QFilterAcrossModels.prototype.m_queryModelTransientDimensions = null;
oFF.QFilterAcrossModels.prototype.m_secondaryMeasureNames = null;
oFF.QFilterAcrossModels.prototype.m_secondaryQueryManager = null;
oFF.QFilterAcrossModels.prototype.m_secondaryQueryManagerBaseKey = null;
oFF.QFilterAcrossModels.prototype.m_targetDatasetId = null;
oFF.QFilterAcrossModels.prototype.addLink = function(link)
{
	if (!this.m_links.contains(link))
	{
		this.m_links.add(link);
		this.clearCachedQueryDependentObjectsAndNotifyNodeChanged();
	}
};
oFF.QFilterAcrossModels.prototype.addMeasureName = function(measureName)
{
	this.m_measureNames.add(measureName);
	this.clearCachedQueryDependentObjectsAndNotifyNodeChanged();
};
oFF.QFilterAcrossModels.prototype.addNewLink = function(first, second)
{
	this.addLink(oFF.QDimensionLink.createDimensionLink(this, this, first, second, false, false));
};
oFF.QFilterAcrossModels.prototype.addNewLinkFromParts = function(first, second)
{
	let link = oFF.QDimensionLink.createDimensionLinkFromParts(this, this, first, second, false, false);
	this.addLink(link);
	return link;
};
oFF.QFilterAcrossModels.prototype.addNewSharedLink = function(context, first, second)
{
	this.addLink(oFF.QDimensionLink.createDimensionLink(context, this, first, second, false, false));
};
oFF.QFilterAcrossModels.prototype.addSecondaryMeasureName = function(measureName)
{
	this.m_secondaryMeasureNames.add(measureName);
	this.clearCachedQueryDependentObjectsAndNotifyNodeChanged();
};
oFF.QFilterAcrossModels.prototype.clearCache = function()
{
	this.clearCachedQueryDependentObjects();
	if (oFF.notNull(this.m_lov))
	{
		this.m_lov.clearLovCacheKeys();
	}
};
oFF.QFilterAcrossModels.prototype.clearCachedQueryDependentObjects = function()
{
	this.m_clearCache = true;
};
oFF.QFilterAcrossModels.prototype.clearLinks = function()
{
	this.m_links.clear();
};
oFF.QFilterAcrossModels.prototype.copyFiltersForTargetContext = function(transientFilters)
{
	let result = oFF.XList.create();
	for (let i = 0; i < transientFilters.size(); i++)
	{
		let target = this.getContext().getQueryModel().getFilter().createFilter();
		target.copyFrom(transientFilters.get(i), null);
		result.add(target);
	}
	return result;
};
oFF.QFilterAcrossModels.prototype.copyFromInternal = function(other, flags)
{
	oFF.AbstractTransientFilter.prototype.copyFromInternal.call( this , other, flags);
	let originFilterAcrossModels = other;
	oFF.XCollectionUtils.addAllClones(this.m_links, originFilterAcrossModels.m_links);
	this.m_measureNames.clear();
	this.m_measureNames.addAll(originFilterAcrossModels.m_measureNames);
	this.m_secondaryMeasureNames.clear();
	this.m_secondaryMeasureNames.addAll(originFilterAcrossModels.m_secondaryMeasureNames);
	this.m_preferPrequeryBasedStrategy = originFilterAcrossModels.m_preferPrequeryBasedStrategy;
	if (oFF.notNull(originFilterAcrossModels.m_maxLovRows))
	{
		this.m_maxLovRows = oFF.XIntegerValue.create(originFilterAcrossModels.m_maxLovRows.getInteger());
	}
};
oFF.QFilterAcrossModels.prototype.createAndProcessLovQueriesExecution = function(syncType, queryExecutedListener, customIdentifier)
{
	if (this.m_clearCache)
	{
		this.releaseCacheObjects();
	}
	if (!this.isLovManagerNotNullAndNotReleased())
	{
		let secondaryContext = this.setupIfNotExistsAndGetSecondaryContext();
		let lovConfig = oFF.QFilterAcrossModelsLovConfig.create(this.m_links, secondaryContext.getQueryManager(), this.m_layeredFilters.toReadOnly(), this.getContext().getQueryManager(), this.m_measureNames, this.m_secondaryMeasureNames, this.m_maxLovRows);
		this.m_lov = oFF.QFilterAcrossModelsLov.create(lovConfig);
	}
	let lovAction = oFF.QFilterAcrossModelsLovAction.createAction(this.m_lov);
	return lovAction.processSyncAction(syncType, queryExecutedListener, customIdentifier);
};
oFF.QFilterAcrossModels.prototype.destroyTransientObjects = function(context)
{
	if (this.m_isLinkOptimized)
	{
		oFF.XCollectionUtils.forEach(this.m_children, (child) => {
			child.destroyTransientObjects(context);
		});
	}
	else
	{
		this.m_transientRefCount--;
		if (this.m_transientRefCount <= 0)
		{
			this.destroyTransientFromExternalFilters(context);
			if (oFF.notNull(context) && context.getQueryModel() !== null && this.m_queryModelTransientDimensions.containsKey(context.getQueryManager().getInstanceId()))
			{
				let transientDimensionNames = this.m_queryModelTransientDimensions.getByKey(context.getQueryManager().getInstanceId());
				for (let i = 0; i < transientDimensionNames.size(); i++)
				{
					let dimensionName = transientDimensionNames.get(i);
					let dimension = context.getQueryModel().getDimensionByName(dimensionName);
					if (dimension.getDimensionType().isTypeOf(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION))
					{
						context.getQueryModel().getFilter().linkFilter(dimensionName, null);
						this.removeCalcDimByName(dimensionName, context);
					}
				}
				this.m_queryModelTransientDimensions.remove(context.getQueryManager().getInstanceId());
			}
		}
		if (oFF.notNull(context) && context.getQueryModel() !== null && context.getSession().hasFeature(oFF.FeatureToggleOlap.LOV_BASED_FILTER_ACROSS_MODELS))
		{
			let counter = 0;
			while (context.getQueryModel().getFilter().getLinkedFilter(this.getLinkFilterKey(counter)) !== null)
			{
				let transientFilter = context.getQueryModel().getFilter().getLinkedFilter(this.getLinkFilterKey(counter));
				context.getQueryModel().getFilter().linkFilter(this.getLinkFilterKey(counter), null);
				oFF.XObjectExt.release(transientFilter);
				counter++;
			}
		}
	}
};
oFF.QFilterAcrossModels.prototype.doAllLinkedDimensionsSupportPrequeryBasedFilterAcrossModels = function()
{
	for (let i = 0; i < this.m_links.size(); i++)
	{
		let link = this.m_links.get(i);
		let first = link.getFirstPart();
		let second = link.getSecondPart();
		if (!this.doesLinkPartSupportPrequeryBasedFilterAcrossModels(first) || !this.doesLinkPartSupportPrequeryBasedFilterAcrossModels(second))
		{
			return false;
		}
	}
	return true;
};
oFF.QFilterAcrossModels.prototype.doesLinkPartSupportPrequeryBasedFilterAcrossModels = function(linkPart)
{
	let linkPartContext = null;
	if (linkPart.isSameDataSourceOrDatasetIdAsContext(this.getContext()))
	{
		linkPartContext = this.getContext();
	}
	else
	{
		linkPartContext = this.setupIfNotExistsAndGetSecondaryContext();
	}
	let linkedDimension = this.getDimensionOrCalcDim(linkPartContext, linkPart.getDimensionName());
	return !oFF.QFilterAcrossModelsDimensionUtil.isTimeStampDimension(linkedDimension) && !linkPart.isHierarchical();
};
oFF.QFilterAcrossModels.prototype.ensureAccountHierarchySetAndActive = function()
{
	let queryModel = this.m_secondaryQueryManager.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		let accountDimension = queryModel.getAccountDimension();
		if (oFF.notNull(accountDimension) && !accountDimension.isHierarchyActive())
		{
			if (oFF.XStringUtils.isNullOrEmpty(accountDimension.getHierarchyName()))
			{
				accountDimension.setHierarchyName(accountDimension.getDefaultHierarchyName());
			}
			accountDimension.setHierarchyActive(true);
		}
	}
};
oFF.QFilterAcrossModels.prototype.generateTargetFilters = function()
{
	let result = oFF.XList.create();
	if (!this.usePrequeryBasedTransientObjectGenerator())
	{
		let generator = oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.createFilterAcrossModelsLovBasedTransientObjectGenerator(this, this.getName(), this.setupIfNotExistsAndGetSecondaryContext(), this.getContext(), this.m_messageManager, this.m_links, this.m_layeredFilters, this.m_measureNames, this.m_secondaryMeasureNames, this.m_lov);
		result = this.generateTargetTransientFilters(generator);
	}
	return result;
};
oFF.QFilterAcrossModels.prototype.generateTargetTransientFilters = function(generator)
{
	let sharedQueryManagerForTargetContext = this.getContext().getOlapEnv().getSharedQueryManager(this.getContext().getQueryModel().getDatasetId());
	let sharedContextValid = oFF.notNull(sharedQueryManagerForTargetContext) && !sharedQueryManagerForTargetContext.isReleased();
	let targetTransientFilters;
	if (this.shouldGenerateTransientFilters())
	{
		if (sharedContextValid)
		{
			generator.setTargetContext(sharedQueryManagerForTargetContext);
		}
		targetTransientFilters = generator.generateTransientFilters();
		if (sharedContextValid)
		{
			this.m_cachedTransientFiltersWithSharedContext = targetTransientFilters;
			targetTransientFilters = this.copyFiltersForTargetContext(targetTransientFilters);
		}
	}
	else
	{
		targetTransientFilters = this.copyFiltersForTargetContext(this.m_cachedTransientFiltersWithSharedContext);
	}
	return targetTransientFilters;
};
oFF.QFilterAcrossModels.prototype.generateTransientObjects = function(context, messageManager)
{
	if (!context.getModelCapabilities().supportsMultiComplexFilter())
	{
		messageManager.addWarning(oFF.ErrorCodes.FILTER_ACROSS_MODEL_TARGET_MISSING_COMPLEX_FILTER_CAPABILITY, oFF.ErrorMessages.FILTER_ACROSS_MODEL_TARGET_MISSING_COMPLEX_FILTER_CAPABILITY);
		this.logErrorWithDetails(oFF.ErrorCodes.FILTER_ACROSS_MODEL_TARGET_MISSING_COMPLEX_FILTER_CAPABILITY, oFF.ErrorMessages.FILTER_ACROSS_MODEL_TARGET_MISSING_COMPLEX_FILTER_CAPABILITY);
		return;
	}
	if (this.m_isLinkOptimized)
	{
		oFF.XCollectionUtils.forEach(this.m_children, (child) => {
			child.generateTransientObjects(context, this.m_messageManager);
		});
	}
	else
	{
		if (!this.hasLinks())
		{
			return;
		}
		let queryModel = context.getQueryModel();
		if (queryModel.getDimensionByName(this.getName()) !== null)
		{
			this.m_transientRefCount++;
			return;
		}
		this.m_transientRefCount = 1;
		this.setContext(context);
		let secondaryContext = this.setupIfNotExistsAndGetSecondaryContext();
		let linkErrors = oFF.QFilterAcrossModelsLinkUtil.validateLinks(this.getLinks(), secondaryContext, context);
		if (linkErrors.size() > 0)
		{
			messageManager.addWarning(linkErrors.get(0).getFirstObject().getInteger(), linkErrors.get(0).getSecondObject().getString());
			this.logErrorWithDetails(linkErrors.get(0).getFirstObject().getInteger(), linkErrors.get(0).getSecondObject().getString());
			return;
		}
		let generator = null;
		if (this.usePrequeryBasedTransientObjectGenerator())
		{
			let effectiveMeasureNames = oFF.QFilterAcrossModelsDimensionUtil.getEffectiveMeasureNames(this.getMeasureNames(), secondaryContext.getQueryModel(), this.m_messageManager, oFF.QFilterAcrossModelsLinkUtil.getAnySharedLinkStorageName(this.getLinks()));
			generator = oFF.QFilterAcrossModelsPrequeryBasedTransientObjectGenerator.createFilterAcrossModelsPrequeryBasedTransientObjectGenerator(this, this.getName(), secondaryContext, context, this.m_messageManager, this.m_links, this.m_layeredFilters, effectiveMeasureNames, this.m_secondaryMeasureNames);
			let transientDimensions = generator.generateTransientDimensions();
			let addedTransientDimensionNames = oFF.XList.create();
			for (let i = 0; i < transientDimensions.size(); i++)
			{
				let transientDimension = transientDimensions.get(i);
				if (transientDimension.getDimensionType().isTypeOf(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION))
				{
					this.addCalcDimAndDependencies(transientDimension, queryModel, secondaryContext.getQueryModel(), this.m_messageManager);
					addedTransientDimensionNames.add(transientDimension.getName());
				}
			}
			if (addedTransientDimensionNames.size() > 0)
			{
				this.m_queryModelTransientDimensions.put(queryModel.getQueryManager().getInstanceId(), addedTransientDimensionNames);
			}
		}
		else
		{
			let lovProcessExists = this.isLovManagerNotNullAndNotReleased();
			let isLovValid = lovProcessExists && this.m_lov.getSyncState().isTypeOf(oFF.SyncState.IN_SYNC);
			if (!lovProcessExists)
			{
				let resultAction = this.createAndProcessLovQueriesExecution(oFF.SyncType.NON_BLOCKING, null, null);
				if (oFF.notNull(resultAction))
				{
					if (resultAction.getSyncState() === oFF.SyncState.IN_SYNC && !this.m_lov.hasExecutedDependentLovQueries())
					{
						isLovValid = true;
					}
					else
					{
						try
						{
							resultAction.cancelSynchronization();
							this.m_lov = oFF.XObjectExt.release(this.m_lov);
						}
						catch (t)
						{
							this.m_lov = null;
						}
					}
				}
			}
			if (isLovValid)
			{
				if (this.m_lov.hasErrors())
				{
					if (this.m_lov.containsCode(oFF.Severity.ERROR, oFF.ErrorCodes.FILTER_ACROSS_MODEL_TARGET_MISSING_EXCLUDE_FILTER_CAPABILITY))
					{
						this.m_messageManager.addWarning(oFF.ErrorCodes.FILTER_ACROSS_MODEL_TARGET_MISSING_EXCLUDE_FILTER_CAPABILITY, oFF.ErrorMessages.FILTER_ACROSS_MODEL_TARGET_MISSING_EXCLUDE_FILTER_CAPABILITY);
					}
					else
					{
						this.m_messageManager.addWarning(oFF.ErrorCodes.FILTER_ACROSS_MODEL_DEPENDENT_QUERY_FAILED, oFF.ErrorMessages.FILTER_ACROSS_MODEL_DEPENDENT_QUERY_FAILED);
					}
				}
				else
				{
					generator = oFF.QFilterAcrossModelsLovBasedTransientObjectGenerator.createFilterAcrossModelsLovBasedTransientObjectGenerator(this, this.getName(), secondaryContext, context, this.m_messageManager, this.m_links, this.m_layeredFilters, this.m_measureNames, this.m_secondaryMeasureNames, this.m_lov);
					if (context.getSession().hasFeature(oFF.FeatureToggleOlap.LOV_BASED_FILTER_ACROSS_MODELS))
					{
						let targetTransientFilters = this.generateTargetTransientFilters(generator);
						for (let j = 0; j < targetTransientFilters.size(); j++)
						{
							let targetTransientFilter = targetTransientFilters.get(j);
							targetTransientFilter.getTagging().put(oFF.QTransientConstants.TAG_LOV_BASED_FILTER_ACROSS_MODELS, "");
							queryModel.getFilter().linkFilter(this.getLinkFilterKey(j), targetTransientFilter);
						}
					}
					oFF.XObjectExt.release(generator);
					this.m_messageManager.copyAllMessages(this.m_lov);
				}
			}
			else
			{
				this.m_messageManager.addWarning(oFF.ErrorCodes.FILTER_ACROSS_MODEL_DEPENDENT_QUERY_FAILED, oFF.ErrorMessages.FILTER_ACROSS_MODEL_DEPENDENT_QUERY_FAILED);
			}
		}
	}
	oFF.XStream.of(this.m_messageManager.getMessages()).filter((message) => {
		return message.getSeverity() === oFF.Severity.ERROR || message.getSeverity() === oFF.Severity.WARNING && !oFF.XString.isEqual(message.getOriginLayer(), oFF.OriginLayer.SERVER);
	}).forEach((warningOrErrorMessage) => {
		this.logErrorWithDetails(warningOrErrorMessage.getCode(), warningOrErrorMessage.getText());
	});
	messageManager.copyAllMessages(this.m_messageManager);
};
oFF.QFilterAcrossModels.prototype.getDimensionOrCalcDim = function(context, dimensionName)
{
	return oFF.QFilterAcrossModelsDimensionUtil.getDimensionOrCalcDim(context, dimensionName, oFF.QFilterAcrossModelsLinkUtil.getAnySharedLinkStorageName(this.getLinks()));
};
oFF.QFilterAcrossModels.prototype.getFirstSecondaryFieldLink = function(context)
{
	return oFF.QFilterAcrossModelsLinkUtil.getFirstSecondaryLinkPartForContext(this.m_links, context);
};
oFF.QFilterAcrossModels.prototype.getLinkFilterKey = function(idx)
{
	return oFF.XStringUtils.concatenateWithInt(oFF.XStringUtils.concatenate3(oFF.QFilterAcrossModels.LINK_FILTER_PREFIX, this.getName(), "|"), idx);
};
oFF.QFilterAcrossModels.prototype.getLinkedDimensionsForContext = function(context)
{
	return oFF.QFilterAcrossModelsLinkUtil.getLinkedDimensionsForContext(this.m_links, context);
};
oFF.QFilterAcrossModels.prototype.getLinks = function()
{
	return this.m_links;
};
oFF.QFilterAcrossModels.prototype.getMeasureNames = function()
{
	return this.m_measureNames.getValuesAsReadOnlyList();
};
oFF.QFilterAcrossModels.prototype.getOlapComponentType = function()
{
	return oFF.FilterComponentType.FILTER_ACROSS_MODELS;
};
oFF.QFilterAcrossModels.prototype.getPreferPrequeryBasedStrategy = function()
{
	return this.m_preferPrequeryBasedStrategy;
};
oFF.QFilterAcrossModels.prototype.getQueryManagerByDimensionLink = function(dimensionLinkPart, requiredDimensions, olapEnv)
{
	let resultCandidate = this.m_secondaryQueryManager;
	let fittingLevel = this.isFittingQueryManager(dimensionLinkPart, this.m_secondaryQueryManagerBaseKey, resultCandidate, requiredDimensions);
	if (fittingLevel === oFF.QFilterAcrossModels.QUERY_MANAGER_MATCHES_NAME)
	{
		return resultCandidate;
	}
	let newResultCandidate = olapEnv.getSharedQueryManager(dimensionLinkPart.getQueryManagerKey());
	if (oFF.notNull(newResultCandidate) && !newResultCandidate.isReleased() && newResultCandidate.getQueryModel() !== null && !newResultCandidate.getQueryModel().isReleased())
	{
		this.m_secondaryQueryManagerBaseKey = dimensionLinkPart.getQueryManagerKey();
		return newResultCandidate;
	}
	let newFittingLevel;
	let queryManagers = olapEnv.getAllAreaQueryManager();
	let size = queryManagers.size();
	for (let i = 0; i < size; i++)
	{
		newResultCandidate = queryManagers.get(i);
		newFittingLevel = this.isFittingQueryManager(dimensionLinkPart, newResultCandidate.getName(), newResultCandidate, requiredDimensions);
		if (newFittingLevel > fittingLevel)
		{
			fittingLevel = newFittingLevel;
			resultCandidate = newResultCandidate;
		}
		if (fittingLevel === oFF.QFilterAcrossModels.QUERY_MANAGER_MATCHES_NAME)
		{
			break;
		}
	}
	if (fittingLevel === oFF.QFilterAcrossModels.QUERY_MANAGER_NO_MATCH)
	{
		resultCandidate = null;
	}
	return resultCandidate;
};
oFF.QFilterAcrossModels.prototype.getSecondaryMeasureNames = function()
{
	return this.m_secondaryMeasureNames.getValuesAsReadOnlyList();
};
oFF.QFilterAcrossModels.prototype.getTargetDatasetId = function()
{
	return this.m_targetDatasetId;
};
oFF.QFilterAcrossModels.prototype.getTransientDimensionsForQueryModel = function(queryModel)
{
	let transientObjects = oFF.XList.create();
	if (this.m_isLinkOptimized)
	{
		oFF.XCollectionUtils.forEach(this.m_children, (child) => {
			transientObjects.addAll(child.getTransientDimensionsForQueryModel(queryModel));
		});
	}
	else
	{
		if (!this.m_queryModelTransientDimensions.containsKey(queryModel.getQueryManager().getInstanceId()))
		{
			return transientObjects;
		}
		let transientDimensionNames = this.m_queryModelTransientDimensions.getByKey(queryModel.getQueryManager().getInstanceId());
		for (let i = 0; i < transientDimensionNames.size(); i++)
		{
			let dimension = queryModel.getDimensionByName(transientDimensionNames.get(i));
			if (oFF.notNull(dimension) && !dimension.isReleased() && dimension.getDimensionType().isTypeOf(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION))
			{
				transientObjects.add(dimension);
			}
		}
	}
	return transientObjects;
};
oFF.QFilterAcrossModels.prototype.getTransientFilter = oFF.noSupport;
oFF.QFilterAcrossModels.prototype.getUsedHierarchyNamesInFilters = function()
{
	let usedHierarchyNames = oFF.XHashSetOfString.create();
	if (this.m_isLinkOptimized)
	{
		oFF.XCollectionUtils.forEach(this.m_children, (child) => {
			usedHierarchyNames.addAll(child.getUsedHierarchyNamesInFilters());
		});
	}
	else
	{
		if (oFF.notNull(this.m_cachedTransientFiltersWithSharedContext) && !this.m_cachedTransientFiltersWithSharedContext.isReleased())
		{
			let iterator = this.m_cachedTransientFiltersWithSharedContext.getIterator();
			while (iterator.hasNext())
			{
				let transientFilter = iterator.next();
				usedHierarchyNames.addAll(transientFilter.getUsedHierarchyNames());
			}
		}
	}
	return usedHierarchyNames;
};
oFF.QFilterAcrossModels.prototype.hasExecutedDependentLovQueries = function()
{
	if (this.m_isLinkOptimized)
	{
		return oFF.XCollectionUtils.contains(this.m_children, (child) => {
			return child.hasExecutedDependentLovQueries();
		});
	}
	else
	{
		return oFF.notNull(this.m_lov) && this.m_lov.hasExecutedDependentLovQueries();
	}
};
oFF.QFilterAcrossModels.prototype.hasLinkedFilterOnDimension = function(dimension)
{
	let linkedFiltersIt = this.m_layeredFilters.getIterator();
	while (linkedFiltersIt.hasNext())
	{
		if (dimension.isUsedInFilter(linkedFiltersIt.next()))
		{
			oFF.XObjectExt.release(linkedFiltersIt);
			return true;
		}
	}
	oFF.XObjectExt.release(linkedFiltersIt);
	return false;
};
oFF.QFilterAcrossModels.prototype.hasLinks = function()
{
	return oFF.XCollectionUtils.hasElements(this.m_links);
};
oFF.QFilterAcrossModels.prototype.hasSourceFilters = function()
{
	return this.m_layeredFilters.getIterator().hasNext();
};
oFF.QFilterAcrossModels.prototype.isFittingQueryManager = function(dimensionLinkPart, queryManagerKey, queryManager, requiredDimensions)
{
	let result = oFF.QFilterAcrossModels.QUERY_MANAGER_NO_MATCH;
	if (oFF.notNull(queryManager) && !queryManager.isReleased())
	{
		let queryModel = queryManager.getQueryModel();
		if (oFF.notNull(queryModel) && !queryModel.isReleased() && queryModel.getDimensionNames().size() > 0)
		{
			if (oFF.XStringUtils.isNotNullAndNotEmpty(queryManagerKey) && oFF.XString.isEqual(queryManagerKey, dimensionLinkPart.getQueryManagerKey()))
			{
				result = oFF.QFilterAcrossModels.QUERY_MANAGER_MATCHES_NAME;
				this.m_secondaryQueryManagerBaseKey = dimensionLinkPart.getQueryManagerKey();
			}
			else if (dimensionLinkPart.isSameDataSourceOrDatasetIdAsContext(queryManager))
			{
				result = oFF.QFilterAcrossModels.QUERY_MANAGER_SAME_DATA_SOURCE;
				if (this.queryContainsDimensions(queryModel.getDimensionNames(), requiredDimensions))
				{
					result = oFF.QFilterAcrossModels.QUERY_MANAGER_MATCHING_DIMENSIONS;
					if (queryModel.getAccountDimension() === null || queryModel.getAccountDimension().isHierarchyActive())
					{
						result = oFF.QFilterAcrossModels.QUERY_MANAGER_ACCOUNT_DIMENSION_MATCH;
						if (oFF.XStringUtils.isNotNullAndNotEmpty(queryModel.getDatasetId()))
						{
							result = oFF.QFilterAcrossModels.QUERY_MANAGER_DATASET_ID_EXISTS;
						}
					}
				}
			}
		}
	}
	return result;
};
oFF.QFilterAcrossModels.prototype.isLovManagerNotNullAndNotReleased = function()
{
	return oFF.notNull(this.m_lov) && !this.m_lov.isReleased();
};
oFF.QFilterAcrossModels.prototype.logErrorWithDetails = function(code, message)
{
	this.logError(oFF.XStringUtils.concatenate4("Filter across models. Code: ", oFF.XInteger.convertToString(code), " Message: ", message));
};
oFF.QFilterAcrossModels.prototype.onQueryManagerCreated = function(extResult, queryManager, customIdentifier)
{
	this.m_secondaryQueryManager = queryManager;
	if (oFF.notNull(this.m_preparationListener))
	{
		this.m_preparationListener.onFAMPreparationFinished(oFF.ExtResult.create(queryManager, extResult), queryManager, customIdentifier);
	}
};
oFF.QFilterAcrossModels.prototype.prepare = function(syncType, listener, customIdentifier)
{
	let context = this.getContext();
	let olapEnv = context.getOlapEnv();
	let secondaryLink = this.getFirstSecondaryFieldLink(context);
	let linkedDimensions = this.getLinkedDimensionsForContext(secondaryLink);
	if (this.setupSecondaryQueryManager(olapEnv, secondaryLink, linkedDimensions))
	{
		let result = oFF.SyncActionExtRes.createSyncAction(this.m_secondaryQueryManager, null);
		if (oFF.notNull(listener))
		{
			listener.onFAMPreparationFinished(result, this.m_secondaryQueryManager, customIdentifier);
		}
		return result;
	}
	else
	{
		this.m_secondaryQueryManager = oFF.XObjectExt.release(this.m_secondaryQueryManager);
		this.m_preparationListener = listener;
		return olapEnv.processQueryManagerCreationWithDataSourceName(syncType, this, customIdentifier, secondaryLink.getSystemName(), secondaryLink.getCubeName());
	}
};
oFF.QFilterAcrossModels.prototype.processLovQueriesExecution = function(context, syncType, queryExecutedListener, customIdentifier)
{
	if (!context.getSession().hasFeature(oFF.FeatureToggleOlap.LOV_BASED_FILTER_ACROSS_MODELS) || !this.hasLinks())
	{
		return null;
	}
	this.setContext(context);
	let secondaryContext = this.setupIfNotExistsAndGetSecondaryContext();
	let linkErrors = oFF.QFilterAcrossModelsLinkUtil.validateLinks(this.getLinks(), secondaryContext, context);
	if (linkErrors.size() > 0)
	{
		this.m_messageManager.addWarning(linkErrors.get(0).getFirstObject().getInteger(), linkErrors.get(0).getSecondObject().getString());
		return null;
	}
	let result = null;
	if (this.m_isLinkOptimized)
	{
		let seq = null;
		let allSyncActions = oFF.XList.create();
		for (let i = 0; i < this.m_children.size(); i++)
		{
			let action = this.m_children.get(i).processLovQueriesExecution(context, syncType, null, customIdentifier);
			if (oFF.notNull(action))
			{
				allSyncActions.add(action);
			}
		}
		if (allSyncActions.size() > 0)
		{
			seq = oFF.SyncActionSequence.create(syncType, queryExecutedListener, customIdentifier, this);
			for (let j = 0; j < allSyncActions.size() - 1; j++)
			{
				seq.addAction(allSyncActions.get(j));
			}
			seq.setMainAction(allSyncActions.get(allSyncActions.size() - 1));
		}
		result = seq;
	}
	else
	{
		if (!this.usePrequeryBasedTransientObjectGenerator())
		{
			result = this.createAndProcessLovQueriesExecution(syncType, queryExecutedListener, customIdentifier);
		}
	}
	return result;
};
oFF.QFilterAcrossModels.prototype.processLovQueriesExecutionExt = function(context, syncType, queryExecutedListener, customIdentifier)
{
	this.setContext(context);
	if (context.getSession().hasFeature(oFF.FeatureToggleOlap.FLEXIBLE_TIME_DYNAMIC_TIME))
	{
		this.reconfigureAndOptimizeLinks();
	}
	return this.processLovQueriesExecution(context, syncType, queryExecutedListener, customIdentifier);
};
oFF.QFilterAcrossModels.prototype.queryContainsDimensions = function(availableDimensions, requiredDimensions)
{
	for (let i = 0; i < requiredDimensions.size(); i++)
	{
		if (!availableDimensions.contains(requiredDimensions.get(i)))
		{
			return false;
		}
	}
	return true;
};
oFF.QFilterAcrossModels.prototype.reconfigureAndOptimizeLinks = function()
{
	this.resetOptimizedLinks();
	let layeredFilters = this.m_layeredFilters.toReadOnly();
	let layeredFilterKeysIterator = layeredFilters.getKeysAsIterator();
	let sourceQueryModel = this.setupIfNotExistsAndGetSecondaryContext().getQueryModel();
	let reducedLinks = oFF.QFilterAcrossModelsLinkUtil.reduceLinksBasedOnPropagateDefaultHierarchyKey(this.m_links, sourceQueryModel);
	let childrenBuckets = oFF.XHashMapByString.create();
	let directFilters = oFF.XHashMapByString.create();
	let hasIndirectFilterThatPullsInAllLinkedDims = false;
	while (layeredFilterKeysIterator.hasNext())
	{
		let layeredFilterKey = layeredFilterKeysIterator.next();
		let filterExpr = layeredFilters.getByKey(layeredFilterKey);
		if (oFF.QFilterUtil.isFilterNullOrEmpty(filterExpr))
		{
			continue;
		}
		let filterElement = filterExpr.getFilterRootElement();
		if (oFF.QFilterAcrossModelsFilterUtil.isDirectFilterElement(sourceQueryModel, this.getContext(), this.m_links, filterElement))
		{
			directFilters.put(layeredFilterKey, filterExpr);
		}
		else
		{
			let filterElementNodes = oFF.QFilterAcrossModelsFilterUtil.collectApplicableSourceFilters(filterElement);
			let filterDimension = null;
			for (let j = 0; j < filterElementNodes.size(); j++)
			{
				let filterElementNode = filterElementNodes.get(j);
				let filterNodeDimension = oFF.QFilterAcrossModelsFilterUtil.getDimensionFromFilterElement(sourceQueryModel, this.getLinks(), filterElementNode);
				if (oFF.isNull(filterNodeDimension) || oFF.notNull(filterDimension) && !oFF.XString.isEqual(filterDimension.getName(), filterNodeDimension.getName()))
				{
					hasIndirectFilterThatPullsInAllLinkedDims = true;
					break;
				}
				else
				{
					filterDimension = filterNodeDimension;
				}
			}
			if (oFF.isNull(filterDimension))
			{
				break;
			}
			if (!oFF.QTimeDimensionUtil.isFlexibleTimeDimension(filterDimension))
			{
				hasIndirectFilterThatPullsInAllLinkedDims = true;
			}
			if (hasIndirectFilterThatPullsInAllLinkedDims)
			{
				let layeredFiltersCopy = oFF.XHashMapByString.create();
				oFF.XMapUtils.putAllObjectsByString(layeredFilters, layeredFiltersCopy);
				childrenBuckets.clear();
				childrenBuckets.put("ALL", oFF.XPair.create(reducedLinks, layeredFiltersCopy));
				break;
			}
			let linkParts = oFF.QFilterAcrossModelsLinkUtil.getAllLinkPartsForContext(reducedLinks, sourceQueryModel);
			let filterDimensionFinal = filterDimension;
			for (let i = 0; i < linkParts.size(); i++)
			{
				let linkPart = linkParts.get(i);
				let linkPartDimension = sourceQueryModel.getDimensionByName(linkPart.getDimensionName());
				if (oFF.isNull(linkPartDimension))
				{
					continue;
				}
				let isLinkPartFlexibleTimeLevel = oFF.XCollectionUtils.contains(linkPartDimension.getGroupingDimensions(), (groupingDimension) => {
					return oFF.XString.isEqual(groupingDimension.getName(), filterDimensionFinal.getName());
				});
				if (oFF.QTimeDimensionUtil.isFlexibleTimeDimension(filterDimension) && isLinkPartFlexibleTimeLevel)
				{
					let groupingKey = filterDimension.getName();
					if (!childrenBuckets.containsKey(groupingKey))
					{
						childrenBuckets.put(groupingKey, oFF.XPair.create(oFF.XList.create(), oFF.XHashMapByString.create()));
					}
					let dimensionLinksAndFilters = childrenBuckets.getByKey(groupingKey);
					oFF.XCollectionUtils.addIfNotPresent(dimensionLinksAndFilters.getFirstObject(), linkPart.getParent());
					dimensionLinksAndFilters.getSecondObject().putIfNotNull(layeredFilterKey, filterExpr);
				}
			}
		}
	}
	let areLinksTheSame = childrenBuckets.size() === 1 && childrenBuckets.containsKey("ALL") && reducedLinks.size() === this.m_links.size();
	if (childrenBuckets.size() > 0 && !areLinksTheSame)
	{
		let keysIter = childrenBuckets.getKeysAsIterator();
		while (keysIter.hasNext())
		{
			let dimKey = keysIter.next();
			let childFamName = oFF.XStringUtils.concatenate3(this.getName(), "|", dimKey);
			let childFam = oFF.QFactory.createFilterAcrossModels(this.getContext(), childFamName);
			childFam.copyFrom(this, null);
			childFam.setName(childFamName);
			childFam.clearLinks();
			childFam.unlinkFilters();
			let config = childrenBuckets.getByKey(dimKey);
			let layeredFiltersToInclude = config.getSecondObject();
			let links = config.getFirstObject();
			oFF.XCollectionUtils.forEach(links, (link) => {
				childFam.addLink(oFF.XObjectExt.cloneIfNotNull(link));
			});
			oFF.QFilterUtil.linkFiltersIfApplicableAppend(childFam, layeredFiltersToInclude);
			if (directFilters.size() > 0 && layeredFiltersToInclude.size() < layeredFilters.size())
			{
				oFF.QFilterUtil.linkFiltersIfApplicableAppend(childFam, directFilters);
			}
			this.m_children.add(childFam);
		}
		if (directFilters.size() > 0 && !hasIndirectFilterThatPullsInAllLinkedDims)
		{
			let childFamRest = oFF.QFactory.createFilterAcrossModels(this.getContext(), oFF.XStringUtils.concatenate2(this.getName(), oFF.QFilterAcrossModels.REST_CHILD_SUFFIX));
			childFamRest.copyFrom(this, null);
			childFamRest.unlinkFilters();
			oFF.QFilterUtil.linkFiltersIfApplicableAppend(childFamRest, directFilters);
			this.m_children.add(childFamRest);
		}
		this.m_isLinkOptimized = true;
	}
	return;
};
oFF.QFilterAcrossModels.prototype.releaseCacheObjects = function()
{
	oFF.AbstractTransientFilter.prototype.clearCachedQueryDependentObjects.call( this );
	this.m_messageManager.clearMessages();
	if (oFF.notNull(this.m_lov))
	{
		this.m_secondaryQueryManager = oFF.XObjectExt.release(this.m_secondaryQueryManager);
		this.m_lov = oFF.XObjectExt.release(this.m_lov);
		this.m_cachedTransientFiltersWithSharedContext = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_cachedTransientFiltersWithSharedContext);
	}
	this.resetOptimizedLinks();
	this.m_clearCache = false;
};
oFF.QFilterAcrossModels.prototype.releaseObject = function()
{
	this.destroyTransientObjects(this.getContext());
	this.m_links = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_links);
	this.m_measureNames = oFF.XObjectExt.release(this.m_measureNames);
	this.m_secondaryMeasureNames = oFF.XObjectExt.release(this.m_secondaryMeasureNames);
	this.m_secondaryQueryManager = oFF.XObjectExt.release(this.m_secondaryQueryManager);
	this.m_secondaryQueryManagerBaseKey = null;
	this.m_lov = oFF.XObjectExt.release(this.m_lov);
	this.m_preparationListener = null;
	this.m_queryModelTransientDimensions = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_queryModelTransientDimensions);
	this.m_cachedTransientFiltersWithSharedContext = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_cachedTransientFiltersWithSharedContext);
	this.m_maxLovRows = oFF.XObjectExt.release(this.m_maxLovRows);
	this.m_messageManager = oFF.XObjectExt.release(this.m_messageManager);
	this.m_children = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_children);
	oFF.AbstractTransientFilter.prototype.releaseObject.call( this );
};
oFF.QFilterAcrossModels.prototype.removeMeasureName = function(measureName)
{
	this.m_measureNames.removeElement(measureName);
	this.clearCachedQueryDependentObjectsAndNotifyNodeChanged();
};
oFF.QFilterAcrossModels.prototype.removeSecondaryMeasureName = function(measureName)
{
	this.m_secondaryMeasureNames.removeElement(measureName);
	this.clearCachedQueryDependentObjectsAndNotifyNodeChanged();
};
oFF.QFilterAcrossModels.prototype.resetOptimizedLinks = function()
{
	this.m_isLinkOptimized = false;
	oFF.XCollectionUtils.releaseEntriesFromCollection(this.m_children);
	this.m_children = oFF.XList.create();
};
oFF.QFilterAcrossModels.prototype.setContext = function(context)
{
	oFF.AbstractTransientFilter.prototype.setContext.call( this , context);
	if (oFF.notNull(context) && context.getQueryModel() !== null)
	{
		this.m_targetDatasetId = context.getQueryModel().getDatasetId();
	}
	for (let i = 0; i < this.m_children.size(); i++)
	{
		this.m_children.get(i).setContext(context);
	}
};
oFF.QFilterAcrossModels.prototype.setMaxLovRows = function(maxLovRows)
{
	this.m_maxLovRows = maxLovRows;
	oFF.XCollectionUtils.forEach(this.m_children, (child) => {
		child.setMaxLovRows(maxLovRows);
	});
};
oFF.QFilterAcrossModels.prototype.setPreferPrequeryBasedStrategy = function(preferPrequeryBasedStrategy)
{
	this.m_preferPrequeryBasedStrategy = preferPrequeryBasedStrategy;
	this.clearCachedQueryDependentObjectsAndNotifyNodeChanged();
};
oFF.QFilterAcrossModels.prototype.setupAndGetSecondaryContext = function(context, secondaryLink)
{
	let olapEnv = context.getOlapEnv();
	let application = olapEnv.getApplication();
	let isBatching = application.getConnectionPool().isBatchModeEnabled(secondaryLink.getSystemName());
	if (isBatching)
	{
		let transientQueryManager = olapEnv.getTransientQueryManager(this.getName());
		if (oFF.notNull(transientQueryManager) && !transientQueryManager.isReleased() && secondaryLink.isSameDataSourceOrDatasetIdAsContext(transientQueryManager))
		{
			return transientQueryManager.getContext();
		}
	}
	let linkedDimensions = this.getLinkedDimensionsForContext(secondaryLink);
	if (!this.setupSecondaryQueryManager(olapEnv, secondaryLink, linkedDimensions))
	{
		this.m_secondaryQueryManager = oFF.XObjectExt.release(this.m_secondaryQueryManager);
		let createQueryManager = olapEnv.processQueryManagerCreationWithDataSourceName(oFF.SyncType.BLOCKING, null, null, secondaryLink.getSystemName(), secondaryLink.getCubeName());
		oFF.MessageUtil.checkNoError(createQueryManager);
		this.m_secondaryQueryManager = createQueryManager.getData();
	}
	if (!context.getSession().hasFeature(oFF.FeatureToggleOlap.LOV_BASED_FILTER_ACROSS_MODELS) && !this.m_secondaryQueryManager.getModelCapabilities().supportsPrequeryBasedFilteringAcrossModels())
	{
		this.m_secondaryQueryManager = oFF.XObjectExt.release(this.m_secondaryQueryManager);
		return null;
	}
	if (isBatching)
	{
		olapEnv.putTransientQueryManager(this.getName(), this.m_secondaryQueryManager);
	}
	let cmds = this.m_secondaryQueryManager.getConvenienceCommands();
	let cmdResetConfiguration = cmds.createResetConfiguration();
	cmdResetConfiguration.setSkipResetCustomMembers(true);
	cmdResetConfiguration.setSkipResetCalculatedDimensions(true);
	cmdResetConfiguration.setSkipResetConditions(true);
	cmds.resetWithOptions(cmdResetConfiguration);
	let dimensionAccessor = this.m_secondaryQueryManager.getDimensionAccessor();
	let queryModel = this.m_secondaryQueryManager.getQueryModel();
	let rowsAxis = queryModel.getRowsAxis();
	for (let i = 0; i < linkedDimensions.size(); i++)
	{
		let linkedDimension = dimensionAccessor.getDimensionByName(linkedDimensions.get(i));
		rowsAxis.add(linkedDimension);
	}
	let freeAxis = queryModel.getFreeAxis();
	for (let k = freeAxis.size() - 1; k >= 0; k--)
	{
		let dim = freeAxis.get(k);
		if (dim.getDimensionType().isTypeOf(oFF.DimensionType.CALCULATED_DIMENSION) && dim.getFilter() === null && !this.hasLinkedFilterOnDimension(dim))
		{
			queryModel.removePreQueryByName(dim.getPreQueryName());
			queryModel.removeCalculatedDimensionByName(dim.getName());
		}
	}
	return this.m_secondaryQueryManager.getContext();
};
oFF.QFilterAcrossModels.prototype.setupFilterAcrossModels = function(context, name)
{
	this.m_children = oFF.XList.create();
	this.m_measureNames = oFF.XHashSetOfString.create();
	this.m_secondaryMeasureNames = oFF.XHashSetOfString.create();
	this.m_links = oFF.XList.create();
	this.m_preferPrequeryBasedStrategy = false;
	this.m_queryModelTransientDimensions = oFF.XHashMapByString.create();
	this.m_maxLovRows = null;
	this.m_messageManager = oFF.MessageManager.createMessageManagerExt(context.getSession());
	this.m_isLinkOptimized = false;
	this.m_clearCache = false;
	this.setupTransientFilter(context, name, null);
};
oFF.QFilterAcrossModels.prototype.setupIfNotExistsAndGetSecondaryContext = function()
{
	let secondaryLinkPart = this.getFirstSecondaryFieldLink(this.getContext());
	let secondaryContext = this.m_secondaryQueryManager;
	if (oFF.isNull(this.m_secondaryQueryManager) || this.m_secondaryQueryManager.isReleased() || !secondaryLinkPart.isSameDataSourceOrDatasetIdAsContext(this.m_secondaryQueryManager))
	{
		secondaryContext = this.setupAndGetSecondaryContext(this.getContext(), secondaryLinkPart);
	}
	secondaryContext.getQueryManager().getClientInfo().copyFromContext(this.getContext().getQueryManager());
	return secondaryContext;
};
oFF.QFilterAcrossModels.prototype.setupSecondaryQueryManager = function(olapEnv, secondaryLink, linkedDimensions)
{
	let queryManagerByDataSource = this.getQueryManagerByDimensionLink(secondaryLink, linkedDimensions, olapEnv);
	if (oFF.notNull(queryManagerByDataSource))
	{
		if (queryManagerByDataSource !== this.m_secondaryQueryManager)
		{
			this.m_secondaryQueryManager = oFF.XObjectExt.release(this.m_secondaryQueryManager);
			this.m_secondaryQueryManager = queryManagerByDataSource.cloneQueryManagerExt(oFF.QueryCloneMode.CURRENT_STATE);
			this.ensureAccountHierarchySetAndActive();
		}
		return true;
	}
	return false;
};
oFF.QFilterAcrossModels.prototype.shouldGenerateTransientFilters = function()
{
	if (this.m_clearCache || oFF.isNull(this.m_cachedTransientFiltersWithSharedContext) || this.m_cachedTransientFiltersWithSharedContext.isReleased())
	{
		return true;
	}
	if (this.m_cachedTransientFiltersWithSharedContext.size() > 0)
	{
		let filter = this.m_cachedTransientFiltersWithSharedContext.get(0);
		return filter.getContext() === null || filter.getContext().isReleased();
	}
	return false;
};
oFF.QFilterAcrossModels.prototype.supportsPrequeryBasedFilterAcrossModels = function()
{
	return this.getContext().getModelCapabilities().supportsPrequeryBasedFilteringAcrossModelsExt(this.setupIfNotExistsAndGetSecondaryContext().getModelCapabilities()) && this.doAllLinkedDimensionsSupportPrequeryBasedFilterAcrossModels() && this.getContext().getQueryManager().getInitSettings().getProviderType() !== oFF.ProviderType.LIST_REPORTING;
};
oFF.QFilterAcrossModels.prototype.usePrequeryBasedTransientObjectGenerator = function()
{
	let secondaryContext = this.setupIfNotExistsAndGetSecondaryContext();
	let sourceFilters = this.m_layeredFilters.toReadOnly().getValuesAsReadOnlyList();
	return !this.getContext().getSession().hasFeature(oFF.FeatureToggleOlap.LOV_BASED_FILTER_ACROSS_MODELS) || this.supportsPrequeryBasedFilterAcrossModels() && (this.m_preferPrequeryBasedStrategy || !oFF.QFilterAcrossModelsFilterUtil.areAllFiltersDirect(secondaryContext, this.getContext(), this.m_links, sourceFilters) || oFF.QFilterAcrossModelsFilterUtil.hasSourceFilterLinkedOnDescription(secondaryContext, this.m_links, sourceFilters) || !this.hasSourceFilters());
};

oFF.QFilterAsymmetricVisibility = function() {};
oFF.QFilterAsymmetricVisibility.prototype = new oFF.AbstractTransientFilter();
oFF.QFilterAsymmetricVisibility.prototype._ff_c = "QFilterAsymmetricVisibility";

oFF.QFilterAsymmetricVisibility.LINK_FILTER_PREFIX = "__transient|";
oFF.QFilterAsymmetricVisibility.createFilterAsymmetricVisibility = function(context, name, selectionContainer)
{
	let fav = new oFF.QFilterAsymmetricVisibility();
	fav.setupTransientFilter(context, name, selectionContainer);
	return fav;
};
oFF.QFilterAsymmetricVisibility.prototype.m_complexRootElement = null;
oFF.QFilterAsymmetricVisibility.prototype.m_filterExpression = null;
oFF.QFilterAsymmetricVisibility.prototype.m_visibilityFilterExpression = null;
oFF.QFilterAsymmetricVisibility.prototype.convertNodes = function(filterElement)
{
	if (filterElement.getOlapComponentType().isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
	{
		let cartesianList = filterElement;
		if (cartesianList.isConvertToFlatFilter())
		{
			cartesianList.setConvertToFlatFilter(false);
		}
		return;
	}
	if (filterElement.getOlapComponentType().isTypeOf(oFF.FilterComponentType.FILTER_DYNAMIC_TIME_REGULAR_RANGE))
	{
		let rangeElement = filterElement;
		if (rangeElement.isConvertToFlatFilter())
		{
			rangeElement.setConvertToFlatFilter(false);
		}
		return;
	}
	let childrenIterator = filterElement.getChildrenIterator();
	while (childrenIterator.hasNext())
	{
		let filterChild = childrenIterator.next();
		this.convertNodes(filterChild);
	}
};
oFF.QFilterAsymmetricVisibility.prototype.destroyTransientObjects = function(context)
{
	this.destroyTransientFromExternalFilters(context);
	if (oFF.notNull(this.m_visibilityFilterExpression))
	{
		let queryModel = context.getQueryModel();
		queryModel.getFilter().linkFilter(this.getLinkFilterKey(), null);
		this.m_filterExpression = oFF.XObjectExt.release(this.m_filterExpression);
		queryModel.getFilter().linkVisibilityFilter(this.getLinkFilterKey(), null);
		this.m_visibilityFilterExpression = oFF.XObjectExt.release(this.m_visibilityFilterExpression);
	}
};
oFF.QFilterAsymmetricVisibility.prototype.generateTransientObjects = function(context, messageManager)
{
	if (oFF.isNull(this.m_complexRootElement))
	{
		return;
	}
	let queryModel = context.getQueryModel();
	this.m_filterExpression = oFF.QFactory.createFilterExpression(queryModel, queryModel);
	this.m_filterExpression.setComplexRoot(this.m_complexRootElement);
	queryModel.getFilter().linkFilter(this.getLinkFilterKey(), this.m_filterExpression);
	this.m_visibilityFilterExpression = oFF.QFactory.createFilterExpression(queryModel, queryModel);
	let visibilityFilterElement = oFF.QFilterUtil.createFilterElementFromOrigin(this.m_complexRootElement, this.m_visibilityFilterExpression);
	this.convertNodes(visibilityFilterElement);
	this.m_visibilityFilterExpression.setComplexRoot(visibilityFilterElement);
	queryModel.getFilter().linkVisibilityFilter(this.getLinkFilterKey(), this.m_visibilityFilterExpression);
};
oFF.QFilterAsymmetricVisibility.prototype.getComplexRoot = function()
{
	return this.m_complexRootElement;
};
oFF.QFilterAsymmetricVisibility.prototype.getLinkFilterKey = function()
{
	return oFF.XStringUtils.concatenate3(oFF.QFilterAsymmetricVisibility.LINK_FILTER_PREFIX, this.getName(), "|");
};
oFF.QFilterAsymmetricVisibility.prototype.getOlapComponentType = function()
{
	return oFF.FilterComponentType.FILTER_ASYMMETRIC_VISIBILITY;
};
oFF.QFilterAsymmetricVisibility.prototype.getTransientFilter = function(queryModel)
{
	return null;
};
oFF.QFilterAsymmetricVisibility.prototype.releaseObject = function()
{
	this.destroyTransientObjects(this.getContext());
	this.m_complexRootElement = oFF.XObjectExt.release(this.m_complexRootElement);
	this.m_visibilityFilterExpression = oFF.XObjectExt.release(this.m_visibilityFilterExpression);
	this.m_visibilityFilterExpression = oFF.XObjectExt.release(this.m_filterExpression);
	oFF.AbstractTransientFilter.prototype.releaseObject.call( this );
};
oFF.QFilterAsymmetricVisibility.prototype.setComplexRoot = function(complexFilter)
{
	this.m_complexRootElement = complexFilter;
};

oFF.QFilterDateRange = function() {};
oFF.QFilterDateRange.prototype = new oFF.QFilterOperation();
oFF.QFilterDateRange.prototype._ff_c = "QFilterDateRange";

oFF.QFilterDateRange.create = function(context, selectionContainer)
{
	let filter = new oFF.QFilterDateRange();
	filter.setupFilterOperation(context, selectionContainer, null);
	return filter;
};
oFF.QFilterDateRange.createFromFilterOperation = function(filterOperation, dateRange)
{
	if (oFF.notNull(filterOperation) && oFF.QFilterUtil.supportsDateRangeFilter(filterOperation.getField()) && oFF.notNull(dateRange))
	{
		let filter = new oFF.QFilterDateRange();
		filter.setupFilterOperation(filterOperation.getContext(), filterOperation.getFilterExpression(), filterOperation.getParent());
		filter.copyFrom(filterOperation, null);
		filter.setDateRange(dateRange, filter.getField());
		return filter;
	}
	return null;
};
oFF.QFilterDateRange.prototype.m_dateRange = null;
oFF.QFilterDateRange.prototype.convertToDateTime = function(date, timeTo)
{
	let dateTime = null;
	if (oFF.notNull(date))
	{
		dateTime = oFF.XDateTime.createWithYearMonthDay(date.getYear(), date.getMonthOfYear(), date.getDayOfMonth());
		if (timeTo)
		{
			dateTime.setTimeOfDay(23, 59, 59, 999);
		}
	}
	return dateTime;
};
oFF.QFilterDateRange.prototype.copyFromInternal = function(other, flags)
{
	oFF.QFilterOperation.prototype.copyFromInternal.call( this , other, flags);
	if (other.getOlapComponentType() === oFF.FilterComponentType.DATE_RANGE_OPERATION)
	{
		let otherDateRange = other;
		this.m_dateRange = oFF.notNull(otherDateRange.m_dateRange) ? otherDateRange.m_dateRange.clone() : null;
	}
};
oFF.QFilterDateRange.prototype.getDateRange = function()
{
	return this.m_dateRange;
};
oFF.QFilterDateRange.prototype.getOlapComponentType = function()
{
	return oFF.FilterComponentType.DATE_RANGE_OPERATION;
};
oFF.QFilterDateRange.prototype.isFromStart = function()
{
	return oFF.notNull(this.m_dateRange) && this.m_dateRange.getFromDate() === null;
};
oFF.QFilterDateRange.prototype.isToEnd = function()
{
	return oFF.notNull(this.m_dateRange) && this.m_dateRange.getToDate() === null;
};
oFF.QFilterDateRange.prototype.releaseObject = function()
{
	oFF.QFilterOperation.prototype.releaseObject.call( this );
	this.m_dateRange = oFF.XObjectExt.release(this.m_dateRange);
};
oFF.QFilterDateRange.prototype.setDateRange = function(dateRange, field)
{
	this.m_dateRange = dateRange;
	this.setField(field);
	let filterValueType = oFF.XValueType.DATE;
	let valueGranularity = null;
	if (oFF.notNull(field) && field.getValueType() !== null)
	{
		if (field.getValueType().isTypeOf(oFF.XValueType.DATE_TIME))
		{
			filterValueType = oFF.XValueType.DATE_TIME;
		}
		else if (field.getValueType().isTypeOf(oFF.XValueType.STRING))
		{
			filterValueType = oFF.XValueType.STRING;
			valueGranularity = oFF.HierarchyLevelType.getHighestDateRangeGranularity(this.getField().getDimension());
			if (oFF.isNull(valueGranularity))
			{
				valueGranularity = oFF.DateRangeGranularity.DAY;
			}
		}
	}
	if (oFF.isNull(dateRange))
	{
		this.setFilterValue(this.getLow(), filterValueType, null, false, valueGranularity);
		this.setFilterValue(this.getHigh(), filterValueType, null, true, valueGranularity);
		return;
	}
	let fromDate = dateRange.getFromDate();
	let toDate = dateRange.getToDate();
	if (oFF.isNull(fromDate) && oFF.isNull(toDate))
	{
		this.setFilterValue(this.getLow(), filterValueType, oFF.XDate.createDateWithValues(2, 1, 1), false, valueGranularity);
		this.setComparisonOperator(oFF.ComparisonOperator.GREATER_EQUAL);
	}
	else if (oFF.isNull(toDate))
	{
		this.setFilterValue(this.getLow(), filterValueType, fromDate, false, valueGranularity);
		this.setComparisonOperator(oFF.ComparisonOperator.GREATER_EQUAL);
	}
	else if (oFF.isNull(fromDate))
	{
		this.setFilterValue(this.getLow(), filterValueType, toDate, true, valueGranularity);
		this.setComparisonOperator(oFF.ComparisonOperator.LESS_EQUAL);
	}
	else
	{
		this.setFilterValue(this.getLow(), filterValueType, fromDate, false, valueGranularity);
		this.setFilterValue(this.getHigh(), filterValueType, toDate, true, valueGranularity);
		this.setComparisonOperator(oFF.ComparisonOperator.BETWEEN);
	}
};
oFF.QFilterDateRange.prototype.setFilterValue = function(valueBag, filterValueType, date, timeTo, granularity)
{
	valueBag.setFilterValueType(filterValueType);
	if (filterValueType === oFF.XValueType.DATE)
	{
		valueBag.setDate(date);
	}
	else if (filterValueType === oFF.XValueType.DATE_TIME)
	{
		valueBag.setDateTime(this.convertToDateTime(date, timeTo));
	}
	else
	{
		valueBag.setString(oFF.DateRangeGranularityMapper.mapToString(date, granularity));
	}
};

oFF.QFilterMeasureBased = function() {};
oFF.QFilterMeasureBased.prototype = new oFF.AbstractTransientFilter();
oFF.QFilterMeasureBased.prototype._ff_c = "QFilterMeasureBased";

oFF.QFilterMeasureBased.createFilterMeasureBased = function(context, name)
{
	let mbf = new oFF.QFilterMeasureBased();
	mbf.setupTransientFilter(context, name, null);
	mbf.m_dimensionContext = oFF.XList.create();
	return mbf;
};
oFF.QFilterMeasureBased.prototype.m_dimensionContext = null;
oFF.QFilterMeasureBased.prototype.m_formula = null;
oFF.QFilterMeasureBased.prototype.m_linkQueryFilter = false;
oFF.QFilterMeasureBased.prototype.m_measureMemberName = null;
oFF.QFilterMeasureBased.prototype.addDimensionContext = function(dimensionName)
{
	if (!this.m_dimensionContext.contains(dimensionName))
	{
		this.m_dimensionContext.add(dimensionName);
		this.notifyNodeChanged();
	}
};
oFF.QFilterMeasureBased.prototype.clearDimensionContext = function()
{
	this.m_dimensionContext.clear();
	this.notifyNodeChanged();
};
oFF.QFilterMeasureBased.prototype.copyFromInternal = function(other, flags)
{
	oFF.AbstractTransientFilter.prototype.copyFromInternal.call( this , other, flags);
	let originMeasureBasedFilter = other;
	this.setFormula(originMeasureBasedFilter.m_formula);
	this.m_dimensionContext.clear();
	this.m_dimensionContext.addAll(originMeasureBasedFilter.m_dimensionContext);
	this.m_measureMemberName = originMeasureBasedFilter.m_measureMemberName;
};
oFF.QFilterMeasureBased.prototype.destroyTransientObjects = function(context)
{
	this.destroyTransientFromExternalFilters(context);
	this.m_transientRefCount--;
	if (this.m_transientRefCount <= 0)
	{
		this.removeCalcDimByName(this.getName(), context);
	}
};
oFF.QFilterMeasureBased.prototype.generateTransientObjects = function(context, messageManager)
{
	if (!context.getModelCapabilities().supportsFilterMeasureBased())
	{
		messageManager.addError(oFF.ErrorCodes.INVALID_OPERATOR, "Context doesn't supports Filtering Measure Based!");
		return;
	}
	if (oFF.isNull(this.m_formula))
	{
		return;
	}
	let queryModel = context.getQueryModel();
	if (queryModel.getDimensionByName(this.getName()) !== null)
	{
		this.m_transientRefCount++;
		return;
	}
	this.m_transientRefCount = 1;
	let formulaCalcDim = oFF.QFactory.createFilterMeasureBasedCalculatedDimension(queryModel, this.getName());
	formulaCalcDim.setDisableSpatialExtendedDimensions(true);
	if (queryModel.getCurrencyTranslationManager() !== null)
	{
		formulaCalcDim.setCurrency(queryModel.getCurrencyTranslationManager().getDefaultCurrency());
	}
	let calcField = formulaCalcDim.addNewFormulaCalcField(oFF.PresentationType.KEY, formulaCalcDim.getName());
	calcField.setAutoSignFlip(true);
	let transientFormula = oFF.QFactory.createFormulaFunction(context);
	transientFormula.copyFormulaItemFunction(this.m_formula);
	calcField.setFormulaItem(transientFormula);
	let dimensionContext = this.m_dimensionContext.getIterator();
	while (dimensionContext.hasNext())
	{
		let dimensionName = dimensionContext.next();
		let dimension = queryModel.getDimensionByName(dimensionName);
		if (oFF.notNull(dimension))
		{
			formulaCalcDim.addAggregationFieldName(dimension.getKeyField().getName());
		}
		else
		{
			messageManager.addError(oFF.ErrorCodes.INVALID_DIMENSION, oFF.XStringUtils.concatenate3("Dimension ", dimensionName, " does not exist. Might be it has been removed from the model"));
		}
	}
	calcField.setCrossCalculationMeasure(this.getCrossCalculationMeasure());
	this.setFilterContext(formulaCalcDim);
	queryModel.addDimension(formulaCalcDim);
};
oFF.QFilterMeasureBased.prototype.getCrossCalculationMeasure = function()
{
	return this.m_measureMemberName;
};
oFF.QFilterMeasureBased.prototype.getDimensionContext = function()
{
	return this.m_dimensionContext;
};
oFF.QFilterMeasureBased.prototype.getDimensionsFromContext = function()
{
	let dimensionContext = this.m_dimensionContext.getIterator();
	let queryModel = this.getContext().getQueryManager().getQueryModel();
	let dimensions = oFF.XList.create();
	while (dimensionContext.hasNext())
	{
		let dimensionName = dimensionContext.next();
		let dimension = queryModel.getDimensionByName(dimensionName);
		if (oFF.notNull(dimension))
		{
			dimensions.add(dimension);
		}
	}
	return dimensions.getValuesAsReadOnlyList();
};
oFF.QFilterMeasureBased.prototype.getFormula = function()
{
	return this.m_formula;
};
oFF.QFilterMeasureBased.prototype.getOlapComponentType = function()
{
	return oFF.FilterComponentType.FILTER_MEASURE_BASED;
};
oFF.QFilterMeasureBased.prototype.getTransientFilter = function(queryModel)
{
	return null;
};
oFF.QFilterMeasureBased.prototype.isLinkQueryFilter = function()
{
	return this.m_linkQueryFilter;
};
oFF.QFilterMeasureBased.prototype.linkFilterExpression = function(calcDim, filterExpression)
{
	if (oFF.notNull(filterExpression) && filterExpression.isCartesianProduct())
	{
		let queryFilter = oFF.QFactory.createFilterExpression(calcDim, null);
		oFF.XStream.of(filterExpression.getCartesianProduct()).map((element) => {
			return element;
		}).filter((cartesianList) => {
			return cartesianList.getDimension().getDimensionType().isTypeOf(oFF.DimensionType.DIMENSION);
		}).forEach((dimFilter) => {
			queryFilter.getCartesianProductWithDefault().getCartesianListWithDefault(dimFilter.getDimension()).copyFrom(dimFilter, null);
		});
		if (queryFilter.getFilterRootElement() !== null)
		{
			let name = oFF.XSha1.createSHA1(queryFilter.serializeToString(oFF.QModelFormat.INA_DATA));
			calcDim.getLayeredFilters().putLayer(name, queryFilter);
		}
	}
};
oFF.QFilterMeasureBased.prototype.releaseObject = function()
{
	this.destroyTransientObjects(this.getContext());
	this.m_formula = oFF.XObjectExt.release(this.m_formula);
	this.m_dimensionContext = oFF.XObjectExt.release(this.m_dimensionContext);
	this.m_measureMemberName = null;
	oFF.AbstractTransientFilter.prototype.releaseObject.call( this );
};
oFF.QFilterMeasureBased.prototype.removeDimensionContext = function(dimensionName)
{
	this.m_dimensionContext.removeElement(dimensionName);
	this.notifyNodeChanged();
};
oFF.QFilterMeasureBased.prototype.setCrossCalculationMeasure = function(measureMemberName)
{
	this.m_measureMemberName = measureMemberName;
	this.notifyNodeChanged();
};
oFF.QFilterMeasureBased.prototype.setFilterContext = function(calcDim)
{
	if (this.m_linkQueryFilter)
	{
		let filter = this.getQueryModel().getFilter();
		this.linkFilterExpression(calcDim, filter.getDynamicFilter());
		oFF.XCollectionUtils.forEach(filter.getLinkedFilters(), (linkedFilter) => {
			this.linkFilterExpression(calcDim, linkedFilter);
		});
	}
	else
	{
		oFF.AbstractTransientFilter.prototype.setFilterContext.call( this , calcDim);
	}
};
oFF.QFilterMeasureBased.prototype.setFormula = function(formula)
{
	if (oFF.isNull(formula))
	{
		this.m_formula = null;
		this.notifyNodeChanged();
	}
	else if (formula.getOlapComponentType() === oFF.OlapComponentType.FORMULA_FUNCTION)
	{
		this.m_formula = oFF.QFactory.createFormulaFunction(this.getContext());
		this.m_formula.copyFormulaItemFunction(formula);
		this.notifyNodeChanged();
	}
};
oFF.QFilterMeasureBased.prototype.setLinkQueryFilter = function(linkQueryFilter)
{
	if (this.m_linkQueryFilter !== linkQueryFilter)
	{
		this.m_linkQueryFilter = linkQueryFilter;
		this.notifyNodeChanged();
	}
};

oFF.QResultStructureController = function() {};
oFF.QResultStructureController.prototype = new oFF.QResultStructureControllerGeneric();
oFF.QResultStructureController.prototype._ff_c = "QResultStructureController";

oFF.QResultStructureController._create = function(context, parentNode, location)
{
	let controller = new oFF.QResultStructureController();
	controller.setupController(context, parentNode, location);
	return controller;
};
oFF.QResultStructureController.prototype.m_alignment = null;
oFF.QResultStructureController.prototype.m_alignmentPriority = 0;
oFF.QResultStructureController.prototype.m_structure = null;
oFF.QResultStructureController.prototype.m_visibility = null;
oFF.QResultStructureController.prototype.clearOthersFromConditionsVisibilitySettings = function()
{
	if (this.m_visibility.hasElements())
	{
		let elem1 = this.m_visibility.getByKey((oFF.QVisibilityTriplet.getVisibilityKey(oFF.ResultAlignment.TOP, oFF.ResultStructureElement.OTHERS_FROM_CONDITIONS)));
		if (oFF.notNull(elem1))
		{
			this.m_visibility.removeElement(elem1);
			this.notifyNodeChanged();
		}
		let elem2 = this.m_visibility.getByKey((oFF.QVisibilityTriplet.getVisibilityKey(oFF.ResultAlignment.BOTTOM, oFF.ResultStructureElement.OTHERS_FROM_CONDITIONS)));
		if (oFF.notNull(elem2))
		{
			this.m_visibility.removeElement(elem2);
			this.notifyNodeChanged();
		}
		let elem3 = this.m_visibility.getByKey((oFF.QVisibilityTriplet.getVisibilityKey(oFF.ResultAlignment.TOP, oFF.ResultStructureElement.OTHERS_DETAILS_FROM_CONDITIONS)));
		if (oFF.notNull(elem3))
		{
			this.m_visibility.removeElement(elem3);
			this.notifyNodeChanged();
		}
		let elem4 = this.m_visibility.getByKey((oFF.QVisibilityTriplet.getVisibilityKey(oFF.ResultAlignment.BOTTOM, oFF.ResultStructureElement.OTHERS_DETAILS_FROM_CONDITIONS)));
		if (oFF.notNull(elem4))
		{
			this.m_visibility.removeElement(elem4);
			this.notifyNodeChanged();
		}
	}
};
oFF.QResultStructureController.prototype.clearResultVisibilitySettings = function()
{
	if (this.m_visibility.hasElements())
	{
		this.m_visibility.clear();
		this.notifyNodeChanged();
	}
};
oFF.QResultStructureController.prototype.copyFromInternal = function(other, flags)
{
	oFF.QResultStructureControllerGeneric.prototype.copyFromInternal.call( this , other, flags);
	let originResultStructureController = other;
	this.m_alignment = originResultStructureController.m_alignment;
	this.m_alignmentPriority = originResultStructureController.m_alignmentPriority;
	if (oFF.notNull(originResultStructureController.m_structure))
	{
		this.m_structure = oFF.QResultStructure.createResultStructure(this.getContext(), this);
		this.m_structure.copyFrom(originResultStructureController.m_structure, flags);
	}
	this.m_visibility = originResultStructureController.m_visibility.clone();
};
oFF.QResultStructureController.prototype.getAdvancedResultStructure = function()
{
	if (!this.supportsAdvancedResultStructure())
	{
		oFF.noSupport();
	}
	if (oFF.isNull(this.m_structure))
	{
		this.m_structure = oFF.QResultStructure.createResultStructure(this.getContext(), this);
		let lResultAlignment = this.getResultAlignment();
		this.m_structure.applyInitialDefaultResultStructure(lResultAlignment);
	}
	return this.m_structure;
};
oFF.QResultStructureController.prototype.getAlignmentPriority = function()
{
	return this.m_alignmentPriority;
};
oFF.QResultStructureController.prototype.getResultAlignment = function()
{
	let parentController = this.getParentController();
	let parentPriority = oFF.isNull(parentController) ? -1 : parentController.getAlignmentPriority();
	if (oFF.notNull(parentController) && (this.isTotalsAlignmentOnDefault() || parentPriority > -1 && (parentPriority < this.m_alignmentPriority || this.m_alignmentPriority === -1) && !parentController.isTotalsAlignmentOnDefault()))
	{
		return parentController.getResultAlignment();
	}
	if (!this.supportsResultAlignment())
	{
		return null;
	}
	this.initAlignment();
	return this.m_alignment;
};
oFF.QResultStructureController.prototype.getResultVisibilityByElementAndAlignment = function(alignment, element)
{
	if (this.isTotalsVisibilityOnDefault() || this.m_visibility.isEmpty())
	{
		let lParentController = this.getParentController();
		if (oFF.notNull(lParentController))
		{
			return lParentController.getResultVisibilityByElement(element);
		}
	}
	if (!this.supportsResultVisibility() || this.m_visibility.isEmpty())
	{
		return oFF.ResultVisibility.HIDDEN;
	}
	let result = null;
	if (alignment === oFF.ResultAlignment.TOPBOTTOM)
	{
		let topTriplet = this.m_visibility.getByKey(oFF.QVisibilityTriplet.getVisibilityKey(oFF.ResultAlignment.TOP, element));
		let bottomTriplet = this.m_visibility.getByKey(oFF.QVisibilityTriplet.getVisibilityKey(oFF.ResultAlignment.BOTTOM, element));
		if (oFF.notNull(topTriplet) && oFF.notNull(bottomTriplet) && topTriplet.getVisibility() === bottomTriplet.getVisibility())
		{
			result = topTriplet.getVisibility();
		}
	}
	else if (alignment === oFF.ResultAlignment.STRUCTURE)
	{
		let advancedResultStructure = this.getAdvancedResultStructure();
		let size = advancedResultStructure.size();
		for (let i = 0; i < size; i++)
		{
			let item = advancedResultStructure.get(i);
			if (element === item.getResultStructureElement())
			{
				return item.getResultVisibility();
			}
		}
	}
	else
	{
		let key = oFF.QVisibilityTriplet.getVisibilityKey(alignment, element);
		let triplet = this.m_visibility.getByKey(key);
		if (oFF.notNull(triplet))
		{
			result = triplet.getVisibility();
		}
	}
	if (oFF.isNull(result))
	{
		return oFF.ResultVisibility.HIDDEN;
	}
	return result;
};
oFF.QResultStructureController.prototype.getResultVisibilitySettings = function()
{
	if (this.m_visibility.isEmpty())
	{
		return null;
	}
	return oFF.XIteratorWrapper.create(this.m_visibility.getIterator());
};
oFF.QResultStructureController.prototype.getTotalsStructure = function()
{
	let resultAlignment = this.getResultAlignment();
	if (resultAlignment === oFF.ResultAlignment.STRUCTURE)
	{
		oFF.XObjectExt.assertNotNullExt(this.m_structure, "Structure must be available at this point in time");
		return this.m_structure;
	}
	let list = oFF.XList.create();
	if (resultAlignment === oFF.ResultAlignment.TOP || resultAlignment === oFF.ResultAlignment.TOPBOTTOM)
	{
		let topVisibility = this.getResultVisibilityByElementAndAlignment(oFF.ResultAlignment.TOP, oFF.ResultStructureElement.TOTAL);
		list.add(oFF.QResultStructureItem.createResultStructureItem(this.getContext(), this, oFF.ResultStructureElement.TOTAL, topVisibility));
		topVisibility = this.getResultVisibilityByElementAndAlignment(oFF.ResultAlignment.TOP, oFF.ResultStructureElement.TOTAL_INCLUDED_MEMBERS);
		list.add(oFF.QResultStructureItem.createResultStructureItem(this.getContext(), this, oFF.ResultStructureElement.TOTAL_INCLUDED_MEMBERS, topVisibility));
		topVisibility = this.getResultVisibilityByElementAndAlignment(oFF.ResultAlignment.TOP, oFF.ResultStructureElement.TOTAL_REMAINING_MEMBERS);
		list.add(oFF.QResultStructureItem.createResultStructureItem(this.getContext(), this, oFF.ResultStructureElement.TOTAL_REMAINING_MEMBERS, topVisibility));
		topVisibility = this.getResultVisibilityByElementAndAlignment(oFF.ResultAlignment.TOP, oFF.ResultStructureElement.OTHERS_FROM_CONDITIONS);
		list.add(oFF.QResultStructureItem.createResultStructureItem(this.getContext(), this, oFF.ResultStructureElement.OTHERS_FROM_CONDITIONS, topVisibility));
		topVisibility = this.getResultVisibilityByElementAndAlignment(oFF.ResultAlignment.TOP, oFF.ResultStructureElement.OTHERS_DETAILS_FROM_CONDITIONS);
		list.add(oFF.QResultStructureItem.createResultStructureItem(this.getContext(), this, oFF.ResultStructureElement.OTHERS_DETAILS_FROM_CONDITIONS, topVisibility));
	}
	list.add(oFF.QResultStructureItem.createResultStructureItem(this.getContext(), this, oFF.ResultStructureElement.MEMBERS, oFF.ResultVisibility.VISIBLE));
	if (resultAlignment === oFF.ResultAlignment.BOTTOM || resultAlignment === oFF.ResultAlignment.TOPBOTTOM)
	{
		let bottomVisibility = this.getResultVisibilityByElementAndAlignment(oFF.ResultAlignment.BOTTOM, oFF.ResultStructureElement.TOTAL);
		list.add(oFF.QResultStructureItem.createResultStructureItem(this.getContext(), this, oFF.ResultStructureElement.TOTAL, bottomVisibility));
		bottomVisibility = this.getResultVisibilityByElementAndAlignment(oFF.ResultAlignment.BOTTOM, oFF.ResultStructureElement.TOTAL_INCLUDED_MEMBERS);
		list.add(oFF.QResultStructureItem.createResultStructureItem(this.getContext(), this, oFF.ResultStructureElement.TOTAL_INCLUDED_MEMBERS, bottomVisibility));
		bottomVisibility = this.getResultVisibilityByElementAndAlignment(oFF.ResultAlignment.BOTTOM, oFF.ResultStructureElement.TOTAL_REMAINING_MEMBERS);
		list.add(oFF.QResultStructureItem.createResultStructureItem(this.getContext(), this, oFF.ResultStructureElement.TOTAL_REMAINING_MEMBERS, bottomVisibility));
		bottomVisibility = this.getResultVisibilityByElementAndAlignment(oFF.ResultAlignment.BOTTOM, oFF.ResultStructureElement.OTHERS_FROM_CONDITIONS);
		list.add(oFF.QResultStructureItem.createResultStructureItem(this.getContext(), this, oFF.ResultStructureElement.OTHERS_FROM_CONDITIONS, bottomVisibility));
		bottomVisibility = this.getResultVisibilityByElementAndAlignment(oFF.ResultAlignment.BOTTOM, oFF.ResultStructureElement.OTHERS_DETAILS_FROM_CONDITIONS);
		list.add(oFF.QResultStructureItem.createResultStructureItem(this.getContext(), this, oFF.ResultStructureElement.OTHERS_DETAILS_FROM_CONDITIONS, bottomVisibility));
	}
	return list;
};
oFF.QResultStructureController.prototype.initAlignment = function()
{
	if (oFF.isNull(this.m_alignment))
	{
		let lDefaultAlignment = oFF.ResultAlignment.BOTTOM;
		let ltSupportedResultAlignments = this.getModelCapabilities().getSupportedResultAlignments();
		if (ltSupportedResultAlignments.contains(lDefaultAlignment))
		{
			this.m_alignment = lDefaultAlignment;
		}
		else if (ltSupportedResultAlignments.hasElements())
		{
			this.m_alignment = ltSupportedResultAlignments.get(0);
		}
		else
		{
			this.m_alignment = oFF.ResultAlignment.NONE;
		}
	}
};
oFF.QResultStructureController.prototype.internalSetTotalsAlignmentDefault = function(copy)
{
	if (copy)
	{
		this.m_alignment = this.getResultAlignment();
	}
	else
	{
		this.m_alignment = null;
	}
};
oFF.QResultStructureController.prototype.internalSetTotalsVisibilityDefault = function(copy)
{
	this.queueEventing();
	if (copy)
	{
		this.putOrChangeVisbility(oFF.ResultAlignment.TOP, oFF.ResultStructureElement.TOTAL, this.getResultVisibilityByElementAndAlignment(oFF.ResultAlignment.TOP, oFF.ResultStructureElement.TOTAL));
		this.putOrChangeVisbility(oFF.ResultAlignment.TOP, oFF.ResultStructureElement.TOTAL_INCLUDED_MEMBERS, this.getResultVisibilityByElementAndAlignment(oFF.ResultAlignment.TOP, oFF.ResultStructureElement.TOTAL_INCLUDED_MEMBERS));
		this.putOrChangeVisbility(oFF.ResultAlignment.TOP, oFF.ResultStructureElement.TOTAL_REMAINING_MEMBERS, this.getResultVisibilityByElementAndAlignment(oFF.ResultAlignment.TOP, oFF.ResultStructureElement.TOTAL_REMAINING_MEMBERS));
		this.putOrChangeVisbility(oFF.ResultAlignment.BOTTOM, oFF.ResultStructureElement.TOTAL, this.getResultVisibilityByElementAndAlignment(oFF.ResultAlignment.TOP, oFF.ResultStructureElement.TOTAL));
		this.putOrChangeVisbility(oFF.ResultAlignment.BOTTOM, oFF.ResultStructureElement.TOTAL_INCLUDED_MEMBERS, this.getResultVisibilityByElementAndAlignment(oFF.ResultAlignment.TOP, oFF.ResultStructureElement.TOTAL_INCLUDED_MEMBERS));
		this.putOrChangeVisbility(oFF.ResultAlignment.BOTTOM, oFF.ResultStructureElement.TOTAL_REMAINING_MEMBERS, this.getResultVisibilityByElementAndAlignment(oFF.ResultAlignment.TOP, oFF.ResultStructureElement.TOTAL_REMAINING_MEMBERS));
	}
	else
	{
		this.m_visibility.clear();
	}
	this.resumeEventing();
};
oFF.QResultStructureController.prototype.notifyNodeChanged = function()
{
	oFF.QResultStructureControllerGeneric.prototype.notifyNodeChanged.call( this );
	if (this.getModelLevel() === oFF.QModelLevel.DIMENSIONS && !this.isEventingStopped())
	{
		this.getParent().setTotalsModified(true);
	}
};
oFF.QResultStructureController.prototype.putOrChangeVisbility = function(alignment, element, visibility)
{
	let key = oFF.QVisibilityTriplet.getVisibilityKey(alignment, element);
	let triplet = this.m_visibility.getByKey(key);
	if (oFF.isNull(triplet))
	{
		this.m_visibility.add(oFF.QVisibilityTriplet.create(alignment, element, visibility));
		this.notifyNodeChanged();
	}
	else
	{
		if (triplet.getVisibility() !== visibility)
		{
			triplet.setVisibility(visibility);
			this.notifyNodeChanged();
		}
	}
};
oFF.QResultStructureController.prototype.releaseObject = function()
{
	this.m_structure = oFF.XObjectExt.release(this.m_structure);
	this.m_visibility = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_visibility);
	this.m_alignment = null;
	oFF.QResultStructureControllerGeneric.prototype.releaseObject.call( this );
};
oFF.QResultStructureController.prototype.setAlignmentPriority = function(alignmentPriority)
{
	if (this.m_alignmentPriority !== alignmentPriority)
	{
		this.m_alignmentPriority = alignmentPriority;
		this.notifyNodeChanged();
	}
};
oFF.QResultStructureController.prototype.setResultAlignment = function(alignment)
{
	this.setResultAlignmentBase(alignment, true);
};
oFF.QResultStructureController.prototype.setResultAlignmentBase = function(alignment, recurseChildren)
{
	if (oFF.isNull(alignment))
	{
		return false;
	}
	if (!this.supportsResultAlignment())
	{
		return false;
	}
	this.restoreTotalsAlignment(oFF.RestoreAction.CONDITIONAL_COPY, recurseChildren);
	if (this.m_alignment === alignment)
	{
		return false;
	}
	this.m_alignment = alignment;
	if (this.m_alignment === oFF.ResultAlignment.STRUCTURE)
	{
		this.getAdvancedResultStructure();
	}
	this.notifyNodeChanged();
	return true;
};
oFF.QResultStructureController.prototype.setResultVisibilityByElement = function(element, visibility)
{
	if (!this.getModelCapabilities().supportsOthersFromConditions() && element.isOthersFromConditions() || !this.getModelCapabilities().supportsOthersDetailsFromConditions() && element.isOthersDetailsFromConditions())
	{
		return;
	}
	if (this.getResultAlignment() === oFF.ResultAlignment.STRUCTURE)
	{
		this.setResultVisibilityByElementAndAlignment(oFF.ResultAlignment.STRUCTURE, element, visibility);
	}
	else
	{
		this.setResultVisibilityByElementAndAlignment(oFF.ResultAlignment.TOP, element, visibility);
		this.setResultVisibilityByElementAndAlignment(oFF.ResultAlignment.BOTTOM, element, visibility);
	}
};
oFF.QResultStructureController.prototype.setResultVisibilityByElementAndAlignment = function(alignment, element, visibility)
{
	if (!this.getModelCapabilities().supportsOthersFromConditions() && element.isOthersFromConditions() || !this.getModelCapabilities().supportsOthersDetailsFromConditions() && element.isOthersDetailsFromConditions())
	{
		return;
	}
	if (alignment === oFF.ResultAlignment.STRUCTURE)
	{
		this.restoreTotalsVisibility(oFF.RestoreAction.CONDITIONAL_COPY, true);
		let advancedResultStructure = this.getAdvancedResultStructure();
		let size = advancedResultStructure.size();
		for (let i = 0; i < size; i++)
		{
			let item = advancedResultStructure.get(i);
			if (element === item.getResultStructureElement())
			{
				item.setResultVisibility(visibility);
			}
		}
	}
	else if (alignment === oFF.ResultAlignment.TOPBOTTOM)
	{
		this.setResultVisibilityByElementAndAlignment(oFF.ResultAlignment.TOP, element, visibility);
		this.setResultVisibilityByElementAndAlignment(oFF.ResultAlignment.BOTTOM, element, visibility);
	}
	else
	{
		this.restoreTotalsVisibility(oFF.RestoreAction.CONDITIONAL_COPY, true);
		this.putOrChangeVisbility(alignment, element, visibility);
	}
};
oFF.QResultStructureController.prototype.setupController = function(context, parentNode, location)
{
	oFF.QResultStructureControllerGeneric.prototype.setupGenericController.call( this , context, parentNode, location);
	this.m_alignment = null;
	this.m_visibility = oFF.XSetOfNameObject.create();
	this.m_alignmentPriority = -1;
};

oFF.QComplexSorting = function() {};
oFF.QComplexSorting.prototype = new oFF.QComplexAndDataCellSorting();
oFF.QComplexSorting.prototype._ff_c = "QComplexSorting";

oFF.QComplexSorting.create = function(parentNode, path)
{
	let sorting = new oFF.QComplexSorting();
	sorting.setupSorting(parentNode, path);
	return sorting;
};
oFF.QComplexSorting.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.COMPLEX_SORTING;
};
oFF.QComplexSorting.prototype.getSortingType = function()
{
	return oFF.SortType.COMPLEX;
};

oFF.QDataCellSorting = function() {};
oFF.QDataCellSorting.prototype = new oFF.QComplexAndDataCellSorting();
oFF.QDataCellSorting.prototype._ff_c = "QDataCellSorting";

oFF.QDataCellSorting.create = function(parentNode, path)
{
	let sorting = new oFF.QDataCellSorting();
	sorting.setupSorting(parentNode, path);
	return sorting;
};
oFF.QDataCellSorting.prototype.m_dimension = null;
oFF.QDataCellSorting.prototype.copyFromInternal = function(other, flags)
{
	oFF.QComplexAndDataCellSorting.prototype.copyFromInternal.call( this , other, flags);
	let originDataCellSorting = other;
	let queryModel = this.getQueryModel();
	if (oFF.notNull(originDataCellSorting.m_dimension))
	{
		this.setDimension(queryModel.getDimensionByNameFromExistingMetadata(originDataCellSorting.getDimension().getName()));
	}
};
oFF.QDataCellSorting.prototype.getDimension = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_dimension);
};
oFF.QDataCellSorting.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.DATA_CELL_SORTING;
};
oFF.QDataCellSorting.prototype.getSortingType = function()
{
	return oFF.SortType.DATA_CELL_VALUE;
};
oFF.QDataCellSorting.prototype.releaseObject = function()
{
	this.m_dimension = oFF.XObjectExt.release(this.m_dimension);
	oFF.QComplexAndDataCellSorting.prototype.releaseObject.call( this );
};
oFF.QDataCellSorting.prototype.setDimension = function(dimension)
{
	this.m_dimension = oFF.XWeakReferenceUtil.getWeakRef(dimension);
};
oFF.QDataCellSorting.prototype.supportsDimension = function()
{
	return true;
};

oFF.QChartAxis = function() {};
oFF.QChartAxis.prototype = new oFF.QVizChartDefinitionContext();
oFF.QChartAxis.prototype._ff_c = "QChartAxis";

oFF.QChartAxis.create = function(context, parent)
{
	let instance = new oFF.QChartAxis();
	instance.setupModelComponent(context, parent);
	instance.m_headerStyle = oFF.QVizLabelStyle.create(context, instance);
	instance.m_labelStyle = oFF.QVizLabelStyle.create(context, instance);
	instance.m_line = oFF.QChartAxisComponent.create(context, instance);
	instance.m_tick = oFF.QChartAxisComponent.create(context, instance);
	instance.m_showLabelGrids = oFF.QStylingValueBoolean.create();
	instance.m_color = oFF.QStylingValueString.create();
	return instance;
};
oFF.QChartAxis.prototype.m_color = null;
oFF.QChartAxis.prototype.m_headerStyle = null;
oFF.QChartAxis.prototype.m_labelStyle = null;
oFF.QChartAxis.prototype.m_line = null;
oFF.QChartAxis.prototype.m_showLabelGrids = null;
oFF.QChartAxis.prototype.m_tick = null;
oFF.QChartAxis.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVizChartDefinitionContext.prototype.copyFromInternal.call( this , other, flags);
	let origin = other;
	this.m_labelStyle.copyFrom(origin.m_labelStyle, flags);
	this.m_headerStyle.copyFrom(origin.m_headerStyle, flags);
	this.m_line.copyFrom(origin.m_line, flags);
	this.m_tick.copyFrom(origin.m_tick, flags);
	this.m_showLabelGrids.copyFrom(origin.m_showLabelGrids, flags);
	this.m_color.copyFrom(origin.m_color, flags);
};
oFF.QChartAxis.prototype.getColor = function()
{
	return this.m_color.resolveString(this.getChartDefinition());
};
oFF.QChartAxis.prototype.getColorRaw = function()
{
	return this.m_color;
};
oFF.QChartAxis.prototype.getHeaderStyle = function()
{
	return this.m_headerStyle;
};
oFF.QChartAxis.prototype.getLabelStyle = function()
{
	return this.m_labelStyle;
};
oFF.QChartAxis.prototype.getLine = function()
{
	return this.m_line;
};
oFF.QChartAxis.prototype.getShowLabelGrids = function()
{
	return this.m_showLabelGrids.resolveBoolean(this.getChartDefinition());
};
oFF.QChartAxis.prototype.getShowLabelGridsExt = function()
{
	return this.m_showLabelGrids.resolveTriStateBoolean(this.getChartDefinition());
};
oFF.QChartAxis.prototype.getShowLabelGridsRaw = function()
{
	return this.m_showLabelGrids;
};
oFF.QChartAxis.prototype.getTick = function()
{
	return this.m_tick;
};
oFF.QChartAxis.prototype.mergeWithDefaults = function(variableHolderWithFallback, chartAxis)
{
	this.m_color.acquireOtherValue(variableHolderWithFallback, chartAxis.getColorRaw());
	this.m_showLabelGrids.acquireOtherValueIfNeeded(variableHolderWithFallback, chartAxis.getShowLabelGridsRaw());
	this.m_headerStyle.mergeWithDefaults(variableHolderWithFallback, chartAxis.getHeaderStyle());
	this.m_labelStyle.mergeWithDefaults(variableHolderWithFallback, chartAxis.getLabelStyle());
	this.m_tick.mergeWithDefaults(variableHolderWithFallback, chartAxis.getTick());
	this.m_line.mergeWithDefaults(variableHolderWithFallback, chartAxis.getLine());
};
oFF.QChartAxis.prototype.releaseObject = function()
{
	this.m_headerStyle = oFF.XObjectExt.release(this.m_headerStyle);
	this.m_labelStyle = oFF.XObjectExt.release(this.m_labelStyle);
	this.m_line = oFF.XObjectExt.release(this.m_line);
	this.m_tick = oFF.XObjectExt.release(this.m_tick);
	this.m_showLabelGrids = oFF.XObjectExt.release(this.m_showLabelGrids);
	this.m_color = oFF.XObjectExt.release(this.m_color);
	oFF.QVizChartDefinitionContext.prototype.releaseObject.call( this );
};
oFF.QChartAxis.prototype.setColor = function(color)
{
	this.m_color.setString(color);
};
oFF.QChartAxis.prototype.setShowLabelGrids = function(showLabelGrids)
{
	this.m_showLabelGrids.setBoolean(showLabelGrids);
};
oFF.QChartAxis.prototype.setShowLabelGridsExt = function(showLabelGrids)
{
	this.m_showLabelGrids.setTriStateBoolean(showLabelGrids);
};

oFF.QChartAxisComponent = function() {};
oFF.QChartAxisComponent.prototype = new oFF.QVizChartDefinitionContext();
oFF.QChartAxisComponent.prototype._ff_c = "QChartAxisComponent";

oFF.QChartAxisComponent.create = function(context, parent)
{
	let instance = new oFF.QChartAxisComponent();
	instance.setupModelComponent(context, parent);
	instance.m_size = oFF.QStylingValueDouble.create();
	instance.m_visible = oFF.QStylingValueBoolean.create();
	return instance;
};
oFF.QChartAxisComponent.prototype.m_size = null;
oFF.QChartAxisComponent.prototype.m_visible = null;
oFF.QChartAxisComponent.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVizChartDefinitionContext.prototype.copyFromInternal.call( this , other, flags);
	let origin = other;
	this.m_size.copyFrom(origin.m_size, flags);
	this.m_visible.copyFrom(origin.m_visible, flags);
};
oFF.QChartAxisComponent.prototype.getSize = function()
{
	return this.m_size.resolveDouble(this.getChartDefinition());
};
oFF.QChartAxisComponent.prototype.getSizeRaw = function()
{
	return this.m_size;
};
oFF.QChartAxisComponent.prototype.getVisibleRaw = function()
{
	return this.m_visible;
};
oFF.QChartAxisComponent.prototype.isVisible = function()
{
	return this.m_visible.resolveBoolean(this.getChartDefinition());
};
oFF.QChartAxisComponent.prototype.isVisibleExt = function()
{
	return this.m_visible.resolveTriStateBoolean(this.getChartDefinition());
};
oFF.QChartAxisComponent.prototype.mergeWithDefaults = function(variableHolderWithFallback, chartAxisComponent)
{
	this.m_visible.acquireOtherValueIfNeeded(variableHolderWithFallback, chartAxisComponent.getVisibleRaw());
	this.m_size.acquireOtherValueIfNeeded(variableHolderWithFallback, chartAxisComponent.getSizeRaw());
};
oFF.QChartAxisComponent.prototype.releaseObject = function()
{
	this.m_size = oFF.XObjectExt.release(this.m_size);
	this.m_visible = oFF.XObjectExt.release(this.m_visible);
	oFF.QVizChartDefinitionContext.prototype.releaseObject.call( this );
};
oFF.QChartAxisComponent.prototype.setSize = function(size)
{
	this.m_size.setDouble(size);
};
oFF.QChartAxisComponent.prototype.setVisible = function(visible)
{
	this.m_visible.setBoolean(visible);
};
oFF.QChartAxisComponent.prototype.setVisibleExt = function(visible)
{
	this.m_visible.setTriStateBoolean(visible);
};

oFF.QChartColorScheme = function() {};
oFF.QChartColorScheme.prototype = new oFF.QVizChartDefinitionContext();
oFF.QChartColorScheme.prototype._ff_c = "QChartColorScheme";

oFF.QChartColorScheme.create = function(context, parent)
{
	let instance = new oFF.QChartColorScheme();
	instance.setupModelComponent(context, parent);
	instance.m_colors = oFF.QStylingValueStringList.create();
	instance.m_patterns = oFF.QStylingValueConstantList.create((bpt) => {
		return oFF.BackgroundPatternType.lookup(bpt);
	});
	instance.m_shapes = oFF.QStylingValueConstantList.create((cps) => {
		return oFF.ChartPointShape.lookup(cps);
	});
	instance.m_lineStyles = oFF.QStylingValueConstantList.create((cls) => {
		return oFF.ChartLineStyle.lookup(cls);
	});
	return instance;
};
oFF.QChartColorScheme.prototype.m_colors = null;
oFF.QChartColorScheme.prototype.m_lineStyles = null;
oFF.QChartColorScheme.prototype.m_patterns = null;
oFF.QChartColorScheme.prototype.m_shapes = null;
oFF.QChartColorScheme.prototype.addColor = function(color)
{
	this.m_colors.addString(color);
};
oFF.QChartColorScheme.prototype.addLineStyle = function(lineStyle)
{
	this.m_lineStyles.addFixedValue(lineStyle);
};
oFF.QChartColorScheme.prototype.addPattern = function(pattern)
{
	this.m_patterns.addFixedValue(pattern);
};
oFF.QChartColorScheme.prototype.addShape = function(shape)
{
	this.m_shapes.addFixedValue(shape);
};
oFF.QChartColorScheme.prototype.clearColors = function()
{
	this.m_colors.clear();
};
oFF.QChartColorScheme.prototype.clearLineStyles = function()
{
	this.m_lineStyles.clear();
};
oFF.QChartColorScheme.prototype.clearPatterns = function()
{
	this.m_patterns.clear();
};
oFF.QChartColorScheme.prototype.clearShapes = function()
{
	this.m_shapes.clear();
};
oFF.QChartColorScheme.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVizChartDefinitionContext.prototype.copyFromInternal.call( this , other, flags);
	let origin = other;
	this.m_colors.copyFrom(origin.m_colors, flags);
	this.m_patterns.copyFrom(origin.m_patterns, flags);
	this.m_lineStyles.copyFrom(origin.m_lineStyles, flags);
	this.m_shapes.copyFrom(origin.m_shapes, flags);
};
oFF.QChartColorScheme.prototype.getColors = function()
{
	return this.m_colors.resolveStringList(this.getChartDefinition());
};
oFF.QChartColorScheme.prototype.getColorsRaw = function()
{
	return this.m_colors;
};
oFF.QChartColorScheme.prototype.getLineStyles = function()
{
	return this.m_lineStyles.getResolvedValues(this.getChartDefinition());
};
oFF.QChartColorScheme.prototype.getLineStylesRaw = function()
{
	return this.m_lineStyles;
};
oFF.QChartColorScheme.prototype.getPatterns = function()
{
	return this.m_patterns.getResolvedValues(this.getChartDefinition());
};
oFF.QChartColorScheme.prototype.getPatternsRaw = function()
{
	return this.m_patterns;
};
oFF.QChartColorScheme.prototype.getShapes = function()
{
	return this.m_shapes.getResolvedValues(this.getChartDefinition());
};
oFF.QChartColorScheme.prototype.getShapesRaw = function()
{
	return this.m_shapes;
};
oFF.QChartColorScheme.prototype.releaseObject = function()
{
	this.m_colors = oFF.XObjectExt.release(this.m_colors);
	this.m_patterns = oFF.XObjectExt.release(this.m_patterns);
	this.m_shapes = oFF.XObjectExt.release(this.m_shapes);
	this.m_lineStyles = oFF.XObjectExt.release(this.m_lineStyles);
	oFF.QVizChartDefinitionContext.prototype.releaseObject.call( this );
};
oFF.QChartColorScheme.prototype.setColors = function(colors)
{
	this.m_colors.clear();
	if (oFF.notNull(colors))
	{
		oFF.XCollectionUtils.forEach(colors, (color) => {
			this.m_colors.addString(color);
		});
	}
};
oFF.QChartColorScheme.prototype.setLineStyles = function(lineStyles)
{
	this.m_lineStyles.clear();
	if (oFF.notNull(lineStyles))
	{
		oFF.XCollectionUtils.forEach(lineStyles, (lineStyle) => {
			this.m_lineStyles.addFixedValue(lineStyle);
		});
	}
};
oFF.QChartColorScheme.prototype.setPatterns = function(patterns)
{
	this.m_patterns.clear();
	if (oFF.notNull(patterns))
	{
		oFF.XCollectionUtils.forEach(patterns, (pattern) => {
			this.m_patterns.addFixedValue(pattern);
		});
	}
};
oFF.QChartColorScheme.prototype.setShapes = function(shapes)
{
	this.m_shapes.clear();
	if (oFF.notNull(shapes))
	{
		oFF.XCollectionUtils.forEach(shapes, (shape) => {
			this.m_shapes.addFixedValue(shape);
		});
	}
};

oFF.QChartPlotArea = function() {};
oFF.QChartPlotArea.prototype = new oFF.QVizChartDefinitionContext();
oFF.QChartPlotArea.prototype._ff_c = "QChartPlotArea";

oFF.QChartPlotArea.create = function(context, parent)
{
	let instance = new oFF.QChartPlotArea();
	instance.setupModelComponent(context, parent);
	instance.m_dataLabel = oFF.QVizLabelStyle.create(context, instance);
	instance.m_dimensionLabel = oFF.QVizLabelStyle.create(context, instance);
	instance.m_stackColumnLabel = oFF.QVizLabelStyle.create(context, instance);
	return instance;
};
oFF.QChartPlotArea.prototype.m_dataLabel = null;
oFF.QChartPlotArea.prototype.m_dimensionLabel = null;
oFF.QChartPlotArea.prototype.m_stackColumnLabel = null;
oFF.QChartPlotArea.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVizChartDefinitionContext.prototype.copyFromInternal.call( this , other, flags);
	let origin = other;
	this.m_dataLabel.copyFrom(origin.m_dataLabel, flags);
	this.m_dimensionLabel.copyFrom(origin.m_dimensionLabel, flags);
	this.m_stackColumnLabel.copyFrom(origin.m_stackColumnLabel, flags);
};
oFF.QChartPlotArea.prototype.getDataLabel = function()
{
	return this.m_dataLabel;
};
oFF.QChartPlotArea.prototype.getDimensionLabel = function()
{
	return this.m_dimensionLabel;
};
oFF.QChartPlotArea.prototype.getStackColumnLabel = function()
{
	return this.m_stackColumnLabel;
};
oFF.QChartPlotArea.prototype.mergeWithDefaults = function(variableHolderWithFallback, chartPlotArea)
{
	this.m_dataLabel.mergeWithDefaults(variableHolderWithFallback, chartPlotArea.getDataLabel());
	this.m_dimensionLabel.mergeWithDefaults(variableHolderWithFallback, chartPlotArea.getDimensionLabel());
	this.m_stackColumnLabel.mergeWithDefaults(variableHolderWithFallback, chartPlotArea.getStackColumnLabel());
};

oFF.QChartPointStyle = function() {};
oFF.QChartPointStyle.prototype = new oFF.QVizChartDefinitionContext();
oFF.QChartPointStyle.prototype._ff_c = "QChartPointStyle";

oFF.QChartPointStyle.create = function(context, parent, name, text)
{
	let instance = new oFF.QChartPointStyle();
	instance.setupModelComponent(context, parent);
	instance.setName(name);
	instance.setText(text);
	instance.setup();
	return instance;
};
oFF.QChartPointStyle.prototype.m_active = null;
oFF.QChartPointStyle.prototype.m_color = null;
oFF.QChartPointStyle.prototype.m_customPattern = null;
oFF.QChartPointStyle.prototype.m_customShape = null;
oFF.QChartPointStyle.prototype.m_lineStyle = null;
oFF.QChartPointStyle.prototype.m_pattern = null;
oFF.QChartPointStyle.prototype.m_shape = null;
oFF.QChartPointStyle.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVizChartDefinitionContext.prototype.copyFromInternal.call( this , other, flags);
	let orig = other;
	this.m_customShape.copyFrom(orig.m_customShape, flags);
	this.m_customPattern.copyFrom(orig.m_customPattern, flags);
	this.m_color.copyFrom(orig.m_color, flags);
	this.m_pattern.copyFrom(orig.m_pattern, flags);
	this.m_shape.copyFrom(orig.m_shape, flags);
	this.m_lineStyle.copyFrom(orig.m_lineStyle, flags);
	this.m_active.copyFrom(orig.m_active, flags);
};
oFF.QChartPointStyle.prototype.getActiveRaw = function()
{
	return this.m_active;
};
oFF.QChartPointStyle.prototype.getColor = function()
{
	return this.m_color.resolveString(this.getChartDefinition());
};
oFF.QChartPointStyle.prototype.getColorRaw = function()
{
	return this.m_color;
};
oFF.QChartPointStyle.prototype.getCustomPattern = function()
{
	return this.m_customPattern.resolveString(this.getChartDefinition());
};
oFF.QChartPointStyle.prototype.getCustomPatternRaw = function()
{
	return this.m_customPattern;
};
oFF.QChartPointStyle.prototype.getCustomShape = function()
{
	return this.m_customShape.resolveString(this.getChartDefinition());
};
oFF.QChartPointStyle.prototype.getCustomShapeRaw = function()
{
	return this.m_customShape;
};
oFF.QChartPointStyle.prototype.getLineStyle = function()
{
	return this.m_lineStyle.getResolvedValue(this.getChartDefinition());
};
oFF.QChartPointStyle.prototype.getLineStyleRaw = function()
{
	return this.m_lineStyle;
};
oFF.QChartPointStyle.prototype.getPattern = function()
{
	return this.m_pattern.getResolvedValue(this.getChartDefinition());
};
oFF.QChartPointStyle.prototype.getPatternRaw = function()
{
	return this.m_pattern;
};
oFF.QChartPointStyle.prototype.getShape = function()
{
	return this.m_shape.getResolvedValue(this.getChartDefinition());
};
oFF.QChartPointStyle.prototype.getShapeRaw = function()
{
	return this.m_shape;
};
oFF.QChartPointStyle.prototype.releaseObject = function()
{
	this.m_customPattern = oFF.XObjectExt.release(this.m_customPattern);
	this.m_customShape = oFF.XObjectExt.release(this.m_customShape);
	this.m_color = oFF.XObjectExt.release(this.m_color);
	this.m_shape = oFF.XObjectExt.release(this.m_shape);
	this.m_pattern = oFF.XObjectExt.release(this.m_pattern);
	this.m_lineStyle = oFF.XObjectExt.release(this.m_lineStyle);
	this.m_active = oFF.XObjectExt.release(this.m_active);
	oFF.QVizChartDefinitionContext.prototype.releaseObject.call( this );
};
oFF.QChartPointStyle.prototype.setColor = function(color)
{
	this.m_color.setString(color);
};
oFF.QChartPointStyle.prototype.setCustomPattern = function(pattern)
{
	this.m_customPattern.setString(pattern);
};
oFF.QChartPointStyle.prototype.setCustomShape = function(customShape)
{
	this.m_customShape.setString(customShape);
};
oFF.QChartPointStyle.prototype.setLineStyle = function(chartLineStyle)
{
	this.m_lineStyle.setFixedValue(chartLineStyle);
};
oFF.QChartPointStyle.prototype.setPattern = function(pattern)
{
	this.m_pattern.setFixedValue(pattern);
};
oFF.QChartPointStyle.prototype.setShape = function(shape)
{
	this.m_shape.setFixedValue(shape);
};
oFF.QChartPointStyle.prototype.setup = function()
{
	this.m_active = oFF.QStylingValueBoolean.create();
	this.m_customPattern = oFF.QStylingValueString.create();
	this.m_customShape = oFF.QStylingValueString.create();
	this.m_color = oFF.QStylingValueString.create();
	this.m_shape = oFF.QStylingValueConstant.create((cps) => {
		return oFF.ChartPointShape.lookup(cps);
	});
	this.m_pattern = oFF.QStylingValueConstant.create((bpt) => {
		return oFF.BackgroundPatternType.lookup(bpt);
	});
	this.m_lineStyle = oFF.QStylingValueConstant.create((cls) => {
		return oFF.ChartLineStyle.lookup(cls);
	});
};

oFF.QTypedValueSelection = function() {};
oFF.QTypedValueSelection.prototype = new oFF.QVizChartDefinitionContext();
oFF.QTypedValueSelection.prototype._ff_c = "QTypedValueSelection";

oFF.QTypedValueSelection.prototype.m_keyFigureSelections = null;
oFF.QTypedValueSelection.prototype.addTypedValueSelection = function(visualizationValueType, keyFigureSelection)
{
	if (oFF.notNull(visualizationValueType))
	{
		this.getTypedValueSelectionForTypeInternal(visualizationValueType).add(keyFigureSelection);
		this.invalidateVisualizationContainer();
	}
};
oFF.QTypedValueSelection.prototype.addTypedValueSelectionInternal = function(visualizationValueType, keyFigureSelection)
{
	if (oFF.notNull(visualizationValueType))
	{
		this.getTypedValueSelectionForTypeInternal(visualizationValueType).add(keyFigureSelection);
		this.invalidateVisualizationContainer();
	}
};
oFF.QTypedValueSelection.prototype.clearAllTypedValueSelections = function()
{
	this.m_keyFigureSelections.clear();
	this.invalidateVisualizationContainer();
};
oFF.QTypedValueSelection.prototype.clearTypedValueSelectionsForType = function(visualizationValueType)
{
	if (oFF.notNull(visualizationValueType))
	{
		this.getTypedValueSelectionForTypeInternal(visualizationValueType).clear();
		this.invalidateVisualizationContainer();
	}
};
oFF.QTypedValueSelection.prototype.clearTypedValueSelectionsForTypeInternal = function(visualizationValueType)
{
	if (oFF.notNull(visualizationValueType))
	{
		this.getTypedValueSelectionForTypeInternal(visualizationValueType).clear();
		this.invalidateVisualizationContainer();
	}
};
oFF.QTypedValueSelection.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVizChartDefinitionContext.prototype.copyFromInternal.call( this , other, flags);
	let origin = other;
	let originKeyFigureSelections = origin.m_keyFigureSelections;
	this.m_keyFigureSelections.clear();
	if (oFF.notNull(originKeyFigureSelections))
	{
		let keysIterator = originKeyFigureSelections.getKeysAsIterator();
		while (keysIterator.hasNext())
		{
			let key = keysIterator.next();
			let origValue = originKeyFigureSelections.getByKey(key);
			let newValue = oFF.XList.create();
			for (let i = 0; i < origValue.size(); i++)
			{
				let origKFS = origValue.get(i);
				let newKFS = oFF.QKeyFigureSelection.create(this.getContext(), null, this, key);
				newKFS.copyFrom(origKFS, flags);
				newValue.add(newKFS);
			}
			this.m_keyFigureSelections.put(key, newValue);
		}
	}
};
oFF.QTypedValueSelection.prototype.getKeyFigureForDimensionMemberInternal = function(dimensionMember, keyFigures)
{
	if (oFF.notNull(dimensionMember))
	{
		for (let i = 0; i < keyFigures.size(); i++)
		{
			let keyFigure = keyFigures.get(i);
			if (dimensionMember.getDimension().isEqualTo(keyFigure.getDimensionMember().getDimension()) && dimensionMember.isEqualTo(keyFigure.getDimensionMember()))
			{
				return keyFigure;
			}
		}
	}
	return null;
};
oFF.QTypedValueSelection.prototype.getTypedValueSelectionForTypeInternal = function(visualizationValueType)
{
	if (oFF.notNull(visualizationValueType) && !this.m_keyFigureSelections.containsKey(visualizationValueType))
	{
		this.m_keyFigureSelections.put(visualizationValueType, oFF.XList.create());
	}
	return this.m_keyFigureSelections.getByKey(visualizationValueType);
};
oFF.QTypedValueSelection.prototype.getTypedValueSelectionsForType = function(visualizationValueType)
{
	if (oFF.notNull(visualizationValueType))
	{
		return this.getTypedValueSelectionForTypeInternal(visualizationValueType);
	}
	let allKFsList = oFF.XList.create();
	oFF.XStream.of(this.m_keyFigureSelections).forEach((kfs) => {
		allKFsList.addAll(kfs);
	});
	return allKFsList;
};
oFF.QTypedValueSelection.prototype.getVisualizationValueTypes = function()
{
	return this.m_keyFigureSelections.getKeysAsReadOnlyList();
};
oFF.QTypedValueSelection.prototype.hasTypedValueSelectionsForTypeForMember = function(visualizationValueType, dimensionMember)
{
	let currentList = this.getTypedValueSelectionForTypeInternal(visualizationValueType);
	return oFF.XStream.of(currentList).anyMatch((kfs) => {
		return oFF.XString.isEqual(kfs.getDimensionMember().getName(), dimensionMember.getName());
	});
};
oFF.QTypedValueSelection.prototype.insertTypedValueSelection = function(visualizationValueType, index, keyFigureSelection)
{
	if (oFF.notNull(visualizationValueType))
	{
		let typedValueSelectionForTypeInternal = this.getTypedValueSelectionForTypeInternal(visualizationValueType);
		if (index === -1 || index > typedValueSelectionForTypeInternal.size())
		{
			typedValueSelectionForTypeInternal.add(keyFigureSelection);
		}
		else
		{
			typedValueSelectionForTypeInternal.insert(index, keyFigureSelection);
		}
		this.invalidateVisualizationContainer();
	}
};
oFF.QTypedValueSelection.prototype.invalidateVisualizationContainer = function()
{
	let chartDefinition = this.getChartDefinition();
	if (oFF.isNull(chartDefinition))
	{
		oFF.XLogger.println("Chart definition is null. Something weird is going on");
	}
	else
	{
		chartDefinition.invalidateVisualizationContainer();
	}
};
oFF.QTypedValueSelection.prototype.removeTypedValueSelectionForDimensionMember = function(dimensionMember, visualizationValueType)
{
	if (oFF.notNull(visualizationValueType))
	{
		let visualSelectionForType = this.getTypedValueSelectionsForType(visualizationValueType);
		let keyFigureForDimensionMember = this.getKeyFigureForDimensionMemberInternal(dimensionMember, visualSelectionForType);
		if (oFF.notNull(keyFigureForDimensionMember))
		{
			visualSelectionForType.removeElement(keyFigureForDimensionMember);
			this.invalidateVisualizationContainer();
		}
	}
	else
	{
		oFF.XStream.of(this.m_keyFigureSelections).forEach((kfs) => {
			for (let i = 0; i < kfs.size(); i++)
			{
				let keyFigure = kfs.get(i);
				if (oFF.XString.isEqual(dimensionMember.getName(), keyFigure.getDimensionMember().getName()))
				{
					kfs.removeElement(keyFigure);
					this.invalidateVisualizationContainer();
					break;
				}
			}
		});
	}
};
oFF.QTypedValueSelection.prototype.removeTypedValueSelectionForType = function(visualizationValueType, keyFigureSelection)
{
	this.getTypedValueSelectionForTypeInternal(visualizationValueType).removeElement(keyFigureSelection);
	this.invalidateVisualizationContainer();
};
oFF.QTypedValueSelection.prototype.removeTypedValueSelectionForTypeAt = function(visualizationValueType, index)
{
	this.getTypedValueSelectionForTypeInternal(visualizationValueType).removeAt(index);
	this.invalidateVisualizationContainer();
};
oFF.QTypedValueSelection.prototype.setTypedValueSelection = function(visualizationValueType, index, keyFigureSelection)
{
	if (oFF.notNull(visualizationValueType))
	{
		this.getTypedValueSelectionForTypeInternal(visualizationValueType).set(index, keyFigureSelection);
		this.invalidateVisualizationContainer();
	}
};
oFF.QTypedValueSelection.prototype.setupTypedValueSelection = function()
{
	this.m_keyFigureSelections = oFF.XSimpleMap.create();
};

oFF.QVisualizationDefinition = function() {};
oFF.QVisualizationDefinition.prototype = new oFF.QVizVisualizationDefinitionContext();
oFF.QVisualizationDefinition.prototype._ff_c = "QVisualizationDefinition";

oFF.QVisualizationDefinition.prototype.m_activeContainer = null;
oFF.QVisualizationDefinition.prototype.m_applicationSettings = null;
oFF.QVisualizationDefinition.prototype.m_dataPointMatcher = null;
oFF.QVisualizationDefinition.prototype.m_datapointVariableContainers = null;
oFF.QVisualizationDefinition.prototype.m_protocolBindingType = null;
oFF.QVisualizationDefinition.prototype.m_semanticBindingType = null;
oFF.QVisualizationDefinition.prototype.m_title = null;
oFF.QVisualizationDefinition.prototype.m_visualizationProvidedListeners = null;
oFF.QVisualizationDefinition.prototype.m_visualizationVariableContainer = null;
oFF.QVisualizationDefinition.prototype.acquireVariableInfoIfNeeded = function(variableHolderWithFallback)
{
	let variables = variableHolderWithFallback.getVisualizationVariableHolder().getVariables();
	let size = variables.size();
	for (let i = 0; i < size; i++)
	{
		let originVariable = variables.get(i);
		if (originVariable.isEmpty() || this.m_visualizationVariableContainer.getVariable(originVariable.getName()) !== null)
		{
			continue;
		}
		let cloneVar = oFF.QFactory.createVariable(this.getContext(), null, originVariable);
		cloneVar.copyFrom(originVariable, null);
		this.m_visualizationVariableContainer.addVariable(cloneVar);
	}
	this.m_datapointVariableContainers.addAll(variableHolderWithFallback.getDatapointVariableContainers());
};
oFF.QVisualizationDefinition.prototype.addNewDatapointVariableContainer = function(name, text)
{
	let dataPointVariableContainer = oFF.QVizDataPointVariableContainer.create(this.getContext(), this, name, text, () => {
		this.invalidateVisualizationContainer();
	});
	this.m_datapointVariableContainers.add(dataPointVariableContainer);
	return dataPointVariableContainer;
};
oFF.QVisualizationDefinition.prototype.addNewSimpleTypeVariable = function(valueType, name, text, supportsMultipleValues)
{
	return this.m_visualizationVariableContainer.addNewSimpleTypeVariable(valueType, name, text, supportsMultipleValues);
};
oFF.QVisualizationDefinition.prototype.addTransientVariable = function(transientVariableHolder, infoVariableName, infoValue)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(infoVariableName))
	{
		let variable = transientVariableHolder.addNewSimpleTypeVariable(oFF.XValueType.STRING, infoVariableName, infoVariableName, false);
		variable.setString(infoValue);
	}
};
oFF.QVisualizationDefinition.prototype.attachVisualizationDataProvidedListener = function(listener, customIdentifier)
{
	this.m_visualizationProvidedListeners.put(listener, oFF.XPair.create(listener, customIdentifier));
};
oFF.QVisualizationDefinition.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVizVisualizationDefinitionContext.prototype.copyFromInternal.call( this , other, flags);
	let origin = other;
	this.m_semanticBindingType = origin.m_semanticBindingType;
	this.m_protocolBindingType = origin.m_protocolBindingType;
	this.m_applicationSettings.copyFrom(origin.m_applicationSettings, null);
	this.m_visualizationProvidedListeners = origin.m_visualizationProvidedListeners.createMapCopy();
	this.m_visualizationVariableContainer.copyFrom(origin.m_visualizationVariableContainer, flags);
	if (oFF.XCollectionUtils.hasElements(origin.m_datapointVariableContainers))
	{
		this.m_datapointVariableContainers.clear();
		oFF.XCollectionUtils.forEach(origin.m_datapointVariableContainers, (dvc) => {
			let newDvc = this.addNewDatapointVariableContainer(dvc.getName(), dvc.getText());
			newDvc.copyFrom(dvc, flags);
		});
	}
	this.m_title = origin.m_title;
};
oFF.QVisualizationDefinition.prototype.deserializeSilentExt = function(modelFormat, expression)
{
	let jsonParser = oFF.JsonParserFactory.newInstance();
	let element = jsonParser.parse(expression);
	if (jsonParser.hasErrors())
	{
		return oFF.ExtResult.create(null, jsonParser);
	}
	oFF.XObjectExt.release(jsonParser);
	return this.deserializeSilentInternal(modelFormat, element);
};
oFF.QVisualizationDefinition.prototype.deserializeSilentFromContent = function(content)
{
	return this.deserializeSilentInternal(content.getContentType(), content.getJsonContent());
};
oFF.QVisualizationDefinition.prototype.deserializeSilentFromElementExt = function(modelFormat, element)
{
	return this.deserializeSilentInternal(modelFormat, element);
};
oFF.QVisualizationDefinition.prototype.deserializeSilentInternal = function(modelFormat, element)
{
	this.stopEventing();
	let result = this.deserializeFromElementExt(modelFormat, element);
	this.resumeEventing();
	return result;
};
oFF.QVisualizationDefinition.prototype.detachVisualizationDataProvidedListener = function(listener)
{
	this.m_visualizationProvidedListeners.remove(listener);
};
oFF.QVisualizationDefinition.prototype.getAbstractRendering = function()
{
	let result = null;
	let protocolBindingType = this.getProtocolBindingType();
	let resultSetContainer = this.getQueryManager().getActiveResultSetContainer();
	if (this.m_semanticBindingType.isTypeOf(oFF.SemanticBindingType.CHART))
	{
		let chartContainer = this.getAvailableVisualizationContainer();
		if (oFF.notNull(chartContainer))
		{
			let renderer = oFF.ChartRendererFactory.createSimpleRenderer(protocolBindingType, chartContainer);
			renderer.render();
			result = renderer.getChartJson();
		}
	}
	else if (this.m_semanticBindingType.isTypeOf(oFF.SemanticBindingType.KPI))
	{
		result = oFF.KpiRendererFactory.createRenderer(protocolBindingType).render(resultSetContainer.getCursorResultSet());
	}
	else if (this.m_semanticBindingType.isTypeOf(oFF.SemanticBindingType.TABLE) && protocolBindingType.isTypeOf(oFF.ProtocolBindingType.SAC_TABLE_GRID))
	{
		let tableContainer = this.getActiveVisualizationContainer();
		if (oFF.notNull(tableContainer))
		{
			let renderer = oFF.GridRendererFactory.createRenderer(protocolBindingType);
			result = renderer.render(tableContainer);
		}
	}
	else if (this.m_semanticBindingType.isTypeOf(oFF.SemanticBindingType.CUSTOM))
	{
		let customContainer = this.getActiveVisualizationContainer();
		if (oFF.notNull(customContainer))
		{
			oFF.CustomRendererRegistry.render(protocolBindingType, resultSetContainer, customContainer);
		}
	}
	else
	{
		result = oFF.ReferenceGridFactory.createForVizGrid(resultSetContainer.getClassicResultSet()).exportForProtocol(this.getProtocolBindingType());
	}
	return result;
};
oFF.QVisualizationDefinition.prototype.getActiveVisualizationContainer = function()
{
	return this.getVisualizationContainer(false);
};
oFF.QVisualizationDefinition.prototype.getApplicationSettings = function()
{
	return this.m_applicationSettings;
};
oFF.QVisualizationDefinition.prototype.getAvailableVisualizationContainer = function()
{
	let result = null;
	if (oFF.notNull(this.m_activeContainer) && !this.m_activeContainer.isReleased())
	{
		this.m_activeContainer.setVisualizationDefinition(this.createRsVisualizationDefinition(this.m_activeContainer.getContext(), null, this.getName()));
		this.m_activeContainer.updateDefinition();
		result = this.m_activeContainer;
	}
	return result;
};
oFF.QVisualizationDefinition.prototype.getDatapointVariableContainers = function()
{
	return this.m_datapointVariableContainers;
};
oFF.QVisualizationDefinition.prototype.getDatapointVariableContainersByExceptionName = function(exceptionName)
{
	return oFF.XStream.of(this.m_datapointVariableContainers).filter((vc) => {
		return oFF.XString.isEqual(vc.getExceptionName(), exceptionName);
	}).collect(oFF.XStreamCollector.toListOfNameObject());
};
oFF.QVisualizationDefinition.prototype.getEffectiveVisualizationDefinition = function()
{
	return this.getAvailableVisualizationContainer().getVisualizationDefinition();
};
oFF.QVisualizationDefinition.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.VISUALIZATION_DEFINITION;
};
oFF.QVisualizationDefinition.prototype.getProtocolBindingType = function()
{
	return this.m_protocolBindingType;
};
oFF.QVisualizationDefinition.prototype.getSemanticBindingType = function()
{
	return this.m_semanticBindingType;
};
oFF.QVisualizationDefinition.prototype.getTitle = function()
{
	return this.m_title;
};
oFF.QVisualizationDefinition.prototype.getVariable = function(variableName)
{
	return this.m_visualizationVariableContainer.getVariable(variableName);
};
oFF.QVisualizationDefinition.prototype.getVariableHolderForDataPoint = function(exceptionInfo, elementSupplier)
{
	let resultList = oFF.XStream.of(this.m_datapointVariableContainers).filter((dvc) => {
		return this.m_dataPointMatcher.matchesStyleCriterion(dvc, exceptionInfo, elementSupplier);
	}).sorted(oFF.XComparatorLambda.create((a, b) => {
		return oFF.XIntegerValue.create(a.getPriority() - b.getPriority());
	})).map((odvc) => {
		return odvc.getVariableHolder();
	}).collect(oFF.XStreamCollector.toList());
	let thresholdName = exceptionInfo.getThresholdName();
	let thresholdText = exceptionInfo.getThresholdText();
	let colorInfo = exceptionInfo.getColor();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(colorInfo) || oFF.XStringUtils.isNotNullAndNotEmpty(thresholdText) || oFF.XStringUtils.isNotNullAndNotEmpty(thresholdName))
	{
		let transientVariableHolder = oFF.QVisualizationVariableHolder.create(this.getContext(), null, null);
		this.addTransientVariable(transientVariableHolder, oFF.OlapVisualizationConstants.EXCEPTION_VARIABLE_COLOR, colorInfo);
		this.addTransientVariable(transientVariableHolder, oFF.OlapVisualizationConstants.EXCEPTION_VARIABLE_NAME, thresholdName);
		this.addTransientVariable(transientVariableHolder, oFF.OlapVisualizationConstants.EXCEPTION_VARIABLE_TEXT, thresholdText);
		resultList.insert(0, transientVariableHolder);
	}
	return resultList;
};
oFF.QVisualizationDefinition.prototype.getVariableOrFallback = function(variableName)
{
	let variable = this.m_visualizationVariableContainer.getVariable(variableName);
	if (oFF.isNull(variable) || variable.isEmpty())
	{
		let fallbackVariable = this.getQueryModel().getVisualizationManager().getVariableOrFallback(variableName);
		if (oFF.notNull(fallbackVariable))
		{
			variable = fallbackVariable;
		}
	}
	return variable;
};
oFF.QVisualizationDefinition.prototype.getVisualizationContainer = function(enforceOutOfSync)
{
	if (oFF.isNull(this.m_activeContainer) || this.m_activeContainer.isReleased() || !this.m_activeContainer.isValidContainer() || enforceOutOfSync && this.m_activeContainer.getSyncState() !== oFF.SyncState.OUT_OF_SYNC)
	{
		oFF.XObjectExt.release(this.m_activeContainer);
		this.resetTransientSettings();
		this.m_activeContainer = oFF.RsVisualizationContainerFactory.createVisualizationContainer(this);
	}
	this.m_activeContainer.setVisualizationDefinition(this.createRsVisualizationDefinition(this.m_activeContainer.getContext(), null, this.getName()));
	this.m_activeContainer.updateDefinition();
	return this.m_activeContainer;
};
oFF.QVisualizationDefinition.prototype.getVisualizationProvidedListeners = function()
{
	return this.m_visualizationProvidedListeners.getValuesAsReadOnlyList();
};
oFF.QVisualizationDefinition.prototype.getVisualizationVariableContainer = function()
{
	return this.m_visualizationVariableContainer.getVariableProcessor().getVariableContainer();
};
oFF.QVisualizationDefinition.prototype.getVisualizationVariableHolder = function()
{
	return this.m_visualizationVariableContainer;
};
oFF.QVisualizationDefinition.prototype.getVisualizationVariableProcessor = function()
{
	return this.m_visualizationVariableContainer.getVariableProcessor();
};
oFF.QVisualizationDefinition.prototype.hasValidVisualizationContainer = function()
{
	return oFF.notNull(this.m_activeContainer);
};
oFF.QVisualizationDefinition.prototype.invalidateVisualizationContainer = function()
{
	if (oFF.notNull(this.m_activeContainer))
	{
		this.m_activeContainer.invalidate();
	}
	this.incrementModCounterRecursively();
};
oFF.QVisualizationDefinition.prototype.isActiveContainerValid = function()
{
	return oFF.notNull(this.m_activeContainer) && this.m_activeContainer.isValidContainer();
};
oFF.QVisualizationDefinition.prototype.mergeDataPointElement = function(elementMap, pathElement, elementName)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(elementName))
	{
		if (!elementMap.containsKey(elementName))
		{
			elementMap.put(elementName, oFF.QVizAxisPathElement.create(this.getContext(), this));
		}
		let mergedElement = elementMap.getByKey(elementName);
		oFF.XCollectionUtils.forEach(pathElement.getMemberNames(), (memberName) => {
			mergedElement.addMemberName(memberName);
		});
	}
};
oFF.QVisualizationDefinition.prototype.mergeDataPointElements = function(elementMap, dpc)
{
	let pathElements = dpc.getPathElements();
	oFF.XCollectionUtils.forEach(pathElements, (pathElement) => {
		this.mergeDataPointElement(elementMap, pathElement, pathElement.getFieldName());
		this.mergeDataPointElement(elementMap, pathElement, pathElement.getAttributeName());
		this.mergeDataPointElement(elementMap, pathElement, pathElement.getDimensionName());
	});
};
oFF.QVisualizationDefinition.prototype.notifyChildChanged = function(changedNodes)
{
	if (!this.isEventingStopped())
	{
		this.incrementModCounterRecursively();
		changedNodes.add(this);
	}
};
oFF.QVisualizationDefinition.prototype.processExecutionGeneric = function(syncType, listener, customIdentifier)
{
	return oFF.QVisualizationExecutionAction.createAndRun(this, syncType, listener, customIdentifier);
};
oFF.QVisualizationDefinition.prototype.releaseObject = function()
{
	this.m_semanticBindingType = null;
	this.m_protocolBindingType = null;
	this.m_title = null;
	this.m_activeContainer = oFF.XObjectExt.release(this.m_activeContainer);
	this.m_applicationSettings = oFF.XObjectExt.release(this.m_applicationSettings);
	this.m_visualizationProvidedListeners = oFF.XObjectExt.release(this.m_visualizationProvidedListeners);
	this.m_visualizationVariableContainer = oFF.XObjectExt.release(this.m_visualizationVariableContainer);
	this.m_datapointVariableContainers = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_datapointVariableContainers);
	this.m_dataPointMatcher = oFF.XObjectExt.release(this.m_dataPointMatcher);
	oFF.QVizVisualizationDefinitionContext.prototype.releaseObject.call( this );
};
oFF.QVisualizationDefinition.prototype.removeDatapointVariableContainerByName = function(name)
{
	this.m_datapointVariableContainers.removeElement(this.m_datapointVariableContainers.getByKey(name));
};
oFF.QVisualizationDefinition.prototype.resetTransientSettings = function() {};
oFF.QVisualizationDefinition.prototype.resetVisualizationContainer = function()
{
	if (oFF.XObjectExt.isValidObject(this.m_activeContainer))
	{
		this.m_activeContainer.resetState();
	}
};
oFF.QVisualizationDefinition.prototype.setTitle = function(title)
{
	this.m_title = title;
};
oFF.QVisualizationDefinition.prototype.setupInternal = function(context, parent, name, protocolBindingType, semanticBindingType)
{
	this.setupModelComponent(context, parent);
	this.setName(name);
	this.m_visualizationVariableContainer = oFF.QVisualizationVariableHolder.create(context, this, () => {
		this.invalidateVisualizationContainer();
	});
	this.m_datapointVariableContainers = oFF.XListOfNameObject.create();
	this.m_protocolBindingType = protocolBindingType;
	this.m_semanticBindingType = semanticBindingType;
	this.m_applicationSettings = oFF.XTransientVisualizationApplicationSettings.create();
	this.m_visualizationProvidedListeners = oFF.XSimpleMap.create();
};
oFF.QVisualizationDefinition.prototype.tagAllMatchingStyleCriteria = function()
{
	oFF.XObjectExt.release(this.m_dataPointMatcher);
	this.m_dataPointMatcher = oFF.QDataPointMatcher.create();
	oFF.XCollectionUtils.forEach(this.m_datapointVariableContainers, (dvc) => {
		this.m_dataPointMatcher.tagMatchingStyleCriteria(dvc);
	});
};
oFF.QVisualizationDefinition.prototype.validate = function()
{
	return false;
};
oFF.QVisualizationDefinition.prototype.validateByChangingQueryModel = function()
{
	return false;
};
oFF.QVisualizationDefinition.prototype.validateByResettingVisualization = function()
{
	return false;
};

oFF.QChartDataPointStyle = function() {};
oFF.QChartDataPointStyle.prototype = new oFF.QVizChartDefinitionContext();
oFF.QChartDataPointStyle.prototype._ff_c = "QChartDataPointStyle";

oFF.QChartDataPointStyle.create = function(context, parent, name, text)
{
	let instance = new oFF.QChartDataPointStyle();
	instance.setupModelComponent(context, parent);
	instance.setName(name);
	instance.setText(text);
	instance.setup();
	return instance;
};
oFF.QChartDataPointStyle.prototype.m_alertLevelMax = null;
oFF.QChartDataPointStyle.prototype.m_alertLevelMin = null;
oFF.QChartDataPointStyle.prototype.m_axisPathElements = null;
oFF.QChartDataPointStyle.prototype.m_chartPointStyleName = null;
oFF.QChartDataPointStyle.prototype.m_dataPointCategoryName = null;
oFF.QChartDataPointStyle.prototype.m_dataPointCategoryText = null;
oFF.QChartDataPointStyle.prototype.m_exceptionName = null;
oFF.QChartDataPointStyle.prototype.m_priority = 0;
oFF.QChartDataPointStyle.prototype.m_tags = null;
oFF.QChartDataPointStyle.prototype.m_unmatchedAlertLevels = false;
oFF.QChartDataPointStyle.prototype.m_unmatchedExceptions = false;
oFF.QChartDataPointStyle.prototype.m_unmatchedPathElements = false;
oFF.QChartDataPointStyle.prototype.m_unmatchedTags = false;
oFF.QChartDataPointStyle.prototype.m_unmatchedValueSigns = false;
oFF.QChartDataPointStyle.prototype.m_valueSign = null;
oFF.QChartDataPointStyle.prototype.addNewPathElement = function()
{
	let reference = oFF.QVizAxisPathElement.create(this.getContext(), this);
	this.m_axisPathElements.add(reference);
	this.m_unmatchedPathElements = false;
	return reference;
};
oFF.QChartDataPointStyle.prototype.addTag = function(tag)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(tag))
	{
		this.m_tags.add(tag);
		this.m_unmatchedTags = false;
	}
};
oFF.QChartDataPointStyle.prototype.clearPathElements = function()
{
	this.m_unmatchedPathElements = false;
	this.m_axisPathElements.clear();
};
oFF.QChartDataPointStyle.prototype.clearTags = function()
{
	this.m_tags.clear();
};
oFF.QChartDataPointStyle.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVizChartDefinitionContext.prototype.copyFromInternal.call( this , other, flags);
	let originObj = other;
	this.m_chartPointStyleName.copyFrom(originObj.m_chartPointStyleName, flags);
	this.m_dataPointCategoryName.copyFrom(originObj.m_dataPointCategoryName, flags);
	this.m_dataPointCategoryText.copyFrom(originObj.m_dataPointCategoryText, flags);
	this.m_alertLevelMin = originObj.m_alertLevelMin;
	this.m_alertLevelMax = originObj.m_alertLevelMax;
	this.m_exceptionName = originObj.m_exceptionName;
	this.m_valueSign = originObj.m_valueSign;
	this.m_priority = originObj.m_priority;
	this.m_axisPathElements.clear();
	this.m_tags = originObj.m_tags.createListCopy();
	this.m_unmatchedTags = originObj.m_unmatchedTags;
	oFF.XCollectionUtils.forEach(originObj.m_axisPathElements, (pe) => {
		this.addNewPathElement().copyFrom(pe, flags);
	});
	this.m_unmatchedExceptions = originObj.m_unmatchedExceptions;
	this.m_unmatchedAlertLevels = originObj.m_unmatchedAlertLevels;
	this.m_unmatchedValueSigns = originObj.m_unmatchedValueSigns;
	this.m_unmatchedPathElements = originObj.m_unmatchedPathElements;
};
oFF.QChartDataPointStyle.prototype.getAlertLevel = function()
{
	return this.m_alertLevelMin === this.m_alertLevelMax ? this.m_alertLevelMin : null;
};
oFF.QChartDataPointStyle.prototype.getAlertLevelMax = function()
{
	return this.m_alertLevelMax;
};
oFF.QChartDataPointStyle.prototype.getAlertLevelMin = function()
{
	return this.m_alertLevelMin;
};
oFF.QChartDataPointStyle.prototype.getChartPointStyle = function()
{
	let formattingStyle = null;
	if (this.getParent() !== null)
	{
		formattingStyle = this.getParent().getOrCreateChartPointStyle(this.getChartPointStyleName(), null);
	}
	return formattingStyle;
};
oFF.QChartDataPointStyle.prototype.getChartPointStyleName = function()
{
	return this.m_chartPointStyleName.resolveString(this.getChartDefinition());
};
oFF.QChartDataPointStyle.prototype.getChartPointStyleNameRaw = function()
{
	return this.m_chartPointStyleName;
};
oFF.QChartDataPointStyle.prototype.getDataPointCategoryName = function()
{
	return this.m_dataPointCategoryName.resolveString(this.getChartDefinition());
};
oFF.QChartDataPointStyle.prototype.getDataPointCategoryNameRaw = function()
{
	return this.m_dataPointCategoryName;
};
oFF.QChartDataPointStyle.prototype.getDataPointCategoryText = function()
{
	return this.m_dataPointCategoryText.resolveString(this.getChartDefinition());
};
oFF.QChartDataPointStyle.prototype.getDataPointCategoryTextRaw = function()
{
	return this.m_dataPointCategoryText;
};
oFF.QChartDataPointStyle.prototype.getException = function()
{
	return oFF.isNull(this.m_exceptionName) || this.getQueryModel() === null || this.getQueryModel().getExceptionManager() === null ? null : this.getQueryModel().getExceptionManager().getByKey(this.m_exceptionName);
};
oFF.QChartDataPointStyle.prototype.getExceptionName = function()
{
	return this.m_exceptionName;
};
oFF.QChartDataPointStyle.prototype.getPathElements = function()
{
	return this.m_axisPathElements;
};
oFF.QChartDataPointStyle.prototype.getPriority = function()
{
	return this.m_priority;
};
oFF.QChartDataPointStyle.prototype.getTags = function()
{
	return this.m_tags;
};
oFF.QChartDataPointStyle.prototype.getValueSign = function()
{
	return this.m_valueSign;
};
oFF.QChartDataPointStyle.prototype.isUnmatchedAlertLevels = function()
{
	return this.m_unmatchedAlertLevels;
};
oFF.QChartDataPointStyle.prototype.isUnmatchedExceptions = function()
{
	return this.m_unmatchedExceptions;
};
oFF.QChartDataPointStyle.prototype.isUnmatchedPathElements = function()
{
	return this.m_unmatchedPathElements;
};
oFF.QChartDataPointStyle.prototype.isUnmatchedTags = function()
{
	return this.m_unmatchedTags;
};
oFF.QChartDataPointStyle.prototype.isUnmatchedValueSigns = function()
{
	return this.m_unmatchedValueSigns;
};
oFF.QChartDataPointStyle.prototype.releaseObject = function()
{
	this.m_chartPointStyleName = oFF.XObjectExt.release(this.m_chartPointStyleName);
	this.m_dataPointCategoryName = oFF.XObjectExt.release(this.m_dataPointCategoryName);
	this.m_dataPointCategoryText = oFF.XObjectExt.release(this.m_dataPointCategoryText);
	this.m_alertLevelMin = null;
	this.m_alertLevelMax = null;
	this.m_exceptionName = null;
	this.m_valueSign = null;
	this.m_unmatchedAlertLevels = false;
	this.m_unmatchedExceptions = false;
	this.m_unmatchedValueSigns = false;
	this.m_unmatchedPathElements = false;
	this.m_axisPathElements = oFF.XObjectExt.release(this.m_axisPathElements);
	this.m_unmatchedTags = false;
	this.m_tags = oFF.XObjectExt.release(this.m_tags);
	this.m_priority = 0;
	oFF.QVizChartDefinitionContext.prototype.releaseObject.call( this );
};
oFF.QChartDataPointStyle.prototype.setAlertLevel = function(alertLevel)
{
	if (oFF.notNull(alertLevel))
	{
		this.m_unmatchedAlertLevels = false;
	}
	this.m_alertLevelMin = alertLevel;
	this.m_alertLevelMax = alertLevel;
};
oFF.QChartDataPointStyle.prototype.setAlertLevelMax = function(alertLevelMax)
{
	if (oFF.notNull(alertLevelMax))
	{
		this.m_unmatchedAlertLevels = false;
	}
	this.m_alertLevelMax = alertLevelMax;
};
oFF.QChartDataPointStyle.prototype.setAlertLevelMin = function(alertLevelMin)
{
	if (oFF.notNull(alertLevelMin))
	{
		this.m_unmatchedAlertLevels = false;
	}
	this.m_alertLevelMin = alertLevelMin;
};
oFF.QChartDataPointStyle.prototype.setChartPointStyleName = function(chartPointStyleName)
{
	this.m_chartPointStyleName.setString(chartPointStyleName);
};
oFF.QChartDataPointStyle.prototype.setDataPointCategoryName = function(dataPointCategoryName)
{
	this.m_dataPointCategoryName.setString(dataPointCategoryName);
};
oFF.QChartDataPointStyle.prototype.setDataPointCategoryText = function(dataPointCategoryText)
{
	this.m_dataPointCategoryText.setString(dataPointCategoryText);
};
oFF.QChartDataPointStyle.prototype.setException = function(exception)
{
	this.m_exceptionName = oFF.isNull(exception) ? null : exception.getName();
};
oFF.QChartDataPointStyle.prototype.setExceptionName = function(exceptionName)
{
	if (oFF.notNull(exceptionName))
	{
		this.m_unmatchedExceptions = false;
	}
	this.m_exceptionName = exceptionName;
};
oFF.QChartDataPointStyle.prototype.setPriority = function(priority)
{
	this.m_priority = priority;
};
oFF.QChartDataPointStyle.prototype.setUnmatchedAlertLevels = function()
{
	this.m_unmatchedAlertLevels = true;
	this.m_alertLevelMax = null;
	this.m_alertLevelMin = null;
};
oFF.QChartDataPointStyle.prototype.setUnmatchedExceptions = function()
{
	this.m_unmatchedExceptions = true;
	this.m_exceptionName = null;
};
oFF.QChartDataPointStyle.prototype.setUnmatchedPathElements = function()
{
	this.m_axisPathElements.clear();
	this.m_unmatchedPathElements = true;
};
oFF.QChartDataPointStyle.prototype.setUnmatchedTags = function()
{
	this.m_unmatchedTags = true;
	this.m_tags.clear();
};
oFF.QChartDataPointStyle.prototype.setUnmatchedValueSigns = function()
{
	this.m_valueSign = null;
	this.m_unmatchedValueSigns = true;
};
oFF.QChartDataPointStyle.prototype.setValueSign = function(valueSign)
{
	if (oFF.notNull(valueSign))
	{
		this.m_unmatchedValueSigns = false;
	}
	this.m_valueSign = valueSign;
};
oFF.QChartDataPointStyle.prototype.setup = function()
{
	oFF.QVizChartDefinitionContext.prototype.setup.call( this );
	this.m_chartPointStyleName = oFF.QStylingValueString.create();
	this.m_axisPathElements = oFF.XList.create();
	this.m_tags = oFF.XList.create();
	this.m_dataPointCategoryName = oFF.QStylingValueString.create();
	this.m_dataPointCategoryText = oFF.QStylingValueString.create();
};

oFF.QChartStyle = function() {};
oFF.QChartStyle.prototype = new oFF.QVizChartDefinitionContext();
oFF.QChartStyle.prototype._ff_c = "QChartStyle";

oFF.QChartStyle.create = function(context, parent)
{
	let instance = new oFF.QChartStyle();
	instance.setupChartStyle(context, parent);
	return instance;
};
oFF.QChartStyle.prototype.m_categoryAxis = null;
oFF.QChartStyle.prototype.m_chartDataPointStyles = null;
oFF.QChartStyle.prototype.m_chartPointStyles = null;
oFF.QChartStyle.prototype.m_colorSchemes = null;
oFF.QChartStyle.prototype.m_defaultAxis = null;
oFF.QChartStyle.prototype.m_legendStyle = null;
oFF.QChartStyle.prototype.m_plotArea = null;
oFF.QChartStyle.prototype.m_positionedAxes = null;
oFF.QChartStyle.prototype.m_titleStyle = null;
oFF.QChartStyle.prototype.m_valueAxes = null;
oFF.QChartStyle.prototype.clearDataPointStyles = function()
{
	oFF.XCollectionUtils.releaseEntriesFromCollection(this.m_chartDataPointStyles);
	this.m_chartDataPointStyles.clear();
};
oFF.QChartStyle.prototype.clearPointStyles = function()
{
	oFF.XCollectionUtils.releaseEntriesFromCollection(this.m_chartPointStyles);
	this.m_chartPointStyles.clear();
};
oFF.QChartStyle.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVizChartDefinitionContext.prototype.copyFromInternal.call( this , other, flags);
	let otherStyle = other;
	this.m_legendStyle.copyFrom(otherStyle.getLegendStyle(), flags);
	this.m_plotArea.copyFrom(otherStyle.getPlotArea(), flags);
	this.m_defaultAxis.copyFrom(otherStyle.getDefaultAxisStyle(), flags);
	this.m_categoryAxis.copyFrom(otherStyle.getCategoryAxisStyle(), flags);
	this.m_titleStyle.copyFrom(otherStyle.m_titleStyle, flags);
	let keysIterator = otherStyle.m_valueAxes.getKeysAsIterator();
	while (keysIterator.hasNext())
	{
		let key = keysIterator.next();
		this.getOrCreateValueAxisStyle(key).copyFrom(otherStyle.getOrCreateValueAxisStyle(key), flags);
	}
	let positionIterator = otherStyle.m_positionedAxes.getKeysAsIterator();
	while (positionIterator.hasNext())
	{
		let position = positionIterator.next();
		this.getOrCreateChartAxisStyleByPosition(position).copyFrom(otherStyle.getOrCreateChartAxisStyleByPosition(position), flags);
	}
	let clIt = otherStyle.getColorSchemeKeys().getIterator();
	while (clIt.hasNext())
	{
		let clef = clIt.next();
		this.getOrCreateChartColorScheme(clef).copyFrom(otherStyle.getOrCreateChartColorScheme(clef), flags);
	}
	let cpsIterator = otherStyle.getChartPointStyleKeys().getIterator();
	while (cpsIterator.hasNext())
	{
		let cpsKey = cpsIterator.next();
		let otherCps = otherStyle.getOrCreateChartPointStyle(cpsKey, null);
		this.getOrCreateChartPointStyle(cpsKey, otherCps.getText()).copyFrom(otherCps, null);
	}
	let cdpsIterator = otherStyle.getDataPointStyleKeys().getIterator();
	while (cdpsIterator.hasNext())
	{
		let cpdsKey = cdpsIterator.next();
		let otherDps = otherStyle.getOrCreateNewChartDataPointStyle(cpdsKey, null);
		this.getOrCreateNewChartDataPointStyle(cpdsKey, otherDps.getText()).copyFrom(otherDps, null);
	}
};
oFF.QChartStyle.prototype.getCategoryAxisStyle = function()
{
	return this.m_categoryAxis;
};
oFF.QChartStyle.prototype.getChartAxisPositions = function()
{
	return this.m_positionedAxes.getKeysAsReadOnlyList();
};
oFF.QChartStyle.prototype.getChartColorSchemeIfAvailable = function(key)
{
	return this.m_colorSchemes.getByKey(key);
};
oFF.QChartStyle.prototype.getChartPointStyleKeys = function()
{
	return this.m_chartPointStyles.getKeysAsReadOnlyList();
};
oFF.QChartStyle.prototype.getColorSchemeKeys = function()
{
	return this.m_colorSchemes.getKeysAsReadOnlyList();
};
oFF.QChartStyle.prototype.getDataPointStyleKeys = function()
{
	return this.m_chartDataPointStyles.getKeysAsReadOnlyList();
};
oFF.QChartStyle.prototype.getDataPointStyles = function()
{
	return this.m_chartDataPointStyles.getValuesAsReadOnlyList();
};
oFF.QChartStyle.prototype.getDefaultAxisStyle = function()
{
	return this.m_defaultAxis;
};
oFF.QChartStyle.prototype.getLegendStyle = function()
{
	return this.m_legendStyle;
};
oFF.QChartStyle.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.VISUALIZATION_CHART_STYLE;
};
oFF.QChartStyle.prototype.getOrCreateChartAxisStyleByPosition = function(position)
{
	if (!this.m_positionedAxes.containsKey(position))
	{
		this.m_positionedAxes.put(position, oFF.QChartAxis.create(this.getContext(), this));
	}
	return this.m_positionedAxes.getByKey(position);
};
oFF.QChartStyle.prototype.getOrCreateChartColorScheme = function(key)
{
	if (!this.m_colorSchemes.containsKey(key))
	{
		this.m_colorSchemes.put(key, oFF.QChartColorScheme.create(this.getContext(), this));
	}
	return this.m_colorSchemes.getByKey(key);
};
oFF.QChartStyle.prototype.getOrCreateChartPointStyle = function(name, text)
{
	if (!this.m_chartPointStyles.containsKey(name))
	{
		this.m_chartPointStyles.put(name, oFF.QChartPointStyle.create(this.getContext(), this, name, text));
	}
	return this.m_chartPointStyles.getByKey(name);
};
oFF.QChartStyle.prototype.getOrCreateNewChartDataPointStyle = function(name, text)
{
	if (!this.m_chartDataPointStyles.containsKey(name))
	{
		this.m_chartDataPointStyles.put(name, oFF.QChartDataPointStyle.create(this.getContext(), this, name, text));
	}
	return this.m_chartDataPointStyles.getByKey(name);
};
oFF.QChartStyle.prototype.getOrCreateValueAxisStyle = function(visualizationValueType)
{
	if (!this.m_valueAxes.containsKey(visualizationValueType))
	{
		this.m_valueAxes.put(visualizationValueType, oFF.QChartAxis.create(this.getContext(), this));
	}
	return this.m_valueAxes.getByKey(visualizationValueType);
};
oFF.QChartStyle.prototype.getPlotArea = function()
{
	return this.m_plotArea;
};
oFF.QChartStyle.prototype.getPrioritizedDataPointStyles = function()
{
	return oFF.XStream.of(this.m_chartDataPointStyles.getValuesAsReadOnlyList()).sorted(oFF.XComparatorLambda.create((a, b) => {
		let difference = a.getPriority() - b.getPriority();
		if (difference === 0)
		{
			difference = oFF.XString.compare(a.getText(), b.getText());
		}
		if (difference === 0)
		{
			difference = oFF.XString.compare(a.getName(), b.getName());
		}
		return oFF.XIntegerValue.create(difference);
	})).collect(oFF.XStreamCollector.toList());
};
oFF.QChartStyle.prototype.getTitleStyle = function()
{
	return this.m_titleStyle;
};
oFF.QChartStyle.prototype.getValueAxisTypes = function()
{
	return this.m_valueAxes.getKeysAsReadOnlyList();
};
oFF.QChartStyle.prototype.hasChartColorSchemeForKey = function(key)
{
	return this.m_colorSchemes.containsKey(key);
};
oFF.QChartStyle.prototype.mergeWithDefaults = function(variableHolderWithFallback, chartStyle)
{
	this.m_legendStyle.mergeWithDefaults(variableHolderWithFallback, chartStyle.getLegendStyle());
	this.m_plotArea.mergeWithDefaults(variableHolderWithFallback, chartStyle.getPlotArea());
	this.m_defaultAxis.mergeWithDefaults(variableHolderWithFallback, chartStyle.getDefaultAxisStyle());
	this.m_categoryAxis.mergeWithDefaults(variableHolderWithFallback, chartStyle.getCategoryAxisStyle());
	this.m_titleStyle.mergeWithDefaults(variableHolderWithFallback, chartStyle.getTitleStyle());
	let positionIterator = chartStyle.getChartAxisPositions().getIterator();
	while (positionIterator.hasNext())
	{
		let position = positionIterator.next();
		this.getOrCreateChartAxisStyleByPosition(position).mergeWithDefaults(variableHolderWithFallback, chartStyle.getOrCreateChartAxisStyleByPosition(position));
	}
	let typeIterator = chartStyle.getValueAxisTypes().getIterator();
	while (typeIterator.hasNext())
	{
		let type = typeIterator.next();
		this.getOrCreateValueAxisStyle(type).mergeWithDefaults(variableHolderWithFallback, chartStyle.getOrCreateValueAxisStyle(type));
	}
	let csIterator = chartStyle.getColorSchemeKeys().getIterator();
	while (csIterator.hasNext())
	{
		let csKey = csIterator.next();
		if (!this.m_colorSchemes.containsKey(csKey))
		{
			this.getOrCreateChartColorScheme(csKey).copyFrom(chartStyle.getOrCreateChartColorScheme(csKey), null);
		}
	}
	let cpsIterator = chartStyle.getChartPointStyleKeys().getIterator();
	while (cpsIterator.hasNext())
	{
		let cpsKey = cpsIterator.next();
		if (!this.m_chartPointStyles.containsKey(cpsKey))
		{
			let otherCps = chartStyle.getOrCreateChartPointStyle(cpsKey, null);
			this.getOrCreateChartPointStyle(cpsKey, otherCps.getText()).copyFrom(otherCps, null);
		}
	}
	let cdpsIterator = chartStyle.getDataPointStyleKeys().getIterator();
	while (cdpsIterator.hasNext())
	{
		let cpdsKey = cdpsIterator.next();
		if (!this.m_chartDataPointStyles.containsKey(cpdsKey))
		{
			let other = chartStyle.getOrCreateNewChartDataPointStyle(cpdsKey, null);
			this.getOrCreateNewChartDataPointStyle(cpdsKey, other.getText()).copyFrom(other, null);
		}
	}
};
oFF.QChartStyle.prototype.removeChartPointStyle = function(name)
{
	let style = this.m_chartPointStyles.getByKey(name);
	if (oFF.notNull(style))
	{
		this.m_chartPointStyles.remove(name);
		oFF.XObjectExt.release(style);
	}
};
oFF.QChartStyle.prototype.removeDataPointStyle = function(name)
{
	let style = this.m_chartDataPointStyles.getByKey(name);
	if (oFF.notNull(style))
	{
		this.m_chartDataPointStyles.remove(name);
		oFF.XObjectExt.release(style);
	}
};
oFF.QChartStyle.prototype.setupChartStyle = function(context, parent)
{
	this.setupModelComponent(context, parent);
	this.m_legendStyle = oFF.QVizLegendStyle.create(context, this);
	this.m_plotArea = oFF.QChartPlotArea.create(context, this);
	this.m_defaultAxis = oFF.QChartAxis.create(context, this);
	this.m_categoryAxis = oFF.QChartAxis.create(context, this);
	this.m_colorSchemes = oFF.XHashMapByString.create();
	this.m_chartDataPointStyles = oFF.XHashMapByString.create();
	this.m_chartPointStyles = oFF.XHashMapByString.create();
	this.m_valueAxes = oFF.XSimpleMap.create();
	this.m_positionedAxes = oFF.XSimpleMap.create();
	this.m_titleStyle = oFF.QVizLabelStyle.create(context, this);
};

oFF.QVizCellsReferenceScope = function() {};
oFF.QVizCellsReferenceScope.prototype = new oFF.QVizTableDefinitionContext();
oFF.QVizCellsReferenceScope.prototype._ff_c = "QVizCellsReferenceScope";

oFF.QVizCellsReferenceScope.create = function(context, parent)
{
	let instance = new oFF.QVizCellsReferenceScope();
	instance.setupModelComponent(context, parent);
	instance.setupInternal();
	return instance;
};
oFF.QVizCellsReferenceScope.prototype.m_axisPaths = null;
oFF.QVizCellsReferenceScope.prototype.m_headerSectionInfos = null;
oFF.QVizCellsReferenceScope.prototype.m_matchDataSectionEnd = null;
oFF.QVizCellsReferenceScope.prototype.m_matchDataSectionStart = null;
oFF.QVizCellsReferenceScope.prototype.m_matchFullDataSection = null;
oFF.QVizCellsReferenceScope.prototype.m_matchFullHeaderSection = null;
oFF.QVizCellsReferenceScope.prototype.m_matchHeaderFieldsSectionEnd = null;
oFF.QVizCellsReferenceScope.prototype.m_matchHeaderSectionEnd = null;
oFF.QVizCellsReferenceScope.prototype.m_matchHeaderSectionStart = null;
oFF.QVizCellsReferenceScope.prototype.m_matchModulo = null;
oFF.QVizCellsReferenceScope.prototype.m_matchOrdinal = null;
oFF.QVizCellsReferenceScope.prototype.m_matchRootContentIndices = null;
oFF.QVizCellsReferenceScope.prototype.m_matchSkipFirst = null;
oFF.QVizCellsReferenceScope.prototype.m_matchSkipLast = null;
oFF.QVizCellsReferenceScope.prototype.m_maxHeaderSectionInfo = null;
oFF.QVizCellsReferenceScope.prototype.m_minHeaderSectionInfo = null;
oFF.QVizCellsReferenceScope.prototype.addNewAxisPath = function()
{
	let newPath = oFF.QVizAxisPath.create(this.getContext(), this);
	this.m_axisPaths.add(newPath);
	return newPath;
};
oFF.QVizCellsReferenceScope.prototype.addNewHeaderSectionInfo = function()
{
	let headerSectionInfo = oFF.QVizHeaderSectionInfo.create(this.getContext(), this);
	this.m_headerSectionInfos.add(headerSectionInfo);
	return headerSectionInfo;
};
oFF.QVizCellsReferenceScope.prototype.clearAxisPaths = function()
{
	this.m_axisPaths.clear();
};
oFF.QVizCellsReferenceScope.prototype.clearHeaderSectionInfos = function()
{
	this.m_headerSectionInfos.clear();
};
oFF.QVizCellsReferenceScope.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVizTableDefinitionContext.prototype.copyFromInternal.call( this , other, flags);
	let originObj = other;
	let hsi = originObj.getOrCreateMinHeaderSectionInfo(false);
	if (oFF.notNull(hsi))
	{
		this.getOrCreateMinHeaderSectionInfo(true).copyFrom(hsi, flags);
	}
	hsi = originObj.getOrCreateMaxHeaderSectionInfo(false);
	if (oFF.notNull(hsi))
	{
		this.getOrCreateMaxHeaderSectionInfo(true).copyFrom(hsi, flags);
	}
	let iterator = originObj.getHeaderSectionInfos().getIterator();
	while (iterator.hasNext())
	{
		this.addNewHeaderSectionInfo().copyFrom(iterator.next(), flags);
	}
	this.m_matchHeaderSectionStart.copyFrom(originObj.m_matchHeaderSectionStart, flags);
	this.m_matchHeaderSectionEnd.copyFrom(originObj.m_matchHeaderSectionEnd, flags);
	this.m_matchHeaderFieldsSectionEnd.copyFrom(originObj.m_matchHeaderFieldsSectionEnd, flags);
	this.m_matchFullHeaderSection.copyFrom(originObj.m_matchFullHeaderSection, flags);
	this.m_axisPaths.clear();
	let iterator2 = originObj.getAxisPaths().getIterator();
	while (iterator2.hasNext())
	{
		this.addNewAxisPath().copyFrom(iterator2.next(), flags);
	}
	this.m_matchDataSectionStart.copyFrom(originObj.m_matchDataSectionStart, flags);
	this.m_matchDataSectionEnd.copyFrom(originObj.m_matchDataSectionEnd, flags);
	this.m_matchFullDataSection.copyFrom(originObj.m_matchFullDataSection, flags);
	this.m_matchModulo.copyFrom(originObj.m_matchModulo, flags);
	this.m_matchOrdinal.copyFrom(originObj.m_matchOrdinal, flags);
	this.m_matchSkipFirst.copyFrom(originObj.m_matchSkipFirst, flags);
	this.m_matchSkipLast.copyFrom(originObj.m_matchSkipLast, flags);
	this.m_matchRootContentIndices.copyFrom(originObj.m_matchRootContentIndices, flags);
};
oFF.QVizCellsReferenceScope.prototype.getAxisPaths = function()
{
	return this.m_axisPaths;
};
oFF.QVizCellsReferenceScope.prototype.getHeaderSectionInfos = function()
{
	return this.m_headerSectionInfos;
};
oFF.QVizCellsReferenceScope.prototype.getMatchDataSectionEndRaw = function()
{
	return this.m_matchDataSectionEnd;
};
oFF.QVizCellsReferenceScope.prototype.getMatchDataSectionStartRaw = function()
{
	return this.m_matchDataSectionStart;
};
oFF.QVizCellsReferenceScope.prototype.getMatchFullDataSectionRaw = function()
{
	return this.m_matchFullDataSection;
};
oFF.QVizCellsReferenceScope.prototype.getMatchFullHeaderSectionRaw = function()
{
	return this.m_matchFullHeaderSection;
};
oFF.QVizCellsReferenceScope.prototype.getMatchHeaderFieldsSectionEndRaw = function()
{
	return this.m_matchHeaderFieldsSectionEnd;
};
oFF.QVizCellsReferenceScope.prototype.getMatchHeaderSectionEndRaw = function()
{
	return this.m_matchHeaderSectionEnd;
};
oFF.QVizCellsReferenceScope.prototype.getMatchHeaderSectionStartRaw = function()
{
	return this.m_matchHeaderSectionStart;
};
oFF.QVizCellsReferenceScope.prototype.getMatchModulo = function()
{
	return this.m_matchModulo.resolveInteger(this.getTableDefinition());
};
oFF.QVizCellsReferenceScope.prototype.getMatchModuloRaw = function()
{
	return this.m_matchModulo;
};
oFF.QVizCellsReferenceScope.prototype.getMatchOrdinal = function()
{
	return this.m_matchOrdinal.resolveInteger(this.getTableDefinition());
};
oFF.QVizCellsReferenceScope.prototype.getMatchOrdinalRaw = function()
{
	return this.m_matchOrdinal;
};
oFF.QVizCellsReferenceScope.prototype.getMatchRootContentIndicesRaw = function()
{
	return this.m_matchRootContentIndices;
};
oFF.QVizCellsReferenceScope.prototype.getMatchSkipFirst = function()
{
	return this.m_matchSkipFirst.resolveInteger(this.getTableDefinition());
};
oFF.QVizCellsReferenceScope.prototype.getMatchSkipFirstRaw = function()
{
	return this.m_matchSkipFirst;
};
oFF.QVizCellsReferenceScope.prototype.getMatchSkipLast = function()
{
	return this.m_matchSkipLast.resolveInteger(this.getTableDefinition());
};
oFF.QVizCellsReferenceScope.prototype.getMatchSkipLastRaw = function()
{
	return this.m_matchSkipLast;
};
oFF.QVizCellsReferenceScope.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.VISUALIZATION_CELL_REFERENCE_SCOPE;
};
oFF.QVizCellsReferenceScope.prototype.getOrCreateMaxHeaderSectionInfo = function(createIfNotExists)
{
	if (oFF.isNull(this.m_maxHeaderSectionInfo) && createIfNotExists)
	{
		this.m_maxHeaderSectionInfo = oFF.QVizHeaderSectionInfo.create(this.getContext(), this);
	}
	return this.m_maxHeaderSectionInfo;
};
oFF.QVizCellsReferenceScope.prototype.getOrCreateMinHeaderSectionInfo = function(createIfNotExists)
{
	if (oFF.isNull(this.m_minHeaderSectionInfo) && createIfNotExists)
	{
		this.m_minHeaderSectionInfo = oFF.QVizHeaderSectionInfo.create(this.getContext(), this);
	}
	return this.m_minHeaderSectionInfo;
};
oFF.QVizCellsReferenceScope.prototype.isMatchDataSectionEnd = function()
{
	return this.m_matchDataSectionEnd.resolveBoolean(this.getTableDefinition());
};
oFF.QVizCellsReferenceScope.prototype.isMatchDataSectionStart = function()
{
	return this.m_matchDataSectionStart.resolveBoolean(this.getTableDefinition());
};
oFF.QVizCellsReferenceScope.prototype.isMatchFullDataSection = function()
{
	return this.m_matchFullDataSection.resolveBoolean(this.getTableDefinition());
};
oFF.QVizCellsReferenceScope.prototype.isMatchFullHeaderSection = function()
{
	return this.m_matchFullHeaderSection.resolveBoolean(this.getTableDefinition());
};
oFF.QVizCellsReferenceScope.prototype.isMatchHeaderFieldsSectionEnd = function()
{
	return this.m_matchHeaderFieldsSectionEnd.resolveBoolean(this.getTableDefinition());
};
oFF.QVizCellsReferenceScope.prototype.isMatchHeaderSectionEnd = function()
{
	return this.m_matchHeaderSectionEnd.resolveBoolean(this.getTableDefinition());
};
oFF.QVizCellsReferenceScope.prototype.isMatchHeaderSectionStart = function()
{
	return this.m_matchHeaderSectionStart.resolveBoolean(this.getTableDefinition());
};
oFF.QVizCellsReferenceScope.prototype.isMatchRootContentIndices = function()
{
	return this.m_matchRootContentIndices.resolveBoolean(this.getTableDefinition());
};
oFF.QVizCellsReferenceScope.prototype.releaseObject = function()
{
	this.m_minHeaderSectionInfo = oFF.XObjectExt.release(this.m_minHeaderSectionInfo);
	this.m_maxHeaderSectionInfo = oFF.XObjectExt.release(this.m_maxHeaderSectionInfo);
	this.m_axisPaths = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_axisPaths);
	this.m_headerSectionInfos = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_headerSectionInfos);
	this.m_matchHeaderSectionStart = oFF.XObjectExt.release(this.m_matchHeaderSectionStart);
	this.m_matchHeaderSectionEnd = oFF.XObjectExt.release(this.m_matchHeaderSectionEnd);
	this.m_matchHeaderFieldsSectionEnd = oFF.XObjectExt.release(this.m_matchHeaderFieldsSectionEnd);
	this.m_matchFullHeaderSection = oFF.XObjectExt.release(this.m_matchFullHeaderSection);
	this.m_matchDataSectionStart = oFF.XObjectExt.release(this.m_matchDataSectionStart);
	this.m_matchDataSectionEnd = oFF.XObjectExt.release(this.m_matchDataSectionEnd);
	this.m_matchFullDataSection = oFF.XObjectExt.release(this.m_matchFullDataSection);
	this.m_matchModulo = oFF.XObjectExt.release(this.m_matchModulo);
	this.m_matchOrdinal = oFF.XObjectExt.release(this.m_matchOrdinal);
	this.m_matchSkipFirst = oFF.XObjectExt.release(this.m_matchSkipFirst);
	this.m_matchSkipLast = oFF.XObjectExt.release(this.m_matchSkipLast);
	this.m_matchRootContentIndices = oFF.XObjectExt.release(this.m_matchRootContentIndices);
	oFF.QVizTableDefinitionContext.prototype.releaseObject.call( this );
};
oFF.QVizCellsReferenceScope.prototype.setMatchDataSectionEnd = function(matchDataSectionEnd)
{
	this.m_matchDataSectionEnd.setBoolean(matchDataSectionEnd);
};
oFF.QVizCellsReferenceScope.prototype.setMatchDataSectionStart = function(matchDataSectionStart)
{
	this.m_matchDataSectionStart.setBoolean(matchDataSectionStart);
};
oFF.QVizCellsReferenceScope.prototype.setMatchFullDataSection = function(matchFullDataSection)
{
	this.m_matchFullDataSection.setBoolean(matchFullDataSection);
};
oFF.QVizCellsReferenceScope.prototype.setMatchFullHeaderSection = function(matchFullHeaderSection)
{
	this.m_matchFullHeaderSection.setBoolean(matchFullHeaderSection);
};
oFF.QVizCellsReferenceScope.prototype.setMatchHeaderFieldsSectionEnd = function(matchHeaderFieldsSectionEnd)
{
	this.m_matchHeaderFieldsSectionEnd.setBoolean(matchHeaderFieldsSectionEnd);
};
oFF.QVizCellsReferenceScope.prototype.setMatchHeaderSectionEnd = function(matchHeaderSectionEnd)
{
	this.m_matchHeaderSectionEnd.setBoolean(matchHeaderSectionEnd);
};
oFF.QVizCellsReferenceScope.prototype.setMatchHeaderSectionStart = function(matchHeaderSectionStart)
{
	this.m_matchHeaderSectionStart.setBoolean(matchHeaderSectionStart);
};
oFF.QVizCellsReferenceScope.prototype.setMatchModulo = function(matchModulo)
{
	this.m_matchModulo.setInteger(matchModulo);
};
oFF.QVizCellsReferenceScope.prototype.setMatchOrdinal = function(matchOrdinal)
{
	this.m_matchOrdinal.setInteger(matchOrdinal);
};
oFF.QVizCellsReferenceScope.prototype.setMatchRootContentIndices = function(matchRootContentIndices)
{
	this.m_matchRootContentIndices.setBoolean(matchRootContentIndices);
};
oFF.QVizCellsReferenceScope.prototype.setMatchSkipFirst = function(matchSkipFirst)
{
	this.m_matchSkipFirst.setInteger(matchSkipFirst);
};
oFF.QVizCellsReferenceScope.prototype.setMatchSkipLast = function(matchSkipLast)
{
	this.m_matchSkipLast.setInteger(matchSkipLast);
};
oFF.QVizCellsReferenceScope.prototype.setupInternal = function()
{
	this.m_headerSectionInfos = oFF.XList.create();
	this.m_axisPaths = oFF.XList.create();
	this.m_matchHeaderSectionStart = oFF.QStylingValueBoolean.create();
	this.m_matchHeaderSectionEnd = oFF.QStylingValueBoolean.create();
	this.m_matchHeaderFieldsSectionEnd = oFF.QStylingValueBoolean.create();
	this.m_matchFullHeaderSection = oFF.QStylingValueBoolean.create();
	this.m_matchDataSectionStart = oFF.QStylingValueBoolean.create();
	this.m_matchDataSectionEnd = oFF.QStylingValueBoolean.create();
	this.m_matchFullDataSection = oFF.QStylingValueBoolean.create();
	this.m_matchModulo = oFF.QStylingValueInteger.create();
	this.m_matchOrdinal = oFF.QStylingValueInteger.create();
	this.m_matchSkipFirst = oFF.QStylingValueInteger.create();
	this.m_matchSkipLast = oFF.QStylingValueInteger.create();
	this.m_matchRootContentIndices = oFF.QStylingValueBoolean.create();
};

oFF.QVizDataPointStyle = function() {};
oFF.QVizDataPointStyle.prototype = new oFF.QVizTableDefinitionContext();
oFF.QVizDataPointStyle.prototype._ff_c = "QVizDataPointStyle";

oFF.QVizDataPointStyle.create = function(context, parent, name, text)
{
	let instance = new oFF.QVizDataPointStyle();
	instance.setupModelComponent(context, parent);
	instance.setName(name);
	instance.setText(text);
	instance.m_formattingStyleName = oFF.QStylingValueString.create();
	instance.m_dataPointCategoryName = oFF.QStylingValueString.create();
	instance.m_dataPointCategoryText = oFF.QStylingValueString.create();
	instance.m_axisPathElements = oFF.XList.create();
	instance.m_tags = oFF.XList.create();
	instance.setup();
	return instance;
};
oFF.QVizDataPointStyle.prototype.m_alertLevelMax = null;
oFF.QVizDataPointStyle.prototype.m_alertLevelMin = null;
oFF.QVizDataPointStyle.prototype.m_axisPathElements = null;
oFF.QVizDataPointStyle.prototype.m_dataPointCategoryName = null;
oFF.QVizDataPointStyle.prototype.m_dataPointCategoryText = null;
oFF.QVizDataPointStyle.prototype.m_exceptionName = null;
oFF.QVizDataPointStyle.prototype.m_formattingStyleName = null;
oFF.QVizDataPointStyle.prototype.m_priority = 0;
oFF.QVizDataPointStyle.prototype.m_tags = null;
oFF.QVizDataPointStyle.prototype.m_unmatchedAlertLevels = false;
oFF.QVizDataPointStyle.prototype.m_unmatchedExceptions = false;
oFF.QVizDataPointStyle.prototype.m_unmatchedPathElements = false;
oFF.QVizDataPointStyle.prototype.m_unmatchedTags = false;
oFF.QVizDataPointStyle.prototype.m_unmatchedValueSigns = false;
oFF.QVizDataPointStyle.prototype.m_valueSign = null;
oFF.QVizDataPointStyle.prototype.addNewPathElement = function()
{
	let reference = oFF.QVizAxisPathElement.create(this.getContext(), this);
	this.m_axisPathElements.add(reference);
	this.m_unmatchedPathElements = false;
	return reference;
};
oFF.QVizDataPointStyle.prototype.addTag = function(tag)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(tag))
	{
		this.m_tags.add(tag);
		this.m_unmatchedTags = false;
	}
};
oFF.QVizDataPointStyle.prototype.clearPathElements = function()
{
	this.m_unmatchedPathElements = false;
	this.m_axisPathElements.clear();
};
oFF.QVizDataPointStyle.prototype.clearTags = function()
{
	this.m_tags.clear();
};
oFF.QVizDataPointStyle.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVizTableDefinitionContext.prototype.copyFromInternal.call( this , other, flags);
	let originObj = other;
	this.m_formattingStyleName.copyFrom(originObj.m_formattingStyleName, flags);
	this.m_dataPointCategoryName.copyFrom(originObj.m_dataPointCategoryName, flags);
	this.m_dataPointCategoryText.copyFrom(originObj.m_dataPointCategoryText, flags);
	this.m_alertLevelMin = originObj.m_alertLevelMin;
	this.m_alertLevelMax = originObj.m_alertLevelMax;
	this.m_exceptionName = originObj.m_exceptionName;
	this.m_valueSign = originObj.m_valueSign;
	this.m_axisPathElements.clear();
	this.m_tags = originObj.m_tags.createListCopy();
	this.m_unmatchedTags = originObj.m_unmatchedTags;
	oFF.XCollectionUtils.forEach(originObj.getPathElements(), (pe) => {
		this.addNewPathElement().copyFrom(pe, flags);
	});
	this.m_unmatchedExceptions = originObj.m_unmatchedExceptions;
	this.m_unmatchedAlertLevels = originObj.m_unmatchedAlertLevels;
	this.m_unmatchedValueSigns = originObj.m_unmatchedValueSigns;
	this.m_unmatchedPathElements = originObj.m_unmatchedPathElements;
	this.m_priority = originObj.m_priority;
};
oFF.QVizDataPointStyle.prototype.getAlertLevel = function()
{
	return this.m_alertLevelMin === this.m_alertLevelMax ? this.m_alertLevelMin : null;
};
oFF.QVizDataPointStyle.prototype.getAlertLevelMax = function()
{
	return this.m_alertLevelMax;
};
oFF.QVizDataPointStyle.prototype.getAlertLevelMin = function()
{
	return this.m_alertLevelMin;
};
oFF.QVizDataPointStyle.prototype.getDataPointCategoryName = function()
{
	return this.m_dataPointCategoryName.resolveString(this.getTableDefinition());
};
oFF.QVizDataPointStyle.prototype.getDataPointCategoryNameRaw = function()
{
	return this.m_dataPointCategoryName;
};
oFF.QVizDataPointStyle.prototype.getDataPointCategoryText = function()
{
	return this.m_dataPointCategoryText.resolveString(this.getTableDefinition());
};
oFF.QVizDataPointStyle.prototype.getDataPointCategoryTextRaw = function()
{
	return this.m_dataPointCategoryText;
};
oFF.QVizDataPointStyle.prototype.getException = function()
{
	return oFF.isNull(this.m_exceptionName) || this.getQueryModel() === null || this.getQueryModel().getExceptionManager() === null ? null : this.getQueryModel().getExceptionManager().getByKey(this.m_exceptionName);
};
oFF.QVizDataPointStyle.prototype.getExceptionName = function()
{
	return this.m_exceptionName;
};
oFF.QVizDataPointStyle.prototype.getFormattingStyle = function()
{
	let formattingStyle = null;
	if (this.getParent() !== null && this.getParent().getOlapComponentType() === oFF.OlapComponentType.VISUALIZATION_TABLE_DEFINITION)
	{
		formattingStyle = this.getParent().getFormattingStyle(this.getFormattingStyleName());
	}
	return formattingStyle;
};
oFF.QVizDataPointStyle.prototype.getFormattingStyleName = function()
{
	return this.m_formattingStyleName.resolveString(this.getTableDefinition());
};
oFF.QVizDataPointStyle.prototype.getFormattingStyleNameRaw = function()
{
	return this.m_formattingStyleName;
};
oFF.QVizDataPointStyle.prototype.getPathElements = function()
{
	return this.m_axisPathElements;
};
oFF.QVizDataPointStyle.prototype.getPriority = function()
{
	return this.m_priority;
};
oFF.QVizDataPointStyle.prototype.getTags = function()
{
	return this.m_tags;
};
oFF.QVizDataPointStyle.prototype.getValueSign = function()
{
	return this.m_valueSign;
};
oFF.QVizDataPointStyle.prototype.isUnmatchedAlertLevels = function()
{
	return this.m_unmatchedAlertLevels;
};
oFF.QVizDataPointStyle.prototype.isUnmatchedExceptions = function()
{
	return this.m_unmatchedExceptions;
};
oFF.QVizDataPointStyle.prototype.isUnmatchedPathElements = function()
{
	return this.m_unmatchedPathElements;
};
oFF.QVizDataPointStyle.prototype.isUnmatchedTags = function()
{
	return this.m_unmatchedTags;
};
oFF.QVizDataPointStyle.prototype.isUnmatchedValueSigns = function()
{
	return this.m_unmatchedValueSigns;
};
oFF.QVizDataPointStyle.prototype.releaseObject = function()
{
	this.m_formattingStyleName = oFF.XObjectExt.release(this.m_formattingStyleName);
	this.m_alertLevelMin = null;
	this.m_alertLevelMax = null;
	this.m_exceptionName = null;
	this.m_valueSign = null;
	this.m_unmatchedAlertLevels = false;
	this.m_unmatchedExceptions = false;
	this.m_unmatchedValueSigns = false;
	this.m_unmatchedPathElements = false;
	this.m_axisPathElements = oFF.XObjectExt.release(this.m_axisPathElements);
	this.m_unmatchedTags = false;
	this.m_tags = oFF.XObjectExt.release(this.m_tags);
	this.m_priority = 0;
	oFF.QVizTableDefinitionContext.prototype.releaseObject.call( this );
};
oFF.QVizDataPointStyle.prototype.setAlertLevel = function(alertLevel)
{
	if (oFF.notNull(alertLevel))
	{
		this.m_unmatchedAlertLevels = false;
	}
	this.m_alertLevelMin = alertLevel;
	this.m_alertLevelMax = alertLevel;
};
oFF.QVizDataPointStyle.prototype.setAlertLevelMax = function(alertLevelMax)
{
	if (oFF.notNull(alertLevelMax))
	{
		this.m_unmatchedAlertLevels = false;
	}
	this.m_alertLevelMax = alertLevelMax;
};
oFF.QVizDataPointStyle.prototype.setAlertLevelMin = function(alertLevelMin)
{
	if (oFF.notNull(alertLevelMin))
	{
		this.m_unmatchedAlertLevels = false;
	}
	this.m_alertLevelMin = alertLevelMin;
};
oFF.QVizDataPointStyle.prototype.setDataPointCategoryName = function(dataPointCategoryName)
{
	this.m_dataPointCategoryName.setString(dataPointCategoryName);
};
oFF.QVizDataPointStyle.prototype.setDataPointCategoryText = function(dataPointCategoryText)
{
	this.m_dataPointCategoryText.setString(dataPointCategoryText);
};
oFF.QVizDataPointStyle.prototype.setException = function(exception)
{
	this.m_exceptionName = oFF.isNull(exception) ? null : exception.getName();
};
oFF.QVizDataPointStyle.prototype.setExceptionName = function(exceptionName)
{
	if (oFF.notNull(exceptionName))
	{
		this.m_unmatchedExceptions = false;
	}
	this.m_exceptionName = exceptionName;
};
oFF.QVizDataPointStyle.prototype.setFormattingStyle = function(formattingStyle)
{
	this.m_formattingStyleName.setString(oFF.isNull(formattingStyle) ? null : formattingStyle.getName());
};
oFF.QVizDataPointStyle.prototype.setFormattingStyleName = function(formattingStyleName)
{
	this.m_formattingStyleName.setString(formattingStyleName);
};
oFF.QVizDataPointStyle.prototype.setPriority = function(priority)
{
	this.m_priority = priority;
};
oFF.QVizDataPointStyle.prototype.setUnmatchedAlertLevels = function()
{
	this.m_unmatchedAlertLevels = true;
	this.m_alertLevelMax = null;
	this.m_alertLevelMin = null;
};
oFF.QVizDataPointStyle.prototype.setUnmatchedExceptions = function()
{
	this.m_unmatchedExceptions = true;
	this.m_exceptionName = null;
};
oFF.QVizDataPointStyle.prototype.setUnmatchedPathElements = function()
{
	this.m_axisPathElements.clear();
	this.m_unmatchedPathElements = true;
};
oFF.QVizDataPointStyle.prototype.setUnmatchedTags = function()
{
	this.m_unmatchedTags = true;
	this.m_tags.clear();
};
oFF.QVizDataPointStyle.prototype.setUnmatchedValueSigns = function()
{
	this.m_valueSign = null;
	this.m_unmatchedValueSigns = true;
};
oFF.QVizDataPointStyle.prototype.setValueSign = function(valueSign)
{
	if (oFF.notNull(valueSign))
	{
		this.m_unmatchedValueSigns = false;
	}
	this.m_valueSign = valueSign;
};

oFF.QVizHeaderSectionInfo = function() {};
oFF.QVizHeaderSectionInfo.prototype = new oFF.QVizTableDefinitionContext();
oFF.QVizHeaderSectionInfo.prototype._ff_c = "QVizHeaderSectionInfo";

oFF.QVizHeaderSectionInfo.create = function(context, parent)
{
	let instance = new oFF.QVizHeaderSectionInfo();
	instance.setupModelComponent(context, parent);
	instance.setupInternal();
	return instance;
};
oFF.QVizHeaderSectionInfo.prototype.m_attributeLevel = false;
oFF.QVizHeaderSectionInfo.prototype.m_axisLevel = 0;
oFF.QVizHeaderSectionInfo.prototype.m_dimensionLevel = false;
oFF.QVizHeaderSectionInfo.prototype.m_exactHeaderLevel = false;
oFF.QVizHeaderSectionInfo.prototype.m_fieldLevel = false;
oFF.QVizHeaderSectionInfo.prototype.m_headerName = null;
oFF.QVizHeaderSectionInfo.prototype.m_sectionEnd = null;
oFF.QVizHeaderSectionInfo.prototype.m_sectionStart = null;
oFF.QVizHeaderSectionInfo.prototype.m_uniqueUnitsLevel = false;
oFF.QVizHeaderSectionInfo.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVizTableDefinitionContext.prototype.copyFromInternal.call( this , other, flags);
	let orig = other;
	this.m_headerName = orig.m_headerName;
	this.m_dimensionLevel = orig.m_dimensionLevel;
	this.m_attributeLevel = orig.m_attributeLevel;
	this.m_fieldLevel = orig.m_fieldLevel;
	this.m_uniqueUnitsLevel = orig.m_uniqueUnitsLevel;
	this.m_exactHeaderLevel = orig.m_exactHeaderLevel;
	this.m_axisLevel = orig.m_axisLevel;
	this.m_sectionEnd = orig.m_sectionEnd;
	this.m_sectionStart = orig.m_sectionStart;
};
oFF.QVizHeaderSectionInfo.prototype.getAttribute = function()
{
	let dimension = this.m_attributeLevel ? oFF.XStream.of(this.getQueryModel().getDimensions()).find((dim) => {
		return dim.getAttributeByName(this.m_headerName) !== null;
	}).orElse(null) : null;
	return oFF.isNull(dimension) ? null : dimension.getAttributeByName(this.m_headerName);
};
oFF.QVizHeaderSectionInfo.prototype.getAxisLevel = function()
{
	return this.m_axisLevel;
};
oFF.QVizHeaderSectionInfo.prototype.getDimension = function()
{
	return this.m_dimensionLevel ? this.getQueryModel().getDimensionByName(this.m_headerName) : null;
};
oFF.QVizHeaderSectionInfo.prototype.getField = function()
{
	return this.m_fieldLevel ? this.getQueryModel().getFieldByName(this.m_headerName) : null;
};
oFF.QVizHeaderSectionInfo.prototype.getHeaderName = function()
{
	return this.m_headerName;
};
oFF.QVizHeaderSectionInfo.prototype.isAttributeLevel = function()
{
	return this.m_attributeLevel;
};
oFF.QVizHeaderSectionInfo.prototype.isDimensionLevel = function()
{
	return this.m_dimensionLevel;
};
oFF.QVizHeaderSectionInfo.prototype.isExactHeaderLevel = function()
{
	return this.m_exactHeaderLevel;
};
oFF.QVizHeaderSectionInfo.prototype.isFieldLevel = function()
{
	return this.m_fieldLevel;
};
oFF.QVizHeaderSectionInfo.prototype.isSectionEnd = function()
{
	return this.m_sectionEnd;
};
oFF.QVizHeaderSectionInfo.prototype.isSectionStart = function()
{
	return this.m_sectionStart;
};
oFF.QVizHeaderSectionInfo.prototype.isUniqueUnitsLevel = function()
{
	return this.m_uniqueUnitsLevel;
};
oFF.QVizHeaderSectionInfo.prototype.setAttribute = function(attribute)
{
	this.m_dimensionLevel = false;
	this.m_fieldLevel = false;
	this.m_attributeLevel = true;
	this.m_headerName = oFF.isNull(attribute) ? null : attribute.getName();
};
oFF.QVizHeaderSectionInfo.prototype.setAttributeLevel = function(attributeLevel)
{
	this.m_attributeLevel = attributeLevel;
};
oFF.QVizHeaderSectionInfo.prototype.setAxisLevel = function(axisLevel)
{
	this.m_axisLevel = axisLevel;
};
oFF.QVizHeaderSectionInfo.prototype.setDimension = function(dimension)
{
	this.m_fieldLevel = false;
	this.m_attributeLevel = false;
	this.m_dimensionLevel = true;
	this.m_headerName = oFF.isNull(dimension) ? null : dimension.getName();
};
oFF.QVizHeaderSectionInfo.prototype.setDimensionLevel = function(dimensionLevel)
{
	this.m_dimensionLevel = dimensionLevel;
};
oFF.QVizHeaderSectionInfo.prototype.setExactHeaderLevel = function(exactLevel)
{
	this.m_exactHeaderLevel = exactLevel;
};
oFF.QVizHeaderSectionInfo.prototype.setField = function(field)
{
	this.m_dimensionLevel = false;
	this.m_attributeLevel = false;
	this.m_fieldLevel = true;
	this.m_headerName = oFF.isNull(field) ? null : field.getName();
};
oFF.QVizHeaderSectionInfo.prototype.setFieldLevel = function(fieldLevel)
{
	this.m_fieldLevel = fieldLevel;
};
oFF.QVizHeaderSectionInfo.prototype.setHeaderName = function(headerName)
{
	this.m_headerName = headerName;
};
oFF.QVizHeaderSectionInfo.prototype.setSectionEnd = function(sectionEnd)
{
	this.m_sectionEnd = sectionEnd;
};
oFF.QVizHeaderSectionInfo.prototype.setSectionStart = function(sectionStart)
{
	this.m_sectionStart = sectionStart;
};
oFF.QVizHeaderSectionInfo.prototype.setUniqueUnitsLevel = function(uniqueUnitsLevel)
{
	this.m_uniqueUnitsLevel = uniqueUnitsLevel;
};
oFF.QVizHeaderSectionInfo.prototype.setupInternal = function()
{
	this.m_axisLevel = -1;
};

oFF.QVizHighlightArea = function() {};
oFF.QVizHighlightArea.prototype = new oFF.QVizTableDefinitionContext();
oFF.QVizHighlightArea.prototype._ff_c = "QVizHighlightArea";

oFF.QVizHighlightArea.create = function(context, parent)
{
	let instance = new oFF.QVizHighlightArea();
	instance.setupModelComponent(context, parent);
	instance.setup();
	return instance;
};
oFF.QVizHighlightArea.prototype.m_cellTypeRestriction = null;
oFF.QVizHighlightArea.prototype.m_color = null;
oFF.QVizHighlightArea.prototype.m_columnsReference = null;
oFF.QVizHighlightArea.prototype.m_priority = 0;
oFF.QVizHighlightArea.prototype.m_rowsReference = null;
oFF.QVizHighlightArea.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVizTableDefinitionContext.prototype.copyFromInternal.call( this , other, flags);
	let orig = other;
	this.m_color.copyFrom(orig.m_color, flags);
	this.m_priority = orig.m_priority;
	this.m_columnsReference.copyFrom(orig.m_columnsReference, flags);
	this.m_rowsReference.copyFrom(orig.m_rowsReference, flags);
	this.m_cellTypeRestriction.copyFrom(orig.m_cellTypeRestriction, flags);
};
oFF.QVizHighlightArea.prototype.getCellTypeRestriction = function()
{
	return this.m_cellTypeRestriction;
};
oFF.QVizHighlightArea.prototype.getColumnsReference = function()
{
	return this.m_columnsReference;
};
oFF.QVizHighlightArea.prototype.getHighlightColor = function()
{
	return this.m_color.resolveString(this.getTableDefinition());
};
oFF.QVizHighlightArea.prototype.getHighlightColorRaw = function()
{
	return this.m_color;
};
oFF.QVizHighlightArea.prototype.getPriority = function()
{
	return this.m_priority;
};
oFF.QVizHighlightArea.prototype.getRowsReference = function()
{
	return this.m_rowsReference;
};
oFF.QVizHighlightArea.prototype.releaseObject = function()
{
	this.m_columnsReference = oFF.XObjectExt.release(this.m_columnsReference);
	this.m_rowsReference = oFF.XObjectExt.release(this.m_rowsReference);
	this.m_color = oFF.XObjectExt.release(this.m_color);
	this.m_priority = -1;
	this.m_cellTypeRestriction = oFF.XObjectExt.release(this.m_cellTypeRestriction);
	oFF.QVizTableDefinitionContext.prototype.releaseObject.call( this );
};
oFF.QVizHighlightArea.prototype.setHighlightColor = function(color)
{
	this.m_color.setString(color);
};
oFF.QVizHighlightArea.prototype.setPriority = function(priority)
{
	this.m_priority = priority;
};
oFF.QVizHighlightArea.prototype.setup = function()
{
	oFF.QVizTableDefinitionContext.prototype.setup.call( this );
	this.m_rowsReference = oFF.QVizCellsReferenceScope.create(this.getContext(), this);
	this.m_columnsReference = oFF.QVizCellsReferenceScope.create(this.getContext(), this);
	this.m_color = oFF.QStylingValueString.create();
	this.m_cellTypeRestriction = oFF.QVizCellTypeRestriction.create();
};

oFF.QVizInsertedTuple = function() {};
oFF.QVizInsertedTuple.prototype = new oFF.QVizTableDefinitionContext();
oFF.QVizInsertedTuple.prototype._ff_c = "QVizInsertedTuple";

oFF.QVizInsertedTuple.create = function(context, parentComponent, name, text)
{
	let instance = new oFF.QVizInsertedTuple();
	instance.setupModelComponent(context, parentComponent);
	instance.setupInternal();
	instance.setName(name);
	instance.setText(text);
	return instance;
};
oFF.QVizInsertedTuple.prototype.m_cellHeight = null;
oFF.QVizInsertedTuple.prototype.m_cellWidth = null;
oFF.QVizInsertedTuple.prototype.m_formattedText = null;
oFF.QVizInsertedTuple.prototype.m_merged = null;
oFF.QVizInsertedTuple.prototype.m_scopedStyleNames = null;
oFF.QVizInsertedTuple.prototype.addScopedStyle = function(formattingStyle)
{
	if (oFF.notNull(formattingStyle))
	{
		this.m_scopedStyleNames.add(formattingStyle.getName());
	}
};
oFF.QVizInsertedTuple.prototype.addScopedStyleName = function(formattingStyleName)
{
	this.m_scopedStyleNames.add(formattingStyleName);
};
oFF.QVizInsertedTuple.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVizTableDefinitionContext.prototype.copyFromInternal.call( this , other, flags);
	let otherObj = other;
	this.m_scopedStyleNames.clear();
	this.m_scopedStyleNames.addAll(otherObj.getScopedStyleNames());
	this.m_formattedText.copyFrom(otherObj.m_formattedText, flags);
	this.m_merged.copyFrom(otherObj.m_merged, flags);
	this.m_cellWidth.copyFrom(otherObj.m_cellWidth, flags);
	this.m_cellHeight.copyFrom(otherObj.m_cellHeight, flags);
};
oFF.QVizInsertedTuple.prototype.getCellHeight = function()
{
	return this.m_cellHeight.resolveIntegerExt(this.getTableDefinition(), -1);
};
oFF.QVizInsertedTuple.prototype.getCellHeightRaw = function()
{
	return this.m_cellHeight;
};
oFF.QVizInsertedTuple.prototype.getCellWidth = function()
{
	return this.m_cellWidth.resolveIntegerExt(this.getTableDefinition(), -1);
};
oFF.QVizInsertedTuple.prototype.getCellWidthRaw = function()
{
	return this.m_cellWidth;
};
oFF.QVizInsertedTuple.prototype.getFormattedText = function()
{
	return this.m_formattedText.resolveString(this.getTableDefinition());
};
oFF.QVizInsertedTuple.prototype.getFormattedTextRaw = function()
{
	return this.m_formattedText;
};
oFF.QVizInsertedTuple.prototype.getMergedRaw = function()
{
	return this.m_merged;
};
oFF.QVizInsertedTuple.prototype.getScopedStyleNames = function()
{
	return this.m_scopedStyleNames;
};
oFF.QVizInsertedTuple.prototype.isMerged = function()
{
	return this.m_merged.resolveBoolean(this.getTableDefinition());
};
oFF.QVizInsertedTuple.prototype.releaseObject = function()
{
	this.m_scopedStyleNames = oFF.XObjectExt.release(this.m_scopedStyleNames);
	this.m_formattedText = oFF.XObjectExt.release(this.m_formattedText);
	this.m_merged = oFF.XObjectExt.release(this.m_merged);
	this.m_cellHeight = oFF.XObjectExt.release(this.m_cellHeight);
	this.m_cellWidth = oFF.XObjectExt.release(this.m_cellWidth);
	oFF.QVizTableDefinitionContext.prototype.releaseObject.call( this );
};
oFF.QVizInsertedTuple.prototype.setCellHeight = function(cellHeight)
{
	this.m_cellHeight.setInteger(cellHeight);
};
oFF.QVizInsertedTuple.prototype.setCellWidth = function(cellWidth)
{
	this.m_cellWidth.setInteger(cellWidth);
};
oFF.QVizInsertedTuple.prototype.setFormattedText = function(text)
{
	this.m_formattedText.setString(text);
};
oFF.QVizInsertedTuple.prototype.setMerged = function(merged)
{
	this.m_merged.setBoolean(merged);
};
oFF.QVizInsertedTuple.prototype.setupInternal = function()
{
	oFF.QVizTableDefinitionContext.prototype.setup.call( this );
	this.m_scopedStyleNames = oFF.XList.create();
	this.m_cellHeight = oFF.QStylingValueInteger.create();
	this.m_cellWidth = oFF.QStylingValueInteger.create();
	this.m_formattedText = oFF.QStylingValueString.create();
	this.m_merged = oFF.QStylingValueBoolean.create();
};

oFF.QVizLabelStyle = function() {};
oFF.QVizLabelStyle.prototype = new oFF.QVizChartDefinitionContext();
oFF.QVizLabelStyle.prototype._ff_c = "QVizLabelStyle";

oFF.QVizLabelStyle.create = function(context, parent)
{
	let instance = new oFF.QVizLabelStyle();
	instance.setupModelComponent(context, parent);
	instance.setup();
	return instance;
};
oFF.QVizLabelStyle.prototype.m_autoResize = null;
oFF.QVizLabelStyle.prototype.m_avoidOverlap = null;
oFF.QVizLabelStyle.prototype.m_backgroundColor = null;
oFF.QVizLabelStyle.prototype.m_fontBold = null;
oFF.QVizLabelStyle.prototype.m_fontColor = null;
oFF.QVizLabelStyle.prototype.m_fontFamily = null;
oFF.QVizLabelStyle.prototype.m_fontItalic = null;
oFF.QVizLabelStyle.prototype.m_fontSize = null;
oFF.QVizLabelStyle.prototype.m_fontStrikeThrough = null;
oFF.QVizLabelStyle.prototype.m_fontUnderline = null;
oFF.QVizLabelStyle.prototype.m_formatString = null;
oFF.QVizLabelStyle.prototype.m_horizontalAlignment = null;
oFF.QVizLabelStyle.prototype.m_rotation = null;
oFF.QVizLabelStyle.prototype.m_showLabel = null;
oFF.QVizLabelStyle.prototype.m_verticalAlignment = null;
oFF.QVizLabelStyle.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVizChartDefinitionContext.prototype.copyFromInternal.call( this , other, flags);
	let originObj = other;
	this.m_fontBold.copyFrom(originObj.m_fontBold, flags);
	this.m_fontItalic.copyFrom(originObj.m_fontItalic, flags);
	this.m_fontUnderline.copyFrom(originObj.m_fontUnderline, flags);
	this.m_fontStrikeThrough.copyFrom(originObj.m_fontStrikeThrough, flags);
	this.m_fontSize.copyFrom(originObj.m_fontSize, flags);
	this.m_fontColor.copyFrom(originObj.m_fontColor, flags);
	this.m_fontFamily.copyFrom(originObj.m_fontFamily, flags);
	this.m_verticalAlignment.copyFrom(originObj.m_verticalAlignment, flags);
	this.m_horizontalAlignment.copyFrom(originObj.m_horizontalAlignment, flags);
	this.m_showLabel.copyFrom(originObj.m_showLabel, flags);
	this.m_avoidOverlap.copyFrom(originObj.m_avoidOverlap, flags);
	this.m_backgroundColor.copyFrom(originObj.m_backgroundColor, flags);
	this.m_autoResize.copyFrom(originObj.m_autoResize, flags);
	this.m_formatString.copyFrom(originObj.m_formatString, flags);
	this.m_rotation.copyFrom(originObj.m_rotation, flags);
};
oFF.QVizLabelStyle.prototype.getAutoResize = function()
{
	return this.m_autoResize.resolveBoolean(this.getChartDefinition());
};
oFF.QVizLabelStyle.prototype.getAutoResizeExt = function()
{
	return this.m_autoResize.resolveTriStateBoolean(this.getChartDefinition());
};
oFF.QVizLabelStyle.prototype.getAutoResizeRaw = function()
{
	return this.m_autoResize;
};
oFF.QVizLabelStyle.prototype.getAvoidOverlap = function()
{
	return this.m_avoidOverlap.resolveBoolean(this.getChartDefinition());
};
oFF.QVizLabelStyle.prototype.getAvoidOverlapExt = function()
{
	return this.m_avoidOverlap.resolveTriStateBoolean(this.getChartDefinition());
};
oFF.QVizLabelStyle.prototype.getAvoidOverlapRaw = function()
{
	return this.m_avoidOverlap;
};
oFF.QVizLabelStyle.prototype.getBackgroundColor = function()
{
	return this.m_backgroundColor.resolveString(this.getChartDefinition());
};
oFF.QVizLabelStyle.prototype.getBackgroundColorRaw = function()
{
	return this.m_backgroundColor;
};
oFF.QVizLabelStyle.prototype.getFontBold = function()
{
	return this.m_fontBold.resolveBoolean(this.getChartDefinition());
};
oFF.QVizLabelStyle.prototype.getFontBoldExt = function()
{
	return this.m_fontBold.resolveTriStateBoolean(this.getChartDefinition());
};
oFF.QVizLabelStyle.prototype.getFontBoldRaw = function()
{
	return this.m_fontBold;
};
oFF.QVizLabelStyle.prototype.getFontColor = function()
{
	return this.m_fontColor.resolveString(this.getChartDefinition());
};
oFF.QVizLabelStyle.prototype.getFontColorRaw = function()
{
	return this.m_fontColor;
};
oFF.QVizLabelStyle.prototype.getFontFamily = function()
{
	return this.m_fontFamily.resolveString(this.getChartDefinition());
};
oFF.QVizLabelStyle.prototype.getFontFamilyRaw = function()
{
	return this.m_fontFamily;
};
oFF.QVizLabelStyle.prototype.getFontItalic = function()
{
	return this.m_fontItalic.resolveBoolean(this.getChartDefinition());
};
oFF.QVizLabelStyle.prototype.getFontItalicExt = function()
{
	return this.m_fontItalic.resolveTriStateBoolean(this.getChartDefinition());
};
oFF.QVizLabelStyle.prototype.getFontItalicRaw = function()
{
	return this.m_fontItalic;
};
oFF.QVizLabelStyle.prototype.getFontSize = function()
{
	return this.m_fontSize.resolveDouble(this.getChartDefinition());
};
oFF.QVizLabelStyle.prototype.getFontSizeRaw = function()
{
	return this.m_fontSize;
};
oFF.QVizLabelStyle.prototype.getFontStrikeThrough = function()
{
	return this.m_fontStrikeThrough.resolveBoolean(this.getChartDefinition());
};
oFF.QVizLabelStyle.prototype.getFontStrikeThroughExt = function()
{
	return this.m_fontStrikeThrough.resolveTriStateBoolean(this.getChartDefinition());
};
oFF.QVizLabelStyle.prototype.getFontStrikeThroughRaw = function()
{
	return this.m_fontStrikeThrough;
};
oFF.QVizLabelStyle.prototype.getFontUnderline = function()
{
	return this.m_fontUnderline.resolveBoolean(this.getChartDefinition());
};
oFF.QVizLabelStyle.prototype.getFontUnderlineExt = function()
{
	return this.m_fontUnderline.resolveTriStateBoolean(this.getChartDefinition());
};
oFF.QVizLabelStyle.prototype.getFontUnderlineRaw = function()
{
	return this.m_fontUnderline;
};
oFF.QVizLabelStyle.prototype.getFormatString = function()
{
	return this.m_formatString.resolveString(this.getChartDefinition());
};
oFF.QVizLabelStyle.prototype.getFormatStringRaw = function()
{
	return this.m_formatString;
};
oFF.QVizLabelStyle.prototype.getHorizontalAlignment = function()
{
	return this.m_horizontalAlignment.getResolvedValue(this.getChartDefinition());
};
oFF.QVizLabelStyle.prototype.getHorizontalAlignmentRaw = function()
{
	return this.m_horizontalAlignment;
};
oFF.QVizLabelStyle.prototype.getRotation = function()
{
	return this.m_rotation.resolveInteger(this.getChartDefinition());
};
oFF.QVizLabelStyle.prototype.getRotationRaw = function()
{
	return this.m_rotation;
};
oFF.QVizLabelStyle.prototype.getShowLabel = function()
{
	return this.m_showLabel.resolveBoolean(this.getChartDefinition());
};
oFF.QVizLabelStyle.prototype.getShowLabelExt = function()
{
	return this.m_showLabel.resolveTriStateBoolean(this.getChartDefinition());
};
oFF.QVizLabelStyle.prototype.getShowLabelRaw = function()
{
	return this.m_showLabel;
};
oFF.QVizLabelStyle.prototype.getVerticalAlignment = function()
{
	return this.m_verticalAlignment.getResolvedValue(this.getChartDefinition());
};
oFF.QVizLabelStyle.prototype.getVerticalAlignmentRaw = function()
{
	return this.m_verticalAlignment;
};
oFF.QVizLabelStyle.prototype.mergeWithDefaults = function(variableHolderWithFallback, vizLabelStyle)
{
	this.m_fontBold.acquireOtherValueIfNeeded(variableHolderWithFallback, vizLabelStyle.getFontBoldRaw());
	this.m_fontItalic.acquireOtherValueIfNeeded(variableHolderWithFallback, vizLabelStyle.getFontItalicRaw());
	this.m_fontStrikeThrough.acquireOtherValueIfNeeded(variableHolderWithFallback, vizLabelStyle.getFontStrikeThroughRaw());
	this.m_fontUnderline.acquireOtherValueIfNeeded(variableHolderWithFallback, vizLabelStyle.getFontUnderlineRaw());
	this.m_showLabel.acquireOtherValueIfNeeded(variableHolderWithFallback, vizLabelStyle.getShowLabelRaw());
	this.m_autoResize.acquireOtherValueIfNeeded(variableHolderWithFallback, vizLabelStyle.getAutoResizeRaw());
	this.m_avoidOverlap.acquireOtherValueIfNeeded(variableHolderWithFallback, vizLabelStyle.getAvoidOverlapRaw());
	this.m_formatString.acquireOtherValueIfNeeded(variableHolderWithFallback, vizLabelStyle.getFormatStringRaw());
	this.m_backgroundColor.acquireOtherValueIfNeeded(variableHolderWithFallback, vizLabelStyle.getBackgroundColorRaw());
	this.m_fontColor.acquireOtherValueIfNeeded(variableHolderWithFallback, vizLabelStyle.getFontColorRaw());
	this.m_fontFamily.acquireOtherValueIfNeeded(variableHolderWithFallback, vizLabelStyle.getFontFamilyRaw());
	this.m_rotation.acquireOtherValueIfNeeded(variableHolderWithFallback, vizLabelStyle.getRotationRaw());
	this.m_fontSize.acquireOtherValueIfNeeded(variableHolderWithFallback, vizLabelStyle.getFontSizeRaw());
	this.m_verticalAlignment.acquireOtherValueIfNeeded(variableHolderWithFallback, vizLabelStyle.getVerticalAlignmentRaw());
	this.m_horizontalAlignment.acquireOtherValueIfNeeded(variableHolderWithFallback, vizLabelStyle.getHorizontalAlignmentRaw());
};
oFF.QVizLabelStyle.prototype.releaseObject = function()
{
	this.m_fontBold = oFF.XObjectExt.release(this.m_fontBold);
	this.m_fontItalic = oFF.XObjectExt.release(this.m_fontItalic);
	this.m_fontUnderline = oFF.XObjectExt.release(this.m_fontUnderline);
	this.m_fontStrikeThrough = oFF.XObjectExt.release(this.m_fontStrikeThrough);
	this.m_fontSize = oFF.XObjectExt.release(this.m_fontSize);
	this.m_fontColor = oFF.XObjectExt.release(this.m_fontColor);
	this.m_fontFamily = oFF.XObjectExt.release(this.m_fontFamily);
	this.m_verticalAlignment = oFF.XObjectExt.release(this.m_verticalAlignment);
	this.m_horizontalAlignment = oFF.XObjectExt.release(this.m_horizontalAlignment);
	this.m_showLabel = oFF.XObjectExt.release(this.m_showLabel);
	this.m_avoidOverlap = oFF.XObjectExt.release(this.m_avoidOverlap);
	this.m_backgroundColor = oFF.XObjectExt.release(this.m_backgroundColor);
	this.m_autoResize = oFF.XObjectExt.release(this.m_autoResize);
	this.m_formatString = oFF.XObjectExt.release(this.m_formatString);
	this.m_rotation = oFF.XObjectExt.release(this.m_rotation);
	oFF.QVizChartDefinitionContext.prototype.releaseObject.call( this );
};
oFF.QVizLabelStyle.prototype.setAutoResize = function(autoResize)
{
	this.m_autoResize.setBoolean(autoResize);
};
oFF.QVizLabelStyle.prototype.setAutoResizeExt = function(autoResize)
{
	this.m_autoResize.setTriStateBoolean(autoResize);
};
oFF.QVizLabelStyle.prototype.setAvoidOverlap = function(avoidOverlap)
{
	this.m_avoidOverlap.setBoolean(avoidOverlap);
};
oFF.QVizLabelStyle.prototype.setAvoidOverlapExt = function(avoidOverlap)
{
	this.m_avoidOverlap.setTriStateBoolean(avoidOverlap);
};
oFF.QVizLabelStyle.prototype.setBackgroundColor = function(color)
{
	this.m_backgroundColor.setString(color);
};
oFF.QVizLabelStyle.prototype.setFontBold = function(set)
{
	this.m_fontBold.setBoolean(set);
};
oFF.QVizLabelStyle.prototype.setFontBoldExt = function(set)
{
	this.m_fontBold.setTriStateBoolean(set);
};
oFF.QVizLabelStyle.prototype.setFontColor = function(color)
{
	this.m_fontColor.setString(color);
};
oFF.QVizLabelStyle.prototype.setFontFamily = function(family)
{
	this.m_fontFamily.setString(family);
};
oFF.QVizLabelStyle.prototype.setFontItalic = function(set)
{
	this.m_fontItalic.setBoolean(set);
};
oFF.QVizLabelStyle.prototype.setFontItalicExt = function(set)
{
	this.m_fontItalic.setTriStateBoolean(set);
};
oFF.QVizLabelStyle.prototype.setFontSize = function(size)
{
	this.m_fontSize.setDouble(size);
};
oFF.QVizLabelStyle.prototype.setFontStrikeThrough = function(set)
{
	this.m_fontStrikeThrough.setBoolean(set);
};
oFF.QVizLabelStyle.prototype.setFontStrikeThroughExt = function(set)
{
	this.m_fontStrikeThrough.setTriStateBoolean(set);
};
oFF.QVizLabelStyle.prototype.setFontUnderline = function(set)
{
	this.m_fontUnderline.setBoolean(set);
};
oFF.QVizLabelStyle.prototype.setFontUnderlineExt = function(set)
{
	this.m_fontUnderline.setTriStateBoolean(set);
};
oFF.QVizLabelStyle.prototype.setFormatString = function(formatString)
{
	this.m_formatString.setString(formatString);
};
oFF.QVizLabelStyle.prototype.setHorizontalAlignment = function(horizontalAlignment)
{
	this.m_horizontalAlignment.setFixedValue(horizontalAlignment);
};
oFF.QVizLabelStyle.prototype.setRotation = function(rotation)
{
	this.m_rotation.setInteger(rotation);
};
oFF.QVizLabelStyle.prototype.setShowLabel = function(showLabel)
{
	this.m_showLabel.setBoolean(showLabel);
};
oFF.QVizLabelStyle.prototype.setShowLabelExt = function(showLabel)
{
	this.m_showLabel.setTriStateBoolean(showLabel);
};
oFF.QVizLabelStyle.prototype.setVerticalAlignment = function(verticalAlignment)
{
	this.m_verticalAlignment.setFixedValue(verticalAlignment);
};
oFF.QVizLabelStyle.prototype.setup = function()
{
	oFF.QVizChartDefinitionContext.prototype.setup.call( this );
	this.m_fontBold = oFF.QStylingValueBoolean.create();
	this.m_fontItalic = oFF.QStylingValueBoolean.create();
	this.m_fontUnderline = oFF.QStylingValueBoolean.create();
	this.m_fontStrikeThrough = oFF.QStylingValueBoolean.create();
	this.m_fontSize = oFF.QStylingValueDouble.create();
	this.m_fontColor = oFF.QStylingValueString.create();
	this.m_fontFamily = oFF.QStylingValueString.create();
	this.m_verticalAlignment = oFF.QStylingValueConstant.create((cav) => {
		return oFF.CellAlignmentVertical.lookup(cav);
	});
	this.m_horizontalAlignment = oFF.QStylingValueConstant.create((cah) => {
		return oFF.CellAlignmentHorizontal.lookup(cah);
	});
	this.m_showLabel = oFF.QStylingValueBoolean.create();
	this.m_avoidOverlap = oFF.QStylingValueBoolean.create();
	this.m_backgroundColor = oFF.QStylingValueString.create();
	this.m_autoResize = oFF.QStylingValueBoolean.create();
	this.m_formatString = oFF.QStylingValueString.create();
	this.m_rotation = oFF.QStylingValueInteger.create();
};

oFF.QVizLayeredRectangularTableStyle = function() {};
oFF.QVizLayeredRectangularTableStyle.prototype = new oFF.QVizTableDefinitionContext();
oFF.QVizLayeredRectangularTableStyle.prototype._ff_c = "QVizLayeredRectangularTableStyle";

oFF.QVizLayeredRectangularTableStyle.create = function(context, parent, name, text)
{
	let instance = new oFF.QVizLayeredRectangularTableStyle();
	instance.setupModelComponent(context, parent);
	instance.setupInternal(name, text);
	return instance;
};
oFF.QVizLayeredRectangularTableStyle.prototype.m_columnsScope = null;
oFF.QVizLayeredRectangularTableStyle.prototype.m_rowsScope = null;
oFF.QVizLayeredRectangularTableStyle.prototype.m_styleName = null;
oFF.QVizLayeredRectangularTableStyle.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVizTableDefinitionContext.prototype.copyFromInternal.call( this , other, flags);
	let origin = other;
	this.m_styleName = origin.m_styleName;
	this.m_columnsScope.copyFrom(origin.m_columnsScope, flags);
	this.m_rowsScope.copyFrom(origin.m_rowsScope, flags);
};
oFF.QVizLayeredRectangularTableStyle.prototype.getColumnsScope = function()
{
	return this.m_columnsScope;
};
oFF.QVizLayeredRectangularTableStyle.prototype.getRowsScope = function()
{
	return this.m_rowsScope;
};
oFF.QVizLayeredRectangularTableStyle.prototype.getStyle = function()
{
	let parent = this.getParent();
	while (oFF.notNull(parent) && parent.getOlapComponentType() !== oFF.OlapComponentType.VISUALIZATION_TABLE_DEFINITION)
	{
		parent = parent.getParent();
	}
	if (oFF.notNull(parent))
	{
		return parent.getFormattingStyle(this.m_styleName);
	}
	return null;
};
oFF.QVizLayeredRectangularTableStyle.prototype.getStyleName = function()
{
	return this.m_styleName;
};
oFF.QVizLayeredRectangularTableStyle.prototype.releaseObject = function()
{
	this.m_styleName = null;
	this.m_rowsScope = oFF.XObjectExt.release(this.m_rowsScope);
	this.m_columnsScope = oFF.XObjectExt.release(this.m_columnsScope);
	oFF.QVizTableDefinitionContext.prototype.releaseObject.call( this );
};
oFF.QVizLayeredRectangularTableStyle.prototype.setStyle = function(style)
{
	this.m_styleName = oFF.isNull(style) ? null : style.getName();
};
oFF.QVizLayeredRectangularTableStyle.prototype.setStyleName = function(styleName)
{
	this.m_styleName = styleName;
};
oFF.QVizLayeredRectangularTableStyle.prototype.setupInternal = function(name, text)
{
	this.setName(name);
	this.setText(text);
	this.m_rowsScope = oFF.QVizCellsReferenceScope.create(this.getContext(), this);
	this.m_columnsScope = oFF.QVizCellsReferenceScope.create(this.getContext(), this);
};

oFF.QVizLegendStyle = function() {};
oFF.QVizLegendStyle.prototype = new oFF.QVizChartDefinitionContext();
oFF.QVizLegendStyle.prototype._ff_c = "QVizLegendStyle";

oFF.QVizLegendStyle.create = function(context, parent)
{
	let instance = new oFF.QVizLegendStyle();
	instance.setupModelComponent(context, parent);
	instance.setup();
	instance.m_labelStyle = oFF.QVizLabelStyle.create(context, parent);
	return instance;
};
oFF.QVizLegendStyle.prototype.m_enabled = null;
oFF.QVizLegendStyle.prototype.m_horizontalAlignment = null;
oFF.QVizLegendStyle.prototype.m_labelStyle = null;
oFF.QVizLegendStyle.prototype.m_layoutDirection = null;
oFF.QVizLegendStyle.prototype.m_legendPosition = null;
oFF.QVizLegendStyle.prototype.m_showFullLabel = null;
oFF.QVizLegendStyle.prototype.m_verticalAlignment = null;
oFF.QVizLegendStyle.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVizChartDefinitionContext.prototype.copyFromInternal.call( this , other, flags);
	let originObj = other;
	this.m_legendPosition.copyFrom(originObj.m_legendPosition, flags);
	this.m_verticalAlignment.copyFrom(originObj.m_verticalAlignment, flags);
	this.m_horizontalAlignment.copyFrom(originObj.m_horizontalAlignment, flags);
	this.m_layoutDirection.copyFrom(originObj.m_layoutDirection, flags);
	this.m_labelStyle.copyFrom(originObj.m_labelStyle, flags);
	this.m_showFullLabel.copyFrom(originObj.m_showFullLabel, flags);
	this.m_enabled.copyFrom(originObj.m_enabled, flags);
};
oFF.QVizLegendStyle.prototype.getEnabledRaw = function()
{
	return this.m_enabled;
};
oFF.QVizLegendStyle.prototype.getHorizontalAlignment = function()
{
	return this.m_horizontalAlignment.getResolvedValue(this.getChartDefinition());
};
oFF.QVizLegendStyle.prototype.getHorizontalAlignmentRaw = function()
{
	return this.m_horizontalAlignment;
};
oFF.QVizLegendStyle.prototype.getLabelStyle = function()
{
	return this.m_labelStyle;
};
oFF.QVizLegendStyle.prototype.getLayoutDirection = function()
{
	return this.m_layoutDirection.getResolvedValue(this.getChartDefinition());
};
oFF.QVizLegendStyle.prototype.getLayoutDirectionRaw = function()
{
	return this.m_layoutDirection;
};
oFF.QVizLegendStyle.prototype.getLegendPosition = function()
{
	return this.m_legendPosition.getFixedValue();
};
oFF.QVizLegendStyle.prototype.getLegendPositionRaw = function()
{
	return this.m_legendPosition;
};
oFF.QVizLegendStyle.prototype.getShowFullLabelRaw = function()
{
	return this.m_showFullLabel;
};
oFF.QVizLegendStyle.prototype.getVerticalAlignment = function()
{
	return this.m_verticalAlignment.getResolvedValue(this.getChartDefinition());
};
oFF.QVizLegendStyle.prototype.getVerticalAlignmentRaw = function()
{
	return this.m_verticalAlignment;
};
oFF.QVizLegendStyle.prototype.isEnabled = function()
{
	return this.m_enabled.resolveBoolean(this.getChartDefinition());
};
oFF.QVizLegendStyle.prototype.isEnabledExt = function()
{
	return this.m_enabled.resolveTriStateBoolean(this.getChartDefinition());
};
oFF.QVizLegendStyle.prototype.isShowFullLabel = function()
{
	return this.m_showFullLabel.resolveBoolean(this.getChartDefinition());
};
oFF.QVizLegendStyle.prototype.isShowFullLabelExt = function()
{
	return this.m_showFullLabel.resolveTriStateBoolean(this.getChartDefinition());
};
oFF.QVizLegendStyle.prototype.mergeWithDefaults = function(variableHolderWithFallback, vizLegendStyle)
{
	this.m_showFullLabel.acquireOtherValueIfNeeded(variableHolderWithFallback, vizLegendStyle.getShowFullLabelRaw());
	this.m_verticalAlignment.acquireOtherValueIfNeeded(variableHolderWithFallback, vizLegendStyle.getVerticalAlignmentRaw());
	this.m_horizontalAlignment.acquireOtherValueIfNeeded(variableHolderWithFallback, vizLegendStyle.getHorizontalAlignmentRaw());
	this.m_layoutDirection.acquireOtherValueIfNeeded(variableHolderWithFallback, vizLegendStyle.getLayoutDirectionRaw());
	this.m_legendPosition.acquireOtherValueIfNeeded(variableHolderWithFallback, vizLegendStyle.getLegendPositionRaw());
	this.m_enabled.acquireOtherValueIfNeeded(variableHolderWithFallback, vizLegendStyle.getEnabledRaw());
	this.m_labelStyle.mergeWithDefaults(variableHolderWithFallback, vizLegendStyle.getLabelStyle());
};
oFF.QVizLegendStyle.prototype.releaseObject = function()
{
	this.m_legendPosition = oFF.XObjectExt.release(this.m_legendPosition);
	this.m_verticalAlignment = oFF.XObjectExt.release(this.m_verticalAlignment);
	this.m_horizontalAlignment = oFF.XObjectExt.release(this.m_horizontalAlignment);
	this.m_layoutDirection = oFF.XObjectExt.release(this.m_layoutDirection);
	this.m_labelStyle = oFF.XObjectExt.release(this.m_labelStyle);
	this.m_showFullLabel = oFF.XObjectExt.release(this.m_showFullLabel);
	this.m_enabled = oFF.XObjectExt.release(this.m_enabled);
	oFF.QVizChartDefinitionContext.prototype.releaseObject.call( this );
};
oFF.QVizLegendStyle.prototype.setEnabled = function(enabled)
{
	this.m_enabled.setBoolean(enabled);
};
oFF.QVizLegendStyle.prototype.setEnabledExt = function(enabled)
{
	this.m_enabled.setTriStateBoolean(enabled);
};
oFF.QVizLegendStyle.prototype.setHorizontalAlignment = function(horizontalAlignment)
{
	this.m_horizontalAlignment.setFixedValue(horizontalAlignment);
};
oFF.QVizLegendStyle.prototype.setLabelStyle = function(labelStyle)
{
	this.m_labelStyle = labelStyle;
};
oFF.QVizLegendStyle.prototype.setLayoutDirection = function(layoutDirection)
{
	this.m_layoutDirection.setFixedValue(layoutDirection);
};
oFF.QVizLegendStyle.prototype.setLegendPosition = function(legendPosition)
{
	this.m_legendPosition.setFixedValue(legendPosition);
};
oFF.QVizLegendStyle.prototype.setShowFullLabel = function(showFullLabel)
{
	this.m_showFullLabel.setBoolean(showFullLabel);
};
oFF.QVizLegendStyle.prototype.setShowFullLabelExt = function(showFullLabel)
{
	this.m_showFullLabel.setTriStateBoolean(showFullLabel);
};
oFF.QVizLegendStyle.prototype.setVerticalAlignment = function(verticalAlignment)
{
	this.m_verticalAlignment.setFixedValue(verticalAlignment);
};
oFF.QVizLegendStyle.prototype.setup = function()
{
	oFF.QVizChartDefinitionContext.prototype.setup.call( this );
	this.m_verticalAlignment = oFF.QStylingValueConstant.create((cav) => {
		return oFF.CellAlignmentVertical.lookup(cav);
	});
	this.m_horizontalAlignment = oFF.QStylingValueConstant.create((cah) => {
		return oFF.CellAlignmentHorizontal.lookup(cah);
	});
	this.m_legendPosition = oFF.QStylingValueConstant.create((clp) => {
		return oFF.ChartLegendPosition.lookup(clp);
	});
	this.m_layoutDirection = oFF.QStylingValueConstant.create((ld) => {
		return oFF.LayoutDirection.lookup(ld);
	});
	this.m_showFullLabel = oFF.QStylingValueBoolean.create();
	this.m_enabled = oFF.QStylingValueBoolean.create();
};

oFF.QVizScopedTableStyle = function() {};
oFF.QVizScopedTableStyle.prototype = new oFF.QVizTableDefinitionContext();
oFF.QVizScopedTableStyle.prototype._ff_c = "QVizScopedTableStyle";

oFF.QVizScopedTableStyle.create = function(context, parent, name, text)
{
	let instance = new oFF.QVizScopedTableStyle();
	instance.setupModelComponent(context, parent);
	instance.setupInternal(name, text);
	return instance;
};
oFF.QVizScopedTableStyle.prototype.m_orthogonalColumnsScope = null;
oFF.QVizScopedTableStyle.prototype.m_orthogonalRowsScope = null;
oFF.QVizScopedTableStyle.prototype.m_styleName = null;
oFF.QVizScopedTableStyle.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVizTableDefinitionContext.prototype.copyFromInternal.call( this , other, flags);
	let origin = other;
	this.m_styleName = origin.m_styleName;
	this.m_orthogonalColumnsScope.copyFrom(origin.m_orthogonalColumnsScope, flags);
	this.m_orthogonalRowsScope.copyFrom(origin.m_orthogonalRowsScope, flags);
};
oFF.QVizScopedTableStyle.prototype.getOrthogonalColumnsScope = function()
{
	return this.m_orthogonalColumnsScope;
};
oFF.QVizScopedTableStyle.prototype.getOrthogonalRowsScope = function()
{
	return this.m_orthogonalRowsScope;
};
oFF.QVizScopedTableStyle.prototype.getStyle = function()
{
	let parent = this.getParent();
	while (oFF.notNull(parent) && parent.getOlapComponentType() !== oFF.OlapComponentType.VISUALIZATION_TABLE_DEFINITION)
	{
		parent = parent.getParent();
	}
	if (oFF.notNull(parent))
	{
		return parent.getFormattingStyle(this.m_styleName);
	}
	return null;
};
oFF.QVizScopedTableStyle.prototype.getStyleName = function()
{
	return this.m_styleName;
};
oFF.QVizScopedTableStyle.prototype.releaseObject = function()
{
	this.m_styleName = null;
	this.m_orthogonalRowsScope = oFF.XObjectExt.release(this.m_orthogonalRowsScope);
	this.m_orthogonalColumnsScope = oFF.XObjectExt.release(this.m_orthogonalColumnsScope);
	oFF.QVizTableDefinitionContext.prototype.releaseObject.call( this );
};
oFF.QVizScopedTableStyle.prototype.setStyle = function(style)
{
	this.m_styleName = oFF.isNull(style) ? null : style.getName();
};
oFF.QVizScopedTableStyle.prototype.setStyleName = function(styleName)
{
	this.m_styleName = styleName;
};
oFF.QVizScopedTableStyle.prototype.setupInternal = function(name, text)
{
	this.setName(name);
	this.setText(text);
	this.m_orthogonalRowsScope = oFF.QVizCellsReferenceScope.create(this.getContext(), this);
	this.m_orthogonalColumnsScope = oFF.QVizCellsReferenceScope.create(this.getContext(), this);
};

oFF.QVizStyledTableLine = function() {};
oFF.QVizStyledTableLine.prototype = new oFF.QVizTableDefinitionContext();
oFF.QVizStyledTableLine.prototype._ff_c = "QVizStyledTableLine";

oFF.QVizStyledTableLine.create = function(context, parent)
{
	let instance = new oFF.QVizStyledTableLine();
	instance.setupModelComponent(context, parent);
	instance.setup();
	return instance;
};
oFF.QVizStyledTableLine.prototype.m_bottomPadding = null;
oFF.QVizStyledTableLine.prototype.m_color = null;
oFF.QVizStyledTableLine.prototype.m_leftPadding = null;
oFF.QVizStyledTableLine.prototype.m_lineStyle = null;
oFF.QVizStyledTableLine.prototype.m_patternBackground = null;
oFF.QVizStyledTableLine.prototype.m_patternBorderColor = null;
oFF.QVizStyledTableLine.prototype.m_patternColor = null;
oFF.QVizStyledTableLine.prototype.m_patternType = null;
oFF.QVizStyledTableLine.prototype.m_patternWidth = null;
oFF.QVizStyledTableLine.prototype.m_rightPadding = null;
oFF.QVizStyledTableLine.prototype.m_topPadding = null;
oFF.QVizStyledTableLine.prototype.m_width = null;
oFF.QVizStyledTableLine.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVizTableDefinitionContext.prototype.copyFromInternal.call( this , other, flags);
	let originObj = other;
	this.m_width.copyFrom(originObj.m_width, flags);
	this.m_color.copyFrom(originObj.m_color, flags);
	this.m_patternBackground.copyFrom(originObj.m_patternBackground, flags);
	this.m_patternWidth.copyFrom(originObj.m_patternWidth, flags);
	this.m_patternColor.copyFrom(originObj.m_patternColor, flags);
	this.m_patternBorderColor.copyFrom(originObj.m_patternBorderColor, flags);
	this.m_patternType.copyFrom(originObj.m_patternType, flags);
	this.m_lineStyle.copyFrom(originObj.m_lineStyle, flags);
	this.m_topPadding.copyFrom(originObj.m_topPadding, flags);
	this.m_bottomPadding.copyFrom(originObj.m_bottomPadding, flags);
	this.m_leftPadding.copyFrom(originObj.m_leftPadding, flags);
	this.m_rightPadding.copyFrom(originObj.m_rightPadding, flags);
};
oFF.QVizStyledTableLine.prototype.getBottomPadding = function()
{
	return this.m_bottomPadding.resolveDoubleExt(this.getTableDefinition(), -1);
};
oFF.QVizStyledTableLine.prototype.getBottomPaddingRaw = function()
{
	return this.m_bottomPadding;
};
oFF.QVizStyledTableLine.prototype.getColor = function()
{
	return this.m_color.resolveString(this.getTableDefinition());
};
oFF.QVizStyledTableLine.prototype.getColorRaw = function()
{
	return this.m_color;
};
oFF.QVizStyledTableLine.prototype.getLeftPadding = function()
{
	return this.m_leftPadding.resolveDoubleExt(this.getTableDefinition(), -1);
};
oFF.QVizStyledTableLine.prototype.getLeftPaddingRaw = function()
{
	return this.m_leftPadding;
};
oFF.QVizStyledTableLine.prototype.getLineStyle = function()
{
	return this.m_lineStyle.getResolvedValue(this.getTableDefinition());
};
oFF.QVizStyledTableLine.prototype.getLineStyleRaw = function()
{
	return this.m_lineStyle;
};
oFF.QVizStyledTableLine.prototype.getPatternBackground = function()
{
	return this.m_patternBackground.resolveString(this.getTableDefinition());
};
oFF.QVizStyledTableLine.prototype.getPatternBackgroundRaw = function()
{
	return this.m_patternBackground;
};
oFF.QVizStyledTableLine.prototype.getPatternBorderColor = function()
{
	return this.m_patternBorderColor.resolveString(this.getTableDefinition());
};
oFF.QVizStyledTableLine.prototype.getPatternBorderColorRaw = function()
{
	return this.m_patternBorderColor;
};
oFF.QVizStyledTableLine.prototype.getPatternColor = function()
{
	return this.m_patternColor.resolveString(this.getTableDefinition());
};
oFF.QVizStyledTableLine.prototype.getPatternColorRaw = function()
{
	return this.m_patternColor;
};
oFF.QVizStyledTableLine.prototype.getPatternType = function()
{
	return this.m_patternType.getResolvedValue(this.getTableDefinition());
};
oFF.QVizStyledTableLine.prototype.getPatternTypeRaw = function()
{
	return this.m_patternType;
};
oFF.QVizStyledTableLine.prototype.getPatternWidth = function()
{
	return this.m_patternWidth.resolveDouble(this.getTableDefinition());
};
oFF.QVizStyledTableLine.prototype.getPatternWidthRaw = function()
{
	return this.m_patternWidth;
};
oFF.QVizStyledTableLine.prototype.getRightPadding = function()
{
	return this.m_rightPadding.resolveDoubleExt(this.getTableDefinition(), -1);
};
oFF.QVizStyledTableLine.prototype.getRightPaddingRaw = function()
{
	return this.m_rightPadding;
};
oFF.QVizStyledTableLine.prototype.getTopPadding = function()
{
	return this.m_topPadding.resolveDoubleExt(this.getTableDefinition(), -1);
};
oFF.QVizStyledTableLine.prototype.getTopPaddingRaw = function()
{
	return this.m_topPadding;
};
oFF.QVizStyledTableLine.prototype.getWidth = function()
{
	return this.m_width.resolveDoubleExt(this.getTableDefinition(), -1);
};
oFF.QVizStyledTableLine.prototype.getWidthRaw = function()
{
	return this.m_width;
};
oFF.QVizStyledTableLine.prototype.releaseObject = function()
{
	this.m_color = oFF.XObjectExt.release(this.m_color);
	this.m_patternBackground = oFF.XObjectExt.release(this.m_patternBackground);
	this.m_patternColor = oFF.XObjectExt.release(this.m_patternColor);
	this.m_patternBorderColor = oFF.XObjectExt.release(this.m_patternBorderColor);
	this.m_patternType = oFF.XObjectExt.release(this.m_patternType);
	this.m_lineStyle = oFF.XObjectExt.release(this.m_lineStyle);
	this.m_leftPadding = oFF.XObjectExt.release(this.m_leftPadding);
	this.m_rightPadding = oFF.XObjectExt.release(this.m_rightPadding);
	this.m_topPadding = oFF.XObjectExt.release(this.m_topPadding);
	this.m_bottomPadding = oFF.XObjectExt.release(this.m_bottomPadding);
	this.m_width = oFF.XObjectExt.release(this.m_width);
	this.m_patternWidth = oFF.XObjectExt.release(this.m_patternWidth);
	oFF.QVizTableDefinitionContext.prototype.releaseObject.call( this );
};
oFF.QVizStyledTableLine.prototype.setBottomPadding = function(padding)
{
	this.m_bottomPadding.setDouble(padding);
};
oFF.QVizStyledTableLine.prototype.setColor = function(color)
{
	this.m_color.setString(color);
};
oFF.QVizStyledTableLine.prototype.setLeftPadding = function(padding)
{
	this.m_leftPadding.setDouble(padding);
};
oFF.QVizStyledTableLine.prototype.setLineStyle = function(lineStyle)
{
	this.m_lineStyle.setFixedValue(lineStyle);
};
oFF.QVizStyledTableLine.prototype.setPatternBackground = function(background)
{
	this.m_patternBackground.setString(background);
};
oFF.QVizStyledTableLine.prototype.setPatternBorderColor = function(color)
{
	this.m_patternBorderColor.setString(color);
};
oFF.QVizStyledTableLine.prototype.setPatternColor = function(color)
{
	this.m_patternColor.setString(color);
};
oFF.QVizStyledTableLine.prototype.setPatternType = function(patternType)
{
	this.m_patternType.setFixedValue(patternType);
};
oFF.QVizStyledTableLine.prototype.setPatternWidth = function(width)
{
	this.m_patternWidth.setDouble(width);
};
oFF.QVizStyledTableLine.prototype.setRightPadding = function(padding)
{
	this.m_rightPadding.setDouble(padding);
};
oFF.QVizStyledTableLine.prototype.setTopPadding = function(padding)
{
	this.m_topPadding.setDouble(padding);
};
oFF.QVizStyledTableLine.prototype.setWidth = function(width)
{
	this.m_width.setDouble(width);
};
oFF.QVizStyledTableLine.prototype.setup = function()
{
	oFF.QVizTableDefinitionContext.prototype.setup.call( this );
	this.m_color = oFF.QStylingValueString.create();
	this.m_patternBackground = oFF.QStylingValueString.create();
	this.m_patternColor = oFF.QStylingValueString.create();
	this.m_patternBorderColor = oFF.QStylingValueString.create();
	this.m_patternType = oFF.QStylingValueConstant.create((bpt) => {
		return oFF.BackgroundPatternType.lookup(bpt);
	});
	this.m_lineStyle = oFF.QStylingValueConstant.create((tls) => {
		return oFF.TableLineStyle.lookup(tls);
	});
	this.m_leftPadding = oFF.QStylingValueDouble.create();
	this.m_rightPadding = oFF.QStylingValueDouble.create();
	this.m_topPadding = oFF.QStylingValueDouble.create();
	this.m_bottomPadding = oFF.QStylingValueDouble.create();
	this.m_width = oFF.QStylingValueDouble.create();
	this.m_patternWidth = oFF.QStylingValueDouble.create();
};

oFF.QVizTableMarkup = function() {};
oFF.QVizTableMarkup.prototype = new oFF.QVizTableDefinitionContext();
oFF.QVizTableMarkup.prototype._ff_c = "QVizTableMarkup";

oFF.QVizTableMarkup.create = function(context, parent, name, text)
{
	let instance = new oFF.QVizTableMarkup();
	instance.setupModelComponent(context, parent);
	instance.setName(name);
	instance.setText(text);
	instance.setup();
	return instance;
};
oFF.QVizTableMarkup.prototype.m_cellHeight = null;
oFF.QVizTableMarkup.prototype.m_cellHeightAddition = null;
oFF.QVizTableMarkup.prototype.m_cellWidth = null;
oFF.QVizTableMarkup.prototype.m_cellWidthAddition = null;
oFF.QVizTableMarkup.prototype.m_columnsScope = null;
oFF.QVizTableMarkup.prototype.m_hide = null;
oFF.QVizTableMarkup.prototype.m_pageBreakHandling = null;
oFF.QVizTableMarkup.prototype.m_priority = 0;
oFF.QVizTableMarkup.prototype.m_rowsScope = null;
oFF.QVizTableMarkup.prototype.m_scopedStyleNames = null;
oFF.QVizTableMarkup.prototype.m_tuplesAfter = null;
oFF.QVizTableMarkup.prototype.m_tuplesBefore = null;
oFF.QVizTableMarkup.prototype.addNewTupleBefore = function(name, text)
{
	let newTuple = oFF.QVizInsertedTuple.create(this.getContext(), this, name, text);
	this.m_tuplesBefore.add(newTuple);
	return newTuple;
};
oFF.QVizTableMarkup.prototype.addNewTuplesAfter = function(name, text)
{
	let newTuple = oFF.QVizInsertedTuple.create(this.getContext(), this, name, text);
	this.m_tuplesAfter.add(newTuple);
	return newTuple;
};
oFF.QVizTableMarkup.prototype.addScopedStyle = function(formattingStyle)
{
	if (oFF.notNull(formattingStyle))
	{
		this.m_scopedStyleNames.add(formattingStyle.getName());
		this.getTableDefinition().invalidateVisualizationContainer();
	}
};
oFF.QVizTableMarkup.prototype.addScopedStyleName = function(formattingStyleName)
{
	this.m_scopedStyleNames.add(formattingStyleName);
	this.getTableDefinition().invalidateVisualizationContainer();
};
oFF.QVizTableMarkup.prototype.clearScopedStyles = function()
{
	if (this.m_scopedStyleNames.size() > 0)
	{
		this.m_scopedStyleNames.clear();
		this.getTableDefinition().invalidateVisualizationContainer();
	}
};
oFF.QVizTableMarkup.prototype.clearTuplesAfter = function()
{
	if (this.m_tuplesAfter.size() > 0)
	{
		this.m_tuplesAfter.clear();
		this.getTableDefinition().invalidateVisualizationContainer();
	}
};
oFF.QVizTableMarkup.prototype.clearTuplesBefore = function()
{
	if (this.m_tuplesBefore.size() > 0)
	{
		this.m_tuplesBefore.clear();
		this.getTableDefinition().invalidateVisualizationContainer();
	}
};
oFF.QVizTableMarkup.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVizTableDefinitionContext.prototype.copyFromInternal.call( this , other, flags);
	let otherObj = other;
	this.m_columnsScope.copyFrom(otherObj.getColumnsScope(), flags);
	this.m_rowsScope.copyFrom(otherObj.getRowsScope(), flags);
	let iterator = otherObj.getTuplesBefore().getIterator();
	let tuple;
	while (iterator.hasNext())
	{
		tuple = iterator.next();
		this.addNewTupleBefore(tuple.getName(), tuple.getText()).copyFrom(tuple, flags);
	}
	iterator = otherObj.getTuplesAfter().getIterator();
	while (iterator.hasNext())
	{
		tuple = iterator.next();
		this.addNewTuplesAfter(tuple.getName(), tuple.getText()).copyFrom(tuple, flags);
	}
	this.m_scopedStyleNames.clear();
	this.m_scopedStyleNames.addAll(otherObj.getScopedStyleNames());
	this.m_pageBreakHandling.copyFrom(otherObj.getPageBreakHandling(), flags);
	this.m_cellHeight.copyFrom(otherObj.m_cellHeight, flags);
	this.m_cellWidth.copyFrom(otherObj.m_cellWidth, flags);
	this.m_cellHeightAddition.copyFrom(otherObj.m_cellHeightAddition, flags);
	this.m_cellWidthAddition.copyFrom(otherObj.m_cellWidthAddition, flags);
	this.m_priority = otherObj.getPriority();
	this.m_hide.copyFrom(otherObj.m_hide, flags);
};
oFF.QVizTableMarkup.prototype.getCellHeight = function()
{
	return this.m_cellHeight.resolveIntegerExt(this.getTableDefinition(), -1);
};
oFF.QVizTableMarkup.prototype.getCellHeightAddition = function()
{
	return this.m_cellHeightAddition.resolveInteger(this.getTableDefinition());
};
oFF.QVizTableMarkup.prototype.getCellHeightAdditionRaw = function()
{
	return this.m_cellHeightAddition;
};
oFF.QVizTableMarkup.prototype.getCellHeightRaw = function()
{
	return this.m_cellHeight;
};
oFF.QVizTableMarkup.prototype.getCellWidth = function()
{
	return this.m_cellWidth.resolveIntegerExt(this.getTableDefinition(), -1);
};
oFF.QVizTableMarkup.prototype.getCellWidthAddition = function()
{
	return this.m_cellWidthAddition.resolveInteger(this.getTableDefinition());
};
oFF.QVizTableMarkup.prototype.getCellWidthAdditionRaw = function()
{
	return this.m_cellWidthAddition;
};
oFF.QVizTableMarkup.prototype.getCellWidthRaw = function()
{
	return this.m_cellWidth;
};
oFF.QVizTableMarkup.prototype.getColumnsScope = function()
{
	return this.m_columnsScope;
};
oFF.QVizTableMarkup.prototype.getHideRaw = function()
{
	return this.m_hide;
};
oFF.QVizTableMarkup.prototype.getPageBreakHandling = function()
{
	return this.m_pageBreakHandling;
};
oFF.QVizTableMarkup.prototype.getPriority = function()
{
	return this.m_priority;
};
oFF.QVizTableMarkup.prototype.getRowsScope = function()
{
	return this.m_rowsScope;
};
oFF.QVizTableMarkup.prototype.getScopedStyleNames = function()
{
	return this.m_scopedStyleNames;
};
oFF.QVizTableMarkup.prototype.getTuplesAfter = function()
{
	return this.m_tuplesAfter;
};
oFF.QVizTableMarkup.prototype.getTuplesBefore = function()
{
	return this.m_tuplesBefore;
};
oFF.QVizTableMarkup.prototype.isHide = function()
{
	return this.m_hide.resolveBoolean(this.getTableDefinition());
};
oFF.QVizTableMarkup.prototype.releaseObject = function()
{
	this.m_columnsScope = oFF.XObjectExt.release(this.m_columnsScope);
	this.m_rowsScope = oFF.XObjectExt.release(this.m_rowsScope);
	this.m_tuplesBefore = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_tuplesBefore);
	this.m_tuplesAfter = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_tuplesAfter);
	this.m_scopedStyleNames = oFF.XObjectExt.release(this.m_scopedStyleNames);
	this.m_pageBreakHandling = oFF.XObjectExt.release(this.m_pageBreakHandling);
	this.m_cellHeight = oFF.XObjectExt.release(this.m_cellHeight);
	this.m_cellWidth = oFF.XObjectExt.release(this.m_cellWidth);
	this.m_cellHeightAddition = oFF.XObjectExt.release(this.m_cellHeightAddition);
	this.m_cellWidthAddition = oFF.XObjectExt.release(this.m_cellWidthAddition);
	this.m_hide = oFF.XObjectExt.release(this.m_hide);
	oFF.QVizTableDefinitionContext.prototype.releaseObject.call( this );
};
oFF.QVizTableMarkup.prototype.setCellHeight = function(cellHeight)
{
	this.m_cellHeight.setInteger(cellHeight);
};
oFF.QVizTableMarkup.prototype.setCellHeightAddition = function(cellHeightAddition)
{
	this.m_cellHeightAddition.setInteger(cellHeightAddition);
};
oFF.QVizTableMarkup.prototype.setCellWidth = function(cellWidth)
{
	this.m_cellWidth.setInteger(cellWidth);
};
oFF.QVizTableMarkup.prototype.setCellWidthAddition = function(cellWidthAddition)
{
	this.m_cellWidthAddition.setInteger(cellWidthAddition);
};
oFF.QVizTableMarkup.prototype.setHide = function(hide)
{
	this.m_hide.setBoolean(hide);
};
oFF.QVizTableMarkup.prototype.setPriority = function(priority)
{
	this.m_priority = priority;
};
oFF.QVizTableMarkup.prototype.setup = function()
{
	oFF.QVizTableDefinitionContext.prototype.setup.call( this );
	this.m_cellHeight = oFF.QStylingValueInteger.create();
	this.m_cellWidth = oFF.QStylingValueInteger.create();
	this.m_cellHeightAddition = oFF.QStylingValueInteger.create();
	this.m_cellWidthAddition = oFF.QStylingValueInteger.create();
	this.m_hide = oFF.QStylingValueBoolean.create();
	this.m_rowsScope = oFF.QVizCellsReferenceScope.create(this.getContext(), this);
	this.m_columnsScope = oFF.QVizCellsReferenceScope.create(this.getContext(), this);
	this.m_tuplesBefore = oFF.XListOfNameObject.create();
	this.m_tuplesAfter = oFF.XListOfNameObject.create();
	this.m_scopedStyleNames = oFF.XList.create();
	this.m_pageBreakHandling = oFF.QTablePageBreakHandling.create();
};

oFF.QVizTableStyle = function() {};
oFF.QVizTableStyle.prototype = new oFF.QVizTableDefinitionContext();
oFF.QVizTableStyle.prototype._ff_c = "QVizTableStyle";

oFF.QVizTableStyle.create = function(context, parent, name, text)
{
	let instance = new oFF.QVizTableStyle();
	instance.setupModelComponent(context, parent);
	instance.setName(name);
	instance.setText(text);
	instance.setupStyles(context);
	return instance;
};
oFF.QVizTableStyle.prototype.m_active = null;
oFF.QVizTableStyle.prototype.m_alertColor = null;
oFF.QVizTableStyle.prototype.m_alertSymbol = null;
oFF.QVizTableStyle.prototype.m_backgroundContent = null;
oFF.QVizTableStyle.prototype.m_backgroundPatternType = null;
oFF.QVizTableStyle.prototype.m_bottomLineStyle = null;
oFF.QVizTableStyle.prototype.m_cellChartBarColor = null;
oFF.QVizTableStyle.prototype.m_cellChartLineColor = null;
oFF.QVizTableStyle.prototype.m_cellTypeRestrictions = null;
oFF.QVizTableStyle.prototype.m_fillAlpha = null;
oFF.QVizTableStyle.prototype.m_fillColor = null;
oFF.QVizTableStyle.prototype.m_fontBold = null;
oFF.QVizTableStyle.prototype.m_fontColor = null;
oFF.QVizTableStyle.prototype.m_fontFamily = null;
oFF.QVizTableStyle.prototype.m_fontItalic = null;
oFF.QVizTableStyle.prototype.m_fontSize = null;
oFF.QVizTableStyle.prototype.m_fontStrikeThrough = null;
oFF.QVizTableStyle.prototype.m_fontUnderline = null;
oFF.QVizTableStyle.prototype.m_horizontalAlignment = null;
oFF.QVizTableStyle.prototype.m_leftLineStyle = null;
oFF.QVizTableStyle.prototype.m_overridePlaceholderForFormattedText = null;
oFF.QVizTableStyle.prototype.m_overrideText = null;
oFF.QVizTableStyle.prototype.m_priority = 0;
oFF.QVizTableStyle.prototype.m_rightLineStyle = null;
oFF.QVizTableStyle.prototype.m_showFormattedText = null;
oFF.QVizTableStyle.prototype.m_topLineStyle = null;
oFF.QVizTableStyle.prototype.m_verticalAlignment = null;
oFF.QVizTableStyle.prototype.m_wrap = null;
oFF.QVizTableStyle.prototype.addNewCellTypeRestriction = function()
{
	let cellTypeRestriction = oFF.QVizCellTypeRestriction.create();
	this.m_cellTypeRestrictions.add(cellTypeRestriction);
	return cellTypeRestriction;
};
oFF.QVizTableStyle.prototype.clearCellTypeRestrictions = function()
{
	this.m_cellTypeRestrictions.clear();
};
oFF.QVizTableStyle.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVizTableDefinitionContext.prototype.copyFromInternal.call( this , other, flags);
	let originObj = other;
	this.m_active.copyFrom(originObj.m_active, flags);
	this.m_topLineStyle.copyFrom(originObj.m_topLineStyle, flags);
	this.m_bottomLineStyle.copyFrom(originObj.m_bottomLineStyle, flags);
	this.m_leftLineStyle.copyFrom(originObj.m_leftLineStyle, flags);
	this.m_rightLineStyle.copyFrom(originObj.m_rightLineStyle, flags);
	this.m_backgroundContent.copyFrom(originObj.m_backgroundContent, flags);
	this.m_backgroundPatternType.copyFrom(originObj.m_backgroundPatternType, flags);
	this.m_fillColor.copyFrom(originObj.m_fillColor, flags);
	this.m_fillAlpha.copyFrom(originObj.m_fillAlpha, flags);
	this.m_fontBold.copyFrom(originObj.m_fontBold, flags);
	this.m_fontItalic.copyFrom(originObj.m_fontItalic, flags);
	this.m_fontUnderline.copyFrom(originObj.m_fontUnderline, flags);
	this.m_fontStrikeThrough.copyFrom(originObj.m_fontStrikeThrough, flags);
	this.m_fontSize.copyFrom(originObj.m_fontSize, flags);
	this.m_fontColor.copyFrom(originObj.m_fontColor, flags);
	this.m_fontFamily.copyFrom(originObj.m_fontFamily, flags);
	this.m_cellChartLineColor.copyFrom(originObj.m_cellChartLineColor, flags);
	this.m_cellChartBarColor.copyFrom(originObj.m_cellChartBarColor, flags);
	this.m_alertSymbol.copyFrom(originObj.m_alertSymbol, flags);
	this.m_alertColor.copyFrom(originObj.m_alertColor, flags);
	this.m_showFormattedText.copyFrom(originObj.m_showFormattedText, flags);
	this.m_overrideText.copyFrom(originObj.m_overrideText, flags);
	this.m_overridePlaceholderForFormattedText.copyFrom(originObj.m_overridePlaceholderForFormattedText, flags);
	this.m_verticalAlignment.copyFrom(originObj.m_verticalAlignment, flags);
	this.m_horizontalAlignment.copyFrom(originObj.m_horizontalAlignment, flags);
	this.m_wrap.copyFrom(originObj.m_wrap, flags);
	this.m_priority = originObj.m_priority;
	this.m_cellTypeRestrictions.clear();
	oFF.XCollectionUtils.forEach(originObj.getCellTypeRestrictions(), (octr) => {
		this.addNewCellTypeRestriction().copyFrom(octr, flags);
	});
};
oFF.QVizTableStyle.prototype.getActiveRaw = function()
{
	return this.m_active;
};
oFF.QVizTableStyle.prototype.getAlertColor = function()
{
	return this.m_alertColor.resolveString(this.getTableDefinition());
};
oFF.QVizTableStyle.prototype.getAlertColorRaw = function()
{
	return this.m_alertColor;
};
oFF.QVizTableStyle.prototype.getAlertSymbol = function()
{
	return this.m_alertSymbol.getResolvedValue(this.getTableDefinition());
};
oFF.QVizTableStyle.prototype.getAlertSymbolRaw = function()
{
	return this.m_alertSymbol;
};
oFF.QVizTableStyle.prototype.getBackgroundContent = function()
{
	return this.m_backgroundContent.resolveString(this.getTableDefinition());
};
oFF.QVizTableStyle.prototype.getBackgroundContentRaw = function()
{
	return this.m_backgroundContent;
};
oFF.QVizTableStyle.prototype.getBackgroundPatternType = function()
{
	return this.m_backgroundPatternType.getResolvedValue(this.getTableDefinition());
};
oFF.QVizTableStyle.prototype.getBackgroundPatternTypeRaw = function()
{
	return this.m_backgroundPatternType;
};
oFF.QVizTableStyle.prototype.getCellChartBarColor = function()
{
	return this.m_cellChartBarColor.resolveString(this.getTableDefinition());
};
oFF.QVizTableStyle.prototype.getCellChartBarColorRaw = function()
{
	return this.m_cellChartBarColor;
};
oFF.QVizTableStyle.prototype.getCellChartLineColor = function()
{
	return this.m_cellChartLineColor.resolveString(this.getTableDefinition());
};
oFF.QVizTableStyle.prototype.getCellChartLineColorRaw = function()
{
	return this.m_cellChartLineColor;
};
oFF.QVizTableStyle.prototype.getCellTypeRestrictions = function()
{
	return this.m_cellTypeRestrictions;
};
oFF.QVizTableStyle.prototype.getFillAlpha = function()
{
	return this.m_fillAlpha.resolveDouble(this.getTableDefinition());
};
oFF.QVizTableStyle.prototype.getFillAlphaRaw = function()
{
	return this.m_fillAlpha;
};
oFF.QVizTableStyle.prototype.getFillColor = function()
{
	return this.m_fillColor.resolveString(this.getTableDefinition());
};
oFF.QVizTableStyle.prototype.getFillColorRaw = function()
{
	return this.m_fillColor;
};
oFF.QVizTableStyle.prototype.getFontBoldRaw = function()
{
	return this.m_fontBold;
};
oFF.QVizTableStyle.prototype.getFontColor = function()
{
	return this.m_fontColor.resolveString(this.getTableDefinition());
};
oFF.QVizTableStyle.prototype.getFontColorRaw = function()
{
	return this.m_fontColor;
};
oFF.QVizTableStyle.prototype.getFontFamily = function()
{
	return this.m_fontFamily.resolveString(this.getTableDefinition());
};
oFF.QVizTableStyle.prototype.getFontFamilyRaw = function()
{
	return this.m_fontFamily;
};
oFF.QVizTableStyle.prototype.getFontItalicRaw = function()
{
	return this.m_fontItalic;
};
oFF.QVizTableStyle.prototype.getFontSize = function()
{
	return this.m_fontSize.resolveDouble(this.getTableDefinition());
};
oFF.QVizTableStyle.prototype.getFontSizeRaw = function()
{
	return this.m_fontSize;
};
oFF.QVizTableStyle.prototype.getFontStrikeThroughRaw = function()
{
	return this.m_fontStrikeThrough;
};
oFF.QVizTableStyle.prototype.getFontUnderlineRaw = function()
{
	return this.m_fontUnderline;
};
oFF.QVizTableStyle.prototype.getHorizontalAlignment = function()
{
	return this.m_horizontalAlignment.getResolvedValue(this.getTableDefinition());
};
oFF.QVizTableStyle.prototype.getHorizontalAlignmentRaw = function()
{
	return this.m_horizontalAlignment;
};
oFF.QVizTableStyle.prototype.getOverridePlaceholderForFormattedText = function()
{
	return this.m_overridePlaceholderForFormattedText.resolveString(this.getTableDefinition());
};
oFF.QVizTableStyle.prototype.getOverridePlaceholderForFormattedTextRaw = function()
{
	return this.m_overridePlaceholderForFormattedText;
};
oFF.QVizTableStyle.prototype.getOverrideText = function()
{
	return this.m_overrideText.resolveString(this.getTableDefinition());
};
oFF.QVizTableStyle.prototype.getOverrideTextRaw = function()
{
	return this.m_overrideText;
};
oFF.QVizTableStyle.prototype.getPriority = function()
{
	return this.m_priority;
};
oFF.QVizTableStyle.prototype.getShowFormattedTextRaw = function()
{
	return this.m_showFormattedText;
};
oFF.QVizTableStyle.prototype.getStyledLineBottom = function()
{
	return this.m_bottomLineStyle;
};
oFF.QVizTableStyle.prototype.getStyledLineLeft = function()
{
	return this.m_leftLineStyle;
};
oFF.QVizTableStyle.prototype.getStyledLineRight = function()
{
	return this.m_rightLineStyle;
};
oFF.QVizTableStyle.prototype.getStyledLineTop = function()
{
	return this.m_topLineStyle;
};
oFF.QVizTableStyle.prototype.getVerticalAlignment = function()
{
	return this.m_verticalAlignment.getResolvedValue(this.getTableDefinition());
};
oFF.QVizTableStyle.prototype.getVerticalAlignmentRaw = function()
{
	return this.m_verticalAlignment;
};
oFF.QVizTableStyle.prototype.getWrapRaw = function()
{
	return this.m_wrap;
};
oFF.QVizTableStyle.prototype.isFontBold = function()
{
	return this.m_fontBold.resolveBoolean(this.getTableDefinition());
};
oFF.QVizTableStyle.prototype.isFontBoldExt = function()
{
	return this.m_fontBold.resolveTriStateBoolean(this.getTableDefinition());
};
oFF.QVizTableStyle.prototype.isFontItalic = function()
{
	return this.m_fontItalic.resolveBoolean(this.getTableDefinition());
};
oFF.QVizTableStyle.prototype.isFontItalicExt = function()
{
	return this.m_fontItalic.resolveTriStateBoolean(this.getTableDefinition());
};
oFF.QVizTableStyle.prototype.isFontStrikeThrough = function()
{
	return this.m_fontStrikeThrough.resolveBoolean(this.getTableDefinition());
};
oFF.QVizTableStyle.prototype.isFontStrikeThroughExt = function()
{
	return this.m_fontStrikeThrough.resolveTriStateBoolean(this.getTableDefinition());
};
oFF.QVizTableStyle.prototype.isFontUnderline = function()
{
	return this.m_fontUnderline.resolveBoolean(this.getTableDefinition());
};
oFF.QVizTableStyle.prototype.isFontUnderlineExt = function()
{
	return this.m_fontUnderline.resolveTriStateBoolean(this.getTableDefinition());
};
oFF.QVizTableStyle.prototype.isShowFormattedText = function()
{
	return this.m_showFormattedText.resolveTriStateBoolean(this.getTableDefinition());
};
oFF.QVizTableStyle.prototype.isWrap = function()
{
	return this.m_wrap.resolveBoolean(this.getTableDefinition());
};
oFF.QVizTableStyle.prototype.releaseObject = function()
{
	this.m_active = oFF.XObjectExt.release(this.m_active);
	this.m_fontBold = oFF.XObjectExt.release(this.m_fontBold);
	this.m_fontItalic = oFF.XObjectExt.release(this.m_fontItalic);
	this.m_fontUnderline = oFF.XObjectExt.release(this.m_fontUnderline);
	this.m_fontStrikeThrough = oFF.XObjectExt.release(this.m_fontStrikeThrough);
	this.m_fontSize = oFF.XObjectExt.release(this.m_fontSize);
	this.m_fontColor = oFF.XObjectExt.release(this.m_fontColor);
	this.m_fontFamily = oFF.XObjectExt.release(this.m_fontFamily);
	this.m_verticalAlignment = oFF.XObjectExt.release(this.m_verticalAlignment);
	this.m_horizontalAlignment = oFF.XObjectExt.release(this.m_horizontalAlignment);
	this.m_fillColor = oFF.XObjectExt.release(this.m_fillColor);
	this.m_fillAlpha = oFF.XObjectExt.release(this.m_fillAlpha);
	this.m_backgroundContent = oFF.XObjectExt.release(this.m_backgroundContent);
	this.m_backgroundPatternType = oFF.XObjectExt.release(this.m_backgroundPatternType);
	this.m_cellChartBarColor = oFF.XObjectExt.release(this.m_cellChartBarColor);
	this.m_cellChartLineColor = oFF.XObjectExt.release(this.m_cellChartLineColor);
	this.m_alertColor = oFF.XObjectExt.release(this.m_alertColor);
	this.m_alertSymbol = oFF.XObjectExt.release(this.m_alertSymbol);
	this.m_showFormattedText = oFF.XObjectExt.release(this.m_showFormattedText);
	this.m_overridePlaceholderForFormattedText = oFF.XObjectExt.release(this.m_overridePlaceholderForFormattedText);
	this.m_overrideText = oFF.XObjectExt.release(this.m_overrideText);
	this.m_leftLineStyle = oFF.XObjectExt.release(this.m_leftLineStyle);
	this.m_rightLineStyle = oFF.XObjectExt.release(this.m_rightLineStyle);
	this.m_topLineStyle = oFF.XObjectExt.release(this.m_topLineStyle);
	this.m_bottomLineStyle = oFF.XObjectExt.release(this.m_bottomLineStyle);
	this.m_wrap = oFF.XObjectExt.release(this.m_wrap);
	this.m_cellTypeRestrictions = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_cellTypeRestrictions);
	this.m_priority = 0;
	oFF.QVizTableDefinitionContext.prototype.releaseObject.call( this );
};
oFF.QVizTableStyle.prototype.setAlertColor = function(alertColor)
{
	this.m_alertColor.setString(alertColor);
};
oFF.QVizTableStyle.prototype.setAlertSymbol = function(alertSymbol)
{
	this.m_alertSymbol.setFixedValue(alertSymbol);
};
oFF.QVizTableStyle.prototype.setBackgroundContent = function(backgroundContent)
{
	this.m_backgroundContent.setString(backgroundContent);
};
oFF.QVizTableStyle.prototype.setBackgroundPatternType = function(backgroundPatternType)
{
	this.m_backgroundPatternType.setFixedValue(backgroundPatternType);
};
oFF.QVizTableStyle.prototype.setCellChartBarColor = function(cellChartBarColor)
{
	this.m_cellChartBarColor.setString(cellChartBarColor);
};
oFF.QVizTableStyle.prototype.setCellChartLineColor = function(cellChartLineColor)
{
	this.m_cellChartLineColor.setString(cellChartLineColor);
};
oFF.QVizTableStyle.prototype.setFillAlpha = function(fillAlpha)
{
	this.m_fillAlpha.setDouble(fillAlpha);
};
oFF.QVizTableStyle.prototype.setFillColor = function(color)
{
	this.m_fillColor.setString(color);
};
oFF.QVizTableStyle.prototype.setFontBold = function(set)
{
	this.m_fontBold.setBoolean(set);
};
oFF.QVizTableStyle.prototype.setFontBoldExt = function(set)
{
	this.m_fontBold.setTriStateBoolean(set);
};
oFF.QVizTableStyle.prototype.setFontColor = function(color)
{
	this.m_fontColor.setString(color);
};
oFF.QVizTableStyle.prototype.setFontFamily = function(family)
{
	this.m_fontFamily.setString(family);
};
oFF.QVizTableStyle.prototype.setFontItalic = function(set)
{
	this.m_fontItalic.setBoolean(set);
};
oFF.QVizTableStyle.prototype.setFontItalicExt = function(set)
{
	this.m_fontItalic.setTriStateBoolean(set);
};
oFF.QVizTableStyle.prototype.setFontSize = function(size)
{
	this.m_fontSize.setDouble(size);
};
oFF.QVizTableStyle.prototype.setFontStrikeThrough = function(set)
{
	this.m_fontStrikeThrough.setBoolean(set);
};
oFF.QVizTableStyle.prototype.setFontStrikeThroughExt = function(set)
{
	this.m_fontStrikeThrough.setTriStateBoolean(set);
};
oFF.QVizTableStyle.prototype.setFontUnderline = function(set)
{
	this.m_fontUnderline.setBoolean(set);
};
oFF.QVizTableStyle.prototype.setFontUnderlineExt = function(set)
{
	this.m_fontUnderline.setTriStateBoolean(set);
};
oFF.QVizTableStyle.prototype.setHorizontalAlignment = function(horizontalAlignment)
{
	this.m_horizontalAlignment.setFixedValue(horizontalAlignment);
};
oFF.QVizTableStyle.prototype.setOverridePlaceholderForFormattedText = function(overridePlaceholderForFormattedText)
{
	this.m_overridePlaceholderForFormattedText.setString(overridePlaceholderForFormattedText);
};
oFF.QVizTableStyle.prototype.setOverrideText = function(overrideText)
{
	this.m_overrideText.setString(overrideText);
};
oFF.QVizTableStyle.prototype.setPriority = function(priority)
{
	this.m_priority = priority;
};
oFF.QVizTableStyle.prototype.setShowFormattedText = function(showFormattedText)
{
	this.m_showFormattedText.setTriStateBoolean(showFormattedText);
};
oFF.QVizTableStyle.prototype.setStyledLineBottom = function(styledLine)
{
	this.m_bottomLineStyle = styledLine;
};
oFF.QVizTableStyle.prototype.setStyledLineLeft = function(styledLine)
{
	this.m_leftLineStyle = styledLine;
};
oFF.QVizTableStyle.prototype.setStyledLineRight = function(styledLine)
{
	this.m_rightLineStyle = styledLine;
};
oFF.QVizTableStyle.prototype.setStyledLineTop = function(styledLine)
{
	this.m_topLineStyle = styledLine;
};
oFF.QVizTableStyle.prototype.setVerticalAlignment = function(verticalAlignment)
{
	this.m_verticalAlignment.setFixedValue(verticalAlignment);
};
oFF.QVizTableStyle.prototype.setWrap = function(wrap)
{
	this.m_wrap.setBoolean(wrap);
};
oFF.QVizTableStyle.prototype.setupStyles = function(context)
{
	this.m_active = oFF.QStylingValueBoolean.create();
	this.m_fontBold = oFF.QStylingValueBoolean.create();
	this.m_fontItalic = oFF.QStylingValueBoolean.create();
	this.m_fontUnderline = oFF.QStylingValueBoolean.create();
	this.m_fontStrikeThrough = oFF.QStylingValueBoolean.create();
	this.m_fontSize = oFF.QStylingValueDouble.create();
	this.m_fontColor = oFF.QStylingValueString.create();
	this.m_fontFamily = oFF.QStylingValueString.create();
	this.m_verticalAlignment = oFF.QStylingValueConstant.create((cav) => {
		return oFF.CellAlignmentVertical.lookup(cav);
	});
	this.m_horizontalAlignment = oFF.QStylingValueConstant.create((cah) => {
		return oFF.CellAlignmentHorizontal.lookup(cah);
	});
	this.m_fillColor = oFF.QStylingValueString.create();
	this.m_fillAlpha = oFF.QStylingValueDouble.create();
	this.m_backgroundContent = oFF.QStylingValueString.create();
	this.m_backgroundPatternType = oFF.QStylingValueConstant.create((bpt) => {
		return oFF.BackgroundPatternType.lookup(bpt);
	});
	this.m_cellChartBarColor = oFF.QStylingValueString.create();
	this.m_cellChartLineColor = oFF.QStylingValueString.create();
	this.m_alertColor = oFF.QStylingValueString.create();
	this.m_alertSymbol = oFF.QStylingValueConstant.create((as) => {
		return oFF.AlertSymbol.lookup(as);
	});
	this.m_showFormattedText = oFF.QStylingValueBoolean.create();
	this.m_overridePlaceholderForFormattedText = oFF.QStylingValueString.create();
	this.m_overrideText = oFF.QStylingValueString.create();
	this.m_leftLineStyle = oFF.QVizStyledTableLine.create(context, this);
	this.m_rightLineStyle = oFF.QVizStyledTableLine.create(context, this);
	this.m_topLineStyle = oFF.QVizStyledTableLine.create(context, this);
	this.m_bottomLineStyle = oFF.QVizStyledTableLine.create(context, this);
	this.m_wrap = oFF.QStylingValueBoolean.create();
	this.m_cellTypeRestrictions = oFF.XList.create();
};

oFF.QStylingValueBoolean = function() {};
oFF.QStylingValueBoolean.prototype = new oFF.QStylingValue();
oFF.QStylingValueBoolean.prototype._ff_c = "QStylingValueBoolean";

oFF.QStylingValueBoolean.create = function()
{
	let instance = new oFF.QStylingValueBoolean();
	return instance;
};
oFF.QStylingValueBoolean.prototype.getBoolean = function()
{
	return oFF.XValueUtil.getBoolean(this.getFixedValue(), false, true);
};
oFF.QStylingValueBoolean.prototype.resolveBoolean = function(variableMerger)
{
	return oFF.XValueUtil.getBoolean(this.getResolvedValue(variableMerger), false, true);
};
oFF.QStylingValueBoolean.prototype.resolveBooleanExt = function(variableMerger, defaultValue)
{
	return this.resolveBooleanExtended(null, variableMerger, defaultValue);
};
oFF.QStylingValueBoolean.prototype.resolveBooleanExtended = function(variableContainers, variableMerger, defaultValue)
{
	let resolvedValue = this.getResolvedValueExtended(variableContainers, variableMerger);
	return oFF.isNull(resolvedValue) ? defaultValue : oFF.XValueUtil.getBoolean(resolvedValue, false, true);
};
oFF.QStylingValueBoolean.prototype.resolveTriStateBoolean = function(variableMerger)
{
	return this.resolveTriStateBooleanExtended(null, variableMerger);
};
oFF.QStylingValueBoolean.prototype.resolveTriStateBooleanExtended = function(variableContainers, variableMerger)
{
	let value = this.getResolvedValueExtended(variableContainers, variableMerger);
	return oFF.isNull(value) ? oFF.TriStateBool._DEFAULT : oFF.TriStateBool.lookup(value.getBoolean());
};
oFF.QStylingValueBoolean.prototype.setBoolean = function(value)
{
	this.setFixedValue(oFF.XBooleanValue.create(value));
};
oFF.QStylingValueBoolean.prototype.setTriStateBoolean = function(triStateBoolean)
{
	if (oFF.TriStateBool.isExplicitBooleanValue(triStateBoolean))
	{
		this.setBoolean(triStateBoolean.getBoolean());
	}
};

oFF.QStylingValueDouble = function() {};
oFF.QStylingValueDouble.prototype = new oFF.QStylingValue();
oFF.QStylingValueDouble.prototype._ff_c = "QStylingValueDouble";

oFF.QStylingValueDouble.create = function()
{
	let instance = new oFF.QStylingValueDouble();
	return instance;
};
oFF.QStylingValueDouble.prototype.getDouble = function()
{
	return oFF.XValueUtil.getDouble(this.getFixedValue(), false, true);
};
oFF.QStylingValueDouble.prototype.resolveDouble = function(variableMerger)
{
	return oFF.XValueUtil.getDouble(this.getResolvedValue(variableMerger), false, true);
};
oFF.QStylingValueDouble.prototype.resolveDoubleExt = function(variableMerger, defaultValue)
{
	let resolvedValue = this.getResolvedValue(variableMerger);
	return oFF.isNull(resolvedValue) ? defaultValue : oFF.XValueUtil.getDouble(this.getResolvedValue(variableMerger), false, true);
};
oFF.QStylingValueDouble.prototype.resolveDoubleExtended = function(variableContainers, variableMerger, defaultValue)
{
	let resolvedValue = this.getResolvedValueExtended(variableContainers, variableMerger);
	return oFF.isNull(resolvedValue) ? defaultValue : oFF.XValueUtil.getDouble(this.getResolvedValue(variableMerger), false, true);
};
oFF.QStylingValueDouble.prototype.setDouble = function(value)
{
	this.setFixedValue(oFF.XDoubleValue.create(value));
};

oFF.QStylingValueInteger = function() {};
oFF.QStylingValueInteger.prototype = new oFF.QStylingValue();
oFF.QStylingValueInteger.prototype._ff_c = "QStylingValueInteger";

oFF.QStylingValueInteger.create = function()
{
	let instance = new oFF.QStylingValueInteger();
	return instance;
};
oFF.QStylingValueInteger.prototype.getInteger = function()
{
	return oFF.XValueUtil.getInteger(this.getFixedValue(), false, true);
};
oFF.QStylingValueInteger.prototype.resolveInteger = function(variableMerger)
{
	return oFF.XValueUtil.getInteger(this.getResolvedValue(variableMerger), false, true);
};
oFF.QStylingValueInteger.prototype.resolveIntegerExt = function(variableMerger, defaultValue)
{
	let resolvedValue = this.getResolvedValue(variableMerger);
	return oFF.isNull(resolvedValue) ? defaultValue : oFF.XValueUtil.getInteger(this.getResolvedValue(variableMerger), false, true);
};
oFF.QStylingValueInteger.prototype.setInteger = function(value)
{
	this.setFixedValue(oFF.XIntegerValue.create(value));
};

oFF.QStylingValueString = function() {};
oFF.QStylingValueString.prototype = new oFF.QStylingValue();
oFF.QStylingValueString.prototype._ff_c = "QStylingValueString";

oFF.QStylingValueString.create = function()
{
	let instance = new oFF.QStylingValueString();
	return instance;
};
oFF.QStylingValueString.prototype.getString = function()
{
	return oFF.XValueUtil.getString(this.getFixedValue());
};
oFF.QStylingValueString.prototype.resolveString = function(variableMerger)
{
	return oFF.XValueUtil.getString(this.getResolvedValue(variableMerger));
};
oFF.QStylingValueString.prototype.resolveStringExtended = function(variableContainers, variableMerger)
{
	return oFF.XValueUtil.getString(this.getResolvedValueExtended(variableContainers, variableMerger));
};
oFF.QStylingValueString.prototype.setString = function(value)
{
	this.setFixedValue(oFF.XStringValue.create(value));
};

oFF.QStylingValueStringList = function() {};
oFF.QStylingValueStringList.prototype = new oFF.QStylingValueList();
oFF.QStylingValueStringList.prototype._ff_c = "QStylingValueStringList";

oFF.QStylingValueStringList.create = function()
{
	let instance = new oFF.QStylingValueStringList();
	return instance;
};
oFF.QStylingValueStringList.prototype.addString = function(value)
{
	this.addFixedValue(oFF.XStringValue.create(value));
};
oFF.QStylingValueStringList.prototype.getFixedStringList = function()
{
	return oFF.XStream.of(this.getFixedValues()).collect(oFF.XStreamCollector.toListOfString((val) => {
		return val.getStringRepresentation();
	}));
};
oFF.QStylingValueStringList.prototype.resolveStringList = function(variableMerger)
{
	return oFF.XStream.of(this.getResolvedValues(variableMerger)).collect(oFF.XStreamCollector.toListOfString((val) => {
		return val.getStringRepresentation();
	}));
};

oFF.QAttributeList = function() {};
oFF.QAttributeList.prototype = new oFF.QModelComponentList();
oFF.QAttributeList.prototype._ff_c = "QAttributeList";

oFF.QAttributeList.createAttributeList = function(parentNode, name)
{
	let list = new oFF.QAttributeList();
	list.setupOlapList(parentNode, parentNode, false, name, oFF.XCollectionFactory.LINKED_MAP, false);
	return list;
};
oFF.QAttributeList.prototype.getAttributeAt = function(index)
{
	return this.get(index);
};
oFF.QAttributeList.prototype.getAttributeByName = function(name)
{
	return this.getByKey(name);
};
oFF.QAttributeList.prototype.getEffectiveFields = function(context)
{
	let fields = oFF.XListOfNameObject.create();
	let attributeSize = this.size();
	for (let idxAttribute = 0; idxAttribute < attributeSize; idxAttribute++)
	{
		let fieldList = this.get(idxAttribute).getFieldsExt(context);
		fields.addAll(fieldList);
	}
	return fields;
};
oFF.QAttributeList.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.ATTRIBUTE_LIST;
};
oFF.QAttributeList.prototype.removeAttributeAt = function(index)
{
	this.removeAt(index);
};

oFF.QCellContextManager = function() {};
oFF.QCellContextManager.prototype = new oFF.QModelComponentList();
oFF.QCellContextManager.prototype._ff_c = "QCellContextManager";

oFF.QCellContextManager.create = function(context, queryModel)
{
	let object = new oFF.QCellContextManager();
	object.setupCellContextManager(context, queryModel);
	return object;
};
oFF.QCellContextManager.prototype.m_validateCellContexts = false;
oFF.QCellContextManager.prototype.addCellContext = function(cellContext)
{
	let success = true;
	this.addInternal(cellContext);
	return success;
};
oFF.QCellContextManager.prototype.addCellContextFromResultSetTuples = function(name, columnTuple, rowTuple)
{
	let columnPath = this.getDrillPathForAxisTuple(columnTuple);
	let rowPath = this.getDrillPathForAxisTuple(rowTuple);
	let newCellContext = oFF.QCellContext._create(this, name, this);
	newCellContext.setColumnTupleContext(columnPath);
	newCellContext.setRowTupleContext(rowPath);
	this.addCellContext(newCellContext);
	return newCellContext;
};
oFF.QCellContextManager.prototype.copyCellContextManager = function(origin)
{
	this.clear();
	oFF.QModelComponentList.prototype.copyFrom.call( this , origin, null);
	this.m_validateCellContexts = origin.m_validateCellContexts;
	let size = origin.size();
	for (let i = 0; i < size; i++)
	{
		let newCellContext = origin.get(i).cloneOlapComponent(this.getContext(), null);
		newCellContext.setParent(this);
		this.addInternal(newCellContext);
	}
};
oFF.QCellContextManager.prototype.getDrillPathForAxisTuple = function(tuple)
{
	let result = null;
	if (oFF.XCollectionUtils.hasElements(tuple))
	{
		result = tuple.getTupleElementAt(tuple.size() - 1).getDrillPath();
	}
	return result;
};
oFF.QCellContextManager.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.CELL_CONTEXT_MANAGER;
};
oFF.QCellContextManager.prototype.isValidatingCellContexts = function()
{
	return this.m_validateCellContexts;
};
oFF.QCellContextManager.prototype.releaseObject = function()
{
	this.m_validateCellContexts = false;
	oFF.QModelComponentList.prototype.releaseObject.call( this );
};
oFF.QCellContextManager.prototype.removeInvalidCellContexts = function(changedNode) {};
oFF.QCellContextManager.prototype.setValidateCellContexts = function(isValidating)
{
	this.m_validateCellContexts = isValidating;
};
oFF.QCellContextManager.prototype.setupCellContextManager = function(context, queryModel)
{
	oFF.QModelComponentList.prototype.setupOlapList.call( this , context, queryModel, false, this.getOlapComponentType().getName(), oFF.XCollectionFactory.LINKED_MAP, false);
	this.m_validateCellContexts = true;
};

oFF.QConditionManager = function() {};
oFF.QConditionManager.prototype = new oFF.QModelComponentList();
oFF.QConditionManager.prototype._ff_c = "QConditionManager";

oFF.QConditionManager.create = function(context, queryModel)
{
	let newObj = new oFF.QConditionManager();
	newObj.setupOlapList(context, queryModel, true, "ConditionManager", oFF.XCollectionFactory.LOOKUP_LIST, false);
	return newObj;
};
oFF.QConditionManager.prototype.m_effectiveConditions = null;
oFF.QConditionManager.prototype.m_externalConditions = null;
oFF.QConditionManager.prototype.m_tmpConditions = null;
oFF.QConditionManager.prototype.add = function(element)
{
	oFF.QModelComponentList.prototype.add.call( this , element);
	this.updateEffectiveConditions();
};
oFF.QConditionManager.prototype.addNewCondition = function(technicalName)
{
	let newCondition = this.createNewCondition(technicalName);
	if (oFF.notNull(newCondition))
	{
		this.add(newCondition);
	}
	return newCondition;
};
oFF.QConditionManager.prototype.addTemporaryCondition = function(tmpCondName)
{
	if (oFF.isNull(this.m_tmpConditions))
	{
		this.m_tmpConditions = oFF.XListOfNameObject.create();
	}
	if (oFF.notNull(tmpCondName) && !this.m_tmpConditions.containsKey(tmpCondName))
	{
		let newTmpCondition = oFF.QCondition.create(this.getQueryModelBase(), this, tmpCondName, false);
		if (oFF.notNull(newTmpCondition))
		{
			newTmpCondition.setParent(this);
			this.m_tmpConditions.add(newTmpCondition);
			this.updateEffectiveConditions();
			this.notifyNodeChanged();
			return newTmpCondition;
		}
	}
	return null;
};
oFF.QConditionManager.prototype.clearBackendCondtions = function()
{
	for (let i = 0; i < this.size(); )
	{
		let condition = this.get(i);
		if (condition.isBackendCondition())
		{
			this.removeElement(condition);
			continue;
		}
		i++;
	}
};
oFF.QConditionManager.prototype.clearFrontendConditions = function()
{
	for (let i = this.size() - 1; i > -1; i--)
	{
		let condition = this.get(i);
		if (!condition.isBackendCondition())
		{
			this.removeElement(condition);
		}
	}
};
oFF.QConditionManager.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponentList.prototype.copyFromInternal.call( this , other, flags);
	let originConditionManager = other;
	let size = originConditionManager.size();
	for (let i = 0; i < size; i++)
	{
		let originCondition = originConditionManager.get(i);
		let localCondition = this.getConditionByName(originCondition.getName());
		if (oFF.notNull(localCondition) && localCondition.isUserCondition())
		{
			continue;
		}
		let cloneCondition = this.addNewCondition(originCondition.getName());
		cloneCondition.copyFrom(originCondition, flags);
	}
};
oFF.QConditionManager.prototype.createNewCondition = function(technicalName)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(technicalName) && this.getConditionByName(technicalName) === null)
	{
		let newCondition = oFF.QCondition.create(this.getContext(), this, technicalName, false);
		if (oFF.notNull(newCondition))
		{
			return newCondition;
		}
	}
	return null;
};
oFF.QConditionManager.prototype.deactivateServerConditions = function()
{
	this.queueEventing();
	let size = this.size();
	for (let i = 0; i < size; i++)
	{
		let condition = this.get(i);
		if (!condition.isChangeable())
		{
			condition.setActive(false);
		}
	}
	this.resumeEventing();
};
oFF.QConditionManager.prototype.getActiveConditions = function()
{
	return this.getConditionsByState(this, true);
};
oFF.QConditionManager.prototype.getActiveTemporaryConditions = function()
{
	return this.getConditionsByState(this.m_tmpConditions, true);
};
oFF.QConditionManager.prototype.getConditionByName = function(technicalName)
{
	return oFF.XCollectionUtils.getByName(this, technicalName);
};
oFF.QConditionManager.prototype.getConditionsByState = function(conditions, active)
{
	if (oFF.notNull(conditions))
	{
		let returnedConditions = oFF.XList.create();
		let conditionsSize = conditions.size();
		for (let i = 0; i < conditionsSize; i++)
		{
			let condition = conditions.get(i);
			if (condition.isActive() === active)
			{
				returnedConditions.add(condition);
			}
		}
		return returnedConditions;
	}
	return null;
};
oFF.QConditionManager.prototype.getEffectiveConditions = function()
{
	this.updateEffectiveConditions();
	return this.m_effectiveConditions;
};
oFF.QConditionManager.prototype.getExternalConditions = function()
{
	return this.m_externalConditions;
};
oFF.QConditionManager.prototype.getInactiveConditions = function()
{
	return this.getConditionsByState(this, false);
};
oFF.QConditionManager.prototype.getInactiveTemporaryConditions = function()
{
	return this.getConditionsByState(this.m_tmpConditions, false);
};
oFF.QConditionManager.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.CONDITIONS_MANAGER;
};
oFF.QConditionManager.prototype.getTemporaryConditionByName = function(tmpCondName)
{
	if (oFF.isNull(this.m_tmpConditions))
	{
		return null;
	}
	return this.m_tmpConditions.getByKey(tmpCondName);
};
oFF.QConditionManager.prototype.getTemporaryConditions = function()
{
	return this.m_tmpConditions;
};
oFF.QConditionManager.prototype.hasConditions = function()
{
	return this.hasElements();
};
oFF.QConditionManager.prototype.hasTemporaryConditions = function()
{
	if (oFF.isNull(this.m_tmpConditions))
	{
		return false;
	}
	return this.m_tmpConditions.hasElements();
};
oFF.QConditionManager.prototype.isMeasureUsedInActiveConditionThreshold = function(measureName)
{
	if (oFF.XStringUtils.isNullOrEmpty(measureName))
	{
		return false;
	}
	let itCondition = this.getIterator();
	while (itCondition.hasNext())
	{
		let condition = itCondition.next();
		if (!condition.isActive())
		{
			continue;
		}
		let itThreshold = condition.getThresholds().getIterator();
		while (itThreshold.hasNext())
		{
			let threshold = itThreshold.next();
			let measureCoordinates = threshold.getMeasureCoordinates();
			let itMeasure = measureCoordinates.getIterator();
			while (itMeasure.hasNext())
			{
				if (oFF.XString.isEqual(itMeasure.next().getName(), measureName))
				{
					return true;
				}
			}
		}
	}
	return false;
};
oFF.QConditionManager.prototype.mergeDeepRecursive = function(settings, other)
{
	if (oFF.isNull(other))
	{
		return;
	}
	let otherObj = other;
	this.clearBackendCondtions();
	this.copyFrom(otherObj, null);
};
oFF.QConditionManager.prototype.onModelComponentChanged = function(modelComponent, customIdentifier)
{
	if (oFF.isNull(modelComponent))
	{
		return;
	}
	if (modelComponent === this.m_externalConditions)
	{
		this.updateEffectiveConditions();
	}
};
oFF.QConditionManager.prototype.releaseObject = function()
{
	if (oFF.notNull(this.m_externalConditions))
	{
		this.setExternalConditions(null);
	}
	this.m_tmpConditions = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_tmpConditions);
	this.m_effectiveConditions = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_effectiveConditions);
	oFF.QModelComponentList.prototype.releaseObject.call( this );
};
oFF.QConditionManager.prototype.removeClientConditions = function()
{
	this.queueEventing();
	let size = this.size();
	for (let i = size - 1; i >= 0; i--)
	{
		let condition = this.get(i);
		if (condition.isChangeable())
		{
			this.removeInternal(condition);
			oFF.XObjectExt.release(condition);
		}
	}
	this.resumeEventing();
};
oFF.QConditionManager.prototype.removeConditionByName = function(technicalName)
{
	let targetCondition = this.getConditionByName(technicalName);
	if (oFF.notNull(targetCondition))
	{
		this.removeElement(targetCondition);
		oFF.XObjectExt.release(targetCondition);
	}
};
oFF.QConditionManager.prototype.removeTemporaryConditionByName = function(tmpCondName)
{
	if (oFF.notNull(this.m_tmpConditions))
	{
		let targetCondition = this.getTemporaryConditionByName(tmpCondName);
		if (oFF.notNull(targetCondition))
		{
			this.m_tmpConditions.removeElement(targetCondition);
			this.updateEffectiveConditions();
			this.notifyNodeChanged();
			oFF.XObjectExt.release(targetCondition);
		}
	}
};
oFF.QConditionManager.prototype.setExternalConditions = function(externalConditions)
{
	if (this.m_externalConditions === externalConditions)
	{
		return;
	}
	if (oFF.notNull(this.m_externalConditions))
	{
		this.m_externalConditions.unregisterChangedListener(this);
		this.m_externalConditions.removeSecondaryParent(this);
		this.m_externalConditions = null;
	}
	if (oFF.notNull(externalConditions))
	{
		this.m_externalConditions = externalConditions;
		this.m_externalConditions.addSecondaryParent(this);
		this.m_externalConditions.registerChangedListener(this, null);
	}
	this.updateEffectiveConditions();
	this.notifyNodeChanged();
};
oFF.QConditionManager.prototype.updateConditionsOnMeasureRemoval = function(measureName)
{
	let measureDimension = this.getQueryModel().getMeasureDimension();
	for (let conditionsIndex = 0; conditionsIndex < this.size(); )
	{
		let condition = this.get(conditionsIndex);
		let thresholds = condition.getThresholds();
		let emptyThresholdWasRemoved = false;
		for (let thresholdIndex = 0; thresholdIndex < thresholds.size(); )
		{
			let threshold = thresholds.get(thresholdIndex);
			let measureCoordinates = threshold.getMeasureCoordinates();
			for (let measureIndex = 0; measureIndex < measureCoordinates.size(); )
			{
				let dimensionMemberFromMeasure = measureCoordinates.get(measureIndex);
				if (oFF.notNull(measureName) && oFF.notNull(dimensionMemberFromMeasure) && oFF.XString.isEqual(dimensionMemberFromMeasure.getName(), measureName))
				{
					measureCoordinates.removeElement(dimensionMemberFromMeasure);
				}
				else if (oFF.notNull(dimensionMemberFromMeasure) && measureDimension.getDimensionMember(dimensionMemberFromMeasure.getName()) === null)
				{
					measureCoordinates.removeElement(dimensionMemberFromMeasure);
				}
				else
				{
					measureIndex++;
				}
			}
			if (!oFF.XCollectionUtils.hasElements(measureCoordinates))
			{
				condition.removeThreshold(threshold);
				emptyThresholdWasRemoved = true;
			}
			else
			{
				thresholdIndex++;
			}
		}
		if (!oFF.XCollectionUtils.hasElements(condition.getThresholds()) && emptyThresholdWasRemoved)
		{
			this.removeElement(condition);
		}
		else
		{
			conditionsIndex++;
		}
	}
};
oFF.QConditionManager.prototype.updateEffectiveConditions = function()
{
	if (oFF.isNull(this.m_effectiveConditions))
	{
		this.m_effectiveConditions = oFF.XListOfNameObject.create();
	}
	else
	{
		this.m_effectiveConditions.clear();
	}
	this.m_effectiveConditions.addAll(this);
	let idx;
	let size;
	if (oFF.notNull(this.m_externalConditions) && !this.m_externalConditions.isReleased())
	{
		size = this.m_externalConditions.size();
		for (idx = 0; idx < size; idx++)
		{
			let externalCondition = this.m_externalConditions.get(idx);
			if (!this.m_effectiveConditions.containsKey(externalCondition.getName()))
			{
				this.m_effectiveConditions.add(externalCondition);
			}
		}
	}
	if (oFF.notNull(this.m_tmpConditions))
	{
		size = this.m_tmpConditions.size();
		for (idx = 0; idx < size; idx++)
		{
			let tmpCondition = this.m_tmpConditions.get(idx);
			if (!this.m_effectiveConditions.containsKey(tmpCondition.getName()))
			{
				this.m_effectiveConditions.add(tmpCondition);
			}
		}
	}
};

oFF.QDataCellList = function() {};
oFF.QDataCellList.prototype = new oFF.QModelComponentList();
oFF.QDataCellList.prototype._ff_c = "QDataCellList";

oFF.QDataCellList.createQueryDataCellList = function(queryModel)
{
	let queryDataCellList = new oFF.QDataCellList();
	queryDataCellList.setupOlapList(queryModel, queryModel, true, "Data Cells", oFF.XCollectionFactory.MAPPED_LIST, false);
	return queryDataCellList;
};
oFF.QDataCellList.prototype.add = function(element)
{
	if (this.containsKey(element.getName()))
	{
		this.removeElement(element);
	}
	oFF.QModelComponentList.prototype.add.call( this , element);
};
oFF.QDataCellList.prototype.addInternal = function(element)
{
	if (this.containsKey(element.getName()))
	{
		this.removeInternal(element);
	}
	oFF.QModelComponentList.prototype.addInternal.call( this , element);
};
oFF.QDataCellList.prototype.getByMember = function(member)
{
	let cells = oFF.XList.create();
	let size = this.size();
	for (let i = 0; i < size; i++)
	{
		let dataCell = this.get(i);
		if (dataCell.hasMemberReference(member))
		{
			cells.add(dataCell);
		}
	}
	return cells;
};
oFF.QDataCellList.prototype.getByMemberName = function(memberName)
{
	let cells = oFF.XList.create();
	let size = this.size();
	for (let i = 0; i < size; i++)
	{
		let dataCell = this.get(i);
		if (dataCell.hasMeasureReference(memberName))
		{
			cells.add(dataCell);
		}
	}
	return cells;
};
oFF.QDataCellList.prototype.getQueryDataCellAt = function(index)
{
	return this.get(index);
};
oFF.QDataCellList.prototype.newQueryDataCell = function(name)
{
	let dataCell = oFF.QDataCell._create(this, name);
	this.add(dataCell);
	return dataCell;
};
oFF.QDataCellList.prototype.newQueryDataCellsForMember = function(member)
{
	this.removeByMember(member);
	let dimensionName = member.getDimension().getName();
	let otherDimension = null;
	if (oFF.XString.isEqual(this.getQueryModel().getMeasureDimension().getName(), dimensionName))
	{
		otherDimension = this.getQueryModel().getNonMeasureDimension();
	}
	else
	{
		otherDimension = this.getQueryModel().getMeasureDimension();
	}
	if (oFF.isNull(otherDimension))
	{
		let dataCell = this.newQueryDataCell(null);
		dataCell.addDimensionMemberReference(member.getName());
	}
	else
	{
		let allStructureMembers = otherDimension.getAllStructureMembers();
		let membersIterator = allStructureMembers.getIterator();
		while (membersIterator.hasNext())
		{
			let newDataCell = this.newQueryDataCell(null);
			newDataCell.addDimensionMemberReference(member.getName());
			newDataCell.addDimensionMemberReference(membersIterator.next().getName());
		}
	}
};
oFF.QDataCellList.prototype.removeByMember = function(member)
{
	let dataCellsWithMemberRef = this.getByMember(member).getIterator();
	while (dataCellsWithMemberRef.hasNext())
	{
		this.removeElement(dataCellsWithMemberRef.next());
	}
};

oFF.QQueryCellManager = function() {};
oFF.QQueryCellManager.prototype = new oFF.QModelComponentList();
oFF.QQueryCellManager.prototype._ff_c = "QQueryCellManager";

oFF.QQueryCellManager.CELLS_DIMENSION_NAME = "$$Cells$$";
oFF.QQueryCellManager.create = function(context, parent)
{
	let cellsManager = new oFF.QQueryCellManager();
	cellsManager.setupOlapList(context, parent, true, "QueryCells", oFF.XCollectionFactory.LINKED_MAP, false);
	return cellsManager;
};
oFF.QQueryCellManager.prototype.addNewQueryCell = function(name)
{
	let queryCell = oFF.QQueryCell.create(this, name);
	this.add(queryCell);
	return queryCell;
};
oFF.QQueryCellManager.prototype.cloneOlapComponent = function(context, parent)
{
	let queryCellManager = oFF.QQueryCellManager.create(context, parent);
	let queryCellIt = this.getIterator();
	while (queryCellIt.hasNext())
	{
		let queryCell = queryCellIt.next();
		queryCellManager.add(queryCell.cloneOlapComponent(queryCellManager, queryCellManager));
	}
	return queryCellManager;
};
oFF.QQueryCellManager.prototype.destroyTransientObjects = function(context)
{
	let queryModel = this.getQueryModel();
	let cellsDimension = queryModel.getDimensionByName(oFF.QQueryCellManager.CELLS_DIMENSION_NAME);
	let queryCellIt = this.getIterator();
	while (queryCellIt.hasNext())
	{
		let queryCell = queryCellIt.next();
		cellsDimension.removeMeasure(queryCell.getName());
	}
};
oFF.QQueryCellManager.prototype.generateTransientObjects = function(context, messageManager)
{
	if (this.isEmpty())
	{
		return;
	}
	let queryModel = this.getQueryModel();
	let cellsDimension = queryModel.getDimensionByName(oFF.QQueryCellManager.CELLS_DIMENSION_NAME);
	let queryCellIt = this.getIterator();
	while (queryCellIt.hasNext())
	{
		let queryCell = queryCellIt.next();
		let restrictedMeasure = cellsDimension.addNewRestrictedMeasure(queryCell.getName(), null);
		restrictedMeasure.getFilter().addSingleMemberFilterByDimensionMember(queryCell.getCellCalculationMember(), oFF.ComparisonOperator.EQUAL);
	}
	queryModel.getAxis(oFF.AxisType.TECHNICAL).add(cellsDimension);
};
oFF.QQueryCellManager.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.QUERY_CELLS;
};

oFF.QDimensionList = function() {};
oFF.QDimensionList.prototype = new oFF.QModelComponentList();
oFF.QDimensionList.prototype._ff_c = "QDimensionList";

oFF.QDimensionList.createDimensionList = function(context, parentNode, name)
{
	let dimensionList = new oFF.QDimensionList();
	dimensionList.setupOlapList(context, parentNode, false, name, oFF.XCollectionFactory.LINKED_MAP, false);
	return dimensionList;
};
oFF.QDimensionList.prototype.countDimensions = function(countStructures)
{
	let len = this.size();
	let dimensionCount = 0;
	for (let i = 0; i < len; i++)
	{
		if (this.get(i).isStructure() === countStructures)
		{
			dimensionCount++;
		}
	}
	return dimensionCount;
};
oFF.QDimensionList.prototype.getAccountDimension = function()
{
	return this.getDimensionByType(oFF.DimensionType.ACCOUNT);
};
oFF.QDimensionList.prototype.getDimensionAt = function(index)
{
	return this.get(index);
};
oFF.QDimensionList.prototype.getDimensionBase = function(index)
{
	return this.get(index);
};
oFF.QDimensionList.prototype.getDimensionByName = function(name)
{
	return this.getByKey(name);
};
oFF.QDimensionList.prototype.getDimensionByNameFromExistingMetadata = function(name)
{
	return this.getByKey(name);
};
oFF.QDimensionList.prototype.getDimensionByNameFromExistingMetadataOrFormulaCalcDim = function(name)
{
	return this.getDimensionByNameFromExistingMetadata(name);
};
oFF.QDimensionList.prototype.getDimensionByType = function(type)
{
	let len = this.size();
	for (let i = 0; i < len; i++)
	{
		let dimension = this.getDimensionAt(i);
		if (dimension.getDimensionType() === type)
		{
			return dimension;
		}
	}
	return null;
};
oFF.QDimensionList.prototype.getDimensionCount = function()
{
	return this.size();
};
oFF.QDimensionList.prototype.getDimensionIndex = function(dimensionName)
{
	let dimensionCount = this.getDimensionCount();
	for (let i = 0; i < dimensionCount; i++)
	{
		let dimension = this.getDimensionAt(i);
		if (oFF.XString.isEqual(dimensionName, dimension.getName()))
		{
			return i;
		}
	}
	return -1;
};
oFF.QDimensionList.prototype.getDimensionNameByType = function(type)
{
	let dimension = this.getDimensionByType(type);
	return oFF.isNull(dimension) ? null : dimension.getName();
};
oFF.QDimensionList.prototype.getDimensionNames = function()
{
	return oFF.XCollectionUtils.createListOfNames(this);
};
oFF.QDimensionList.prototype.getDimensions = function()
{
	return this;
};
oFF.QDimensionList.prototype.getDimensionsByType = function(type)
{
	return oFF.XStream.of(this.m_list).filter((dimension) => {
		return dimension.getDimensionType() === type;
	}).collect(oFF.XStreamCollector.toList());
};
oFF.QDimensionList.prototype.getLoadedDimensions = function()
{
	return this.getDimensions();
};
oFF.QDimensionList.prototype.getMeasureDimension = function()
{
	return this.getDimensionByType(oFF.DimensionType.MEASURE_STRUCTURE);
};
oFF.QDimensionList.prototype.getNonMeasureDimension = function()
{
	return this.getDimensionByType(oFF.DimensionType.SECONDARY_STRUCTURE);
};
oFF.QDimensionList.prototype.getNonMeasureDimension2 = function()
{
	if (this.getNonStructureCount() < 2)
	{
		return null;
	}
	let firstNonMeasure = this.getNonMeasureDimension();
	let iterator = this.getIterator();
	while (iterator.hasNext())
	{
		let dimension = iterator.next();
		if (dimension.getDimensionType() === oFF.DimensionType.SECONDARY_STRUCTURE && dimension !== firstNonMeasure)
		{
			oFF.XObjectExt.release(iterator);
			return dimension;
		}
	}
	oFF.XObjectExt.release(iterator);
	return null;
};
oFF.QDimensionList.prototype.getNonStructureCount = function()
{
	return this.countDimensions(false);
};
oFF.QDimensionList.prototype.getOrderedDimensionNames = function()
{
	return this.getDimensionCount() === 0 ? null : this.getKeysAsReadOnlyList();
};
oFF.QDimensionList.prototype.getPrimaryCalculationDimension = function()
{
	let accountDimension = this.getAccountDimension();
	if (oFF.isNull(accountDimension))
	{
		return this.getMeasureDimension();
	}
	return accountDimension;
};
oFF.QDimensionList.prototype.getSecondaryCalculationDimension = function()
{
	if (this.getAccountDimension() !== null)
	{
		return this.getMeasureDimension();
	}
	return this.getNonMeasureDimension();
};
oFF.QDimensionList.prototype.getStructureCount = function()
{
	return this.countDimensions(true);
};
oFF.QDimensionList.prototype.getVersionDimension = function()
{
	let versionDimension = this.getDimensionByType(oFF.DimensionType.VERSION_EPM);
	if (oFF.isNull(versionDimension))
	{
		versionDimension = this.getDimensionByType(oFF.DimensionType.VERSION_IBP);
	}
	return versionDimension;
};
oFF.QDimensionList.prototype.getVersionDimensionName = function()
{
	let versionDimension = this.getVersionDimension();
	let versionDimensionName = null;
	if (oFF.notNull(versionDimension))
	{
		versionDimensionName = versionDimension.getName();
	}
	return versionDimensionName;
};
oFF.QDimensionList.prototype.reOrderDimensions = function(orderedDimensionNames)
{
	if (this.getDimensionCount() === 0 || oFF.isNull(orderedDimensionNames) || this.getDimensionCount() !== orderedDimensionNames.size())
	{
		return;
	}
	let orderOk = true;
	let size = orderedDimensionNames.size();
	for (let dimensionNameIndex = 0; dimensionNameIndex < size; dimensionNameIndex++)
	{
		let dimensionName = orderedDimensionNames.get(dimensionNameIndex);
		let dimension = this.getDimensionAt(dimensionNameIndex);
		if (!oFF.XString.isEqual(dimensionName, dimension.getName()))
		{
			if (this.getDimensionByName(dimensionName) === null)
			{
				return;
			}
			orderOk = false;
		}
	}
	if (!orderOk)
	{
		for (let newIndex = 0; newIndex < size; newIndex++)
		{
			let orderedDimensionName = orderedDimensionNames.get(newIndex);
			let currentIndex = this.getDimensionIndex(orderedDimensionName);
			if (currentIndex < newIndex)
			{
				throw oFF.XException.createIllegalStateException("illegal sorting state");
			}
			if (currentIndex !== newIndex)
			{
				this.moveElement(currentIndex, newIndex);
			}
		}
	}
};
oFF.QDimensionList.prototype.removeDimensionAt = function(index)
{
	this.removeAt(index);
};

oFF.QDimensionManager = function() {};
oFF.QDimensionManager.prototype = new oFF.QModelComponentList();
oFF.QDimensionManager.prototype._ff_c = "QDimensionManager";

oFF.QDimensionManager.CUSTOM_DIMENSION2 = "CustomDimension2";
oFF.QDimensionManager.SIGNED_DATA_OTHER = "SignedDataOther";
oFF.QDimensionManager.create = function(parentNode)
{
	let newObj = new oFF.QDimensionManager();
	newObj.setupDimensionManager(parentNode);
	return newObj;
};
oFF.QDimensionManager.prototype.m_accountDimension = null;
oFF.QDimensionManager.prototype.m_allNamesByType = null;
oFF.QDimensionManager.prototype.m_fields = null;
oFF.QDimensionManager.prototype.m_firstNameByType = null;
oFF.QDimensionManager.prototype.m_hasAccountDimension = false;
oFF.QDimensionManager.prototype.m_incompleteReferences = null;
oFF.QDimensionManager.prototype.m_lazyLoader = null;
oFF.QDimensionManager.prototype.m_measureStructure = null;
oFF.QDimensionManager.prototype.m_names = null;
oFF.QDimensionManager.prototype.m_nonMeasureStructure1 = null;
oFF.QDimensionManager.prototype.m_nonMeasureStructure2 = null;
oFF.QDimensionManager.prototype.addDimension = function(dimension)
{
	if (!this.contains(dimension))
	{
		this.setMeasureReferences(dimension);
		let dimensionName = dimension.getName();
		if (!this.m_names.contains(dimensionName))
		{
			this.m_names.add(dimensionName);
			let dimensionTypeName = dimension.getDimensionType().getName();
			if (!dimension.isTechnicalDimension())
			{
				this.addDimensionNameToMaps(dimensionTypeName, dimensionName);
			}
			this.addInternal(dimension);
			this.notifyNodeChanged();
		}
		else
		{
			this.insertDimension(dimension);
		}
	}
};
oFF.QDimensionManager.prototype.addDimensionNameToMaps = function(dimensionTypeName, dimensionName)
{
	this.m_firstNameByType.putIfAbsent(dimensionTypeName, dimensionName);
	this.m_allNamesByType.putIfAbsent(dimensionTypeName, oFF.XList.create());
	this.m_allNamesByType.getByKey(dimensionTypeName).add(dimensionName);
};
oFF.QDimensionManager.prototype.addDimensionReference = function(name, dimensionType, isTechnicalDimension)
{
	if (dimensionType === oFF.DimensionType.SECONDARY_STRUCTURE && this.m_hasAccountDimension)
	{
		return;
	}
	if (!this.m_names.contains(name))
	{
		this.m_names.add(name);
		let dimensionTypeName = dimensionType.getName();
		this.m_incompleteReferences.put(name, dimensionType);
		if (!isTechnicalDimension)
		{
			this.addDimensionNameToMaps(dimensionTypeName, name);
		}
		if (dimensionType === oFF.DimensionType.ACCOUNT)
		{
			this.removeSecondStructure();
			this.m_hasAccountDimension = true;
		}
	}
};
oFF.QDimensionManager.prototype.addField = function(field, dimension)
{
	let name = field.getName();
	let existingField = this.m_fields.getByKey(name);
	if (oFF.isNull(existingField))
	{
		this.m_fields.add(field);
	}
	else
	{
		let existingFieldDim = existingField.getDimension();
		if (oFF.notNull(existingFieldDim) && existingFieldDim.isGroupingDimension() && !dimension.isGroupingDimension())
		{
			existingField.setDimension(dimension);
		}
	}
};
oFF.QDimensionManager.prototype.addNewCalculatedDimensionWithName = function(calculatedDimensionName)
{
	if (this.getByKey(calculatedDimensionName) !== null)
	{
		return null;
	}
	let calculatedDimension = oFF.QCalculatedDimension._createCalculatedDimension(this.getContext(), this, calculatedDimensionName);
	this.m_names.add(calculatedDimensionName);
	this.add(calculatedDimension);
	this.getQueryModel().getFreeAxis().add(calculatedDimension);
	return calculatedDimension;
};
oFF.QDimensionManager.prototype.clearAllCalculatedDimensions = function()
{
	this.queueEventing();
	let size = this.size();
	for (let i = size - 1; i >= 0; i--)
	{
		let dimension = this.get(i);
		this.removeCalculatedDimensionByName(dimension.getName());
	}
	this.resumeEventing();
};
oFF.QDimensionManager.prototype.containsKey = function(key)
{
	return this.m_names.contains(key);
};
oFF.QDimensionManager.prototype.convertToFieldLayoutType = function(type)
{
	let len = this.size();
	for (let i = 0; i < len; i++)
	{
		let dimension = this.get(i);
		dimension.convertToFieldLayoutType(type);
	}
};
oFF.QDimensionManager.prototype.copyDimensionManagerMember = function(origin)
{
	if (oFF.notNull(origin.m_measureStructure))
	{
		if (this.dimensionNotPresentInClonedQueryManager(this.getMeasureDimension()))
		{
			return;
		}
		this.getMeasureDimension().copyDimensionMember(origin.getMeasureDimension());
	}
	if (oFF.notNull(origin.m_nonMeasureStructure1))
	{
		if (this.dimensionNotPresentInClonedQueryManager(this.getNonMeasureDimension()))
		{
			return;
		}
		this.getNonMeasureDimension().copyDimensionMember(origin.getNonMeasureDimension());
	}
	if (oFF.notNull(origin.m_nonMeasureStructure2))
	{
		if (this.dimensionNotPresentInClonedQueryManager(this.getNonMeasureDimension2()))
		{
			return;
		}
		this.getNonMeasureDimension2().copyDimensionMember(origin.getNonMeasureDimension2());
	}
	if (oFF.notNull(origin.m_accountDimension))
	{
		if (this.dimensionNotPresentInClonedQueryManager(this.getAccountDimension()))
		{
			return;
		}
		this.getAccountDimension().copyDimensionMember(origin.getAccountDimension());
	}
};
oFF.QDimensionManager.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponentList.prototype.copyFromInternal.call( this , other, flags);
	let originDimensionManager = other;
	let context = this.getContext();
	let dimensionLazyLoader = originDimensionManager.getDimensionLazyLoader();
	if (oFF.notNull(dimensionLazyLoader))
	{
		this.setDimensionLazyLoader(dimensionLazyLoader.copyDimensionLazyLoader(this.getQueryModelBase()));
	}
	this.m_firstNameByType = originDimensionManager.m_firstNameByType.createMapByStringCopy();
	this.m_allNamesByType.clear();
	oFF.XCollectionUtils.mapEntries(originDimensionManager.m_allNamesByType, (key, value) => {
		this.m_allNamesByType.put(key, oFF.XList.createWithList(value));
	});
	let dimensionsToClone = this.getQueryManagerBase().getDimensionsToClone();
	let dimNames = originDimensionManager.getDimensionNames();
	let len = dimNames.size();
	for (let i = 0; i < len; i++)
	{
		let origDimName = dimNames.get(i);
		let origDim = originDimensionManager.getDimensionByNameInternal(origDimName);
		if (oFF.XCollectionUtils.hasElements(dimensionsToClone) && !dimensionsToClone.contains(origDimName) && (oFF.isNull(origDim) || origDim.getAxisType() !== oFF.AxisType.VIRTUAL))
		{
			continue;
		}
		this.m_names.add(origDimName);
		if (oFF.isNull(origDim))
		{
			this.m_incompleteReferences.put(origDimName, originDimensionManager.m_incompleteReferences.getByKey(origDimName));
		}
		else
		{
			let cloneDim = oFF.QFactory.createDimensionFromType(context, origDim, this);
			this.addInternal(cloneDim);
			cloneDim.copyFrom(origDim, flags);
			this.setMeasureReferences(cloneDim);
			this.finalizeDimensionMetadataSetup(cloneDim);
		}
	}
};
oFF.QDimensionManager.prototype.createAndAddDimension = function(name, text)
{
	this.stopEventing();
	let dim = oFF.QDimension._create(this.getContext(), this);
	dim.setName(name);
	dim.setText(text);
	this.addDimension(dim);
	this.resumeEventing();
	return dim;
};
oFF.QDimensionManager.prototype.dimensionNotPresentInClonedQueryManager = function(dimension)
{
	return oFF.isNull(dimension) && oFF.XCollectionUtils.hasElements(this.getQueryManagerBase().getDimensionsToClone());
};
oFF.QDimensionManager.prototype.finalizeDimensionMetadataSetup = function(dimension)
{
	let fields = dimension.getFields();
	let len = fields.size();
	for (let i = 0; i < len; i++)
	{
		let field = fields.get(i);
		this.addField(field, dimension);
	}
};
oFF.QDimensionManager.prototype.finalizeStructures = function()
{
	let dataSource = this.getQueryModel().getDataSource();
	let dataSourceType = dataSource.getType();
	let isAgileBi = !this.m_hasAccountDimension && dataSourceType === oFF.MetaObjectType.PLANNING;
	let isInAModel = dataSourceType === oFF.MetaObjectType.INA_MODEL;
	let objectName = dataSource.getObjectName();
	let isVirtualDs = oFF.XString.startsWith(objectName, "$$") && oFF.XString.endsWith(objectName, "$$");
	let session = this.getSession();
	if (isAgileBi && !session.hasFeature(oFF.FeatureToggleOlap.CUSTOM_DIMENSION_2_FOR_AGILE_BI) || isInAModel && !session.hasFeature(oFF.FeatureToggleOlap.CUSTOM_DIMENSION_2_FOR_INA_MODEL) || isVirtualDs)
	{
		this.removeSecondStructure();
	}
};
oFF.QDimensionManager.prototype.getAccountDimension = function()
{
	if (oFF.isNull(this.m_accountDimension))
	{
		this.m_accountDimension = oFF.XWeakReferenceUtil.getWeakRef(this.getDimensionByType(oFF.DimensionType.ACCOUNT));
	}
	return oFF.XWeakReferenceUtil.getHardRef(this.m_accountDimension);
};
oFF.QDimensionManager.prototype.getAllLoadedAndCompleteDimensions = function()
{
	let dimensionsOnAxes = this.getQueryManager().getQueryServiceConfig().getDimensionsOnAxes();
	if (oFF.XCollectionUtils.hasElements(dimensionsOnAxes))
	{
		let len = this.m_names.size();
		for (let i = 0; i < len; i++)
		{
			let dimensionName = this.m_names.get(i);
			if (!this.m_incompleteReferences.containsKey(dimensionName))
			{
				continue;
			}
			this.getDimensionByNameFromExistingMetadata(dimensionName);
		}
	}
	let alreadyLoadedAndCompleteDimensions = oFF.XList.create();
	let size = this.size();
	for (let j = 0; j < size; j++)
	{
		let dimension = this.get(j);
		if (dimension.getDimensionType() !== oFF.DimensionType.DIMENSION_INCOMPLETE)
		{
			alreadyLoadedAndCompleteDimensions.add(dimension.getName());
		}
	}
	return alreadyLoadedAndCompleteDimensions;
};
oFF.QDimensionManager.prototype.getByKey = function(key)
{
	return this.getDimensionByName(key);
};
oFF.QDimensionManager.prototype.getDimensionAt = function(index)
{
	return this.getDimensionByName(this.m_names.get(index));
};
oFF.QDimensionManager.prototype.getDimensionByName = function(name)
{
	let dimension = this.getDimensionByNameFromExistingMetadata(name);
	if (oFF.notNull(dimension) && oFF.DimensionType.DIMENSION_INCOMPLETE === dimension.getDimensionType() || oFF.isNull(dimension) && oFF.DimensionType.DIMENSION_INCOMPLETE === this.m_incompleteReferences.getByKey(name))
	{
		this.makeMetadataCallToGetCompleteDimensionDetails(name);
		return this.getDimensionByNameFromExistingMetadata(name);
	}
	return dimension;
};
oFF.QDimensionManager.prototype.getDimensionByNameFromExistingMetadata = function(name)
{
	let dimension = this.getDimensionByNameInternal(name);
	if (oFF.isNull(dimension) && this.m_incompleteReferences.containsKey(name))
	{
		dimension = this.lazyLoadDimension(name);
	}
	if (oFF.notNull(dimension) && this.getQueryModel().isCumulativeDeactive() && dimension.supportsCumulative())
	{
		dimension.setIsCumulative(false);
	}
	return dimension;
};
oFF.QDimensionManager.prototype.getDimensionByNameFromExistingMetadataOrFormulaCalcDim = function(name)
{
	let dimension = this.getDimensionByNameFromExistingMetadata(name);
	if (oFF.isNull(dimension))
	{
		let size = this.size();
		for (let j = 0; j < size; j++)
		{
			let loadedDimension = this.get(j);
			if (loadedDimension.getDimensionType() === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
			{
				let formulaCalcDim = loadedDimension;
				let dependentCalculatedDimensions = formulaCalcDim.getDependentCalculatedDimensions();
				for (let k = 0; k < dependentCalculatedDimensions.size(); k++)
				{
					if (oFF.XString.isEqual(dependentCalculatedDimensions.get(k).getName(), name))
					{
						return dependentCalculatedDimensions.get(k);
					}
				}
			}
		}
	}
	return dimension;
};
oFF.QDimensionManager.prototype.getDimensionByNameInternal = function(name)
{
	return oFF.XCollectionUtils.getByName(this.m_list, name);
};
oFF.QDimensionManager.prototype.getDimensionByType = function(type)
{
	let dimensionNameByType = this.getDimensionNameByType(type);
	return this.getDimensionByName(dimensionNameByType);
};
oFF.QDimensionManager.prototype.getDimensionCount = function()
{
	return this.m_names.size();
};
oFF.QDimensionManager.prototype.getDimensionLazyLoader = function()
{
	return this.m_lazyLoader;
};
oFF.QDimensionManager.prototype.getDimensionNameByType = function(type)
{
	if (oFF.isNull(type))
	{
		return null;
	}
	return this.m_firstNameByType.getByKey(type.getName());
};
oFF.QDimensionManager.prototype.getDimensionNames = function()
{
	return this.m_names;
};
oFF.QDimensionManager.prototype.getDimensionReferences = function()
{
	return this.m_incompleteReferences;
};
oFF.QDimensionManager.prototype.getDimensions = function()
{
	let dimRefs = oFF.XList.createWithList(this.m_incompleteReferences.getKeysAsReadOnlyList());
	let len = dimRefs.size();
	for (let i = 0; i < len; i++)
	{
		this.lazyLoadDimension(dimRefs.get(i));
	}
	return this;
};
oFF.QDimensionManager.prototype.getDimensionsByType = function(type)
{
	if (oFF.isNull(type) || !this.m_allNamesByType.containsKey(type.getName()))
	{
		return oFF.XList.create();
	}
	return oFF.XCollectionUtils.map(this.m_allNamesByType.getByKey(type.getName()), this.getDimensionByName.bind(this));
};
oFF.QDimensionManager.prototype.getFieldByName = function(name)
{
	if (this.m_fields.containsKey(name))
	{
		return this.m_fields.getByKey(name);
	}
	let len = this.m_names.size();
	for (let i = 0; i < len; i++)
	{
		let dimensionName = this.m_names.get(i);
		if (!this.m_incompleteReferences.containsKey(dimensionName))
		{
			continue;
		}
		if (this.m_lazyLoader.hasFieldWithName(dimensionName, name))
		{
			this.lazyLoadDimension(dimensionName);
			return this.m_fields.getByKey(name);
		}
	}
	let size = this.size();
	for (let j = 0; j < size; j++)
	{
		let dimension = this.get(j);
		if (dimension.getDimensionType() === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
		{
			let formulaCalcDim = dimension;
			let formulaCalcField = formulaCalcDim.getFieldByName(name);
			if (oFF.notNull(formulaCalcField))
			{
				return formulaCalcField;
			}
			let dependentCalculatedDimensions = formulaCalcDim.getDependentCalculatedDimensions();
			for (let k = 0; k < dependentCalculatedDimensions.size(); k++)
			{
				let dependentFormulaCalcField = dependentCalculatedDimensions.get(k).getFieldByName(name);
				if (oFF.notNull(dependentFormulaCalcField))
				{
					return dependentFormulaCalcField;
				}
			}
		}
	}
	return null;
};
oFF.QDimensionManager.prototype.getFieldByNameOrAlias = function(name)
{
	if (this.m_fields.containsKey(name))
	{
		return this.m_fields.getByKey(name);
	}
	let len = this.m_names.size();
	let fieldByNameOrAlias = null;
	for (let i = 0; i < len; i++)
	{
		let dimName = this.m_names.get(i);
		let isExternalJoinedDimension = oFF.XString.containsString(dimName, "$$");
		let dim = this.getDimensionByNameInternal(dimName);
		if (oFF.notNull(dim))
		{
			let field = dim.getFieldByNameOrAlias(name);
			if (oFF.notNull(field))
			{
				if (isExternalJoinedDimension)
				{
					fieldByNameOrAlias = field;
				}
				else
				{
					return field;
				}
			}
		}
		else if (this.m_lazyLoader.hasFieldWithNameOrAlias(dimName, name))
		{
			dim = this.lazyLoadDimension(dimName);
			fieldByNameOrAlias = dim.getFieldByNameOrAlias(name);
			if (!isExternalJoinedDimension)
			{
				return fieldByNameOrAlias;
			}
		}
	}
	return fieldByNameOrAlias;
};
oFF.QDimensionManager.prototype.getKeysAsIterator = oFF.noSupport;
oFF.QDimensionManager.prototype.getKeysAsReadOnlyList = function()
{
	return this.m_names;
};
oFF.QDimensionManager.prototype.getLoadedDimensions = function()
{
	return this;
};
oFF.QDimensionManager.prototype.getMeasureDimension = function()
{
	if (oFF.isNull(this.m_measureStructure))
	{
		this.m_measureStructure = oFF.XWeakReferenceUtil.getWeakRef(this.getDimensionByType(oFF.DimensionType.MEASURE_STRUCTURE));
	}
	return oFF.XWeakReferenceUtil.getHardRef(this.m_measureStructure);
};
oFF.QDimensionManager.prototype.getNonMeasureDimension = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_nonMeasureStructure1);
};
oFF.QDimensionManager.prototype.getNonMeasureDimension2 = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_nonMeasureStructure2);
};
oFF.QDimensionManager.prototype.getNonStructureCount = function()
{
	let structureCount = this.getStructureCount();
	let allDimCount = this.getDimensionCount();
	return allDimCount - structureCount;
};
oFF.QDimensionManager.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.DIMENSION_MANAGER;
};
oFF.QDimensionManager.prototype.getPrimaryCalculationDimension = function()
{
	let accountDimension = this.getAccountDimension();
	if (oFF.isNull(accountDimension))
	{
		return this.getMeasureDimension();
	}
	return accountDimension;
};
oFF.QDimensionManager.prototype.getSecondaryCalculationDimension = function()
{
	let accountDimension = this.getAccountDimension();
	if (oFF.notNull(accountDimension))
	{
		return this.getMeasureDimension();
	}
	return this.getDimensionByType(oFF.DimensionType.SECONDARY_STRUCTURE);
};
oFF.QDimensionManager.prototype.getStructureCount = function()
{
	let count = 0;
	if (oFF.notNull(this.m_nonMeasureStructure1))
	{
		++count;
	}
	if (oFF.notNull(this.m_nonMeasureStructure2))
	{
		++count;
	}
	if (oFF.notNull(this.m_measureStructure))
	{
		++count;
	}
	return count;
};
oFF.QDimensionManager.prototype.getVersionDimension = function()
{
	let versionDimension = this.getDimensionByType(oFF.DimensionType.VERSION_EPM);
	if (oFF.isNull(versionDimension))
	{
		versionDimension = this.getDimensionByType(oFF.DimensionType.VERSION_IBP);
	}
	return versionDimension;
};
oFF.QDimensionManager.prototype.getVersionDimensionName = function()
{
	let versionDimension = this.getVersionDimension();
	let versionDimensionName = null;
	if (oFF.notNull(versionDimension))
	{
		versionDimensionName = versionDimension.getName();
	}
	return versionDimensionName;
};
oFF.QDimensionManager.prototype.hasRuntimeDimensionGroupName = function()
{
	return oFF.XCollectionUtils.contains(this.getDimensions(), (dimension) => {
		return oFF.XStringUtils.isNotNullAndNotEmpty(dimension.getRuntimeDisplayGroupName());
	});
};
oFF.QDimensionManager.prototype.insertDimension = function(dimension)
{
	let predecessorIndex = this.m_names.getIndex(dimension.getName()) - 1;
	let predecessorName = null;
	while (predecessorIndex >= 0)
	{
		let current = this.m_names.get(predecessorIndex);
		if (!this.m_incompleteReferences.containsKey(current))
		{
			predecessorName = current;
			break;
		}
		--predecessorIndex;
	}
	let insertIndex = 0;
	if (oFF.notNull(predecessorName))
	{
		let len = this.size();
		for (let i = 0; i < len; i++)
		{
			if (oFF.XString.isEqual(predecessorName, this.get(i).getName()))
			{
				insertIndex = i + 1;
				break;
			}
		}
	}
	this.insertInternal(insertIndex, dimension);
};
oFF.QDimensionManager.prototype.insertDimensionOnAxis = function(axis, dimension)
{
	let insertIndex = 0;
	let axisDimNames = axis.getDimensionNames();
	let nameIndex = this.m_names.getIndex(dimension.getName()) - 1;
	while (nameIndex >= 0)
	{
		let result = axisDimNames.getIndex(this.m_names.get(nameIndex));
		if (result !== -1)
		{
			insertIndex = result + 1;
			break;
		}
		--nameIndex;
	}
	axis.insert(insertIndex, dimension);
};
oFF.QDimensionManager.prototype.lazyLoadDimension = function(dimensionName)
{
	this.stopEventing();
	let dim = this.m_lazyLoader.lazyLoadDimension(dimensionName);
	if (oFF.notNull(dim))
	{
		this.m_incompleteReferences.remove(dimensionName);
		this.setMeasureReferences(dim);
		this.insertDimension(dim);
		let defaultAxis = this.getQueryModel().getAxis(dim.getDefaultAxisType());
		this.insertDimensionOnAxis(defaultAxis, dim);
		this.finalizeDimensionMetadataSetup(dim);
	}
	this.resumeEventing();
	return dim;
};
oFF.QDimensionManager.prototype.makeMetadataCallToGetCompleteDimensionDetails = function(name)
{
	let queryManager = this.getQueryManager();
	let queryServiceConfig = queryManager.getQueryServiceConfig();
	let loadedAndCompleteDimensions = this.getAllLoadedAndCompleteDimensions();
	let requiredDimensions = oFF.XList.create();
	requiredDimensions.addAll(loadedAndCompleteDimensions);
	requiredDimensions.add(name);
	queryServiceConfig.setRequiredDimensions(requiredDimensions);
	if (oFF.XCollectionUtils.hasElements(queryServiceConfig.getDimensionsOnAxes()))
	{
		queryServiceConfig.setDimensionsOnAxes(null);
	}
	let modelInitialization = queryManager.processModelInitialization(oFF.SyncType.BLOCKING, null, null);
	if (modelInitialization.hasErrors())
	{
		throw oFF.XException.createRuntimeException("Update Metadata request failed");
	}
};
oFF.QDimensionManager.prototype.mergeDeepRecursive = function(settings, other)
{
	let otherObj = other;
	let dimensions = otherObj.getDimensions();
	if (this.getDimensionLazyLoader() !== null && otherObj.getDimensionLazyLoader() !== null)
	{
		this.getDimensionLazyLoader().setUseDesignTimeMetadata(otherObj.getDimensionLazyLoader().isUseDesignTimeMetadata());
	}
	let size = dimensions.size();
	for (let i = 0; i < size; i++)
	{
		let otherDimension = dimensions.get(i);
		let otherName = otherDimension.getName();
		let myDimension = this.getDimensionByNameFromExistingMetadata(otherName);
		if (oFF.isNull(myDimension))
		{
			let newlyAddedDimension = this.createAndAddDimension(otherName, otherDimension.getText());
			newlyAddedDimension.copyDimension(otherDimension);
		}
		else
		{
			myDimension.mergeDeepRecursive(settings, otherDimension);
		}
	}
};
oFF.QDimensionManager.prototype.releaseObject = function()
{
	this.m_lazyLoader = oFF.XObjectExt.release(this.m_lazyLoader);
	this.m_measureStructure = oFF.XObjectExt.release(this.m_measureStructure);
	this.m_nonMeasureStructure1 = oFF.XObjectExt.release(this.m_nonMeasureStructure1);
	this.m_nonMeasureStructure2 = oFF.XObjectExt.release(this.m_nonMeasureStructure2);
	this.m_accountDimension = oFF.XObjectExt.release(this.m_accountDimension);
	this.m_fields = oFF.XObjectExt.release(this.m_fields);
	this.m_names = oFF.XObjectExt.release(this.m_names);
	this.m_incompleteReferences = oFF.XObjectExt.release(this.m_incompleteReferences);
	this.m_firstNameByType = oFF.XObjectExt.release(this.m_firstNameByType);
	this.m_allNamesByType = oFF.XObjectExt.release(this.m_allNamesByType);
	oFF.QModelComponentList.prototype.releaseObject.call( this );
};
oFF.QDimensionManager.prototype.removeAt = function(index)
{
	let dimName = this.m_names.removeAt(index);
	let dimension = this.getDimensionByNameInternal(dimName);
	if (oFF.isNull(dimension))
	{
		this.m_incompleteReferences.remove(dimName);
		return null;
	}
	let axis = dimension.getAxis();
	axis.removeElementInternal(dimension);
	this.removeMeasureReferences(dimension.getDimensionType());
	oFF.QModelComponentList.prototype.removeElement.call( this , dimension);
	return dimension;
};
oFF.QDimensionManager.prototype.removeCalculatedDimensionByName = function(calculatedDimensionName)
{
	let dimension = this.getByKey(calculatedDimensionName);
	if (oFF.notNull(dimension) && dimension.getDimensionType().isTypeOf(oFF.DimensionType.CALCULATED_DIMENSION))
	{
		let fieldContainer = dimension.getFieldContainerBase();
		fieldContainer.clearAllFields();
		this.removeElement(dimension);
		this.removeDimensionNameFromTypeMaps(oFF.DimensionType.CALCULATED_DIMENSION.getName(), calculatedDimensionName);
		this.m_names.removeElement(calculatedDimensionName);
		let fields = dimension.getFields();
		if (oFF.notNull(fields))
		{
			let fieldsIterator = fields.getIterator();
			while (fieldsIterator.hasNext())
			{
				this.removeField(fieldsIterator.next());
			}
		}
	}
};
oFF.QDimensionManager.prototype.removeDimension = function(dimension)
{
	let axis = dimension.getAxis();
	this.m_names.removeElement(dimension.getName());
	this.removeDimensionNameFromTypeMaps(dimension.getDimensionType().getName(), dimension.getName());
	this.getQueryModel().getDrillManager().removeDrillOperationsByDimension(dimension);
	this.getQueryModel().getDrillManager().removeZoomDrillOperationsByDimension(dimension);
	if (oFF.notNull(axis))
	{
		axis.removeElementInternal(dimension);
	}
	this.removeMeasureReferences(dimension.getDimensionType());
	oFF.QModelComponentList.prototype.removeElement.call( this , dimension);
};
oFF.QDimensionManager.prototype.removeDimensionNameFromTypeMaps = function(dimensionTypeName, dimensionName)
{
	if (this.m_firstNameByType.containsKey(dimensionTypeName) && oFF.XString.isEqual(this.m_firstNameByType.getByKey(dimensionTypeName), dimensionName))
	{
		this.m_firstNameByType.remove(dimensionTypeName);
	}
	if (this.m_allNamesByType.containsKey(dimensionTypeName))
	{
		let dimensions = this.m_allNamesByType.getByKey(dimensionTypeName);
		if (dimensions.contains(dimensionName))
		{
			dimensions.removeElement(dimensionName);
			if (dimensions.isEmpty())
			{
				this.m_allNamesByType.remove(dimensionTypeName);
			}
		}
	}
	if (this.m_allNamesByType.containsKey(dimensionTypeName))
	{
		this.m_firstNameByType.putIfAbsent(dimensionTypeName, this.m_allNamesByType.getByKey(dimensionTypeName).get(0));
	}
};
oFF.QDimensionManager.prototype.removeElement = function(element)
{
	this.removeDimension(element);
	return element;
};
oFF.QDimensionManager.prototype.removeField = function(field)
{
	if (oFF.notNull(field) && this.m_fields.containsKey(field.getName()))
	{
		return this.m_fields.removeElement(field);
	}
	return null;
};
oFF.QDimensionManager.prototype.removeMeasureReferences = function(dimensionType)
{
	if (dimensionType === oFF.DimensionType.MEASURE_STRUCTURE)
	{
		this.m_measureStructure = null;
	}
	else if (dimensionType === oFF.DimensionType.SECONDARY_STRUCTURE)
	{
		if (oFF.notNull(this.m_nonMeasureStructure2))
		{
			this.m_nonMeasureStructure2 = null;
		}
		else if (oFF.notNull(this.m_nonMeasureStructure1))
		{
			this.m_nonMeasureStructure1 = null;
		}
	}
	else if (dimensionType === oFF.DimensionType.ACCOUNT)
	{
		this.m_accountDimension = null;
	}
};
oFF.QDimensionManager.prototype.removeSecondStructure = function()
{
	if (this.m_incompleteReferences.containsKey(oFF.QDimensionManager.CUSTOM_DIMENSION2))
	{
		this.m_incompleteReferences.remove(oFF.QDimensionManager.CUSTOM_DIMENSION2);
		this.removeMeasureReferences(oFF.DimensionType.SECONDARY_STRUCTURE);
	}
	this.m_names.removeElement(oFF.QDimensionManager.CUSTOM_DIMENSION2);
	this.removeDimensionNameFromTypeMaps(oFF.DimensionType.SECONDARY_STRUCTURE.getName(), oFF.QDimensionManager.CUSTOM_DIMENSION2);
};
oFF.QDimensionManager.prototype.setDimensionLazyLoader = function(lazyLoader)
{
	this.m_lazyLoader = lazyLoader;
};
oFF.QDimensionManager.prototype.setMeasureReferences = function(dimension)
{
	if (!dimension.isTechnicalDimension())
	{
		let dimensionType = dimension.getDimensionType();
		if (dimensionType === oFF.DimensionType.MEASURE_STRUCTURE)
		{
			if (oFF.notNull(this.m_measureStructure))
			{
				throw oFF.XException.createIllegalStateException("More than one measure structure");
			}
			this.m_measureStructure = oFF.XWeakReferenceUtil.getWeakRef(dimension);
		}
		else if (dimensionType === oFF.DimensionType.SECONDARY_STRUCTURE)
		{
			if (oFF.isNull(this.m_nonMeasureStructure1))
			{
				this.m_nonMeasureStructure1 = oFF.XWeakReferenceUtil.getWeakRef(dimension);
			}
			else
			{
				if (oFF.notNull(this.m_nonMeasureStructure2))
				{
					throw oFF.XException.createIllegalStateException("More than two Non Measure Structures");
				}
				this.m_nonMeasureStructure2 = oFF.XWeakReferenceUtil.getWeakRef(dimension);
			}
		}
		else if (dimensionType === oFF.DimensionType.ACCOUNT)
		{
			if (oFF.notNull(this.m_accountDimension))
			{
				throw oFF.XException.createIllegalStateException("More than one account dimension");
			}
			this.m_accountDimension = oFF.XWeakReferenceUtil.getWeakRef(dimension);
		}
	}
};
oFF.QDimensionManager.prototype.setupDimensionManager = function(parentNode)
{
	this.setupOlapList(parentNode, parentNode, true, null, oFF.XCollectionFactory.MAPPED_LIST, false);
	this.m_fields = oFF.XSetOfNameObject.create();
	this.m_names = oFF.XList.create();
	this.m_firstNameByType = oFF.XHashMapByString.create();
	this.m_allNamesByType = oFF.XHashMapByString.create();
	this.m_incompleteReferences = oFF.XHashMapByString.create();
};
oFF.QDimensionManager.prototype.supportsCrossCalculations = function()
{
	let queryModel = this.getQueryModel();
	return queryModel.isPlanning() && queryModel.getAccountDimension() !== null || queryModel.getDimensionByType(oFF.DimensionType.SECONDARY_STRUCTURE) !== null && !queryModel.getSystemType().isTypeOf(oFF.SystemType.BW);
};
oFF.QDimensionManager.prototype.supportsDefaultCurrencyInCrossCalculations = function()
{
	let queryModel = this.getQueryModel();
	let currencyTranslationManager = queryModel.getCurrencyTranslationManager();
	let secondaryCalculationDimension = queryModel.getSecondaryCalculationDimension();
	return oFF.notNull(currencyTranslationManager) && currencyTranslationManager.isLegacyMeasureCurrencyTranslationAccountModel() && oFF.notNull(secondaryCalculationDimension) && secondaryCalculationDimension.getStructureMember(oFF.QDimensionManager.SIGNED_DATA_OTHER) !== null;
};
oFF.QDimensionManager.prototype.supportsSignedDataInCrossCalculations = function()
{
	let queryModel = this.getQueryModel();
	return queryModel.getAccountDimension() !== null && !queryModel.hasUserDefinedMeasures();
};

oFF.QFormulaCalculatedDimension = function() {};
oFF.QFormulaCalculatedDimension.prototype = new oFF.QCalculatedDimension();
oFF.QFormulaCalculatedDimension.prototype._ff_c = "QFormulaCalculatedDimension";

oFF.QFormulaCalculatedDimension._createFormulaCalculatedDimension = function(context, calculatedDimensionName)
{
	let dim = new oFF.QFormulaCalculatedDimension();
	dim.setupFormulaCalculatedDimension(context, calculatedDimensionName);
	return dim;
};
oFF.QFormulaCalculatedDimension.createCopyOfFormulaCalculatedDimension = function(preQueryModel, originalCalculatedDimension, addDependenciesToQueryModel, deepCopySharedProperties)
{
	let calculatedDimension;
	let calcDimType = originalCalculatedDimension.getDimensionType();
	if (calcDimType === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
	{
		calculatedDimension = oFF.QFactory.createFormulaCalculatedDimension(preQueryModel, originalCalculatedDimension.getName());
		calculatedDimension.copyFormulaCalculatedDimensionAndUpdateQueryModel(originalCalculatedDimension, addDependenciesToQueryModel, deepCopySharedProperties);
	}
	else if (calcDimType === oFF.DimensionType.MEASURE_BASED_FILTER_CALCULATED_DIMENSION)
	{
		calculatedDimension = oFF.QFactory.createFilterMeasureBasedCalculatedDimension(preQueryModel, originalCalculatedDimension.getName());
		calculatedDimension.copyFormulaCalculatedDimensionAndUpdateQueryModel(originalCalculatedDimension, addDependenciesToQueryModel, deepCopySharedProperties);
	}
	else if (calcDimType === oFF.DimensionType.FILTER_ACROSS_MODELS_CALCULATED_DIMENSION)
	{
		calculatedDimension = oFF.QFactory.createFilterAcrossModelsCalculatedDimension(preQueryModel, originalCalculatedDimension.getName());
		calculatedDimension.copyFilterAcrossModelCalculatedDimension(originalCalculatedDimension, addDependenciesToQueryModel);
	}
	else
	{
		throw oFF.XException.createIllegalStateException(oFF.XStringUtils.concatenate2("Unknown calculated dimension type:", oFF.notNull(calcDimType) ? calcDimType.getName() : ""));
	}
	return calculatedDimension;
};
oFF.QFormulaCalculatedDimension.prototype.m_additionalFilterContext = null;
oFF.QFormulaCalculatedDimension.prototype.m_applyExternalFiltersFromParent = false;
oFF.QFormulaCalculatedDimension.prototype.m_currency = null;
oFF.QFormulaCalculatedDimension.prototype.m_dependentCalculatedDimensions = null;
oFF.QFormulaCalculatedDimension.prototype.m_dependentCustomMembers = null;
oFF.QFormulaCalculatedDimension.prototype.m_disableSpatialExtendedDimensions = false;
oFF.QFormulaCalculatedDimension.prototype.m_parentRootContext = null;
oFF.QFormulaCalculatedDimension.prototype.m_properties = null;
oFF.QFormulaCalculatedDimension.prototype.m_propertiesKeyRef = null;
oFF.QFormulaCalculatedDimension.prototype._setupFormulaCalculatedDimension = function(context)
{
	this.m_properties = oFF.QFormulaCalcDimProperties._createFormulaCalcDimProperties(context, this);
	this.m_dependentCustomMembers = oFF.XList.create();
	this.m_dependentCalculatedDimensions = oFF.XList.create();
	this.m_applyExternalFiltersFromParent = false;
	oFF.QCalculatedDimension.prototype.setupCalculatedDimension.call( this , context);
	this.setDimensionType(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION);
	this.setJoinType(oFF.JoinType.LEFT_OUTER);
	this.m_additionalFilterContext = oFF.QFactory.createFilterExpression(context, this.m_properties);
	this.m_parentRootContext = context;
};
oFF.QFormulaCalculatedDimension.prototype.addAdditionalAggregationDimension = function(dimensionName, hierarchyName, activateHierarchy)
{
	this.getProperties().addAdditionalAggregationDimension(dimensionName, hierarchyName, activateHierarchy);
};
oFF.QFormulaCalculatedDimension.prototype.addAggregationFieldName = function(fieldName)
{
	this.getProperties().addAggregationFieldName(fieldName);
};
oFF.QFormulaCalculatedDimension.prototype.addDependencies = function(context, messageManager)
{
	this.addDependenciesInternal(context, messageManager, oFF.XHashSetOfString.create());
};
oFF.QFormulaCalculatedDimension.prototype.addDependenciesInternal = function(context, messageManager, dependencyGenerationStack)
{
	if (dependencyGenerationStack.contains(this.getName()))
	{
		messageManager.addError(oFF.ErrorCodes.MEASURE_CYCLICAL_DEPENDENCY, oFF.XStringUtils.concatenate3("calculated dimension ", this.getName(), " contains cycles"));
		return;
	}
	dependencyGenerationStack.add(this.getName());
	let fieldIterator = this.getFieldIterator();
	let dependentAttributeNames = oFF.XHashSetOfString.create();
	while (fieldIterator.hasNext())
	{
		let fieldCalcDim = fieldIterator.next();
		let userDefinedMeasure = fieldCalcDim.getCrossCalculationMeasure();
		if (oFF.notNull(userDefinedMeasure))
		{
			this.addDependentMeasuresInternal(userDefinedMeasure, context, true);
		}
		let formulaItem = fieldCalcDim.getFormulaItem();
		let formulaItemInfo = oFF.FormulaItemUtils.getFieldNamesFromFormula(formulaItem);
		let memberNames = formulaItemInfo.getMemberNames();
		if (oFF.notNull(memberNames))
		{
			let memberNamesIter = memberNames.getIterator();
			while (memberNamesIter.hasNext())
			{
				let memberName = memberNamesIter.next();
				this.addDependentMeasuresInternal(memberName, context, false);
			}
		}
		dependentAttributeNames.addAll(formulaItemInfo.getAttributeNames());
	}
	let dependentMeasuresIter = this.m_dependentCustomMembers.getIterator();
	while (dependentMeasuresIter.hasNext())
	{
		let dependentMeasure = dependentMeasuresIter.next();
		dependentAttributeNames.addAll(dependentMeasure.getTopLevelDependentFieldNames(context));
	}
	let filterContext = this.getFilterContext();
	if (filterContext.isComplexFilter())
	{
		dependentAttributeNames.addAll(oFF.QFilterUtil.getFieldNamesFromFilter(filterContext.getComplexRoot()));
	}
	else
	{
		dependentAttributeNames.addAll(oFF.QFilterUtil.getFieldNamesFromFilter(filterContext.getCartesianProduct()));
	}
	let layeredFilters = this.getLayeredFilters().getIterator();
	while (layeredFilters.hasNext())
	{
		let layeredFilter = layeredFilters.next();
		if (layeredFilter.isComplexFilter())
		{
			dependentAttributeNames.addAll(oFF.QFilterUtil.getFieldNamesFromFilter(layeredFilter.getComplexRoot()));
		}
		else
		{
			dependentAttributeNames.addAll(oFF.QFilterUtil.getFieldNamesFromFilter(layeredFilter.getCartesianProduct()));
		}
	}
	let additionalFilterContext = this.getAdditionalFilterContext();
	dependentAttributeNames.addAll(oFF.QFilterUtil.getFieldNamesFromFilter(additionalFilterContext.getFilterRootElement()));
	let attributeNamesIter = dependentAttributeNames.getIterator();
	while (attributeNamesIter.hasNext())
	{
		let attributeName = attributeNamesIter.next();
		this.addDependentAttributesInternal(attributeName, context, messageManager, dependencyGenerationStack);
	}
	dependencyGenerationStack.removeElement(this.getName());
};
oFF.QFormulaCalculatedDimension.prototype.addDependentAttributesInternal = function(attributeName, context, messageManager, dependencyGenerationStack)
{
	let field = context.getQueryModel().getFieldByNameOrAlias(attributeName);
	if (oFF.isNull(field) || field.getDimension().getDimensionType().isTypeOf(oFF.DimensionType.CALCULATED_DIMENSION))
	{
		let properties = this.getOlapEnv().getClientQueryObjectManager().getFormulaCalcDimPropertiesByFieldName(attributeName, this.getQueryManager().getClientQueryObjectStorageName());
		if (oFF.notNull(properties))
		{
			let newDependentCalcDim = oFF.QFactory.createFormulaCalculatedDimension(context.getQueryModel(), properties.getName());
			newDependentCalcDim.setPropertiesKeyRef(properties);
			newDependentCalcDim.addDependenciesInternal(context, messageManager, dependencyGenerationStack);
			this.addDependentCalculatedDimension(newDependentCalcDim);
		}
		else if (oFF.notNull(field) && field.getDimension() !== null && field.getDimension().getDimensionType().isTypeOf(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION))
		{
			this.addDependentCalculatedDimension(field.getDimension());
		}
	}
};
oFF.QFormulaCalculatedDimension.prototype.addDependentCalculatedDimension = function(calculatedDimension)
{
	let dependentCalculatedDimensionsIter = this.m_dependentCalculatedDimensions.getIterator();
	let dependentCalcDimExists = false;
	while (dependentCalculatedDimensionsIter.hasNext())
	{
		let dependentCalculatedDimension = dependentCalculatedDimensionsIter.next();
		if (oFF.XString.isEqual(dependentCalculatedDimension.getName(), calculatedDimension.getName()))
		{
			dependentCalcDimExists = true;
			break;
		}
	}
	if (!dependentCalcDimExists)
	{
		this.m_dependentCalculatedDimensions.add(calculatedDimension);
	}
};
oFF.QFormulaCalculatedDimension.prototype.addDependentCustomMember = function(customMember)
{
	this.m_dependentCustomMembers.add(customMember);
};
oFF.QFormulaCalculatedDimension.prototype.addDependentMeasuresInternal = function(memberName, context, isSecondaryStructure)
{
	let clientQueryObjectManager = context.getOlapEnv().getClientQueryObjectManager();
	let structureMember;
	if (isSecondaryStructure)
	{
		structureMember = context.getQueryModel().getSecondaryCalculationDimension().getStructureMember(memberName);
	}
	else
	{
		structureMember = context.getQueryModel().getPrimaryCalculationDimension().getStructureMember(memberName);
	}
	if (oFF.notNull(structureMember) && !structureMember.getMemberType().isCustomMember())
	{
		return;
	}
	for (let i = 0; i < this.m_dependentCustomMembers.size(); i++)
	{
		if (oFF.XString.isEqual(this.m_dependentCustomMembers.get(i).getAliasOrMemberName(), memberName))
		{
			return;
		}
	}
	if (oFF.isNull(structureMember))
	{
		structureMember = clientQueryObjectManager.getStructuredMember(memberName, this.getQueryManager().getClientQueryObjectStorageName(), !isSecondaryStructure);
	}
	if (oFF.notNull(structureMember))
	{
		this.addDependentCustomMember(structureMember);
		let nestedDependentMemberNames = structureMember.getNestedDependentMemberNames(context, null, false);
		if (oFF.notNull(nestedDependentMemberNames))
		{
			let nestedDependentMemberNamesIter = nestedDependentMemberNames.getIterator();
			while (nestedDependentMemberNamesIter.hasNext())
			{
				let nestedDependentMemberName = nestedDependentMemberNamesIter.next();
				this.addDependentMeasuresInternal(nestedDependentMemberName, context, isSecondaryStructure);
			}
		}
	}
};
oFF.QFormulaCalculatedDimension.prototype.addFieldMapping = oFF.noSupport;
oFF.QFormulaCalculatedDimension.prototype.addFieldMappingByString = oFF.noSupport;
oFF.QFormulaCalculatedDimension.prototype.addFieldToJoinFields = function(joinFields, field, shouldJoinOnDimensionForNonKey, uniqueJoinFieldNames)
{
	if (oFF.isNull(field))
	{
		return;
	}
	let parentDimension = field.getDimension();
	let joinFieldsToAdd = oFF.XList.create();
	if (oFF.notNull(parentDimension) && !parentDimension.getDimensionType().isTypeOf(oFF.DimensionType.CALCULATED_DIMENSION))
	{
		let isCompoundDimension = parentDimension.isCompound();
		if (field.isKeyField() || isCompoundDimension && field.isDefaultTextField())
		{
			if (isCompoundDimension)
			{
				let partKeysIterator = parentDimension.getKeyAttributesNames().getIterator();
				while (partKeysIterator.hasNext())
				{
					let partKeyDimension = this.getQueryModel().getDimensionByName(partKeysIterator.next());
					if (oFF.notNull(partKeyDimension))
					{
						joinFieldsToAdd.add(oFF.QFieldNamePair.create(partKeyDimension.getName(), partKeyDimension.getName()));
					}
				}
			}
			else
			{
				joinFieldsToAdd.add(oFF.QFieldNamePair.create(parentDimension.getName(), field.isHierarchyKeyField() ? parentDimension.getFlatKeyField().getName() : field.getName()));
			}
		}
		else
		{
			if (shouldJoinOnDimensionForNonKey)
			{
				joinFieldsToAdd.add(oFF.QFieldNamePair.create(parentDimension.getName(), parentDimension.getName()));
			}
			else
			{
				let localeFieldName = field.getAliasName();
				if (oFF.XStringUtils.isNullOrEmpty(localeFieldName))
				{
					localeFieldName = parentDimension.getName();
				}
				joinFieldsToAdd.add(oFF.QFieldNamePair.create(localeFieldName, field.getName()));
			}
		}
	}
	oFF.XCollectionUtils.forEach(joinFieldsToAdd, (joinField) => {
		if (!uniqueJoinFieldNames.contains(joinField.getLocaleFieldName()))
		{
			joinFields.add(joinField);
		}
	});
};
oFF.QFormulaCalculatedDimension.prototype.addFormulaFieldToJoinFields = function(uniqueJoinFieldNames, joinFields, calcDimField)
{
	let formulaItemInfo = oFF.FormulaItemUtils.getFieldNamesFromFormula(calcDimField.getFormulaItem());
	let formulaFieldNames = formulaItemInfo.getAttributeNames();
	let formulaFieldIterator = formulaFieldNames.getIterator();
	while (formulaFieldIterator.hasNext())
	{
		let formulaField = formulaFieldIterator.next();
		let field = this.getQueryModel().getFieldByNameOrAlias(formulaField);
		if (oFF.notNull(field))
		{
			this.addFieldToJoinFields(joinFields, field, false, uniqueJoinFieldNames);
		}
	}
};
oFF.QFormulaCalculatedDimension.prototype.addJoinField = oFF.noSupport;
oFF.QFormulaCalculatedDimension.prototype.addJoinFieldByString = oFF.noSupport;
oFF.QFormulaCalculatedDimension.prototype.addNewDependentMeasure = function(name, memberType, measureDimension)
{
	let newMeasure = oFF.QStructureMember.createMeasure(memberType, this.getContext(), measureDimension);
	if (measureDimension.getDimensionType() === oFF.DimensionType.ACCOUNT)
	{
		newMeasure.setAliasName(name);
	}
	else
	{
		newMeasure.setName(name);
	}
	this.m_dependentCustomMembers.add(newMeasure);
	return newMeasure;
};
oFF.QFormulaCalculatedDimension.prototype.addNewFormulaCalcField = function(presentationType, name)
{
	let newField = this.getProperties().addNewFormulaCalcField(presentationType, name);
	this.getFieldContainerBase().addField(newField);
	this.addFieldToParent(newField);
	return newField;
};
oFF.QFormulaCalculatedDimension.prototype.clearDependentCalculatedDimensions = function()
{
	let calcDimsToRelease = oFF.XList.create();
	for (let i = 0; i < this.m_dependentCalculatedDimensions.size(); i++)
	{
		let calcDim = this.m_dependentCalculatedDimensions.get(i);
		if (calcDim.getTagging().containsKey(oFF.QTransientConstants.TAG_IS_TRANSIENT))
		{
			calcDimsToRelease.add(calcDim);
		}
	}
	oFF.XCollectionUtils.releaseEntriesFromCollection(calcDimsToRelease);
	this.m_dependentCalculatedDimensions.clear();
};
oFF.QFormulaCalculatedDimension.prototype.clearDependentCustomMembers = function()
{
	this.m_dependentCustomMembers.clear();
};
oFF.QFormulaCalculatedDimension.prototype.clearFieldMappings = oFF.noSupport;
oFF.QFormulaCalculatedDimension.prototype.clearJoinFields = oFF.noSupport;
oFF.QFormulaCalculatedDimension.prototype.copyFormulaCalculatedDimensionAndUpdateQueryModel = function(other, addDependenciesToQueryModel, deepCopySharedProperties)
{
	oFF.QCalculatedDimension.prototype.copyCalculatedDimension.call( this , other);
	let originalPropertiesKeyRef = other.m_propertiesKeyRef;
	if (oFF.notNull(originalPropertiesKeyRef))
	{
		if (deepCopySharedProperties)
		{
			let clientQueryObjectManager = this.getOlapEnv().getClientQueryObjectManager();
			let storageName = originalPropertiesKeyRef.getStorageName();
			if (oFF.XStringUtils.isNullOrEmpty(storageName))
			{
				storageName = this.getQueryManager().getClientQueryObjectStorageName();
			}
			let properties = clientQueryObjectManager.getFormulaCalcDimProperties(originalPropertiesKeyRef.getStorageObjectName(), storageName);
			if (oFF.notNull(properties))
			{
				this.m_properties.copyFrom(properties, null);
			}
			else
			{
				this.m_properties.copyFrom(other.m_properties, null);
			}
		}
		else
		{
			this.m_propertiesKeyRef = originalPropertiesKeyRef;
		}
	}
	else
	{
		this.m_properties.copyFrom(other.m_properties, null);
	}
	let dependentCalculatedDimensionsIter = other.m_dependentCalculatedDimensions.getIterator();
	let queryModel = this.getQueryModel();
	while (dependentCalculatedDimensionsIter.hasNext())
	{
		let dependentCalculatedDimension = dependentCalculatedDimensionsIter.next();
		let copyFormulaCalculatedDimension = queryModel.getDimensionByName(dependentCalculatedDimension.getName());
		if (oFF.isNull(copyFormulaCalculatedDimension))
		{
			copyFormulaCalculatedDimension = oFF.QFormulaCalculatedDimension.createCopyOfFormulaCalculatedDimension(queryModel, dependentCalculatedDimension, false, false);
			if (addDependenciesToQueryModel)
			{
				queryModel.addDimension(copyFormulaCalculatedDimension);
			}
		}
		else
		{
			copyFormulaCalculatedDimension.copyFrom(dependentCalculatedDimension, null);
		}
		this.m_dependentCalculatedDimensions.add(copyFormulaCalculatedDimension);
	}
	let dependentCustomMembersIter = other.m_dependentCustomMembers.getIterator();
	while (dependentCustomMembersIter.hasNext())
	{
		let dependentCustomMember = dependentCustomMembersIter.next();
		let originalDimension = dependentCustomMember.getDimension();
		let measureDimension = queryModel.getDimensionByName(originalDimension.getName());
		let newStructureMember;
		let existingMember;
		if (dependentCustomMember.isModelDefinedMember())
		{
			existingMember = measureDimension.getStructureMember(dependentCustomMember.getName());
			if (oFF.isNull(existingMember))
			{
				newStructureMember = measureDimension.getKeyRefStorage().get(dependentCustomMember.getStorageName(), dependentCustomMember.getStorageGroupName(), dependentCustomMember.getStorageObjectName());
				if (oFF.notNull(newStructureMember))
				{
					this.addDependentCustomMember(newStructureMember);
				}
			}
			else
			{
				this.addDependentCustomMember(existingMember);
				continue;
			}
		}
		else
		{
			newStructureMember = this.addNewDependentMeasure(dependentCustomMember.getName(), dependentCustomMember.getMemberType(), measureDimension);
			oFF.QStructureMember.copyMeasure(newStructureMember, dependentCustomMember);
			existingMember = measureDimension.getStructureMemberByAliasOrMember(dependentCustomMember.getAliasOrMemberName());
			if (oFF.notNull(existingMember))
			{
				measureDimension.removeMeasure(existingMember.getName());
			}
		}
		if (addDependenciesToQueryModel && measureDimension.getStructureMemberByAliasOrMember(dependentCustomMember.getAliasOrMemberName()) === null)
		{
			measureDimension.addMeasure(newStructureMember);
		}
	}
	this.m_applyExternalFiltersFromParent = other.m_applyExternalFiltersFromParent;
	this.m_currency = other.m_currency;
	this.m_disableSpatialExtendedDimensions = other.m_disableSpatialExtendedDimensions;
	this.m_additionalFilterContext.copyFrom(other.m_additionalFilterContext, null);
	this.m_parentRootContext = other.m_parentRootContext;
};
oFF.QFormulaCalculatedDimension.prototype.copyFromInternal = function(other, flags)
{
	this.copyFormulaCalculatedDimensionAndUpdateQueryModel(other, false, false);
};
oFF.QFormulaCalculatedDimension.prototype.destroyTransientObjects = function(context)
{
	if (context.getQueryModel().getPreQueryByName(this.getPreQueryName()) !== null)
	{
		context.getQueryModel().removePreQueryByName(this.getPreQueryName());
		let olapEnv = this.getOlapEnv();
		let preQuery = olapEnv.removePrequery(this.getOlapEnvPreQueryCacheKey(context));
		let preQueryQueryManager = preQuery.getQueryManager();
		preQueryQueryManager.setActiveResultSetContainer(null);
		oFF.XObjectExt.release(preQueryQueryManager);
	}
	if (this.getTagging().containsKey(oFF.QStateConstants.TAG_HAS_TRANSIENT_DEPS))
	{
		this.clearDependentCalculatedDimensions();
		this.clearDependentCustomMembers();
	}
};
oFF.QFormulaCalculatedDimension.prototype.generateTransientObjects = function(context, messageManager)
{
	let olapEnv = this.getOlapEnv();
	let preQuery = olapEnv.getPrequery(this.getOlapEnvPreQueryCacheKey(context));
	if (oFF.isNull(preQuery))
	{
		if (this.m_dependentCalculatedDimensions.size() === 0 && this.m_dependentCustomMembers.size() === 0 || this.getDimensionType() === oFF.DimensionType.MEASURE_BASED_FILTER_CALCULATED_DIMENSION)
		{
			this.getTagging().put(oFF.QStateConstants.TAG_HAS_TRANSIENT_DEPS, "");
			let addDependenciesErrors = oFF.MessageManager.createMessageManagerExt(this.getSession());
			this.addDependencies(context, addDependenciesErrors);
			messageManager.addAllMessages(addDependenciesErrors);
			if (addDependenciesErrors.hasErrors())
			{
				return;
			}
		}
	}
	let batchRequestManager = context.getQueryManager().getConnection().getBatchRequestManager();
	if (oFF.notNull(batchRequestManager))
	{
		if (batchRequestManager.containsPreQueryName(this.getPreQueryName()))
		{
			return;
		}
	}
	if (oFF.isNull(preQuery))
	{
		preQuery = oFF.CalculatedDimensionPrequeryBuilder.buildCalculatedDimensionPreQuery(context, this);
		olapEnv.addPrequery(this.getOlapEnvPreQueryCacheKey(context), preQuery);
	}
	if (context.getQueryModel().getPreQueryByName(this.getPreQueryName()) === null)
	{
		context.getQueryModel().addPreQueryWithName(preQuery, this.getPreQueryName());
	}
};
oFF.QFormulaCalculatedDimension.prototype.generateUniquePreQueryCacheKey = function(calcDimProperties, context, cacheKey)
{
	let linkedFilters = context.getQueryModel().getFilter().getLinkedFilters();
	let additionalFilterContext = this.getAdditionalFilterContext();
	let updatedCacheKey = cacheKey;
	if (!calcDimProperties.isApplyAdditionalFilterContext())
	{
		let externalFilterKeysList = linkedFilters.getKeysAsReadOnlyList();
		for (let i = 0; i < calcDimProperties.getFilterIdsToApply().size(); i++)
		{
			let externalFilterId = calcDimProperties.getFilterIdsToApply().get(i);
			if (oFF.notNull(externalFilterKeysList) && externalFilterKeysList.size() > 0)
			{
				for (let j = 0; j < externalFilterKeysList.size(); j++)
				{
					let filterKey = externalFilterKeysList.get(j);
					if (oFF.XStringUtils.containsString(filterKey, externalFilterId, false))
					{
						updatedCacheKey = oFF.XStringUtils.concatenate3(updatedCacheKey, "|", externalFilterId);
					}
				}
			}
		}
	}
	else if (additionalFilterContext.getUniqueId() !== null && additionalFilterContext.getFilterRootElement() !== null)
	{
		updatedCacheKey = oFF.XStringUtils.concatenate3(updatedCacheKey, "|", additionalFilterContext.getUniqueId());
	}
	let calcDimDependencies = this.getDependentCalculatedDimensions();
	let calcDimIterator = calcDimDependencies.getIterator();
	while (calcDimIterator.hasNext())
	{
		let depCalcDim = calcDimIterator.next();
		updatedCacheKey = depCalcDim.generateUniquePreQueryCacheKey(depCalcDim.getProperties(), context, updatedCacheKey);
	}
	let queryModel = context.getQueryModel();
	let accountDimension = queryModel.getAccountDimension();
	if (oFF.notNull(accountDimension) && accountDimension.isHierarchyAssignedAndActive() && calcDimProperties.isMeasureBased() && oFF.HierarchyCatalogUtil.getHierarchyItems(accountDimension.getHierarchies()).size() > 1)
	{
		updatedCacheKey = oFF.XStringUtils.concatenate3(updatedCacheKey, "|", accountDimension.getHierarchyName());
	}
	return updatedCacheKey;
};
oFF.QFormulaCalculatedDimension.prototype.getAdditionalAggregationDimensions = function()
{
	return this.getProperties().getAdditionalAggregationDimensions();
};
oFF.QFormulaCalculatedDimension.prototype.getAdditionalFilterContext = function()
{
	return this.m_additionalFilterContext;
};
oFF.QFormulaCalculatedDimension.prototype.getAggregationFieldNames = function()
{
	return this.getProperties().getAggregationFieldNames();
};
oFF.QFormulaCalculatedDimension.prototype.getCurrency = function()
{
	return this.m_currency;
};
oFF.QFormulaCalculatedDimension.prototype.getDependentCalculatedDimensions = function()
{
	return this.m_dependentCalculatedDimensions;
};
oFF.QFormulaCalculatedDimension.prototype.getDependentCustomMembers = function()
{
	return this.m_dependentCustomMembers;
};
oFF.QFormulaCalculatedDimension.prototype.getDisplayDescription = function()
{
	let displayDescription = this.getProperties().getDisplayDescription();
	return oFF.XStringUtils.isNotNullAndNotEmpty(displayDescription) ? displayDescription : oFF.QCalculatedDimension.prototype.getDisplayDescription.call( this );
};
oFF.QFormulaCalculatedDimension.prototype.getDisplayKeyField = function()
{
	return this.getFlatDisplayKeyField();
};
oFF.QFormulaCalculatedDimension.prototype.getDisplayName = function()
{
	let displayName = this.getProperties().getDisplayName();
	return oFF.XStringUtils.isNotNullAndNotEmpty(displayName) ? displayName : this.getName();
};
oFF.QFormulaCalculatedDimension.prototype.getFieldByName = function(name)
{
	return this.getFormulaCalcFields().getFieldByName(name);
};
oFF.QFormulaCalculatedDimension.prototype.getFieldByNameOrAlias = function(name)
{
	return this.getFormulaCalcFields().getFieldByNameOrAlias(name);
};
oFF.QFormulaCalculatedDimension.prototype.getFieldByPresentationType = function(presentationType)
{
	let field;
	if (presentationType === oFF.PresentationType.ACTIVE_KEY)
	{
		field = this.getKeyField();
	}
	else if (presentationType === oFF.PresentationType.ACTIVE_DISPLAY_KEY)
	{
		field = this.getDisplayKeyField();
	}
	else if (presentationType === oFF.PresentationType.ACTIVE_TEXT)
	{
		field = this.getTextField();
	}
	else
	{
		field = this.getFormulaCalcFields().getFirstFieldByType(presentationType);
	}
	return field;
};
oFF.QFormulaCalculatedDimension.prototype.getFieldIterator = function()
{
	return this.getFormulaCalcFields().getIterator();
};
oFF.QFormulaCalculatedDimension.prototype.getFieldMappings = function()
{
	let fieldMappings = oFF.XList.create();
	let attributeNames = this.getFieldIterator();
	while (attributeNames.hasNext())
	{
		let calculatedAttribute = attributeNames.next();
		fieldMappings.add(oFF.QFieldNamePair.create(calculatedAttribute.getName(), calculatedAttribute.getName()));
	}
	return fieldMappings;
};
oFF.QFormulaCalculatedDimension.prototype.getFields = function()
{
	return this.getFormulaCalcFields();
};
oFF.QFormulaCalculatedDimension.prototype.getFieldsExt = function(context)
{
	let fieldList = oFF.QCalculatedDimension.prototype.getFieldsExt.call( this , context);
	if (!oFF.XCollectionUtils.hasElements(fieldList) && this.getDimensionType() === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION && context === oFF.QContextType.RESULT_SET)
	{
		fieldList = this.getFormulaCalcFields();
	}
	return fieldList;
};
oFF.QFormulaCalculatedDimension.prototype.getFilterContext = function()
{
	return this.getProperties().getFilterContext();
};
oFF.QFormulaCalculatedDimension.prototype.getFirstFieldByType = function(type)
{
	return this.getFormulaCalcFields().getFirstFieldByType(type);
};
oFF.QFormulaCalculatedDimension.prototype.getFlatDisplayKeyField = function()
{
	let displayKeyField = this.getFormulaCalcFields().getFirstFieldByType(oFF.PresentationType.DISPLAY_KEY);
	if (oFF.isNull(displayKeyField))
	{
		displayKeyField = this.getFlatKeyField();
	}
	return displayKeyField;
};
oFF.QFormulaCalculatedDimension.prototype.getFlatFieldsList = function()
{
	return this.getFormulaCalcFields();
};
oFF.QFormulaCalculatedDimension.prototype.getFlatKeyField = function()
{
	return this.getFormulaCalcFields().getFirstFieldByType(oFF.PresentationType.KEY);
};
oFF.QFormulaCalculatedDimension.prototype.getFlatTextField = function()
{
	return this.getFormulaCalcFields().getFirstFieldByType(oFF.PresentationType.TEXT);
};
oFF.QFormulaCalculatedDimension.prototype.getFormulaCalcFields = function()
{
	let fieldList = null;
	if (oFF.notNull(this.m_propertiesKeyRef))
	{
		let clientQueryObjectManager = this.getOlapEnv().getClientQueryObjectManager();
		fieldList = clientQueryObjectManager.getFormulaCalcDimFieldList(this.getName(), this.getQueryManager().getClientQueryObjectStorageName());
	}
	if (oFF.isNull(fieldList))
	{
		fieldList = this.getProperties().getFormulaCalcFields();
	}
	return fieldList;
};
oFF.QFormulaCalculatedDimension.prototype.getHierarchyNavigationField = function()
{
	let field = oFF.QCalculatedDimension.prototype.getHierarchyNavigationField.call( this );
	return oFF.notNull(field) ? field : this.getKeyField();
};
oFF.QFormulaCalculatedDimension.prototype.getJoinFields = function()
{
	let uniqueJoinFieldNames = oFF.XHashSetOfString.create();
	let joinFields = oFF.XList.create();
	if (this.getAggregationFieldNames().size() === 0)
	{
		let calcDimKeyField = this.getFieldByPresentationType(oFF.PresentationType.KEY);
		if (oFF.notNull(calcDimKeyField))
		{
			this.addFormulaFieldToJoinFields(uniqueJoinFieldNames, joinFields, calcDimKeyField);
		}
		else
		{
			let calcDimFieldsIter = this.getFieldIterator();
			while (calcDimFieldsIter.hasNext())
			{
				let calcDimField = calcDimFieldsIter.next();
				this.addFormulaFieldToJoinFields(uniqueJoinFieldNames, joinFields, calcDimField);
			}
		}
		let dependentCalcDimIter = this.m_dependentCalculatedDimensions.getIterator();
		while (dependentCalcDimIter.hasNext())
		{
			let dependentCalcDim = dependentCalcDimIter.next();
			let dependentCalcDimJoinFields = dependentCalcDim.getJoinFields();
			let dependentCalcDimJoinFieldsIter = dependentCalcDimJoinFields.getIterator();
			while (dependentCalcDimJoinFieldsIter.hasNext())
			{
				let fieldNamePair = dependentCalcDimJoinFieldsIter.next();
				if (!uniqueJoinFieldNames.contains(fieldNamePair.getLocaleFieldName()))
				{
					joinFields.add(fieldNamePair);
					uniqueJoinFieldNames.add(fieldNamePair.getLocaleFieldName());
				}
			}
		}
	}
	let aggregationFieldNames = this.getAggregationFieldNames().getIterator();
	while (aggregationFieldNames.hasNext())
	{
		let aggregationFieldName = aggregationFieldNames.next();
		let aggregationField = this.getQueryModel().getFieldByNameOrAlias(aggregationFieldName);
		this.addFieldToJoinFields(joinFields, aggregationField, true, uniqueJoinFieldNames);
	}
	return joinFields;
};
oFF.QFormulaCalculatedDimension.prototype.getKeyField = function()
{
	return this.getFormulaCalcFields().getFirstFieldByType(oFF.PresentationType.KEY);
};
oFF.QFormulaCalculatedDimension.prototype.getKeyFieldExt = function(context)
{
	return this.getFlatKeyField();
};
oFF.QFormulaCalculatedDimension.prototype.getLayeredFilters = function()
{
	return this.getProperties().getLayeredFilters();
};
oFF.QFormulaCalculatedDimension.prototype.getOlapEnvPreQueryCacheKey = function(context)
{
	return oFF.XStringUtils.concatenate3(this.getPreQueryName(), "|", context.getQueryManager().getInstanceId());
};
oFF.QFormulaCalculatedDimension.prototype.getParentRootContext = function()
{
	return this.m_parentRootContext;
};
oFF.QFormulaCalculatedDimension.prototype.getPreQueryName = function()
{
	return this.getUniquePreQueryCacheKey();
};
oFF.QFormulaCalculatedDimension.prototype.getProperties = function()
{
	let properties = this.getSharedProperties();
	if (oFF.notNull(properties))
	{
		return properties;
	}
	return this.m_properties;
};
oFF.QFormulaCalculatedDimension.prototype.getPropertiesKeyRef = function()
{
	return this.m_propertiesKeyRef;
};
oFF.QFormulaCalculatedDimension.prototype.getSharedProperties = function()
{
	if (oFF.notNull(this.m_propertiesKeyRef))
	{
		let clientQueryObjectManager = this.getOlapEnv().getClientQueryObjectManager();
		return clientQueryObjectManager.getClientQueryObjectByKeyRef(this.m_propertiesKeyRef);
	}
	return null;
};
oFF.QFormulaCalculatedDimension.prototype.getText = function()
{
	return this.getProperties().getText() !== null ? this.getProperties().getText() : oFF.QCalculatedDimension.prototype.getText.call( this );
};
oFF.QFormulaCalculatedDimension.prototype.getTextField = function()
{
	return this.getFormulaCalcFields().getFirstFieldByType(oFF.PresentationType.TEXT);
};
oFF.QFormulaCalculatedDimension.prototype.getUniquePreQueryCacheKey = function()
{
	let context = this.getParentRootContext();
	let cacheKey = this.getName();
	if (oFF.isNull(context))
	{
		context = this.getContext();
	}
	let updatedCacheKey = this.generateUniquePreQueryCacheKey(this.getProperties(), context, cacheKey);
	if (oFF.XString.isEqual(updatedCacheKey, cacheKey))
	{
		return updatedCacheKey;
	}
	else
	{
		return oFF.XSha1.createSHA1(updatedCacheKey);
	}
};
oFF.QFormulaCalculatedDimension.prototype.isApplyParentExternalFilters = function()
{
	return this.m_applyExternalFiltersFromParent;
};
oFF.QFormulaCalculatedDimension.prototype.isDisableSpatialExtendedDimensions = function()
{
	return this.m_disableSpatialExtendedDimensions;
};
oFF.QFormulaCalculatedDimension.prototype.processValueHelp = function(syncType, listener, customIdentifier)
{
	let messageManager = oFF.MessageManager.createMessageManagerExt(this.getSession());
	this.generateTransientObjects(this.getQueryModel(), messageManager);
	if (messageManager.hasErrors())
	{
		this.destroyTransientObjects(this.getQueryModel());
		throw oFF.XException.createRuntimeException(messageManager.getErrors().get(0).getText());
	}
	let result = oFF.QCalculatedDimension.prototype.processValueHelp.call( this , syncType, listener, customIdentifier);
	this.destroyTransientObjects(this.getQueryModel());
	return result;
};
oFF.QFormulaCalculatedDimension.prototype.releaseObject = function()
{
	if (oFF.notNull(this.m_propertiesKeyRef))
	{
		this.getResultSetFields().clear();
		this.getSelectorFields().clear();
	}
	this.m_properties = oFF.XObjectExt.release(this.m_properties);
	this.m_dependentCustomMembers = oFF.XObjectExt.release(this.m_dependentCustomMembers);
	this.m_dependentCalculatedDimensions = oFF.XObjectExt.release(this.m_dependentCalculatedDimensions);
	this.m_currency = null;
	this.m_propertiesKeyRef = null;
	this.m_disableSpatialExtendedDimensions = false;
	this.m_additionalFilterContext = oFF.XObjectExt.release(this.m_additionalFilterContext);
	this.m_parentRootContext = null;
	oFF.QCalculatedDimension.prototype.releaseObject.call( this );
};
oFF.QFormulaCalculatedDimension.prototype.removeAdditionalAggregationDimensionByName = function(dimensionName)
{
	this.getProperties().removeAdditionalAggregationDimensionByName(dimensionName);
};
oFF.QFormulaCalculatedDimension.prototype.removeAggregationFieldName = function(fieldName)
{
	this.getProperties().removeAggregationFieldName(fieldName);
};
oFF.QFormulaCalculatedDimension.prototype.removeDependentCalculatedDimensionByName = function(dimensionName)
{
	for (let i = this.m_dependentCalculatedDimensions.size() - 1; i >= 0; i--)
	{
		if (oFF.XString.isEqual(this.m_dependentCalculatedDimensions.get(i).getName(), dimensionName))
		{
			this.m_dependentCalculatedDimensions.removeAt(i);
		}
	}
};
oFF.QFormulaCalculatedDimension.prototype.removeDependentCustomMemberByName = function(memberName)
{
	for (let i = this.m_dependentCustomMembers.size() - 1; i >= 0; i--)
	{
		if (oFF.XString.isEqual(this.m_dependentCustomMembers.get(i).getName(), memberName))
		{
			this.m_dependentCustomMembers.removeAt(i);
		}
	}
};
oFF.QFormulaCalculatedDimension.prototype.removeFieldMappingAt = oFF.noSupport;
oFF.QFormulaCalculatedDimension.prototype.removeFormulaCalcFieldByName = function(name)
{
	this.getFieldContainerBase().removeFieldByName(name);
	this.getProperties().removeFormulaCalcFieldByName(name);
};
oFF.QFormulaCalculatedDimension.prototype.removeJoinFieldAt = oFF.noSupport;
oFF.QFormulaCalculatedDimension.prototype.reset = function(skipClearProperties)
{
	if (!skipClearProperties && this.getSharedProperties() === null)
	{
		this.getProperties().reset();
	}
	this.m_dependentCustomMembers.clear();
	this.m_dependentCalculatedDimensions.clear();
	this.m_applyExternalFiltersFromParent = false;
	this.m_currency = null;
	this.getFieldContainerBase().clearAllFields();
	if (this.m_additionalFilterContext.isCartesianProduct())
	{
		this.m_additionalFilterContext.getCartesianProduct().clear();
	}
	else if (this.m_additionalFilterContext.isComplexFilter())
	{
		this.m_additionalFilterContext.setComplexRoot(null);
	}
	this.m_parentRootContext = null;
};
oFF.QFormulaCalculatedDimension.prototype.setApplyParentExternalFilters = function(applyExtFilters)
{
	this.m_applyExternalFiltersFromParent = applyExtFilters;
};
oFF.QFormulaCalculatedDimension.prototype.setCurrency = function(currency)
{
	this.m_currency = currency;
};
oFF.QFormulaCalculatedDimension.prototype.setDisableSpatialExtendedDimensions = function(disableSpatialExtendedDimensions)
{
	this.m_disableSpatialExtendedDimensions = disableSpatialExtendedDimensions;
};
oFF.QFormulaCalculatedDimension.prototype.setPreQueryName = oFF.noSupport;
oFF.QFormulaCalculatedDimension.prototype.setPropertiesKeyRef = function(keyRef)
{
	this.m_propertiesKeyRef = keyRef;
	let clientQueryObjectManager = this.getOlapEnv().getClientQueryObjectManager();
	let properties = clientQueryObjectManager.getClientQueryObjectIncludeReleasedByKeyRef(this.m_propertiesKeyRef, this.getQueryManager().getClientQueryObjectStorageName());
	if (oFF.notNull(properties))
	{
		properties.addSecondaryParent(this);
	}
};
oFF.QFormulaCalculatedDimension.prototype.setupFormulaCalculatedDimension = function(context, calculatedDimensionName)
{
	this.setName(calculatedDimensionName);
	this.setupDimension(context, null);
	this._setupFormulaCalculatedDimension(context);
};

oFF.QExceptionManager = function() {};
oFF.QExceptionManager.prototype = new oFF.QModelComponentList();
oFF.QExceptionManager.prototype._ff_c = "QExceptionManager";

oFF.QExceptionManager.createExceptionManager = function(queryModel)
{
	let newObject = new oFF.QExceptionManager();
	newObject.setupOlapList(queryModel, queryModel, true, "Exceptions", oFF.XCollectionFactory.LOOKUP_LIST, false);
	return newObject;
};
oFF.QExceptionManager.prototype._addNewExceptionInternal = function(name, text, evalType, headerSettings, isActive, isEvalAfterCalc)
{
	let exception = this.newException(name, text);
	this.addInternal(exception);
	exception.setEvaluateDefault(evalType);
	exception.setHeaderSettingBase(headerSettings);
	exception.setActive(isActive);
	exception.setEvaluationAfterCalculations(isEvalAfterCalc);
	return exception;
};
oFF.QExceptionManager.prototype.add = function(element)
{
	let byKey = this.getByKey(element.getName());
	if (oFF.notNull(byKey) && byKey.getMeasure() === element.getMeasure() && byKey.getStructure() === element.getStructure())
	{
		throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate3("The exception name '", element.getName(), "' is not unique!"));
	}
	oFF.QModelComponentList.prototype.add.call( this , element);
};
oFF.QExceptionManager.prototype.addNewException = function(name, text)
{
	let exception = this.newException(name, text);
	this.add(exception);
	return exception;
};
oFF.QExceptionManager.prototype.containsKey = function(key)
{
	return this.getByKey(key) !== null;
};
oFF.QExceptionManager.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponentList.prototype.copyFromInternal.call( this , other, flags);
	let originExceptionManager = other;
	let size = originExceptionManager.size();
	for (let i = 0; i < size; i++)
	{
		let origException = originExceptionManager.get(i);
		let cloneException = this.getByKey(origException.getName());
		if (oFF.isNull(cloneException))
		{
			cloneException = this.addNewException(origException.getName(), origException.getText());
		}
		cloneException.copyFrom(origException, flags);
	}
};
oFF.QExceptionManager.prototype.deactivateServerExceptions = function()
{
	let size = this.size();
	for (let i = 0; i < size; i++)
	{
		let exception = this.get(i);
		if (!exception.isChangeable())
		{
			exception.setActive(false);
		}
	}
};
oFF.QExceptionManager.prototype.getAllExceptionsOfMeasure = function(measure)
{
	let exceptions = oFF.XList.create();
	let exceptionSize = this.size();
	for (let idx = 0; idx < exceptionSize; idx++)
	{
		let exception = this.get(idx);
		let exMeasure = exception.getMeasure();
		let exStructure = exception.getStructure();
		let exceptionContainsMeasure = false;
		if (oFF.notNull(exMeasure))
		{
			let memberNameFromAlias = this.getConvenienceCommands().getMeasureMemberNameByAlias(this.getQueryModel(), exMeasure.getAliasOrMemberName());
			exceptionContainsMeasure = oFF.XString.isEqual(exMeasure.getAliasOrMemberName(), measure.getAliasOrMemberName()) || oFF.XString.isEqual(memberNameFromAlias, measure.getAliasOrMemberName());
		}
		let exceptionContainsStructure = oFF.notNull(exStructure) && oFF.XString.isEqual(exStructure.getAliasOrMemberName(), measure.getAliasOrMemberName());
		if (exceptionContainsMeasure || exceptionContainsStructure)
		{
			exceptions.add(exception);
		}
	}
	return exceptions;
};
oFF.QExceptionManager.prototype.getByKey = function(key)
{
	return oFF.XCollectionUtils.getByName(this.m_list, key);
};
oFF.QExceptionManager.prototype.getKeysAsIterator = oFF.noSupport;
oFF.QExceptionManager.prototype.getKeysAsReadOnlyList = oFF.noSupport;
oFF.QExceptionManager.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.EXCEPTION_MANAGER;
};
oFF.QExceptionManager.prototype.mergeDeepRecursive = function(settings, other)
{
	this.removeBackendExceptions();
	this.copyFrom(other, null);
};
oFF.QExceptionManager.prototype.newException = function(name, text)
{
	return oFF.QException.createException(this.getContext(), this.getQueryModelBase(), name, text);
};
oFF.QExceptionManager.prototype.removeAllExceptionsOfMeasure = function(measure)
{
	if (this.isEmpty())
	{
		return;
	}
	let idx = 0;
	this.queueEventing();
	while (idx < this.size())
	{
		let exception = this.get(idx);
		if (exception.getMeasure() !== null && oFF.XString.isEqual(exception.getMeasure().getName(), measure.getName()))
		{
			this.removeAt(idx);
		}
		else if (exception.getStructure() !== null && oFF.XString.isEqual(exception.getStructure().getName(), measure.getName()))
		{
			this.removeAt(idx);
		}
		else
		{
			idx++;
		}
	}
	this.resumeEventing();
};
oFF.QExceptionManager.prototype.removeBackendExceptions = function()
{
	let size = this.size();
	for (let i = size - 1; i >= 0; i--)
	{
		let exception = this.get(i);
		if (!exception.isChangeable())
		{
			this.removeInternal(exception);
			oFF.XObjectExt.release(exception);
		}
	}
};
oFF.QExceptionManager.prototype.removeClientExceptions = function()
{
	this.queueEventing();
	let size = this.size();
	for (let i = size - 1; i >= 0; i--)
	{
		let exception = this.get(i);
		if (exception.isChangeable())
		{
			this.removeInternal(exception);
			oFF.XObjectExt.release(exception);
		}
	}
	this.resumeEventing();
};

oFF.QFormulaExceptionManager = function() {};
oFF.QFormulaExceptionManager.prototype = new oFF.QModelComponentList();
oFF.QFormulaExceptionManager.prototype._ff_c = "QFormulaExceptionManager";

oFF.QFormulaExceptionManager.createFormulaExceptionManager = function(context)
{
	let newObject = new oFF.QFormulaExceptionManager();
	newObject.setupFormulaExceptionManager(context);
	return newObject;
};
oFF.QFormulaExceptionManager.prototype.m_isFormulaResultVisible = false;
oFF.QFormulaExceptionManager.prototype.m_modelFormulaExceptions = null;
oFF.QFormulaExceptionManager.prototype._addNewFormulaExceptionInternal = function(name, text)
{
	let formulaException = this.newFormulaException(name, text);
	this.addInternal(formulaException);
	return formulaException;
};
oFF.QFormulaExceptionManager.prototype.add = function(element)
{
	if (oFF.notNull(element) && element.getName() !== null)
	{
		let byKey = this.getByKey(element.getName());
		if (oFF.notNull(byKey) && byKey.getBaseMeasure() === element.getBaseMeasure() && byKey.getReferenceMeasure() === element.getReferenceMeasure())
		{
			throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate3("The formula exception name '", element.getName(), "' is not unique!"));
		}
		if (this.getOlapEnv().getClientQueryObjectManager().getClientQueryObjectByKeyRef(element) !== null || this.getModelFormulaExceptionByKeyRef(element) !== null)
		{
			this.addKeyRef(element);
			return;
		}
	}
	oFF.QModelComponentList.prototype.add.call( this , element);
};
oFF.QFormulaExceptionManager.prototype.addNewFormulaException = function(name, text)
{
	let exception = this.newFormulaException(name, text);
	this.add(exception);
	return exception;
};
oFF.QFormulaExceptionManager.prototype.addNewModelFormulaException = function(name, text)
{
	let context = this.getContext();
	let memberContext = oFF.QFactory.createKeyRefStoreContextWithCapabilities(context.getQueryModel(), this.m_modelFormulaExceptions.getName(), context.getModelCapabilities().cloneExt(null));
	let newFormulaException = oFF.QFactory.createFormulaException(memberContext, name, text);
	this.m_modelFormulaExceptions.putExt(newFormulaException, oFF.QClientQueryObjectType.FORMULA_EXCEPTION.getName(), name);
	return newFormulaException;
};
oFF.QFormulaExceptionManager.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponentList.prototype.copyFromInternal.call( this , other, flags);
	let originExceptionManager = other;
	let size = originExceptionManager.size();
	for (let i = 0; i < size; i++)
	{
		let origException = originExceptionManager.get(i);
		if (this.getOlapEnv().getClientQueryObjectManager().getClientQueryObjectByKeyRef(origException) !== null)
		{
			this.addKeyRef(origException);
		}
		else
		{
			let cloneException = this.addNewFormulaException(origException.getName(), origException.getText());
			cloneException.copyFrom(origException, null);
		}
	}
	this.m_isFormulaResultVisible = originExceptionManager.m_isFormulaResultVisible;
	let modelFormulaExceptions = originExceptionManager.getAllModelFormulaExceptions();
	size = modelFormulaExceptions.size();
	for (let j = 0; j < size; j++)
	{
		let originModelException = modelFormulaExceptions.get(j);
		let modelException = this.addNewModelFormulaException(originModelException.getName(), originModelException.getText());
		modelException.copyFrom(originModelException, null);
	}
};
oFF.QFormulaExceptionManager.prototype.destroyTransientObjects = function(context)
{
	let size = this.size();
	for (let i = 0; i < size; i++)
	{
		let exception = this.get(i);
		exception.destroyTransientObjects(context);
	}
};
oFF.QFormulaExceptionManager.prototype.generateTransientObjects = function(context, messageManager)
{
	let leftOverIndex = 0;
	while (this.size() > leftOverIndex)
	{
		let exception = this.get(leftOverIndex);
		if (oFF.notNull(exception))
		{
			if (exception.isActive())
			{
				exception.setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_DO_NOT_RAISEEVENTS);
				exception.generateTransientObjects(context, messageManager);
				exception.resumeEventing();
			}
			leftOverIndex++;
		}
		else
		{
			this.removeAt(leftOverIndex);
		}
	}
};
oFF.QFormulaExceptionManager.prototype.getAllModelFormulaExceptions = function()
{
	let keyRefs = this.m_modelFormulaExceptions.getObjectsByGroup(this.m_modelFormulaExceptions.getName(), oFF.QClientQueryObjectType.FORMULA_EXCEPTION.getName());
	let keyRefsIter = keyRefs.getIterator();
	let formulaExceptions = oFF.XList.create();
	while (keyRefsIter.hasNext())
	{
		let formulaException = keyRefsIter.next();
		formulaExceptions.add(formulaException);
	}
	return formulaExceptions;
};
oFF.QFormulaExceptionManager.prototype.getByKey = function(key)
{
	return oFF.XCollectionUtils.getByName(this.m_list, key);
};
oFF.QFormulaExceptionManager.prototype.getModelFormulaException = function(name)
{
	return this.m_modelFormulaExceptions.get(this.m_modelFormulaExceptions.getName(), oFF.QClientQueryObjectType.FORMULA_EXCEPTION.getName(), name);
};
oFF.QFormulaExceptionManager.prototype.getModelFormulaExceptionByBaseMeasure = function(baseMeasure)
{
	let keyRefs = this.m_modelFormulaExceptions.getObjectsByGroup(this.m_modelFormulaExceptions.getName(), oFF.QClientQueryObjectType.FORMULA_EXCEPTION.getName());
	let keyRefsIter = keyRefs.getIterator();
	while (keyRefsIter.hasNext())
	{
		let formulaException = keyRefsIter.next();
		let formulaExBaseMeasure = formulaException.getBaseMeasure();
		if (oFF.notNull(formulaExBaseMeasure) && oFF.XString.isEqual(formulaExBaseMeasure.getAliasOrMemberName(), baseMeasure.getAliasOrMemberName()))
		{
			return formulaException;
		}
	}
	return null;
};
oFF.QFormulaExceptionManager.prototype.getModelFormulaExceptionByKeyRef = function(keyRef)
{
	if (oFF.isNull(keyRef))
	{
		return null;
	}
	try
	{
		return this.m_modelFormulaExceptions.get(keyRef.getStorageName(), keyRef.getStorageGroupName(), keyRef.getStorageObjectName());
	}
	catch (e)
	{
		return null;
	}
};
oFF.QFormulaExceptionManager.prototype.getModelFormulaExceptionThreshold = function(name)
{
	let result = null;
	let keyRefs = this.m_modelFormulaExceptions.getObjectsByGroup(this.m_modelFormulaExceptions.getName(), oFF.QClientQueryObjectType.FORMULA_EXCEPTION.getName());
	let keyRefsIter = keyRefs.getIterator();
	while (keyRefsIter.hasNext())
	{
		let formulaException = keyRefsIter.next();
		let found = oFF.XStream.of(formulaException.getThresholds()).find((thr) => {
			return oFF.XString.isEqual(name, thr.getName());
		});
		if (found.isPresent())
		{
			result = found.get();
			break;
		}
	}
	return result;
};
oFF.QFormulaExceptionManager.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.FORMULA_EXCEPTION_MANAGER;
};
oFF.QFormulaExceptionManager.prototype.isFormulaResultVisible = function()
{
	return this.m_isFormulaResultVisible;
};
oFF.QFormulaExceptionManager.prototype.mergeDeepRecursive = function(settings, other)
{
	this.copyFrom(other, null);
};
oFF.QFormulaExceptionManager.prototype.newFormulaException = function(name, text)
{
	return oFF.QFormulaException.createFormulaException(this.getContext(), this.getQueryModelBase(), name, text);
};
oFF.QFormulaExceptionManager.prototype.releaseObject = function()
{
	this.m_modelFormulaExceptions.removeObjectsByStorage(this.m_modelFormulaExceptions.getName(), true);
	this.m_modelFormulaExceptions = oFF.XObjectExt.release(this.m_modelFormulaExceptions);
	oFF.QModelComponentList.prototype.releaseObject.call( this );
};
oFF.QFormulaExceptionManager.prototype.removeFormulaException = function(name)
{
	let formulaException = this.getByKey(name);
	if (oFF.notNull(formulaException))
	{
		this.removeElement(formulaException);
		return true;
	}
	return false;
};
oFF.QFormulaExceptionManager.prototype.removeModelFormulaException = function(name, releaseObject)
{
	this.m_modelFormulaExceptions.removeObject(this.m_modelFormulaExceptions.getName(), oFF.QClientQueryObjectType.FORMULA_EXCEPTION.getName(), name, releaseObject);
};
oFF.QFormulaExceptionManager.prototype.setFormulaResultVisible = function(isVisible)
{
	let oldValue = this.m_isFormulaResultVisible;
	this.m_isFormulaResultVisible = isVisible;
	this.notifyPropertyBooleanChanged(oFF.QExceptionProperties.QY_FORMULA_RESULT_VISIBLE, oldValue, isVisible);
};
oFF.QFormulaExceptionManager.prototype.setupFormulaExceptionManager = function(context)
{
	let queryModel = context.getQueryModel();
	this.setupOlapList(queryModel, queryModel, false, "FormulaExceptions", oFF.XCollectionFactory.LOOKUP_LIST, true);
	this.m_modelFormulaExceptions = oFF.QFactory.createKeyRefStorage(context, oFF.KeyRefConstants.MODEL_FORMULA_EXCEPTIONS);
	context.getKeyRefStorage().setSubKefRefStore(this.m_modelFormulaExceptions);
};

oFF.QThreshold = function() {};
oFF.QThreshold.prototype = new oFF.QModelComponentList();
oFF.QThreshold.prototype._ff_c = "QThreshold";

oFF.QThreshold.createThreshold = function(context, lowValue, alertLevel, exception)
{
	if (oFF.isNull(exception))
	{
		return null;
	}
	let threshold = new oFF.QThreshold();
	threshold.setupThreshold(context, oFF.XValueType.DOUBLE, oFF.XDoubleValue.create(lowValue), alertLevel, exception);
	return threshold;
};
oFF.QThreshold.createThresholdWithString = function(context, low, alertLevel, exception)
{
	if (oFF.isNull(exception))
	{
		return null;
	}
	let threshold = new oFF.QThreshold();
	threshold.setupThreshold(context, oFF.XValueType.STRING, oFF.XStringValue.create(low), alertLevel, exception);
	return threshold;
};
oFF.QThreshold.prototype.m_alertLevel = null;
oFF.QThreshold.prototype.m_color = null;
oFF.QThreshold.prototype.m_highValue = null;
oFF.QThreshold.prototype.m_lowValue = null;
oFF.QThreshold.prototype.m_operator = null;
oFF.QThreshold.prototype.m_valueType = null;
oFF.QThreshold.prototype.addNewSetting = function(name, priority)
{
	this.assertExceptionChangeable();
	let setting = this.newSetting(name, priority);
	this.add(setting);
	return setting;
};
oFF.QThreshold.prototype.addNewSettingWithConstant = function(exceptionSetting, priority)
{
	this.assertExceptionChangeable();
	let setting = this.newSettingWithConstant(exceptionSetting, priority);
	this.add(setting);
	return setting;
};
oFF.QThreshold.prototype.assertExceptionChangeable = function()
{
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.INA_REPOSITORY_DELTA))
	{
		this.getException().assertIsChangeable();
	}
};
oFF.QThreshold.prototype.containsKey = function(key)
{
	return this.getByKey(key) !== null;
};
oFF.QThreshold.prototype.copyThreshold = function(origin)
{
	oFF.QModelComponentList.prototype.copyFrom.call( this , origin, null);
	this.m_alertLevel = origin.m_alertLevel;
	this.m_valueType = origin.m_valueType;
	this.m_color = origin.m_color;
	this.m_lowValue = oFF.XObjectExt.cloneIfNotNull(origin.m_lowValue);
	this.m_highValue = oFF.XObjectExt.cloneIfNotNull(origin.m_highValue);
	let size = origin.size();
	for (let i = 0; i < size; i++)
	{
		let originSetting = origin.get(i);
		let cloneSetting = this.addNewSetting(originSetting.getName(), originSetting.getPriority());
		cloneSetting.setValue(originSetting.getValue());
		let exSetting = originSetting.getSetting();
		if (oFF.notNull(exSetting))
		{
			cloneSetting.setSetting(exSetting);
		}
	}
	this.m_operator = origin.m_operator;
};
oFF.QThreshold.prototype.getAlertLevel = function()
{
	return this.m_alertLevel;
};
oFF.QThreshold.prototype.getByKey = function(key)
{
	return oFF.XCollectionUtils.getByName(this, key);
};
oFF.QThreshold.prototype.getColor = function()
{
	return this.m_color;
};
oFF.QThreshold.prototype.getException = function()
{
	return this.getParent();
};
oFF.QThreshold.prototype.getHigh = function()
{
	this.assertValueType(this.getHighXValue(), oFF.XValueType.STRING);
	if (oFF.isNull(this.m_highValue))
	{
		throw oFF.XException.createIllegalStateException("Illegal high value");
	}
	return this.m_highValue.getString();
};
oFF.QThreshold.prototype.getHighValue = function()
{
	this.assertValueType(this.getHighXValue(), oFF.XValueType.DOUBLE);
	if (oFF.isNull(this.m_highValue))
	{
		throw oFF.XException.createIllegalStateException("Illegal high value");
	}
	return this.m_highValue.getDouble();
};
oFF.QThreshold.prototype.getHighXValue = function()
{
	return this.m_highValue;
};
oFF.QThreshold.prototype.getKeysAsIterator = function()
{
	return this.getKeysAsReadOnlyList().getIterator();
};
oFF.QThreshold.prototype.getKeysAsReadOnlyList = function()
{
	return oFF.XCollectionUtils.createListOfNames(this);
};
oFF.QThreshold.prototype.getLow = function()
{
	this.assertValueType(this.getLowXValue(), oFF.XValueType.STRING);
	return this.m_lowValue.getString();
};
oFF.QThreshold.prototype.getLowValue = function()
{
	this.assertValueType(this.getLowXValue(), oFF.XValueType.DOUBLE);
	return this.m_lowValue.getDouble();
};
oFF.QThreshold.prototype.getLowXValue = function()
{
	return this.m_lowValue;
};
oFF.QThreshold.prototype.getOperator = function()
{
	return this.m_operator;
};
oFF.QThreshold.prototype.getParent = function()
{
	let listOfThresholds = oFF.QModelComponentList.prototype.getParent.call( this );
	return oFF.notNull(listOfThresholds) ? listOfThresholds.getParent() : null;
};
oFF.QThreshold.prototype.getValueType = function()
{
	return this.m_valueType;
};
oFF.QThreshold.prototype.newSetting = function(name, priority)
{
	return oFF.QSettings.createSetting(this.getContext(), name, priority, this);
};
oFF.QThreshold.prototype.newSettingWithConstant = function(exceptionSetting, priority)
{
	return oFF.QSettings.createSettingWithConstant(this.getContext(), exceptionSetting, priority, this);
};
oFF.QThreshold.prototype.releaseObject = function()
{
	this.m_alertLevel = null;
	this.m_operator = null;
	this.m_lowValue = oFF.XObjectExt.release(this.m_lowValue);
	this.m_highValue = oFF.XObjectExt.release(this.m_highValue);
	this.m_valueType = null;
	oFF.QModelComponentList.prototype.releaseObject.call( this );
};
oFF.QThreshold.prototype.setAlertLevel = function(alertLevel)
{
	this.assertExceptionChangeable();
	this.m_alertLevel = alertLevel;
	this.notifyNodeChanged();
};
oFF.QThreshold.prototype.setColor = function(color)
{
	this.m_color = color;
};
oFF.QThreshold.prototype.setHigh = function(highValue)
{
	this.setXHigh(oFF.XStringValue.create(highValue));
};
oFF.QThreshold.prototype.setHighValue = function(highValue)
{
	this.setXHigh(oFF.XDoubleValue.create(highValue));
};
oFF.QThreshold.prototype.setIntervall = function(lowValue, highValue)
{
	this.queueEventing();
	this.setLowValue(lowValue);
	this.setHighValue(highValue);
	this.resumeEventing();
};
oFF.QThreshold.prototype.setIntervallByString = function(lowValue, highValue)
{
	this.queueEventing();
	this.setLow(lowValue);
	this.setHigh(highValue);
	this.resumeEventing();
};
oFF.QThreshold.prototype.setLow = function(lowValue)
{
	this.setXLow(oFF.XStringValue.create(lowValue));
};
oFF.QThreshold.prototype.setLowValue = function(lowValue)
{
	this.setXLow(oFF.XDoubleValue.create(lowValue));
};
oFF.QThreshold.prototype.setOperator = function(comparisonOperator)
{
	this.assertExceptionChangeable();
	this.m_operator = comparisonOperator;
	this.notifyNodeChanged();
};
oFF.QThreshold.prototype.setXHigh = function(highValue)
{
	if (oFF.notNull(highValue))
	{
		this.assertValueType(highValue, this.m_valueType);
	}
	this.assertExceptionChangeable();
	this.m_highValue = highValue;
	this.notifyNodeChanged();
};
oFF.QThreshold.prototype.setXLow = function(lowValue)
{
	if (oFF.notNull(lowValue))
	{
		this.assertValueType(lowValue, this.m_valueType);
	}
	this.assertExceptionChangeable();
	this.m_lowValue = lowValue;
	this.notifyNodeChanged();
};
oFF.QThreshold.prototype.setupThreshold = function(context, valueType, lowValue, alertLevel, exception)
{
	this.setupOlapList(context, exception.getThresholds(), true, "Settings", oFF.XCollectionFactory.LOOKUP_LIST, false);
	this.m_valueType = valueType;
	this.m_operator = oFF.ComparisonOperator.EQUAL;
	this.setXLow(lowValue);
	this.m_highValue = null;
	this.m_alertLevel = alertLevel;
};

oFF.QFieldList = function() {};
oFF.QFieldList.prototype = new oFF.QModelComponentList();
oFF.QFieldList.prototype._ff_c = "QFieldList";

oFF.QFieldList.createFieldList = function(parentNode, name, contextType)
{
	let list = new oFF.QFieldList();
	list.setupOlapList(parentNode, parentNode, false, name, oFF.XCollectionFactory.LINKED_MAP, false);
	list.m_isFixed = false;
	list.m_contextType = contextType;
	return list;
};
oFF.QFieldList.prototype.m_contextType = null;
oFF.QFieldList.prototype.m_isFixed = false;
oFF.QFieldList.prototype.add = function(element)
{
	if (!this.m_isFixed)
	{
		this.preventRaiseEventByContextType();
		oFF.QModelComponentList.prototype.add.call( this , element);
		this.resumeRaiseEventByContextType();
	}
};
oFF.QFieldList.prototype.addAll = function(other)
{
	if (!this.m_isFixed)
	{
		this.preventRaiseEventByContextType();
		oFF.QModelComponentList.prototype.addAll.call( this , other);
		this.resumeRaiseEventByContextType();
	}
};
oFF.QFieldList.prototype.addInternal = function(element)
{
	if (!this.m_isFixed)
	{
		this.preventRaiseEventByContextType();
		oFF.QModelComponentList.prototype.addInternal.call( this , element);
		this.resumeRaiseEventByContextType();
	}
};
oFF.QFieldList.prototype.clear = function()
{
	this.preventRaiseEventByContextType();
	oFF.QModelComponentList.prototype.clear.call( this );
	this.resumeRaiseEventByContextType();
};
oFF.QFieldList.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponentList.prototype.copyFromInternal.call( this , other, flags);
	this.m_isFixed = other.m_isFixed;
};
oFF.QFieldList.prototype.getFieldAt = function(index)
{
	return this.get(index);
};
oFF.QFieldList.prototype.getFieldBase = function(index)
{
	return this.get(index);
};
oFF.QFieldList.prototype.getFieldByName = function(name)
{
	return this.getByKey(name);
};
oFF.QFieldList.prototype.getFieldByNameOrAlias = function(name)
{
	let field = this.getByKey(name);
	if (oFF.isNull(field))
	{
		let size = this.size();
		for (let i = 0; i < size; i++)
		{
			let tempField = this.get(i);
			if (oFF.XString.isEqual(tempField.getAliasName(), name))
			{
				if (oFF.isNull(field) || tempField.getPresentationType().getPriority() < field.getPresentationType().getPriority())
				{
					field = tempField;
				}
			}
		}
	}
	return field;
};
oFF.QFieldList.prototype.getFirstFieldByType = function(type)
{
	let len = this.size();
	for (let i = 0; i < len; i++)
	{
		let field = this.get(i);
		if (field.getPresentationType().isTypeOf(type))
		{
			return field;
		}
	}
	return null;
};
oFF.QFieldList.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.FIELD_LIST;
};
oFF.QFieldList.prototype.insert = function(index, element)
{
	if (!this.m_isFixed)
	{
		this.preventRaiseEventByContextType();
		oFF.QModelComponentList.prototype.insert.call( this , index, element);
		this.resumeRaiseEventByContextType();
	}
};
oFF.QFieldList.prototype.isFixed = function()
{
	return this.m_isFixed;
};
oFF.QFieldList.prototype.moveElement = function(fromIndex, toIndex)
{
	if (!this.m_isFixed)
	{
		this.preventRaiseEventByContextType();
		oFF.QModelComponentList.prototype.moveElement.call( this , fromIndex, toIndex);
		this.resumeRaiseEventByContextType();
	}
};
oFF.QFieldList.prototype.preventRaiseEventByContextType = function()
{
	if (this.m_contextType === oFF.QContextType.SELECTOR)
	{
		this.setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_DO_NOT_RAISEEVENTS);
	}
};
oFF.QFieldList.prototype.removeAt = function(index)
{
	let removedField = null;
	if (!this.m_isFixed)
	{
		this.preventRaiseEventByContextType();
		removedField = oFF.QModelComponentList.prototype.removeAt.call( this , index);
		this.resumeRaiseEventByContextType();
	}
	return removedField;
};
oFF.QFieldList.prototype.removeElement = function(element)
{
	if (!this.m_isFixed)
	{
		this.preventRaiseEventByContextType();
		oFF.QModelComponentList.prototype.removeElement.call( this , element);
		this.resumeRaiseEventByContextType();
	}
	return element;
};
oFF.QFieldList.prototype.removeFieldAt = function(index)
{
	this.removeAt(index);
};
oFF.QFieldList.prototype.resumeRaiseEventByContextType = function()
{
	if (this.m_contextType === oFF.QContextType.SELECTOR)
	{
		this.resumeEventing();
	}
};
oFF.QFieldList.prototype.set = function(index, element)
{
	if (!this.m_isFixed)
	{
		this.preventRaiseEventByContextType();
		oFF.QModelComponentList.prototype.set.call( this , index, element);
		this.resumeRaiseEventByContextType();
	}
};
oFF.QFieldList.prototype.setIsFixed = function(isFixed)
{
	this.m_isFixed = isFixed;
};
oFF.QFieldList.prototype.sortByComparator = function(comparator)
{
	if (!this.m_isFixed)
	{
		this.preventRaiseEventByContextType();
		oFF.QModelComponentList.prototype.sortByComparator.call( this , comparator);
		this.resumeRaiseEventByContextType();
	}
};
oFF.QFieldList.prototype.sortByDirection = function(sortDirection)
{
	if (!this.m_isFixed)
	{
		this.preventRaiseEventByContextType();
		oFF.QModelComponentList.prototype.sortByDirection.call( this , sortDirection);
		this.resumeRaiseEventByContextType();
	}
};

oFF.AbstractFilterList = function() {};
oFF.AbstractFilterList.prototype = new oFF.QModelComponentList();
oFF.AbstractFilterList.prototype._ff_c = "AbstractFilterList";

oFF.AbstractFilterList.prototype.m_filterContainer = null;
oFF.AbstractFilterList.prototype.m_uniqueId = null;
oFF.AbstractFilterList.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponentList.prototype.copyFromInternal.call( this , other, flags);
	let originAbstractFilterList = other;
	this.m_uniqueId = originAbstractFilterList.m_uniqueId;
};
oFF.AbstractFilterList.prototype.getFilterExpression = function()
{
	if (oFF.notNull(this.m_filterContainer))
	{
		return oFF.XWeakReferenceUtil.getHardRef(this.m_filterContainer);
	}
	else if (this.getParent() !== null && this.getParent().getOlapComponentType().isTypeOf(oFF.OlapComponentType.FILTER_ELEMENT))
	{
		return this.getParent().getFilterExpression();
	}
	else
	{
		return null;
	}
};
oFF.AbstractFilterList.prototype.getMemberNamesFromFilter = function(dimName)
{
	return oFF.QFilterUtil.getMemberNamesFromFilter(this, dimName);
};
oFF.AbstractFilterList.prototype.getUniqueId = function()
{
	return this.m_uniqueId;
};
oFF.AbstractFilterList.prototype.releaseObject = function()
{
	this.m_filterContainer = oFF.XObjectExt.release(this.m_filterContainer);
	this.m_uniqueId = null;
	oFF.QModelComponentList.prototype.releaseObject.call( this );
};
oFF.AbstractFilterList.prototype.setParent = function(parent)
{
	if (oFF.notNull(parent))
	{
		let newParentContext = parent.getContext();
		if (oFF.notNull(newParentContext) && newParentContext.getComponentType().isTypeOf(oFF.FilterComponentType.TRANSIENT_FILTER))
		{
			return;
		}
	}
	let currentParent = this.getParent();
	if (oFF.notNull(currentParent))
	{
		let filterExpression = null;
		if (currentParent.getComponentType() === oFF.OlapComponentType.FILTER_EXPRESSION)
		{
			filterExpression = currentParent;
		}
		else if (currentParent.getComponentType().isTypeOf(oFF.OlapComponentType.FILTER_ELEMENT))
		{
			let filterParent = currentParent;
			filterExpression = filterParent.getFilterExpression();
		}
		if (oFF.notNull(filterExpression))
		{
			let filterExpressionParent = filterExpression.getParent();
			if (oFF.notNull(filterExpressionParent) && filterExpressionParent.getComponentType() === oFF.OlapComponentType.OLAP_FILTER_MANAGER)
			{
				return;
			}
		}
	}
	oFF.QModelComponentList.prototype.setParent.call( this , parent);
	let size = this.size();
	this.stopEventing();
	for (let i = 0; i < size; i++)
	{
		this.get(i).setParent(this);
	}
	this.resumeEventing();
};
oFF.AbstractFilterList.prototype.setUniqueId = function(uniqueId)
{
	this.m_uniqueId = uniqueId;
};
oFF.AbstractFilterList.prototype.setupFilterList = function(context, parentNode, name)
{
	this.setupOlapList(context, parentNode, true, name, oFF.XCollectionFactory.LOOKUP_LIST, false);
	if (oFF.notNull(parentNode) && parentNode.getComponentType() === oFF.OlapComponentType.FILTER_EXPRESSION)
	{
		this.m_filterContainer = oFF.XWeakReferenceUtil.getWeakRef(parentNode);
	}
	else if (oFF.notNull(context) && context.getComponentType() === oFF.OlapComponentType.FILTER_EXPRESSION)
	{
		this.m_filterContainer = oFF.XWeakReferenceUtil.getWeakRef(context);
	}
	this.m_uniqueId = oFF.XGuid.getGuid();
};

oFF.QAbstractFilterShiftableTimeRange = function() {};
oFF.QAbstractFilterShiftableTimeRange.prototype = new oFF.QAbstractFilterTimeRange();
oFF.QAbstractFilterShiftableTimeRange.prototype._ff_c = "QAbstractFilterShiftableTimeRange";

oFF.QAbstractFilterShiftableTimeRange.prototype.m_lookBack = 0;
oFF.QAbstractFilterShiftableTimeRange.prototype.m_offsetAmount = 0;
oFF.QAbstractFilterShiftableTimeRange.prototype.m_offsetFunction = null;
oFF.QAbstractFilterShiftableTimeRange.prototype.m_offsetLevelName = null;
oFF.QAbstractFilterShiftableTimeRange.prototype.m_pivotMemberLevelName = null;
oFF.QAbstractFilterShiftableTimeRange.prototype.copyFromInternal = function(other, flags)
{
	oFF.QAbstractFilterTimeRange.prototype.copyFromInternal.call( this , other, flags);
	let originDynamicTimeRangeFilter = other;
	this.setLookBack(originDynamicTimeRangeFilter.m_lookBack);
	this.setOffsetFunction(originDynamicTimeRangeFilter.m_offsetFunction);
	this.setOffsetLevelName(originDynamicTimeRangeFilter.m_offsetLevelName);
	this.setOffsetAmount(originDynamicTimeRangeFilter.m_offsetAmount);
};
oFF.QAbstractFilterShiftableTimeRange.prototype.getAllLevelNames = function(context)
{
	let levelNames = oFF.QAbstractFilterTimeRange.prototype.getAllLevelNames.call( this , context);
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.getOffsetLevelName()))
	{
		levelNames.add(this.getOffsetLevelName());
	}
	return levelNames;
};
oFF.QAbstractFilterShiftableTimeRange.prototype.getLookBack = function()
{
	return this.m_lookBack;
};
oFF.QAbstractFilterShiftableTimeRange.prototype.getOffsetAmount = function()
{
	return this.m_offsetAmount;
};
oFF.QAbstractFilterShiftableTimeRange.prototype.getOffsetFunction = function()
{
	return this.m_offsetFunction;
};
oFF.QAbstractFilterShiftableTimeRange.prototype.getOffsetLevelName = function()
{
	return this.m_offsetLevelName;
};
oFF.QAbstractFilterShiftableTimeRange.prototype.getPivotMemberLevelName = function()
{
	return this.m_pivotMemberLevelName;
};
oFF.QAbstractFilterShiftableTimeRange.prototype.releaseObject = function()
{
	this.destroyTransientObjects(this.getContext());
	this.m_offsetFunction = null;
	this.m_offsetLevelName = null;
	oFF.QAbstractFilterTimeRange.prototype.releaseObject.call( this );
};
oFF.QAbstractFilterShiftableTimeRange.prototype.setLookBack = function(lookBack)
{
	this.m_lookBack = lookBack;
	this.notifyNodeChanged();
};
oFF.QAbstractFilterShiftableTimeRange.prototype.setOffsetAmount = function(offsetAmount)
{
	this.m_offsetAmount = offsetAmount;
	this.notifyNodeChanged();
};
oFF.QAbstractFilterShiftableTimeRange.prototype.setOffsetFunction = function(offsetFunction)
{
	this.m_offsetFunction = offsetFunction;
	this.notifyNodeChanged();
};
oFF.QAbstractFilterShiftableTimeRange.prototype.setOffsetLevelName = function(offsetLevelName)
{
	this.m_offsetLevelName = offsetLevelName;
	this.notifyNodeChanged();
};
oFF.QAbstractFilterShiftableTimeRange.prototype.setPivotMemberLevelName = function(pivotMemberLevelName)
{
	this.m_pivotMemberLevelName = pivotMemberLevelName;
	this.notifyNodeChanged();
};

oFF.QFilterFixedTimeRange = function() {};
oFF.QFilterFixedTimeRange.prototype = new oFF.QAbstractFilterTimeRange();
oFF.QFilterFixedTimeRange.prototype._ff_c = "QFilterFixedTimeRange";

oFF.QFilterFixedTimeRange.LINK_FILTER_PREFIX = "__transientFixedTimeRange|";
oFF.QFilterFixedTimeRange.createFilterFixedTimeRange = function(context, name)
{
	let fixedTimeRangeFilter = new oFF.QFilterFixedTimeRange();
	fixedTimeRangeFilter.setupTimeRangeFilter(context, name);
	return fixedTimeRangeFilter;
};
oFF.QFilterFixedTimeRange.prototype.m_rangeFilterType = null;
oFF.QFilterFixedTimeRange.prototype.addFiltersToFilterExpression = function(filterExpression, cartesianList, queryModel)
{
	let filterAlgebra = oFF.QFactory.createFilterAnd(this.getQueryModel());
	filterAlgebra.add(cartesianList);
	this.addValueExcludeFilter(queryModel, filterAlgebra);
	filterExpression.setComplexRoot(filterAlgebra);
};
oFF.QFilterFixedTimeRange.prototype.copyFromInternal = function(other, flags)
{
	oFF.QAbstractFilterTimeRange.prototype.copyFromInternal.call( this , other, flags);
	let originDynamicTimeRangeFilter = other;
	this.m_rangeFilterType = originDynamicTimeRangeFilter.m_rangeFilterType;
};
oFF.QFilterFixedTimeRange.prototype.generateFixedOpeningPeriodToClosingPeriodFilter = function(queryModel, timeDimension)
{
	let filterExpression = oFF.QFactory.createFilterExpression(queryModel, this);
	let filterOp = oFF.QFactory.createFilterOperation(queryModel, timeDimension.getHierarchyKeyField());
	filterOp.setHierarchyName(this.getHierarchyName());
	let entityValuePart = oFF.XStringUtils.concatenate4("[", timeDimension.getName(), "].[", this.getHierarchyName());
	filterOp.getLow().setString(oFF.XStringUtils.concatenate4(entityValuePart, "].[", timeDimension.getLeveledHierarchy(this.getHierarchyName()).getLevelByType(oFF.HierarchyLevelType.ALL).getLevelName(), "].[(all)]"));
	filterOp.getLow().getMemberNavigations().addAll(oFF.QTimeMemberNavigationGenerator.generateOpeningPeriodToClosingPeriodOffsetRangeFromAllNode(timeDimension, this.getHierarchyName(), this.getLevelName()));
	this.addFiltersToFilterExpression(filterExpression, this.createCartesianListAndAddFilter(queryModel, timeDimension, this.getHierarchyName(), filterOp), queryModel);
	return filterExpression;
};
oFF.QFilterFixedTimeRange.prototype.generateFixedOpeningPeriodToEndFilter = function(queryModel, timeDimension)
{
	let filterExpression = oFF.QFactory.createFilterExpression(queryModel, this);
	let filterOp = oFF.QFactory.createFilterOperation(queryModel, timeDimension.getHierarchyKeyField());
	filterOp.setHierarchyName(this.getHierarchyName());
	this.setLowValueToTransientFilterOperation(filterOp, this.m_lowValue);
	filterOp.getLow().getMemberNavigations().addAll(oFF.QTimeMemberNavigationGenerator.generateOpeningPeriodToEndOffsetRange(timeDimension, this.getHierarchyName(), this.getLevelName()));
	this.addFiltersToFilterExpression(filterExpression, this.createCartesianListAndAddFilter(queryModel, timeDimension, this.getHierarchyName(), filterOp), queryModel);
	return filterExpression;
};
oFF.QFilterFixedTimeRange.prototype.generateFixedStartToClosingPeriodFilter = function(queryModel, timeDimension)
{
	let filterExpression = oFF.QFactory.createFilterExpression(queryModel, this);
	let filterOp = oFF.QFactory.createFilterOperation(queryModel, timeDimension.getHierarchyKeyField());
	filterOp.setHierarchyName(this.getHierarchyName());
	filterOp.getLow().setString(this.m_lowValue);
	filterOp.getLow().getMemberNavigations().addAll(oFF.QTimeMemberNavigationGenerator.generateStartToClosingPeriodOffsetRange(timeDimension, this.getHierarchyName(), this.getLevelName()));
	this.addFiltersToFilterExpression(filterExpression, this.createCartesianListAndAddFilter(queryModel, timeDimension, this.getHierarchyName(), filterOp), queryModel);
	return filterExpression;
};
oFF.QFilterFixedTimeRange.prototype.getLinkFilterKey = function()
{
	return oFF.XStringUtils.concatenate2(oFF.QFilterFixedTimeRange.LINK_FILTER_PREFIX, this.getName());
};
oFF.QFilterFixedTimeRange.prototype.getOlapComponentType = function()
{
	return oFF.FilterComponentType.FILTER_FIXED_TIME_RANGE;
};
oFF.QFilterFixedTimeRange.prototype.getRangeFilterType = function()
{
	return this.m_rangeFilterType;
};
oFF.QFilterFixedTimeRange.prototype.getTransientFilter = function(queryModel)
{
	if (!this.getSession().hasFeature(oFF.FeatureToggleOlap.FLEXIBLE_TIME_DYNAMIC_TIME))
	{
		return this.getTransientFallbackFilter();
	}
	let timeDimension = queryModel.getDimensionByName(this.getTimeDimensionName());
	if (oFF.isNull(timeDimension))
	{
		return null;
	}
	let filterExpression;
	if (this.m_rangeFilterType === oFF.TimeRangeFilterType.FIXED_START_TO_CLOSING_OPERIOD)
	{
		filterExpression = this.generateFixedStartToClosingPeriodFilter(queryModel, timeDimension);
	}
	else if (this.m_rangeFilterType === oFF.TimeRangeFilterType.FIXED_OPENING_PERIOD_TO_END)
	{
		filterExpression = this.generateFixedOpeningPeriodToEndFilter(queryModel, timeDimension);
	}
	else if (this.m_rangeFilterType === oFF.TimeRangeFilterType.FIXED_OPENING_PERIOD_TO_CLOSING_PERIOD)
	{
		filterExpression = this.generateFixedOpeningPeriodToClosingPeriodFilter(queryModel, timeDimension);
	}
	else
	{
		throw oFF.XException.createIllegalStateException("this.m_rangeFilterType is null");
	}
	return filterExpression;
};
oFF.QFilterFixedTimeRange.prototype.releaseObject = function()
{
	this.destroyTransientObjects(this.getContext());
	this.reset();
	oFF.QAbstractFilterTimeRange.prototype.releaseObject.call( this );
};
oFF.QFilterFixedTimeRange.prototype.reset = function()
{
	this.m_rangeFilterType = null;
};
oFF.QFilterFixedTimeRange.prototype.setOpeningPeriodToClosingPeriodFixedRange = function()
{
	this.m_rangeFilterType = oFF.TimeRangeFilterType.FIXED_OPENING_PERIOD_TO_CLOSING_PERIOD;
	this.m_lowValue = null;
	this.notifyNodeChanged();
};
oFF.QFilterFixedTimeRange.prototype.setOpeningPeriodToEndFixedRange = function(endMember, valueType)
{
	this.m_rangeFilterType = oFF.TimeRangeFilterType.FIXED_OPENING_PERIOD_TO_END;
	this.m_lowValue = endMember;
	this.m_lowValueType = valueType;
	this.notifyNodeChanged();
};
oFF.QFilterFixedTimeRange.prototype.setStartToClosingPeriodFixedRange = function(startMember, valueType)
{
	this.m_rangeFilterType = oFF.TimeRangeFilterType.FIXED_START_TO_CLOSING_OPERIOD;
	this.m_lowValue = startMember;
	this.m_lowValueType = valueType;
	this.notifyNodeChanged();
};

oFF.QFormulaItemFunction = function() {};
oFF.QFormulaItemFunction.prototype = new oFF.QModelComponentList();
oFF.QFormulaItemFunction.prototype._ff_c = "QFormulaItemFunction";

oFF.QFormulaItemFunction._createFunction = function(context, parentNode)
{
	let formula = new oFF.QFormulaItemFunction();
	formula.setupOlapList(context, parentNode, false, null, oFF.XCollectionFactory.LOOKUP_LIST, false);
	formula.m_requiresExternalSignFlip = false;
	return formula;
};
oFF.QFormulaItemFunction.prototype.m_functionName = null;
oFF.QFormulaItemFunction.prototype.m_requiresExternalSignFlip = false;
oFF.QFormulaItemFunction.prototype.m_solveOrder = 0;
oFF.QFormulaItemFunction.prototype.cloneOlapComponent = function(context, parent)
{
	let newItem = oFF.QFormulaItemFunction._createFunction(context, parent);
	newItem.copyFormulaItemFunction(this);
	return newItem;
};
oFF.QFormulaItemFunction.prototype.copyFormulaItemFunction = function(origin)
{
	this.copyFrom(origin, null);
	let size = origin.size();
	for (let i = 0; i < size; i++)
	{
		let originItem = origin.get(i);
		let contextToUse = this;
		let originContext = originItem.getContext();
		if (oFF.notNull(originContext) && originContext.getComponentType() === oFF.OlapComponentType.KEY_REF_STORE_CONTEXT)
		{
			contextToUse = originContext;
		}
		let cloneItem = originItem.cloneOlapComponent(contextToUse, this);
		this.add(cloneItem);
	}
	this.m_solveOrder = origin.m_solveOrder;
	this.m_functionName = origin.m_functionName;
	this.m_requiresExternalSignFlip = origin.m_requiresExternalSignFlip;
};
oFF.QFormulaItemFunction.prototype.getFunctionName = function()
{
	return this.m_functionName;
};
oFF.QFormulaItemFunction.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.FORMULA_FUNCTION;
};
oFF.QFormulaItemFunction.prototype.getSolveOrder = function()
{
	return this.m_solveOrder;
};
oFF.QFormulaItemFunction.prototype.releaseObject = function()
{
	this.m_functionName = null;
	oFF.QModelComponentList.prototype.releaseObject.call( this );
};
oFF.QFormulaItemFunction.prototype.requiresExternalSignFlip = function()
{
	return this.m_requiresExternalSignFlip;
};
oFF.QFormulaItemFunction.prototype.setFunctionName = function(name)
{
	this.m_functionName = name;
};
oFF.QFormulaItemFunction.prototype.setRequiresExternalSignFlip = function(requiresExternalSignFlip)
{
	if (this.m_requiresExternalSignFlip !== requiresExternalSignFlip)
	{
		this.m_requiresExternalSignFlip = requiresExternalSignFlip;
		this.notifyNodeChanged();
	}
};
oFF.QFormulaItemFunction.prototype.setSolveOrder = function(solveOrder)
{
	this.m_solveOrder = solveOrder;
	this.notifyNodeChanged();
};

oFF.QModelDimensionLinks = function() {};
oFF.QModelDimensionLinks.prototype = new oFF.QModelComponentList();
oFF.QModelDimensionLinks.prototype._ff_c = "QModelDimensionLinks";

oFF.QModelDimensionLinks.create = function(context, firstDatasetId, secondDatasetId)
{
	let modelLink = new oFF.QModelDimensionLinks();
	modelLink.setupModelLink(context, firstDatasetId, secondDatasetId);
	return modelLink;
};
oFF.QModelDimensionLinks.prototype.m_firstDatasetId = null;
oFF.QModelDimensionLinks.prototype.m_secondDatasetId = null;
oFF.QModelDimensionLinks.prototype.addNewLinkFromParts = function(first, second, linkOnMatchingHierarchies, treatFlatToFlatAsMatchingHierarchy)
{
	if (first.getQueryManagerKey() === null)
	{
		throw oFF.XException.createIllegalArgumentException("First DimensionLinkPart requires a datasetId as a queryManagerKey.");
	}
	if (second.getQueryManagerKey() === null)
	{
		throw oFF.XException.createIllegalArgumentException("First DimensionLinkPart requires a datasetId as a queryManagerKey.");
	}
	let dimensionLinksIter = this.getIterator();
	while (dimensionLinksIter.hasNext())
	{
		let dimensionLink = dimensionLinksIter.next();
		let firstPart = dimensionLink.getFirstPart();
		let secondPart = dimensionLink.getSecondPart();
		let firstKey = firstPart.getFieldKey();
		let secondKey = secondPart.getFieldKey();
		if (firstKey.isEqualTo(first.getFieldKey()) && secondKey.isEqualTo(second.getFieldKey()) || firstKey.isEqualTo(second.getFieldKey()) && secondKey.isEqualTo(first.getFieldKey()))
		{
			this.removeElement(dimensionLink);
			break;
		}
	}
	let link = oFF.QDimensionLink.createDimensionLinkFromParts(this, this, first, second, linkOnMatchingHierarchies, treatFlatToFlatAsMatchingHierarchy);
	this.add(link);
	return link;
};
oFF.QModelDimensionLinks.prototype.copyFromInternal = function(other, flags)
{
	let origin = other;
	this.m_firstDatasetId = origin.getFirstDatasetId();
	this.m_secondDatasetId = origin.getSecondDatasetId();
	this.clear();
	let dimensionLinksIter = origin.getIterator();
	while (dimensionLinksIter.hasNext())
	{
		let dimensionLinkCopy = dimensionLinksIter.next().cloneOlapComponent(this.getContext(), this.getParent());
		this.add(dimensionLinkCopy);
	}
};
oFF.QModelDimensionLinks.prototype.getFirstDatasetId = function()
{
	return this.m_firstDatasetId;
};
oFF.QModelDimensionLinks.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.MODEL_DIMENSION_LINKS;
};
oFF.QModelDimensionLinks.prototype.getSecondDatasetId = function()
{
	return this.m_secondDatasetId;
};
oFF.QModelDimensionLinks.prototype.releaseObject = function()
{
	this.m_firstDatasetId = null;
	this.m_secondDatasetId = null;
	oFF.QModelComponentList.prototype.releaseObject.call( this );
};
oFF.QModelDimensionLinks.prototype.removeLinkByParts = function(first, second)
{
	let dimensionLinksIter = this.getIterator();
	while (dimensionLinksIter.hasNext())
	{
		let dimensionLink = dimensionLinksIter.next();
		let firstKey = dimensionLink.getFirstPart().getFieldKey();
		let secondKey = dimensionLink.getSecondPart().getFieldKey();
		if (firstKey.isEqualTo(first.getFieldKey()) && secondKey.isEqualTo(second.getFieldKey()) || firstKey.isEqualTo(second.getFieldKey()) && secondKey.isEqualTo(first.getFieldKey()))
		{
			this.removeElement(dimensionLink);
			break;
		}
	}
};
oFF.QModelDimensionLinks.prototype.setupModelLink = function(context, firstDatasetId, secondDatasetId)
{
	this.setupOlapList(context, context, true, "Model Dimension Links", oFF.XCollectionFactory.LOOKUP_LIST, true);
	this.m_firstDatasetId = firstDatasetId;
	this.m_secondDatasetId = secondDatasetId;
};

oFF.QResultStructure = function() {};
oFF.QResultStructure.prototype = new oFF.QModelComponentList();
oFF.QResultStructure.prototype._ff_c = "QResultStructure";

oFF.QResultStructure.createResultStructure = function(context, parentNode)
{
	let resultStructure = new oFF.QResultStructure();
	resultStructure.setupOlapList(context, parentNode, true, "Result Structure", oFF.XCollectionFactory.LOOKUP_LIST, false);
	return resultStructure;
};
oFF.QResultStructure.prototype.addDefault = function(atBeginning)
{
	let controller = this.getController();
	if (controller.getModelCapabilities().supportsConditionalResults())
	{
		this.addHiddenIfSupported(atBeginning, oFF.ResultStructureElement.TOTAL_INCLUDED_MEMBERS);
		this.addHiddenIfSupported(atBeginning, oFF.ResultStructureElement.TOTAL_REMAINING_MEMBERS);
	}
	if (!this.resultStructureContains(oFF.ResultStructureElement.TOTAL))
	{
		if (atBeginning)
		{
			this.addWithVisibilityAt(0, oFF.ResultStructureElement.TOTAL, oFF.ResultVisibility.HIDDEN);
		}
		else
		{
			this.addWithVisibility(oFF.ResultStructureElement.TOTAL, oFF.ResultVisibility.HIDDEN);
		}
	}
};
oFF.QResultStructure.prototype.addHiddenIfSupported = function(atBeginning, element)
{
	if (this.getModelCapabilities().getSupportedConditionalResults().contains(element))
	{
		if (atBeginning)
		{
			this.addWithVisibilityAt(0, element, oFF.ResultVisibility.HIDDEN);
		}
		else
		{
			this.addWithVisibility(element, oFF.ResultVisibility.HIDDEN);
		}
	}
};
oFF.QResultStructure.prototype.addResultStructureBottomSection = function(items)
{
	this.queueEventing();
	if (oFF.XCollectionUtils.hasElements(items))
	{
		this.addAll(items);
	}
	else
	{
		this.addDefault(false);
	}
	this.resumeEventing();
};
oFF.QResultStructure.prototype.addResultStructureTopSection = function(items)
{
	this.queueEventing();
	if (oFF.XCollectionUtils.hasElements(items))
	{
		let size = items.size();
		for (let i = size - 1; i >= 0; i--)
		{
			this.insert(0, items.get(i));
		}
	}
	else
	{
		this.addDefault(true);
	}
	this.resumeEventing();
};
oFF.QResultStructure.prototype.addWithVisibility = function(element, visibility)
{
	this.add(oFF.QResultStructureItem.createResultStructureItem(this.getContext(), this, element, visibility));
};
oFF.QResultStructure.prototype.addWithVisibilityAt = function(index, element, visibility)
{
	this.insert(index, oFF.QResultStructureItem.createResultStructureItem(this.getContext(), this, element, visibility));
};
oFF.QResultStructure.prototype.applyInitialDefaultResultStructure = function(resultAlignment)
{
	this.queueEventing();
	if (resultAlignment === oFF.ResultAlignment.TOP)
	{
		this.addWithVisibility(oFF.ResultStructureElement.TOTAL, oFF.ResultVisibility.VISIBLE);
		this.addWithVisibility(oFF.ResultStructureElement.MEMBERS, oFF.ResultVisibility.VISIBLE);
		this.addResultStructureTopSection(null);
	}
	else if (resultAlignment === oFF.ResultAlignment.BOTTOM)
	{
		this.addWithVisibility(oFF.ResultStructureElement.MEMBERS, oFF.ResultVisibility.VISIBLE);
		this.addWithVisibility(oFF.ResultStructureElement.TOTAL, oFF.ResultVisibility.VISIBLE);
		this.addResultStructureBottomSection(null);
	}
	else if (resultAlignment === oFF.ResultAlignment.TOPBOTTOM)
	{
		this.addWithVisibility(oFF.ResultStructureElement.TOTAL, oFF.ResultVisibility.VISIBLE);
		this.addWithVisibility(oFF.ResultStructureElement.MEMBERS, oFF.ResultVisibility.VISIBLE);
		this.addWithVisibility(oFF.ResultStructureElement.TOTAL, oFF.ResultVisibility.VISIBLE);
		this.addResultStructureTopSection(null);
		this.addResultStructureBottomSection(null);
	}
	this.resumeEventing();
};
oFF.QResultStructure.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponentList.prototype.copyFromInternal.call( this , other, flags);
	let originResultStructure = other;
	let size = originResultStructure.size();
	let context = this.getContext();
	for (let i = 0; i < size; i++)
	{
		let originItem = originResultStructure.get(i);
		this.add(oFF.QResultStructureItem.createResultStructureItem(context, this, originItem.getResultStructureElement(), originItem.getResultVisibility()));
	}
};
oFF.QResultStructure.prototype.getController = function()
{
	return this.getParentComponent();
};
oFF.QResultStructure.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.RESULT_STRUCTURE;
};
oFF.QResultStructure.prototype.remove = function(element)
{
	let iterator = this.getIterator();
	while (iterator.hasNext())
	{
		let item = iterator.next();
		if (item.getResultStructureElement() === element)
		{
			this.removeElement(item);
			break;
		}
	}
	oFF.XObjectExt.release(iterator);
};
oFF.QResultStructure.prototype.resultStructureContains = function(element)
{
	let iterator = this.getIterator();
	while (iterator.hasNext())
	{
		let next = iterator.next();
		if (next.getResultStructureElement().isEqualTo(element))
		{
			oFF.XObjectExt.release(iterator);
			return true;
		}
	}
	oFF.XObjectExt.release(iterator);
	return false;
};
oFF.QResultStructure.prototype.setResultVisibility = function(index, visibility)
{
	this.get(index).setResultVisibility(visibility);
};
oFF.QResultStructure.prototype.setResultVisibilityByElement = function(element, visibility)
{
	let iterator = this.getIterator();
	let count = 0;
	while (iterator.hasNext())
	{
		let item = iterator.next();
		if (item.getResultStructureElement() === element)
		{
			item.setResultVisibility(visibility);
			count++;
		}
	}
	oFF.XObjectExt.release(iterator);
	if (count === 0)
	{
		let controller = this.getController();
		if (controller.getModelCapabilities().getResultStructureReorderingCapability() === oFF.ReorderingCapability.FULL)
		{
			this.addWithVisibility(element, visibility);
		}
	}
};

oFF.QStructureMember = function() {};
oFF.QStructureMember.prototype = new oFF.QDimensionMember();
oFF.QStructureMember.prototype._ff_c = "QStructureMember";

oFF.QStructureMember.copyMeasure = function(copyMeasure, origMeasure)
{
	let originType = origMeasure.getMemberType();
	if (originType.getParent() === oFF.MemberType.MEASURE)
	{
		copyMeasure.copyFrom(origMeasure, null);
	}
	else
	{
		throw oFF.XException.createIllegalArgumentException("Unknown structure member type.");
	}
};
oFF.QStructureMember.createMeasure = function(memberType, context, dimension)
{
	if (memberType === oFF.MemberType.BASIC_MEASURE)
	{
		return oFF.QBasicMeasure._createBasicMeasure(context, dimension);
	}
	else if (memberType === oFF.MemberType.FORMULA)
	{
		return oFF.QFormulaMeasure._createFormulaMeasure(context, dimension);
	}
	else if (memberType === oFF.MemberType.RESTRICTED_MEASURE)
	{
		return oFF.QRestrictedMeasure._createRestrictedMeasure(context, dimension);
	}
	else if (memberType === oFF.MemberType.VARIANCE)
	{
		return oFF.QVarianceMeasure._createVarianceMeasure(context, dimension);
	}
	else if (memberType === oFF.MemberType.EXCEPTION_AGGREGATION)
	{
		return oFF.QExceptionAggregationMeasure._createExceptionAggregationMeasure(context, dimension);
	}
	else if (memberType === oFF.MemberType.CURRENCY_MEASURE)
	{
		return oFF.QCurrencyMeasure._createCurrencyMeasure(context, dimension);
	}
	else if (memberType === oFF.MemberType.UNIT_MEASURE)
	{
		return oFF.QUnitMeasure._createUnitMeasure(context, dimension);
	}
	else if (memberType === oFF.MemberType.RUNNING_TOTAL)
	{
		return oFF.QRunningTotalMeasure._createRunningTotalMeasure(context, dimension);
	}
	throw oFF.XException.createIllegalArgumentException("Unknown structure member type.");
};
oFF.QStructureMember.createStructureMember = function(context, structure, memberType)
{
	let member = new oFF.QStructureMember();
	member.setupStructureMember(context, structure, memberType);
	return member;
};
oFF.QStructureMember.prototype.m_accountType = null;
oFF.QStructureMember.prototype.m_aggregationType = null;
oFF.QStructureMember.prototype.m_aliasName = null;
oFF.QStructureMember.prototype.m_areNamesStoredAsFlat = false;
oFF.QStructureMember.prototype.m_autoSignFlip = false;
oFF.QStructureMember.prototype.m_cellChartBarColor = null;
oFF.QStructureMember.prototype.m_cellChartLineColor = null;
oFF.QStructureMember.prototype.m_cellChartOrientation = null;
oFF.QStructureMember.prototype.m_cellChartType = null;
oFF.QStructureMember.prototype.m_createdFromMetadata = false;
oFF.QStructureMember.prototype.m_currencyPresentation = null;
oFF.QStructureMember.prototype.m_currencyTranslationName = null;
oFF.QStructureMember.prototype.m_dataType = null;
oFF.QStructureMember.prototype.m_dataTypeInternal = null;
oFF.QStructureMember.prototype.m_dataTypePrecision = null;
oFF.QStructureMember.prototype.m_dataTypeScale = null;
oFF.QStructureMember.prototype.m_defaultSelectionDimensionNames = null;
oFF.QStructureMember.prototype.m_exceptionAggregation = null;
oFF.QStructureMember.prototype.m_externalDimensionIgnoreList = null;
oFF.QStructureMember.prototype.m_hideNumberForCellChart = false;
oFF.QStructureMember.prototype.m_isCumulation = false;
oFF.QStructureMember.prototype.m_isGeneratingTransientObjects = false;
oFF.QStructureMember.prototype.m_isIgnoringAllExternalDimensions = false;
oFF.QStructureMember.prototype.m_isSelectionCandidate = false;
oFF.QStructureMember.prototype.m_minimumDrillState = null;
oFF.QStructureMember.prototype.m_modelDefinedMember = false;
oFF.QStructureMember.prototype.m_numericPrecision = null;
oFF.QStructureMember.prototype.m_numericScale = null;
oFF.QStructureMember.prototype.m_numericShift = null;
oFF.QStructureMember.prototype.m_numericShiftPercent = false;
oFF.QStructureMember.prototype.m_postAggregationDimensionNames = null;
oFF.QStructureMember.prototype.m_postAggregationIgnoreHierarchy = false;
oFF.QStructureMember.prototype.m_postAggregationType = null;
oFF.QStructureMember.prototype.m_preferredHierarchy = null;
oFF.QStructureMember.prototype.m_presentationSignReversal = null;
oFF.QStructureMember.prototype.m_rateType = null;
oFF.QStructureMember.prototype.m_resultCalculation = null;
oFF.QStructureMember.prototype.m_runAggrInitDim = null;
oFF.QStructureMember.prototype.m_runAggrOperator = null;
oFF.QStructureMember.prototype.m_scaleAndUnitPlacement = null;
oFF.QStructureMember.prototype.m_scaleFormat = null;
oFF.QStructureMember.prototype.m_semanticObject = null;
oFF.QStructureMember.prototype.m_showCellChart = false;
oFF.QStructureMember.prototype.m_signPresentation = null;
oFF.QStructureMember.prototype.m_singleValueCalculation = null;
oFF.QStructureMember.prototype.m_solveOrder = null;
oFF.QStructureMember.prototype.m_supportsResultSetSorting = false;
oFF.QStructureMember.prototype.m_unitDimensionName = null;
oFF.QStructureMember.prototype.m_unitDimensionProperty = null;
oFF.QStructureMember.prototype.m_unitFixed = null;
oFF.QStructureMember.prototype.m_unitName = null;
oFF.QStructureMember.prototype.m_unitTextName = null;
oFF.QStructureMember.prototype.m_unitTranslationName = null;
oFF.QStructureMember.prototype.m_unitType = null;
oFF.QStructureMember.prototype.m_validationErrorCodes = null;
oFF.QStructureMember.prototype.m_windowFunction = null;
oFF.QStructureMember.prototype._getDefaultAggregationType = function()
{
	let metaAggregationType = null;
	let metaValue = this.getMetaValue(oFF.QStructureMemberProperties.QY_AGGERGATION_TYPE);
	if (oFF.notNull(metaValue))
	{
		metaAggregationType = oFF.AggregationType.lookup(metaValue.toString());
	}
	return metaAggregationType;
};
oFF.QStructureMember.prototype._getDefaultCurrencyPresentation = function()
{
	let metaCurrencyPresentation = null;
	let metaValue = this.getMetaValue(oFF.QStructureMemberProperties.QY_CURRENCY_PRESENTATION);
	if (oFF.notNull(metaValue))
	{
		metaCurrencyPresentation = oFF.CurrencyPresentation.lookup(metaValue.toString());
	}
	return metaCurrencyPresentation;
};
oFF.QStructureMember.prototype._getDefaultNumericScale = function()
{
	let metaScale = null;
	let metaValue = this.getMetaValue(oFF.QStructureMemberProperties.QY_NUMERIC_SCALE);
	if (oFF.notNull(metaValue))
	{
		let metaValInt = oFF.XInteger.convertFromString(metaValue.toString());
		if (metaValInt !== oFF.QStructureMemberProperties.NULL_INDICATOR_FOR_INTEGERS)
		{
			metaScale = oFF.XIntegerValue.create(metaValInt);
		}
	}
	return metaScale;
};
oFF.QStructureMember.prototype._getDefaultNumericShift = function()
{
	let metaValue = null;
	let metaShift = this.getMetaValue(oFF.QStructureMemberProperties.QY_NUMERIC_SHIFT);
	if (oFF.notNull(metaShift))
	{
		let metaValInt = oFF.XInteger.convertFromString(metaShift.toString());
		if (metaValInt !== oFF.QStructureMemberProperties.NULL_INDICATOR_FOR_INTEGERS)
		{
			metaValue = oFF.XIntegerValue.create(metaValInt);
		}
	}
	return metaValue;
};
oFF.QStructureMember.prototype._getDefaultScaleAndUnitPlacement = function()
{
	let metaScaleAndUnitPlacement = null;
	let metaValue = this.getMetaValue(oFF.QStructureMemberProperties.QY_SCALE_AND_UNIT_PLACEMENT);
	if (oFF.notNull(metaValue))
	{
		metaScaleAndUnitPlacement = oFF.ScaleAndUnitPlacement.lookup(metaValue.toString());
	}
	return metaScaleAndUnitPlacement;
};
oFF.QStructureMember.prototype._getDefaultScaleFormat = function()
{
	let metaScaleFormat = null;
	let metaValue = this.getMetaValue(oFF.QStructureMemberProperties.QY_SCALE_FORMAT);
	if (oFF.notNull(metaValue))
	{
		metaScaleFormat = oFF.ScaleFormat.lookup(metaValue.toString());
	}
	return metaScaleFormat;
};
oFF.QStructureMember.prototype._getDefaultSignPresentation = function()
{
	let metaSignPresentation = null;
	let metaValue = this.getMetaValue(oFF.QStructureMemberProperties.QY_SIGN_PRESENTATION);
	if (oFF.notNull(metaValue))
	{
		metaSignPresentation = oFF.SignPresentation.lookup(metaValue.toString());
	}
	return metaSignPresentation;
};
oFF.QStructureMember.prototype._isExceptionAggregationLoaded = function()
{
	if (oFF.isNull(this.m_exceptionAggregation))
	{
		let qm = this.getQueryModel();
		if (oFF.notNull(qm))
		{
			this.m_exceptionAggregation = oFF.QExceptionAggregation._create(qm._getExceptionAggregationManagerBase());
		}
	}
	return oFF.notNull(this.m_exceptionAggregation);
};
oFF.QStructureMember.prototype._setCurrencyPresentationInternal = function(currencyPresentation)
{
	let oldValue = this.m_currencyPresentation;
	this.m_currencyPresentation = currencyPresentation;
	this.notifyPropertyConstantChanged(oFF.QStructureMemberProperties.QY_CURRENCY_PRESENTATION, oldValue, currencyPresentation);
};
oFF.QStructureMember.prototype._setExceptionAggregationDimensionNames = function(dimensionNames)
{
	if (this._isExceptionAggregationLoaded())
	{
		let oldValue = this.m_exceptionAggregation._getUsedDimensionNames();
		let actuallySet = this.m_exceptionAggregation._setUsedDimensionNames(dimensionNames);
		if (actuallySet)
		{
			this.notifyPropertyChanged(oFF.QStructureMemberProperties.QY_EXCEPTION_AGGREGATION_DIMENSIONS, oldValue, this.m_postAggregationDimensionNames);
		}
	}
};
oFF.QStructureMember.prototype._setExternalDimensionsToIgnore = function(externalDimensionNames)
{
	let oldValue = oFF.notNull(this.m_externalDimensionIgnoreList) ? this.m_externalDimensionIgnoreList.createListCopy() : null;
	if (oFF.notNull(oldValue))
	{
		oldValue.sortByDirection(oFF.XSortDirection.ASCENDING);
	}
	externalDimensionNames.sortByDirection(oFF.XSortDirection.ASCENDING);
	if (oFF.isNull(oldValue) || !oldValue.isEqualTo(externalDimensionNames))
	{
		this.clearIgnoredExternalDimensions();
		this.m_externalDimensionIgnoreList = externalDimensionNames.createListCopy();
		this.notifyPropertyChanged(oFF.QStructureMemberProperties.QY_IGNORE_EXTERNAL_DIMENSIONS, oldValue, this.m_postAggregationDimensionNames);
	}
};
oFF.QStructureMember.prototype._setNumericPrecisionInternal = function(precision)
{
	let oldValue = oFF.isNull(this.m_numericPrecision) ? oFF.QStructureMemberProperties.NULL_INDICATOR_FOR_INTEGERS : this.m_numericPrecision.getInteger();
	let newValue = oFF.isNull(precision) ? oFF.QStructureMemberProperties.NULL_INDICATOR_FOR_INTEGERS : precision.getInteger();
	this.m_numericPrecision = precision;
	this.notifyPropertyIntegerChanged(oFF.QStructureMemberProperties.QY_NUMERIC_PRECISION, oldValue, newValue);
};
oFF.QStructureMember.prototype._setNumericScaleInternal = function(scale)
{
	let oldValue = oFF.isNull(this.m_numericScale) ? oFF.QStructureMemberProperties.NULL_INDICATOR_FOR_INTEGERS : this.m_numericScale.getInteger();
	let newValue = oFF.isNull(scale) ? oFF.QStructureMemberProperties.NULL_INDICATOR_FOR_INTEGERS : scale.getInteger();
	this.m_numericScale = scale;
	this.notifyPropertyIntegerChanged(oFF.QStructureMemberProperties.QY_NUMERIC_SCALE, oldValue, newValue);
};
oFF.QStructureMember.prototype._setNumericShiftInternal = function(shift)
{
	let oldValue = oFF.isNull(this.m_numericShift) ? oFF.QStructureMemberProperties.NULL_INDICATOR_FOR_INTEGERS : this.m_numericShift.getInteger();
	let newValue = oFF.isNull(shift) ? oFF.QStructureMemberProperties.NULL_INDICATOR_FOR_INTEGERS : shift.getInteger();
	this.m_numericShift = shift;
	this.notifyPropertyIntegerChanged(oFF.QStructureMemberProperties.QY_NUMERIC_SHIFT, oldValue, newValue);
};
oFF.QStructureMember.prototype._setPostAggregationDimensions = function(postAggregationDimensions)
{
	let oldValue = oFF.notNull(this.m_postAggregationDimensionNames) ? this.m_postAggregationDimensionNames.createListCopy() : null;
	if (oFF.notNull(oldValue))
	{
		oldValue.sortByDirection(oFF.XSortDirection.ASCENDING);
	}
	postAggregationDimensions.sortByDirection(oFF.XSortDirection.ASCENDING);
	if (oFF.isNull(oldValue) && oFF.XCollectionUtils.hasElements(postAggregationDimensions) || oFF.notNull(oldValue) && !oldValue.isEqualTo(postAggregationDimensions))
	{
		this.clearPostAggregationDimensions();
		this.m_postAggregationDimensionNames = postAggregationDimensions.createListCopy();
		this.notifyPropertyChanged(oFF.QStructureMemberProperties.QY_POST_AGGREGATION_DIMENSIONS, oldValue, this.m_postAggregationDimensionNames);
	}
};
oFF.QStructureMember.prototype._setScaleFormatInternal = function(scaleFormat)
{
	let oldValue = this.m_scaleFormat;
	this.m_scaleFormat = scaleFormat;
	this.notifyPropertyConstantChanged(oFF.QStructureMemberProperties.QY_SCALE_FORMAT, oldValue, scaleFormat);
};
oFF.QStructureMember.prototype._setSetScaleAndUnitPlacementInternal = function(scaleAndUnitPlacement)
{
	let oldValue = this.m_scaleAndUnitPlacement;
	this.m_scaleAndUnitPlacement = scaleAndUnitPlacement;
	this.notifyPropertyConstantChanged(oFF.QStructureMemberProperties.QY_SCALE_AND_UNIT_PLACEMENT, oldValue, scaleAndUnitPlacement);
};
oFF.QStructureMember.prototype._setSignPresentationInternal = function(signPresentation)
{
	let oldValue = this.m_signPresentation;
	this.m_signPresentation = signPresentation;
	this.notifyPropertyConstantChanged(oFF.QStructureMemberProperties.QY_SIGN_PRESENTATION, oldValue, signPresentation);
};
oFF.QStructureMember.prototype.acceptsMoreExceptionAggregationDimensions = function()
{
	if (!this._isExceptionAggregationLoaded())
	{
		return false;
	}
	let aggrType = this.m_exceptionAggregation._getAggregationType();
	if (oFF.isNull(aggrType))
	{
		return true;
	}
	let dimMaxSize = this.m_exceptionAggregation.getParent()._getMaxNumberOfAllowedDimensions(this.getOlapComponentType(), aggrType);
	return dimMaxSize === -1 || this.getExceptionAggregationDimensions().size() < dimMaxSize;
};
oFF.QStructureMember.prototype.addDefaultSelectionDimensionByName = function(dimensionName)
{
	if (oFF.isNull(this.m_defaultSelectionDimensionNames))
	{
		this.m_defaultSelectionDimensionNames = oFF.XList.create();
	}
	this.m_defaultSelectionDimensionNames.add(dimensionName);
};
oFF.QStructureMember.prototype.addExceptionAggregationDimension = function(dimension)
{
	this.addExceptionAggregationDimensionName(dimension.getName());
};
oFF.QStructureMember.prototype.addExceptionAggregationDimensionName = function(dimensionName)
{
	if (this._isExceptionAggregationLoaded() && !this.m_exceptionAggregation._getUsedDimensionNames().contains(dimensionName))
	{
		let actuallyAdded = this.m_exceptionAggregation._addDimension(dimensionName);
		if (actuallyAdded)
		{
			this.notifyPropertyChanged(oFF.QStructureMemberProperties.QY_EXCEPTION_AGGREGATION_DIMENSIONS, null, null);
		}
	}
};
oFF.QStructureMember.prototype.addExternalDimensionToIgnore = function(externalDimensionName)
{
	if (!this.getModelCapabilities().supportsIgnoreExternalDimensions())
	{
		oFF.noSupport();
	}
	let externalDimensionIgnoreList = this.getIgnoredExternalDimensions();
	let oldValue = externalDimensionIgnoreList.createListCopy();
	if (oFF.XString.isEqual(externalDimensionName, "All"))
	{
		externalDimensionIgnoreList.clear();
		this.setIgnoreAllExternalDimensions(true);
	}
	else
	{
		if (!externalDimensionIgnoreList.contains(externalDimensionName))
		{
			externalDimensionIgnoreList.add(externalDimensionName);
		}
		this.setIgnoreAllExternalDimensions(false);
	}
	oldValue.sortByDirection(oFF.XSortDirection.ASCENDING);
	externalDimensionIgnoreList.sortByDirection(oFF.XSortDirection.ASCENDING);
	if (!oldValue.isEqualTo(externalDimensionIgnoreList))
	{
		this.notifyPropertyChanged(oFF.QStructureMemberProperties.QY_IGNORE_EXTERNAL_DIMENSIONS, oldValue, externalDimensionIgnoreList);
	}
};
oFF.QStructureMember.prototype.addFieldsUsedInComplexContainer = function(complexSelectionRoot, usedFields)
{
	let componentType = complexSelectionRoot.getComponentType();
	if (componentType === oFF.FilterComponentType.OPERATION)
	{
		let filterOp = complexSelectionRoot;
		usedFields.add(filterOp.getFieldMetadata().getName());
	}
	else if (componentType === oFF.FilterComponentType.AND || componentType === oFF.FilterComponentType.OR)
	{
		let filterAlgebra = complexSelectionRoot;
		let filterSize = filterAlgebra.size();
		for (let idxAnd = 0; idxAnd < filterSize; idxAnd++)
		{
			this.addFieldsUsedInComplexContainer(filterAlgebra.get(idxAnd), usedFields);
		}
	}
	else if (componentType === oFF.FilterComponentType.CARTESIAN_LIST)
	{
		let complexCartesianList = complexSelectionRoot;
		usedFields.add(complexCartesianList.getFieldMetadata().getName());
	}
};
oFF.QStructureMember.prototype.addMinimumDrillState = function(minimumDrillState)
{
	this.m_minimumDrillState.add(minimumDrillState);
	this.notifyNodeChanged();
};
oFF.QStructureMember.prototype.addPostAggregationDimension = function(dimension)
{
	this.addPostAggregationDimensionName(dimension.getName());
};
oFF.QStructureMember.prototype.addPostAggregationDimensionName = function(dimensionName)
{
	if (oFF.isNull(this.m_postAggregationDimensionNames))
	{
		this.m_postAggregationDimensionNames = oFF.XList.create();
	}
	if (!this.m_postAggregationDimensionNames.contains(dimensionName))
	{
		let oldValue = this.m_postAggregationDimensionNames.createListCopy();
		this.m_postAggregationDimensionNames.add(dimensionName);
		this.m_postAggregationDimensionNames.sortByDirection(oFF.XSortDirection.ASCENDING);
		this.notifyPropertyChanged(oFF.QStructureMemberProperties.QY_POST_AGGREGATION_DIMENSIONS, oldValue, this.m_postAggregationDimensionNames);
	}
};
oFF.QStructureMember.prototype.assertStandardAggregationType = function(aggregationType)
{
	if (oFF.notNull(aggregationType) && this.getModelCapabilities().supportsExceptionAggregationDimsFormulas())
	{
		let memberType = this.getMemberType();
		if (memberType === oFF.MemberType.BASIC_MEASURE || memberType === oFF.MemberType.RESTRICTED_MEASURE)
		{
			if (oFF.XStringUtils.isNullOrEmpty(this.getAggregationDimensionName()) && (aggregationType === oFF.AggregationType.AVERAGE || aggregationType === oFF.AggregationType.COUNT))
			{
				return;
			}
		}
		if (aggregationType !== oFF.AggregationType.SUM && aggregationType !== oFF.AggregationType.MIN && aggregationType !== oFF.AggregationType.MAX && aggregationType !== oFF.AggregationType.NOP_NULL && aggregationType !== oFF.AggregationType.NOP_NULL_ZERO && aggregationType !== oFF.AggregationType.COUNT_DISTINCT)
		{
			throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate3("The aggregation type '", aggregationType.getName(), "' is not valid as standard aggregation. Use it as Exception Aggregation!"));
		}
	}
};
oFF.QStructureMember.prototype.assertSupportsAggregation = function(aggregationType)
{
	if (oFF.isNull(aggregationType))
	{
		return;
	}
	let componentType = this.getOlapComponentType();
	let queryModel = this.getQueryModel();
	let invalid = false;
	let isAvgNull = aggregationType === oFF.AggregationType.AVERAGE_NULL || aggregationType === oFF.AggregationType.AVERAGE_NULL_ZERO;
	let isCountNull = aggregationType === oFF.AggregationType.COUNT_NULL || aggregationType === oFF.AggregationType.COUNT_NULL_ZERO;
	let isStatisticalAggregation = aggregationType === oFF.AggregationType.MEDIAN || aggregationType === oFF.AggregationType.MEDIAN_NULL || aggregationType === oFF.AggregationType.MEDIAN_NULL_ZERO || aggregationType === oFF.AggregationType.FIRST_QUARTILE || aggregationType === oFF.AggregationType.FIRST_QUARTILE_NULL || aggregationType === oFF.AggregationType.FIRST_QUARTILE_NULL_ZERO || aggregationType === oFF.AggregationType.THIRD_QUARTILE || aggregationType === oFF.AggregationType.THIRD_QUARTILE_NULL || aggregationType === oFF.AggregationType.THIRD_QUARTILE_NULL_ZERO || aggregationType === oFF.AggregationType.OUTLIERS || aggregationType === oFF.AggregationType.OUTLIERS_NULL || aggregationType === oFF.AggregationType.OUTLIERS_NULL_ZERO;
	let modelCapabilities = queryModel.getModelCapabilities();
	if (isStatisticalAggregation && !modelCapabilities.supportsStatisticalAggregations())
	{
		invalid = true;
	}
	if (isAvgNull)
	{
		let validAvgNullForRM = componentType === oFF.MemberType.RESTRICTED_MEASURE && modelCapabilities.supportsExceptionAggregationAvgNullSelectionMember();
		if (componentType !== oFF.MemberType.FORMULA && !validAvgNullForRM)
		{
			invalid = true;
		}
	}
	if (isCountNull)
	{
		let validCountNullForRM = componentType === oFF.MemberType.RESTRICTED_MEASURE && modelCapabilities.supportsExceptionAggregationCountNullSelectionMember();
		if (componentType !== oFF.MemberType.FORMULA && !validCountNullForRM)
		{
			invalid = true;
		}
	}
	if ((aggregationType === oFF.AggregationType.FIRST_OF_DIMENSION || aggregationType === oFF.AggregationType.LAST_OF_DIMENSION || aggregationType === oFF.AggregationType.AVERAGE_OF_DIMENSION) && !modelCapabilities.supportsAggregationsFirstLastAverageOfDimension())
	{
		invalid = true;
	}
	if (invalid)
	{
		throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate3("The aggregation type '", aggregationType.getName(), "' is not applicable!"));
	}
};
oFF.QStructureMember.prototype.canMaterializeCompleteObject = function()
{
	return !this.isAvailableInMetadata() && !this.isModelDefinedMember();
};
oFF.QStructureMember.prototype.clearExceptionAggregationDimensions = function()
{
	if (this._isExceptionAggregationLoaded())
	{
		this.m_exceptionAggregation._clearUsedDimensions();
		this.notifyPropertyChanged(oFF.QStructureMemberProperties.QY_EXCEPTION_AGGREGATION_DIMENSIONS, null, null);
	}
};
oFF.QStructureMember.prototype.clearIgnoredExternalDimensions = function()
{
	let oldValue = null;
	if (oFF.notNull(this.m_externalDimensionIgnoreList))
	{
		oldValue = this.m_externalDimensionIgnoreList.createListCopy();
		this.m_externalDimensionIgnoreList.clear();
		this.notifyPropertyChanged(oFF.QStructureMemberProperties.QY_IGNORE_EXTERNAL_DIMENSIONS, oldValue, this.m_externalDimensionIgnoreList);
	}
	this.setIgnoreAllExternalDimensions(false);
};
oFF.QStructureMember.prototype.clearPostAggregationDimensions = function()
{
	if (oFF.notNull(this.m_postAggregationDimensionNames))
	{
		let oldValue = this.m_postAggregationDimensionNames.createListCopy();
		this.m_postAggregationDimensionNames.clear();
		this.notifyPropertyChanged(oFF.QStructureMemberProperties.QY_POST_AGGREGATION_DIMENSIONS, oldValue, this.m_postAggregationDimensionNames);
	}
};
oFF.QStructureMember.prototype.copyFromInternal = function(other, flags)
{
	this.copySharableProperties(other, false);
};
oFF.QStructureMember.prototype.copySharableProperties = function(origin, isShallowCopy)
{
	oFF.QDimensionMember.prototype.copyFromInternal.call( this , origin, null);
	let originStructureMember = origin;
	this.m_supportsResultSetSorting = originStructureMember.m_supportsResultSetSorting;
	this.m_aggregationType = originStructureMember.m_aggregationType;
	this.m_areNamesStoredAsFlat = originStructureMember.m_areNamesStoredAsFlat;
	this.m_preferredHierarchy = originStructureMember.m_preferredHierarchy;
	this.m_postAggregationType = originStructureMember.m_postAggregationType;
	if (oFF.notNull(originStructureMember.m_postAggregationDimensionNames))
	{
		this.m_postAggregationDimensionNames = originStructureMember.m_postAggregationDimensionNames.createListCopy();
	}
	this.m_postAggregationIgnoreHierarchy = originStructureMember.m_postAggregationIgnoreHierarchy;
	if (oFF.notNull(originStructureMember.m_exceptionAggregation) && this._isExceptionAggregationLoaded())
	{
		this.m_exceptionAggregation.copyFrom(originStructureMember.m_exceptionAggregation, null);
	}
	this.m_runAggrOperator = originStructureMember.m_runAggrOperator;
	this.m_runAggrInitDim = originStructureMember.m_runAggrInitDim;
	this.m_resultCalculation = originStructureMember.m_resultCalculation;
	this.m_singleValueCalculation = originStructureMember.m_singleValueCalculation;
	this.m_isCumulation = originStructureMember.m_isCumulation;
	if (oFF.notNull(originStructureMember.m_numericScale))
	{
		this.setNumericScale(originStructureMember.m_numericScale.getInteger());
	}
	if (oFF.notNull(originStructureMember.m_numericPrecision))
	{
		this.setNumericPrecision(originStructureMember.m_numericPrecision.getInteger());
	}
	if (oFF.notNull(originStructureMember.m_numericShift))
	{
		this.setNumericShift(originStructureMember.m_numericShift.getInteger());
	}
	if (originStructureMember.m_numericShiftPercent)
	{
		this.setNumericShiftPercent(true);
	}
	if (oFF.notNull(originStructureMember.m_dataTypePrecision))
	{
		this.setDataTypePrecision(originStructureMember.m_dataTypePrecision.getInteger());
	}
	if (oFF.notNull(originStructureMember.m_dataTypeScale))
	{
		this.setDataTypeScale(originStructureMember.m_dataTypeScale.getInteger());
	}
	if (oFF.notNull(originStructureMember.m_externalDimensionIgnoreList))
	{
		this.m_externalDimensionIgnoreList = originStructureMember.m_externalDimensionIgnoreList.createListCopy();
	}
	this.m_isIgnoringAllExternalDimensions = originStructureMember.m_isIgnoringAllExternalDimensions;
	this.m_isSelectionCandidate = originStructureMember.m_isSelectionCandidate;
	if (oFF.notNull(originStructureMember.m_presentationSignReversal))
	{
		this.setPresentationSignReversal(originStructureMember.m_presentationSignReversal.getBoolean());
	}
	if (oFF.notNull(originStructureMember.m_defaultSelectionDimensionNames))
	{
		this.m_defaultSelectionDimensionNames = oFF.XList.create();
		this.m_defaultSelectionDimensionNames.addAll(originStructureMember.m_defaultSelectionDimensionNames);
	}
	if (oFF.notNull(originStructureMember.m_unitType))
	{
		this.setUnitType(originStructureMember.m_unitType);
	}
	this.setUnitFixed(originStructureMember.m_unitFixed);
	this.setUnitName(originStructureMember.m_unitName);
	this.setUnitTextName(originStructureMember.m_unitTextName);
	this.setDataType(originStructureMember.m_dataType);
	this.setDataTypeInternal(originStructureMember.m_dataTypeInternal);
	this.setAliasName(originStructureMember.m_aliasName);
	if (oFF.notNull(originStructureMember.m_accountType))
	{
		this.setAccountType(originStructureMember.m_accountType);
	}
	this.setAutoSignFlip(originStructureMember.m_autoSignFlip);
	this.m_createdFromMetadata = originStructureMember.m_createdFromMetadata;
	if (originStructureMember.getWindowFunction() !== null)
	{
		this.m_windowFunction = oFF.QWindowFunction._createWindowFunction(null);
		this.m_windowFunction.copyFrom(originStructureMember.getWindowFunction(), null);
	}
	this.setModelDefinedMember(originStructureMember.m_modelDefinedMember);
	if (oFF.notNull(originStructureMember.m_solveOrder))
	{
		this.setSolveOrder(originStructureMember.m_solveOrder.getInteger());
	}
	this.m_currencyTranslationName = originStructureMember.m_currencyTranslationName;
	this.m_rateType = originStructureMember.m_rateType;
	this.m_unitDimensionName = originStructureMember.m_unitDimensionName;
	this.m_unitDimensionProperty = originStructureMember.m_unitDimensionProperty;
	this.m_unitTranslationName = originStructureMember.m_unitTranslationName;
	this.m_minimumDrillState = originStructureMember.m_minimumDrillState.createListCopy();
	this.m_cellChartBarColor = originStructureMember.m_cellChartBarColor;
	this.m_cellChartLineColor = originStructureMember.m_cellChartLineColor;
	this.m_cellChartOrientation = originStructureMember.m_cellChartOrientation;
	this.m_hideNumberForCellChart = originStructureMember.m_hideNumberForCellChart;
	this.m_cellChartType = originStructureMember.m_cellChartType;
	this.m_showCellChart = originStructureMember.m_showCellChart;
	this.m_semanticObject = originStructureMember.m_semanticObject;
};
oFF.QStructureMember.prototype.destroyTransientObjects = function(context)
{
	let clientQueryObjectManager = this.getOlapEnv().getClientQueryObjectManager();
	if (clientQueryObjectManager.getClientQueryObjectByKeyRef(this) !== null)
	{
		let dimensionContext = this.getDimensionContext(context.getQueryManager());
		if (oFF.notNull(dimensionContext))
		{
			let memberToDestroy = oFF.XList.create();
			let allStructureMembers = dimensionContext.getLoadedStructureMembers();
			for (let i = allStructureMembers.size() - 1; i >= 0; i--)
			{
				let member = allStructureMembers.get(i);
				if (oFF.notNull(member))
				{
					let isTransientMemberTag = oFF.QTransientConstants.createIsTransientMemberTag(member.getAliasOrMemberName());
					if (dimensionContext.getTagging().containsKey(isTransientMemberTag))
					{
						dimensionContext.removeMeasure(member.getName());
						dimensionContext.getTagging().remove(isTransientMemberTag);
						member.getTagging().remove(oFF.QTransientConstants.TAG_IS_TRANSIENT_DEFAULT_VISIBLITY);
						memberToDestroy.add(member);
					}
				}
			}
			for (let k = 0; k < memberToDestroy.size(); k++)
			{
				memberToDestroy.get(k).destroyTransientObjects(dimensionContext);
			}
		}
		let freeAxis = context.getQueryModel().getFreeAxis();
		let dimensions = freeAxis.getDimensions();
		for (let j = dimensions.size() - 1; j >= 0; j--)
		{
			let dimension = dimensions.get(j);
			if (dimension.getTagging().containsKey(oFF.QTransientConstants.TAG_IS_TRANSIENT))
			{
				let formulaCalcDim = dimension;
				context.getQueryModel().getDimensionManagerBase().removeCalculatedDimensionByName(formulaCalcDim.getName());
				formulaCalcDim.destroyTransientObjects(dimensionContext);
				oFF.XObjectExt.release(formulaCalcDim);
			}
		}
	}
	this.m_validationErrorCodes.clear();
};
oFF.QStructureMember.prototype.exportOverdefinedRestrictedMeasure = function(context, dimensionContext)
{
	let restrictedMeasure = oFF.QStructureMember.createMeasure(oFF.MemberType.RESTRICTED_MEASURE, context.getQueryModel(), dimensionContext);
	restrictedMeasure.copySharableProperties(this, true);
	if (this.getAccountType() === oFF.AccountType.INC || this.getAccountType() === oFF.AccountType.LEQ)
	{
		restrictedMeasure.setPresentationSignReversal(true);
	}
	let dimension = context.getQueryModel().getPrimaryCalculationDimension();
	let cartesianList = restrictedMeasure.getFilter().getCartesianListByField(dimension.getFlatKeyField());
	let hierarchyName = dimension.getHierarchyName() !== null ? dimension.getHierarchyName() : dimension.getDefaultHierarchyName();
	cartesianList.setHierarchyName(hierarchyName);
	let cartesianElement = cartesianList.addNewCartesianElement();
	cartesianElement.setComparisonOperator(oFF.ComparisonOperator.EQUAL);
	let memberKey = this.getName();
	let startStringToStrip = oFF.XStringUtils.concatenate5("[", this.getDimension().getName(), "].[", hierarchyName, "].&[");
	if (oFF.XString.startsWith(memberKey, startStringToStrip) && oFF.XString.endsWith(memberKey, "]"))
	{
		memberKey = oFF.XString.substring(memberKey, oFF.XString.size(startStringToStrip), oFF.XString.lastIndexOf(memberKey, "]"));
	}
	cartesianElement.getLow().setString(memberKey);
	return restrictedMeasure;
};
oFF.QStructureMember.prototype.exportRuntimeObject = function(context, messageManager)
{
	if (!this.validateBeforeRuntimeObjectExport(context, messageManager))
	{
		return null;
	}
	let dimensionContext;
	let capabilities = context.getModelCapabilities();
	let returnValue = this;
	if (this.getDimension().getDimensionType() === oFF.DimensionType.ACCOUNT && this.getMemberType() === oFF.MemberType.BASIC_MEASURE && capabilities.supportsRestrictedMeasures() && !context.getQueryModel().isBlendingModel())
	{
		this.setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_DO_NOT_RAISEEVENTS);
		context.getQueryModel().setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_DO_NOT_RAISEEVENTS);
		dimensionContext = context.getQueryModel().getDimensionByName(this.getDimension().getName());
		let exportOverdefinedRestrictedMeasure = this.exportOverdefinedRestrictedMeasure(context, dimensionContext);
		context.getQueryModel().resumeEventing();
		this.resumeEventing();
		returnValue = exportOverdefinedRestrictedMeasure;
	}
	else if (this.requireRuntimeExport(context))
	{
		this.setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_DO_NOT_RAISEEVENTS);
		context.getQueryModel().setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_DO_NOT_RAISEEVENTS);
		dimensionContext = context.getQueryModel().getDimensionByName(this.getDimension().getName());
		let copiedMeasure = oFF.QStructureMember.createMeasure(this.getMemberType(), context.getQueryModel(), dimensionContext);
		copiedMeasure.copySharableProperties(this, true);
		let placeholderId = dimensionContext.getRuntimePlaceholderIdByAlias(this.getAliasName());
		if (oFF.notNull(placeholderId))
		{
			copiedMeasure.setName(placeholderId);
		}
		let visibilityOverride = dimensionContext.getOverdefinedMemberManager().getVisibilityOverride(this.getAliasOrMemberName());
		if (context.getModelCapabilities().supportsMemberVisibility())
		{
			if (oFF.notNull(visibilityOverride))
			{
				copiedMeasure.setResultVisibility(visibilityOverride);
			}
			else if (dimensionContext.getTagging().containsKey(oFF.QTransientConstants.createIsTransientMemberTag(copiedMeasure.getAliasOrMemberName())) && !copiedMeasure.getTagging().containsKey(oFF.QTransientConstants.TAG_IS_TRANSIENT_DEFAULT_VISIBLITY))
			{
				copiedMeasure.setResultVisibility(oFF.ResultVisibility.HIDDEN);
			}
		}
		let numericScale = dimensionContext.getOverdefinedMemberManager().getNumericScaleOverride(this.getAliasOrMemberName());
		if (oFF.notNull(numericScale))
		{
			copiedMeasure.setNumericScale(numericScale.getInteger());
		}
		let numericShift = dimensionContext.getOverdefinedMemberManager().getNumericShiftOverride(this.getAliasOrMemberName());
		if (oFF.notNull(numericShift))
		{
			copiedMeasure.setNumericShift(numericShift.getInteger());
		}
		let numericPrecision = dimensionContext.getOverdefinedMemberManager().getNumericPrecisionOverride(this.getAliasOrMemberName());
		if (oFF.notNull(numericPrecision))
		{
			copiedMeasure.setNumericPrecision(numericPrecision.getInteger());
		}
		context.getQueryModel().resumeEventing();
		this.resumeEventing();
		returnValue = copiedMeasure;
	}
	return returnValue;
};
oFF.QStructureMember.prototype.generateDependentFormulaCalcDim = function(context, messageManager, dimensionContext, formulaCalcDimProperties)
{
	if (oFF.notNull(formulaCalcDimProperties))
	{
		let newFormulaCalculatedDimension = oFF.QFactory.createFormulaCalculatedDimension(context, formulaCalcDimProperties.getName());
		newFormulaCalculatedDimension.setPropertiesKeyRef(formulaCalcDimProperties);
		context.getQueryModel().addDimension(newFormulaCalculatedDimension);
		context.getQueryModel().getFreeAxis().add(newFormulaCalculatedDimension);
		newFormulaCalculatedDimension.getTagging().put(oFF.QTransientConstants.TAG_IS_TRANSIENT, "");
	}
};
oFF.QStructureMember.prototype.generateTransientObjects = function(context, messageManager)
{
	if (this.getContext() === null || this.getDimension() === null || this.getOlapEnv() === null || this.m_isGeneratingTransientObjects)
	{
		return;
	}
	let isMeasureInUse = this.isMeasureInUse(context, false);
	if (isMeasureInUse && !this.validate(context, messageManager, true, false))
	{
		return;
	}
	this.m_isGeneratingTransientObjects = true;
	try
	{
		let clientQueryObjectManager = this.getOlapEnv().getClientQueryObjectManager();
		let storageName = this.getStorageName();
		if (clientQueryObjectManager.getClientQueryObjectByKeyRef(this) === null)
		{
			storageName = this.getQueryManager().getClientQueryObjectStorageName();
		}
		if (oFF.notNull(storageName))
		{
			let dimensionContext = this.getDimensionContext(context.getQueryManager());
			if (oFF.notNull(dimensionContext))
			{
				let dependentMemberNames = this.getTopLevelDependentMemberNames(context);
				if (oFF.notNull(dependentMemberNames))
				{
					let isPrimaryStructure = dimensionContext === context.getQueryModel().getPrimaryCalculationDimension();
					let memberNamesIter = dependentMemberNames.getIterator();
					while (memberNamesIter.hasNext())
					{
						let memberName = memberNamesIter.next();
						if (dimensionContext.getStructureMemberByAliasOrMember(memberName) === null)
						{
							let dependentMember = this.getSharedStructuredMember(memberName, storageName, isPrimaryStructure);
							if (oFF.notNull(dependentMember))
							{
								dependentMember.generateTransientObjects(dimensionContext, messageManager);
								if (dimensionContext.getStructureMemberByAliasOrMember(dependentMember.getName()) === null)
								{
									dimensionContext.getTagging().put(oFF.QTransientConstants.createIsTransientMemberTag(dependentMember.getAliasOrMemberName()), "");
									dimensionContext.addMeasure(dependentMember);
								}
							}
							if (oFF.isNull(dependentMember) && this.getSession().hasFeature(oFF.FeatureToggleOlap.STORY_CALCULATIONS_MEMBER_SELECT) && context.getQueryManager().getQueryModel().isUniversalAccountModel())
							{
								dependentMember = clientQueryObjectManager.getStructuredMember(memberName, storageName, !isPrimaryStructure);
								if (oFF.notNull(dependentMember))
								{
									let dimContext = isPrimaryStructure ? context.getQueryManager().getQueryModel().getSecondaryCalculationDimension() : context.getQueryManager().getQueryModel().getPrimaryCalculationDimension();
									dependentMember.generateTransientObjects(dimContext, messageManager);
									if (dimContext.getStructureMemberByAliasOrMember(dependentMember.getName()) === null)
									{
										dimContext.getTagging().put(oFF.QTransientConstants.createIsTransientMemberTag(dependentMember.getAliasOrMemberName()), "");
										dimContext.addMeasure(dependentMember);
									}
								}
							}
						}
					}
				}
			}
			let dependentFieldNames = this.getTopLevelDependentFieldNames(context);
			let dependentFieldNamesIter = dependentFieldNames.getIterator();
			let formulaCalcDimProperties;
			while (dependentFieldNamesIter.hasNext())
			{
				let fieldName = dependentFieldNamesIter.next();
				if (context.getQueryModel().getFieldByNameOrAlias(fieldName) === null)
				{
					formulaCalcDimProperties = clientQueryObjectManager.getFormulaCalcDimPropertiesByFieldName(fieldName, this.getStorageName());
					this.generateDependentFormulaCalcDim(context, messageManager, dimensionContext, formulaCalcDimProperties);
				}
			}
		}
		this.m_isGeneratingTransientObjects = false;
	}
	catch (t)
	{
		this.m_isGeneratingTransientObjects = false;
		messageManager.addError(0, oFF.XException.getMessage(t));
	}
};
oFF.QStructureMember.prototype.getAccountType = function()
{
	return this.m_accountType;
};
oFF.QStructureMember.prototype.getAggregationType = function()
{
	return this.m_aggregationType;
};
oFF.QStructureMember.prototype.getAliasName = function()
{
	return this.m_aliasName;
};
oFF.QStructureMember.prototype.getAliasOrMemberName = function()
{
	if (oFF.notNull(this.m_aliasName))
	{
		return this.m_aliasName;
	}
	return this.getName();
};
oFF.QStructureMember.prototype.getAllRequiredDimensionNames = function(context, messageManager, missingFieldNames)
{
	let dimensionAndFieldNames = this.getRequiredDimensionAndFieldNames();
	let queryModel = context.getQueryModel();
	let allRequiredDimensionNames = this.getDimensionNamesFromRequiredFieldNames(dimensionAndFieldNames.getSecondObject(), queryModel, messageManager, missingFieldNames);
	let dimensionNamesIterator = dimensionAndFieldNames.getFirstObject().getIterator();
	while (dimensionNamesIterator.hasNext())
	{
		let dimensionName = dimensionNamesIterator.next();
		if (!oFF.XString.isEqual(dimensionName, this.getDimension().getName()))
		{
			allRequiredDimensionNames.add(dimensionName);
		}
	}
	return allRequiredDimensionNames;
};
oFF.QStructureMember.prototype.getAvailableFormulaExceptionIds = function(context)
{
	let formulaThresholdIds = oFF.XHashSetOfString.create();
	if (oFF.notNull(context))
	{
		let formulaThresholdIterator = context.getQueryModel().getFormulaExceptionManager().getIterator();
		while (formulaThresholdIterator.hasNext())
		{
			let formulaThreshold = formulaThresholdIterator.next();
			if (oFF.notNull(formulaThreshold) && oFF.XString.isEqual(formulaThreshold.getBaseMeasureName(), this.getAliasOrMemberName()))
			{
				formulaThresholdIds.add(formulaThreshold.getName());
			}
		}
	}
	return formulaThresholdIds;
};
oFF.QStructureMember.prototype.getCellChartBarColor = function()
{
	return this.m_cellChartBarColor;
};
oFF.QStructureMember.prototype.getCellChartLineColor = function()
{
	return this.m_cellChartLineColor;
};
oFF.QStructureMember.prototype.getCellChartOrientation = function()
{
	return this.m_cellChartOrientation;
};
oFF.QStructureMember.prototype.getCellChartOrientationEffective = function()
{
	let effective = this.m_cellChartOrientation;
	if (oFF.isNull(effective))
	{
		if (this.getDimension().getAxisType() === oFF.AxisType.COLUMNS)
		{
			effective = oFF.CellChartOrientation.HORIZONTAL;
		}
		else
		{
			effective = oFF.CellChartOrientation.VERTICAL;
		}
	}
	return effective;
};
oFF.QStructureMember.prototype.getCellChartType = function()
{
	return this.m_cellChartType;
};
oFF.QStructureMember.prototype.getCellValueType = function()
{
	if (this.getQueryManager() === null || this.getQueryManager().isShallow())
	{
		return null;
	}
	let capabilities = this.getModelCapabilities();
	if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
	{
		let dataCells = this.getQueryDataCells();
		if (dataCells.hasElements())
		{
			let prevValueType = dataCells.get(0).getBaseValueType();
			for (let i = 0; i < dataCells.size(); i++)
			{
				let dataCell = dataCells.get(i);
				let currValueType = dataCell.getBaseValueType();
				if (prevValueType !== currValueType)
				{
					return null;
				}
			}
			return prevValueType;
		}
	}
	return null;
};
oFF.QStructureMember.prototype.getCurrencyPresentation = function()
{
	if (this.getQueryManager() === null || this.getQueryManager().isShallow())
	{
		return null;
	}
	let capabilities = this.getModelCapabilities();
	if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
	{
		let dataCells = this.getQueryDataCells();
		if (dataCells.hasElements())
		{
			let prevCurrencyPresentation = dataCells.get(0).getCurrencyPresentation();
			for (let c = 1; c < dataCells.size(); c++)
			{
				let dataCell = dataCells.get(c);
				let currCurrencyPresentation = dataCell.getCurrencyPresentation();
				if (prevCurrencyPresentation !== currCurrencyPresentation)
				{
					return null;
				}
			}
			return prevCurrencyPresentation;
		}
		return null;
	}
	return this.m_currencyPresentation;
};
oFF.QStructureMember.prototype.getCurrencyTranslation = function()
{
	return oFF.isNull(this.m_currencyTranslationName) ? null : this.getQueryModel().getCurrencyTranslationManager().getMeasureCurrencyTranslation(this.getCurrencyTranslationName());
};
oFF.QStructureMember.prototype.getCurrencyTranslationName = function()
{
	return this.m_currencyTranslationName;
};
oFF.QStructureMember.prototype.getDataType = function()
{
	return this.m_dataType;
};
oFF.QStructureMember.prototype.getDataTypeInternal = function()
{
	return this.m_dataTypeInternal;
};
oFF.QStructureMember.prototype.getDataTypePrecision = function()
{
	return this.m_dataTypePrecision;
};
oFF.QStructureMember.prototype.getDataTypeScale = function()
{
	return this.m_dataTypeScale;
};
oFF.QStructureMember.prototype.getDefaultAggregationType = function()
{
	if (this.isAggregationTypeDefault())
	{
		return this.getAggregationType();
	}
	return this._getDefaultAggregationType();
};
oFF.QStructureMember.prototype.getDefaultNumericScale = function()
{
	if (this.isNumericScaleDefault())
	{
		return this.getNumericScale();
	}
	let capabilities = this.getModelCapabilities();
	let metaValue = null;
	if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
	{
		let dataCells = this.getQueryDataCells();
		let prevScaleFactor = dataCells.get(0).getDefaultDecimalPlaces();
		metaValue = oFF.XIntegerValue.create(prevScaleFactor);
		for (let c = 0; c < dataCells.size(); c++)
		{
			let dataCell = dataCells.get(c);
			let currScaleFactor = dataCell.getDefaultDecimalPlaces();
			if (prevScaleFactor !== currScaleFactor)
			{
				metaValue = null;
				break;
			}
		}
	}
	else
	{
		metaValue = this._getDefaultNumericScale();
	}
	return metaValue;
};
oFF.QStructureMember.prototype.getDefaultNumericShift = function()
{
	return this.getDefaultNumericShiftExt(false);
};
oFF.QStructureMember.prototype.getDefaultNumericShiftExt = function(excludePercentDataCells)
{
	let effectiveExcludePercentageCells = excludePercentDataCells && oFF.XCollectionUtils.size(this.getQueryDataCells()) > 1;
	if (this.isNumericShiftDefaultExt(effectiveExcludePercentageCells))
	{
		return this.getNumericShiftExt(effectiveExcludePercentageCells);
	}
	let capabilities = this.getModelCapabilities();
	let metaValue = null;
	if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
	{
		let dataCells;
		if (excludePercentDataCells)
		{
			dataCells = oFF.XStream.of(this.getQueryDataCells()).filter((dc) => {
				return dc.getBaseValueType() !== oFF.XValueType.PERCENT;
			}).collect(oFF.XStreamCollector.toListOfNameObject());
		}
		else
		{
			dataCells = this.getQueryDataCells();
		}
		let prevScaleFactor = dataCells.get(0).getDefaultScalingFactor();
		metaValue = oFF.XIntegerValue.create(prevScaleFactor);
		for (let c = 0; c < dataCells.size(); c++)
		{
			let dataCell = dataCells.get(c);
			let currScaleFactor = dataCell.getDefaultScalingFactor();
			if (prevScaleFactor !== currScaleFactor)
			{
				metaValue = null;
				break;
			}
		}
	}
	else
	{
		metaValue = this._getDefaultNumericShift();
	}
	return metaValue;
};
oFF.QStructureMember.prototype.getDefaultSelectedDimensionNames = function()
{
	return this.m_defaultSelectionDimensionNames;
};
oFF.QStructureMember.prototype.getDependentAccountDimensionMember = function(queryManager, name)
{
	let queryModel = queryManager.getQueryModel();
	if (oFF.notNull(queryModel) && queryModel.getAccountDimension() !== null)
	{
		return queryModel.getAccountDimension().getStructureMemberByAliasOrMember(name);
	}
	return null;
};
oFF.QStructureMember.prototype.getDimensionContext = function(queryManager)
{
	return this.getDimensionContextInternal(queryManager, queryManager.getInitSettings().getMode() === oFF.QueryManagerMode.BLENDING);
};
oFF.QStructureMember.prototype.getDimensionContextInternal = function(queryManager, isParentBlended)
{
	let dimension = null;
	if (isParentBlended)
	{
		if (queryManager.getInitSettings().getMode() === oFF.QueryManagerMode.BLENDING)
		{
			let blendingSources = queryManager.getQueryModel().getBlendingSources();
			for (let i = 0; i < blendingSources.size(); i++)
			{
				let blendingSource = blendingSources.get(i);
				let leafQueryModel = blendingSource.getQueryModel();
				dimension = this.getDimensionContextInternal(leafQueryModel.getQueryManager(), true);
				if (!(oFF.isNull(dimension)))
				{
					return dimension;
				}
			}
		}
		else if (queryManager.getQueryModel().getName() === null || oFF.XString.isEqual(queryManager.getQueryModel().getName(), this.getQueryModel().getName()) || oFF.XString.isEqual(queryManager.getQueryModel().getDatasetId(), this.getQueryModel().getDatasetId()))
		{
			dimension = queryManager.getQueryModel().getDimensionByName(this.getDimension().getName());
		}
	}
	else
	{
		dimension = queryManager.getQueryModel().getDimensionByName(this.getDimension().getName());
	}
	return dimension;
};
oFF.QStructureMember.prototype.getDimensionNamesFromRequiredFieldNames = function(requiredFieldNames, queryModel, messageManager, missingFieldNames)
{
	let allRequiredDimensionNames = oFF.XHashSetOfString.create();
	let requiredFieldNamesIterator = requiredFieldNames.getIterator();
	while (requiredFieldNamesIterator.hasNext())
	{
		let fieldName = requiredFieldNamesIterator.next();
		let field = queryModel.getFieldByName(fieldName);
		if (oFF.isNull(field))
		{
			let calcDimProperties = this.getOlapEnv().getClientQueryObjectManager().getFormulaCalcDimPropertiesByFieldName(fieldName, this.getStorageName());
			if (oFF.notNull(calcDimProperties))
			{
				field = calcDimProperties.getFormulaCalcFields().getFieldByName(fieldName);
			}
		}
		if (oFF.isNull(field))
		{
			let missingFieldArgs = oFF.XList.create();
			missingFieldArgs.add(oFF.XStringUtils.isNullOrEmpty(this.getText()) ? this.getAliasOrMemberName() : this.getText());
			missingFieldArgs.add(fieldName);
			if (oFF.notNull(messageManager))
			{
				messageManager.addWarning(oFF.ErrorCodes.MEASURE_MISSING_REQUIRED_FIELD, oFF.ErrorMessages.getText(oFF.ErrorMessages.MEASURE_MISSING_REQUIRED_FIELD, missingFieldArgs, this.getAliasOrMemberName(), null));
			}
			missingFieldNames.add(fieldName);
		}
		else
		{
			let dimensionNameToAdd = field.getDimension().getName();
			let manager = queryModel.getQueryManager();
			if (this.isNavigationalFieldAndNotTime(field) || manager.isValidatingLocalFormulaMembers() && this.isNavigationalField(field))
			{
				let navigationalFieldDimension = queryModel.getDimensionByName(field.getName());
				if (oFF.notNull(navigationalFieldDimension))
				{
					dimensionNameToAdd = navigationalFieldDimension.getName();
				}
			}
			allRequiredDimensionNames.add(dimensionNameToAdd);
		}
	}
	return allRequiredDimensionNames;
};
oFF.QStructureMember.prototype.getDimensionsUsedByMember = function(queryModel)
{
	let usedDimensions = oFF.XHashSetOfString.create();
	oFF.DimensionUsageAnalyzer2.addDimensionsUsedByMember(usedDimensions, this, queryModel);
	return usedDimensions.getValuesAsReadOnlyList();
};
oFF.QStructureMember.prototype.getExceptionAggregationDimensions = function()
{
	return !this._isExceptionAggregationLoaded() ? oFF.XList.create() : this.m_exceptionAggregation._getUsedDimensionNames();
};
oFF.QStructureMember.prototype.getExceptionAggregationType = function()
{
	return !this._isExceptionAggregationLoaded() ? null : this.m_exceptionAggregation._getAggregationType();
};
oFF.QStructureMember.prototype.getExceptions = function()
{
	let queryModel = this.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		let exceptionManager = queryModel.getExceptionManager();
		if (oFF.notNull(exceptionManager))
		{
			return exceptionManager.getAllExceptionsOfMeasure(this);
		}
	}
	return null;
};
oFF.QStructureMember.prototype.getFallbackName = function()
{
	return this.getAliasOrMemberName();
};
oFF.QStructureMember.prototype.getIgnoredExternalDimensions = function()
{
	if (oFF.isNull(this.m_externalDimensionIgnoreList))
	{
		this.m_externalDimensionIgnoreList = oFF.XList.create();
	}
	return this.m_externalDimensionIgnoreList;
};
oFF.QStructureMember.prototype.getMappedCurrencyTranslationNameForInAData = function()
{
	let currencyTranslationManager = this.getQueryModelBase().getCurrencyTranslationManagerBase();
	if (oFF.isNull(currencyTranslationManager) || currencyTranslationManager.isLegacyMeasureCurrencyTranslationAccountModel())
	{
		return null;
	}
	let currencyTranslation = null;
	if (oFF.notNull(this.m_currencyTranslationName))
	{
		currencyTranslation = this.getCurrencyTranslation();
	}
	else if ((this.m_unitType === oFF.UnitType.CURRENCY || !this.getModelCapabilities().supportsCustomMeasuresInMetadata()) && !this.getQueryModel().isUniversalAccountModel())
	{
		currencyTranslation = currencyTranslationManager.getDefaultMeasureCurrencyTranslationBase();
	}
	if (oFF.notNull(currencyTranslation) && !currencyTranslation.isIgnore())
	{
		return currencyTranslation.getMappedName(this.m_rateType);
	}
	return null;
};
oFF.QStructureMember.prototype.getMaxNumberOfDimensionsForExceptionAggregation = function(aggrType)
{
	return !this._isExceptionAggregationLoaded() ? 0 : this.m_exceptionAggregation.getParent()._getMaxNumberOfAllowedDimensions(this.getOlapComponentType(), aggrType);
};
oFF.QStructureMember.prototype.getMinimumDrillstate = function()
{
	return this.m_minimumDrillState;
};
oFF.QStructureMember.prototype.getName = function()
{
	let name = oFF.QDimensionMember.prototype.getName.call( this );
	if (oFF.notNull(name) && this.m_areNamesStoredAsFlat)
	{
		let parentDimension = this.getDimension();
		if (oFF.notNull(parentDimension))
		{
			let hierarchyName = parentDimension.getHierarchyName() !== null ? parentDimension.getHierarchyName() : parentDimension.getDefaultHierarchyName();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyName) && !oFF.QDimensionMemberNameUtil.isMDXHierarchyKey(name))
			{
				name = oFF.QDimensionMemberNameUtil.buildMDXHierarchyKey(parentDimension.getName(), hierarchyName, name);
			}
		}
	}
	return name;
};
oFF.QStructureMember.prototype.getNestedAllRequiredDimensionProperties = function(context, messageManager, checkInUsemeasures, memberNamesUsedInFilters)
{
	let requestedProperties = oFF.XList.create();
	requestedProperties.add(oFF.QStructureMemberQueryProperties.ALL_REQUIRED_DIMENSIONS);
	requestedProperties.add(oFF.QStructureMemberQueryProperties.UNSATISFIED_REQUIRED_DIMENSIONS);
	requestedProperties.add(oFF.QStructureMemberQueryProperties.MINIMUM_DRILL_STATE_DIMENSIONS);
	let leafStructureMember = null;
	if (context.getQueryModel().isBlendingModel())
	{
		leafStructureMember = oFF.BlendingUtils.getMatchingLeafMemberFromLoadedBlendedMember(context.getQueryModel(), this.getName(), true);
	}
	let structureMember = oFF.notNull(leafStructureMember) ? leafStructureMember : this;
	let nestedMemberQueryProperties = structureMember.getNestedMemberQueryPropertiesWithOptimization(context, messageManager, requestedProperties, checkInUsemeasures, memberNamesUsedInFilters);
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.BLENDABLE_QUERY_ALIAS_PREFIXING) && context.getQueryModel().isBlendingModel())
	{
		let leafQueryAliasPrefix = oFF.BlendingUtils.getLeafQueryAliasPrefix(structureMember.getQueryModel().getDatasetId(), context.getQueryModel());
		let iterator = nestedMemberQueryProperties.getKeysAsIterator();
		while (iterator.hasNext())
		{
			let key = iterator.next();
			let memberQueryProperties = nestedMemberQueryProperties.getByKey(key);
			if (memberQueryProperties.size() > 0)
			{
				let result = oFF.XHashSetOfString.create();
				oFF.XCollectionUtils.forEach(memberQueryProperties, (dimensionName) => {
					let dimensionNameWithAlias = oFF.XStringUtils.concatenate2(leafQueryAliasPrefix, dimensionName);
					result.add(oFF.notNull(leafQueryAliasPrefix) && context.getQueryModel().getDimensionByName(dimensionNameWithAlias) !== null ? dimensionNameWithAlias : dimensionName);
				});
				nestedMemberQueryProperties.put(key, result);
			}
		}
	}
	return oFF.XPair.create(nestedMemberQueryProperties, oFF.XBooleanValue.create(checkInUsemeasures && this.isOutOfContextMeasureInUse(context)));
};
oFF.QStructureMember.prototype.getNestedDependentCrossCalculationMeasureNames = function(context)
{
	let depMeasureNames = oFF.XHashSetOfString.create();
	let topLevelFieldNamesItr = this.getTopLevelDependentFieldNames(context).getIterator();
	while (topLevelFieldNamesItr.hasNext())
	{
		let fieldName = topLevelFieldNamesItr.next();
		let formulaCalcDimProp = context.getOlapEnv().getClientQueryObjectManager().getFormulaCalcDimPropertiesByFieldName(fieldName, this.getQueryManager().getClientQueryObjectStorageName());
		if (oFF.notNull(formulaCalcDimProp))
		{
			let depMeasuresFromCalcItr = formulaCalcDimProp.getNestedDependentMemberNames(this.getContext()).getIterator();
			while (depMeasuresFromCalcItr.hasNext())
			{
				let measureName = depMeasuresFromCalcItr.next();
				depMeasureNames.add(measureName);
			}
		}
	}
	return depMeasureNames.getValuesAsReadOnlyList();
};
oFF.QStructureMember.prototype.getNestedDependentMemberNames = function(context, messageManager, skipModelerDefinedMembersDependencies)
{
	let nestedDependentMemberNames = oFF.XList.create();
	let nestedDependentMembers = this.getNestedDependentMembers(context, messageManager, skipModelerDefinedMembersDependencies);
	let nestedDependentMembersIter = nestedDependentMembers.getIterator();
	while (nestedDependentMembersIter.hasNext())
	{
		nestedDependentMemberNames.add(nestedDependentMembersIter.next().getAliasOrMemberName());
	}
	return nestedDependentMemberNames;
};
oFF.QStructureMember.prototype.getNestedDependentMembers = function(context, messageManager, skipModelerDefinedMembersDependencies)
{
	let nestedDependentMembers = oFF.XList.create();
	let recursiveStack = oFF.XList.create();
	if (this.traverseDependencyGraph(context, nestedDependentMembers, recursiveStack, messageManager, false, skipModelerDefinedMembersDependencies, false))
	{
		if (oFF.notNull(messageManager))
		{
			messageManager.addWarning(oFF.ErrorCodes.MEASURE_CYCLICAL_DEPENDENCY, oFF.ErrorMessages.MEASURE_CYCLICAL_DEPENDENCY);
		}
		throw oFF.XException.createRuntimeException(oFF.ErrorMessages.MEASURE_CYCLICAL_DEPENDENCY);
	}
	nestedDependentMembers.removeElement(this);
	return nestedDependentMembers;
};
oFF.QStructureMember.prototype.getNestedMemberQueryProperties = function(context, messageManager, requestedProperties, checkInUsemeasures)
{
	return this.getNestedMemberQueryPropertiesWithOptimization(context, messageManager, requestedProperties, checkInUsemeasures, null);
};
oFF.QStructureMember.prototype.getNestedMemberQueryPropertiesWithOptimization = function(context, messageManager, requestedProperties, checkInUsemeasures, memberNamesUsedInFilters)
{
	let result = oFF.XHashMapByString.create();
	if (checkInUsemeasures && (this.isMeasureInUseInternal(context, true, memberNamesUsedInFilters) || this.isOutOfContextMeasureInUse(context)) || !checkInUsemeasures)
	{
		let thisAndDependentMembers = oFF.XList.create();
		thisAndDependentMembers.add(this);
		try
		{
			thisAndDependentMembers.addAll(this.getNestedDependentMembers(context, messageManager, true));
		}
		catch (t)
		{
			result.clear();
		}
		let thisAndDependentMembersIterator = thisAndDependentMembers.getIterator();
		while (thisAndDependentMembersIterator.hasNext())
		{
			let member = thisAndDependentMembersIterator.next();
			if (requestedProperties.contains(oFF.QStructureMemberQueryProperties.MINIMUM_DRILL_STATE_DIMENSIONS))
			{
				if (!result.containsKey(oFF.QStructureMemberQueryProperties.MINIMUM_DRILL_STATE_DIMENSIONS.getName()))
				{
					result.put(oFF.QStructureMemberQueryProperties.MINIMUM_DRILL_STATE_DIMENSIONS.getName(), oFF.XHashSetOfString.create());
				}
				let minimumDrillStateDimensions = result.getByKey(oFF.QStructureMemberQueryProperties.MINIMUM_DRILL_STATE_DIMENSIONS.getName());
				minimumDrillStateDimensions.addAll(member.getMinimumDrillstate());
			}
			if (requestedProperties.contains(oFF.QStructureMemberQueryProperties.ALL_REQUIRED_DIMENSIONS) || requestedProperties.contains(oFF.QStructureMemberQueryProperties.UNSATISFIED_REQUIRED_DIMENSIONS))
			{
				let missingFieldNames = oFF.XHashSetOfString.create();
				let contextForDependentMember = oFF.BlendingUtils.getQueryManagerContextForMember(context, member);
				if (!oFF.XString.isEqual(contextForDependentMember.getQueryModel().getDatasetId(), member.getQueryModel().getDatasetId()) && oFF.XStringUtils.isNotNullAndNotEmpty(member.getQueryModel().getDatasetId()) && !member.isMultiDataSourceMember())
				{
					contextForDependentMember = member.getQueryModel();
				}
				let memberAllRequiredDimensions = member.getAllRequiredDimensionNames(contextForDependentMember, messageManager, missingFieldNames);
				if (requestedProperties.contains(oFF.QStructureMemberQueryProperties.ALL_REQUIRED_DIMENSIONS))
				{
					if (!result.containsKey(oFF.QStructureMemberQueryProperties.ALL_REQUIRED_DIMENSIONS.getName()))
					{
						result.put(oFF.QStructureMemberQueryProperties.ALL_REQUIRED_DIMENSIONS.getName(), oFF.XHashSetOfString.create());
					}
					let allRequiredDimensions = result.getByKey(oFF.QStructureMemberQueryProperties.ALL_REQUIRED_DIMENSIONS.getName());
					allRequiredDimensions.addAll(memberAllRequiredDimensions);
					allRequiredDimensions.addAll(missingFieldNames);
				}
				if (requestedProperties.contains(oFF.QStructureMemberQueryProperties.UNSATISFIED_REQUIRED_DIMENSIONS))
				{
					if (!result.containsKey(oFF.QStructureMemberQueryProperties.UNSATISFIED_REQUIRED_DIMENSIONS.getName()))
					{
						result.put(oFF.QStructureMemberQueryProperties.UNSATISFIED_REQUIRED_DIMENSIONS.getName(), oFF.XHashSetOfString.create());
					}
					let unsatisfiedRequiredDimensions = result.getByKey(oFF.QStructureMemberQueryProperties.UNSATISFIED_REQUIRED_DIMENSIONS.getName());
					if (!context.getQueryModel().isBlendingModel() && context.getComponentType() !== oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER)
					{
						let unsatisfiedRequiredDimensionNames = member.getUnsatisfiedRequiredDimensionNames(context, messageManager, memberAllRequiredDimensions);
						let blendableQueryManager = oFF.XCollectionUtils.findFirst(context.getQueryModel().getSecondaryParents(), (secondaryParent) => {
							return oFF.notNull(secondaryParent) && !secondaryParent.isReleased() && secondaryParent.getComponentType() === oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER;
						});
						if (oFF.notNull(blendableQueryManager))
						{
							unsatisfiedRequiredDimensionNames = oFF.BlendingUtils.removeLinkedDimensionsInAxis(unsatisfiedRequiredDimensionNames, context.getQueryModel().getDatasetId(), blendableQueryManager);
						}
						unsatisfiedRequiredDimensions.addAll(unsatisfiedRequiredDimensionNames);
					}
					else
					{
						let blendQueryManager = context.getComponentType() === oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER ? context : context.getQueryManager();
						let leafQueryModels = oFF.BlendingUtils.getLeafQueryModels(blendQueryManager);
						let leafQueryModelsIter = leafQueryModels.getIterator();
						while (leafQueryModelsIter.hasNext())
						{
							let leafQueryModel = leafQueryModelsIter.next();
							if (oFF.XString.isEqual(member.getQueryModel().getDatasetId(), leafQueryModel.getDatasetId()))
							{
								let leafUnsatisfiedRequiredDimensionNames = member.getUnsatisfiedRequiredDimensionNames(leafQueryModel.getContext(), messageManager, memberAllRequiredDimensions);
								unsatisfiedRequiredDimensions.addAll(oFF.BlendingUtils.removeLinkedDimensionsInAxis(leafUnsatisfiedRequiredDimensionNames, leafQueryModel.getDatasetId(), blendQueryManager));
								break;
							}
						}
					}
					unsatisfiedRequiredDimensions.addAll(missingFieldNames);
				}
			}
		}
	}
	return result;
};
oFF.QStructureMember.prototype.getNumericPrecision = function()
{
	return this.m_numericPrecision;
};
oFF.QStructureMember.prototype.getNumericScale = function()
{
	if (this.getQueryManager() === null || this.getQueryManager().isShallow())
	{
		return null;
	}
	let capabilities = this.getModelCapabilities();
	if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
	{
		let dataCells = this.getQueryDataCells();
		if (dataCells.hasElements())
		{
			let prevScaleFactor = dataCells.get(0).getDecimalPlaces();
			for (let c = 0; c < dataCells.size(); c++)
			{
				let dataCell = dataCells.get(c);
				let currScaleFactor = dataCell.getDecimalPlaces();
				if (prevScaleFactor !== currScaleFactor)
				{
					return null;
				}
			}
			return oFF.XIntegerValue.create(prevScaleFactor);
		}
		return null;
	}
	return this.m_numericScale;
};
oFF.QStructureMember.prototype.getNumericShift = function()
{
	return this.getNumericShiftExt(false);
};
oFF.QStructureMember.prototype.getNumericShiftExt = function(excludePercentDataCells)
{
	if (this.getQueryManager() === null || this.getQueryManager().isShallow())
	{
		return null;
	}
	let capabilities = this.getModelCapabilities();
	if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
	{
		let dataCells;
		if (excludePercentDataCells)
		{
			dataCells = oFF.XStream.of(this.getQueryDataCells()).filter((dc) => {
				return dc.getBaseValueType() !== oFF.XValueType.PERCENT;
			}).collect(oFF.XStreamCollector.toListOfNameObject());
		}
		else
		{
			dataCells = this.getQueryDataCells();
		}
		if (dataCells.hasElements())
		{
			let prevShiftFactor = dataCells.get(0).getScalingFactor();
			for (let c = 0; c < dataCells.size(); c++)
			{
				let dataCell = dataCells.get(c);
				let currShiftFactor = dataCell.getScalingFactor();
				if (prevShiftFactor !== currShiftFactor)
				{
					return null;
				}
			}
			prevShiftFactor = -1 * prevShiftFactor;
			return oFF.XIntegerValue.create(prevShiftFactor);
		}
		return null;
	}
	return this.m_numericShift;
};
oFF.QStructureMember.prototype.getPostAggregationDimensions = function()
{
	if (oFF.isNull(this.m_postAggregationDimensionNames))
	{
		return oFF.XList.create();
	}
	return this.m_postAggregationDimensionNames;
};
oFF.QStructureMember.prototype.getPostAggregationType = function()
{
	return this.m_postAggregationType;
};
oFF.QStructureMember.prototype.getPreferredHierarchy = function()
{
	return this.m_preferredHierarchy;
};
oFF.QStructureMember.prototype.getPresentationSignReversal = function()
{
	return this.m_presentationSignReversal;
};
oFF.QStructureMember.prototype.getQueryDataCells = function()
{
	let allDataCells = this.getDimension().getQueryModel().getQueryDataCells();
	let myList = oFF.XListOfNameObject.create();
	let size = allDataCells.size();
	for (let k = 0; k < size; k++)
	{
		let dataCell = allDataCells.get(k);
		if (dataCell.hasMemberReference(this))
		{
			myList.add(dataCell);
		}
	}
	return myList;
};
oFF.QStructureMember.prototype.getRateType = function()
{
	return this.m_rateType;
};
oFF.QStructureMember.prototype.getRequiredDimensionAndFieldNames = function()
{
	return oFF.XPair.create(this.getMinimumDrillstate(), oFF.XList.create());
};
oFF.QStructureMember.prototype.getResultCalculation = function()
{
	return this.m_resultCalculation;
};
oFF.QStructureMember.prototype.getRunningAggregationInitDimension = function()
{
	return this.m_runAggrInitDim;
};
oFF.QStructureMember.prototype.getRunningAggregationOperator = function()
{
	return this.m_runAggrOperator;
};
oFF.QStructureMember.prototype.getRuntimeRateType = function()
{
	return this.getRateType();
};
oFF.QStructureMember.prototype.getScaleAndUnitPlacement = function()
{
	if (this.getQueryManager() === null || this.getQueryManager().isShallow())
	{
		return null;
	}
	let capabilities = this.getModelCapabilities();
	if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
	{
		let dataCells = this.getQueryDataCells();
		if (dataCells.hasElements())
		{
			let prevScaleAndUnitPlacement = dataCells.get(0).getScaleAndUnitPlacement();
			for (let c = 1; c < dataCells.size(); c++)
			{
				let dataCell = dataCells.get(c);
				let currScaleAndUnitPlacement = dataCell.getScaleAndUnitPlacement();
				if (prevScaleAndUnitPlacement !== currScaleAndUnitPlacement)
				{
					return null;
				}
			}
			return prevScaleAndUnitPlacement;
		}
		return null;
	}
	return this.m_scaleAndUnitPlacement;
};
oFF.QStructureMember.prototype.getScaleFormat = function()
{
	if (this.getQueryManager() === null || this.getQueryManager().isShallow())
	{
		return null;
	}
	let capabilities = this.getModelCapabilities();
	if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
	{
		let dataCells = this.getQueryDataCells();
		if (dataCells.hasElements())
		{
			let prevScaleFormat = dataCells.get(0).getScaleFormat();
			for (let c = 1; c < dataCells.size(); c++)
			{
				let dataCell = dataCells.get(c);
				let currScaleFormat = dataCell.getScaleFormat();
				if (prevScaleFormat !== currScaleFormat)
				{
					return null;
				}
			}
			return prevScaleFormat;
		}
		return null;
	}
	return this.m_scaleFormat;
};
oFF.QStructureMember.prototype.getSemanticObject = function()
{
	return this.m_semanticObject;
};
oFF.QStructureMember.prototype.getSharedStructuredMember = function(name, storageName, isPrimaryStructureMember)
{
	let memberName = name;
	let queryModel = this.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		let datasetId = queryModel.getDatasetId();
		if (this.getDimension().getDimensionType() === oFF.DimensionType.SECONDARY_STRUCTURE && oFF.notNull(datasetId) && oFF.XString.isEqual(memberName, oFF.MeasureModelConstants.DEFAULT_CUSTOMDIMENSION2_MEMBER))
		{
			memberName = oFF.XStringUtils.concatenate3(datasetId, "-", memberName);
		}
		else
		{
			let currencyTranslationManager = queryModel.getCurrencyTranslationManager();
			if (oFF.notNull(currencyTranslationManager) && oFF.notNull(datasetId) && oFF.XString.isEqual(memberName, oFF.CurrencyConstants.DEFAULT_CURRENCY) || oFF.XString.isEqual(memberName, oFF.CurrencyConstants.LOCAL_CURRENCY))
			{
				memberName = oFF.XStringUtils.concatenate3(datasetId, "-", memberName);
			}
		}
	}
	return this.getOlapEnv().getClientQueryObjectManager().getStructuredMember(memberName, storageName, isPrimaryStructureMember);
};
oFF.QStructureMember.prototype.getSignPresentation = function()
{
	if (this.getQueryManager() === null || this.getQueryManager().isShallow())
	{
		return null;
	}
	let capabilities = this.getModelCapabilities();
	if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
	{
		let dataCells = this.getQueryDataCells();
		if (dataCells.hasElements())
		{
			let prevSignPresentation = dataCells.get(0).getSignPresentation();
			for (let c = 1; c < dataCells.size(); c++)
			{
				let dataCell = dataCells.get(c);
				let currSignPresentation = dataCell.getSignPresentation();
				if (prevSignPresentation !== currSignPresentation)
				{
					return null;
				}
			}
			return prevSignPresentation;
		}
		return null;
	}
	return this.m_signPresentation;
};
oFF.QStructureMember.prototype.getSingleValueCalculation = function()
{
	return this.m_singleValueCalculation;
};
oFF.QStructureMember.prototype.getSolveOrder = function()
{
	if (this.isSolveOrderOverDefined())
	{
		return this.m_solveOrder.getInteger();
	}
	else if (this.isCustomDefaultSolveOrderApplicable() && this.getQueryModel().hasUserDefinedMeasures())
	{
		if (this.getQueryModel().isLeadingStructureAccount() && this.getDimension().isMeasureStructure() || this.getQueryModel().isLeadingStructureMeasure() && !this.getDimension().isMeasureStructure())
		{
			return oFF.QStructureMemberSolveOrder.CLIENT_DEFINED_CUSTOM_MEMBER_LOW;
		}
		else
		{
			return oFF.QStructureMemberSolveOrder.CLIENT_DEFINED_CUSTOM_MEMBER_HIGH;
		}
	}
	else if (this.getQueryModel().hasUserDefinedMeasures() && this.getQueryModel().isLeadingStructureMeasure() && !this.getDimension().isMeasureStructure() && this.getQueryModel().getAccountDimension() === null)
	{
		return oFF.QStructureMemberSolveOrder.RESTRICTED_MEASURE_UNIVERSAL_MEASURE_ON_MODEL_DEFINED_MEMBERS;
	}
	else
	{
		return 0;
	}
};
oFF.QStructureMember.prototype.getStorageObjectName = function()
{
	return this.m_areNamesStoredAsFlat ? oFF.QDimensionMember.prototype.getName.call( this ) : this.getName();
};
oFF.QStructureMember.prototype.getSupportedDimensionsForExceptionAggregation = function(aggrType)
{
	if (!this._isExceptionAggregationLoaded())
	{
		return oFF.XList.create();
	}
	return this.m_exceptionAggregation.getParent()._getSupportedDimensionsForMemberAndAggregation(this.getOlapComponentType(), aggrType);
};
oFF.QStructureMember.prototype.getSupportedExceptionAggregationTypes = function()
{
	if (!this._isExceptionAggregationLoaded())
	{
		return oFF.XList.create();
	}
	return this.m_exceptionAggregation.getParent()._getSupportedAggregationTypesForMember(this.getOlapComponentType());
};
oFF.QStructureMember.prototype.getTopLevelDependentFieldNames = function(context)
{
	let usedFields = oFF.XList.create();
	if (oFF.notNull(this.m_exceptionAggregation) && this.m_exceptionAggregation._getUsedDimensionNames() !== null)
	{
		let usedDimensionNamesIter = this.m_exceptionAggregation._getUsedDimensionNames().getIterator();
		while (usedDimensionNamesIter.hasNext())
		{
			let usedDimensionName = usedDimensionNamesIter.next();
			let dimension = context.getQueryModel().getDimensionByName(usedDimensionName);
			if (oFF.notNull(dimension))
			{
				usedFields.add(dimension.getKeyField().getName());
			}
			else
			{
				let formulaCalcDimProperties = context.getOlapEnv().getClientQueryObjectManager().getFormulaCalcDimProperties(usedDimensionName, this.getStorageName());
				if (oFF.notNull(formulaCalcDimProperties))
				{
					let keyField = formulaCalcDimProperties.getFormulaCalcFields().getFirstFieldByType(oFF.PresentationType.KEY);
					if (oFF.notNull(keyField))
					{
						usedFields.add(keyField.getName());
					}
				}
			}
		}
	}
	return usedFields;
};
oFF.QStructureMember.prototype.getTopLevelDependentMemberNames = function(context)
{
	return oFF.XList.create();
};
oFF.QStructureMember.prototype.getTopLevelDependentMembers = function(context, messageManager, validateAugmentedAccountMembers)
{
	let topLevelDependentMembers = oFF.XList.create();
	let clientQueryObjectManager = context.getOlapEnv().getClientQueryObjectManager();
	let clientQueryObjectStorageName = context.getQueryManager().getClientQueryObjectStorageName();
	let dimensionContext = this.getDimensionContext(context.getQueryManager());
	let topLevelDependentMemberNames = this.getTopLevelDependentMemberNames(context);
	let topLevelDependentMemberNamesIter = topLevelDependentMemberNames.getIterator();
	while (topLevelDependentMemberNamesIter.hasNext())
	{
		let memberName = topLevelDependentMemberNamesIter.next();
		let member = null;
		let isPrimaryStructureMember = true;
		if (oFF.XString.startsWith(memberName, "$$") && oFF.XString.endsWith(memberName, "$$"))
		{
			continue;
		}
		if (oFF.notNull(dimensionContext))
		{
			member = dimensionContext.getStructureMemberByAliasOrMember(memberName);
			isPrimaryStructureMember = dimensionContext === dimensionContext.getQueryModel().getPrimaryCalculationDimension();
		}
		if (oFF.isNull(member))
		{
			member = clientQueryObjectManager.getStructuredMember(memberName, clientQueryObjectStorageName, isPrimaryStructureMember);
			if (oFF.isNull(member))
			{
				member = this.getSharedStructuredMember(memberName, this.getStorageName(), isPrimaryStructureMember);
				if (oFF.isNull(member))
				{
					member = this.getDependentAccountDimensionMember(context.getQueryManager(), memberName);
				}
			}
			if (oFF.isNull(member) && this.getSession().hasFeature(oFF.FeatureToggleOlap.STORY_CALCULATIONS_MEMBER_SELECT) && context.getQueryManager().getQueryModel().isUniversalAccountModel())
			{
				member = clientQueryObjectManager.getStructuredMember(memberName, clientQueryObjectStorageName, !isPrimaryStructureMember);
				if (oFF.isNull(member) && isPrimaryStructureMember && oFF.notNull(dimensionContext))
				{
					let secondaryCalculationDimension = dimensionContext.getQueryModel().getSecondaryCalculationDimension();
					if (oFF.notNull(secondaryCalculationDimension))
					{
						member = secondaryCalculationDimension.getStructureMemberByAliasOrMember(memberName);
					}
				}
			}
		}
		if (oFF.notNull(member))
		{
			topLevelDependentMembers.add(member);
		}
		else if (oFF.notNull(messageManager) && (oFF.notNull(dimensionContext) && dimensionContext.getDimensionType() !== oFF.DimensionType.ACCOUNT || validateAugmentedAccountMembers))
		{
			let args = oFF.XList.create();
			args.add(memberName);
			let errorMsg = oFF.ErrorMessages.getText(oFF.ErrorMessages.MEASURE_MISSING_DEPENDENT, args, this.getAliasOrMemberName(), null);
			messageManager.addWarning(oFF.ErrorCodes.MEASURE_MISSING_DEPENDENT, errorMsg);
		}
	}
	return topLevelDependentMembers;
};
oFF.QStructureMember.prototype.getUnitDimensionName = function()
{
	return this.m_unitDimensionName;
};
oFF.QStructureMember.prototype.getUnitDimensionProperty = function()
{
	return this.m_unitDimensionProperty;
};
oFF.QStructureMember.prototype.getUnitFixed = function()
{
	return this.m_unitFixed;
};
oFF.QStructureMember.prototype.getUnitName = function()
{
	return this.m_unitName;
};
oFF.QStructureMember.prototype.getUnitTextName = function()
{
	return this.m_unitTextName;
};
oFF.QStructureMember.prototype.getUnitTranslation = function()
{
	return oFF.isNull(this.m_unitTranslationName) ? null : this.getQueryModel().getUnitTranslationManager().getMeasureUnitTranslation(this.getUnitTranslationName());
};
oFF.QStructureMember.prototype.getUnitTranslationName = function()
{
	return this.m_unitTranslationName;
};
oFF.QStructureMember.prototype.getUnitType = function()
{
	return this.m_unitType;
};
oFF.QStructureMember.prototype.getUnsatisfiedRequiredDimensionNames = function(context, messageManager, allRequiredDimensionNames)
{
	let exceptionAggregationDimensions = this.getExceptionAggregationDimensions();
	let minimumDrillState = this.getMinimumDrillstate();
	let storageName = this.getStorageName();
	return oFF.QDimensionUtil.getUnsatisfiedRequiredDimensionNames(context, messageManager, allRequiredDimensionNames, storageName, exceptionAggregationDimensions, minimumDrillState, false);
};
oFF.QStructureMember.prototype.getValidationErrorCodes = function()
{
	return this.m_validationErrorCodes;
};
oFF.QStructureMember.prototype.getWindowFunction = function()
{
	return this.m_windowFunction;
};
oFF.QStructureMember.prototype.initializeFieldValues = function()
{
	let dimension = this.getDimension();
	if (oFF.notNull(dimension))
	{
		let fieldValue = this.getFieldValue(this.getDimension().getFlatKeyField());
		let useFlatFields = oFF.notNull(fieldValue) && oFF.XString.isEqual(fieldValue.getString(), this.getName());
		let newMemberKeyField = useFlatFields ? dimension.getFlatKeyField() : dimension.getKeyField();
		this.createAndAddFieldValueWithString(newMemberKeyField, this.getName());
		let newMemberTextField = useFlatFields ? dimension.getFlatTextField() : dimension.getTextField();
		if (oFF.notNull(newMemberTextField) && this.getFieldValue(newMemberTextField) === null)
		{
			this.createAndAddFieldValueWithString(newMemberTextField, this.getText());
		}
		let hierarchyKeyField = dimension.getHierarchyKeyField();
		if (this.m_areNamesStoredAsFlat && oFF.notNull(hierarchyKeyField) && this.getFieldValue(hierarchyKeyField) === null)
		{
			this.createAndAddFieldValueWithString(hierarchyKeyField, this.getStorageObjectName());
		}
	}
};
oFF.QStructureMember.prototype.isAggregationTypeDefault = function()
{
	return !this.hasPropertyChanged(oFF.QStructureMemberProperties.QY_AGGERGATION_TYPE);
};
oFF.QStructureMember.prototype.isAutoSignFlip = function()
{
	return this.m_autoSignFlip;
};
oFF.QStructureMember.prototype.isAvailableInMetadata = function()
{
	return this.m_createdFromMetadata;
};
oFF.QStructureMember.prototype.isCellChartShowValue = function()
{
	return !this.m_hideNumberForCellChart;
};
oFF.QStructureMember.prototype.isCreatedFromMetadata = function()
{
	if (this.getMemberType().isCustomMember())
	{
		return this.m_createdFromMetadata;
	}
	return true;
};
oFF.QStructureMember.prototype.isCrossCalculation = function()
{
	return this.getQueryModel().getSecondaryCalculationDimension() === this.getDimension();
};
oFF.QStructureMember.prototype.isCumulation = function()
{
	return this.m_isCumulation;
};
oFF.QStructureMember.prototype.isCurrencyPresentationDefault = function()
{
	let capabilities = this.getModelCapabilities();
	let isDefault = false;
	if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
	{
		let dataCells = this.getQueryDataCells();
		if (dataCells.hasElements())
		{
			isDefault = oFF.XStream.of(dataCells).allMatch((dataCell) => {
				return dataCell.isCurrencyPresentationDefault();
			});
		}
	}
	else
	{
		isDefault = !this.hasPropertyChanged(oFF.QStructureMemberProperties.QY_CURRENCY_PRESENTATION);
	}
	return isDefault;
};
oFF.QStructureMember.prototype.isCustomDefaultSolveOrderApplicable = function()
{
	return this.getModelCapabilities().supportsUniversalModel() && !this.isModelDefinedMember() && !this.isCreatedFromMetadata() && this.getQueryModel().getAccountDimension() !== null;
};
oFF.QStructureMember.prototype.isDisplayNameSet = function()
{
	return oFF.QDimensionMember.prototype.isDisplayNameSet.call( this ) || oFF.XStringUtils.isNotNullAndNotEmpty(this.getAliasName());
};
oFF.QStructureMember.prototype.isHideNumberForCellChart = function()
{
	return this.m_hideNumberForCellChart;
};
oFF.QStructureMember.prototype.isIgnoringAllExternalDimensions = function()
{
	return this.m_isIgnoringAllExternalDimensions;
};
oFF.QStructureMember.prototype.isMeasureInUse = function(context, skipTransientMeasure)
{
	return this.isMeasureInUseInternal(context, skipTransientMeasure, null);
};
oFF.QStructureMember.prototype.isMeasureInUseInternal = function(context, skipTransientMeasure, membersUsedInFilters)
{
	let dimensionContext = null;
	if (this.getOlapEnv().getClientQueryObjectManager().getClientQueryObjectByKeyRef(this) !== null)
	{
		dimensionContext = this.getDimensionContext(context.getQueryManager());
	}
	else
	{
		dimensionContext = this.getDimension();
	}
	let isTransientMember = oFF.notNull(dimensionContext) && dimensionContext.getTagging().containsKey(oFF.QTransientConstants.createIsTransientMemberTag(this.getAliasOrMemberName()));
	if (skipTransientMeasure && isTransientMember)
	{
		return false;
	}
	if (context.getComponentType() === oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER)
	{
		let primaryBlendedMeasures = context.getPrimaryBlendedMeasuresFromFilters();
		return primaryBlendedMeasures.contains(this);
	}
	let queryModel = context.getQueryModel();
	let isUsedInDynamicFilter = false;
	if (oFF.notNull(dimensionContext) && (queryModel.getFilter().isDynamicFilterInitialized() || !queryModel.getFilter().getLinkedFilters().isEmpty()))
	{
		let filterRootElement = queryModel.getFilter().getDynamicFilter().getFilterRootElement();
		let memberNames = oFF.XHashSetOfString.create();
		if (oFF.notNull(membersUsedInFilters))
		{
			memberNames.addAll(membersUsedInFilters);
		}
		else
		{
			memberNames.addAll(oFF.QFilterUtil.getMemberNamesFromFilter(filterRootElement, dimensionContext.getName()));
			let linkedFilters = queryModel.getFilter().getLinkedFilters().getValuesAsReadOnlyList();
			for (let i = 0; i < linkedFilters.size(); i++)
			{
				let filterElement = linkedFilters.get(i).getFilterRootElement();
				memberNames.addAll(oFF.QFilterUtil.getMemberNamesFromFilter(filterElement, dimensionContext.getName()));
			}
		}
		let aliasOrMemberName = this.getAliasOrMemberName();
		let isMemberUnfilteredButDimensionInUse = memberNames.size() === 0 && (dimensionContext.getAxisType() === oFF.AxisType.ROWS || dimensionContext.getAxisType() === oFF.AxisType.COLUMNS);
		isUsedInDynamicFilter = isMemberUnfilteredButDimensionInUse || memberNames.contains(aliasOrMemberName);
		if (!isUsedInDynamicFilter && this.getAliasName() !== null)
		{
			isUsedInDynamicFilter = memberNames.contains(dimensionContext.getPlaceholderIdByAlias(aliasOrMemberName)) || memberNames.contains(dimensionContext.getRuntimePlaceholderIdByAlias(aliasOrMemberName));
		}
	}
	return isTransientMember || isUsedInDynamicFilter;
};
oFF.QStructureMember.prototype.isModelDefinedMember = function()
{
	return this.m_modelDefinedMember;
};
oFF.QStructureMember.prototype.isMultiDataSourceMember = function()
{
	return oFF.BlendingUtils.getFormulaItemDimensionContexts(this).size() > 1;
};
oFF.QStructureMember.prototype.isNavigationalField = function(field)
{
	let dimension = field.getDimension();
	let dataSource = dimension.getDataSource();
	return (dataSource.getType() === oFF.MetaObjectType.PLANNING || dataSource.getType() === oFF.MetaObjectType.INA_MODEL) && dimension.isGroupingDimension() && this.getQueryModel().getDimensionByName(field.getName()) !== null && !field.getPresentationType().isTypeOf(oFF.PresentationType.ABSTRACT_KEY) && !field.getPresentationType().isTypeOf(oFF.PresentationType.ABSTRACT_TEXT) && !field.getPresentationType().isTypeOf(oFF.PresentationType.HIERARCHY_PATH);
};
oFF.QStructureMember.prototype.isNavigationalFieldAndNotTime = function(field)
{
	let dimension = field.getDimension();
	return this.isNavigationalField(field) && dimension.getDimensionType() === oFF.DimensionType.DIMENSION && !oFF.QTimeDimensionUtil.isDateOrTimeLikeDimension(dimension);
};
oFF.QStructureMember.prototype.isNumericScaleDefault = function()
{
	let capabilities = this.getModelCapabilities();
	let isDefault = false;
	if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
	{
		let dataCells = this.getQueryDataCells();
		if (dataCells.hasElements())
		{
			isDefault = oFF.XStream.of(dataCells).allMatch((dataCell) => {
				return dataCell.isDecimalPlacesDefault();
			});
		}
	}
	else
	{
		isDefault = !this.hasPropertyChanged(oFF.QStructureMemberProperties.QY_NUMERIC_SCALE);
	}
	return isDefault;
};
oFF.QStructureMember.prototype.isNumericShiftDefault = function()
{
	return this.isNumericShiftDefaultExt(false);
};
oFF.QStructureMember.prototype.isNumericShiftDefaultExt = function(excludePercentDataCells)
{
	let capabilities = this.getModelCapabilities();
	let isDefault = false;
	if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
	{
		let dataCells;
		if (excludePercentDataCells)
		{
			dataCells = oFF.XStream.of(this.getQueryDataCells()).filter((dc) => {
				return dc.getBaseValueType() !== oFF.XValueType.PERCENT;
			}).collect(oFF.XStreamCollector.toListOfNameObject());
		}
		else
		{
			dataCells = this.getQueryDataCells();
		}
		if (dataCells.hasElements())
		{
			isDefault = oFF.XStream.of(dataCells).allMatch((dataCell) => {
				return dataCell.isScalingFactorDefault();
			});
		}
	}
	else
	{
		isDefault = !this.hasPropertyChanged(oFF.QStructureMemberProperties.QY_NUMERIC_SHIFT);
	}
	return isDefault;
};
oFF.QStructureMember.prototype.isNumericShiftPercent = function()
{
	return this.m_numericShiftPercent || this.getQueryModel().getSystemType().isTypeOf(oFF.SystemType.HANA) && !this.getModelCapabilities().supportsNumericShiftPercent() && oFF.notNull(this.m_numericShift) && this.m_numericShift.getInteger() === 2;
};
oFF.QStructureMember.prototype.isOutOfContextMeasureInUse = function(context)
{
	if (context.getComponentType() === oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER)
	{
		let blendableMeasureMemberSort = context.getBlendableMeasureMemberSort();
		if (oFF.notNull(blendableMeasureMemberSort))
		{
			let sortPrimaryMeasureName = blendableMeasureMemberSort.getPrimaryMeasureName();
			let sortPrimaryMeasureDatasetId = blendableMeasureMemberSort.getPrimaryDatasetId();
			let sortPrimaryMeasureBlended = blendableMeasureMemberSort.isPrimaryMeasureBlended();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(sortPrimaryMeasureName) && oFF.XString.isEqual(sortPrimaryMeasureName, this.getAliasOrMemberName()) && (sortPrimaryMeasureBlended || oFF.XString.isEqual(sortPrimaryMeasureDatasetId, this.getQueryModel().getDatasetId())))
			{
				return true;
			}
			let sortSecondaryMeasureName = blendableMeasureMemberSort.getSecondaryMeasureName();
			let sortSecondaryMeasureDatasetId = blendableMeasureMemberSort.getSecondaryDatasetId();
			let sortSecondaryMeasureBlended = blendableMeasureMemberSort.isSecondaryMeasureBlended();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(sortSecondaryMeasureName) && oFF.XString.isEqual(sortSecondaryMeasureName, this.getAliasOrMemberName()) && (sortSecondaryMeasureBlended || oFF.XString.isEqual(sortSecondaryMeasureDatasetId, this.getQueryModel().getDatasetId())))
			{
				return true;
			}
		}
	}
	else
	{
		let iterator = context.getQueryModel().getSortingManager().getSortingOperations().getIterator();
		while (iterator.hasNext())
		{
			let sort = iterator.next();
			if (sort.getSortingType() === oFF.SortType.DATA_CELL_VALUE)
			{
				let dataCellSort = sort;
				let pathIterator = dataCellSort.getElementPath().getIterator();
				while (pathIterator.hasNext())
				{
					let path = pathIterator.next();
					if (oFF.XString.isEqual(path.getSelectValue(), this.getAliasOrMemberName()))
					{
						return true;
					}
				}
			}
			else if (sort.getSortingType() === oFF.SortType.MEASURE)
			{
				let measureSort = sort;
				if (measureSort.getMeasure() === this)
				{
					return true;
				}
			}
		}
	}
	return false;
};
oFF.QStructureMember.prototype.isPostAggregationIgnoringHierarchy = function()
{
	return this.m_postAggregationIgnoreHierarchy;
};
oFF.QStructureMember.prototype.isRunningAggregationDefined = function()
{
	return oFF.notNull(this.m_runAggrOperator);
};
oFF.QStructureMember.prototype.isRunningAggregationSupported = function()
{
	return false;
};
oFF.QStructureMember.prototype.isScaleAndUnitPlacementDefault = function()
{
	let capabilities = this.getModelCapabilities();
	let isDefault = false;
	if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
	{
		let dataCells = this.getQueryDataCells();
		if (dataCells.hasElements())
		{
			isDefault = oFF.XStream.of(dataCells).allMatch((dataCell) => {
				return dataCell.isScaleAndUnitPlacementDefault();
			});
		}
	}
	else
	{
		isDefault = !this.hasPropertyChanged(oFF.QStructureMemberProperties.QY_SCALE_AND_UNIT_PLACEMENT);
	}
	return isDefault;
};
oFF.QStructureMember.prototype.isScaleFormatDefault = function()
{
	let capabilities = this.getModelCapabilities();
	let isDefault = false;
	if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
	{
		let dataCells = this.getQueryDataCells();
		if (dataCells.hasElements())
		{
			isDefault = oFF.XStream.of(dataCells).allMatch((dataCell) => {
				return dataCell.isScaleFormatDefault();
			});
		}
	}
	else
	{
		isDefault = !this.hasPropertyChanged(oFF.QStructureMemberProperties.QY_SCALE_FORMAT);
	}
	return isDefault;
};
oFF.QStructureMember.prototype.isSelectionCandidate = function()
{
	return this.m_isSelectionCandidate;
};
oFF.QStructureMember.prototype.isShowCellChart = function()
{
	return this.m_showCellChart;
};
oFF.QStructureMember.prototype.isSignPresentationDefault = function()
{
	let capabilities = this.getModelCapabilities();
	let isDefault = false;
	if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
	{
		let dataCells = this.getQueryDataCells();
		if (dataCells.hasElements())
		{
			isDefault = oFF.XStream.of(dataCells).allMatch((dataCell) => {
				return dataCell.isSignPresentationDefault();
			});
		}
	}
	else
	{
		isDefault = !this.hasPropertyChanged(oFF.QStructureMemberProperties.QY_SIGN_PRESENTATION);
	}
	return isDefault;
};
oFF.QStructureMember.prototype.isSolveOrderOverDefined = function()
{
	return oFF.notNull(this.m_solveOrder);
};
oFF.QStructureMember.prototype.isVersionAggregated = function(context)
{
	let visitedMembers = oFF.XHashSetOfString.create();
	return this.isVersionAggregatedInternal(context, visitedMembers, this);
};
oFF.QStructureMember.prototype.isVersionAggregatedInternal = function(context, visitedMembers, rootMember)
{
	if (oFF.isNull(context) || context.getQueryModel().getVersionDimension() === null)
	{
		return false;
	}
	visitedMembers.add(this.getAliasOrMemberName());
	let dependentMemberNames = this.getTopLevelDependentMemberNames(context);
	let dimensionContext = this.getDimensionContext(context.getQueryManager());
	let isVersionAggregated = false;
	if (oFF.notNull(dependentMemberNames) && oFF.notNull(dimensionContext))
	{
		let isPrimary = dimensionContext === dimensionContext.getQueryModel().getPrimaryCalculationDimension();
		let dependentMemberNamesIter = dependentMemberNames.getIterator();
		while (dependentMemberNamesIter.hasNext())
		{
			let dependentMemberName = dependentMemberNamesIter.next();
			let dependentMember = dimensionContext.getStructureMemberByAliasOrMember(dependentMemberName);
			if (oFF.isNull(dependentMember))
			{
				dependentMember = this.getOlapEnv().getClientQueryObjectManager().getStructuredMember(dependentMemberName, this.getStorageName(), isPrimary);
			}
			if (oFF.notNull(dependentMember))
			{
				if (visitedMembers.contains(dependentMember.getAliasOrMemberName()))
				{
					let rootMemberText = oFF.XStringUtils.isNullOrEmpty(rootMember.getText()) ? rootMember.getAliasOrMemberName() : rootMember.getText();
					throw oFF.XException.createRuntimeException(oFF.XStringUtils.concatenate3(oFF.ErrorMessages.MEASURE_CYCLICAL_DEPENDENCY_2, " ", rootMemberText));
				}
				isVersionAggregated = dependentMember.isVersionAggregatedInternal(context, visitedMembers, rootMember);
				if (!isVersionAggregated)
				{
					break;
				}
			}
		}
	}
	visitedMembers.removeElement(this.getAliasOrMemberName());
	return isVersionAggregated;
};
oFF.QStructureMember.prototype.mergeDeepRecursive = function(settings, other)
{
	oFF.QDimensionMember.prototype.mergeDeepRecursive.call( this , settings, other);
	let otherMember = other;
	this.setText(otherMember.getOriginalText());
	this.setOverrideText(otherMember.getOverrideText());
};
oFF.QStructureMember.prototype.releaseObject = function()
{
	this.m_aggregationType = null;
	this.m_postAggregationType = null;
	this.m_postAggregationDimensionNames = oFF.XObjectExt.release(this.m_postAggregationDimensionNames);
	this.m_exceptionAggregation = oFF.XObjectExt.release(this.m_exceptionAggregation);
	this.m_runAggrOperator = null;
	this.m_runAggrInitDim = null;
	this.m_resultCalculation = null;
	this.m_singleValueCalculation = null;
	this.m_externalDimensionIgnoreList = oFF.XObjectExt.release(this.m_externalDimensionIgnoreList);
	this.m_presentationSignReversal = oFF.XObjectExt.release(this.m_presentationSignReversal);
	this.m_numericScale = oFF.XObjectExt.release(this.m_numericScale);
	this.m_numericPrecision = oFF.XObjectExt.release(this.m_numericPrecision);
	this.m_numericShift = oFF.XObjectExt.release(this.m_numericShift);
	this.m_numericShiftPercent = false;
	this.m_solveOrder = oFF.XObjectExt.release(this.m_solveOrder);
	this.m_dataTypeScale = oFF.XObjectExt.release(this.m_dataTypeScale);
	this.m_dataTypePrecision = oFF.XObjectExt.release(this.m_dataTypePrecision);
	this.m_defaultSelectionDimensionNames = oFF.XObjectExt.release(this.m_defaultSelectionDimensionNames);
	this.m_unitType = null;
	this.m_unitFixed = null;
	this.m_unitName = null;
	this.m_unitTextName = null;
	this.m_dataType = null;
	this.m_dataTypeInternal = null;
	this.m_accountType = null;
	this.m_windowFunction = oFF.XObjectExt.release(this.m_windowFunction);
	this.m_validationErrorCodes = oFF.XObjectExt.release(this.m_validationErrorCodes);
	this.m_currencyTranslationName = null;
	this.m_rateType = null;
	this.m_unitDimensionName = null;
	this.m_unitDimensionProperty = null;
	this.m_unitTranslationName = null;
	this.m_minimumDrillState = oFF.XObjectExt.release(this.m_minimumDrillState);
	this.m_semanticObject = null;
	this.m_preferredHierarchy = null;
	oFF.QDimensionMember.prototype.releaseObject.call( this );
};
oFF.QStructureMember.prototype.removeExceptionAggregationDimension = function(dimensionName)
{
	if (this._isExceptionAggregationLoaded())
	{
		let removedEl = this.m_exceptionAggregation._removeDimension(dimensionName);
		if (oFF.notNull(removedEl))
		{
			this.notifyPropertyChanged(oFF.QStructureMemberProperties.QY_EXCEPTION_AGGREGATION_DIMENSIONS, null, null);
		}
	}
};
oFF.QStructureMember.prototype.removeExternalDimensionToIgnore = function(externalDimensionName)
{
	if (oFF.notNull(this.m_externalDimensionIgnoreList))
	{
		let oldValue = this.m_externalDimensionIgnoreList.createListCopy();
		this.m_externalDimensionIgnoreList.removeElement(externalDimensionName);
		if (!oldValue.isEqualTo(this.m_externalDimensionIgnoreList))
		{
			this.notifyPropertyChanged(oFF.QStructureMemberProperties.QY_IGNORE_EXTERNAL_DIMENSIONS, oldValue, this.m_externalDimensionIgnoreList);
		}
	}
};
oFF.QStructureMember.prototype.removePostAggregationDimensions = function(postAggregationDimensionName)
{
	if (oFF.notNull(this.m_postAggregationDimensionNames))
	{
		let oldValue = this.m_postAggregationDimensionNames.createListCopy();
		this.m_postAggregationDimensionNames.removeElement(postAggregationDimensionName);
		this.notifyPropertyChanged(oFF.QStructureMemberProperties.QY_POST_AGGREGATION_DIMENSIONS, oldValue, this.m_postAggregationDimensionNames);
	}
};
oFF.QStructureMember.prototype.requireRuntimeExport = function(context)
{
	let requireRuntimeObject = context.getOlapEnv().getClientQueryObjectManager().getClientQueryObjectByKeyRef(this) !== null;
	if (requireRuntimeObject)
	{
		return true;
	}
	let dimensionContext = context.getQueryModel().getDimensionByName(this.getDimension().getName());
	requireRuntimeObject = dimensionContext.getPlaceholderIdByAlias(this.getAliasName()) !== null;
	if (requireRuntimeObject)
	{
		return true;
	}
	requireRuntimeObject = dimensionContext.getOverdefinedMemberManager().containsOverdefinedProperty(this.getAliasOrMemberName());
	return requireRuntimeObject;
};
oFF.QStructureMember.prototype.resetNumericPrecision = function()
{
	this._setNumericPrecisionInternal(null);
};
oFF.QStructureMember.prototype.resetNumericScale = function()
{
	if (this.getNumericScale() !== null)
	{
		let capabilities = this.getModelCapabilities();
		if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
		{
			let dataCells = this.getQueryDataCells();
			if (dataCells.hasElements())
			{
				for (let c = 0; c < dataCells.size(); c++)
				{
					let dataCell = dataCells.get(c);
					dataCell.setDecimalPlaces(-1);
				}
			}
		}
		else
		{
			this._setNumericScaleInternal(null);
		}
	}
};
oFF.QStructureMember.prototype.resetNumericShift = function()
{
	this.resetNumericShiftExt(false);
};
oFF.QStructureMember.prototype.resetNumericShiftExt = function(excludePercentDataCells)
{
	if (this.getNumericShift() !== null)
	{
		let capabilities = this.getModelCapabilities();
		if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
		{
			let dataCells;
			if (excludePercentDataCells)
			{
				dataCells = oFF.XStream.of(this.getQueryDataCells()).filter((dc) => {
					return dc.getBaseValueType() !== oFF.XValueType.PERCENT;
				}).collect(oFF.XStreamCollector.toListOfNameObject());
			}
			else
			{
				dataCells = this.getQueryDataCells();
			}
			if (dataCells.hasElements())
			{
				for (let c = 0; c < dataCells.size(); c++)
				{
					let dataCell = dataCells.get(c);
					dataCell.setScalingFactor(-1);
				}
			}
		}
		else
		{
			this._setNumericShiftInternal(null);
		}
	}
};
oFF.QStructureMember.prototype.resetToDefault = function()
{
	this.resetToDefaultNumericPrecision();
	this.resetToDefaultNumericScale();
	this.resetToDefaultNumericShift();
	this.resetToDefaultAggregationType();
};
oFF.QStructureMember.prototype.resetToDefaultAggregationType = function()
{
	this.toggleDefaultingProcess(true);
	this.setAggregationType(this._getDefaultAggregationType());
	this.toggleDefaultingProcess(false);
};
oFF.QStructureMember.prototype.resetToDefaultCurrencyPresentation = function()
{
	this.toggleDefaultingProcess(true);
	let capabilities = this.getModelCapabilities();
	if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
	{
		let dataCells = this.getQueryDataCells();
		oFF.XStream.of(dataCells).forEach((dataCell) => {
			dataCell.resetToDefaultCurrencyPresentation();
		});
	}
	else
	{
		let metaCurrencyPresentation = this._getDefaultCurrencyPresentation();
		this._setCurrencyPresentationInternal(metaCurrencyPresentation);
	}
	this.toggleDefaultingProcess(false);
};
oFF.QStructureMember.prototype.resetToDefaultNumericPrecision = function()
{
	if (this.hasPropertyChanged(oFF.QStructureMemberProperties.QY_NUMERIC_PRECISION))
	{
		this.toggleDefaultingProcess(true);
		let metaValue = this.getMetaValue(oFF.QStructureMemberProperties.QY_NUMERIC_PRECISION);
		let metaPrecision = null;
		if (oFF.notNull(metaValue))
		{
			let metaValInt = oFF.XInteger.convertFromString(metaValue.toString());
			if (metaValInt !== oFF.QStructureMemberProperties.NULL_INDICATOR_FOR_INTEGERS)
			{
				metaPrecision = oFF.XIntegerValue.create(metaValInt);
			}
		}
		this._setNumericPrecisionInternal(metaPrecision);
		this.toggleDefaultingProcess(false);
	}
};
oFF.QStructureMember.prototype.resetToDefaultNumericScale = function()
{
	if (!this.isNumericScaleDefault())
	{
		this.toggleDefaultingProcess(true);
		let capabilities = this.getModelCapabilities();
		if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
		{
			let dataCells = this.getQueryDataCells();
			oFF.XStream.of(dataCells).forEach((dataCell) => {
				dataCell.resetToDefaultDecimalPlaces();
			});
		}
		else
		{
			let metaScale = this._getDefaultNumericScale();
			this._setNumericScaleInternal(metaScale);
		}
		this.toggleDefaultingProcess(false);
	}
};
oFF.QStructureMember.prototype.resetToDefaultNumericShift = function()
{
	this.resetToDefaultNumericShiftExt(false);
};
oFF.QStructureMember.prototype.resetToDefaultNumericShiftExt = function(excludePercentDataCells)
{
	if (!this.isNumericShiftDefaultExt(excludePercentDataCells))
	{
		this.toggleDefaultingProcess(true);
		let capabilities = this.getModelCapabilities();
		if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
		{
			let dataCells = this.getQueryDataCells();
			oFF.XStream.of(dataCells).filter((dc) => {
				return !excludePercentDataCells || dc.getBaseValueType() !== oFF.XValueType.PERCENT;
			}).forEach((dataCell) => {
				dataCell.resetToDefaultScalingFactor();
			});
		}
		else
		{
			let metaShift = this._getDefaultNumericShift();
			this._setNumericShiftInternal(metaShift);
		}
		this.toggleDefaultingProcess(false);
	}
};
oFF.QStructureMember.prototype.resetToDefaultScaleAndUnitPlacement = function()
{
	this.toggleDefaultingProcess(true);
	let capabilities = this.getModelCapabilities();
	if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
	{
		let dataCells = this.getQueryDataCells();
		oFF.XStream.of(dataCells).forEach((dataCell) => {
			dataCell.resetToDefaultScaleAndUnitPlacement();
		});
	}
	else
	{
		let metaScaleAndUnitPlacement = this._getDefaultScaleAndUnitPlacement();
		this._setSetScaleAndUnitPlacementInternal(metaScaleAndUnitPlacement);
	}
	this.toggleDefaultingProcess(false);
};
oFF.QStructureMember.prototype.resetToDefaultScaleFormat = function()
{
	this.toggleDefaultingProcess(true);
	let capabilities = this.getModelCapabilities();
	if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
	{
		let dataCells = this.getQueryDataCells();
		oFF.XStream.of(dataCells).forEach((dataCell) => {
			dataCell.resetToDefaultScaleFormat();
		});
	}
	else
	{
		let metaScaleFormat = this._getDefaultScaleFormat();
		this._setScaleFormatInternal(metaScaleFormat);
	}
	this.toggleDefaultingProcess(false);
};
oFF.QStructureMember.prototype.resetToDefaultSignPresentation = function()
{
	if (!this.isSignPresentationDefault())
	{
		this.toggleDefaultingProcess(true);
		let capabilities = this.getModelCapabilities();
		if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
		{
			let dataCells = this.getQueryDataCells();
			oFF.XStream.of(dataCells).forEach((dataCell) => {
				dataCell.resetToDefaultSignPresentation();
			});
		}
		else
		{
			let metaSignPresentation = this._getDefaultSignPresentation();
			this._setSignPresentationInternal(metaSignPresentation);
		}
		this.toggleDefaultingProcess(false);
	}
};
oFF.QStructureMember.prototype.setAccountType = function(accountType)
{
	oFF.XBooleanUtils.checkTrue(this.getDimension().getDimensionType() === oFF.DimensionType.ACCOUNT, "AccountType is only supported for Account dimensions!");
	let oldValue = this.m_accountType;
	this.m_accountType = accountType;
	this.notifyPropertyConstantChanged(oFF.QStructureMemberProperties.QY_ACCOUNT_TYPE, oldValue, accountType);
};
oFF.QStructureMember.prototype.setAggregationType = function(aggregationType)
{
	if (this.m_aggregationType === aggregationType)
	{
		return;
	}
	this.assertStandardAggregationType(aggregationType);
	let memberType = this.getMemberType();
	if (memberType !== oFF.MemberType.BASIC_MEASURE && memberType !== oFF.MemberType.RESTRICTED_MEASURE)
	{
		this.assertSupportsAggregation(aggregationType);
	}
	let oldValue = this.m_aggregationType;
	this.m_aggregationType = aggregationType;
	this.notifyPropertyConstantChanged(oFF.QStructureMemberProperties.QY_AGGERGATION_TYPE, oldValue, aggregationType);
};
oFF.QStructureMember.prototype.setAliasName = function(aliasName)
{
	this.m_aliasName = aliasName;
};
oFF.QStructureMember.prototype.setAutoSignFlip = function(autoSignFlip)
{
	let oldValue = this.m_autoSignFlip;
	this.m_autoSignFlip = autoSignFlip;
	this.notifyPropertyBooleanChanged(oFF.QStructureMemberProperties.QY_AUTO_SIGN_FLIP, oldValue, autoSignFlip);
};
oFF.QStructureMember.prototype.setCellChartBarColor = function(cellChartBarColor)
{
	if (!oFF.XString.isEqual(this.m_cellChartBarColor, cellChartBarColor))
	{
		let oldValue = this.m_cellChartBarColor;
		this.m_cellChartBarColor = cellChartBarColor;
		this.notifyPropertyStringChanged(oFF.QStructureMemberProperties.QY_CELL_CHART_BAR_COLOR, oldValue, cellChartBarColor);
	}
};
oFF.QStructureMember.prototype.setCellChartLineColor = function(cellChartLineColor)
{
	if (!oFF.XString.isEqual(this.m_cellChartLineColor, cellChartLineColor))
	{
		let oldValue = this.m_cellChartLineColor;
		this.m_cellChartLineColor = cellChartLineColor;
		this.notifyPropertyStringChanged(oFF.QStructureMemberProperties.QY_CELL_CHART_LINE_COLOR, oldValue, cellChartLineColor);
	}
};
oFF.QStructureMember.prototype.setCellChartOrientation = function(cellChartOrientation)
{
	if (this.m_cellChartOrientation !== cellChartOrientation)
	{
		let oldValue = this.m_cellChartOrientation;
		this.m_cellChartOrientation = cellChartOrientation;
		this.notifyPropertyConstantChanged(oFF.QStructureMemberProperties.QY_CELL_CHART_ORIENTATION, oldValue, cellChartOrientation);
	}
};
oFF.QStructureMember.prototype.setCellChartShowValue = function(cellChartShowValue)
{
	this.setHideNumberForCellChart(!cellChartShowValue);
};
oFF.QStructureMember.prototype.setCellChartType = function(cellChartType)
{
	if (this.m_cellChartType !== cellChartType)
	{
		let oldValue = this.m_cellChartType;
		this.m_cellChartType = cellChartType;
		this.notifyPropertyConstantChanged(oFF.QStructureMemberProperties.QY_CELL_CHART_TYPE, oldValue, cellChartType);
	}
};
oFF.QStructureMember.prototype.setCreatedFromMetadata = function(createdFromMetadata)
{
	this.m_createdFromMetadata = createdFromMetadata;
};
oFF.QStructureMember.prototype.setCurrencyPresentation = function(currencyPresentation)
{
	let capabilities = this.getModelCapabilities();
	if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
	{
		let dataCells = this.getQueryDataCells();
		if (dataCells.hasElements())
		{
			for (let c = 0; c < dataCells.size(); c++)
			{
				let dataCell = dataCells.get(c);
				dataCell.setCurrencyPresentation(currencyPresentation);
			}
		}
	}
	else
	{
		this._setCurrencyPresentationInternal(currencyPresentation);
	}
};
oFF.QStructureMember.prototype.setCurrencyTranslation = function(specificCurrencyTranslation)
{
	if (oFF.isNull(specificCurrencyTranslation))
	{
		this.setCurrencyTranslationName(null);
	}
	else
	{
		this.setCurrencyTranslationName(specificCurrencyTranslation.getName());
	}
};
oFF.QStructureMember.prototype.setCurrencyTranslationName = function(currencyTranslationName)
{
	let oldValue = this.m_currencyTranslationName;
	this.m_currencyTranslationName = currencyTranslationName;
	this.notifyPropertyStringChanged(oFF.QStructureMemberProperties.QY_CURRENCY_TRANSLATION_NAME, oldValue, currencyTranslationName);
};
oFF.QStructureMember.prototype.setDataType = function(dataType)
{
	let oldValue = this.m_dataType;
	this.m_dataType = dataType;
	this.notifyPropertyConstantChanged(oFF.QStructureMemberProperties.QY_DATA_TYPE, oldValue, dataType);
};
oFF.QStructureMember.prototype.setDataTypeInternal = function(dataType)
{
	let oldValue = this.m_dataTypeInternal;
	this.m_dataTypeInternal = dataType;
	this.notifyPropertyConstantChanged(oFF.QStructureMemberProperties.QY_DATA_TYPE_INTERNAL, oldValue, dataType);
};
oFF.QStructureMember.prototype.setDataTypePrecision = function(precision)
{
	let oldValue = oFF.isNull(this.m_dataTypePrecision) ? oFF.QStructureMemberProperties.NULL_INDICATOR_FOR_INTEGERS : this.m_dataTypePrecision.getInteger();
	this.m_dataTypePrecision = oFF.XIntegerValue.create(precision);
	this.notifyPropertyIntegerChanged(oFF.QStructureMemberProperties.QY_DATA_TYPE_PRECISION, oldValue, precision);
};
oFF.QStructureMember.prototype.setDataTypeScale = function(scale)
{
	let oldValue = oFF.isNull(this.m_dataTypeScale) ? oFF.QStructureMemberProperties.NULL_INDICATOR_FOR_INTEGERS : this.m_dataTypeScale.getInteger();
	this.m_dataTypeScale = oFF.XIntegerValue.create(scale);
	this.notifyPropertyIntegerChanged(oFF.QStructureMemberProperties.QY_DATA_TYPE_SCALE, oldValue, scale);
};
oFF.QStructureMember.prototype.setExceptionAggregationType = function(aggregationType)
{
	if (this._isExceptionAggregationLoaded())
	{
		let oldValue = this.m_exceptionAggregation._getAggregationType();
		this.m_exceptionAggregation._setAggregationType(this.getOlapComponentType(), aggregationType);
		let newValue = this.m_exceptionAggregation._getAggregationType();
		this.notifyPropertyConstantChanged(oFF.QStructureMemberProperties.QY_EXCEPTION_AGGERGATION_TYPE, oldValue, newValue);
	}
};
oFF.QStructureMember.prototype.setHideNumberForCellChart = function(hideNumberForCellChart)
{
	if (this.m_hideNumberForCellChart !== hideNumberForCellChart)
	{
		let oldValue = this.m_hideNumberForCellChart;
		this.m_hideNumberForCellChart = hideNumberForCellChart;
		this.notifyPropertyBooleanChanged(oFF.QStructureMemberProperties.QY_HIDE_NUMBER_FOR_CELL_CHART, oldValue, hideNumberForCellChart);
	}
};
oFF.QStructureMember.prototype.setIgnoreAllExternalDimensions = function(isIgnoringAllExternalDimensions)
{
	let oldValue = this.m_isIgnoringAllExternalDimensions;
	this.m_isIgnoringAllExternalDimensions = isIgnoringAllExternalDimensions;
	this.notifyPropertyBooleanChanged(oFF.QStructureMemberProperties.QY_IGNORE_EXTERNAL_DIMENSIONS, oldValue, isIgnoringAllExternalDimensions);
};
oFF.QStructureMember.prototype.setIsCumulation = function(isCumulation)
{
	let oldValue = this.m_isCumulation;
	this.m_isCumulation = isCumulation;
	this.notifyPropertyBooleanChanged(oFF.QStructureMemberProperties.QY_IS_CUMULATION, oldValue, this.m_isCumulation);
};
oFF.QStructureMember.prototype.setIsSelectionCandidate = function(isSelectionCandidate)
{
	let oldValue = this.m_isSelectionCandidate;
	this.m_isSelectionCandidate = isSelectionCandidate;
	this.notifyPropertyBooleanChanged(oFF.QStructureMemberProperties.QY_IS_SELECTION_CANDIDATE, oldValue, isSelectionCandidate);
};
oFF.QStructureMember.prototype.setModelDefinedMember = function(modelDefinedMember)
{
	this.m_modelDefinedMember = modelDefinedMember;
	this.setNamesStoredAsFlat();
};
oFF.QStructureMember.prototype.setName = function(name)
{
	let internalName = name;
	if (oFF.notNull(name) && this.m_areNamesStoredAsFlat)
	{
		internalName = oFF.QDimensionMemberNameUtil.parseFlatMemberName(name);
	}
	oFF.QDimensionMember.prototype.setName.call( this , internalName);
};
oFF.QStructureMember.prototype.setNamesStoredAsFlat = function()
{
	let parentDimension = this.getDimension();
	this.m_areNamesStoredAsFlat = oFF.notNull(parentDimension) && parentDimension.areHierarchicalDimensionMemberNamesStoredAsFlat() && this.isModelDefinedMember();
};
oFF.QStructureMember.prototype.setNumericPrecision = function(precision)
{
	this._setNumericPrecisionInternal(oFF.XIntegerValue.create(precision));
};
oFF.QStructureMember.prototype.setNumericScale = function(scale)
{
	let capabilities = this.getModelCapabilities();
	if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
	{
		let dataCells = this.getQueryDataCells();
		if (dataCells.hasElements())
		{
			for (let c = 0; c < dataCells.size(); c++)
			{
				let dataCell = dataCells.get(c);
				dataCell.setDecimalPlaces(scale);
			}
		}
	}
	else
	{
		this._setNumericScaleInternal(oFF.XIntegerValue.create(scale));
	}
};
oFF.QStructureMember.prototype.setNumericShift = function(shift)
{
	this.setNumericShiftExt(shift, false);
};
oFF.QStructureMember.prototype.setNumericShiftExt = function(shift, excludePercentDataCells)
{
	let capabilities = this.getModelCapabilities();
	if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
	{
		let dataCells;
		if (excludePercentDataCells)
		{
			dataCells = oFF.XStream.of(this.getQueryDataCells()).filter((dc) => {
				return dc.getBaseValueType() !== oFF.XValueType.PERCENT;
			}).collect(oFF.XStreamCollector.toListOfNameObject());
		}
		else
		{
			dataCells = this.getQueryDataCells();
		}
		if (dataCells.hasElements())
		{
			for (let c = 0; c < dataCells.size(); c++)
			{
				let dataCell = dataCells.get(c);
				dataCell.setScalingFactor(-shift);
			}
		}
	}
	else
	{
		this._setNumericShiftInternal(oFF.XIntegerValue.create(shift));
	}
};
oFF.QStructureMember.prototype.setNumericShiftPercent = function(numericShiftPercent)
{
	if (this.getModelCapabilities().supportsNumericShiftPercent())
	{
		let oldValue = this.m_numericShiftPercent;
		this.m_numericShiftPercent = numericShiftPercent;
		this.notifyPropertyBooleanChanged(oFF.QStructureMemberProperties.QY_NUMERIC_SHIFT_PERCENT, oldValue, numericShiftPercent);
	}
	else if (this.getQueryModel().getSystemType().isTypeOf(oFF.SystemType.HANA))
	{
		this.setNumericShift(numericShiftPercent ? 2 : 0);
	}
	else
	{
		throw oFF.XException.createIllegalArgumentException("Numeric Shift Percent not supported");
	}
};
oFF.QStructureMember.prototype.setPostAggregationIgnoreHierarchy = function(ignoreHierarchy)
{
	let oldValue = this.m_postAggregationIgnoreHierarchy;
	this.m_postAggregationIgnoreHierarchy = ignoreHierarchy;
	this.notifyPropertyBooleanChanged(oFF.QStructureMemberProperties.QY_POST_AGGREGATION_IGNORE_HIERARCHY, oldValue, ignoreHierarchy);
};
oFF.QStructureMember.prototype.setPostAggregationType = function(postAggregationType)
{
	this.assertSupportsAggregation(postAggregationType);
	let oldValue = this.m_postAggregationType;
	this.m_postAggregationType = postAggregationType;
	this.notifyPropertyConstantChanged(oFF.QStructureMemberProperties.QY_POST_AGGERGATION_TYPE, oldValue, postAggregationType);
};
oFF.QStructureMember.prototype.setPreferredHierarchy = function(name)
{
	this.m_preferredHierarchy = name;
};
oFF.QStructureMember.prototype.setPresentationSignReversal = function(isSignReversed)
{
	oFF.XBooleanUtils.checkTrue(this.getDimension().getDimensionType() === oFF.DimensionType.ACCOUNT, "PresentationSignReversal is only supported for Account dimensions!");
	let oldValue = oFF.isNull(this.m_presentationSignReversal) ? false : this.m_presentationSignReversal.getBoolean();
	this.m_presentationSignReversal = oFF.XBooleanValue.create(isSignReversed);
	this.notifyPropertyBooleanChanged(oFF.QStructureMemberProperties.QY_PRESENTATION_SIGN_REVERSAL, oldValue, isSignReversed);
};
oFF.QStructureMember.prototype.setRateType = function(rateType)
{
	let oldValue = this.m_rateType;
	this.m_rateType = rateType;
	this.notifyPropertyConstantChanged(oFF.QStructureMemberProperties.QY_RATE_TYPE, oldValue, rateType);
};
oFF.QStructureMember.prototype.setResultCalculation = function(resultCalculation)
{
	let oldValue = this.m_resultCalculation;
	this.m_resultCalculation = resultCalculation;
	this.notifyPropertyConstantChanged(oFF.QStructureMemberProperties.QY_RESULT_CALCULATION, oldValue, resultCalculation);
};
oFF.QStructureMember.prototype.setScaleAndUnitPlacement = function(scaleAndUnitPlacement)
{
	let capabilities = this.getModelCapabilities();
	if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
	{
		let dataCells = this.getQueryDataCells();
		if (dataCells.hasElements())
		{
			for (let c = 0; c < dataCells.size(); c++)
			{
				let dataCell = dataCells.get(c);
				dataCell.setScaleAndUnitPlacement(scaleAndUnitPlacement);
			}
		}
	}
	else
	{
		this._setSetScaleAndUnitPlacementInternal(scaleAndUnitPlacement);
	}
};
oFF.QStructureMember.prototype.setScaleFormat = function(scaleFormat)
{
	let capabilities = this.getModelCapabilities();
	if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
	{
		let dataCells = this.getQueryDataCells();
		if (dataCells.hasElements())
		{
			for (let c = 0; c < dataCells.size(); c++)
			{
				let dataCell = dataCells.get(c);
				dataCell.setScaleFormat(scaleFormat);
			}
		}
	}
	else
	{
		this._setScaleFormatInternal(scaleFormat);
	}
};
oFF.QStructureMember.prototype.setSemanticObject = function(semanticObject)
{
	this.m_semanticObject = semanticObject;
};
oFF.QStructureMember.prototype.setShowCellChart = function(showCellChart)
{
	if (this.m_showCellChart !== showCellChart)
	{
		let oldValue = this.m_showCellChart;
		this.m_showCellChart = showCellChart;
		this.notifyPropertyBooleanChanged(oFF.QStructureMemberProperties.QY_SHOW_CELL_CHART, oldValue, showCellChart);
	}
};
oFF.QStructureMember.prototype.setSignPresentation = function(signPresentation)
{
	let capabilities = this.getModelCapabilities();
	if (capabilities.supportsDataCells() && capabilities.supportsUnifiedDataCells())
	{
		let dataCells = this.getQueryDataCells();
		if (dataCells.hasElements())
		{
			for (let c = 0; c < dataCells.size(); c++)
			{
				let dataCell = dataCells.get(c);
				dataCell.setSignPresentation(signPresentation);
			}
		}
	}
	else
	{
		this._setSignPresentationInternal(signPresentation);
	}
};
oFF.QStructureMember.prototype.setSingleValueCalculation = function(singleValueCalculation)
{
	let oldValue = this.m_singleValueCalculation;
	this.m_singleValueCalculation = singleValueCalculation;
	this.notifyPropertyConstantChanged(oFF.QStructureMemberProperties.QY_SINGLE_VALUE_CALCULATION, oldValue, singleValueCalculation);
};
oFF.QStructureMember.prototype.setSolveOrder = function(solveOrder)
{
	let oldValue = oFF.isNull(this.m_solveOrder) ? oFF.QStructureMemberProperties.NULL_INDICATOR_FOR_INTEGERS : this.m_solveOrder.getInteger();
	this.m_solveOrder = oFF.XIntegerValue.create(solveOrder);
	this.notifyPropertyIntegerChanged(oFF.QStructureMemberProperties.QY_SOLVE_ORDER, oldValue, solveOrder);
};
oFF.QStructureMember.prototype.setUnitDimensionName = function(unitDimensionName)
{
	this.m_unitDimensionName = unitDimensionName;
};
oFF.QStructureMember.prototype.setUnitDimensionProperty = function(unitDimensionProperty)
{
	this.m_unitDimensionProperty = unitDimensionProperty;
};
oFF.QStructureMember.prototype.setUnitFixed = function(unitFixed)
{
	let oldValue = this.m_unitFixed;
	this.m_unitFixed = unitFixed;
	this.notifyPropertyStringChanged(oFF.QStructureMemberProperties.QY_UNIT_FIXED, oldValue, unitFixed);
};
oFF.QStructureMember.prototype.setUnitName = function(unitName)
{
	let oldValue = this.m_unitName;
	this.m_unitName = unitName;
	this.notifyPropertyStringChanged(oFF.QStructureMemberProperties.QY_UNIT_NAME, oldValue, unitName);
};
oFF.QStructureMember.prototype.setUnitTextName = function(unitTextName)
{
	let oldValue = this.m_unitTextName;
	this.m_unitTextName = unitTextName;
	this.notifyPropertyStringChanged(oFF.QStructureMemberProperties.QY_UNIT_TEXT_NAME, oldValue, unitTextName);
};
oFF.QStructureMember.prototype.setUnitTranslation = function(specificUnitTranslation)
{
	if (oFF.isNull(specificUnitTranslation))
	{
		this.setUnitTranslationName(null);
	}
	else
	{
		this.setUnitTranslationName(specificUnitTranslation.getName());
	}
};
oFF.QStructureMember.prototype.setUnitTranslationName = function(unitTranslationName)
{
	let oldValue = this.m_unitTranslationName;
	this.m_unitTranslationName = unitTranslationName;
	this.notifyPropertyStringChanged(oFF.QStructureMemberProperties.QY_UNIT_TRANSLATION_NAME, oldValue, unitTranslationName);
};
oFF.QStructureMember.prototype.setUnitType = function(unitType)
{
	let oldValue = this.m_unitType;
	this.m_unitType = unitType;
	this.notifyPropertyConstantChanged(oFF.QStructureMemberProperties.QY_UNIT_TYPE, oldValue, unitType);
};
oFF.QStructureMember.prototype.setWindowFunction = function(windowFunction)
{
	this.m_windowFunction = windowFunction;
	this.notifyNodeChanged();
};
oFF.QStructureMember.prototype.setupStructureMember = function(context, structure, memberType)
{
	oFF.QDimensionMember.prototype.setupDimensionMember.call( this , context, structure);
	this.m_supportsResultSetSorting = false;
	this.setType(memberType);
	this.setDimensionMemberNameValueException(oFF.ValueException.NORMAL);
	this.m_aggregationType = null;
	this.m_isIgnoringAllExternalDimensions = false;
	this.m_isSelectionCandidate = true;
	this.m_validationErrorCodes = oFF.XList.create();
	this.m_currencyTranslationName = null;
	this.m_unitTranslationName = null;
	this.m_runAggrOperator = null;
	this.m_runAggrInitDim = null;
	this.m_rateType = null;
	this.m_minimumDrillState = oFF.XList.create();
	this.m_isGeneratingTransientObjects = false;
	this.setNamesStoredAsFlat();
};
oFF.QStructureMember.prototype.supportsCalculatedBeforeAggregation = function()
{
	let dimension = this.getDimension();
	return oFF.isNull(dimension) ? false : dimension.supportsCalculatedBeforeAggregation();
};
oFF.QStructureMember.prototype.supportsDimensionForExceptionAggregation = function(dimName, aggrType)
{
	return this._isExceptionAggregationLoaded() && this.getSupportedDimensionsForExceptionAggregation(aggrType).contains(dimName);
};
oFF.QStructureMember.prototype.supportsExceptionAggregationType = function(aggrType)
{
	return oFF.notNull(aggrType) && this.getSupportedExceptionAggregationTypes().contains(aggrType.getName());
};
oFF.QStructureMember.prototype.traverseDependencyGraph = function(context, nestedVisitedMembers, recursiveStack, messageManager, runValidation, skipModelerDefinedMembersDependencies, validateAugmentedAccountMembers)
{
	if (!nestedVisitedMembers.contains(this))
	{
		nestedVisitedMembers.add(this);
		let dependentMembers;
		if (this.isModelDefinedMember() && skipModelerDefinedMembersDependencies)
		{
			dependentMembers = oFF.XList.create();
		}
		else
		{
			dependentMembers = this.getTopLevelDependentMembers(context, messageManager, validateAugmentedAccountMembers);
		}
		if (this.getMemberType() === oFF.MemberType.RESTRICTED_MEASURE && dependentMembers.size() === 1 && oFF.XString.isEqual(this.getAliasOrMemberName(), dependentMembers.get(0).getAliasOrMemberName()))
		{
			return false;
		}
		recursiveStack.add(this.getAliasOrMemberName());
		if (oFF.notNull(dependentMembers))
		{
			let dependentMembersIter = dependentMembers.getIterator();
			while (dependentMembersIter.hasNext())
			{
				let dependentMember = dependentMembersIter.next();
				let hasCyclicalDependency = false;
				let dependentMessageManager = oFF.MessageManager.createMessageManagerExt(this.getSession());
				let contextForDependentMember = oFF.BlendingUtils.getQueryManagerContextForMember(context, dependentMember);
				if (!nestedVisitedMembers.contains(dependentMember) && dependentMember.traverseDependencyGraph(contextForDependentMember, nestedVisitedMembers, recursiveStack, dependentMessageManager, runValidation, skipModelerDefinedMembersDependencies, validateAugmentedAccountMembers))
				{
					hasCyclicalDependency = true;
				}
				else if (recursiveStack.contains(dependentMember.getAliasOrMemberName()))
				{
					hasCyclicalDependency = true;
				}
				if (runValidation)
				{
					dependentMember.validate(contextForDependentMember, dependentMessageManager, false, validateAugmentedAccountMembers);
				}
				if (oFF.notNull(messageManager) && (dependentMessageManager.hasErrors() || dependentMessageManager.hasWarnings()))
				{
					let errorMsgArgs = oFF.XList.create();
					errorMsgArgs.add(oFF.XStringUtils.isNotNullAndNotEmpty(this.getText()) ? this.getText() : this.getAliasOrMemberName());
					errorMsgArgs.add(oFF.XStringUtils.isNotNullAndNotEmpty(dependentMember.getText()) ? dependentMember.getText() : dependentMember.getAliasOrMemberName());
					messageManager.addWarning(oFF.ErrorCodes.MEASURE_INVALID_DEPENDENCY, oFF.ErrorMessages.getText(oFF.ErrorMessages.MEASURE_INVALID_DEPENDENCY, errorMsgArgs, this.getAliasOrMemberName(), null));
				}
				if (hasCyclicalDependency)
				{
					return true;
				}
			}
		}
	}
	recursiveStack.removeElement(this.getAliasOrMemberName());
	return false;
};
oFF.QStructureMember.prototype.validate = function(context, messageManager, validateDependencies, validateAugmentedAccountMembers)
{
	let clientQueryObjectManager = this.getOlapEnv().getClientQueryObjectManager();
	if (clientQueryObjectManager.getClientQueryObjectByKeyRef(this) === null && !this.getQueryManager().isValidatingLocalFormulaMembers())
	{
		return true;
	}
	let isValid = true;
	this.m_validationErrorCodes.clear();
	if (validateDependencies)
	{
		let validationMessageManager = oFF.MessageManager.createMessageManagerExt(this.getSession());
		let nestedDependentMembers = oFF.XList.create();
		let recursiveStack = oFF.XList.create();
		this.traverseDependencyGraph(context, nestedDependentMembers, recursiveStack, validationMessageManager, true, false, validateAugmentedAccountMembers);
		if (validationMessageManager.hasWarnings())
		{
			isValid = false;
			let warnings = validationMessageManager.getWarnings();
			for (let i = 0; i < warnings.size(); i++)
			{
				let warning = warnings.get(i);
				if (oFF.notNull(messageManager))
				{
					messageManager.addMessage(warning);
				}
				this.m_validationErrorCodes.add(oFF.XIntegerValue.create(warning.getCode()));
			}
		}
	}
	isValid = isValid && this.validatePreferredHierarchyAndAddMessage(context, messageManager);
	return isValid;
};
oFF.QStructureMember.prototype.validateBeforeRuntimeObjectExport = function(context, messageManager)
{
	if (this.m_validationErrorCodes.size() > 0)
	{
		return false;
	}
	if (context.getOlapEnv().getClientQueryObjectManager().getClientQueryObjectByKeyRef(this) !== null && (this.getDimension() === null || this.getQueryModel() === null))
	{
		let warningArg = oFF.XList.create();
		warningArg.add(this.getName());
		messageManager.addWarning(oFF.ErrorCodes.MEASURE_CONTEXT_RELEASED, oFF.ErrorMessages.getText(oFF.ErrorMessages.MEASURE_CONTEXT_RELEASED, warningArg, this.getAliasOrMemberName(), null));
		return false;
	}
	let tagging = this.getTagging();
	if (this.isModelDefinedMember() && !tagging.containsKey(oFF.QTransientConstants.TAG_SERIALIZE_MEMBER) && this.getDimension().getDimensionType() === oFF.DimensionType.ACCOUNT)
	{
		return false;
	}
	if (this.requireRuntimeExport(context) || this.getQueryManager().isValidatingLocalFormulaMembers())
	{
		let validationMessages = oFF.MessageManagerSimple.createMessageManager();
		try
		{
			this.getNestedDependentMemberNames(context, validationMessages, false);
			messageManager.addAllMessages(validationMessages);
			if (this.getQueryManager().isValidatingLocalFormulaMembers())
			{
				return !validationMessages.hasWarnings() && !validationMessages.hasErrors();
			}
		}
		catch (t)
		{
			messageManager.addAllMessages(validationMessages);
			return false;
		}
	}
	return true;
};
oFF.QStructureMember.prototype.validatePreferredHierarchy = function(dimensionContext)
{
	let isValid = true;
	let preferredHierarchy = this.getPreferredHierarchy();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(preferredHierarchy) && dimensionContext.supportsHierarchy())
	{
		isValid = oFF.XString.isEqual(preferredHierarchy, dimensionContext.getHierarchyName());
	}
	return isValid;
};
oFF.QStructureMember.prototype.validatePreferredHierarchyAndAddMessage = function(context, messageManager)
{
	if (context.getComponentType() === oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER || this.isMultiDataSourceMember())
	{
		return true;
	}
	let isValid = true;
	let dimensionContext = this.getDimensionContext(context.getQueryManager());
	if (oFF.notNull(dimensionContext) && !this.validatePreferredHierarchy(dimensionContext))
	{
		let mismatchInfo = oFF.XHashMapByString.create();
		mismatchInfo.put("measureName", this.getAliasOrMemberName());
		mismatchInfo.put("measureText", this.getText());
		mismatchInfo.put("preferredHierarchy", this.getPreferredHierarchy());
		messageManager.addWarningExtWithExtendedInfo(oFF.OriginLayer.APPLICATION, oFF.ErrorCodes.MEASURE_PREFERRED_HIERARCHY_MISMATCH, "", mismatchInfo);
		isValid = false;
	}
	return isValid;
};
oFF.QStructureMember.prototype.validateRequiredDimensions = function(context, messageManager)
{
	let isValid = true;
	let requestedProperties = oFF.XList.create();
	requestedProperties.add(oFF.QStructureMemberQueryProperties.UNSATISFIED_REQUIRED_DIMENSIONS);
	requestedProperties.add(oFF.QStructureMemberQueryProperties.ALL_REQUIRED_DIMENSIONS);
	let nestedMemberProperties = this.getNestedMemberQueryProperties(context, messageManager, requestedProperties, false);
	let unsatisfiedRequiredDimensionNames = nestedMemberProperties.getByKey(oFF.QStructureMemberQueryProperties.UNSATISFIED_REQUIRED_DIMENSIONS.getName());
	let allRequiredDimensionNames = nestedMemberProperties.getByKey(oFF.QStructureMemberQueryProperties.ALL_REQUIRED_DIMENSIONS.getName());
	if (oFF.notNull(unsatisfiedRequiredDimensionNames) && unsatisfiedRequiredDimensionNames.size() > 0)
	{
		messageManager.addErrorExt(oFF.OriginLayer.APPLICATION, oFF.ErrorCodes.MEASURE_MISSING_REQUIRED_DIMENSION, "", allRequiredDimensionNames);
		isValid = false;
	}
	return isValid;
};
oFF.QStructureMember.prototype.validateRequiredFields = function(context, messageManager, requiredFieldNames)
{
	if (oFF.isNull(context) || oFF.isNull(requiredFieldNames) || this.getOlapEnv().getClientQueryObjectManager().getClientQueryObjectByKeyRef(this) === null)
	{
		return true;
	}
	let missingFields = oFF.XHashSetOfString.create();
	let fieldNamesIter = requiredFieldNames.getIterator();
	while (fieldNamesIter.hasNext())
	{
		let fieldName = fieldNamesIter.next();
		let field = context.getQueryModel().getFieldByName(fieldName);
		if (oFF.isNull(field))
		{
			if (this.getOlapEnv().getClientQueryObjectManager().getFormulaCalcDimPropertiesByFieldName(fieldName, this.getStorageName()) === null)
			{
				missingFields.add(fieldName);
			}
		}
	}
	let isValid = missingFields.size() === 0;
	if (!isValid)
	{
		let errorMsgArgs = oFF.XList.create();
		let formulaName = this.getText();
		if (oFF.XStringUtils.isNullOrEmpty(formulaName))
		{
			formulaName = this.getAliasOrMemberName();
		}
		errorMsgArgs.add(formulaName);
		let names = missingFields.getValuesAsReadOnlyList();
		let message = names.get(0);
		for (let idxName = 1; idxName < missingFields.size(); idxName++)
		{
			message = oFF.XStringUtils.concatenate3(message, ",", names.get(idxName));
		}
		errorMsgArgs.add(message);
		let errorMessage = oFF.ErrorMessages.getText(oFF.ErrorMessages.MEASURE_MISSING_REQUIRED_FIELD, errorMsgArgs, this.getAliasOrMemberName(), null);
		if (oFF.notNull(messageManager))
		{
			messageManager.addWarning(oFF.ErrorCodes.MEASURE_MISSING_REQUIRED_FIELD, errorMessage);
		}
		this.m_validationErrorCodes.add(oFF.XIntegerValue.create(oFF.ErrorCodes.MEASURE_MISSING_REQUIRED_FIELD));
	}
	return isValid;
};
oFF.QStructureMember.prototype.validateWithDataModelScope = function(context)
{
	let validationResult = oFF.MessageManager.createMessageManagerExt(this.getSession());
	this.validate(context, validationResult, true, true);
	return validationResult;
};
oFF.QStructureMember.prototype.validateWithQueryModelScope = function(context)
{
	let validationResult = oFF.MessageManager.createMessageManagerExt(this.getSession());
	this.validateRequiredDimensions(context, validationResult);
	this.validatePreferredHierarchyAndAddMessage(context, validationResult);
	if (validationResult.hasErrors() || validationResult.hasWarnings())
	{
		return validationResult;
	}
	let dependentMembers = !this.isModelDefinedMember() ? this.getTopLevelDependentMembers(context, null, false) : null;
	if (oFF.notNull(dependentMembers))
	{
		let dependentMembersIter = dependentMembers.getIterator();
		while (dependentMembersIter.hasNext())
		{
			let dependentMember = dependentMembersIter.next();
			let contextForDependentMember = oFF.BlendingUtils.getQueryManagerContextForMember(context, dependentMember);
			let dependentValidationResult = dependentMember.validateWithQueryModelScope(contextForDependentMember);
			if (dependentValidationResult.hasErrors() || dependentValidationResult.hasWarnings())
			{
				let errorMsgArgs = oFF.XList.create();
				errorMsgArgs.add(oFF.XStringUtils.isNotNullAndNotEmpty(this.getDisplayDescription()) ? this.getDisplayDescription() : oFF.XStringUtils.isNotNullAndNotEmpty(this.getText()) ? this.getText() : this.getAliasOrMemberName());
				errorMsgArgs.add(oFF.XStringUtils.isNotNullAndNotEmpty(dependentMember.getDisplayDescription()) ? dependentMember.getDisplayDescription() : oFF.XStringUtils.isNotNullAndNotEmpty(dependentMember.getText()) ? dependentMember.getText() : dependentMember.getAliasOrMemberName());
				let errorMsg = oFF.ErrorMessages.getText(oFF.ErrorMessages.MEASURE_INVALID_DEPENDENCY, errorMsgArgs, this.getAliasOrMemberName(), null);
				let extendedInfo = dependentValidationResult.getMessages();
				validationResult.addWarningExtWithExtendedInfo(oFF.OriginLayer.APPLICATION, oFF.ErrorCodes.MEASURE_INVALID_DEPENDENCY, errorMsg, extendedInfo);
			}
		}
	}
	return validationResult;
};

oFF.QVariableManager = function() {};
oFF.QVariableManager.prototype = new oFF.QModelComponentList();
oFF.QVariableManager.prototype._ff_c = "QVariableManager";

oFF.QVariableManager.create = function(queryModel)
{
	let object = new oFF.QVariableManager();
	object.setupOlapList(queryModel, queryModel, true, "Query Variables", oFF.XCollectionFactory.LINKED_MAP, false);
	return object;
};
oFF.QVariableManager.variableControlsDynamicFilter = function(variable)
{
	return !variable.getVariableType().isTypeOf(oFF.VariableType.HIERARCHY_NAME_VARIABLE) && variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE) && variable.isUsedInDynamicFilter();
};
oFF.QVariableManager.prototype.addVariable = function(variable)
{
	variable.registerChangedListener(this, null);
	this.add(variable);
};
oFF.QVariableManager.prototype.clearExternalVariablesRepresentations = function()
{
	this.queueEventing();
	oFF.QVariableUtils.clearExternalVariablesRepresentations(this);
	this.resumeEventing();
};
oFF.QVariableManager.prototype.clearVariables = function()
{
	this.clear();
};
oFF.QVariableManager.prototype.cloneVariables = function(originVariableManager, cloneFunctionalVariables, flags, context)
{
	oFF.XStream.of(originVariableManager).filter((originVar) => {
		let isFuncVariable = originVar.getVariableType() === oFF.VariableType.FUNCTIONAL_VARIABLE;
		return isFuncVariable === cloneFunctionalVariables;
	}).forEach((originVariable) => {
		let clonedVar = oFF.QFactory.createVariable(context, this, originVariable);
		clonedVar.copyFrom(originVariable, flags);
		this.addInternal(clonedVar);
	});
};
oFF.QVariableManager.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponentList.prototype.copyFromInternal.call( this , other, flags);
	let originVariableManager = other;
	let size = originVariableManager.size();
	let context = this.getContext();
	this.cloneVariables(originVariableManager, true, flags, context);
	let hasFunctionalVariables = this.hasVariables();
	this.cloneVariables(originVariableManager, false, flags, context);
	if (hasFunctionalVariables)
	{
		for (let i = 0; i < size; i++)
		{
			let varIndex = oFF.XCollectionUtils.getIndexByName(this, originVariableManager.get(i).getName());
			if (varIndex !== -1 && varIndex !== i)
			{
				this.moveElement(varIndex, i);
			}
		}
	}
	for (let k = 0; k < size; k++)
	{
		this.get(k).copyVariableDependencies(originVariableManager.get(k));
	}
};
oFF.QVariableManager.prototype.getDimensionAccessor = function()
{
	return this.getQueryModel();
};
oFF.QVariableManager.prototype.getDimensionMemberVariables = function()
{
	return oFF.QVariableUtils.getDimensionMemberVariables(this);
};
oFF.QVariableManager.prototype.getDimensionMemberVariablesAffectingDynamicFilterByDimension = function()
{
	let resultMap = oFF.XHashMapByString.create();
	oFF.XCollectionUtils.forEach(this, (variable) => {
		if (oFF.QVariableManager.variableControlsDynamicFilter(variable))
		{
			let dimensionMemberVariable = variable;
			oFF.XCollectionUtils.forEach(dimensionMemberVariable.getDimensionsForRuntimeFilterValue(), (dimension) => {
				resultMap.put(dimension.getName(), dimensionMemberVariable);
			});
		}
	});
	return resultMap;
};
oFF.QVariableManager.prototype.getDimensionNamesOfVariablesAffectingDynamicFilterValue = function()
{
	let resultSet = oFF.XHashSetOfString.create();
	oFF.XCollectionUtils.forEach(this, (variable) => {
		if (oFF.QVariableManager.variableControlsDynamicFilter(variable))
		{
			let dimensionMemberVariable = variable;
			oFF.XCollectionUtils.forEach(dimensionMemberVariable.getDimensionsForRuntimeFilterValue(), (dimension) => {
				resultSet.add(dimension.getName());
			});
		}
	});
	return resultSet;
};
oFF.QVariableManager.prototype.getHierarchyNameVariable = function(name)
{
	return oFF.QVariableUtils.getVariableByType(this, name, oFF.VariableType.HIERARCHY_NAME_VARIABLE);
};
oFF.QVariableManager.prototype.getHierarchyNameVariables = function()
{
	return oFF.QVariableUtils.getHierarchyNameVariables(this);
};
oFF.QVariableManager.prototype.getHierarchyNodeVariable = function(name)
{
	return oFF.QVariableUtils.getVariableByType(this, name, oFF.VariableType.HIERARCHY_NODE_VARIABLE);
};
oFF.QVariableManager.prototype.getInputEnabledAndNonTechnicalVariables = function()
{
	return oFF.QVariableUtils.getInputEnabledAndNonTechnicalVariables(this);
};
oFF.QVariableManager.prototype.getInputEnabledVariable = function(name)
{
	return oFF.QVariableUtils.getInputEnabledVariable(this, name);
};
oFF.QVariableManager.prototype.getInputEnabledVariables = function()
{
	return oFF.QVariableUtils.getInputEnabledVariables(this);
};
oFF.QVariableManager.prototype.getModelComponentBase = function()
{
	return this;
};
oFF.QVariableManager.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.VARIABLE_MANAGER;
};
oFF.QVariableManager.prototype.getVariable = function(name)
{
	return this.getVariableBaseByName(name);
};
oFF.QVariableManager.prototype.getVariableBaseAt = function(index)
{
	return this.get(index);
};
oFF.QVariableManager.prototype.getVariableBaseByName = function(name)
{
	return this.getByKey(name);
};
oFF.QVariableManager.prototype.getVariableMode = function()
{
	return this.getQueryModel().getVariableMode();
};
oFF.QVariableManager.prototype.getVariableProcessor = function()
{
	return this.getQueryModel().getQueryManager();
};
oFF.QVariableManager.prototype.getVariables = function()
{
	return this;
};
oFF.QVariableManager.prototype.getVariablesAffectingDynamicFilter = function()
{
	return oFF.XStream.of(this).filter((variable) => {
		return oFF.QVariableManager.variableControlsDynamicFilter(variable);
	}).map((dmv) => {
		return dmv;
	}).collect(oFF.XStreamCollector.toList());
};
oFF.QVariableManager.prototype.hasDimensionMemberVariableAffectingDynamicFilter = function()
{
	return oFF.XStream.of(this).filter((variable) => {
		return oFF.QVariableManager.variableControlsDynamicFilter(variable);
	}).findAny().isPresent();
};
oFF.QVariableManager.prototype.hasInputEnabledAndNonTechnicalVariables = function()
{
	return oFF.XCollectionUtils.hasElements(this.getInputEnabledAndNonTechnicalVariables());
};
oFF.QVariableManager.prototype.hasInputEnabledVariables = function()
{
	return oFF.QVariableUtils.hasInputEnabledVariables(this);
};
oFF.QVariableManager.prototype.hasMandatoryVariables = function()
{
	return oFF.QVariableUtils.hasMandatoryVariables(this);
};
oFF.QVariableManager.prototype.hasVariableByType = function(variableType)
{
	return oFF.XStream.of(this).anyMatch((variable) => {
		return variable.getVariableType().isTypeOf(variableType);
	});
};
oFF.QVariableManager.prototype.hasVariables = function()
{
	return !this.isEmpty();
};
oFF.QVariableManager.prototype.mergeDeepRecursive = function(settings, other)
{
	let otherObj = other;
	let variables = otherObj.getVariables();
	for (let i = 0; i < variables.size(); i++)
	{
		let otherVariable = variables.get(i);
		let otherName = otherVariable.getName();
		let myVariable = this.getVariableBaseByName(otherName);
		myVariable.mergeDeepRecursive(settings, otherVariable);
	}
};
oFF.QVariableManager.prototype.onModelComponentChanged = function(modelComponent, customIdentifier)
{
	if (oFF.isNull(modelComponent) || !modelComponent.getOlapComponentType().isTypeOf(oFF.VariableType.ANY_VARIABLE))
	{
		return;
	}
	let dynamicFilter = this.getQueryModel().getFilter().getDynamicFilter();
	if (oFF.notNull(dynamicFilter))
	{
		dynamicFilter.setPreserveDuringSubmit(false);
	}
};
oFF.QVariableManager.prototype.removeVariable = function(name)
{
	let variable = this.getByKey(name);
	if (oFF.notNull(variable))
	{
		this.removeElement(variable);
	}
};
oFF.QVariableManager.prototype.setWinControlInAutoSubmitByType = function(variableType, isWinControlInAutoSubmit, isLimitToExitVariable)
{
	this.getVariableProcessor().setWinControlInAutoSubmitByType(variableType, isWinControlInAutoSubmit, isLimitToExitVariable);
};

oFF.QDimensionMemberVariable = function() {};
oFF.QDimensionMemberVariable.prototype = new oFF.QVariable();
oFF.QDimensionMemberVariable.prototype._ff_c = "QDimensionMemberVariable";

oFF.QDimensionMemberVariable.createDimensionMemberVariable = function(context, parent, name, description)
{
	let variable = new oFF.QDimensionMemberVariable();
	variable.setupDimensionMemberVariable(context, parent, name, description);
	variable.m_manualInputResultMembers = oFF.XListOfNameObject.create();
	return variable;
};
oFF.QDimensionMemberVariable.valueToXString = function(value)
{
	return oFF.isNull(value) ? null : oFF.XStringValue.create(value.toString());
};
oFF.QDimensionMemberVariable.prototype.m_defaultMemberFilter = null;
oFF.QDimensionMemberVariable.prototype.m_dimMemberVariableCapabilities = null;
oFF.QDimensionMemberVariable.prototype.m_dimension = null;
oFF.QDimensionMemberVariable.prototype.m_externalMemberFilter = null;
oFF.QDimensionMemberVariable.prototype.m_filterCapabilities = null;
oFF.QDimensionMemberVariable.prototype.m_filterCapability = null;
oFF.QDimensionMemberVariable.prototype.m_hierarchyBaseDimension = null;
oFF.QDimensionMemberVariable.prototype.m_hierarchyKeyDate = null;
oFF.QDimensionMemberVariable.prototype.m_hierarchyName = null;
oFF.QDimensionMemberVariable.prototype.m_hierarchyVersion = null;
oFF.QDimensionMemberVariable.prototype.m_isHierarchyInfoVariable = false;
oFF.QDimensionMemberVariable.prototype.m_isUsedInDynamicFilter = false;
oFF.QDimensionMemberVariable.prototype.m_isUsedInFixedFilter = false;
oFF.QDimensionMemberVariable.prototype.m_isWinControlInAutoSubmit = false;
oFF.QDimensionMemberVariable.prototype.m_manualInputResultMembers = null;
oFF.QDimensionMemberVariable.prototype.m_memberFilter = null;
oFF.QDimensionMemberVariable.prototype.m_runtimeReferences = null;
oFF.QDimensionMemberVariable.prototype.m_skipExportIfUnchanged = false;
oFF.QDimensionMemberVariable.prototype.m_supportsFunctionalValues = false;
oFF.QDimensionMemberVariable.prototype.m_supportsValuehelp = false;
oFF.QDimensionMemberVariable.prototype.m_uniqueId = null;
oFF.QDimensionMemberVariable.prototype.addManualInputResultValue = function(dimensionMember)
{
	this.initCollections();
	if (oFF.notNull(dimensionMember))
	{
		this.m_manualInputResultMembers.add(dimensionMember);
	}
};
oFF.QDimensionMemberVariable.prototype.addRuntimeReferences = function(runtimeReference)
{
	if (!this.m_runtimeReferences.contains(runtimeReference))
	{
		this.m_runtimeReferences.add(runtimeReference);
	}
};
oFF.QDimensionMemberVariable.prototype.clear = function()
{
	if (this.getMemberFilter() !== null)
	{
		this.m_memberFilter = oFF.XObjectExt.release(this.m_memberFilter);
		this.notifyNodeChanged();
	}
};
oFF.QDimensionMemberVariable.prototype.clearManualInputResultValue = function()
{
	this.initCollections();
	this.m_manualInputResultMembers.clear();
};
oFF.QDimensionMemberVariable.prototype.convertNodeListToMemberList = function(nodeList)
{
	if (oFF.isNull(nodeList))
	{
		return null;
	}
	let memberList = oFF.XList.create();
	let nodeIterator = nodeList.getIterator();
	while (nodeIterator.hasNext())
	{
		memberList.add(nodeIterator.next().getDimensionMember());
	}
	oFF.XObjectExt.release(nodeIterator);
	return memberList;
};
oFF.QDimensionMemberVariable.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVariable.prototype.copyFromInternal.call( this , other, flags);
	let originDimensionMemberVariable = other;
	let queryModel = this.getQueryModel();
	let context = this.getContext();
	let cloneDimension = null;
	if (originDimensionMemberVariable.getDimension() !== null)
	{
		cloneDimension = queryModel.getDimensionByNameFromExistingMetadata(originDimensionMemberVariable.getDimension().getName());
		this.setDimension(cloneDimension);
	}
	if (oFF.notNull(originDimensionMemberVariable.m_manualInputResultMembers))
	{
		this.m_manualInputResultMembers = oFF.XListOfNameObject.create();
		let size = originDimensionMemberVariable.m_manualInputResultMembers.size();
		for (let i = 0; i < size; i++)
		{
			let originMember = originDimensionMemberVariable.m_manualInputResultMembers.get(i);
			let cloneMemberDimension = queryModel.getDimensionByNameFromExistingMetadata(originMember.getDimension().getName());
			let cloneMember = cloneMemberDimension.getDimensionMember(originMember.getName());
			cloneMember.copyFrom(originMember, flags);
			this.m_manualInputResultMembers.add(cloneMember);
		}
	}
	if (oFF.notNull(originDimensionMemberVariable.m_memberFilter))
	{
		let cloneSelection = oFF.QFactory.createFilterExpression(context, this);
		let cloneProduct = oFF.QFactory.createFilterCartesianProductWithContextAndParent(context, cloneSelection);
		cloneSelection.setCartesianProduct(cloneProduct);
		let cloneList = cloneProduct.getCartesianListWithDefault(this.m_dimension);
		cloneList.copyFrom(originDimensionMemberVariable.m_memberFilter, flags);
		this.setFilter(cloneSelection);
	}
	if (oFF.notNull(originDimensionMemberVariable.m_defaultMemberFilter))
	{
		let cloneDefaultSelection = oFF.QFactory.createFilterExpression(context, this);
		let cloneDefaultProduct = oFF.QFactory.createFilterCartesianProductWithContextAndParent(context, cloneDefaultSelection);
		cloneDefaultSelection.setCartesianProduct(cloneDefaultProduct);
		let cloneDefaultList = cloneDefaultProduct.getCartesianListWithDefault(this.m_dimension);
		cloneDefaultList.copyFrom(originDimensionMemberVariable.m_defaultMemberFilter, flags);
		this.setDefaultMemberFilter(cloneDefaultList);
	}
	if (oFF.notNull(originDimensionMemberVariable.m_externalMemberFilter))
	{
		let cloneExternSelection = oFF.QFactory.createFilterExpression(context, this);
		let cloneExternProduct = oFF.QFactory.createFilterCartesianProductWithContextAndParent(context, cloneExternSelection);
		let cloneExternList = cloneExternProduct.getCartesianListWithDefault(this.m_dimension);
		cloneExternList.copyFrom(originDimensionMemberVariable.m_externalMemberFilter, flags);
		this.setExternalMemberFilter(cloneExternSelection);
	}
	if (oFF.notNull(originDimensionMemberVariable.m_filterCapability))
	{
		let cloneField;
		let origFieldName = originDimensionMemberVariable.m_filterCapability.getFieldName();
		if (oFF.notNull(origFieldName))
		{
			cloneField = queryModel.getFieldByName(origFieldName);
		}
		else
		{
			cloneField = null;
		}
		this.m_filterCapability = oFF.QFactory.createFilterCapability(context, this, cloneField, originDimensionMemberVariable.m_filterCapability.getOlapComponentType());
		this.m_filterCapability.copyFrom(originDimensionMemberVariable.m_filterCapability, flags);
	}
	if (oFF.notNull(originDimensionMemberVariable.m_filterCapabilities))
	{
		this.m_filterCapabilities = oFF.QFactory.createFilterCapabilitiesForVariable(context, this);
		this.m_filterCapabilities.copyFrom(originDimensionMemberVariable.m_filterCapabilities, flags);
	}
	this.m_hierarchyName = originDimensionMemberVariable.m_hierarchyName;
	this.m_hierarchyVersion = originDimensionMemberVariable.m_hierarchyVersion;
	this.m_hierarchyKeyDate = originDimensionMemberVariable.m_hierarchyKeyDate;
	this.m_hierarchyBaseDimension = originDimensionMemberVariable.m_hierarchyBaseDimension;
	this.m_supportsValuehelp = originDimensionMemberVariable.m_supportsValuehelp;
	this.m_uniqueId = originDimensionMemberVariable.m_uniqueId;
	this.m_isUsedInFixedFilter = originDimensionMemberVariable.m_isUsedInFixedFilter;
	this.m_isUsedInDynamicFilter = originDimensionMemberVariable.m_isUsedInDynamicFilter;
	this.m_isWinControlInAutoSubmit = originDimensionMemberVariable.m_isWinControlInAutoSubmit;
	this.m_isHierarchyInfoVariable = originDimensionMemberVariable.m_isHierarchyInfoVariable;
	let originRuntimeReferences = originDimensionMemberVariable.getRuntimeReferences();
	if (oFF.notNull(originRuntimeReferences))
	{
		this.m_runtimeReferences = originRuntimeReferences.createListCopy();
	}
	this.m_skipExportIfUnchanged = originDimensionMemberVariable.m_skipExportIfUnchanged;
	this.m_supportsFunctionalValues = originDimensionMemberVariable.m_supportsFunctionalValues;
};
oFF.QDimensionMemberVariable.prototype.getDefaultMemberFilter = function()
{
	return this.m_defaultMemberFilter;
};
oFF.QDimensionMemberVariable.prototype.getDimension = function()
{
	return this.m_dimension;
};
oFF.QDimensionMemberVariable.prototype.getDimensionForRuntimeFilterValue = function()
{
	let dimensionAccessor = this.getDimensionAccessor();
	let runtimeReferences = this.getRuntimeReferences();
	let varName = this.getName();
	let dimension = null;
	if (this.getVariableType() !== oFF.VariableType.HIERARCHY_NAME_VARIABLE)
	{
		for (let k = 0; k < runtimeReferences.size(); k++)
		{
			let dimName = runtimeReferences.get(k);
			dimension = dimensionAccessor.getDimensionByName(dimName);
			let dueDateVarName = dimension.getHierarchyDueDateVariableName();
			let versionVarName = dimension.getHierarchyVersionVariableName();
			if (oFF.XString.isEqual(varName, dueDateVarName))
			{
				dimension = null;
			}
			else if (oFF.XString.isEqual(varName, versionVarName))
			{
				dimension = null;
			}
			else
			{
				break;
			}
		}
	}
	return dimension;
};
oFF.QDimensionMemberVariable.prototype.getDimensionMember = function()
{
	let memberSelection = this.getMemberFilter();
	if (memberSelection.size() === 1)
	{
		let firstElement = memberSelection.getOp(0);
		if (firstElement.getComparisonOperator() === oFF.ComparisonOperator.EQUAL)
		{
			let firstValue = firstElement.getLow();
			if (oFF.notNull(firstValue))
			{
				let dimensionMember = firstValue.getDimensionMember();
				if (oFF.isNull(dimensionMember))
				{
					return this.getNewDimensionMember(oFF.QDimensionMemberVariable.valueToXString(firstValue.getValue()));
				}
				return dimensionMember;
			}
		}
	}
	return null;
};
oFF.QDimensionMemberVariable.prototype.getDimensionsForRuntimeFilterValue = function()
{
	let dimensionAccessor = this.getDimensionAccessor();
	let runtimeReferences = this.getRuntimeReferences();
	let varName = this.getName();
	let dimensions = oFF.XSetOfNameObject.create();
	let dimension;
	if (this.getVariableType() !== oFF.VariableType.HIERARCHY_NAME_VARIABLE)
	{
		for (let k = 0; k < runtimeReferences.size(); k++)
		{
			let dimName = runtimeReferences.get(k);
			dimension = dimensionAccessor.getDimensionByName(dimName);
			let dueDateVarName = dimension.getHierarchyDueDateVariableName();
			let versionVarName = dimension.getHierarchyVersionVariableName();
			if (!oFF.XString.isEqual(varName, dueDateVarName) && !oFF.XString.isEqual(varName, versionVarName))
			{
				dimensions.add(dimension);
			}
		}
	}
	return dimensions;
};
oFF.QDimensionMemberVariable.prototype.getDimensionsOfHierarchyInfoVariable = function(varName, varType)
{
	let dimensions = oFF.XList.create();
	if (varType === oFF.VariableType.HIERARCHY_NAME_VARIABLE)
	{
		let hierarchyDimension = this.getHierarchyNameDimension();
		let hierNameVarName = hierarchyDimension.getHierarchyNameVariableName();
		if (oFF.XString.isEqual(varName, hierNameVarName))
		{
			dimensions.add(hierarchyDimension);
		}
	}
	else
	{
		let dimensionAccessor = this.getDimensionAccessor();
		let runtimeReferences = this.getRuntimeReferences();
		for (let k = 0; k < runtimeReferences.size(); k++)
		{
			let dimName = runtimeReferences.get(k);
			let dim = dimensionAccessor.getDimensionByName(dimName);
			let dueDateVarName = dim.getHierarchyDueDateVariableName();
			let versionVarName = dim.getHierarchyVersionVariableName();
			if (oFF.XString.isEqual(varName, dueDateVarName) || oFF.XString.isEqual(varName, versionVarName))
			{
				dimensions.add(dim);
			}
		}
	}
	return dimensions;
};
oFF.QDimensionMemberVariable.prototype.getExternalMemberFilter = function()
{
	return this.m_externalMemberFilter;
};
oFF.QDimensionMemberVariable.prototype.getFieldAccessorSingle = function()
{
	let queryModel = this.getQueryModel();
	if (oFF.isNull(queryModel))
	{
		return this;
	}
	return queryModel;
};
oFF.QDimensionMemberVariable.prototype.getFieldByName = function(name)
{
	return this.getDimension().getFieldByName(name);
};
oFF.QDimensionMemberVariable.prototype.getFieldByNameOrAlias = function(name)
{
	return this.getDimension().getFieldByNameOrAlias(name);
};
oFF.QDimensionMemberVariable.prototype.getFilterCapabilities = function()
{
	return this.m_filterCapabilities;
};
oFF.QDimensionMemberVariable.prototype.getFilterCapability = function()
{
	return this.m_filterCapability;
};
oFF.QDimensionMemberVariable.prototype.getFilterExpression = function()
{
	return null;
};
oFF.QDimensionMemberVariable.prototype.getHierarchyBaseDimension = function()
{
	return this.m_hierarchyBaseDimension;
};
oFF.QDimensionMemberVariable.prototype.getHierarchyDueDate = oFF.noSupport;
oFF.QDimensionMemberVariable.prototype.getHierarchyKeyDate = function()
{
	return this.m_hierarchyKeyDate;
};
oFF.QDimensionMemberVariable.prototype.getHierarchyName = function()
{
	return this.m_hierarchyName;
};
oFF.QDimensionMemberVariable.prototype.getHierarchyVersion = function()
{
	return this.m_hierarchyVersion;
};
oFF.QDimensionMemberVariable.prototype.getManualInputResultValues = function()
{
	this.initCollections();
	return this.m_manualInputResultMembers.getValuesAsReadOnlyList();
};
oFF.QDimensionMemberVariable.prototype.getMemberFilter = function()
{
	if (oFF.isNull(this.m_memberFilter))
	{
		let dimension = this.getDimension();
		if (oFF.notNull(dimension))
		{
			let keyField = dimension.getKeyField();
			this.m_memberFilter = oFF.QFactory.createFilterCartesianListForDimensionMemberVariable(this.getContext(), this, keyField.getMetadata(), null);
		}
	}
	return this.m_memberFilter;
};
oFF.QDimensionMemberVariable.prototype.getMemberNamesFromFilter = function(dimName)
{
	return oFF.QFilterUtil.getMemberNamesFromFilter(this.getMemberFilter(), dimName);
};
oFF.QDimensionMemberVariable.prototype.getModelCapabilities = function()
{
	return this.m_dimMemberVariableCapabilities;
};
oFF.QDimensionMemberVariable.prototype.getNewDimensionMember = function(name)
{
	if (oFF.isNull(name))
	{
		return null;
	}
	let dimension = this.getDimension();
	if (oFF.isNull(dimension))
	{
		return null;
	}
	return dimension.getDimensionMember(name.getString());
};
oFF.QDimensionMemberVariable.prototype.getRuntimeReferences = function()
{
	return this.m_runtimeReferences;
};
oFF.QDimensionMemberVariable.prototype.getUniqueId = function()
{
	return this.m_uniqueId;
};
oFF.QDimensionMemberVariable.prototype.getValueByString = function()
{
	let memberSelection = this.getMemberFilter();
	if (memberSelection.size() === 1)
	{
		let filterElement = memberSelection.get(0);
		return filterElement.getLow().getValue().toString();
	}
	return null;
};
oFF.QDimensionMemberVariable.prototype.getValues = function()
{
	if (this.getApplication().getXVersion() >= oFF.XVersion.V999_NEW_VAR_VALUE_HELP)
	{
		let valueHelp = this.newValueHelpMembers();
		let result = valueHelp.process(oFF.SyncType.BLOCKING, null, null);
		if (result.hasErrors())
		{
			return null;
		}
		let data = result.getData();
		return data.getMembers();
	}
	let extResult = this.getDimension().processVarHelp(this.getName(), oFF.SyncType.BLOCKING, null, null);
	oFF.MessageUtil.checkNoError(extResult);
	return this.convertNodeListToMemberList(extResult.getData());
};
oFF.QDimensionMemberVariable.prototype.getVariableType = function()
{
	return oFF.VariableType.DIMENSION_MEMBER_VARIABLE;
};
oFF.QDimensionMemberVariable.prototype.hasDefaultMemberFilter = function()
{
	return oFF.notNull(this.m_defaultMemberFilter);
};
oFF.QDimensionMemberVariable.prototype.hasFunctionalValues = function()
{
	return this.m_supportsFunctionalValues;
};
oFF.QDimensionMemberVariable.prototype.hasMemberFilter = function()
{
	return oFF.notNull(this.m_memberFilter) && this.m_memberFilter.hasElements();
};
oFF.QDimensionMemberVariable.prototype.hasSingleValueMemberFilter = function()
{
	return oFF.QFilterUtil.isSingleValueFilterCartesianList(this.getMemberFilter());
};
oFF.QDimensionMemberVariable.prototype.hasUniqueHierarchy = function()
{
	return oFF.notNull(this.m_hierarchyName);
};
oFF.QDimensionMemberVariable.prototype.initCollections = function()
{
	if (oFF.isNull(this.m_manualInputResultMembers))
	{
		this.m_manualInputResultMembers = oFF.XListOfNameObject.create();
	}
};
oFF.QDimensionMemberVariable.prototype.isEmpty = function()
{
	let memberFilter = this.getMemberFilter();
	return oFF.isNull(memberFilter) || memberFilter.isEmpty();
};
oFF.QDimensionMemberVariable.prototype.isEnforcedDynamicValue = function()
{
	let enforcedDynamic = this.isEnforcedDynamicValueInternal();
	if (enforcedDynamic === oFF.TriStateBool._DEFAULT)
	{
		return oFF.isNull(this.m_dimension) ? false : this.m_dimension.isEnforcedDynamicValue();
	}
	return enforcedDynamic.getBoolean();
};
oFF.QDimensionMemberVariable.prototype.isHierarchyInfoVariable = function()
{
	return this.m_isHierarchyInfoVariable;
};
oFF.QDimensionMemberVariable.prototype.isHierarchyInfoVariableForExplicitlyInactivatedHierarchy = function()
{
	let dimensions = this.getDimensionsOfHierarchyInfoVariable(this.getName(), this.getVariableType());
	return this.isHierarchyInfoVariable() && oFF.XCollectionUtils.hasElements(dimensions) && oFF.XStream.of(dimensions).filterNullValues().allMatch((dimension) => {
		return !dimension.isHierarchyActive() && oFF.XStringUtils.isNotNullAndNotEmpty(dimension.getHierarchyName());
	});
};
oFF.QDimensionMemberVariable.prototype.isUsedInDynamicFilter = function()
{
	return this.m_isUsedInDynamicFilter;
};
oFF.QDimensionMemberVariable.prototype.isUsedInFixedFilter = function()
{
	return this.m_isUsedInFixedFilter;
};
oFF.QDimensionMemberVariable.prototype.isWinControlInAutoSubmit = function()
{
	return this.m_isWinControlInAutoSubmit;
};
oFF.QDimensionMemberVariable.prototype.maintainFilterStateForAutoSubmit = function()
{
	let queryModel = this.getQueryModel();
	if (this.m_isWinControlInAutoSubmit && !this.m_isHierarchyInfoVariable && oFF.notNull(queryModel) && this.isUsedInDynamicFilter())
	{
		let filterExp = queryModel.getFilter().getDynamicFilter();
		oFF.XCollectionUtils.forEach(this.getDimensionsForRuntimeFilterValue(), (dimension) => {
			let filterList = filterExp.getCartesianListWithDefault(dimension);
			filterList.clear();
			filterList.setConvertToFlatFilter(false);
			let lowValueBag = filterList.addNewCartesianElement().getLow();
			lowValueBag.setVariableValue(this);
		});
	}
};
oFF.QDimensionMemberVariable.prototype.maintainStateForAutoSubmit = function(isWinControlInAutoSubmit)
{
	let varName = this.getName();
	let varType = this.getVariableType();
	let dimensions = this.getDimensionsOfHierarchyInfoVariable(varName, varType);
	if (varType === oFF.VariableType.HIERARCHY_NAME_VARIABLE)
	{
		let dimensionOptional = oFF.XCollectionUtils.getOptionalAtIndex(dimensions, 0);
		if (dimensionOptional.isPresent())
		{
			this.m_isWinControlInAutoSubmit = isWinControlInAutoSubmit;
			dimensionOptional.get().getHierarchyManagerBase().setUseHierarchyNameVariable(isWinControlInAutoSubmit);
		}
	}
	else if (varType === oFF.VariableType.HIERARCHY_NODE_VARIABLE)
	{
		this.m_isWinControlInAutoSubmit = isWinControlInAutoSubmit;
	}
	else
	{
		if (oFF.XCollectionUtils.hasElements(dimensions) && oFF.XStream.of(dimensions).filterNullValues().allMatch((dimInfo) => {
			return (oFF.XString.isEqual(varName, dimInfo.getHierarchyDueDateVariableName()) || oFF.XString.isEqual(varName, dimInfo.getHierarchyVersionVariableName()));
		}))
		{
			oFF.XCollectionUtils.forEach(dimensions, (dimension) => {
				if (oFF.XString.isEqual(varName, dimension.getHierarchyDueDateVariableName()))
				{
					this.m_isWinControlInAutoSubmit = isWinControlInAutoSubmit;
					dimension.setUseHierarchyDueDateVariable(isWinControlInAutoSubmit);
				}
				else if (oFF.XString.isEqual(varName, dimension.getHierarchyVersionVariableName()))
				{
					this.m_isWinControlInAutoSubmit = isWinControlInAutoSubmit;
					dimension.getHierarchyManagerBase().setUseHierarchyVersionVariable(isWinControlInAutoSubmit);
				}
			});
		}
		else
		{
			this.m_isWinControlInAutoSubmit = isWinControlInAutoSubmit;
		}
	}
};
oFF.QDimensionMemberVariable.prototype.mergeDeepRecursive = function(settings, other)
{
	oFF.QVariable.prototype.mergeDeepRecursive.call( this , settings, other);
	let otherVar = other;
	if (otherVar.hasMemberFilter() && this.getMemberFilter() !== null)
	{
		let memberSelection = otherVar.getMemberFilter();
		this.m_memberFilter.mergeDeepRecursive(settings, memberSelection);
	}
};
oFF.QDimensionMemberVariable.prototype.newValueHelpMembers = function()
{
	return oFF.QFactory.createValueHelpVarDimMember(this.getContext(), this);
};
oFF.QDimensionMemberVariable.prototype.notifyChildChanged = function(changedNodes)
{
	if (this.isDeltaRecordingActive())
	{
		this.getChangedProperties().add(oFF.QVariableProperties.VA_VARIABLE_VALUE);
		this.getChangedPropertiesInDetail().put(oFF.QVariableProperties.VA_VARIABLE_VALUE, null);
	}
	oFF.QVariable.prototype.notifyChildChanged.call( this , changedNodes);
};
oFF.QDimensionMemberVariable.prototype.processFunctionalVariableHelp = function(syncType, listener, customIdentifier)
{
	let dimension = this.getDimension();
	if (!this.hasFunctionalValues() || !dimension.getMetadata().hasFunctionalVariables())
	{
		return oFF.ExtResult.create(oFF.XList.create(), oFF.MessageManagerSimple.createMessageManager());
	}
	return dimension.processFunctionalVariableHelp(syncType, listener, customIdentifier);
};
oFF.QDimensionMemberVariable.prototype.processVarHelp = function(syncType, listener, customIdentifier)
{
	return this.getDimension().processVarHelp(this.getName(), syncType, listener, customIdentifier);
};
oFF.QDimensionMemberVariable.prototype.processVariableHelp = function(syncType, listener, customIdentifier)
{
	return this.getDimension().processVariableHelp(this.getName(), syncType, listener, customIdentifier);
};
oFF.QDimensionMemberVariable.prototype.releaseObject = function()
{
	this.m_dimMemberVariableCapabilities = oFF.XObjectExt.release(this.m_dimMemberVariableCapabilities);
	this.m_dimension = null;
	this.m_hierarchyName = null;
	this.m_hierarchyVersion = null;
	this.m_hierarchyKeyDate = null;
	this.m_hierarchyBaseDimension = null;
	this.m_filterCapability = null;
	this.m_filterCapabilities = null;
	this.m_defaultMemberFilter = null;
	this.m_memberFilter = null;
	this.m_externalMemberFilter = null;
	this.m_uniqueId = null;
	this.m_manualInputResultMembers = oFF.XObjectExt.release(this.m_manualInputResultMembers);
	this.m_runtimeReferences = oFF.XObjectExt.release(this.m_runtimeReferences);
	oFF.QVariable.prototype.releaseObject.call( this );
};
oFF.QDimensionMemberVariable.prototype.resetToDefaultValues = function()
{
	if (this.hasDefaultMemberFilter())
	{
		this.setMemberFilter(this.getDefaultMemberFilter().cloneOlapComponent(this, null));
	}
	else
	{
		this.getMemberFilter().clear();
	}
};
oFF.QDimensionMemberVariable.prototype.resetWinControlInAutoSubmit = function()
{
	let varName = this.getName();
	let varType = this.getVariableType();
	if (varType === oFF.VariableType.HIERARCHY_NAME_VARIABLE)
	{
		this.m_isWinControlInAutoSubmit = false;
	}
	else
	{
		let dimensions = this.getDimensionsOfHierarchyInfoVariable(varName, varType);
		if (oFF.XCollectionUtils.hasElements(dimensions) && oFF.XStream.of(dimensions).filterNullValues().allMatch((dimInfo) => {
			return (oFF.XString.isEqual(varName, dimInfo.getHierarchyDueDateVariableName()) || oFF.XString.isEqual(varName, dimInfo.getHierarchyVersionVariableName()));
		}))
		{
			this.m_isWinControlInAutoSubmit = false;
		}
	}
};
oFF.QDimensionMemberVariable.prototype.setDefaultMemberFilter = function(memberFilter)
{
	this.m_defaultMemberFilter = memberFilter;
	if (oFF.notNull(this.m_defaultMemberFilter))
	{
		this.m_defaultMemberFilter.setParent(this);
	}
};
oFF.QDimensionMemberVariable.prototype.setDimension = function(dimension)
{
	this.m_dimension = dimension;
	if (dimension.getKeyField() !== null)
	{
		this.setValueType(dimension.getKeyField().getValueType());
	}
	this.setMemberFilter(null);
};
oFF.QDimensionMemberVariable.prototype.setDimensionMember = function(value)
{
	let memberSelection = this.getMemberFilter();
	let singleElement = memberSelection.addNewCartesianElement();
	singleElement.setComparisonOperator(oFF.ComparisonOperator.EQUAL);
	singleElement.getLow().setDimensionMember(value);
};
oFF.QDimensionMemberVariable.prototype.setExternalMemberFilter = function(externalMemberFilter)
{
	if (oFF.notNull(externalMemberFilter))
	{
		externalMemberFilter.addSecondaryParent(this);
	}
	if (oFF.notNull(this.m_externalMemberFilter))
	{
		this.m_externalMemberFilter.removeSecondaryParent(this);
	}
	this.m_externalMemberFilter = externalMemberFilter;
	this.notifyNodeChanged();
};
oFF.QDimensionMemberVariable.prototype.setFilter = function(filter)
{
	if (oFF.isNull(filter) || filter.getFilterRootElement() === null)
	{
		this.setMemberFilter(null);
		return;
	}
	if (filter.isCartesianProduct())
	{
		if (filter.getCartesianProduct() !== null)
		{
			let selectionList = filter.getCartesianProduct().getCartesianList(this.getDimension());
			if (oFF.notNull(selectionList))
			{
				this.setMemberFilter(selectionList);
			}
		}
	}
	else
	{
		let complexFilterRoot = filter.getComplexRoot();
		if (oFF.notNull(complexFilterRoot))
		{
			oFF.XBooleanUtils.checkTrue(complexFilterRoot.getComponentType().isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST), "Dimension Member Variable: Selection Container not valid!");
			this.setMemberFilter(filter.getComplexRoot());
		}
	}
};
oFF.QDimensionMemberVariable.prototype.setFilterCapabilities = function(filterCapabilities)
{
	this.m_filterCapabilities = filterCapabilities;
};
oFF.QDimensionMemberVariable.prototype.setFilterCapability = function(capability)
{
	this.m_filterCapability = capability;
};
oFF.QDimensionMemberVariable.prototype.setHasFunctionalValues = function(hasFunctionalValues)
{
	this.m_supportsFunctionalValues = hasFunctionalValues;
};
oFF.QDimensionMemberVariable.prototype.setHierarchyBaseDimension = function(name)
{
	this.m_hierarchyBaseDimension = name;
};
oFF.QDimensionMemberVariable.prototype.setHierarchyDueDate = oFF.noSupport;
oFF.QDimensionMemberVariable.prototype.setHierarchyKeyDate = function(keyDate)
{
	this.m_hierarchyKeyDate = keyDate;
};
oFF.QDimensionMemberVariable.prototype.setHierarchyName = function(name)
{
	this.m_hierarchyName = name;
};
oFF.QDimensionMemberVariable.prototype.setHierarchyVersion = function(version)
{
	this.m_hierarchyVersion = version;
};
oFF.QDimensionMemberVariable.prototype.setIsHierarchyInfoVariable = function(isHierarchyInfoVariable)
{
	this.m_isHierarchyInfoVariable = isHierarchyInfoVariable;
};
oFF.QDimensionMemberVariable.prototype.setIsUsedInDynamicFilter = function(isUsedInDynamicFilter)
{
	this.m_isUsedInDynamicFilter = isUsedInDynamicFilter;
};
oFF.QDimensionMemberVariable.prototype.setIsUsedInFixedFilter = function(isUsedInFixedFilter)
{
	this.m_isUsedInFixedFilter = isUsedInFixedFilter;
};
oFF.QDimensionMemberVariable.prototype.setMemberFilter = function(memberFilter)
{
	this.m_memberFilter = memberFilter;
	if (oFF.notNull(this.m_memberFilter))
	{
		this.m_memberFilter.setParent(this);
	}
	this.notifyNodeChanged();
};
oFF.QDimensionMemberVariable.prototype.setParent = function(parent)
{
	oFF.QVariable.prototype.setParent.call( this , parent);
	this.m_dimMemberVariableCapabilities.updateContext(this);
};
oFF.QDimensionMemberVariable.prototype.setSupportsValueHelp = function(isSupported)
{
	this.m_supportsValuehelp = isSupported;
};
oFF.QDimensionMemberVariable.prototype.setUniqueId = function(uniqueId)
{
	this.m_uniqueId = uniqueId;
};
oFF.QDimensionMemberVariable.prototype.setValueByStringExt = function(value, isManualInput)
{
	this.queueEventing();
	let memberSelection = this.getMemberFilter();
	memberSelection.clear();
	let dimension = this.getDimension();
	let keyField = dimension.getKeyField();
	memberSelection.setField(keyField);
	let filterOperation = oFF.QFactory.createFilterOperation(memberSelection.getFilterExpression(), keyField);
	let low = filterOperation.getLow();
	if (isManualInput)
	{
		low.setString(value);
		low.setIsManualInput(true);
	}
	else
	{
		low.setDimensionMember(dimension.getDimensionMember(value));
	}
	memberSelection.add(filterOperation);
	this.resumeEventing();
	this.notifyNodeChanged();
};
oFF.QDimensionMemberVariable.prototype.setWinControlInAutoSubmit = function(isWinControlInAutoSubmit)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager) && queryManager.isExecuteAutoVariableSubmit())
	{
		this.maintainStateForAutoSubmit(isWinControlInAutoSubmit);
		this.notifyNodeChanged();
	}
};
oFF.QDimensionMemberVariable.prototype.setupDimensionMemberVariable = function(context, parent, name, description)
{
	oFF.QVariable.prototype.setupVariable.call( this , context, parent, null, name, description);
	this.m_dimMemberVariableCapabilities = oFF.QFactory.createCapabilitiesDecorator(this);
	this.m_dimMemberVariableCapabilities.setSupportsVisibilityFilter(false);
	this.m_dimMemberVariableCapabilities.setSupportsComplexFilter(true);
	this.m_dimMemberVariableCapabilities.setSupportsComplexTupleFilter(true);
	this.m_dimMemberVariableCapabilities.setSupportsCellValueOperand(false);
	this.m_supportsValuehelp = true;
	this.m_uniqueId = oFF.XGuid.getGuid();
	this.m_runtimeReferences = oFF.XList.create();
};
oFF.QDimensionMemberVariable.prototype.supportsMultipleValues = function()
{
	return this.m_filterCapabilities.supportsMultipleValues();
};
oFF.QDimensionMemberVariable.prototype.supportsValueHelp = function()
{
	return this.m_supportsValuehelp;
};

oFF.QFunctionalVariable = function() {};
oFF.QFunctionalVariable.prototype = new oFF.QVariable();
oFF.QFunctionalVariable.prototype._ff_c = "QFunctionalVariable";

oFF.QFunctionalVariable.createFunctionalVariable = function(context, parent, name, description)
{
	let variable = new oFF.QFunctionalVariable();
	variable.setupVariable(context, parent, null, name, description);
	return variable;
};
oFF.QFunctionalVariable.prototype.m_dimension = null;
oFF.QFunctionalVariable.prototype.m_isInterval = false;
oFF.QFunctionalVariable.prototype.m_multipleValues = false;
oFF.QFunctionalVariable.prototype.m_parameters = null;
oFF.QFunctionalVariable.prototype.m_userInputRequired = false;
oFF.QFunctionalVariable.prototype.clear = function() {};
oFF.QFunctionalVariable.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVariable.prototype.copyFromInternal.call( this , other, flags);
	let originFunctionalVariable = other;
	this.m_dimension = originFunctionalVariable.m_dimension;
	this.m_userInputRequired = originFunctionalVariable.m_userInputRequired;
	this.m_multipleValues = originFunctionalVariable.m_multipleValues;
	this.m_isInterval = originFunctionalVariable.m_isInterval;
	if (oFF.notNull(originFunctionalVariable.m_parameters))
	{
		this.m_parameters = oFF.XCollectionUtils.createListOfClones(originFunctionalVariable.m_parameters);
	}
};
oFF.QFunctionalVariable.prototype.getDimension = function()
{
	return this.m_dimension;
};
oFF.QFunctionalVariable.prototype.getParameters = function()
{
	return this.m_parameters;
};
oFF.QFunctionalVariable.prototype.getValueByString = function()
{
	return null;
};
oFF.QFunctionalVariable.prototype.getVariableType = function()
{
	return oFF.VariableType.FUNCTIONAL_VARIABLE;
};
oFF.QFunctionalVariable.prototype.isEmpty = function()
{
	return false;
};
oFF.QFunctionalVariable.prototype.isInputEnabled = function()
{
	return false;
};
oFF.QFunctionalVariable.prototype.isInterval = function()
{
	return this.m_isInterval;
};
oFF.QFunctionalVariable.prototype.isUserInputRequired = function()
{
	return this.m_userInputRequired;
};
oFF.QFunctionalVariable.prototype.newVariableValue = function()
{
	return oFF.QFactory.createFunctionalVariableValue(this);
};
oFF.QFunctionalVariable.prototype.releaseObject = function()
{
	oFF.QVariable.prototype.releaseObject.call( this );
	this.m_dimension = null;
	this.m_parameters = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_parameters);
};
oFF.QFunctionalVariable.prototype.resetToDefaultValues = function() {};
oFF.QFunctionalVariable.prototype.resultsInMultipleValues = function()
{
	return this.m_multipleValues;
};
oFF.QFunctionalVariable.prototype.setDimension = function(dimension)
{
	this.m_dimension = dimension;
	if (dimension.getKeyField() !== null)
	{
		this.setValueType(dimension.getKeyField().getValueType());
	}
};
oFF.QFunctionalVariable.prototype.setIsInterval = function(isInterval)
{
	this.m_isInterval = isInterval;
};
oFF.QFunctionalVariable.prototype.setParameters = function(parameters)
{
	this.m_parameters = parameters;
};
oFF.QFunctionalVariable.prototype.setResultsInMultipleValues = function(multipleValues)
{
	this.m_multipleValues = multipleValues;
};
oFF.QFunctionalVariable.prototype.setUserInputRequired = function(userInputRequired)
{
	this.m_userInputRequired = userInputRequired;
};
oFF.QFunctionalVariable.prototype.setValueByStringExt = function(value, isManualInput) {};
oFF.QFunctionalVariable.prototype.supportsMultipleValues = function()
{
	return false;
};

oFF.QChartDefinition = function() {};
oFF.QChartDefinition.prototype = new oFF.QVisualizationDefinition();
oFF.QChartDefinition.prototype._ff_c = "QChartDefinition";

oFF.QChartDefinition.create = function(context, parent, name, protocolBindingType, semanticBindingType)
{
	let instance = new oFF.QChartDefinition();
	instance.setupInternal(context, parent, name, protocolBindingType, semanticBindingType);
	return instance;
};
oFF.QChartDefinition.prototype.m_chartSetting = null;
oFF.QChartDefinition.prototype.m_keyFigureDimension = null;
oFF.QChartDefinition.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVisualizationDefinition.prototype.copyFromInternal.call( this , other, flags);
	let origin = other;
	this.m_chartSetting.copyFrom(origin.m_chartSetting, flags);
	if (oFF.notNull(origin.m_keyFigureDimension))
	{
		this.m_keyFigureDimension = this.getQueryModel().getDimensionByName(origin.m_keyFigureDimension.getName());
	}
};
oFF.QChartDefinition.prototype.createRsVisualizationDefinition = function(context, modelComponentBase, name)
{
	this.getOlapEnv().getVisualizationTemplateManager();
	let rsDefinition = oFF.QChartDefinition.create(context, modelComponentBase, name, this.getProtocolBindingType(), this.getSemanticBindingType());
	rsDefinition.copyFrom(this, null);
	rsDefinition.acquireVariableInfoIfNeeded(this.getQueryModel().getVisualizationManager());
	rsDefinition.acquireVariableInfoIfNeeded(this.getOlapEnv().getVisualizationTemplateManager());
	let localStyle = rsDefinition.getChartSetting().getChartStyle();
	let chartSetting = this.getChartSetting();
	oFF.XCollectionUtils.forEach(chartSetting.getLinkedStylesOrdered(), (lso) => {
		localStyle.mergeWithDefaults(rsDefinition, lso);
	});
	localStyle.mergeWithDefaults(rsDefinition, chartSetting.getFallbackStyle());
	rsDefinition.tagAllMatchingStyleCriteria();
	return rsDefinition;
};
oFF.QChartDefinition.prototype.getChartSetting = function()
{
	return this.m_chartSetting;
};
oFF.QChartDefinition.prototype.getKeyFigureDimension = function()
{
	if (oFF.isNull(this.m_keyFigureDimension))
	{
		if (this.getQueryModel().getAccountDimension() !== null)
		{
			this.m_keyFigureDimension = this.getQueryModel().getAccountDimension();
		}
		else
		{
			this.m_keyFigureDimension = this.getQueryModel().getMeasureDimension();
		}
	}
	return this.m_keyFigureDimension;
};
oFF.QChartDefinition.prototype.getLeadingAxis = function()
{
	return oFF.AxisType.ROWS;
};
oFF.QChartDefinition.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.VISUALIZATION_CHART_DEFINITION;
};
oFF.QChartDefinition.prototype.getRelevantDataPointPaths = function()
{
	let elementMap = oFF.XHashMapByString.create();
	oFF.XCollectionUtils.forEach(this.getChartSetting().getChartStyle().getDataPointStyles(), (dps) => {
		this.mergeDataPointElements(elementMap, dps);
	});
	oFF.XCollectionUtils.forEach(this.getDatapointVariableContainers(), (dps) => {
		this.mergeDataPointElements(elementMap, dps);
	});
	return elementMap.getValuesAsReadOnlyList();
};
oFF.QChartDefinition.prototype.getStructuresToRemap = function()
{
	let list = oFF.XList.create();
	list.add(this.getKeyFigureDimension());
	return list;
};
oFF.QChartDefinition.prototype.isSingleMeasureChartType = function()
{
	return this.m_chartSetting.getChartType().isSingleMeasureChartType();
};
oFF.QChartDefinition.prototype.releaseObject = function()
{
	this.m_chartSetting = oFF.XObjectExt.release(this.m_chartSetting);
	this.m_keyFigureDimension = null;
	oFF.QVisualizationDefinition.prototype.releaseObject.call( this );
};
oFF.QChartDefinition.prototype.setKeyFigureDimension = function(keyFigureDimension)
{
	this.m_keyFigureDimension = keyFigureDimension;
};
oFF.QChartDefinition.prototype.setupInternal = function(context, parent, name, protocolBindingType, semanticBindingType)
{
	oFF.QVisualizationDefinition.prototype.setupInternal.call( this , context, parent, name, protocolBindingType, semanticBindingType);
	this.setupModelComponent(context, parent);
	this.setName(name);
	this.m_chartSetting = oFF.QChartSetting.create(context, this);
};
oFF.QChartDefinition.prototype.validate = function()
{
	return false;
};
oFF.QChartDefinition.prototype.validateByChangingQueryModel = function()
{
	return false;
};
oFF.QChartDefinition.prototype.validateByResettingVisualization = function()
{
	return false;
};

oFF.QChartSetting = function() {};
oFF.QChartSetting.prototype = new oFF.QTypedValueSelection();
oFF.QChartSetting.prototype._ff_c = "QChartSetting";

oFF.QChartSetting.COLOR_SCHEME_KEY_CATEGORY = "ColorSchemeCategoryStyling";
oFF.QChartSetting.COLOR_SCHEME_KEY_DEFAULT = "ColorSchemeDefaultStyling";
oFF.QChartSetting.COLOR_SCHEME_KEY_DISTRIBUTION = "ColorSchemeDistributionStyling";
oFF.QChartSetting.COLOR_SCHEME_KEY_GROUPING = "ColorSchemeGroupingStyling";
oFF.QChartSetting.MAX_COLOR = "MaxColor";
oFF.QChartSetting.MIN_COLOR = "MinColor";
oFF.QChartSetting.V_COLOR_1 = "#488CCC";
oFF.QChartSetting.V_COLOR_10 = "#DC4180";
oFF.QChartSetting.V_COLOR_11 = "#809E57";
oFF.QChartSetting.V_COLOR_12 = "#7c7c7c";
oFF.QChartSetting.V_COLOR_13 = "#6c6c6c";
oFF.QChartSetting.V_COLOR_14 = "#222a35";
oFF.QChartSetting.V_COLOR_15 = "#000000";
oFF.QChartSetting.V_COLOR_16 = "#4a3f93";
oFF.QChartSetting.V_COLOR_17 = "#c9024a";
oFF.QChartSetting.V_COLOR_18 = "#37962d";
oFF.QChartSetting.V_COLOR_2 = "#D87D4F";
oFF.QChartSetting.V_COLOR_3 = "#52A37D";
oFF.QChartSetting.V_COLOR_4 = "#E467AA";
oFF.QChartSetting.V_COLOR_5 = "#A36FC9";
oFF.QChartSetting.V_COLOR_6 = "#12A2AF";
oFF.QChartSetting.V_COLOR_7 = "#E05C64";
oFF.QChartSetting.V_COLOR_8 = "#CC3DA8";
oFF.QChartSetting.V_COLOR_9 = "#636CDA";
oFF.QChartSetting.create = function(context, parent)
{
	let instance = new oFF.QChartSetting();
	instance.setupModelComponent(context, parent);
	instance.setupTypedValueSelection();
	instance.m_chartStyle = oFF.QChartStyle.create(context, instance);
	let invalidator = () => {
		instance.invalidateVisualizationContainer();
	};
	instance.m_templateLinker = oFF.QVisualizationTemplateLinker.create(instance, invalidator, invalidator);
	instance.m_chartType = oFF.ChartType.BAR_COLUMN;
	instance.m_categoryDimensionSelection = oFF.QDimensionVisualizationSelection.createQDimensionSelection(context, instance, () => {
		return instance.getDimensionNamesForAxisSelection(instance.getChartType().getFirstCategoryAxisSelection());
	}, () => {
		return oFF.XBooleanValue.create(!instance.getCategoryDimensionSelection().hasDimensionsEffectively() && instance.getChartType().isTypeOf(oFF.ChartType.ABSTRACT_SERIES));
	});
	instance.m_categoryDimensionSelection.setColorSchemeKey(oFF.QChartSetting.COLOR_SCHEME_KEY_CATEGORY);
	instance.m_groupingDimensionSelection = oFF.QDimensionVisualizationSelection.createQDimensionSelection(context, instance, () => {
		return instance.getDimensionNamesForAxisSelection(instance.getChartType().getGroupingCategoryAxisSelection());
	}, () => {
		return oFF.XBooleanValue.create(instance.getCategoryDimensionSelection().hasDimensionsEffectively() && instance.getChartType().getGroupingCategoryContainsMeasure());
	});
	instance.m_groupingDimensionSelection.setColorSchemeKey(oFF.QChartSetting.COLOR_SCHEME_KEY_GROUPING);
	instance.m_distributionDimensionSelection = oFF.QDimensionVisualizationSelection.createQDimensionSelection(context, instance, () => {
		return instance.getDimensionNamesForAxisSelection(instance.getChartType().getDistributionCategoryAxisSelection());
	}, () => {
		return oFF.XBooleanValue.create(instance.getCategoryDimensionSelection().hasDimensionsEffectively() && instance.getChartType().getDistributionCategoryContainsMeasure());
	});
	instance.m_distributionDimensionSelection.setColorSchemeKey(oFF.QChartSetting.COLOR_SCHEME_KEY_DISTRIBUTION);
	instance.m_defaultStylingDimensionSelection = oFF.QDimensionVisualizationSelection.createQDimensionSelection(context, instance, () => {
		return instance.getDimensionNamesForAxisSelection(instance.getChartType().getDefaultStylingAxisSelection());
	}, () => {
		return oFF.XBooleanValue.create(true);
	});
	instance.m_defaultStylingDimensionSelection.setColorSchemeKey(oFF.QChartSetting.COLOR_SCHEME_KEY_DEFAULT);
	instance.m_stylingDimensionSelections = oFF.XHashMapByString.create();
	instance.m_minColor = oFF.QChartPointStyle.create(context, instance, oFF.QChartSetting.MIN_COLOR, oFF.QChartSetting.MIN_COLOR);
	instance.m_maxColor = oFF.QChartPointStyle.create(context, instance, oFF.QChartSetting.MAX_COLOR, oFF.QChartSetting.MAX_COLOR);
	return instance;
};
oFF.QChartSetting.prototype.m_categoryDimensionSelection = null;
oFF.QChartSetting.prototype.m_chartOrientation = null;
oFF.QChartSetting.prototype.m_chartStackingType = null;
oFF.QChartSetting.prototype.m_chartStyle = null;
oFF.QChartSetting.prototype.m_chartType = null;
oFF.QChartSetting.prototype.m_chartType2 = null;
oFF.QChartSetting.prototype.m_defaultStylingDimensionSelection = null;
oFF.QChartSetting.prototype.m_distributionDimensionSelection = null;
oFF.QChartSetting.prototype.m_groupingDimensionSelection = null;
oFF.QChartSetting.prototype.m_hasTitleExpanded = false;
oFF.QChartSetting.prototype.m_maxColor = null;
oFF.QChartSetting.prototype.m_minColor = null;
oFF.QChartSetting.prototype.m_polar = false;
oFF.QChartSetting.prototype.m_serializeLinkedStyles = false;
oFF.QChartSetting.prototype.m_stylingDimensionSelections = null;
oFF.QChartSetting.prototype.m_subTitle = null;
oFF.QChartSetting.prototype.m_templateLinker = null;
oFF.QChartSetting.prototype.m_timeSeries = false;
oFF.QChartSetting.prototype.m_title = null;
oFF.QChartSetting.prototype.m_toastPresenter = null;
oFF.QChartSetting.prototype.m_useColorAxis = false;
oFF.QChartSetting.prototype.m_yAxisOnSameSide = false;
oFF.QChartSetting.prototype.addMessageToast = function(dimensionMembers, firstMemberFromRS)
{
	let listOfMembersRemoved = oFF.XStream.of(dimensionMembers).filter((node) => {
		return !oFF.XString.isEqual(node.getDimensionMember().getName(), firstMemberFromRS.getName());
	}).mapToString((node2) => {
		return node2.getDimensionMember().getText();
	}).collect(oFF.XStreamCollector.toList());
	let listOfRemovedMemberNames = oFF.XStringBuffer.create();
	oFF.XCollectionUtils.forEach(listOfMembersRemoved, (memRemoved) => {
		let memberName = memRemoved.getString();
		let concatWithSpace = listOfRemovedMemberNames.length() === 0 ? memberName : oFF.XStringUtils.concatenate2(", ", memberName);
		listOfRemovedMemberNames.append(concatWithSpace);
	});
	let message = listOfRemovedMemberNames.toString();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(message) && oFF.notNull(this.m_toastPresenter))
	{
		this.m_toastPresenter(this, message);
	}
};
oFF.QChartSetting.prototype.addStructureToFeed = function(context, dimension, primaryValueFeed, secondaryValueFeed)
{
	this.addStructureToFeedInternal(context, dimension, primaryValueFeed, secondaryValueFeed);
	this.getChartDefinition().invalidateVisualizationContainer();
};
oFF.QChartSetting.prototype.addStructureToFeedInternal = function(context, dimension, primaryValueFeed, secondaryValueFeed)
{
	if (dimension.getDimensionType() === oFF.DimensionType.ACCOUNT)
	{
		let accountMemberPromise = dimension.getMemberManager().getMembers();
		let visibleMembers2 = accountMemberPromise.then((accountMembers) => {
			let visibleMembers = this.getQueryManager().getConvenienceCommands().getVisibleMembers(dimension, accountMembers);
			return oFF.XStream.of(accountMembers).filter((a2) => {
				return visibleMembers.contains(a2.getName());
			}).collect(oFF.XStreamCollector.toListOfNameObject());
		}, null);
		visibleMembers2.then(this.addVisibleMeasuresToFeed(context, dimension, primaryValueFeed, secondaryValueFeed), null);
	}
	else
	{
		let visibleMembersInOrder = this.getQueryManager().getConvenienceCommands().getVisibleMembersInResultSetOrder(dimension);
		visibleMembersInOrder.then(this.addVisibleMeasuresToFeed(context, dimension, primaryValueFeed, secondaryValueFeed), null);
	}
};
oFF.QChartSetting.prototype.addVisibleMeasuresToFeed = function(context, dimension, primaryValueFeed, secondaryValueFeed)
{
	let cmds = this.getQueryManager().getConvenienceCommands();
	return (promiseResult) => {
		let dimensionMembers = oFF.XCollectionUtils.createListOfNameObjectCopy(promiseResult);
		this.clearoutDateTimeBasedMeasures(dimension, dimensionMembers);
		if (primaryValueFeed === oFF.VisualizationValueType.VALUE)
		{
			this.removeInvisbleMembersFromFeeds(dimensionMembers, dimension, primaryValueFeed, secondaryValueFeed);
		}
		if (this.m_chartType.isSingleMeasureChartType() && oFF.notNull(primaryValueFeed))
		{
			this.clearTypedValueSelectionsForTypeInternal(oFF.VisualizationValueType.SIZE);
			if (oFF.XCollectionUtils.hasElements(dimensionMembers))
			{
				let firstMemberFromRS = dimensionMembers.get(0).getDimensionMember();
				let measureDimension = firstMemberFromRS.getDimension();
				if (!this.hasTypedValueSelectionsForTypeForMember(primaryValueFeed, firstMemberFromRS))
				{
					this.addTypedValueSelectionInternal(primaryValueFeed, oFF.QKeyFigureSelection.create(context, firstMemberFromRS, this, primaryValueFeed));
				}
				let measureCartesianList = this.getQueryModel().getFilter().getDynamicFilter().getCartesianList(measureDimension);
				let memberNames = oFF.QFilterUtil.getMemberNamesFromFilter(measureCartesianList, measureDimension.getName());
				if (primaryValueFeed === oFF.VisualizationValueType.SIZE && (memberNames.size() > 1 || !memberNames.contains(firstMemberFromRS.getName())))
				{
					this.addMessageToast(dimensionMembers, firstMemberFromRS);
					cmds.clearFiltersByDimension(measureDimension);
					cmds.addSingleMemberFilter(oFF.FilterLayer.DYNAMIC, measureDimension.getDimensionType(), null, firstMemberFromRS.getName(), oFF.ComparisonOperator.EQUAL);
				}
			}
		}
		else
		{
			let primaryFields = this.getTypedValueSelectionsForType(primaryValueFeed);
			let secondaryFields = null;
			if (oFF.notNull(secondaryValueFeed))
			{
				secondaryFields = this.getTypedValueSelectionsForType(secondaryValueFeed);
			}
			for (let k = 0; k < dimensionMembers.size(); k++)
			{
				let structureMember = dimensionMembers.get(k).getDimensionMember();
				let presentInList1 = oFF.XStream.of(primaryFields).anyMatch((kfSelection) => {
					return oFF.XString.isEqual(kfSelection.getName(), structureMember.getName());
				});
				let presentInList2 = false;
				if (oFF.XCollectionUtils.hasElements(secondaryFields))
				{
					presentInList2 = oFF.XStream.of(secondaryFields).anyMatch((kfSelection2) => {
						return oFF.XString.isEqual(kfSelection2.getName(), structureMember.getName());
					});
				}
				if (!presentInList1 && !presentInList2)
				{
					this.addTypedValueSelectionInternal(primaryValueFeed, oFF.QKeyFigureSelection.create(context, structureMember, this, primaryValueFeed));
				}
			}
		}
		return null;
	};
};
oFF.QChartSetting.prototype.areYAxisOnSameSide = function()
{
	return this.m_yAxisOnSameSide;
};
oFF.QChartSetting.prototype.axisSelectionStartsWith = function(dimensionNames, axis)
{
	let result = false;
	if (dimensionNames.size() > axis.size())
	{
		result = true;
		for (let i = 0; i < axis.size(); i++)
		{
			if (!oFF.XString.isEqual(dimensionNames.get(i), axis.get(i).getName()))
			{
				result = false;
				break;
			}
		}
	}
	return result;
};
oFF.QChartSetting.prototype.categoryDimensionSelectionEffectivelyIncludesKeyFigureDimension = function()
{
	return this.m_categoryDimensionSelection.shouldIncludeKeyFigureDimension();
};
oFF.QChartSetting.prototype.clearStylingDimensionSelection = function(key)
{
	this.m_stylingDimensionSelections.put(key, null);
};
oFF.QChartSetting.prototype.clearoutDateTimeBasedMeasures = function(dimension, nodes)
{
	if (dimension.isStructure())
	{
		let structureMembers = dimension.getAllStructureMembers();
		oFF.XCollectionUtils.removeIf(nodes, (node) => {
			let structureMember = structureMembers.getByKey(node.getDimensionMember().getName());
			return structureMember.getCellValueType() !== null && structureMember.getCellValueType().isDateTime();
		});
	}
};
oFF.QChartSetting.prototype.copyFromInternal = function(other, flags)
{
	oFF.QTypedValueSelection.prototype.copyFromInternal.call( this , other, flags);
	let origin = other;
	this.m_polar = origin.m_polar;
	this.m_timeSeries = origin.m_timeSeries;
	this.m_yAxisOnSameSide = origin.m_yAxisOnSameSide;
	this.m_chartType = origin.m_chartType;
	this.m_chartType2 = origin.m_chartType2;
	this.m_chartOrientation = origin.m_chartOrientation;
	this.m_chartStackingType = origin.m_chartStackingType;
	this.m_title = origin.m_title;
	this.m_hasTitleExpanded = origin.m_hasTitleExpanded;
	this.m_subTitle = origin.m_subTitle;
	this.m_templateLinker.copyFrom(origin.m_templateLinker, flags);
	this.m_serializeLinkedStyles = origin.m_serializeLinkedStyles;
	this.m_chartStyle.copyFrom(origin.m_chartStyle, flags);
	this.m_categoryDimensionSelection.copyFrom(origin.m_categoryDimensionSelection, flags);
	this.m_groupingDimensionSelection.copyFrom(origin.m_groupingDimensionSelection, flags);
	this.m_distributionDimensionSelection.copyFrom(origin.m_distributionDimensionSelection, flags);
	this.m_defaultStylingDimensionSelection.copyFrom(origin.m_defaultStylingDimensionSelection, flags);
	this.m_minColor.copyFrom(origin.m_minColor, flags);
	this.m_maxColor.copyFrom(origin.m_maxColor, flags);
	this.m_useColorAxis = origin.m_useColorAxis;
	oFF.XCollectionUtils.forEach(origin.getStylingDimensionKeys(), (sdk) => {
		this.getOrCreateStylingDimensionSelection(sdk).copyFrom(origin.getOrCreateStylingDimensionSelection(sdk), flags);
	});
};
oFF.QChartSetting.prototype.distributionDimensionSelectionEffectivelyIncludesKeyFigureDimension = function()
{
	return !this.m_categoryDimensionSelection.shouldIncludeKeyFigureDimension() && !this.m_groupingDimensionSelection.shouldIncludeKeyFigureDimension() && this.m_distributionDimensionSelection.shouldIncludeKeyFigureDimension();
};
oFF.QChartSetting.prototype.enforceDrillForDimensionSelection = function()
{
	if (!this.isDrillCompatibleToDimensionSelection())
	{
		let rowAxis = this.getQueryModel().getRowsAxis();
		let columnAxis = this.getQueryModel().getColumnsAxis();
		rowAxis.clear();
		oFF.XCollectionUtils.forEach(this.m_categoryDimensionSelection.getDimensions(), (cd) => {
			rowAxis.add(cd);
		});
		columnAxis.clear();
		oFF.XCollectionUtils.forEach(this.m_groupingDimensionSelection.getDimensions(), (gd) => {
			columnAxis.add(gd);
		});
		oFF.XCollectionUtils.forEach(this.m_distributionDimensionSelection.getDimensions(), (dd) => {
			columnAxis.add(dd);
		});
		columnAxis.add(this.getChartDefinition().getKeyFigureDimension());
		this.invalidateVisualizationContainer();
	}
};
oFF.QChartSetting.prototype.getCategoryDimensionSelection = function()
{
	return this.m_categoryDimensionSelection;
};
oFF.QChartSetting.prototype.getChartDefinition = function()
{
	return this.getParent();
};
oFF.QChartSetting.prototype.getChartOrientation = function()
{
	return this.m_chartOrientation;
};
oFF.QChartSetting.prototype.getChartStackingType = function()
{
	return this.m_chartStackingType;
};
oFF.QChartSetting.prototype.getChartStyle = function()
{
	return this.m_chartStyle;
};
oFF.QChartSetting.prototype.getChartType = function()
{
	return this.m_chartType;
};
oFF.QChartSetting.prototype.getChartType2 = function()
{
	return this.m_chartType2;
};
oFF.QChartSetting.prototype.getColorScheme = function()
{
	return this.getChartStyle().getOrCreateChartColorScheme(this.getDefaultStylingDimensionSelection().getColorSchemeKey());
};
oFF.QChartSetting.prototype.getDefaultStylingDimensionSelection = function()
{
	return this.m_defaultStylingDimensionSelection;
};
oFF.QChartSetting.prototype.getDimensionNamesForAxisSelection = function(axisSelection)
{
	let dimList = oFF.XList.create();
	if (axisSelection === oFF.ChartDefaultAxisSelection.COLUMNS)
	{
		dimList.addAll(this.getQueryModel().getAxis(oFF.AxisType.COLUMNS));
	}
	else if (axisSelection === oFF.ChartDefaultAxisSelection.ROWS)
	{
		dimList.addAll(this.getQueryModel().getAxis(oFF.AxisType.ROWS));
	}
	else if (axisSelection === oFF.ChartDefaultAxisSelection.BOTH)
	{
		dimList.addAll(this.getQueryModel().getAxis(oFF.AxisType.ROWS));
		dimList.addAll(this.getQueryModel().getAxis(oFF.AxisType.COLUMNS));
	}
	return oFF.XStream.of(dimList).filter((dim) => {
		return dim !== this.getChartDefinition().getKeyFigureDimension();
	}).collect(oFF.XStreamCollector.toListOfString((dim) => {
		return dim.getName();
	}));
};
oFF.QChartSetting.prototype.getDistributionDimensionSelection = function()
{
	return this.m_distributionDimensionSelection;
};
oFF.QChartSetting.prototype.getEffectiveLinkedDefinitionName = function(linkDomain)
{
	return oFF.QVisualizationTemplateLinker.getEffectiveLinkedDefinitionName(linkDomain, this.getTemplateLinker(), this.getQueryModel().getVisualizationManager().getChartTemplateLinker(), this.getOlapEnv().getVisualizationTemplateManager().getChartTemplates());
};
oFF.QChartSetting.prototype.getFallbackStyle = function()
{
	let fallbackStyle = oFF.QChartStyle.create(this.getContext(), null);
	let defaultColorScheme = fallbackStyle.getOrCreateChartColorScheme(oFF.QChartSetting.COLOR_SCHEME_KEY_DEFAULT);
	defaultColorScheme.addColor(oFF.QChartSetting.V_COLOR_1);
	defaultColorScheme.addColor(oFF.QChartSetting.V_COLOR_2);
	defaultColorScheme.addColor(oFF.QChartSetting.V_COLOR_3);
	defaultColorScheme.addColor(oFF.QChartSetting.V_COLOR_4);
	defaultColorScheme.addColor(oFF.QChartSetting.V_COLOR_5);
	defaultColorScheme.addColor(oFF.QChartSetting.V_COLOR_6);
	defaultColorScheme.addColor(oFF.QChartSetting.V_COLOR_7);
	defaultColorScheme.addColor(oFF.QChartSetting.V_COLOR_8);
	defaultColorScheme.addColor(oFF.QChartSetting.V_COLOR_9);
	defaultColorScheme.addColor(oFF.QChartSetting.V_COLOR_10);
	defaultColorScheme.addColor(oFF.QChartSetting.V_COLOR_11);
	defaultColorScheme.addColor(oFF.QChartSetting.V_COLOR_12);
	defaultColorScheme.addColor(oFF.QChartSetting.V_COLOR_13);
	defaultColorScheme.addColor(oFF.QChartSetting.V_COLOR_14);
	defaultColorScheme.addColor(oFF.QChartSetting.V_COLOR_15);
	defaultColorScheme.addColor(oFF.QChartSetting.V_COLOR_16);
	defaultColorScheme.addColor(oFF.QChartSetting.V_COLOR_17);
	defaultColorScheme.addColor(oFF.QChartSetting.V_COLOR_18);
	return fallbackStyle;
};
oFF.QChartSetting.prototype.getGroupingDimensionSelection = function()
{
	return this.m_groupingDimensionSelection;
};
oFF.QChartSetting.prototype.getLinkedStylesOrdered = function()
{
	return oFF.QVisualizationTemplateLinker.getLinkedStylesOrdered(this.m_templateLinker, this.getQueryModel().getVisualizationManager().getChartTemplateLinker(), this.getOlapEnv().getVisualizationTemplateManager().getChartTemplates());
};
oFF.QChartSetting.prototype.getMaxColor = function()
{
	return this.m_maxColor;
};
oFF.QChartSetting.prototype.getMinColor = function()
{
	return this.m_minColor;
};
oFF.QChartSetting.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.VISUALIZATION_CHART_SETTING;
};
oFF.QChartSetting.prototype.getOrCreateStylingDimensionSelection = function(key)
{
	if (!this.m_stylingDimensionSelections.containsKey(key))
	{
		this.m_stylingDimensionSelections.put(key, oFF.QDimensionVisualizationSelection.createQDimensionSelection(this.getContext(), this, null, null));
	}
	return this.m_stylingDimensionSelections.getByKey(key);
};
oFF.QChartSetting.prototype.getStylingDimensionKeys = function()
{
	return this.m_stylingDimensionSelections.getKeysAsReadOnlyList();
};
oFF.QChartSetting.prototype.getStylingDimensionSelection = function(key)
{
	return this.m_stylingDimensionSelections.getByKey(key);
};
oFF.QChartSetting.prototype.getSubTitle = function()
{
	return this.m_subTitle;
};
oFF.QChartSetting.prototype.getTemplateLinker = function()
{
	return this.m_templateLinker;
};
oFF.QChartSetting.prototype.getTitle = function()
{
	return this.m_title;
};
oFF.QChartSetting.prototype.groupingDimensionSelectionEffectivelyIncludesKeyFigureDimension = function()
{
	return !this.m_categoryDimensionSelection.shouldIncludeKeyFigureDimension() && this.m_groupingDimensionSelection.shouldIncludeKeyFigureDimension();
};
oFF.QChartSetting.prototype.hasTitleExpanded = function()
{
	return this.m_hasTitleExpanded;
};
oFF.QChartSetting.prototype.inferDimensionSelectionFromDrill = function(enforce)
{
	this.m_categoryDimensionSelection.inferFromDrill(enforce);
	this.m_groupingDimensionSelection.inferFromDrill(enforce);
	this.m_distributionDimensionSelection.inferFromDrill(enforce);
	this.m_defaultStylingDimensionSelection.inferFromDrill(enforce);
	this.invalidateVisualizationContainer();
};
oFF.QChartSetting.prototype.isDrillCompatibleToDimensionSelection = function()
{
	let dimensionsFromAxis = oFF.XList.create();
	oFF.XCollectionUtils.forEach(this.getQueryModel().getRowsAxis(), (rd) => {
		dimensionsFromAxis.add(rd.getDimension().getName());
	});
	oFF.XCollectionUtils.forEach(this.getQueryModel().getColumnsAxis(), (cd) => {
		dimensionsFromAxis.add(cd.getDimension().getName());
	});
	dimensionsFromAxis.removeElement(this.getChartDefinition().getKeyFigureDimension().getName());
	let dimensionsFromSelection = oFF.XList.create();
	oFF.XCollectionUtils.forEach(this.m_categoryDimensionSelection.getDimensionNames(), (cdn) => {
		dimensionsFromSelection.add(cdn);
	});
	oFF.XCollectionUtils.forEach(this.m_groupingDimensionSelection.getDimensionNames(), (gdn) => {
		dimensionsFromSelection.add(gdn);
	});
	oFF.XCollectionUtils.forEach(this.m_distributionDimensionSelection.getDimensionNames(), (ddn) => {
		dimensionsFromSelection.add(ddn);
	});
	return oFF.XObject.areObjectsEqual(dimensionsFromAxis, dimensionsFromSelection);
};
oFF.QChartSetting.prototype.isLazyLoadPossible = function()
{
	return this.getChartType().isTypeOf(oFF.ChartType.ABSTRACT_SERIES) && this.getChartDefinition().getKeyFigureDimension().getAxisType() === oFF.AxisType.COLUMNS && this.axisSelectionStartsWith(this.m_categoryDimensionSelection.getDimensionNames(), this.getQueryModel().getRowsAxis());
};
oFF.QChartSetting.prototype.isPolar = function()
{
	return this.m_polar;
};
oFF.QChartSetting.prototype.isTimeSeries = function()
{
	return this.m_timeSeries;
};
oFF.QChartSetting.prototype.isUseColorAxis = function()
{
	return this.m_useColorAxis;
};
oFF.QChartSetting.prototype.releaseObject = function()
{
	this.m_chartStyle = oFF.XObjectExt.release(this.m_chartStyle);
	this.m_templateLinker = oFF.XObjectExt.release(this.m_templateLinker);
	this.m_chartType = null;
	this.m_chartType2 = null;
	this.m_defaultStylingDimensionSelection = oFF.XObjectExt.release(this.m_defaultStylingDimensionSelection);
	this.m_categoryDimensionSelection = oFF.XObjectExt.release(this.m_categoryDimensionSelection);
	this.m_groupingDimensionSelection = oFF.XObjectExt.release(this.m_groupingDimensionSelection);
	this.m_distributionDimensionSelection = oFF.XObjectExt.release(this.m_distributionDimensionSelection);
	this.m_minColor = oFF.XObjectExt.release(this.m_minColor);
	this.m_maxColor = oFF.XObjectExt.release(this.m_maxColor);
	oFF.QTypedValueSelection.prototype.releaseObject.call( this );
};
oFF.QChartSetting.prototype.removeInvisbleMembersFromFeeds = function(dimensionMembers, dimension, primaryValueFeed, secondaryValueFeed)
{
	let primaryFeeds = this.getTypedValueSelectionsForType(primaryValueFeed);
	let listToRemove = oFF.XList.create();
	oFF.XStream.of(primaryFeeds).forEach((feed) => {
		let dimensionMember = feed.getDimensionMember();
		let dimensionName = dimensionMember.getDimension().getName();
		if (!dimensionMembers.containsKey(dimensionMember.getName()) && oFF.XString.isEqual(dimensionName, dimension.getName()))
		{
			listToRemove.add(dimensionMember);
		}
	});
	oFF.XCollectionUtils.forEach(listToRemove, (dimMem1) => {
		this.removeTypedValueSelectionForDimensionMember(dimMem1, primaryValueFeed);
	});
	listToRemove.clear();
	if (oFF.notNull(secondaryValueFeed))
	{
		let secondaryFeeds = this.getTypedValueSelectionsForType(secondaryValueFeed);
		oFF.XStream.of(secondaryFeeds).forEach((feed2) => {
			let dimensionMember2 = feed2.getDimensionMember();
			let dimensionName2 = dimensionMember2.getDimension().getName();
			if (!dimensionMembers.containsKey(dimensionMember2.getName()) && oFF.XString.isEqual(dimensionName2, dimension.getName()))
			{
				listToRemove.add(dimensionMember2);
			}
		});
	}
	oFF.XCollectionUtils.forEach(listToRemove, (dimMem2) => {
		this.removeTypedValueSelectionForDimensionMember(dimMem2, secondaryValueFeed);
	});
};
oFF.QChartSetting.prototype.setAreYAxisOnSameSide = function(allowOverlapYAxes)
{
	this.m_yAxisOnSameSide = allowOverlapYAxes;
	this.invalidateVisualizationContainer();
};
oFF.QChartSetting.prototype.setChartOrientation = function(chartOrientation)
{
	this.m_chartOrientation = chartOrientation;
	this.setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_DO_NOT_RAISEEVENTS);
	this.notifyNodeChanged();
	this.resumeEventing();
};
oFF.QChartSetting.prototype.setChartStackingType = function(chartStackingType)
{
	this.m_chartStackingType = chartStackingType;
	this.invalidateVisualizationContainer();
};
oFF.QChartSetting.prototype.setChartType = function(chartType)
{
	this.clearTypedValueSelectionsForType(this.m_chartType.getFeedForQueryModelAxis(oFF.AxisType.ROWS));
	this.m_chartType = chartType;
	if (chartType.isStackingChartType() && this.m_chartStackingType !== oFF.ChartStackingType.PERCENT)
	{
		this.m_chartStackingType = oFF.ChartStackingType.NORMAL;
	}
	this.invalidateVisualizationContainer();
	this.synchronizeChartSetting();
};
oFF.QChartSetting.prototype.setChartType2 = function(chartType2)
{
	this.m_chartType2 = chartType2;
	this.invalidateVisualizationContainer();
};
oFF.QChartSetting.prototype.setColorScheme = function(colorScheme)
{
	if (oFF.notNull(colorScheme))
	{
		this.getChartStyle().getOrCreateChartColorScheme(this.getDefaultStylingDimensionSelection().getColorSchemeKey()).copyFrom(colorScheme, null);
	}
};
oFF.QChartSetting.prototype.setHasTitleExpanded = function(hasTitleExpanded)
{
	this.m_hasTitleExpanded = hasTitleExpanded;
	this.invalidateVisualizationContainer();
};
oFF.QChartSetting.prototype.setPolar = function(polar)
{
	this.m_polar = polar;
};
oFF.QChartSetting.prototype.setSubTitle = function(subTitle)
{
	this.m_subTitle = subTitle;
	this.invalidateVisualizationContainer();
};
oFF.QChartSetting.prototype.setTimeSeries = function(timeSeries)
{
	this.m_timeSeries = timeSeries;
};
oFF.QChartSetting.prototype.setTitle = function(title)
{
	this.m_title = title;
	this.invalidateVisualizationContainer();
};
oFF.QChartSetting.prototype.setToastPresenter = function(toastPresenter)
{
	this.m_toastPresenter = toastPresenter;
};
oFF.QChartSetting.prototype.setUseColorAxis = function(useColorAxis)
{
	this.m_useColorAxis = useColorAxis;
	this.invalidateVisualizationContainer();
};
oFF.QChartSetting.prototype.synchronizeChartSetting = function()
{
	let visualizationManager = this.getQueryModel().getVisualizationManager();
	let currentActiveVisualization = visualizationManager.getCurrentActiveVisualizationDefinition();
	let visualizationIsActive = oFF.isNull(currentActiveVisualization) || currentActiveVisualization === this.getChartDefinition();
	visualizationManager.getViz2QmSynchronizer().processCurrentQMState(this, visualizationIsActive);
};

oFF.QCustomVisualizationDefinition = function() {};
oFF.QCustomVisualizationDefinition.prototype = new oFF.QVisualizationDefinition();
oFF.QCustomVisualizationDefinition.prototype._ff_c = "QCustomVisualizationDefinition";

oFF.QCustomVisualizationDefinition.create = function(context, parent, name, protocolBindingType, semanticBindingType)
{
	let instance = new oFF.QCustomVisualizationDefinition();
	instance.setupInternal(context, parent, name, protocolBindingType, semanticBindingType);
	return instance;
};
oFF.QCustomVisualizationDefinition.prototype.m_visualizationDefinition = null;
oFF.QCustomVisualizationDefinition.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVisualizationDefinition.prototype.copyFromInternal.call( this , other, flags);
	let origin = other;
	this.m_visualizationDefinition = oFF.PrFactory.createStructureDeepCopy(origin.getVisualizationDefinitionStructure());
};
oFF.QCustomVisualizationDefinition.prototype.createRsVisualizationDefinition = function(context, modelComponentBase, name)
{
	let rsDefinition = oFF.QCustomVisualizationDefinition.create(context, modelComponentBase, name, this.getProtocolBindingType(), this.getSemanticBindingType());
	rsDefinition.copyFrom(this, null);
	return rsDefinition;
};
oFF.QCustomVisualizationDefinition.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.VISUALIZATION_CUSTOM_DEFINITION;
};
oFF.QCustomVisualizationDefinition.prototype.getRelevantDataPointPaths = oFF.noSupport;
oFF.QCustomVisualizationDefinition.prototype.getVisualizationDefinitionStructure = function()
{
	return this.m_visualizationDefinition;
};
oFF.QCustomVisualizationDefinition.prototype.releaseObject = function()
{
	this.m_visualizationDefinition = null;
	oFF.QVisualizationDefinition.prototype.releaseObject.call( this );
};
oFF.QCustomVisualizationDefinition.prototype.setVisualizationDefinitionStructure = function(visualizationDefinitionStructure)
{
	this.m_visualizationDefinition = visualizationDefinitionStructure;
};
oFF.QCustomVisualizationDefinition.prototype.setupInternal = function(context, parent, name, protocolBindingType, semanticBindingType)
{
	oFF.QVisualizationDefinition.prototype.setupInternal.call( this , context, parent, name, protocolBindingType, semanticBindingType);
	this.setupModelComponent(context, parent);
	this.setName(name);
};

oFF.QKeyFigureSelection = function() {};
oFF.QKeyFigureSelection.prototype = new oFF.QTypedValueSelection();
oFF.QKeyFigureSelection.prototype._ff_c = "QKeyFigureSelection";

oFF.QKeyFigureSelection.create = function(context, dimensionMember, parent, type)
{
	let instance = new oFF.QKeyFigureSelection();
	instance.setupInternal(context, dimensionMember, parent, type);
	return instance;
};
oFF.QKeyFigureSelection.prototype.m_dimensionMember = null;
oFF.QKeyFigureSelection.prototype.m_style = null;
oFF.QKeyFigureSelection.prototype.m_type = null;
oFF.QKeyFigureSelection.prototype.copyFromInternal = function(other, flags)
{
	oFF.QTypedValueSelection.prototype.copyFromInternal.call( this , other, flags);
	let orig = other;
	let member = orig.getDimensionMember();
	this.m_dimensionMember = this.getQueryModel().getDimensionByName(member.getDimension().getName()).getDimensionMember(member.getName());
	this.m_style.copyFrom(orig.m_style, flags);
};
oFF.QKeyFigureSelection.prototype.getChartDefinition = function()
{
	let parent = this.getParent();
	while (oFF.notNull(parent) && parent.getOlapComponentType() !== oFF.OlapComponentType.VISUALIZATION_CHART_SETTING)
	{
		parent = parent.getParent();
	}
	return oFF.isNull(parent) ? null : parent.getChartDefinition();
};
oFF.QKeyFigureSelection.prototype.getDimensionMember = function()
{
	return this.m_dimensionMember;
};
oFF.QKeyFigureSelection.prototype.getName = function()
{
	if (oFF.notNull(this.m_dimensionMember))
	{
		return this.m_dimensionMember.getName();
	}
	return null;
};
oFF.QKeyFigureSelection.prototype.getOlapComponentType = function()
{
	return this.getType();
};
oFF.QKeyFigureSelection.prototype.getStyle = function()
{
	return this.m_style;
};
oFF.QKeyFigureSelection.prototype.getText = function()
{
	if (oFF.notNull(this.m_dimensionMember))
	{
		return this.m_dimensionMember.getText();
	}
	return null;
};
oFF.QKeyFigureSelection.prototype.getType = function()
{
	return this.m_type;
};
oFF.QKeyFigureSelection.prototype.setupInternal = function(context, dimensionMember, parent, type)
{
	this.setupModelComponent(context, parent);
	this.setupTypedValueSelection();
	this.m_style = oFF.QChartPointStyle.create(context, this, this.getName(), this.getText());
	this.m_type = type;
	this.m_dimensionMember = dimensionMember;
};

oFF.QTableDefinition = function() {};
oFF.QTableDefinition.prototype = new oFF.QVisualizationDefinition();
oFF.QTableDefinition.prototype._ff_c = "QTableDefinition";

oFF.QTableDefinition.create = function(context, parent, name, protocolBindingType, semanticBindingType)
{
	let instance = new oFF.QTableDefinition();
	instance.setupInternal(context, parent, name, protocolBindingType, semanticBindingType);
	return instance;
};
oFF.QTableDefinition.prototype.m_dataPointStyles = null;
oFF.QTableDefinition.prototype.m_definitionLinker = null;
oFF.QTableDefinition.prototype.m_fixedPixelColumnWidths = null;
oFF.QTableDefinition.prototype.m_fixedPixelRowHeights = null;
oFF.QTableDefinition.prototype.m_formattingStyles = null;
oFF.QTableDefinition.prototype.m_freezeHeaderColumns = null;
oFF.QTableDefinition.prototype.m_freezeHeaderRows = null;
oFF.QTableDefinition.prototype.m_freezeUpToColumns = 0;
oFF.QTableDefinition.prototype.m_freezeUpToRows = 0;
oFF.QTableDefinition.prototype.m_headerColor = null;
oFF.QTableDefinition.prototype.m_highlightAreas = null;
oFF.QTableDefinition.prototype.m_layeredRectangularStyles = null;
oFF.QTableDefinition.prototype.m_scopedStyles = null;
oFF.QTableDefinition.prototype.m_serializeLinkedDefinitions = false;
oFF.QTableDefinition.prototype.m_showCoordinateHeader = null;
oFF.QTableDefinition.prototype.m_showDimensionTitles = null;
oFF.QTableDefinition.prototype.m_showFreezeLines = null;
oFF.QTableDefinition.prototype.m_showGrid = null;
oFF.QTableDefinition.prototype.m_showHyperlinks = null;
oFF.QTableDefinition.prototype.m_stripeDataColumns = null;
oFF.QTableDefinition.prototype.m_stripeDataRows = null;
oFF.QTableDefinition.prototype.m_tableHeaderCompactionType = null;
oFF.QTableDefinition.prototype.m_tableMarkups = null;
oFF.QTableDefinition.prototype.m_tableMemberHeaderHandling = null;
oFF.QTableDefinition.prototype.m_totalLevel0Color = null;
oFF.QTableDefinition.prototype.m_totalLevel1Color = null;
oFF.QTableDefinition.prototype.m_totalLevel2Color = null;
oFF.QTableDefinition.prototype.m_totalLevel3Color = null;
oFF.QTableDefinition.prototype.m_totalLevel4Color = null;
oFF.QTableDefinition.prototype.m_totalLevel5Color = null;
oFF.QTableDefinition.prototype.m_totalLevel6Color = null;
oFF.QTableDefinition.prototype.m_viewportPagingSettings = null;
oFF.QTableDefinition.prototype.addDataPointStyle = function(dataPointStyle)
{
	this.m_dataPointStyles.add(dataPointStyle);
	this.markNeedsReapplyFormatting();
};
oFF.QTableDefinition.prototype.addFormattingStyle = function(formattingStyle)
{
	this.m_formattingStyles.add(formattingStyle);
	this.invalidateVisualizationContainer();
	this.markNeedsReapplyFormatting();
};
oFF.QTableDefinition.prototype.addLayeredRectangularStyle = function(layeredRectangularTableStyle)
{
	this.m_layeredRectangularStyles.add(layeredRectangularTableStyle);
	this.invalidateVisualizationContainer();
	this.markNeedsReapplyFormatting();
};
oFF.QTableDefinition.prototype.addNewDataPointStyle = function(name, text)
{
	let newFormat = oFF.QVizDataPointStyle.create(this.getContext(), this, name, text);
	this.m_dataPointStyles.add(newFormat);
	this.invalidateVisualizationContainer();
	this.markNeedsReapplyFormatting();
	return newFormat;
};
oFF.QTableDefinition.prototype.addNewFormattingStyle = function(name, text)
{
	let newFormat = oFF.QVizTableStyle.create(this.getContext(), this, name, text);
	this.m_formattingStyles.add(newFormat);
	this.markNeedsReapplyFormatting();
	return newFormat;
};
oFF.QTableDefinition.prototype.addNewHighlightArea = function()
{
	let newHighlightArea = oFF.QVizHighlightArea.create(this.getContext(), null);
	this.m_highlightAreas.add(newHighlightArea);
	return newHighlightArea;
};
oFF.QTableDefinition.prototype.addNewLayeredRectangularStyle = function(name, text)
{
	let newLayeredStyle = oFF.QVizLayeredRectangularTableStyle.create(this.getContext(), this, name, text);
	this.m_layeredRectangularStyles.add(newLayeredStyle);
	this.invalidateVisualizationContainer();
	this.markNeedsReapplyFormatting();
	return newLayeredStyle;
};
oFF.QTableDefinition.prototype.addNewScopedStyle = function(name, text)
{
	let newScopedStyle = oFF.QVizScopedTableStyle.create(this.getContext(), this, name, text);
	this.m_scopedStyles.add(newScopedStyle);
	this.invalidateVisualizationContainer();
	this.markNeedsReapplyFormatting();
	return newScopedStyle;
};
oFF.QTableDefinition.prototype.addNewTableMarkup = function(name, text)
{
	let newTableMarkup = oFF.QVizTableMarkup.create(this.getContext(), this, name, text);
	this.m_tableMarkups.add(newTableMarkup);
	this.invalidateVisualizationContainer();
	this.markNeedsReapplyFormatting();
	return newTableMarkup;
};
oFF.QTableDefinition.prototype.addScopedStyle = function(scopedStyle)
{
	this.m_scopedStyles.add(scopedStyle);
	this.invalidateVisualizationContainer();
	this.markNeedsReapplyFormatting();
};
oFF.QTableDefinition.prototype.addTableMarkup = function(tableMarkup)
{
	this.m_tableMarkups.add(tableMarkup);
	this.markNeedsReapplyFormatting();
};
oFF.QTableDefinition.prototype.clearDataPointStyles = function()
{
	this.m_dataPointStyles.clear();
	this.invalidateVisualizationContainer();
	this.markNeedsReapplyFormatting();
};
oFF.QTableDefinition.prototype.clearFixedPixelColumnWidths = function()
{
	this.m_fixedPixelColumnWidths.clear();
	this.markNeedsOverallReWrite();
};
oFF.QTableDefinition.prototype.clearFixedPixelRowHeights = function()
{
	this.m_fixedPixelRowHeights.clear();
};
oFF.QTableDefinition.prototype.clearFormattingStyles = function()
{
	this.m_formattingStyles.clear();
	this.invalidateVisualizationContainer();
	this.markNeedsReapplyFormatting();
};
oFF.QTableDefinition.prototype.clearHighlightAreas = function()
{
	this.m_highlightAreas.clear();
};
oFF.QTableDefinition.prototype.clearLayeredRectangularStyles = function()
{
	this.m_layeredRectangularStyles.clear();
	this.invalidateVisualizationContainer();
	this.markNeedsReapplyFormatting();
};
oFF.QTableDefinition.prototype.clearLinkedDefinitionNames = function()
{
	this.m_definitionLinker.clearLinkedDefinitionNames();
};
oFF.QTableDefinition.prototype.clearLinkedDefinitions = function()
{
	this.m_definitionLinker.clearLinkedDefinitions();
	this.invalidateVisualizationContainer();
	this.markNeedsReapplyFormatting();
};
oFF.QTableDefinition.prototype.clearScopedStyles = function()
{
	this.m_scopedStyles.clear();
	this.invalidateVisualizationContainer();
	this.markNeedsReapplyFormatting();
};
oFF.QTableDefinition.prototype.clearTableMarkups = function()
{
	this.m_tableMarkups.clear();
	this.invalidateVisualizationContainer();
	this.markNeedsReapplyFormatting();
};
oFF.QTableDefinition.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVisualizationDefinition.prototype.copyFromInternal.call( this , other, flags);
	let origin = other;
	this.m_viewportPagingSettings.copyFrom(origin.m_viewportPagingSettings, flags);
	this.m_definitionLinker.copyFrom(origin.m_definitionLinker, flags);
	this.m_serializeLinkedDefinitions = origin.m_serializeLinkedDefinitions;
	this.m_tableHeaderCompactionType.copyFrom(origin.m_tableHeaderCompactionType, flags);
	this.m_tableMemberHeaderHandling.copyFrom(origin.m_tableMemberHeaderHandling, flags);
	this.m_freezeHeaderColumns.copyFrom(origin.m_freezeHeaderColumns, flags);
	this.m_freezeHeaderRows.copyFrom(origin.m_freezeHeaderRows, flags);
	this.m_showGrid.copyFrom(origin.m_showGrid, flags);
	this.m_showFreezeLines.copyFrom(origin.m_showFreezeLines, flags);
	this.m_stripeDataColumns.copyFrom(origin.m_stripeDataColumns, flags);
	this.m_stripeDataRows.copyFrom(origin.m_stripeDataRows, flags);
	this.m_showCoordinateHeader.copyFrom(origin.m_showCoordinateHeader, flags);
	this.m_showHyperlinks.copyFrom(origin.m_showHyperlinks, flags);
	this.m_showDimensionTitles.copyFrom(origin.m_showDimensionTitles, flags);
	this.m_freezeUpToColumns = origin.m_freezeUpToColumns;
	this.m_freezeUpToRows = origin.m_freezeUpToRows;
	this.m_headerColor = origin.m_headerColor;
	this.m_totalLevel0Color = origin.m_totalLevel0Color;
	this.m_totalLevel1Color = origin.m_totalLevel1Color;
	this.m_totalLevel2Color = origin.m_totalLevel2Color;
	this.m_totalLevel3Color = origin.m_totalLevel3Color;
	this.m_totalLevel4Color = origin.m_totalLevel4Color;
	this.m_totalLevel5Color = origin.m_totalLevel5Color;
	this.m_totalLevel6Color = origin.m_totalLevel6Color;
	this.m_fixedPixelColumnWidths = origin.m_fixedPixelColumnWidths.createMapCopy();
	this.m_fixedPixelRowHeights = origin.m_fixedPixelRowHeights.createMapCopy();
	let i;
	if (oFF.XCollectionUtils.hasElements(origin.m_formattingStyles))
	{
		this.m_formattingStyles.clear();
		let formattingKeys = origin.m_formattingStyles.getKeysAsIterator();
		while (formattingKeys.hasNext())
		{
			let formattingKey = formattingKeys.next();
			let formattingValue = origin.m_formattingStyles.getByKey(formattingKey);
			let newFormatting = this.addNewFormattingStyle(formattingKey, formattingValue.getText());
			newFormatting.copyFrom(formattingValue, null);
		}
	}
	if (oFF.XCollectionUtils.hasElements(origin.m_scopedStyles))
	{
		this.m_scopedStyles.clear();
		let scopedStyleKeys = origin.m_scopedStyles.getKeysAsIterator();
		while (scopedStyleKeys.hasNext())
		{
			let scopedStyleKey = scopedStyleKeys.next();
			let scopedStyleValue = origin.m_scopedStyles.getByKey(scopedStyleKey);
			let newScopedStyle = this.addNewScopedStyle(scopedStyleKey, scopedStyleValue.getText());
			newScopedStyle.copyFrom(scopedStyleValue, null);
		}
	}
	if (oFF.XCollectionUtils.hasElements(origin.m_layeredRectangularStyles))
	{
		this.m_layeredRectangularStyles.clear();
		let rectStyleKeys = origin.m_layeredRectangularStyles.getKeysAsIterator();
		while (rectStyleKeys.hasNext())
		{
			let rectStyleKey = rectStyleKeys.next();
			let rectStyleValue = origin.m_layeredRectangularStyles.getByKey(rectStyleKey);
			let newRectStyle = this.addNewLayeredRectangularStyle(rectStyleKey, rectStyleValue.getText());
			newRectStyle.copyFrom(rectStyleValue, null);
		}
	}
	if (oFF.XCollectionUtils.hasElements(origin.m_tableMarkups))
	{
		this.m_tableMarkups.clear();
		let markupKeys = origin.m_tableMarkups.getKeysAsIterator();
		while (markupKeys.hasNext())
		{
			let markupKey = markupKeys.next();
			let tableMarkup = origin.m_tableMarkups.getByKey(markupKey);
			let newTableMarkup = this.addNewTableMarkup(markupKey, tableMarkup.getText());
			newTableMarkup.copyFrom(tableMarkup, null);
		}
	}
	if (oFF.XCollectionUtils.hasElements(origin.m_dataPointStyles))
	{
		this.m_dataPointStyles.clear();
		for (i = 0; i < origin.m_dataPointStyles.size(); i++)
		{
			let newDataPointStyle = this.addNewDataPointStyle(null, null);
			newDataPointStyle.copyFrom(origin.m_dataPointStyles.get(i), null);
		}
	}
	this.m_highlightAreas.clear();
	oFF.XCollectionUtils.forEach(origin.m_highlightAreas, (oha) => {
		this.addNewHighlightArea().copyFrom(oha, flags);
	});
};
oFF.QTableDefinition.prototype.createRsVisualizationDefinition = function(context, modelComponentBase, name)
{
	let tableDefinition = oFF.QTableDefinition.create(context, modelComponentBase, name, this.getProtocolBindingType(), this.getSemanticBindingType());
	this.getOlapEnv().getVisualizationTemplateManager();
	tableDefinition.copyFrom(this, null);
	tableDefinition.acquireVariableInfoIfNeeded(this.getQueryModel().getVisualizationManager());
	oFF.XCollectionUtils.forEach(this.getLinkedTableDefinitionsOrdered(), (fallbackDefinition) => {
		tableDefinition.mergeWithDefaults(fallbackDefinition);
	});
	tableDefinition.acquireVariableInfoIfNeeded(this.getOlapEnv().getVisualizationTemplateManager());
	tableDefinition.tagAllMatchingStyleCriteria();
	return tableDefinition;
};
oFF.QTableDefinition.prototype.getActiveTableContainer = function()
{
	return this.getActiveVisualizationContainer();
};
oFF.QTableDefinition.prototype.getAvailableTableContainer = function()
{
	let tableContainer = this.hasValidVisualizationContainer() ? this.getAvailableVisualizationContainer() : null;
	if (oFF.isNull(tableContainer) && this.getSecondaryParents() !== null)
	{
		let secondaryParents = this.getSecondaryParents();
		for (let i = 0; i < secondaryParents.size(); i++)
		{
			let parent = secondaryParents.get(i);
			if (parent.getOlapComponentType() === oFF.OlapComponentType.VISUALIZATION_TABLE_DEFINITION)
			{
				tableContainer = parent.getAvailableVisualizationContainer();
				if (oFF.notNull(tableContainer))
				{
					break;
				}
			}
		}
	}
	return tableContainer;
};
oFF.QTableDefinition.prototype.getDataPointStyleByExceptionName = function(exceptionName)
{
	return oFF.XStream.of(this.m_dataPointStyles).filter((i) => {
		return oFF.XString.isEqual(i.getExceptionName(), exceptionName);
	}).collect(oFF.XStreamCollector.toListOfNameObject());
};
oFF.QTableDefinition.prototype.getDataPointStyleByName = function(name)
{
	return oFF.XStream.of(this.m_dataPointStyles).filter((i) => {
		return oFF.XString.isEqual(i.getName(), name);
	}).collect(oFF.XStreamCollector.toListOfNameObject());
};
oFF.QTableDefinition.prototype.getDataPointStyles = function()
{
	return this.m_dataPointStyles;
};
oFF.QTableDefinition.prototype.getEffectiveLinkedDefinitionName = function(linkDomain)
{
	return oFF.QVisualizationTemplateLinker.getEffectiveLinkedDefinitionName(linkDomain, this.getTemplateLinker(), this.getQueryModel().getVisualizationManager().getTableTemplateLinker(), this.getOlapEnv().getVisualizationTemplateManager().getTableTemplates());
};
oFF.QTableDefinition.prototype.getEffectiveTableHeaderCompactionType = function()
{
	let compactionType = this.m_tableHeaderCompactionType.getResolvedValue(this);
	let effectiveCompactionType = oFF.isNull(compactionType) || compactionType === oFF.TableHeaderCompactionType.DEFAULT ? oFF.TableHeaderCompactionType.PREFERABLY_COLUMN : compactionType;
	if ((oFF.isNull(effectiveCompactionType) || effectiveCompactionType === oFF.TableHeaderCompactionType.PREFERABLY_COLUMN || effectiveCompactionType === oFF.TableHeaderCompactionType.PREFERABLY_ROW) && this.getModelCapabilities().supportsUniqueAxisProperties())
	{
		let queryModel = this.getQueryModel();
		let returnedAxisProperties = oFF.isNull(queryModel) ? null : queryModel.getReturnedUniqueAxisProperties();
		let needsUnitOrScalesRow = oFF.notNull(returnedAxisProperties) && this.returnsUniqueUnitsOrScales(returnedAxisProperties.getEffectiveColumnProperties());
		let needsUnitOrScalesColumn = oFF.notNull(returnedAxisProperties) && this.returnsUniqueUnitsOrScales(returnedAxisProperties.getEffectiveRowProperties());
		if (needsUnitOrScalesRow && needsUnitOrScalesColumn)
		{
			effectiveCompactionType = oFF.TableHeaderCompactionType.NONE;
		}
		else if (needsUnitOrScalesColumn)
		{
			effectiveCompactionType = oFF.TableHeaderCompactionType.NONE;
		}
		else if (needsUnitOrScalesRow)
		{
			effectiveCompactionType = oFF.TableHeaderCompactionType.COLUMN;
		}
	}
	return effectiveCompactionType;
};
oFF.QTableDefinition.prototype.getEffectiveTableMemberHeaderHandling = function()
{
	let value = this.m_tableMemberHeaderHandling.getResolvedValue(this);
	return oFF.isNull(value) || value === oFF.TableMemberHeaderHandling.INHERIT ? oFF.TableMemberHeaderHandling.FIRST_MEMBER : value;
};
oFF.QTableDefinition.prototype.getFixedPixelHeightForRow = function(row)
{
	let result = this.m_fixedPixelRowHeights.getByKey(oFF.XIntegerValue.create(row));
	return oFF.isNull(result) ? -1 : result.getInteger();
};
oFF.QTableDefinition.prototype.getFixedPixelHeightsForRows = function()
{
	return this.m_fixedPixelRowHeights;
};
oFF.QTableDefinition.prototype.getFixedPixelWidthForColumn = function(column)
{
	let result = this.m_fixedPixelColumnWidths.getByKey(oFF.XIntegerValue.create(column));
	return oFF.isNull(result) ? -1 : result.getInteger();
};
oFF.QTableDefinition.prototype.getFixedPixelWidthsForColumns = function()
{
	return this.m_fixedPixelColumnWidths;
};
oFF.QTableDefinition.prototype.getFormattingStyle = function(name)
{
	return this.m_formattingStyles.getByKey(name);
};
oFF.QTableDefinition.prototype.getFormattingStyles = function()
{
	return this.m_formattingStyles;
};
oFF.QTableDefinition.prototype.getFreezeHeaderColumnsRaw = function()
{
	return this.m_freezeHeaderColumns;
};
oFF.QTableDefinition.prototype.getFreezeHeaderRowsRaw = function()
{
	return this.m_freezeHeaderRows;
};
oFF.QTableDefinition.prototype.getFreezeUpToColumn = function()
{
	return this.m_freezeUpToColumns;
};
oFF.QTableDefinition.prototype.getFreezeUpToRow = function()
{
	return this.m_freezeUpToRows;
};
oFF.QTableDefinition.prototype.getHeaderColor = function()
{
	return this.m_headerColor;
};
oFF.QTableDefinition.prototype.getHighlightAreas = function()
{
	return this.m_highlightAreas;
};
oFF.QTableDefinition.prototype.getLayeredRectangularStyle = function(name)
{
	return this.m_layeredRectangularStyles.getByKey(name);
};
oFF.QTableDefinition.prototype.getLayeredRectangularStyles = function()
{
	return this.m_layeredRectangularStyles;
};
oFF.QTableDefinition.prototype.getLinkedDefinition = function(linkId)
{
	return this.m_definitionLinker.getLinkedDefinition(linkId);
};
oFF.QTableDefinition.prototype.getLinkedDefinitionName = function(linkDomain)
{
	return this.m_definitionLinker.getLinkedDefinitionName(linkDomain);
};
oFF.QTableDefinition.prototype.getLinkedDefinitionNames = function()
{
	return this.m_definitionLinker.getLinkedDefinitionNames();
};
oFF.QTableDefinition.prototype.getLinkedDefinitions = function()
{
	return this.m_definitionLinker.getLinkedDefinitions();
};
oFF.QTableDefinition.prototype.getLinkedTableDefinitionsOrdered = function()
{
	return oFF.QVisualizationTemplateLinker.getLinkedStylesOrdered(this.getTemplateLinker(), this.getQueryModel().getVisualizationManager().getTableTemplateLinker(), this.getOlapEnv().getVisualizationTemplateManager().getTableTemplates());
};
oFF.QTableDefinition.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.VISUALIZATION_TABLE_DEFINITION;
};
oFF.QTableDefinition.prototype.getOrCreateFormattingStyle = function(name, text)
{
	if (this.m_formattingStyles.containsKey(name))
	{
		return this.m_formattingStyles.getByKey(name);
	}
	else
	{
		return this.addNewFormattingStyle(name, text);
	}
};
oFF.QTableDefinition.prototype.getOrCreateLayeredRectangularStyle = function(name, text)
{
	if (this.m_layeredRectangularStyles.containsKey(name))
	{
		return this.m_layeredRectangularStyles.getByKey(name);
	}
	else
	{
		return this.addNewLayeredRectangularStyle(name, text);
	}
};
oFF.QTableDefinition.prototype.getOrCreateScopedStyle = function(name, text)
{
	if (this.m_scopedStyles.containsKey(name))
	{
		return this.m_scopedStyles.getByKey(name);
	}
	else
	{
		return this.addNewScopedStyle(name, text);
	}
};
oFF.QTableDefinition.prototype.getOrCreateTableMarkup = function(name, text)
{
	if (this.m_tableMarkups.containsKey(name))
	{
		return this.m_tableMarkups.getByKey(name);
	}
	else
	{
		return this.addNewTableMarkup(name, text);
	}
};
oFF.QTableDefinition.prototype.getRelevantDataPointPaths = function()
{
	let elementMap = oFF.XHashMapByString.create();
	oFF.XCollectionUtils.forEach(this.getDataPointStyles(), (dps) => {
		this.mergeDataPointElements(elementMap, dps);
	});
	oFF.XCollectionUtils.forEach(this.getDatapointVariableContainers(), (dps) => {
		this.mergeDataPointElements(elementMap, dps);
	});
	return elementMap.getValuesAsReadOnlyList();
};
oFF.QTableDefinition.prototype.getScopedStyle = function(name)
{
	return this.m_scopedStyles.getByKey(name);
};
oFF.QTableDefinition.prototype.getScopedStyles = function()
{
	return this.m_scopedStyles;
};
oFF.QTableDefinition.prototype.getShowCoordinateHeaderRaw = function()
{
	return this.m_showCoordinateHeader;
};
oFF.QTableDefinition.prototype.getShowDimensionTitlesRaw = function()
{
	return this.m_showDimensionTitles;
};
oFF.QTableDefinition.prototype.getShowFreezeLinesRaw = function()
{
	return this.m_showFreezeLines;
};
oFF.QTableDefinition.prototype.getShowGridRaw = function()
{
	return this.m_showGrid;
};
oFF.QTableDefinition.prototype.getShowHyperlinksRaw = function()
{
	return this.m_showHyperlinks;
};
oFF.QTableDefinition.prototype.getStripeDataColumnsRaw = function()
{
	return this.m_stripeDataColumns;
};
oFF.QTableDefinition.prototype.getStripeDataRowsRaw = function()
{
	return this.m_stripeDataRows;
};
oFF.QTableDefinition.prototype.getTableHeaderCompactionType = function()
{
	return this.m_tableHeaderCompactionType.getResolvedValue(this);
};
oFF.QTableDefinition.prototype.getTableHeaderCompactionTypeRaw = function()
{
	return this.m_tableHeaderCompactionType;
};
oFF.QTableDefinition.prototype.getTableMarkup = function(name)
{
	return this.m_tableMarkups.getByKey(name);
};
oFF.QTableDefinition.prototype.getTableMarkups = function()
{
	return this.m_tableMarkups;
};
oFF.QTableDefinition.prototype.getTableMemberHeaderHandling = function()
{
	return this.m_tableMemberHeaderHandling.getResolvedValue(this);
};
oFF.QTableDefinition.prototype.getTableMemberHeaderHandlingRaw = function()
{
	return this.m_tableMemberHeaderHandling;
};
oFF.QTableDefinition.prototype.getTableViewportPagingSettings = function()
{
	return this.m_viewportPagingSettings;
};
oFF.QTableDefinition.prototype.getTemplateLinker = function()
{
	return this.m_definitionLinker;
};
oFF.QTableDefinition.prototype.getTotalLevel0Color = function()
{
	return this.m_totalLevel0Color;
};
oFF.QTableDefinition.prototype.getTotalLevel1Color = function()
{
	return this.m_totalLevel1Color;
};
oFF.QTableDefinition.prototype.getTotalLevel2Color = function()
{
	return this.m_totalLevel2Color;
};
oFF.QTableDefinition.prototype.getTotalLevel3Color = function()
{
	return this.m_totalLevel3Color;
};
oFF.QTableDefinition.prototype.getTotalLevel4Color = function()
{
	return this.m_totalLevel4Color;
};
oFF.QTableDefinition.prototype.getTotalLevel5Color = function()
{
	return this.m_totalLevel5Color;
};
oFF.QTableDefinition.prototype.getTotalLevel6Color = function()
{
	return this.m_totalLevel6Color;
};
oFF.QTableDefinition.prototype.hasDataPointStyleByExceptionName = function(exceptionName)
{
	return oFF.XStream.of(this.m_dataPointStyles).anyMatch((i) => {
		return oFF.XString.isEqual(i.getExceptionName(), exceptionName);
	});
};
oFF.QTableDefinition.prototype.hasDataPointStyleByName = function(name)
{
	return oFF.XStream.of(this.m_dataPointStyles).anyMatch((i) => {
		return oFF.XString.isEqual(i.getName(), name);
	});
};
oFF.QTableDefinition.prototype.isColorateDimensionTitles = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.m_headerColor);
};
oFF.QTableDefinition.prototype.isColorateTotals = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.m_totalLevel0Color) && oFF.XStringUtils.isNotNullAndNotEmpty(this.m_totalLevel1Color) && oFF.XStringUtils.isNotNullAndNotEmpty(this.m_totalLevel2Color) && oFF.XStringUtils.isNotNullAndNotEmpty(this.m_totalLevel3Color) && oFF.XStringUtils.isNotNullAndNotEmpty(this.m_totalLevel4Color) && oFF.XStringUtils.isNotNullAndNotEmpty(this.m_totalLevel5Color);
};
oFF.QTableDefinition.prototype.isEffectiveFreezeHeaderColumns = function()
{
	return this.m_freezeHeaderColumns.resolveBoolean(this);
};
oFF.QTableDefinition.prototype.isEffectiveFreezeHeaderRows = function()
{
	return this.m_freezeHeaderRows.resolveBooleanExt(this, true);
};
oFF.QTableDefinition.prototype.isEffectiveShowCoordinateHeader = function()
{
	return this.m_showCoordinateHeader.resolveBoolean(this);
};
oFF.QTableDefinition.prototype.isEffectiveShowDimensionTitles = function()
{
	return this.m_showDimensionTitles.resolveBooleanExt(this, true);
};
oFF.QTableDefinition.prototype.isEffectiveShowFreezeLines = function()
{
	return this.m_showFreezeLines.resolveBooleanExt(this, true);
};
oFF.QTableDefinition.prototype.isEffectiveShowGrid = function()
{
	return this.m_showGrid.resolveBoolean(this);
};
oFF.QTableDefinition.prototype.isEffectiveShowHyperlinks = function()
{
	return this.m_showHyperlinks.resolveBoolean(this);
};
oFF.QTableDefinition.prototype.isEffectiveStripeDataColumns = function()
{
	return this.m_stripeDataColumns.resolveBoolean(this);
};
oFF.QTableDefinition.prototype.isEffectiveStripeDataRows = function()
{
	return this.m_stripeDataRows.resolveBoolean(this);
};
oFF.QTableDefinition.prototype.isFreezeHeaderColumns = function()
{
	return this.m_freezeHeaderColumns.resolveTriStateBoolean(this);
};
oFF.QTableDefinition.prototype.isFreezeHeaderRows = function()
{
	return this.m_freezeHeaderRows.resolveTriStateBoolean(this);
};
oFF.QTableDefinition.prototype.isFreezeHeaders = function()
{
	return this.isEffectiveFreezeHeaderRows() && this.isEffectiveFreezeHeaderColumns();
};
oFF.QTableDefinition.prototype.isMergeRepetitiveMemberCells = function()
{
	return this.m_tableMemberHeaderHandling.getResolvedValue(this) === oFF.TableMemberHeaderHandling.MERGE;
};
oFF.QTableDefinition.prototype.isRepetitiveMemberNames = function()
{
	return this.m_tableMemberHeaderHandling.getResolvedValue(this) === oFF.TableMemberHeaderHandling.REPETITIVE;
};
oFF.QTableDefinition.prototype.isSerializeLinkedDefinitions = function()
{
	return this.m_serializeLinkedDefinitions;
};
oFF.QTableDefinition.prototype.isShowCoordinateHeader = function()
{
	return this.m_showCoordinateHeader.resolveTriStateBoolean(this);
};
oFF.QTableDefinition.prototype.isShowDimensionTitles = function()
{
	return this.m_showDimensionTitles.resolveTriStateBoolean(this);
};
oFF.QTableDefinition.prototype.isShowFreezeLines = function()
{
	return this.m_showFreezeLines.resolveTriStateBoolean(this);
};
oFF.QTableDefinition.prototype.isShowGrid = function()
{
	return this.m_showGrid.resolveTriStateBoolean(this);
};
oFF.QTableDefinition.prototype.isShowHyperlinks = function()
{
	return this.m_showHyperlinks.resolveTriStateBoolean(this);
};
oFF.QTableDefinition.prototype.isStripeDataColumns = function()
{
	return this.m_stripeDataColumns.resolveTriStateBoolean(this);
};
oFF.QTableDefinition.prototype.isStripeDataRows = function()
{
	return this.m_stripeDataRows.resolveTriStateBoolean(this);
};
oFF.QTableDefinition.prototype.markNeedsGeneralPropReWrite = function()
{
	let tableContainer = this.getAvailableTableContainer();
	if (oFF.notNull(tableContainer))
	{
		tableContainer.markNeedsGeneralPropReWrite();
	}
};
oFF.QTableDefinition.prototype.markNeedsOverallReWrite = function()
{
	let tableContainer = this.getAvailableTableContainer();
	if (oFF.notNull(tableContainer))
	{
		tableContainer.markNeedsOverallReWrite();
	}
};
oFF.QTableDefinition.prototype.markNeedsReapplyFormatting = function()
{
	let tableContainer = this.getAvailableTableContainer();
	if (oFF.notNull(tableContainer))
	{
		tableContainer.markNeedsReapplyFormatting();
	}
};
oFF.QTableDefinition.prototype.mergeWithDefaults = function(fallbackDefinition)
{
	this.acquireVariableInfoIfNeeded(fallbackDefinition);
	this.m_tableHeaderCompactionType.acquireOtherValueIfNeeded(this, fallbackDefinition.getTableHeaderCompactionTypeRaw());
	this.m_tableMemberHeaderHandling.acquireOtherValueIfNeeded(this, fallbackDefinition.getTableMemberHeaderHandlingRaw());
	this.m_freezeHeaderColumns.acquireOtherValueIfNeeded(this, fallbackDefinition.getFreezeHeaderColumnsRaw());
	this.m_freezeHeaderRows.acquireOtherValueIfNeeded(this, fallbackDefinition.getFreezeHeaderRowsRaw());
	this.m_showGrid.acquireOtherValueIfNeeded(this, fallbackDefinition.getShowGridRaw());
	this.m_showFreezeLines.acquireOtherValueIfNeeded(this, fallbackDefinition.getShowFreezeLinesRaw());
	this.m_stripeDataColumns.acquireOtherValueIfNeeded(this, fallbackDefinition.getStripeDataColumnsRaw());
	this.m_stripeDataRows.acquireOtherValueIfNeeded(this, fallbackDefinition.getStripeDataRowsRaw());
	this.m_showCoordinateHeader.acquireOtherValueIfNeeded(this, fallbackDefinition.getShowCoordinateHeaderRaw());
	this.m_showHyperlinks.acquireOtherValueIfNeeded(this, fallbackDefinition.getShowHyperlinksRaw());
	this.m_showDimensionTitles.acquireOtherValueIfNeeded(this, fallbackDefinition.getShowDimensionTitlesRaw());
	if (this.m_freezeUpToColumns < 0)
	{
		this.m_freezeUpToColumns = fallbackDefinition.getFreezeUpToColumn();
	}
	if (this.m_freezeUpToRows < 0)
	{
		this.m_freezeUpToRows = fallbackDefinition.getFreezeUpToRow();
	}
	if (oFF.XStringUtils.isNullOrEmpty(this.m_headerColor))
	{
		this.m_headerColor = fallbackDefinition.getHeaderColor();
	}
	if (oFF.XStringUtils.isNullOrEmpty(this.m_totalLevel0Color))
	{
		this.m_totalLevel0Color = fallbackDefinition.getTotalLevel0Color();
	}
	if (oFF.XStringUtils.isNullOrEmpty(this.m_totalLevel1Color))
	{
		this.m_totalLevel1Color = fallbackDefinition.getTotalLevel1Color();
	}
	if (oFF.XStringUtils.isNullOrEmpty(this.m_totalLevel2Color))
	{
		this.m_totalLevel2Color = fallbackDefinition.getTotalLevel2Color();
	}
	if (oFF.XStringUtils.isNullOrEmpty(this.m_totalLevel3Color))
	{
		this.m_totalLevel3Color = fallbackDefinition.getTotalLevel3Color();
	}
	if (oFF.XStringUtils.isNullOrEmpty(this.m_totalLevel4Color))
	{
		this.m_totalLevel4Color = fallbackDefinition.getTotalLevel4Color();
	}
	if (oFF.XStringUtils.isNullOrEmpty(this.m_totalLevel5Color))
	{
		this.m_totalLevel5Color = fallbackDefinition.getTotalLevel5Color();
	}
	if (oFF.XStringUtils.isNullOrEmpty(this.m_totalLevel6Color))
	{
		this.m_totalLevel6Color = fallbackDefinition.getTotalLevel6Color();
	}
	if (oFF.XCollectionUtils.hasElements(fallbackDefinition.getFormattingStyles()))
	{
		oFF.XStream.of(fallbackDefinition.getFormattingStyles().getValuesAsReadOnlyList()).filter((fso) => {
			return !this.m_formattingStyles.containsKey(fso.getName());
		}).forEach((formattingValue) => {
			let newFormatting = this.addNewFormattingStyle(formattingValue.getName(), formattingValue.getText());
			newFormatting.copyFrom(formattingValue, null);
		});
	}
	if (oFF.XCollectionUtils.hasElements(fallbackDefinition.getScopedStyles()))
	{
		oFF.XStream.of(fallbackDefinition.getScopedStyles().getValuesAsReadOnlyList()).filter((sso) => {
			return !this.m_scopedStyles.containsKey(sso.getName());
		}).forEach((scopedStyleValue) => {
			let newScopedStyle = this.addNewScopedStyle(scopedStyleValue.getName(), scopedStyleValue.getText());
			newScopedStyle.copyFrom(scopedStyleValue, null);
		});
	}
	if (oFF.XCollectionUtils.hasElements(fallbackDefinition.getLayeredRectangularStyles()))
	{
		oFF.XStream.of(fallbackDefinition.getLayeredRectangularStyles().getValuesAsReadOnlyList()).filter((lro) => {
			return !this.m_layeredRectangularStyles.containsKey(lro.getName());
		}).forEach((layeredStyleValue) => {
			let newLayeredStyle = this.addNewLayeredRectangularStyle(layeredStyleValue.getName(), layeredStyleValue.getText());
			newLayeredStyle.copyFrom(layeredStyleValue, null);
		});
	}
	if (oFF.XCollectionUtils.hasElements(fallbackDefinition.getTableMarkups()))
	{
		oFF.XStream.of(fallbackDefinition.getTableMarkups().getValuesAsReadOnlyList()).filter((mko) => {
			return !this.m_tableMarkups.containsKey(mko.getName());
		}).forEach((tableMarkup) => {
			let newTableMarkup = this.addNewTableMarkup(tableMarkup.getName(), tableMarkup.getText());
			newTableMarkup.copyFrom(tableMarkup, null);
		});
	}
	if (oFF.XCollectionUtils.hasElements(fallbackDefinition.getDataPointStyles()))
	{
		oFF.XStream.of(fallbackDefinition.getDataPointStyles().getValuesAsReadOnlyList()).filter((dps) => {
			return !this.m_dataPointStyles.containsKey(dps.getName());
		}).forEach((dataPointStyle) => {
			let newDataPointStyle = this.addNewDataPointStyle(dataPointStyle.getName(), dataPointStyle.getText());
			newDataPointStyle.copyFrom(dataPointStyle, null);
		});
	}
};
oFF.QTableDefinition.prototype.putLinkedDefinition = function(linkId, tableDefinition)
{
	this.m_definitionLinker.putLinkedDefinition(linkId, tableDefinition);
	this.invalidateVisualizationContainer();
	this.markNeedsReapplyFormatting();
};
oFF.QTableDefinition.prototype.putLinkedDefinitionName = function(linkDomain, domainLinkId)
{
	this.m_definitionLinker.putLinkedDefinitionName(linkDomain, domainLinkId);
	this.markNeedsReapplyFormatting();
};
oFF.QTableDefinition.prototype.releaseObject = function()
{
	this.m_viewportPagingSettings = oFF.XObjectExt.release(this.m_viewportPagingSettings);
	this.m_definitionLinker = oFF.XObjectExt.release(this.m_definitionLinker);
	this.m_serializeLinkedDefinitions = false;
	this.m_tableHeaderCompactionType = oFF.XObjectExt.release(this.m_tableHeaderCompactionType);
	this.m_freezeHeaderColumns = oFF.XObjectExt.release(this.m_freezeHeaderColumns);
	this.m_freezeHeaderRows = oFF.XObjectExt.release(this.m_freezeHeaderRows);
	this.m_showGrid = oFF.XObjectExt.release(this.m_showGrid);
	this.m_showFreezeLines = oFF.XObjectExt.release(this.m_showFreezeLines);
	this.m_stripeDataColumns = oFF.XObjectExt.release(this.m_stripeDataColumns);
	this.m_stripeDataRows = oFF.XObjectExt.release(this.m_stripeDataRows);
	this.m_showCoordinateHeader = oFF.XObjectExt.release(this.m_showCoordinateHeader);
	this.m_showHyperlinks = oFF.XObjectExt.release(this.m_showHyperlinks);
	this.m_showDimensionTitles = oFF.XObjectExt.release(this.m_showDimensionTitles);
	this.m_tableMemberHeaderHandling = oFF.XObjectExt.release(this.m_tableMemberHeaderHandling);
	this.m_freezeUpToColumns = -1;
	this.m_freezeUpToRows = -1;
	this.m_headerColor = null;
	this.m_totalLevel0Color = null;
	this.m_totalLevel1Color = null;
	this.m_totalLevel2Color = null;
	this.m_totalLevel3Color = null;
	this.m_totalLevel4Color = null;
	this.m_totalLevel5Color = null;
	this.m_totalLevel6Color = null;
	this.m_fixedPixelColumnWidths = oFF.XObjectExt.release(this.m_fixedPixelColumnWidths);
	this.m_fixedPixelRowHeights = oFF.XObjectExt.release(this.m_fixedPixelRowHeights);
	this.m_formattingStyles = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_formattingStyles);
	this.m_scopedStyles = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_scopedStyles);
	this.m_layeredRectangularStyles = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_layeredRectangularStyles);
	this.m_tableMarkups = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_tableMarkups);
	this.m_dataPointStyles = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_dataPointStyles);
	this.m_highlightAreas = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_highlightAreas);
	oFF.QVisualizationDefinition.prototype.releaseObject.call( this );
};
oFF.QTableDefinition.prototype.removeDataPointStyleByName = function(name)
{
	oFF.XCollectionUtils.removeIf(this.m_dataPointStyles, (i) => {
		return oFF.XString.isEqual(i.getName(), name);
	});
};
oFF.QTableDefinition.prototype.removeDataPointStylesByExceptionName = function(exceptionName)
{
	oFF.XCollectionUtils.removeIf(this.m_dataPointStyles, (i) => {
		return oFF.XString.isEqual(i.getExceptionName(), exceptionName);
	});
};
oFF.QTableDefinition.prototype.removeFormattingStyleByName = function(name)
{
	this.m_formattingStyles.removeElement(this.m_formattingStyles.getByKey(name));
	this.markNeedsReapplyFormatting();
};
oFF.QTableDefinition.prototype.removeLayeredRectangularStyleByName = function(name)
{
	this.m_layeredRectangularStyles.removeElement(this.m_layeredRectangularStyles.getByKey(name));
	this.markNeedsReapplyFormatting();
};
oFF.QTableDefinition.prototype.removeScopedStyleByName = function(name)
{
	this.m_scopedStyles.removeElement(this.m_scopedStyles.getByKey(name));
	this.markNeedsReapplyFormatting();
};
oFF.QTableDefinition.prototype.removeTableMarkupsByName = function(name)
{
	this.m_tableMarkups.removeElement(this.m_tableMarkups.getByKey(name));
};
oFF.QTableDefinition.prototype.resetTransientSettings = function()
{
	this.clearHighlightAreas();
};
oFF.QTableDefinition.prototype.returnsUniqueUnitsOrScales = function(properties)
{
	return oFF.XBooleanValue.getBooleanExt(properties.getByKey(oFF.UniqueAxisPropertyType.UNITS), false) || oFF.XBooleanValue.getBooleanExt(properties.getByKey(oFF.UniqueAxisPropertyType.UNIT_INDEX), false) || oFF.XBooleanValue.getBooleanExt(properties.getByKey(oFF.UniqueAxisPropertyType.UNIT_DESCRIPTIONS), false) || oFF.XBooleanValue.getBooleanExt(properties.getByKey(oFF.UniqueAxisPropertyType.UNIT_TYPES), false) || oFF.XBooleanValue.getBooleanExt(properties.getByKey(oFF.UniqueAxisPropertyType.NUMERIC_SHIFT), false);
};
oFF.QTableDefinition.prototype.setColorateDimensionTitles = function(colorateDimensionTitles)
{
	this.m_headerColor = colorateDimensionTitles ? "rgba(173, 212, 216, 1)" : null;
	this.markNeedsOverallReWrite();
};
oFF.QTableDefinition.prototype.setColorateTotals = function(colorateTotals)
{
	this.m_totalLevel5Color = colorateTotals ? "rgba(220,220,150,0.3)" : null;
	this.m_totalLevel4Color = colorateTotals ? "rgba(230,230,150,0.4)" : null;
	this.m_totalLevel3Color = colorateTotals ? "rgba(220,220,135,0.4)" : null;
	this.m_totalLevel2Color = colorateTotals ? "rgba(220,220,135,0.5)" : null;
	this.m_totalLevel1Color = colorateTotals ? "rgba(220,220,220,1)" : null;
	this.m_totalLevel0Color = colorateTotals ? "rgba(204,204,204,1)" : null;
	this.markNeedsOverallReWrite();
};
oFF.QTableDefinition.prototype.setDataPointStyles = function(dataPointStyles)
{
	this.m_dataPointStyles.clear();
	this.m_dataPointStyles.addAll(dataPointStyles);
	this.invalidateVisualizationContainer();
	this.markNeedsReapplyFormatting();
};
oFF.QTableDefinition.prototype.setFixedPixelHeightForRow = function(row, height)
{
	this.m_fixedPixelRowHeights.put(oFF.XIntegerValue.create(row), oFF.XIntegerValue.create(height));
	this.markNeedsOverallReWrite();
};
oFF.QTableDefinition.prototype.setFixedPixelWidthForColumn = function(column, width)
{
	this.m_fixedPixelColumnWidths.put(oFF.XIntegerValue.create(column), oFF.XIntegerValue.create(width));
	this.markNeedsOverallReWrite();
};
oFF.QTableDefinition.prototype.setFreeze = function(freeze)
{
	this.m_freezeHeaderColumns.setBoolean(freeze);
	this.m_freezeHeaderRows.setBoolean(freeze);
	this.markNeedsOverallReWrite();
};
oFF.QTableDefinition.prototype.setFreezeHeaderColumns = function(freezeColumns)
{
	this.m_freezeHeaderColumns.setTriStateBoolean(freezeColumns);
	this.markNeedsOverallReWrite();
};
oFF.QTableDefinition.prototype.setFreezeHeaderRows = function(freezeRows)
{
	this.m_freezeHeaderRows.setTriStateBoolean(freezeRows);
	this.markNeedsOverallReWrite();
};
oFF.QTableDefinition.prototype.setFreezeUpToColumn = function(freezeUpToColumns)
{
	this.m_freezeUpToColumns = freezeUpToColumns;
	this.markNeedsOverallReWrite();
};
oFF.QTableDefinition.prototype.setFreezeUpToRow = function(freezeUpToRows)
{
	this.m_freezeUpToRows = freezeUpToRows;
	this.markNeedsOverallReWrite();
};
oFF.QTableDefinition.prototype.setHeaderColor = function(headerColor)
{
	this.m_headerColor = headerColor;
	this.markNeedsOverallReWrite();
};
oFF.QTableDefinition.prototype.setMergeRepetitiveMemberCells = function(mergeRepetitiveMemberCells)
{
	this.setTableMemberHeaderHandling(mergeRepetitiveMemberCells ? oFF.TableMemberHeaderHandling.MERGE : oFF.TableMemberHeaderHandling.FIRST_MEMBER);
};
oFF.QTableDefinition.prototype.setRepetitiveMemberNames = function(repetitiveMemberNames)
{
	this.setTableMemberHeaderHandling(repetitiveMemberNames ? oFF.TableMemberHeaderHandling.REPETITIVE : oFF.TableMemberHeaderHandling.FIRST_MEMBER);
};
oFF.QTableDefinition.prototype.setSerializeLinkedDefinitions = function(serializeLinkedDefinitions)
{
	this.m_serializeLinkedDefinitions = serializeLinkedDefinitions;
};
oFF.QTableDefinition.prototype.setShowCoordinateHeader = function(showSpreadSheetHeaders)
{
	this.m_showCoordinateHeader.setTriStateBoolean(showSpreadSheetHeaders);
	this.markNeedsGeneralPropReWrite();
};
oFF.QTableDefinition.prototype.setShowDimensionTitles = function(showDimensionTitles)
{
	this.m_showDimensionTitles.setTriStateBoolean(showDimensionTitles);
	this.markNeedsOverallReWrite();
};
oFF.QTableDefinition.prototype.setShowFreezeLines = function(showFreezeLines)
{
	this.m_showFreezeLines.setTriStateBoolean(showFreezeLines);
	this.markNeedsGeneralPropReWrite();
};
oFF.QTableDefinition.prototype.setShowGrid = function(showGrid)
{
	this.m_showGrid.setTriStateBoolean(showGrid);
	this.markNeedsGeneralPropReWrite();
};
oFF.QTableDefinition.prototype.setShowHyperlinks = function(showHyperlinks)
{
	this.m_showHyperlinks.setTriStateBoolean(showHyperlinks);
	this.markNeedsOverallReWrite();
};
oFF.QTableDefinition.prototype.setStripeDataColumns = function(stripeDataColumns)
{
	this.m_stripeDataColumns.setTriStateBoolean(stripeDataColumns);
	this.markNeedsOverallReWrite();
};
oFF.QTableDefinition.prototype.setStripeDataRows = function(stripeDataRows)
{
	this.m_stripeDataRows.setTriStateBoolean(stripeDataRows);
	this.markNeedsOverallReWrite();
};
oFF.QTableDefinition.prototype.setTableHeaderCompactionType = function(tableHeaderCompactionType)
{
	this.m_tableHeaderCompactionType.setFixedValue(tableHeaderCompactionType);
	this.markNeedsOverallReWrite();
};
oFF.QTableDefinition.prototype.setTableMemberHeaderHandling = function(tableMemberHeaderHandling)
{
	this.m_tableMemberHeaderHandling.setFixedValue(tableMemberHeaderHandling);
	this.markNeedsOverallReWrite();
};
oFF.QTableDefinition.prototype.setTotalLevel0Color = function(totalLevel0Color)
{
	this.m_totalLevel0Color = totalLevel0Color;
	this.markNeedsOverallReWrite();
};
oFF.QTableDefinition.prototype.setTotalLevel1Color = function(totalLevel1Color)
{
	this.m_totalLevel1Color = totalLevel1Color;
	this.markNeedsOverallReWrite();
};
oFF.QTableDefinition.prototype.setTotalLevel2Color = function(totalLevel2Color)
{
	this.m_totalLevel2Color = totalLevel2Color;
	this.markNeedsOverallReWrite();
};
oFF.QTableDefinition.prototype.setTotalLevel3Color = function(totalLevel3Color)
{
	this.m_totalLevel3Color = totalLevel3Color;
	this.markNeedsOverallReWrite();
};
oFF.QTableDefinition.prototype.setTotalLevel4Color = function(totalLevel4Color)
{
	this.m_totalLevel4Color = totalLevel4Color;
	this.markNeedsOverallReWrite();
};
oFF.QTableDefinition.prototype.setTotalLevel5Color = function(totalLevel5Color)
{
	this.m_totalLevel5Color = totalLevel5Color;
	this.markNeedsOverallReWrite();
};
oFF.QTableDefinition.prototype.setTotalLevel6Color = function(totalLevel6Color)
{
	this.m_totalLevel6Color = totalLevel6Color;
	this.markNeedsOverallReWrite();
};
oFF.QTableDefinition.prototype.setupInternal = function(context, parent, name, protocolBindingType, semanticBindingType)
{
	oFF.QVisualizationDefinition.prototype.setupInternal.call( this , context, parent, name, protocolBindingType, semanticBindingType);
	this.m_definitionLinker = oFF.QVisualizationTemplateLinker.create(this, () => {
		this.invalidateVisualizationContainer();
	}, () => {
		this.markNeedsReapplyFormatting();
	});
	this.m_viewportPagingSettings = oFF.QTableViewportPageSettings.create(this);
	this.m_freezeHeaderRows = oFF.QStylingValueBoolean.create();
	this.m_freezeHeaderColumns = oFF.QStylingValueBoolean.create();
	this.m_showGrid = oFF.QStylingValueBoolean.create();
	this.m_showFreezeLines = oFF.QStylingValueBoolean.create();
	this.m_stripeDataColumns = oFF.QStylingValueBoolean.create();
	this.m_stripeDataRows = oFF.QStylingValueBoolean.create();
	this.m_showDimensionTitles = oFF.QStylingValueBoolean.create();
	this.m_showCoordinateHeader = oFF.QStylingValueBoolean.create();
	this.m_showHyperlinks = oFF.QStylingValueBoolean.create();
	this.m_tableHeaderCompactionType = oFF.QStylingValueConstant.create((thct) => {
		return oFF.TableHeaderCompactionType.lookup(thct);
	});
	this.m_tableMemberHeaderHandling = oFF.QStylingValueConstant.create((tmhh) => {
		return oFF.TableMemberHeaderHandling.lookup(tmhh);
	});
	this.m_freezeUpToColumns = -1;
	this.m_freezeUpToRows = -1;
	this.m_formattingStyles = oFF.XListOfNameObject.create();
	this.m_scopedStyles = oFF.XListOfNameObject.create();
	this.m_layeredRectangularStyles = oFF.XListOfNameObject.create();
	this.m_tableMarkups = oFF.XListOfNameObject.create();
	this.m_dataPointStyles = oFF.XListOfNameObject.create();
	this.m_fixedPixelColumnWidths = oFF.XSimpleMap.create();
	this.m_fixedPixelRowHeights = oFF.XSimpleMap.create();
	this.m_highlightAreas = oFF.XList.create();
};
oFF.QTableDefinition.prototype.unlinkDefinition = function(linkId)
{
	this.m_definitionLinker.unlinkDefinition(linkId);
	this.invalidateVisualizationContainer();
	this.markNeedsReapplyFormatting();
};
oFF.QTableDefinition.prototype.unlinkDefinitionName = function(linkDomain)
{
	this.m_definitionLinker.unlinkDefinition(linkDomain);
	this.markNeedsReapplyFormatting();
};

oFF.QVisualizationAxis = function() {};
oFF.QVisualizationAxis.prototype = new oFF.QModelComponentList();
oFF.QVisualizationAxis.prototype._ff_c = "QVisualizationAxis";

oFF.QVisualizationAxis.create = function(type, parent)
{
	let instance = new oFF.QVisualizationAxis();
	instance.setupInternal(type, parent);
	return instance;
};
oFF.QVisualizationAxis.prototype.m_type = null;
oFF.QVisualizationAxis.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponentList.prototype.copyFromInternal.call( this , other, flags);
	let theOrigin = other;
	this.clear();
	if (oFF.XCollectionUtils.hasElements(theOrigin))
	{
		for (let i = 0; i < theOrigin.size(); i++)
		{
			let origElement = theOrigin.get(i);
			let newElement = oFF.QDimensionMemberSelection.createQDimensionMemberSelection(this.getContext(), null, this);
			newElement.copyFrom(origElement, flags);
			this.add(newElement);
		}
	}
};
oFF.QVisualizationAxis.prototype.getOlapComponentType = function()
{
	return this.getType();
};
oFF.QVisualizationAxis.prototype.getType = function()
{
	return this.m_type;
};
oFF.QVisualizationAxis.prototype.setupInternal = function(type, parent)
{
	this.setupOlapList(parent.getContext(), parent, false, type.getName(), oFF.XCollectionFactory.LINKED_MAP, false);
	this.m_type = type;
};
oFF.QVisualizationAxis.prototype.validate = function()
{
	return false;
};
oFF.QVisualizationAxis.prototype.validateByChangingQueryModel = function()
{
	return false;
};
oFF.QVisualizationAxis.prototype.validateByResettingVisualization = function()
{
	return false;
};

oFF.QVisualizationCategory = function() {};
oFF.QVisualizationCategory.prototype = new oFF.QModelComponentList();
oFF.QVisualizationCategory.prototype._ff_c = "QVisualizationCategory";

oFF.QVisualizationCategory.createVisualizationCategory = function(type, parent)
{
	let instance = new oFF.QVisualizationCategory();
	instance.setupInternal(type, parent);
	return instance;
};
oFF.QVisualizationCategory.prototype.m_type = null;
oFF.QVisualizationCategory.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponentList.prototype.copyFromInternal.call( this , other, flags);
	let theOrigin = other;
	this.clear();
	if (oFF.XCollectionUtils.hasElements(theOrigin))
	{
		for (let i = 0; i < theOrigin.size(); i++)
		{
			this.add(this.getQueryModel().getDimensionByName(theOrigin.get(i).getName()));
		}
	}
};
oFF.QVisualizationCategory.prototype.getOlapComponentType = function()
{
	return this.getType();
};
oFF.QVisualizationCategory.prototype.getType = function()
{
	return this.m_type;
};
oFF.QVisualizationCategory.prototype.setupInternal = function(type, parent)
{
	this.setupOlapList(parent.getContext(), parent, false, type.getName(), oFF.XCollectionFactory.LINKED_MAP, false);
	this.m_type = type;
};
oFF.QVisualizationCategory.prototype.validate = function()
{
	return false;
};
oFF.QVisualizationCategory.prototype.validateByChangingQueryModel = function()
{
	return false;
};
oFF.QVisualizationCategory.prototype.validateByResettingVisualization = function()
{
	return false;
};

oFF.QVizAxisPath = function() {};
oFF.QVizAxisPath.prototype = new oFF.QModelComponentList();
oFF.QVizAxisPath.prototype._ff_c = "QVizAxisPath";

oFF.QVizAxisPath.create = function(context, parent)
{
	let instance = new oFF.QVizAxisPath();
	instance.setupOlapList(context, parent, true, "VizAxisPath", oFF.XCollectionFactory.LOOKUP_LIST, false);
	return instance;
};
oFF.QVizAxisPath.prototype.m_dimensionSectionEnd = null;
oFF.QVizAxisPath.prototype.m_dimensionSectionStart = null;
oFF.QVizAxisPath.prototype.m_hierarchyLevelEnd = null;
oFF.QVizAxisPath.prototype.m_hierarchyLevelStart = null;
oFF.QVizAxisPath.prototype.addNewElement = function()
{
	let element = oFF.QVizAxisPathElement.create(this.getContext(), this);
	this.add(element);
	return element;
};
oFF.QVizAxisPath.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponentList.prototype.copyFromInternal.call( this , other, flags);
	let originObj = other;
	oFF.XCollectionUtils.forEach(originObj, (oe) => {
		this.addNewElement().copyFrom(oe, flags);
	});
	this.m_dimensionSectionStart = originObj.m_dimensionSectionStart;
	this.m_dimensionSectionEnd = originObj.m_dimensionSectionEnd;
	this.m_hierarchyLevelStart = originObj.m_hierarchyLevelStart;
	this.m_hierarchyLevelEnd = originObj.m_hierarchyLevelEnd;
};
oFF.QVizAxisPath.prototype.isMatchingDimensionSectionEnd = function()
{
	return this.m_dimensionSectionEnd;
};
oFF.QVizAxisPath.prototype.isMatchingDimensionSectionStart = function()
{
	return this.m_dimensionSectionStart;
};
oFF.QVizAxisPath.prototype.isMatchingHierarchyLevelEnd = function()
{
	return this.m_hierarchyLevelEnd;
};
oFF.QVizAxisPath.prototype.isMatchingHierarchyLevelStart = function()
{
	return this.m_hierarchyLevelStart;
};
oFF.QVizAxisPath.prototype.setMatchingDimensionSectionEnd = function(sectionEnd)
{
	this.m_dimensionSectionEnd = sectionEnd;
};
oFF.QVizAxisPath.prototype.setMatchingDimensionSectionStart = function(sectionStart)
{
	this.m_dimensionSectionStart = sectionStart;
};
oFF.QVizAxisPath.prototype.setMatchingHierarchyLevelEnd = function(exactLevelEnd)
{
	this.m_hierarchyLevelEnd = exactLevelEnd;
};
oFF.QVizAxisPath.prototype.setMatchingHierarchyLevelStart = function(exactLevelStart)
{
	this.m_hierarchyLevelStart = exactLevelStart;
};

oFF.QVisualizationTemplateList = function() {};
oFF.QVisualizationTemplateList.prototype = new oFF.QModelComponentList();
oFF.QVisualizationTemplateList.prototype._ff_c = "QVisualizationTemplateList";

oFF.QVisualizationTemplateList.createTemplateList = function(parentNode, name, creator)
{
	let list = new oFF.QVisualizationTemplateList();
	list.setupOlapList(parentNode, parentNode, false, name, oFF.XCollectionFactory.LINKED_MAP, false);
	list.m_creator = creator;
	return list;
};
oFF.QVisualizationTemplateList.prototype.m_activeTemplateName = null;
oFF.QVisualizationTemplateList.prototype.m_creator = null;
oFF.QVisualizationTemplateList.prototype.m_priority = 0;
oFF.QVisualizationTemplateList.prototype.addNewTemplate = function(name, text)
{
	let newElement = this.m_creator(this, oFF.XPair.create(oFF.XStringValue.create(name), oFF.XStringValue.create(text)));
	this.add(newElement);
	return newElement;
};
oFF.QVisualizationTemplateList.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponentList.prototype.copyFromInternal.call( this , other, flags);
	this.m_activeTemplateName = other.m_activeTemplateName;
	this.m_priority = other.m_priority;
};
oFF.QVisualizationTemplateList.prototype.getActiveTemplate = function()
{
	let result = null;
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_activeTemplateName))
	{
		result = this.getByKey(this.m_activeTemplateName);
	}
	return result;
};
oFF.QVisualizationTemplateList.prototype.getActiveTemplateName = function()
{
	return this.m_activeTemplateName;
};
oFF.QVisualizationTemplateList.prototype.getPriority = function()
{
	return this.m_priority;
};
oFF.QVisualizationTemplateList.prototype.releaseObject = function()
{
	this.m_activeTemplateName = null;
	this.m_priority = -1;
	oFF.QModelComponentList.prototype.releaseObject.call( this );
};
oFF.QVisualizationTemplateList.prototype.setActiveTemplate = function(activeTemplate)
{
	this.m_activeTemplateName = oFF.isNull(activeTemplate) ? null : activeTemplate.getName();
};
oFF.QVisualizationTemplateList.prototype.setActiveTemplateName = function(activeTemplateName)
{
	this.m_activeTemplateName = activeTemplateName;
};
oFF.QVisualizationTemplateList.prototype.setPriority = function(priority)
{
	this.m_priority = priority;
};

oFF.QAxisDimensionList = function() {};
oFF.QAxisDimensionList.prototype = new oFF.QDimensionList();
oFF.QAxisDimensionList.prototype._ff_c = "QAxisDimensionList";

oFF.QAxisDimensionList.checkCapability = function(dimension, targetAxisType)
{
	return oFF.isNull(dimension) ? false : dimension.supportsAxis(targetAxisType);
};
oFF.QAxisDimensionList.prototype._removeFromOldAxis = function(dimension, axisType)
{
	let oldAxis = dimension.getAxisBase();
	if (oFF.notNull(oldAxis) && oldAxis.getType() !== axisType)
	{
		oldAxis.removeElementInternal(dimension);
	}
};
oFF.QAxisDimensionList.prototype.add = function(element)
{
	let axis = this.getAxisBase();
	let axisType = axis.getType();
	if (oFF.QAxisDimensionList.checkCapability(element, axisType))
	{
		this.queueEventing();
		this._removeFromOldAxis(element, axisType);
		oFF.QDimensionList.prototype.add.call( this , element);
		element.setAxis(axis);
		this.resumeEventing();
	}
};
oFF.QAxisDimensionList.prototype.addAll = function(other)
{
	if (oFF.notNull(other) && !other.isEmpty())
	{
		this.queueEventing();
		oFF.XListUtils.addAllObjects(other, this);
		this.resumeEventing();
	}
};
oFF.QAxisDimensionList.prototype.checkCapabilityAxisRemoveDimension = function(dimension)
{
	let fallbackAxis = this.getAxis().getType().getFallbackAxis();
	return oFF.notNull(fallbackAxis) && oFF.QAxisDimensionList.checkCapability(dimension, fallbackAxis);
};
oFF.QAxisDimensionList.prototype.clear = function()
{
	let fallbackAxis = this.getAxis().getType().getFallbackAxis();
	oFF.XObjectExt.assertNotNullExt(fallbackAxis, "Cannot remove dimensions from free axis");
	this.queueEventing();
	let leftOverIndex = 0;
	while (this.size() > leftOverIndex)
	{
		let dimensionByIndex = this.getDimensionAt(leftOverIndex);
		if (dimensionByIndex.supportsAxis(fallbackAxis))
		{
			this.removeAt(leftOverIndex);
		}
		else
		{
			leftOverIndex++;
		}
	}
	this.resumeEventing();
};
oFF.QAxisDimensionList.prototype.insert = function(index, element)
{
	if (index < 0 || index > this.size())
	{
		return;
	}
	let axis = this.getAxisBase();
	let axisType = axis.getType();
	if (oFF.QAxisDimensionList.checkCapability(element, axisType))
	{
		if (axisType === oFF.AxisType.FREE)
		{
			this.stopEventing();
		}
		else
		{
			this.queueEventing();
		}
		this._removeFromOldAxis(element, axisType);
		oFF.QDimensionList.prototype.insert.call( this , index, element);
		element.setAxis(axis);
		this.resumeEventing();
	}
};
oFF.QAxisDimensionList.prototype.removeAt = function(index)
{
	let dimension = oFF.QDimensionList.prototype.get.call( this , index);
	if (this.checkCapabilityAxisRemoveDimension(dimension))
	{
		let fallbackAxis = this.getAxis().getType().getFallbackAxis();
		this.queueEventing();
		let removedObj = oFF.QDimensionList.prototype.removeAt.call( this , index);
		this.getQueryModel().getAxis(fallbackAxis).add(dimension);
		this.resumeEventing();
		return removedObj;
	}
	return null;
};
oFF.QAxisDimensionList.prototype.removeElement = function(element)
{
	let index = this.getIndex(element);
	if (index !== -1)
	{
		this.removeAt(index);
	}
	return element;
};
oFF.QAxisDimensionList.prototype.removeElementInternal = function(dimension)
{
	this.queueEventing();
	oFF.QDimensionList.prototype.removeElement.call( this , dimension);
	dimension.setAxis(null);
	this.resumeEventing();
};

oFF.QFilterAcrossModelsCalculatedDimension = function() {};
oFF.QFilterAcrossModelsCalculatedDimension.prototype = new oFF.QFormulaCalculatedDimension();
oFF.QFilterAcrossModelsCalculatedDimension.prototype._ff_c = "QFilterAcrossModelsCalculatedDimension";

oFF.QFilterAcrossModelsCalculatedDimension.createFilterAcrossModelsCalculatedDimension = function(context, name)
{
	let dimension = new oFF.QFilterAcrossModelsCalculatedDimension();
	dimension.setupFormulaCalculatedDimension(context, name);
	dimension.setJoinType(oFF.JoinType.INNER);
	dimension.m_measureNames = oFF.XList.create();
	dimension.m_secondaryMeasureNames = oFF.XList.create();
	return dimension;
};
oFF.QFilterAcrossModelsCalculatedDimension.prototype.m_famJoinType = null;
oFF.QFilterAcrossModelsCalculatedDimension.prototype.m_measureNames = null;
oFF.QFilterAcrossModelsCalculatedDimension.prototype.m_secondaryMeasureNames = null;
oFF.QFilterAcrossModelsCalculatedDimension.prototype.addDependencies = function(context, messageManager)
{
	for (let i = 0; i < this.m_measureNames.size(); i++)
	{
		this.addDependentMeasuresInternal(this.m_measureNames.get(i), this.getContext(), false);
	}
	for (let j = 0; j < this.m_secondaryMeasureNames.size(); j++)
	{
		this.addDependentMeasuresInternal(this.m_secondaryMeasureNames.get(j), this.getContext(), true);
	}
	let aggregationFieldNames = this.getAggregationFieldNames();
	for (let k = 0; k < aggregationFieldNames.size(); k++)
	{
		this.addDependentAttributesInternal(aggregationFieldNames.get(k), this.getContext(), messageManager, oFF.XHashSetOfString.create());
	}
	oFF.QFormulaCalculatedDimension.prototype.addDependencies.call( this , context, messageManager);
};
oFF.QFilterAcrossModelsCalculatedDimension.prototype.addFieldMapping = function(fieldMapping)
{
	this.m_fieldMappings.add(fieldMapping);
	let presentation = oFF.PresentationType.UNDEFINED;
	if (this.m_fieldMappings.size() === 1)
	{
		presentation = oFF.PresentationType.KEY;
	}
	let newField = this.addNewCalcFieldInternal(fieldMapping.getLocaleFieldName(), presentation);
	this.getProperties().getFormulaCalcFields().add(newField);
};
oFF.QFilterAcrossModelsCalculatedDimension.prototype.addFieldMappingByString = function(localeFieldName, referencedFieldName)
{
	this.addFieldMapping(oFF.QFieldNamePair.create(localeFieldName, referencedFieldName));
};
oFF.QFilterAcrossModelsCalculatedDimension.prototype.addJoinField = function(joinField)
{
	this.m_joinFields.add(joinField);
};
oFF.QFilterAcrossModelsCalculatedDimension.prototype.addJoinFieldByString = function(localeFieldName, referencedFieldName)
{
	this.addJoinField(oFF.QFieldNamePair.create(localeFieldName, referencedFieldName));
};
oFF.QFilterAcrossModelsCalculatedDimension.prototype.copyFilterAcrossModelCalculatedDimension = function(other, addDependenciesToQueryModel)
{
	oFF.QFormulaCalculatedDimension.prototype.copyFormulaCalculatedDimensionAndUpdateQueryModel.call( this , other, addDependenciesToQueryModel, true);
	this.m_measureNames = other.m_measureNames.createListCopy();
	this.m_secondaryMeasureNames = other.m_secondaryMeasureNames.createListCopy();
	this.m_famJoinType = other.m_famJoinType;
};
oFF.QFilterAcrossModelsCalculatedDimension.prototype.copyFromInternal = function(other, flags)
{
	this.copyFilterAcrossModelCalculatedDimension(other, false);
};
oFF.QFilterAcrossModelsCalculatedDimension.prototype.getDimensionType = function()
{
	return oFF.DimensionType.FILTER_ACROSS_MODELS_CALCULATED_DIMENSION;
};
oFF.QFilterAcrossModelsCalculatedDimension.prototype.getFieldMappings = function()
{
	return this.m_fieldMappings;
};
oFF.QFilterAcrossModelsCalculatedDimension.prototype.getJoinFields = function()
{
	return this.m_joinFields;
};
oFF.QFilterAcrossModelsCalculatedDimension.prototype.getJoinType = function()
{
	return this.m_famJoinType;
};
oFF.QFilterAcrossModelsCalculatedDimension.prototype.getMeasureNames = function()
{
	return this.m_measureNames;
};
oFF.QFilterAcrossModelsCalculatedDimension.prototype.getSecondaryMeasureNames = function()
{
	return this.m_secondaryMeasureNames;
};
oFF.QFilterAcrossModelsCalculatedDimension.prototype.releaseObject = function()
{
	this.m_famJoinType = null;
	this.m_measureNames = oFF.XObjectExt.release(this.m_measureNames);
	this.m_secondaryMeasureNames = oFF.XObjectExt.release(this.m_secondaryMeasureNames);
	oFF.QFormulaCalculatedDimension.prototype.releaseObject.call( this );
};
oFF.QFilterAcrossModelsCalculatedDimension.prototype.setJoinType = function(joinType)
{
	this.m_famJoinType = joinType;
};
oFF.QFilterAcrossModelsCalculatedDimension.prototype.setMeasureNames = function(measureNames)
{
	this.m_measureNames = measureNames;
};
oFF.QFilterAcrossModelsCalculatedDimension.prototype.setSecondaryMeasureNames = function(measureNames)
{
	this.m_secondaryMeasureNames = measureNames;
};

oFF.QMeasureBasedFilterCalculatedDimension = function() {};
oFF.QMeasureBasedFilterCalculatedDimension.prototype = new oFF.QFormulaCalculatedDimension();
oFF.QMeasureBasedFilterCalculatedDimension.prototype._ff_c = "QMeasureBasedFilterCalculatedDimension";

oFF.QMeasureBasedFilterCalculatedDimension._createMeasureBasedFilterCalculatedDimension = function(context, calculatedDimensionName)
{
	let dim = new oFF.QMeasureBasedFilterCalculatedDimension();
	dim.setupFormulaCalculatedDimension(context, calculatedDimensionName);
	dim.setDimensionType(oFF.DimensionType.MEASURE_BASED_FILTER_CALCULATED_DIMENSION);
	dim.setJoinType(oFF.JoinType.INNER);
	return dim;
};

oFF.QFilterAlgebraOperation = function() {};
oFF.QFilterAlgebraOperation.prototype = new oFF.AbstractFilterList();
oFF.QFilterAlgebraOperation.prototype._ff_c = "QFilterAlgebraOperation";

oFF.QFilterAlgebraOperation.prototype.copyFromInternal = function(other, flags)
{
	oFF.AbstractFilterList.prototype.copyFromInternal.call( this , other, flags);
	let originFilterAlgebraOperation = other;
	let filterExpression = this.getFilterExpression();
	let size = originFilterAlgebraOperation.size();
	for (let i = 0; i < size; i++)
	{
		let originElement = originFilterAlgebraOperation.get(i);
		let originType = originElement.getOlapComponentType();
		let cloneElement = null;
		if (originType === oFF.FilterComponentType.CARTESIAN_PRODUCT)
		{
			cloneElement = oFF.QFilterCartesianProduct._create(this, filterExpression);
		}
		else if (originType === oFF.FilterComponentType.CARTESIAN_LIST)
		{
			let originList = originElement;
			cloneElement = oFF.QFilterCartesianList._createMd(this, filterExpression, originList.getFieldMetadata(), originList.getHierarchyName());
		}
		else if (originType === oFF.FilterComponentType.CONVERTED_TIME_CARTESIAN_LIST)
		{
			let originConvertedTimeCartesianList = originElement;
			cloneElement = oFF.QFilterConvertedTimeCartesianList._create(this, filterExpression, originConvertedTimeCartesianList.getFieldMetadata(), originConvertedTimeCartesianList.getHierarchyName());
		}
		else if (originType === oFF.FilterComponentType.OPERATION)
		{
			cloneElement = oFF.QFilterOperation._create(this, filterExpression, this);
		}
		else if (originType === oFF.FilterComponentType.DATE_RANGE_OPERATION)
		{
			cloneElement = oFF.QFilterDateRange.create(this, filterExpression);
		}
		else if (originType === oFF.OlapComponentType.FILTER_CELL_VALUE_OPERAND)
		{
			cloneElement = oFF.QFilterCellValueOperand.createWithExpression(this, filterExpression, this);
		}
		else if (originType === oFF.FilterComponentType.TUPLE)
		{
			if (originElement.hasTuples())
			{
				cloneElement = oFF.QFactory.createFilterTuple(this);
			}
			if (originElement.hasDataSourceColumns())
			{
				cloneElement = oFF.QFactory.createTupleFilterFromDataSource(this);
			}
		}
		else if (originType.isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA))
		{
			if (originType === oFF.FilterComponentType.AND)
			{
				cloneElement = oFF.QFactory.createFilterAnd(this);
			}
			else if (originType === oFF.FilterComponentType.OR)
			{
				cloneElement = oFF.QFactory.createFilterOr(this);
			}
			else if (originType === oFF.FilterComponentType.NOT)
			{
				cloneElement = oFF.QFactory.createFilterNot(this);
			}
			else
			{
				throw oFF.XException.createRuntimeException(originType.getName());
			}
		}
		else if (originType === oFF.FilterComponentType.FILTER_MEASURE_BASED)
		{
			cloneElement = oFF.QFactory.createFilterMeasureBased(this, originElement.getName());
		}
		else if (originType === oFF.FilterComponentType.FILTER_ACROSS_MODELS)
		{
			cloneElement = oFF.QFactory.createFilterAcrossModels(this, originElement.getName());
		}
		else if (originType === oFF.FilterComponentType.FILTER_DYNAMIC_TIME_REGULAR_RANGE)
		{
			cloneElement = oFF.QFactory.createFilterDynamicTimeRegularRange(this, originElement.getName());
		}
		else if (originType === oFF.FilterComponentType.FILTER_DYNAMIC_TIME_TO_DATE_RANGE)
		{
			cloneElement = oFF.QFactory.createFilterDynamicTimeToDateRange(this, originElement.getName());
		}
		else if (originType === oFF.FilterComponentType.FILTER_FIXED_TIME_RANGE)
		{
			cloneElement = oFF.QFactory.createFilterFixedTimeRange(this, originElement.getName());
		}
		if (oFF.notNull(cloneElement))
		{
			cloneElement.copyFrom(originElement, flags);
			this.addInternal(cloneElement);
		}
	}
};
oFF.QFilterAlgebraOperation.prototype.setupFilterAlgebraOperation = function(context, selectionContainer)
{
	oFF.AbstractFilterList.prototype.setupFilterList.call( this , context, selectionContainer, "Selection Logical Container");
};

oFF.QFilterDynamicTimeRegularRange = function() {};
oFF.QFilterDynamicTimeRegularRange.prototype = new oFF.QAbstractFilterShiftableTimeRange();
oFF.QFilterDynamicTimeRegularRange.prototype._ff_c = "QFilterDynamicTimeRegularRange";

oFF.QFilterDynamicTimeRegularRange.LINK_FILTER_PREFIX = "__transientDynTimeRegularRange|";
oFF.QFilterDynamicTimeRegularRange.createFilterDynamicTimeRegularRange = function(context, name)
{
	let dynamicTimeRangeFilter = new oFF.QFilterDynamicTimeRegularRange();
	dynamicTimeRangeFilter.setupTimeRangeFilter(context, name);
	return dynamicTimeRangeFilter;
};
oFF.QFilterDynamicTimeRegularRange.prototype.m_lookAhead = 0;
oFF.QFilterDynamicTimeRegularRange.prototype.copyFromInternal = function(other, flags)
{
	oFF.QAbstractFilterShiftableTimeRange.prototype.copyFromInternal.call( this , other, flags);
	let originDynamicTimeRangeFilter = other;
	this.setLookBack(originDynamicTimeRangeFilter.getLookBack());
	this.setLookAhead(originDynamicTimeRangeFilter.getLookAhead());
	this.setOffsetFunction(originDynamicTimeRangeFilter.getOffsetFunction());
	this.setOffsetLevelName(originDynamicTimeRangeFilter.getOffsetLevelName());
	this.setOffsetAmount(originDynamicTimeRangeFilter.getOffsetAmount());
};
oFF.QFilterDynamicTimeRegularRange.prototype.createRangeMemberNavFilterOp = function(queryModel, timeDimension, hierarchyName, lowValue, levelName, lookBack, lookAhead, offsetFunction, offsetLevelName, offsetAmount)
{
	let filterOp = oFF.QFactory.createFilterOperation(queryModel, timeDimension.getHierarchyKeyField());
	filterOp.setHierarchyName(hierarchyName);
	this.setLowValueToTransientFilterOperation(filterOp, lowValue);
	let leveledHierarchy = timeDimension.getLeveledHierarchy(hierarchyName);
	let currentLevel = this.getLowValueType() === oFF.XValueType.VARIABLE ? leveledHierarchy.getMostGranularLevel() : oFF.QFilterUtil.getHierarchyLevelFromEntityValue(timeDimension, hierarchyName, lowValue);
	filterOp.getLow().getMemberNavigations().addAll(oFF.QTimeMemberNavigationGenerator.generateOffsetRange(queryModel, levelName, lookBack, lookAhead, offsetFunction, offsetLevelName, offsetAmount, leveledHierarchy, currentLevel, this.getPivotMemberLevelName()));
	filterOp.setSetSign(this.getSetSign());
	return filterOp;
};
oFF.QFilterDynamicTimeRegularRange.prototype.generateRuntimeSelectionFilter = function(queryModel, timeDimension)
{
	let parentFilter = oFF.QFactory.createFilterAnd(queryModel);
	let hierarchyName = this.getHierarchyName();
	let levelName = this.getLevelName();
	let lowValue = this.getLowValue();
	let lookBack = this.getLookBack();
	let lookAhead = this.getLookAhead();
	let offsetFunction = this.getOffsetFunction();
	let offsetLevelName = this.getOffsetLevelName();
	let offsetAmount = this.getOffsetAmount();
	if (this.isSingleValueDynamicRangeFilter())
	{
		let filterOp = oFF.QFactory.createFilterOperation(queryModel, timeDimension.getHierarchyKeyField());
		filterOp.setHierarchyName(hierarchyName);
		this.setLowValueToTransientFilterOperation(filterOp, lowValue);
		let leveledHierarchy = timeDimension.getLeveledHierarchy(hierarchyName);
		let currentLevel = this.getLowValueType() === oFF.XValueType.VARIABLE ? leveledHierarchy.getMostGranularLevel() : oFF.QFilterUtil.getHierarchyLevelFromEntityValue(timeDimension, hierarchyName, lowValue);
		filterOp.getLow().getMemberNavigations().addAll(oFF.QTimeMemberNavigationGenerator.getPivotLevelShiftMemberNavigations(leveledHierarchy, currentLevel, this.getPivotMemberLevelName()));
		if (oFF.notNull(offsetFunction) && oFF.XStringUtils.isNotNullAndNotEmpty(offsetLevelName) && offsetAmount > 0)
		{
			let offsetValue = offsetFunction === oFF.TimeOffsetFunction.LOOK_BACK ? offsetAmount : offsetAmount * -1;
			filterOp.getLow().getMemberNavigations().add(oFF.QTimeMemberNavigationGenerator.createParallelPeriodMemberNavigation(queryModel, offsetLevelName, offsetValue, timeDimension.getLeveledHierarchy(hierarchyName)));
		}
		let ancestor = oFF.QFactory.createMemberNavigation(oFF.CurrentMemberFunction.ANCESTOR);
		ancestor.addParameter(oFF.QFactory.createNavigationParameterWithLevelLiteral(levelName));
		filterOp.getLow().getMemberNavigations().add(ancestor);
		parentFilter.add(this.createCartesianListAndAddFilter(queryModel, timeDimension, hierarchyName, filterOp));
	}
	else if (lookBack !== 0 && lookAhead !== 0)
	{
		let filterAlgebraRange;
		if (this.getSetSign() === oFF.SetSign.INCLUDING)
		{
			filterAlgebraRange = oFF.QFactory.createFilterOr(queryModel);
			parentFilter.add(filterAlgebraRange);
		}
		else
		{
			filterAlgebraRange = parentFilter;
		}
		filterAlgebraRange.add(this.createCartesianListAndAddFilter(queryModel, timeDimension, hierarchyName, this.createRangeMemberNavFilterOp(queryModel, timeDimension, hierarchyName, lowValue, levelName, lookBack, 0, offsetFunction, offsetLevelName, offsetAmount)));
		filterAlgebraRange.add(this.createCartesianListAndAddFilter(queryModel, timeDimension, hierarchyName, this.createRangeMemberNavFilterOp(queryModel, timeDimension, hierarchyName, lowValue, levelName, 0, lookAhead, offsetFunction, offsetLevelName, offsetAmount)));
	}
	else
	{
		let timeCartesianList = this.createCartesianListAndAddFilter(queryModel, timeDimension, hierarchyName, null);
		if (lookBack !== 0 || this.getSetSign() === oFF.SetSign.EXCLUDING)
		{
			timeCartesianList.add(this.createRangeMemberNavFilterOp(queryModel, timeDimension, hierarchyName, lowValue, levelName, lookBack, 0, offsetFunction, offsetLevelName, offsetAmount));
		}
		if (lookAhead !== 0 || this.getSetSign() === oFF.SetSign.EXCLUDING)
		{
			timeCartesianList.add(this.createRangeMemberNavFilterOp(queryModel, timeDimension, hierarchyName, lowValue, levelName, 0, lookAhead, offsetFunction, offsetLevelName, offsetAmount));
		}
		parentFilter.add(timeCartesianList);
	}
	return parentFilter;
};
oFF.QFilterDynamicTimeRegularRange.prototype.getLinkFilterKey = function()
{
	return oFF.XStringUtils.concatenate2(oFF.QFilterDynamicTimeRegularRange.LINK_FILTER_PREFIX, this.getName());
};
oFF.QFilterDynamicTimeRegularRange.prototype.getLookAhead = function()
{
	return this.m_lookAhead;
};
oFF.QFilterDynamicTimeRegularRange.prototype.getLowestLevelRuntimeCartesianList = function(queryModel)
{
	let timeDimension = queryModel.getDimensionByName(this.getTimeDimensionName());
	if (oFF.notNull(timeDimension))
	{
		let runtimeSelectionFilter = this.generateRuntimeSelectionFilter(queryModel, timeDimension);
		let cartesianLists = oFF.QFilterUtil.collectAllCartesianLists(runtimeSelectionFilter);
		if (cartesianLists.size() === 1)
		{
			return cartesianLists.get(0);
		}
	}
	return null;
};
oFF.QFilterDynamicTimeRegularRange.prototype.getOlapComponentType = function()
{
	return oFF.FilterComponentType.FILTER_DYNAMIC_TIME_REGULAR_RANGE;
};
oFF.QFilterDynamicTimeRegularRange.prototype.getTransientFilter = function(queryModel)
{
	if (!this.getSession().hasFeature(oFF.FeatureToggleOlap.FLEXIBLE_TIME_DYNAMIC_TIME))
	{
		return this.getTransientFallbackFilter();
	}
	let timeDimension = queryModel.getDimensionByName(this.getTimeDimensionName());
	if (oFF.isNull(timeDimension))
	{
		return null;
	}
	let filterExpression = oFF.QFactory.createFilterExpression(queryModel, this);
	let filterAlgebra = this.generateRuntimeSelectionFilter(queryModel, timeDimension);
	this.addValueExcludeFilter(queryModel, filterAlgebra);
	filterExpression.setComplexRoot(filterAlgebra);
	if (this.getLowValueType() === oFF.XValueType.VARIABLE)
	{
		oFF.QFilterUtil.setCurrentDateVariable(queryModel);
	}
	return filterExpression;
};
oFF.QFilterDynamicTimeRegularRange.prototype.isSingleValueDynamicRangeFilter = function()
{
	return this.getLookBack() === 0 && this.getLookAhead() === 0 && this.getSetSign() === oFF.SetSign.INCLUDING;
};
oFF.QFilterDynamicTimeRegularRange.prototype.releaseObject = function()
{
	this.destroyTransientObjects(this.getContext());
	oFF.QAbstractFilterShiftableTimeRange.prototype.releaseObject.call( this );
};
oFF.QFilterDynamicTimeRegularRange.prototype.setLookAhead = function(lookAhead)
{
	this.m_lookAhead = lookAhead;
	this.notifyNodeChanged();
};
oFF.QFilterDynamicTimeRegularRange.prototype.setLowValueType = function(lowValueType)
{
	this.m_lowValueType = lowValueType;
	this.notifyNodeChanged();
};

oFF.QFilterDynamicTimeToDateRange = function() {};
oFF.QFilterDynamicTimeToDateRange.prototype = new oFF.QAbstractFilterShiftableTimeRange();
oFF.QFilterDynamicTimeToDateRange.prototype._ff_c = "QFilterDynamicTimeToDateRange";

oFF.QFilterDynamicTimeToDateRange.LINK_FILTER_PREFIX = "__transientDynTimeToDateRange|";
oFF.QFilterDynamicTimeToDateRange.createFilterDynamicTimeToDateRange = function(context, name)
{
	let dynamicTimeRangeFilter = new oFF.QFilterDynamicTimeToDateRange();
	dynamicTimeRangeFilter.setupTimeRangeFilter(context, name);
	return dynamicTimeRangeFilter;
};
oFF.QFilterDynamicTimeToDateRange.prototype.getLinkFilterKey = function()
{
	return oFF.XStringUtils.concatenate2(oFF.QFilterDynamicTimeToDateRange.LINK_FILTER_PREFIX, this.getName());
};
oFF.QFilterDynamicTimeToDateRange.prototype.getMemberValue = function()
{
	return this.getLowValue();
};
oFF.QFilterDynamicTimeToDateRange.prototype.getOlapComponentType = function()
{
	return oFF.FilterComponentType.FILTER_DYNAMIC_TIME_TO_DATE_RANGE;
};
oFF.QFilterDynamicTimeToDateRange.prototype.getTransientFilter = function(queryModel)
{
	if (!this.getSession().hasFeature(oFF.FeatureToggleOlap.FLEXIBLE_TIME_DYNAMIC_TIME))
	{
		return this.getTransientFallbackFilter();
	}
	let timeDimension = queryModel.getDimensionByName(this.getTimeDimensionName());
	if (oFF.isNull(timeDimension))
	{
		return null;
	}
	let hierarchyName = this.getHierarchyName();
	let levelName = this.getLevelName();
	let entityValue = this.getLowValue();
	let filterOp = oFF.QFactory.createFilterOperation(queryModel, timeDimension.getHierarchyKeyField());
	filterOp.setSetSign(this.getSetSign());
	filterOp.setHierarchyName(hierarchyName);
	this.setLowValueToTransientFilterOperation(filterOp, entityValue);
	let initialLevel;
	if (this.getLowValueType() === oFF.XValueType.VARIABLE)
	{
		let leveledHierarchy = timeDimension.getLeveledHierarchy(hierarchyName);
		initialLevel = leveledHierarchy.getMostGranularLevel();
	}
	else
	{
		initialLevel = oFF.QFilterUtil.getHierarchyLevelFromEntityValue(timeDimension, hierarchyName, entityValue);
	}
	if (oFF.isNull(initialLevel))
	{
		throw oFF.XException.createRuntimeException(oFF.XStringUtils.concatenate2("Cannot find hierarchy level from entityValue:", entityValue));
	}
	filterOp.getLow().getMemberNavigations().addAll(oFF.QTimeMemberNavigationGenerator.generateToDateRange(queryModel, timeDimension, hierarchyName, initialLevel.getLevelName(), levelName, this.getLookBack(), this.getOffsetFunction(), this.getOffsetLevelName(), this.getOffsetAmount(), this.getPivotMemberLevelName()));
	let timeCartesianList = oFF.QFactory.createFilterCartesianListWithField(queryModel, timeDimension.getHierarchyKeyField());
	timeCartesianList.getTagging().put(oFF.QTransientConstants.TAG_IS_TRANSIENT, "");
	timeCartesianList.setHierarchyName(hierarchyName);
	timeCartesianList.setConvertToFlatFilter(this.isConvertToFlatFilter());
	timeCartesianList.add(filterOp);
	let filterExpression = oFF.QFactory.createFilterExpression(queryModel, this);
	let filterAlgebra = oFF.QFactory.createFilterAnd(queryModel);
	filterAlgebra.add(timeCartesianList);
	this.addValueExcludeFilter(queryModel, filterAlgebra);
	filterExpression.setComplexRoot(filterAlgebra);
	if (this.getLowValueType() === oFF.XValueType.VARIABLE)
	{
		oFF.QFilterUtil.setCurrentDateVariable(queryModel);
	}
	return filterExpression;
};
oFF.QFilterDynamicTimeToDateRange.prototype.releaseObject = function()
{
	this.destroyTransientObjects(this.getContext());
	oFF.QAbstractFilterShiftableTimeRange.prototype.releaseObject.call( this );
};
oFF.QFilterDynamicTimeToDateRange.prototype.setLowValueType = function(lowValueType)
{
	this.m_lowValueType = lowValueType;
	this.notifyNodeChanged();
};
oFF.QFilterDynamicTimeToDateRange.prototype.setMemberValue = function(value)
{
	this.setLowValue(value);
};

oFF.QBasicMeasure = function() {};
oFF.QBasicMeasure.prototype = new oFF.QStructureMember();
oFF.QBasicMeasure.prototype._ff_c = "QBasicMeasure";

oFF.QBasicMeasure._createBasicMeasure = function(context, dimension)
{
	let member = new oFF.QBasicMeasure();
	member.setupBasicMeasure(context, dimension);
	return member;
};
oFF.QBasicMeasure.prototype.m_aggregationDimensionName = null;
oFF.QBasicMeasure.prototype.m_notFromMetadata = false;
oFF.QBasicMeasure.prototype.clearRunningAggregation = function()
{
	this.setRunningAggregationOperator(null);
	this.setRunningAggregationInitDimension(null);
};
oFF.QBasicMeasure.prototype.copyFromInternal = function(other, flags)
{
	oFF.QStructureMember.prototype.copyFromInternal.call( this , other, flags);
	let originBasicMeasure = other;
	this.m_aggregationDimensionName = originBasicMeasure.m_aggregationDimensionName;
	this.m_notFromMetadata = originBasicMeasure.m_notFromMetadata;
};
oFF.QBasicMeasure.prototype.createRestrictedMeasureForRunningAggregation = function(name, text, operator, initDimension)
{
	let measureDimension = this.getQueryModel().getMeasureDimension();
	let measure = measureDimension.addNewRestrictedMeasure(name, text);
	let rmFilter = measure.getFilter();
	rmFilter.addSingleMemberFilterByDimension(measureDimension, this.getName(), oFF.ComparisonOperator.EQUAL);
	measure.setRunningAggregation(operator, initDimension);
	return measure;
};
oFF.QBasicMeasure.prototype.getAggregationDimensionName = function()
{
	return this.m_aggregationDimensionName;
};
oFF.QBasicMeasure.prototype.getSupportedRunningAggregationOperators = function()
{
	return this.getContext().getQueryModel().getRunningAggregationManager().getRunningAggregationOperatorsSupportedByMeasure(this.getName());
};
oFF.QBasicMeasure.prototype.isNotFromMetadata = function()
{
	return this.m_notFromMetadata;
};
oFF.QBasicMeasure.prototype.isRunningAggregationSupported = function()
{
	let queryModel = this.getQueryModel();
	return queryModel.getModelCapabilities().supportsSupportsRunningAggregation() && oFF.XCollectionUtils.hasElements(this.getSupportedRunningAggregationOperators());
};
oFF.QBasicMeasure.prototype.releaseObject = function()
{
	this.m_aggregationDimensionName = null;
	oFF.QStructureMember.prototype.releaseObject.call( this );
};
oFF.QBasicMeasure.prototype.setAggregationDimension = function(dimension)
{
	this.setAggregationDimensionName(dimension.getName());
};
oFF.QBasicMeasure.prototype.setAggregationDimensionName = function(dimensionName)
{
	let oldValue = this.m_aggregationDimensionName;
	this.m_aggregationDimensionName = dimensionName;
	this.notifyPropertyStringChanged(oFF.QStructureMemberProperties.QY_AGGREGATION_DIMENSION, oldValue, dimensionName);
};
oFF.QBasicMeasure.prototype.setNotFromMetadata = function()
{
	this.m_notFromMetadata = true;
};
oFF.QBasicMeasure.prototype.setRunningAggregation = function(operator, initDimension)
{
	this.setRunningAggregationOperator(operator);
	this.setRunningAggregationInitDimension(initDimension);
};
oFF.QBasicMeasure.prototype.setRunningAggregationInitDimension = function(initDimension)
{
	let oldValue = this.m_runAggrInitDim;
	this.m_runAggrInitDim = initDimension;
	this.notifyPropertyStringChanged(oFF.QStructureMemberProperties.QY_RUNNING_AGGREGATION_INIT_DIM, oldValue, initDimension);
};
oFF.QBasicMeasure.prototype.setRunningAggregationOperator = function(operator)
{
	let oldValue = this.m_runAggrOperator;
	this.m_runAggrOperator = operator;
	this.notifyPropertyConstantChanged(oFF.QStructureMemberProperties.QY_RUNNING_AGGREGATION, oldValue, operator);
};
oFF.QBasicMeasure.prototype.setupBasicMeasure = function(context, structure)
{
	oFF.QStructureMember.prototype.setupStructureMember.call( this , context, structure, oFF.MemberType.BASIC_MEASURE);
};

oFF.QExceptionAggregationMeasure = function() {};
oFF.QExceptionAggregationMeasure.prototype = new oFF.QStructureMember();
oFF.QExceptionAggregationMeasure.prototype._ff_c = "QExceptionAggregationMeasure";

oFF.QExceptionAggregationMeasure._createExceptionAggregationMeasure = function(context, structure)
{
	let capabilities = context.getModelCapabilities();
	if (!capabilities.supportsFormulaMeasures() || !capabilities.supportsRestrictedMeasures())
	{
		oFF.noSupport();
	}
	let member = new oFF.QExceptionAggregationMeasure();
	member.setupExceptionAggregationMeasure(context, structure);
	return member;
};
oFF.QExceptionAggregationMeasure.prototype.m_conditionType = null;
oFF.QExceptionAggregationMeasure.prototype.m_exceptionAggregationMeasureCapabilities = null;
oFF.QExceptionAggregationMeasure.prototype.m_exceptionAggregationOnSelection = false;
oFF.QExceptionAggregationMeasure.prototype.m_filter = null;
oFF.QExceptionAggregationMeasure.prototype.m_measure = null;
oFF.QExceptionAggregationMeasure.prototype.m_transientMemberMap = null;
oFF.QExceptionAggregationMeasure.prototype.m_transientSignFlipMemberMap = null;
oFF.QExceptionAggregationMeasure.prototype.applyExceptionAggregation = function(member)
{
	member.setExceptionAggregationType(this.getExceptionAggregationType());
	let iter = this.getExceptionAggregationDimensions().getIterator();
	while (iter.hasNext())
	{
		member.addExceptionAggregationDimensionName(iter.next());
	}
};
oFF.QExceptionAggregationMeasure.prototype.copyFromInternal = function(other, flags)
{
	if (other.getMemberType() !== this.getMemberType())
	{
		return;
	}
	oFF.QStructureMember.prototype.copyFromInternal.call( this , other, flags);
};
oFF.QExceptionAggregationMeasure.prototype.copySharableProperties = function(origin, isShallowCopy)
{
	oFF.QStructureMember.prototype.copySharableProperties.call( this , origin, isShallowCopy);
	let originExceptionAggregationMeasure = origin;
	if (isShallowCopy && originExceptionAggregationMeasure.getDimension().getDimensionType() !== oFF.DimensionType.ACCOUNT)
	{
		this.m_filter = originExceptionAggregationMeasure.m_filter;
	}
	else
	{
		this.m_filter.copyFrom(originExceptionAggregationMeasure.m_filter, null);
	}
	this.m_measure = originExceptionAggregationMeasure.getMeasure();
	this.m_conditionType = originExceptionAggregationMeasure.getConditionType();
	this.m_exceptionAggregationOnSelection = originExceptionAggregationMeasure.getIsExceptionAggregationOnSelectionEnabled();
};
oFF.QExceptionAggregationMeasure.prototype.createRestrictedMeasure = function(context)
{
	let dimensionContext = this.getDimensionContext(context.getQueryManager());
	let restrictedMeasure = oFF.QRestrictedMeasure._createRestrictedMeasure(context, dimensionContext);
	if (this.hasFilterOnExceptionAggregation())
	{
		restrictedMeasure.getFilter().copyFrom(this.m_filter, null);
	}
	if (this.getNumericScale() !== null)
	{
		restrictedMeasure.setNumericScale(this.getNumericScale().getInteger());
	}
	restrictedMeasure.getFilter().addSingleMemberFilterByDimension(dimensionContext, this.m_measure, oFF.ComparisonOperator.EQUAL);
	restrictedMeasure.setAutoSignFlip(this.isAutoSignFlip());
	return restrictedMeasure;
};
oFF.QExceptionAggregationMeasure.prototype.destroyTransientObjects = function(context)
{
	oFF.QStructureMember.prototype.destroyTransientObjects.call( this , context);
	let dimensionContext = this.getDimensionContext(context.getQueryManager());
	let instanceId = context.getQueryManager().getInstanceId();
	let transientRestrictedMeasure = this.m_transientMemberMap.getByKey(instanceId);
	if (oFF.notNull(transientRestrictedMeasure))
	{
		this.m_transientMemberMap.remove(instanceId);
		dimensionContext.removeMeasure(transientRestrictedMeasure.getName());
		transientRestrictedMeasure = oFF.XObjectExt.release(transientRestrictedMeasure);
	}
	let transientSignFlipMember = this.m_transientSignFlipMemberMap.getByKey(instanceId);
	if (oFF.notNull(transientSignFlipMember))
	{
		this.m_transientSignFlipMemberMap.remove(instanceId);
		dimensionContext.removeMeasure(transientSignFlipMember.getName());
		transientSignFlipMember = oFF.XObjectExt.release(transientSignFlipMember);
	}
};
oFF.QExceptionAggregationMeasure.prototype.exportRuntimeObject = function(context, messageManager)
{
	this.setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_DO_NOT_RAISEEVENTS);
	context.getQueryModel().setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_DO_NOT_RAISEEVENTS);
	let exceptionAggregation;
	let dimensionContext = this.getDimensionContext(context.getQueryManager());
	let transientSignFlipMember = dimensionContext.getStructureMember(this.getTransientSignFlipMemberName());
	if (oFF.notNull(transientSignFlipMember))
	{
		let signflipMeasure = oFF.QFormulaMeasure._createFormulaMeasure(context, dimensionContext);
		signflipMeasure.setName(this.getName());
		signflipMeasure.setText(this.getText());
		signflipMeasure.setAutoSignFlip(true);
		if (dimensionContext.getDimensionType().isTypeOf(oFF.DimensionType.ACCOUNT))
		{
			signflipMeasure.setAliasName(this.getAliasName());
		}
		let member = oFF.QFactory.createFormulaMember(context);
		member.setMember(transientSignFlipMember);
		if (this.isCountExceptionAggregation())
		{
			let absFormula = oFF.QFactory.createFormulaFunctionWithName(context, oFF.FormulaOperator.ABS.getName());
			absFormula.add(member);
			signflipMeasure.setFormula(absFormula);
		}
		else
		{
			signflipMeasure.setFormula(member);
		}
		exceptionAggregation = signflipMeasure;
	}
	else
	{
		exceptionAggregation = this.generateExceptionAggregation(context);
	}
	let runtimeObject = exceptionAggregation.exportRuntimeObject(context, messageManager);
	this.resumeEventing();
	context.getQueryModel().resumeEventing();
	return runtimeObject;
};
oFF.QExceptionAggregationMeasure.prototype.generateExceptionAggregation = function(context)
{
	let result;
	let instanceId = context.getQueryManager().getInstanceId();
	let transientRestrictedMeasure = this.m_transientMemberMap.getByKey(instanceId);
	if (oFF.isNull(transientRestrictedMeasure))
	{
		if (this.isExceptionAggregationOnSelectionApplied(context))
		{
			result = this.getRestrictedMeasure(context);
		}
		else
		{
			result = this.getFormulaMeasure(context, transientRestrictedMeasure);
		}
	}
	else
	{
		result = this.getFormulaMeasure(context, transientRestrictedMeasure);
	}
	this.applyExceptionAggregation(result);
	result.setAliasName(this.getAliasName());
	return result;
};
oFF.QExceptionAggregationMeasure.prototype.generateTransientObjects = function(context, messageManager)
{
	oFF.QStructureMember.prototype.generateTransientObjects.call( this , context, messageManager);
	let dimensionContext = this.getDimensionContext(context.getQueryManager());
	let instanceId = context.getQueryManager().getInstanceId();
	let transientRestrictedMeasure = this.generateTransientRestrictedMeasure(context);
	this.m_transientMemberMap.put(instanceId, transientRestrictedMeasure);
	if (oFF.notNull(transientRestrictedMeasure))
	{
		if (dimensionContext.getStructureMember(transientRestrictedMeasure.getName()) !== null)
		{
			this.m_transientMemberMap.remove(instanceId);
			transientRestrictedMeasure = oFF.XObjectExt.release(transientRestrictedMeasure);
		}
		else
		{
			if (transientRestrictedMeasure.getAliasName() !== null && dimensionContext.getFreePlaceholderIds().size() === 0)
			{
				messageManager.addError(oFF.ErrorCodes.FREE_PLACEHOLDER_NOT_FOUND, oFF.ErrorMessages.FREE_PLACEHOLDER_NOT_FOUND);
				return;
			}
			dimensionContext.addMeasure(transientRestrictedMeasure);
		}
	}
	let isCrossCalc = dimensionContext.getDimensionType().isTypeOf(oFF.DimensionType.MEASURE_STRUCTURE);
	if (this.isAutoSignFlip() && this.getQueryModel().getAccountDimension() !== null && (this.isCountExceptionAggregation() || isCrossCalc))
	{
		let countMemberName = this.getTransientSignFlipMemberName();
		let transientSignFlipMember = this.generateExceptionAggregation(context);
		transientSignFlipMember.setName(countMemberName);
		this.m_transientSignFlipMemberMap.put(instanceId, transientSignFlipMember);
		if (dimensionContext.getDimensionType().isTypeOf(oFF.DimensionType.ACCOUNT))
		{
			transientSignFlipMember.setAliasName(countMemberName);
		}
		if (dimensionContext.getStructureMember(countMemberName) !== null)
		{
			this.m_transientSignFlipMemberMap.remove(instanceId);
			transientSignFlipMember = oFF.XObjectExt.release(transientSignFlipMember);
		}
		else
		{
			if (transientSignFlipMember.getAliasName() !== null && dimensionContext.getFreePlaceholderIds().size() === 0)
			{
				messageManager.addError(oFF.ErrorCodes.FREE_PLACEHOLDER_NOT_FOUND, oFF.ErrorMessages.FREE_PLACEHOLDER_NOT_FOUND);
				return;
			}
			dimensionContext.addMeasure(transientSignFlipMember);
		}
	}
};
oFF.QExceptionAggregationMeasure.prototype.generateTransientRestrictedMeasure = function(context)
{
	let restrictedMeasure = null;
	if (this.hasFilterOnExceptionAggregation() && !this.isExceptionAggregationOnSelectionApplied(context))
	{
		restrictedMeasure = this.createRestrictedMeasure(context);
		if (this.getDimension().getPlaceholderIds().size() > 0)
		{
			restrictedMeasure.setAliasName(oFF.XStringUtils.concatenate2(this.getName(), "_rm"));
		}
		else
		{
			restrictedMeasure.setName(oFF.XStringUtils.concatenate2(this.getName(), "_rm"));
		}
	}
	return restrictedMeasure;
};
oFF.QExceptionAggregationMeasure.prototype.getConditionType = function()
{
	return this.m_conditionType;
};
oFF.QExceptionAggregationMeasure.prototype.getFilter = function()
{
	return this.m_filter;
};
oFF.QExceptionAggregationMeasure.prototype.getFormulaMeasure = function(context, restrictedMeasure)
{
	let formula = oFF.QFormulaMeasure._createFormulaMeasure(context, this.getDimensionContext(context.getQueryManager()));
	formula.setName(this.getName());
	formula.setText(this.getText());
	formula.setAutoSignFlip(this.isAutoSignFlip());
	if (this.getNumericScale() !== null)
	{
		formula.setNumericScale(this.getNumericScale().getInteger());
	}
	let formulaItemMeasureNode;
	if (this.isCountDimension())
	{
		formulaItemMeasureNode = oFF.QFactory.createFormulaConstantWithIntValue(context, 1);
	}
	else
	{
		formulaItemMeasureNode = oFF.QFactory.createFormulaMemberWithName(context, this.m_measure);
	}
	if (oFF.notNull(restrictedMeasure))
	{
		let nullNumberConstant = oFF.QFactory.createFormulaConstant(context);
		nullNumberConstant.setNullByType(oFF.XValueType.DOUBLE);
		let formulaItemRM = oFF.QFactory.createFormulaMemberWithName(context, restrictedMeasure.getName());
		let isNullFunction = oFF.QFactory.createFormulaFunctionWithName(context, oFF.FormulaOperator.ISNULL.getName());
		let ifFunction = oFF.QFactory.createFormulaFunctionWithName(context, oFF.FormulaOperator.IF.getName());
		isNullFunction.add(formulaItemRM);
		ifFunction.add(isNullFunction);
		if (this.m_conditionType === oFF.ExceptionAggregationConditionType.VALUES_NOT_IN)
		{
			ifFunction.add(formulaItemMeasureNode);
			ifFunction.add(nullNumberConstant);
		}
		else if (this.m_conditionType === oFF.ExceptionAggregationConditionType.VALUES_IN)
		{
			ifFunction.add(nullNumberConstant);
			ifFunction.add(formulaItemMeasureNode);
		}
		else
		{
			throw oFF.XException.createIllegalArgumentException("Unknown exception aggregation condition handler type.");
		}
		formula.setFormula(ifFunction);
	}
	else
	{
		formula.setFormula(formulaItemMeasureNode);
	}
	return formula;
};
oFF.QExceptionAggregationMeasure.prototype.getIsExceptionAggregationOnSelectionEnabled = function()
{
	return this.m_exceptionAggregationOnSelection;
};
oFF.QExceptionAggregationMeasure.prototype.getMeasure = function()
{
	return this.m_measure;
};
oFF.QExceptionAggregationMeasure.prototype.getModelCapabilities = function()
{
	return this.m_exceptionAggregationMeasureCapabilities;
};
oFF.QExceptionAggregationMeasure.prototype.getRestrictedMeasure = function(context)
{
	let restrictedMeasure = null;
	if (this.isExceptionAggregationOnSelectionApplied(context))
	{
		restrictedMeasure = this.createRestrictedMeasure(context);
		restrictedMeasure.setName(this.getName());
	}
	return restrictedMeasure;
};
oFF.QExceptionAggregationMeasure.prototype.getTopLevelDependentFieldNames = function(context)
{
	let usedFields = oFF.XHashSetOfString.create();
	usedFields.addAll(oFF.QStructureMember.prototype.getTopLevelDependentFieldNames.call( this , context));
	let cartesianProduct = this.getFilter().getCartesianProduct();
	let complexSelectionRoot = this.getFilter().getComplexRoot();
	if (oFF.notNull(cartesianProduct))
	{
		let sizeCp = cartesianProduct.size();
		for (let i = 0; i < sizeCp; i++)
		{
			usedFields.add(cartesianProduct.getCartesianChild(i).getFieldMetadata().getName());
		}
	}
	else if (oFF.notNull(complexSelectionRoot))
	{
		this.addFieldsUsedInComplexContainer(complexSelectionRoot, usedFields);
	}
	return usedFields.getValuesAsReadOnlyList();
};
oFF.QExceptionAggregationMeasure.prototype.getTopLevelDependentMemberNames = function(context)
{
	let memberNames = oFF.XList.create();
	if (!this.isCountDimension())
	{
		memberNames.add(this.m_measure);
	}
	return memberNames;
};
oFF.QExceptionAggregationMeasure.prototype.getTransientSignFlipMemberName = function()
{
	return oFF.XStringUtils.concatenate2(this.getName(), "_signflip");
};
oFF.QExceptionAggregationMeasure.prototype.hasFilterOnExceptionAggregation = function()
{
	let hasFilterOnExceptionAggregation;
	let filterRootElement = this.m_filter.getFilterRootElement();
	if (oFF.notNull(filterRootElement))
	{
		if (this.m_filter.isComplexFilter())
		{
			hasFilterOnExceptionAggregation = filterRootElement.size() > 0;
		}
		else
		{
			let cartesianProduct = this.m_filter.getCartesianProduct();
			if (oFF.notNull(cartesianProduct) && !cartesianProduct.isEmpty())
			{
				let count = cartesianProduct.size();
				let hasAllEmptyFilter = true;
				for (let i = 0; i < count; i++)
				{
					let filterList = cartesianProduct.getCartesianChild(i);
					if (!filterList.isEmpty())
					{
						hasAllEmptyFilter = false;
						break;
					}
				}
				hasFilterOnExceptionAggregation = !hasAllEmptyFilter;
			}
			else
			{
				hasFilterOnExceptionAggregation = false;
			}
		}
	}
	else
	{
		hasFilterOnExceptionAggregation = false;
	}
	return hasFilterOnExceptionAggregation;
};
oFF.QExceptionAggregationMeasure.prototype.isAverageExceptionAggregation = function()
{
	let exceptionAggregationType = this.getExceptionAggregationType();
	return exceptionAggregationType === oFF.AggregationType.AVERAGE || exceptionAggregationType === oFF.AggregationType.AVERAGE_NULL || exceptionAggregationType === oFF.AggregationType.AVERAGE_NULL_ZERO;
};
oFF.QExceptionAggregationMeasure.prototype.isCountDimension = function()
{
	return this.isCountExceptionAggregation() && oFF.isNull(this.m_measure);
};
oFF.QExceptionAggregationMeasure.prototype.isCountExceptionAggregation = function()
{
	let exceptionAggregationType = this.getExceptionAggregationType();
	return exceptionAggregationType === oFF.AggregationType.COUNT || exceptionAggregationType === oFF.AggregationType.COUNT_NULL || exceptionAggregationType === oFF.AggregationType.COUNT_NULL_ZERO;
};
oFF.QExceptionAggregationMeasure.prototype.isExceptionAggregationOnSelectionApplied = function(context)
{
	if (this.m_exceptionAggregationOnSelection)
	{
		let dimensionContext = context.getQueryModel().getDimensionByName(this.getDimension().getName());
		let accountDimension = context.getQueryModel().getAccountDimension();
		let dimensionType = dimensionContext.getDimensionType();
		if (oFF.notNull(accountDimension))
		{
			return false;
		}
		if (dimensionType !== oFF.DimensionType.MEASURE_STRUCTURE)
		{
			return false;
		}
		if (this.m_conditionType === oFF.ExceptionAggregationConditionType.VALUES_NOT_IN || oFF.isNull(this.m_measure) || this.hasFilterOnExceptionAggregation())
		{
			return false;
		}
		let isExAggDimensionInAxis = false;
		let iter = this.getExceptionAggregationDimensions().getIterator();
		while (iter.hasNext())
		{
			let exceptionAggregationDimension = context.getQueryModel().getDimensionByName(iter.next());
			if (oFF.notNull(exceptionAggregationDimension) && exceptionAggregationDimension.getAxisType() !== oFF.AxisType.FREE)
			{
				isExAggDimensionInAxis = true;
				break;
			}
		}
		let measure = dimensionContext.getStructureMember(this.m_measure);
		if (oFF.isNull(measure) || measure.getMemberType() !== oFF.MemberType.BASIC_MEASURE || isExAggDimensionInAxis)
		{
			return false;
		}
		return this.isCountExceptionAggregation() || this.isAverageExceptionAggregation() || this.isFirstOrLastExceptionAggregation();
	}
	return false;
};
oFF.QExceptionAggregationMeasure.prototype.isFirstOrLastExceptionAggregation = function()
{
	let exceptionAggregationType = this.getExceptionAggregationType();
	return exceptionAggregationType === oFF.AggregationType.FIRST || exceptionAggregationType === oFF.AggregationType.LAST;
};
oFF.QExceptionAggregationMeasure.prototype.isVersionAggregatedInternal = function(context, visitedMembers, rootMember)
{
	let isVersionAggregated = oFF.QStructureMember.prototype.isVersionAggregatedInternal.call( this , context, visitedMembers, rootMember);
	if (!isVersionAggregated)
	{
		let versionDimension = context.getQueryModel().getVersionDimension();
		if (oFF.notNull(versionDimension) && this.hasFilterOnExceptionAggregation())
		{
			let cartesianList = this.getFilter().getCartesianList(versionDimension);
			isVersionAggregated = oFF.QFilterUtil.isSingleValueFilterCartesianList(cartesianList);
		}
	}
	return isVersionAggregated;
};
oFF.QExceptionAggregationMeasure.prototype.releaseObject = function()
{
	this.m_exceptionAggregationMeasureCapabilities = oFF.XObjectExt.release(this.m_exceptionAggregationMeasureCapabilities);
	this.m_measure = null;
	this.m_filter = oFF.XObjectExt.release(this.m_filter);
	this.m_transientMemberMap = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_transientMemberMap);
	this.m_transientSignFlipMemberMap = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_transientSignFlipMemberMap);
	oFF.QStructureMember.prototype.releaseObject.call( this );
};
oFF.QExceptionAggregationMeasure.prototype.setConditionType = function(type)
{
	let oldValue = this.m_conditionType;
	this.m_conditionType = type;
	this.notifyPropertyConstantChanged(oFF.QMeasureProperties.QY_CONDITION_TYPE, oldValue, type);
};
oFF.QExceptionAggregationMeasure.prototype.setIsExceptionAggregationOnSelectionEnabled = function(isExceptionAggregationOnSelectionEnabled)
{
	let oldValue = this.m_exceptionAggregationOnSelection;
	this.m_exceptionAggregationOnSelection = isExceptionAggregationOnSelectionEnabled;
	this.notifyPropertyBooleanChanged(oFF.QMeasureProperties.QY_EXCEPTION_AGGREGATION_ON_SELECTION, oldValue, isExceptionAggregationOnSelectionEnabled);
};
oFF.QExceptionAggregationMeasure.prototype.setMeasure = function(measureName)
{
	this.m_measure = measureName;
	this.notifyNodeChanged();
};
oFF.QExceptionAggregationMeasure.prototype.setParent = function(parent)
{
	oFF.QStructureMember.prototype.setParent.call( this , parent);
	this.m_exceptionAggregationMeasureCapabilities.updateContext(this);
};
oFF.QExceptionAggregationMeasure.prototype.setupExceptionAggregationMeasure = function(context, structure)
{
	oFF.QStructureMember.prototype.setupStructureMember.call( this , context, structure, oFF.MemberType.EXCEPTION_AGGREGATION);
	this.m_exceptionAggregationMeasureCapabilities = oFF.QFactory.createCapabilitiesDecorator(this);
	this.m_exceptionAggregationMeasureCapabilities.setSupportsIntersectLayers(false);
	this.m_exceptionAggregationMeasureCapabilities.setSupportsVisibilityFilter(false);
	this.m_exceptionAggregationMeasureCapabilities.setSupportsCellValueOperand(false);
	this.m_exceptionAggregationMeasureCapabilities.setSupportsComplexFilter(true);
	this.m_filter = oFF.QFactory.createFilterExpression(this, this);
	this.m_conditionType = oFF.ExceptionAggregationConditionType.VALUES_IN;
	this.m_exceptionAggregationOnSelection = false;
	this.m_transientMemberMap = oFF.XHashMapByString.create();
	this.m_transientSignFlipMemberMap = oFF.XHashMapByString.create();
};

oFF.QFormulaMeasure = function() {};
oFF.QFormulaMeasure.prototype = new oFF.QStructureMember();
oFF.QFormulaMeasure.prototype._ff_c = "QFormulaMeasure";

oFF.QFormulaMeasure._createFormulaMeasure = function(context, structure)
{
	let capabilities = context.getModelCapabilities();
	if (!capabilities.supportsFormulaMeasures())
	{
		oFF.noSupport();
	}
	let member = new oFF.QFormulaMeasure();
	member.setupFormulaMeasure(context, structure);
	return member;
};
oFF.QFormulaMeasure.prototype.m_formula = null;
oFF.QFormulaMeasure.prototype.m_formulaText = null;
oFF.QFormulaMeasure.prototype.m_formulaType = null;
oFF.QFormulaMeasure.prototype.m_inverseFormulas = null;
oFF.QFormulaMeasure.prototype.m_isAutoSignFlipForRestrictedMeasureOnly = false;
oFF.QFormulaMeasure.prototype.m_isCalculatedBeforeAggregation = false;
oFF.QFormulaMeasure.prototype.m_isEditable = false;
oFF.QFormulaMeasure.prototype.m_iteration = null;
oFF.QFormulaMeasure.prototype.m_restrictedMeasureNames = null;
oFF.QFormulaMeasure.prototype.copyFromInternal = function(other, flags)
{
	if (other.getMemberType() !== this.getMemberType())
	{
		return;
	}
	oFF.QStructureMember.prototype.copyFromInternal.call( this , other, flags);
	this.copySharableProperties(other, false);
};
oFF.QFormulaMeasure.prototype.copySharableProperties = function(origin, isShallowCopy)
{
	oFF.QStructureMember.prototype.copySharableProperties.call( this , origin, isShallowCopy);
	let originFormulaMeasure = origin;
	this.m_isCalculatedBeforeAggregation = originFormulaMeasure.m_isCalculatedBeforeAggregation;
	if (oFF.notNull(originFormulaMeasure.m_formula))
	{
		if (isShallowCopy && originFormulaMeasure.getDimension().getDimensionType() !== oFF.DimensionType.ACCOUNT)
		{
			this.m_formula = originFormulaMeasure.m_formula;
			this.m_iteration = originFormulaMeasure.m_iteration;
		}
		else
		{
			this.m_formula = originFormulaMeasure.m_formula.cloneOlapComponent(this, this);
			if (oFF.notNull(originFormulaMeasure.m_iteration))
			{
				this.m_iteration = originFormulaMeasure.m_iteration.cloneOlapComponent(this, this);
			}
		}
	}
	let orgInverseFormulas = originFormulaMeasure.getInverseFormulaList();
	if (oFF.XCollectionUtils.hasElements(orgInverseFormulas))
	{
		let numberOfInverseFormulas = orgInverseFormulas.size();
		let inverseFormulas = this.getInverseFormulaList();
		inverseFormulas.clear();
		for (let i = 0; i < numberOfInverseFormulas; i++)
		{
			let originInverseFormula = orgInverseFormulas.get(i);
			let inverseFormula = oFF.QFormulaInverseFormula.createForCopy(this.getContext(), this);
			inverseFormula.copyFrom(originInverseFormula, null);
			inverseFormulas.add(inverseFormula);
		}
		inverseFormulas.copyFrom(orgInverseFormulas, null);
	}
	this.m_isAutoSignFlipForRestrictedMeasureOnly = originFormulaMeasure.m_isAutoSignFlipForRestrictedMeasureOnly;
	this.m_formulaType = originFormulaMeasure.m_formulaType;
};
oFF.QFormulaMeasure.prototype.exportRuntimeObject = function(context, messageManager)
{
	let runtimeObj = oFF.QStructureMember.prototype.exportRuntimeObject.call( this , context, messageManager);
	if (oFF.isNull(runtimeObj))
	{
		return null;
	}
	return runtimeObj;
};
oFF.QFormulaMeasure.prototype.getCustomMeasureNames = function()
{
	return oFF.XOptional.ofNullable(this.m_restrictedMeasureNames);
};
oFF.QFormulaMeasure.prototype.getDimensionNamesFromRequiredFieldNames = function(requiredFieldNames, queryModel, messageManager, missingFieldNames)
{
	let allRequiredDimensionNames = oFF.QStructureMember.prototype.getDimensionNamesFromRequiredFieldNames.call( this , requiredFieldNames, queryModel, messageManager, missingFieldNames);
	let iterator = this.getExceptionAggregationDimensions().getIterator();
	while (iterator.hasNext())
	{
		allRequiredDimensionNames.removeElement(iterator.next());
	}
	let iterator2 = allRequiredDimensionNames.getIterator();
	if (this.getExceptionAggregationDimensions().size() > 0)
	{
		while (iterator2.hasNext())
		{
			let fieldName = iterator2.next();
			let field = queryModel.getFieldByName(fieldName);
			if (oFF.notNull(field) && field.getDimension() !== null && field.getDimension().getName() !== null && this.getExceptionAggregationDimensions().contains(field.getDimension().getName()))
			{
				allRequiredDimensionNames.removeElement(fieldName);
			}
		}
	}
	return allRequiredDimensionNames;
};
oFF.QFormulaMeasure.prototype.getFormula = function()
{
	return this.m_formula;
};
oFF.QFormulaMeasure.prototype.getFormulaText = function()
{
	return oFF.XOptional.ofNullable(this.m_formulaText);
};
oFF.QFormulaMeasure.prototype.getFormulaType = function()
{
	return this.m_formulaType;
};
oFF.QFormulaMeasure.prototype.getInverseFormulaList = function()
{
	return this.m_inverseFormulas;
};
oFF.QFormulaMeasure.prototype.getIteration = function()
{
	return this.m_iteration;
};
oFF.QFormulaMeasure.prototype.getRequiredDimensionAndFieldNames = function()
{
	let superRequiredDimensionAndFieldNames = oFF.QStructureMember.prototype.getRequiredDimensionAndFieldNames.call( this );
	if (this.isModelDefinedMember())
	{
		return superRequiredDimensionAndFieldNames;
	}
	let formulaItemInfo = oFF.FormulaItemUtils.getFieldNamesFromFormula(this.getFormula());
	let dimensionNames = oFF.XHashSetOfString.create();
	dimensionNames.addAll(superRequiredDimensionAndFieldNames.getFirstObject());
	dimensionNames.addAll(formulaItemInfo.getDimensionNames());
	let fieldNames = oFF.XHashSetOfString.create();
	fieldNames.addAll(superRequiredDimensionAndFieldNames.getSecondObject());
	fieldNames.addAll(formulaItemInfo.getAttributeNames());
	let queryModel = this.getQueryModel();
	if (oFF.notNull(queryModel) && queryModel.getAccountDimension() !== null)
	{
		dimensionNames.removeElement(queryModel.getAccountDimension().getName());
		let fieldNamesIterator = fieldNames.getIterator();
		while (fieldNamesIterator.hasNext())
		{
			let fieldName = fieldNamesIterator.next();
			let field = queryModel.getFieldByNameOrAlias(fieldName);
			if (oFF.notNull(field) && field.getDimension() !== null && oFF.XString.isEqual(field.getDimension().getName(), queryModel.getAccountDimension().getName()))
			{
				fieldNames.removeElement(fieldName);
				break;
			}
		}
	}
	return oFF.XPair.create(dimensionNames.getValuesAsReadOnlyList(), fieldNames.getValuesAsReadOnlyList());
};
oFF.QFormulaMeasure.prototype.getTopLevelDependentFieldNames = function(context)
{
	let usedFields = oFF.XHashSetOfString.create();
	usedFields.addAll(oFF.QStructureMember.prototype.getTopLevelDependentFieldNames.call( this , context));
	let formulaItemInfo = oFF.FormulaItemUtils.getFieldNamesFromFormula(this.getFormula());
	usedFields.addAll(formulaItemInfo.getAttributeNames());
	return usedFields.getValuesAsReadOnlyList();
};
oFF.QFormulaMeasure.prototype.getTopLevelDependentMemberNames = function(context)
{
	let formulaItemInfo = oFF.FormulaItemUtils.getFieldNamesFromFormula(this.getFormula());
	return formulaItemInfo.getMemberNames();
};
oFF.QFormulaMeasure.prototype.getTopLevelDependentMembers = function(context, messageManager, validateAugmentedAccountMembers)
{
	if (this.isMultiDataSourceMember())
	{
		let topLevelDependentMembers = oFF.XList.create();
		let clientQueryObjectManager = context.getOlapEnv().getClientQueryObjectManager();
		let clientQueryObjectStorageName = context.getQueryManager().getClientQueryObjectStorageName();
		let formulaItemMembers = oFF.FormulaItemUtils.getFormulaMembers(this.getFormula());
		let formulaItemMembersIter = formulaItemMembers.getIterator();
		while (formulaItemMembersIter.hasNext())
		{
			let formulaItemMember = formulaItemMembersIter.next();
			let formulaItemMemberName = formulaItemMember.getMemberName();
			let dimensionContext = formulaItemMember.getDimensionContext();
			let member = null;
			if (oFF.notNull(dimensionContext))
			{
				if (context.getQueryManager().getInitSettings().getMode() === oFF.QueryManagerMode.BLENDING)
				{
					member = oFF.BlendingUtils.getMatchingLeafMemberFromLoadedBlendedMember(context.getQueryModel(), formulaItemMemberName, true);
				}
				if (oFF.isNull(member))
				{
					member = dimensionContext.getStructureMemberByAliasOrMember(formulaItemMemberName);
				}
			}
			if (oFF.isNull(member))
			{
				member = clientQueryObjectManager.getStructuredMember(formulaItemMemberName, clientQueryObjectStorageName, true);
			}
			if (oFF.notNull(member))
			{
				topLevelDependentMembers.add(member);
			}
			else if (oFF.notNull(messageManager) && (oFF.notNull(dimensionContext) && dimensionContext.getDimensionType() !== oFF.DimensionType.ACCOUNT || validateAugmentedAccountMembers))
			{
				let args = oFF.XList.create();
				args.add(formulaItemMemberName);
				let errorMsg = oFF.ErrorMessages.getText(oFF.ErrorMessages.MEASURE_MISSING_DEPENDENT, args, this.getAliasOrMemberName(), null);
				messageManager.addWarning(oFF.ErrorCodes.MEASURE_MISSING_DEPENDENT, errorMsg);
			}
		}
		return topLevelDependentMembers;
	}
	else
	{
		return oFF.QStructureMember.prototype.getTopLevelDependentMembers.call( this , context, messageManager, validateAugmentedAccountMembers);
	}
};
oFF.QFormulaMeasure.prototype.isAutoSignFlipRestrictedMeasureOnly = function()
{
	return this.m_isAutoSignFlipForRestrictedMeasureOnly;
};
oFF.QFormulaMeasure.prototype.isCalculatedBeforeAggregation = function()
{
	return this.m_isCalculatedBeforeAggregation;
};
oFF.QFormulaMeasure.prototype.isEditable = function()
{
	return this.m_isEditable;
};
oFF.QFormulaMeasure.prototype.releaseObject = function()
{
	this.m_formula = oFF.XObjectExt.release(this.m_formula);
	this.m_iteration = oFF.XObjectExt.release(this.m_iteration);
	this.m_inverseFormulas = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_inverseFormulas);
	this.m_formulaType = null;
	this.m_formulaText = null;
	this.m_restrictedMeasureNames = oFF.XObjectExt.release(this.m_restrictedMeasureNames);
	oFF.QStructureMember.prototype.releaseObject.call( this );
};
oFF.QFormulaMeasure.prototype.setAutoSignFlipRestrictedMeasureOnly = function(autoSignFlipRestrictedMeasureOnly)
{
	let oldValue = this.m_isAutoSignFlipForRestrictedMeasureOnly;
	this.m_isAutoSignFlipForRestrictedMeasureOnly = autoSignFlipRestrictedMeasureOnly;
	this.notifyPropertyBooleanChanged(oFF.QMeasureProperties.QY_AUTO_SIGN_FLIP_FOR_RM_ONLY, oldValue, autoSignFlipRestrictedMeasureOnly);
};
oFF.QFormulaMeasure.prototype.setCustomMeasureNames = function(allRestrictedMeasureNames)
{
	this.m_restrictedMeasureNames = allRestrictedMeasureNames;
};
oFF.QFormulaMeasure.prototype.setFormula = function(element)
{
	this.setFormulaInternal(element);
	this.notifyNodeChanged();
};
oFF.QFormulaMeasure.prototype.setFormulaInternal = function(element)
{
	let elementBase = element;
	if (oFF.notNull(elementBase))
	{
		elementBase.setParent(this);
	}
	this.m_formula = element;
};
oFF.QFormulaMeasure.prototype.setFormulaText = function(formulaText)
{
	this.m_formulaText = formulaText;
};
oFF.QFormulaMeasure.prototype.setFormulaType = function(formulaType)
{
	this.m_formulaType = formulaType;
	this.notifyNodeChanged();
};
oFF.QFormulaMeasure.prototype.setIsCalculatedBeforeAggregation = function(calculateBeforeAggregation)
{
	let oldValue = this.m_isCalculatedBeforeAggregation;
	this.m_isCalculatedBeforeAggregation = calculateBeforeAggregation;
	this.notifyPropertyBooleanChanged(oFF.QMeasureProperties.QY_CALCULATE_BEFORE_AGGREGATION, oldValue, calculateBeforeAggregation);
};
oFF.QFormulaMeasure.prototype.setIsEditable = function(isEditable)
{
	this.m_isEditable = isEditable;
};
oFF.QFormulaMeasure.prototype.setIteration = function(iteration)
{
	this.setIterationInternal(iteration);
	this.notifyNodeChanged();
};
oFF.QFormulaMeasure.prototype.setIterationInternal = function(iteration)
{
	let elementBase = iteration;
	if (oFF.notNull(elementBase))
	{
		elementBase.setParent(this);
	}
	this.m_iteration = iteration;
};
oFF.QFormulaMeasure.prototype.setupFormulaMeasure = function(context, structure)
{
	oFF.QStructureMember.prototype.setupStructureMember.call( this , context, structure, oFF.MemberType.FORMULA);
	this.m_inverseFormulas = oFF.QModelComponentList.createModelComponentList(context, this, true, "InverseFormulae");
	this.m_isEditable = false;
};

oFF.QRestrictedMeasure = function() {};
oFF.QRestrictedMeasure.prototype = new oFF.QStructureMember();
oFF.QRestrictedMeasure.prototype._ff_c = "QRestrictedMeasure";

oFF.QRestrictedMeasure._createRestrictedMeasure = function(context, structure)
{
	let capabilities = context.getModelCapabilities();
	if (!capabilities.supportsRestrictedMeasures())
	{
		oFF.noSupport();
	}
	let queryModel = context.getQueryModel();
	if (queryModel.isBlendingModel())
	{
		oFF.noSupport();
	}
	let member = new oFF.QRestrictedMeasure();
	member.setupRestrictedMeasure(context, structure);
	return member;
};
oFF.QRestrictedMeasure.prototype.m_aggregationDimensionName = null;
oFF.QRestrictedMeasure.prototype.m_disableIgnoreExternalDimensionOnFixedFilters = false;
oFF.QRestrictedMeasure.prototype.m_filter = null;
oFF.QRestrictedMeasure.prototype.m_filterOnVirtualMeasureCount = false;
oFF.QRestrictedMeasure.prototype.m_flattenDependentRestrictedMeasures = false;
oFF.QRestrictedMeasure.prototype.m_restrictedMeasureCapabilities = null;
oFF.QRestrictedMeasure.prototype.m_timeOperation = null;
oFF.QRestrictedMeasure.prototype.m_transientIgnoredExternalDimensions = null;
oFF.QRestrictedMeasure.prototype.m_transientTimeSelection = null;
oFF.QRestrictedMeasure.prototype.buildFlattenedSelection = function(context, filterRoot, messageManager)
{
	let copyFilter = oFF.QFactory.createFilterExpression(context, this);
	copyFilter.copyFrom(this.getFilter(), null);
	let restrictedMeasure = this.getDependentRestrictedMeasure(context, messageManager);
	if (oFF.notNull(restrictedMeasure) && !restrictedMeasure.isIgnoringAllExternalDimensions() && restrictedMeasure.getIgnoredExternalDimensions().size() === 0 && restrictedMeasure.getExceptionAggregationType() === null && !restrictedMeasure.isModelDefinedMember())
	{
		restrictedMeasure.buildFlattenedSelection(context, filterRoot, messageManager);
		oFF.QFilterUtil.clearSelectionsInContainerByDimension(this.getDimension().getName(), copyFilter);
	}
	filterRoot.add(copyFilter.getFilterRootElement());
};
oFF.QRestrictedMeasure.prototype.clearRunningAggregation = function()
{
	this.setRunningAggregationOperator(null);
	this.setRunningAggregationInitDimension(null);
};
oFF.QRestrictedMeasure.prototype.clearTimeOperation = function()
{
	this.m_timeOperation = oFF.XObjectExt.release(this.m_timeOperation);
	this.notifyNodeChanged();
};
oFF.QRestrictedMeasure.prototype.convertFilterTimeRangeSelections = function(queryModel, messageManager)
{
	let transientFilters = oFF.QFilterUtil.collectFilterComponentOfType(this.getFilter(), oFF.FilterComponentType.FILTER_TIME_RANGE, true);
	let iterator = transientFilters.getIterator();
	while (iterator.hasNext())
	{
		let timeRangeFilter = iterator.next();
		timeRangeFilter.generateTransientObjects(queryModel, messageManager);
	}
	return null;
};
oFF.QRestrictedMeasure.prototype.copyFromInternal = function(other, flags)
{
	if (other.getMemberType() !== this.getMemberType())
	{
		return;
	}
	oFF.QStructureMember.prototype.copyFromInternal.call( this , other, flags);
	this.copySharableProperties(other, false);
};
oFF.QRestrictedMeasure.prototype.copySharableProperties = function(origin, isShallowCopy)
{
	oFF.QStructureMember.prototype.copySharableProperties.call( this , origin, isShallowCopy);
	if (origin.getMemberType() !== oFF.MemberType.RESTRICTED_MEASURE)
	{
		return;
	}
	let originRestrictedMeasure = origin;
	this.m_aggregationDimensionName = originRestrictedMeasure.m_aggregationDimensionName;
	this.m_flattenDependentRestrictedMeasures = originRestrictedMeasure.m_flattenDependentRestrictedMeasures;
	this.m_disableIgnoreExternalDimensionOnFixedFilters = originRestrictedMeasure.m_disableIgnoreExternalDimensionOnFixedFilters;
	if (isShallowCopy)
	{
		this.m_timeOperation = originRestrictedMeasure.m_timeOperation;
		if (!this.m_flattenDependentRestrictedMeasures && originRestrictedMeasure.getDimension().getDimensionType() !== oFF.DimensionType.ACCOUNT)
		{
			this.m_filter = originRestrictedMeasure.m_filter;
		}
		else
		{
			this.m_filter.copyFrom(originRestrictedMeasure.m_filter, null);
		}
	}
	else
	{
		this.m_filter.copyFrom(originRestrictedMeasure.m_filter, null);
		if (oFF.notNull(originRestrictedMeasure.m_timeOperation))
		{
			this.m_timeOperation = oFF.QTimeOperation.create(this.getContext(), this);
			this.m_timeOperation.copyFrom(originRestrictedMeasure.m_timeOperation, null);
		}
	}
	this.m_filterOnVirtualMeasureCount = originRestrictedMeasure.m_filterOnVirtualMeasureCount;
};
oFF.QRestrictedMeasure.prototype.exportRuntimeObject = function(context, messageManager)
{
	let runtimeObj = oFF.QStructureMember.prototype.exportRuntimeObject.call( this , context, messageManager);
	if (oFF.isNull(runtimeObj))
	{
		return null;
	}
	this.setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_DO_NOT_RAISEEVENTS);
	context.getQueryModel().setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_DO_NOT_RAISEEVENTS);
	try
	{
		if (this.needsTransientTimeSelection(context, messageManager))
		{
			if (oFF.notNull(this.m_transientTimeSelection))
			{
				runtimeObj.setTransientTimeSelection(this.m_transientTimeSelection);
			}
			else
			{
				runtimeObj.generateTransientTimeSelection(context.getQueryModel(), messageManager);
			}
			runtimeObj.generateTransientIgnoredExternalDimensions(context.getQueryModel(), messageManager);
			if (oFF.isNull(runtimeObj.m_transientTimeSelection))
			{
				this.resumeEventing();
				context.getQueryModel().resumeEventing();
				return null;
			}
		}
		if (runtimeObj.m_flattenDependentRestrictedMeasures)
		{
			let complexFilter = oFF.QFactory.createFilterAnd(context);
			runtimeObj.buildFlattenedSelection(context, complexFilter, messageManager);
			runtimeObj.m_filter.setComplexRoot(complexFilter);
		}
		if (this.m_disableIgnoreExternalDimensionOnFixedFilters && (this.isIgnoringAllExternalDimensions() || this.getIgnoredExternalDimensions().size() > 0))
		{
			let selectionContainer = context.getQueryModel().getFilter().getFixedFilter();
			if (oFF.notNull(selectionContainer) && selectionContainer.getFilterRootElement() !== null)
			{
				let complexFixedFilterMerge = oFF.QFactory.createFilterAnd(context);
				let fixedFilterRootElement = selectionContainer.getFilterRootElement();
				complexFixedFilterMerge.add(fixedFilterRootElement);
				let copyRMFilter = oFF.QFactory.createFilterExpression(runtimeObj.getContext(), this);
				copyRMFilter.copyFrom(runtimeObj.m_filter, null);
				complexFixedFilterMerge.add(copyRMFilter.getFilterRootElement());
				runtimeObj.m_filter.setComplexRoot(complexFixedFilterMerge);
			}
		}
		if (this.validateFilterTimeRange(context.getQueryModel(), messageManager))
		{
			runtimeObj.convertFilterTimeRangeSelections(context, messageManager);
		}
		else
		{
			this.resumeEventing();
			context.getQueryModel().resumeEventing();
			return null;
		}
	}
	catch (t)
	{
		this.resumeEventing();
		context.getQueryModel().resumeEventing();
		return null;
	}
	this.resumeEventing();
	context.getQueryModel().resumeEventing();
	return runtimeObj;
};
oFF.QRestrictedMeasure.prototype.generateFlattenTransientIgnoredExternalDimensions = function(queryModel, messageManager, timeOperation)
{
	let transientIgnoredExternalDimensions = oFF.XHashSetOfString.create();
	if (oFF.notNull(timeOperation))
	{
		transientIgnoredExternalDimensions.addAll(timeOperation.generateTransientIgnoredExternalDimensions(queryModel, messageManager));
	}
	let dependentRestrictedMeasure = this.getDependentRestrictedMeasure(queryModel, messageManager);
	if (oFF.notNull(dependentRestrictedMeasure) && dependentRestrictedMeasure.needsTransientTimeSelection(queryModel, messageManager))
	{
		let dependentTimeOperation = dependentRestrictedMeasure.getTimeOperation();
		transientIgnoredExternalDimensions.addAll(dependentRestrictedMeasure.generateFlattenTransientIgnoredExternalDimensions(queryModel, messageManager, dependentTimeOperation));
	}
	if (transientIgnoredExternalDimensions.size() > 0)
	{
		return transientIgnoredExternalDimensions.getValuesAsReadOnlyList();
	}
	return null;
};
oFF.QRestrictedMeasure.prototype.generateFlattenTransientTimeSelection = function(queryModel, messageManager, originalTimeOperation, nestedTimeSelectionFilterContext)
{
	let warningsBeforeGeneration = messageManager.getWarnings().size();
	let transientTimeSelection = null;
	let needsTimeOperationClone = oFF.notNull(nestedTimeSelectionFilterContext);
	let timeOperation = null;
	if (oFF.notNull(originalTimeOperation))
	{
		if (needsTimeOperationClone)
		{
			timeOperation = oFF.QTimeOperation.create(queryModel, null);
			timeOperation.copyFrom(originalTimeOperation, null);
			timeOperation.setFilterElementContext(nestedTimeSelectionFilterContext);
		}
		else
		{
			timeOperation = originalTimeOperation;
		}
		transientTimeSelection = timeOperation.generateTransientTimeSelection(queryModel, messageManager);
	}
	let warningsAfterGeneration = messageManager.getWarnings().size();
	let dependentRestrictedMeasure = this.getDependentRestrictedMeasure(queryModel, messageManager);
	if (oFF.notNull(dependentRestrictedMeasure) && dependentRestrictedMeasure.needsTransientTimeSelection(queryModel, messageManager) && warningsAfterGeneration <= warningsBeforeGeneration)
	{
		let transientMessageManager = oFF.MessageManager.createMessageManagerExt(this.getSession());
		let dependentTransientTimeSelection = null;
		let dependentTimeOperation = dependentRestrictedMeasure.getTimeOperation();
		if (oFF.isNull(timeOperation) || oFF.isNull(transientTimeSelection))
		{
			dependentTransientTimeSelection = dependentRestrictedMeasure.generateFlattenTransientTimeSelection(queryModel, transientMessageManager, dependentTimeOperation, nestedTimeSelectionFilterContext);
		}
		else
		{
			dependentTransientTimeSelection = timeOperation.flattenDependentTimeOperations(queryModel, transientMessageManager, transientTimeSelection, dependentRestrictedMeasure);
		}
		if (oFF.isNull(dependentTransientTimeSelection) || transientMessageManager.getWarnings().size() > 0)
		{
			let errorMsgArgs = oFF.XList.create();
			let name = this.getText();
			if (oFF.XStringUtils.isNullOrEmpty(name))
			{
				name = this.getAliasOrMemberName();
			}
			errorMsgArgs.add(name);
			let dependentName = dependentRestrictedMeasure.getDisplayDescription();
			if (oFF.XStringUtils.isNullOrEmpty(dependentName))
			{
				dependentName = dependentRestrictedMeasure.getText();
				if (oFF.XStringUtils.isNullOrEmpty(dependentName))
				{
					dependentName = dependentRestrictedMeasure.getAliasOrMemberName();
				}
			}
			errorMsgArgs.add(dependentName);
			messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_INVALID_DEPENDENCY, oFF.ErrorMessages.getText(oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_INVALID_DEPENDENCY, errorMsgArgs, this.getAliasOrMemberName(), null));
		}
		else
		{
			let infoIterator = transientMessageManager.getInfos().getIterator();
			while (infoIterator.hasNext())
			{
				let message = infoIterator.next();
				messageManager.addInfo(message.getCode(), message.getText());
			}
		}
		transientTimeSelection = dependentTransientTimeSelection;
	}
	if (needsTimeOperationClone)
	{
		oFF.XObjectExt.release(timeOperation);
	}
	return transientTimeSelection;
};
oFF.QRestrictedMeasure.prototype.generateTransientIgnoredExternalDimensions = function(queryModel, messageManager)
{
	if (oFF.isNull(this.m_transientIgnoredExternalDimensions))
	{
		this.m_transientIgnoredExternalDimensions = this.generateFlattenTransientIgnoredExternalDimensions(queryModel, messageManager, this.m_timeOperation);
	}
};
oFF.QRestrictedMeasure.prototype.generateTransientObjects = function(context, messageManager)
{
	oFF.QStructureMember.prototype.generateTransientObjects.call( this , context, messageManager);
	if (!context.getQueryManager().isHierarchyToUDHConversionEnabledForCurrentRs() && this.needsUdhForTransientTimeSelection(context))
	{
		context.getQueryManager().getActiveResultSetContainer().enableHierarchyToUDHConversion(true);
	}
};
oFF.QRestrictedMeasure.prototype.generateTransientTimeSelection = function(queryModel, messageManager)
{
	if (oFF.isNull(this.m_transientTimeSelection))
	{
		this.m_transientTimeSelection = this.generateFlattenTransientTimeSelection(queryModel, messageManager, this.m_timeOperation, null);
	}
};
oFF.QRestrictedMeasure.prototype.getAggregationDimensionName = function()
{
	return this.m_aggregationDimensionName;
};
oFF.QRestrictedMeasure.prototype.getAllRequiredDimensionNames = function(context, messageManager, missingFieldNames)
{
	let allRequiredDimensionNames = oFF.QStructureMember.prototype.getAllRequiredDimensionNames.call( this , context, messageManager, missingFieldNames);
	allRequiredDimensionNames.addAll(this.getNestedTimeOperationDimensionNames(context, messageManager));
	return allRequiredDimensionNames;
};
oFF.QRestrictedMeasure.prototype.getDependentRestrictedMeasure = function(context, messageManager)
{
	let dependentMemberNames = this.getTopLevelDependentMemberNames(this.getContext());
	let memberNamesIter = dependentMemberNames.getIterator();
	let isPrimary = oFF.XString.isEqual(this.getDimension().getName(), this.getQueryModel().getPrimaryCalculationDimension().getName());
	if (dependentMemberNames.size() === 1)
	{
		let memberName = memberNamesIter.next();
		if (oFF.XString.startsWith(memberName, "$$") && oFF.XString.endsWith(memberName, "$$"))
		{
			return null;
		}
		let member = this.getDimension().getStructureMemberByAliasOrMember(memberName);
		if (oFF.isNull(member))
		{
			let storageName = context.getQueryManager().getClientQueryObjectStorageName();
			if (oFF.isNull(storageName))
			{
				storageName = this.getStorageName();
			}
			member = this.getSharedStructuredMember(memberName, storageName, isPrimary);
			if (oFF.isNull(member))
			{
				member = this.getDependentAccountDimensionMember(context.getQueryManager(), memberName);
			}
		}
		if (oFF.isNull(member) && this.getDimension().getDimensionType() !== oFF.DimensionType.ACCOUNT)
		{
			let errorMsgArgs = oFF.XList.create();
			errorMsgArgs.add(memberName);
			let errorMessage = oFF.ErrorMessages.getText(oFF.ErrorMessages.MEASURE_MISSING_DEPENDENT, errorMsgArgs, this.getAliasOrMemberName(), null);
			if (oFF.notNull(messageManager) && (oFF.isNull(context) || this.isMeasureInUse(context, false)))
			{
				messageManager.addWarning(oFF.ErrorCodes.MEASURE_MISSING_DEPENDENT, errorMessage);
			}
			if (this.getQueryManager().getSystemType() !== oFF.SystemType.BW)
			{
				throw oFF.XException.createRuntimeException(errorMessage);
			}
		}
		if (oFF.notNull(member) && member.getMemberType() === oFF.MemberType.RESTRICTED_MEASURE && !oFF.XString.isEqual(member.getAliasOrMemberName(), this.getAliasOrMemberName()))
		{
			return member;
		}
	}
	return null;
};
oFF.QRestrictedMeasure.prototype.getFilter = function()
{
	return this.m_filter;
};
oFF.QRestrictedMeasure.prototype.getFilterOnVirtualMeasureCount = function()
{
	return this.m_filterOnVirtualMeasureCount;
};
oFF.QRestrictedMeasure.prototype.getFilterRootWithTransientTimeSelection = function()
{
	if (oFF.notNull(this.m_transientTimeSelection))
	{
		let filter = this.getFilter();
		let filterRoot = filter.getFilterRootElement();
		if (this.m_transientTimeSelection.getComponentType().isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST) && !filter.isComplexFilter())
		{
			let transientTimeCartesianList = this.m_transientTimeSelection;
			let cartesianProduct = filter.getCartesianProduct();
			if (cartesianProduct.getCartesianListByDimensionName(transientTimeCartesianList.getDimensionName()) === null)
			{
				let cartesianProductWithTransientSelection = oFF.QFactory.createFilterCartesianProduct(this.getContext());
				for (let i = 0; i < cartesianProduct.size(); i++)
				{
					cartesianProductWithTransientSelection.add(cartesianProduct.get(i));
				}
				cartesianProductWithTransientSelection.add(transientTimeCartesianList);
				return cartesianProductWithTransientSelection;
			}
		}
		else
		{
			let filterWithTransientTimeSelection = oFF.QFactory.createFilterAnd(this.getQueryModel());
			filterWithTransientTimeSelection.add(filterRoot);
			filterWithTransientTimeSelection.add(this.m_transientTimeSelection);
			return filterWithTransientTimeSelection;
		}
	}
	return this.getFilter().getFilterRootElement();
};
oFF.QRestrictedMeasure.prototype.getModelCapabilities = function()
{
	return this.m_restrictedMeasureCapabilities;
};
oFF.QRestrictedMeasure.prototype.getNestedTimeOperationDimensionNames = function(context, messageManager)
{
	return this.getNestedTimeOperationDimensionNamesInternal(context, messageManager, oFF.XList.create());
};
oFF.QRestrictedMeasure.prototype.getNestedTimeOperationDimensionNamesInternal = function(context, messageManager, nestedVisitedMembers)
{
	let dimensionNames = oFF.XHashSetOfString.create();
	if (!nestedVisitedMembers.contains(this.getAliasOrMemberName()))
	{
		nestedVisitedMembers.add(this.getAliasOrMemberName());
		if (this.getTimeOperation() !== null && this.getTimeOperation().needsTransientTimeSelection())
		{
			dimensionNames.add(this.getTimeOperation().getDimensionName());
		}
		try
		{
			let restrictedMeasure = this.getDependentRestrictedMeasure(context, messageManager);
			if (oFF.notNull(restrictedMeasure))
			{
				dimensionNames.addAll(restrictedMeasure.getNestedTimeOperationDimensionNamesInternal(context, messageManager, nestedVisitedMembers));
			}
		}
		catch (t)
		{
			return dimensionNames.getValuesAsReadOnlyList();
		}
	}
	return dimensionNames.getValuesAsReadOnlyList();
};
oFF.QRestrictedMeasure.prototype.getSolveOrder = function()
{
	if (!this.isSolveOrderOverDefined() && this.isCustomDefaultSolveOrderApplicable() && !this.getQueryModel().hasUserDefinedMeasures() && this.getDimension().isMeasureStructure())
	{
		return oFF.QStructureMemberSolveOrder.CLIENT_DEFINED_RESTRICTED_MEASURE_ON_MEASURE_STRUCTURE;
	}
	else if (!this.isSolveOrderOverDefined() && this.isCustomDefaultSolveOrderApplicable() && this.getQueryModel().hasUserDefinedMeasures() && this.getQueryModel().isLeadingStructureAccount())
	{
		return oFF.QStructureMemberSolveOrder.RESTRICTED_MEASURE_WITH_ACCOUNT;
	}
	else if (!this.isSolveOrderOverDefined() && this.isCustomDefaultSolveOrderApplicable() && this.getQueryModel().hasUserDefinedMeasures() && this.getQueryModel().isLeadingStructureMeasure())
	{
		return oFF.QStructureMemberSolveOrder.RESTRICTED_MEASURE_UNIVERSAL_MEASURE;
	}
	else
	{
		return oFF.QStructureMember.prototype.getSolveOrder.call( this );
	}
};
oFF.QRestrictedMeasure.prototype.getStorageObjectName = function()
{
	let name = this.getName();
	if (oFF.XString.isEqual(name, oFF.MeasureModelConstants.DEFAULT_CUSTOMDIMENSION2_MEMBER) && !this.isCreatedFromMetadata())
	{
		let queryModel = this.getQueryModel();
		if (oFF.notNull(queryModel))
		{
			let datasetId = queryModel.getDatasetId();
			let secondaryCalculationDimensionType = queryModel.getAccountDimension() === null ? oFF.DimensionType.SECONDARY_STRUCTURE : oFF.DimensionType.MEASURE_STRUCTURE;
			if (oFF.notNull(datasetId) && this.getDimension() !== null && this.getDimension().getDimensionType() === secondaryCalculationDimensionType)
			{
				name = oFF.XStringUtils.concatenate3(datasetId, "-", name);
			}
		}
	}
	else
	{
		name = oFF.QStructureMember.prototype.getStorageObjectName.call( this );
	}
	return name;
};
oFF.QRestrictedMeasure.prototype.getSupportedRunningAggregationOperators = function()
{
	let dependentMeasures = this.getTopLevelDependentMemberNames(this.getContext());
	if (dependentMeasures.size() === 1)
	{
		let baseMeasureName = dependentMeasures.get(0);
		return this.getContext().getQueryModel().getRunningAggregationManager().getRunningAggregationOperatorsSupportedByMeasure(baseMeasureName);
	}
	return null;
};
oFF.QRestrictedMeasure.prototype.getTimeOperation = function()
{
	return this.m_timeOperation;
};
oFF.QRestrictedMeasure.prototype.getTopLevelDependentFieldNames = function(context)
{
	let usedFields = oFF.XHashSetOfString.create();
	usedFields.addAll(oFF.QStructureMember.prototype.getTopLevelDependentFieldNames.call( this , context));
	let cartesianProduct = this.getFilter().getCartesianProduct();
	let complexSelectionRoot = this.getFilter().getComplexRoot();
	if (oFF.notNull(cartesianProduct))
	{
		let sizeCp = cartesianProduct.size();
		for (let i = 0; i < sizeCp; i++)
		{
			usedFields.add(cartesianProduct.getCartesianChild(i).getFieldMetadata().getName());
		}
	}
	else if (oFF.notNull(complexSelectionRoot))
	{
		this.addFieldsUsedInComplexContainer(complexSelectionRoot, usedFields);
	}
	if (oFF.notNull(this.m_timeOperation))
	{
		let dimension = context.getQueryModel().getDimensionByName(this.m_timeOperation.getDimensionName());
		if (oFF.notNull(dimension))
		{
			usedFields.add(dimension.getKeyField().getName());
		}
	}
	return usedFields.getValuesAsReadOnlyList();
};
oFF.QRestrictedMeasure.prototype.getTopLevelDependentMemberNames = function(context)
{
	let dimensionContext = this.getDimensionContext(context.getQueryManager());
	let memberNames = oFF.XList.createWithList(oFF.QFilterUtil.getMemberNamesFromFilter(this.getFilter().getFilterRootElement(), dimensionContext.getName()));
	memberNames.removeElement(this.getName());
	return memberNames;
};
oFF.QRestrictedMeasure.prototype.getTransientIgnoredExternalDimensions = function()
{
	if (oFF.notNull(this.m_transientIgnoredExternalDimensions))
	{
		return this.m_transientIgnoredExternalDimensions;
	}
	return null;
};
oFF.QRestrictedMeasure.prototype.getTransientTimeSelection = function()
{
	return this.m_transientTimeSelection;
};
oFF.QRestrictedMeasure.prototype.getUnsatisfiedRequiredDimensionNames = function(context, messageManager, allRequiredDimensionNames)
{
	let missingRequiredDimensionNames = oFF.QStructureMember.prototype.getUnsatisfiedRequiredDimensionNames.call( this , context, messageManager, allRequiredDimensionNames);
	let iterator = this.getNestedTimeOperationDimensionNames(context, messageManager).getIterator();
	while (iterator.hasNext())
	{
		missingRequiredDimensionNames.removeElement(iterator.next());
	}
	return missingRequiredDimensionNames;
};
oFF.QRestrictedMeasure.prototype.hasNestedTimeOperation = function(context, messageManager)
{
	if (this.getTimeOperation() !== null && this.getTimeOperation().needsTransientTimeSelection())
	{
		return true;
	}
	let restrictedMeasure = this.getDependentRestrictedMeasure(context, messageManager);
	if (oFF.notNull(restrictedMeasure))
	{
		return restrictedMeasure.hasNestedTimeOperation(context, messageManager);
	}
	return false;
};
oFF.QRestrictedMeasure.prototype.isDisableIgnoreExternalDimensionOnFixedFilters = function()
{
	return this.m_disableIgnoreExternalDimensionOnFixedFilters;
};
oFF.QRestrictedMeasure.prototype.isFlattenSelection = function()
{
	return this.m_flattenDependentRestrictedMeasures;
};
oFF.QRestrictedMeasure.prototype.isRunningAggregationSupported = function()
{
	let queryModel = this.getQueryModel();
	return queryModel.getModelCapabilities().supportsSupportsRunningAggregation() && oFF.XCollectionUtils.hasElements(this.getSupportedRunningAggregationOperators());
};
oFF.QRestrictedMeasure.prototype.isVersionAggregatedInternal = function(context, visitedMembers, rootMember)
{
	let isVersionAggregated = oFF.QStructureMember.prototype.isVersionAggregatedInternal.call( this , context, visitedMembers, rootMember);
	if (!isVersionAggregated)
	{
		let versionDimension = context.getQueryModel().getVersionDimension();
		if (oFF.notNull(versionDimension))
		{
			let cartesianList = this.getFilter().getCartesianList(versionDimension);
			isVersionAggregated = oFF.QFilterUtil.isSingleValueFilterCartesianList(cartesianList);
		}
	}
	return isVersionAggregated;
};
oFF.QRestrictedMeasure.prototype.needsTransientTimeSelection = function(context, messageManager)
{
	if (this.getTimeOperation() !== null && this.getTimeOperation().needsTransientTimeSelection())
	{
		return true;
	}
	let restrictedMeasure = this.getDependentRestrictedMeasure(context, messageManager);
	if (oFF.notNull(restrictedMeasure))
	{
		return restrictedMeasure.needsTransientTimeSelection(context, messageManager);
	}
	return false;
};
oFF.QRestrictedMeasure.prototype.needsUdhForTransientTimeSelection = function(context)
{
	try
	{
		let messageManager = oFF.MessageManagerSimple.createMessageManager();
		if (this.validateBeforeRuntimeObjectExport(context, messageManager) && this.needsTransientTimeSelection(context, messageManager))
		{
			let transientTimeSelection = oFF.notNull(this.m_transientTimeSelection) ? this.m_transientTimeSelection : this.generateFlattenTransientTimeSelection(context.getQueryModel(), messageManager, this.m_timeOperation, null);
			if (oFF.notNull(transientTimeSelection))
			{
				let predicate = (memberNav) => {
					return memberNav.getMemberFunction() === oFF.CurrentMemberFunction.INA_SHIFT_PERIOD || memberNav.getMemberFunction() === oFF.CurrentMemberFunction.INA_PARALLEL_PERIOD;
				};
				let transientTimeCartesianLists = oFF.QFilterUtil.collectAllCartesianLists(transientTimeSelection);
				for (let i = 0; i < transientTimeCartesianLists.size(); i++)
				{
					let transientTimeCartesianList = transientTimeCartesianLists.get(i);
					for (let j = 0; j < transientTimeCartesianLists.size(); j++)
					{
						let filterElement = transientTimeCartesianList.getCartesianElement(j);
						if (oFF.XCollectionUtils.contains(filterElement.getLow().getMemberNavigations(), predicate))
						{
							return true;
						}
					}
				}
			}
		}
	}
	catch (e)
	{
		return false;
	}
	return false;
};
oFF.QRestrictedMeasure.prototype.releaseObject = function()
{
	this.m_restrictedMeasureCapabilities = oFF.XObjectExt.release(this.m_restrictedMeasureCapabilities);
	this.m_aggregationDimensionName = null;
	this.m_filter = oFF.XObjectExt.release(this.m_filter);
	this.m_timeOperation = oFF.XObjectExt.release(this.m_timeOperation);
	this.m_transientTimeSelection = oFF.XObjectExt.release(this.m_transientTimeSelection);
	this.m_transientIgnoredExternalDimensions = oFF.XObjectExt.release(this.m_transientIgnoredExternalDimensions);
	this.m_flattenDependentRestrictedMeasures = false;
	this.m_disableIgnoreExternalDimensionOnFixedFilters = false;
	oFF.QStructureMember.prototype.releaseObject.call( this );
};
oFF.QRestrictedMeasure.prototype.requireRuntimeExport = function(context)
{
	return this.m_disableIgnoreExternalDimensionOnFixedFilters && (this.isIgnoringAllExternalDimensions() || this.getIgnoredExternalDimensions().size() > 0) || this.m_flattenDependentRestrictedMeasures || oFF.QStructureMember.prototype.requireRuntimeExport.call( this , context);
};
oFF.QRestrictedMeasure.prototype.setAggregationDimension = function(dimension)
{
	this.setAggregationDimensionName(dimension.getName());
};
oFF.QRestrictedMeasure.prototype.setAggregationDimensionName = function(dimensionName)
{
	this.m_aggregationDimensionName = dimensionName;
	this.notifyNodeChanged();
};
oFF.QRestrictedMeasure.prototype.setDisableIgnoreExternalDimensionOnFixedFilters = function(disableIgnoreExternalDimensionOnFixedFilters)
{
	let oldValue = this.m_disableIgnoreExternalDimensionOnFixedFilters;
	this.m_disableIgnoreExternalDimensionOnFixedFilters = disableIgnoreExternalDimensionOnFixedFilters;
	this.notifyPropertyBooleanChanged(oFF.QMeasureProperties.QY_DISABLE_IGNORE_EXTDIM_ON_FIXEDFILTERS, oldValue, disableIgnoreExternalDimensionOnFixedFilters);
};
oFF.QRestrictedMeasure.prototype.setFilterOnVirtualMeasureCount = function(filterOnVirtualMeasureCount)
{
	this.m_filterOnVirtualMeasureCount = filterOnVirtualMeasureCount;
};
oFF.QRestrictedMeasure.prototype.setFlattenSelection = function(flattenSelection)
{
	let oldValue = this.m_flattenDependentRestrictedMeasures;
	this.m_flattenDependentRestrictedMeasures = flattenSelection;
	this.notifyPropertyBooleanChanged(oFF.QMeasureProperties.QY_FLATTEN_DEPENDENT_RESTRICTED_MEASURES, oldValue, flattenSelection);
};
oFF.QRestrictedMeasure.prototype.setParent = function(parent)
{
	oFF.QStructureMember.prototype.setParent.call( this , parent);
	this.m_restrictedMeasureCapabilities.updateContext(this);
};
oFF.QRestrictedMeasure.prototype.setRunningAggregation = function(operator, initDimension)
{
	this.setRunningAggregationOperator(operator);
	this.setRunningAggregationInitDimension(initDimension);
};
oFF.QRestrictedMeasure.prototype.setRunningAggregationInitDimension = function(initDimension)
{
	let oldValue = this.m_runAggrInitDim;
	this.m_runAggrInitDim = initDimension;
	this.notifyPropertyStringChanged(oFF.QStructureMemberProperties.QY_RUNNING_AGGREGATION_INIT_DIM, oldValue, initDimension);
};
oFF.QRestrictedMeasure.prototype.setRunningAggregationOperator = function(operator)
{
	let oldValue = this.m_runAggrOperator;
	this.m_runAggrOperator = operator;
	this.notifyPropertyConstantChanged(oFF.QStructureMemberProperties.QY_RUNNING_AGGREGATION, oldValue, operator);
};
oFF.QRestrictedMeasure.prototype.setTimeOperation = function(dimensionName, timeFunction, granularity, period)
{
	if (oFF.isNull(this.m_timeOperation))
	{
		this.m_timeOperation = oFF.QTimeOperation.create(this.getContext(), this);
	}
	this.m_timeOperation.setDimensionName(dimensionName);
	this.m_timeOperation.setFunction(timeFunction);
	this.m_timeOperation.setGranularity(granularity);
	this.m_timeOperation.setPeriod(period);
};
oFF.QRestrictedMeasure.prototype.setTimeOperationByHierarchyLevel = function(dimensionName, timeFunction, hierarchyLevelName, period)
{
	if (oFF.isNull(this.m_timeOperation))
	{
		this.m_timeOperation = oFF.QTimeOperation.create(this.getContext(), this);
	}
	this.m_timeOperation.setGranularity(oFF.QTimeDimensionUtil.getTimeOperationGranularityFromHierarchyLevelName(this.getQueryModel(), dimensionName, hierarchyLevelName));
	this.m_timeOperation.setDimensionName(dimensionName);
	this.m_timeOperation.setFunction(timeFunction);
	this.m_timeOperation.setPeriod(period);
	this.m_timeOperation.setHierarchyLevelName(hierarchyLevelName);
};
oFF.QRestrictedMeasure.prototype.setTransientTimeSelection = function(transientTimeSelection)
{
	if (this.getOlapEnv().getClientQueryObjectManager().getClientQueryObjectByKeyRef(this) === null)
	{
		this.m_transientTimeSelection = transientTimeSelection;
	}
};
oFF.QRestrictedMeasure.prototype.setupRestrictedMeasure = function(context, structure)
{
	oFF.QStructureMember.prototype.setupStructureMember.call( this , context, structure, oFF.MemberType.RESTRICTED_MEASURE);
	this.m_restrictedMeasureCapabilities = oFF.QFactory.createCapabilitiesDecorator(this);
	this.m_restrictedMeasureCapabilities.setSupportsIntersectLayers(false);
	this.m_restrictedMeasureCapabilities.setSupportsVisibilityFilter(false);
	this.m_restrictedMeasureCapabilities.setSupportsCellValueOperand(false);
	this.m_restrictedMeasureCapabilities.setSupportsComplexFilter(true);
	this.m_restrictedMeasureCapabilities.setSupportsComplexTupleFilter(true);
	this.m_filter = oFF.QFactory.createFilterExpression(this, this);
};
oFF.QRestrictedMeasure.prototype.supportsExceptionAggregationDimsFormulas = function()
{
	let capabilities = this.getModelCapabilities();
	return oFF.isNull(capabilities) ? false : capabilities.supportsExceptionAggregationDimsFormulas();
};
oFF.QRestrictedMeasure.prototype.validate = function(context, messageManager, validateDependencies, validateAugmentedAccountMembers)
{
	if (!oFF.QStructureMember.prototype.validate.call( this , context, messageManager, validateDependencies, validateAugmentedAccountMembers))
	{
		return false;
	}
	if (!this.validateRequiredFields(context, messageManager, this.getTopLevelDependentFieldNames(context)))
	{
		return false;
	}
	if (!this.validateFilterTimeRange(context.getQueryModel(), messageManager))
	{
		return false;
	}
	return this.validateTimeOperation(context.getQueryModel(), messageManager);
};
oFF.QRestrictedMeasure.prototype.validateFilterTimeRange = function(queryModel, messageManager)
{
	let numOfWarningsBeforeValidation = messageManager.getNumberOfWarnings();
	let transientFilters = oFF.QFilterUtil.collectFilterComponentOfType(this.getFilter(), oFF.FilterComponentType.FILTER_TIME_RANGE, true);
	let iterator = transientFilters.getIterator();
	while (iterator.hasNext())
	{
		let timeRangeFilter = iterator.next();
		timeRangeFilter.validate(queryModel, messageManager);
	}
	return messageManager.getNumberOfWarnings() <= numOfWarningsBeforeValidation;
};
oFF.QRestrictedMeasure.prototype.validateTimeOperation = function(queryModel, messageManager)
{
	let numOfWarningsBeforeValidation = messageManager.getNumberOfWarnings();
	if (oFF.notNull(this.m_timeOperation))
	{
		let filter = this.getFilter();
		if (filter.isCartesianProduct())
		{
			if (filter.getCartesianProduct().getCartesianListByDimensionName(this.m_timeOperation.getDimensionName()) !== null)
			{
				messageManager.addWarning(oFF.ErrorCodes.DYNAMIC_TIME_MEASURE_INVALID_MULTIPLE_TIME_DIMENSION_IN_CARTESIAN_PRODUCT, oFF.ErrorMessages.DYNAMIC_TIME_MEASURE_INVALID_MULTIPLE_TIME_DIMENSION_IN_CARTESIAN_PRODUCT);
				return false;
			}
		}
		this.generateFlattenTransientTimeSelection(queryModel, messageManager, this.m_timeOperation, null);
	}
	return messageManager.getNumberOfWarnings() <= numOfWarningsBeforeValidation;
};
oFF.QRestrictedMeasure.prototype.validateWithQueryModelScope = function(context)
{
	let validationResult = oFF.QStructureMember.prototype.validateWithQueryModelScope.call( this , context);
	if (!validationResult.hasErrors() && !validationResult.hasWarnings())
	{
		this.validateTimeOperation(context.getQueryModel(), validationResult);
		this.validateFilterTimeRange(context.getQueryModel(), validationResult);
	}
	return validationResult;
};

oFF.QRunningTotalMeasure = function() {};
oFF.QRunningTotalMeasure.prototype = new oFF.QStructureMember();
oFF.QRunningTotalMeasure.prototype._ff_c = "QRunningTotalMeasure";

oFF.QRunningTotalMeasure.TRANSIENT_CONSTANT_MEASURE_SUFFIX = "TransientConstantMeasureSuffix";
oFF.QRunningTotalMeasure.TRANSIENT_COUNT_MEASURE_SUFFIX = "TransientCountMeasureSuffix";
oFF.QRunningTotalMeasure.TRANSIENT_FLIP_MEASURE_SUFFIX = "TransientFlipMeasureSuffix";
oFF.QRunningTotalMeasure.TRANSIENT_SUM_MEASURE_SUFFIX = "TransientSumMeasureSuffix";
oFF.QRunningTotalMeasure._createRunningTotalMeasure = function(context, structure)
{
	let capabilities = context.getModelCapabilities();
	if (!capabilities.supportsIteratedFormula())
	{
		oFF.noSupport();
	}
	let member = new oFF.QRunningTotalMeasure();
	member.setupRunningTotalMeasure(context, structure);
	return member;
};
oFF.QRunningTotalMeasure.prototype.m_baseMeasureName = null;
oFF.QRunningTotalMeasure.prototype.m_iterationDimensions = null;
oFF.QRunningTotalMeasure.prototype.m_operator = null;
oFF.QRunningTotalMeasure.prototype.addIterationDimension = function(dimensionName, partitionLevelName)
{
	let iterationDimension = this.addNewIterationDimension();
	iterationDimension.setDimensionName(dimensionName);
	iterationDimension.setPartitionLevelName(partitionLevelName);
	return iterationDimension;
};
oFF.QRunningTotalMeasure.prototype.addNewIterationDimension = function()
{
	let iterationDimension = oFF.QFormulaIterationDimension._createFormulaIterationDimension(this.getContext(), this);
	let oldValue = this.m_iterationDimensions.createListCopy();
	this.m_iterationDimensions.add(iterationDimension);
	this.notifyPropertyChanged(oFF.QStructureMemberProperties.QY_ITERATION_DIMENSIONS, oldValue, this.m_iterationDimensions);
	return iterationDimension;
};
oFF.QRunningTotalMeasure.prototype.checkNeedsSignFlipWrapping = function(structureMember)
{
	let accountType = oFF.isNull(structureMember) ? null : structureMember.getAccountType();
	return this.isAutoSignFlip() && oFF.notNull(structureMember) && structureMember.getDimension().getDimensionType() === oFF.DimensionType.ACCOUNT && (accountType === oFF.AccountType.INC || accountType === oFF.AccountType.LEQ || oFF.isNull(accountType) && this.needsIndirectSignFlip(structureMember));
};
oFF.QRunningTotalMeasure.prototype.clearIterationDimensions = function()
{
	oFF.XCollectionUtils.releaseEntriesFromCollection(this.m_iterationDimensions);
	let oldValue = this.m_iterationDimensions.createListCopy();
	this.m_iterationDimensions.clear();
	this.notifyPropertyChanged(oFF.QStructureMemberProperties.QY_ITERATION_DIMENSIONS, oldValue, this.m_iterationDimensions);
};
oFF.QRunningTotalMeasure.prototype.copyFromInternal = function(other, flags)
{
	if (other.getMemberType() !== this.getMemberType())
	{
		return;
	}
	oFF.QStructureMember.prototype.copyFromInternal.call( this , other, flags);
	this.copySharableProperties(other, false);
};
oFF.QRunningTotalMeasure.prototype.copySharableProperties = function(origin, isShallowCopy)
{
	oFF.QStructureMember.prototype.copySharableProperties.call( this , origin, isShallowCopy);
	let originRunningTotalMeasure = origin;
	this.m_baseMeasureName = originRunningTotalMeasure.m_baseMeasureName;
	this.m_operator = originRunningTotalMeasure.m_operator;
	let size = originRunningTotalMeasure.m_iterationDimensions.size();
	this.m_iterationDimensions.clear();
	for (let i = 0; i < size; i++)
	{
		let newIter = oFF.QFormulaIterationDimension._createFormulaIterationDimension(this.getContext(), this);
		newIter.copyFrom(originRunningTotalMeasure.m_iterationDimensions.get(i), null);
		this.m_iterationDimensions.add(newIter);
	}
};
oFF.QRunningTotalMeasure.prototype.createRunningCount = function(context, dimensionContext, messageManager)
{
	let transientConstant = this.createTransientFormulaMeasure(dimensionContext, this.getTransientConstantAlias());
	let constant = oFF.QFactory.createFormulaConstant(context);
	constant.setInteger(1);
	transientConstant.setFormula(constant);
	transientConstant.generateTransientObjects(context, messageManager);
	dimensionContext.addMeasure(transientConstant);
};
oFF.QRunningTotalMeasure.prototype.createRunningCountFunction = function(context, formulaTarget)
{
	let formulaFunction = oFF.QFactory.createFormulaFunction(context);
	formulaFunction.setFunctionName(oFF.FormulaOperator.IF.getName());
	let conditionFunction = oFF.QFactory.createFormulaFunction(context);
	conditionFunction.setFunctionName(oFF.FormulaOperator.ISNULL.getName());
	let conditionParameter = oFF.QFactory.createFormulaMember(context);
	conditionParameter.setMemberName(this.getBaseMeasureName());
	conditionFunction.add(conditionParameter);
	formulaFunction.add(conditionFunction);
	let member1 = oFF.QFactory.createFormulaMember(context);
	member1.setPrevious();
	formulaFunction.add(member1);
	let subFunction = oFF.QFactory.createFormulaFunction(context);
	subFunction.setFunctionName(oFF.FormulaOperator.ADDITION.getName());
	let constant2 = oFF.QFactory.createFormulaConstant(context);
	constant2.setInteger(1);
	let member2 = oFF.QFactory.createFormulaMember(context);
	member2.setPrevious();
	subFunction.add(member2);
	subFunction.add(constant2);
	formulaFunction.add(subFunction);
	let iteration = oFF.QFactory.createIteration(context);
	iteration.setStartValueMemberName(this.getTransientConstantAlias());
	if (oFF.XCollectionUtils.hasElements(this.m_iterationDimensions))
	{
		for (let i = 0; i < this.m_iterationDimensions.size(); i++)
		{
			let iterationDimension = oFF.QFactory.createIterationDimension(context);
			let origIterationDimension = this.m_iterationDimensions.get(i);
			iterationDimension.setDimensionName(origIterationDimension.getDimensionName());
			iterationDimension.setPartitionLevelName(origIterationDimension.getPartitionLevelName());
			iteration.addIterationDimension(iterationDimension);
		}
	}
	formulaTarget.setIterationInternal(iteration);
	formulaTarget.setFormulaInternal(formulaFunction);
};
oFF.QRunningTotalMeasure.prototype.createRunningTotal = function(context, dimensionContext, operator, formulaTarget, needsSignFlip)
{
	let formulaFunction = oFF.QFactory.createFormulaFunction(context);
	formulaFunction.setFunctionName(operator.getName());
	let member1 = oFF.QFactory.createFormulaMember(context);
	member1.setPrevious();
	let member2 = oFF.QFactory.createFormulaMember(context);
	let effectiveBaseMeasureName = this.getBaseMeasureNameAccordingToSignFlip(needsSignFlip);
	member2.setMemberName(effectiveBaseMeasureName);
	formulaFunction.add(member1);
	formulaFunction.add(member2);
	let iteration = oFF.QFactory.createIteration(context);
	iteration.setStartValueMemberName(effectiveBaseMeasureName);
	if (oFF.XCollectionUtils.hasElements(this.m_iterationDimensions))
	{
		for (let i = 0; i < this.m_iterationDimensions.size(); i++)
		{
			let iterationDimension = oFF.QFactory.createIterationDimension(context);
			let origIterationDimension = this.m_iterationDimensions.get(i);
			iterationDimension.setDimensionName(origIterationDimension.getDimensionName());
			iterationDimension.setPartitionLevelName(origIterationDimension.getPartitionLevelName());
			iteration.addIterationDimension(iterationDimension);
		}
	}
	formulaTarget.setIterationInternal(iteration);
	formulaTarget.setFormulaInternal(formulaFunction);
};
oFF.QRunningTotalMeasure.prototype.createSignFlipIfNeeded = function(messageManager, context, dimension, referenceMeasure)
{
	if (oFF.notNull(referenceMeasure) && this.checkNeedsSignFlipWrapping(referenceMeasure) && this.m_operator !== oFF.RunningTotalOperator.COUNT)
	{
		let transientSignFlip = this.createTransientFormulaMeasure(dimension, this.getTransientFlipAlias());
		transientSignFlip.setAutoSignFlip(true);
		transientSignFlip.generateTransientObjects(context, messageManager);
		dimension.addMeasure(transientSignFlip);
		let member = oFF.QFactory.createFormulaMember(context);
		member.setMemberName(this.m_baseMeasureName);
		transientSignFlip.setFormula(member);
	}
};
oFF.QRunningTotalMeasure.prototype.createTransientFormulaMeasure = function(dimensionContext, transientMeasureName)
{
	let formulaMeasure = oFF.QFormulaMeasure._createFormulaMeasure(this.getContext(), dimensionContext);
	if (dimensionContext.getPlaceholderIds().size() > 0)
	{
		formulaMeasure.setAliasName(transientMeasureName);
	}
	else
	{
		formulaMeasure.setName(transientMeasureName);
	}
	formulaMeasure.setResultVisibility(oFF.ResultVisibility.HIDDEN);
	return formulaMeasure;
};
oFF.QRunningTotalMeasure.prototype.destroyTransientObjects = function(context)
{
	oFF.QStructureMember.prototype.destroyTransientObjects.call( this , context);
	let dimensionContext;
	let clientQueryObjectManager = this.getOlapEnv().getClientQueryObjectManager();
	if (clientQueryObjectManager.getClientQueryObjectByKeyRef(this) !== null)
	{
		dimensionContext = this.getDimensionContext(context.getQueryManager());
	}
	else
	{
		dimensionContext = this.getDimension();
	}
	let dependentMember = dimensionContext.getStructureMemberByAliasOrMember(this.m_baseMeasureName);
	if (oFF.notNull(dependentMember))
	{
		let isTransientMemberTag = oFF.QTransientConstants.createIsTransientMemberTag(dependentMember.getAliasOrMemberName());
		if (dimensionContext.getTagging().containsKey(isTransientMemberTag))
		{
			dimensionContext.removeMeasure(this.m_baseMeasureName);
			dimensionContext.getTagging().remove(isTransientMemberTag);
		}
		let tagging = dependentMember.getTagging();
		if (tagging.containsKey(oFF.QTransientConstants.TAG_OVERRIDE_DESCRIPTION))
		{
			tagging.remove(oFF.QTransientConstants.TAG_OVERRIDE_DESCRIPTION);
		}
	}
	let transientCount = this.getTransientCount(dimensionContext);
	if (oFF.notNull(transientCount))
	{
		dimensionContext.removeMeasure(transientCount.getName());
	}
	let transientConstant = this.getTransientConstant(dimensionContext);
	if (oFF.notNull(transientConstant))
	{
		dimensionContext.removeMeasure(transientConstant.getName());
	}
	let transientSum = this.getTransientSum(dimensionContext);
	if (oFF.notNull(transientSum))
	{
		dimensionContext.removeMeasure(transientSum.getName());
	}
	let transientSignFlip = this.getTransientSignFlip(dimensionContext);
	if (oFF.notNull(transientSignFlip))
	{
		dimensionContext.removeMeasure(transientSignFlip.getName());
	}
};
oFF.QRunningTotalMeasure.prototype.exportRuntimeObject = function(context, messageManager)
{
	let clientQueryObjectManager = this.getOlapEnv().getClientQueryObjectManager();
	let dimensionContext;
	if (clientQueryObjectManager.getClientQueryObjectByKeyRef(this) !== null)
	{
		dimensionContext = this.getDimensionContext(context.getQueryManager());
	}
	else
	{
		dimensionContext = this.getDimension();
	}
	let runtimeObject = null;
	if (oFF.notNull(this.m_operator))
	{
		runtimeObject = oFF.QFormulaMeasure._createFormulaMeasure(context, dimensionContext);
		runtimeObject.setParent(null);
		runtimeObject.setText(this.getText());
		runtimeObject.setAliasName(this.getAliasName());
		let placeholderId = dimensionContext.getRuntimePlaceholderIdByAlias(this.getAliasName());
		if (oFF.notNull(placeholderId))
		{
			runtimeObject.setName(placeholderId);
		}
		else
		{
			runtimeObject.setName(this.getName());
		}
	}
	let referenceMeasure = dimensionContext.getStructureMemberByAliasOrMember(this.m_baseMeasureName);
	if (oFF.isNull(referenceMeasure))
	{
		referenceMeasure = clientQueryObjectManager.getStructuredMember(this.m_baseMeasureName, this.getStorageName(), true);
	}
	let needsSignFlipWrapping = oFF.notNull(referenceMeasure) && this.checkNeedsSignFlipWrapping(referenceMeasure);
	if (this.m_operator === oFF.RunningTotalOperator.COUNT)
	{
		this.createRunningCountFunction(context, runtimeObject);
	}
	else if (this.m_operator === oFF.RunningTotalOperator.MIN)
	{
		this.createRunningTotal(context, dimensionContext, oFF.FormulaOperator.MIN, runtimeObject, needsSignFlipWrapping);
	}
	else if (this.m_operator === oFF.RunningTotalOperator.MAX)
	{
		this.createRunningTotal(context, dimensionContext, oFF.FormulaOperator.MAX, runtimeObject, needsSignFlipWrapping);
	}
	else if (this.m_operator === oFF.RunningTotalOperator.SUM)
	{
		this.createRunningTotal(context, dimensionContext, oFF.FormulaOperator.ADDITION, runtimeObject, needsSignFlipWrapping);
	}
	else if (this.m_operator === oFF.RunningTotalOperator.AVERAGE)
	{
		let transientFormulaFunction = oFF.QFactory.createFormulaFunction(context);
		transientFormulaFunction.setFunctionName(oFF.FormulaOperator.DIVISION.getName());
		let member1 = oFF.QFactory.createFormulaMember(context);
		member1.setMemberName(this.getTransientSumAlias());
		let member2 = oFF.QFactory.createFormulaMember(context);
		member2.setMemberName(this.getTransientCountAlias());
		transientFormulaFunction.add(member1);
		transientFormulaFunction.add(member2);
		runtimeObject.setFormulaInternal(transientFormulaFunction);
	}
	return runtimeObject;
};
oFF.QRunningTotalMeasure.prototype.generateTransientObjects = function(context, messageManager)
{
	oFF.QStructureMember.prototype.generateTransientObjects.call( this , context, messageManager);
	let dimensionContext;
	let clientQueryObjectManager = this.getOlapEnv().getClientQueryObjectManager();
	if (clientQueryObjectManager.getClientQueryObjectByKeyRef(this) !== null)
	{
		dimensionContext = this.getDimensionContext(context.getQueryManager());
	}
	else
	{
		dimensionContext = this.getDimension();
	}
	let referenceMeasure = dimensionContext.getStructureMemberByAliasOrMember(this.m_baseMeasureName);
	if (oFF.isNull(referenceMeasure))
	{
		referenceMeasure = clientQueryObjectManager.getStructuredMember(this.m_baseMeasureName, this.getStorageName(), true);
		if (oFF.notNull(referenceMeasure))
		{
			referenceMeasure.generateTransientObjects(dimensionContext, messageManager);
			dimensionContext.getTagging().put(oFF.QTransientConstants.createIsTransientMemberTag(referenceMeasure.getAliasOrMemberName()), "");
			dimensionContext.addMeasure(referenceMeasure);
		}
	}
	this.createSignFlipIfNeeded(messageManager, context, dimensionContext, referenceMeasure);
	if (this.m_operator === oFF.RunningTotalOperator.COUNT)
	{
		this.createRunningCount(context, dimensionContext, messageManager);
	}
	else if (this.m_operator === oFF.RunningTotalOperator.AVERAGE)
	{
		let transientCount = this.createTransientFormulaMeasure(dimensionContext, this.getTransientCountAlias());
		this.createRunningCount(context, dimensionContext, messageManager);
		this.createRunningCountFunction(context, transientCount);
		transientCount.generateTransientObjects(context, messageManager);
		dimensionContext.addMeasure(transientCount);
		let transientSum = this.createTransientFormulaMeasure(dimensionContext, this.getTransientSumAlias());
		this.createRunningTotal(context, dimensionContext, oFF.FormulaOperator.ADDITION, transientSum, this.checkNeedsSignFlipWrapping(referenceMeasure));
		transientSum.generateTransientObjects(context, messageManager);
		dimensionContext.addMeasure(transientSum);
	}
};
oFF.QRunningTotalMeasure.prototype.getAllRequiredDimensionNames = function(context, messageManager, missingFieldNames)
{
	let allRequiredDimensionNames = oFF.QStructureMember.prototype.getAllRequiredDimensionNames.call( this , context, messageManager, missingFieldNames);
	allRequiredDimensionNames.addAll(oFF.XStream.of(this.m_iterationDimensions).collect(oFF.XStreamCollector.toListOfString((iterationDimension) => {
		return iterationDimension.getDimensionName();
	})));
	return allRequiredDimensionNames;
};
oFF.QRunningTotalMeasure.prototype.getBaseMeasureName = function()
{
	return this.m_baseMeasureName;
};
oFF.QRunningTotalMeasure.prototype.getBaseMeasureNameAccordingToSignFlip = function(presentationSignReversal)
{
	return presentationSignReversal ? this.getTransientFlipAlias() : this.m_baseMeasureName;
};
oFF.QRunningTotalMeasure.prototype.getIterationDimensions = function()
{
	return this.m_iterationDimensions;
};
oFF.QRunningTotalMeasure.prototype.getOperator = function()
{
	return this.m_operator;
};
oFF.QRunningTotalMeasure.prototype.getTopLevelDependentMemberNames = function(context)
{
	let memberNames = oFF.XList.create();
	memberNames.add(this.m_baseMeasureName);
	return memberNames;
};
oFF.QRunningTotalMeasure.prototype.getTransientConstant = function(dimensionContext)
{
	return dimensionContext.getDimension().getStructureMemberByAliasOrMember(this.getTransientConstantAlias());
};
oFF.QRunningTotalMeasure.prototype.getTransientConstantAlias = function()
{
	return oFF.XStringUtils.concatenate2(this.getName(), oFF.QRunningTotalMeasure.TRANSIENT_CONSTANT_MEASURE_SUFFIX);
};
oFF.QRunningTotalMeasure.prototype.getTransientCount = function(dimensionContext)
{
	return dimensionContext.getDimension().getStructureMemberByAliasOrMember(this.getTransientCountAlias());
};
oFF.QRunningTotalMeasure.prototype.getTransientCountAlias = function()
{
	return oFF.XStringUtils.concatenate2(this.getName(), oFF.QRunningTotalMeasure.TRANSIENT_COUNT_MEASURE_SUFFIX);
};
oFF.QRunningTotalMeasure.prototype.getTransientFlipAlias = function()
{
	return oFF.XStringUtils.concatenate2(this.getName(), oFF.QRunningTotalMeasure.TRANSIENT_FLIP_MEASURE_SUFFIX);
};
oFF.QRunningTotalMeasure.prototype.getTransientSignFlip = function(dimensionContext)
{
	return dimensionContext.getDimension().getStructureMemberByAliasOrMember(this.getTransientFlipAlias());
};
oFF.QRunningTotalMeasure.prototype.getTransientSum = function(dimensionContext)
{
	return dimensionContext.getDimension().getStructureMemberByAliasOrMember(this.getTransientSumAlias());
};
oFF.QRunningTotalMeasure.prototype.getTransientSumAlias = function()
{
	return oFF.XStringUtils.concatenate2(this.getName(), oFF.QRunningTotalMeasure.TRANSIENT_SUM_MEASURE_SUFFIX);
};
oFF.QRunningTotalMeasure.prototype.isValidOperator = function(operator)
{
	return operator === oFF.RunningTotalOperator.MIN || operator === oFF.RunningTotalOperator.MAX || operator === oFF.RunningTotalOperator.COUNT || operator === oFF.RunningTotalOperator.SUM || operator === oFF.RunningTotalOperator.AVERAGE;
};
oFF.QRunningTotalMeasure.prototype.needsIndirectSignFlip = function(structureMember)
{
	let needed = false;
	let dimension = structureMember.getDimension();
	let accountType;
	let refMember;
	if (structureMember.getMemberType() === oFF.MemberType.RESTRICTED_MEASURE)
	{
		let memberNames = oFF.QFilterUtil.getMemberNamesFromFilter(structureMember.getFilter(), dimension.getName());
		if (oFF.XCollectionUtils.hasElements(memberNames) && memberNames.size() === 1)
		{
			refMember = dimension.getStructureMemberByAliasOrMember(memberNames.get(0));
			accountType = oFF.isNull(refMember) ? null : refMember.getAccountType();
			needed = accountType === oFF.AccountType.INC || accountType === oFF.AccountType.LEQ || oFF.isNull(accountType) && structureMember !== refMember && oFF.notNull(refMember) && this.needsIndirectSignFlip(refMember);
		}
	}
	return needed;
};
oFF.QRunningTotalMeasure.prototype.releaseObject = function()
{
	this.m_baseMeasureName = null;
	this.m_iterationDimensions = oFF.XObjectExt.release(this.m_iterationDimensions);
	oFF.QStructureMember.prototype.releaseObject.call( this );
};
oFF.QRunningTotalMeasure.prototype.setBaseMeasureName = function(baseMeasureName)
{
	this.m_baseMeasureName = baseMeasureName;
	this.notifyNodeChanged();
};
oFF.QRunningTotalMeasure.prototype.setOperator = function(operator)
{
	if (this.isValidOperator(operator))
	{
		let oldValue = this.m_operator;
		this.m_operator = operator;
		this.notifyPropertyConstantChanged(oFF.QStructureMemberProperties.QY_RUNNING_TOTAL_OPERATOR, oldValue, operator);
	}
};
oFF.QRunningTotalMeasure.prototype.setupRunningTotalMeasure = function(context, structure)
{
	oFF.QStructureMember.prototype.setupStructureMember.call( this , context, structure, oFF.MemberType.RUNNING_TOTAL);
	this.m_iterationDimensions = oFF.XList.create();
};

oFF.QHierarchyNameVariable = function() {};
oFF.QHierarchyNameVariable.prototype = new oFF.QDimensionMemberVariable();
oFF.QHierarchyNameVariable.prototype._ff_c = "QHierarchyNameVariable";

oFF.QHierarchyNameVariable.createDimensionHierarchyVariable = function(context, parent, name, description)
{
	let variable = new oFF.QHierarchyNameVariable();
	variable.setupDimensionMemberVariable(context, parent, name, description);
	return variable;
};
oFF.QHierarchyNameVariable.prototype.m_hierarchyDimension = null;
oFF.QHierarchyNameVariable.prototype.copyFromInternal = function(other, flags)
{
	oFF.QDimensionMemberVariable.prototype.copyFromInternal.call( this , other, flags);
	this.setHierarchyNameDimension(this.getQueryModel().getDimensionByNameFromExistingMetadata(other.getHierarchyNameDimension().getName()));
};
oFF.QHierarchyNameVariable.prototype.getHierarchyNameDimension = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_hierarchyDimension);
};
oFF.QHierarchyNameVariable.prototype.getVariableType = function()
{
	return oFF.VariableType.HIERARCHY_NAME_VARIABLE;
};
oFF.QHierarchyNameVariable.prototype.releaseObject = function()
{
	this.m_hierarchyDimension = oFF.XObjectExt.release(this.m_hierarchyDimension);
	oFF.QDimensionMemberVariable.prototype.releaseObject.call( this );
};
oFF.QHierarchyNameVariable.prototype.setHierarchyNameDimension = function(dimension)
{
	this.m_hierarchyDimension = oFF.XWeakReferenceUtil.getWeakRef(dimension);
};

oFF.QHierarchyNodeVariable = function() {};
oFF.QHierarchyNodeVariable.prototype = new oFF.QDimensionMemberVariable();
oFF.QHierarchyNodeVariable.prototype._ff_c = "QHierarchyNodeVariable";

oFF.QHierarchyNodeVariable.createHierarchyNodeVariable = function(context, parent, name, description)
{
	let variable = new oFF.QHierarchyNodeVariable();
	variable.setupDimensionMemberVariable(context, parent, name, description);
	return variable;
};
oFF.QHierarchyNodeVariable.prototype.getVariableType = function()
{
	return oFF.VariableType.HIERARCHY_NODE_VARIABLE;
};

oFF.QSimpleTypeVariable = function() {};
oFF.QSimpleTypeVariable.prototype = new oFF.QVariable();
oFF.QSimpleTypeVariable.prototype._ff_c = "QSimpleTypeVariable";

oFF.QSimpleTypeVariable.createFormulaVariable = function(context, parent, name, description, supportsMultipleValues)
{
	let variable = new oFF.QSimpleTypeVariable();
	variable.setupSimpleTypeVariable(context, parent, oFF.VariableType.FORMULA_VARIABLE, oFF.XValueType.DOUBLE, name, description, supportsMultipleValues);
	return variable;
};
oFF.QSimpleTypeVariable.createHierarchyVariable = function(context, parent, name, description, supportsMultipleValues)
{
	let variable = new oFF.QSimpleTypeVariable();
	variable.setupSimpleTypeVariable(context, parent, oFF.VariableType.HIERARCHY_VARIABLE, oFF.XValueType.STRING, name, description, supportsMultipleValues);
	return variable;
};
oFF.QSimpleTypeVariable.createOptionListVariable = function(context, parent, name, description, supportsMultipleValues)
{
	let variable = new oFF.QSimpleTypeVariable();
	variable.setupSimpleTypeVariable(context, parent, oFF.VariableType.OPTION_LIST_VARIABLE, oFF.XValueType.STRING, name, description, supportsMultipleValues);
	return variable;
};
oFF.QSimpleTypeVariable.createSimpleTypeVariable = function(context, parent, valueType, name, description, supportsMultipleValues)
{
	let variable = new oFF.QSimpleTypeVariable();
	variable.setupSimpleTypeVariable(context, parent, oFF.VariableType.SIMPLE_TYPE_VARIABLE, valueType, name, description, supportsMultipleValues);
	return variable;
};
oFF.QSimpleTypeVariable.createTextVariable = function(context, parent, name, description, supportsMultipleValues)
{
	let variable = new oFF.QSimpleTypeVariable();
	variable.setupSimpleTypeVariable(context, parent, oFF.VariableType.TEXT_VARIABLE, oFF.XValueType.STRING, name, description, supportsMultipleValues);
	return variable;
};
oFF.QSimpleTypeVariable.prototype.m_defaultValueList = null;
oFF.QSimpleTypeVariable.prototype.m_length = 0;
oFF.QSimpleTypeVariable.prototype.m_options = null;
oFF.QSimpleTypeVariable.prototype.m_scale = 0;
oFF.QSimpleTypeVariable.prototype.m_supportsMultipleValues = false;
oFF.QSimpleTypeVariable.prototype.m_valuesList = null;
oFF.QSimpleTypeVariable.prototype.m_variableType = null;
oFF.QSimpleTypeVariable.prototype.addBoolean = function(value)
{
	this.addInternal(oFF.XBooleanValue.create(value));
};
oFF.QSimpleTypeVariable.prototype.addDate = function(value)
{
	this.assertValueType(value, oFF.XValueType.DATE);
	this.addInternal(value);
};
oFF.QSimpleTypeVariable.prototype.addDateTime = function(value)
{
	this.addInternal(value);
};
oFF.QSimpleTypeVariable.prototype.addDeclFloat = function(value)
{
	this.m_valuesList.add(value);
};
oFF.QSimpleTypeVariable.prototype.addDouble = function(value)
{
	if (this.getValueType() === oFF.XValueType.DOUBLE)
	{
		this.addInternal(oFF.XDoubleValue.create(value));
	}
	else if (this.getValueType() === oFF.XValueType.DECIMAL_FLOAT)
	{
		this.addInternal(oFF.XDecFloatByDouble.create(value));
	}
	else
	{
		oFF.noSupport();
	}
};
oFF.QSimpleTypeVariable.prototype.addInteger = function(value)
{
	this.addInternal(oFF.XIntegerValue.create(value));
};
oFF.QSimpleTypeVariable.prototype.addInternal = function(value)
{
	if (oFF.isNull(value))
	{
		return;
	}
	if (!this.m_valuesList.contains(value))
	{
		this.m_valuesList.add(value);
		this.notifyNodeChanged();
	}
};
oFF.QSimpleTypeVariable.prototype.addLong = function(value)
{
	this.addInternal(oFF.XLongValue.create(value));
};
oFF.QSimpleTypeVariable.prototype.addOption = function(option)
{
	if (!this.m_options.contains(option))
	{
		this.m_options.add(option);
	}
};
oFF.QSimpleTypeVariable.prototype.addOptionByName = function(name)
{
	if (this.m_options.containsKey(name))
	{
		this.addString(name);
	}
};
oFF.QSimpleTypeVariable.prototype.addString = function(value)
{
	this.addInternal(oFF.XStringValue.create(value));
};
oFF.QSimpleTypeVariable.prototype.addTime = function(value)
{
	this.assertValueType(value, oFF.XValueType.TIME);
	this.addInternal(value);
};
oFF.QSimpleTypeVariable.prototype.addValueByString = function(value)
{
	if (this.m_variableType.isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE))
	{
		this.addOptionByName(value);
	}
	else
	{
		let valueType = this.getValueType();
		let xValue = oFF.XStringUtils.isNullOrEmpty(value) && valueType !== oFF.XValueType.STRING ? oFF.XValueAccess.createWithType(valueType).getValue() : this.getXValue(value);
		if (oFF.notNull(xValue))
		{
			this.addInternal(xValue);
		}
	}
};
oFF.QSimpleTypeVariable.prototype.clear = function()
{
	this.setValue(null);
};
oFF.QSimpleTypeVariable.prototype.clearOptions = function()
{
	this.m_options.clear();
};
oFF.QSimpleTypeVariable.prototype.clearValueList = function()
{
	oFF.XCollectionUtils.releaseEntriesFromCollection(this.m_valuesList);
	this.m_valuesList.clear();
};
oFF.QSimpleTypeVariable.prototype.copyFromInternal = function(other, flags)
{
	oFF.QVariable.prototype.copyFromInternal.call( this , other, flags);
	let originSimpleTypeVariable = other;
	oFF.XCollectionUtils.addAllClones(this.m_valuesList, originSimpleTypeVariable.m_valuesList);
	oFF.XCollectionUtils.addAllClones(this.m_defaultValueList, originSimpleTypeVariable.m_defaultValueList);
	let context = this.getContext();
	let size = originSimpleTypeVariable.m_options.size();
	for (let i = 0; i < size; i++)
	{
		let option = originSimpleTypeVariable.m_options.get(i);
		this.m_options.add(oFF.QOptionListElement.createOptionListElement(context, this, option.getName(), option.getText()));
	}
	this.m_scale = originSimpleTypeVariable.m_scale;
	this.m_length = originSimpleTypeVariable.m_length;
	this.m_supportsMultipleValues = originSimpleTypeVariable.m_supportsMultipleValues;
};
oFF.QSimpleTypeVariable.prototype.createAndAddOption = function(name, text)
{
	this.addOption(oFF.QOptionListElement.createOptionListElement(this.getContext(), this, name, text));
};
oFF.QSimpleTypeVariable.prototype.getBoolean = function()
{
	let value = this.getValue();
	if (oFF.isNull(value))
	{
		return false;
	}
	this.assertValueType(value, oFF.XValueType.BOOLEAN);
	return value.getBoolean();
};
oFF.QSimpleTypeVariable.prototype.getCurrentOption = function()
{
	return this.m_options.getByKey(this.getString());
};
oFF.QSimpleTypeVariable.prototype.getDate = function()
{
	let value = this.getValue();
	if (oFF.isNull(value))
	{
		return null;
	}
	this.assertValueType(value, oFF.XValueType.DATE);
	return value.clone();
};
oFF.QSimpleTypeVariable.prototype.getDateTime = function()
{
	let value = this.getValue();
	if (oFF.isNull(value))
	{
		return null;
	}
	this.assertValueType(value, oFF.XValueType.DATE_TIME);
	return value.clone();
};
oFF.QSimpleTypeVariable.prototype.getDecFloat = function()
{
	return oFF.XValueUtil.getDecFloat(this.getValue(), false, false);
};
oFF.QSimpleTypeVariable.prototype.getDefaultValues = function()
{
	return this.m_defaultValueList.getValuesAsReadOnlyList();
};
oFF.QSimpleTypeVariable.prototype.getDouble = function()
{
	return oFF.XValueUtil.getDouble(this.getValue(), false, false);
};
oFF.QSimpleTypeVariable.prototype.getFormattedValue = function()
{
	return this.getString();
};
oFF.QSimpleTypeVariable.prototype.getFormulaValue = function()
{
	return this.getDouble();
};
oFF.QSimpleTypeVariable.prototype.getGeometry = function()
{
	let value = this.getValue();
	if (oFF.isNull(value))
	{
		return null;
	}
	if (!value.getValueType().isSpatial())
	{
		oFF.noSupport();
	}
	return value.clone();
};
oFF.QSimpleTypeVariable.prototype.getInteger = function()
{
	return oFF.XValueUtil.getInteger(this.getValue(), false, false);
};
oFF.QSimpleTypeVariable.prototype.getLineString = function()
{
	let value = this.getValue();
	if (oFF.isNull(value))
	{
		return null;
	}
	this.assertValueType(value, oFF.XValueType.LINE_STRING);
	return value.clone();
};
oFF.QSimpleTypeVariable.prototype.getLong = function()
{
	return oFF.XValueUtil.getLong(this.getValue(), false, false);
};
oFF.QSimpleTypeVariable.prototype.getMultiLineString = function()
{
	let value = this.getValue();
	if (oFF.isNull(value))
	{
		return null;
	}
	this.assertValueType(value, oFF.XValueType.MULTI_LINE_STRING);
	return value.clone();
};
oFF.QSimpleTypeVariable.prototype.getMultiPoint = function()
{
	let value = this.getValue();
	if (oFF.isNull(value))
	{
		return null;
	}
	this.assertValueType(value, oFF.XValueType.MULTI_POINT);
	return value.clone();
};
oFF.QSimpleTypeVariable.prototype.getMultiPolygon = function()
{
	let value = this.getValue();
	if (oFF.isNull(value))
	{
		return null;
	}
	this.assertValueType(value, oFF.XValueType.MULTI_POLYGON);
	return value.clone();
};
oFF.QSimpleTypeVariable.prototype.getNull = function()
{
	return null;
};
oFF.QSimpleTypeVariable.prototype.getOptions = function()
{
	return this.m_options;
};
oFF.QSimpleTypeVariable.prototype.getPoint = function()
{
	let value = this.getValue();
	if (oFF.isNull(value))
	{
		return null;
	}
	this.assertValueType(value, oFF.XValueType.POINT);
	return value.clone();
};
oFF.QSimpleTypeVariable.prototype.getPolygon = function()
{
	let value = this.getValue();
	if (oFF.isNull(value))
	{
		return null;
	}
	this.assertValueType(value, oFF.XValueType.POLYGON);
	return value.clone();
};
oFF.QSimpleTypeVariable.prototype.getString = function()
{
	return oFF.XValueUtil.getString(this.getValue());
};
oFF.QSimpleTypeVariable.prototype.getTextValue = function()
{
	return this.getString();
};
oFF.QSimpleTypeVariable.prototype.getTime = function()
{
	let value = this.getValue();
	if (oFF.isNull(value))
	{
		return null;
	}
	this.assertValueType(value, oFF.XValueType.TIME);
	return value.clone();
};
oFF.QSimpleTypeVariable.prototype.getTimeSpan = function()
{
	let value = this.getValue();
	if (oFF.isNull(value))
	{
		return null;
	}
	this.assertValueType(value, oFF.XValueType.TIMESPAN);
	return value.clone();
};
oFF.QSimpleTypeVariable.prototype.getValue = function()
{
	if (this.m_valuesList.isEmpty())
	{
		return null;
	}
	return this.m_valuesList.get(0);
};
oFF.QSimpleTypeVariable.prototype.getValueByString = function()
{
	let buffer = oFF.XStringBuffer.create();
	if (!oFF.XCollectionUtils.hasElements(this.m_valuesList))
	{
		buffer.append("null");
	}
	else
	{
		for (let i = 0; i < this.m_valuesList.size(); i++)
		{
			if (i > 0)
			{
				buffer.append(",");
			}
			let currentValue = this.m_valuesList.get(i);
			buffer.append(oFF.isNull(currentValue) ? "null" : currentValue.getStringRepresentation());
		}
	}
	return buffer.toString();
};
oFF.QSimpleTypeVariable.prototype.getValueLength = function()
{
	return this.m_length;
};
oFF.QSimpleTypeVariable.prototype.getValueScale = function()
{
	return this.m_scale;
};
oFF.QSimpleTypeVariable.prototype.getValues = function()
{
	return this.m_valuesList.getValuesAsReadOnlyList();
};
oFF.QSimpleTypeVariable.prototype.getVariableType = function()
{
	return this.m_variableType;
};
oFF.QSimpleTypeVariable.prototype.getXValue = function(value)
{
	return oFF.XValueUtil.getValueFromString(value, this.getValueType());
};
oFF.QSimpleTypeVariable.prototype.hasValue = function()
{
	return this.m_valuesList.hasElements();
};
oFF.QSimpleTypeVariable.prototype.isEmpty = function()
{
	return this.m_valuesList.isEmpty();
};
oFF.QSimpleTypeVariable.prototype.isUsingMultipleValues = function()
{
	return this.m_valuesList.size() > 1;
};
oFF.QSimpleTypeVariable.prototype.mergeDeepRecursive = function(settings, other)
{
	this.clearValueList();
	let otherVar = other;
	oFF.XCollectionUtils.addAllClones(this.m_valuesList, otherVar.getValues());
};
oFF.QSimpleTypeVariable.prototype.parseString = function(value)
{
	return null;
};
oFF.QSimpleTypeVariable.prototype.releaseObject = function()
{
	this.m_valuesList = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_valuesList);
	this.m_defaultValueList = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_defaultValueList);
	this.m_options = oFF.XObjectExt.release(this.m_options);
	this.m_variableType = null;
	oFF.QVariable.prototype.releaseObject.call( this );
};
oFF.QSimpleTypeVariable.prototype.resetToDefaultValues = function()
{
	this.setValues(this.m_defaultValueList);
};
oFF.QSimpleTypeVariable.prototype.setBoolean = function(value)
{
	this.setValue(oFF.XBooleanValue.create(value));
};
oFF.QSimpleTypeVariable.prototype.setDate = function(value)
{
	this.assertValueType(value, oFF.XValueType.DATE);
	this.setValueAsClone(value);
};
oFF.QSimpleTypeVariable.prototype.setDateTime = function(value)
{
	this.assertValueType(value, oFF.XValueType.DATE_TIME);
	this.setValueAsClone(value);
};
oFF.QSimpleTypeVariable.prototype.setDecFloat = function(value)
{
	this.setValue(value);
};
oFF.QSimpleTypeVariable.prototype.setDefaultValues = function(valuesList)
{
	oFF.XCollectionUtils.releaseEntriesFromCollection(this.m_defaultValueList);
	this.m_defaultValueList.clear();
	oFF.XCollectionUtils.addAllClones(this.m_defaultValueList, valuesList);
};
oFF.QSimpleTypeVariable.prototype.setDouble = function(value)
{
	if (this.getValueType() !== oFF.XValueType.DOUBLE && this.getValueType() !== oFF.XValueType.DECIMAL_FLOAT)
	{
		oFF.noSupport();
	}
	this.setValue(oFF.XDoubleValue.create(value));
};
oFF.QSimpleTypeVariable.prototype.setFormulaValue = function(value)
{
	this.setDouble(value);
};
oFF.QSimpleTypeVariable.prototype.setInteger = function(value)
{
	this.setValue(oFF.XIntegerValue.create(value));
};
oFF.QSimpleTypeVariable.prototype.setLineString = function(value)
{
	this.assertValueType(value, oFF.XValueType.LINE_STRING);
	this.setValueAsClone(value);
};
oFF.QSimpleTypeVariable.prototype.setLong = function(value)
{
	this.setValue(oFF.XLongValue.create(value));
};
oFF.QSimpleTypeVariable.prototype.setMultiLineString = function(value)
{
	this.assertValueType(value, oFF.XValueType.MULTI_LINE_STRING);
	this.setValueAsClone(value);
};
oFF.QSimpleTypeVariable.prototype.setMultiPoint = function(value)
{
	this.assertValueType(value, oFF.XValueType.MULTI_POINT);
	this.setValueAsClone(value);
};
oFF.QSimpleTypeVariable.prototype.setMultiPolygon = function(value)
{
	this.assertValueType(value, oFF.XValueType.MULTI_POLYGON);
	this.setValueAsClone(value);
};
oFF.QSimpleTypeVariable.prototype.setNullByType = function(nullValueType)
{
	this.setValue(oFF.XValueAccess.createWithType(nullValueType).getValue());
};
oFF.QSimpleTypeVariable.prototype.setOptionByName = function(name)
{
	if (oFF.isNull(name))
	{
		this.clear();
	}
	else if (this.m_options.containsKey(name))
	{
		this.setString(name);
	}
};
oFF.QSimpleTypeVariable.prototype.setPoint = function(value)
{
	this.assertValueType(value, oFF.XValueType.POINT);
	this.setValueAsClone(value);
};
oFF.QSimpleTypeVariable.prototype.setPolygon = function(value)
{
	this.assertValueType(value, oFF.XValueType.POLYGON);
	this.setValueAsClone(value);
};
oFF.QSimpleTypeVariable.prototype.setString = function(value)
{
	if (this.getValueType() !== oFF.XValueType.STRING && this.getValueType() !== oFF.XValueType.KEY_VALUE)
	{
		oFF.noSupport();
	}
	this.setValue(oFF.XStringValue.create(value));
};
oFF.QSimpleTypeVariable.prototype.setTextValue = function(text)
{
	this.setString(text);
};
oFF.QSimpleTypeVariable.prototype.setTime = function(value)
{
	this.assertValueType(value, oFF.XValueType.TIME);
	this.setValueAsClone(value);
};
oFF.QSimpleTypeVariable.prototype.setTimeSpan = function(value)
{
	this.assertValueType(value, oFF.XValueType.TIMESPAN);
	this.setValueAsClone(value);
};
oFF.QSimpleTypeVariable.prototype.setValue = function(value)
{
	if (oFF.isNull(value))
	{
		if (!this.m_valuesList.isEmpty())
		{
			this.clearValueList();
			this.notifyNodeChanged();
		}
	}
	else if (!value.isEqualTo(this.getValue()))
	{
		this.clearValueList();
		this.m_valuesList.add(value);
		this.notifyNodeChanged();
	}
	else if (this.m_valuesList.size() > 1)
	{
		for (let i = this.m_valuesList.size() - 1; i >= 1; i--)
		{
			oFF.XObjectExt.release(this.m_valuesList.removeAt(i));
		}
		this.notifyNodeChanged();
	}
};
oFF.QSimpleTypeVariable.prototype.setValueAsClone = function(value)
{
	if (oFF.isNull(value))
	{
		this.setValue(value);
	}
	else
	{
		let clone = value.clone();
		this.setValue(clone);
		if (this.getValue() !== clone)
		{
			oFF.XObjectExt.release(clone);
		}
	}
};
oFF.QSimpleTypeVariable.prototype.setValueByStringExt = function(value, isManualInput)
{
	if (this.m_variableType.isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE))
	{
		this.setOptionByName(value);
	}
	else
	{
		let valueType = this.getValueType();
		this.setValue(oFF.XStringUtils.isNullOrEmpty(value) && valueType !== oFF.XValueType.STRING ? oFF.XValueAccess.createWithType(valueType).getValue() : this.getXValue(value));
	}
};
oFF.QSimpleTypeVariable.prototype.setValueLength = function(length)
{
	this.m_length = length;
};
oFF.QSimpleTypeVariable.prototype.setValueScale = function(scale)
{
	this.m_scale = scale;
};
oFF.QSimpleTypeVariable.prototype.setValues = function(valuesList)
{
	this.clearValueList();
	oFF.XCollectionUtils.addAllClones(this.m_valuesList, valuesList);
	this.notifyNodeChanged();
};
oFF.QSimpleTypeVariable.prototype.setXValue = function(value)
{
	this.clearValueList();
	let newValue = oFF.XValueAccess.createWithValue(value);
	this.m_valuesList.add(newValue.getValue());
	this.notifyNodeChanged();
};
oFF.QSimpleTypeVariable.prototype.setupSimpleTypeVariable = function(context, parent, variableType, valueType, name, description, supportsMultipleValues)
{
	this.setupVariable(context, parent, valueType, name, description);
	this.m_valuesList = oFF.XList.create();
	this.m_defaultValueList = oFF.XList.create();
	this.m_options = oFF.XListOfNameObject.create();
	this.m_variableType = variableType;
	this.m_supportsMultipleValues = supportsMultipleValues;
};
oFF.QSimpleTypeVariable.prototype.supportsMultipleValues = function()
{
	return this.m_supportsMultipleValues;
};
oFF.QSimpleTypeVariable.prototype.useMultipleValues = function(use) {};

oFF.QAxis = function() {};
oFF.QAxis.prototype = new oFF.QAxisDimensionList();
oFF.QAxis.prototype._ff_c = "QAxis";

oFF.QAxis.createAxis = function(context, parent, axisType)
{
	let axis = new oFF.QAxis();
	axis.setupQAxis(context, parent, axisType);
	return axis;
};
oFF.QAxis.prototype.m_availableZeroSuppressionTypes = null;
oFF.QAxis.prototype.m_axisType = null;
oFF.QAxis.prototype.m_defaultZeroSuppressionType = null;
oFF.QAxis.prototype.m_isHierarchyActive = false;
oFF.QAxis.prototype.m_lowerLevelNodeAlignment = null;
oFF.QAxis.prototype.m_readModeAndSuppressionSynchronized = false;
oFF.QAxis.prototype.m_resultStructureController = null;
oFF.QAxis.prototype.m_supportsZeroSuppression = false;
oFF.QAxis.prototype.m_zeroSuppressionType = null;
oFF.QAxis.prototype.add = function(element)
{
	oFF.QAxisDimensionList.prototype.add.call( this , element);
	this.checkApplyOverwrite(element);
	this.synchronizeWithDimensionReadModes(element);
};
oFF.QAxis.prototype.addAvailableZeroSuppressionType = function(availableZeroSuppressionType)
{
	this.m_availableZeroSuppressionTypes.add(availableZeroSuppressionType);
};
oFF.QAxis.prototype.addForRepoImport = function(element)
{
	oFF.QAxisDimensionList.prototype.add.call( this , element);
};
oFF.QAxis.prototype.applyNodeAlignmentFromFirstHierarchicalDimension = function()
{
	let i;
	let size = this.size();
	let alignment = null;
	let dim;
	for (i = 0; i < size; i++)
	{
		dim = this.get(i);
		if (dim.isHierarchyActive())
		{
			alignment = dim.getLowerLevelNodeAlignment();
			break;
		}
	}
	for (; i < size; i++)
	{
		dim = this.get(i);
		if (dim.isHierarchyActive())
		{
			dim.setLowerLevelNodeAlignment(alignment);
		}
	}
};
oFF.QAxis.prototype.checkApplyOverwrite = function(element)
{
	if (oFF.Alignment.isExplicit(this.m_lowerLevelNodeAlignment) && this.getModelCapabilities().supportsExpandBottomUp())
	{
		element.setLowerLevelNodeAlignment(this.m_lowerLevelNodeAlignment);
	}
	else if (this.m_lowerLevelNodeAlignment === oFF.Alignment.INHERIT_FROM_FIRST_DIMENSION_ON_AXIS)
	{
		this.applyNodeAlignmentFromFirstHierarchicalDimension();
	}
};
oFF.QAxis.prototype.clearOthersFromConditionsVisibilitySettings = function()
{
	this.m_resultStructureController.clearOthersFromConditionsVisibilitySettings();
};
oFF.QAxis.prototype.clearResultVisibilitySettings = function()
{
	this.m_resultStructureController.clearResultVisibilitySettings();
};
oFF.QAxis.prototype.copyFromInternal = function(other, flags)
{
	oFF.QAxisDimensionList.prototype.copyFromInternal.call( this , other, flags);
	let originAxis = other;
	let size = originAxis.size();
	let dimensionManagerBase = this.getQueryModelBase().getDimensionManagerBase();
	for (let i = 0; i < size; i++)
	{
		let dimensionName = originAxis.get(i).getName();
		let dimension = dimensionManagerBase.getDimensionByNameInternal(dimensionName);
		if (oFF.notNull(dimension))
		{
			oFF.QAxisDimensionList.prototype.addInternal.call( this , dimension);
			dimension.setAxis(this);
		}
	}
	this.m_isHierarchyActive = originAxis.m_isHierarchyActive;
	this.m_zeroSuppressionType = originAxis.m_zeroSuppressionType;
	this.m_defaultZeroSuppressionType = originAxis.m_defaultZeroSuppressionType;
	this.m_supportsZeroSuppression = originAxis.m_supportsZeroSuppression;
	this.m_resultStructureController.copyFrom(originAxis.m_resultStructureController, flags);
	this.m_availableZeroSuppressionTypes.copyFrom(originAxis.m_availableZeroSuppressionTypes, flags);
	this.m_lowerLevelNodeAlignment = originAxis.m_lowerLevelNodeAlignment;
	this.m_readModeAndSuppressionSynchronized = originAxis.m_readModeAndSuppressionSynchronized;
};
oFF.QAxis.prototype.getAlignmentPriority = function()
{
	return this.m_resultStructureController.getAlignmentPriority();
};
oFF.QAxis.prototype.getAvailableZeroSuppressionTypes = function()
{
	return this.m_availableZeroSuppressionTypes;
};
oFF.QAxis.prototype.getAxis = function()
{
	return this;
};
oFF.QAxis.prototype.getAxisBase = function()
{
	return this;
};
oFF.QAxis.prototype.getDefaultZeroSuppressionType = function()
{
	return this.m_defaultZeroSuppressionType;
};
oFF.QAxis.prototype.getEffectiveFields = function()
{
	let effective = oFF.XList.create();
	let size = this.size();
	for (let i = 0; i < size; i++)
	{
		effective.addAll(this.getDimensionAt(i).getResultSetFields());
	}
	return effective;
};
oFF.QAxis.prototype.getEffectiveLowerLevelNodeAlignment = function()
{
	let alignment = this.m_lowerLevelNodeAlignment;
	if (alignment === oFF.Alignment.INHERIT_FROM_FIRST_DIMENSION_ON_AXIS)
	{
		let size = this.size();
		for (let i = 0; i < size; i++)
		{
			let dim = this.get(i);
			if (dim.isHierarchyActive())
			{
				alignment = dim.getLowerLevelNodeAlignment();
				if (alignment === oFF.Alignment.DEFAULT_VALUE)
				{
					alignment = oFF.Alignment.CHILDREN_BELOW_PARENT;
				}
				break;
			}
		}
	}
	return alignment;
};
oFF.QAxis.prototype.getEffectiveRsFields = oFF.noSupport;
oFF.QAxis.prototype.getLoadedDimensions = function()
{
	return this.getDimensions();
};
oFF.QAxis.prototype.getLowerLevelNodeAlignment = function()
{
	return this.m_lowerLevelNodeAlignment;
};
oFF.QAxis.prototype.getModelLevel = function()
{
	return this.m_resultStructureController.getModelLevel();
};
oFF.QAxis.prototype.getOlapComponentType = function()
{
	return this.getType();
};
oFF.QAxis.prototype.getParentResultStructureController = function()
{
	return this.getQueryModel().getResultStructureController();
};
oFF.QAxis.prototype.getResultAlignment = function()
{
	return this.m_resultStructureController.getResultAlignment();
};
oFF.QAxis.prototype.getResultStructureChildren = function()
{
	let list = oFF.XList.create();
	for (let i = 0; i < this.size(); i++)
	{
		let dimension = this.get(i);
		list.add(dimension.getResultStructureControllerBase());
	}
	return list.getIterator();
};
oFF.QAxis.prototype.getResultStructureController = function()
{
	return this.m_resultStructureController;
};
oFF.QAxis.prototype.getResultStructureControllerBase = function()
{
	return this.m_resultStructureController;
};
oFF.QAxis.prototype.getResultVisibility = function()
{
	return this.m_resultStructureController.getResultVisibility();
};
oFF.QAxis.prototype.getResultVisibilityByElement = function(element)
{
	return this.m_resultStructureController.getResultVisibilityByElement(element);
};
oFF.QAxis.prototype.getResultVisibilityByElementAndAlignment = function(alignment, element)
{
	return this.m_resultStructureController.getResultVisibilityByElementAndAlignment(alignment, element);
};
oFF.QAxis.prototype.getResultVisibilitySettings = function()
{
	return this.m_resultStructureController.getResultVisibilitySettings();
};
oFF.QAxis.prototype.getRsDimensions = oFF.noSupport;
oFF.QAxis.prototype.getType = function()
{
	return this.m_axisType;
};
oFF.QAxis.prototype.getZeroSuppressionType = function()
{
	return this.m_zeroSuppressionType;
};
oFF.QAxis.prototype.insert = function(index, element)
{
	oFF.QAxisDimensionList.prototype.insert.call( this , index, element);
	this.checkApplyOverwrite(element);
	this.synchronizeWithDimensionReadModes(element);
};
oFF.QAxis.prototype.isHierarchyActive = function()
{
	return this.m_isHierarchyActive;
};
oFF.QAxis.prototype.isReadModeAndSuppressionSynchronized = function()
{
	return this.m_readModeAndSuppressionSynchronized;
};
oFF.QAxis.prototype.isSuppressingZerosOrNulls = function()
{
	return oFF.notNull(this.m_zeroSuppressionType) && this.m_zeroSuppressionType !== oFF.ZeroSuppressionType.NONE;
};
oFF.QAxis.prototype.isTotalsAlignmentOnDefault = function()
{
	return this.m_resultStructureController.isTotalsAlignmentOnDefault();
};
oFF.QAxis.prototype.isTotalsStructureOnDefault = function()
{
	return this.m_resultStructureController.isTotalsStructureOnDefault();
};
oFF.QAxis.prototype.isTotalsVisibilityOnDefault = function()
{
	return this.m_resultStructureController.isTotalsVisibilityOnDefault();
};
oFF.QAxis.prototype.isTotalsVisible = function()
{
	let size = this.size();
	for (let i = 0; i < size; i++)
	{
		let visibility = this.get(i).getResultVisibility();
		if (visibility === oFF.ResultVisibility.VISIBLE || visibility === oFF.ResultVisibility.CONDITIONAL)
		{
			return true;
		}
	}
	return false;
};
oFF.QAxis.prototype.releaseObject = function()
{
	this.m_axisType = null;
	this.m_zeroSuppressionType = null;
	this.m_defaultZeroSuppressionType = null;
	this.m_resultStructureController = oFF.XObjectExt.release(this.m_resultStructureController);
	this.m_availableZeroSuppressionTypes = oFF.XObjectExt.release(this.m_availableZeroSuppressionTypes);
	this.m_lowerLevelNodeAlignment = null;
	this.m_readModeAndSuppressionSynchronized = false;
	oFF.QAxisDimensionList.prototype.releaseObject.call( this );
};
oFF.QAxis.prototype.resetZeroSuppressionTypes = function()
{
	this.m_availableZeroSuppressionTypes.clear();
	this.m_availableZeroSuppressionTypes.add(oFF.ZeroSuppressionType.NONE);
};
oFF.QAxis.prototype.restoreTotalsAlignment = function(restoreAction, recurseChildren)
{
	this.m_resultStructureController.restoreTotalsAlignment(restoreAction, recurseChildren);
};
oFF.QAxis.prototype.restoreTotalsVisibility = function(restoreAction, recurseChildren)
{
	this.m_resultStructureController.restoreTotalsVisibility(restoreAction, recurseChildren);
};
oFF.QAxis.prototype.setAlignmentPriority = function(alignmentPriority)
{
	this.m_resultStructureController.setAlignmentPriority(alignmentPriority);
};
oFF.QAxis.prototype.setDefaultZeroSuppression = function(defaultZeroSuppression)
{
	this.m_defaultZeroSuppressionType = defaultZeroSuppression;
};
oFF.QAxis.prototype.setIsHierarchyActive = function(isActive)
{
	this.m_isHierarchyActive = isActive;
};
oFF.QAxis.prototype.setLowerLevelNodeAlignment = function(nodeAlignment)
{
	if (nodeAlignment !== this.m_lowerLevelNodeAlignment && this.getModelCapabilities().supportsExpandBottomUp())
	{
		this.m_lowerLevelNodeAlignment = nodeAlignment;
		if (oFF.Alignment.isExplicit(nodeAlignment))
		{
			oFF.XStream.of(this).forEach((dim) => {
				dim.setLowerLevelNodeAlignment(this.m_lowerLevelNodeAlignment);
			});
		}
		else if (nodeAlignment === oFF.Alignment.INHERIT_FROM_FIRST_DIMENSION_ON_AXIS)
		{
			this.applyNodeAlignmentFromFirstHierarchicalDimension();
		}
		this.notifyNodeChanged();
	}
};
oFF.QAxis.prototype.setReadModeAndSuppressionSynchronized = function(readModeAndSuppressionSynchronized)
{
	if (readModeAndSuppressionSynchronized !== this.m_readModeAndSuppressionSynchronized)
	{
		this.m_readModeAndSuppressionSynchronized = readModeAndSuppressionSynchronized;
		this.synchronizeWithDimensionReadModes(null);
		this.notifyNodeChanged();
	}
};
oFF.QAxis.prototype.setResultAlignment = function(alignment)
{
	this.m_resultStructureController.setResultAlignment(alignment);
};
oFF.QAxis.prototype.setResultVisibility = function(visibility)
{
	this.m_resultStructureController.setResultVisibility(visibility);
};
oFF.QAxis.prototype.setResultVisibilityByElement = function(element, visibility)
{
	this.m_resultStructureController.setResultVisibilityByElement(element, visibility);
};
oFF.QAxis.prototype.setResultVisibilityByElementAndAlignment = function(alignment, element, visibility)
{
	this.m_resultStructureController.setResultVisibilityByElementAndAlignment(alignment, element, visibility);
};
oFF.QAxis.prototype.setSupportsZeroSuppression = function(supportsZeroSuppression)
{
	this.m_supportsZeroSuppression = supportsZeroSuppression;
};
oFF.QAxis.prototype.setZeroSuppressionType = function(suppressionType)
{
	oFF.XBooleanUtils.checkTrue(this.m_supportsZeroSuppression, "Zero suppression not supported");
	if ((this.m_axisType === oFF.AxisType.COLUMNS || this.m_axisType === oFF.AxisType.ROWS) && this.m_zeroSuppressionType !== suppressionType)
	{
		this.m_zeroSuppressionType = suppressionType;
		this.synchronizeWithDimensionReadModes(null);
		this.notifyNodeChanged();
	}
};
oFF.QAxis.prototype.setupQAxis = function(context, parent, axisType)
{
	oFF.QAxisDimensionList.prototype.setupOlapList.call( this , context, parent, false, axisType.getName(), oFF.XCollectionFactory.LINKED_MAP, false);
	this.m_axisType = axisType;
	this.m_zeroSuppressionType = oFF.ZeroSuppressionType.NONE;
	this.m_supportsZeroSuppression = false;
	this.m_resultStructureController = oFF.QFactory.createResultStructureController(context, this, oFF.QModelLevel.AXES);
	this.m_availableZeroSuppressionTypes = oFF.XList.create();
	this.m_availableZeroSuppressionTypes.add(oFF.ZeroSuppressionType.NONE);
};
oFF.QAxis.prototype.supportsResultAlignment = function()
{
	return this.m_resultStructureController.supportsResultAlignment();
};
oFF.QAxis.prototype.supportsResultVisibility = function()
{
	return this.m_resultStructureController.supportsResultVisibility();
};
oFF.QAxis.prototype.supportsTotals = function()
{
	let size = this.size();
	for (let i = 0; i < size; i++)
	{
		if (!this.get(i).supportsTotals())
		{
			return false;
		}
	}
	return this.m_resultStructureController.supportsTotals();
};
oFF.QAxis.prototype.supportsZeroSuppression = function()
{
	return this.m_supportsZeroSuppression;
};
oFF.QAxis.prototype.synchronizeReadmode = function(index, context, mode)
{
	let dimension = this.getDimensionBase(index);
	if (dimension.hasReadModeDefault(context) && !oFF.XConstantWithParent.isObjectTypeOf(dimension.getReadMode(context), mode))
	{
		dimension.setReadModeGracefulInternal(context, mode);
	}
};
oFF.QAxis.prototype.synchronizeWithDimensionNodeAlignment = function(alignment)
{
	if (oFF.Alignment.isExplicit(this.m_lowerLevelNodeAlignment) && this.m_lowerLevelNodeAlignment !== alignment)
	{
		this.m_lowerLevelNodeAlignment = oFF.Alignment.DEFAULT_VALUE;
	}
};
oFF.QAxis.prototype.synchronizeWithDimensionReadModes = function(element)
{
	if (this.m_readModeAndSuppressionSynchronized)
	{
		let lastAxisIndex = this.size() - 1;
		let otherDimension;
		if (this.isSuppressingZerosOrNulls())
		{
			oFF.XCollectionUtils.forEach(this, (dimension) => {
				if (!oFF.XConstantWithParent.isObjectTypeOf(dimension.getReadMode(oFF.QContextType.RESULT_SET), oFF.QMemberReadMode.BOOKED))
				{
					dimension.setReadModeGracefulInternal(oFF.QContextType.RESULT_SET, oFF.QMemberReadMode.BOOKED);
				}
			});
		}
		else if (oFF.notNull(element))
		{
			let readMode = element.getReadMode(oFF.QContextType.RESULT_SET);
			let indexOnAxis = element.getIndexOnAxis();
			let otherReadMode;
			if (oFF.XConstantWithParent.isObjectTypeOf(readMode, oFF.QMemberReadMode.BOOKED))
			{
				while (indexOnAxis > 0)
				{
					indexOnAxis--;
					otherDimension = this.get(indexOnAxis);
					otherReadMode = otherDimension.getReadMode(oFF.QContextType.RESULT_SET);
					if (otherDimension.hasReadModeDefault(oFF.QContextType.RESULT_SET) && oFF.XConstantWithParent.isObjectTypeOf(otherReadMode, oFF.QMemberReadMode.MASTER))
					{
						element.setReadModeGraceful(oFF.QContextType.RESULT_SET, otherReadMode);
						break;
					}
				}
			}
			else if (oFF.XConstantWithParent.isObjectTypeOf(readMode, oFF.QMemberReadMode.MASTER))
			{
				indexOnAxis++;
				while (indexOnAxis < lastAxisIndex)
				{
					otherDimension = this.get(indexOnAxis);
					otherReadMode = otherDimension.getReadMode(oFF.QContextType.RESULT_SET);
					if (otherDimension.hasReadModeDefault(oFF.QContextType.RESULT_SET) && oFF.XConstantWithParent.isObjectTypeOf(otherReadMode, oFF.QMemberReadMode.BOOKED))
					{
						element.setReadModeGraceful(oFF.QContextType.RESULT_SET, otherReadMode);
					}
					indexOnAxis++;
				}
			}
			element.synchronizeAxisReadModeSettings(oFF.QContextType.RESULT_SET, element.getReadMode(oFF.QContextType.RESULT_SET));
		}
	}
};

oFF.QFilterAnd = function() {};
oFF.QFilterAnd.prototype = new oFF.QFilterAlgebraOperation();
oFF.QFilterAnd.prototype._ff_c = "QFilterAnd";

oFF.QFilterAnd._create = function(context, selectionContainer)
{
	let object = new oFF.QFilterAnd();
	object.setupFilterAlgebraOperation(context, selectionContainer);
	return object;
};
oFF.QFilterAnd._createWithParams = function(fieldName, values, hierarchyName, convertToFlatSelection)
{
	let object = new oFF.QFilterAnd();
	object.setupFilterAlgebraOperation(null, null);
	oFF.XStream.ofString(values).forEach((value) => {
		let op1_1 = oFF.QFactory.createFilterOperation(null, null);
		op1_1.getLow().setString(value.getString());
		op1_1.setHierarchyName(hierarchyName);
		op1_1.setConvertToFlatFilter(convertToFlatSelection);
		op1_1.setFieldName(fieldName);
		object.add(op1_1);
	});
	return object;
};
oFF.QFilterAnd.prototype.getOlapComponentType = function()
{
	return oFF.FilterComponentType.AND;
};

oFF.QFilterCartesianList = function() {};
oFF.QFilterCartesianList.prototype = new oFF.AbstractFilterList();
oFF.QFilterCartesianList.prototype._ff_c = "QFilterCartesianList";

oFF.QFilterCartesianList._createMd = function(context, parentNode, fieldMd, hierarchyName)
{
	let object = new oFF.QFilterCartesianList();
	object.setupCartesianList(context, parentNode, fieldMd, hierarchyName);
	return object;
};
oFF.QFilterCartesianList._createWithParams = function(cartesianProduct, fieldName, values, hierarchyName, convertToFlatSelection, isExcluding)
{
	let object = new oFF.QFilterCartesianList();
	object.setupCartesianList(null, null, null, null);
	object.setFieldName(fieldName);
	object.setHierarchyName(hierarchyName);
	object.setConvertToFlatFilter(convertToFlatSelection);
	oFF.XStream.ofString(values).forEach((value) => {
		let filterCartesianElement = oFF.QFactory.createFilterCartesianElement(null);
		filterCartesianElement.getLow().setString(value.getString());
		filterCartesianElement.setFieldName(fieldName);
		filterCartesianElement.setConvertToFlatFilter(convertToFlatSelection);
		if (isExcluding)
		{
			filterCartesianElement.setSetSign(oFF.SetSign.EXCLUDING);
		}
		object.add(filterCartesianElement);
	});
	cartesianProduct.add(object);
	return object;
};
oFF.QFilterCartesianList.prototype.m_convertToFlatFilter = false;
oFF.QFilterCartesianList.prototype.m_fieldContext = null;
oFF.QFilterCartesianList.prototype.m_fieldMd = null;
oFF.QFilterCartesianList.prototype.m_fieldName = null;
oFF.QFilterCartesianList.prototype.m_hierarchyDueDate = null;
oFF.QFilterCartesianList.prototype.m_hierarchyName = null;
oFF.QFilterCartesianList.prototype.m_hierarchyVersion = null;
oFF.QFilterCartesianList.prototype.m_supplementFields = null;
oFF.QFilterCartesianList.prototype.m_uiSettings = null;
oFF.QFilterCartesianList.prototype._getContext = function()
{
	let context = this.getContext();
	if (oFF.notNull(context))
	{
		return context;
	}
	let parent = this.getParent();
	if (oFF.notNull(parent))
	{
		let parentContext = parent.getContext();
		if (oFF.notNull(parentContext))
		{
			return parentContext;
		}
	}
	let filterExpression = this.getFilterExpression();
	if (oFF.notNull(filterExpression))
	{
		let feContext = filterExpression.getContext();
		if (oFF.notNull(feContext))
		{
			return feContext;
		}
	}
	return oFF.XWeakReferenceUtil.getHardRef(this.m_fieldContext);
};
oFF.QFilterCartesianList.prototype.add = function(element)
{
	if (oFF.notNull(element))
	{
		element.setContext(this.getContext());
	}
	oFF.AbstractFilterList.prototype.add.call( this , element);
};
oFF.QFilterCartesianList.prototype.addNewCartesianElement = function()
{
	let element = oFF.QFactory.createFilterCartesianElement(this.getFilterExpression());
	element.setFieldMetadata(this.getFieldMetadata());
	this.add(element);
	return element;
};
oFF.QFilterCartesianList.prototype.addSupplementField = function(supplementField)
{
	if (oFF.isNull(supplementField))
	{
		return;
	}
	let name = supplementField.getName();
	if (!this.m_supplementFields.contains(name))
	{
		this.m_supplementFields.add(name);
	}
};
oFF.QFilterCartesianList.prototype.cloneOlapComponent = function(context, parent)
{
	let clone = oFF.QFilterCartesianList._createMd(context, null, null, null);
	clone.copyFrom(this, null);
	return clone;
};
oFF.QFilterCartesianList.prototype.copyFromInternal = function(other, flags)
{
	oFF.AbstractFilterList.prototype.copyFromInternal.call( this , other, flags);
	let originCartesianList = other;
	this.m_hierarchyName = originCartesianList.m_hierarchyName;
	this.m_hierarchyDueDate = oFF.XObjectExt.cloneIfNotNull(originCartesianList.m_hierarchyDueDate);
	this.m_hierarchyVersion = originCartesianList.m_hierarchyVersion;
	this.m_convertToFlatFilter = originCartesianList.m_convertToFlatFilter;
	this.m_supplementFields = originCartesianList.m_supplementFields.createListCopy();
	if (oFF.notNull(originCartesianList.m_uiSettings))
	{
		this.m_uiSettings = oFF.XHashMapByString.create();
		this.m_uiSettings.putIfNotNull(oFF.QContextType.RESULT_SET.getName(), oFF.XObjectExt.cloneIfNotNull(originCartesianList.m_uiSettings.getByKey(oFF.QContextType.RESULT_SET.getName())));
		this.m_uiSettings.putIfNotNull(oFF.QContextType.SELECTOR.getName(), oFF.XObjectExt.cloneIfNotNull(originCartesianList.m_uiSettings.getByKey(oFF.QContextType.SELECTOR.getName())));
		this.m_uiSettings.putIfNotNull(oFF.QContextType.VARIABLE.getName(), oFF.XObjectExt.cloneIfNotNull(originCartesianList.m_uiSettings.getByKey(oFF.QContextType.VARIABLE.getName())));
	}
	this.setFieldMetadata(originCartesianList.getFieldMetadata());
	let sizeList = originCartesianList.size();
	if (sizeList > 0)
	{
		this.clear();
		let filterExpression = this.getFilterExpression();
		for (let idxList = 0; idxList < sizeList; idxList++)
		{
			let original = originCartesianList.getOp(idxList);
			let cloneElement;
			if (original.getOlapComponentType() === oFF.FilterComponentType.DATE_RANGE_OPERATION)
			{
				cloneElement = oFF.QFilterDateRange.create(this, filterExpression);
			}
			else
			{
				cloneElement = oFF.QFilterOperation._create(this, filterExpression, null);
			}
			cloneElement.copyFrom(original, flags);
			this.addInternal(cloneElement);
		}
	}
	if (originCartesianList.getContext() !== null && originCartesianList.getContext().getComponentType() === oFF.OlapComponentType.KEY_REF_STORE_CONTEXT)
	{
		this.setContext(oFF.QFactory.createKeyRefStoreContext(this.getContext(), originCartesianList.getStorageName()));
	}
};
oFF.QFilterCartesianList.prototype.getCartesianElement = function(index)
{
	return this.get(index);
};
oFF.QFilterCartesianList.prototype.getDimension = function()
{
	let field = this.getField();
	return oFF.isNull(field) ? null : field.getDimension();
};
oFF.QFilterCartesianList.prototype.getDimensionName = function()
{
	let fieldMetadata = this.getFieldMetadata();
	if (oFF.notNull(fieldMetadata))
	{
		let dimensionMetadata = fieldMetadata.getDimensionMetadata();
		if (oFF.notNull(dimensionMetadata))
		{
			return dimensionMetadata.getName();
		}
	}
	let dimension = this.getDimension();
	return oFF.notNull(dimension) ? dimension.getName() : null;
};
oFF.QFilterCartesianList.prototype.getField = function()
{
	if (oFF.isNull(this.m_fieldMd))
	{
		return null;
	}
	let context = this._getContext();
	let fieldAccessorSingle = context.getFieldAccessorSingle();
	if (oFF.isNull(fieldAccessorSingle))
	{
		return null;
	}
	let fieldMd = this.getFieldMetadata();
	if (oFF.isNull(fieldMd))
	{
		return null;
	}
	return fieldAccessorSingle.getFieldByName(fieldMd.getName());
};
oFF.QFilterCartesianList.prototype.getFieldMetadata = function()
{
	let hardRef = oFF.XWeakReferenceUtil.getHardRef(this.m_fieldMd);
	if (oFF.isNull(hardRef) && oFF.notNull(this.m_fieldMd))
	{
		let reference = this.m_fieldMd.getReference();
		if (oFF.notNull(reference))
		{
			let olapEnv = this.getOlapEnv();
			if (oFF.notNull(olapEnv))
			{
				let fieldMetadata = olapEnv.getFieldMetadata(reference.getCacheKey());
				this.setFieldMetadata(fieldMetadata);
				return fieldMetadata;
			}
		}
	}
	return hardRef;
};
oFF.QFilterCartesianList.prototype.getFieldName = function()
{
	return this.m_fieldName;
};
oFF.QFilterCartesianList.prototype.getHierarchyDueDate = function()
{
	return this.m_hierarchyDueDate;
};
oFF.QFilterCartesianList.prototype.getHierarchyName = function()
{
	return this.m_hierarchyName;
};
oFF.QFilterCartesianList.prototype.getHierarchyVersion = function()
{
	return this.m_hierarchyVersion;
};
oFF.QFilterCartesianList.prototype.getOlapComponentType = function()
{
	return oFF.FilterComponentType.CARTESIAN_LIST;
};
oFF.QFilterCartesianList.prototype.getOp = function(index)
{
	return this.getCartesianElement(index);
};
oFF.QFilterCartesianList.prototype.getSupplementFieldNames = function()
{
	return this.m_supplementFields;
};
oFF.QFilterCartesianList.prototype.getSupplementFields = function()
{
	let supplementFields = oFF.XList.create();
	let fieldAccessor = this.getFieldAccessorSingle();
	if (oFF.notNull(fieldAccessor))
	{
		let iterator = this.m_supplementFields.getIterator();
		while (iterator.hasNext())
		{
			supplementFields.add(fieldAccessor.getFieldByName(iterator.next()));
		}
	}
	return supplementFields;
};
oFF.QFilterCartesianList.prototype.getUiSettings = function(contextType)
{
	if (oFF.isNull(this.m_uiSettings))
	{
		this.m_uiSettings = oFF.XHashMapByString.create();
	}
	if (!this.m_uiSettings.containsKey(contextType.getName()))
	{
		this.m_uiSettings.put(contextType.getName(), oFF.QFilterUiSettings.create(this, this));
	}
	return this.m_uiSettings.getByKey(contextType.getName());
};
oFF.QFilterCartesianList.prototype.hasUiSettings = function(contextType)
{
	return oFF.notNull(this.m_uiSettings) && this.m_uiSettings.getByKey(contextType.getName()) !== null;
};
oFF.QFilterCartesianList.prototype.isConvertToFlatFilter = function()
{
	return this.m_convertToFlatFilter;
};
oFF.QFilterCartesianList.prototype.mergeDeepRecursive = function(settings, other)
{
	let otherList = other;
	this.copyFrom(otherList, null);
};
oFF.QFilterCartesianList.prototype.releaseObject = function()
{
	this.m_fieldMd = oFF.XObjectExt.release(this.m_fieldMd);
	this.m_fieldContext = oFF.XObjectExt.release(this.m_fieldContext);
	this.m_supplementFields = oFF.XObjectExt.release(this.m_supplementFields);
	this.m_hierarchyName = null;
	this.m_hierarchyDueDate = oFF.XObjectExt.release(this.m_hierarchyDueDate);
	this.m_hierarchyVersion = null;
	this.m_uiSettings = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_uiSettings);
	oFF.AbstractFilterList.prototype.releaseObject.call( this );
};
oFF.QFilterCartesianList.prototype.setConvertToFlatFilter = function(convertToFlatFilter)
{
	let oldValue = this.m_convertToFlatFilter;
	this.m_convertToFlatFilter = convertToFlatFilter;
	this.notifyPropertyBooleanChanged(oFF.QFilterProperties.QY_CONVERT_TO_FLAT_SELECTION_CL, oldValue, convertToFlatFilter);
};
oFF.QFilterCartesianList.prototype.setField = function(field)
{
	if (oFF.notNull(field))
	{
		this.setFieldMetadata(field.getMetadata());
		this.m_fieldContext = oFF.XWeakReferenceUtil.getWeakRef(field.getContext());
	}
};
oFF.QFilterCartesianList.prototype.setFieldMetadata = function(fieldMd)
{
	this.m_fieldMd = oFF.XWeakReferenceUtil.getWeakRef(fieldMd);
};
oFF.QFilterCartesianList.prototype.setFieldName = function(fieldName)
{
	oFF.XObjectExt.assertNull(this.getContext());
	oFF.XObjectExt.assertNull(this.m_fieldMd);
	this.m_fieldName = fieldName;
};
oFF.QFilterCartesianList.prototype.setHierarchyDueDate = function(hierarchyDueDate)
{
	let qm = this.getQueryModel();
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.HIERARCHY_INFO_IN_FILTER) && (oFF.isNull(qm) || qm.getSystemType().isTypeOf(oFF.SystemType.ABAP)))
	{
		if (!oFF.XObjectExt.areEqual(hierarchyDueDate, this.m_hierarchyDueDate))
		{
			this.m_hierarchyDueDate = hierarchyDueDate;
			this.notifyNodeChanged();
		}
	}
};
oFF.QFilterCartesianList.prototype.setHierarchyInfo = function(hierarchyName, hierarchyDueDate, hierarchyVersion)
{
	this.setHierarchyName(hierarchyName);
	this.setHierarchyDueDate(hierarchyDueDate);
	this.setHierarchyVersion(hierarchyVersion);
};
oFF.QFilterCartesianList.prototype.setHierarchyName = function(name)
{
	if (!oFF.XString.isEqual(name, this.m_hierarchyName))
	{
		this.m_hierarchyName = name;
		this.notifyNodeChanged();
	}
};
oFF.QFilterCartesianList.prototype.setHierarchyVersion = function(hierarchyVersion)
{
	let qm = this.getQueryModel();
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.HIERARCHY_INFO_IN_FILTER) && (oFF.isNull(qm) || qm.getSystemType().isTypeOf(oFF.SystemType.ABAP)))
	{
		if (!oFF.XString.isEqual(hierarchyVersion, this.m_hierarchyVersion))
		{
			this.m_hierarchyVersion = hierarchyVersion;
			this.notifyNodeChanged();
		}
	}
};
oFF.QFilterCartesianList.prototype.setupCartesianList = function(context, parentNode, fieldMd, hierarchyName)
{
	this.setupFilterList(context, parentNode, "Member Selection List");
	this.setFieldMetadata(fieldMd);
	this.m_hierarchyName = hierarchyName;
	this.m_supplementFields = oFF.XList.create();
};

oFF.QFilterCartesianProduct = function() {};
oFF.QFilterCartesianProduct.prototype = new oFF.AbstractFilterList();
oFF.QFilterCartesianProduct.prototype._ff_c = "QFilterCartesianProduct";

oFF.QFilterCartesianProduct._create = function(context, filterContainer)
{
	let object = new oFF.QFilterCartesianProduct();
	object.setupFilterList(context, filterContainer, "Selection Cartesian Product");
	return object;
};
oFF.QFilterCartesianProduct._createWithoutContext = function()
{
	let object = new oFF.QFilterCartesianProduct();
	object.setupFilterList(null, null, "Selection Cartesian Product");
	return object;
};
oFF.QFilterCartesianProduct.prototype.add = function(element)
{
	this.assertElementType(element);
	oFF.AbstractFilterList.prototype.add.call( this , element);
};
oFF.QFilterCartesianProduct.prototype.addAll = function(other)
{
	if (oFF.notNull(other) && other !== this)
	{
		let theList = other.getValuesAsReadOnlyList();
		this.queueEventing();
		for (let i = 0; i < theList.size(); i++)
		{
			this.add(theList.get(i));
		}
		this.resumeEventing();
	}
};
oFF.QFilterCartesianProduct.prototype.addCartesianList = function(list, dimension)
{
	if (!dimension.isUniversalDisplayHierarchyDimension())
	{
		oFF.AbstractFilterList.prototype.add.call( this , list);
	}
};
oFF.QFilterCartesianProduct.prototype.assertElementType = function(element)
{
	if (oFF.notNull(element) && !element.getComponentType().isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
	{
		throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate4("Type is not allowed. Expected ", oFF.FilterComponentType.CARTESIAN_LIST.getName(), " but got ", element.getComponentType().getName()));
	}
};
oFF.QFilterCartesianProduct.prototype.cloneOlapComponent = function(context, parent)
{
	let clone = oFF.QFilterCartesianProduct._create(context, null);
	clone.copyFrom(this, null);
	return clone;
};
oFF.QFilterCartesianProduct.prototype.copyFromInternal = function(other, flags)
{
	oFF.AbstractFilterList.prototype.copyFromInternal.call( this , other, flags);
	let originCartesianProduct = other;
	let filterExpression = this.getFilterExpression();
	let sizeProduct = originCartesianProduct.size();
	for (let idxProduct = 0; idxProduct < sizeProduct; idxProduct++)
	{
		let originList = originCartesianProduct.getCartesianChild(idxProduct);
		let fieldMetadata = originList.getFieldMetadata();
		let hierarchyName = originList.getHierarchyName();
		let cloneList;
		if (originList.getOlapComponentType() === oFF.FilterComponentType.CONVERTED_TIME_CARTESIAN_LIST)
		{
			cloneList = oFF.QFilterConvertedTimeCartesianList._create(this, filterExpression, fieldMetadata, hierarchyName);
		}
		else
		{
			cloneList = oFF.QFilterCartesianList._createMd(this, filterExpression, fieldMetadata, hierarchyName);
		}
		oFF.AbstractFilterList.prototype.addInternal.call( this , cloneList);
		cloneList.copyFrom(originList, flags);
	}
};
oFF.QFilterCartesianProduct.prototype.getCartesianChild = function(index)
{
	return this.get(index);
};
oFF.QFilterCartesianProduct.prototype.getCartesianList = function(dimension)
{
	let count = this.size();
	for (let i = 0; i < count; i++)
	{
		let filterList = this.getCartesianChild(i);
		if (filterList.getDimension() === dimension)
		{
			return filterList;
		}
		if (oFF.notNull(dimension) && oFF.XString.isEqual(filterList.getDimensionName(), dimension.getName()))
		{
			return filterList;
		}
	}
	return null;
};
oFF.QFilterCartesianProduct.prototype.getCartesianListByDimensionMdWithDefault = function(dimensionMd)
{
	let position = this.getIndexOfCartesianListOfDimension(dimensionMd.getName());
	if (position > -1)
	{
		return this.getCartesianChild(position);
	}
	let context = this.getContext();
	if (oFF.isNull(context))
	{
		return null;
	}
	let olapEnv = context.getOlapEnv();
	let fieldMd = dimensionMd.getKeyFieldMetadata();
	if (oFF.isNull(fieldMd))
	{
		fieldMd = olapEnv.getKeyFieldMetadataByDimension(dimensionMd.getCacheKey());
	}
	let cartesianList = oFF.QFilterCartesianList._createMd(context, null, fieldMd, null);
	oFF.AbstractFilterList.prototype.add.call( this , cartesianList);
	return cartesianList;
};
oFF.QFilterCartesianProduct.prototype.getCartesianListByDimensionName = function(dimensionName)
{
	let position = this.getIndexOfCartesianListOfDimension(dimensionName);
	return position === -1 ? null : this.getCartesianChild(position);
};
oFF.QFilterCartesianProduct.prototype.getCartesianListByField = function(field)
{
	let filterList = this.getCartesianList(field.getDimension());
	if (oFF.isNull(filterList))
	{
		filterList = oFF.QFilterCartesianList._createMd(this.getContext(), null, field.getMetadata(), null);
		oFF.AbstractFilterList.prototype.add.call( this , filterList);
	}
	return oFF.XString.isEqual(filterList.getFieldMetadata().getName(), field.getMetadata().getName()) ? filterList : null;
};
oFF.QFilterCartesianProduct.prototype.getCartesianListWithDefault = function(dimension)
{
	let list = this.getCartesianList(dimension);
	if (oFF.isNull(list))
	{
		list = oFF.QFilterCartesianList._createMd(this.getContext(), null, dimension.getKeyField().getMetadata(), null);
		this.updateListContext(list, dimension);
		this.addCartesianList(list, dimension);
	}
	else
	{
		list.setHierarchyName(dimension.getHierarchyName());
	}
	return list;
};
oFF.QFilterCartesianProduct.prototype.getConvertedTimeCartesianListWithDefault = function(dimension)
{
	let list = this.getCartesianList(dimension);
	if (oFF.isNull(list))
	{
		list = oFF.QFilterConvertedTimeCartesianList._create(this.getContext(), null, dimension.getKeyField().getMetadata(), null);
		this.updateListContext(list, dimension);
		this.addCartesianList(list, dimension);
	}
	else if (list.getOlapComponentType() !== oFF.FilterComponentType.CONVERTED_TIME_CARTESIAN_LIST)
	{
		this.removeInternal(list);
		list = oFF.QFilterConvertedTimeCartesianList._createFromCartesianList(list);
		this.addCartesianList(list, dimension);
	}
	else
	{
		list.setHierarchyName(dimension.getHierarchyName());
	}
	return list;
};
oFF.QFilterCartesianProduct.prototype.getIndexOfCartesianListOfDimension = function(dimensionName)
{
	let count = this.size();
	for (let i = 0; i < count; i++)
	{
		let filterList = this.getCartesianChild(i);
		let fieldMetadata = filterList.getFieldMetadata();
		if (oFF.isNull(fieldMetadata))
		{
			continue;
		}
		let dimensionMetadata = fieldMetadata.getDimensionMetadata();
		if (oFF.notNull(dimensionMetadata) && oFF.XString.isEqual(dimensionMetadata.getName(), dimensionName))
		{
			return i;
		}
	}
	return -1;
};
oFF.QFilterCartesianProduct.prototype.getOlapComponentType = function()
{
	return oFF.FilterComponentType.CARTESIAN_PRODUCT;
};
oFF.QFilterCartesianProduct.prototype.insert = function(index, element)
{
	this.assertElementType(element);
	oFF.AbstractFilterList.prototype.insert.call( this , index, element);
};
oFF.QFilterCartesianProduct.prototype.removeByDimensionName = function(dimensionName)
{
	let position = this.getIndexOfCartesianListOfDimension(dimensionName);
	if (position === -1)
	{
		return null;
	}
	let filterList = this.getCartesianChild(position);
	this.removeAt(position);
	return filterList;
};
oFF.QFilterCartesianProduct.prototype.set = function(index, element)
{
	this.assertElementType(element);
	oFF.AbstractFilterList.prototype.set.call( this , index, element);
};
oFF.QFilterCartesianProduct.prototype.updateListContext = function(cartesianList, dimension)
{
	let context = dimension.getKeyField().getContext();
	if (context.getComponentType() === oFF.OlapComponentType.KEY_REF_STORE_CONTEXT)
	{
		cartesianList.setContext(context);
	}
};

oFF.QFilterNot = function() {};
oFF.QFilterNot.prototype = new oFF.QFilterAlgebraOperation();
oFF.QFilterNot.prototype._ff_c = "QFilterNot";

oFF.QFilterNot.MAX_SIZE = 1;
oFF.QFilterNot._create = function(context, selection)
{
	let object = new oFF.QFilterNot();
	object.setupFilterAlgebraOperation(context, selection);
	return object;
};
oFF.QFilterNot.prototype.add = function(element)
{
	this.assertListCapacity();
	oFF.QFilterAlgebraOperation.prototype.add.call( this , element);
};
oFF.QFilterNot.prototype.addAll = function(other)
{
	if (oFF.notNull(other) && other !== this)
	{
		if (other.size() + this.size() > oFF.QFilterNot.MAX_SIZE)
		{
			throw oFF.XException.createIllegalArgumentException("List has reached it's maximum capacity");
		}
		oFF.QFilterAlgebraOperation.prototype.addAll.call( this , other);
	}
};
oFF.QFilterNot.prototype.assertListCapacity = function()
{
	if (this.size() === oFF.QFilterNot.MAX_SIZE)
	{
		throw oFF.XException.createIllegalArgumentException("List has reached it's maximum capacity");
	}
};
oFF.QFilterNot.prototype.getChild = function()
{
	return this.isEmpty() ? null : this.get(0);
};
oFF.QFilterNot.prototype.getOlapComponentType = function()
{
	return oFF.FilterComponentType.NOT;
};
oFF.QFilterNot.prototype.insert = function(index, element)
{
	this.assertListCapacity();
	oFF.QFilterAlgebraOperation.prototype.insert.call( this , index, element);
};
oFF.QFilterNot.prototype.setChild = function(child)
{
	if (this.isEmpty())
	{
		this.add(child);
	}
	else
	{
		this.set(0, child);
	}
};

oFF.QFilterOr = function() {};
oFF.QFilterOr.prototype = new oFF.QFilterAlgebraOperation();
oFF.QFilterOr.prototype._ff_c = "QFilterOr";

oFF.QFilterOr._create = function(context, selectionContainer)
{
	let object = new oFF.QFilterOr();
	object.setupFilterAlgebraOperation(context, selectionContainer);
	return object;
};
oFF.QFilterOr.prototype.getOlapComponentType = function()
{
	return oFF.FilterComponentType.OR;
};

oFF.QCurrencyMeasure = function() {};
oFF.QCurrencyMeasure.prototype = new oFF.QFormulaMeasure();
oFF.QCurrencyMeasure.prototype._ff_c = "QCurrencyMeasure";

oFF.QCurrencyMeasure.SIGNED_DATA = "SignedData";
oFF.QCurrencyMeasure._createCurrencyMeasure = function(context, structure)
{
	let capabilities = context.getModelCapabilities();
	if (!capabilities.supportsCurrencyTranslation() && !context.getQueryModel().getCurrencyTranslationManager().isLegacyMeasureCurrencyTranslationAccountModel())
	{
		oFF.noSupport();
	}
	let member = new oFF.QCurrencyMeasure();
	member.setupCurrencyMeasure(context, structure);
	return member;
};
oFF.QCurrencyMeasure.prototype.m_baseMeasureName = null;
oFF.QCurrencyMeasure.prototype.m_localCurrency = false;
oFF.QCurrencyMeasure.prototype.m_localCurrencyTranslation = null;
oFF.QCurrencyMeasure.prototype.m_rateTypeInherit = null;
oFF.QCurrencyMeasure.prototype.m_transientCurrencyTranslation = false;
oFF.QCurrencyMeasure.prototype.m_transientMember = null;
oFF.QCurrencyMeasure.prototype.applyTransientCurrencyTranslation = function(context)
{
	if (this.getCurrencyTranslationName() === null)
	{
		if (!this.m_localCurrencyTranslation.isParametersComplete())
		{
			throw oFF.XException.createIllegalStateException("Missing parameters for currency translation");
		}
		this.m_transientCurrencyTranslation = true;
		if (!this.m_localCurrency)
		{
			let transientName = oFF.XStringUtils.concatenate5("TRANSIENT", ".", this.getName(), ".", this.m_baseMeasureName);
			this.m_localCurrencyTranslation.setName(transientName);
			let newCurrencyTranslation = context.getQueryModel().getCurrencyTranslationManager().addNewMeasureCurrencyTranslation(this.m_localCurrencyTranslation.getName(), this.m_localCurrencyTranslation.getText());
			newCurrencyTranslation.copyFrom(this.m_localCurrencyTranslation, null);
			this.setCurrencyTranslationName(transientName);
		}
		else
		{
			this.setCurrencyTranslationName(null);
		}
	}
};
oFF.QCurrencyMeasure.prototype.copyFromInternal = function(other, flags)
{
	if (other.getMemberType() !== this.getMemberType())
	{
		return;
	}
	oFF.QFormulaMeasure.prototype.copyFromInternal.call( this , other, flags);
	this.copySharableProperties(other, false);
};
oFF.QCurrencyMeasure.prototype.copySharableProperties = function(origin, isShallowCopy)
{
	oFF.QFormulaMeasure.prototype.copySharableProperties.call( this , origin, isShallowCopy);
	let originCurrencyMeasure = origin;
	this.m_baseMeasureName = originCurrencyMeasure.m_baseMeasureName;
	this.m_localCurrency = originCurrencyMeasure.m_localCurrency;
	this.m_localCurrencyTranslation.copyFrom(originCurrencyMeasure.m_localCurrencyTranslation, null);
};
oFF.QCurrencyMeasure.prototype.destroyTransientObjects = function(context)
{
	oFF.QFormulaMeasure.prototype.destroyTransientObjects.call( this , context);
	let dimensionContext;
	let clientQueryObjectManager = this.getOlapEnv().getClientQueryObjectManager();
	if (clientQueryObjectManager.getClientQueryObjectByKeyRef(this) !== null)
	{
		dimensionContext = this.getDimensionContext(context.getQueryManager());
	}
	else
	{
		dimensionContext = this.getDimension();
	}
	let dependentMember = dimensionContext.getStructureMemberByAliasOrMember(this.m_baseMeasureName);
	if (oFF.notNull(dependentMember))
	{
		let isTransientMemberTag = oFF.QTransientConstants.createIsTransientMemberTag(dependentMember.getAliasOrMemberName());
		if (dimensionContext.getTagging().containsKey(isTransientMemberTag))
		{
			dimensionContext.removeMeasure(this.m_baseMeasureName);
			dimensionContext.getTagging().remove(isTransientMemberTag);
		}
		let tagging = dependentMember.getTagging();
		if (tagging.containsKey(oFF.QTransientConstants.TAG_OVERRIDE_DESCRIPTION))
		{
			tagging.remove(oFF.QTransientConstants.TAG_OVERRIDE_DESCRIPTION);
		}
	}
	if (context.getQueryModel().getDimensionByType(oFF.DimensionType.ACCOUNT) !== null)
	{
		if (!context.getQueryModel().getCurrencyTranslationManager().isLegacyMeasureCurrencyTranslationAccountModel())
		{
			this.releaseTransientCurrencyTranslation(context);
		}
	}
	else
	{
		this.releaseTransientCurrencyTranslation(context);
	}
};
oFF.QCurrencyMeasure.prototype.exportRuntimeObject = function(context, messageManager)
{
	let ctm = context.getQueryModel().getCurrencyTranslationManager();
	let baseMeasureName = this.m_baseMeasureName;
	if (ctm.isLegacyMeasureCurrencyTranslationAccountModel() && oFF.XStringUtils.isNullOrEmpty(baseMeasureName))
	{
		baseMeasureName = ctm.getCurrencyTranslationCrossCalculation(this.getAliasOrMemberName());
	}
	if (oFF.XStringUtils.isNotNullAndNotEmpty(baseMeasureName))
	{
		this.setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_DO_NOT_RAISEEVENTS);
		context.getQueryModel().setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_DO_NOT_RAISEEVENTS);
		let runtimeObject = null;
		let dimensionContext = this.getDimensionContext(context.getQueryManager());
		if (ctm.isLegacyMeasureCurrencyTranslationAccountModel())
		{
			runtimeObject = dimensionContext.getStructureMemberByAliasOrMember(baseMeasureName);
		}
		else
		{
			let restrictedMeasure = oFF.QRestrictedMeasure._createRestrictedMeasure(context, dimensionContext);
			restrictedMeasure.setName(this.getName());
			restrictedMeasure.setText(this.getText());
			restrictedMeasure.getFilter().addSingleMemberFilterByDimension(dimensionContext, baseMeasureName, oFF.ComparisonOperator.EQUAL);
			restrictedMeasure.copySharableProperties(this, true);
			restrictedMeasure.setSolveOrder(this.getSolveOrder());
			restrictedMeasure.setRateType(this.getRuntimeRateType());
			runtimeObject = restrictedMeasure.exportRuntimeObject(context, messageManager);
		}
		this.resumeEventing();
		context.getQueryModel().resumeEventing();
		return runtimeObject;
	}
	else if (oFF.isNull(baseMeasureName))
	{
		let argList = oFF.XList.create();
		argList.add(oFF.XInteger.convertToString(ctm.getMaxNumberOfTranslations()));
		let measureText = this.getText();
		if (oFF.XStringUtils.isNullOrEmpty(measureText))
		{
			measureText = this.getAliasOrMemberName();
		}
		argList.add(measureText);
		messageManager.addWarning(oFF.ErrorCodes.MAXIMUM_NUMBER_OF_CURRENCY_TRANSLATIONS_EXCEEDED, oFF.ErrorMessages.getText(oFF.ErrorMessages.MAXIMUM_NUMBER_OF_CURRENCY_TRANSLATIONS_EXCEEDED, argList, this.getAliasOrMemberName(), null));
	}
	return null;
};
oFF.QCurrencyMeasure.prototype.generateTransientObjects = function(context, messageManager)
{
	let dimensionContext;
	let clientQueryObjectManager = this.getOlapEnv().getClientQueryObjectManager();
	if (clientQueryObjectManager.getClientQueryObjectByKeyRef(this) !== null)
	{
		dimensionContext = this.getDimensionContext(context.getQueryManager());
	}
	else
	{
		dimensionContext = this.getDimension();
	}
	let currencyTranslationManager = context.getQueryModel().getCurrencyTranslationManager();
	let isAccountModel = context.getQueryModel().getDimensionByType(oFF.DimensionType.ACCOUNT) !== null;
	if (isAccountModel && currencyTranslationManager.isLegacyMeasureCurrencyTranslationAccountModel())
	{
		this.m_baseMeasureName = currencyTranslationManager.getCurrencyTranslationCrossCalculation(this.getAliasOrMemberName());
		let baseMeasure = dimensionContext.getStructureMemberByAliasOrMember(this.m_baseMeasureName);
		if (oFF.notNull(baseMeasure))
		{
			baseMeasure.getTagging().put(oFF.QTransientConstants.TAG_OVERRIDE_DESCRIPTION, this.getText());
		}
	}
	else if (isAccountModel && (oFF.XStringUtils.isNullOrEmpty(this.m_baseMeasureName) || oFF.XString.isEqual(this.m_baseMeasureName, oFF.QCurrencyMeasure.SIGNED_DATA)))
	{
		this.m_baseMeasureName = oFF.QCurrencyMeasure.SIGNED_DATA;
		let basePlaceholderMeasure = dimensionContext.getStructureMemberByAliasOrMember(this.m_baseMeasureName);
		if (oFF.notNull(basePlaceholderMeasure) && !oFF.CtRateType.isDefined(this.getRateType()))
		{
			this.m_rateTypeInherit = basePlaceholderMeasure.getRateType();
		}
		this.applyTransientCurrencyTranslation(context);
	}
	else
	{
		let referenceMeasure = dimensionContext.getStructureMemberByAliasOrMember(this.m_baseMeasureName);
		if (oFF.isNull(referenceMeasure))
		{
			referenceMeasure = clientQueryObjectManager.getStructuredMember(this.m_baseMeasureName, this.getStorageName(), true);
			if (oFF.notNull(referenceMeasure))
			{
				referenceMeasure.generateTransientObjects(dimensionContext, messageManager);
				dimensionContext.getTagging().put(oFF.QTransientConstants.createIsTransientMemberTag(referenceMeasure.getAliasOrMemberName()), "");
				dimensionContext.addMeasure(referenceMeasure);
			}
		}
		if (oFF.notNull(referenceMeasure) && !oFF.CtRateType.isDefined(this.getRateType()))
		{
			this.m_rateTypeInherit = referenceMeasure.getRateType();
		}
		this.applyTransientCurrencyTranslation(context);
	}
};
oFF.QCurrencyMeasure.prototype.getBaseMeasureName = function()
{
	return this.m_baseMeasureName;
};
oFF.QCurrencyMeasure.prototype.getDateOffset = function()
{
	return this.m_localCurrencyTranslation.getDateOffset();
};
oFF.QCurrencyMeasure.prototype.getDateOffsetGranularity = function()
{
	return this.m_localCurrencyTranslation.getDateOffsetGranularity();
};
oFF.QCurrencyMeasure.prototype.getErrorHandling = function()
{
	return this.m_localCurrencyTranslation.getErrorHandling();
};
oFF.QCurrencyMeasure.prototype.getFixedCategory = function()
{
	return this.m_localCurrencyTranslation.getFixedCategory();
};
oFF.QCurrencyMeasure.prototype.getFixedRateName = function()
{
	return this.m_localCurrencyTranslation.getFixedRateName();
};
oFF.QCurrencyMeasure.prototype.getFixedRateType = function()
{
	this.setCurrencyTranslationName(null);
	return this.m_localCurrencyTranslation.getFixedRateType();
};
oFF.QCurrencyMeasure.prototype.getFixedRateVersion = function()
{
	return this.m_localCurrencyTranslation.getFixedRateVersion();
};
oFF.QCurrencyMeasure.prototype.getFixedReferenceDate = function()
{
	return this.m_localCurrencyTranslation.getFixedReferenceDate();
};
oFF.QCurrencyMeasure.prototype.getFixedReferenceDateAsString = function()
{
	return this.m_localCurrencyTranslation.getFixedReferenceDateAsString();
};
oFF.QCurrencyMeasure.prototype.getFixedTargetCurrency = function()
{
	return this.m_localCurrencyTranslation.getFixedTargetCurrency();
};
oFF.QCurrencyMeasure.prototype.getLocalCurrencyTranslation = function()
{
	return this.m_localCurrencyTranslation;
};
oFF.QCurrencyMeasure.prototype.getRateNameField = function()
{
	return this.m_localCurrencyTranslation.getRateNameField();
};
oFF.QCurrencyMeasure.prototype.getRateNameFieldName = function()
{
	return this.m_localCurrencyTranslation.getRateNameFieldName();
};
oFF.QCurrencyMeasure.prototype.getReferenceDateField = function()
{
	return this.m_localCurrencyTranslation.getReferenceDateField();
};
oFF.QCurrencyMeasure.prototype.getReferenceDateFieldName = function()
{
	return this.m_localCurrencyTranslation.getReferenceDateFieldName();
};
oFF.QCurrencyMeasure.prototype.getRuntimeRateType = function()
{
	let rateType = oFF.QFormulaMeasure.prototype.getRateType.call( this );
	return oFF.notNull(rateType) ? rateType : this.m_rateTypeInherit;
};
oFF.QCurrencyMeasure.prototype.getSolveOrder = function()
{
	let ctm = this.getQueryModel().getCurrencyTranslationManager();
	if (oFF.notNull(ctm))
	{
		if (!ctm.isLegacyMeasureCurrencyTranslationAccountModel())
		{
			if (ctm.deriveRateTypeFromAccount())
			{
				return oFF.QStructureMemberSolveOrder.CURRENCY_MEASURE_WITH_ACCOUNT;
			}
			else
			{
				return oFF.QStructureMemberSolveOrder.CURRENCY_MEASURE_UNIVERSAL_MEASURE;
			}
		}
		else if (this.isCustomDefaultSolveOrderApplicable())
		{
			return oFF.QStructureMemberSolveOrder.CURRENCY_MEASURE_WITH_ACCOUNT;
		}
	}
	return oFF.QStructureMemberSolveOrder.DEFAULT_SOLVE_ORDER;
};
oFF.QCurrencyMeasure.prototype.getStorageObjectName = function()
{
	let name = this.getName();
	if (oFF.XString.isEqual(name, oFF.CurrencyConstants.DEFAULT_CURRENCY) || oFF.XString.isEqual(name, oFF.CurrencyConstants.LOCAL_CURRENCY))
	{
		let queryModel = this.getQueryModel();
		if (oFF.notNull(queryModel))
		{
			let datasetId = queryModel.getDatasetId();
			let dimension = this.getDimension();
			if (oFF.notNull(datasetId) && oFF.notNull(dimension) && dimension.supportsCurrencyTranslationMembers())
			{
				name = oFF.XStringUtils.concatenate3(datasetId, "-", name);
			}
		}
	}
	else
	{
		name = oFF.QFormulaMeasure.prototype.getStorageObjectName.call( this );
	}
	return name;
};
oFF.QCurrencyMeasure.prototype.getTargetCurrencyField = function()
{
	return this.m_localCurrencyTranslation.getTargetCurrencyField();
};
oFF.QCurrencyMeasure.prototype.getTargetCurrencyFieldName = function()
{
	return this.m_localCurrencyTranslation.getTargetCurrencyFieldName();
};
oFF.QCurrencyMeasure.prototype.getTargetCurrencyVariable = function()
{
	return this.m_localCurrencyTranslation.getTargetCurrencyVariable();
};
oFF.QCurrencyMeasure.prototype.getTargetCurrencyVariableName = function()
{
	return this.m_localCurrencyTranslation.getTargetCurrencyVariableName();
};
oFF.QCurrencyMeasure.prototype.getTopLevelDependentMemberNames = function(context)
{
	let list = oFF.XList.create();
	if (oFF.notNull(this.m_baseMeasureName))
	{
		list.add(this.m_baseMeasureName);
	}
	return list;
};
oFF.QCurrencyMeasure.prototype.isDefaultCurrency = function()
{
	return this.m_localCurrencyTranslation.isDefaultCurrency();
};
oFF.QCurrencyMeasure.prototype.isFixedRateName = function()
{
	return this.m_localCurrencyTranslation.isFixedRateName();
};
oFF.QCurrencyMeasure.prototype.isLocalCurrency = function()
{
	return this.m_localCurrency;
};
oFF.QCurrencyMeasure.prototype.isMissingRateName = function()
{
	return this.m_localCurrencyTranslation.isMissingRateName();
};
oFF.QCurrencyMeasure.prototype.isMissingReferenceDate = function()
{
	return this.m_localCurrencyTranslation.isMissingReferenceDate();
};
oFF.QCurrencyMeasure.prototype.isMissingTargetCurrency = function()
{
	return this.m_localCurrencyTranslation.isMissingTargetCurrency();
};
oFF.QCurrencyMeasure.prototype.isParametersComplete = function()
{
	return this.getCurrencyTranslationName() !== null || this.m_localCurrencyTranslation.isParametersComplete();
};
oFF.QCurrencyMeasure.prototype.isRateNameField = function()
{
	return this.m_localCurrencyTranslation.isRateNameField();
};
oFF.QCurrencyMeasure.prototype.isReferenceDateField = function()
{
	return this.m_localCurrencyTranslation.isReferenceDateField();
};
oFF.QCurrencyMeasure.prototype.isReferenceDateFixed = function()
{
	return this.m_localCurrencyTranslation.isReferenceDateFixed();
};
oFF.QCurrencyMeasure.prototype.isTargetCurrencyField = function()
{
	return this.m_localCurrencyTranslation.isTargetCurrencyField();
};
oFF.QCurrencyMeasure.prototype.isTargetCurrencyFixed = function()
{
	return this.m_localCurrencyTranslation.isTargetCurrencyFixed();
};
oFF.QCurrencyMeasure.prototype.isTargetCurrencyVariable = function()
{
	return this.m_localCurrencyTranslation.isTargetCurrencyVariable();
};
oFF.QCurrencyMeasure.prototype.releaseObject = function()
{
	this.m_localCurrencyTranslation = oFF.XObjectExt.release(this.m_localCurrencyTranslation);
	this.m_baseMeasureName = null;
	this.m_transientMember = oFF.XObjectExt.release(this.m_transientMember);
	this.m_transientCurrencyTranslation = false;
	oFF.QFormulaMeasure.prototype.releaseObject.call( this );
};
oFF.QCurrencyMeasure.prototype.releaseTransientCurrencyTranslation = function(context)
{
	if (this.m_transientCurrencyTranslation)
	{
		if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_localCurrencyTranslation.getName()))
		{
			this.setCurrencyTranslationName(null);
			context.getQueryModel().getCurrencyTranslationManager().removeMeasureCurrencyTranslationByName(this.m_localCurrencyTranslation.getName());
		}
		this.m_transientCurrencyTranslation = false;
	}
};
oFF.QCurrencyMeasure.prototype.requiresRateName = function()
{
	return this.m_localCurrencyTranslation.requiresRateName();
};
oFF.QCurrencyMeasure.prototype.requiresReferenceDate = function()
{
	return this.m_localCurrencyTranslation.requiresReferenceDate();
};
oFF.QCurrencyMeasure.prototype.requiresTargetCurrency = function()
{
	return this.m_localCurrencyTranslation.requiresTargetCurrency();
};
oFF.QCurrencyMeasure.prototype.setAutoSignFlip = function(autoSignFlip)
{
	if (autoSignFlip)
	{
		oFF.noSupport();
	}
};
oFF.QCurrencyMeasure.prototype.setBaseMeasureName = function(baseMeasureName)
{
	this.m_baseMeasureName = baseMeasureName;
	this.notifyNodeChanged();
};
oFF.QCurrencyMeasure.prototype.setDefaultCurrency = function()
{
	this.setAliasName(oFF.CurrencyConstants.DEFAULT_CURRENCY);
	this.m_localCurrencyTranslation.setDefaultCurrency();
};
oFF.QCurrencyMeasure.prototype.setDynamicRateType = function()
{
	this.m_localCurrencyTranslation.setDynamicRateType();
};
oFF.QCurrencyMeasure.prototype.setDynamicRateVersionAndCategory = function()
{
	this.setCurrencyTranslationName(null);
	this.m_localCurrencyTranslation.setDynamicRateVersionAndCategory();
	this.notifyNodeChanged();
};
oFF.QCurrencyMeasure.prototype.setDynamicReferenceDate = function()
{
	this.setCurrencyTranslationName(null);
	this.m_localCurrencyTranslation.setDynamicReferenceDate();
	this.notifyNodeChanged();
};
oFF.QCurrencyMeasure.prototype.setDynamicReferenceDateWithOffsetAndGranularity = function(offset, offsetGranularity)
{
	this.setCurrencyTranslationName(null);
	this.m_localCurrencyTranslation.setDynamicReferenceDateWithOffsetAndGranularity(offset, offsetGranularity);
	this.notifyNodeChanged();
};
oFF.QCurrencyMeasure.prototype.setErrorHandling = function(errorHandlingMode)
{
	this.setCurrencyTranslationName(null);
	this.m_localCurrencyTranslation.setErrorHandling(errorHandlingMode);
	this.notifyNodeChanged();
};
oFF.QCurrencyMeasure.prototype.setFixedCategory = function(category)
{
	this.setCurrencyTranslationName(null);
	this.m_localCurrencyTranslation.setFixedCategory(category);
	this.notifyNodeChanged();
};
oFF.QCurrencyMeasure.prototype.setFixedRateNameByString = function(rateNameString)
{
	this.setCurrencyTranslationName(null);
	this.m_localCurrencyTranslation.setFixedRateNameByString(rateNameString);
	this.notifyNodeChanged();
};
oFF.QCurrencyMeasure.prototype.setFixedRateType = function(rateType)
{
	this.setCurrencyTranslationName(null);
	this.m_localCurrencyTranslation.setFixedRateType(rateType);
	this.notifyNodeChanged();
};
oFF.QCurrencyMeasure.prototype.setFixedRateVersion = function(rateVersion)
{
	this.setCurrencyTranslationName(null);
	this.m_localCurrencyTranslation.setFixedRateVersion(rateVersion);
	this.notifyNodeChanged();
};
oFF.QCurrencyMeasure.prototype.setFixedReferenceDateByDateValue = function(referenceDateValue)
{
	this.setCurrencyTranslationName(null);
	this.m_localCurrencyTranslation.setFixedReferenceDateByDateValue(referenceDateValue);
	this.notifyNodeChanged();
};
oFF.QCurrencyMeasure.prototype.setFixedReferenceDateByString = function(referenceDateString)
{
	this.setCurrencyTranslationName(null);
	this.m_localCurrencyTranslation.setFixedReferenceDateByString(referenceDateString);
	this.notifyNodeChanged();
};
oFF.QCurrencyMeasure.prototype.setFixedTargetCurrencyByString = function(currencyName)
{
	this.setCurrencyTranslationName(null);
	this.m_localCurrencyTranslation.setFixedTargetCurrencyByString(currencyName);
	this.notifyNodeChanged();
};
oFF.QCurrencyMeasure.prototype.setLocalCurrency = function()
{
	this.setAliasName(oFF.CurrencyConstants.LOCAL_CURRENCY);
	this.m_localCurrency = true;
};
oFF.QCurrencyMeasure.prototype.setRateNameByField = function(field)
{
	this.setCurrencyTranslationName(null);
	this.m_localCurrencyTranslation.setRateNameByField(field);
	this.notifyNodeChanged();
};
oFF.QCurrencyMeasure.prototype.setRateNameByFieldName = function(fieldName)
{
	this.setCurrencyTranslationName(null);
	this.m_localCurrencyTranslation.setRateNameByFieldName(fieldName);
	this.notifyNodeChanged();
};
oFF.QCurrencyMeasure.prototype.setReferenceDateByField = function(field)
{
	this.setCurrencyTranslationName(null);
	this.m_localCurrencyTranslation.setReferenceDateByField(field);
	this.notifyNodeChanged();
};
oFF.QCurrencyMeasure.prototype.setReferenceDateByFieldName = function(fieldName)
{
	this.setCurrencyTranslationName(null);
	this.m_localCurrencyTranslation.setReferenceDateByFieldName(fieldName);
	this.notifyNodeChanged();
};
oFF.QCurrencyMeasure.prototype.setReferenceDateByFieldNameOffsetAndGranularity = function(fieldName, offset, offsetGranularity)
{
	this.setCurrencyTranslationName(null);
	this.m_localCurrencyTranslation.setReferenceDateByFieldNameOffsetAndGranularity(fieldName, offset, offsetGranularity);
	this.notifyNodeChanged();
};
oFF.QCurrencyMeasure.prototype.setReferenceDateByFieldOffsetAndGranularity = function(field, offset, offsetGranularity)
{
	this.setCurrencyTranslationName(null);
	this.m_localCurrencyTranslation.setReferenceDateByFieldOffsetAndGranularity(field, offset, offsetGranularity);
	this.notifyNodeChanged();
};
oFF.QCurrencyMeasure.prototype.setTargetCurrencyByField = function(currencyField)
{
	this.setCurrencyTranslationName(null);
	this.m_localCurrencyTranslation.setTargetCurrencyByField(currencyField);
	this.notifyNodeChanged();
};
oFF.QCurrencyMeasure.prototype.setTargetCurrencyByFieldName = function(currencyFieldName)
{
	this.setCurrencyTranslationName(null);
	this.m_localCurrencyTranslation.setTargetCurrencyByFieldName(currencyFieldName);
	this.notifyNodeChanged();
};
oFF.QCurrencyMeasure.prototype.setTargetCurrencyByVariable = function(variable)
{
	this.setCurrencyTranslationName(null);
	this.m_localCurrencyTranslation.setTargetCurrencyByVariable(variable);
	this.notifyNodeChanged();
};
oFF.QCurrencyMeasure.prototype.setTargetCurrencyByVariableName = function(variableName)
{
	this.setCurrencyTranslationName(null);
	this.m_localCurrencyTranslation.setTargetCurrencyByVariableName(variableName);
	this.notifyNodeChanged();
};
oFF.QCurrencyMeasure.prototype.setupCurrencyMeasure = function(context, structure)
{
	oFF.QFormulaMeasure.prototype.setupStructureMember.call( this , context, structure, oFF.MemberType.CURRENCY_MEASURE);
	let ctm = context.getQueryModel().getCurrencyTranslationManager();
	if (oFF.notNull(ctm) && !ctm.isLegacyMeasureCurrencyTranslationAccountModel())
	{
		this.setUnitType(oFF.UnitType.CURRENCY);
	}
	this.m_localCurrencyTranslation = oFF.QMeasureCurrencyTranslation.createWithName(context, context.getQueryModel().getCurrencyTranslationManager(), null, "");
};
oFF.QCurrencyMeasure.prototype.supportsDefaultCurrency = function()
{
	return this.m_localCurrencyTranslation.supportsDefaultCurrency();
};
oFF.QCurrencyMeasure.prototype.supportsErrorHandling = function()
{
	return this.m_localCurrencyTranslation.supportsErrorHandling();
};
oFF.QCurrencyMeasure.prototype.supportsOffsetInDays = function()
{
	return this.m_localCurrencyTranslation.supportsOffsetInDays();
};
oFF.QCurrencyMeasure.prototype.supportsOffsetInMonths = function()
{
	return this.m_localCurrencyTranslation.supportsOffsetInMonths();
};
oFF.QCurrencyMeasure.prototype.supportsPlanningParameters = function()
{
	return this.m_localCurrencyTranslation.supportsPlanningParameters();
};
oFF.QCurrencyMeasure.prototype.supportsRateName = function()
{
	return this.m_localCurrencyTranslation.supportsRateName();
};
oFF.QCurrencyMeasure.prototype.supportsReferenceDate = function()
{
	return this.m_localCurrencyTranslation.supportsReferenceDate();
};
oFF.QCurrencyMeasure.prototype.supportsReferenceDateAsField = function()
{
	return this.m_localCurrencyTranslation.supportsReferenceDateAsField();
};
oFF.QCurrencyMeasure.prototype.supportsTargetCurrency = function()
{
	return this.m_localCurrencyTranslation.supportsTargetCurrency();
};
oFF.QCurrencyMeasure.prototype.supportsTargetCurrencyAsField = function()
{
	return this.m_localCurrencyTranslation.supportsTargetCurrencyAsField();
};
oFF.QCurrencyMeasure.prototype.supportsTargetCurrencyAsVariable = function()
{
	return this.m_localCurrencyTranslation.supportsTargetCurrencyAsVariable();
};

oFF.QUnitMeasure = function() {};
oFF.QUnitMeasure.prototype = new oFF.QFormulaMeasure();
oFF.QUnitMeasure.prototype._ff_c = "QUnitMeasure";

oFF.QUnitMeasure._createUnitMeasure = function(context, structure)
{
	let capabilities = context.getModelCapabilities();
	if (!capabilities.supportsUnitTranslation())
	{
		oFF.noSupport();
	}
	let member = new oFF.QUnitMeasure();
	member.setupUnitMeasure(context, structure);
	return member;
};
oFF.QUnitMeasure.prototype.m_baseMeasureName = null;
oFF.QUnitMeasure.prototype.m_localUnitTranslation = null;
oFF.QUnitMeasure.prototype.m_transientUnitTranslation = false;
oFF.QUnitMeasure.prototype.applyTransientUnitTranslation = function(context)
{
	if (this.getUnitTranslationName() === null)
	{
		if (!this.m_localUnitTranslation.isParametersComplete())
		{
			throw oFF.XException.createIllegalStateException("Missing parameters for unit translation");
		}
		this.m_transientUnitTranslation = true;
		let transientName = oFF.XStringUtils.concatenate5("TRANSIENT", ".", this.getName(), ".", this.m_baseMeasureName);
		this.m_localUnitTranslation.setName(transientName);
		let newUnitTranslation = context.getQueryModel().getUnitTranslationManager().addNewMeasureUnitTranslation(this.m_localUnitTranslation.getName(), this.m_localUnitTranslation.getText());
		newUnitTranslation.copyFrom(this.m_localUnitTranslation, null);
		this.setUnitTranslationName(transientName);
	}
};
oFF.QUnitMeasure.prototype.copyFromInternal = function(other, flags)
{
	if (other.getMemberType() !== this.getMemberType())
	{
		return;
	}
	oFF.QFormulaMeasure.prototype.copyFromInternal.call( this , other, flags);
	this.copySharableProperties(other, false);
};
oFF.QUnitMeasure.prototype.copySharableProperties = function(origin, isShallowCopy)
{
	oFF.QFormulaMeasure.prototype.copySharableProperties.call( this , origin, isShallowCopy);
	let originMeasure = origin;
	this.m_baseMeasureName = originMeasure.m_baseMeasureName;
	this.m_localUnitTranslation.copyFrom(originMeasure.m_localUnitTranslation, null);
};
oFF.QUnitMeasure.prototype.destroyTransientObjects = function(context)
{
	oFF.QFormulaMeasure.prototype.destroyTransientObjects.call( this , context);
	let dimensionContext;
	let clientQueryObjectManager = this.getOlapEnv().getClientQueryObjectManager();
	if (clientQueryObjectManager.getClientQueryObjectByKeyRef(this) !== null)
	{
		dimensionContext = this.getDimensionContext(context.getQueryManager());
	}
	else
	{
		dimensionContext = this.getDimension();
	}
	let dependentMember = dimensionContext.getStructureMemberByAliasOrMember(this.m_baseMeasureName);
	if (oFF.notNull(dependentMember))
	{
		let isTransientMemberTag = oFF.QTransientConstants.createIsTransientMemberTag(dependentMember.getAliasOrMemberName());
		if (dimensionContext.getTagging().containsKey(isTransientMemberTag))
		{
			dimensionContext.removeMeasure(this.m_baseMeasureName);
			dimensionContext.getTagging().remove(isTransientMemberTag);
		}
		let tagging = dependentMember.getTagging();
		if (tagging.containsKey(oFF.QTransientConstants.TAG_OVERRIDE_DESCRIPTION))
		{
			tagging.remove(oFF.QTransientConstants.TAG_OVERRIDE_DESCRIPTION);
		}
	}
	this.releaseTransientUnitTranslation(context);
};
oFF.QUnitMeasure.prototype.exportRuntimeObject = function(context, messageManager)
{
	this.setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_DO_NOT_RAISEEVENTS);
	context.getQueryModel().setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_DO_NOT_RAISEEVENTS);
	let dimensionContext = this.getDimensionContext(context.getQueryManager());
	let baseMeasureName = this.m_baseMeasureName;
	let restrictedMeasure = oFF.QRestrictedMeasure._createRestrictedMeasure(context, dimensionContext);
	restrictedMeasure.setName(this.getName());
	restrictedMeasure.setText(this.getText());
	restrictedMeasure.getFilter().addSingleMemberFilterByDimension(dimensionContext, baseMeasureName, oFF.ComparisonOperator.EQUAL);
	restrictedMeasure.copySharableProperties(this, true);
	restrictedMeasure.setSolveOrder(this.getSolveOrder());
	let runtimeObject = restrictedMeasure.exportRuntimeObject(context, messageManager);
	this.resumeEventing();
	context.getQueryModel().resumeEventing();
	return runtimeObject;
};
oFF.QUnitMeasure.prototype.generateTransientObjects = function(context, messageManager)
{
	let dimensionContext;
	let clientQueryObjectManager = this.getOlapEnv().getClientQueryObjectManager();
	if (clientQueryObjectManager.getClientQueryObjectByKeyRef(this) !== null)
	{
		dimensionContext = this.getDimensionContext(context.getQueryManager());
	}
	else
	{
		dimensionContext = this.getDimension();
	}
	let referenceMeasure = dimensionContext.getStructureMemberByAliasOrMember(this.m_baseMeasureName);
	if (oFF.isNull(referenceMeasure))
	{
		referenceMeasure = clientQueryObjectManager.getStructuredMember(this.m_baseMeasureName, this.getStorageName(), true);
		if (oFF.notNull(referenceMeasure))
		{
			referenceMeasure.generateTransientObjects(dimensionContext, messageManager);
			dimensionContext.getTagging().put(oFF.QTransientConstants.createIsTransientMemberTag(referenceMeasure.getAliasOrMemberName()), "");
			dimensionContext.addMeasure(referenceMeasure);
		}
	}
	this.applyTransientUnitTranslation(context);
};
oFF.QUnitMeasure.prototype.getBaseMeasureName = function()
{
	return this.m_baseMeasureName;
};
oFF.QUnitMeasure.prototype.getDimensionName = function()
{
	return this.m_localUnitTranslation.getDimensionName();
};
oFF.QUnitMeasure.prototype.getErrorHandling = function()
{
	return this.m_localUnitTranslation.getErrorHandling();
};
oFF.QUnitMeasure.prototype.getFixedTargetUnitAsString = function()
{
	return this.m_localUnitTranslation.getFixedTargetUnitAsString();
};
oFF.QUnitMeasure.prototype.getLocalUnitTranslation = function()
{
	return this.m_localUnitTranslation;
};
oFF.QUnitMeasure.prototype.getRateLookup = function()
{
	return this.m_localUnitTranslation.getRateLookup();
};
oFF.QUnitMeasure.prototype.getSolveOrder = function()
{
	if (!this.isSolveOrderOverDefined() && this.isCustomDefaultSolveOrderApplicable() && !this.getQueryModel().hasUserDefinedMeasures() && this.getDimension().isMeasureStructure())
	{
		return oFF.QStructureMemberSolveOrder.CLIENT_DEFINED_RESTRICTED_MEASURE_ON_MEASURE_STRUCTURE;
	}
	else if (!this.isSolveOrderOverDefined() && this.isCustomDefaultSolveOrderApplicable() && this.getQueryModel().hasUserDefinedMeasures() && this.getQueryModel().isLeadingStructureAccount())
	{
		return oFF.QStructureMemberSolveOrder.RESTRICTED_MEASURE_WITH_ACCOUNT;
	}
	else if (!this.isSolveOrderOverDefined() && this.isCustomDefaultSolveOrderApplicable() && this.getQueryModel().hasUserDefinedMeasures() && this.getQueryModel().isLeadingStructureMeasure())
	{
		return oFF.QStructureMemberSolveOrder.RESTRICTED_MEASURE_UNIVERSAL_MEASURE;
	}
	else
	{
		return oFF.QFormulaMeasure.prototype.getSolveOrder.call( this );
	}
};
oFF.QUnitMeasure.prototype.getTargetUnit = function()
{
	return this.m_localUnitTranslation.getTargetUnit();
};
oFF.QUnitMeasure.prototype.getTargetUnitFieldName = function()
{
	return this.m_localUnitTranslation.getTargetUnitFieldName();
};
oFF.QUnitMeasure.prototype.getTargetUnitVariableName = function()
{
	return this.m_localUnitTranslation.getTargetUnitVariableName();
};
oFF.QUnitMeasure.prototype.getTopLevelDependentMemberNames = function(context)
{
	let list = oFF.XList.create();
	if (oFF.notNull(this.m_baseMeasureName))
	{
		list.add(this.m_baseMeasureName);
	}
	return list;
};
oFF.QUnitMeasure.prototype.isMissingErrorHandling = function()
{
	return this.m_localUnitTranslation.isMissingErrorHandling();
};
oFF.QUnitMeasure.prototype.isMissingRateLookup = function()
{
	return this.m_localUnitTranslation.isMissingRateLookup();
};
oFF.QUnitMeasure.prototype.isMissingTargetUnit = function()
{
	return this.m_localUnitTranslation.isMissingTargetUnit();
};
oFF.QUnitMeasure.prototype.isParametersComplete = function()
{
	return this.getUnitTranslationName() !== null || this.m_localUnitTranslation.isParametersComplete();
};
oFF.QUnitMeasure.prototype.isTargetUnitFieldBased = function()
{
	return this.m_localUnitTranslation.isTargetUnitFieldBased();
};
oFF.QUnitMeasure.prototype.isTargetUnitFixed = function()
{
	return this.m_localUnitTranslation.isTargetUnitFixed();
};
oFF.QUnitMeasure.prototype.isTargetUnitVariableBased = function()
{
	return this.m_localUnitTranslation.isTargetUnitVariableBased();
};
oFF.QUnitMeasure.prototype.releaseObject = function()
{
	this.m_baseMeasureName = null;
	this.m_localUnitTranslation = oFF.XObjectExt.release(this.m_localUnitTranslation);
	this.m_transientUnitTranslation = false;
	oFF.QFormulaMeasure.prototype.releaseObject.call( this );
};
oFF.QUnitMeasure.prototype.releaseTransientUnitTranslation = function(context)
{
	if (this.m_transientUnitTranslation)
	{
		if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_localUnitTranslation.getName()))
		{
			this.setUnitTranslationName(null);
			context.getQueryModel().getUnitTranslationManager().removeMeasureUnitTranslationByName(this.m_localUnitTranslation.getName());
		}
		this.m_transientUnitTranslation = false;
	}
};
oFF.QUnitMeasure.prototype.setBaseMeasureName = function(baseMeasureName)
{
	this.m_baseMeasureName = baseMeasureName;
	this.notifyNodeChanged();
};
oFF.QUnitMeasure.prototype.setDimensionName = function(dimensionName)
{
	this.setUnitTranslationName(null);
	this.m_localUnitTranslation.setDimensionName(dimensionName);
	this.notifyNodeChanged();
};
oFF.QUnitMeasure.prototype.setErrorHandling = function(errorHandlingMode)
{
	this.setUnitTranslationName(null);
	this.m_localUnitTranslation.setErrorHandling(errorHandlingMode);
	this.notifyNodeChanged();
};
oFF.QUnitMeasure.prototype.setFixedTargetUnitByString = function(unitName)
{
	this.setUnitTranslationName(null);
	this.m_localUnitTranslation.setFixedTargetUnitByString(unitName);
	this.notifyNodeChanged();
};
oFF.QUnitMeasure.prototype.setRateLookup = function(rateLookup)
{
	this.setUnitTranslationName(null);
	this.m_localUnitTranslation.setRateLookup(rateLookup);
	this.notifyNodeChanged();
};
oFF.QUnitMeasure.prototype.setTargetUnitByFieldName = function(unitFieldName)
{
	this.setUnitTranslationName(null);
	this.m_localUnitTranslation.setTargetUnitByFieldName(unitFieldName);
	this.notifyNodeChanged();
};
oFF.QUnitMeasure.prototype.setTargetUnitByVariableName = function(variableName)
{
	this.setUnitTranslationName(null);
	this.m_localUnitTranslation.setTargetUnitByVariableName(variableName);
	this.notifyNodeChanged();
};
oFF.QUnitMeasure.prototype.setupUnitMeasure = function(context, structure)
{
	oFF.QFormulaMeasure.prototype.setupStructureMember.call( this , context, structure, oFF.MemberType.UNIT_MEASURE);
	let unitTranslationManager = context.getQueryModel().getUnitTranslationManager();
	if (oFF.notNull(unitTranslationManager))
	{
		this.setUnitType(oFF.UnitType.UNIT);
	}
	this.m_localUnitTranslation = oFF.QMeasureUnitTranslation.createWithName(context, context.getQueryModel().getUnitTranslationManager(), null, "");
};

oFF.QVarianceMeasure = function() {};
oFF.QVarianceMeasure.prototype = new oFF.QFormulaMeasure();
oFF.QVarianceMeasure.prototype._ff_c = "QVarianceMeasure";

oFF.QVarianceMeasure._createVarianceMeasure = function(context, structure)
{
	let capabilities = context.getModelCapabilities();
	if (!capabilities.supportsFormulaMeasures() || !capabilities.supportsRestrictedMeasures())
	{
		oFF.noSupport();
	}
	let member = new oFF.QVarianceMeasure();
	member.setupVarianceMeasure(context, structure);
	return member;
};
oFF.QVarianceMeasure.prototype.m_baseExternalDimensionIgnoreList = null;
oFF.QVarianceMeasure.prototype.m_baseFilter = null;
oFF.QVarianceMeasure.prototype.m_baseMeasure = null;
oFF.QVarianceMeasure.prototype.m_baseTimeOperation = null;
oFF.QVarianceMeasure.prototype.m_calculationType = null;
oFF.QVarianceMeasure.prototype.m_enableFlattenBaseFilter = false;
oFF.QVarianceMeasure.prototype.m_enableFlattenReferenceFilter = false;
oFF.QVarianceMeasure.prototype.m_nullHandlingType = null;
oFF.QVarianceMeasure.prototype.m_referenceExternalDimensionIgnoreList = null;
oFF.QVarianceMeasure.prototype.m_referenceFilter = null;
oFF.QVarianceMeasure.prototype.m_referenceMeasure = null;
oFF.QVarianceMeasure.prototype.m_referenceTimeOperation = null;
oFF.QVarianceMeasure.prototype.m_transientBaseMemberMap = null;
oFF.QVarianceMeasure.prototype.m_transientRefMemberMap = null;
oFF.QVarianceMeasure.prototype.m_varianceMeasureCapabilities = null;
oFF.QVarianceMeasure.prototype.addBaseExternalDimensionToIgnore = function(externalDimensionName)
{
	if (!this.getModelCapabilities().supportsIgnoreExternalDimensions())
	{
		oFF.noSupport();
	}
	if (oFF.isNull(this.m_baseExternalDimensionIgnoreList))
	{
		this.m_baseExternalDimensionIgnoreList = oFF.XList.create();
	}
	if (!this.m_baseExternalDimensionIgnoreList.contains(externalDimensionName))
	{
		this.m_baseExternalDimensionIgnoreList.add(externalDimensionName);
		this.notifyNodeChanged();
	}
};
oFF.QVarianceMeasure.prototype.addFieldNamesUsedInFilters = function(filter, timeOperation, context, usedFields)
{
	if (oFF.notNull(filter))
	{
		let cartesianProduct = filter.getCartesianProduct();
		let complexSelectionRoot = filter.getComplexRoot();
		if (oFF.notNull(cartesianProduct))
		{
			let sizeCp = cartesianProduct.size();
			for (let i = 0; i < sizeCp; i++)
			{
				usedFields.add(cartesianProduct.getCartesianChild(i).getFieldMetadata().getName());
			}
		}
		else if (oFF.notNull(complexSelectionRoot))
		{
			this.addFieldsUsedInComplexContainer(complexSelectionRoot, usedFields);
		}
	}
	if (oFF.notNull(timeOperation))
	{
		let dimension = context.getQueryModel().getDimensionByName(timeOperation.getDimensionName());
		if (oFF.notNull(dimension))
		{
			usedFields.add(dimension.getKeyField().getName());
		}
	}
};
oFF.QVarianceMeasure.prototype.addReferenceExternalDimensionToIgnore = function(externalDimensionName)
{
	if (!this.getModelCapabilities().supportsIgnoreExternalDimensions())
	{
		oFF.noSupport();
	}
	if (oFF.isNull(this.m_referenceExternalDimensionIgnoreList))
	{
		this.m_referenceExternalDimensionIgnoreList = oFF.XList.create();
	}
	if (!this.m_referenceExternalDimensionIgnoreList.contains(externalDimensionName))
	{
		this.m_referenceExternalDimensionIgnoreList.add(externalDimensionName);
		this.notifyNodeChanged();
	}
};
oFF.QVarianceMeasure.prototype.clearBaseIgnoredExternalDimensions = function()
{
	if (oFF.notNull(this.m_baseExternalDimensionIgnoreList))
	{
		this.m_baseExternalDimensionIgnoreList.clear();
	}
	this.notifyNodeChanged();
};
oFF.QVarianceMeasure.prototype.clearBaseTimeOperation = function()
{
	this.m_baseTimeOperation = oFF.XObjectExt.release(this.m_baseTimeOperation);
	this.notifyNodeChanged();
};
oFF.QVarianceMeasure.prototype.clearReferenceIgnoredExternalDimensions = function()
{
	if (oFF.notNull(this.m_referenceExternalDimensionIgnoreList))
	{
		this.m_referenceExternalDimensionIgnoreList.clear();
	}
	this.notifyNodeChanged();
};
oFF.QVarianceMeasure.prototype.clearReferenceTimeOperation = function()
{
	this.m_referenceTimeOperation = oFF.XObjectExt.release(this.m_referenceTimeOperation);
	this.notifyNodeChanged();
};
oFF.QVarianceMeasure.prototype.copyFromInternal = function(other, flags)
{
	if (other.getMemberType() !== this.getMemberType())
	{
		return;
	}
	oFF.QFormulaMeasure.prototype.copyFromInternal.call( this , other, flags);
	this.copySharableProperties(other, false);
};
oFF.QVarianceMeasure.prototype.copySharableProperties = function(origin, isShallowCopy)
{
	oFF.QFormulaMeasure.prototype.copySharableProperties.call( this , origin, isShallowCopy);
	let originVarianceMeasure = origin;
	if (isShallowCopy && originVarianceMeasure.getDimension().getDimensionType() !== oFF.DimensionType.ACCOUNT)
	{
		this.m_baseFilter = originVarianceMeasure.m_baseFilter;
		this.m_referenceFilter = originVarianceMeasure.m_referenceFilter;
		this.m_baseExternalDimensionIgnoreList = originVarianceMeasure.m_baseExternalDimensionIgnoreList;
		this.m_referenceExternalDimensionIgnoreList = originVarianceMeasure.m_referenceExternalDimensionIgnoreList;
		this.m_baseTimeOperation = originVarianceMeasure.m_baseTimeOperation;
		this.m_referenceTimeOperation = originVarianceMeasure.m_referenceTimeOperation;
	}
	else
	{
		this.m_baseFilter.copyFrom(originVarianceMeasure.m_baseFilter, null);
		this.m_referenceFilter.copyFrom(originVarianceMeasure.m_referenceFilter, null);
		if (oFF.notNull(originVarianceMeasure.m_baseExternalDimensionIgnoreList))
		{
			this.m_baseExternalDimensionIgnoreList = originVarianceMeasure.m_baseExternalDimensionIgnoreList.createListCopy();
		}
		if (oFF.notNull(originVarianceMeasure.m_referenceExternalDimensionIgnoreList))
		{
			this.m_referenceExternalDimensionIgnoreList = originVarianceMeasure.m_referenceExternalDimensionIgnoreList.createListCopy();
		}
		if (oFF.notNull(originVarianceMeasure.m_baseTimeOperation))
		{
			this.m_baseTimeOperation = oFF.QTimeOperation.create(this.getContext(), this);
			this.m_baseTimeOperation.copyFrom(originVarianceMeasure.m_baseTimeOperation, null);
		}
		if (oFF.notNull(originVarianceMeasure.m_referenceTimeOperation))
		{
			this.m_referenceTimeOperation = oFF.QTimeOperation.create(this.getContext(), this);
			this.m_referenceTimeOperation.copyFrom(originVarianceMeasure.m_referenceTimeOperation, null);
		}
	}
	this.m_nullHandlingType = originVarianceMeasure.getNullHandlingType();
	this.m_calculationType = originVarianceMeasure.getCalculationType();
	this.m_baseMeasure = originVarianceMeasure.getBaseMeasure();
	this.m_referenceMeasure = originVarianceMeasure.getReferenceMeasure();
	this.m_enableFlattenBaseFilter = originVarianceMeasure.m_enableFlattenBaseFilter;
	this.m_enableFlattenReferenceFilter = originVarianceMeasure.m_enableFlattenReferenceFilter;
};
oFF.QVarianceMeasure.prototype.destroyTransientObjects = function(context)
{
	oFF.QFormulaMeasure.prototype.destroyTransientObjects.call( this , context);
	let dimensionContext;
	if (this.getOlapEnv().getClientQueryObjectManager().getClientQueryObjectByKeyRef(this) !== null)
	{
		dimensionContext = this.getDimensionContext(context.getQueryManager());
	}
	else
	{
		dimensionContext = this.getDimension();
	}
	let instanceId = context.getQueryManager().getInstanceId();
	let transientBaseMember = this.m_transientBaseMemberMap.getByKey(instanceId);
	if (oFF.notNull(transientBaseMember))
	{
		this.m_transientBaseMemberMap.remove(instanceId);
		dimensionContext.removeMeasure(transientBaseMember.getName());
		transientBaseMember.destroyTransientObjects(context);
		transientBaseMember = oFF.XObjectExt.release(transientBaseMember);
	}
	let transientRefMember = this.m_transientRefMemberMap.getByKey(instanceId);
	if (oFF.notNull(transientRefMember))
	{
		this.m_transientRefMemberMap.remove(instanceId);
		dimensionContext.removeMeasure(transientRefMember.getName());
		transientRefMember.destroyTransientObjects(context);
		transientRefMember = oFF.XObjectExt.release(transientRefMember);
	}
};
oFF.QVarianceMeasure.prototype.generateAndValidateTransientTimeOperationMeasures = function(context, baseMeasure, refMeasure, messageManager)
{
	let transientMessageManager = oFF.MessageManager.createMessageManagerExt(this.getSession());
	let baseRestrictedMeasure = this.generateTransientObjectIfCurrentDate(context, transientMessageManager, baseMeasure);
	let refRestrictedMeasure = this.generateTransientObjectIfCurrentDate(context, transientMessageManager, refMeasure);
	let isBaseMeasureValid = this.generateTransientTimeOperationMeasures(context, transientMessageManager, baseRestrictedMeasure, refRestrictedMeasure);
	let isReferenceMeasureValid = this.generateTransientTimeOperationMeasures(context, transientMessageManager, refRestrictedMeasure, baseRestrictedMeasure);
	let isVarianceValid = isBaseMeasureValid && isReferenceMeasureValid;
	let messageIterator = transientMessageManager.getMessages().getIterator();
	while (messageIterator.hasNext())
	{
		let message = messageIterator.next();
		let errorCode = message.getCode();
		let text = message.getText();
		text = oFF.XString.replace(text, oFF.XStringUtils.concatenate3("\"measure\":\"", this.getBaseTransientMeasureName(), "\""), oFF.XStringUtils.concatenate3("\"measure\":\"", this.getAliasOrMemberName(), "\""));
		text = oFF.XString.replace(text, oFF.XStringUtils.concatenate3("\"measure\":\"", this.getReferenceTransientMeasureName(), "\""), oFF.XStringUtils.concatenate3("\"measure\":\"", this.getAliasOrMemberName(), "\""));
		text = oFF.XString.replace(text, oFF.XStringUtils.concatenate3("\"", this.getBaseTransientMeasureName(), "\""), oFF.XStringUtils.concatenate3("\"", this.getText(), "\""));
		text = oFF.XString.replace(text, oFF.XStringUtils.concatenate3("\"", this.getReferenceTransientMeasureName(), "\""), oFF.XStringUtils.concatenate3("\"", oFF.XStringUtils.isNotNullAndNotEmpty(this.getDisplayDescription()) ? this.getDisplayDescription() : this.getText(), "\""));
		message.setText(text);
		messageManager.addMessage(oFF.XMessage.createMessage(oFF.OriginLayer.APPLICATION, message.getSeverity(), errorCode, text, null, true, null));
		if (!isVarianceValid)
		{
			this.m_validationErrorCodes.add(oFF.XIntegerValue.create(errorCode));
		}
	}
	return isVarianceValid;
};
oFF.QVarianceMeasure.prototype.generateDifferenceFunction = function(baseRM, refRM, nullConstant, zeroConstant)
{
	let differenceFunction;
	if (this.getQueryModel().getModelCapabilities().supportsVarianceOperator())
	{
		if (this.m_nullHandlingType === oFF.VarianceNullHandlingType.NULL_AS_NULL_REFERENCE_MINUS_BASE)
		{
			differenceFunction = oFF.QFactory.createFormulaFunctionWithName(this.getContext(), oFF.FormulaOperator.DELTA.getName());
			differenceFunction.add(refRM);
			differenceFunction.add(baseRM);
		}
		else if (this.m_nullHandlingType === oFF.VarianceNullHandlingType.NULL_AS_ZERO_REFERENCE_MINUS_BASE)
		{
			differenceFunction = oFF.QFactory.createFormulaFunctionWithName(this.getContext(), oFF.FormulaOperator.DIFF_NULL.getName());
			differenceFunction.add(refRM);
			differenceFunction.add(baseRM);
		}
		else if (this.m_nullHandlingType === oFF.VarianceNullHandlingType.NULL_AS_NULL_BASE_MINUS_REFERENCE)
		{
			differenceFunction = oFF.QFactory.createFormulaFunctionWithName(this.getContext(), oFF.FormulaOperator.DELTA.getName());
			differenceFunction.add(baseRM);
			differenceFunction.add(refRM);
		}
		else if (this.m_nullHandlingType === oFF.VarianceNullHandlingType.NULL_AS_ZERO_BASE_MINUS_REFERENCE)
		{
			differenceFunction = oFF.QFactory.createFormulaFunctionWithName(this.getContext(), oFF.FormulaOperator.DIFF_NULL.getName());
			differenceFunction.add(baseRM);
			differenceFunction.add(refRM);
		}
		else
		{
			throw oFF.XException.createIllegalArgumentException("Unknown variance null handler type.");
		}
	}
	else
	{
		differenceFunction = oFF.QFactory.createFormulaFunctionWithName(this.getContext(), oFF.FormulaOperator.SUBTRACTION.getName());
		let baseIfFunction = oFF.QFactory.createFormulaFunctionWithName(this.getContext(), oFF.FormulaOperator.IF.getName());
		let refIfFunction = oFF.QFactory.createFormulaFunctionWithName(this.getContext(), oFF.FormulaOperator.IF.getName());
		let baseIsNullFunction = oFF.QFactory.createFormulaFunctionWithName(this.getContext(), oFF.FormulaOperator.ISNULL.getName());
		baseIsNullFunction.add(baseRM);
		let refIsNullFunction = oFF.QFactory.createFormulaFunctionWithName(this.getContext(), oFF.FormulaOperator.ISNULL.getName());
		refIsNullFunction.add(refRM);
		if (this.m_nullHandlingType === oFF.VarianceNullHandlingType.NULL_AS_NULL_REFERENCE_MINUS_BASE)
		{
			baseIfFunction.add(baseIsNullFunction);
			baseIfFunction.add(nullConstant);
			baseIfFunction.add(refRM);
			refIfFunction.add(refIsNullFunction);
			refIfFunction.add(nullConstant);
			refIfFunction.add(baseRM);
		}
		else if (this.m_nullHandlingType === oFF.VarianceNullHandlingType.NULL_AS_ZERO_REFERENCE_MINUS_BASE)
		{
			baseIfFunction.add(refIsNullFunction);
			baseIfFunction.add(zeroConstant);
			baseIfFunction.add(refRM);
			refIfFunction.add(baseIsNullFunction);
			refIfFunction.add(zeroConstant);
			refIfFunction.add(baseRM);
		}
		else if (this.m_nullHandlingType === oFF.VarianceNullHandlingType.NULL_AS_NULL_BASE_MINUS_REFERENCE)
		{
			baseIfFunction.add(refIsNullFunction);
			baseIfFunction.add(nullConstant);
			baseIfFunction.add(baseRM);
			refIfFunction.add(baseIsNullFunction);
			refIfFunction.add(nullConstant);
			refIfFunction.add(refRM);
		}
		else if (this.m_nullHandlingType === oFF.VarianceNullHandlingType.NULL_AS_ZERO_BASE_MINUS_REFERENCE)
		{
			baseIfFunction.add(baseIsNullFunction);
			baseIfFunction.add(zeroConstant);
			baseIfFunction.add(baseRM);
			refIfFunction.add(refIsNullFunction);
			refIfFunction.add(zeroConstant);
			refIfFunction.add(refRM);
		}
		else
		{
			throw oFF.XException.createIllegalArgumentException("Unknown variance null handler type.");
		}
		differenceFunction.add(baseIfFunction);
		differenceFunction.add(refIfFunction);
		if (this.m_nullHandlingType === oFF.VarianceNullHandlingType.NULL_AS_NULL_BASE_MINUS_REFERENCE || this.m_nullHandlingType === oFF.VarianceNullHandlingType.NULL_AS_ZERO_BASE_MINUS_REFERENCE)
		{
			let differenceFromIsNullFunction = oFF.QFactory.createFormulaFunctionWithName(this.getContext(), oFF.FormulaOperator.AND.getName());
			differenceFromIsNullFunction.add(baseIsNullFunction);
			differenceFromIsNullFunction.add(refIsNullFunction);
			let isNullFunction = oFF.QFactory.createFormulaFunctionWithName(this.getContext(), oFF.FormulaOperator.IF.getName());
			isNullFunction.add(differenceFromIsNullFunction);
			isNullFunction.add(nullConstant);
			isNullFunction.add(differenceFunction);
			differenceFunction = isNullFunction;
		}
	}
	return differenceFunction;
};
oFF.QVarianceMeasure.prototype.generatePercentageFunction = function(baseRM, refRM, zeroConstant, differenceFunction)
{
	let percentageFunction = oFF.QFactory.createFormulaFunctionWithName(this.getContext(), oFF.FormulaOperator.DIVISION.getName());
	percentageFunction.add(differenceFunction);
	let divisorFunction;
	if (this.m_calculationType === oFF.VarianceCalculationType.PERCENTAGE_WITH_ABSOLUTE_BASE_DIVIDE_BY_BASE)
	{
		divisorFunction = oFF.QFactory.createFormulaFunctionWithName(this.getContext(), oFF.FormulaOperator.ABS.getName());
		divisorFunction.add(baseRM);
		percentageFunction.add(divisorFunction);
	}
	else if (this.m_calculationType === oFF.VarianceCalculationType.PERCENTAGE_WITH_ABSOLUTE_BASE_DIVIDE_BY_REFERENCE)
	{
		divisorFunction = oFF.QFactory.createFormulaFunctionWithName(this.getContext(), oFF.FormulaOperator.ABS.getName());
		divisorFunction.add(refRM);
		percentageFunction.add(divisorFunction);
	}
	else if (this.m_calculationType === oFF.VarianceCalculationType.PERCENTAGE_DIVIDE_BY_REFERENCE)
	{
		percentageFunction.add(refRM);
	}
	else
	{
		percentageFunction.add(baseRM);
	}
	if (this.m_nullHandlingType === oFF.VarianceNullHandlingType.NULL_AS_ZERO_REFERENCE_MINUS_BASE)
	{
		if (this.getQueryModel().getModelCapabilities().supportsVarianceOperator())
		{
			let nDivPercentageFunction = oFF.QFactory.createFormulaFunctionWithName(this.getContext(), oFF.FormulaOperator.NDIV0.getName());
			nDivPercentageFunction.add(percentageFunction);
			return nDivPercentageFunction;
		}
		let percentageIfFunction = oFF.QFactory.createFormulaFunctionWithName(this.getContext(), oFF.FormulaOperator.IF.getName());
		let percentageIsNullFunction = oFF.QFactory.createFormulaFunctionWithName(this.getContext(), oFF.FormulaOperator.ISNULL.getName());
		percentageIsNullFunction.add(baseRM);
		percentageIfFunction.add(percentageIsNullFunction);
		percentageIfFunction.add(zeroConstant);
		percentageIfFunction.add(percentageFunction);
		return percentageIfFunction;
	}
	return percentageFunction;
};
oFF.QVarianceMeasure.prototype.generateTransientObjectIfCurrentDate = function(context, messageManager, measureMember)
{
	if (oFF.notNull(measureMember) && measureMember.getMemberType() === oFF.MemberType.RESTRICTED_MEASURE)
	{
		let restrictedMeasure = measureMember;
		if (restrictedMeasure.getTimeOperation() !== null && restrictedMeasure.getTimeOperation().getFunction() === oFF.QTimeOperationFunction.CURRENT_DATE)
		{
			return restrictedMeasure.exportRuntimeObject(context, messageManager);
		}
		return restrictedMeasure;
	}
	return null;
};
oFF.QVarianceMeasure.prototype.generateTransientObjects = function(context, messageManager)
{
	oFF.QFormulaMeasure.prototype.generateTransientObjects.call( this , context, messageManager);
	let dimensionContext;
	if (this.getOlapEnv().getClientQueryObjectManager().getClientQueryObjectByKeyRef(this) !== null)
	{
		dimensionContext = this.getDimensionContext(context.getQueryManager());
	}
	else
	{
		dimensionContext = this.getDimension();
	}
	let instanceId = context.getQueryManager().getInstanceId();
	let baseMeasure = this.generateTransientStructureMember(this.m_baseTimeOperation, this.m_baseFilter, this.getBaseTransientMeasureName(), this.m_baseExternalDimensionIgnoreList, this.m_baseMeasure, this.m_enableFlattenBaseFilter, dimensionContext);
	let refMeasure = this.generateTransientStructureMember(this.m_referenceTimeOperation, this.m_referenceFilter, this.getReferenceTransientMeasureName(), this.m_referenceExternalDimensionIgnoreList, this.m_referenceMeasure, this.m_enableFlattenReferenceFilter, dimensionContext);
	if (!this.generateAndValidateTransientTimeOperationMeasures(context, baseMeasure, refMeasure, messageManager))
	{
		return;
	}
	if (oFF.notNull(baseMeasure) && baseMeasure.getMemberType() === oFF.MemberType.RESTRICTED_MEASURE && dimensionContext.getStructureMember(baseMeasure.getName()) === null)
	{
		if (baseMeasure.getAliasName() !== null && dimensionContext.getFreePlaceholderIds().size() === 0)
		{
			messageManager.addError(oFF.ErrorCodes.FREE_PLACEHOLDER_NOT_FOUND, oFF.ErrorMessages.FREE_PLACEHOLDER_NOT_FOUND);
			return;
		}
		baseMeasure.generateTransientObjects(context, messageManager);
		this.m_transientBaseMemberMap.put(instanceId, baseMeasure);
		dimensionContext.addMeasure(baseMeasure);
	}
	if (oFF.notNull(refMeasure) && refMeasure.getMemberType() === oFF.MemberType.RESTRICTED_MEASURE && dimensionContext.getStructureMember(refMeasure.getName()) === null)
	{
		if (refMeasure.getAliasName() !== null && dimensionContext.getFreePlaceholderIds().size() === 0)
		{
			messageManager.addError(oFF.ErrorCodes.FREE_PLACEHOLDER_NOT_FOUND, oFF.ErrorMessages.FREE_PLACEHOLDER_NOT_FOUND);
			return;
		}
		refMeasure.generateTransientObjects(context, messageManager);
		this.m_transientRefMemberMap.put(instanceId, refMeasure);
		dimensionContext.addMeasure(refMeasure);
	}
};
oFF.QVarianceMeasure.prototype.generateTransientStructureMember = function(timeOperation, filter, transientMeasureName, externalDimensionIgnoreList, measureName, enableFlattenFilter, dimensionContext)
{
	if (!oFF.QFilterUtil.isFilterNullOrEmpty(filter) || oFF.notNull(timeOperation) && timeOperation.needsTransientTimeSelection())
	{
		let restrictedMeasure = oFF.QRestrictedMeasure._createRestrictedMeasure(this.getContext(), dimensionContext);
		if (dimensionContext.getPlaceholderIds().size() > 0)
		{
			restrictedMeasure.setAliasName(transientMeasureName);
		}
		else
		{
			restrictedMeasure.setName(transientMeasureName);
		}
		if (filter.getFilterRootElement() !== null)
		{
			restrictedMeasure.getFilter().copyFrom(filter, null);
		}
		if (oFF.notNull(timeOperation))
		{
			if (timeOperation.getGranularity() === oFF.QTimeOperationGranularity.OTHER && timeOperation.getHierarchyLevelName() !== null)
			{
				restrictedMeasure.setTimeOperationByHierarchyLevel(timeOperation.getDimensionName(), timeOperation.getFunction(), timeOperation.getHierarchyLevelName(), timeOperation.getPeriod());
			}
			else
			{
				restrictedMeasure.setTimeOperation(timeOperation.getDimensionName(), timeOperation.getFunction(), timeOperation.getGranularity(), timeOperation.getPeriod());
			}
			restrictedMeasure.getTimeOperation().copyFrom(timeOperation, null);
		}
		restrictedMeasure.getFilter().addSingleMemberFilterByDimension(dimensionContext, measureName, oFF.ComparisonOperator.EQUAL);
		restrictedMeasure.setResultVisibility(oFF.ResultVisibility.HIDDEN);
		if (this.getNumericScale() !== null)
		{
			restrictedMeasure.setNumericScale(this.getNumericScale().getInteger());
		}
		if (oFF.notNull(externalDimensionIgnoreList))
		{
			for (let idxIgnore = 0; idxIgnore < externalDimensionIgnoreList.size(); idxIgnore++)
			{
				restrictedMeasure.addExternalDimensionToIgnore(externalDimensionIgnoreList.get(idxIgnore));
			}
		}
		restrictedMeasure.setFlattenSelection(enableFlattenFilter);
		return restrictedMeasure;
	}
	return null;
};
oFF.QVarianceMeasure.prototype.generateTransientTimeOperationMeasures = function(context, messageManager, restrictedMeasureToGenerate, dependentRestrictedMeasure)
{
	if (oFF.isNull(restrictedMeasureToGenerate))
	{
		return true;
	}
	let isDependentRMStaticOrCurrentDate = oFF.notNull(dependentRestrictedMeasure) && (dependentRestrictedMeasure.getTimeOperation() === null || dependentRestrictedMeasure.getTimeOperation() !== null && dependentRestrictedMeasure.getTimeOperation().getFunction() === oFF.QTimeOperationFunction.CURRENT_DATE);
	if (restrictedMeasureToGenerate.getTimeOperation() !== null && isDependentRMStaticOrCurrentDate)
	{
		restrictedMeasureToGenerate.getTimeOperation().setFilterElementContext(dependentRestrictedMeasure.getFilterRootWithTransientTimeSelection());
	}
	let exportRuntimeObject = restrictedMeasureToGenerate.exportRuntimeObject(context, messageManager);
	if (oFF.notNull(exportRuntimeObject))
	{
		restrictedMeasureToGenerate.setTransientTimeSelection(exportRuntimeObject.getTransientTimeSelection());
	}
	return oFF.notNull(exportRuntimeObject);
};
oFF.QVarianceMeasure.prototype.getAllRequiredDimensionNames = function(context, messageManager, missingFieldNames)
{
	let allRequiredDimensionNames = oFF.QFormulaMeasure.prototype.getAllRequiredDimensionNames.call( this , context, messageManager, missingFieldNames);
	allRequiredDimensionNames.addAll(this.getTimeOperationDimensionNames());
	return allRequiredDimensionNames;
};
oFF.QVarianceMeasure.prototype.getBaseFilter = function()
{
	return this.m_baseFilter;
};
oFF.QVarianceMeasure.prototype.getBaseIgnoredExternalDimensions = function()
{
	if (oFF.isNull(this.m_baseExternalDimensionIgnoreList))
	{
		return oFF.XList.create();
	}
	return this.m_baseExternalDimensionIgnoreList;
};
oFF.QVarianceMeasure.prototype.getBaseMeasure = function()
{
	return this.m_baseMeasure;
};
oFF.QVarianceMeasure.prototype.getBaseTimeOperation = function()
{
	return this.m_baseTimeOperation;
};
oFF.QVarianceMeasure.prototype.getBaseTransientMeasureName = function()
{
	if (!oFF.QFilterUtil.isFilterNullOrEmpty(this.m_baseFilter) || oFF.notNull(this.m_baseTimeOperation) && this.m_baseTimeOperation.needsTransientTimeSelection())
	{
		return oFF.XStringUtils.concatenate2(this.getAliasOrMemberName(), "_A");
	}
	return this.m_baseMeasure;
};
oFF.QVarianceMeasure.prototype.getCalculationType = function()
{
	return this.m_calculationType;
};
oFF.QVarianceMeasure.prototype.getFormula = function()
{
	let baseRM = oFF.QFactory.createFormulaMemberWithName(this.getContext(), this.getBaseTransientMeasureName());
	let refRM = oFF.QFactory.createFormulaMemberWithName(this.getContext(), this.getReferenceTransientMeasureName());
	let nullConstant = oFF.QFactory.createFormulaConstant(this.getContext());
	nullConstant.setNullByType(oFF.XValueType.DOUBLE);
	let zeroConstant = oFF.QFactory.createFormulaConstantWithDoubleValue(this.getContext(), 0);
	let differenceFunction = this.generateDifferenceFunction(baseRM, refRM, nullConstant, zeroConstant);
	if (this.m_calculationType === oFF.VarianceCalculationType.PERCENTAGE_DIVIDE_BY_BASE || this.m_calculationType === oFF.VarianceCalculationType.PERCENTAGE_DIVIDE_BY_REFERENCE || this.m_calculationType === oFF.VarianceCalculationType.PERCENTAGE_WITH_ABSOLUTE_BASE_DIVIDE_BY_BASE || this.m_calculationType === oFF.VarianceCalculationType.PERCENTAGE_WITH_ABSOLUTE_BASE_DIVIDE_BY_REFERENCE)
	{
		return this.generatePercentageFunction(baseRM, refRM, zeroConstant, differenceFunction);
	}
	else if (this.m_calculationType === oFF.VarianceCalculationType.ABSOLUTE)
	{
		return differenceFunction;
	}
	else
	{
		throw oFF.XException.createIllegalArgumentException("Unknown variance calculation type.");
	}
};
oFF.QVarianceMeasure.prototype.getModelCapabilities = function()
{
	return this.m_varianceMeasureCapabilities;
};
oFF.QVarianceMeasure.prototype.getNullHandlingType = function()
{
	return this.m_nullHandlingType;
};
oFF.QVarianceMeasure.prototype.getReferenceFilter = function()
{
	return this.m_referenceFilter;
};
oFF.QVarianceMeasure.prototype.getReferenceIgnoredExternalDimensions = function()
{
	if (oFF.isNull(this.m_referenceExternalDimensionIgnoreList))
	{
		return oFF.XList.create();
	}
	return this.m_referenceExternalDimensionIgnoreList;
};
oFF.QVarianceMeasure.prototype.getReferenceMeasure = function()
{
	return this.m_referenceMeasure;
};
oFF.QVarianceMeasure.prototype.getReferenceTimeOperation = function()
{
	return this.m_referenceTimeOperation;
};
oFF.QVarianceMeasure.prototype.getReferenceTransientMeasureName = function()
{
	if (!oFF.QFilterUtil.isFilterNullOrEmpty(this.m_referenceFilter) || oFF.notNull(this.m_referenceTimeOperation) && this.m_referenceTimeOperation.needsTransientTimeSelection())
	{
		return oFF.XStringUtils.concatenate2(this.getAliasOrMemberName(), "_B");
	}
	return this.m_referenceMeasure;
};
oFF.QVarianceMeasure.prototype.getTimeOperationDimensionNames = function()
{
	let dimensionNames = oFF.XHashSetOfString.create();
	let baseTimeOperation = this.getBaseTimeOperation();
	let referenceTimeOperation = this.getReferenceTimeOperation();
	if (oFF.isNull(baseTimeOperation) || baseTimeOperation.getFunction() === oFF.QTimeOperationFunction.CURRENT_DATE)
	{
		return dimensionNames.getValuesAsReadOnlyList();
	}
	if (baseTimeOperation.needsTransientTimeSelection())
	{
		dimensionNames.add(baseTimeOperation.getDimensionName());
	}
	if (oFF.notNull(referenceTimeOperation) && referenceTimeOperation.needsTransientTimeSelection())
	{
		dimensionNames.add(referenceTimeOperation.getDimensionName());
	}
	return dimensionNames.getValuesAsReadOnlyList();
};
oFF.QVarianceMeasure.prototype.getTopLevelDependentFieldNames = function(context)
{
	let usedFields = oFF.XHashSetOfString.create();
	usedFields.addAll(oFF.QFormulaMeasure.prototype.getTopLevelDependentFieldNames.call( this , context));
	this.addFieldNamesUsedInFilters(this.m_baseFilter, this.m_baseTimeOperation, context, usedFields);
	this.addFieldNamesUsedInFilters(this.m_referenceFilter, this.m_referenceTimeOperation, context, usedFields);
	return usedFields.getValuesAsReadOnlyList();
};
oFF.QVarianceMeasure.prototype.getTopLevelDependentMemberNames = function(context)
{
	let memberNames = oFF.XHashSetOfString.create();
	if (oFF.notNull(this.m_baseMeasure))
	{
		memberNames.add(this.m_baseMeasure);
	}
	if (oFF.notNull(this.m_referenceMeasure))
	{
		memberNames.add(this.m_referenceMeasure);
	}
	return memberNames.getValuesAsReadOnlyList();
};
oFF.QVarianceMeasure.prototype.getUnsatisfiedRequiredDimensionNames = function(context, messageManager, allRequiredDimensionNames)
{
	let missingRequiredDimensionNames = oFF.QFormulaMeasure.prototype.getUnsatisfiedRequiredDimensionNames.call( this , context, messageManager, allRequiredDimensionNames);
	let iterator = this.getTimeOperationDimensionNames().getIterator();
	while (iterator.hasNext())
	{
		missingRequiredDimensionNames.removeElement(iterator.next());
	}
	return missingRequiredDimensionNames;
};
oFF.QVarianceMeasure.prototype.isFlattenBaseFilter = function()
{
	return this.m_enableFlattenBaseFilter;
};
oFF.QVarianceMeasure.prototype.isFlattenReferenceFilter = function()
{
	return this.m_enableFlattenReferenceFilter;
};
oFF.QVarianceMeasure.prototype.isVersionAggregatedInternal = function(context, visitedMembers, rootMember)
{
	let isVersionAggregated = oFF.QFormulaMeasure.prototype.isVersionAggregatedInternal.call( this , context, visitedMembers, rootMember);
	if (!isVersionAggregated)
	{
		let versionDimension = context.getQueryModel().getVersionDimension();
		if (oFF.notNull(versionDimension))
		{
			let baseCartesianList = this.getBaseFilter().getCartesianList(versionDimension);
			let refCartesianList = this.getReferenceFilter().getCartesianList(versionDimension);
			isVersionAggregated = oFF.QFilterUtil.isSingleValueFilterCartesianList(baseCartesianList) && oFF.QFilterUtil.isSingleValueFilterCartesianList(refCartesianList);
		}
	}
	return isVersionAggregated;
};
oFF.QVarianceMeasure.prototype.releaseObject = function()
{
	this.m_baseFilter = oFF.XObjectExt.release(this.m_baseFilter);
	this.m_referenceFilter = oFF.XObjectExt.release(this.m_referenceFilter);
	this.m_nullHandlingType = null;
	this.m_calculationType = null;
	this.m_baseMeasure = null;
	this.m_referenceMeasure = null;
	this.m_baseExternalDimensionIgnoreList = oFF.XObjectExt.release(this.m_baseExternalDimensionIgnoreList);
	this.m_referenceExternalDimensionIgnoreList = oFF.XObjectExt.release(this.m_referenceExternalDimensionIgnoreList);
	this.m_baseTimeOperation = oFF.XObjectExt.release(this.m_baseTimeOperation);
	this.m_referenceTimeOperation = oFF.XObjectExt.release(this.m_referenceTimeOperation);
	this.m_transientBaseMemberMap = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_transientBaseMemberMap);
	this.m_transientRefMemberMap = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_transientRefMemberMap);
	this.m_varianceMeasureCapabilities = oFF.XObjectExt.release(this.m_varianceMeasureCapabilities);
	this.m_enableFlattenBaseFilter = false;
	this.m_enableFlattenReferenceFilter = false;
	oFF.QFormulaMeasure.prototype.releaseObject.call( this );
};
oFF.QVarianceMeasure.prototype.setBaseMeasure = function(measureName)
{
	this.m_baseMeasure = measureName;
	this.notifyNodeChanged();
};
oFF.QVarianceMeasure.prototype.setBaseTimeOperation = function(dimensionName, timeFunction, granularity, period)
{
	if (oFF.isNull(this.m_baseTimeOperation))
	{
		this.m_baseTimeOperation = oFF.QTimeOperation.create(this.getContext(), this);
	}
	this.m_baseTimeOperation.setDimensionName(dimensionName);
	this.m_baseTimeOperation.setFunction(timeFunction);
	this.m_baseTimeOperation.setGranularity(granularity);
	this.m_baseTimeOperation.setPeriod(period);
};
oFF.QVarianceMeasure.prototype.setBaseTimeOperationByHierarchyLevel = function(dimensionName, timeFunction, hierarchyLevelName, period)
{
	this.setBaseTimeOperation(dimensionName, timeFunction, oFF.QTimeDimensionUtil.getTimeOperationGranularityFromHierarchyLevelName(this.getQueryModel(), dimensionName, hierarchyLevelName), period);
	this.m_baseTimeOperation.setHierarchyLevelName(hierarchyLevelName);
};
oFF.QVarianceMeasure.prototype.setCalculationType = function(type)
{
	this.m_calculationType = type;
	this.notifyNodeChanged();
};
oFF.QVarianceMeasure.prototype.setFlattenBaseFilter = function(flattenBaseFilter)
{
	let oldValue = this.m_enableFlattenBaseFilter;
	this.m_enableFlattenBaseFilter = flattenBaseFilter;
	this.notifyPropertyBooleanChanged(oFF.QMeasureProperties.QY_FLATTEN_BASE_FILTER, oldValue, flattenBaseFilter);
};
oFF.QVarianceMeasure.prototype.setFlattenReferenceFilter = function(flattenReferenceFilter)
{
	let oldValue = this.m_enableFlattenReferenceFilter;
	this.m_enableFlattenReferenceFilter = flattenReferenceFilter;
	this.notifyPropertyBooleanChanged(oFF.QMeasureProperties.QY_FLATTEN_REFERENCE_FILTER, oldValue, flattenReferenceFilter);
};
oFF.QVarianceMeasure.prototype.setNullHandlingType = function(type)
{
	this.m_nullHandlingType = type;
	this.notifyNodeChanged();
};
oFF.QVarianceMeasure.prototype.setParent = function(parent)
{
	oFF.QFormulaMeasure.prototype.setParent.call( this , parent);
	this.m_varianceMeasureCapabilities.updateContext(this);
};
oFF.QVarianceMeasure.prototype.setReferenceMeasure = function(measureName)
{
	this.m_referenceMeasure = measureName;
	this.notifyNodeChanged();
};
oFF.QVarianceMeasure.prototype.setReferenceTimeOperation = function(dimensionName, timeFunction, granularity, period)
{
	if (oFF.isNull(this.m_referenceTimeOperation))
	{
		this.m_referenceTimeOperation = oFF.QTimeOperation.create(this.getContext(), this);
	}
	this.m_referenceTimeOperation.setDimensionName(dimensionName);
	this.m_referenceTimeOperation.setFunction(timeFunction);
	this.m_referenceTimeOperation.setGranularity(granularity);
	this.m_referenceTimeOperation.setPeriod(period);
};
oFF.QVarianceMeasure.prototype.setReferenceTimeOperationHierarchyLevel = function(dimensionName, timeFunction, hierarchyLevelName, period)
{
	this.setReferenceTimeOperation(dimensionName, timeFunction, oFF.QTimeDimensionUtil.getTimeOperationGranularityFromHierarchyLevelName(this.getQueryModel(), dimensionName, hierarchyLevelName), period);
	this.m_referenceTimeOperation.setHierarchyLevelName(hierarchyLevelName);
};
oFF.QVarianceMeasure.prototype.setupVarianceMeasure = function(context, structure)
{
	oFF.QFormulaMeasure.prototype.setupStructureMember.call( this , context, structure, oFF.MemberType.VARIANCE);
	this.m_varianceMeasureCapabilities = oFF.QFactory.createCapabilitiesDecorator(this);
	this.m_varianceMeasureCapabilities.setSupportsIntersectLayers(false);
	this.m_varianceMeasureCapabilities.setSupportsVisibilityFilter(false);
	this.m_varianceMeasureCapabilities.setSupportsCellValueOperand(false);
	this.m_varianceMeasureCapabilities.setSupportsComplexFilter(true);
	this.m_varianceMeasureCapabilities.setSupportsComplexTupleFilter(true);
	this.m_baseFilter = oFF.QFactory.createFilterExpression(this, this);
	this.m_referenceFilter = oFF.QFactory.createFilterExpression(this, this);
	this.m_transientBaseMemberMap = oFF.XHashMapByString.create();
	this.m_transientRefMemberMap = oFF.XHashMapByString.create();
	this.m_nullHandlingType = oFF.VarianceNullHandlingType.NULL_AS_NULL_REFERENCE_MINUS_BASE;
	this.m_calculationType = oFF.VarianceCalculationType.ABSOLUTE;
};
oFF.QVarianceMeasure.prototype.validate = function(context, messageManager, validateDependencies, validateAugmentedAccountMembers)
{
	if (!oFF.QFormulaMeasure.prototype.validate.call( this , context, messageManager, validateDependencies, validateAugmentedAccountMembers))
	{
		return false;
	}
	return this.validateTimeOperation(context.getQueryModel(), messageManager);
};
oFF.QVarianceMeasure.prototype.validateTimeOperation = function(context, messageManager)
{
	let dimensionContext;
	if (this.getOlapEnv().getClientQueryObjectManager().getClientQueryObjectByKeyRef(this) !== null)
	{
		dimensionContext = this.getDimensionContext(context.getQueryManager());
	}
	else
	{
		dimensionContext = this.getDimension();
	}
	let baseMeasure = this.generateTransientStructureMember(this.m_baseTimeOperation, this.m_baseFilter, this.getBaseTransientMeasureName(), this.m_baseExternalDimensionIgnoreList, this.m_baseMeasure, this.m_enableFlattenBaseFilter, dimensionContext);
	let refMeasure = this.generateTransientStructureMember(this.m_referenceTimeOperation, this.m_referenceFilter, this.getReferenceTransientMeasureName(), this.m_referenceExternalDimensionIgnoreList, this.m_referenceMeasure, this.m_enableFlattenReferenceFilter, dimensionContext);
	return this.generateAndValidateTransientTimeOperationMeasures(context.getQueryModel(), baseMeasure, refMeasure, messageManager);
};
oFF.QVarianceMeasure.prototype.validateWithQueryModelScope = function(context)
{
	let validationResult = oFF.QFormulaMeasure.prototype.validateWithQueryModelScope.call( this , context);
	this.validateTimeOperation(context, validationResult);
	this.m_validationErrorCodes.clear();
	return validationResult;
};

oFF.QFilterConvertedTimeCartesianList = function() {};
oFF.QFilterConvertedTimeCartesianList.prototype = new oFF.QFilterCartesianList();
oFF.QFilterConvertedTimeCartesianList.prototype._ff_c = "QFilterConvertedTimeCartesianList";

oFF.QFilterConvertedTimeCartesianList._create = function(context, parentNode, fieldMd, hierarchyName)
{
	let object = new oFF.QFilterConvertedTimeCartesianList();
	object.setupCartesianList(context, parentNode, fieldMd, hierarchyName);
	return object;
};
oFF.QFilterConvertedTimeCartesianList._createFromCartesianList = function(cartesianList)
{
	return oFF.QFilterConvertedTimeCartesianList._create(cartesianList.getContext(), cartesianList.getParent(), cartesianList.getFieldMetadata(), cartesianList.getHierarchyName());
};
oFF.QFilterConvertedTimeCartesianList.prototype.m_hierarchyLevelType = null;
oFF.QFilterConvertedTimeCartesianList.prototype.m_isSingleValueSourceCartesianList = false;
oFF.QFilterConvertedTimeCartesianList.prototype.cloneOlapComponent = function(context, parent)
{
	let clone = oFF.QFilterConvertedTimeCartesianList._create(context, null, null, null);
	clone.copyFrom(this, null);
	return clone;
};
oFF.QFilterConvertedTimeCartesianList.prototype.copyFromCartesianList = function(cartesianList)
{
	oFF.QFilterCartesianList.prototype.copyFromInternal.call( this , cartesianList, null);
};
oFF.QFilterConvertedTimeCartesianList.prototype.copyFromInternal = function(other, flags)
{
	oFF.QFilterCartesianList.prototype.copyFromInternal.call( this , other, flags);
	let originCartesianList = other;
	this.m_isSingleValueSourceCartesianList = originCartesianList.m_isSingleValueSourceCartesianList;
	this.m_hierarchyLevelType = originCartesianList.m_hierarchyLevelType;
};
oFF.QFilterConvertedTimeCartesianList.prototype.getHierarchyLevelType = function()
{
	return this.m_hierarchyLevelType;
};
oFF.QFilterConvertedTimeCartesianList.prototype.getOlapComponentType = function()
{
	return oFF.FilterComponentType.CONVERTED_TIME_CARTESIAN_LIST;
};
oFF.QFilterConvertedTimeCartesianList.prototype.isSingleValueSourceCartesianList = function()
{
	return this.m_isSingleValueSourceCartesianList;
};
oFF.QFilterConvertedTimeCartesianList.prototype.releaseObject = function()
{
	this.m_hierarchyLevelType = null;
	oFF.QFilterCartesianList.prototype.releaseObject.call( this );
};
oFF.QFilterConvertedTimeCartesianList.prototype.setHierarchyLevelType = function(levelType)
{
	this.m_hierarchyLevelType = levelType;
};
oFF.QFilterConvertedTimeCartesianList.prototype.setIsSingleValueSourceCartesianList = function(isSingleValueSourceCartesianList)
{
	this.m_isSingleValueSourceCartesianList = isSingleValueSourceCartesianList;
};
oFF.QFilterConvertedTimeCartesianList.prototype.setupCartesianList = function(context, parentNode, fieldMd, hierarchyName)
{
	oFF.QFilterCartesianList.prototype.setupCartesianList.call( this , context, parentNode, fieldMd, hierarchyName);
	this.m_isSingleValueSourceCartesianList = false;
};

oFF.OlapModelModule = function() {};
oFF.OlapModelModule.prototype = new oFF.DfModule();
oFF.OlapModelModule.prototype._ff_c = "OlapModelModule";

oFF.OlapModelModule.s_module = null;
oFF.OlapModelModule.getInstance = function()
{
	if (oFF.isNull(oFF.OlapModelModule.s_module))
	{
		oFF.DfModule.checkInitialized(oFF.OlapApiBaseModule.getInstance());
		oFF.OlapModelModule.s_module = oFF.DfModule.startExt(new oFF.OlapModelModule());
		let registrationService = oFF.RegistrationService.getInstance();
		oFF.QueryServiceConfigImpl.staticSetup();
		registrationService.addServiceConfig(oFF.OlapApiModule.XS_QUERY_CONSUMER, oFF.QueryServiceConfigImpl.CLAZZ);
		oFF.DocConverterFactory.staticSetup();
		oFF.QBindingFactory.staticSetupOlapBindingFactory();
		oFF.QCmdContextFactory.staticSetup();
		oFF.QCmdContextOlapFactory.staticSetupOlapFactory();
		oFF.QCmdSignature.staticSetup();
		oFF.SigSelManager.registerFactory(oFF.XComponentType._DATASOURCE, new oFF.CommandSpaceFactoryImpl());
		oFF.DfModule.stopExt(oFF.OlapModelModule.s_module);
	}
	return oFF.OlapModelModule.s_module;
};
oFF.OlapModelModule.prototype.getName = function()
{
	return "ff4305.olap.model";
};

oFF.OlapModelModule.getInstance();

return oFF;
} );