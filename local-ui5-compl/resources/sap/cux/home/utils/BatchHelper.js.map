{"version":3,"file":"BatchHelper.js","names":["sap","ui","define","BaseObject","_catch","body","recover","result","e","then","methods","MultiPartRequest","batchRequests","constructor","url","csrfToken","this","encodeURI","boundary","Date","now","options","headers","method","GET","_constructBody","BOUNDARY","REQUEST_HEADERS","REQUEST_BODY","index","length","request","boundaryEnd","addRequest","push","getDataFromRawValue","value","parsedValue","split","filter","data","finalData","contentTypeValue","includes","JSON","parse","fetchCSRFToken","baseURL","Promise","resolve","fetch","HEAD","response","ok","token","get","Error","error","message","reject","BatchHelper","extend","fetchData","_fetchData","multiPartRequest","_this","POST","text","buildMultipartRequest","_buildMultipartRequest","urls","forEach","createMultipartRequest","Instance"],"sources":["BatchHelper.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport BaseObject from \"sap/ui/base/Object\";\n\nenum methods {\n\tGET = \"GET\",\n\tPOST = \"POST\",\n\tPUT = \"PUT\",\n\tPATCH = \"PATCH\",\n\tDELETE = \"DELETE\",\n\tHEAD = \"HEAD\"\n}\n\ninterface Options {\n\theaders: Record<string, string>;\n\tmethod: methods;\n\tbody?: string;\n}\n\n/**\n * Represents a multipart request.\n */\nclass MultiPartRequest {\n\tprivate url: string;\n\tprivate batchRequests: MultiPartRequest[] = [];\n\tprivate boundary: string;\n\tpublic options: Options;\n\n\t/**\n\t * Creates a MultiPartRequest object.\n\t *\n\t * @param {string} url - The URL for the multipart request.\n\t * @constructor\n\t */\n\tconstructor(url: string, csrfToken: string) {\n\t\tthis.url = encodeURI(url);\n\t\tthis.boundary = `batch_id_${Date.now()}_01`;\n\t\tthis.options = {\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": `multipart/mixed;boundary=${this.boundary}`\n\t\t\t},\n\t\t\tmethod: methods.GET\n\t\t};\n\n\t\t// Add CSRF token to headers if available\n\t\tif (csrfToken) {\n\t\t\tthis.options.headers[\"X-CSRF-Token\"] = csrfToken;\n\t\t}\n\t}\n\n\t/**\n\t * Constructs the body for the multipart request.\n\t *\n\t * @returns {string} - The constructed body.\n\t * @private\n\t */\n\tpublic _constructBody(): string {\n\t\tconst BOUNDARY = `--${this.boundary}`;\n\t\tconst REQUEST_HEADERS = `Content-Type: application/http\\r\\nContent-Transfer-Encoding: binary\\r\\n`;\n\t\tconst REQUEST_BODY = `Accept: application/json\\r\\n\\r\\n\\r\\n`;\n\n\t\tlet body = `${BOUNDARY}\\r\\n`;\n\n\t\tfor (let index = 0; index < this.batchRequests.length; index++) {\n\t\t\tconst request = this.batchRequests[index];\n\t\t\tconst boundaryEnd = index === this.batchRequests.length - 1 ? \"--\\r\\n\" : \"\\r\\n\";\n\t\t\tbody += `${REQUEST_HEADERS}\\r\\n`;\n\t\t\tbody += `${request.options.method} ${request.url} HTTP/1.1\\r\\n${REQUEST_BODY}`;\n\t\t\tbody += `${BOUNDARY}${boundaryEnd}`;\n\t\t}\n\n\t\treturn body;\n\t}\n\n\t/**\n\t * Adds a request to the MultiPartRequest batch.\n\t *\n\t * @public\n\t * @param {Object} request - The request to add to the batch.\n\t */\n\tpublic addRequest(request: MultiPartRequest): void {\n\t\tthis.batchRequests.push(request);\n\t}\n}\n\n/**\n * Parses multipart body response and returns an array of values called in the batch request.\n *\n * @param {string} value - Multipart body response.\n * @returns {Object[]} - Array of values in the multipart request.\n * @returns {Object[]} - An array of values in the multipart request.\n */\nconst getDataFromRawValue = function (value: string): (string | object)[] {\n\tconst parsedValue = value.split(\"\\r\\n\").filter((data) => data !== \"\");\n\n\tconst finalData: (string | object)[] = [];\n\tlet contentTypeValue = \"\";\n\n\tfor (let index = 1; index < parsedValue.length - 1; index++) {\n\t\tcontentTypeValue = parsedValue[index].includes(\"Content-Type: \") ? parsedValue[index].split(\"Content-Type: \")[1] : contentTypeValue;\n\n\t\tif (parsedValue[index + 1].includes(parsedValue[0])) {\n\t\t\tif (contentTypeValue === \"application/json\") {\n\t\t\t\tfinalData.push(JSON.parse(parsedValue[index]) as string);\n\t\t\t} else {\n\t\t\t\tfinalData.push(parsedValue[index]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn finalData;\n};\n\n/**\n * Fetches the CSRF token from the specified base URL.\n *\n * @async\n * @param {string} baseURL - The base URL to fetch the CSRF token from.\n * @returns {Promise<string>} A Promise that resolves when all batch requests are completed. A promise that resolves to the CSRF token.\n * @throws {Error} An error if the CSRF token cannot be fetched.\n */\nconst fetchCSRFToken = async function (baseURL: string): Promise<string> {\n\ttry {\n\t\tconst response = await fetch(baseURL, {\n\t\t\tmethod: methods.HEAD,\n\t\t\theaders: {\n\t\t\t\t\"X-CSRF-Token\": \"Fetch\"\n\t\t\t}\n\t\t});\n\n\t\tif (response.ok) {\n\t\t\tconst token = response.headers.get(\"X-CSRF-Token\");\n\t\t\tif (token) {\n\t\t\t\treturn token;\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(\"Cannot fetch X-CSRF-Token.\");\n\t} catch (error: unknown) {\n\t\tthrow new Error((error as Error).message);\n\t}\n};\n\n/**\n *\n * Helper class for managing batch requests.\n *\n * @extends BaseObject\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @internal\n * @experimental Since 1.121\n * @private\n *\n * @alias sap.cux.home.utils.BatchHelper\n */\nexport default class BatchHelper extends BaseObject {\n\tprivate url!: string;\n\tstatic Instance: BatchHelper;\n\n\t/**\n\t * Fetches data from a multipart request.\n\t *\n\t * @private\n\t * @param {MultiPartRequest} multiPartRequest - The multipart request object.\n\t * @returns {Promise<Array<string | object>>} - A promise that resolves to the data from the request.\n\t */\n\tprivate async fetchData(multiPartRequest: MultiPartRequest): Promise<Array<string | object>> {\n\t\tmultiPartRequest.options.body = multiPartRequest._constructBody();\n\t\tmultiPartRequest.options.method = methods.POST;\n\n\t\tconst response = await fetch(this.url, multiPartRequest.options);\n\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(\"Failed to fetch data from the server.\");\n\t\t}\n\n\t\tconst text = await response.text();\n\t\treturn getDataFromRawValue(text);\n\t}\n\n\t/**\n\t * Creates a multipart batch request with multiple URLs.\n\t *\n\t * @public\n\t * @param {string} baseURL - The base URL for creating the batch request.\n\t * @param {string[]} urls - An array of URLs for individual requests.\n\t * @returns {Promise<Array<string | object>>} - A promise that resolves to the data from the batch request.\n\t */\n\tpublic static async createMultipartRequest(baseURL: string, urls: string[]): Promise<Array<string | object>> {\n\t\tif (!BatchHelper.Instance) {\n\t\t\tBatchHelper.Instance = new BatchHelper();\n\t\t}\n\t\tBatchHelper.Instance.url = `${baseURL}$batch`;\n\t\tconst csrfToken = await fetchCSRFToken(baseURL);\n\t\tconst request = BatchHelper.Instance.buildMultipartRequest(urls, csrfToken);\n\t\treturn await BatchHelper.Instance.fetchData(request);\n\t}\n\n\t/**\n\t * Builds a multipart request from an array of URLs.\n\t *\n\t * @private\n\t * @param {string[]} urls - An array of URLs for individual requests.\n\t * @returns {MultiPartRequest} - The multipart request object.\n\t */\n\tprivate buildMultipartRequest(urls: string[], csrfToken: string): MultiPartRequest {\n\t\t// create base request from first URL\n\t\tconst request = new MultiPartRequest(urls[0], csrfToken);\n\n\t\t// Add all URLs as sub-requests\n\t\turls.forEach((url) => {\n\t\t\trequest.addRequest(new MultiPartRequest(url, csrfToken));\n\t\t});\n\n\t\treturn request;\n\t}\n}\n"],"mappings":"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","ignoreList":[]}