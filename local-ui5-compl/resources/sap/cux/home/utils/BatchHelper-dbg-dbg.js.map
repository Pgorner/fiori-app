{"version":3,"file":"BatchHelper-dbg-dbg.js","names":["sap","ui","define","BaseObject","_catch","body","recover","result","e","then","methods","MultiPartRequest","batchRequests","constructor","url","csrfToken","encodeURI","boundary","Date","now","options","headers","method","GET","_constructBody","BOUNDARY","REQUEST_HEADERS","REQUEST_BODY","index","length","request","boundaryEnd","addRequest","push","getDataFromRawValue","value","parsedValue","split","filter","data","finalData","contentTypeValue","includes","JSON","parse","fetchCSRFToken","baseURL","Promise","resolve","fetch","HEAD","response","ok","token","get","Error","error","message","reject","BatchHelper","extend","fetchData","_fetchData","multiPartRequest","_this","POST","text","buildMultipartRequest","_buildMultipartRequest","urls","forEach","createMultipartRequest","Instance"],"sources":["BatchHelper.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport BaseObject from \"sap/ui/base/Object\";\n\nenum methods {\n\tGET = \"GET\",\n\tPOST = \"POST\",\n\tPUT = \"PUT\",\n\tPATCH = \"PATCH\",\n\tDELETE = \"DELETE\",\n\tHEAD = \"HEAD\"\n}\n\ninterface Options {\n\theaders: Record<string, string>;\n\tmethod: methods;\n\tbody?: string;\n}\n\n/**\n * Represents a multipart request.\n */\nclass MultiPartRequest {\n\tprivate url: string;\n\tprivate batchRequests: MultiPartRequest[] = [];\n\tprivate boundary: string;\n\tpublic options: Options;\n\n\t/**\n\t * Creates a MultiPartRequest object.\n\t *\n\t * @param {string} url - The URL for the multipart request.\n\t * @constructor\n\t */\n\tconstructor(url: string, csrfToken: string) {\n\t\tthis.url = encodeURI(url);\n\t\tthis.boundary = `batch_id_${Date.now()}_01`;\n\t\tthis.options = {\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": `multipart/mixed;boundary=${this.boundary}`\n\t\t\t},\n\t\t\tmethod: methods.GET\n\t\t};\n\n\t\t// Add CSRF token to headers if available\n\t\tif (csrfToken) {\n\t\t\tthis.options.headers[\"X-CSRF-Token\"] = csrfToken;\n\t\t}\n\t}\n\n\t/**\n\t * Constructs the body for the multipart request.\n\t *\n\t * @returns {string} - The constructed body.\n\t * @private\n\t */\n\tpublic _constructBody(): string {\n\t\tconst BOUNDARY = `--${this.boundary}`;\n\t\tconst REQUEST_HEADERS = `Content-Type: application/http\\r\\nContent-Transfer-Encoding: binary\\r\\n`;\n\t\tconst REQUEST_BODY = `Accept: application/json\\r\\n\\r\\n\\r\\n`;\n\n\t\tlet body = `${BOUNDARY}\\r\\n`;\n\n\t\tfor (let index = 0; index < this.batchRequests.length; index++) {\n\t\t\tconst request = this.batchRequests[index];\n\t\t\tconst boundaryEnd = index === this.batchRequests.length - 1 ? \"--\\r\\n\" : \"\\r\\n\";\n\t\t\tbody += `${REQUEST_HEADERS}\\r\\n`;\n\t\t\tbody += `${request.options.method} ${request.url} HTTP/1.1\\r\\n${REQUEST_BODY}`;\n\t\t\tbody += `${BOUNDARY}${boundaryEnd}`;\n\t\t}\n\n\t\treturn body;\n\t}\n\n\t/**\n\t * Adds a request to the MultiPartRequest batch.\n\t *\n\t * @public\n\t * @param {Object} request - The request to add to the batch.\n\t */\n\tpublic addRequest(request: MultiPartRequest): void {\n\t\tthis.batchRequests.push(request);\n\t}\n}\n\n/**\n * Parses multipart body response and returns an array of values called in the batch request.\n *\n * @param {string} value - Multipart body response.\n * @returns {Object[]} - Array of values in the multipart request.\n * @returns {Object[]} - An array of values in the multipart request.\n */\nconst getDataFromRawValue = function (value: string): (string | object)[] {\n\tconst parsedValue = value.split(\"\\r\\n\").filter((data) => data !== \"\");\n\n\tconst finalData: (string | object)[] = [];\n\tlet contentTypeValue = \"\";\n\n\tfor (let index = 1; index < parsedValue.length - 1; index++) {\n\t\tcontentTypeValue = parsedValue[index].includes(\"Content-Type: \") ? parsedValue[index].split(\"Content-Type: \")[1] : contentTypeValue;\n\n\t\tif (parsedValue[index + 1].includes(parsedValue[0])) {\n\t\t\tif (contentTypeValue === \"application/json\") {\n\t\t\t\tfinalData.push(JSON.parse(parsedValue[index]) as string);\n\t\t\t} else {\n\t\t\t\tfinalData.push(parsedValue[index]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn finalData;\n};\n\n/**\n * Fetches the CSRF token from the specified base URL.\n *\n * @async\n * @param {string} baseURL - The base URL to fetch the CSRF token from.\n * @returns {Promise<string>} A Promise that resolves when all batch requests are completed. A promise that resolves to the CSRF token.\n * @throws {Error} An error if the CSRF token cannot be fetched.\n */\nconst fetchCSRFToken = async function (baseURL: string): Promise<string> {\n\ttry {\n\t\tconst response = await fetch(baseURL, {\n\t\t\tmethod: methods.HEAD,\n\t\t\theaders: {\n\t\t\t\t\"X-CSRF-Token\": \"Fetch\"\n\t\t\t}\n\t\t});\n\n\t\tif (response.ok) {\n\t\t\tconst token = response.headers.get(\"X-CSRF-Token\");\n\t\t\tif (token) {\n\t\t\t\treturn token;\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(\"Cannot fetch X-CSRF-Token.\");\n\t} catch (error: unknown) {\n\t\tthrow new Error((error as Error).message);\n\t}\n};\n\n/**\n *\n * Helper class for managing batch requests.\n *\n * @extends BaseObject\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @internal\n * @experimental Since 1.121\n * @private\n *\n * @alias sap.cux.home.utils.BatchHelper\n */\nexport default class BatchHelper extends BaseObject {\n\tprivate url!: string;\n\tstatic Instance: BatchHelper;\n\n\t/**\n\t * Fetches data from a multipart request.\n\t *\n\t * @private\n\t * @param {MultiPartRequest} multiPartRequest - The multipart request object.\n\t * @returns {Promise<Array<string | object>>} - A promise that resolves to the data from the request.\n\t */\n\tprivate async fetchData(multiPartRequest: MultiPartRequest): Promise<Array<string | object>> {\n\t\tmultiPartRequest.options.body = multiPartRequest._constructBody();\n\t\tmultiPartRequest.options.method = methods.POST;\n\n\t\tconst response = await fetch(this.url, multiPartRequest.options);\n\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(\"Failed to fetch data from the server.\");\n\t\t}\n\n\t\tconst text = await response.text();\n\t\treturn getDataFromRawValue(text);\n\t}\n\n\t/**\n\t * Creates a multipart batch request with multiple URLs.\n\t *\n\t * @public\n\t * @param {string} baseURL - The base URL for creating the batch request.\n\t * @param {string[]} urls - An array of URLs for individual requests.\n\t * @returns {Promise<Array<string | object>>} - A promise that resolves to the data from the batch request.\n\t */\n\tpublic static async createMultipartRequest(baseURL: string, urls: string[]): Promise<Array<string | object>> {\n\t\tif (!BatchHelper.Instance) {\n\t\t\tBatchHelper.Instance = new BatchHelper();\n\t\t}\n\t\tBatchHelper.Instance.url = `${baseURL}$batch`;\n\t\tconst csrfToken = await fetchCSRFToken(baseURL);\n\t\tconst request = BatchHelper.Instance.buildMultipartRequest(urls, csrfToken);\n\t\treturn await BatchHelper.Instance.fetchData(request);\n\t}\n\n\t/**\n\t * Builds a multipart request from an array of URLs.\n\t *\n\t * @private\n\t * @param {string[]} urls - An array of URLs for individual requests.\n\t * @returns {MultiPartRequest} - The multipart request object.\n\t */\n\tprivate buildMultipartRequest(urls: string[], csrfToken: string): MultiPartRequest {\n\t\t// create base request from first URL\n\t\tconst request = new MultiPartRequest(urls[0], csrfToken);\n\n\t\t// Add all URLs as sub-requests\n\t\turls.forEach((url) => {\n\t\t\trequest.addRequest(new MultiPartRequest(url, csrfToken));\n\t\t});\n\n\t\treturn request;\n\t}\n}\n"],"mappings":"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","ignoreList":[]}