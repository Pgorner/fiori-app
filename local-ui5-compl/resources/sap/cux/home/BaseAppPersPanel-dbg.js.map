{"version":3,"file":"BaseAppPersPanel-dbg.js","names":["sap","ui","define","Log","EventBus","Container","__BaseAppPanel","___utils_Constants","__DataFormatUtils","__PageManager","__PersonalisationUtils","__UshellPersonalizer","_interopRequireDefault","obj","__esModule","default","_catch","body","recover","result","e","then","BaseAppPanel","DEFAULT_APP_ICON","DEFAULT_BG_COLOR","FALLBACK_ICON","MYHOME_PAGE_ID","DataFormatUtils","PageManager","PersonalisationUtils","UshellPersonalizer","BaseAppPersPanel","extend","metadata","library","properties","persContainerId","type","group","defaultValue","visibility","constructor","_constructor","id","settings","BaseAppPanel.prototype.constructor.call","this","_favPageVisualizations","init","_init","BaseAppPanel.prototype.init.call","setProperty","getPersContainerId","_pageManagerInstance","getInstance","getOwnerComponent","_eventBus","subscribe","applyPersonalization","_getPersonalizer","_this","getProperty","Error","Promise","resolve","reject","getPersonalization","_getPersonalization","_this2","personalizer","read","setPersonalization","_setPersonalization","persData","_this3","write","_getAppPersonalization","_this4","personalization","favoriteApps","setFavAppsPersonalization","_setFavAppsPersonalization","appsPersonalization","_this5","_temp","_applyPersonalization","_this6","tiles","fetchTileVisualization","_applyTilesPersonalization","groupId","shouldReload","arguments","length","undefined","_this7","all","_getFavPages","_ref","personalizations","favPages","_getAllFavPageApps","favPageVisualizations","groups","getAggregation","apps","_getGroup","getApps","tile","item","_getItem","color","icon","_getItemPersonalization","setBackgroundColor","setTileIcon","tileGroupId","data","find","oGroup","getGroupId","oApp","getLeanURL","getUrl","isA","isSection","sectionId","BGColor","app","appIds","oldAppId","push","vizId","getVizId","appId","includes","oPersonalization","isRecentlyAddedApp","favPageVisualization","oVisualization","key","_getFavAppIcon","getAppIcon","_this8","getFavoritePages","aFavPages","concat","pageId","pages","_exit","_this9","_temp3","_result","_temp2","loadedPages","reduce","pageIDs","visualization","pageIds","map","page","shouldLoadMissingApps","every","_this9$_favPageVisual","_loadAllPageVisualizations","_this9$_loadAllPageVi","_this9$_favPageVisual2","error","shouldFetchDistinctApps","getBgColor","getServiceAsync","spaceContentService","getPages","oPage","pageData","aPages","Object","values","sections","section","visualizations","targetURL","some","oVizApp","_getAppIcon","favPageIcon","getIcon"],"sources":["BaseAppPersPanel.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Log from \"sap/base/Log\";\nimport GenericTile from \"sap/m/GenericTile\";\nimport Component from \"sap/ui/core/Component\";\nimport type { MetadataOptions } from \"sap/ui/core/Element\";\nimport EventBus from \"sap/ui/core/EventBus\";\nimport Container from \"sap/ushell/Container\";\nimport SpaceContent from \"sap/ushell/services/SpaceContent\";\nimport App from \"./App\";\nimport BaseAppPanel from \"./BaseAppPanel\";\nimport { $BaseAppPersPanelSettings } from \"./BaseAppPersPanel\";\nimport Group from \"./Group\";\nimport { IAppPersonalization, ICustomVisualization, IItemPersonalization } from \"./interface/AppsInterface\";\nimport { IPage } from \"./interface/PageSpaceInterface\";\nimport { DEFAULT_APP_ICON, DEFAULT_BG_COLOR, FALLBACK_ICON, MYHOME_PAGE_ID } from \"./utils/Constants\";\nimport DataFormatUtils from \"./utils/DataFormatUtils\";\nimport PageManager from \"./utils/PageManager\";\nimport PersonalisationUtils from \"./utils/PersonalisationUtils\";\nimport UshellPersonalizer, { IPersonalizationData } from \"./utils/UshellPersonalizer\";\n\n/**\n *\n * Provides the BaseAppPersPanel Class which is BaseAppPanel with personalisation.\n *\n * @extends sap.cux.home.BaseAppPanel\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121.0\n *\n * @abstract\n * @internal\n * @experimental Since 1.121\n * @private\n *\n * @alias sap.cux.home.BaseAppPersPanel\n */\nexport default abstract class BaseAppPersPanel extends BaseAppPanel {\n\tprivate _pageManagerInstance!: PageManager;\n\tprivate _favPageVisualizations: ICustomVisualization[] = [];\n\tprivate _eventBus!: EventBus;\n\n\tconstructor(idOrSettings?: string | $BaseAppPersPanelSettings);\n\tconstructor(id?: string, settings?: $BaseAppPersPanelSettings);\n\tconstructor(id?: string, settings?: $BaseAppPersPanelSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tproperties: {\n\t\t\tpersContainerId: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"hidden\" }\n\t\t}\n\t};\n\n\tpublic init() {\n\t\tsuper.init();\n\t\tthis.setProperty(\"persContainerId\", PersonalisationUtils.getPersContainerId(this));\n\t\tthis._pageManagerInstance = PageManager.getInstance(\n\t\t\tPersonalisationUtils.getPersContainerId(this),\n\t\t\tPersonalisationUtils.getOwnerComponent(this) as Component\n\t\t);\n\t\tthis._eventBus = EventBus.getInstance();\n\n\t\t//apply personalization on page update\n\t\tthis._eventBus.subscribe(\n\t\t\t\"pageChannel\",\n\t\t\t\"pageUpdated\",\n\t\t\t() => {\n\t\t\t\tvoid this.applyPersonalization();\n\t\t\t},\n\t\t\tthis\n\t\t);\n\t}\n\n\t/**\n\t * Retrieves the personalizer instance.\n\t * @returns {Promise<sap.cux.home.UshellPersonalizer>} A promise resolving to the personalizer instance.\n\t * @throws {Error} Throws an error if no container ID is provided for personalization.\n\t * @private\n\t */\n\tprivate async _getPersonalizer() {\n\t\tconst persContainerId = this.getProperty(\"persContainerId\") as string;\n\t\tif (!persContainerId) {\n\t\t\tthrow new Error(\"No Container ID Provided for personalisation!\");\n\t\t}\n\t\tconst personalizer = await UshellPersonalizer?.getInstance(\n\t\t\tpersContainerId,\n\t\t\tPersonalisationUtils.getOwnerComponent(this) as Component\n\t\t);\n\t\treturn personalizer;\n\t}\n\n\t/**\n\t * Retrieves personalization data.\n\t * @returns {Promise<IPersonalizationData>} A promise that resolves with the personalization data.\n\t * @private\n\t */\n\tprotected async getPersonalization() {\n\t\tconst personalizer = await this._getPersonalizer();\n\t\tconst persData = await personalizer?.read();\n\t\treturn persData;\n\t}\n\n\t/**\n\t * Sets the personalization data.\n\t * @param {IPersonalizationData} persData - The personalization data to set.\n\t * @returns {Promise<void>} A promise that resolves when the personalization data is set.\n\t * @private\n\t */\n\tprotected async setPersonalization(persData: IPersonalizationData) {\n\t\tconst personalizer = await this._getPersonalizer();\n\t\tawait personalizer.write(persData);\n\t}\n\n\t/**\n\t * Returns array of personalized favorite apps\n\t *\n\t * @returns {Promise} resolves to return array of personalized favorite apps\n\t */\n\tprotected async _getAppPersonalization() {\n\t\tconst personalization = await this.getPersonalization();\n\t\treturn personalization?.favoriteApps || ([] as IAppPersonalization[]);\n\t}\n\n\t/**\n\t * Sets the personalization data.\n\t * @param {IAppPersonalization[]} appsPersonalization - Personalization data for favorite apps.\n\t * @returns {Promise<void>} A promise that resolves when the personalization data is set.\n\t * @private\n\t */\n\tprotected async setFavAppsPersonalization(appsPersonalization: IAppPersonalization[]): Promise<void> {\n\t\tlet personalization = await this.getPersonalization();\n\t\tif (personalization) {\n\t\t\tpersonalization.favoriteApps = appsPersonalization;\n\t\t\tawait this.setPersonalization(personalization);\n\t\t}\n\t}\n\n\t/**\n\t * Applies personalization settings to the tiles.\n\t * Retrieves tiles from the generated apps wrapper and applies personalization settings to each tile.\n\t * Personalization settings include background color and icon customization.\n\t * @private\n\t * @async\n\t */\n\tpublic async applyPersonalization() {\n\t\tlet tiles = this.fetchTileVisualization();\n\t\treturn await this._applyTilesPersonalization(tiles);\n\t}\n\n\t/**\n\t * Applies personalization settings to the provided tiles.\n\t * @param {Array} tiles - An array of tiles to apply personalization settings to.\n\t * @param {string} [groupId] - Optional group ID for filtering personalization settings.\n\t * @param {boolean} [shouldReload=true] - A flag indicating whether to reload page visualizations.\n\t * @returns {Promise<void>} A promise that resolves when personalization settings are applied to the tiles.\n\t * @private\n\t */\n\tprotected async _applyTilesPersonalization(tiles: GenericTile[], groupId?: string, shouldReload = true) {\n\t\tconst [personalizations, favPages] = await Promise.all([this._getAppPersonalization(), this._getFavPages()]);\n\t\tconst favPageVisualizations = await this._getAllFavPageApps(favPages, shouldReload);\n\t\tconst groups = (this.getAggregation(\"groups\") || []) as Group[];\n\t\tconst apps = groupId ? this._getGroup(groupId)?.getApps() || [] : this.getApps() || [];\n\t\tfor (const tile of tiles) {\n\t\t\tconst item = this._getItem(tile, groups, apps);\n\t\t\tconst { color, icon } = this._getItemPersonalization(item, personalizations, favPageVisualizations, groupId);\n\n\t\t\tif (color) {\n\t\t\t\titem?.setProperty(\"bgColor\", color, true);\n\t\t\t\ttile.setBackgroundColor(color);\n\t\t\t}\n\n\t\t\tif (icon) {\n\t\t\t\titem?.setProperty(\"icon\", icon, true);\n\t\t\t\ttile.setTileIcon(icon);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the corresponding App or Group object associated with the given tile.\n\t * @param {GenericTile} tile - The tile for which to retrieve the corresponding item.\n\t * @param {Group[]} groups - An array of Group objects.\n\t * @param {App[]} apps - An array of App objects.\n\t * @returns {App | Group | undefined} The corresponding App or Group object, or undefined if not found.\n\t * @private\n\t */\n\tprivate _getItem(tile: GenericTile, groups: Group[], apps: App[]): App | Group | undefined {\n\t\tconst tileGroupId = tile.data(\"groupId\") as string | undefined;\n\t\tif (tileGroupId) {\n\t\t\treturn groups.find((oGroup) => oGroup.getGroupId() === tileGroupId);\n\t\t} else {\n\t\t\treturn apps.find((oApp) => DataFormatUtils.getLeanURL(oApp.getUrl()) === tile.getUrl());\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the color and icon associated with the specified item based on personalizations.\n\t * @param {App | Group | undefined} item - The App or Group object for which to retrieve personalization data.\n\t * @param {IAppPersonalization[] | undefined} personalizations - An array of personalization objects.\n\t * @param {ICustomVisualization[]} favPageVisualizations - An array of favorite page visualizations.\n\t * @param {string | undefined} groupId - The ID of the group to which the item belongs.\n\t * @returns {IItemPersonalization} An object containing the color and icon associated with the item.\n\t * @private\n\t */\n\tprivate _getItemPersonalization(\n\t\titem: App | Group | undefined,\n\t\tpersonalizations: IAppPersonalization[] | undefined,\n\t\tfavPageVisualizations: ICustomVisualization[],\n\t\tgroupId?: string\n\t): IItemPersonalization {\n\t\tlet color: string = \"\";\n\t\tlet icon: string = \"\";\n\n\t\tif (!item) return { color, icon };\n\n\t\tif (item.isA(\"sap.cux.home.Group\")) {\n\t\t\tconst personalization = personalizations?.find(\n\t\t\t\t(personalization) => personalization.isSection && personalization.sectionId === (item as Group).getGroupId()\n\t\t\t);\n\t\t\tcolor = personalization?.BGColor as string;\n\t\t} else {\n\t\t\tconst app = item as App;\n\t\t\tconst appIds = [app.getUrl()];\n\t\t\tconst oldAppId = app.data(\"oldAppId\") as string | undefined;\n\t\t\tif (oldAppId) {\n\t\t\t\tappIds.push(oldAppId);\n\t\t\t}\n\t\t\tconst vizId = app.getVizId();\n\t\t\tconst personalization = groupId\n\t\t\t\t? personalizations?.find(\n\t\t\t\t\t\t(personalization) =>\n\t\t\t\t\t\t\t!personalization.isSection &&\n\t\t\t\t\t\t\tpersonalization.sectionId === groupId &&\n\t\t\t\t\t\t\tpersonalization.appId &&\n\t\t\t\t\t\t\tappIds.includes(personalization.appId)\n\t\t\t\t\t)\n\t\t\t\t: personalizations?.find(\n\t\t\t\t\t\t(oPersonalization) =>\n\t\t\t\t\t\t\toPersonalization.isRecentlyAddedApp && oPersonalization.appId && appIds.includes(oPersonalization.appId)\n\t\t\t\t\t);\n\t\t\tconst favPageVisualization = favPageVisualizations.find(\n\t\t\t\t(oVisualization) => oVisualization.vizId === vizId || (oVisualization.appId && appIds.includes(oVisualization.appId))\n\t\t\t);\n\t\t\tcolor = personalization?.BGColor || favPageVisualization?.BGColor || DEFAULT_BG_COLOR().key;\n\t\t\ticon = this?.isA(\"sap.cux.home.FavAppPanel\") ? this._getFavAppIcon(app, favPageVisualization?.icon) : this.getAppIcon();\n\t\t}\n\n\t\treturn { color, icon };\n\t}\n\n\t/**\n\t * Retrieves favorite pages.\n\t * @returns {Promise<Array>} A promise that resolves with an array of favorite pages.\n\t * @private\n\t */\n\tprivate async _getFavPages() {\n\t\tconst aFavPages = await this._pageManagerInstance.getFavoritePages();\n\t\treturn aFavPages.concat({\n\t\t\tpageId: MYHOME_PAGE_ID,\n\t\t\tBGColor: DEFAULT_BG_COLOR().key\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves visualizations for all favorite pages based on the provided parameters.\n\t * @param {Array} pages - An array of favorite pages.\n\t * @param {boolean} shouldReload - A flag indicating whether to reload page visualizations.\n\t * @returns {Promise<Array>} A promise that resolves with an array of favorite page visualizations.\n\t * @private\n\t */\n\tprivate async _getAllFavPageApps(pages: IPage[], shouldReload?: boolean) {\n\t\ttry {\n\t\t\tif (pages) {\n\t\t\t\tthis._favPageVisualizations = this._favPageVisualizations || [];\n\t\t\t\t//Check to ensure that missing visualization data is loaded, if any\n\t\t\t\tconst loadedPages = this._favPageVisualizations.reduce((pageIDs: string[], visualization) => {\n\t\t\t\t\tif (visualization.pageId && !pageIDs.includes(visualization.pageId)) {\n\t\t\t\t\t\tpageIDs.push(visualization.pageId);\n\t\t\t\t\t}\n\t\t\t\t\treturn pageIDs;\n\t\t\t\t}, []);\n\t\t\t\tconst pageIds = pages.map((page) => page.pageId);\n\t\t\t\tconst shouldLoadMissingApps = loadedPages.length === 0 || !loadedPages.every((pageId) => pageIds.includes(pageId));\n\t\t\t\tif (!shouldReload && !shouldLoadMissingApps) {\n\t\t\t\t\treturn this._favPageVisualizations;\n\t\t\t\t} else {\n\t\t\t\t\tthis._favPageVisualizations = await this._loadAllPageVisualizations(pages);\n\t\t\t\t\treturn this._favPageVisualizations;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [];\n\t\t} catch (error) {\n\t\t\tLog.error(error as string);\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/**\n\t * Loads visualizations for all specified pages.\n\t * @param {Array} pages - An array of pages.\n\t * @param {boolean} [shouldFetchDistinctApps=false] - A flag indicating whether to fetch distinct pages.\n\t * @returns {Promise<Array>} A promise that resolves with an array of page visualizations.\n\t * @private\n\t */\n\tprivate async _loadAllPageVisualizations(pages: IPage[], shouldFetchDistinctApps = false) {\n\t\tconst getBgColor = (pageId: string | undefined) => {\n\t\t\treturn pages.find((page) => page.pageId === pageId)?.BGColor ?? DEFAULT_BG_COLOR().key;\n\t\t};\n\n\t\ttry {\n\t\t\tconst favPageVisualizations: ICustomVisualization[] = [];\n\t\t\tconst spaceContentService = await Container.getServiceAsync<SpaceContent>(\"SpaceContent\");\n\t\t\tconst pageData = await spaceContentService.getPages(pages.map((oPage) => oPage.pageId) as string[]);\n\t\t\tconst aPages = Object.values(pageData);\n\n\t\t\tfor (const page of aPages) {\n\t\t\t\tconst sections = page.sections || [];\n\t\t\t\tfor (const section of sections) {\n\t\t\t\t\tconst visualizations = section.visualizations || [];\n\t\t\t\t\tfor (const visualization of visualizations) {\n\t\t\t\t\t\tconst app = {\n\t\t\t\t\t\t\tappId: visualization.targetURL,\n\t\t\t\t\t\t\tvizId: visualization.vizId,\n\t\t\t\t\t\t\ticon: visualization.icon,\n\t\t\t\t\t\t\tBGColor: getBgColor(page.id) as string,\n\t\t\t\t\t\t\tpageId: page.id\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (!shouldFetchDistinctApps || !favPageVisualizations.some((oVizApp) => oVizApp.appId === app.appId)) {\n\t\t\t\t\t\t\tfavPageVisualizations.push(app);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn favPageVisualizations;\n\t\t} catch (error) {\n\t\t\tLog.error(error as string);\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/**\n\t * Returns default app icon.\n\t * @returns {string} The icon URL for the app.\n\t * @private\n\t */\n\tprotected getAppIcon(): string {\n\t\treturn DEFAULT_APP_ICON;\n\t}\n\n\t/**\n\t * Retrieves the icon for the specified app, prioritizing the favorite page icon if available.\n\t * @param {sap.cux.home.App} app - The app object.\n\t * @param {string} favPageIcon - The icon for the app from the favorite page.\n\t * @returns {string} The icon URL for the app.\n\t * @private\n\t */\n\tprivate _getFavAppIcon(app?: App, favPageIcon?: string): string {\n\t\treturn favPageIcon || app?.getIcon() || FALLBACK_ICON;\n\t}\n}\n"],"mappings":"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","ignoreList":[]}