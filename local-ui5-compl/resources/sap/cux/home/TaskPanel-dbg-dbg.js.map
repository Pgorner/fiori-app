{"version":3,"file":"TaskPanel-dbg-dbg.js","names":["sap","ui","define","Log","Formatting","ActionTile","ActionTileContent","Button","ContentConfig","Link","List","MessageBox","Popover","StandardListItem","TileAttribute","sap_m_library","Locale","DateFormat","NumberFormat","__MenuItem","__ToDoPanel","__DecisionDialog","___utils_Device","___utils_FESRUtil","_interopRequireDefault","obj","__esModule","default","_catch","body","recover","result","e","then","ButtonType","ContentConfigType","LoadState","PlacementType","URLHelper","MenuItem","ToDoPanel","DecisionDialog","getIconFrameBadge","getIconFrameBadgeValueState","fetchElementProperties","addFESRId","addFESRSemanticStepName","FESR_EVENTS","Format","TextArrangement","Constants","CARD_HEIGHT","splitCards","cards","maxLength","cardSet","i","length","push","slice","TaskPanel","extend","metadata","library","properties","enableActions","type","group","defaultValue","visibility","customAttributeUrl","constructor","_constructor","id","settings","ToDoPanel.prototype.constructor.call","init","_init","ToDoPanel.prototype.init.call","_customAttributeMap","_taskDefinitionMap","setProperty","_i18nBundle","getText","menuItem","getId","title","icon","press","_onPressViewAll","bind","insertAggregation","generateRequestUrls","_generateRequestUrls","cardCount","urls","getCountUrl","getDataUrl","getCustomAttributeUrl","generateCardTemplate","_generateCardTemplate","context","attributes","getObject","map","attribute","index","label","contentConfig","text","href","mode","frameType","pressEnabled","enableIconFrame","enableDynamicHeight","enableNavigationButton","headerImage","badgeIcon","getProperty","badgeValueState","header","state","priority","_toPriority","priorityText","_toPriorityText","event","_onPressTask","tileContent","headerLink","createdByLink","_onClickCreatedBy","PRESS","actionButtons","viewButton","getSource","getParent","firePress","visible","approveButton","_onActionButtonPress","undefined","addStyleClass","rejectButton","overflowButton","Transparent","_onOverflowButtonPress","overflowButtons","_getOverflowButtonPopover","openBy","_overflowPopover","_overflowList","showHeader","content","placement","VerticalPreferredBottom","_setupOverflowList","destroyItems","forEach","actionButton","listItem","pressHandler","addItem","_loadCards","_getCustomAttributes","task","finalAttributes","maximumAttributeCount","customAttributes","TaskDefinitionID","custom_attribute","customAttribute","taskCustomAttributes","CustomAttributeData","results","existingAttribute","find","taskAttribute","Name","name","value","referenced","Text","format","_formatCustomAttribute","textArrangement","_arrangeText","_formatDate","Value","_addCommonAttributes","trim","description","ValueText","formattedValue","TextFirst","TextLast","TextOnly","TextSeparate","taskAttributes","arguments","findAttribute","attributeName","oAttribute","toUpperCase","currentAttribute","CURRENCYVALUE","reference","referencedAttribute","currencyFormatter","getCurrencyInstance","parseFloat","USER","FormattedValue","CompletionDeadline","CreatedOn","dateStr","pattern","getDatePattern","locale","getLanguageTag","language","dateFormat","getDateTimeInstance","_getParsedTime","formattedDate","isNaN","Date","time","NaN","dateRegex","yyyymmddRegex","isoRegex","dateMatch","match","parseInt","test","_isValidDate","parsedDate","getDateInstance","parse","getTime","isoMatch","dateString","year","month","day","date","getFullYear","getMonth","getDate","control","getBindingContext","status","url","_getTaskUrl","_disableNavigation","Loading","redirect","originId","instanceId","taskInstanceURL","getTargetAppUrl","_this","sourceControl","getParameter","SAP__Origin","CreatedBy","userId","TaskTitle","subject","CreatedByName","createdBy","InstanceID","link","triggerEmail","email","_ref","setTimeout","URL","window","location","hash","toString","Promise","resolve","_fetchUserDetailsIfRequired","userData","Email","require","serviceContainer","getServiceAsync","teamsHelper","_temp2","enableContactsCollaboration","_temp","encodeURIComponent","_teamsHelper$enableCo","popover","error","Error","message","String","reject","warning","userInfo","Object","keys","includes","_fetchUserInfo","_this2","fetch","response","ok","json","_response$json","d","data","onDataReceived","_onDataReceived","options","_this3","tasks","taskDefinitions","_extractCustomAttributes","_temp3","onlyCount","_updateTasks","updatedTasks","_oData","displayTiles","tiles","_this4","_addCustomAttributes","_temp4","getEnableActions","_getTaskDefintions","_downloadDecisionOptions","_addActions","key","actions","getTaskActions","getBaseUrl","_this5","decisionKeys","decisionURLs","reduce","_temp5","_clearRequests","requests","baseURL","requestURLs","success","decisionOptions","_submitBatch","taskDefinition","CustomAttributeDefinitionData","filter","Rank","sort","attr1","attr2","Label","Type","Reference","Referenced","getNoDataText","_getNoDataText","getVerticalCardCount","_getVerticalCardCount","domRef","calculationProperties","domProperties","titleHeight","calculateTitleHeight","availableHeight","height","horizontalCardCount","getHorizontalCardCount","isPlaceholder","gap","verticalCardCount","_isLoaded","rowHeights","maxAttributes","attributeCount","card","count","Math","min","rowHeight","floor","max"],"sources":["TaskPanel.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Log from \"sap/base/Log\";\nimport Formatting from \"sap/base/i18n/Formatting\";\nimport ActionTile from \"sap/m/ActionTile\";\nimport ActionTileContent, { ActionTileContent$LinkPressEvent } from \"sap/m/ActionTileContent\";\nimport Button from \"sap/m/Button\";\nimport ContentConfig from \"sap/m/ContentConfig\";\nimport Link from \"sap/m/Link\";\nimport List from \"sap/m/List\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport Popover from \"sap/m/Popover\";\nimport StandardListItem from \"sap/m/StandardListItem\";\nimport TileAttribute from \"sap/m/TileAttribute\";\nimport { ButtonType, ContentConfigType, LoadState, PlacementType, URLHelper } from \"sap/m/library\";\nimport ServiceContainer from \"sap/suite/ui/commons/collaboration/ServiceContainer\";\nimport Event from \"sap/ui/base/Event\";\nimport Control from \"sap/ui/core/Control\";\nimport { MetadataOptions } from \"sap/ui/core/Element\";\nimport Locale from \"sap/ui/core/Locale\";\nimport DateFormat from \"sap/ui/core/format/DateFormat\";\nimport NumberFormat from \"sap/ui/core/format/NumberFormat\";\nimport Context from \"sap/ui/model/Context\";\nimport MenuItem from \"./MenuItem\";\nimport { $TaskPanelSettings } from \"./TaskPanel\";\nimport ToDoPanel, { CalculationProperties, IToDoPanel, RequestOptions, Response, TaskPriority } from \"./ToDoPanel\";\nimport DecisionDialog, { ActionButton, DecisionOption, getIconFrameBadge, getIconFrameBadgeValueState } from \"./utils/DecisionDialog\";\nimport { fetchElementProperties } from \"./utils/Device\";\nimport { addFESRId, addFESRSemanticStepName, FESR_EVENTS } from \"./utils/FESRUtil\";\n\ninterface CustomAttribute {\n\tname?: string;\n\tlabel?: string;\n\ttext?: string;\n\ttype?: string;\n\thref?: string;\n\tformat?: string;\n\treference?: string;\n\treferenced?: string;\n\ttextArrangement?: TextArrangement;\n}\n\ninterface TaskCustomAttribute {\n\tName: string;\n\tValue: string;\n\tValueText: string;\n\tLabel: string;\n\tType: string;\n\tRank: number;\n\tFormat: string;\n\tFormattedValue: string;\n\tReference: string;\n\tReferenced: string;\n\tTextArrangement: TextArrangement;\n}\n\nexport interface Task {\n\tSAP__Origin: string;\n\tCreatedBy: string;\n\tTaskTitle: string;\n\tCreatedByName: string;\n\tInstanceID: string;\n\tTaskDefinitionID: string;\n\tCompletionDeadline: string;\n\tCreatedOn: string;\n\tactions: ActionButton[];\n\tPriority: TaskPriority;\n\tCustomAttributeData: {\n\t\tresults: TaskCustomAttribute[];\n\t};\n\tattributes: CustomAttribute[];\n}\n\ninterface TaskDefintion {\n\tSAP__Origin: string;\n\tInstanceID: string;\n\tTaskDefinitionID: string;\n}\n\ninterface TaskDefinitionCollection {\n\tTaskDefinitionID: string;\n\tCustomAttributeDefinitionData: {\n\t\tresults: TaskCustomAttribute[];\n\t};\n}\n\ninterface UserInfo {\n\tEmail?: string;\n}\n\nenum Format {\n\tCURRENCYVALUE = \"CURRENCYVALUE\",\n\tCURRENCYCODE = \"CURRENCYCODE\",\n\tUSER = \"USER\"\n}\n\nenum TextArrangement {\n\tTextFirst = \"TextFirst\",\n\tTextLast = \"TextLast\",\n\tTextOnly = \"TextOnly\",\n\tTextSeparate = \"TextSeparate\"\n}\n\nconst Constants = {\n\tCARD_HEIGHT: {\n\t\t// Cozy - Compact\n\t\t1: 220, // 214  - 226\n\t\t2: 272, // 265  - 278\n\t\t3: 324, // 318  - 330\n\t\t4: 376 // 370  - 382\n\t}\n};\n\n/**\n * Splits an array of task cards into smaller arrays, each with a maximum specified length.\n *\n * @param {Task[]} cards - The array of task cards to be split.\n * @param {number} maxLength - The maximum length of each sub-array.\n * @returns {Task[][]} - An array of sub-arrays, each containing a maximum of `maxLength` task cards.\n */\nfunction splitCards(cards: Task[], maxLength: number): Task[][] {\n\tconst cardSet = [];\n\tfor (let i = 0; i < cards.length; i += maxLength) {\n\t\tcardSet.push(cards.slice(i, i + maxLength));\n\t}\n\n\treturn cardSet;\n}\n\n/**\n *\n * Panel class for managing and storing Task cards.\n *\n * @extends ToDoPanel\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @internal\n * @experimental Since 1.121\n * @public\n *\n * @alias sap.cux.home.TaskPanel\n */\nexport default class TaskPanel extends ToDoPanel implements IToDoPanel {\n\tprivate _customAttributeMap!: Record<string, CustomAttribute[]>;\n\tprivate userInfo!: Record<string, UserInfo>;\n\tprivate _disableNavigation!: boolean;\n\tprivate _taskDefinitionMap!: Record<string, DecisionOption[]>;\n\tprivate _overflowPopover!: Popover;\n\tprivate _overflowList!: List;\n\n\tconstructor(id?: string | $TaskPanelSettings);\n\tconstructor(id?: string, settings?: $TaskPanelSettings);\n\t/**\n\t * Constructor for a new Task Panel.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $TaskPanelSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tproperties: {\n\t\t\t/**\n\t\t\t * Specifies if actions should be enabled for the task cards.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\tenableActions: { type: \"boolean\", group: \"Data\", defaultValue: false, visibility: \"public\" },\n\t\t\t/**\n\t\t\t * Specifies the URL that fetches the custom attributes to be displayed along with the task cards.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\tcustomAttributeUrl: { type: \"string\", group: \"Data\", defaultValue: \"\", visibility: \"public\" }\n\t\t}\n\t};\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tsuper.init();\n\t\tthis._customAttributeMap = {};\n\t\tthis._taskDefinitionMap = {};\n\n\t\t//Configure Header\n\t\tthis.setProperty(\"key\", \"tasks\");\n\t\tthis.setProperty(\"title\", this._i18nBundle.getText(\"tasksTabTitle\"));\n\n\t\t//Setup Menu Items - ensure that 'View All Tasks' item is the first item in the list\n\t\tconst menuItem = new MenuItem(`${this.getId()}-view-tasks-btn`, {\n\t\t\ttitle: this._i18nBundle.getText(\"viewAllTasksTitle\"),\n\t\t\ticon: \"sap-icon://inbox\",\n\t\t\tpress: this._onPressViewAll.bind(this)\n\t\t});\n\t\tthis.insertAggregation(\"menuItems\", menuItem, 0);\n\t\taddFESRId(menuItem, \"goToTaskSitution\");\n\t}\n\n\t/**\n\t * Generates request URLs for fetching data based on the specified card count.\n\t * Overridden method to provide task-specific URLs.\n\t *\n\t * @private\n\t * @override\n\t * @param {number} cardCount - The number of cards to retrieve.\n\t * @returns {string[]} An array of request URLs.\n\t */\n\tpublic generateRequestUrls(cardCount: number): string[] {\n\t\tconst urls = [this.getCountUrl(), `${this.getDataUrl()},CustomAttributeData&$expand=CustomAttributeData&$skip=0&$top=${cardCount}`];\n\n\t\tconst customAttributeUrl = this.getCustomAttributeUrl();\n\t\tif (customAttributeUrl) {\n\t\t\turls.push(customAttributeUrl);\n\t\t}\n\n\t\treturn urls;\n\t}\n\n\t/**\n\t * Generates a card template for tasks.\n\t * Overridden method from To-Do panel to generate task-specific card template.\n\t *\n\t * @private\n\t * @override\n\t * @param {string} id The ID for the template card.\n\t * @param {Context} context The context object.\n\t * @returns {Control} The generated card control template.\n\t */\n\tpublic generateCardTemplate(id: string, context: Context): Control {\n\t\tconst attributes = (context.getObject() as Task).attributes?.map((attribute, index) => {\n\t\t\treturn new TileAttribute(`${id}-${index}-attribute`, {\n\t\t\t\tlabel: attribute.label as string,\n\t\t\t\tcontentConfig: new ContentConfig(`${id}-${index}-contentConfig`, {\n\t\t\t\t\ttype: attribute.type as ContentConfigType,\n\t\t\t\t\ttext: attribute.text as string,\n\t\t\t\t\thref: attribute.href as string\n\t\t\t\t})\n\t\t\t});\n\t\t});\n\n\t\treturn new ActionTile(`${id}-actionTile`, {\n\t\t\tmode: \"ActionMode\",\n\t\t\tframeType: \"TwoByOne\",\n\t\t\tpressEnabled: true,\n\t\t\tenableIconFrame: true,\n\t\t\tenableDynamicHeight: true,\n\t\t\tenableNavigationButton: true,\n\t\t\theaderImage: \"sap-icon://workflow-tasks\",\n\t\t\tbadgeIcon: getIconFrameBadge(context.getProperty(\"Priority\") as TaskPriority),\n\t\t\tbadgeValueState: getIconFrameBadgeValueState(context.getProperty(\"Priority\") as TaskPriority),\n\t\t\theader: context.getProperty(\"TaskTitle\") as string,\n\t\t\tstate: context.getProperty(\"status\") as LoadState,\n\t\t\tpriority: this._toPriority(context.getProperty(\"Priority\") as TaskPriority),\n\t\t\tpriorityText: this._toPriorityText(this._toPriority(context.getProperty(\"Priority\") as TaskPriority)),\n\t\t\tpress: (event: Event) => this._onPressTask(event),\n\t\t\ttileContent: [\n\t\t\t\tnew ActionTileContent(`${id}-actionTileContent`, {\n\t\t\t\t\theaderLink: (() => {\n\t\t\t\t\t\tconst createdByLink = new Link({\n\t\t\t\t\t\t\ttext: context.getProperty(\"CreatedByName\") as string,\n\t\t\t\t\t\t\tpress: (event: Event): void => {\n\t\t\t\t\t\t\t\tvoid this._onClickCreatedBy(event);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\taddFESRSemanticStepName(createdByLink, FESR_EVENTS.PRESS, \"MST:ContactDetails\");\n\t\t\t\t\t\treturn createdByLink;\n\t\t\t\t\t})(),\n\t\t\t\t\tattributes\n\t\t\t\t})\n\t\t\t],\n\t\t\tactionButtons: [\n\t\t\t\t(() => {\n\t\t\t\t\tconst viewButton = new Button(`${id}-view-btn`, {\n\t\t\t\t\t\ttext: this._i18nBundle.getText(\"viewButton\"),\n\t\t\t\t\t\tpress: (event: Event) => (event.getSource<Button>().getParent() as ActionTile).firePress(),\n\t\t\t\t\t\tvisible: context.getProperty(\"actions/length\") === 0\n\t\t\t\t\t});\n\t\t\t\t\taddFESRSemanticStepName(viewButton, FESR_EVENTS.PRESS, \"todoActionBtn\");\n\t\t\t\t\treturn viewButton;\n\t\t\t\t})(),\n\t\t\t\t(() => {\n\t\t\t\t\tconst approveButton = new Button(`${id}-approve-btn`, {\n\t\t\t\t\t\ttext: context.getProperty(\"actions/0/text\") as string,\n\t\t\t\t\t\ttype: context.getProperty(\"actions/0/type\") as ButtonType,\n\t\t\t\t\t\tpress: () => this._onActionButtonPress(context.getProperty(\"actions/0/pressHandler\") as () => void),\n\t\t\t\t\t\tvisible: context.getProperty(\"actions/0\") !== undefined\n\t\t\t\t\t}).addStyleClass(\"sapUiTinyMarginEnd\");\n\t\t\t\t\taddFESRSemanticStepName(approveButton, FESR_EVENTS.PRESS, \"todoActionBtn\");\n\t\t\t\t\treturn approveButton;\n\t\t\t\t})(),\n\t\t\t\t(() => {\n\t\t\t\t\tconst rejectButton = new Button(`${id}-reject-btn`, {\n\t\t\t\t\t\ttext: context.getProperty(\"actions/1/text\") as string,\n\t\t\t\t\t\ttype: context.getProperty(\"actions/1/type\") as ButtonType,\n\t\t\t\t\t\tpress: () => this._onActionButtonPress(context.getProperty(\"actions/1/pressHandler\") as () => void),\n\t\t\t\t\t\tvisible: context.getProperty(\"actions/1\") !== undefined\n\t\t\t\t\t}).addStyleClass(\"sapUiTinyMarginEnd\");\n\t\t\t\t\taddFESRSemanticStepName(rejectButton, FESR_EVENTS.PRESS, \"todoActionBtn\");\n\t\t\t\t\treturn rejectButton;\n\t\t\t\t})(),\n\t\t\t\t(() => {\n\t\t\t\t\tconst overflowButton = new Button(`${id}-overflow-btn`, {\n\t\t\t\t\t\ticon: \"sap-icon://overflow\",\n\t\t\t\t\t\ttype: ButtonType.Transparent,\n\t\t\t\t\t\tpress: (event: Event) => this._onOverflowButtonPress(event, context),\n\t\t\t\t\t\tvisible: context.getProperty(\"actions/length\") >= 3\n\t\t\t\t\t});\n\t\t\t\t\taddFESRSemanticStepName(overflowButton, FESR_EVENTS.PRESS, \"todoActBtnOverflow\");\n\t\t\t\t\treturn overflowButton;\n\t\t\t\t})()\n\t\t\t]\n\t\t});\n\t}\n\n\t/**\n\t * Handles the press event of the overflow button.\n\t * Opens a Popover containing overflow actions.\n\t *\n\t * @private\n\t * @param {Event} event - The press event triggered by the overflow button.\n\t * @param {Context} context - The context containing all actions.\n\t * @returns {void}\n\t */\n\tprivate _onOverflowButtonPress(event: Event, context: Context): void {\n\t\tconst overflowButtons = (context.getProperty(\"actions\") as ActionButton[]).slice(2);\n\t\tthis._getOverflowButtonPopover(overflowButtons).openBy(event.getSource<Button>());\n\t}\n\n\t/**\n\t * Creates or retrieves the overflow button Popover.\n\t *\n\t * @private\n\t * @param {ActionButton[]} actionButtons - The array of overflow actions.\n\t * @returns {Popover} The overflow button Popover.\n\t */\n\tprivate _getOverflowButtonPopover(actionButtons: ActionButton[]): Popover {\n\t\tif (!this._overflowPopover) {\n\t\t\tthis._overflowList = new List(`${this.getId()}-overflowList`);\n\t\t\tthis._overflowPopover = new Popover(`${this.getId()}-overflowPopover`, {\n\t\t\t\tshowHeader: false,\n\t\t\t\tcontent: this._overflowList,\n\t\t\t\tplacement: PlacementType.VerticalPreferredBottom\n\t\t\t});\n\t\t}\n\n\t\t//setup task-specific with task-specific actions\n\t\tthis._setupOverflowList(actionButtons);\n\t\treturn this._overflowPopover;\n\t}\n\n\t/**\n\t * Sets up the overflow button list with the provided task-specific actions.\n\t *\n\t * @private\n\t * @param {ActionButton[]} actionButtons - The array of overflow actions.\n\t * @returns {void}\n\t */\n\tprivate _setupOverflowList(actionButtons: ActionButton[]): void {\n\t\tthis._overflowList.destroyItems();\n\t\tactionButtons.forEach((actionButton, index) => {\n\t\t\tconst listItem = new StandardListItem(`action-${index}`, {\n\t\t\t\ttitle: actionButton.text,\n\t\t\t\ttype: \"Active\",\n\t\t\t\tpress: () => this._onActionButtonPress(actionButton.pressHandler as () => void)\n\t\t\t});\n\t\t\taddFESRSemanticStepName(listItem, FESR_EVENTS.PRESS, \"todoActionBtn\");\n\t\t\tthis._overflowList.addItem(listItem);\n\t\t});\n\t}\n\n\t/**\n\t * Handles the button press event and executes the provided press handler function,\n\t * which refreshes the UI after the button press action.\n\t *\n\t * @private\n\t * @param {Function} pressHandler - The function to be executed when the button is pressed.\n\t * @returns {void}\n\t */\n\tprivate _onActionButtonPress(pressHandler: (refreshFn: () => Promise<void>) => void): void {\n\t\tpressHandler(this._loadCards.bind(this));\n\t}\n\n\t/**\n\t * Retrieves custom attributes for a given task and formats them for display.\n\t * If the task has completion deadline and creation date, those attributes are also included.\n\t * If the task has a creator, the creator's name is included as well.\n\t *\n\t * @param {Task} task - The task object for which custom attributes are retrieved.\n\t * @returns {CustomAttribute[]} - An array of formatted custom attributes.\n\t */\n\tprivate _getCustomAttributes(task: Task): CustomAttribute[] {\n\t\tconst finalAttributes = [];\n\t\tconst maximumAttributeCount = 4;\n\t\tconst customAttributes = this._customAttributeMap[task.TaskDefinitionID] || [];\n\n\t\tfor (let custom_attribute of customAttributes) {\n\t\t\tconst customAttribute = custom_attribute;\n\t\t\tconst taskCustomAttributes = task.CustomAttributeData?.results;\n\t\t\tconst existingAttribute = taskCustomAttributes.find((taskAttribute) => {\n\t\t\t\treturn taskAttribute.Name === customAttribute.name;\n\t\t\t});\n\t\t\tlet value = \"\";\n\n\t\t\tif (existingAttribute && !customAttribute.referenced) {\n\t\t\t\tconst attribute: CustomAttribute = {\n\t\t\t\t\tlabel: customAttribute.label + \":\",\n\t\t\t\t\ttype: ContentConfigType.Text\n\t\t\t\t};\n\n\t\t\t\tif (customAttribute.format) {\n\t\t\t\t\tvalue = this._formatCustomAttribute(customAttribute, taskCustomAttributes);\n\t\t\t\t} else if (customAttribute.textArrangement) {\n\t\t\t\t\tvalue = this._arrangeText(existingAttribute, customAttribute.textArrangement);\n\t\t\t\t} else {\n\t\t\t\t\tvalue = customAttribute.type === \"Edm.DateTime\" ? this._formatDate(existingAttribute.Value) : existingAttribute.Value;\n\t\t\t\t}\n\t\t\t\tattribute.text = value || \"-\";\n\t\t\t\tfinalAttributes.push(attribute);\n\t\t\t}\n\t\t}\n\n\t\t// add common attributes\n\t\tthis._addCommonAttributes(finalAttributes, task);\n\n\t\treturn finalAttributes.slice(0, maximumAttributeCount);\n\t}\n\n\t/**\n\t * Formats the given unit of measure value and description based on the specified text arrangement.\n\t *\n\t * @private\n\t * @param {TaskCustomAttribute} customAttribute The custom attribute object.\n\t * @param {TextArrangement} textArrangement The text arrangement option.\n\t * @returns {string} The formatted value.\n\t */\n\tprivate _arrangeText(customAttribute: TaskCustomAttribute, textArrangement: TextArrangement): string {\n\t\tconst value = customAttribute.Value.trim();\n\t\tconst description = customAttribute.ValueText.trim();\n\t\tlet formattedValue = \"\";\n\n\t\tswitch (textArrangement) {\n\t\t\tcase TextArrangement.TextFirst:\n\t\t\t\tformattedValue = `${description} (${value})`;\n\t\t\t\tbreak;\n\t\t\tcase TextArrangement.TextLast:\n\t\t\t\tformattedValue = `${value} (${description})`;\n\t\t\t\tbreak;\n\t\t\tcase TextArrangement.TextOnly:\n\t\t\t\tformattedValue = `${description}`;\n\t\t\t\tbreak;\n\t\t\tcase TextArrangement.TextSeparate:\n\t\t\t\tformattedValue = `${value}`;\n\t\t\t\tbreak;\n\t\t\tdefault: // TextFirst\n\t\t\t\tformattedValue = `${description} ${value})`;\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn formattedValue;\n\t}\n\n\t/**\n\t * Formats a custom attribute value based on its format type.\n\t *\n\t * @param {CustomAttribute} customAttribute - The custom attribute object.\n\t * @param {TaskCustomAttribute[]} taskAttributes - The array of task attributes.\n\t * @returns {string} - The formatted value.\n\t */\n\tprivate _formatCustomAttribute(customAttribute: CustomAttribute, taskAttributes: TaskCustomAttribute[] = []): string {\n\t\tconst findAttribute = (attributeName: string) => {\n\t\t\treturn taskAttributes.find((oAttribute) => {\n\t\t\t\treturn oAttribute.Name === attributeName;\n\t\t\t});\n\t\t};\n\t\tconst format = customAttribute.format?.toUpperCase();\n\t\tconst currentAttribute = findAttribute(customAttribute.name as string);\n\t\tlet formattedValue = currentAttribute?.Value;\n\n\t\t// Format = CurrencyValue\n\t\tif (format === Format.CURRENCYVALUE && customAttribute.reference) {\n\t\t\tconst referencedAttribute = findAttribute(customAttribute.reference);\n\n\t\t\tif (referencedAttribute) {\n\t\t\t\tconst currencyFormatter = NumberFormat.getCurrencyInstance();\n\t\t\t\tformattedValue = currencyFormatter.format(parseFloat(currentAttribute?.Value as string), referencedAttribute.Value);\n\t\t\t}\n\t\t} else if (format === Format.USER) {\n\t\t\tformattedValue = currentAttribute?.FormattedValue || currentAttribute?.Value;\n\t\t}\n\n\t\treturn formattedValue as string;\n\t}\n\n\t/**\n\t * Adds common attributes to the final attributes list based on the provided task.\n\t * Common attributes include completion deadline, creation date, and creator's name.\n\t *\n\t * @param {CustomAttribute[]} finalAttributes - The array of custom attributes to which the common attributes will be added.\n\t * @param {Task} task - The task object containing data for common attributes.\n\t */\n\tprivate _addCommonAttributes(finalAttributes: CustomAttribute[], task: Task): void {\n\t\tif (task.CompletionDeadline) {\n\t\t\tfinalAttributes.push({\n\t\t\t\tlabel: this._i18nBundle.getText(\"dueDate\") + \":\",\n\t\t\t\ttext: this._formatDate(task.CompletionDeadline, \"MMM dd, YYYY hh:mm a\"),\n\t\t\t\ttype: ContentConfigType.Text\n\t\t\t});\n\t\t}\n\n\t\tif (task.CreatedOn) {\n\t\t\tfinalAttributes.push({\n\t\t\t\tlabel: this._i18nBundle.getText(\"createdOn\") + \":\",\n\t\t\t\ttext: this._formatDate(task.CreatedOn),\n\t\t\t\ttype: ContentConfigType.Text\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Format a date string to a custom date and time format.\n\t *\n\t * @private\n\t * @param {string} dateStr - The date string to format.\n\t * @param {string} pattern - The pattern to be used for formatting the date.\n\t * @returns {string} The formatted date string.\n\t */\n\tprivate _formatDate(dateStr: string, pattern: string = Formatting.getDatePattern(\"short\") || \"dd/MM/yyyy\"): string {\n\t\tconst locale = new Locale(Formatting.getLanguageTag().language);\n\t\tconst dateFormat = DateFormat.getDateTimeInstance({ pattern }, locale);\n\t\tconst value = this._getParsedTime(dateStr);\n\t\tlet formattedDate = \"\";\n\n\t\tif (!isNaN(value)) {\n\t\t\tformattedDate = dateFormat.format(new Date(value));\n\t\t}\n\n\t\treturn formattedDate;\n\t}\n\n\t/**\n\t * Parses different time formats supplied from the back-ends. It returns UNIX time stamp in milliseconds.\n\t * If Time Format contains unexpected symbols or Format is not recognized NaN is returned.\n\t * Referenced from: cross.fnd.fiori.inbox.CustomAttributeComparator\n\t *\n\t * @param {string | number} time date format to be parsed. If int UNIX time stamp in milliseconds is assumed.\n\t * @returns {number} UNIX time stamp in milliseconds. (milliseconds that have elapsed since 00:00:00 UTC, Thursday, 1 January 1970)\n\t * @private\n\t */\n\tprivate _getParsedTime(time: string | number): number {\n\t\tif (time == null || time === \"00000000\") {\n\t\t\treturn NaN;\n\t\t}\n\n\t\tif (typeof time === \"number\") {\n\t\t\treturn time;\n\t\t}\n\n\t\t// Check for various time formats\n\t\tconst dateRegex = /\\/(Date)\\((\\d+)\\)\\//;\n\t\tconst yyyymmddRegex = /^\\d{8}$/;\n\t\tconst isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))?$/;\n\n\t\tconst dateMatch = time.match(dateRegex);\n\t\tif (dateMatch) {\n\t\t\t// Time Format \"/Date(869080830000)/\"\n\t\t\treturn parseInt(dateMatch[2], 10);\n\t\t}\n\n\t\tif (yyyymmddRegex.test(time) && this._isValidDate(time)) {\n\t\t\t// Time Format \"YYYYMMDD\" (Old TGW format)\n\t\t\tconst parsedDate = DateFormat.getDateInstance().parse(time);\n\t\t\treturn parsedDate instanceof Date ? parsedDate.getTime() : NaN;\n\t\t}\n\n\t\tconst isoMatch = time.match(isoRegex);\n\t\tif (isoMatch) {\n\t\t\t// Time Format \"2018-01-05T00:00:00\" (BPM and TGW-cloud format, UTC)\n\t\t\treturn new Date(time).getTime();\n\t\t}\n\n\t\treturn NaN;\n\t}\n\n\t/**\n\t * Check whether given dateString is of format YYYYMMDD and is a valid value for Date object.\n\t *\n\t * @param {string} dateString - The datestring to be checked for validity\n\t * @returns {Date} if its a valid date return the date else false\n\t * @private\n\t */\n\tprivate _isValidDate(dateString: string): boolean {\n\t\t// Check if the input has the correct length\n\t\tif (dateString.length !== 8) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Parse the date components\n\t\tconst year = parseInt(dateString.slice(0, 4), 10);\n\t\tconst month = parseInt(dateString.slice(4, 6), 10) - 1;\n\t\tconst day = parseInt(dateString.slice(6), 10);\n\n\t\t// Create a Date object with the parsed components\n\t\tconst date = new Date(year, month, day);\n\n\t\t// Check if the parsed date is valid\n\t\treturn date.getFullYear() === year && date.getMonth() === month && date.getDate() === day;\n\t}\n\n\t/**\n\t * Handles the press event of a task.\n\t *\n\t * @private\n\t * @param {Event} event - The press event.\n\t */\n\tprivate _onPressTask(event: Event) {\n\t\tconst control = event.getSource<ActionTile>();\n\t\tconst context = control.getBindingContext();\n\t\tconst status = context?.getProperty(\"status\") as LoadState;\n\t\tconst url = this._getTaskUrl(context?.getProperty(\"SAP__Origin\") as string, context?.getProperty(\"InstanceID\") as string);\n\n\t\tif (!this._disableNavigation) {\n\t\t\tif (status !== LoadState.Loading) {\n\t\t\t\tURLHelper.redirect(url, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the task URL for a given task.\n\t *\n\t * @private\n\t * @param {string} originId - The origin ID of the task.\n\t * @param {string} instanceId - The instance ID of the task.\n\t * @returns {string} The task URL.\n\t */\n\tprivate _getTaskUrl(originId: string, instanceId: string): string {\n\t\tconst taskInstanceURL = `?showAdditionalAttributes=true&/detail/${originId}/${instanceId}/TaskCollection(SAP__Origin='${originId}',InstanceID='${instanceId}')`;\n\n\t\treturn this.getTargetAppUrl() + taskInstanceURL;\n\t}\n\n\t/**\n\t * Handles the click event on the \"Created By\" link.\n\t * Triggers email or opens a contact card if configuration is enabled\n\t *\n\t * @private\n\t * @param {Event} event - The event object.\n\t */\n\tprivate async _onClickCreatedBy(event: ActionTileContent$LinkPressEvent): Promise<void> {\n\t\tconst sourceControl = event.getParameter(\"link\");\n\t\tconst {\n\t\t\tSAP__Origin: originId,\n\t\t\tCreatedBy: userId,\n\t\t\tTaskTitle: subject,\n\t\t\tCreatedByName: createdBy,\n\t\t\tInstanceID\n\t\t} = event.getSource().getBindingContext()?.getObject() as Task;\n\t\tconst link = this._getTaskUrl(originId, InstanceID);\n\t\tconst triggerEmail = (email: string, { subject, body }: { subject: string; body: string }) => {\n\t\t\tURLHelper.triggerEmail(email, subject, body);\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis._disableNavigation = false;\n\t\t\t}, 0);\n\t\t};\n\t\tconst url = new URL(window.location.href);\n\t\turl.hash = link;\n\t\tconst body = url.toString();\n\n\t\tthis._disableNavigation = true;\n\n\t\tconst userData = await this._fetchUserDetailsIfRequired(originId, userId);\n\t\tif (userData.Email) {\n\t\t\tsap.ui.require([\"sap/suite/ui/commons/collaboration/ServiceContainer\"], async (serviceContainer: ServiceContainer) => {\n\t\t\t\tconst teamsHelper = await serviceContainer.getServiceAsync();\n\n\t\t\t\tif (teamsHelper.enableContactsCollaboration) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst popover = (await teamsHelper.enableContactsCollaboration(userData.Email as string, {\n\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\tbody: encodeURIComponent(body)\n\t\t\t\t\t\t})) as Popover;\n\t\t\t\t\t\tpopover.openBy(sourceControl as Link);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tLog.error(error instanceof Error ? error.message : String(error));\n\t\t\t\t\t\ttriggerEmail(userData.Email as string, { subject, body });\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttriggerEmail(userData.Email as string, { subject, body });\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tMessageBox.warning(this._i18nBundle.getText(\"noEmail\", [createdBy]) as string);\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis._disableNavigation = false;\n\t\t\t}, 0);\n\t\t}\n\t}\n\n\t/**\n\t * Fetches user details if required.\n\t *\n\t * @private\n\t * @param {string} originId - The origin ID.\n\t * @param {string} userId - The user ID.\n\t * @returns {Promise<UserInfo>} - A promise that resolves to the user information.\n\t */\n\tprivate _fetchUserDetailsIfRequired(originId: string, userId: string): Promise<UserInfo> {\n\t\tthis.userInfo = this.userInfo || {};\n\n\t\tif (Object.keys(this.userInfo).includes(userId)) {\n\t\t\treturn Promise.resolve(this.userInfo[userId]);\n\t\t} else {\n\t\t\treturn this._fetchUserInfo(originId, userId);\n\t\t}\n\t}\n\n\t/**\n\t * Fetches user information for a specific user.\n\t *\n\t * @private\n\t * @param {string} originId - The origin ID.\n\t * @param {string} userId - The user ID.\n\t * @returns {Promise<UserInfo>} - A promise that resolves to the user information.\n\t */\n\tprivate async _fetchUserInfo(originId: string, userId: string): Promise<UserInfo> {\n\t\ttry {\n\t\t\tconst response = await fetch(\n\t\t\t\t`/sap/opu/odata/IWPGW/TASKPROCESSING;mo;v=2/UserInfoCollection(SAP__Origin='${originId}',UniqueName='${userId}')?$format=json`\n\t\t\t);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`Failed to Fetch User Info for: ${userId}`);\n\t\t\t}\n\n\t\t\tconst { d: data } = (await response.json()) as Response;\n\t\t\tthis.userInfo[userId] = data as UserInfo;\n\t\t\treturn this.userInfo[userId];\n\t\t} catch (error: unknown) {\n\t\t\tLog.error(error instanceof Error ? error.message : String(error));\n\t\t\treturn {};\n\t\t}\n\t}\n\n\t/**\n\t * Hook for processing data fetched from a batch call.\n\t * This method can be overridden to perform additional data processing operations.\n\t * In this implementation, it is consumed to handle task-related data, particularly\n\t * for extracting custom attributes if action cards are enabled.\n\t *\n\t * @private\n\t * @async\n\t * @param {unknown[]} results - Data retrieved from the batch call. Structure may vary based on the backend service.\n\t * @param {RequestOptions} options - Additional options for parsing the data.\n\t * @returns {Promise<void>} A Promise that resolves when the data processing is complete.\n\t */\n\tpublic async onDataReceived(results: unknown[], options: RequestOptions): Promise<void> {\n\t\tconst [tasks, taskDefinitions] = results;\n\t\tthis._extractCustomAttributes(taskDefinitions as TaskDefinitionCollection[]);\n\n\t\tif (!options || (options && !options.onlyCount)) {\n\t\t\tconst updatedTasks = await this._updateTasks(tasks as Task[]);\n\t\t\tthis._oData.displayTiles = this._oData.tiles = updatedTasks;\n\t\t}\n\t}\n\n\t/**\n\t * Updates the tasks with attributes and actions.\n\t *\n\t * @private\n\t * @param {Task[]} tasks - The array of tasks to update.\n\t * @returns {Promise<Task[]>} A promise that resolves with the updated array of tasks.\n\t */\n\tprivate async _updateTasks(tasks: Task[] = []): Promise<Task[]> {\n\t\t//add custom attributes to tasks\n\t\tlet updatedTasks = this._addCustomAttributes(tasks);\n\n\t\t//add actions to tasks\n\t\tif (this.getEnableActions()) {\n\t\t\t//calculate unique task definitions\n\t\t\tconst taskDefinitions = this._getTaskDefintions(updatedTasks);\n\n\t\t\t//download decision options for task defintions\n\t\t\tawait this._downloadDecisionOptions(taskDefinitions);\n\n\t\t\t//append actions\n\t\t\tupdatedTasks = this._addActions(updatedTasks);\n\t\t}\n\n\t\treturn updatedTasks;\n\t}\n\n\t/**\n\t * Adds custom attributes to each task in the provided array.\n\t *\n\t * @private\n\t * @param {Task[]} tasks - The array of tasks to which custom attributes will be added.\n\t * @returns {Task[]} - A new array of tasks, each with added custom attributes.\n\t */\n\tprivate _addCustomAttributes(tasks: Task[]): Task[] {\n\t\treturn tasks.map((task) => ({\n\t\t\t...task,\n\t\t\tattributes: this._getCustomAttributes(task)\n\t\t}));\n\t}\n\n\t/**\n\t * Adds actions to the tasks based on their task definitions.\n\t *\n\t * @private\n\t * @param {Task[]} tasks - The array of tasks to which actions will be added.\n\t * @returns {Task[]} The array of tasks with actions added.\n\t */\n\tprivate _addActions(tasks: Task[]): Task[] {\n\t\treturn tasks.map((task) => {\n\t\t\tconst key = task.SAP__Origin + task.TaskDefinitionID;\n\t\t\treturn {\n\t\t\t\t...task,\n\t\t\t\tactions: this._taskDefinitionMap[key]\n\t\t\t\t\t? DecisionDialog.getTaskActions(task, this.getBaseUrl(), this._taskDefinitionMap, this._i18nBundle)\n\t\t\t\t\t: []\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Downloads decision options for the provided task definitions.\n\t *\n\t * @private\n\t * @param {Record<string, TaskDefinition>} taskDefinitions - The task definitions for which decision options will be downloaded.\n\t * @returns {Promise<void>} A promise that resolves when all decision options are downloaded and processed.\n\t */\n\tprivate async _downloadDecisionOptions(taskDefinitions: Record<string, TaskDefintion>): Promise<void> {\n\t\tconst decisionKeys: string[] = [];\n\t\tconst decisionURLs = Object.keys(taskDefinitions).reduce((urls: string[], key) => {\n\t\t\tif (!Object.keys(this._taskDefinitionMap).includes(key)) {\n\t\t\t\tdecisionKeys.push(key);\n\t\t\t\tthis._taskDefinitionMap[key] = [];\n\n\t\t\t\tconst { SAP__Origin, InstanceID } = taskDefinitions[key];\n\t\t\t\turls.push(`DecisionOptions?SAP__Origin='${SAP__Origin}'&InstanceID='${InstanceID}'`);\n\t\t\t}\n\t\t\treturn urls;\n\t\t}, []);\n\n\t\tif (decisionURLs.length) {\n\t\t\tthis._clearRequests();\n\t\t\tthis.requests.push({\n\t\t\t\tbaseURL: this.getBaseUrl(),\n\t\t\t\trequestURLs: decisionURLs,\n\t\t\t\tsuccess: (results: DecisionOption[][]): Promise<void> => {\n\t\t\t\t\tresults.forEach((decisionOptions: DecisionOption[], index) => {\n\t\t\t\t\t\tthis._taskDefinitionMap[decisionKeys[index]] = decisionOptions;\n\t\t\t\t\t});\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tawait this._submitBatch();\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves unique task definitions from the provided array of tasks.\n\t *\n\t * @private\n\t * @param {Task[]} tasks - The array of tasks from which to retrieve task definitions.\n\t * @returns {Record<string, TaskDefintion>} An object containing unique task definitions.\n\t */\n\tprivate _getTaskDefintions(tasks: Task[] = []): Record<string, TaskDefintion> {\n\t\tconst taskDefinitions: Record<string, TaskDefintion> = {};\n\t\ttasks.forEach((task) => {\n\t\t\tconst key = task.SAP__Origin + task.TaskDefinitionID;\n\t\t\tif (!taskDefinitions[key]) {\n\t\t\t\ttaskDefinitions[key] = {\n\t\t\t\t\tSAP__Origin: task.SAP__Origin,\n\t\t\t\t\tInstanceID: task.InstanceID,\n\t\t\t\t\tTaskDefinitionID: task.TaskDefinitionID\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\treturn taskDefinitions;\n\t}\n\n\t/**\n\t * Extracts Custom Attribute Information to create an attribute map from raw attribute data\n\t * received from call, which is used while task processing\n\t *\n\t * @private\n\t * @param {TaskDefinitionCollection[]} taskDefinitions - array of raw tasks definitions\n\t */\n\tprivate _extractCustomAttributes(taskDefinitions: TaskDefinitionCollection[] = []): void {\n\t\ttaskDefinitions.forEach((taskDefinition: TaskDefinitionCollection) => {\n\t\t\tconst customAttributes = taskDefinition.CustomAttributeDefinitionData?.results || [];\n\t\t\tthis._customAttributeMap[taskDefinition.TaskDefinitionID] = customAttributes\n\t\t\t\t.filter((oAttribute) => oAttribute.Rank > 0)\n\t\t\t\t.sort((attr1, attr2) => attr2.Rank - attr1.Rank)\n\t\t\t\t.map((oAttribute) => ({\n\t\t\t\t\tname: oAttribute.Name,\n\t\t\t\t\tlabel: oAttribute.Label,\n\t\t\t\t\ttype: oAttribute.Type,\n\t\t\t\t\tformat: oAttribute.Format,\n\t\t\t\t\treference: oAttribute.Reference,\n\t\t\t\t\treferenced: oAttribute.Referenced,\n\t\t\t\t\ttextArrangement: oAttribute.TextArrangement\n\t\t\t\t}));\n\t\t});\n\t}\n\n\t/**\n\t * Get the text for the \"No Data\" message.\n\t *\n\t * @private\n\t * @returns {string} The text for the \"No Data\" message.\n\t */\n\tpublic getNoDataText(): string {\n\t\treturn this._i18nBundle.getText(\"noTaskTitle\") as string;\n\t}\n\n\t/**\n\t * Calculates the number of vertical cards that can fit within the available height of the given DOM element.\n\t *\n\t * @private\n\t * @override\n\t * @param {Element} domRef - The DOM element to calculate the vertical card count for.\n\t * @returns {number} - The number of vertical cards that can fit within the available height.\n\t */\n\tpublic getVerticalCardCount(domRef: Element, calculationProperties?: CalculationProperties): number {\n\t\tconst domProperties = fetchElementProperties(domRef, [\"height\", \"padding-top\"]);\n\t\tconst titleHeight = this.calculateTitleHeight();\n\t\tconst availableHeight = domProperties.height - domProperties[\"padding-top\"] * 2 - titleHeight;\n\t\tconst horizontalCardCount = this.getHorizontalCardCount(domRef);\n\t\tconst isPlaceholder = calculationProperties?.isPlaceholder;\n\t\tconst gap = 16;\n\t\tlet height = 0;\n\t\tlet verticalCardCount = 0;\n\n\t\tif (this._isLoaded()) {\n\t\t\tconst cardSet = splitCards(this._oData.tiles as Task[], horizontalCardCount);\n\t\t\tconst rowHeights = cardSet.map(\n\t\t\t\tfunction (cards: Task[]) {\n\t\t\t\t\tconst maxAttributes = cards.reduce(function (attributeCount: number, card: Task) {\n\t\t\t\t\t\tcard.attributes = card.attributes || [];\n\t\t\t\t\t\treturn card.attributes.length > attributeCount ? card.attributes.length : attributeCount;\n\t\t\t\t\t}, 1);\n\n\t\t\t\t\tconst count = Math.min(maxAttributes, 4) as keyof typeof Constants.CARD_HEIGHT;\n\t\t\t\t\treturn Constants.CARD_HEIGHT[count] + gap;\n\t\t\t\t}.bind(this)\n\t\t\t);\n\n\t\t\tfor (let rowHeight of rowHeights) {\n\t\t\t\tif (height + rowHeight < availableHeight) {\n\t\t\t\t\theight += rowHeight;\n\t\t\t\t\tverticalCardCount++;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tverticalCardCount = Math.floor(availableHeight / Constants.CARD_HEIGHT[isPlaceholder ? \"4\" : \"1\"]);\n\t\t}\n\n\t\treturn Math.max(verticalCardCount, 2);\n\t}\n}\n"],"mappings":"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","ignoreList":[]}