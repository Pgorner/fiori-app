{"version":3,"file":"SituationPanel.js","names":["sap","ui","define","Log","Formatting","NavigationHandler","SelectionVariant","GenericTile","Text","TileContent","sap_m_library","Component","DateFormat","NumberFormat","ODataModel","S4MyHome","__ToDoPanel","_interopRequireDefault","obj","__esModule","default","_catch","body","recover","result","e","then","LoadState","URLHelper","ValueColor","ToDoPanel","NavigationHelperError","SituationPanel","extend","constructor","_constructor","id","settings","ToDoPanel.prototype.constructor.call","this","init","_init","ToDoPanel.prototype.init.call","setProperty","_i18nBundle","getText","generateRequestUrls","_generateRequestUrls","cardCount","language","getLanguageTag","getCountUrl","getDataUrl","toUpperCase","generateCardTemplate","_generateCardTemplate","context","mode","frameType","pressEnabled","header","_getSituationMessage","getProperty","headerImage","valueColor","Critical","state","press","event","_onPressSituation","tileContent","content","text","footer","formatDate","rawText","params","arguments","length","undefined","split","composedText","replaceAll","forEach","param","SitnInstceAttribName","attributeSource","SitnInstceAttribSource","paramName","matchedAttributes","_InstanceAttributeValue","reduce","attribute","push","formattedValues","attributeMatched","rawVal","SitnInstceAttribValue","trim","formattedVal","SitnInstceAttribEntityType","_getDateFormatter","format","parse","endsWith","substring","_getNumberFormatter","Number","join","_dateFormatter","datePattern","getDatePattern","getDateInstance","pattern","_decimalFormatter","getFloatInstance","decimalSeparator","getNumberSymbol","groupingSeparator","groupingEnabled","_this","control","getSource","getBindingContext","status","SitnInstceKey","SitnEngineType","getObject","url","getTargetAppUrl","_temp3","Loading","_temp2","_temp","Promise","resolve","_fetchNavigationTargetData","_this$_fetchNavigatio","navigationTargetData","_executeNavigation","getOwnerComponentFor","getParent","error","_sErrorCode","redirect","reject","_getSituationsModel","_situationsModel","serviceUrl","instanceId","situationEngineType","_this2","oContextBindingNavigation","bindContext","$expand","_NavigationParam","$select","requestObject","_oContextBindingNavig","SitnInstanceID","SitnSemanticObject","SitnSemanticObjectAction","SituationNotifParamName","SituationNotifParameterVal","Error","message","oData","ownerComponent","navigationHandler","oSelectionVariant","map","addSelectOption","sNavigationParameters","toJSONString","navigate","getNoDataText","_getNoDataText"],"sources":["SituationPanel.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Log from \"sap/base/Log\";\nimport Formatting from \"sap/base/i18n/Formatting\";\nimport NavigationHandler from \"sap/fe/navigation/NavigationHandler\";\nimport SelectionVariant from \"sap/fe/navigation/SelectionVariant\";\nimport GenericTile from \"sap/m/GenericTile\";\nimport Text from \"sap/m/Text\";\nimport TileContent from \"sap/m/TileContent\";\nimport { LoadState, URLHelper, ValueColor } from \"sap/m/library\";\nimport Event from \"sap/ui/base/Event\";\nimport Component from \"sap/ui/core/Component\";\nimport Control from \"sap/ui/core/Control\";\nimport DateFormat from \"sap/ui/core/format/DateFormat\";\nimport NumberFormat from \"sap/ui/core/format/NumberFormat\";\nimport Context from \"sap/ui/model/Context\";\nimport ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport S4MyHome from \"sap/ushell/api/S4MyHome\";\nimport ToDoPanel, { $ToDoPanelSettings, IToDoPanel } from \"./ToDoPanel\";\nimport ToDosContainer from \"./ToDosContainer\";\n\ninterface Situation {\n\tSitnInstceKey: string;\n\tSitnInstceCreatedAtDateTime: string;\n\tSitnEngineType: string;\n\t_InstanceAttribute: InstanceAttribute[];\n\t_InstanceText: InstanceText;\n\tstatus?: LoadState;\n}\n\ninterface InstanceAttribute {\n\tSitnInstceKey: string;\n\tSitnInstceAttribName: string;\n\tSitnInstceAttribSource: string;\n\tSitnInstceAttribEntityType: string;\n\t_InstanceAttributeValue: InstanceAttributeValue[];\n}\n\ninterface InstanceAttributeValue {\n\tSitnInstceKey: string;\n\tSitnInstceAttribName: string;\n\tSitnInstceAttribSource: string;\n\tSitnInstceAttribValue: string;\n}\n\ninterface InstanceText {\n\tSituationTitle: string;\n\tSituationText: string;\n}\n\ninterface NavigationData {\n\tSitnInstanceID: string;\n\tSitnSemanticObject: string;\n\tSitnSemanticObjectAction: string;\n\t_NavigationParam: NavigationParam[];\n}\n\ninterface NavigationParam {\n\tSituationNotifParamName: string;\n\tSituationNotifParameterVal: string;\n}\n\nclass NavigationHelperError {\n\tpublic _sErrorCode!: string;\n}\n\n/**\n *\n * Panel class for managing and storing Situation cards.\n *\n * @extends ToDoPanel\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @internal\n * @experimental Since 1.121\n * @public\n *\n * @alias sap.cux.home.SituationPanel\n */\nexport default class SituationPanel extends ToDoPanel implements IToDoPanel {\n\tprivate _situationsModel!: ODataModel;\n\tprivate _dateFormatter!: DateFormat;\n\tprivate _decimalFormatter!: NumberFormat;\n\n\t/**\n\t * Constructor for a new Situation Panel.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $ToDoPanelSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tsuper.init();\n\n\t\t//Configure Header\n\t\tthis.setProperty(\"key\", \"situations\");\n\t\tthis.setProperty(\"title\", this._i18nBundle.getText(\"situationsTabTitle\"));\n\t}\n\n\t/**\n\t * Generates request URLs for fetching data based on the specified card count.\n\t * Overridden method to provide situation-specific URLs.\n\t *\n\t * @private\n\t * @override\n\t * @param {number} cardCount - The number of cards to retrieve.\n\t * @returns {string[]} An array of request URLs.\n\t */\n\tpublic generateRequestUrls(cardCount: number): string[] {\n\t\tconst language = Formatting.getLanguageTag().language || \"\";\n\t\treturn [\n\t\t\tthis.getCountUrl(),\n\t\t\t`${this.getDataUrl()}&$expand=_InstanceAttribute($expand=_InstanceAttributeValue($filter=(Language eq '${language.toUpperCase()}' or Language eq ''))),_InstanceText($filter=(Language eq '${language.toUpperCase()}' or Language eq ''))&$skip=0&$top=${cardCount}`\n\t\t];\n\t}\n\n\t/**\n\t * Generates a card template for situations.\n\t * Overridden method from To-Do panel to generate situation-specific card template.\n\t *\n\t * @private\n\t * @override\n\t * @param {string} id The ID for the template card.\n\t * @param {Context} context The context object.\n\t * @returns {Control} The generated card control template.\n\t */\n\tpublic generateCardTemplate(id: string, context: Context): Control {\n\t\treturn new GenericTile(`${id}-actionTile`, {\n\t\t\tmode: \"ActionMode\",\n\t\t\tframeType: \"TwoByOne\",\n\t\t\tpressEnabled: true,\n\t\t\theader: this._getSituationMessage(\n\t\t\t\tcontext.getProperty(\"_InstanceText/0/SituationTitle\") as string,\n\t\t\t\tcontext.getProperty(\"_InstanceAttribute\") as InstanceAttribute[]\n\t\t\t),\n\t\t\theaderImage: \"sap-icon://alert\",\n\t\t\tvalueColor: ValueColor.Critical,\n\t\t\tstate: context.getProperty(\"status\") as LoadState,\n\t\t\tpress: (event: Event) => {\n\t\t\t\tvoid this._onPressSituation(event);\n\t\t\t},\n\t\t\ttileContent: [\n\t\t\t\tnew TileContent(`${id}-actionTileContent`, {\n\t\t\t\t\tcontent: new Text(`${id}-text`, {\n\t\t\t\t\t\ttext: this._getSituationMessage(\n\t\t\t\t\t\t\tcontext.getProperty(\"_InstanceText/0/SituationText\") as string,\n\t\t\t\t\t\t\tcontext.getProperty(\"_InstanceAttribute\") as InstanceAttribute[]\n\t\t\t\t\t\t)\n\t\t\t\t\t}),\n\t\t\t\t\tfooter: S4MyHome.formatDate(context.getProperty(\"SitnInstceCreatedAtDateTime\") as string)\n\t\t\t\t})\n\t\t\t]\n\t\t});\n\t}\n\n\t/**\n\t * Compose the situation message by replacing placeholders with formatted parameter values.\n\t *\n\t * @private\n\t * @param {string} rawText - The raw text containing placeholders.\n\t * @param {InstanceAttribute[]} params - An array of parameters to replace in the text.\n\t * @returns {string} The composed text with replaced placeholders.\n\t */\n\tprivate _getSituationMessage(rawText: string, params: InstanceAttribute[] = []): string {\n\t\tif (!rawText?.split) {\n\t\t\treturn rawText;\n\t\t}\n\n\t\tlet composedText = rawText.replaceAll(\"\\n\", \" \");\n\n\t\tparams.forEach((param) => {\n\t\t\tif (param.SitnInstceAttribName?.length > 0) {\n\t\t\t\tconst attributeSource = `0${param.SitnInstceAttribSource}`;\n\t\t\t\tconst paramName = `${attributeSource}.${param.SitnInstceAttribName}`;\n\t\t\t\tconst matchedAttributes = param._InstanceAttributeValue.reduce(function (matchedAttributes, attribute) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tattribute.SitnInstceAttribSource === param.SitnInstceAttribSource &&\n\t\t\t\t\t\tattribute.SitnInstceAttribName === param.SitnInstceAttribName\n\t\t\t\t\t) {\n\t\t\t\t\t\tmatchedAttributes.push(attribute);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn matchedAttributes;\n\t\t\t\t}, [] as InstanceAttributeValue[]);\n\n\t\t\t\tconst formattedValues: string[] = [];\n\t\t\t\tmatchedAttributes.forEach((attributeMatched) => {\n\t\t\t\t\tlet rawVal = attributeMatched?.SitnInstceAttribValue?.trim() || \"\";\n\t\t\t\t\tlet formattedVal;\n\n\t\t\t\t\tswitch (param.SitnInstceAttribEntityType) {\n\t\t\t\t\t\tcase \"Edm.DateTime\":\n\t\t\t\t\t\t\tformattedVal = this._getDateFormatter().format(this._getDateFormatter().parse(rawVal));\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"Edm.Decimal\":\n\t\t\t\t\t\t\t// If the parameter string ends with a minus sign, move it to the first position\n\t\t\t\t\t\t\tif (rawVal.endsWith(\"-\")) {\n\t\t\t\t\t\t\t\trawVal = `-${rawVal.substring(0, rawVal.length - 1)}`;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tformattedVal = this._getNumberFormatter().format(Number(rawVal));\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tformattedVal = rawVal;\n\t\t\t\t\t}\n\n\t\t\t\t\tformattedValues.push(formattedVal);\n\t\t\t\t});\n\n\t\t\t\t// Replace placeholders with formatted values\n\t\t\t\tcomposedText = composedText.split(`{${paramName}}`).join(formattedValues.join(\", \"));\n\t\t\t}\n\t\t});\n\n\t\treturn composedText;\n\t}\n\n\t/**\n\t * Gets the date formatter instance using the medium date pattern.\n\t *\n\t * @returns {DateFormat} The date formatter instance.\n\t */\n\tprivate _getDateFormatter(): DateFormat {\n\t\tif (!this._dateFormatter) {\n\t\t\tconst datePattern = Formatting.getDatePattern(\"medium\") || \"dd/MM/yyyy\";\n\t\t\tthis._dateFormatter = DateFormat.getDateInstance({ pattern: datePattern });\n\t\t}\n\n\t\treturn this._dateFormatter;\n\t}\n\n\t/**\n\t * Gets the number formatter instance using the settings retrieved from Configuration.\n\t *\n\t * @returns {NumberFormat} The number formatter instance.\n\t */\n\tprivate _getNumberFormatter(): NumberFormat {\n\t\tif (!this._decimalFormatter) {\n\t\t\tthis._decimalFormatter = NumberFormat.getFloatInstance({\n\t\t\t\tdecimalSeparator: Formatting.getNumberSymbol(\"decimal\") || \".\",\n\t\t\t\tgroupingSeparator: Formatting.getNumberSymbol(\"group\") || \",\",\n\t\t\t\tgroupingEnabled: true\n\t\t\t});\n\t\t}\n\n\t\treturn this._decimalFormatter;\n\t}\n\n\t/**\n\t * Handle the press event for a situation.\n\t *\n\t * @private\n\t * @param {Event} event - The event object.\n\t */\n\tprivate async _onPressSituation(event: Event): Promise<void> {\n\t\tconst control = event.getSource<GenericTile>();\n\t\tconst context = control.getBindingContext();\n\t\tconst { status, SitnInstceKey: id, SitnEngineType } = context?.getObject() as Situation;\n\t\tconst url = this.getTargetAppUrl();\n\n\t\tif (status !== LoadState.Loading) {\n\t\t\tif (id) {\n\t\t\t\ttry {\n\t\t\t\t\tconst navigationTargetData = (await this._fetchNavigationTargetData(id, SitnEngineType)) as NavigationData;\n\t\t\t\t\tawait this._executeNavigation(\n\t\t\t\t\t\tnavigationTargetData,\n\t\t\t\t\t\tComponent.getOwnerComponentFor(this.getParent() as ToDosContainer) as Component\n\t\t\t\t\t);\n\t\t\t\t} catch (error: unknown) {\n\t\t\t\t\tif (\n\t\t\t\t\t\terror instanceof NavigationHelperError &&\n\t\t\t\t\t\tSitnEngineType === \"1\" &&\n\t\t\t\t\t\terror._sErrorCode === \"NavigationHandler.isIntentSupported.notSupported\"\n\t\t\t\t\t) {\n\t\t\t\t\t\t// Navigate to the situations app\n\t\t\t\t\t\tURLHelper.redirect(this.getTargetAppUrl(), false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tURLHelper.redirect(url, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the Situations model. If the model does not exist, it creates a new one.\n\t *\n\t * @private\n\t * @returns {ODataModel} The Situations model instance.\n\t */\n\tprivate _getSituationsModel(): ODataModel {\n\t\tif (!this._situationsModel) {\n\t\t\tthis._situationsModel = new ODataModel({\n\t\t\t\tserviceUrl: \"/sap/opu/odata4/sap/a_sitn2mblinstce_v4/srvd/sap/a_sitn2mblinstce_srv/0002/\"\n\t\t\t});\n\t\t}\n\n\t\treturn this._situationsModel;\n\t}\n\n\t/**\n\t * Fetches navigation target data based on the provided instance ID.\n\t *\n\t * @private\n\t * @async\n\t * @param {string} instanceId - The instance ID for which to fetch navigation data.\n\t * @param {string} situationEngineType - Situation Engine Type\n\t * @returns {Promise<NavigationTargetData>} A promise that resolves with an object containing navigation data.\n\t */\n\tprivate async _fetchNavigationTargetData(instanceId: string, situationEngineType: string): Promise<NavigationData | undefined> {\n\t\ttry {\n\t\t\tif (situationEngineType === \"1\") {\n\t\t\t\tconst oContextBindingNavigation = this._getSituationsModel().bindContext(`/Navigation/${instanceId}`, undefined, {\n\t\t\t\t\t$expand: { _NavigationParam: { $select: [\"SituationNotifParamName\", \"SituationNotifParameterVal\"] } },\n\t\t\t\t\t$select: [\"SitnInstanceID\", \"SitnSemanticObject\", \"SitnSemanticObjectAction\"]\n\t\t\t\t});\n\t\t\t\treturn (await oContextBindingNavigation.requestObject()) as NavigationData;\n\t\t\t} else {\n\t\t\t\treturn Promise.resolve({\n\t\t\t\t\tSitnInstanceID: instanceId,\n\t\t\t\t\tSitnSemanticObject: \"SituationInstance\",\n\t\t\t\t\tSitnSemanticObjectAction: \"display\",\n\t\t\t\t\t_NavigationParam: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSituationNotifParamName: \"ui-type\",\n\t\t\t\t\t\t\tSituationNotifParameterVal: \"extended\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSituationNotifParamName: \"SitnInstceKey\",\n\t\t\t\t\t\t\tSituationNotifParameterVal: instanceId\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (error: unknown) {\n\t\t\tLog.error(error instanceof Error ? error.message : \"\");\n\t\t}\n\t}\n\n\t/**\n\t * Executes navigation based on provided data.\n\t *\n\t * @private\n\t * @param {NavigationData} oData - Data object containing navigation parameters.\n\t * @param {Component} ownerComponent - The owner component initiating the navigation.\n\t * @returns {Promise<void>} A promise that resolves or rejects based on the navigation result.\n\t */\n\tprivate _executeNavigation(oData: NavigationData, ownerComponent: Component): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t//@ts-expect-error: params\n\t\t\tconst navigationHandler = new NavigationHandler(ownerComponent);\n\t\t\tconst oSelectionVariant = new SelectionVariant();\n\t\t\toData._NavigationParam?.map(function (param) {\n\t\t\t\tif (param.SituationNotifParamName) {\n\t\t\t\t\toSelectionVariant.addSelectOption(param.SituationNotifParamName, \"I\", \"EQ\", param.SituationNotifParameterVal);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst sNavigationParameters = oSelectionVariant.toJSONString();\n\t\t\tnavigationHandler.navigate(\n\t\t\t\toData.SitnSemanticObject,\n\t\t\t\toData.SitnSemanticObjectAction,\n\t\t\t\tsNavigationParameters,\n\t\t\t\tresolve,\n\t\t\t\t(error: unknown) => reject(error as Error)\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Get the text for the \"No Data\" message.\n\t *\n\t * @private\n\t * @returns {string} The text for the \"No Data\" message.\n\t */\n\tpublic getNoDataText(): string {\n\t\treturn this._i18nBundle.getText(\"noSituationTitle\") as string;\n\t}\n}\n"],"mappings":"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","ignoreList":[]}