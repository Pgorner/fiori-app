{"version":3,"file":"SettingsDialog-dbg.js","names":["sap","ui","define","Bar","Button","List","Page","SplitApp","StandardListItem","Title","Element","Device","__BaseSettingsDialog","___utils_Device","_interopRequireDefault","obj","__esModule","default","BaseSettingsDialog","calculateDeviceType","DeviceType","SettingsDialog","extend","renderer","apiVersion","init","_init","BaseSettingsDialog.prototype.init.call","this","_controlMap","Map","setContentWidth","setStretch","setCustomHeader","_setCustomHeader","addButton","getId","text","_i18nBundle","getText","type","press","close","addContent","title","showHeader","content","_getPageContent","_menuBtn","icon","tooltip","_toggleMasterPage","contentLeft","contentMiddle","isMasterShown","_splitApp","deviceType","_deviceType","Tablet","toMaster","_masterPage","hideMaster","showMaster","_updateHeaderButtonVisibility","Mobile","setVisible","orientation","portrait","tooltipText","setTooltip","_menuList","mode","itemPress","event","_navigateToDetailPage","addStyleClass","masterPages","masterButton","_hideNavigationButton","context","listItem","getParameter","firstPanel","getPanels","selectedKey","data","getProperty","setProperty","detailPage","getElementById","toDetail","getMode","selectedPanel","find","panel","firePanelNavigated","removeSelections","pageItem","setTimeout","setSelectedItem","focus","navigationButton","getSource","destroy","onBeforeRendering","_onBeforeRendering","BaseSettingsDialog.prototype.onBeforeRendering.call","forEach","addItem","_getPageListItem","addDetailPage","_getDetailPage","settingsPanel","id","get","iconDensityAware","set","page","backgroundDesign","getAggregation","actionButton","addHeaderContent"],"sources":["SettingsDialog.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport { Event as JQueryEvent } from \"jquery\";\nimport Bar from \"sap/m/Bar\";\nimport Button from \"sap/m/Button\";\nimport List from \"sap/m/List\";\nimport Page from \"sap/m/Page\";\nimport SplitApp from \"sap/m/SplitApp\";\nimport StandardListItem from \"sap/m/StandardListItem\";\nimport Title from \"sap/m/Title\";\nimport Event from \"sap/ui/base/Event\";\nimport Control from \"sap/ui/core/Control\";\nimport Element from \"sap/ui/core/Element\";\nimport Device from \"sap/ui/Device\";\nimport BaseSettingsDialog from \"./BaseSettingsDialog\";\nimport BaseSettingsPanel from \"./BaseSettingsPanel\";\nimport { calculateDeviceType, DeviceType } from \"./utils/Device\";\n\n/**\n *\n * Dialog class for My Home Settings.\n *\n * @extends BaseSettingsDialog\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @internal\n * @experimental Since 1.121\n * @private\n *\n * @alias sap.cux.home.SettingsDialog\n */\nexport default class SettingsDialog extends BaseSettingsDialog {\n\tprivate _controlMap!: Map<string, Control | Element>;\n\tprivate _menuBtn!: Button;\n\tprivate _menuList!: List;\n\tprivate _masterPage!: Page;\n\tprivate _splitApp!: SplitApp;\n\tprivate _deviceType!: DeviceType;\n\n\tstatic renderer = {\n\t\tapiVersion: 2\n\t};\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @public\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tsuper.init();\n\t\tthis._controlMap = new Map();\n\n\t\t//setup dialog\n\t\tthis.setContentWidth(\"72rem\");\n\t\tthis.setStretch(false);\n\t\tthis.setCustomHeader(this._setCustomHeader());\n\n\t\t//setup dialog buttons\n\t\tthis.addButton(\n\t\t\tnew Button(`${this.getId()}-close-btn`, {\n\t\t\t\ttext: this._i18nBundle.getText(\"closeSettings\"),\n\t\t\t\ttype: \"Transparent\",\n\t\t\t\tpress: () => this.close()\n\t\t\t})\n\t\t);\n\n\t\t//setup dialog content\n\t\tthis.addContent(\n\t\t\tnew Page(`${this.getId()}-settingsPage`, {\n\t\t\t\ttitle: this._i18nBundle.getText(\"myHomeSettings\"),\n\t\t\t\tshowHeader: false,\n\t\t\t\tcontent: this._getPageContent()\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Creates and sets a custom header for the SettingsDialog.\n\t *\n\t * @private\n\t * @returns {Bar} The custom header bar for the SettingsDialog.\n\t */\n\tprivate _setCustomHeader(): Bar {\n\t\tthis._menuBtn = new Button(`${this.getId()}-menu-btn`, {\n\t\t\ticon: \"sap-icon://menu2\",\n\t\t\ttooltip: this._i18nBundle.getText(\"showMenu\"),\n\t\t\tpress: () => this._toggleMasterPage()\n\t\t});\n\t\treturn new Bar(`${this.getId()}-header`, {\n\t\t\tcontentLeft: [this._menuBtn],\n\t\t\tcontentMiddle: [\n\t\t\t\tnew Title(`${this.getId()}-dialog-title`, {\n\t\t\t\t\ttext: this._i18nBundle.getText(\"myHomeSettings\")\n\t\t\t\t})\n\t\t\t]\n\t\t});\n\t}\n\n\t/**\n\t * Toggles the visibility of the master page in the SettingsDialog based on the current device width.\n\t * If the device width is less than 600 pixels or equal to or greater than 1024 pixels, the master\n\t * page is always shown. Otherwise, it toggles the visibility of the master page.\n\t *\n\t * @private\n\t */\n\tprivate _toggleMasterPage(): void {\n\t\tconst isMasterShown = this._splitApp.isMasterShown();\n\t\tconst deviceType = this._deviceType || calculateDeviceType();\n\t\tif (deviceType !== DeviceType.Tablet) {\n\t\t\tthis._splitApp.toMaster(this._masterPage.getId(), \"slide\");\n\t\t} else {\n\t\t\tif (isMasterShown) {\n\t\t\t\tthis._splitApp.hideMaster();\n\t\t\t} else {\n\t\t\t\tthis._splitApp.showMaster();\n\t\t\t}\n\t\t}\n\t\tthis._updateHeaderButtonVisibility(!isMasterShown);\n\t}\n\n\t/**\n\t * Update header button\n\t *\n\t * @param {boolean} isMasterShown If master page is shown\n\t * @private\n\t */\n\tprivate _updateHeaderButtonVisibility(isMasterShown: boolean): void {\n\t\tconst deviceType = this._deviceType || calculateDeviceType();\n\t\tif (deviceType === DeviceType.Mobile) {\n\t\t\t// Hide or show the menu button on mobile\n\t\t\tthis._menuBtn.setVisible(!isMasterShown);\n\t\t} else if (deviceType === DeviceType.Tablet) {\n\t\t\tif (Device.orientation?.portrait) {\n\t\t\t\t// Show menu button in portrait mode with a tooltip\n\t\t\t\tconst tooltipText = this._i18nBundle.getText(isMasterShown ? \"ToggleButtonHide\" : \"ToggleButtonShow\");\n\t\t\t\tthis._menuBtn.setVisible(true);\n\t\t\t\tif (tooltipText) {\n\t\t\t\t\t// Only set the tooltip if a valid string is available\n\t\t\t\t\tthis._menuBtn.setTooltip(tooltipText);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Hide or show the menu button in other orientations\n\t\t\t\tthis._menuBtn.setVisible(!isMasterShown);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Generates the content for the SettingsDialog, including the master page and split app.\n\t *\n\t * @private\n\t * @returns {SplitApp} The split app containing the master page and detail pages for the SettingsDialog.\n\t */\n\tprivate _getPageContent(): SplitApp {\n\t\tthis._menuList = new List(`${this.getId()}-master-pages-list`, {\n\t\t\tmode: \"SingleSelectMaster\",\n\t\t\titemPress: (event: Event) => this._navigateToDetailPage(event)\n\t\t}).addStyleClass(\"sapCuxMasterPageList\");\n\t\tthis._masterPage = new Page(`${this.getId()}-master-page`, {\n\t\t\ttitle: this._i18nBundle.getText(\"myHomeSettings\"),\n\t\t\tshowHeader: false,\n\t\t\tcontent: [this._menuList]\n\t\t});\n\t\tthis._splitApp = new SplitApp(`${this.getId()}-settingsApp`, {\n\t\t\tmode: \"ShowHideMode\",\n\t\t\tmasterPages: [this._masterPage],\n\t\t\tmasterButton: (event: Event) => this._hideNavigationButton(event)\n\t\t});\n\n\t\treturn this._splitApp;\n\t}\n\n\t/**\n\t * Navigates to the detail page associated with the selected item in the master page list.\n\t *\n\t * @private\n\t * @param {Event} event The item press event from the master page list.\n\t */\n\tprivate _navigateToDetailPage(event: Event<{ listItem?: StandardListItem }> | string, context?: object): void {\n\t\t//update selected key\n\t\tconst listItem = typeof event === \"string\" ? event : event.getParameter?.(\"listItem\");\n\t\tconst firstPanel = this.getPanels()[0];\n\t\tconst selectedKey = ((listItem as StandardListItem)?.data?.(\"key\") || event || firstPanel?.getProperty(\"key\")) as string;\n\t\tthis.setProperty(\"selectedKey\", selectedKey, true);\n\n\t\t//navigate to detail page\n\t\tconst detailPage = Element.getElementById(`${selectedKey}-detail-page`) as Page;\n\t\tthis._splitApp.toDetail(detailPage.getId(), \"slide\");\n\t\tthis._splitApp.hideMaster();\n\t\tif (this._splitApp.getMode() === \"ShowHideMode\") {\n\t\t\tthis._updateHeaderButtonVisibility(false);\n\t\t}\n\n\t\t//fire panel navigated event\n\t\tconst selectedPanel = this.getPanels().find(\n\t\t\t(panel: BaseSettingsPanel) => panel.getProperty(\"key\") === selectedKey\n\t\t) as BaseSettingsPanel;\n\t\tselectedPanel?.firePanelNavigated({ context });\n\n\t\t//select list item\n\t\tthis._menuList.removeSelections(true);\n\t\tconst pageItem = Element.getElementById(`${selectedKey}-page-item`) as StandardListItem;\n\t\tsetTimeout(() => {\n\t\t\tthis._menuList.setSelectedItem(pageItem);\n\t\t\tpageItem.focus();\n\t\t}, 0);\n\t}\n\n\t/**\n\t * Hides the navigation button associated with the provided event.\n\t *\n\t * @private\n\t * @param {Event} event The event triggering the hide action.\n\t */\n\tprivate _hideNavigationButton(event: Event): void {\n\t\tconst navigationButton = Element.getElementById(`${event.getSource<SplitApp>().getId()}-MasterBtn`) as Button;\n\t\tnavigationButton?.destroy();\n\t}\n\n\t/**\n\t * onBeforeRendering lifecycle method.\n\t * Prepares the SettingsDialog content and navigate to the selected detail page.\n\t *\n\t * @public\n\t * @override\n\t */\n\tpublic onBeforeRendering(event: JQueryEvent): void {\n\t\tsuper.onBeforeRendering(event);\n\n\t\t//setup master and detail page content\n\t\tthis.getPanels().forEach((panel: BaseSettingsPanel) => {\n\t\t\tthis._menuList.addItem(this._getPageListItem(panel));\n\t\t\tthis._splitApp.addDetailPage(this._getDetailPage(panel));\n\t\t});\n\n\t\t//navigate to detail page\n\t\tconst selectedKey = this.getProperty(\"selectedKey\") as string;\n\t\tconst context = this.getProperty(\"context\") as object;\n\t\tthis._navigateToDetailPage(selectedKey, context);\n\t}\n\n\t/**\n\t * Generates a list item for the master page list based on the settings panel.\n\t * The list item displays the title and icon of the settings panel.\n\t *\n\t * @private\n\t * @param {BaseSettingsPanel} settingsPanel The settings panel for which to generate the list item.\n\t * @returns {StandardListItem} The list item control representing the settings panel in the master page list.\n\t */\n\tprivate _getPageListItem(settingsPanel: BaseSettingsPanel): StandardListItem {\n\t\tconst id = `${settingsPanel.getProperty(\"key\")}-page-item`;\n\t\tif (!this._controlMap.get(id)) {\n\t\t\tconst listItem = new StandardListItem(id, {\n\t\t\t\ttitle: settingsPanel.getProperty(\"title\") as string,\n\t\t\t\ticon: settingsPanel.getProperty(\"icon\") as string,\n\t\t\t\ttype: \"Navigation\",\n\t\t\t\ticonDensityAware: false\n\t\t\t});\n\t\t\tlistItem.data(\"key\", settingsPanel.getProperty(\"key\"));\n\t\t\tthis._controlMap.set(id, listItem);\n\t\t}\n\n\t\treturn this._controlMap.get(id) as StandardListItem;\n\t}\n\n\t/**\n\t * Generates a detail page for the SettingsDialog based on the provided settings panel.\n\t *\n\t * @private\n\t * @param {BaseSettingsPanel} settingsPanel The settings panel for which to generate the detail page.\n\t * @returns {Page} The detail page control representing the settings panel.\n\t */\n\tprivate _getDetailPage(settingsPanel: BaseSettingsPanel): Page {\n\t\tconst id = `${settingsPanel.getProperty(\"key\")}-detail-page`;\n\t\tif (!this._controlMap.get(id)) {\n\t\t\tconst page = new Page(id, {\n\t\t\t\ttitle: settingsPanel.getProperty(\"title\") as string,\n\t\t\t\tbackgroundDesign: \"List\",\n\t\t\t\tshowHeader: settingsPanel.getProperty(\"showHeader\") as boolean\n\t\t\t});\n\n\t\t\t//add settings panel action buttons\n\t\t\t((settingsPanel.getAggregation(\"actionButtons\") || []) as Button[]).forEach((actionButton) => {\n\t\t\t\tpage.addHeaderContent(actionButton);\n\t\t\t});\n\n\t\t\tthis._controlMap.set(id, page);\n\t\t}\n\n\t\t//add settings panel content\n\t\t(settingsPanel.getAggregation(\"content\") as Control[]).forEach((content) => (this._controlMap.get(id) as Page).addContent(content));\n\n\t\treturn this._controlMap.get(id) as Page;\n\t}\n}\n"],"mappings":"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","ignoreList":[]}