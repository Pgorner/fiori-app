{"version":3,"file":"BaseSettingsDialog.js","names":["sap","ui","define","Dialog","Lib","BaseSettingsDialog","extend","renderer","apiVersion","metadata","library","properties","selectedKey","type","group","defaultValue","visibility","context","defaultAggregation","aggregations","panels","singularName","multiple","constructor","_constructor","id","settings","Dialog.prototype.constructor.call","this","init","_init","Dialog.prototype.init.call","_i18nBundle","getResourceBundleFor","_panelCache","addStyleClass","getPanels","_getPanels","slice","addPanel","_addPanel","panel","push","addAggregation","insertPanel","_insertPanel","index","splice","insertAggregation","removeAllPanels","_removeAllPanels","removeAllAggregation"],"sources":["BaseSettingsDialog.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport Dialog from \"sap/m/Dialog\";\nimport type { MetadataOptions } from \"sap/ui/core/Element\";\nimport Lib from \"sap/ui/core/Lib\";\nimport { $BaseSettingsDialogSettings } from \"./BaseSettingsDialog\";\nimport BaseSettingsPanel from \"./BaseSettingsPanel\";\n\n/**\n *\n * Abstract base class for My Home Settings Dialog.\n *\n * @extends Dialog\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @internal\n * @experimental Since 1.121\n * @abstract\n * @private\n *\n * @alias sap.cux.home.BaseSettingsDialog\n */\nexport default abstract class BaseSettingsDialog extends Dialog {\n\tprotected _i18nBundle!: ResourceBundle;\n\tprivate _panelCache!: BaseSettingsPanel[];\n\n\tconstructor(id?: string | $BaseSettingsDialogSettings);\n\tconstructor(id?: string, settings?: $BaseSettingsDialogSettings);\n\tconstructor(id?: string, settings?: $BaseSettingsDialogSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tproperties: {\n\t\t\t/**\n\t\t\t * The selectedkey of the settings dialog\n\t\t\t */\n\t\t\tselectedKey: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Additional context of the settings dialog\n\t\t\t */\n\t\t\tcontext: { type: \"object\", group: \"Misc\", defaultValue: {}, visibility: \"hidden\" }\n\t\t},\n\t\tdefaultAggregation: \"panels\",\n\t\taggregations: {\n\t\t\t/**\n\t\t\t * Contains the panels aggregation and should be of type BaseSettingsPanel.\n\t\t\t */\n\t\t\tpanels: { type: \"sap.cux.home.BaseSettingsPanel\", singularName: \"panel\", multiple: true }\n\t\t}\n\t};\n\n\tstatic renderer = {\n\t\tapiVersion: 2\n\t};\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @public\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tsuper.init();\n\t\tthis._i18nBundle = Lib.getResourceBundleFor(\"sap.cux.home.i18n\") as ResourceBundle;\n\n\t\t//setup page\n\t\tthis._panelCache = [];\n\t\tthis.addStyleClass(\"sapContrastPlus\");\n\t}\n\n\t/**\n\t * Returns all the panels in the dialog.\n\t * Overridden to return cached panels.\n\t *\n\t * @public\n\t * @override\n\t * @returns {BaseSettingsPanel[]} panel array\n\t */\n\tpublic getPanels(): BaseSettingsPanel[] {\n\t\treturn this._panelCache.slice();\n\t}\n\n\t/**\n\t * Adds a new panel at the end of the available panels.\n\t * Overridden to update cached panels.\n\t *\n\t * @public\n\t * @override\n\t * @returns {BaseSettingsDialog} the dialog for chaining\n\t */\n\taddPanel(panel: BaseSettingsPanel): BaseSettingsDialog {\n\t\tthis._panelCache.push(panel);\n\t\tthis.addAggregation(\"panels\", panel);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a new panel to the 'panels' aggregation at the index.\n\t * Overridden to update cached panels.\n\t *\n\t * @public\n\t * @override\n\t * @param {BaseSettingsPanel} panel The panel to insert.\n\t * @param {number} index The index at which to insert the panel.\n\t * @returns {BaseSettingsDialog} Returns 'this' to allow method chaining.\n\t */\n\tinsertPanel(panel: BaseSettingsPanel, index: number): BaseSettingsDialog {\n\t\tthis._panelCache.splice(index, 0, panel);\n\t\tthis.insertAggregation(\"panels\", panel, index);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes all panels from the dialog, clears the internal panel cache.\n\t * Overridden to update cached panels.\n\t *\n\t * @public\n\t * @override\n\t * @returns {BaseSettingsPanel[]} An empty array representing the removed panels.\n\t */\n\tremoveAllPanels(): BaseSettingsPanel[] {\n\t\tthis._panelCache = [];\n\t\tthis.removeAllAggregation(\"panels\");\n\t\treturn this.getPanels();\n\t}\n}\n"],"mappings":";;;;AAAA,aAAAA,IAAAC,GAAAC,OAAA,4CAAAC,EAAAC,GAAA,aAYA,MAiB8BC,EAA2BF,EAAMG,OAAA,mCA+BvDC,SAAW,CACjBC,WAAY,GAtBGC,SAA4B,CAC3CC,QAAS,eACTC,WAAY,CAIXC,YAAa,CAAEC,KAAM,SAAUC,MAAO,OAAQC,aAAc,GAAIC,WAAY,UAI5EC,QAAS,CAAEJ,KAAM,SAAUC,MAAO,OAAQC,aAAc,CAAC,EAAGC,WAAY,WAEzEE,mBAAoB,SACpBC,aAAc,CAIbC,OAAQ,CAAEP,KAAM,iCAAkCQ,aAAc,QAASC,SAAU,QArBrFC,YAAW,SAAAC,EAACC,EAAaC,GACxBC,6BAAAC,KAAMH,EAAIC,EACX,EAiCOG,KAAI,SAAAC,IACVC,sBAAAH,MACAA,KAAKI,YAAc5B,EAAI6B,qBAAqB,qBAG5CL,KAAKM,YAAc,GACnBN,KAAKO,cAAc,kBACpB,EAUOC,UAAS,SAAAC,IACf,OAAOT,KAAKM,YAAYI,OACzB,EAUAC,SAAQ,SAAAC,EAACC,GACRb,KAAKM,YAAYQ,KAAKD,GACtBb,KAAKe,eAAe,SAAUF,GAC9B,OAAOb,IACR,EAYAgB,YAAW,SAAAC,EAACJ,EAA0BK,GACrClB,KAAKM,YAAYa,OAAOD,EAAO,EAAGL,GAClCb,KAAKoB,kBAAkB,SAAUP,EAAOK,GACxC,OAAOlB,IACR,EAUAqB,gBAAe,SAAAC,IACdtB,KAAKM,YAAc,GACnBN,KAAKuB,qBAAqB,UAC1B,OAAOvB,KAAKQ,WACb,IAAC,OAxG4B/B,CAAkB","ignoreList":[]}