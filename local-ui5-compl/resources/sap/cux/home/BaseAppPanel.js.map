{"version":3,"file":"BaseAppPanel.js","names":["sap","ui","define","Log","GridContainer","GridContainerSettings","HeaderContainer","IllustratedMessage","IllustratedMessageSize","IllustratedMessageType","MessageToast","VBox","sap_m_library","Config","Container","__App","__BasePanel","__AppManager","___utils_Device","_interopRequireDefault","obj","__esModule","default","_catch","body","recover","result","e","then","BackgroundDesign","_finallyRethrows","finalizer","bind","App","BasePanel","AppManager","DeviceType","BaseAppPanel","extend","metadata","library","defaultAggregation","aggregations","apps","type","singularName","multiple","events","navigated","supported","parameters","isSupported","constructor","_constructor","id","settings","BasePanel.prototype.constructor.call","this","_isDirty","_isMobileDirty","_isLoaded","_isSupported","_setAggregation","control","items","arguments","length","undefined","aggregationName","forEach","oItem","addAggregation","init","_init","BasePanel.prototype.init.call","appManagerInstance","getInstance","_controlMap","Map","_appsPanelWrapper","_generateWrapper","_addContent","getId","_generateDesktopAppsWrapper","_generateMobileAppsWrapper","_generateErrorMessage","width","addStyleClass","controlId","get","set","_generateAppsWrapper","visible","getDeviceType","Mobile","backgroundDesign","Solid","_appsWrapper","layout","columnSize","gap","_mobileAppsWrapper","gridLayout","showDividers","height","content","_errorCard","wrap","generateIllustratedMessage","getApps","justifyContent","setHeight","generateApps","_generateApps","visualizationsData","map","visualizationData","app","title","subTitle","subtitle","bgColor","BGColor","icon","url","vizId","visualization","status","oldAppId","data","menuItems","menuItem","setApps","_setApps","fetchTileVisualization","_fetchTileVisualization","tiles","cards","getContent","card","concat","getItems","convertActivitiesToVisualizations","_convertActivitiesToVisualizations","activities","_this","Promise","resolve","all","_getAllAvailableVisualizations","getServiceAsync","_ref","availableVisualizations","URLParsingService","appActivities","filter","activity","appType","orgAppId","appId","visualizations","_convertToVisualization","_updateVisualizationAvailability","reject","_this2","_temp2","_allAvailableVisualizations","_temp","_getCatalogApps","catalogApps","reduce","catalogApp","_this3","fetchFavVizs","favoriteVisualizations","addedInFavorites","some","favoriteVisualization","_updateActivityInfo","updatedVizConfig","_catalogVisualizationCache","targetURL","_findBestMatchingVisualization","matchingVisualizations","matchedVisualization","find","matchingViz","matchedVisualizationCache","matchedVisualizations","viz","params","parseShellHash","prio","push","filteredVisualizations","_filterMatchingVisualization","sort","val1","val2","parshedShellHash","activityParameters","activityParameterKeys","Object","keys","visualizationParams","visualizationParamKeys","key","bMatch","every","includes","catalogVisualizations","catalogVisualization","target","semanticObject","action","_addAppToFavorites","event","_this4","setBusy","source","getSource","getParent","getVizId","_temp3","addVisualization","_refreshAllPanels","message","_i18nBundle","getText","getTitle","show","error","_wasThrown","_result","isLoaded","setLoaded","_setLoaded","val","isDirty","setDesktopViewDirty","_setDesktopViewDirty","isMobileDirty","setMobileViewDirty","_setMobileViewDirty","_setBusy","isBusy","oAppsWrapper","_getGroup","groupId","groups","getAggregation","group","getGroupId","setSupported","_setSupported","_attachUserActivityTracking","last","on","do","isTrackingActivityEnabled","fireSupported","refresh","_refresh","_this5","refreshPanel","_generateIllustratedMessage","_errorMessage","illustrationSize","Spot","illustrationType","AddColumn","description"],"sources":["BaseAppPanel.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Log from \"sap/base/Log\";\nimport GridContainer from \"sap/f/GridContainer\";\nimport GridContainerSettings from \"sap/f/GridContainerSettings\";\nimport Button from \"sap/m/Button\";\nimport GenericTile from \"sap/m/GenericTile\";\nimport HeaderContainer from \"sap/m/HeaderContainer\";\nimport IllustratedMessage from \"sap/m/IllustratedMessage\";\nimport IllustratedMessageSize from \"sap/m/IllustratedMessageSize\";\nimport IllustratedMessageType from \"sap/m/IllustratedMessageType\";\nimport MessageToast from \"sap/m/MessageToast\";\nimport Panel from \"sap/m/Panel\";\nimport VBox from \"sap/m/VBox\";\nimport { BackgroundDesign } from \"sap/m/library\";\nimport Event from \"sap/ui/base/Event\";\nimport Control from \"sap/ui/core/Control\";\nimport type { MetadataOptions } from \"sap/ui/core/Element\";\nimport Config from \"sap/ushell/Config\";\nimport Container from \"sap/ushell/Container\";\nimport URLParsing from \"sap/ushell/services/URLParsing\";\nimport App from \"./App\";\nimport AppsContainer from \"./AppsContainer\";\nimport { $BaseAppPanelSettings } from \"./BaseAppPanel\";\nimport BasePanel from \"./BasePanel\";\nimport Group from \"./Group\";\nimport MenuItem from \"./MenuItem\";\nimport { IActivity, ICustomVisualization, IVisualization } from \"./interface/AppsInterface\";\nimport AppManager from \"./utils/AppManager\";\nimport { DeviceType } from \"./utils/Device\";\n\n/**\n *\n * Base App Panel class for managing and storing Apps.\n *\n * @extends sap.cux.home.BasePanel\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121.0\n *\n * @abstract\n * @internal\n * @experimental Since 1.121\n * @private\n *\n * @alias sap.cux.home.BaseAppPanel\n */\n\nexport default abstract class BaseAppPanel extends BasePanel {\n\tprivate _isDirty: boolean = true;\n\tprivate _isMobileDirty: boolean = true;\n\tprivate _isLoaded: boolean = false;\n\tprivate _appsWrapper!: GridContainer;\n\tprivate _errorCard!: VBox;\n\tprivate _errorMessage!: IllustratedMessage;\n\tprivate _appsPanelWrapper!: VBox;\n\tprivate _allAvailableVisualizations!: IVisualization[];\n\tprivate _catalogVisualizationCache!: Map<string, IVisualization>;\n\tprotected appManagerInstance!: AppManager;\n\tprivate _isSupported: boolean = true;\n\tprivate _mobileAppsWrapper!: HeaderContainer;\n\tprotected _menuItems!: MenuItem[];\n\tprotected _actionButtons!: Button[];\n\tprotected _controlMap!: Map<string, Control | Element>;\n\n\tconstructor(idOrSettings?: string | $BaseAppPanelSettings);\n\tconstructor(id?: string, settings?: $BaseAppPanelSettings);\n\tconstructor(id?: string, settings?: $BaseAppPanelSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tdefaultAggregation: \"apps\",\n\t\taggregations: {\n\t\t\t/**\n\t\t\t * Holds the apps aggregation\n\t\t\t */\n\t\t\tapps: { type: \"sap.cux.home.App\", singularName: \"app\", multiple: true }\n\t\t},\n\t\tevents: {\n\t\t\t/**\n\t\t\t * Fired when OnBeforeRendering of container is triggered.\n\t\t\t */\n\t\t\tnavigated: {},\n\t\t\t/**\n\t\t\t * Fired when the panel supported property is changed.\n\t\t\t */\n\t\t\tsupported: {\n\t\t\t\tparameters: {\n\t\t\t\t\tisSupported: { type: \"boolean\" }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * This method must be implemented by panel, to set the apps that needs to be shown in the panel.\n\t * @abstract\n\t */\n\tabstract loadApps(): Promise<void>;\n\n\tpublic init() {\n\t\tsuper.init();\n\t\tthis.appManagerInstance = AppManager.getInstance();\n\t\tthis._controlMap = new Map();\n\t\t//Add Wrapper to Panel\n\t\tthis._appsPanelWrapper = this._generateWrapper();\n\t\tthis._addContent(this._appsPanelWrapper);\n\t}\n\n\t/**\n\t * Generates the wrapper for the apps panel, if it doesn't already exist\n\t *\n\t * @private\n\t * @override\n\t * @returns {sap.m.VBox} The apps panel wrapper.\n\t */\n\tprotected _generateWrapper() {\n\t\tif (!this._appsPanelWrapper) {\n\t\t\tthis._appsPanelWrapper = new VBox(`${this.getId()}-appsPanelWrapper`, {\n\t\t\t\titems: [this._generateDesktopAppsWrapper(), this._generateMobileAppsWrapper(), this._generateErrorMessage()],\n\t\t\t\twidth: \"100%\"\n\t\t\t}).addStyleClass(\"sapCuxAppsPanel sapCuxAppsContainerBorder\");\n\t\t}\n\t\treturn this._appsPanelWrapper;\n\t}\n\n\t/**\n\t * Generates desktop apps wrapper for displaying apps.\n\t * @private\n\t * @returns {sap.m.VBox} The generated apps wrapper.\n\t */\n\tpublic _generateDesktopAppsWrapper() {\n\t\tconst controlId = `${this.getId()}-desktopAppsWrapper`;\n\t\tif (!this._controlMap.get(controlId)) {\n\t\t\tthis._controlMap.set(\n\t\t\t\tcontrolId,\n\t\t\t\tnew VBox({\n\t\t\t\t\tid: `${this.getId()}-desktopAppsWrapper`,\n\t\t\t\t\titems: [this._generateAppsWrapper()],\n\t\t\t\t\tvisible: this.getDeviceType() !== DeviceType.Mobile,\n\t\t\t\t\tbackgroundDesign: BackgroundDesign.Solid\n\t\t\t\t}).addStyleClass(\"sapCuxAppsPanel sapCuxAppsContainerBorder\")\n\t\t\t);\n\t\t}\n\t\treturn this._controlMap.get(controlId) as VBox;\n\t}\n\n\t/**\n\t * Generates app wrapper (GridContainer) for displaying apps.\n\t * @private\n\t * @returns {sap.m.GridContainer} The generated apps wrapper.\n\t */\n\tpublic _generateAppsWrapper(): GridContainer {\n\t\t//create container\n\t\tif (!this._appsWrapper) {\n\t\t\tthis._appsWrapper = new GridContainer({\n\t\t\t\tid: `${this.getId()}-appsWrapper`,\n\t\t\t\tlayout: new GridContainerSettings({\n\t\t\t\t\tcolumnSize: \"19rem\",\n\t\t\t\t\tgap: \"0.5rem\"\n\t\t\t\t}),\n\t\t\t\tvisible: this.getDeviceType() !== DeviceType.Mobile\n\t\t\t});\n\t\t}\n\t\treturn this._appsWrapper;\n\t}\n\n\t/**\n\t * Generates wrapper for displaying apps in mobile mode.\n\t * @private\n\t * @returns {sap.m.HeaderContainer} The generated apps wrapper.\n\t */\n\tpublic _generateMobileAppsWrapper() {\n\t\tif (!this._mobileAppsWrapper) {\n\t\t\tthis._mobileAppsWrapper = new HeaderContainer({\n\t\t\t\tid: `${this.getId()}-mobileAppsWrapper`,\n\t\t\t\tgridLayout: true,\n\t\t\t\tshowDividers: false,\n\t\t\t\theight: \"23.5rem\",\n\t\t\t\tcontent: [],\n\t\t\t\tvisible: this.getDeviceType() === DeviceType.Mobile\n\t\t\t}).addStyleClass(\"sapUiMargin-26Bottom sapMHeaderContainerAlign\");\n\t\t}\n\t\treturn this._mobileAppsWrapper;\n\t}\n\n\t/**\n\t * Generates the error message wrapper with illustrated message.\n\t * @private\n\t * @returns {sap.m.VBox} Wrapper with illustrated message.\n\t */\n\tpublic _generateErrorMessage(): VBox {\n\t\tif (!this._errorCard) {\n\t\t\tthis._errorCard = new VBox(`${this.getId()}-errorCard`, {\n\t\t\t\twrap: \"Wrap\",\n\t\t\t\tbackgroundDesign: \"Solid\",\n\t\t\t\titems: [this.generateIllustratedMessage()],\n\t\t\t\tvisible: this.getApps().length === 0,\n\t\t\t\tjustifyContent: \"Center\"\n\t\t\t}).addStyleClass(\"sapCuxAppsPanel\");\n\t\t}\n\t\tthis._errorCard.setHeight(this.getDeviceType() === DeviceType.Mobile ? \"23.5rem\" : \"auto\");\n\t\treturn this._errorCard;\n\t}\n\n\t/**\n\t * Creates and returns app instances for given app objects\n\t * @private\n\t * @param {object[]} appObjects - Array of app object.\n\t * @returns {sap.cux.home.App[]} - Array of app instances\n\t */\n\tpublic generateApps(visualizationsData: ICustomVisualization[]) {\n\t\treturn visualizationsData.map((visualizationData) => {\n\t\t\tconst app = new App(\"\", {\n\t\t\t\ttitle: visualizationData.title,\n\t\t\t\tsubTitle: visualizationData.subtitle,\n\t\t\t\tbgColor: visualizationData.BGColor,\n\t\t\t\ticon: visualizationData.icon,\n\t\t\t\turl: visualizationData.url,\n\t\t\t\tvizId: visualizationData.vizId || visualizationData.visualization?.vizId,\n\t\t\t\tstatus: visualizationData.status\n\t\t\t});\n\t\t\tif (visualizationData.oldAppId) {\n\t\t\t\tapp.data(\"oldAppId\", visualizationData.oldAppId);\n\t\t\t}\n\t\t\tvisualizationData.menuItems?.forEach((menuItem) => {\n\t\t\t\tapp.addAggregation(\"menuItems\", menuItem, true);\n\t\t\t});\n\t\t\treturn app;\n\t\t});\n\t}\n\n\t/**\n\t * Add multiple apps in the apps aggregation.\n\t * @param {sap.cux.home.App[]} apps - Array of apps.\n\t */\n\tpublic setApps(apps: App[]) {\n\t\tapps.forEach((app) => {\n\t\t\tthis.addAggregation(\"apps\", app, true);\n\t\t});\n\t}\n\n\t/**\n\t * Fetches and returns the tile visualizations for the current device type (Mobile or Desktop).\n\t *\n\t * @public\n\t * @param {GenericTile[]} tiles - This array will be updated with new tile data based on the device type.\n\t *\n\t * @returns {GenericTile[]} - returns updated tiles\n\t */\n\tpublic fetchTileVisualization(tiles: GenericTile[] = []): GenericTile[] {\n\t\tif (this.getDeviceType() === DeviceType.Mobile) {\n\t\t\tconst cards = (this._generateMobileAppsWrapper()?.getContent() || []) as Panel[];\n\t\t\tfor (const card of cards) {\n\t\t\t\ttiles = tiles.concat((card?.getContent() || []) as GenericTile[]);\n\t\t\t}\n\t\t} else {\n\t\t\ttiles = (this._generateAppsWrapper()?.getItems() || []) as GenericTile[];\n\t\t}\n\t\treturn tiles;\n\t}\n\n\t/**\n\t * Convert array of provided activities to app\n\t * @private\n\t * @param {object[]} activities - Array of activities.\n\t * @returns {object[]} - Array of apps\n\t */\n\tprotected async convertActivitiesToVisualizations(activities: IActivity[]) {\n\t\tconst [availableVisualizations, URLParsingService] = await Promise.all([\n\t\t\tthis._getAllAvailableVisualizations(),\n\t\t\tContainer.getServiceAsync<URLParsing>(\"URLParsing\")\n\t\t]);\n\t\tconst appActivities = activities\n\t\t\t.filter((activity) => activity.appType === \"Application\")\n\t\t\t.map((activity) => {\n\t\t\t\tactivity.orgAppId = activity.appId;\n\t\t\t\tactivity.appId = activity.url;\n\t\t\t\treturn activity;\n\t\t\t});\n\t\tconst visualizations = appActivities\n\t\t\t.map((activity) => this._convertToVisualization(activity, availableVisualizations, URLParsingService))\n\t\t\t.filter((activity): activity is IActivity => activity !== undefined);\n\t\tconst updatedVisualizations = await this._updateVisualizationAvailability(visualizations);\n\t\treturn updatedVisualizations;\n\t}\n\n\t/**\n\t * Returns promise that resolves to array of all available visualizations\n\t * @private\n\t * @returns {Promise} A Promise that resolves to array of all available visualizations.\n\t */\n\tprivate async _getAllAvailableVisualizations() {\n\t\tif (!this._allAvailableVisualizations) {\n\t\t\tconst catalogApps = await this.appManagerInstance._getCatalogApps();\n\t\t\tthis._allAvailableVisualizations = catalogApps.reduce((visualizations: IVisualization[], catalogApp) => {\n\t\t\t\treturn visualizations.concat(catalogApp.visualizations || []);\n\t\t\t}, []);\n\t\t}\n\t\treturn this._allAvailableVisualizations;\n\t}\n\n\t/**\n\t * Updates vizualization array with information - if vizualization is present in favorites .\n\t * @private\n\t * @param {object[]} visualizations - Array of vizualizations.\n\t * @returns {object[]} - Array of updated vizualizations.\n\t */\n\tprivate async _updateVisualizationAvailability(visualizations: IActivity[]) {\n\t\tconst favoriteVisualizations: ICustomVisualization[] = await this.appManagerInstance.fetchFavVizs(true, true);\n\t\tvisualizations.forEach((visualization) => {\n\t\t\tvisualization.addedInFavorites = favoriteVisualizations.some(\n\t\t\t\t(favoriteVisualization) => favoriteVisualization.oldAppId === visualization.orgAppId\n\t\t\t);\n\t\t});\n\t\treturn visualizations;\n\t}\n\n\t/**\n\t * Updates user activity with provided vizualization info\n\t * @private\n\t * @param {object} activity - User activity.\n\t * @param {object} updatedVizConfig - Updated vizualization config.\n\t * @returns {object} - Updated user acitvity.\n\t */\n\tprivate _updateActivityInfo(activity: IActivity, updatedVizConfig: IVisualization) {\n\t\tthis._catalogVisualizationCache = this._catalogVisualizationCache || new Map<string, IVisualization>();\n\t\tactivity.targetURL = updatedVizConfig.targetURL;\n\t\tactivity.vizId = updatedVizConfig.vizId;\n\t\tthis._catalogVisualizationCache.set(activity.orgAppId, updatedVizConfig);\n\t\treturn activity;\n\t}\n\n\t/**\n\t * Finds the best matching visualization for a given activity from a list of matching visualizations.\n\t *\n\t * This method first attempts to find an exact match for the target URL of the activity among the matching visualizations.\n\t * If no exact match is found, it uses the URLParsingService to compare parameters of the target URLs to find the best match.\n\t * It then updates the activity information with the best matching visualization.\n\t *\n\t * @private\n\t * @param {IActivity} activity - The activity for which to find the best matching visualization.\n\t * @param {IVisualization[]} matchingVisualizations - A list of visualizations that match the activity.\n\t * @param {URLParsing} URLParsingService - A service used to parse and compare target URLs.\n\t * @returns {IVisualization | undefined} The best matching visualization, or undefined if no match is found.\n\t */\n\tprivate _findBestMatchingVisualization(activity: IActivity, matchingVisualizations: IVisualization[], URLParsingService: URLParsing) {\n\t\t//if there are multiple matching apps, compare the target urls\n\t\tconst matchedVisualization = matchingVisualizations.find((matchingViz) => matchingViz.targetURL === activity.url);\n\t\tif (matchedVisualization) {\n\t\t\treturn this._updateActivityInfo(activity, matchedVisualization);\n\t\t} else {\n\t\t\t//edge cases, when no exact targetUrl match\n\t\t\tconst matchedVisualizationCache = new Map<string, object>();\n\t\t\tconst matchedVisualizations: { viz: IVisualization; params: unknown; prio: number }[] = [];\n\n\t\t\tmatchingVisualizations.forEach((visualization) => {\n\t\t\t\tconst targetURL: string = visualization.targetURL;\n\t\t\t\tif (!matchedVisualizationCache.get(targetURL)) {\n\t\t\t\t\tconst matchedVisualization = {\n\t\t\t\t\t\tviz: visualization,\n\t\t\t\t\t\tparams: (URLParsingService.parseShellHash(visualization.targetURL) as { params: { [key: string]: unknown[] } })\n\t\t\t\t\t\t\t.params,\n\t\t\t\t\t\tprio: 0\n\t\t\t\t\t};\n\t\t\t\t\tmatchedVisualizationCache.set(targetURL, matchedVisualization);\n\t\t\t\t\tmatchedVisualizations.push(matchedVisualization);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst filteredVisualizations = matchedVisualizations.filter((matchedVisualization) =>\n\t\t\t\tthis._filterMatchingVisualization(activity, matchedVisualization, URLParsingService)\n\t\t\t);\n\t\t\tif (filteredVisualizations.length) {\n\t\t\t\t// more than 1 matching condition for unique targetUrls\n\t\t\t\t// this could be either because there is exact match and/or also allItems true and/or no params in VizData param keys\n\t\t\t\t// then find best match possible, based on prio\n\t\t\t\tfilteredVisualizations.sort((val1, val2) => val1.prio - val2.prio);\n\t\t\t\treturn this._updateActivityInfo(activity, filteredVisualizations[0].viz);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Filters matching visualizations based on activity parameters and assigns priority.\n\t *\n\t * This method compares the parameters of the activity with those of a matched visualization\n\t * to determine if they match.\n\t *\n\t * @private\n\t * @returns {boolean} Returns true if the visualization matches the activity, false otherwise.\n\t */\n\tprivate _filterMatchingVisualization(\n\t\tactivity: IActivity,\n\t\tmatchedVisualization: { viz: IVisualization; params: unknown; prio: number },\n\t\tURLParsingService: URLParsing\n\t) {\n\t\tconst parshedShellHash = URLParsingService.parseShellHash(activity.url) as { params: { [key: string]: unknown[] } };\n\t\tconst activityParameters = parshedShellHash.params;\n\n\t\tconst activityParameterKeys = Object.keys(activityParameters);\n\t\tconst visualizationParams = matchedVisualization.params as { [key: string]: unknown[] };\n\t\t//filter keys other than 'allItems', for myinbox tasks allItems key is a generally common key hence filter that\n\t\tconst visualizationParamKeys = Object.keys(visualizationParams).filter((key) => key !== \"allItems\");\n\t\tif (visualizationParamKeys.length === activityParameterKeys.length) {\n\t\t\tconst bMatch = activityParameterKeys.every(\n\t\t\t\t(key) => visualizationParamKeys.includes(key) && visualizationParams[key][0] === activityParameters[key][0]\n\t\t\t);\n\t\t\tif (bMatch) {\n\t\t\t\tmatchedVisualization.prio = 1;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t} else if (!visualizationParamKeys.length) {\n\t\t\t//this could mean either visualizationParamKeys did not have any key or the only key present was 'allItems'\n\t\t\t//if 'allItems' present give prio 2 else prio 3\n\t\t\tmatchedVisualization.prio = Object.keys(matchedVisualization.params as { [key: string]: unknown[] }).length ? 2 : 3;\n\t\t\treturn true;\n\t\t}\n\t\t//filtered visualizationParamKeys length doesnt match aAppParamKeys length & visualizationParamKeys length is not 0\n\t\treturn false;\n\t}\n\n\t/**\n\t * Converts given user activity to vizualization\n\t * @private\n\t * @param {object} activity - User Activity.\n\t * @param {object[]} catalogVisualizations - array of all available visualizations in catalog.\n\t * @param {object} URLParsingService - URL parsing service.\n\t * @returns {object} - visualization\n\t */\n\tprivate _convertToVisualization(activity: IActivity, catalogVisualizations: IVisualization[], URLParsingService: URLParsing) {\n\t\tthis._catalogVisualizationCache = this._catalogVisualizationCache || new Map<string, IVisualization>();\n\t\tconst catalogVisualization = this._catalogVisualizationCache.get(activity.orgAppId);\n\t\tif (catalogVisualization) {\n\t\t\treturn this._updateActivityInfo(activity, catalogVisualization);\n\t\t} else {\n\t\t\tconst matchingVisualizations = catalogVisualizations.filter(\n\t\t\t\t(visualization) =>\n\t\t\t\t\tvisualization.vizId && `#${visualization.target?.semanticObject}-${visualization.target?.action}` === activity.orgAppId\n\t\t\t);\n\t\t\tif (matchingVisualizations.length > 1) {\n\t\t\t\treturn this._findBestMatchingVisualization(activity, matchingVisualizations, URLParsingService);\n\t\t\t} else if (matchingVisualizations.length === 1) {\n\t\t\t\treturn this._updateActivityInfo(activity, matchingVisualizations[0]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Adds visualization to favorite apps\n\t * @private\n\t * @param {sap.ui.base.Event} event - The event object.\n\t */\n\tprotected async _addAppToFavorites(event: Event) {\n\t\tthis.setBusy(true);\n\t\ttry {\n\t\t\tconst source = event.getSource<MenuItem>();\n\t\t\tconst app = source.getParent() as App;\n\t\t\tconst vizId = app.getVizId?.();\n\t\t\tif (vizId) {\n\t\t\t\t//Add Apps to the 'Recently Added Apps' section\n\t\t\t\tawait this.appManagerInstance.addVisualization(vizId);\n\t\t\t\tawait (this.getParent?.() as AppsContainer)._refreshAllPanels();\n\t\t\t\tconst message = this._i18nBundle.getText(\"appMovedToFavorites\", [app.getTitle()]) as string;\n\t\t\t\tMessageToast.show(message);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tLog.error(error as string);\n\t\t} finally {\n\t\t\tthis.setBusy(false);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the panel is loaded. If the panel is not loaded then placholders are shown otherwise not\n\t * @private\n\t * @returns {boolean} true if the panel is loaded, false otherwise.\n\t */\n\tpublic isLoaded(): boolean {\n\t\treturn this._isLoaded;\n\t}\n\n\t/**\n\t * Set the loaded status of the app panel.\n\t * @private\n\t * @param {boolean} val - The new loaded status to set for the app panel.\n\t */\n\tpublic setLoaded(val: boolean): void {\n\t\tthis._isLoaded = val;\n\t}\n\n\t/**\n\t * Returns the dirty status of the app panel. If the panel is dirty then only re-render the apps\n\t * @private\n\t * @returns {boolean} true if the panel is dirty, false otherwise.\n\t */\n\tpublic isDirty(): boolean {\n\t\treturn this._isDirty;\n\t}\n\n\t/**\n\t * Set the dirty status of the app panel.\n\t * @private\n\t * @param {boolean} val - The new dirty status to set for the app panel.\n\t */\n\tpublic setDesktopViewDirty(val: boolean): void {\n\t\tthis._isDirty = val;\n\t}\n\n\t/**\n\t * Returns the dirty status of the app mobile panel. If the panel is dirty then only re-render the apps\n\t * @private\n\t * @returns {boolean} true if the panel is dirty, false otherwise.\n\t */\n\tpublic isMobileDirty(): boolean {\n\t\treturn this._isMobileDirty;\n\t}\n\n\t/**\n\t * Set the dirty status of the app mobile panel.\n\t * @private\n\t * @param {boolean} val - The new dirty status to set for the app mobile panel.\n\t */\n\tpublic setMobileViewDirty(val: boolean): void {\n\t\tthis._isMobileDirty = val;\n\t}\n\n\t/**\n\t * Sets aggregation for give control.\n\t * @param {Object} control - Control for which aggregation has to be set.\n\t * @param {Object[]} items - Items to be added in aggregation.\n\t * @param {string} aggregationName - Aggregation name\n\t * @private\n\t */\n\tpublic _setAggregation = function (control: Control | Group, items: Control[] | App[] = [], aggregationName = \"items\") {\n\t\titems.forEach((oItem) => {\n\t\t\tcontrol.addAggregation(aggregationName, oItem, true);\n\t\t});\n\t};\n\n\t/**\n\t * Sets the busy state of panel.\n\t * @private\n\t * @param {boolean} isBusy - Indicates whether the panel should be set to busy state.\n\t */\n\tprotected setBusy(isBusy: boolean) {\n\t\tconst oAppsWrapper = this._generateAppsWrapper();\n\t\toAppsWrapper.setBusy(isBusy);\n\t}\n\n\t/**\n\t * Retrieves the group with the specified group Id.\n\t * @private\n\t * @param {string} groupId - The Id of the group.\n\t * @returns {sap.cux.home.Group} The group with the specified group Id, or null if not found.\n\t */\n\tprotected _getGroup(groupId: string) {\n\t\tconst groups = (this.getAggregation(\"groups\") || []) as Group[];\n\t\treturn groups.find((group) => group.getGroupId() === groupId);\n\t}\n\n\t/**\n\t * Checks if the panel is supported.\n\t * @returns {boolean} True if the panel is supported, false otherwise.\n\t * @private\n\t */\n\tpublic isSupported() {\n\t\treturn this._isSupported;\n\t}\n\n\t/**\n\t * Sets panel as supported or unsupported.\n\t * @param {boolean} isSupported true if the panel is supported, false otherwise.\n\t * @private\n\t */\n\tpublic setSupported(isSupported: boolean) {\n\t\tthis._isSupported = isSupported;\n\t}\n\n\t/**\n\t * Attaches user activity tracking based on the configuration.\n\t * If user activity tracking is enabled, it listens to changes in tracking activity configuration\n\t * and fires a 'supported' event accordingly.\n\t * @private\n\t */\n\tprotected _attachUserActivityTracking() {\n\t\tif (Config.last(\"/core/shell/enableRecentActivity\")) {\n\t\t\tConfig.on(\"/core/shell/model/enableTrackingActivity\").do((isTrackingActivityEnabled: boolean) => {\n\t\t\t\tthis.fireSupported({ isSupported: isTrackingActivityEnabled });\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Refreshes the panel.\n\t * @public\n\t */\n\tprotected async refresh() {\n\t\tawait (this.getParent() as AppsContainer).refreshPanel(this);\n\t}\n\n\t/**\n\t * Generates default illustrated message for panel.\n\t * @private\n\t * @returns {sap.m.IllustratedMessage} Illustrated error message for panel.\n\t */\n\tprotected generateIllustratedMessage() {\n\t\tif (!this._errorMessage) {\n\t\t\tthis._errorMessage = new IllustratedMessage(`${this.getId()}-errorMessage`, {\n\t\t\t\tillustrationSize: IllustratedMessageSize.Spot,\n\t\t\t\tillustrationType: IllustratedMessageType.AddColumn,\n\t\t\t\ttitle: this._i18nBundle.getText(\"noAppsTitle\"),\n\t\t\t\tdescription: this._i18nBundle.getText(\"noData\")\n\t\t\t});\n\t\t}\n\t\treturn this._errorMessage;\n\t}\n}\n"],"mappings":"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","ignoreList":[]}