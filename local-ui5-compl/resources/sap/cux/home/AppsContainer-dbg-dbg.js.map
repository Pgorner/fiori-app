{"version":3,"file":"AppsContainer-dbg-dbg.js","names":["sap","ui","define","GenericTile","Panel","sap_m_library","EventBus","Parameters","__BaseContainer","___library","__DataFormatUtils","___utils_Device","_interopRequireDefault","obj","__esModule","default","BackgroundDesign","FrameType","GenericTileMode","GenericTileScope","TileSizeBehavior","BaseContainer","LayoutType","DataFormatUtils","DeviceType","getDefaultAppColor","sLegendName","key","value","get","name","assigned","CONSTANTS","PLACEHOLDER_ITEMS_COUNT","AppsContainer","extend","metadata","events","appsLoaded","parameters","apps","type","tiles","renderer","apiVersion","constructor","_constructor","id","settings","BaseContainer.prototype.constructor.call","_isInitialRender","init","_init","BaseContainer.prototype.init.call","setProperty","_i18nBundle","getText","getDeviceType","Mobile","Vertical","_shellNavigationHandler","_onShellNavigated","_oEventBus","getInstance","subscribe","addStyleClass","exit","_exit","unsubscribe","onBeforeRendering","_onBeforeRendering","BaseContainer.prototype.onBeforeRendering.call","_attachPanelSupportedEvent","_removeUnsupportedPanels","isPhone","selectedPanels","getContent","_getSelectedPanel","selectedPanel","fireNavigated","_setApps","_setPanelsDirty","panels","panel","setDesktopViewDirty","setMobileViewDirty","_generatePlaceholder","isLoaded","placeholderApps","generateApps","Array","fill","status","destroyAggregation","setApps","_updatePanelContent","_this","_temp3","isDirty","isMobileDirty","Promise","resolve","loadApps","then","_temp2","getApps","fetchTileVisualization","fireEvent","setLoaded","_temp","isA","applyPersonalization","e","reject","groups","getAggregation","wrapper","_generateMobileAppsWrapper","_generateAppsWrapper","aggregationName","items","_generateMobileCards","_generateTiles","_addWrapperContent","_updatePanelContentVisibility","appsWrapper","_generateDesktopAppsWrapper","mobileAppsWrapper","errorCard","_generateErrorMessage","hasApps","length","setVisible","getParent","setWidth","_getAppTile","app","actions","scope","ActionMore","Display","state","getStatus","mode","IconMode","sizeBehavior","Small","header","getTitle","backgroundColor","getBgColor","tileIcon","getIcon","url","getLeanURL","getUrl","frameType","TwoByHalf","renderOnThemeChange","dropAreaOffset","subheader","getSubTitle","press","_onPress","width","_getGroupTile","group","tileBadge","getNumber","data","getGroupId","_onPanelSelect","event","_this2","BaseContainer.prototype._onPanelSelect.call","_refreshAllPanels","_this3","refreshPanel","_refreshPanel","_this4","_toggleTabView","supportedPanels","filter","isSupported","iconTabBarControl","_getInnerControl","toggleStyleClass","_onPanelSupported","currentPanel","getParameter","setSupported","_togglePanelVisibility","isVisible","panelWrapper","_getPanelContentWrapper","iconTabBar","tabs","getItems","selectedTab","find","tab","getKey","unSupportedPanels","hasListeners","attachSupported","bind","adjustLayout","_adjustLayout","currentLayout","getProperty","newLayout","SideBySide","shouldAdjustLayout","forEach","toggleActionButtons","i","panelItems","slice","backgroundDesign","Solid","height","content","push","map","item","addAggregation"],"sources":["AppsContainer.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport GridContainer from \"sap/f/GridContainer\";\nimport GenericTile from \"sap/m/GenericTile\";\nimport HeaderContainer from \"sap/m/HeaderContainer\";\nimport IconTabBar, { IconTabBar$SelectEvent } from \"sap/m/IconTabBar\";\nimport IconTabFilter from \"sap/m/IconTabFilter\";\nimport Panel from \"sap/m/Panel\";\nimport VBox from \"sap/m/VBox\";\nimport { BackgroundDesign, FrameType, GenericTileMode, GenericTileScope, LoadState, TileSizeBehavior } from \"sap/m/library\";\nimport type { MetadataOptions } from \"sap/ui/core/Element\";\nimport EventBus from \"sap/ui/core/EventBus\";\nimport Parameters from \"sap/ui/core/theming/Parameters\";\nimport App from \"./App\";\nimport BaseApp from \"./BaseApp\";\nimport BaseAppPanel, { BaseAppPanel$SupportedEvent } from \"./BaseAppPanel\";\nimport BaseAppPersPanel from \"./BaseAppPersPanel\";\nimport BaseContainer, { $BaseContainerSettings } from \"./BaseContainer\";\nimport Group from \"./Group\";\nimport MenuItem from \"./MenuItem\";\nimport { ICustomVisualization } from \"./interface/AppsInterface\";\nimport { LayoutType } from \"./library\";\nimport DataFormatUtils from \"./utils/DataFormatUtils\";\nimport { DeviceType } from \"./utils/Device\";\n\nconst getDefaultAppColor = () => {\n\tconst sLegendName = \"sapLegendColor9\";\n\treturn {\n\t\tkey: sLegendName,\n\t\tvalue: Parameters.get({\n\t\t\tname: sLegendName\n\t\t}),\n\t\tassigned: false\n\t};\n};\n\nconst CONSTANTS = {\n\tPLACEHOLDER_ITEMS_COUNT: 5\n};\n\n/**\n *\n * Container class for managing and storing apps.\n *\n * @extends sap.cux.home.BaseContainer\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @internal\n * @experimental Since 1.121\n * @public\n *\n * @alias sap.cux.home.AppsContainer\n */\nexport default class AppsContainer extends BaseContainer {\n\tprivate _oEventBus!: EventBus;\n\tprivate _shellNavigationHandler!: () => void;\n\tprivate _isInitialRender = true;\n\tstatic readonly renderer = {\n\t\t...BaseContainer.renderer,\n\t\tapiVersion: 2\n\t};\n\tstatic readonly metadata: MetadataOptions = {\n\t\tevents: {\n\t\t\t/**\n\t\t\t * Event is fired when apps are loaded.\n\t\t\t */\n\t\t\tappsLoaded: {\n\t\t\t\tparameters: {\n\t\t\t\t\tapps: { type: \"App[]\" },\n\t\t\t\t\ttiles: { type: \"GenericTile[]\" }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Constructor for a new app container.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $BaseContainerSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tsuper.init();\n\t\tthis.setProperty(\"title\", this._i18nBundle?.getText(\"appsTitle\"));\n\t\tif (this.getDeviceType() === DeviceType.Mobile) {\n\t\t\tthis.setProperty(\"layout\", LayoutType.Vertical);\n\t\t}\n\t\tthis._shellNavigationHandler = () => this._onShellNavigated();\n\t\tthis._oEventBus = EventBus.getInstance();\n\t\tthis._oEventBus?.subscribe(\"sap.ushell\", \"navigated\", this._shellNavigationHandler);\n\t\tthis.addStyleClass(\"sapCuxAppsContainer\");\n\t}\n\n\t/**\n\t * Exit lifecycle method\n\t * Clean up event handlers\n\t * @private\n\t */\n\tpublic exit(): void {\n\t\tthis._oEventBus?.unsubscribe(\"sap.ushell\", \"navigated\", this._shellNavigationHandler);\n\t}\n\n\t/**\n\t * onBeforeRendering lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic onBeforeRendering() {\n\t\tsuper.onBeforeRendering();\n\n\t\tif (this._isInitialRender) {\n\t\t\tthis._isInitialRender = false;\n\t\t\tthis._attachPanelSupportedEvent();\n\t\t\tthis._removeUnsupportedPanels();\n\t\t}\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst selectedPanels = (isPhone ? this.getContent() : [this._getSelectedPanel()]) as BaseAppPanel[];\n\t\tfor (const selectedPanel of selectedPanels) {\n\t\t\tselectedPanel.fireNavigated();\n\t\t\tvoid this._setApps(selectedPanel);\n\t\t}\n\t}\n\n\t/**\n\t * Handler for navigation event.\n\t * @private\n\t * Sets the panels dirty if navigated to different page.\n\t */\n\tprivate _onShellNavigated(): void {\n\t\tthis._setPanelsDirty();\n\t}\n\n\t/**\n\t * Set all panels dirty state to true, to refresh all panels\n\t * @private\n\t */\n\tprivate _setPanelsDirty(): void {\n\t\tconst panels = this.getContent() as BaseAppPanel[];\n\t\tfor (const panel of panels) {\n\t\t\tpanel.setDesktopViewDirty(true);\n\t\t\tpanel.setMobileViewDirty(true);\n\t\t}\n\t}\n\n\t/**\n\t * Generate placeholer for the panel.\n\t * @private\n\t * @param {BaseAppPanel} panel - Panel for which placeholders has to be generated.\n\t */\n\tprivate _generatePlaceholder(panel: BaseAppPanel): void {\n\t\tif (!panel.isLoaded()) {\n\t\t\tconst placeholderApps = panel.generateApps(\n\t\t\t\tnew Array(CONSTANTS.PLACEHOLDER_ITEMS_COUNT).fill({ status: \"Loading\" }) as ICustomVisualization[]\n\t\t\t);\n\t\t\tpanel.destroyAggregation(\"apps\", true);\n\t\t\tpanel.setApps(placeholderApps);\n\t\t\tthis._updatePanelContent(panel);\n\t\t}\n\t}\n\n\t/**\n\t * Loads and sets the apps.\n\t * @private\n\t * @param {BaseAppPanel} panel - Panel for which apps has to be loaded.\n\t * @returns {Promise<void>} resolves when apps are loaded.\n\t */\n\tprivate async _setApps(panel: BaseAppPanel): Promise<void> {\n\t\t// only load the apps if panel is in dirty state\n\t\tif (panel.isDirty() && panel.isMobileDirty()) {\n\t\t\tthis._generatePlaceholder(panel);\n\t\t\tawait panel.loadApps?.();\n\t\t\tif (this.getDeviceType() === DeviceType.Mobile) {\n\t\t\t\tpanel.setMobileViewDirty(false);\n\t\t\t} else {\n\t\t\t\tpanel.setDesktopViewDirty(false);\n\t\t\t}\n\t\t\tpanel.setLoaded(true);\n\t\t\tthis._updatePanelContent(panel);\n\n\t\t\tif (panel.isA(\"sap.cux.home.BaseAppPersPanel\")) {\n\t\t\t\tawait (panel as BaseAppPersPanel).applyPersonalization();\n\t\t\t}\n\t\t\tlet tiles: GenericTile[] = [];\n\t\t\tlet apps = panel.getApps();\n\t\t\ttiles = panel.fetchTileVisualization(tiles);\n\t\t\tthis.fireEvent(\"appsLoaded\", { apps, tiles });\n\t\t}\n\t}\n\n\t/**\n\t * Updates the content of the panel by replacing existing items with new apps and groups.\n\t * This method selects the appropriate wrapper based on the device type, and add apps/group or mobile cards to the wrapper.\n\t *\n\t * @param {BaseAppPanel} panel - The panel whose content needs to be updated.\n\t * @returns {void}\n\t * @private\n\t */\n\tprivate _updatePanelContent(panel: BaseAppPanel): void {\n\t\tconst apps = panel.getApps() || [];\n\t\tconst groups = (panel.getAggregation(\"groups\") || []) as Group[];\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst wrapper = isPhone ? panel._generateMobileAppsWrapper() : panel._generateAppsWrapper();\n\t\tconst aggregationName = isPhone ? \"content\" : \"items\";\n\t\twrapper.destroyAggregation(aggregationName);\n\t\tlet items = isPhone ? this._generateMobileCards([...groups, ...apps]) : this._generateTiles([...groups, ...apps]);\n\t\tthis._addWrapperContent(wrapper, items, aggregationName);\n\t\tthis._updatePanelContentVisibility(panel);\n\t}\n\n\t/**\n\t * Updates the visibility of the panel's content based on the current state and device type.\n\t * This method determines whether to display the apps or an error message based on the presence of apps and groups.\n\t * It also adjusts the visibility of different containers depending on whether the device is a phone or not.\n\t *\n\t * @param {BaseAppPanel} panel - The panel whose content visibility needs to be updated.\n\t * @returns {void}\n\t * @private\n\t */\n\tprivate _updatePanelContentVisibility(panel: BaseAppPanel): void {\n\t\tconst apps = panel.getApps() || [];\n\t\tconst groups = (panel.getAggregation(\"groups\") || []) as Group[];\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst appsWrapper = panel._generateDesktopAppsWrapper();\n\t\tconst mobileAppsWrapper = panel._generateMobileAppsWrapper();\n\t\tconst errorCard = panel._generateErrorMessage();\n\t\tconst hasApps = [...apps, ...groups].length !== 0;\n\t\tappsWrapper.setVisible(hasApps && !isPhone);\n\t\tmobileAppsWrapper.setVisible(hasApps && isPhone);\n\t\t(mobileAppsWrapper.getParent() as VBox).setWidth(isPhone && hasApps ? \"100%\" : \"auto\");\n\t\terrorCard.setVisible(!hasApps);\n\t}\n\n\t/**\n\t * Generates generic tile based on app.\n\t * @private\n\t * @param {sap.cux.home.App} app - App.\n\t * @returns {sap.m.GenericTile}.\n\t */\n\tpublic _getAppTile(app: App): GenericTile {\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst actions = (app.getAggregation(\"menuItems\") || []) as MenuItem[];\n\t\treturn new GenericTile(\"\", {\n\t\t\tscope: actions.length && !isPhone ? GenericTileScope.ActionMore : GenericTileScope.Display,\n\t\t\tstate: app.getStatus() as LoadState,\n\t\t\tmode: GenericTileMode.IconMode,\n\t\t\tsizeBehavior: TileSizeBehavior.Small,\n\t\t\theader: app.getTitle(),\n\t\t\tbackgroundColor: app.getBgColor() || getDefaultAppColor()?.key,\n\t\t\ttileIcon: app.getIcon(),\n\t\t\turl: DataFormatUtils.getLeanURL(app.getUrl()),\n\t\t\tframeType: FrameType.TwoByHalf,\n\t\t\trenderOnThemeChange: true,\n\t\t\tdropAreaOffset: 4,\n\t\t\tsubheader: app.getSubTitle(),\n\t\t\tpress: (e) => app._onPress(e),\n\t\t\twidth: isPhone ? \"15rem\" : \"auto\"\n\t\t}).addStyleClass(\"sapMGTTwoByHalf tileLayout\");\n\t}\n\n\t/**\n\t * Generates generic tile based on group.\n\t * @private\n\t * @param {sap.cux.home.Group} group - Group.\n\t * @returns {sap.m.GenericTile}.\n\t */\n\tprivate _getGroupTile(group: Group): GenericTile {\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst actions = (group.getAggregation(\"menuItems\") || []) as MenuItem[];\n\t\treturn new GenericTile(\"\", {\n\t\t\tscope: actions.length && !isPhone ? GenericTileScope.ActionMore : GenericTileScope.Display,\n\t\t\tstate: group.getStatus() as LoadState,\n\t\t\tmode: GenericTileMode.IconMode,\n\t\t\tsizeBehavior: TileSizeBehavior.Small,\n\t\t\theader: group.getTitle(),\n\t\t\tbackgroundColor: group.getBgColor() || getDefaultAppColor()?.key,\n\t\t\ttileIcon: group.getIcon(),\n\t\t\tframeType: FrameType.TwoByHalf,\n\t\t\trenderOnThemeChange: true,\n\t\t\tdropAreaOffset: 4,\n\t\t\ttileBadge: group.getNumber(),\n\t\t\tpress: (e) => group._onPress(e),\n\t\t\twidth: isPhone ? \"15rem\" : \"auto\"\n\t\t})\n\t\t\t.addStyleClass(\"sapMGTTwoByHalf tileLayout\")\n\t\t\t.data(\"groupId\", group.getGroupId()) as GenericTile;\n\t}\n\n\t/**\n\t * Overridden method for selection of panel in the IconTabBar.\n\t * Loads the apps in selected panel\n\t * @private\n\t * @returns {Promise<void>} resolves when apps are loaded on panel selection.\n\t */\n\tprotected async _onPanelSelect(event: IconTabBar$SelectEvent) {\n\t\tsuper._onPanelSelect(event);\n\t\tconst selectedPanel = this._getSelectedPanel() as BaseAppPanel;\n\t\tawait this._setApps(selectedPanel);\n\t}\n\n\t/**\n\t * Refresh apps for all the panels.\n\t * @private\n\t * @returns {Promise<void>} resolves when all panels are set to dirty and apps for current panel are refreshed.\n\t */\n\tpublic async _refreshAllPanels(): Promise<void> {\n\t\t//set all panels to dirty\n\t\tthis._setPanelsDirty();\n\t\t//set apps for current section\n\t\tawait this._setApps(this._getSelectedPanel() as BaseAppPanel);\n\t}\n\n\t/**\n\t * Refresh apps for selected panel.\n\t * @private\n\t * @param {BaseAppPanel} panel - Panel that has be refreshed.\n\t * @returns {Promise<void>} resolves when apps are refreshed.\n\t */\n\tpublic async refreshPanel(panel: BaseAppPanel): Promise<void> {\n\t\tpanel.setMobileViewDirty(true);\n\t\tpanel.setDesktopViewDirty(true);\n\t\tawait this._setApps(panel);\n\t}\n\n\t/**\n\t * Toggles the visibility of the tab view based on the supported panels.\n\t * @private\n\t */\n\tprivate _toggleTabView() {\n\t\tif (this.getDeviceType() !== DeviceType.Mobile) {\n\t\t\tconst panels = this.getContent() as BaseAppPanel[];\n\t\t\tconst supportedPanels = panels.filter((panel) => panel.isSupported());\n\t\t\tconst iconTabBarControl = this._getInnerControl() as IconTabBar;\n\t\t\ticonTabBarControl?.toggleStyleClass(\"sapUiITBHide\", supportedPanels.length === 1);\n\t\t}\n\t}\n\n\t/**\n\t * Handles the supported state of the current panel.\n\t * If the panel is supported, it adds the panel to the content.\n\t * If the panel is not supported, it removes the panel from the content.\n\t * @param {BaseAppPanel} currentPanel - The panel to handle the supported state for.\n\t * @private\n\t */\n\tprivate _onPanelSupported(currentPanel: BaseAppPanel, event: BaseAppPanel$SupportedEvent) {\n\t\tconst isSupported = event.getParameter(\"isSupported\") as boolean;\n\t\tcurrentPanel.setSupported(isSupported);\n\t\tthis._togglePanelVisibility(currentPanel, isSupported);\n\t\tthis._toggleTabView();\n\t}\n\n\t/**\n\t * Toggles the visibility of the panel.\n\t * @param {BaseAppPanel} panel - The panel to toggle the visibility for.\n\t * @param {boolean} isVisible - The visibility state of the panel.\n\t * @private\n\t */\n\tprivate _togglePanelVisibility(panel: BaseAppPanel, isVisible: boolean) {\n\t\tif (this.getDeviceType() === DeviceType.Mobile) {\n\t\t\tconst panelWrapper = this._getPanelContentWrapper(panel);\n\t\t\tpanelWrapper.setVisible(isVisible);\n\t\t} else {\n\t\t\tconst iconTabBar = this._getInnerControl() as IconTabBar;\n\t\t\tconst tabs = (iconTabBar?.getItems() as IconTabFilter[]) || [];\n\t\t\tconst selectedTab = tabs.find((tab) => tab.getKey() === panel.getKey());\n\t\t\tselectedTab?.setVisible(isVisible);\n\t\t}\n\t}\n\n\t/**\n\t * Removes unsupported panels from the container.\n\t * @private\n\t */\n\tprivate _removeUnsupportedPanels() {\n\t\tconst panels = this.getContent() as BaseAppPanel[];\n\t\tconst unSupportedPanels = panels.filter((panel) => !panel.isSupported());\n\t\tfor (const panel of unSupportedPanels) {\n\t\t\tthis._togglePanelVisibility(panel, false);\n\t\t}\n\t\tthis._toggleTabView();\n\t}\n\n\t/**\n\t * Attaches an event handler to the \"supported\" event for each panel in the container.\n\t * @private\n\t */\n\tprivate _attachPanelSupportedEvent() {\n\t\tconst panels = this.getContent() as BaseAppPanel[];\n\t\tfor (const panel of panels) {\n\t\t\tif (!panel.hasListeners(\"supported\")) {\n\t\t\t\tpanel.attachSupported(this._onPanelSupported.bind(this, panel));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Adjusts the layout and visibility based on the device type.\n\t *\n\t * This method adjusts the layout type and visibility of containers based on whether the device is a phone\n\t * or not. It sets the container's layout property, toggles visibility of panels and their containers, and\n\t * adjusts background design accordingly.\n\t *\n\t * @private\n\t * @returns {void}\n\t */\n\tpublic adjustLayout(): void {\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst currentLayout = this.getProperty(\"layout\") as LayoutType;\n\t\tconst newLayout = isPhone ? LayoutType.Vertical : LayoutType.SideBySide;\n\t\tconst shouldAdjustLayout = currentLayout !== newLayout;\n\t\tif (!shouldAdjustLayout) {\n\t\t\treturn;\n\t\t}\n\t\tthis.setProperty(\"layout\", newLayout);\n\t\tconst panels = this.getContent() as BaseAppPanel[];\n\t\tpanels.forEach((panel) => {\n\t\t\t//if both the panels are dirty, then updated data will be loaded from onBeforeRendering, as layout change will trigger re-rendering\n\t\t\t//if both the panels are not dirty, i.e. doen't have any changes, then just toggle the visibility\n\t\t\tif (!panel.isDirty() && !panel.isMobileDirty()) {\n\t\t\t\tthis._updatePanelContentVisibility(panel);\n\t\t\t} else if (panel.isDirty() !== panel.isMobileDirty()) {\n\t\t\t\t//if one of the panels is dirty i.e. have updated data and other is not, then re-create the inner controls\n\t\t\t\tpanel.setDesktopViewDirty(false);\n\t\t\t\tpanel.setMobileViewDirty(false);\n\t\t\t\tthis._updatePanelContent(panel);\n\t\t\t}\n\t\t});\n\t\t//hide actions if the device is a phone\n\t\tthis.toggleActionButtons(!isPhone);\n\n\t\t//this is to handle scenario when unsupported propert is changed and then layout is changed.\n\t\tthis._removeUnsupportedPanels();\n\t}\n\n\t/**\n\t * Generates mobile card panel and add given apps/groups in the panel.\n\t *\n\t * @private\n\t * @returns {sap.m.Panel} The newly created mobile card panel.\n\t */\n\tprivate _generateMobileCards(items: BaseApp[]): Panel[] {\n\t\tconst panels: Panel[] = [];\n\t\tfor (let i = 0; i < items.length; i += 7) {\n\t\t\tconst panelItems = items.slice(i, i + 7);\n\t\t\tconst panel = new Panel({\n\t\t\t\tbackgroundDesign: BackgroundDesign.Solid,\n\t\t\t\theight: \"23.5rem\",\n\t\t\t\twidth: \"17rem\",\n\t\t\t\tcontent: this._generateTiles(panelItems)\n\t\t\t}).addStyleClass(\"sapUiMobileAppsCard\");\n\t\t\tpanels.push(panel);\n\t\t}\n\t\treturn panels;\n\t}\n\n\t/**\n\t * Generates group/app generic tiles for given apps/groups.\n\t *\n\t * @private\n\t * @param {BaseApp[]} items - Apps/Groups for which tiles has to be generated.\n\t * @returns {sap.m.GenericTile[]} The generated tiles.\n\t */\n\tprivate _generateTiles(items: BaseApp[]): GenericTile[] {\n\t\treturn items.map((item) => (item.isA(\"sap.cux.home.Group\") ? this._getGroupTile(item as Group) : this._getAppTile(item as App)));\n\t}\n\n\t/**\n\t * Adds given items into the wrapper.\n\t * @param {HeaderContainer | GridContainer} wrapper - wrapper for which items has to be added.\n\t * @param {Panel[] | GenericTile[]} items - items to be added.\n\t * @param {string} aggregationName - aggregation name to which items has to be added.\n\t * @private\n\t */\n\tprivate _addWrapperContent(wrapper: HeaderContainer | GridContainer, items: Panel[] | GenericTile[], aggregationName: string) {\n\t\twrapper.destroyAggregation(aggregationName);\n\t\titems.forEach((item) => {\n\t\t\twrapper.addAggregation(aggregationName, item);\n\t\t});\n\t}\n}\n"],"mappings":"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","ignoreList":[]}