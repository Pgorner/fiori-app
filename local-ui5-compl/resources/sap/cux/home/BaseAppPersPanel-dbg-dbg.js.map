{"version":3,"file":"BaseAppPersPanel-dbg-dbg.js","names":["sap","ui","define","Log","EventBus","Container","__BaseAppPanel","___utils_Constants","__DataFormatUtils","__PageManager","__PersonalisationUtils","__UshellPersonalizer","_interopRequireDefault","obj","__esModule","default","_catch","body","recover","result","e","then","BaseAppPanel","DEFAULT_APP_ICON","DEFAULT_BG_COLOR","FALLBACK_ICON","MYHOME_PAGE_ID","DataFormatUtils","PageManager","PersonalisationUtils","UshellPersonalizer","BaseAppPersPanel","extend","metadata","library","properties","persContainerId","type","group","defaultValue","visibility","constructor","_constructor","id","settings","BaseAppPanel.prototype.constructor.call","_favPageVisualizations","init","_init","BaseAppPanel.prototype.init.call","setProperty","getPersContainerId","_pageManagerInstance","getInstance","getOwnerComponent","_eventBus","subscribe","applyPersonalization","_getPersonalizer","_this","getProperty","Error","Promise","resolve","reject","getPersonalization","_getPersonalization","_this2","personalizer","read","setPersonalization","_setPersonalization","persData","_this3","write","_getAppPersonalization","_this4","personalization","favoriteApps","setFavAppsPersonalization","_setFavAppsPersonalization","appsPersonalization","_this5","_temp","_applyPersonalization","_this6","tiles","fetchTileVisualization","_applyTilesPersonalization","groupId","shouldReload","arguments","length","undefined","_this7","all","_getFavPages","_ref","personalizations","favPages","_getAllFavPageApps","favPageVisualizations","groups","getAggregation","apps","_getGroup","getApps","tile","item","_getItem","color","icon","_getItemPersonalization","setBackgroundColor","setTileIcon","tileGroupId","data","find","oGroup","getGroupId","oApp","getLeanURL","getUrl","isA","isSection","sectionId","BGColor","app","appIds","oldAppId","push","vizId","getVizId","appId","includes","oPersonalization","isRecentlyAddedApp","favPageVisualization","oVisualization","key","_getFavAppIcon","getAppIcon","_this8","getFavoritePages","aFavPages","concat","pageId","pages","_exit","_this9","_temp3","_result","_temp2","loadedPages","reduce","pageIDs","visualization","pageIds","map","page","shouldLoadMissingApps","every","_this9$_favPageVisual","_loadAllPageVisualizations","_this9$_loadAllPageVi","_this9$_favPageVisual2","error","shouldFetchDistinctApps","getBgColor","getServiceAsync","spaceContentService","getPages","oPage","pageData","aPages","Object","values","sections","section","visualizations","targetURL","some","oVizApp","_getAppIcon","favPageIcon","getIcon"],"sources":["BaseAppPersPanel.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Log from \"sap/base/Log\";\nimport GenericTile from \"sap/m/GenericTile\";\nimport Component from \"sap/ui/core/Component\";\nimport type { MetadataOptions } from \"sap/ui/core/Element\";\nimport EventBus from \"sap/ui/core/EventBus\";\nimport Container from \"sap/ushell/Container\";\nimport SpaceContent from \"sap/ushell/services/SpaceContent\";\nimport App from \"./App\";\nimport BaseAppPanel from \"./BaseAppPanel\";\nimport { $BaseAppPersPanelSettings } from \"./BaseAppPersPanel\";\nimport Group from \"./Group\";\nimport { IAppPersonalization, ICustomVisualization, IItemPersonalization } from \"./interface/AppsInterface\";\nimport { IPage } from \"./interface/PageSpaceInterface\";\nimport { DEFAULT_APP_ICON, DEFAULT_BG_COLOR, FALLBACK_ICON, MYHOME_PAGE_ID } from \"./utils/Constants\";\nimport DataFormatUtils from \"./utils/DataFormatUtils\";\nimport PageManager from \"./utils/PageManager\";\nimport PersonalisationUtils from \"./utils/PersonalisationUtils\";\nimport UshellPersonalizer, { IPersonalizationData } from \"./utils/UshellPersonalizer\";\n\n/**\n *\n * Provides the BaseAppPersPanel Class which is BaseAppPanel with personalisation.\n *\n * @extends sap.cux.home.BaseAppPanel\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121.0\n *\n * @abstract\n * @internal\n * @experimental Since 1.121\n * @private\n *\n * @alias sap.cux.home.BaseAppPersPanel\n */\nexport default abstract class BaseAppPersPanel extends BaseAppPanel {\n\tprivate _pageManagerInstance!: PageManager;\n\tprivate _favPageVisualizations: ICustomVisualization[] = [];\n\tprivate _eventBus!: EventBus;\n\n\tconstructor(idOrSettings?: string | $BaseAppPersPanelSettings);\n\tconstructor(id?: string, settings?: $BaseAppPersPanelSettings);\n\tconstructor(id?: string, settings?: $BaseAppPersPanelSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tproperties: {\n\t\t\tpersContainerId: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"hidden\" }\n\t\t}\n\t};\n\n\tpublic init() {\n\t\tsuper.init();\n\t\tthis.setProperty(\"persContainerId\", PersonalisationUtils.getPersContainerId(this));\n\t\tthis._pageManagerInstance = PageManager.getInstance(\n\t\t\tPersonalisationUtils.getPersContainerId(this),\n\t\t\tPersonalisationUtils.getOwnerComponent(this) as Component\n\t\t);\n\t\tthis._eventBus = EventBus.getInstance();\n\n\t\t//apply personalization on page update\n\t\tthis._eventBus.subscribe(\n\t\t\t\"pageChannel\",\n\t\t\t\"pageUpdated\",\n\t\t\t() => {\n\t\t\t\tvoid this.applyPersonalization();\n\t\t\t},\n\t\t\tthis\n\t\t);\n\t}\n\n\t/**\n\t * Retrieves the personalizer instance.\n\t * @returns {Promise<sap.cux.home.UshellPersonalizer>} A promise resolving to the personalizer instance.\n\t * @throws {Error} Throws an error if no container ID is provided for personalization.\n\t * @private\n\t */\n\tprivate async _getPersonalizer() {\n\t\tconst persContainerId = this.getProperty(\"persContainerId\") as string;\n\t\tif (!persContainerId) {\n\t\t\tthrow new Error(\"No Container ID Provided for personalisation!\");\n\t\t}\n\t\tconst personalizer = await UshellPersonalizer?.getInstance(\n\t\t\tpersContainerId,\n\t\t\tPersonalisationUtils.getOwnerComponent(this) as Component\n\t\t);\n\t\treturn personalizer;\n\t}\n\n\t/**\n\t * Retrieves personalization data.\n\t * @returns {Promise<IPersonalizationData>} A promise that resolves with the personalization data.\n\t * @private\n\t */\n\tprotected async getPersonalization() {\n\t\tconst personalizer = await this._getPersonalizer();\n\t\tconst persData = await personalizer?.read();\n\t\treturn persData;\n\t}\n\n\t/**\n\t * Sets the personalization data.\n\t * @param {IPersonalizationData} persData - The personalization data to set.\n\t * @returns {Promise<void>} A promise that resolves when the personalization data is set.\n\t * @private\n\t */\n\tprotected async setPersonalization(persData: IPersonalizationData) {\n\t\tconst personalizer = await this._getPersonalizer();\n\t\tawait personalizer.write(persData);\n\t}\n\n\t/**\n\t * Returns array of personalized favorite apps\n\t *\n\t * @returns {Promise} resolves to return array of personalized favorite apps\n\t */\n\tprotected async _getAppPersonalization() {\n\t\tconst personalization = await this.getPersonalization();\n\t\treturn personalization?.favoriteApps || ([] as IAppPersonalization[]);\n\t}\n\n\t/**\n\t * Sets the personalization data.\n\t * @param {IAppPersonalization[]} appsPersonalization - Personalization data for favorite apps.\n\t * @returns {Promise<void>} A promise that resolves when the personalization data is set.\n\t * @private\n\t */\n\tprotected async setFavAppsPersonalization(appsPersonalization: IAppPersonalization[]): Promise<void> {\n\t\tlet personalization = await this.getPersonalization();\n\t\tif (personalization) {\n\t\t\tpersonalization.favoriteApps = appsPersonalization;\n\t\t\tawait this.setPersonalization(personalization);\n\t\t}\n\t}\n\n\t/**\n\t * Applies personalization settings to the tiles.\n\t * Retrieves tiles from the generated apps wrapper and applies personalization settings to each tile.\n\t * Personalization settings include background color and icon customization.\n\t * @private\n\t * @async\n\t */\n\tpublic async applyPersonalization() {\n\t\tlet tiles = this.fetchTileVisualization();\n\t\treturn await this._applyTilesPersonalization(tiles);\n\t}\n\n\t/**\n\t * Applies personalization settings to the provided tiles.\n\t * @param {Array} tiles - An array of tiles to apply personalization settings to.\n\t * @param {string} [groupId] - Optional group ID for filtering personalization settings.\n\t * @param {boolean} [shouldReload=true] - A flag indicating whether to reload page visualizations.\n\t * @returns {Promise<void>} A promise that resolves when personalization settings are applied to the tiles.\n\t * @private\n\t */\n\tprotected async _applyTilesPersonalization(tiles: GenericTile[], groupId?: string, shouldReload = true) {\n\t\tconst [personalizations, favPages] = await Promise.all([this._getAppPersonalization(), this._getFavPages()]);\n\t\tconst favPageVisualizations = await this._getAllFavPageApps(favPages, shouldReload);\n\t\tconst groups = (this.getAggregation(\"groups\") || []) as Group[];\n\t\tconst apps = groupId ? this._getGroup(groupId)?.getApps() || [] : this.getApps() || [];\n\t\tfor (const tile of tiles) {\n\t\t\tconst item = this._getItem(tile, groups, apps);\n\t\t\tconst { color, icon } = this._getItemPersonalization(item, personalizations, favPageVisualizations, groupId);\n\n\t\t\tif (color) {\n\t\t\t\titem?.setProperty(\"bgColor\", color, true);\n\t\t\t\ttile.setBackgroundColor(color);\n\t\t\t}\n\n\t\t\tif (icon) {\n\t\t\t\titem?.setProperty(\"icon\", icon, true);\n\t\t\t\ttile.setTileIcon(icon);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the corresponding App or Group object associated with the given tile.\n\t * @param {GenericTile} tile - The tile for which to retrieve the corresponding item.\n\t * @param {Group[]} groups - An array of Group objects.\n\t * @param {App[]} apps - An array of App objects.\n\t * @returns {App | Group | undefined} The corresponding App or Group object, or undefined if not found.\n\t * @private\n\t */\n\tprivate _getItem(tile: GenericTile, groups: Group[], apps: App[]): App | Group | undefined {\n\t\tconst tileGroupId = tile.data(\"groupId\") as string | undefined;\n\t\tif (tileGroupId) {\n\t\t\treturn groups.find((oGroup) => oGroup.getGroupId() === tileGroupId);\n\t\t} else {\n\t\t\treturn apps.find((oApp) => DataFormatUtils.getLeanURL(oApp.getUrl()) === tile.getUrl());\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the color and icon associated with the specified item based on personalizations.\n\t * @param {App | Group | undefined} item - The App or Group object for which to retrieve personalization data.\n\t * @param {IAppPersonalization[] | undefined} personalizations - An array of personalization objects.\n\t * @param {ICustomVisualization[]} favPageVisualizations - An array of favorite page visualizations.\n\t * @param {string | undefined} groupId - The ID of the group to which the item belongs.\n\t * @returns {IItemPersonalization} An object containing the color and icon associated with the item.\n\t * @private\n\t */\n\tprivate _getItemPersonalization(\n\t\titem: App | Group | undefined,\n\t\tpersonalizations: IAppPersonalization[] | undefined,\n\t\tfavPageVisualizations: ICustomVisualization[],\n\t\tgroupId?: string\n\t): IItemPersonalization {\n\t\tlet color: string = \"\";\n\t\tlet icon: string = \"\";\n\n\t\tif (!item) return { color, icon };\n\n\t\tif (item.isA(\"sap.cux.home.Group\")) {\n\t\t\tconst personalization = personalizations?.find(\n\t\t\t\t(personalization) => personalization.isSection && personalization.sectionId === (item as Group).getGroupId()\n\t\t\t);\n\t\t\tcolor = personalization?.BGColor as string;\n\t\t} else {\n\t\t\tconst app = item as App;\n\t\t\tconst appIds = [app.getUrl()];\n\t\t\tconst oldAppId = app.data(\"oldAppId\") as string | undefined;\n\t\t\tif (oldAppId) {\n\t\t\t\tappIds.push(oldAppId);\n\t\t\t}\n\t\t\tconst vizId = app.getVizId();\n\t\t\tconst personalization = groupId\n\t\t\t\t? personalizations?.find(\n\t\t\t\t\t\t(personalization) =>\n\t\t\t\t\t\t\t!personalization.isSection &&\n\t\t\t\t\t\t\tpersonalization.sectionId === groupId &&\n\t\t\t\t\t\t\tpersonalization.appId &&\n\t\t\t\t\t\t\tappIds.includes(personalization.appId)\n\t\t\t\t\t)\n\t\t\t\t: personalizations?.find(\n\t\t\t\t\t\t(oPersonalization) =>\n\t\t\t\t\t\t\toPersonalization.isRecentlyAddedApp && oPersonalization.appId && appIds.includes(oPersonalization.appId)\n\t\t\t\t\t);\n\t\t\tconst favPageVisualization = favPageVisualizations.find(\n\t\t\t\t(oVisualization) => oVisualization.vizId === vizId || (oVisualization.appId && appIds.includes(oVisualization.appId))\n\t\t\t);\n\t\t\tcolor = personalization?.BGColor || favPageVisualization?.BGColor || DEFAULT_BG_COLOR().key;\n\t\t\ticon = this?.isA(\"sap.cux.home.FavAppPanel\") ? this._getFavAppIcon(app, favPageVisualization?.icon) : this.getAppIcon();\n\t\t}\n\n\t\treturn { color, icon };\n\t}\n\n\t/**\n\t * Retrieves favorite pages.\n\t * @returns {Promise<Array>} A promise that resolves with an array of favorite pages.\n\t * @private\n\t */\n\tprivate async _getFavPages() {\n\t\tconst aFavPages = await this._pageManagerInstance.getFavoritePages();\n\t\treturn aFavPages.concat({\n\t\t\tpageId: MYHOME_PAGE_ID,\n\t\t\tBGColor: DEFAULT_BG_COLOR().key\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves visualizations for all favorite pages based on the provided parameters.\n\t * @param {Array} pages - An array of favorite pages.\n\t * @param {boolean} shouldReload - A flag indicating whether to reload page visualizations.\n\t * @returns {Promise<Array>} A promise that resolves with an array of favorite page visualizations.\n\t * @private\n\t */\n\tprivate async _getAllFavPageApps(pages: IPage[], shouldReload?: boolean) {\n\t\ttry {\n\t\t\tif (pages) {\n\t\t\t\tthis._favPageVisualizations = this._favPageVisualizations || [];\n\t\t\t\t//Check to ensure that missing visualization data is loaded, if any\n\t\t\t\tconst loadedPages = this._favPageVisualizations.reduce((pageIDs: string[], visualization) => {\n\t\t\t\t\tif (visualization.pageId && !pageIDs.includes(visualization.pageId)) {\n\t\t\t\t\t\tpageIDs.push(visualization.pageId);\n\t\t\t\t\t}\n\t\t\t\t\treturn pageIDs;\n\t\t\t\t}, []);\n\t\t\t\tconst pageIds = pages.map((page) => page.pageId);\n\t\t\t\tconst shouldLoadMissingApps = loadedPages.length === 0 || !loadedPages.every((pageId) => pageIds.includes(pageId));\n\t\t\t\tif (!shouldReload && !shouldLoadMissingApps) {\n\t\t\t\t\treturn this._favPageVisualizations;\n\t\t\t\t} else {\n\t\t\t\t\tthis._favPageVisualizations = await this._loadAllPageVisualizations(pages);\n\t\t\t\t\treturn this._favPageVisualizations;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [];\n\t\t} catch (error) {\n\t\t\tLog.error(error as string);\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/**\n\t * Loads visualizations for all specified pages.\n\t * @param {Array} pages - An array of pages.\n\t * @param {boolean} [shouldFetchDistinctApps=false] - A flag indicating whether to fetch distinct pages.\n\t * @returns {Promise<Array>} A promise that resolves with an array of page visualizations.\n\t * @private\n\t */\n\tprivate async _loadAllPageVisualizations(pages: IPage[], shouldFetchDistinctApps = false) {\n\t\tconst getBgColor = (pageId: string | undefined) => {\n\t\t\treturn pages.find((page) => page.pageId === pageId)?.BGColor ?? DEFAULT_BG_COLOR().key;\n\t\t};\n\n\t\ttry {\n\t\t\tconst favPageVisualizations: ICustomVisualization[] = [];\n\t\t\tconst spaceContentService = await Container.getServiceAsync<SpaceContent>(\"SpaceContent\");\n\t\t\tconst pageData = await spaceContentService.getPages(pages.map((oPage) => oPage.pageId) as string[]);\n\t\t\tconst aPages = Object.values(pageData);\n\n\t\t\tfor (const page of aPages) {\n\t\t\t\tconst sections = page.sections || [];\n\t\t\t\tfor (const section of sections) {\n\t\t\t\t\tconst visualizations = section.visualizations || [];\n\t\t\t\t\tfor (const visualization of visualizations) {\n\t\t\t\t\t\tconst app = {\n\t\t\t\t\t\t\tappId: visualization.targetURL,\n\t\t\t\t\t\t\tvizId: visualization.vizId,\n\t\t\t\t\t\t\ticon: visualization.icon,\n\t\t\t\t\t\t\tBGColor: getBgColor(page.id) as string,\n\t\t\t\t\t\t\tpageId: page.id\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (!shouldFetchDistinctApps || !favPageVisualizations.some((oVizApp) => oVizApp.appId === app.appId)) {\n\t\t\t\t\t\t\tfavPageVisualizations.push(app);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn favPageVisualizations;\n\t\t} catch (error) {\n\t\t\tLog.error(error as string);\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/**\n\t * Returns default app icon.\n\t * @returns {string} The icon URL for the app.\n\t * @private\n\t */\n\tprotected getAppIcon(): string {\n\t\treturn DEFAULT_APP_ICON;\n\t}\n\n\t/**\n\t * Retrieves the icon for the specified app, prioritizing the favorite page icon if available.\n\t * @param {sap.cux.home.App} app - The app object.\n\t * @param {string} favPageIcon - The icon for the app from the favorite page.\n\t * @returns {string} The icon URL for the app.\n\t * @private\n\t */\n\tprivate _getFavAppIcon(app?: App, favPageIcon?: string): string {\n\t\treturn favPageIcon || app?.getIcon() || FALLBACK_ICON;\n\t}\n}\n"],"mappings":"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","ignoreList":[]}