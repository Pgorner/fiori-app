{"version":3,"file":"AppsContainer-dbg.js","names":["sap","ui","define","GenericTile","Panel","sap_m_library","EventBus","Parameters","__BaseContainer","___library","__DataFormatUtils","___utils_Device","_interopRequireDefault","obj","__esModule","default","BackgroundDesign","FrameType","GenericTileMode","GenericTileScope","TileSizeBehavior","BaseContainer","LayoutType","DataFormatUtils","DeviceType","getDefaultAppColor","sLegendName","key","value","get","name","assigned","CONSTANTS","PLACEHOLDER_ITEMS_COUNT","AppsContainer","extend","metadata","events","appsLoaded","parameters","apps","type","tiles","renderer","apiVersion","constructor","_constructor","id","settings","BaseContainer.prototype.constructor.call","this","_isInitialRender","init","_init","BaseContainer.prototype.init.call","setProperty","_i18nBundle","getText","getDeviceType","Mobile","Vertical","_shellNavigationHandler","_onShellNavigated","_oEventBus","getInstance","subscribe","addStyleClass","exit","_exit","unsubscribe","onBeforeRendering","_onBeforeRendering","BaseContainer.prototype.onBeforeRendering.call","_attachPanelSupportedEvent","_removeUnsupportedPanels","isPhone","selectedPanels","getContent","_getSelectedPanel","selectedPanel","fireNavigated","_setApps","_setPanelsDirty","panels","panel","setDesktopViewDirty","setMobileViewDirty","_generatePlaceholder","isLoaded","placeholderApps","generateApps","Array","fill","status","destroyAggregation","setApps","_updatePanelContent","_this","_temp3","isDirty","isMobileDirty","Promise","resolve","loadApps","then","_temp2","getApps","fetchTileVisualization","fireEvent","setLoaded","_temp","isA","applyPersonalization","e","reject","groups","getAggregation","wrapper","_generateMobileAppsWrapper","_generateAppsWrapper","aggregationName","items","_generateMobileCards","_generateTiles","_addWrapperContent","_updatePanelContentVisibility","appsWrapper","_generateDesktopAppsWrapper","mobileAppsWrapper","errorCard","_generateErrorMessage","hasApps","length","setVisible","getParent","setWidth","_getAppTile","app","actions","scope","ActionMore","Display","state","getStatus","mode","IconMode","sizeBehavior","Small","header","getTitle","backgroundColor","getBgColor","tileIcon","getIcon","url","getLeanURL","getUrl","frameType","TwoByHalf","renderOnThemeChange","dropAreaOffset","subheader","getSubTitle","press","_onPress","width","_getGroupTile","group","tileBadge","getNumber","data","getGroupId","_onPanelSelect","event","_this2","BaseContainer.prototype._onPanelSelect.call","_refreshAllPanels","_this3","refreshPanel","_refreshPanel","_this4","_toggleTabView","supportedPanels","filter","isSupported","iconTabBarControl","_getInnerControl","toggleStyleClass","_onPanelSupported","currentPanel","getParameter","setSupported","_togglePanelVisibility","isVisible","panelWrapper","_getPanelContentWrapper","iconTabBar","tabs","getItems","selectedTab","find","tab","getKey","unSupportedPanels","hasListeners","attachSupported","bind","adjustLayout","_adjustLayout","currentLayout","getProperty","newLayout","SideBySide","shouldAdjustLayout","forEach","toggleActionButtons","i","panelItems","slice","backgroundDesign","Solid","height","content","push","map","item","addAggregation"],"sources":["AppsContainer.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport GridContainer from \"sap/f/GridContainer\";\nimport GenericTile from \"sap/m/GenericTile\";\nimport HeaderContainer from \"sap/m/HeaderContainer\";\nimport IconTabBar, { IconTabBar$SelectEvent } from \"sap/m/IconTabBar\";\nimport IconTabFilter from \"sap/m/IconTabFilter\";\nimport Panel from \"sap/m/Panel\";\nimport VBox from \"sap/m/VBox\";\nimport { BackgroundDesign, FrameType, GenericTileMode, GenericTileScope, LoadState, TileSizeBehavior } from \"sap/m/library\";\nimport type { MetadataOptions } from \"sap/ui/core/Element\";\nimport EventBus from \"sap/ui/core/EventBus\";\nimport Parameters from \"sap/ui/core/theming/Parameters\";\nimport App from \"./App\";\nimport BaseApp from \"./BaseApp\";\nimport BaseAppPanel, { BaseAppPanel$SupportedEvent } from \"./BaseAppPanel\";\nimport BaseAppPersPanel from \"./BaseAppPersPanel\";\nimport BaseContainer, { $BaseContainerSettings } from \"./BaseContainer\";\nimport Group from \"./Group\";\nimport MenuItem from \"./MenuItem\";\nimport { ICustomVisualization } from \"./interface/AppsInterface\";\nimport { LayoutType } from \"./library\";\nimport DataFormatUtils from \"./utils/DataFormatUtils\";\nimport { DeviceType } from \"./utils/Device\";\n\nconst getDefaultAppColor = () => {\n\tconst sLegendName = \"sapLegendColor9\";\n\treturn {\n\t\tkey: sLegendName,\n\t\tvalue: Parameters.get({\n\t\t\tname: sLegendName\n\t\t}),\n\t\tassigned: false\n\t};\n};\n\nconst CONSTANTS = {\n\tPLACEHOLDER_ITEMS_COUNT: 5\n};\n\n/**\n *\n * Container class for managing and storing apps.\n *\n * @extends sap.cux.home.BaseContainer\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @internal\n * @experimental Since 1.121\n * @public\n *\n * @alias sap.cux.home.AppsContainer\n */\nexport default class AppsContainer extends BaseContainer {\n\tprivate _oEventBus!: EventBus;\n\tprivate _shellNavigationHandler!: () => void;\n\tprivate _isInitialRender = true;\n\tstatic readonly renderer = {\n\t\t...BaseContainer.renderer,\n\t\tapiVersion: 2\n\t};\n\tstatic readonly metadata: MetadataOptions = {\n\t\tevents: {\n\t\t\t/**\n\t\t\t * Event is fired when apps are loaded.\n\t\t\t */\n\t\t\tappsLoaded: {\n\t\t\t\tparameters: {\n\t\t\t\t\tapps: { type: \"App[]\" },\n\t\t\t\t\ttiles: { type: \"GenericTile[]\" }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Constructor for a new app container.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $BaseContainerSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tsuper.init();\n\t\tthis.setProperty(\"title\", this._i18nBundle?.getText(\"appsTitle\"));\n\t\tif (this.getDeviceType() === DeviceType.Mobile) {\n\t\t\tthis.setProperty(\"layout\", LayoutType.Vertical);\n\t\t}\n\t\tthis._shellNavigationHandler = () => this._onShellNavigated();\n\t\tthis._oEventBus = EventBus.getInstance();\n\t\tthis._oEventBus?.subscribe(\"sap.ushell\", \"navigated\", this._shellNavigationHandler);\n\t\tthis.addStyleClass(\"sapCuxAppsContainer\");\n\t}\n\n\t/**\n\t * Exit lifecycle method\n\t * Clean up event handlers\n\t * @private\n\t */\n\tpublic exit(): void {\n\t\tthis._oEventBus?.unsubscribe(\"sap.ushell\", \"navigated\", this._shellNavigationHandler);\n\t}\n\n\t/**\n\t * onBeforeRendering lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic onBeforeRendering() {\n\t\tsuper.onBeforeRendering();\n\n\t\tif (this._isInitialRender) {\n\t\t\tthis._isInitialRender = false;\n\t\t\tthis._attachPanelSupportedEvent();\n\t\t\tthis._removeUnsupportedPanels();\n\t\t}\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst selectedPanels = (isPhone ? this.getContent() : [this._getSelectedPanel()]) as BaseAppPanel[];\n\t\tfor (const selectedPanel of selectedPanels) {\n\t\t\tselectedPanel.fireNavigated();\n\t\t\tvoid this._setApps(selectedPanel);\n\t\t}\n\t}\n\n\t/**\n\t * Handler for navigation event.\n\t * @private\n\t * Sets the panels dirty if navigated to different page.\n\t */\n\tprivate _onShellNavigated(): void {\n\t\tthis._setPanelsDirty();\n\t}\n\n\t/**\n\t * Set all panels dirty state to true, to refresh all panels\n\t * @private\n\t */\n\tprivate _setPanelsDirty(): void {\n\t\tconst panels = this.getContent() as BaseAppPanel[];\n\t\tfor (const panel of panels) {\n\t\t\tpanel.setDesktopViewDirty(true);\n\t\t\tpanel.setMobileViewDirty(true);\n\t\t}\n\t}\n\n\t/**\n\t * Generate placeholer for the panel.\n\t * @private\n\t * @param {BaseAppPanel} panel - Panel for which placeholders has to be generated.\n\t */\n\tprivate _generatePlaceholder(panel: BaseAppPanel): void {\n\t\tif (!panel.isLoaded()) {\n\t\t\tconst placeholderApps = panel.generateApps(\n\t\t\t\tnew Array(CONSTANTS.PLACEHOLDER_ITEMS_COUNT).fill({ status: \"Loading\" }) as ICustomVisualization[]\n\t\t\t);\n\t\t\tpanel.destroyAggregation(\"apps\", true);\n\t\t\tpanel.setApps(placeholderApps);\n\t\t\tthis._updatePanelContent(panel);\n\t\t}\n\t}\n\n\t/**\n\t * Loads and sets the apps.\n\t * @private\n\t * @param {BaseAppPanel} panel - Panel for which apps has to be loaded.\n\t * @returns {Promise<void>} resolves when apps are loaded.\n\t */\n\tprivate async _setApps(panel: BaseAppPanel): Promise<void> {\n\t\t// only load the apps if panel is in dirty state\n\t\tif (panel.isDirty() && panel.isMobileDirty()) {\n\t\t\tthis._generatePlaceholder(panel);\n\t\t\tawait panel.loadApps?.();\n\t\t\tif (this.getDeviceType() === DeviceType.Mobile) {\n\t\t\t\tpanel.setMobileViewDirty(false);\n\t\t\t} else {\n\t\t\t\tpanel.setDesktopViewDirty(false);\n\t\t\t}\n\t\t\tpanel.setLoaded(true);\n\t\t\tthis._updatePanelContent(panel);\n\n\t\t\tif (panel.isA(\"sap.cux.home.BaseAppPersPanel\")) {\n\t\t\t\tawait (panel as BaseAppPersPanel).applyPersonalization();\n\t\t\t}\n\t\t\tlet tiles: GenericTile[] = [];\n\t\t\tlet apps = panel.getApps();\n\t\t\ttiles = panel.fetchTileVisualization(tiles);\n\t\t\tthis.fireEvent(\"appsLoaded\", { apps, tiles });\n\t\t}\n\t}\n\n\t/**\n\t * Updates the content of the panel by replacing existing items with new apps and groups.\n\t * This method selects the appropriate wrapper based on the device type, and add apps/group or mobile cards to the wrapper.\n\t *\n\t * @param {BaseAppPanel} panel - The panel whose content needs to be updated.\n\t * @returns {void}\n\t * @private\n\t */\n\tprivate _updatePanelContent(panel: BaseAppPanel): void {\n\t\tconst apps = panel.getApps() || [];\n\t\tconst groups = (panel.getAggregation(\"groups\") || []) as Group[];\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst wrapper = isPhone ? panel._generateMobileAppsWrapper() : panel._generateAppsWrapper();\n\t\tconst aggregationName = isPhone ? \"content\" : \"items\";\n\t\twrapper.destroyAggregation(aggregationName);\n\t\tlet items = isPhone ? this._generateMobileCards([...groups, ...apps]) : this._generateTiles([...groups, ...apps]);\n\t\tthis._addWrapperContent(wrapper, items, aggregationName);\n\t\tthis._updatePanelContentVisibility(panel);\n\t}\n\n\t/**\n\t * Updates the visibility of the panel's content based on the current state and device type.\n\t * This method determines whether to display the apps or an error message based on the presence of apps and groups.\n\t * It also adjusts the visibility of different containers depending on whether the device is a phone or not.\n\t *\n\t * @param {BaseAppPanel} panel - The panel whose content visibility needs to be updated.\n\t * @returns {void}\n\t * @private\n\t */\n\tprivate _updatePanelContentVisibility(panel: BaseAppPanel): void {\n\t\tconst apps = panel.getApps() || [];\n\t\tconst groups = (panel.getAggregation(\"groups\") || []) as Group[];\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst appsWrapper = panel._generateDesktopAppsWrapper();\n\t\tconst mobileAppsWrapper = panel._generateMobileAppsWrapper();\n\t\tconst errorCard = panel._generateErrorMessage();\n\t\tconst hasApps = [...apps, ...groups].length !== 0;\n\t\tappsWrapper.setVisible(hasApps && !isPhone);\n\t\tmobileAppsWrapper.setVisible(hasApps && isPhone);\n\t\t(mobileAppsWrapper.getParent() as VBox).setWidth(isPhone && hasApps ? \"100%\" : \"auto\");\n\t\terrorCard.setVisible(!hasApps);\n\t}\n\n\t/**\n\t * Generates generic tile based on app.\n\t * @private\n\t * @param {sap.cux.home.App} app - App.\n\t * @returns {sap.m.GenericTile}.\n\t */\n\tpublic _getAppTile(app: App): GenericTile {\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst actions = (app.getAggregation(\"menuItems\") || []) as MenuItem[];\n\t\treturn new GenericTile(\"\", {\n\t\t\tscope: actions.length && !isPhone ? GenericTileScope.ActionMore : GenericTileScope.Display,\n\t\t\tstate: app.getStatus() as LoadState,\n\t\t\tmode: GenericTileMode.IconMode,\n\t\t\tsizeBehavior: TileSizeBehavior.Small,\n\t\t\theader: app.getTitle(),\n\t\t\tbackgroundColor: app.getBgColor() || getDefaultAppColor()?.key,\n\t\t\ttileIcon: app.getIcon(),\n\t\t\turl: DataFormatUtils.getLeanURL(app.getUrl()),\n\t\t\tframeType: FrameType.TwoByHalf,\n\t\t\trenderOnThemeChange: true,\n\t\t\tdropAreaOffset: 4,\n\t\t\tsubheader: app.getSubTitle(),\n\t\t\tpress: (e) => app._onPress(e),\n\t\t\twidth: isPhone ? \"15rem\" : \"auto\"\n\t\t}).addStyleClass(\"sapMGTTwoByHalf tileLayout\");\n\t}\n\n\t/**\n\t * Generates generic tile based on group.\n\t * @private\n\t * @param {sap.cux.home.Group} group - Group.\n\t * @returns {sap.m.GenericTile}.\n\t */\n\tprivate _getGroupTile(group: Group): GenericTile {\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst actions = (group.getAggregation(\"menuItems\") || []) as MenuItem[];\n\t\treturn new GenericTile(\"\", {\n\t\t\tscope: actions.length && !isPhone ? GenericTileScope.ActionMore : GenericTileScope.Display,\n\t\t\tstate: group.getStatus() as LoadState,\n\t\t\tmode: GenericTileMode.IconMode,\n\t\t\tsizeBehavior: TileSizeBehavior.Small,\n\t\t\theader: group.getTitle(),\n\t\t\tbackgroundColor: group.getBgColor() || getDefaultAppColor()?.key,\n\t\t\ttileIcon: group.getIcon(),\n\t\t\tframeType: FrameType.TwoByHalf,\n\t\t\trenderOnThemeChange: true,\n\t\t\tdropAreaOffset: 4,\n\t\t\ttileBadge: group.getNumber(),\n\t\t\tpress: (e) => group._onPress(e),\n\t\t\twidth: isPhone ? \"15rem\" : \"auto\"\n\t\t})\n\t\t\t.addStyleClass(\"sapMGTTwoByHalf tileLayout\")\n\t\t\t.data(\"groupId\", group.getGroupId()) as GenericTile;\n\t}\n\n\t/**\n\t * Overridden method for selection of panel in the IconTabBar.\n\t * Loads the apps in selected panel\n\t * @private\n\t * @returns {Promise<void>} resolves when apps are loaded on panel selection.\n\t */\n\tprotected async _onPanelSelect(event: IconTabBar$SelectEvent) {\n\t\tsuper._onPanelSelect(event);\n\t\tconst selectedPanel = this._getSelectedPanel() as BaseAppPanel;\n\t\tawait this._setApps(selectedPanel);\n\t}\n\n\t/**\n\t * Refresh apps for all the panels.\n\t * @private\n\t * @returns {Promise<void>} resolves when all panels are set to dirty and apps for current panel are refreshed.\n\t */\n\tpublic async _refreshAllPanels(): Promise<void> {\n\t\t//set all panels to dirty\n\t\tthis._setPanelsDirty();\n\t\t//set apps for current section\n\t\tawait this._setApps(this._getSelectedPanel() as BaseAppPanel);\n\t}\n\n\t/**\n\t * Refresh apps for selected panel.\n\t * @private\n\t * @param {BaseAppPanel} panel - Panel that has be refreshed.\n\t * @returns {Promise<void>} resolves when apps are refreshed.\n\t */\n\tpublic async refreshPanel(panel: BaseAppPanel): Promise<void> {\n\t\tpanel.setMobileViewDirty(true);\n\t\tpanel.setDesktopViewDirty(true);\n\t\tawait this._setApps(panel);\n\t}\n\n\t/**\n\t * Toggles the visibility of the tab view based on the supported panels.\n\t * @private\n\t */\n\tprivate _toggleTabView() {\n\t\tif (this.getDeviceType() !== DeviceType.Mobile) {\n\t\t\tconst panels = this.getContent() as BaseAppPanel[];\n\t\t\tconst supportedPanels = panels.filter((panel) => panel.isSupported());\n\t\t\tconst iconTabBarControl = this._getInnerControl() as IconTabBar;\n\t\t\ticonTabBarControl?.toggleStyleClass(\"sapUiITBHide\", supportedPanels.length === 1);\n\t\t}\n\t}\n\n\t/**\n\t * Handles the supported state of the current panel.\n\t * If the panel is supported, it adds the panel to the content.\n\t * If the panel is not supported, it removes the panel from the content.\n\t * @param {BaseAppPanel} currentPanel - The panel to handle the supported state for.\n\t * @private\n\t */\n\tprivate _onPanelSupported(currentPanel: BaseAppPanel, event: BaseAppPanel$SupportedEvent) {\n\t\tconst isSupported = event.getParameter(\"isSupported\") as boolean;\n\t\tcurrentPanel.setSupported(isSupported);\n\t\tthis._togglePanelVisibility(currentPanel, isSupported);\n\t\tthis._toggleTabView();\n\t}\n\n\t/**\n\t * Toggles the visibility of the panel.\n\t * @param {BaseAppPanel} panel - The panel to toggle the visibility for.\n\t * @param {boolean} isVisible - The visibility state of the panel.\n\t * @private\n\t */\n\tprivate _togglePanelVisibility(panel: BaseAppPanel, isVisible: boolean) {\n\t\tif (this.getDeviceType() === DeviceType.Mobile) {\n\t\t\tconst panelWrapper = this._getPanelContentWrapper(panel);\n\t\t\tpanelWrapper.setVisible(isVisible);\n\t\t} else {\n\t\t\tconst iconTabBar = this._getInnerControl() as IconTabBar;\n\t\t\tconst tabs = (iconTabBar?.getItems() as IconTabFilter[]) || [];\n\t\t\tconst selectedTab = tabs.find((tab) => tab.getKey() === panel.getKey());\n\t\t\tselectedTab?.setVisible(isVisible);\n\t\t}\n\t}\n\n\t/**\n\t * Removes unsupported panels from the container.\n\t * @private\n\t */\n\tprivate _removeUnsupportedPanels() {\n\t\tconst panels = this.getContent() as BaseAppPanel[];\n\t\tconst unSupportedPanels = panels.filter((panel) => !panel.isSupported());\n\t\tfor (const panel of unSupportedPanels) {\n\t\t\tthis._togglePanelVisibility(panel, false);\n\t\t}\n\t\tthis._toggleTabView();\n\t}\n\n\t/**\n\t * Attaches an event handler to the \"supported\" event for each panel in the container.\n\t * @private\n\t */\n\tprivate _attachPanelSupportedEvent() {\n\t\tconst panels = this.getContent() as BaseAppPanel[];\n\t\tfor (const panel of panels) {\n\t\t\tif (!panel.hasListeners(\"supported\")) {\n\t\t\t\tpanel.attachSupported(this._onPanelSupported.bind(this, panel));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Adjusts the layout and visibility based on the device type.\n\t *\n\t * This method adjusts the layout type and visibility of containers based on whether the device is a phone\n\t * or not. It sets the container's layout property, toggles visibility of panels and their containers, and\n\t * adjusts background design accordingly.\n\t *\n\t * @private\n\t * @returns {void}\n\t */\n\tpublic adjustLayout(): void {\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst currentLayout = this.getProperty(\"layout\") as LayoutType;\n\t\tconst newLayout = isPhone ? LayoutType.Vertical : LayoutType.SideBySide;\n\t\tconst shouldAdjustLayout = currentLayout !== newLayout;\n\t\tif (!shouldAdjustLayout) {\n\t\t\treturn;\n\t\t}\n\t\tthis.setProperty(\"layout\", newLayout);\n\t\tconst panels = this.getContent() as BaseAppPanel[];\n\t\tpanels.forEach((panel) => {\n\t\t\t//if both the panels are dirty, then updated data will be loaded from onBeforeRendering, as layout change will trigger re-rendering\n\t\t\t//if both the panels are not dirty, i.e. doen't have any changes, then just toggle the visibility\n\t\t\tif (!panel.isDirty() && !panel.isMobileDirty()) {\n\t\t\t\tthis._updatePanelContentVisibility(panel);\n\t\t\t} else if (panel.isDirty() !== panel.isMobileDirty()) {\n\t\t\t\t//if one of the panels is dirty i.e. have updated data and other is not, then re-create the inner controls\n\t\t\t\tpanel.setDesktopViewDirty(false);\n\t\t\t\tpanel.setMobileViewDirty(false);\n\t\t\t\tthis._updatePanelContent(panel);\n\t\t\t}\n\t\t});\n\t\t//hide actions if the device is a phone\n\t\tthis.toggleActionButtons(!isPhone);\n\n\t\t//this is to handle scenario when unsupported propert is changed and then layout is changed.\n\t\tthis._removeUnsupportedPanels();\n\t}\n\n\t/**\n\t * Generates mobile card panel and add given apps/groups in the panel.\n\t *\n\t * @private\n\t * @returns {sap.m.Panel} The newly created mobile card panel.\n\t */\n\tprivate _generateMobileCards(items: BaseApp[]): Panel[] {\n\t\tconst panels: Panel[] = [];\n\t\tfor (let i = 0; i < items.length; i += 7) {\n\t\t\tconst panelItems = items.slice(i, i + 7);\n\t\t\tconst panel = new Panel({\n\t\t\t\tbackgroundDesign: BackgroundDesign.Solid,\n\t\t\t\theight: \"23.5rem\",\n\t\t\t\twidth: \"17rem\",\n\t\t\t\tcontent: this._generateTiles(panelItems)\n\t\t\t}).addStyleClass(\"sapUiMobileAppsCard\");\n\t\t\tpanels.push(panel);\n\t\t}\n\t\treturn panels;\n\t}\n\n\t/**\n\t * Generates group/app generic tiles for given apps/groups.\n\t *\n\t * @private\n\t * @param {BaseApp[]} items - Apps/Groups for which tiles has to be generated.\n\t * @returns {sap.m.GenericTile[]} The generated tiles.\n\t */\n\tprivate _generateTiles(items: BaseApp[]): GenericTile[] {\n\t\treturn items.map((item) => (item.isA(\"sap.cux.home.Group\") ? this._getGroupTile(item as Group) : this._getAppTile(item as App)));\n\t}\n\n\t/**\n\t * Adds given items into the wrapper.\n\t * @param {HeaderContainer | GridContainer} wrapper - wrapper for which items has to be added.\n\t * @param {Panel[] | GenericTile[]} items - items to be added.\n\t * @param {string} aggregationName - aggregation name to which items has to be added.\n\t * @private\n\t */\n\tprivate _addWrapperContent(wrapper: HeaderContainer | GridContainer, items: Panel[] | GenericTile[], aggregationName: string) {\n\t\twrapper.destroyAggregation(aggregationName);\n\t\titems.forEach((item) => {\n\t\t\twrapper.addAggregation(aggregationName, item);\n\t\t});\n\t}\n}\n"],"mappings":"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","ignoreList":[]}