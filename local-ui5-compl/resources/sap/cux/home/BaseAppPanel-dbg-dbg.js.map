{"version":3,"file":"BaseAppPanel-dbg-dbg.js","names":["sap","ui","define","Log","GridContainer","GridContainerSettings","HeaderContainer","IllustratedMessage","IllustratedMessageSize","IllustratedMessageType","MessageToast","VBox","sap_m_library","Config","Container","__App","__BasePanel","__AppManager","___utils_Device","_interopRequireDefault","obj","__esModule","default","_catch","body","recover","result","e","then","BackgroundDesign","_finallyRethrows","finalizer","bind","App","BasePanel","AppManager","DeviceType","BaseAppPanel","extend","metadata","library","defaultAggregation","aggregations","apps","type","singularName","multiple","events","navigated","supported","parameters","isSupported","constructor","_constructor","id","settings","BasePanel.prototype.constructor.call","_isDirty","_isMobileDirty","_isLoaded","_isSupported","_setAggregation","control","items","arguments","length","undefined","aggregationName","forEach","oItem","addAggregation","init","_init","BasePanel.prototype.init.call","appManagerInstance","getInstance","_controlMap","Map","_appsPanelWrapper","_generateWrapper","_addContent","getId","_generateDesktopAppsWrapper","_generateMobileAppsWrapper","_generateErrorMessage","width","addStyleClass","controlId","get","set","_generateAppsWrapper","visible","getDeviceType","Mobile","backgroundDesign","Solid","_appsWrapper","layout","columnSize","gap","_mobileAppsWrapper","gridLayout","showDividers","height","content","_errorCard","wrap","generateIllustratedMessage","getApps","justifyContent","setHeight","generateApps","_generateApps","visualizationsData","map","visualizationData","app","title","subTitle","subtitle","bgColor","BGColor","icon","url","vizId","visualization","status","oldAppId","data","menuItems","menuItem","setApps","_setApps","fetchTileVisualization","_fetchTileVisualization","tiles","cards","getContent","card","concat","getItems","convertActivitiesToVisualizations","_convertActivitiesToVisualizations","activities","_this","Promise","resolve","all","_getAllAvailableVisualizations","getServiceAsync","_ref","availableVisualizations","URLParsingService","appActivities","filter","activity","appType","orgAppId","appId","visualizations","_convertToVisualization","_updateVisualizationAvailability","reject","_this2","_temp2","_allAvailableVisualizations","_temp","_getCatalogApps","catalogApps","reduce","catalogApp","_this3","fetchFavVizs","favoriteVisualizations","addedInFavorites","some","favoriteVisualization","_updateActivityInfo","updatedVizConfig","_catalogVisualizationCache","targetURL","_findBestMatchingVisualization","matchingVisualizations","matchedVisualization","find","matchingViz","matchedVisualizationCache","matchedVisualizations","viz","params","parseShellHash","prio","push","filteredVisualizations","_filterMatchingVisualization","sort","val1","val2","parshedShellHash","activityParameters","activityParameterKeys","Object","keys","visualizationParams","visualizationParamKeys","key","bMatch","every","includes","catalogVisualizations","catalogVisualization","target","semanticObject","action","_addAppToFavorites","event","_this4","setBusy","source","getSource","getParent","getVizId","_temp3","addVisualization","_refreshAllPanels","message","_i18nBundle","getText","getTitle","show","error","_wasThrown","_result","isLoaded","setLoaded","_setLoaded","val","isDirty","setDesktopViewDirty","_setDesktopViewDirty","isMobileDirty","setMobileViewDirty","_setMobileViewDirty","_setBusy","isBusy","oAppsWrapper","_getGroup","groupId","groups","getAggregation","group","getGroupId","setSupported","_setSupported","_attachUserActivityTracking","last","on","do","isTrackingActivityEnabled","fireSupported","refresh","_refresh","_this5","refreshPanel","_generateIllustratedMessage","_errorMessage","illustrationSize","Spot","illustrationType","AddColumn","description"],"sources":["BaseAppPanel.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Log from \"sap/base/Log\";\nimport GridContainer from \"sap/f/GridContainer\";\nimport GridContainerSettings from \"sap/f/GridContainerSettings\";\nimport Button from \"sap/m/Button\";\nimport GenericTile from \"sap/m/GenericTile\";\nimport HeaderContainer from \"sap/m/HeaderContainer\";\nimport IllustratedMessage from \"sap/m/IllustratedMessage\";\nimport IllustratedMessageSize from \"sap/m/IllustratedMessageSize\";\nimport IllustratedMessageType from \"sap/m/IllustratedMessageType\";\nimport MessageToast from \"sap/m/MessageToast\";\nimport Panel from \"sap/m/Panel\";\nimport VBox from \"sap/m/VBox\";\nimport { BackgroundDesign } from \"sap/m/library\";\nimport Event from \"sap/ui/base/Event\";\nimport Control from \"sap/ui/core/Control\";\nimport type { MetadataOptions } from \"sap/ui/core/Element\";\nimport Config from \"sap/ushell/Config\";\nimport Container from \"sap/ushell/Container\";\nimport URLParsing from \"sap/ushell/services/URLParsing\";\nimport App from \"./App\";\nimport AppsContainer from \"./AppsContainer\";\nimport { $BaseAppPanelSettings } from \"./BaseAppPanel\";\nimport BasePanel from \"./BasePanel\";\nimport Group from \"./Group\";\nimport MenuItem from \"./MenuItem\";\nimport { IActivity, ICustomVisualization, IVisualization } from \"./interface/AppsInterface\";\nimport AppManager from \"./utils/AppManager\";\nimport { DeviceType } from \"./utils/Device\";\n\n/**\n *\n * Base App Panel class for managing and storing Apps.\n *\n * @extends sap.cux.home.BasePanel\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121.0\n *\n * @abstract\n * @internal\n * @experimental Since 1.121\n * @private\n *\n * @alias sap.cux.home.BaseAppPanel\n */\n\nexport default abstract class BaseAppPanel extends BasePanel {\n\tprivate _isDirty: boolean = true;\n\tprivate _isMobileDirty: boolean = true;\n\tprivate _isLoaded: boolean = false;\n\tprivate _appsWrapper!: GridContainer;\n\tprivate _errorCard!: VBox;\n\tprivate _errorMessage!: IllustratedMessage;\n\tprivate _appsPanelWrapper!: VBox;\n\tprivate _allAvailableVisualizations!: IVisualization[];\n\tprivate _catalogVisualizationCache!: Map<string, IVisualization>;\n\tprotected appManagerInstance!: AppManager;\n\tprivate _isSupported: boolean = true;\n\tprivate _mobileAppsWrapper!: HeaderContainer;\n\tprotected _menuItems!: MenuItem[];\n\tprotected _actionButtons!: Button[];\n\tprotected _controlMap!: Map<string, Control | Element>;\n\n\tconstructor(idOrSettings?: string | $BaseAppPanelSettings);\n\tconstructor(id?: string, settings?: $BaseAppPanelSettings);\n\tconstructor(id?: string, settings?: $BaseAppPanelSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tdefaultAggregation: \"apps\",\n\t\taggregations: {\n\t\t\t/**\n\t\t\t * Holds the apps aggregation\n\t\t\t */\n\t\t\tapps: { type: \"sap.cux.home.App\", singularName: \"app\", multiple: true }\n\t\t},\n\t\tevents: {\n\t\t\t/**\n\t\t\t * Fired when OnBeforeRendering of container is triggered.\n\t\t\t */\n\t\t\tnavigated: {},\n\t\t\t/**\n\t\t\t * Fired when the panel supported property is changed.\n\t\t\t */\n\t\t\tsupported: {\n\t\t\t\tparameters: {\n\t\t\t\t\tisSupported: { type: \"boolean\" }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * This method must be implemented by panel, to set the apps that needs to be shown in the panel.\n\t * @abstract\n\t */\n\tabstract loadApps(): Promise<void>;\n\n\tpublic init() {\n\t\tsuper.init();\n\t\tthis.appManagerInstance = AppManager.getInstance();\n\t\tthis._controlMap = new Map();\n\t\t//Add Wrapper to Panel\n\t\tthis._appsPanelWrapper = this._generateWrapper();\n\t\tthis._addContent(this._appsPanelWrapper);\n\t}\n\n\t/**\n\t * Generates the wrapper for the apps panel, if it doesn't already exist\n\t *\n\t * @private\n\t * @override\n\t * @returns {sap.m.VBox} The apps panel wrapper.\n\t */\n\tprotected _generateWrapper() {\n\t\tif (!this._appsPanelWrapper) {\n\t\t\tthis._appsPanelWrapper = new VBox(`${this.getId()}-appsPanelWrapper`, {\n\t\t\t\titems: [this._generateDesktopAppsWrapper(), this._generateMobileAppsWrapper(), this._generateErrorMessage()],\n\t\t\t\twidth: \"100%\"\n\t\t\t}).addStyleClass(\"sapCuxAppsPanel sapCuxAppsContainerBorder\");\n\t\t}\n\t\treturn this._appsPanelWrapper;\n\t}\n\n\t/**\n\t * Generates desktop apps wrapper for displaying apps.\n\t * @private\n\t * @returns {sap.m.VBox} The generated apps wrapper.\n\t */\n\tpublic _generateDesktopAppsWrapper() {\n\t\tconst controlId = `${this.getId()}-desktopAppsWrapper`;\n\t\tif (!this._controlMap.get(controlId)) {\n\t\t\tthis._controlMap.set(\n\t\t\t\tcontrolId,\n\t\t\t\tnew VBox({\n\t\t\t\t\tid: `${this.getId()}-desktopAppsWrapper`,\n\t\t\t\t\titems: [this._generateAppsWrapper()],\n\t\t\t\t\tvisible: this.getDeviceType() !== DeviceType.Mobile,\n\t\t\t\t\tbackgroundDesign: BackgroundDesign.Solid\n\t\t\t\t}).addStyleClass(\"sapCuxAppsPanel sapCuxAppsContainerBorder\")\n\t\t\t);\n\t\t}\n\t\treturn this._controlMap.get(controlId) as VBox;\n\t}\n\n\t/**\n\t * Generates app wrapper (GridContainer) for displaying apps.\n\t * @private\n\t * @returns {sap.m.GridContainer} The generated apps wrapper.\n\t */\n\tpublic _generateAppsWrapper(): GridContainer {\n\t\t//create container\n\t\tif (!this._appsWrapper) {\n\t\t\tthis._appsWrapper = new GridContainer({\n\t\t\t\tid: `${this.getId()}-appsWrapper`,\n\t\t\t\tlayout: new GridContainerSettings({\n\t\t\t\t\tcolumnSize: \"19rem\",\n\t\t\t\t\tgap: \"0.5rem\"\n\t\t\t\t}),\n\t\t\t\tvisible: this.getDeviceType() !== DeviceType.Mobile\n\t\t\t});\n\t\t}\n\t\treturn this._appsWrapper;\n\t}\n\n\t/**\n\t * Generates wrapper for displaying apps in mobile mode.\n\t * @private\n\t * @returns {sap.m.HeaderContainer} The generated apps wrapper.\n\t */\n\tpublic _generateMobileAppsWrapper() {\n\t\tif (!this._mobileAppsWrapper) {\n\t\t\tthis._mobileAppsWrapper = new HeaderContainer({\n\t\t\t\tid: `${this.getId()}-mobileAppsWrapper`,\n\t\t\t\tgridLayout: true,\n\t\t\t\tshowDividers: false,\n\t\t\t\theight: \"23.5rem\",\n\t\t\t\tcontent: [],\n\t\t\t\tvisible: this.getDeviceType() === DeviceType.Mobile\n\t\t\t}).addStyleClass(\"sapUiMargin-26Bottom sapMHeaderContainerAlign\");\n\t\t}\n\t\treturn this._mobileAppsWrapper;\n\t}\n\n\t/**\n\t * Generates the error message wrapper with illustrated message.\n\t * @private\n\t * @returns {sap.m.VBox} Wrapper with illustrated message.\n\t */\n\tpublic _generateErrorMessage(): VBox {\n\t\tif (!this._errorCard) {\n\t\t\tthis._errorCard = new VBox(`${this.getId()}-errorCard`, {\n\t\t\t\twrap: \"Wrap\",\n\t\t\t\tbackgroundDesign: \"Solid\",\n\t\t\t\titems: [this.generateIllustratedMessage()],\n\t\t\t\tvisible: this.getApps().length === 0,\n\t\t\t\tjustifyContent: \"Center\"\n\t\t\t}).addStyleClass(\"sapCuxAppsPanel\");\n\t\t}\n\t\tthis._errorCard.setHeight(this.getDeviceType() === DeviceType.Mobile ? \"23.5rem\" : \"auto\");\n\t\treturn this._errorCard;\n\t}\n\n\t/**\n\t * Creates and returns app instances for given app objects\n\t * @private\n\t * @param {object[]} appObjects - Array of app object.\n\t * @returns {sap.cux.home.App[]} - Array of app instances\n\t */\n\tpublic generateApps(visualizationsData: ICustomVisualization[]) {\n\t\treturn visualizationsData.map((visualizationData) => {\n\t\t\tconst app = new App(\"\", {\n\t\t\t\ttitle: visualizationData.title,\n\t\t\t\tsubTitle: visualizationData.subtitle,\n\t\t\t\tbgColor: visualizationData.BGColor,\n\t\t\t\ticon: visualizationData.icon,\n\t\t\t\turl: visualizationData.url,\n\t\t\t\tvizId: visualizationData.vizId || visualizationData.visualization?.vizId,\n\t\t\t\tstatus: visualizationData.status\n\t\t\t});\n\t\t\tif (visualizationData.oldAppId) {\n\t\t\t\tapp.data(\"oldAppId\", visualizationData.oldAppId);\n\t\t\t}\n\t\t\tvisualizationData.menuItems?.forEach((menuItem) => {\n\t\t\t\tapp.addAggregation(\"menuItems\", menuItem, true);\n\t\t\t});\n\t\t\treturn app;\n\t\t});\n\t}\n\n\t/**\n\t * Add multiple apps in the apps aggregation.\n\t * @param {sap.cux.home.App[]} apps - Array of apps.\n\t */\n\tpublic setApps(apps: App[]) {\n\t\tapps.forEach((app) => {\n\t\t\tthis.addAggregation(\"apps\", app, true);\n\t\t});\n\t}\n\n\t/**\n\t * Fetches and returns the tile visualizations for the current device type (Mobile or Desktop).\n\t *\n\t * @public\n\t * @param {GenericTile[]} tiles - This array will be updated with new tile data based on the device type.\n\t *\n\t * @returns {GenericTile[]} - returns updated tiles\n\t */\n\tpublic fetchTileVisualization(tiles: GenericTile[] = []): GenericTile[] {\n\t\tif (this.getDeviceType() === DeviceType.Mobile) {\n\t\t\tconst cards = (this._generateMobileAppsWrapper()?.getContent() || []) as Panel[];\n\t\t\tfor (const card of cards) {\n\t\t\t\ttiles = tiles.concat((card?.getContent() || []) as GenericTile[]);\n\t\t\t}\n\t\t} else {\n\t\t\ttiles = (this._generateAppsWrapper()?.getItems() || []) as GenericTile[];\n\t\t}\n\t\treturn tiles;\n\t}\n\n\t/**\n\t * Convert array of provided activities to app\n\t * @private\n\t * @param {object[]} activities - Array of activities.\n\t * @returns {object[]} - Array of apps\n\t */\n\tprotected async convertActivitiesToVisualizations(activities: IActivity[]) {\n\t\tconst [availableVisualizations, URLParsingService] = await Promise.all([\n\t\t\tthis._getAllAvailableVisualizations(),\n\t\t\tContainer.getServiceAsync<URLParsing>(\"URLParsing\")\n\t\t]);\n\t\tconst appActivities = activities\n\t\t\t.filter((activity) => activity.appType === \"Application\")\n\t\t\t.map((activity) => {\n\t\t\t\tactivity.orgAppId = activity.appId;\n\t\t\t\tactivity.appId = activity.url;\n\t\t\t\treturn activity;\n\t\t\t});\n\t\tconst visualizations = appActivities\n\t\t\t.map((activity) => this._convertToVisualization(activity, availableVisualizations, URLParsingService))\n\t\t\t.filter((activity): activity is IActivity => activity !== undefined);\n\t\tconst updatedVisualizations = await this._updateVisualizationAvailability(visualizations);\n\t\treturn updatedVisualizations;\n\t}\n\n\t/**\n\t * Returns promise that resolves to array of all available visualizations\n\t * @private\n\t * @returns {Promise} A Promise that resolves to array of all available visualizations.\n\t */\n\tprivate async _getAllAvailableVisualizations() {\n\t\tif (!this._allAvailableVisualizations) {\n\t\t\tconst catalogApps = await this.appManagerInstance._getCatalogApps();\n\t\t\tthis._allAvailableVisualizations = catalogApps.reduce((visualizations: IVisualization[], catalogApp) => {\n\t\t\t\treturn visualizations.concat(catalogApp.visualizations || []);\n\t\t\t}, []);\n\t\t}\n\t\treturn this._allAvailableVisualizations;\n\t}\n\n\t/**\n\t * Updates vizualization array with information - if vizualization is present in favorites .\n\t * @private\n\t * @param {object[]} visualizations - Array of vizualizations.\n\t * @returns {object[]} - Array of updated vizualizations.\n\t */\n\tprivate async _updateVisualizationAvailability(visualizations: IActivity[]) {\n\t\tconst favoriteVisualizations: ICustomVisualization[] = await this.appManagerInstance.fetchFavVizs(true, true);\n\t\tvisualizations.forEach((visualization) => {\n\t\t\tvisualization.addedInFavorites = favoriteVisualizations.some(\n\t\t\t\t(favoriteVisualization) => favoriteVisualization.oldAppId === visualization.orgAppId\n\t\t\t);\n\t\t});\n\t\treturn visualizations;\n\t}\n\n\t/**\n\t * Updates user activity with provided vizualization info\n\t * @private\n\t * @param {object} activity - User activity.\n\t * @param {object} updatedVizConfig - Updated vizualization config.\n\t * @returns {object} - Updated user acitvity.\n\t */\n\tprivate _updateActivityInfo(activity: IActivity, updatedVizConfig: IVisualization) {\n\t\tthis._catalogVisualizationCache = this._catalogVisualizationCache || new Map<string, IVisualization>();\n\t\tactivity.targetURL = updatedVizConfig.targetURL;\n\t\tactivity.vizId = updatedVizConfig.vizId;\n\t\tthis._catalogVisualizationCache.set(activity.orgAppId, updatedVizConfig);\n\t\treturn activity;\n\t}\n\n\t/**\n\t * Finds the best matching visualization for a given activity from a list of matching visualizations.\n\t *\n\t * This method first attempts to find an exact match for the target URL of the activity among the matching visualizations.\n\t * If no exact match is found, it uses the URLParsingService to compare parameters of the target URLs to find the best match.\n\t * It then updates the activity information with the best matching visualization.\n\t *\n\t * @private\n\t * @param {IActivity} activity - The activity for which to find the best matching visualization.\n\t * @param {IVisualization[]} matchingVisualizations - A list of visualizations that match the activity.\n\t * @param {URLParsing} URLParsingService - A service used to parse and compare target URLs.\n\t * @returns {IVisualization | undefined} The best matching visualization, or undefined if no match is found.\n\t */\n\tprivate _findBestMatchingVisualization(activity: IActivity, matchingVisualizations: IVisualization[], URLParsingService: URLParsing) {\n\t\t//if there are multiple matching apps, compare the target urls\n\t\tconst matchedVisualization = matchingVisualizations.find((matchingViz) => matchingViz.targetURL === activity.url);\n\t\tif (matchedVisualization) {\n\t\t\treturn this._updateActivityInfo(activity, matchedVisualization);\n\t\t} else {\n\t\t\t//edge cases, when no exact targetUrl match\n\t\t\tconst matchedVisualizationCache = new Map<string, object>();\n\t\t\tconst matchedVisualizations: { viz: IVisualization; params: unknown; prio: number }[] = [];\n\n\t\t\tmatchingVisualizations.forEach((visualization) => {\n\t\t\t\tconst targetURL: string = visualization.targetURL;\n\t\t\t\tif (!matchedVisualizationCache.get(targetURL)) {\n\t\t\t\t\tconst matchedVisualization = {\n\t\t\t\t\t\tviz: visualization,\n\t\t\t\t\t\tparams: (URLParsingService.parseShellHash(visualization.targetURL) as { params: { [key: string]: unknown[] } })\n\t\t\t\t\t\t\t.params,\n\t\t\t\t\t\tprio: 0\n\t\t\t\t\t};\n\t\t\t\t\tmatchedVisualizationCache.set(targetURL, matchedVisualization);\n\t\t\t\t\tmatchedVisualizations.push(matchedVisualization);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst filteredVisualizations = matchedVisualizations.filter((matchedVisualization) =>\n\t\t\t\tthis._filterMatchingVisualization(activity, matchedVisualization, URLParsingService)\n\t\t\t);\n\t\t\tif (filteredVisualizations.length) {\n\t\t\t\t// more than 1 matching condition for unique targetUrls\n\t\t\t\t// this could be either because there is exact match and/or also allItems true and/or no params in VizData param keys\n\t\t\t\t// then find best match possible, based on prio\n\t\t\t\tfilteredVisualizations.sort((val1, val2) => val1.prio - val2.prio);\n\t\t\t\treturn this._updateActivityInfo(activity, filteredVisualizations[0].viz);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Filters matching visualizations based on activity parameters and assigns priority.\n\t *\n\t * This method compares the parameters of the activity with those of a matched visualization\n\t * to determine if they match.\n\t *\n\t * @private\n\t * @returns {boolean} Returns true if the visualization matches the activity, false otherwise.\n\t */\n\tprivate _filterMatchingVisualization(\n\t\tactivity: IActivity,\n\t\tmatchedVisualization: { viz: IVisualization; params: unknown; prio: number },\n\t\tURLParsingService: URLParsing\n\t) {\n\t\tconst parshedShellHash = URLParsingService.parseShellHash(activity.url) as { params: { [key: string]: unknown[] } };\n\t\tconst activityParameters = parshedShellHash.params;\n\n\t\tconst activityParameterKeys = Object.keys(activityParameters);\n\t\tconst visualizationParams = matchedVisualization.params as { [key: string]: unknown[] };\n\t\t//filter keys other than 'allItems', for myinbox tasks allItems key is a generally common key hence filter that\n\t\tconst visualizationParamKeys = Object.keys(visualizationParams).filter((key) => key !== \"allItems\");\n\t\tif (visualizationParamKeys.length === activityParameterKeys.length) {\n\t\t\tconst bMatch = activityParameterKeys.every(\n\t\t\t\t(key) => visualizationParamKeys.includes(key) && visualizationParams[key][0] === activityParameters[key][0]\n\t\t\t);\n\t\t\tif (bMatch) {\n\t\t\t\tmatchedVisualization.prio = 1;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t} else if (!visualizationParamKeys.length) {\n\t\t\t//this could mean either visualizationParamKeys did not have any key or the only key present was 'allItems'\n\t\t\t//if 'allItems' present give prio 2 else prio 3\n\t\t\tmatchedVisualization.prio = Object.keys(matchedVisualization.params as { [key: string]: unknown[] }).length ? 2 : 3;\n\t\t\treturn true;\n\t\t}\n\t\t//filtered visualizationParamKeys length doesnt match aAppParamKeys length & visualizationParamKeys length is not 0\n\t\treturn false;\n\t}\n\n\t/**\n\t * Converts given user activity to vizualization\n\t * @private\n\t * @param {object} activity - User Activity.\n\t * @param {object[]} catalogVisualizations - array of all available visualizations in catalog.\n\t * @param {object} URLParsingService - URL parsing service.\n\t * @returns {object} - visualization\n\t */\n\tprivate _convertToVisualization(activity: IActivity, catalogVisualizations: IVisualization[], URLParsingService: URLParsing) {\n\t\tthis._catalogVisualizationCache = this._catalogVisualizationCache || new Map<string, IVisualization>();\n\t\tconst catalogVisualization = this._catalogVisualizationCache.get(activity.orgAppId);\n\t\tif (catalogVisualization) {\n\t\t\treturn this._updateActivityInfo(activity, catalogVisualization);\n\t\t} else {\n\t\t\tconst matchingVisualizations = catalogVisualizations.filter(\n\t\t\t\t(visualization) =>\n\t\t\t\t\tvisualization.vizId && `#${visualization.target?.semanticObject}-${visualization.target?.action}` === activity.orgAppId\n\t\t\t);\n\t\t\tif (matchingVisualizations.length > 1) {\n\t\t\t\treturn this._findBestMatchingVisualization(activity, matchingVisualizations, URLParsingService);\n\t\t\t} else if (matchingVisualizations.length === 1) {\n\t\t\t\treturn this._updateActivityInfo(activity, matchingVisualizations[0]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Adds visualization to favorite apps\n\t * @private\n\t * @param {sap.ui.base.Event} event - The event object.\n\t */\n\tprotected async _addAppToFavorites(event: Event) {\n\t\tthis.setBusy(true);\n\t\ttry {\n\t\t\tconst source = event.getSource<MenuItem>();\n\t\t\tconst app = source.getParent() as App;\n\t\t\tconst vizId = app.getVizId?.();\n\t\t\tif (vizId) {\n\t\t\t\t//Add Apps to the 'Recently Added Apps' section\n\t\t\t\tawait this.appManagerInstance.addVisualization(vizId);\n\t\t\t\tawait (this.getParent?.() as AppsContainer)._refreshAllPanels();\n\t\t\t\tconst message = this._i18nBundle.getText(\"appMovedToFavorites\", [app.getTitle()]) as string;\n\t\t\t\tMessageToast.show(message);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tLog.error(error as string);\n\t\t} finally {\n\t\t\tthis.setBusy(false);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the panel is loaded. If the panel is not loaded then placholders are shown otherwise not\n\t * @private\n\t * @returns {boolean} true if the panel is loaded, false otherwise.\n\t */\n\tpublic isLoaded(): boolean {\n\t\treturn this._isLoaded;\n\t}\n\n\t/**\n\t * Set the loaded status of the app panel.\n\t * @private\n\t * @param {boolean} val - The new loaded status to set for the app panel.\n\t */\n\tpublic setLoaded(val: boolean): void {\n\t\tthis._isLoaded = val;\n\t}\n\n\t/**\n\t * Returns the dirty status of the app panel. If the panel is dirty then only re-render the apps\n\t * @private\n\t * @returns {boolean} true if the panel is dirty, false otherwise.\n\t */\n\tpublic isDirty(): boolean {\n\t\treturn this._isDirty;\n\t}\n\n\t/**\n\t * Set the dirty status of the app panel.\n\t * @private\n\t * @param {boolean} val - The new dirty status to set for the app panel.\n\t */\n\tpublic setDesktopViewDirty(val: boolean): void {\n\t\tthis._isDirty = val;\n\t}\n\n\t/**\n\t * Returns the dirty status of the app mobile panel. If the panel is dirty then only re-render the apps\n\t * @private\n\t * @returns {boolean} true if the panel is dirty, false otherwise.\n\t */\n\tpublic isMobileDirty(): boolean {\n\t\treturn this._isMobileDirty;\n\t}\n\n\t/**\n\t * Set the dirty status of the app mobile panel.\n\t * @private\n\t * @param {boolean} val - The new dirty status to set for the app mobile panel.\n\t */\n\tpublic setMobileViewDirty(val: boolean): void {\n\t\tthis._isMobileDirty = val;\n\t}\n\n\t/**\n\t * Sets aggregation for give control.\n\t * @param {Object} control - Control for which aggregation has to be set.\n\t * @param {Object[]} items - Items to be added in aggregation.\n\t * @param {string} aggregationName - Aggregation name\n\t * @private\n\t */\n\tpublic _setAggregation = function (control: Control | Group, items: Control[] | App[] = [], aggregationName = \"items\") {\n\t\titems.forEach((oItem) => {\n\t\t\tcontrol.addAggregation(aggregationName, oItem, true);\n\t\t});\n\t};\n\n\t/**\n\t * Sets the busy state of panel.\n\t * @private\n\t * @param {boolean} isBusy - Indicates whether the panel should be set to busy state.\n\t */\n\tprotected setBusy(isBusy: boolean) {\n\t\tconst oAppsWrapper = this._generateAppsWrapper();\n\t\toAppsWrapper.setBusy(isBusy);\n\t}\n\n\t/**\n\t * Retrieves the group with the specified group Id.\n\t * @private\n\t * @param {string} groupId - The Id of the group.\n\t * @returns {sap.cux.home.Group} The group with the specified group Id, or null if not found.\n\t */\n\tprotected _getGroup(groupId: string) {\n\t\tconst groups = (this.getAggregation(\"groups\") || []) as Group[];\n\t\treturn groups.find((group) => group.getGroupId() === groupId);\n\t}\n\n\t/**\n\t * Checks if the panel is supported.\n\t * @returns {boolean} True if the panel is supported, false otherwise.\n\t * @private\n\t */\n\tpublic isSupported() {\n\t\treturn this._isSupported;\n\t}\n\n\t/**\n\t * Sets panel as supported or unsupported.\n\t * @param {boolean} isSupported true if the panel is supported, false otherwise.\n\t * @private\n\t */\n\tpublic setSupported(isSupported: boolean) {\n\t\tthis._isSupported = isSupported;\n\t}\n\n\t/**\n\t * Attaches user activity tracking based on the configuration.\n\t * If user activity tracking is enabled, it listens to changes in tracking activity configuration\n\t * and fires a 'supported' event accordingly.\n\t * @private\n\t */\n\tprotected _attachUserActivityTracking() {\n\t\tif (Config.last(\"/core/shell/enableRecentActivity\")) {\n\t\t\tConfig.on(\"/core/shell/model/enableTrackingActivity\").do((isTrackingActivityEnabled: boolean) => {\n\t\t\t\tthis.fireSupported({ isSupported: isTrackingActivityEnabled });\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Refreshes the panel.\n\t * @public\n\t */\n\tprotected async refresh() {\n\t\tawait (this.getParent() as AppsContainer).refreshPanel(this);\n\t}\n\n\t/**\n\t * Generates default illustrated message for panel.\n\t * @private\n\t * @returns {sap.m.IllustratedMessage} Illustrated error message for panel.\n\t */\n\tprotected generateIllustratedMessage() {\n\t\tif (!this._errorMessage) {\n\t\t\tthis._errorMessage = new IllustratedMessage(`${this.getId()}-errorMessage`, {\n\t\t\t\tillustrationSize: IllustratedMessageSize.Spot,\n\t\t\t\tillustrationType: IllustratedMessageType.AddColumn,\n\t\t\t\ttitle: this._i18nBundle.getText(\"noAppsTitle\"),\n\t\t\t\tdescription: this._i18nBundle.getText(\"noData\")\n\t\t\t});\n\t\t}\n\t\treturn this._errorMessage;\n\t}\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AAHA;;AAAAA,GAAA,CAAAC,EAAA,CAAAC,MAAA,0WAAAC,GAAA,EAAAC,aAAA,EAAAC,qBAAA,EAAAC,eAAA,EAAAC,kBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,YAAA,EAAAC,IAAA,EAAAC,aAAA,EAAAC,MAAA,EAAAC,SAAA,EAAAC,KAAA,EAAAC,WAAA,EAAAC,YAAA,EAAAC,eAAA;EAAA;;EAAA,SAAAC,uBAAAC,GAAA;IAAA,OAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,WAAAD,GAAA,CAAAE,OAAA,mBAAAF,GAAA,CAAAE,OAAA,GAAAF,GAAA;EAAA;EAkjBO,SAAAG,OAAgBC,IAAI,EAAEC,OAAO,EAAE;IACrC,IAAI;MACH,IAAIC,MAAM,GAAGF,IAAI,CAAC,CAAC;IACpB,CAAC,CAAC,OAAMG,CAAC,EAAE;MACV,OAAOF,OAAO,CAACE,CAAC,CAAC;IAClB;IACA,IAAID,MAAM,IAAIA,MAAM,CAACE,IAAI,EAAE;MAC1B,OAAOF,MAAM,CAACE,IAAI,CAAC,KAAK,CAAC,EAAEH,OAAO,CAAC;IACpC;IACA,OAAOC,MAAM;EACd;EAAC,MA3iBQG,gBAAgB,GAAAjB,aAAA;EA8iBlB,SAASkB,gBAAgBA,CAACN,IAAI,EAAEO,SAAS,EAAE;IACjD,IAAI;MACH,IAAIL,MAAM,GAAGF,IAAI,CAAC,CAAC;IACpB,CAAC,CAAC,OAAOG,CAAC,EAAE;MACX,OAAOI,SAAS,CAAC,IAAI,EAAEJ,CAAC,CAAC;IAC1B;IACA,IAAID,MAAM,IAAIA,MAAM,CAACE,IAAI,EAAE;MAC1B,OAAOF,MAAM,CAACE,IAAI,CAACG,SAAS,CAACC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,EAAED,SAAS,CAACC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC5E;IACA,OAAOD,SAAS,CAAC,KAAK,EAAEL,MAAM,CAAC;EAChC;EAAC,MAjjBMO,GAAG,GAAAd,sBAAA,CAAAJ,KAAA;EAAA,MAGHmB,SAAS,GAAAf,sBAAA,CAAAH,WAAA;EAAA,MAITmB,UAAU,GAAAhB,sBAAA,CAAAF,YAAA;EAAA,MACRmB,UAAU,GAAAlB,eAAA;EAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAhBA,MAkB8BmB,YAAY,GAASH,SAAS,CAAAI,MAAA;IAuB3CC,QAAQ,EAAoB;MAC3CC,OAAO,EAAE,cAAc;MACvBC,kBAAkB,EAAE,MAAM;MAC1BC,YAAY,EAAE;QACb;AACH;AACA;QACGC,IAAI,EAAE;UAAEC,IAAI,EAAE,kBAAkB;UAAEC,YAAY,EAAE,KAAK;UAAEC,QAAQ,EAAE;QAAK;MACvE,CAAC;MACDC,MAAM,EAAE;QACP;AACH;AACA;QACGC,SAAS,EAAE,CAAC,CAAC;QACb;AACH;AACA;QACGC,SAAS,EAAE;UACVC,UAAU,EAAE;YACXC,WAAW,EAAE;cAAEP,IAAI,EAAE;YAAU;UAChC;QACD;MACD;IACD,CAAC;IA3BDQ,WAAW,WAAAC,aAACC,EAAW,EAAEC,QAAgC,EAAE;MAC1DC,oCAAA,OAAMF,EAAE,EAAEC,QAAQ;MAAE,KAnBbE,QAAQ,GAAY,IAAI;MAAA,KACxBC,cAAc,GAAY,IAAI;MAAA,KAC9BC,SAAS,GAAY,KAAK;MAAA,KAQ1BC,YAAY,GAAY,IAAI;MAsdpC;AACD;AACA;AACA;AACA;AACA;AACA;MANC,KAOOC,eAAe,GAAG,UAAUC,OAAwB,EAA4D;QAAA,IAA1DC,KAAwB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;QAAA,IAAEG,eAAe,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,OAAO;QACpHD,KAAK,CAACK,OAAO,CAAEC,KAAK,IAAK;UACxBP,OAAO,CAACQ,cAAc,CAACH,eAAe,EAAEE,KAAK,EAAE,IAAI,CAAC;QACrD,CAAC,CAAC;MACH,CAAC;IAvdD,CAAC;IAiCME,IAAI,WAAAC,MAAA,EAAG;MACbC,6BAAA;MACA,IAAI,CAACC,kBAAkB,GAAGvC,UAAU,CAACwC,WAAW,CAAC,CAAC;MAClD,IAAI,CAACC,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;MAC5B;MACA,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACC,gBAAgB,CAAC,CAAC;MAChD,IAAI,CAACC,WAAW,CAAC,IAAI,CAACF,iBAAiB,CAAC;IACzC,CAAC;IAED;AACD;AACA;AACA;AACA;AACA;AACA;IACWC,gBAAgB,WAAAA,iBAAA,EAAG;MAC5B,IAAI,CAAC,IAAI,CAACD,iBAAiB,EAAE;QAC5B,IAAI,CAACA,iBAAiB,GAAG,IAAInE,IAAI,CAAC,GAAG,IAAI,CAACsE,KAAK,CAAC,CAAC,mBAAmB,EAAE;UACrElB,KAAK,EAAE,CAAC,IAAI,CAACmB,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAACC,0BAA0B,CAAC,CAAC,EAAE,IAAI,CAACC,qBAAqB,CAAC,CAAC,CAAC;UAC5GC,KAAK,EAAE;QACR,CAAC,CAAC,CAACC,aAAa,CAAC,2CAA2C,CAAC;MAC9D;MACA,OAAO,IAAI,CAACR,iBAAiB;IAC9B,CAAC;IAED;AACD;AACA;AACA;AACA;IACQI,2BAA2B,WAAAA,4BAAA,EAAG;MACpC,MAAMK,SAAS,GAAG,GAAG,IAAI,CAACN,KAAK,CAAC,CAAC,qBAAqB;MACtD,IAAI,CAAC,IAAI,CAACL,WAAW,CAACY,GAAG,CAACD,SAAS,CAAC,EAAE;QACrC,IAAI,CAACX,WAAW,CAACa,GAAG,CACnBF,SAAS,EACT,IAAI5E,IAAI,CAAC;UACR2C,EAAE,EAAE,GAAG,IAAI,CAAC2B,KAAK,CAAC,CAAC,qBAAqB;UACxClB,KAAK,EAAE,CAAC,IAAI,CAAC2B,oBAAoB,CAAC,CAAC,CAAC;UACpCC,OAAO,EAAE,IAAI,CAACC,aAAa,CAAC,CAAC,KAAKxD,UAAU,CAACyD,MAAM;UACnDC,gBAAgB,EAAEjE,gBAAgB,CAACkE;QACpC,CAAC,CAAC,CAACT,aAAa,CAAC,2CAA2C,CAC7D,CAAC;MACF;MACA,OAAO,IAAI,CAACV,WAAW,CAACY,GAAG,CAACD,SAAS,CAAC;IACvC,CAAC;IAED;AACD;AACA;AACA;AACA;IACQG,oBAAoB,WAAAA,qBAAA,EAAkB;MAC5C;MACA,IAAI,CAAC,IAAI,CAACM,YAAY,EAAE;QACvB,IAAI,CAACA,YAAY,GAAG,IAAI5F,aAAa,CAAC;UACrCkD,EAAE,EAAE,GAAG,IAAI,CAAC2B,KAAK,CAAC,CAAC,cAAc;UACjCgB,MAAM,EAAE,IAAI5F,qBAAqB,CAAC;YACjC6F,UAAU,EAAE,OAAO;YACnBC,GAAG,EAAE;UACN,CAAC,CAAC;UACFR,OAAO,EAAE,IAAI,CAACC,aAAa,CAAC,CAAC,KAAKxD,UAAU,CAACyD;QAC9C,CAAC,CAAC;MACH;MACA,OAAO,IAAI,CAACG,YAAY;IACzB,CAAC;IAED;AACD;AACA;AACA;AACA;IACQb,0BAA0B,WAAAA,2BAAA,EAAG;MACnC,IAAI,CAAC,IAAI,CAACiB,kBAAkB,EAAE;QAC7B,IAAI,CAACA,kBAAkB,GAAG,IAAI9F,eAAe,CAAC;UAC7CgD,EAAE,EAAE,GAAG,IAAI,CAAC2B,KAAK,CAAC,CAAC,oBAAoB;UACvCoB,UAAU,EAAE,IAAI;UAChBC,YAAY,EAAE,KAAK;UACnBC,MAAM,EAAE,SAAS;UACjBC,OAAO,EAAE,EAAE;UACXb,OAAO,EAAE,IAAI,CAACC,aAAa,CAAC,CAAC,KAAKxD,UAAU,CAACyD;QAC9C,CAAC,CAAC,CAACP,aAAa,CAAC,+CAA+C,CAAC;MAClE;MACA,OAAO,IAAI,CAACc,kBAAkB;IAC/B,CAAC;IAED;AACD;AACA;AACA;AACA;IACQhB,qBAAqB,WAAAA,sBAAA,EAAS;MACpC,IAAI,CAAC,IAAI,CAACqB,UAAU,EAAE;QACrB,IAAI,CAACA,UAAU,GAAG,IAAI9F,IAAI,CAAC,GAAG,IAAI,CAACsE,KAAK,CAAC,CAAC,YAAY,EAAE;UACvDyB,IAAI,EAAE,MAAM;UACZZ,gBAAgB,EAAE,OAAO;UACzB/B,KAAK,EAAE,CAAC,IAAI,CAAC4C,0BAA0B,CAAC,CAAC,CAAC;UAC1ChB,OAAO,EAAE,IAAI,CAACiB,OAAO,CAAC,CAAC,CAAC3C,MAAM,KAAK,CAAC;UACpC4C,cAAc,EAAE;QACjB,CAAC,CAAC,CAACvB,aAAa,CAAC,iBAAiB,CAAC;MACpC;MACA,IAAI,CAACmB,UAAU,CAACK,SAAS,CAAC,IAAI,CAAClB,aAAa,CAAC,CAAC,KAAKxD,UAAU,CAACyD,MAAM,GAAG,SAAS,GAAG,MAAM,CAAC;MAC1F,OAAO,IAAI,CAACY,UAAU;IACvB,CAAC;IAED;AACD;AACA;AACA;AACA;AACA;IACQM,YAAY,WAAAC,cAACC,kBAA0C,EAAE;MAC/D,OAAOA,kBAAkB,CAACC,GAAG,CAAEC,iBAAiB,IAAK;QACpD,MAAMC,GAAG,GAAG,IAAInF,GAAG,CAAC,EAAE,EAAE;UACvBoF,KAAK,EAAEF,iBAAiB,CAACE,KAAK;UAC9BC,QAAQ,EAAEH,iBAAiB,CAACI,QAAQ;UACpCC,OAAO,EAAEL,iBAAiB,CAACM,OAAO;UAClCC,IAAI,EAAEP,iBAAiB,CAACO,IAAI;UAC5BC,GAAG,EAAER,iBAAiB,CAACQ,GAAG;UAC1BC,KAAK,EAAET,iBAAiB,CAACS,KAAK,IAAIT,iBAAiB,CAACU,aAAa,EAAED,KAAK;UACxEE,MAAM,EAAEX,iBAAiB,CAACW;QAC3B,CAAC,CAAC;QACF,IAAIX,iBAAiB,CAACY,QAAQ,EAAE;UAC/BX,GAAG,CAACY,IAAI,CAAC,UAAU,EAAEb,iBAAiB,CAACY,QAAQ,CAAC;QACjD;QACAZ,iBAAiB,CAACc,SAAS,EAAE7D,OAAO,CAAE8D,QAAQ,IAAK;UAClDd,GAAG,CAAC9C,cAAc,CAAC,WAAW,EAAE4D,QAAQ,EAAE,IAAI,CAAC;QAChD,CAAC,CAAC;QACF,OAAOd,GAAG;MACX,CAAC,CAAC;IACH,CAAC;IAED;AACD;AACA;AACA;IACQe,OAAO,WAAAC,SAACzF,IAAW,EAAE;MAC3BA,IAAI,CAACyB,OAAO,CAAEgD,GAAG,IAAK;QACrB,IAAI,CAAC9C,cAAc,CAAC,MAAM,EAAE8C,GAAG,EAAE,IAAI,CAAC;MACvC,CAAC,CAAC;IACH,CAAC;IAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;IACQiB,sBAAsB,WAAAC,wBAAA,EAA2C;MAAA,IAA1CC,KAAoB,GAAAvE,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;MACtD,IAAI,IAAI,CAAC4B,aAAa,CAAC,CAAC,KAAKxD,UAAU,CAACyD,MAAM,EAAE;QAC/C,MAAM2C,KAAK,GAAI,IAAI,CAACrD,0BAA0B,CAAC,CAAC,EAAEsD,UAAU,CAAC,CAAC,IAAI,EAAc;QAChF,KAAK,MAAMC,IAAI,IAAIF,KAAK,EAAE;UACzBD,KAAK,GAAGA,KAAK,CAACI,MAAM,CAAED,IAAI,EAAED,UAAU,CAAC,CAAC,IAAI,EAAoB,CAAC;QAClE;MACD,CAAC,MAAM;QACNF,KAAK,GAAI,IAAI,CAAC7C,oBAAoB,CAAC,CAAC,EAAEkD,QAAQ,CAAC,CAAC,IAAI,EAAoB;MACzE;MACA,OAAOL,KAAK;IACb,CAAC;IAED;AACD;AACA;AACA;AACA;AACA;IACiBM,iCAAiC,WAAAC,mCAACC,UAAuB;MAAA,IAAE;QAAA,MAAAC,KAAA,GAEzE,IAAI;QAAA,OAAAC,OAAA,CAAAC,OAAA,CADsDD,OAAO,CAACE,GAAG,CAAC,CACtEH,KAAA,CAAKI,8BAA8B,CAAC,CAAC,EACrCtI,SAAS,CAACuI,eAAe,CAAa,YAAY,CAAC,CACnD,CAAC,EAAAzH,IAAA,WAAA0H,IAAA;UAAA,IAHI,CAACC,uBAAuB,EAAEC,iBAAiB,CAAC,GAAAF,IAAA;UAIlD,MAAMG,aAAa,GAAGV,UAAU,CAC9BW,MAAM,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,OAAO,KAAK,aAAa,CAAC,CACxD1C,GAAG,CAAEyC,QAAQ,IAAK;YAClBA,QAAQ,CAACE,QAAQ,GAAGF,QAAQ,CAACG,KAAK;YAClCH,QAAQ,CAACG,KAAK,GAAGH,QAAQ,CAAChC,GAAG;YAC7B,OAAOgC,QAAQ;UAChB,CAAC,CAAC;UACH,MAAMI,cAAc,GAAGN,aAAa,CAClCvC,GAAG,CAAEyC,QAAQ,IAAKX,KAAA,CAAKgB,uBAAuB,CAACL,QAAQ,EAAEJ,uBAAuB,EAAEC,iBAAiB,CAAC,CAAC,CACrGE,MAAM,CAAEC,QAAQ,IAA4BA,QAAQ,KAAKzF,SAAS,CAAC;UAAC,OAAA+E,OAAA,CAAAC,OAAA,CAClCF,KAAA,CAAKiB,gCAAgC,CAACF,cAAc,CAAC;QAAA;MAE1F,CAAC,QAAApI,CAAA;QAAA,OAAAsH,OAAA,CAAAiB,MAAA,CAAAvI,CAAA;MAAA;IAAA;IAED;AACD;AACA;AACA;AACA;IACeyH,8BAA8B,WAAAA,+BAAA;MAAA,IAAG;QAAA,MAAAe,MAAA,GACzC,IAAI;QAAA,SAAAC,OAAA;UAMT,OAAOD,MAAA,CAAKE,2BAA2B;QAAC;QAAA,MAAAC,KAAA;UAAA,IANpC,CAACH,MAAA,CAAKE,2BAA2B;YAAA,OAAApB,OAAA,CAAAC,OAAA,CACViB,MAAA,CAAKzF,kBAAkB,CAAC6F,eAAe,CAAC,CAAC,EAAA3I,IAAA,WAA7D4I,WAAW;cACjBL,MAAA,CAAKE,2BAA2B,GAAGG,WAAW,CAACC,MAAM,CAAC,CAACV,cAAgC,EAAEW,UAAU,KAAK;gBACvG,OAAOX,cAAc,CAACpB,MAAM,CAAC+B,UAAU,CAACX,cAAc,IAAI,EAAE,CAAC;cAC9D,CAAC,EAAE,EAAE,CAAC;YAAC;UAAA;QAAA;QAAA,OAAAd,OAAA,CAAAC,OAAA,CAAAoB,KAAA,IAAAA,KAAA,CAAA1I,IAAA,GAAA0I,KAAA,CAAA1I,IAAA,CAAAwI,MAAA,IAAAA,MAAA,CAAAE,KAAA;MAGT,CAAC,QAAA3I,CAAA;QAAA,OAAAsH,OAAA,CAAAiB,MAAA,CAAAvI,CAAA;MAAA;IAAA;IAED;AACD;AACA;AACA;AACA;AACA;IACesI,gCAAgC,WAAAA,iCAACF,cAA2B;MAAA,IAAE;QAAA,MAAAY,MAAA,GACd,IAAI;QAAA,OAAA1B,OAAA,CAAAC,OAAA,CAAJyB,MAAA,CAAKjG,kBAAkB,CAACkG,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,EAAAhJ,IAAA,WAAvGiJ,sBAA8C;UACpDd,cAAc,CAAC3F,OAAO,CAAEyD,aAAa,IAAK;YACzCA,aAAa,CAACiD,gBAAgB,GAAGD,sBAAsB,CAACE,IAAI,CAC1DC,qBAAqB,IAAKA,qBAAqB,CAACjD,QAAQ,KAAKF,aAAa,CAACgC,QAC7E,CAAC;UACF,CAAC,CAAC;UACF,OAAOE,cAAc;QAAC;MACvB,CAAC,QAAApI,CAAA;QAAA,OAAAsH,OAAA,CAAAiB,MAAA,CAAAvI,CAAA;MAAA;IAAA;IAED;AACD;AACA;AACA;AACA;AACA;AACA;IACSsJ,mBAAmB,WAAAA,oBAACtB,QAAmB,EAAEuB,gBAAgC,EAAE;MAClF,IAAI,CAACC,0BAA0B,GAAG,IAAI,CAACA,0BAA0B,IAAI,IAAItG,GAAG,CAAyB,CAAC;MACtG8E,QAAQ,CAACyB,SAAS,GAAGF,gBAAgB,CAACE,SAAS;MAC/CzB,QAAQ,CAAC/B,KAAK,GAAGsD,gBAAgB,CAACtD,KAAK;MACvC,IAAI,CAACuD,0BAA0B,CAAC1F,GAAG,CAACkE,QAAQ,CAACE,QAAQ,EAAEqB,gBAAgB,CAAC;MACxE,OAAOvB,QAAQ;IAChB,CAAC;IAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACS0B,8BAA8B,WAAAA,+BAAC1B,QAAmB,EAAE2B,sBAAwC,EAAE9B,iBAA6B,EAAE;MACpI;MACA,MAAM+B,oBAAoB,GAAGD,sBAAsB,CAACE,IAAI,CAAEC,WAAW,IAAKA,WAAW,CAACL,SAAS,KAAKzB,QAAQ,CAAChC,GAAG,CAAC;MACjH,IAAI4D,oBAAoB,EAAE;QACzB,OAAO,IAAI,CAACN,mBAAmB,CAACtB,QAAQ,EAAE4B,oBAAoB,CAAC;MAChE,CAAC,MAAM;QACN;QACA,MAAMG,yBAAyB,GAAG,IAAI7G,GAAG,CAAiB,CAAC;QAC3D,MAAM8G,qBAA+E,GAAG,EAAE;QAE1FL,sBAAsB,CAAClH,OAAO,CAAEyD,aAAa,IAAK;UACjD,MAAMuD,SAAiB,GAAGvD,aAAa,CAACuD,SAAS;UACjD,IAAI,CAACM,yBAAyB,CAAClG,GAAG,CAAC4F,SAAS,CAAC,EAAE;YAC9C,MAAMG,oBAAoB,GAAG;cAC5BK,GAAG,EAAE/D,aAAa;cAClBgE,MAAM,EAAGrC,iBAAiB,CAACsC,cAAc,CAACjE,aAAa,CAACuD,SAAS,CAAC,CAChES,MAAM;cACRE,IAAI,EAAE;YACP,CAAC;YACDL,yBAAyB,CAACjG,GAAG,CAAC2F,SAAS,EAAEG,oBAAoB,CAAC;YAC9DI,qBAAqB,CAACK,IAAI,CAACT,oBAAoB,CAAC;UACjD;QACD,CAAC,CAAC;QACF,MAAMU,sBAAsB,GAAGN,qBAAqB,CAACjC,MAAM,CAAE6B,oBAAoB,IAChF,IAAI,CAACW,4BAA4B,CAACvC,QAAQ,EAAE4B,oBAAoB,EAAE/B,iBAAiB,CACpF,CAAC;QACD,IAAIyC,sBAAsB,CAAChI,MAAM,EAAE;UAClC;UACA;UACA;UACAgI,sBAAsB,CAACE,IAAI,CAAC,CAACC,IAAI,EAAEC,IAAI,KAAKD,IAAI,CAACL,IAAI,GAAGM,IAAI,CAACN,IAAI,CAAC;UAClE,OAAO,IAAI,CAACd,mBAAmB,CAACtB,QAAQ,EAAEsC,sBAAsB,CAAC,CAAC,CAAC,CAACL,GAAG,CAAC;QACzE;MACD;IACD,CAAC;IAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACSM,4BAA4B,WAAAA,6BACnCvC,QAAmB,EACnB4B,oBAA4E,EAC5E/B,iBAA6B,EAC5B;MACD,MAAM8C,gBAAgB,GAAG9C,iBAAiB,CAACsC,cAAc,CAACnC,QAAQ,CAAChC,GAAG,CAA6C;MACnH,MAAM4E,kBAAkB,GAAGD,gBAAgB,CAACT,MAAM;MAElD,MAAMW,qBAAqB,GAAGC,MAAM,CAACC,IAAI,CAACH,kBAAkB,CAAC;MAC7D,MAAMI,mBAAmB,GAAGpB,oBAAoB,CAACM,MAAsC;MACvF;MACA,MAAMe,sBAAsB,GAAGH,MAAM,CAACC,IAAI,CAACC,mBAAmB,CAAC,CAACjD,MAAM,CAAEmD,GAAG,IAAKA,GAAG,KAAK,UAAU,CAAC;MACnG,IAAID,sBAAsB,CAAC3I,MAAM,KAAKuI,qBAAqB,CAACvI,MAAM,EAAE;QACnE,MAAM6I,MAAM,GAAGN,qBAAqB,CAACO,KAAK,CACxCF,GAAG,IAAKD,sBAAsB,CAACI,QAAQ,CAACH,GAAG,CAAC,IAAIF,mBAAmB,CAACE,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKN,kBAAkB,CAACM,GAAG,CAAC,CAAC,CAAC,CAC3G,CAAC;QACD,IAAIC,MAAM,EAAE;UACXvB,oBAAoB,CAACQ,IAAI,GAAG,CAAC;UAC7B,OAAO,IAAI;QACZ;QACA,OAAO,KAAK;MACb,CAAC,MAAM,IAAI,CAACa,sBAAsB,CAAC3I,MAAM,EAAE;QAC1C;QACA;QACAsH,oBAAoB,CAACQ,IAAI,GAAGU,MAAM,CAACC,IAAI,CAACnB,oBAAoB,CAACM,MAAsC,CAAC,CAAC5H,MAAM,GAAG,CAAC,GAAG,CAAC;QACnH,OAAO,IAAI;MACZ;MACA;MACA,OAAO,KAAK;IACb,CAAC;IAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;IACS+F,uBAAuB,WAAAA,wBAACL,QAAmB,EAAEsD,qBAAuC,EAAEzD,iBAA6B,EAAE;MAC5H,IAAI,CAAC2B,0BAA0B,GAAG,IAAI,CAACA,0BAA0B,IAAI,IAAItG,GAAG,CAAyB,CAAC;MACtG,MAAMqI,oBAAoB,GAAG,IAAI,CAAC/B,0BAA0B,CAAC3F,GAAG,CAACmE,QAAQ,CAACE,QAAQ,CAAC;MACnF,IAAIqD,oBAAoB,EAAE;QACzB,OAAO,IAAI,CAACjC,mBAAmB,CAACtB,QAAQ,EAAEuD,oBAAoB,CAAC;MAChE,CAAC,MAAM;QACN,MAAM5B,sBAAsB,GAAG2B,qBAAqB,CAACvD,MAAM,CACzD7B,aAAa,IACbA,aAAa,CAACD,KAAK,IAAI,IAAIC,aAAa,CAACsF,MAAM,EAAEC,cAAc,IAAIvF,aAAa,CAACsF,MAAM,EAAEE,MAAM,EAAE,KAAK1D,QAAQ,CAACE,QACjH,CAAC;QACD,IAAIyB,sBAAsB,CAACrH,MAAM,GAAG,CAAC,EAAE;UACtC,OAAO,IAAI,CAACoH,8BAA8B,CAAC1B,QAAQ,EAAE2B,sBAAsB,EAAE9B,iBAAiB,CAAC;QAChG,CAAC,MAAM,IAAI8B,sBAAsB,CAACrH,MAAM,KAAK,CAAC,EAAE;UAC/C,OAAO,IAAI,CAACgH,mBAAmB,CAACtB,QAAQ,EAAE2B,sBAAsB,CAAC,CAAC,CAAC,CAAC;QACrE;MACD;IACD,CAAC;IAED;AACD;AACA;AACA;AACA;IACiBgC,kBAAkB,WAAAA,mBAACC,KAAY;MAAA,IAAE;QAAA,MAAAC,MAAA,GAChD,IAAI;QAAJA,MAAA,CAAKC,OAAO,CAAC,IAAI,CAAC;QAAC,OAAAxE,OAAA,CAAAC,OAAA,CAAApH,gBAAA;UAAA,OAAAP,MAAA,aACf;YACH,MAAMmM,MAAM,GAAGH,KAAK,CAACI,SAAS,CAAW,CAAC;YAC1C,MAAMvG,GAAG,GAAGsG,MAAM,CAACE,SAAS,CAAC,CAAQ;YACrC,MAAMhG,KAAK,GAAGR,GAAG,CAACyG,QAAQ,GAAG,CAAC;YAAC,MAAAC,MAAA;cAAA,IAC3BlG,KAAK;gBACR;gBAAA,OAAAqB,OAAA,CAAAC,OAAA,CACMsE,MAAA,CAAK9I,kBAAkB,CAACqJ,gBAAgB,CAACnG,KAAK,CAAC,EAAAhG,IAAA;kBAAA,OAAAqH,OAAA,CAAAC,OAAA,CAC/C,CAACsE,MAAA,CAAKI,SAAS,GAAG,CAAC,EAAmBI,iBAAiB,CAAC,CAAC,EAAApM,IAAA;oBAC/D,MAAMqM,OAAO,GAAGT,MAAA,CAAKU,WAAW,CAACC,OAAO,CAAC,qBAAqB,EAAE,CAAC/G,GAAG,CAACgH,QAAQ,CAAC,CAAC,CAAC,CAAW;oBAC3F1N,YAAY,CAAC2N,IAAI,CAACJ,OAAO,CAAC;kBAAC;gBAAA;cAAA;YAAA;YAAA,IAAAH,MAAA,IAAAA,MAAA,CAAAlM,IAAA,SAAAkM,MAAA,CAAAlM,IAAA;UAE7B,CAAC,YAAQ0M,KAAK,EAAE;YACfnO,GAAG,CAACmO,KAAK,CAACA,KAAe,CAAC;UAC3B,CAAC;QAAA,aAAAC,UAAA,EAAAC,OAAA;UACAhB,MAAA,CAAKC,OAAO,CAAC,KAAK,CAAC;UAAC,IAAAc,UAAA,QAAAC,OAAA;UAAA,OAAAA,OAAA;QAAA;MAEtB,CAAC,QAAA7M,CAAA;QAAA,OAAAsH,OAAA,CAAAiB,MAAA,CAAAvI,CAAA;MAAA;IAAA;IAED;AACD;AACA;AACA;AACA;IACQ8M,QAAQ,WAAA9K,UAAA,EAAY;MAC1B,OAAO,IAAI,CAACA,SAAS;IACtB,CAAC;IAED;AACD;AACA;AACA;AACA;IACQ+K,SAAS,WAAAC,WAACC,GAAY,EAAQ;MACpC,IAAI,CAACjL,SAAS,GAAGiL,GAAG;IACrB,CAAC;IAED;AACD;AACA;AACA;AACA;IACQC,OAAO,WAAApL,SAAA,EAAY;MACzB,OAAO,IAAI,CAACA,QAAQ;IACrB,CAAC;IAED;AACD;AACA;AACA;AACA;IACQqL,mBAAmB,WAAAC,qBAACH,GAAY,EAAQ;MAC9C,IAAI,CAACnL,QAAQ,GAAGmL,GAAG;IACpB,CAAC;IAED;AACD;AACA;AACA;AACA;IACQI,aAAa,WAAAtL,eAAA,EAAY;MAC/B,OAAO,IAAI,CAACA,cAAc;IAC3B,CAAC;IAED;AACD;AACA;AACA;AACA;IACQuL,kBAAkB,WAAAC,oBAACN,GAAY,EAAQ;MAC7C,IAAI,CAAClL,cAAc,GAAGkL,GAAG;IAC1B,CAAC;IAeD;AACD;AACA;AACA;AACA;IACWnB,OAAO,WAAA0B,SAACC,MAAe,EAAE;MAClC,MAAMC,YAAY,GAAG,IAAI,CAAC3J,oBAAoB,CAAC,CAAC;MAChD2J,YAAY,CAAC5B,OAAO,CAAC2B,MAAM,CAAC;IAC7B,CAAC;IAED;AACD;AACA;AACA;AACA;AACA;IACWE,SAAS,WAAAA,UAACC,OAAe,EAAE;MACpC,MAAMC,MAAM,GAAI,IAAI,CAACC,cAAc,CAAC,QAAQ,CAAC,IAAI,EAAc;MAC/D,OAAOD,MAAM,CAAChE,IAAI,CAAEkE,KAAK,IAAKA,KAAK,CAACC,UAAU,CAAC,CAAC,KAAKJ,OAAO,CAAC;IAC9D,CAAC;IAED;AACD;AACA;AACA;AACA;IACQpM,WAAW,WAAAS,aAAA,EAAG;MACpB,OAAO,IAAI,CAACA,YAAY;IACzB,CAAC;IAED;AACD;AACA;AACA;AACA;IACQgM,YAAY,WAAAC,cAAC1M,WAAoB,EAAE;MACzC,IAAI,CAACS,YAAY,GAAGT,WAAW;IAChC,CAAC;IAED;AACD;AACA;AACA;AACA;AACA;IACW2M,2BAA2B,WAAAA,4BAAA,EAAG;MACvC,IAAIjP,MAAM,CAACkP,IAAI,CAAC,kCAAkC,CAAC,EAAE;QACpDlP,MAAM,CAACmP,EAAE,CAAC,0CAA0C,CAAC,CAACC,EAAE,CAAEC,yBAAkC,IAAK;UAChG,IAAI,CAACC,aAAa,CAAC;YAAEhN,WAAW,EAAE+M;UAA0B,CAAC,CAAC;QAC/D,CAAC,CAAC;MACH;IACD,CAAC;IAED;AACD;AACA;AACA;IACiBE,OAAO,WAAAC,SAAA;MAAA,IAAG;QAAA,MAAAC,MAAA,GAClB,IAAI;QAAA,OAAArH,OAAA,CAAAC,OAAA,CAAJoH,MAAA,CAAK1C,SAAS,CAAC,CAAC,CAAmB2C,YAAY,CAAAD,MAAK,CAAC,EAAA1O,IAAA;MAC7D,CAAC,QAAAD,CAAA;QAAA,OAAAsH,OAAA,CAAAiB,MAAA,CAAAvI,CAAA;MAAA;IAAA;IAED;AACD;AACA;AACA;AACA;IACWgF,0BAA0B,WAAA6J,4BAAA,EAAG;MACtC,IAAI,CAAC,IAAI,CAACC,aAAa,EAAE;QACxB,IAAI,CAACA,aAAa,GAAG,IAAIlQ,kBAAkB,CAAC,GAAG,IAAI,CAAC0E,KAAK,CAAC,CAAC,eAAe,EAAE;UAC3EyL,gBAAgB,EAAElQ,sBAAsB,CAACmQ,IAAI;UAC7CC,gBAAgB,EAAEnQ,sBAAsB,CAACoQ,SAAS;UAClDxJ,KAAK,EAAE,IAAI,CAAC6G,WAAW,CAACC,OAAO,CAAC,aAAa,CAAC;UAC9C2C,WAAW,EAAE,IAAI,CAAC5C,WAAW,CAACC,OAAO,CAAC,QAAQ;QAC/C,CAAC,CAAC;MACH;MACA,OAAO,IAAI,CAACsC,aAAa;IAC1B;EAAC;EAAA,OA1jB4BpO,YAAY;AAAA","ignoreList":[]}