{"version":3,"file":"BaseContainer.js","names":["sap","ui","define","Button","FlexBox","HBox","IconTabBar","IconTabFilter","List","Popover","StandardListItem","Title","sap_m_library","Control","CustomData","UI5Element","Lib","__BaseContainerRenderer","__BasePanel","__MenuItem","___library","___utils_Device","___utils_FESRUtil","_interopRequireDefault","obj","__esModule","default","BackgroundDesign","ButtonType","PlacementType","BaseContainerRenderer","BasePanel","MenuItem","LayoutType","calculateDeviceType","DeviceType","addFESRId","addFESRSemanticStepName","FESR_EVENTS","getFESRId","BaseContainer","extend","renderer","metadata","library","properties","title","type","group","defaultValue","visibility","layout","SideBySide","selectedKey","width","height","blocked","busy","busyIndicatorDelay","busyIndicatorSize","fieldGroupIds","visible","enableSettings","enableFullScreen","fullScreenName","defaultAggregation","aggregations","content","singularName","multiple","actionButtons","menuItems","associations","fullScreenButton","fullScreenMenuItem","events","onExpand","designtime","adjustLayout","_adjustLayout","constructor","_constructor","id","settings","Control.prototype.constructor.call","this","init","_init","_controlMap","Map","_commonHeaderElementStates","_i18nBundle","getResourceBundleFor","_createHeader","control","controlId","getId","isPanel","isA","hasContainerTitle","getProperty","trim","length","get","set","titleStyle","renderType","addStyleClass","justifyContent","items","alignItems","addDependent","_getHeader","_getInnerControl","_iconTabBar","_wrapper","_onPanelSelect","event","setProperty","getParameter","_updateContainerHeader","_setPanelCount","panel","count","_getIconTabFilter","setCount","_addToPanel","addContent","addItem","iconTabFilter","key","text","tooltip","addCustomData","value","writeToDom","SELECT","_getContent","forEach","onBeforeRendering","_onBeforeRendering","_createInnerControl","_addAllPanelContent","onAfterRendering","_onAfterRendering","_attachResizeHandler","getDomRef","_resizeObserver","disconnect","ResizeObserver","entries","_setDeviceType","observe","Horizontal","Vertical","setDirection","expandable","backgroundDesign","Transparent","headerMode","headerBackgroundDesign","select","removeAllItems","_updateHeader","isSideBySideLayout","isContainer","headerTitle","setText","setVisible","_addCommonHeaderElements","currentControl","_getSelectedPanel","targetControl","getAggregation","_addMenuItems","actionButton","_getHeaderButton","attachHeaderElements","elements","property","aggregation","headerElement","_getFullScreenMenuItem","_getHomeSettingsMenuItem","_getFullScreenButton","_ref","_getLayout","currentPropertyValue","previousPropertyValue","addAggregation","setAssociation","registerFullScreenElement","removeAggregation","removeAssociation","deregisterFullScreenElement","panels","getContent","menuItem","getText","icon","press","openSettingsDialog","toggleFullScreen","find","setSelectedKey","_getPanelContentWrapper","direction","_updatePanelHeader","header","isTitleVisible","toggleStyleClass","_setTitle","list","itemPress","getSource","getParent","close","menuPopover","placement","VerticalPreferredBottom","showHeader","menuButton","openBy","item","_getMenuListItem","headerButton","firePress","PRESS","button","setTooltip","getTooltip","setIcon","getIcon","getVisible","setEnabled","getEnabled","getElementById","getAssociation","getTitle","menuListItem","setTitle","toggleMenuListItem","_toggleMenuListItem","show","removeContent","_removeContent","undefined","getWidth","_getWidth","toggleActionButtons","_toggleActionButtons","visibilityChanged","getActionButtons","currentVisibility","toggleFullScreenElements","_toggleFullScreenElements","element","isElementExpanded","fullScreenMenuButton","isPhone","getDeviceType","Mobile","elementVisibilityChanged","fullScreenElement","elementKey","getKey","entry","contentRect","deviceType","_deviceType","_getDeviceType"],"sources":["BaseContainer.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport Button from \"sap/m/Button\";\nimport FlexBox from \"sap/m/FlexBox\";\nimport HBox from \"sap/m/HBox\";\nimport IconTabBar, { IconTabBar$SelectEvent } from \"sap/m/IconTabBar\";\nimport IconTabFilter from \"sap/m/IconTabFilter\";\nimport List from \"sap/m/List\";\nimport Popover from \"sap/m/Popover\";\nimport StandardListItem from \"sap/m/StandardListItem\";\nimport Title from \"sap/m/Title\";\nimport { BackgroundDesign, ButtonType, PlacementType } from \"sap/m/library\";\nimport Event from \"sap/ui/base/Event\";\nimport Control from \"sap/ui/core/Control\";\nimport CustomData from \"sap/ui/core/CustomData\";\nimport type { MetadataOptions } from \"sap/ui/core/Element\";\nimport UI5Element from \"sap/ui/core/Element\";\nimport Lib from \"sap/ui/core/Lib\";\nimport { CSSSize } from \"sap/ui/core/library\";\nimport { $BaseContainerSettings } from \"./BaseContainer\";\nimport BaseContainerRenderer from \"./BaseContainerRenderer\";\nimport BaseLayout from \"./BaseLayout\";\nimport BasePanel from \"./BasePanel\";\nimport MenuItem from \"./MenuItem\";\nimport { LayoutType } from \"./library\";\nimport { calculateDeviceType, DeviceType } from \"./utils/Device\";\nimport { addFESRId, addFESRSemanticStepName, FESR_EVENTS, getFESRId } from \"./utils/FESRUtil\";\n\n/**\n *\n * Abstract base class for My Home layout control container.\n *\n * @extends sap.ui.core.Control\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @abstract\n * @internal\n * @experimental Since 1.121\n * @private\n *\n * @alias sap.cux.home.BaseContainer\n */\nexport default abstract class BaseContainer extends Control {\n\tprotected _i18nBundle!: ResourceBundle;\n\tprivate _controlMap!: Map<string, Control | UI5Element>;\n\tprivate _wrapper!: FlexBox;\n\tprivate _iconTabBar!: IconTabBar;\n\tprivate _commonHeaderElementStates!: Map<string, boolean>;\n\tprivate _resizeObserver!: ResizeObserver;\n\tprivate _deviceType!: DeviceType;\n\tpublic adjustLayout() {}\n\n\tconstructor(id?: string | $BaseContainerSettings);\n\tconstructor(id?: string, settings?: $BaseContainerSettings);\n\tconstructor(id?: string, settings?: $BaseContainerSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tproperties: {\n\t\t\t/**\n\t\t\t * Title of the container.\n\t\t\t */\n\t\t\ttitle: { type: \"string\", group: \"Data\", defaultValue: \"\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Layout type of the container.\n\t\t\t */\n\t\t\tlayout: {\n\t\t\t\ttype: \"sap.cux.home.LayoutType\",\n\t\t\t\tgroup: \"Data\",\n\t\t\t\tdefaultValue: LayoutType.SideBySide,\n\t\t\t\tvisibility: \"hidden\"\n\t\t\t},\n\t\t\t/**\n\t\t\t * Key of the selected panel of the container.\n\t\t\t */\n\t\t\tselectedKey: { type: \"string\", group: \"Data\", defaultValue: \"\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Width to be set for the container.\n\t\t\t * @public\n\t\t\t */\n\t\t\twidth: { type: \"sap.ui.core.CSSSize\", group: \"Appearance\", defaultValue: \"100%\", visibility: \"public\" },\n\t\t\t/**\n\t\t\t * Height to be set for the container.\n\t\t\t * @public\n\t\t\t */\n\t\t\theight: { type: \"sap.ui.core.CSSSize\", group: \"Appearance\", visibility: \"public\" },\n\t\t\t/**\n\t\t\t * Whether the control is currently in blocked state.\n\t\t\t */\n\t\t\tblocked: { type: \"boolean\", group: \"Appearance\", defaultValue: false, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Whether the layout is currently in busy state.\n\t\t\t */\n\t\t\tbusy: { type: \"boolean\", group: \"Appearance\", defaultValue: false, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * The delay in milliseconds, after which the busy indicator will show up for this control.\n\t\t\t */\n\t\t\tbusyIndicatorDelay: { type: \"int\", defaultValue: 1000, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * The size of the BusyIndicator.\n\t\t\t */\n\t\t\tbusyIndicatorSize: { type: \"sap.ui.core.BusyIndicatorSize\", defaultValue: \"Medium\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * The IDs of a logical field group that this control belongs to.\n\t\t\t */\n\t\t\tfieldGroupIds: { type: \"string[]\", defaultValue: [], visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * The visible property of the container.\n\t\t\t */\n\t\t\tvisible: { type: \"boolean\", group: \"Appearance\", defaultValue: true, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Indicates whether home settings are enabled for this control.\n\t\t\t */\n\t\t\tenableSettings: { type: \"boolean\", group: \"Misc\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Indicates whether full screen is enabled for this control.\n\t\t\t */\n\t\t\tenableFullScreen: { type: \"boolean\", group: \"Misc\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * The name of the URL parameter used to expand the container into full-screen mode.\n\t\t\t * This property specifies the parameter key expected in the URL query string\n\t\t\t * to identify the container to be expanded.\n\t\t\t */\n\t\t\tfullScreenName: { type: \"string\", group: \"Misc\", visibility: \"hidden\" }\n\t\t},\n\t\tdefaultAggregation: \"content\",\n\t\taggregations: {\n\t\t\t/**\n\t\t\t * The container content aggregation which should be of type BasePanel.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\tcontent: { type: \"sap.cux.home.BasePanel\", singularName: \"content\", multiple: true, visibility: \"public\" },\n\t\t\t/**\n\t\t\t * This aggregation contains the actions that should be displayed within the container.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\tactionButtons: { type: \"sap.m.Button\", multiple: true, singularName: \"actionButton\", visibility: \"public\" },\n\t\t\t/**\n\t\t\t * This aggregation holds the items that should be shown within the dropdown menu of the container.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\tmenuItems: { type: \"sap.cux.home.MenuItem\", multiple: true, singularName: \"menuItem\", visibility: \"public\" }\n\t\t},\n\t\tassociations: {\n\t\t\tlayout: { type: \"sap.cux.home.BaseLayout\", multiple: false, singularName: \"layout\", visibility: \"hidden\" },\n\t\t\tfullScreenButton: { type: \"sap.m.Button\", multiple: false, singularName: \"fullScreenButton\", visibility: \"hidden\" },\n\t\t\tfullScreenMenuItem: { type: \"sap.cux.home.MenuItem\", multiple: false, singularName: \"fullScreenMenuItem\", visibility: \"hidden\" }\n\t\t},\n\t\tevents: {\n\t\t\t/**\n\t\t\t * Event is fired before the container is expanded.\n\t\t\t */\n\t\t\tonExpand: {}\n\t\t},\n\t\tdesigntime: true\n\t};\n\n\tstatic renderer: typeof BaseContainerRenderer = BaseContainerRenderer;\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tthis._controlMap = new Map();\n\t\tthis._commonHeaderElementStates = new Map();\n\t\tthis._i18nBundle = Lib.getResourceBundleFor(\"sap.cux.home.i18n\") as ResourceBundle;\n\t\tthis._createHeader(this);\n\t}\n\n\t/**\n\t * Creates and returns header for both container as well as panels\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} control - can be a container or a panel\n\t * @returns {HBox} header for the given container or panel\n\t */\n\tprivate _createHeader(control: BaseContainer | BasePanel): HBox {\n\t\tconst controlId = control.getId();\n\t\tconst id = `${controlId}-header`;\n\t\tconst isPanel = control.isA(\"sap.cux.home.BasePanel\");\n\t\tconst hasContainerTitle = (this.getProperty(\"title\") as string)?.trim().length > 0;\n\n\t\tif (!this._controlMap.get(id)) {\n\t\t\t//create header elements\n\t\t\tthis._controlMap.set(\n\t\t\t\t`${controlId}-header-title`,\n\t\t\t\tnew Title(`${controlId}-title`, { titleStyle: isPanel && hasContainerTitle ? \"H6\" : \"H4\" })\n\t\t\t);\n\t\t\tthis._controlMap.set(\n\t\t\t\t`${controlId}-header-contentLeft`,\n\t\t\t\tnew HBox(`${controlId}-contentLeft`, { renderType: \"Bare\" }).addStyleClass(\"sapCuxSectionContentArea\")\n\t\t\t);\n\t\t\tthis._controlMap.set(\n\t\t\t\t`${controlId}-header-contentRight`,\n\t\t\t\tnew HBox(`${controlId}-contentRight`, { renderType: \"Bare\" }).addStyleClass(\"sapCuxSectionContentArea\")\n\t\t\t);\n\t\t\tthis._controlMap.set(\n\t\t\t\t`${controlId}-header-content`,\n\t\t\t\tnew HBox(`${controlId}-content`, {\n\t\t\t\t\twidth: \"100%\",\n\t\t\t\t\tjustifyContent: \"SpaceBetween\",\n\t\t\t\t\trenderType: \"Bare\",\n\t\t\t\t\titems: [\n\t\t\t\t\t\tthis._controlMap.get(`${controlId}-header-contentLeft`) as Control,\n\t\t\t\t\t\tthis._controlMap.get(`${controlId}-header-contentRight`) as Control\n\t\t\t\t\t]\n\t\t\t\t}).addStyleClass(\"sapUiTinyMarginBegin\")\n\t\t\t);\n\n\t\t\t//create header container\n\t\t\tthis._controlMap.set(\n\t\t\t\tid,\n\t\t\t\tnew HBox(`${controlId}-header`, {\n\t\t\t\t\talignItems: \"Center\",\n\t\t\t\t\titems: [\n\t\t\t\t\t\tthis._controlMap.get(`${controlId}-header-title`) as Control,\n\t\t\t\t\t\tthis._controlMap.get(`${controlId}-header-content`) as Control\n\t\t\t\t\t]\n\t\t\t\t})\n\t\t\t);\n\n\t\t\tthis.addDependent(this._controlMap.get(id) as Control);\n\t\t}\n\n\t\t//add control-specific styling\n\t\t(this._controlMap.get(id) as HBox)?.addStyleClass(isPanel && hasContainerTitle ? \"sapCuxPanelHeader\" : \"sapUiContainerHeader\");\n\n\t\treturn this._controlMap.get(id) as HBox;\n\t}\n\n\t/**\n\t * Returns container header\n\t *\n\t * @private\n\t * @returns {Object} container header\n\t */\n\tpublic _getHeader(): HBox {\n\t\treturn this._controlMap.get(`${this.getId()}-header`) as HBox;\n\t}\n\n\t/**\n\t * Returns inner control corresponding to the specified layout\n\t *\n\t * @private\n\t * @returns {IconTabBar | FlexBox} inner control based on the layout\n\t */\n\tpublic _getInnerControl(): IconTabBar | FlexBox {\n\t\treturn this.getProperty(\"layout\") === LayoutType.SideBySide ? this._iconTabBar : this._wrapper;\n\t}\n\n\t/**\n\t * Handler for selection of panel in SideBySide layout\n\t *\n\t * @private\n\t * @param {Event} event - event object\n\t */\n\tprotected _onPanelSelect(event: IconTabBar$SelectEvent) {\n\t\t//suppress invalidation to prevent container re-rendering. render the specific header element instead\n\t\tthis.setProperty(\"selectedKey\", event.getParameter(\"selectedKey\"), true);\n\t\tthis._updateContainerHeader(this);\n\t}\n\n\t/**\n\t * Updates the count information of IconTabFilter of IconTabBar inner control\n\t * in case of SideBySide layout\n\t *\n\t * @private\n\t * @param {BasePanel} panel - associated panel\n\t * @param {string} count - updated count\n\t */\n\tpublic _setPanelCount(panel: BasePanel, count?: string) {\n\t\tif (this.getProperty(\"layout\") === LayoutType.SideBySide) {\n\t\t\tthis._getIconTabFilter(panel).setCount(count);\n\t\t}\n\t}\n\n\t/**\n\t * Adds corresponding control to panel. The control would be added to the\n\t * corresponding target inner control based on the layout.\n\t *\n\t * @private\n\t * @param {BasePanel} panel - panel to which control must be added\n\t * @param {Control} control - control to be added\n\t */\n\tpublic _addToPanel(panel: BasePanel, control: Control): void {\n\t\tif (this.getProperty(\"layout\") === LayoutType.SideBySide) {\n\t\t\tthis._getIconTabFilter(panel)?.addContent(control);\n\t\t} else {\n\t\t\t(this._controlMap.get(`${panel.getId()}-wrapper`) as FlexBox)?.addItem(control);\n\t\t}\n\t}\n\n\t/**\n\t * Creates and returns IconTabBarFilter for the specified panel to be placed\n\t * in the IconTabBar inner control in case of SideBySide layout\n\t *\n\t * @private\n\t * @param {BasePanel} panel - panel whose icon tab filter must be fetched\n\t * @returns {IconTabFilter} IconTabFilter for the specified panel\n\t */\n\tprivate _getIconTabFilter(panel: BasePanel): IconTabFilter {\n\t\tconst id = `${panel.getId()}-tabFilter`;\n\n\t\tif (!this._controlMap.get(id)) {\n\t\t\tconst iconTabFilter = new IconTabFilter(id, {\n\t\t\t\tkey: panel.getProperty(\"key\") as string,\n\t\t\t\ttext: panel.getProperty(\"title\") as string,\n\t\t\t\ttooltip: panel.getProperty(\"tooltip\") as string\n\t\t\t});\n\t\t\ticonTabFilter.addCustomData(\n\t\t\t\tnew CustomData({\n\t\t\t\t\tkey: \"sap-ui-fastnavgroup\",\n\t\t\t\t\tvalue: \"true\",\n\t\t\t\t\twriteToDom: true\n\t\t\t\t})\n\t\t\t);\n\t\t\tthis._controlMap.set(id, iconTabFilter);\n\t\t\taddFESRSemanticStepName(iconTabFilter, FESR_EVENTS.SELECT, panel.getProperty(\"key\") as string);\n\t\t}\n\n\t\t//Add panel content to the created filter\n\t\tpanel._getContent()?.forEach((content) => (this._controlMap.get(id) as IconTabFilter).addContent(content));\n\n\t\treturn this._controlMap.get(id) as IconTabFilter;\n\t}\n\n\t/**\n\t * onBeforeRendering lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic onBeforeRendering(): void {\n\t\t//create layout-specific inner control\n\t\tthis._createInnerControl();\n\n\t\t//fetch and update container header\n\t\tthis._updateContainerHeader(this);\n\n\t\t//add content from all panels to inner control\n\t\tthis._addAllPanelContent();\n\t}\n\n\t/**\n\t * onAfterRendering lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic onAfterRendering(): void {\n\t\tthis._attachResizeHandler();\n\t}\n\n\t/**\n\t * Attaches a resize handler to the container to adjust\n\t * the layout based on device size changes.\n\t *\n\t * @private\n\t */\n\tprivate _attachResizeHandler() {\n\t\tif (this.getDomRef()) {\n\t\t\tthis._resizeObserver?.disconnect();\n\t\t\tthis._resizeObserver = new ResizeObserver((entries) => {\n\t\t\t\tthis._setDeviceType(entries);\n\t\t\t\tthis.adjustLayout();\n\t\t\t});\n\t\t\tthis._resizeObserver?.observe(this.getDomRef() as Element);\n\t\t}\n\t}\n\n\t/**\n\t * Create inner control for storing content from panel\n\t *\n\t * @private\n\t */\n\tprivate _createInnerControl(): void {\n\t\tconst layout = this.getProperty(\"layout\") as LayoutType;\n\n\t\tif (layout === LayoutType.Horizontal || layout === LayoutType.Vertical) {\n\t\t\tif (!this._wrapper) {\n\t\t\t\tthis._wrapper = new FlexBox(`${this.getId()}-wrapper`, {\n\t\t\t\t\twidth: \"100%\",\n\t\t\t\t\trenderType: \"Bare\"\n\t\t\t\t}).addStyleClass(\"sapCuxBaseWrapper\");\n\t\t\t\tthis.addDependent(this._wrapper);\n\t\t\t}\n\t\t\tthis._wrapper.setDirection(layout === LayoutType.Horizontal ? \"Row\" : \"Column\");\n\t\t} else if (!this._iconTabBar) {\n\t\t\tthis._iconTabBar = new IconTabBar(`${this.getId()}-iconTabBar`, {\n\t\t\t\texpandable: true,\n\t\t\t\tbackgroundDesign: BackgroundDesign.Transparent,\n\t\t\t\theaderMode: \"Inline\",\n\t\t\t\theaderBackgroundDesign: BackgroundDesign.Transparent,\n\t\t\t\tselect: (event: Event) => this._onPanelSelect(event)\n\t\t\t});\n\t\t\tthis.addDependent(this._iconTabBar);\n\t\t}\n\t}\n\n\t/**\n\t * Update container header information\n\t *\n\t * @private\n\t */\n\tpublic _updateContainerHeader(control: BaseContainer | BasePanel): void {\n\t\t//clear container header elements\n\t\t(this._controlMap.get(control.getId() + \"-header-contentLeft\") as HBox)?.removeAllItems();\n\t\t(this._controlMap.get(control.getId() + \"-header-contentRight\") as HBox)?.removeAllItems();\n\n\t\t//update container header elements\n\t\tthis._updateHeader(control);\n\t}\n\n\t/**\n\t * Updates header information of a specified container or a panel\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} control - can be container or panel\n\t */\n\tprivate _updateHeader(control: BaseContainer | BasePanel): void {\n\t\tconst isSideBySideLayout = this.getProperty(\"layout\") === LayoutType.SideBySide;\n\t\tconst isContainer = control.isA(\"sap.cux.home.BaseContainer\");\n\n\t\t//Update Title\n\t\tconst headerTitle = this._controlMap.get(control.getId() + \"-header-title\") as Title;\n\t\theaderTitle?.setText(control.getProperty(\"title\") as string);\n\t\theaderTitle?.setVisible((control.getProperty(\"title\") as string)?.trim().length > 0);\n\n\t\t//Add common header elements\n\t\tthis._addCommonHeaderElements();\n\n\t\tconst currentControl = isContainer && isSideBySideLayout ? this._getSelectedPanel() : control;\n\t\tconst targetControl = !isContainer && isSideBySideLayout ? this : control;\n\n\t\t//Update Menu Items\n\t\tconst menuItems = (currentControl?.getAggregation(\"menuItems\") || []) as MenuItem[];\n\t\tif (menuItems.length > 0) {\n\t\t\tthis._addMenuItems(targetControl, menuItems);\n\t\t}\n\n\t\t//Update Action Buttons\n\t\t(currentControl?.getAggregation(\"actionButtons\") as Button[])?.forEach((actionButton: Button) => {\n\t\t\t(this._controlMap.get(targetControl.getId() + \"-header-contentRight\") as HBox)?.addItem(this._getHeaderButton(actionButton));\n\t\t});\n\t}\n\n\t/**\n\t * Attaches common header elements like settings menu and full screen action to each\n\t * panel in the container, if enabled.\n\t *\n\t * @private\n\t */\n\tprivate _addCommonHeaderElements(): void {\n\t\tconst attachHeaderElements = (control: BaseContainer | BasePanel) => {\n\t\t\tconst elements = [\n\t\t\t\t{ property: \"enableFullScreen\", aggregation: \"menuItems\", headerElement: this._getFullScreenMenuItem(control) },\n\t\t\t\t{ property: \"enableSettings\", aggregation: \"menuItems\", headerElement: this._getHomeSettingsMenuItem(control) },\n\t\t\t\t{ property: \"enableFullScreen\", aggregation: \"actionButtons\", headerElement: this._getFullScreenButton(control) }\n\t\t\t];\n\n\t\t\telements.forEach(({ property, aggregation, headerElement }) => {\n\t\t\t\tconst layout = this._getLayout();\n\t\t\t\tconst currentPropertyValue = control.getProperty(property) as boolean;\n\t\t\t\tconst previousPropertyValue = this._commonHeaderElementStates.get(`${headerElement.getId()}-${property}`);\n\n\t\t\t\t//update common header elements only if there's a change in property value\n\t\t\t\tif (currentPropertyValue !== previousPropertyValue) {\n\t\t\t\t\tif (currentPropertyValue) {\n\t\t\t\t\t\tthis._commonHeaderElementStates.set(`${headerElement.getId()}-${property}`, currentPropertyValue);\n\t\t\t\t\t\tcontrol.addAggregation(aggregation, headerElement);\n\n\t\t\t\t\t\t//register full screen element with layout\n\t\t\t\t\t\tif (property === \"enableFullScreen\") {\n\t\t\t\t\t\t\tif (aggregation === \"actionButtons\") {\n\t\t\t\t\t\t\t\tcontrol.setAssociation(\"fullScreenButton\", headerElement, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (aggregation === \"menuItems\") {\n\t\t\t\t\t\t\t\tcontrol.setAssociation(\"fullScreenMenuItem\", headerElement, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlayout?.registerFullScreenElement(control);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._commonHeaderElementStates.set(`${headerElement.getId()}-${property}`, currentPropertyValue);\n\t\t\t\t\t\tcontrol.removeAggregation(aggregation, headerElement);\n\n\t\t\t\t\t\t//deregister full screen element with layout\n\t\t\t\t\t\tif (property === \"enableFullScreen\") {\n\t\t\t\t\t\t\tif (aggregation === \"actionButtons\") {\n\t\t\t\t\t\t\t\tcontrol.removeAssociation(\"fullScreenButton\", headerElement, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (aggregation === \"menuItems\") {\n\t\t\t\t\t\t\t\tcontrol.removeAssociation(\"fullScreenMenuItem\", headerElement, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlayout?.deregisterFullScreenElement(control);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t// Add common header elements for container\n\t\tattachHeaderElements(this);\n\n\t\t// Add common header elements for inner panels\n\t\tconst panels = this.getContent() || [];\n\t\tpanels.forEach(attachHeaderElements);\n\t}\n\n\t/**\n\t * Retrieves the my home settings menu item for a given panel.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} panel - The panel for which to retrieve the home settings menu item.\n\t * @returns {MenuItem} The settings menu item for the given panel.\n\t */\n\tprivate _getHomeSettingsMenuItem(panel: BaseContainer | BasePanel): MenuItem {\n\t\tconst id = `${panel.getId()}-settings`;\n\t\tif (!this._controlMap.get(id)) {\n\t\t\tconst menuItem = new MenuItem(id, {\n\t\t\t\ttitle: this._i18nBundle.getText(\"myHomeSettings\"),\n\t\t\t\ticon: \"sap-icon://user-settings\",\n\t\t\t\tpress: () => {\n\t\t\t\t\t//open settings dialog\n\t\t\t\t\tconst layout = this._getLayout();\n\t\t\t\t\tlayout?.openSettingsDialog();\n\t\t\t\t}\n\t\t\t});\n\t\t\taddFESRId(menuItem, \"myHomeSettings\");\n\t\t\tthis._controlMap.set(id, menuItem);\n\t\t}\n\n\t\treturn this._controlMap.get(id) as MenuItem;\n\t}\n\n\t/**\n\t * Retrieves the full screen menu item for a given panel.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} panel - The panel for which to retrieve the home settings menu item.\n\t * @returns {MenuItem} The settings menu item for the given panel.\n\t */\n\tprivate _getFullScreenMenuItem(panel: BaseContainer | BasePanel): MenuItem {\n\t\tconst id = `${panel.getId()}-showMore`;\n\t\tif (!this._controlMap.get(id)) {\n\t\t\tconst fullScreenMenuItem = new MenuItem(id, {\n\t\t\t\ttitle: this._i18nBundle.getText(\"expand\"),\n\t\t\t\ticon: \"sap-icon://display-more\",\n\t\t\t\tpress: () => {\n\t\t\t\t\tconst layout = this._getLayout();\n\t\t\t\t\tlayout?.toggleFullScreen(panel);\n\t\t\t\t}\n\t\t\t});\n\t\t\taddFESRId(fullScreenMenuItem, \"toggleFullScreen\");\n\t\t\tthis._controlMap.set(id, fullScreenMenuItem);\n\t\t}\n\t\treturn this._controlMap.get(id) as MenuItem;\n\t}\n\n\t/**\n\t * Generates a full screen action button for a given control, which can be a panel or a container.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} control - The control for which the full screen button is generated.\n\t * @returns {Button} A Button instance configured to toggle full screen mode for the specified control.\n\t */\n\tprivate _getFullScreenButton(control: BaseContainer | BasePanel): Button {\n\t\tconst id = `${control.getId()}-fullScreen`;\n\t\tif (!this._controlMap.get(id)) {\n\t\t\tconst fullScreenButton = new Button(id, {\n\t\t\t\ttext: this._i18nBundle.getText(\"expand\"),\n\t\t\t\ttype: ButtonType.Transparent,\n\t\t\t\tpress: () => {\n\t\t\t\t\tconst layout = this._getLayout();\n\t\t\t\t\tlayout?.toggleFullScreen(control);\n\t\t\t\t}\n\t\t\t});\n\t\t\taddFESRId(fullScreenButton, \"toggleFullScreen\");\n\t\t\tthis._controlMap.set(id, fullScreenButton);\n\t\t}\n\n\t\treturn this._controlMap.get(id) as Button;\n\t}\n\n\t/**\n\t * Returns the selected panel in the IconTabBar inner control in\n\t * case of SideBySide layout\n\t *\n\t * @private\n\t * @returns {BasePanel} selected panel\n\t */\n\tpublic _getSelectedPanel(): BasePanel {\n\t\tconst panel =\n\t\t\tthis.getContent()?.find((panel) => panel.getProperty(\"key\") === this.getProperty(\"selectedKey\")) || this.getContent()?.[0];\n\t\tthis.setProperty(\"selectedKey\", panel?.getProperty(\"key\"), true);\n\n\t\treturn panel;\n\t}\n\n\t/**\n\t * Add content from all panels to the layout-specific inner control\n\t *\n\t * @private\n\t */\n\tprivate _addAllPanelContent(): void {\n\t\tconst panels = this.getContent() || [];\n\n\t\tif (this.getProperty(\"layout\") === LayoutType.SideBySide) {\n\t\t\tthis._iconTabBar.removeAllItems();\n\t\t\tpanels.forEach((panel) => this._iconTabBar.addItem(this._getIconTabFilter(panel)));\n\t\t\tthis._iconTabBar.setSelectedKey(this.getProperty(\"selectedKey\") as string);\n\t\t} else {\n\t\t\tthis._wrapper.removeAllItems();\n\t\t\tpanels.forEach((panel) => this._wrapper.addItem(this._getPanelContentWrapper(panel)));\n\t\t}\n\t}\n\n\t/**\n\t * Creates and returns a wrapper for containing the specified panel\n\t * content in case of Horizontal and Vertical layout\n\t *\n\t * @private\n\t * @param {BasePanel} panel - panel for which wrapper has to created\n\t * @returns {FlexBox} wrapper container for the given panel\n\t */\n\tprotected _getPanelContentWrapper(panel: BasePanel): FlexBox {\n\t\tconst id = `${panel.getId()}-contentWrapper`;\n\n\t\tif (!this._controlMap.get(id)) {\n\t\t\tthis._controlMap.set(\n\t\t\t\tid,\n\t\t\t\tnew FlexBox(id, {\n\t\t\t\t\tdirection: \"Column\",\n\t\t\t\t\trenderType: \"Bare\"\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\n\t\t//Add header as the first item in case of Horizontal and Vertical layout\n\t\t(this._controlMap.get(id) as FlexBox).addItem(this._updatePanelHeader(panel));\n\t\tpanel._getContent()?.forEach((content) => (this._controlMap.get(id) as FlexBox).addItem(content));\n\n\t\treturn this._controlMap.get(id) as FlexBox;\n\t}\n\n\t/**\n\t * Returns header of the specified panel after updating it\n\t *\n\t * @private\n\t * @param {BasePanel} panel - panel to be updated\n\t * @returns {HBox} header associated with the panel\n\t */\n\tprivate _updatePanelHeader(panel: BasePanel): HBox {\n\t\tconst header = this._createHeader(panel);\n\t\tconst isTitleVisible = (panel.getProperty(\"title\") as string)?.trim().length > 0;\n\t\tconst hasContainerTitle = (this.getProperty(\"title\") as string)?.trim().length > 0;\n\n\t\t//update panel header elements\n\t\tthis._updateContainerHeader(panel);\n\n\t\t//add header styling only if any of the header elements are visible\n\t\theader.toggleStyleClass(\n\t\t\t\"sapCuxPanelHeader\",\n\t\t\thasContainerTitle &&\n\t\t\t\t(isTitleVisible ||\n\t\t\t\t\t(panel.getAggregation(\"menuItems\") as MenuItem[])?.length > 0 ||\n\t\t\t\t\t(panel.getAggregation(\"actionButtons\") as Button[])?.length > 0)\n\t\t);\n\n\t\treturn header;\n\t}\n\n\t/**\n\t * Setter for container title\n\t *\n\t * @private\n\t * @param {string} title - updated title\n\t * @returns {BaseContainer} BaseContainer instance for chaining\n\t */\n\tpublic _setTitle(title: string): BaseContainer {\n\t\t//suppress invalidate to prevent container re-rendering. re-render only the concerned element\n\t\tthis.setProperty(\"title\", title, true);\n\t\t(this._controlMap.get(`${this.getId()}-header-title`) as Title).setText(title);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds menu items to a control and sets up a menu button to display them.\n\t * If the menu for the control doesn't exist, it creates a new one.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} control - The control to which the menu items will be added.\n\t * @param {MenuItem[]} menuItems - An array of menu items to be added to the menu.\n\t */\n\tprivate _addMenuItems(control: BaseContainer | BasePanel, menuItems: MenuItem[]): void {\n\t\tif (!this._controlMap.get(`${control.getId()}-menu`)) {\n\t\t\t//create menu list\n\t\t\tconst list = new List(`${control.getId()}-list`, {\n\t\t\t\titemPress: (event) => (event.getSource<List>().getParent() as Popover).close()\n\t\t\t});\n\t\t\tthis._controlMap.set(`${control.getId()}-menu`, list);\n\n\t\t\t//create menu popover\n\t\t\tconst menuPopover = new Popover(`${control.getId()}-popover`, {\n\t\t\t\tplacement: PlacementType.VerticalPreferredBottom,\n\t\t\t\tshowHeader: false,\n\t\t\t\tcontent: [list]\n\t\t\t});\n\n\t\t\t//create menu button\n\t\t\tconst menuButton = new Button(`${control.getId()}-menu-btn`, {\n\t\t\t\ticon: \"sap-icon://slim-arrow-down\",\n\t\t\t\ttype: ButtonType.Transparent,\n\t\t\t\tpress: (event) => menuPopover.openBy(event.getSource<Button>())\n\t\t\t});\n\t\t\tthis._controlMap.set(`${control.getId()}-menu-btn`, menuButton);\n\t\t}\n\n\t\t//add menu button to header\n\t\t(this._controlMap.get(control.getId() + \"-header-contentLeft\") as HBox)?.addItem(\n\t\t\tthis._controlMap.get(`${control.getId()}-menu-btn`) as Button\n\t\t);\n\n\t\t//Clear existing menu items and add new ones\n\t\t(this._controlMap.get(`${control.getId()}-menu`) as List).removeAllItems();\n\t\tmenuItems.forEach((item) => (this._controlMap.get(`${control.getId()}-menu`) as List).addItem(this._getMenuListItem(item)));\n\t}\n\n\t/**\n\t * Creates and returns a button for the corresponding header ActionButton\n\t *\n\t * @private\n\t * @param {Button} headerButton - ActionButton element\n\t * @returns {Button} Button instance created for the header element\n\t */\n\tprivate _getHeaderButton(headerButton: Button): Button {\n\t\tconst id = `${headerButton.getId()}-btn`;\n\t\tif (!this._controlMap.get(id)) {\n\t\t\tthis._controlMap.set(\n\t\t\t\tid,\n\t\t\t\tnew Button(id, {\n\t\t\t\t\ttype: ButtonType.Transparent,\n\t\t\t\t\tpress: () => headerButton.firePress()\n\t\t\t\t})\n\t\t\t);\n\t\t\taddFESRSemanticStepName(this._controlMap.get(id) as Button, FESR_EVENTS.PRESS, getFESRId(headerButton));\n\t\t}\n\n\t\t//Update button details\n\t\tconst button = this._controlMap.get(id) as Button;\n\t\tbutton.setText(headerButton.getText());\n\t\tbutton.setTooltip(headerButton.getTooltip() as string);\n\t\tbutton.setIcon(headerButton.getIcon());\n\t\tbutton.setVisible(headerButton.getVisible());\n\t\tbutton.setEnabled(headerButton.getEnabled());\n\n\t\treturn button;\n\t}\n\n\t/**\n\t * Retrieves the layout associated with the container, if available.\n\t *\n\t * @private\n\t * @returns {BaseLayout} The layout associated with the BaseContainer.\n\t */\n\tpublic _getLayout(): BaseLayout {\n\t\treturn UI5Element.getElementById(this.getAssociation(\"layout\", null) as string) as BaseLayout;\n\t}\n\n\t/**\n\t * Retrieves or creates a menu list item for a given menu item.\n\t *\n\t * @private\n\t * @param {MenuItem} menuItem - The menu item for which to retrieve or create a list item.\n\t * @returns {StandardListItem} The menu list item associated with the provided menu item.\n\t */\n\tprivate _getMenuListItem(menuItem: MenuItem): StandardListItem {\n\t\tif (!this._controlMap.get(`${menuItem.getId()}-listItem`)) {\n\t\t\tthis._controlMap.set(\n\t\t\t\t`${menuItem.getId()}-listItem`,\n\t\t\t\tnew StandardListItem(`${menuItem.getId()}-listItem`, {\n\t\t\t\t\ttype: \"Active\",\n\t\t\t\t\ticon: menuItem.getIcon(),\n\t\t\t\t\ttitle: menuItem.getTitle(),\n\t\t\t\t\tpress: (event) => menuItem.firePress({ button: event.getSource<Button>() })\n\t\t\t\t})\n\t\t\t);\n\t\t\taddFESRSemanticStepName(\n\t\t\t\tthis._controlMap.get(`${menuItem.getId()}-listItem`) as StandardListItem,\n\t\t\t\tFESR_EVENTS.PRESS,\n\t\t\t\tgetFESRId(menuItem)\n\t\t\t);\n\t\t}\n\t\t//Update list item details\n\t\tconst menuListItem = this._controlMap.get(`${menuItem.getId()}-listItem`) as StandardListItem;\n\t\tmenuListItem.setIcon(menuItem.getIcon());\n\t\tmenuListItem.setTitle(menuItem.getTitle());\n\t\tmenuListItem.setVisible(menuItem.getVisible());\n\t\treturn menuListItem;\n\t}\n\n\t/**\n\t * Toggles the visibility of menu Item.\n\t *\n\t * @private\n\t * @param {boolean} show - Indicates whether to show or hide the menu item.\n\t * @returns {void}\n\t */\n\tpublic toggleMenuListItem(menuItem: MenuItem, show: boolean): void {\n\t\tif (menuItem) {\n\t\t\tconst menuListItem = this._getMenuListItem(menuItem);\n\t\t\tmenuListItem?.setVisible(show);\n\t\t}\n\t}\n\n\tpublic removeContent(panel: BasePanel) {\n\t\tif (this.getProperty(\"selectedKey\") && this.getProperty(\"selectedKey\") === panel.getProperty(\"key\")) {\n\t\t\tthis.setProperty(\"selectedKey\", undefined, true);\n\t\t}\n\t\tthis.removeAggregation(\"content\", panel);\n\t}\n\n\t/**\n\t * Gets current value of property \"width\".\n\t *\n\t * Default value is: \"100%\"\n\t * @returns {CSSSize} Value of property \"width\"\n\t */\n\tpublic getWidth(): CSSSize {\n\t\treturn this.getProperty(\"width\") as CSSSize;\n\t}\n\n\t/**\n\t * Toggles the visibility of action buttons within the container and/or its inner panels.\n\t *\n\t * @private\n\t * @param {boolean} show - Indicates whether to show or hide the action buttons.\n\t * @returns {void}\n\t */\n\tpublic toggleActionButtons(show: boolean): void {\n\t\tconst isSideBySideLayout = this.getProperty(\"layout\") === LayoutType.SideBySide;\n\t\tlet visibilityChanged = false;\n\t\tconst toggleActionButtons = (control: BaseContainer | BasePanel) => {\n\t\t\tcontrol.getActionButtons()?.forEach((actionButton) => {\n\t\t\t\tconst currentVisibility = actionButton.getVisible();\n\t\t\t\tif (currentVisibility !== show) {\n\t\t\t\t\tactionButton.setProperty(\"visible\", show, true);\n\t\t\t\t\tvisibilityChanged = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (!isSideBySideLayout && visibilityChanged) {\n\t\t\t\tthis._updateContainerHeader(control);\n\t\t\t}\n\t\t};\n\n\t\t// Toggle action buttons for container\n\t\ttoggleActionButtons(this);\n\n\t\t// Toggle action buttons for inner panels\n\t\tconst panels = this.getContent() || [];\n\t\tpanels.forEach(toggleActionButtons);\n\n\t\t// Update Header Container if required\n\t\tif (isSideBySideLayout && visibilityChanged) {\n\t\t\tthis._updateContainerHeader(this);\n\t\t}\n\t}\n\n\t/**\n\t * Toggles the visibility of the full screen button for the specified element.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element for which to toggle the full screen button.\n\t * @param {boolean} show - Indicates whether to show or hide the full screen button.\n\t * @param {boolean} isElementExpanded - Indicates whether the element is expanded.\n\t */\n\tpublic toggleFullScreenElements(element: BaseContainer | BasePanel, show: boolean, isElementExpanded: boolean): void {\n\t\tconst fullScreenButton = UI5Element.getElementById(element.getAssociation(\"fullScreenButton\", null) as string) as Button;\n\t\tconst fullScreenMenuButton = UI5Element.getElementById(element.getAssociation(\"fullScreenMenuItem\", null) as string) as MenuItem;\n\t\tconst isSideBySideLayout = this.getProperty(\"layout\") === LayoutType.SideBySide;\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tlet elementVisibilityChanged = false;\n\t\t[fullScreenButton, fullScreenMenuButton].forEach((fullScreenElement: Button | MenuItem) => {\n\t\t\tif (fullScreenElement && show !== fullScreenElement.getVisible()) {\n\t\t\t\telementVisibilityChanged = true;\n\t\t\t\tshow = !isPhone ? show : false;\n\t\t\t\tfullScreenElement.setProperty(\"visible\", isElementExpanded ? true : show, true);\n\t\t\t}\n\t\t});\n\t\tconst elementKey = element instanceof BasePanel && element.getKey();\n\t\tif (elementVisibilityChanged && (!isSideBySideLayout || (isSideBySideLayout && this.getProperty(\"selectedKey\") === elementKey))) {\n\t\t\tthis._updateContainerHeader(element);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the device type based on the width of the container element.\n\t *\n\t * @private\n\t * @param {ResizeObserverEntry[]} entries - The entries returned by the ResizeObserver.\n\t * @returns {void}\n\t */\n\tprivate _setDeviceType(entries: ResizeObserverEntry[]): void {\n\t\tconst [entry] = entries;\n\t\tconst width = entry?.contentRect.width;\n\t\tconst deviceType = calculateDeviceType(width);\n\n\t\tif (this._deviceType !== deviceType) {\n\t\t\tthis._deviceType = deviceType;\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the device type for the current instance.\n\t *\n\t * @private\n\t * @returns {DeviceType} - The device type. If the device type is not set, it calculates\n\t * and returns the device type based on the current device width.\n\t */\n\tpublic getDeviceType(): DeviceType {\n\t\treturn this._deviceType || calculateDeviceType();\n\t}\n}\n"],"mappings":"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","ignoreList":[]}