{"version":3,"file":"TaskPanel-dbg.js","names":["sap","ui","define","Log","Formatting","ActionTile","ActionTileContent","Button","ContentConfig","Link","List","MessageBox","Popover","StandardListItem","TileAttribute","sap_m_library","Locale","DateFormat","NumberFormat","__MenuItem","__ToDoPanel","__DecisionDialog","___utils_Device","___utils_FESRUtil","_interopRequireDefault","obj","__esModule","default","_catch","body","recover","result","e","then","ButtonType","ContentConfigType","LoadState","PlacementType","URLHelper","MenuItem","ToDoPanel","DecisionDialog","getIconFrameBadge","getIconFrameBadgeValueState","fetchElementProperties","addFESRId","addFESRSemanticStepName","FESR_EVENTS","Format","TextArrangement","Constants","CARD_HEIGHT","splitCards","cards","maxLength","cardSet","i","length","push","slice","TaskPanel","extend","metadata","library","properties","enableActions","type","group","defaultValue","visibility","customAttributeUrl","constructor","_constructor","id","settings","ToDoPanel.prototype.constructor.call","this","init","_init","ToDoPanel.prototype.init.call","_customAttributeMap","_taskDefinitionMap","setProperty","_i18nBundle","getText","menuItem","getId","title","icon","press","_onPressViewAll","bind","insertAggregation","generateRequestUrls","_generateRequestUrls","cardCount","urls","getCountUrl","getDataUrl","getCustomAttributeUrl","generateCardTemplate","_generateCardTemplate","context","attributes","getObject","map","attribute","index","label","contentConfig","text","href","mode","frameType","pressEnabled","enableIconFrame","enableDynamicHeight","enableNavigationButton","headerImage","badgeIcon","getProperty","badgeValueState","header","state","priority","_toPriority","priorityText","_toPriorityText","event","_onPressTask","tileContent","headerLink","createdByLink","_onClickCreatedBy","PRESS","actionButtons","viewButton","getSource","getParent","firePress","visible","approveButton","_onActionButtonPress","undefined","addStyleClass","rejectButton","overflowButton","Transparent","_onOverflowButtonPress","overflowButtons","_getOverflowButtonPopover","openBy","_overflowPopover","_overflowList","showHeader","content","placement","VerticalPreferredBottom","_setupOverflowList","destroyItems","forEach","actionButton","listItem","pressHandler","addItem","_loadCards","_getCustomAttributes","task","finalAttributes","maximumAttributeCount","customAttributes","TaskDefinitionID","custom_attribute","customAttribute","taskCustomAttributes","CustomAttributeData","results","existingAttribute","find","taskAttribute","Name","name","value","referenced","Text","format","_formatCustomAttribute","textArrangement","_arrangeText","_formatDate","Value","_addCommonAttributes","trim","description","ValueText","formattedValue","TextFirst","TextLast","TextOnly","TextSeparate","taskAttributes","arguments","findAttribute","attributeName","oAttribute","toUpperCase","currentAttribute","CURRENCYVALUE","reference","referencedAttribute","currencyFormatter","getCurrencyInstance","parseFloat","USER","FormattedValue","CompletionDeadline","CreatedOn","dateStr","pattern","getDatePattern","locale","getLanguageTag","language","dateFormat","getDateTimeInstance","_getParsedTime","formattedDate","isNaN","Date","time","NaN","dateRegex","yyyymmddRegex","isoRegex","dateMatch","match","parseInt","test","_isValidDate","parsedDate","getDateInstance","parse","getTime","isoMatch","dateString","year","month","day","date","getFullYear","getMonth","getDate","control","getBindingContext","status","url","_getTaskUrl","_disableNavigation","Loading","redirect","originId","instanceId","taskInstanceURL","getTargetAppUrl","_this","sourceControl","getParameter","SAP__Origin","CreatedBy","userId","TaskTitle","subject","CreatedByName","createdBy","InstanceID","link","triggerEmail","email","_ref","setTimeout","URL","window","location","hash","toString","Promise","resolve","_fetchUserDetailsIfRequired","userData","Email","require","serviceContainer","getServiceAsync","teamsHelper","_temp2","enableContactsCollaboration","_temp","encodeURIComponent","_teamsHelper$enableCo","popover","error","Error","message","String","reject","warning","userInfo","Object","keys","includes","_fetchUserInfo","_this2","fetch","response","ok","json","_response$json","d","data","onDataReceived","_onDataReceived","options","_this3","tasks","taskDefinitions","_extractCustomAttributes","_temp3","onlyCount","_updateTasks","updatedTasks","_oData","displayTiles","tiles","_this4","_addCustomAttributes","_temp4","getEnableActions","_getTaskDefintions","_downloadDecisionOptions","_addActions","key","actions","getTaskActions","getBaseUrl","_this5","decisionKeys","decisionURLs","reduce","_temp5","_clearRequests","requests","baseURL","requestURLs","success","decisionOptions","_submitBatch","taskDefinition","CustomAttributeDefinitionData","filter","Rank","sort","attr1","attr2","Label","Type","Reference","Referenced","getNoDataText","_getNoDataText","getVerticalCardCount","_getVerticalCardCount","domRef","calculationProperties","domProperties","titleHeight","calculateTitleHeight","availableHeight","height","horizontalCardCount","getHorizontalCardCount","isPlaceholder","gap","verticalCardCount","_isLoaded","rowHeights","maxAttributes","attributeCount","card","count","Math","min","rowHeight","floor","max"],"sources":["TaskPanel.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Log from \"sap/base/Log\";\nimport Formatting from \"sap/base/i18n/Formatting\";\nimport ActionTile from \"sap/m/ActionTile\";\nimport ActionTileContent, { ActionTileContent$LinkPressEvent } from \"sap/m/ActionTileContent\";\nimport Button from \"sap/m/Button\";\nimport ContentConfig from \"sap/m/ContentConfig\";\nimport Link from \"sap/m/Link\";\nimport List from \"sap/m/List\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport Popover from \"sap/m/Popover\";\nimport StandardListItem from \"sap/m/StandardListItem\";\nimport TileAttribute from \"sap/m/TileAttribute\";\nimport { ButtonType, ContentConfigType, LoadState, PlacementType, URLHelper } from \"sap/m/library\";\nimport ServiceContainer from \"sap/suite/ui/commons/collaboration/ServiceContainer\";\nimport Event from \"sap/ui/base/Event\";\nimport Control from \"sap/ui/core/Control\";\nimport { MetadataOptions } from \"sap/ui/core/Element\";\nimport Locale from \"sap/ui/core/Locale\";\nimport DateFormat from \"sap/ui/core/format/DateFormat\";\nimport NumberFormat from \"sap/ui/core/format/NumberFormat\";\nimport Context from \"sap/ui/model/Context\";\nimport MenuItem from \"./MenuItem\";\nimport { $TaskPanelSettings } from \"./TaskPanel\";\nimport ToDoPanel, { CalculationProperties, IToDoPanel, RequestOptions, Response, TaskPriority } from \"./ToDoPanel\";\nimport DecisionDialog, { ActionButton, DecisionOption, getIconFrameBadge, getIconFrameBadgeValueState } from \"./utils/DecisionDialog\";\nimport { fetchElementProperties } from \"./utils/Device\";\nimport { addFESRId, addFESRSemanticStepName, FESR_EVENTS } from \"./utils/FESRUtil\";\n\ninterface CustomAttribute {\n\tname?: string;\n\tlabel?: string;\n\ttext?: string;\n\ttype?: string;\n\thref?: string;\n\tformat?: string;\n\treference?: string;\n\treferenced?: string;\n\ttextArrangement?: TextArrangement;\n}\n\ninterface TaskCustomAttribute {\n\tName: string;\n\tValue: string;\n\tValueText: string;\n\tLabel: string;\n\tType: string;\n\tRank: number;\n\tFormat: string;\n\tFormattedValue: string;\n\tReference: string;\n\tReferenced: string;\n\tTextArrangement: TextArrangement;\n}\n\nexport interface Task {\n\tSAP__Origin: string;\n\tCreatedBy: string;\n\tTaskTitle: string;\n\tCreatedByName: string;\n\tInstanceID: string;\n\tTaskDefinitionID: string;\n\tCompletionDeadline: string;\n\tCreatedOn: string;\n\tactions: ActionButton[];\n\tPriority: TaskPriority;\n\tCustomAttributeData: {\n\t\tresults: TaskCustomAttribute[];\n\t};\n\tattributes: CustomAttribute[];\n}\n\ninterface TaskDefintion {\n\tSAP__Origin: string;\n\tInstanceID: string;\n\tTaskDefinitionID: string;\n}\n\ninterface TaskDefinitionCollection {\n\tTaskDefinitionID: string;\n\tCustomAttributeDefinitionData: {\n\t\tresults: TaskCustomAttribute[];\n\t};\n}\n\ninterface UserInfo {\n\tEmail?: string;\n}\n\nenum Format {\n\tCURRENCYVALUE = \"CURRENCYVALUE\",\n\tCURRENCYCODE = \"CURRENCYCODE\",\n\tUSER = \"USER\"\n}\n\nenum TextArrangement {\n\tTextFirst = \"TextFirst\",\n\tTextLast = \"TextLast\",\n\tTextOnly = \"TextOnly\",\n\tTextSeparate = \"TextSeparate\"\n}\n\nconst Constants = {\n\tCARD_HEIGHT: {\n\t\t// Cozy - Compact\n\t\t1: 220, // 214  - 226\n\t\t2: 272, // 265  - 278\n\t\t3: 324, // 318  - 330\n\t\t4: 376 // 370  - 382\n\t}\n};\n\n/**\n * Splits an array of task cards into smaller arrays, each with a maximum specified length.\n *\n * @param {Task[]} cards - The array of task cards to be split.\n * @param {number} maxLength - The maximum length of each sub-array.\n * @returns {Task[][]} - An array of sub-arrays, each containing a maximum of `maxLength` task cards.\n */\nfunction splitCards(cards: Task[], maxLength: number): Task[][] {\n\tconst cardSet = [];\n\tfor (let i = 0; i < cards.length; i += maxLength) {\n\t\tcardSet.push(cards.slice(i, i + maxLength));\n\t}\n\n\treturn cardSet;\n}\n\n/**\n *\n * Panel class for managing and storing Task cards.\n *\n * @extends ToDoPanel\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @internal\n * @experimental Since 1.121\n * @public\n *\n * @alias sap.cux.home.TaskPanel\n */\nexport default class TaskPanel extends ToDoPanel implements IToDoPanel {\n\tprivate _customAttributeMap!: Record<string, CustomAttribute[]>;\n\tprivate userInfo!: Record<string, UserInfo>;\n\tprivate _disableNavigation!: boolean;\n\tprivate _taskDefinitionMap!: Record<string, DecisionOption[]>;\n\tprivate _overflowPopover!: Popover;\n\tprivate _overflowList!: List;\n\n\tconstructor(id?: string | $TaskPanelSettings);\n\tconstructor(id?: string, settings?: $TaskPanelSettings);\n\t/**\n\t * Constructor for a new Task Panel.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $TaskPanelSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tproperties: {\n\t\t\t/**\n\t\t\t * Specifies if actions should be enabled for the task cards.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\tenableActions: { type: \"boolean\", group: \"Data\", defaultValue: false, visibility: \"public\" },\n\t\t\t/**\n\t\t\t * Specifies the URL that fetches the custom attributes to be displayed along with the task cards.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\tcustomAttributeUrl: { type: \"string\", group: \"Data\", defaultValue: \"\", visibility: \"public\" }\n\t\t}\n\t};\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tsuper.init();\n\t\tthis._customAttributeMap = {};\n\t\tthis._taskDefinitionMap = {};\n\n\t\t//Configure Header\n\t\tthis.setProperty(\"key\", \"tasks\");\n\t\tthis.setProperty(\"title\", this._i18nBundle.getText(\"tasksTabTitle\"));\n\n\t\t//Setup Menu Items - ensure that 'View All Tasks' item is the first item in the list\n\t\tconst menuItem = new MenuItem(`${this.getId()}-view-tasks-btn`, {\n\t\t\ttitle: this._i18nBundle.getText(\"viewAllTasksTitle\"),\n\t\t\ticon: \"sap-icon://inbox\",\n\t\t\tpress: this._onPressViewAll.bind(this)\n\t\t});\n\t\tthis.insertAggregation(\"menuItems\", menuItem, 0);\n\t\taddFESRId(menuItem, \"goToTaskSitution\");\n\t}\n\n\t/**\n\t * Generates request URLs for fetching data based on the specified card count.\n\t * Overridden method to provide task-specific URLs.\n\t *\n\t * @private\n\t * @override\n\t * @param {number} cardCount - The number of cards to retrieve.\n\t * @returns {string[]} An array of request URLs.\n\t */\n\tpublic generateRequestUrls(cardCount: number): string[] {\n\t\tconst urls = [this.getCountUrl(), `${this.getDataUrl()},CustomAttributeData&$expand=CustomAttributeData&$skip=0&$top=${cardCount}`];\n\n\t\tconst customAttributeUrl = this.getCustomAttributeUrl();\n\t\tif (customAttributeUrl) {\n\t\t\turls.push(customAttributeUrl);\n\t\t}\n\n\t\treturn urls;\n\t}\n\n\t/**\n\t * Generates a card template for tasks.\n\t * Overridden method from To-Do panel to generate task-specific card template.\n\t *\n\t * @private\n\t * @override\n\t * @param {string} id The ID for the template card.\n\t * @param {Context} context The context object.\n\t * @returns {Control} The generated card control template.\n\t */\n\tpublic generateCardTemplate(id: string, context: Context): Control {\n\t\tconst attributes = (context.getObject() as Task).attributes?.map((attribute, index) => {\n\t\t\treturn new TileAttribute(`${id}-${index}-attribute`, {\n\t\t\t\tlabel: attribute.label as string,\n\t\t\t\tcontentConfig: new ContentConfig(`${id}-${index}-contentConfig`, {\n\t\t\t\t\ttype: attribute.type as ContentConfigType,\n\t\t\t\t\ttext: attribute.text as string,\n\t\t\t\t\thref: attribute.href as string\n\t\t\t\t})\n\t\t\t});\n\t\t});\n\n\t\treturn new ActionTile(`${id}-actionTile`, {\n\t\t\tmode: \"ActionMode\",\n\t\t\tframeType: \"TwoByOne\",\n\t\t\tpressEnabled: true,\n\t\t\tenableIconFrame: true,\n\t\t\tenableDynamicHeight: true,\n\t\t\tenableNavigationButton: true,\n\t\t\theaderImage: \"sap-icon://workflow-tasks\",\n\t\t\tbadgeIcon: getIconFrameBadge(context.getProperty(\"Priority\") as TaskPriority),\n\t\t\tbadgeValueState: getIconFrameBadgeValueState(context.getProperty(\"Priority\") as TaskPriority),\n\t\t\theader: context.getProperty(\"TaskTitle\") as string,\n\t\t\tstate: context.getProperty(\"status\") as LoadState,\n\t\t\tpriority: this._toPriority(context.getProperty(\"Priority\") as TaskPriority),\n\t\t\tpriorityText: this._toPriorityText(this._toPriority(context.getProperty(\"Priority\") as TaskPriority)),\n\t\t\tpress: (event: Event) => this._onPressTask(event),\n\t\t\ttileContent: [\n\t\t\t\tnew ActionTileContent(`${id}-actionTileContent`, {\n\t\t\t\t\theaderLink: (() => {\n\t\t\t\t\t\tconst createdByLink = new Link({\n\t\t\t\t\t\t\ttext: context.getProperty(\"CreatedByName\") as string,\n\t\t\t\t\t\t\tpress: (event: Event): void => {\n\t\t\t\t\t\t\t\tvoid this._onClickCreatedBy(event);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\taddFESRSemanticStepName(createdByLink, FESR_EVENTS.PRESS, \"MST:ContactDetails\");\n\t\t\t\t\t\treturn createdByLink;\n\t\t\t\t\t})(),\n\t\t\t\t\tattributes\n\t\t\t\t})\n\t\t\t],\n\t\t\tactionButtons: [\n\t\t\t\t(() => {\n\t\t\t\t\tconst viewButton = new Button(`${id}-view-btn`, {\n\t\t\t\t\t\ttext: this._i18nBundle.getText(\"viewButton\"),\n\t\t\t\t\t\tpress: (event: Event) => (event.getSource<Button>().getParent() as ActionTile).firePress(),\n\t\t\t\t\t\tvisible: context.getProperty(\"actions/length\") === 0\n\t\t\t\t\t});\n\t\t\t\t\taddFESRSemanticStepName(viewButton, FESR_EVENTS.PRESS, \"todoActionBtn\");\n\t\t\t\t\treturn viewButton;\n\t\t\t\t})(),\n\t\t\t\t(() => {\n\t\t\t\t\tconst approveButton = new Button(`${id}-approve-btn`, {\n\t\t\t\t\t\ttext: context.getProperty(\"actions/0/text\") as string,\n\t\t\t\t\t\ttype: context.getProperty(\"actions/0/type\") as ButtonType,\n\t\t\t\t\t\tpress: () => this._onActionButtonPress(context.getProperty(\"actions/0/pressHandler\") as () => void),\n\t\t\t\t\t\tvisible: context.getProperty(\"actions/0\") !== undefined\n\t\t\t\t\t}).addStyleClass(\"sapUiTinyMarginEnd\");\n\t\t\t\t\taddFESRSemanticStepName(approveButton, FESR_EVENTS.PRESS, \"todoActionBtn\");\n\t\t\t\t\treturn approveButton;\n\t\t\t\t})(),\n\t\t\t\t(() => {\n\t\t\t\t\tconst rejectButton = new Button(`${id}-reject-btn`, {\n\t\t\t\t\t\ttext: context.getProperty(\"actions/1/text\") as string,\n\t\t\t\t\t\ttype: context.getProperty(\"actions/1/type\") as ButtonType,\n\t\t\t\t\t\tpress: () => this._onActionButtonPress(context.getProperty(\"actions/1/pressHandler\") as () => void),\n\t\t\t\t\t\tvisible: context.getProperty(\"actions/1\") !== undefined\n\t\t\t\t\t}).addStyleClass(\"sapUiTinyMarginEnd\");\n\t\t\t\t\taddFESRSemanticStepName(rejectButton, FESR_EVENTS.PRESS, \"todoActionBtn\");\n\t\t\t\t\treturn rejectButton;\n\t\t\t\t})(),\n\t\t\t\t(() => {\n\t\t\t\t\tconst overflowButton = new Button(`${id}-overflow-btn`, {\n\t\t\t\t\t\ticon: \"sap-icon://overflow\",\n\t\t\t\t\t\ttype: ButtonType.Transparent,\n\t\t\t\t\t\tpress: (event: Event) => this._onOverflowButtonPress(event, context),\n\t\t\t\t\t\tvisible: context.getProperty(\"actions/length\") >= 3\n\t\t\t\t\t});\n\t\t\t\t\taddFESRSemanticStepName(overflowButton, FESR_EVENTS.PRESS, \"todoActBtnOverflow\");\n\t\t\t\t\treturn overflowButton;\n\t\t\t\t})()\n\t\t\t]\n\t\t});\n\t}\n\n\t/**\n\t * Handles the press event of the overflow button.\n\t * Opens a Popover containing overflow actions.\n\t *\n\t * @private\n\t * @param {Event} event - The press event triggered by the overflow button.\n\t * @param {Context} context - The context containing all actions.\n\t * @returns {void}\n\t */\n\tprivate _onOverflowButtonPress(event: Event, context: Context): void {\n\t\tconst overflowButtons = (context.getProperty(\"actions\") as ActionButton[]).slice(2);\n\t\tthis._getOverflowButtonPopover(overflowButtons).openBy(event.getSource<Button>());\n\t}\n\n\t/**\n\t * Creates or retrieves the overflow button Popover.\n\t *\n\t * @private\n\t * @param {ActionButton[]} actionButtons - The array of overflow actions.\n\t * @returns {Popover} The overflow button Popover.\n\t */\n\tprivate _getOverflowButtonPopover(actionButtons: ActionButton[]): Popover {\n\t\tif (!this._overflowPopover) {\n\t\t\tthis._overflowList = new List(`${this.getId()}-overflowList`);\n\t\t\tthis._overflowPopover = new Popover(`${this.getId()}-overflowPopover`, {\n\t\t\t\tshowHeader: false,\n\t\t\t\tcontent: this._overflowList,\n\t\t\t\tplacement: PlacementType.VerticalPreferredBottom\n\t\t\t});\n\t\t}\n\n\t\t//setup task-specific with task-specific actions\n\t\tthis._setupOverflowList(actionButtons);\n\t\treturn this._overflowPopover;\n\t}\n\n\t/**\n\t * Sets up the overflow button list with the provided task-specific actions.\n\t *\n\t * @private\n\t * @param {ActionButton[]} actionButtons - The array of overflow actions.\n\t * @returns {void}\n\t */\n\tprivate _setupOverflowList(actionButtons: ActionButton[]): void {\n\t\tthis._overflowList.destroyItems();\n\t\tactionButtons.forEach((actionButton, index) => {\n\t\t\tconst listItem = new StandardListItem(`action-${index}`, {\n\t\t\t\ttitle: actionButton.text,\n\t\t\t\ttype: \"Active\",\n\t\t\t\tpress: () => this._onActionButtonPress(actionButton.pressHandler as () => void)\n\t\t\t});\n\t\t\taddFESRSemanticStepName(listItem, FESR_EVENTS.PRESS, \"todoActionBtn\");\n\t\t\tthis._overflowList.addItem(listItem);\n\t\t});\n\t}\n\n\t/**\n\t * Handles the button press event and executes the provided press handler function,\n\t * which refreshes the UI after the button press action.\n\t *\n\t * @private\n\t * @param {Function} pressHandler - The function to be executed when the button is pressed.\n\t * @returns {void}\n\t */\n\tprivate _onActionButtonPress(pressHandler: (refreshFn: () => Promise<void>) => void): void {\n\t\tpressHandler(this._loadCards.bind(this));\n\t}\n\n\t/**\n\t * Retrieves custom attributes for a given task and formats them for display.\n\t * If the task has completion deadline and creation date, those attributes are also included.\n\t * If the task has a creator, the creator's name is included as well.\n\t *\n\t * @param {Task} task - The task object for which custom attributes are retrieved.\n\t * @returns {CustomAttribute[]} - An array of formatted custom attributes.\n\t */\n\tprivate _getCustomAttributes(task: Task): CustomAttribute[] {\n\t\tconst finalAttributes = [];\n\t\tconst maximumAttributeCount = 4;\n\t\tconst customAttributes = this._customAttributeMap[task.TaskDefinitionID] || [];\n\n\t\tfor (let custom_attribute of customAttributes) {\n\t\t\tconst customAttribute = custom_attribute;\n\t\t\tconst taskCustomAttributes = task.CustomAttributeData?.results;\n\t\t\tconst existingAttribute = taskCustomAttributes.find((taskAttribute) => {\n\t\t\t\treturn taskAttribute.Name === customAttribute.name;\n\t\t\t});\n\t\t\tlet value = \"\";\n\n\t\t\tif (existingAttribute && !customAttribute.referenced) {\n\t\t\t\tconst attribute: CustomAttribute = {\n\t\t\t\t\tlabel: customAttribute.label + \":\",\n\t\t\t\t\ttype: ContentConfigType.Text\n\t\t\t\t};\n\n\t\t\t\tif (customAttribute.format) {\n\t\t\t\t\tvalue = this._formatCustomAttribute(customAttribute, taskCustomAttributes);\n\t\t\t\t} else if (customAttribute.textArrangement) {\n\t\t\t\t\tvalue = this._arrangeText(existingAttribute, customAttribute.textArrangement);\n\t\t\t\t} else {\n\t\t\t\t\tvalue = customAttribute.type === \"Edm.DateTime\" ? this._formatDate(existingAttribute.Value) : existingAttribute.Value;\n\t\t\t\t}\n\t\t\t\tattribute.text = value || \"-\";\n\t\t\t\tfinalAttributes.push(attribute);\n\t\t\t}\n\t\t}\n\n\t\t// add common attributes\n\t\tthis._addCommonAttributes(finalAttributes, task);\n\n\t\treturn finalAttributes.slice(0, maximumAttributeCount);\n\t}\n\n\t/**\n\t * Formats the given unit of measure value and description based on the specified text arrangement.\n\t *\n\t * @private\n\t * @param {TaskCustomAttribute} customAttribute The custom attribute object.\n\t * @param {TextArrangement} textArrangement The text arrangement option.\n\t * @returns {string} The formatted value.\n\t */\n\tprivate _arrangeText(customAttribute: TaskCustomAttribute, textArrangement: TextArrangement): string {\n\t\tconst value = customAttribute.Value.trim();\n\t\tconst description = customAttribute.ValueText.trim();\n\t\tlet formattedValue = \"\";\n\n\t\tswitch (textArrangement) {\n\t\t\tcase TextArrangement.TextFirst:\n\t\t\t\tformattedValue = `${description} (${value})`;\n\t\t\t\tbreak;\n\t\t\tcase TextArrangement.TextLast:\n\t\t\t\tformattedValue = `${value} (${description})`;\n\t\t\t\tbreak;\n\t\t\tcase TextArrangement.TextOnly:\n\t\t\t\tformattedValue = `${description}`;\n\t\t\t\tbreak;\n\t\t\tcase TextArrangement.TextSeparate:\n\t\t\t\tformattedValue = `${value}`;\n\t\t\t\tbreak;\n\t\t\tdefault: // TextFirst\n\t\t\t\tformattedValue = `${description} ${value})`;\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn formattedValue;\n\t}\n\n\t/**\n\t * Formats a custom attribute value based on its format type.\n\t *\n\t * @param {CustomAttribute} customAttribute - The custom attribute object.\n\t * @param {TaskCustomAttribute[]} taskAttributes - The array of task attributes.\n\t * @returns {string} - The formatted value.\n\t */\n\tprivate _formatCustomAttribute(customAttribute: CustomAttribute, taskAttributes: TaskCustomAttribute[] = []): string {\n\t\tconst findAttribute = (attributeName: string) => {\n\t\t\treturn taskAttributes.find((oAttribute) => {\n\t\t\t\treturn oAttribute.Name === attributeName;\n\t\t\t});\n\t\t};\n\t\tconst format = customAttribute.format?.toUpperCase();\n\t\tconst currentAttribute = findAttribute(customAttribute.name as string);\n\t\tlet formattedValue = currentAttribute?.Value;\n\n\t\t// Format = CurrencyValue\n\t\tif (format === Format.CURRENCYVALUE && customAttribute.reference) {\n\t\t\tconst referencedAttribute = findAttribute(customAttribute.reference);\n\n\t\t\tif (referencedAttribute) {\n\t\t\t\tconst currencyFormatter = NumberFormat.getCurrencyInstance();\n\t\t\t\tformattedValue = currencyFormatter.format(parseFloat(currentAttribute?.Value as string), referencedAttribute.Value);\n\t\t\t}\n\t\t} else if (format === Format.USER) {\n\t\t\tformattedValue = currentAttribute?.FormattedValue || currentAttribute?.Value;\n\t\t}\n\n\t\treturn formattedValue as string;\n\t}\n\n\t/**\n\t * Adds common attributes to the final attributes list based on the provided task.\n\t * Common attributes include completion deadline, creation date, and creator's name.\n\t *\n\t * @param {CustomAttribute[]} finalAttributes - The array of custom attributes to which the common attributes will be added.\n\t * @param {Task} task - The task object containing data for common attributes.\n\t */\n\tprivate _addCommonAttributes(finalAttributes: CustomAttribute[], task: Task): void {\n\t\tif (task.CompletionDeadline) {\n\t\t\tfinalAttributes.push({\n\t\t\t\tlabel: this._i18nBundle.getText(\"dueDate\") + \":\",\n\t\t\t\ttext: this._formatDate(task.CompletionDeadline, \"MMM dd, YYYY hh:mm a\"),\n\t\t\t\ttype: ContentConfigType.Text\n\t\t\t});\n\t\t}\n\n\t\tif (task.CreatedOn) {\n\t\t\tfinalAttributes.push({\n\t\t\t\tlabel: this._i18nBundle.getText(\"createdOn\") + \":\",\n\t\t\t\ttext: this._formatDate(task.CreatedOn),\n\t\t\t\ttype: ContentConfigType.Text\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Format a date string to a custom date and time format.\n\t *\n\t * @private\n\t * @param {string} dateStr - The date string to format.\n\t * @param {string} pattern - The pattern to be used for formatting the date.\n\t * @returns {string} The formatted date string.\n\t */\n\tprivate _formatDate(dateStr: string, pattern: string = Formatting.getDatePattern(\"short\") || \"dd/MM/yyyy\"): string {\n\t\tconst locale = new Locale(Formatting.getLanguageTag().language);\n\t\tconst dateFormat = DateFormat.getDateTimeInstance({ pattern }, locale);\n\t\tconst value = this._getParsedTime(dateStr);\n\t\tlet formattedDate = \"\";\n\n\t\tif (!isNaN(value)) {\n\t\t\tformattedDate = dateFormat.format(new Date(value));\n\t\t}\n\n\t\treturn formattedDate;\n\t}\n\n\t/**\n\t * Parses different time formats supplied from the back-ends. It returns UNIX time stamp in milliseconds.\n\t * If Time Format contains unexpected symbols or Format is not recognized NaN is returned.\n\t * Referenced from: cross.fnd.fiori.inbox.CustomAttributeComparator\n\t *\n\t * @param {string | number} time date format to be parsed. If int UNIX time stamp in milliseconds is assumed.\n\t * @returns {number} UNIX time stamp in milliseconds. (milliseconds that have elapsed since 00:00:00 UTC, Thursday, 1 January 1970)\n\t * @private\n\t */\n\tprivate _getParsedTime(time: string | number): number {\n\t\tif (time == null || time === \"00000000\") {\n\t\t\treturn NaN;\n\t\t}\n\n\t\tif (typeof time === \"number\") {\n\t\t\treturn time;\n\t\t}\n\n\t\t// Check for various time formats\n\t\tconst dateRegex = /\\/(Date)\\((\\d+)\\)\\//;\n\t\tconst yyyymmddRegex = /^\\d{8}$/;\n\t\tconst isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))?$/;\n\n\t\tconst dateMatch = time.match(dateRegex);\n\t\tif (dateMatch) {\n\t\t\t// Time Format \"/Date(869080830000)/\"\n\t\t\treturn parseInt(dateMatch[2], 10);\n\t\t}\n\n\t\tif (yyyymmddRegex.test(time) && this._isValidDate(time)) {\n\t\t\t// Time Format \"YYYYMMDD\" (Old TGW format)\n\t\t\tconst parsedDate = DateFormat.getDateInstance().parse(time);\n\t\t\treturn parsedDate instanceof Date ? parsedDate.getTime() : NaN;\n\t\t}\n\n\t\tconst isoMatch = time.match(isoRegex);\n\t\tif (isoMatch) {\n\t\t\t// Time Format \"2018-01-05T00:00:00\" (BPM and TGW-cloud format, UTC)\n\t\t\treturn new Date(time).getTime();\n\t\t}\n\n\t\treturn NaN;\n\t}\n\n\t/**\n\t * Check whether given dateString is of format YYYYMMDD and is a valid value for Date object.\n\t *\n\t * @param {string} dateString - The datestring to be checked for validity\n\t * @returns {Date} if its a valid date return the date else false\n\t * @private\n\t */\n\tprivate _isValidDate(dateString: string): boolean {\n\t\t// Check if the input has the correct length\n\t\tif (dateString.length !== 8) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Parse the date components\n\t\tconst year = parseInt(dateString.slice(0, 4), 10);\n\t\tconst month = parseInt(dateString.slice(4, 6), 10) - 1;\n\t\tconst day = parseInt(dateString.slice(6), 10);\n\n\t\t// Create a Date object with the parsed components\n\t\tconst date = new Date(year, month, day);\n\n\t\t// Check if the parsed date is valid\n\t\treturn date.getFullYear() === year && date.getMonth() === month && date.getDate() === day;\n\t}\n\n\t/**\n\t * Handles the press event of a task.\n\t *\n\t * @private\n\t * @param {Event} event - The press event.\n\t */\n\tprivate _onPressTask(event: Event) {\n\t\tconst control = event.getSource<ActionTile>();\n\t\tconst context = control.getBindingContext();\n\t\tconst status = context?.getProperty(\"status\") as LoadState;\n\t\tconst url = this._getTaskUrl(context?.getProperty(\"SAP__Origin\") as string, context?.getProperty(\"InstanceID\") as string);\n\n\t\tif (!this._disableNavigation) {\n\t\t\tif (status !== LoadState.Loading) {\n\t\t\t\tURLHelper.redirect(url, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the task URL for a given task.\n\t *\n\t * @private\n\t * @param {string} originId - The origin ID of the task.\n\t * @param {string} instanceId - The instance ID of the task.\n\t * @returns {string} The task URL.\n\t */\n\tprivate _getTaskUrl(originId: string, instanceId: string): string {\n\t\tconst taskInstanceURL = `?showAdditionalAttributes=true&/detail/${originId}/${instanceId}/TaskCollection(SAP__Origin='${originId}',InstanceID='${instanceId}')`;\n\n\t\treturn this.getTargetAppUrl() + taskInstanceURL;\n\t}\n\n\t/**\n\t * Handles the click event on the \"Created By\" link.\n\t * Triggers email or opens a contact card if configuration is enabled\n\t *\n\t * @private\n\t * @param {Event} event - The event object.\n\t */\n\tprivate async _onClickCreatedBy(event: ActionTileContent$LinkPressEvent): Promise<void> {\n\t\tconst sourceControl = event.getParameter(\"link\");\n\t\tconst {\n\t\t\tSAP__Origin: originId,\n\t\t\tCreatedBy: userId,\n\t\t\tTaskTitle: subject,\n\t\t\tCreatedByName: createdBy,\n\t\t\tInstanceID\n\t\t} = event.getSource().getBindingContext()?.getObject() as Task;\n\t\tconst link = this._getTaskUrl(originId, InstanceID);\n\t\tconst triggerEmail = (email: string, { subject, body }: { subject: string; body: string }) => {\n\t\t\tURLHelper.triggerEmail(email, subject, body);\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis._disableNavigation = false;\n\t\t\t}, 0);\n\t\t};\n\t\tconst url = new URL(window.location.href);\n\t\turl.hash = link;\n\t\tconst body = url.toString();\n\n\t\tthis._disableNavigation = true;\n\n\t\tconst userData = await this._fetchUserDetailsIfRequired(originId, userId);\n\t\tif (userData.Email) {\n\t\t\tsap.ui.require([\"sap/suite/ui/commons/collaboration/ServiceContainer\"], async (serviceContainer: ServiceContainer) => {\n\t\t\t\tconst teamsHelper = await serviceContainer.getServiceAsync();\n\n\t\t\t\tif (teamsHelper.enableContactsCollaboration) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst popover = (await teamsHelper.enableContactsCollaboration(userData.Email as string, {\n\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\tbody: encodeURIComponent(body)\n\t\t\t\t\t\t})) as Popover;\n\t\t\t\t\t\tpopover.openBy(sourceControl as Link);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tLog.error(error instanceof Error ? error.message : String(error));\n\t\t\t\t\t\ttriggerEmail(userData.Email as string, { subject, body });\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttriggerEmail(userData.Email as string, { subject, body });\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tMessageBox.warning(this._i18nBundle.getText(\"noEmail\", [createdBy]) as string);\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis._disableNavigation = false;\n\t\t\t}, 0);\n\t\t}\n\t}\n\n\t/**\n\t * Fetches user details if required.\n\t *\n\t * @private\n\t * @param {string} originId - The origin ID.\n\t * @param {string} userId - The user ID.\n\t * @returns {Promise<UserInfo>} - A promise that resolves to the user information.\n\t */\n\tprivate _fetchUserDetailsIfRequired(originId: string, userId: string): Promise<UserInfo> {\n\t\tthis.userInfo = this.userInfo || {};\n\n\t\tif (Object.keys(this.userInfo).includes(userId)) {\n\t\t\treturn Promise.resolve(this.userInfo[userId]);\n\t\t} else {\n\t\t\treturn this._fetchUserInfo(originId, userId);\n\t\t}\n\t}\n\n\t/**\n\t * Fetches user information for a specific user.\n\t *\n\t * @private\n\t * @param {string} originId - The origin ID.\n\t * @param {string} userId - The user ID.\n\t * @returns {Promise<UserInfo>} - A promise that resolves to the user information.\n\t */\n\tprivate async _fetchUserInfo(originId: string, userId: string): Promise<UserInfo> {\n\t\ttry {\n\t\t\tconst response = await fetch(\n\t\t\t\t`/sap/opu/odata/IWPGW/TASKPROCESSING;mo;v=2/UserInfoCollection(SAP__Origin='${originId}',UniqueName='${userId}')?$format=json`\n\t\t\t);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`Failed to Fetch User Info for: ${userId}`);\n\t\t\t}\n\n\t\t\tconst { d: data } = (await response.json()) as Response;\n\t\t\tthis.userInfo[userId] = data as UserInfo;\n\t\t\treturn this.userInfo[userId];\n\t\t} catch (error: unknown) {\n\t\t\tLog.error(error instanceof Error ? error.message : String(error));\n\t\t\treturn {};\n\t\t}\n\t}\n\n\t/**\n\t * Hook for processing data fetched from a batch call.\n\t * This method can be overridden to perform additional data processing operations.\n\t * In this implementation, it is consumed to handle task-related data, particularly\n\t * for extracting custom attributes if action cards are enabled.\n\t *\n\t * @private\n\t * @async\n\t * @param {unknown[]} results - Data retrieved from the batch call. Structure may vary based on the backend service.\n\t * @param {RequestOptions} options - Additional options for parsing the data.\n\t * @returns {Promise<void>} A Promise that resolves when the data processing is complete.\n\t */\n\tpublic async onDataReceived(results: unknown[], options: RequestOptions): Promise<void> {\n\t\tconst [tasks, taskDefinitions] = results;\n\t\tthis._extractCustomAttributes(taskDefinitions as TaskDefinitionCollection[]);\n\n\t\tif (!options || (options && !options.onlyCount)) {\n\t\t\tconst updatedTasks = await this._updateTasks(tasks as Task[]);\n\t\t\tthis._oData.displayTiles = this._oData.tiles = updatedTasks;\n\t\t}\n\t}\n\n\t/**\n\t * Updates the tasks with attributes and actions.\n\t *\n\t * @private\n\t * @param {Task[]} tasks - The array of tasks to update.\n\t * @returns {Promise<Task[]>} A promise that resolves with the updated array of tasks.\n\t */\n\tprivate async _updateTasks(tasks: Task[] = []): Promise<Task[]> {\n\t\t//add custom attributes to tasks\n\t\tlet updatedTasks = this._addCustomAttributes(tasks);\n\n\t\t//add actions to tasks\n\t\tif (this.getEnableActions()) {\n\t\t\t//calculate unique task definitions\n\t\t\tconst taskDefinitions = this._getTaskDefintions(updatedTasks);\n\n\t\t\t//download decision options for task defintions\n\t\t\tawait this._downloadDecisionOptions(taskDefinitions);\n\n\t\t\t//append actions\n\t\t\tupdatedTasks = this._addActions(updatedTasks);\n\t\t}\n\n\t\treturn updatedTasks;\n\t}\n\n\t/**\n\t * Adds custom attributes to each task in the provided array.\n\t *\n\t * @private\n\t * @param {Task[]} tasks - The array of tasks to which custom attributes will be added.\n\t * @returns {Task[]} - A new array of tasks, each with added custom attributes.\n\t */\n\tprivate _addCustomAttributes(tasks: Task[]): Task[] {\n\t\treturn tasks.map((task) => ({\n\t\t\t...task,\n\t\t\tattributes: this._getCustomAttributes(task)\n\t\t}));\n\t}\n\n\t/**\n\t * Adds actions to the tasks based on their task definitions.\n\t *\n\t * @private\n\t * @param {Task[]} tasks - The array of tasks to which actions will be added.\n\t * @returns {Task[]} The array of tasks with actions added.\n\t */\n\tprivate _addActions(tasks: Task[]): Task[] {\n\t\treturn tasks.map((task) => {\n\t\t\tconst key = task.SAP__Origin + task.TaskDefinitionID;\n\t\t\treturn {\n\t\t\t\t...task,\n\t\t\t\tactions: this._taskDefinitionMap[key]\n\t\t\t\t\t? DecisionDialog.getTaskActions(task, this.getBaseUrl(), this._taskDefinitionMap, this._i18nBundle)\n\t\t\t\t\t: []\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Downloads decision options for the provided task definitions.\n\t *\n\t * @private\n\t * @param {Record<string, TaskDefinition>} taskDefinitions - The task definitions for which decision options will be downloaded.\n\t * @returns {Promise<void>} A promise that resolves when all decision options are downloaded and processed.\n\t */\n\tprivate async _downloadDecisionOptions(taskDefinitions: Record<string, TaskDefintion>): Promise<void> {\n\t\tconst decisionKeys: string[] = [];\n\t\tconst decisionURLs = Object.keys(taskDefinitions).reduce((urls: string[], key) => {\n\t\t\tif (!Object.keys(this._taskDefinitionMap).includes(key)) {\n\t\t\t\tdecisionKeys.push(key);\n\t\t\t\tthis._taskDefinitionMap[key] = [];\n\n\t\t\t\tconst { SAP__Origin, InstanceID } = taskDefinitions[key];\n\t\t\t\turls.push(`DecisionOptions?SAP__Origin='${SAP__Origin}'&InstanceID='${InstanceID}'`);\n\t\t\t}\n\t\t\treturn urls;\n\t\t}, []);\n\n\t\tif (decisionURLs.length) {\n\t\t\tthis._clearRequests();\n\t\t\tthis.requests.push({\n\t\t\t\tbaseURL: this.getBaseUrl(),\n\t\t\t\trequestURLs: decisionURLs,\n\t\t\t\tsuccess: (results: DecisionOption[][]): Promise<void> => {\n\t\t\t\t\tresults.forEach((decisionOptions: DecisionOption[], index) => {\n\t\t\t\t\t\tthis._taskDefinitionMap[decisionKeys[index]] = decisionOptions;\n\t\t\t\t\t});\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tawait this._submitBatch();\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves unique task definitions from the provided array of tasks.\n\t *\n\t * @private\n\t * @param {Task[]} tasks - The array of tasks from which to retrieve task definitions.\n\t * @returns {Record<string, TaskDefintion>} An object containing unique task definitions.\n\t */\n\tprivate _getTaskDefintions(tasks: Task[] = []): Record<string, TaskDefintion> {\n\t\tconst taskDefinitions: Record<string, TaskDefintion> = {};\n\t\ttasks.forEach((task) => {\n\t\t\tconst key = task.SAP__Origin + task.TaskDefinitionID;\n\t\t\tif (!taskDefinitions[key]) {\n\t\t\t\ttaskDefinitions[key] = {\n\t\t\t\t\tSAP__Origin: task.SAP__Origin,\n\t\t\t\t\tInstanceID: task.InstanceID,\n\t\t\t\t\tTaskDefinitionID: task.TaskDefinitionID\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\treturn taskDefinitions;\n\t}\n\n\t/**\n\t * Extracts Custom Attribute Information to create an attribute map from raw attribute data\n\t * received from call, which is used while task processing\n\t *\n\t * @private\n\t * @param {TaskDefinitionCollection[]} taskDefinitions - array of raw tasks definitions\n\t */\n\tprivate _extractCustomAttributes(taskDefinitions: TaskDefinitionCollection[] = []): void {\n\t\ttaskDefinitions.forEach((taskDefinition: TaskDefinitionCollection) => {\n\t\t\tconst customAttributes = taskDefinition.CustomAttributeDefinitionData?.results || [];\n\t\t\tthis._customAttributeMap[taskDefinition.TaskDefinitionID] = customAttributes\n\t\t\t\t.filter((oAttribute) => oAttribute.Rank > 0)\n\t\t\t\t.sort((attr1, attr2) => attr2.Rank - attr1.Rank)\n\t\t\t\t.map((oAttribute) => ({\n\t\t\t\t\tname: oAttribute.Name,\n\t\t\t\t\tlabel: oAttribute.Label,\n\t\t\t\t\ttype: oAttribute.Type,\n\t\t\t\t\tformat: oAttribute.Format,\n\t\t\t\t\treference: oAttribute.Reference,\n\t\t\t\t\treferenced: oAttribute.Referenced,\n\t\t\t\t\ttextArrangement: oAttribute.TextArrangement\n\t\t\t\t}));\n\t\t});\n\t}\n\n\t/**\n\t * Get the text for the \"No Data\" message.\n\t *\n\t * @private\n\t * @returns {string} The text for the \"No Data\" message.\n\t */\n\tpublic getNoDataText(): string {\n\t\treturn this._i18nBundle.getText(\"noTaskTitle\") as string;\n\t}\n\n\t/**\n\t * Calculates the number of vertical cards that can fit within the available height of the given DOM element.\n\t *\n\t * @private\n\t * @override\n\t * @param {Element} domRef - The DOM element to calculate the vertical card count for.\n\t * @returns {number} - The number of vertical cards that can fit within the available height.\n\t */\n\tpublic getVerticalCardCount(domRef: Element, calculationProperties?: CalculationProperties): number {\n\t\tconst domProperties = fetchElementProperties(domRef, [\"height\", \"padding-top\"]);\n\t\tconst titleHeight = this.calculateTitleHeight();\n\t\tconst availableHeight = domProperties.height - domProperties[\"padding-top\"] * 2 - titleHeight;\n\t\tconst horizontalCardCount = this.getHorizontalCardCount(domRef);\n\t\tconst isPlaceholder = calculationProperties?.isPlaceholder;\n\t\tconst gap = 16;\n\t\tlet height = 0;\n\t\tlet verticalCardCount = 0;\n\n\t\tif (this._isLoaded()) {\n\t\t\tconst cardSet = splitCards(this._oData.tiles as Task[], horizontalCardCount);\n\t\t\tconst rowHeights = cardSet.map(\n\t\t\t\tfunction (cards: Task[]) {\n\t\t\t\t\tconst maxAttributes = cards.reduce(function (attributeCount: number, card: Task) {\n\t\t\t\t\t\tcard.attributes = card.attributes || [];\n\t\t\t\t\t\treturn card.attributes.length > attributeCount ? card.attributes.length : attributeCount;\n\t\t\t\t\t}, 1);\n\n\t\t\t\t\tconst count = Math.min(maxAttributes, 4) as keyof typeof Constants.CARD_HEIGHT;\n\t\t\t\t\treturn Constants.CARD_HEIGHT[count] + gap;\n\t\t\t\t}.bind(this)\n\t\t\t);\n\n\t\t\tfor (let rowHeight of rowHeights) {\n\t\t\t\tif (height + rowHeight < availableHeight) {\n\t\t\t\t\theight += rowHeight;\n\t\t\t\t\tverticalCardCount++;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tverticalCardCount = Math.floor(availableHeight / Constants.CARD_HEIGHT[isPlaceholder ? \"4\" : \"1\"]);\n\t\t}\n\n\t\treturn Math.max(verticalCardCount, 2);\n\t}\n}\n"],"mappings":"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","ignoreList":[]}