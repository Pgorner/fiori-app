{"version":3,"file":"BaseLayout-dbg.js","names":["sap","ui","define","Log","deepEqual","Page","UI5Element","Lib","HashChanger","__BaseLayoutRenderer","__BasePanel","___library","___utils_Device","_interopRequireDefault","obj","__esModule","default","BaseLayoutRenderer","BasePanel","LayoutType","DeviceType","calculateDeviceType","BaseLayout","extend","renderer","metadata","library","properties","enableSettings","type","group","visibility","enableFullScreen","expanded","defaultValue","settingsDialogPersisted","showHeader","showFooter","busy","defaultAggregation","aggregations","items","singularName","multiple","settingsDialog","keyUserSettingsDialog","fullScreenContainer","events","onCollapse","constructor","_constructor","id","settings","Page.prototype.constructor.call","this","init","_init","Page.prototype.init.call","_settingsPanels","_elementConfigs","Map","_i18nBundle","getResourceBundleFor","addStyleClass","_slideDurationInSeconds","_fullScreenContainer","getId","setAggregation","onBeforeRendering","_onBeforeRendering","event","Page.prototype.onBeforeRendering.call","getProperty","selectedKey","getAggregation","openSettingsDialog","setProperty","document","body","style","onAfterRendering","_onAfterRendering","_layoutLoaded","setTimeout","_hashChanger","_loadFullScreenFromHash","getHash","appIntent","split","window","addEventListener","currentHash","location","hash","substring","includes","getContent","_getContent","getItems","_getURLParams","queryString","indexOf","URLSearchParams","hashChanged","arguments","length","undefined","URLParams","expandedElementName","get","expandedElement","isTargetContainerVisible","targetContainer","getVisible","isPhone","Mobile","_currentExpandedElement","fullScreenName","_toggleFullScreenForElement","has","getElementById","classList","add","updatedHash","_removeURLParam","replaceHash","toggleFullScreen","sourceElements","_openSettingsDialog","context","open","setSettingsDialog","_setSettingsDialog","settingsPanels","getPanels","forEach","settingsPanel","_addSettingsPanel","override","push","_getSettingsPanels","_extractElementConfig","element","sourceElement","getParent","isPanelInSideBySideLayout","SideBySide","registerFullScreenElement","_registerFullScreenElement","elementConfig","set","deregisterFullScreenElement","_deregisterFullScreenElement","delete","_addURLParam","key","value","toString","_toggleFullScreen","allowToggle","_checkToggleRequirements","panelIndex","indexOfAggregation","isContainerInSideBySideLayout","_placeClonedElement","toggle","_toggleFullScreenButtonText","_previousExpandedElement","_currentExpandedElementIndex","indexOfItem","isTargetContainerDifferent","_adjustPreviousExpandedElementIfRequired","_modifyContainer","fireEvent","insertItem","_toggleInnerPanelVisibility","_resetScrollPosition","warning","_getFullScreenContainer","removeAllContent","_sourceElementClone","remove","addContent","currentFullScreenName","firstSourceElement","insertContent","_scrollPosition","getAssociation","focus","sectionRef","_getSectionRef","scrollTop","indexOfVisiblePanel","_getInnerControl","panel","index","toggleStyleClass","control","isPanel","isA","parentContainer","updateText","fullScreenButton","_getFullScreenButton","getText","fullScreenMenuItem","_getFullScreenMenuItem","_updateContainerHeader","getDomRef","childNodes","targetElement","_domSnapshot","cloneNode","isSideBySideLayout","targetDomRef","innerHTML","append","_getCurrentExpandedElementName","_getCurrentExpandedElement","isExpandInHash"],"sources":["BaseLayout.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport { Event } from \"jquery\";\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport Log from \"sap/base/Log\";\nimport deepEqual from \"sap/base/util/deepEqual\";\nimport Button from \"sap/m/Button\";\nimport FlexBox from \"sap/m/FlexBox\";\nimport Page from \"sap/m/Page\";\nimport Control from \"sap/ui/core/Control\";\nimport UI5Element, { MetadataOptions } from \"sap/ui/core/Element\";\nimport Lib from \"sap/ui/core/Lib\";\nimport HashChanger from \"sap/ui/core/routing/HashChanger\";\nimport BaseContainer from \"./BaseContainer\";\nimport { $BaseLayoutSettings } from \"./BaseLayout\";\nimport BaseLayoutRenderer from \"./BaseLayoutRenderer\";\nimport BasePanel from \"./BasePanel\";\nimport BaseSettingsDialog from \"./BaseSettingsDialog\";\nimport BaseSettingsPanel from \"./BaseSettingsPanel\";\nimport { LayoutType } from \"./library\";\nimport MenuItem from \"./MenuItem\";\nimport { DeviceType, calculateDeviceType } from \"./utils/Device\";\n\ninterface FullScreenElementConfig {\n\tfullScreenName: string;\n\tsourceElements: (BaseContainer | BasePanel)[];\n\ttargetContainer: BaseContainer;\n}\n\n/**\n *\n * Abstract base class for My Home layout control.\n *\n * @extends Page\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @internal\n * @experimental Since 1.121\n * @abstract\n * @private\n *\n * @alias sap.cux.home.BaseLayout\n */\nexport default abstract class BaseLayout extends Page {\n\tprotected _i18nBundle!: ResourceBundle;\n\tprivate _settingsPanels!: BaseSettingsPanel[];\n\tprivate _domSnapshot!: Node;\n\tprivate _sourceElementClone!: Node | Element;\n\tprivate _scrollPosition!: number;\n\tprivate _currentExpandedElementIndex!: number;\n\tprivate _fullScreenContainer!: Page;\n\tprivate _slideDurationInSeconds!: number;\n\tprivate _layoutLoaded!: boolean;\n\tprivate _hashChanger!: HashChanger;\n\tprivate _currentExpandedElement!: FullScreenElementConfig | undefined;\n\tprivate _previousExpandedElement!: FullScreenElementConfig | undefined;\n\tprivate _elementConfigs!: Map<string, FullScreenElementConfig>;\n\n\tconstructor(id?: string | $BaseLayoutSettings);\n\tconstructor(id?: string, settings?: $BaseLayoutSettings);\n\tconstructor(id?: string, settings?: $BaseLayoutSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tproperties: {\n\t\t\t/**\n\t\t\t * Indicates whether home settings are enabled for this control.\n\t\t\t */\n\t\t\tenableSettings: { type: \"boolean\", group: \"Misc\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Indicates whether full screen is enabled for this control.\n\t\t\t */\n\t\t\tenableFullScreen: { type: \"boolean\", group: \"Misc\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Indicates whether the layout is expanded.\n\t\t\t */\n\t\t\texpanded: { type: \"boolean\", group: \"Misc\", defaultValue: false, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Indicates whether the settings dialog state is persisted for this control.\n\t\t\t */\n\t\t\tsettingsDialogPersisted: { type: \"boolean\", group: \"Misc\", defaultValue: false, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Whether the layout shall have a header.\n\t\t\t */\n\t\t\tshowHeader: { type: \"boolean\", group: \"Appearance\", defaultValue: false, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Whether this layout shall have a footer.\n\t\t\t */\n\t\t\tshowFooter: { type: \"boolean\", group: \"Appearance\", defaultValue: false, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Whether the layout is currently in busy state.\n\t\t\t */\n\t\t\tbusy: { type: \"boolean\", defaultValue: false, visibility: \"hidden\" }\n\t\t},\n\t\tdefaultAggregation: \"items\",\n\t\taggregations: {\n\t\t\t/**\n\t\t\t * The items aggregation which should be of type BaseContainer\n\t\t\t */\n\t\t\titems: { type: \"sap.cux.home.BaseContainer\", singularName: \"item\", multiple: true },\n\t\t\t/**\n\t\t\t * The settings dialog aggregation which controls settings for my home controls.\n\t\t\t * It should be of type BaseSettingsDialog.\n\t\t\t * If Not provided, a default settings dialog will be created from sap.cux.home.SettingsDialog.\n\t\t\t * In case of only custom settings panels, the settings dialog should be created and set manually from sap.cux.home.SettingsDialog.\n\t\t\t */\n\t\t\tsettingsDialog: {\n\t\t\t\ttype: \"sap.cux.home.BaseSettingsDialog\",\n\t\t\t\tsingularName: \"settingsDialog\",\n\t\t\t\tmultiple: false\n\t\t\t},\n\t\t\t/**\n\t\t\t * The Key User Settings dialog aggregation which controls key user settings for my home.\n\t\t\t * It should be of type BaseSettingsDialog.\n\t\t\t * If Not provided, a default settings dialog will be created from sap.cux.home.KeyUserSettingsDialog.\n\t\t\t * In case of only custom settings panels, the settings dialog should be created and set manually from sap.cux.home.KeyUserSettingsDialog.\n\t\t\t */\n\t\t\tkeyUserSettingsDialog: {\n\t\t\t\ttype: \"sap.cux.home.BaseSettingsDialog\",\n\t\t\t\tsingularName: \"keyUserSettingsDialog\",\n\t\t\t\tmultiple: false\n\t\t\t},\n\t\t\t/**\n\t\t\t * The full screen container to display registered full-screen elements\n\t\t\t */\n\t\t\tfullScreenContainer: { type: \"sap.m.Page\", singularName: \"fullScreenContainer\", multiple: false, visibility: \"hidden\" }\n\t\t},\n\t\tevents: {\n\t\t\t/**\n\t\t\t * Event is fired after the layout is collapsed.\n\t\t\t */\n\t\t\tonCollapse: {}\n\t\t}\n\t};\n\n\tstatic renderer: typeof BaseLayoutRenderer = BaseLayoutRenderer;\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tsuper.init();\n\t\tthis._settingsPanels = [];\n\t\tthis._elementConfigs = new Map();\n\t\tthis._i18nBundle = Lib.getResourceBundleFor(\"sap.cux.home.i18n\") as ResourceBundle;\n\n\t\t//setup page\n\t\tthis.addStyleClass(\"sapCuxBaseLayout\");\n\n\t\t//setup full-screen container\n\t\tthis._slideDurationInSeconds = 1;\n\t\tthis._fullScreenContainer = new Page(`${this.getId()}-fullScreen-container`, { showHeader: false });\n\t\tthis.setAggregation(\"fullScreenContainer\", this._fullScreenContainer);\n\t}\n\n\t/**\n\t * onBeforeRendering lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic onBeforeRendering(event: Event): void {\n\t\tsuper.onBeforeRendering(event);\n\n\t\t//open settings dialog if persisted\n\t\tif (this.getProperty(\"settingsDialogPersisted\")) {\n\t\t\tconst selectedKey = (this.getAggregation(\"settingsDialog\") as BaseSettingsDialog)?.getProperty(\"selectedKey\") as string;\n\t\t\tthis.openSettingsDialog(selectedKey);\n\n\t\t\t//reset property\n\t\t\tthis.setProperty(\"settingsDialogPersisted\", false, true);\n\t\t}\n\n\t\t//update full-screen slide animation duration, if enabled\n\t\tif (this.getProperty(\"enableFullScreen\")) {\n\t\t\tdocument.body.style.setProperty(\"--sapUiSlideDuration\", `${this._slideDurationInSeconds}s`);\n\t\t}\n\t}\n\n\t/**\n\t * onAfterRendering lifecycle method.\n\t *\n\t * @private\n\t */\n\tpublic onAfterRendering(): void {\n\t\t//expand element on load if expanded through URL param\n\t\tif (this.getProperty(\"enableFullScreen\")) {\n\t\t\tif (!this._layoutLoaded) {\n\t\t\t\tthis._layoutLoaded = true;\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis._hashChanger = new HashChanger();\n\t\t\t\t\tthis._loadFullScreenFromHash(this._hashChanger.getHash() || \"\");\n\t\t\t\t\tconst [appIntent] = this._hashChanger.getHash().split(\"?\");\n\n\t\t\t\t\t//attach hash change event for toggling full screen\n\t\t\t\t\twindow.addEventListener?.(\"hashchange\", () => {\n\t\t\t\t\t\tconst currentHash = window.location.hash.substring(1);\n\t\t\t\t\t\t//toggle full screen only if hash is changed from within the app\n\t\t\t\t\t\tif (currentHash.includes?.(appIntent)) {\n\t\t\t\t\t\t\tthis._loadFullScreenFromHash(currentHash, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the content of the BaseLayout.\n\t * Overridden to return the items aggregation during inner page rendering.\n\t *\n\t * @private\n\t * @override\n\t * @returns An array of Control objects representing the content.\n\t */\n\tpublic getContent(): Control[] {\n\t\treturn this.getItems();\n\t}\n\n\t/**\n\t * Extracts URL search parameters from a given hash string.\n\t *\n\t * @private\n\t * @param {string} hash - The hash string containing the URL parameters.\n\t * @returns {URLSearchParams} An instance of URLSearchParams containing the parsed parameters.\n\t */\n\tprivate _getURLParams(hash: string): URLSearchParams {\n\t\tconst queryString = hash?.includes(\"?\") ? hash.substring(hash.indexOf(\"?\") + 1) : \"\";\n\t\treturn new URLSearchParams(queryString);\n\t}\n\n\t/**\n\t * Loads full screen mode from URL hash if enabled.\n\t *\n\t * @private\n\t * @param {string} hash - The URL hash string.\n\t * @param {boolean} [hashChanged=false] - Indicates if the hash has changed.\n\t */\n\tprivate _loadFullScreenFromHash(hash: string, hashChanged: boolean = false): void {\n\t\tconst enableFullScreen = this.getProperty(\"enableFullScreen\") as boolean;\n\t\tconst URLParams = this._getURLParams(hash);\n\t\tconst expandedElementName = URLParams.get(\"expanded\") || \"\";\n\t\tconst expandedElement = this._elementConfigs.get(expandedElementName);\n\t\tconst isTargetContainerVisible = expandedElement?.targetContainer.getVisible() || false;\n\t\tconst isPhone = calculateDeviceType() === DeviceType.Mobile;\n\n\t\tif (enableFullScreen && expandedElement && !isPhone && isTargetContainerVisible) {\n\t\t\tif (this._currentExpandedElement?.fullScreenName !== expandedElementName) {\n\t\t\t\t//expand element and prevent slide if hash element is found and another element is currently expanded\n\t\t\t\tthis._toggleFullScreenForElement(expandedElement, hashChanged);\n\t\t\t} else if (!this._currentExpandedElement) {\n\t\t\t\t//expand element if hash element is found and no element is currently expanded\n\t\t\t\tthis._toggleFullScreenForElement(expandedElement);\n\t\t\t} else if (URLParams.has(\"expanded\")) {\n\t\t\t\t//retain the slide transition in case of hash switch\n\t\t\t\tdocument.getElementById(`${this.getId()}-layout-container`)?.classList.add(\"slide\");\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._currentExpandedElement) {\n\t\t\t\t//collapse expanded element if hash element not found\n\t\t\t\tthis._toggleFullScreenForElement(this._currentExpandedElement);\n\t\t\t} else {\n\t\t\t\t//reset hash if no expanded element found\n\t\t\t\tif (URLParams.has(\"expanded\")) {\n\t\t\t\t\tconst updatedHash = this._removeURLParam(hash, \"expanded\");\n\t\t\t\t\tthis._hashChanger?.replaceHash(updatedHash, \"Backwards\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Toggles full screen mode for the specified element.\n\t *\n\t * @private\n\t * @param {FullScreenElementConfig} expandedElement - The configuration of the element to be expanded.\n\t * @param {boolean} [hashChanged=false] - Indicates if the hash has changed, affecting the toggle behavior.\n\t */\n\tprivate _toggleFullScreenForElement(expandedElement: FullScreenElementConfig, hashChanged: boolean = false): void {\n\t\tsetTimeout(() => this.toggleFullScreen(expandedElement.sourceElements[0], hashChanged));\n\t}\n\n\t/**\n\t * Opens the settings dialog and navigate to the panel\n\t * specified by the selected key.\n\t *\n\t * @private\n\t * @param {string} selectedKey The key of the panel to navigate to\n\t */\n\tpublic openSettingsDialog(selectedKey: string = \"\", context: object = {}): void {\n\t\tconst settingsDialog = this.getAggregation(\"settingsDialog\") as BaseSettingsDialog;\n\t\tsettingsDialog?.setProperty(\"selectedKey\", selectedKey);\n\t\tsettingsDialog?.setProperty(\"context\", context);\n\t\tsettingsDialog?.open();\n\t}\n\n\t/**\n\t * Sets SettingsDialog aggregation.\n\t * Overridden to update cached settings panels.\n\t *\n\t * @public\n\t * @override\n\t * @returns {BaseSettingsDialog} the dialog for chaining\n\t */\n\tpublic setSettingsDialog(settingsDialog: BaseSettingsDialog): this {\n\t\tconst enableSettings = this.getProperty(\"enableSettings\") as boolean;\n\t\tif (enableSettings) {\n\t\t\tconst settingsPanels = settingsDialog?.getPanels();\n\t\t\tsettingsPanels?.forEach((settingsPanel: BaseSettingsPanel) => {\n\t\t\t\tthis._addSettingsPanel(settingsPanel);\n\t\t\t});\n\t\t}\n\t\tthis.setAggregation(\"settingsDialog\", settingsDialog);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a settings panel to the list of settings panels associated\n\t * with the layout's settings dialog.\n\t *\n\t * @param {BaseSettingsPanel} settingsPanel - The settings panel to be added.\n\t * @private\n\t */\n\tpublic _addSettingsPanel(settingsPanel: BaseSettingsPanel | BaseSettingsPanel[] | undefined, override?: boolean): void {\n\t\tif (settingsPanel) {\n\t\t\tif (override) {\n\t\t\t\tthis._settingsPanels = settingsPanel as BaseSettingsPanel[];\n\t\t\t} else {\n\t\t\t\tthis._settingsPanels.push(settingsPanel as BaseSettingsPanel);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Adds a settings panel to the list of settings panels associated\n\t * with the layout's settings dialog.\n\t *\n\t * @param {BaseSettingsPanel} settingsPanel - The settings panel to be added.\n\t * @private\n\t */\n\tpublic _getSettingsPanels(): BaseSettingsPanel[] {\n\t\treturn this._settingsPanels;\n\t}\n\n\t/**\n\t * Extracts the configuration necessary for handling full-screen functionality of an element.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element for which to extract the full-screen configuration.\n\t * @returns {FullScreenElementConfig} Full screen element configuration.\n\t */\n\tprivate _extractElementConfig(element: BaseContainer | BasePanel): FullScreenElementConfig {\n\t\tconst sourceElement = element;\n\t\tconst targetContainer = sourceElement instanceof BasePanel ? (sourceElement.getParent() as BaseContainer) : sourceElement;\n\t\tconst isPanelInSideBySideLayout =\n\t\t\tsourceElement instanceof BasePanel && targetContainer.getProperty(\"layout\") === LayoutType.SideBySide;\n\t\tconst fullScreenName = (isPanelInSideBySideLayout ? targetContainer : sourceElement).getProperty(\"fullScreenName\") as string;\n\n\t\treturn { sourceElements: [sourceElement], targetContainer, fullScreenName };\n\t}\n\n\t/**\n\t * Configures an element for full-screen functionality by extracting and storing its configuration.\n\t * Only stores the configuration if a full-screen name is provided and layout is not currently expanded.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element to configure for full-screen.\n\t */\n\tpublic registerFullScreenElement(element: BaseContainer | BasePanel): void {\n\t\tconst elementConfig = this._extractElementConfig(element);\n\t\tconst { fullScreenName } = elementConfig;\n\n\t\tif (fullScreenName && !this.getProperty(\"expanded\")) {\n\t\t\tif (this._elementConfigs.get(fullScreenName)) {\n\t\t\t\tthis._elementConfigs.get(fullScreenName)?.sourceElements.push(element);\n\t\t\t} else {\n\t\t\t\tthis._elementConfigs.set(fullScreenName, elementConfig);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Removes an element's full-screen configuration based on its full-screen name.\n\t * Only removes the configuration if a full-screen name is provided and layout is not currently expanded.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element to remove from full-screen configuration.\n\t */\n\tpublic deregisterFullScreenElement(element: BaseContainer | BasePanel): void {\n\t\tconst { fullScreenName } = this._extractElementConfig(element);\n\t\tif (fullScreenName && !this.getProperty(\"expanded\")) {\n\t\t\tthis._elementConfigs.delete(fullScreenName);\n\t\t}\n\t}\n\n\t/**\n\t * Adds or updates a URL parameter in the given hash string.\n\t *\n\t * @private\n\t * @param {string} hash - The original hash string.\n\t * @param {string} key - The parameter key to add or update.\n\t * @param {string} value - The value for the parameter.\n\t * @returns {string} The updated hash string with the new or updated parameter.\n\t */\n\tprivate _addURLParam(hash: string, key: string, value: string): string {\n\t\tconst URLParams = this._getURLParams(hash);\n\t\tURLParams.set(key, value);\n\t\treturn `${hash.split(\"?\")[0]}?${URLParams.toString()}`;\n\t}\n\n\t/**\n\t * Removes a specified parameter from the URL hash string.\n\t *\n\t * @private\n\t * @param {string} hash - The original hash string.\n\t * @param {string} key - The parameter key to remove.\n\t * @returns {string} The updated hash string without the specified parameter.\n\t */\n\tprivate _removeURLParam(hash: string, key: string): string {\n\t\tconst URLParams = this._getURLParams(hash);\n\t\tURLParams.delete(key);\n\t\treturn URLParams.toString() ? `${hash.split(\"?\")[0]}?${URLParams.toString()}` : hash.split(\"?\")[0];\n\t}\n\n\t/**\n\t * Toggles the full-screen state of a given element, handling layout adjustments, visibility, and scroll position.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element to toggle full-screen state for.\n\t * @param {boolean} [hashChanged=false] - Indicates if the hash has changed.\n\t */\n\tpublic toggleFullScreen(element: BaseContainer | BasePanel, hashChanged: boolean = false): void {\n\t\tconst isPanelInSideBySideLayout =\n\t\t\telement instanceof BasePanel && element.getParent()?.getProperty(\"layout\") === LayoutType.SideBySide;\n\t\tconst fullScreenName = (isPanelInSideBySideLayout ? element.getParent() : element)?.getProperty(\"fullScreenName\") as string;\n\t\tconst elementConfig = this._elementConfigs.get(fullScreenName);\n\t\tconst allowToggle = this._checkToggleRequirements(elementConfig as FullScreenElementConfig);\n\n\t\tif (elementConfig && allowToggle) {\n\t\t\tconst { targetContainer } = elementConfig;\n\t\t\tconst currentHash = this._hashChanger?.getHash() || \"\";\n\t\t\tconst panelIndex = targetContainer.indexOfAggregation(\"content\", element);\n\t\t\tconst isContainerInSideBySideLayout = targetContainer.getProperty(\"layout\") === LayoutType.SideBySide;\n\t\t\tlet expanded = this.getProperty(\"expanded\") as boolean;\n\n\t\t\tif (!hashChanged) {\n\t\t\t\t//update expanded state\n\t\t\t\tthis.setProperty(\"expanded\", !this.getProperty(\"expanded\"), true);\n\t\t\t\texpanded = this.getProperty(\"expanded\") as boolean;\n\n\t\t\t\t//place cloned element in full screen container\n\t\t\t\tthis._placeClonedElement(targetContainer, expanded, panelIndex);\n\n\t\t\t\t//perform slide transition\n\t\t\t\tdocument.getElementById(`${this.getId()}-layout-container`)?.classList.toggle(\"slide\", expanded);\n\t\t\t}\n\n\t\t\t//toggle full-screen button text for the element\n\t\t\tthis._toggleFullScreenButtonText(element, expanded);\n\n\t\t\t// store the current and previous expanded element\n\t\t\tif (expanded) {\n\t\t\t\tthis._previousExpandedElement = this._currentExpandedElement;\n\t\t\t\tthis._currentExpandedElement = elementConfig;\n\t\t\t} else {\n\t\t\t\tdelete this._currentExpandedElement;\n\t\t\t}\n\n\t\t\t//add or remove actual element at the end of slide transition\n\t\t\tsetTimeout(\n\t\t\t\t() => {\n\t\t\t\t\tif (expanded) {\n\t\t\t\t\t\t//store the current expanded element index\n\t\t\t\t\t\tthis._currentExpandedElementIndex = this.indexOfItem(targetContainer);\n\n\t\t\t\t\t\t//adjust currently expanded element if present\n\t\t\t\t\t\tconst isTargetContainerDifferent = !deepEqual(this._previousExpandedElement?.targetContainer, targetContainer);\n\t\t\t\t\t\tthis._adjustPreviousExpandedElementIfRequired(isTargetContainerDifferent);\n\n\t\t\t\t\t\tthis._modifyContainer(targetContainer, panelIndex);\n\n\t\t\t\t\t\t//adjust hash\n\t\t\t\t\t\tthis._currentExpandedElement = elementConfig;\n\t\t\t\t\t\tconst updatedHash = this._addURLParam(currentHash, \"expanded\", fullScreenName);\n\t\t\t\t\t\tthis._hashChanger?.replaceHash(updatedHash, \"Forwards\");\n\n\t\t\t\t\t\t//fire onExpand event\n\t\t\t\t\t\telement.fireEvent(\"onExpand\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.insertItem(targetContainer, this._currentExpandedElementIndex);\n\n\t\t\t\t\t\t//show all other panels in the container, if not in side-by-side layout\n\t\t\t\t\t\tif (!isContainerInSideBySideLayout) {\n\t\t\t\t\t\t\tthis._toggleInnerPanelVisibility(targetContainer, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//adjust hash\n\t\t\t\t\t\tdelete this._currentExpandedElement;\n\t\t\t\t\t\tconst updatedHash = this._removeURLParam(currentHash, \"expanded\");\n\t\t\t\t\t\tthis._hashChanger?.replaceHash(updatedHash, \"Backwards\");\n\n\t\t\t\t\t\t//reset scroll position on collapse\n\t\t\t\t\t\tthis._resetScrollPosition(element);\n\n\t\t\t\t\t\t//fire onCollapse event\n\t\t\t\t\t\tthis.fireEvent(\"onCollapse\");\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\thashChanged ? 0 : this._slideDurationInSeconds * 1000\n\t\t\t);\n\t\t} else {\n\t\t\tLog.warning(`Element with ID: ${element?.getId()} not registered for full screen`);\n\t\t}\n\t}\n\n\t/**\n\t * Place actual element in the full screen container and hide all other panels in the container, if not in side-by-side layout\n\t *\n\t * @private\n\t * @param {BaseContainer} targetContainer - Container that is to be displayed in full-screen mode\n\t * @param {number} panelIndex - Index of the panel to remain visible if not in side-by-side layout.\n\t */\n\tprivate _modifyContainer(targetContainer: BaseContainer, panelIndex: number) {\n\t\t//adjust currently expanded element if present\n\t\tconst isContainerInSideBySideLayout = targetContainer.getProperty(\"layout\") === LayoutType.SideBySide;\n\t\tconst isTargetContainerDifferent = !deepEqual(this._previousExpandedElement?.targetContainer, targetContainer);\n\t\tif (!this._previousExpandedElement || isTargetContainerDifferent) {\n\t\t\tthis._getFullScreenContainer().removeAllContent();\n\t\t\t(this._sourceElementClone as Element).remove();\n\t\t\tthis._getFullScreenContainer().addContent(targetContainer as Control);\n\t\t}\n\n\t\t//hide all other panels in the container, if not in side-by-side layout\n\t\tif (!isContainerInSideBySideLayout) {\n\t\t\tthis._toggleInnerPanelVisibility(targetContainer, false, panelIndex);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the toggle requirements are met for the given element configuration.\n\t *\n\t * @private\n\t * @param {FullScreenElementConfig} elementConfig - The configuration of the element to check.\n\t * @returns {boolean} `true` if toggling is allowed, otherwise `false`.\n\t */\n\tprivate _checkToggleRequirements(elementConfig: FullScreenElementConfig): boolean {\n\t\tconst expanded = this.getProperty(\"expanded\") as boolean;\n\t\tlet allowToggle = true;\n\n\t\tif (expanded) {\n\t\t\t// if expanded, allow toggling only if the provided element and expanded element are the same\n\t\t\tconst currentFullScreenName = elementConfig?.fullScreenName;\n\t\t\tallowToggle = this._currentExpandedElement?.fullScreenName === currentFullScreenName;\n\t\t}\n\n\t\treturn allowToggle;\n\t}\n\n\t/**\n\t * Adjusts the current expanded element if required based on the new target container.\n\t *\n\t * @private\n\t * @param {boolean} isTargetContainerDifferent - Indicates whether the target container is different from the current expanded element's container.\n\t */\n\tprivate _adjustPreviousExpandedElementIfRequired(isTargetContainerDifferent: boolean) {\n\t\tif (this._previousExpandedElement) {\n\t\t\tconst [firstSourceElement] = this._previousExpandedElement.sourceElements;\n\n\t\t\t//update full-screen button text for the current expanded element to collapsed state\n\t\t\tthis._toggleFullScreenButtonText(firstSourceElement, false);\n\n\t\t\tif (isTargetContainerDifferent) {\n\t\t\t\t//if expanded through hash change, place the current expanded element back in the layout\n\t\t\t\tthis.insertContent(\n\t\t\t\t\tthis._previousExpandedElement.targetContainer,\n\t\t\t\t\tthis.indexOfItem(this._previousExpandedElement.targetContainer)\n\t\t\t\t);\n\n\t\t\t\t//reset scroll position on expansion throuh hash change\n\t\t\t\tthis._scrollPosition = 0;\n\n\t\t\t\t//show all other panels in the container, if not in side-by-side layout\n\t\t\t\tif (this._previousExpandedElement.targetContainer.getProperty(\"layout\") !== LayoutType.SideBySide) {\n\t\t\t\t\tthis._toggleInnerPanelVisibility(this._previousExpandedElement.targetContainer, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Resets the scroll position to that of the collapsed element in the original container.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element for which to reset the scroll position.\n\t */\n\tprivate _resetScrollPosition(element: BaseContainer | BasePanel) {\n\t\t//reset scroll position\n\t\tsetTimeout(() => {\n\t\t\tUI5Element.getElementById(`${element.getAssociation(\"fullScreenButton\", null) as string}-btn`)?.focus();\n\t\t\tconst sectionRef = this._getSectionRef(this);\n\t\t\tif (sectionRef !== undefined) {\n\t\t\t\tsectionRef.scrollTop = this._scrollPosition;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Toggles visibility of inner panels, except one specified by index.\n\t * Applicable only for panels not in SideSide layout.\n\t *\n\t * @private\n\t * @param {BaseContainer} element - Container with inner panels.\n\t * @param {boolean} visibility - Desired visibility state for panels.\n\t * @param {number} [indexOfVisiblePanel] - Index of panel to exclude from toggle.\n\t */\n\tprivate _toggleInnerPanelVisibility(element: BaseContainer, visibility: boolean, indexOfVisiblePanel?: number): void {\n\t\t(element._getInnerControl() as FlexBox).getItems().forEach((panel, index) => {\n\t\t\tpanel.toggleStyleClass(\"sapCuxHidden\", index === indexOfVisiblePanel ? visibility : !visibility);\n\t\t});\n\t}\n\n\t/**\n\t * Updates the full-screen button text for a control (or all controls in a side-by-side layout) based on expanded state.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} control - The control to update or the parent of controls to update.\n\t * @param {boolean} expanded - Indicates if the text should reflect an expanded or collapsed state.\n\t */\n\tprivate _toggleFullScreenButtonText(control: BaseContainer | BasePanel, expanded: boolean): void {\n\t\tconst isPanel = control.isA(\"sap.cux.home.BasePanel\");\n\t\tconst parentContainer = (isPanel ? control.getParent() : control) as BaseContainer;\n\t\tconst isPanelInSideBySideLayout = isPanel && parentContainer.getProperty(\"layout\") === LayoutType.SideBySide;\n\n\t\t//update full-screen button text\n\t\tconst updateText = (control: BaseContainer | BasePanel) => {\n\t\t\tconst fullScreenButton = this._getFullScreenButton(control);\n\t\t\tfullScreenButton.setProperty(\"text\", this._i18nBundle.getText(expanded ? \"collapse\" : \"expand\"), true);\n\t\t\tconst fullScreenMenuItem = this._getFullScreenMenuItem(control);\n\t\t\tfullScreenMenuItem.setProperty(\"title\", this._i18nBundle.getText(expanded ? \"collapse\" : \"expand\"), true);\n\t\t};\n\n\t\tif (isPanelInSideBySideLayout) {\n\t\t\tparentContainer.getContent()?.forEach(updateText);\n\t\t} else {\n\t\t\tupdateText(control);\n\t\t}\n\n\t\t//update container header elements\n\t\tparentContainer._updateContainerHeader(isPanelInSideBySideLayout ? parentContainer : control);\n\t}\n\n\t/**\n\t * Retrieves the full-screen button associated with a control.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} control - The control to find the full-screen button for.\n\t * @returns {Button} The full-screen button associated with the control.\n\t */\n\tprivate _getFullScreenButton(control: BaseContainer | BasePanel): Button {\n\t\treturn UI5Element.getElementById(control.getAssociation(\"fullScreenButton\", null) as string) as Button;\n\t}\n\n\t/**\n\t * Retrieves the Full screen menu item associated with a control.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} control - The control to find the full-screen button for.\n\t * @returns {MenuItem} The \"Show More\" menu item associated with the control.\n\t */\n\tprivate _getFullScreenMenuItem(control: BaseContainer | BasePanel): MenuItem {\n\t\treturn UI5Element.getElementById(control.getAssociation(\"fullScreenMenuItem\", null) as string) as MenuItem;\n\t}\n\n\t/**\n\t * Retrieves the full-screen container from the current aggregation.\n\t *\n\t * @private\n\t * @returns {Page} The Page instance used as the full-screen container.\n\t */\n\tpublic _getFullScreenContainer(): Page {\n\t\treturn this.getAggregation(\"fullScreenContainer\") as Page;\n\t}\n\n\t/**\n\t * Gets the first child node of a control's DOM reference.\n\t *\n\t * @private\n\t * @param {Control} element - The control to get the child node for.\n\t * @returns {Node | Element} The first child node of the control's DOM reference.\n\t */\n\tprivate _getSectionRef<T extends Node | Element = Element>(element: Control): T | undefined {\n\t\treturn element.getDomRef()?.childNodes[0] as T;\n\t}\n\n\t/**\n\t * Clones and places an element into a target container for full-screen transitions.\n\t *\n\t * @private\n\t * @param {BaseContainer} targetElement - Element to clone or containing the element to clone.\n\t * @param {boolean} expanded - True to expand (clone and place), false to collapse (restore from snapshot).\n\t * @param {number} panelIndex - Index of the panel to clone if not in side-by-side layout.\n\t */\n\tprivate _placeClonedElement(targetElement: BaseContainer, expanded: boolean, panelIndex: number) {\n\t\t//store scroll position and DOM snapshot\n\t\tthis._scrollPosition = (expanded ? this._getSectionRef(this)?.scrollTop : this._scrollPosition) as number;\n\t\tthis._domSnapshot = (expanded ? this._getSectionRef<Node>(this)?.cloneNode(true) : this._domSnapshot) as Node;\n\n\t\tconst isSideBySideLayout = targetElement.getProperty(\"layout\") === LayoutType.SideBySide;\n\t\tconst sourceElement = isSideBySideLayout ? targetElement : (targetElement._getInnerControl() as FlexBox).getItems()[panelIndex];\n\t\tthis._sourceElementClone = expanded ? (sourceElement.getDomRef()?.cloneNode(true) as Node) : this._sourceElementClone;\n\t\tconst targetDomRef = expanded ? this._getSectionRef(this._getFullScreenContainer()) : this.getDomRef();\n\t\tif (targetDomRef) {\n\t\t\tsetTimeout(() => {\n\t\t\t\ttargetDomRef.innerHTML = \"\";\n\t\t\t\ttargetDomRef.append(expanded ? this._sourceElementClone : this._domSnapshot);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the name of the currently expanded element, if any.\n\t *\n\t * @private\n\t * @returns {string | undefined} - The full screen name of the currently expanded element, if any.\n\t */\n\tpublic _getCurrentExpandedElementName(): string | undefined {\n\t\treturn this._getCurrentExpandedElement()?.fullScreenName;\n\t}\n\n\t/**\n\t * Retrieves the currently expanded element config, if any\n\t *\n\t * @private\n\t * @returns {FullScreenElementConfig | undefined} - The full screen name of the currently expanded element, if any.\n\t */\n\tpublic _getCurrentExpandedElement(): FullScreenElementConfig | undefined {\n\t\tconst isExpandInHash = this._getURLParams(this._hashChanger?.getHash() || \"\").has(\"expanded\");\n\t\tif (isExpandInHash) {\n\t\t\treturn this._currentExpandedElement;\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]}