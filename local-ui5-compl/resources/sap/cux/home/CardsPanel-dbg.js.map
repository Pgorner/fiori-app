{"version":3,"file":"CardsPanel-dbg.js","names":["sap","ui","define","Log","GridContainer","GridContainerSettings","SelectionVariant","CardHelper","InsightsInMemoryCachingHost","HBox","HeaderContainer","VBox","EventBus","DragDropInfo","sap_ui_core_library","Card","JSONModel","Container","S4MyHome","__BasePanel","__MenuItem","__AppManager","___utils_Constants","___utils_Device","___utils_DragDropUtils","___utils_FESRUtil","__PersonalisationUtils","__UShellPersonalizer","_interopRequireDefault","obj","__esModule","default","_catch","body","recover","result","e","then","dnd","_finallyRethrows","finalizer","bind","BasePanel","MenuItem","AppManager","FEATURE_TOGGLES","SETTINGS_PANELS_KEYS","DeviceType","fetchElementProperties","attachKeyboardHandler","addFESRId","PersonalisationUtils","UShellPersonalizer","cardsMenuItems","RECOMMENDATION_PATH","runtimeHostCreated","CardsPanel","extend","metadata","library","properties","title","type","group","defaultValue","visibility","key","fullScreenName","defaultAggregation","aggregations","cards","multiple","singularName","events","handleHidePanel","parameters","handleUnhidePanel","constructor","_constructor","id","settings","BasePanel.prototype.constructor.call","this","aVisibleCardInstances","cardsInViewport","_appSwitched","appManagerInstance","getInstance","init","_init","_this","BasePanel.prototype.init.call","setProperty","_i18nBundle","getText","cardWidth","getDeviceType","Mobile","cardHeight","_oData","userVisibleCards","userAllCards","_controlModel","refreshMenuItem","getId","REFRESH","icon","press","refreshCards","editCardsMenuItem","EDIT_CARDS","event","_handleEditCards","menuItems","oEventBus","subscribe","sChannelId","sEventId","oData","Promise","resolve","_createCards","rerenderCards","_importdone","reject","_setupHeader","getServiceAsync","_getServiceAsync","cardHelperInstance","_addRuntimeHost","_toggleCardActivity","_this2","toggleUserActions","show","getParameter","_temp2","_temp","attachRouteMatched","aCards","_this3","_getManifestEntryFromCard","oCard","sEntry","cardWithManifestPromise","manifestEntry","getManifestEntry","_pManifestReady","attachManifestReady","_this4","_this5","_this6","_this7","_this8","runtimeHost","action","oEvent","sType","oParameters","_temp3","ibnTarget","preventDefault","oIntegrationCardManifest","aHeaderActions","header","actions","oCheckSemanticProperty","configuration","_semanticDateRangeSetting","value","JSON","parse","Object","keys","length","processSemanticDate","aContentActions","getContentActions","oHeaderAction","oContentAction","bOldCardExtension","indexOf","_manageOldCardExtension","navigationService","navigate","target","params","ibnParams","text","_refreshCardData","visible","oEntry","cacheType","cardId","getParent","_getLayout","openSettingsDialog","INSIGHTS_CARDS","oCardParams","aRelevantFilters","_relevantODataFilters","bRelevantFilters","aRelevantParams","_relevantODataParameters","bRelevantParams","oCardDataSource","dataSources","oFilterService","filterService","oDataSourceSettings","odataVersion","getParentAppDetails","descriptorContent","parentApp","semanticObject","intents","isNavigationSupported","_navigationService$is","aResponses","supported","sShellHash","semanticURL","shellHash","oCardSV","getCombinedParameters","forEach","sParamName","sFilterName","oCardParamsFilterName","aSelectOptions","SelectOptions","aRanges","Ranges","Sign","Option","Low","massAddSelectOption","oTempParam","selectionVariant","toJSONObject","stringify","_getContentActions","manifest","content","item","row","stateData","status","publish","require","InsightsCacheData","sCardId","cacheDataInstance","clearCache","refreshData","menuItem","addAggregation","actionButtons","actionButton","renderPanel","_renderPanel","_this9","_rerenderCards","_this10","_temp5","cardsContainer","setBusy","_getUserVisibleCardModel","oUserVisibleCardModel","getProperty","_temp4","_showCards","_checkForRecommendationCards","error","Error","message","fireHandleHidePanel","_wasThrown","_result","_adjustLayout","_this11","_getPersonalization","_this11$_getPersonali","oPersonalizer","read","oPersData","_exit","_temp7","_result2","showRecommendationCards","_temp6","undefined","getRecommenedCards","aRecommendedCards","_this11$_handleRecomm","_handleRecommendationCards","_this12","cardManifests","map","_updateRecommendationStatus","fireHandleUnhidePanel","updatePanelsItemCount","getMetadata","getName","scrollStep","scrollStepByItem","gridLayout","scrollTime","showDividers","cardsContainerSettings","columnSize","rowSize","gap","addStyleClass","setLayout","addDragDropConfig","sourceAggregation","targetAggregation","dropPosition","DropPosition","Between","dropLayout","DropLayout","Horizontal","drop","_handleCardsDnd","attachBrowserEvent","disablenavigation","metaKey","ctrlKey","dragDropEvent","_addContent","sDefaultAggreName","getDefaultAggregationName","removeAllAggregation","oUserCard","width","height","host","push","items","overlay","overlayHBoxWrapper","addItem","oPreviewVBox","direction","justifyContent","parent","getSource","isA","handleRemoveActions","_handleRemoveActions","handleAddActions","_handleAddActions","_refreshCards","card","_this13","sInsertPosition","oDragItem","iDragItemIndex","indexOfItem","oDropItem","iDropItemIndex","_temp8","_getUserAllCardModel","userAllCardsModel","updateCardList","_updateCardList","_this14","aUserVisibleCards","aUserAllCards","sDragedPositionRank","rank","sDropedPositionRank","iUpdatedDragItemIndex","findIndex","iUpdatedDropItemIndex","_temp9","aUpdatedCards","handleDndCardsRanking","_updateMultipleCards","_sortCardsOnRank","filter","sort","a","b","persContainerId","getPersContainerId","ownerComponent","getOwnerComponent","_this15","isFeatureEnabled","RECOMMENDATION","bRecommendationEnabled","_temp11","showRecommendation","write","_temp10","_this15$_getPersonali","_calculateVisibleCardCount","pageDomRef","getDomRef","deviceType","count","sectionDomRef","childNodes","domProperties","iAvailableWidth","_calculateCardWidth","Math","floor","containerWidth","minWidth","maxWidth","margin","layout","isFullScreenEnabled","isElementExpanded","_getCurrentExpandedElementName","cardCount","slice","getManifest","cardWrapper","toggleFullScreenElements","setWidth","setColumnSize"],"sources":["CardsPanel.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Log from \"sap/base/Log\";\nimport GridContainer from \"sap/f/GridContainer\";\nimport GridContainerSettings from \"sap/f/GridContainerSettings\";\nimport SelectionVariant from \"sap/fe/navigation/SelectionVariant\";\nimport CardHelper from \"sap/insights/CardHelper\";\nimport InsightsInMemoryCachingHost from \"sap/insights/base/InMemoryCachingHost\";\nimport Button from \"sap/m/Button\";\nimport HBox from \"sap/m/HBox\";\nimport HeaderContainer from \"sap/m/HeaderContainer\";\nimport VBox from \"sap/m/VBox\";\nimport Event from \"sap/ui/base/Event\";\nimport ManagedObject, { MetadataOptions } from \"sap/ui/base/ManagedObject\";\nimport Component from \"sap/ui/core/Component\";\nimport Control from \"sap/ui/core/Control\";\nimport EventBus from \"sap/ui/core/EventBus\";\nimport DragDropInfo from \"sap/ui/core/dnd/DragDropInfo\";\nimport { DropInfo$DropEventParameters } from \"sap/ui/core/dnd/DropInfo\";\nimport { dnd } from \"sap/ui/core/library\";\nimport Card from \"sap/ui/integration/widgets/Card\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport Container from \"sap/ushell/Container\";\nimport S4MyHome from \"sap/ushell/api/S4MyHome\";\nimport Navigation from \"sap/ushell/services/Navigation\";\nimport BasePanel from \"./BasePanel\";\nimport { $CardsPanelSettings } from \"./CardsPanel\";\nimport InsightsContainer from \"./InsightsContainer\";\nimport MenuItem from \"./MenuItem\";\nimport {\n\tICard,\n\tICardActionParameters,\n\tICardHelper,\n\tICardHelperInstance,\n\tICardManifest,\n\tInsightsCacheData,\n\tIsapApp,\n\tIsapCard\n} from \"./interface/CardsInterface\";\nimport AppManager from \"./utils/AppManager\";\nimport { FEATURE_TOGGLES, SETTINGS_PANELS_KEYS } from \"./utils/Constants\";\nimport { DeviceType, fetchElementProperties } from \"./utils/Device\";\nimport { attachKeyboardHandler } from \"./utils/DragDropUtils\";\nimport { addFESRId } from \"./utils/FESRUtil\";\nimport PersonalisationUtils from \"./utils/PersonalisationUtils\";\nimport UShellPersonalizer from \"./utils/UshellPersonalizer\";\n\nexport enum cardsMenuItems {\n\tREFRESH = \"cards-refresh\",\n\tEDIT_CARDS = \"cards-editCards\"\n}\n\ninterface IcardActionEvent {\n\tgetParameter(sParam: string): unknown;\n\tpreventDefault(): void;\n}\n\nexport interface Intent {\n\ttarget: {\n\t\tsemanticObject: string;\n\t\taction: string;\n\t};\n\tparams?: {\n\t\t[key: string]: string;\n\t};\n}\nconst RECOMMENDATION_PATH = \"showRecommendation\";\nlet runtimeHostCreated = false;\n\n/**\n *\n * Panel class for managing and storing Insights Cards.\n *\n * @extends sap.cux.home.BasePanel\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.122.0\n *\n * @internal\n * @experimental Since 1.122\n * @public\n *\n * @alias sap.cux.home.CardsPanel\n */\n\nexport default class CardsPanel extends BasePanel {\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tproperties: {\n\t\t\ttitle: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"hidden\" },\n\t\t\tkey: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"hidden\" },\n\t\t\tfullScreenName: { type: \"string\", group: \"Misc\", defaultValue: \"SI2\", visibility: \"hidden\" }\n\t\t},\n\t\tdefaultAggregation: \"cards\",\n\t\taggregations: {\n\t\t\t/**\n\t\t\t * Aggregation of cards available within the cards panel\n\t\t\t */\n\t\t\tcards: { type: \"sap.ui.integration.widgets.Card\", multiple: true, singularName: \"card\", visibility: \"hidden\" }\n\t\t},\n\t\tevents: {\n\t\t\thandleHidePanel: {\n\t\t\t\tparameters: {}\n\t\t\t},\n\t\t\thandleUnhidePanel: {\n\t\t\t\tparameters: {}\n\t\t\t}\n\t\t}\n\t};\n\tprivate cardHelperInstance!: ICardHelperInstance;\n\tprivate cardsContainer!: GridContainer | HeaderContainer;\n\tprivate aVisibleCardInstances: Card[] = [];\n\tpublic menuItems!: MenuItem[];\n\tpublic actionButtons!: Button[];\n\tprivate _oData!: Record<string, unknown>;\n\tprivate _controlModel!: JSONModel;\n\tprivate oPersonalizer!: UShellPersonalizer;\n\tprivate appManagerInstance;\n\tprivate runtimeHost!: InsightsInMemoryCachingHost;\n\tprivate cardsContainerSettings!: GridContainerSettings;\n\tprivate cardWidth!: string;\n\tprivate cardHeight!: string;\n\tprivate cardsInViewport: Card[] = [];\n\tprivate oEventBus!: EventBus;\n\tprivate _appSwitched: boolean = false;\n\n\tconstructor(idOrSettings?: string | $CardsPanelSettings);\n\tconstructor(id?: string, settings?: $CardsPanelSettings);\n\t/**\n\t * Constructor for a new card panel.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $CardsPanelSettings) {\n\t\tsuper(id, settings);\n\t\tthis.appManagerInstance = AppManager.getInstance();\n\t}\n\n\tpublic async init() {\n\t\tsuper.init();\n\t\tthis.setProperty(\"title\", `${this._i18nBundle?.getText(\"insights\")} ${this._i18nBundle.getText(\"insightsCardsTitle\")}`);\n\t\tthis.cardWidth = this.getDeviceType() === DeviceType.Mobile ? \"17rem\" : \"22rem\";\n\t\tthis.cardHeight = this.getDeviceType() === DeviceType.Mobile ? \"25.5rem\" : \"33rem\";\n\n\t\t//Initialize Tiles Model\n\t\tthis._oData = {\n\t\t\tuserVisibleCards: [] as ICard[],\n\t\t\tuserAllCards: [] as ICard[]\n\t\t};\n\t\tthis._controlModel = new JSONModel(this._oData);\n\n\t\t// Setup Menu Items\n\t\tconst refreshMenuItem = new MenuItem(`${this.getId()}-${cardsMenuItems.REFRESH}`, {\n\t\t\ttitle: this._i18nBundle.getText(\"refresh\"),\n\t\t\ticon: \"sap-icon://refresh\",\n\t\t\tpress: () => this.refreshCards()\n\t\t});\n\t\taddFESRId(refreshMenuItem, \"cardsRefresh\");\n\t\tconst editCardsMenuItem = new MenuItem(`${this.getId()}-${cardsMenuItems.EDIT_CARDS}`, {\n\t\t\ttitle: this._i18nBundle.getText(\"manageCards\"),\n\t\t\ticon: \"sap-icon://edit\",\n\t\t\tpress: (event: Event) => this._handleEditCards(event)\n\t\t});\n\t\taddFESRId(editCardsMenuItem, \"manageCards\");\n\n\t\tthis.menuItems = [refreshMenuItem, editCardsMenuItem];\n\n\t\tthis.oEventBus = EventBus.getInstance();\n\t\t// Subscribe to the event\n\t\tthis.oEventBus.subscribe(\n\t\t\t\"importChannel\",\n\t\t\t\"cardsImport\",\n\t\t\tasync (sChannelId?: string, sEventId?: string, oData?) => {\n\t\t\t\tawait this._createCards(oData as ICardManifest[]);\n\t\t\t\tawait this.rerenderCards();\n\t\t\t\tthis._importdone();\n\t\t\t},\n\t\t\tthis\n\t\t);\n\n\t\t// Setup Header Content\n\t\tthis._setupHeader();\n\t\tthis.cardHelperInstance = await (CardHelper as ICardHelper).getServiceAsync();\n\n\t\t// Setup Host For Cards\n\t\tif (!runtimeHostCreated) {\n\t\t\tthis._addRuntimeHost();\n\t\t}\n\t\t// Toggles the activity of cards\n\t\tthis._toggleCardActivity();\n\t}\n\n\t/**\n\t * Toggles the activity of cards on route change.\n\t *\n\t * @private\n\t * @returns {void}\n\t */\n\tprivate _toggleCardActivity(): void {\n\t\tconst toggleUserActions = async (event: Event<{ isMyHomeRoute: boolean }>) => {\n\t\t\tconst show = event.getParameter(\"isMyHomeRoute\");\n\t\t\tif (show) {\n\t\t\t\tif (this._appSwitched) {\n\t\t\t\t\tawait this.rerenderCards();\n\t\t\t\t\tthis._appSwitched = false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._appSwitched = true;\n\t\t\t}\n\t\t};\n\n\t\tS4MyHome.attachRouteMatched({}, toggleUserActions, this);\n\t}\n\n\t/**\n\t * Create imported cards\n\t * @param {ICardManifest[]} aCards - array of card manifests\n\t * @returns {any}\n\t */\n\tprivate async _createCards(aCards: ICardManifest[]) {\n\t\tawait this.cardHelperInstance?._createCards(aCards);\n\t\treturn this.rerenderCards();\n\t}\n\n\t/**\n\t * Retrieves a manifest entry from a card.\n\t * If the manifest entry is not immediately available, it waits for the manifest to be ready.\n\t *\n\t * @param {object} oCard - The card object from which to retrieve the manifest entry.\n\t * @param {string} sEntry - The manifest entry key to retrieve.\n\t * @returns {Promise<ICardManifest | undefined>} A promise that resolves with the manifest entry value.\n\t */\n\tprivate _getManifestEntryFromCard(oCard: Card, sEntry: string): Promise<ICardManifest | undefined> {\n\t\tconst cardWithManifestPromise = oCard as Card & { _pManifestReady?: Promise<ICardManifest | undefined> };\n\t\tconst manifestEntry = oCard.getManifestEntry(sEntry) as ICardManifest | undefined;\n\t\tif (manifestEntry) {\n\t\t\treturn Promise.resolve(manifestEntry);\n\t\t} else {\n\t\t\tif (!cardWithManifestPromise._pManifestReady) {\n\t\t\t\tcardWithManifestPromise._pManifestReady = new Promise<ICardManifest | undefined>((resolve) => {\n\t\t\t\t\toCard.attachManifestReady(() => {\n\t\t\t\t\t\tresolve(oCard.getManifestEntry(sEntry) as ICardManifest | undefined);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn cardWithManifestPromise._pManifestReady;\n\t\t}\n\t}\n\n\tprivate _addRuntimeHost() {\n\t\tthis.runtimeHost = new InsightsInMemoryCachingHost(\"runtimeHost\", {\n\t\t\taction: async (oEvent: IcardActionEvent) => {\n\t\t\t\tconst sType = oEvent.getParameter(\"type\") as string;\n\t\t\t\tlet oParameters = (oEvent.getParameter(\"parameters\") as ICardActionParameters) || {};\n\n\t\t\t\tif (sType === \"Navigation\" && oParameters.ibnTarget) {\n\t\t\t\t\toEvent.preventDefault();\n\t\t\t\t\tconst oCard = (oEvent.getParameter(\"card\") as Card) || {},\n\t\t\t\t\t\toIntegrationCardManifest = (oCard?.getManifestEntry(\"sap.card\") || {}) as IsapCard,\n\t\t\t\t\t\taHeaderActions = oIntegrationCardManifest?.header?.actions || [];\n\n\t\t\t\t\t//processing semantic date as param for navigation\n\t\t\t\t\t//check to verify if _semanticDateRangeSetting property is present in manifest\n\t\t\t\t\tlet oCheckSemanticProperty;\n\t\t\t\t\tif (oIntegrationCardManifest?.configuration?.parameters?._semanticDateRangeSetting?.value) {\n\t\t\t\t\t\toCheckSemanticProperty = JSON.parse(\n\t\t\t\t\t\t\toIntegrationCardManifest.configuration.parameters._semanticDateRangeSetting.value\n\t\t\t\t\t\t) as object;\n\t\t\t\t\t}\n\t\t\t\t\tif (oCheckSemanticProperty && Object.keys(oCheckSemanticProperty).length) {\n\t\t\t\t\t\toParameters = this.cardHelperInstance.processSemanticDate(\n\t\t\t\t\t\t\toParameters,\n\t\t\t\t\t\t\toIntegrationCardManifest\n\t\t\t\t\t\t) as ICardActionParameters;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet aContentActions = this.getContentActions(oIntegrationCardManifest) || [];\n\n\t\t\t\t\tconst oHeaderAction = aHeaderActions[0] || {},\n\t\t\t\t\t\toContentAction = aContentActions[0] || {};\n\n\t\t\t\t\tconst bOldCardExtension = !!(\n\t\t\t\t\t\t(oHeaderAction?.parameters &&\n\t\t\t\t\t\t\ttypeof oHeaderAction.parameters === \"string\" &&\n\t\t\t\t\t\t\toHeaderAction.parameters.indexOf(\"{= extension.formatters.addPropertyValueToAppState\") > -1) ||\n\t\t\t\t\t\t(oContentAction?.parameters &&\n\t\t\t\t\t\t\ttypeof oContentAction.parameters === \"string\" &&\n\t\t\t\t\t\t\toContentAction.parameters.indexOf(\"{= extension.formatters.addPropertyValueToAppState\") > -1)\n\t\t\t\t\t);\n\n\t\t\t\t\tthis._manageOldCardExtension(bOldCardExtension, oEvent, oParameters);\n\n\t\t\t\t\tconst navigationService = await Container.getServiceAsync<Navigation>(\"Navigation\");\n\t\t\t\t\tawait navigationService.navigate({\n\t\t\t\t\t\ttarget: oParameters.ibnTarget,\n\t\t\t\t\t\tparams: oParameters.ibnParams\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\tactions: [\n\t\t\t\t{\n\t\t\t\t\ttype: \"Custom\",\n\t\t\t\t\ttext: this._i18nBundle?.getText(\"refresh\"),\n\t\t\t\t\ticon: \"sap-icon://refresh\",\n\t\t\t\t\taction: (oCard: Card) => {\n\t\t\t\t\t\tthis._refreshCardData(oCard);\n\t\t\t\t\t},\n\t\t\t\t\tvisible: async (oCard: Card) => {\n\t\t\t\t\t\tconst oEntry = await this._getManifestEntryFromCard(oCard, \"sap.insights\");\n\t\t\t\t\t\treturn oEntry && !oEntry.cacheType;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: \"Custom\",\n\t\t\t\t\ttext: this._i18nBundle?.getText(\"viewFilteredBy\"),\n\t\t\t\t\ticon: \"sap-icon://filter\",\n\t\t\t\t\taction: (oCard: Card) => {\n\t\t\t\t\t\tconst cardId = (oCard.getManifestEntry(\"sap.app\") as IsapApp).id;\n\t\t\t\t\t\t(this.getParent() as InsightsContainer)\n\t\t\t\t\t\t\t?._getLayout()\n\t\t\t\t\t\t\t.openSettingsDialog(SETTINGS_PANELS_KEYS.INSIGHTS_CARDS, { cardId });\n\t\t\t\t\t},\n\t\t\t\t\tvisible: async (oCard: Card) => {\n\t\t\t\t\t\tconst oEntry = await this._getManifestEntryFromCard(oCard, \"sap.insights\");\n\t\t\t\t\t\tif (oEntry) {\n\t\t\t\t\t\t\tconst oCardParams = (oCard.getManifestEntry(\"sap.card\") as IsapCard)?.configuration?.parameters;\n\t\t\t\t\t\t\tconst aRelevantFilters = oCardParams?._relevantODataFilters?.value || [];\n\t\t\t\t\t\t\tconst bRelevantFilters = aRelevantFilters?.length;\n\t\t\t\t\t\t\tconst aRelevantParams = oCardParams?._relevantODataParameters?.value || [];\n\t\t\t\t\t\t\tconst bRelevantParams = aRelevantParams?.length;\n\t\t\t\t\t\t\tconst oCardDataSource = (oCard.getManifestEntry(\"sap.app\") as IsapApp).dataSources;\n\t\t\t\t\t\t\tconst oFilterService = oCardDataSource?.filterService;\n\t\t\t\t\t\t\tconst oDataSourceSettings = oFilterService?.settings;\n\t\t\t\t\t\t\t// show ViewFilteredBy Option only if relevantFilters or relevantParameters are there and is OdataV2 version\n\t\t\t\t\t\t\treturn !!(\n\t\t\t\t\t\t\t\t(bRelevantFilters || bRelevantParams) &&\n\t\t\t\t\t\t\t\toDataSourceSettings &&\n\t\t\t\t\t\t\t\toDataSourceSettings.odataVersion === \"2.0\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: \"Custom\",\n\t\t\t\t\ttext: this._i18nBundle?.getText(\"navigateToParent\"),\n\t\t\t\t\ticon: \"sap-icon://display-more\",\n\t\t\t\t\tvisible: async (oCard: Card) => {\n\t\t\t\t\t\treturn this._getManifestEntryFromCard(oCard, \"sap.insights\").then(async (oEntry: ICardManifest | undefined) => {\n\t\t\t\t\t\t\tif (oEntry) {\n\t\t\t\t\t\t\t\tconst parentApp = await this.cardHelperInstance.getParentAppDetails({\n\t\t\t\t\t\t\t\t\tdescriptorContent: oCard.getManifestEntry(\"/\") as ICardManifest\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tif (parentApp.semanticObject && parentApp.action) {\n\t\t\t\t\t\t\t\t\tconst navigationService = await Container.getServiceAsync<Navigation>(\"Navigation\");\n\t\t\t\t\t\t\t\t\tconst intents: Intent[] = [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\t\t\t\t\tsemanticObject: parentApp.semanticObject,\n\t\t\t\t\t\t\t\t\t\t\t\taction: parentApp.action\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\tconst aResponses = (await navigationService.isNavigationSupported(intents)) as { supported: boolean }[];\n\t\t\t\t\t\t\t\t\treturn aResponses[0].supported || false;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\taction: async (oCard: Card) => {\n\t\t\t\t\t\tconst parentApp = await this.cardHelperInstance.getParentAppDetails({\n\t\t\t\t\t\t\tdescriptorContent: oCard.getManifestEntry(\"/\") as ICardManifest\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst sShellHash = parentApp.semanticURL || parentApp.semanticObject;\n\t\t\t\t\t\tconst navigationService = await Container.getServiceAsync<Navigation>(\"Navigation\");\n\t\t\t\t\t\tawait navigationService.navigate({\n\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\tshellHash: sShellHash\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t\truntimeHostCreated = true;\n\t}\n\n\t/**\n\t * Updates parameters for an old card extension\n\t * @private\n\t * @param {boolean} bOldCardExtension - Determines whether the card is using an old card extension.\n\t * @param {IcardActionEvent} oEvent - An event object\n\t * @param {ICardActionParameters} oParameters - Parameter object\n\t */\n\n\tprivate _manageOldCardExtension(bOldCardExtension: boolean, oEvent: IcardActionEvent, oParameters: ICardActionParameters) {\n\t\tif (bOldCardExtension) {\n\t\t\tconst oCardSV = new SelectionVariant();\n\t\t\tconst oCardParams = (oEvent.getParameter(\"card\") as Card).getCombinedParameters();\n\t\t\t(oCardParams?._relevantODataParameters as string[]).forEach((sParamName: string) => {\n\t\t\t\tif (oParameters.ibnParams) {\n\t\t\t\t\toParameters.ibnParams[sParamName] = oCardParams[sParamName];\n\t\t\t\t}\n\t\t\t});\n\t\t\t(oCardParams?._relevantODataFilters as string[]).forEach((sFilterName: string) => {\n\t\t\t\tconst oCardParamsFilterName = JSON.parse(oCardParams[sFilterName] as string) as {\n\t\t\t\t\tParameters: unknown;\n\t\t\t\t\tSelectOptions: { PropertyName: string; Ranges: { Sign: string; Option: string; Low: string }[] }[];\n\t\t\t\t};\n\t\t\t\tconst aSelectOptions = oCardParamsFilterName.SelectOptions[0];\n\t\t\t\tconst aRanges = aSelectOptions.Ranges;\n\t\t\t\tif (aRanges?.length === 1 && aRanges[0].Sign === \"I\" && aRanges[0].Option === \"EQ\") {\n\t\t\t\t\tif (oParameters.ibnParams) {\n\t\t\t\t\t\toParameters.ibnParams[sFilterName] = aRanges[0].Low;\n\t\t\t\t\t}\n\t\t\t\t} else if (aRanges?.length > 0) {\n\t\t\t\t\toCardSV.massAddSelectOption(sFilterName, aRanges);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst oTempParam = JSON.parse(oParameters?.ibnParams?.[\"sap-xapp-state-data\"] as string) as Record<string, unknown>;\n\t\t\toTempParam.selectionVariant = oCardSV.toJSONObject();\n\t\t\tif (oParameters.ibnParams) {\n\t\t\t\toParameters.ibnParams[\"sap-xapp-state-data\"] = JSON.stringify(oTempParam);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves actions for a card based on its content type.\n\t *\n\t * @private\n\t * @param {IsapCard} manifest - manifest object\n\t */\n\tprivate getContentActions(manifest: IsapCard) {\n\t\tif (manifest.type === \"List\") {\n\t\t\treturn manifest?.content?.item?.actions;\n\t\t} else if (manifest.type === \"Table\") {\n\t\t\treturn manifest?.content?.row?.actions;\n\t\t} else {\n\t\t\treturn manifest?.content?.actions;\n\t\t}\n\t}\n\n\tprivate _importdone() {\n\t\tconst stateData = { status: true };\n\t\tthis.oEventBus.publish(\"importChannel\", \"cardsImported\", stateData);\n\t}\n\n\tprivate _refreshCardData(oCard: Card) {\n\t\tsap.ui.require([\"sap/insights/base/CacheData\"], (InsightsCacheData: InsightsCacheData) => {\n\t\t\tconst sCardId = (oCard.getManifestEntry(\"sap.app\") as IsapApp).id;\n\t\t\tconst cacheDataInstance = InsightsCacheData.getInstance();\n\t\t\tcacheDataInstance.clearCache(sCardId);\n\t\t\toCard.refreshData();\n\t\t});\n\t}\n\n\tprivate _setupHeader() {\n\t\tthis.menuItems?.forEach((menuItem) => this.addAggregation(\"menuItems\", menuItem));\n\t\tthis.actionButtons?.forEach((actionButton) => this.addAggregation(\"actionButtons\", actionButton));\n\t\tthis.setProperty(\"enableFullScreen\", true);\n\t}\n\n\tpublic async renderPanel(): Promise<void> {\n\t\tawait this.rerenderCards();\n\t}\n\n\tprivate async rerenderCards() {\n\t\ttry {\n\t\t\t// Enable Loader if container is present\n\t\t\tthis.cardsContainer?.setBusy(true);\n\t\t\t// Fetch Cards from insights service\n\t\t\tconst oUserVisibleCardModel = await this.cardHelperInstance?._getUserVisibleCardModel();\n\t\t\tconst aCards = oUserVisibleCardModel.getProperty(\"/cards\") as ICard[];\n\t\t\tthis._controlModel.setProperty(\"/userVisibleCards\", aCards);\n\t\t\tif (aCards?.length) {\n\t\t\t\tthis._showCards(aCards);\n\t\t\t} else {\n\t\t\t\tawait this._checkForRecommendationCards();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tLog.error(error.message);\n\t\t\t}\n\t\t\tthis.fireHandleHidePanel();\n\t\t} finally {\n\t\t\tthis.cardsContainer?.setBusy(false);\n\t\t\tthis._adjustLayout();\n\t\t}\n\t}\n\n\tprivate async _checkForRecommendationCards() {\n\t\tthis.oPersonalizer = await this._getPersonalization();\n\t\tconst oPersData = await this.oPersonalizer.read();\n\t\tconst showRecommendationCards = oPersData?.[RECOMMENDATION_PATH] as boolean;\n\t\tif (showRecommendationCards === undefined) {\n\t\t\tconst aRecommendedCards = await this.appManagerInstance.getRecommenedCards();\n\t\t\tif (aRecommendedCards) {\n\t\t\t\treturn this._handleRecommendationCards(aRecommendedCards);\n\t\t\t}\n\t\t}\n\t\tthis.fireHandleHidePanel();\n\t}\n\n\t/**\n\t * Handle Recommendation Cards\n\t * @param aRecommendedCards\n\t * @private\n\t */\n\tprivate async _handleRecommendationCards(aRecommendedCards: ICard[]) {\n\t\tconst cardManifests = aRecommendedCards.map((oCard) => oCard.descriptorContent);\n\t\tawait this.cardHelperInstance?._createCards(cardManifests);\n\t\tawait this._updateRecommendationStatus();\n\t\treturn this.rerenderCards();\n\t}\n\n\t/**\n\t *\n\t * @private\n\t */\n\tprivate _showCards(aCards: ICard[]) {\n\t\tthis.fireHandleUnhidePanel();\n\t\t(this.getParent() as InsightsContainer)?.updatePanelsItemCount(aCards.length, this.getMetadata().getName());\n\t\tif (this.getProperty(\"title\")) {\n\t\t\tthis.setProperty(\n\t\t\t\t\"title\",\n\t\t\t\t`${this._i18nBundle?.getText(\"insights\")} ${this._i18nBundle.getText(\"insightsCardsTitle\")} (${aCards.length})`\n\t\t\t);\n\t\t}\n\t\t// Create GridList Wrapper for all cards if not created\n\t\tif (!this.cardsContainer) {\n\t\t\tif (this.getDeviceType() === DeviceType.Mobile) {\n\t\t\t\tthis.cardsContainer = new HeaderContainer(`${this.getId()}-insightsCardsMobileFlexBox`, {\n\t\t\t\t\tscrollStep: 0,\n\t\t\t\t\tscrollStepByItem: 1,\n\t\t\t\t\tgridLayout: true,\n\t\t\t\t\tscrollTime: 1000,\n\t\t\t\t\tshowDividers: false,\n\t\t\t\t\tvisible: this.getDeviceType() === DeviceType.Mobile\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.cardsContainerSettings = new GridContainerSettings({\n\t\t\t\t\tcolumnSize: this.cardWidth,\n\t\t\t\t\trowSize: this.cardHeight,\n\t\t\t\t\tgap: \"1rem\"\n\t\t\t\t});\n\t\t\t\tthis.cardsContainer = new GridContainer(`${this.getId()}-insightsCardsFlexBox`, {})\n\t\t\t\t\t.addStyleClass(\"sapUiSmallMarginTop\")\n\t\t\t\t\t.setLayout(this.cardsContainerSettings);\n\t\t\t}\n\t\t\tthis.cardsContainer\n\t\t\t\t.addDragDropConfig(\n\t\t\t\t\tnew DragDropInfo({\n\t\t\t\t\t\tsourceAggregation: \"items\",\n\t\t\t\t\t\ttargetAggregation: \"items\",\n\t\t\t\t\t\tdropPosition: dnd.DropPosition.Between,\n\t\t\t\t\t\tdropLayout: dnd.DropLayout.Horizontal,\n\t\t\t\t\t\tdrop: (oEvent) => void this._handleCardsDnd(oEvent)\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t\t.attachBrowserEvent(\"keydown\", (event: KeyboardEvent) => {\n\t\t\t\t\tconst disablenavigation = event.metaKey || event.ctrlKey;\n\t\t\t\t\tvoid attachKeyboardHandler(event, disablenavigation, (dragDropEvent: Event) => this._handleCardsDnd(dragDropEvent));\n\t\t\t\t});\n\n\t\t\tthis._addContent(this.cardsContainer);\n\t\t} else {\n\t\t\tconst sDefaultAggreName = this.cardsContainer.getMetadata().getDefaultAggregationName();\n\t\t\tthis.cardsContainer.removeAllAggregation(sDefaultAggreName);\n\t\t\tthis.aVisibleCardInstances = [];\n\t\t\tthis.cardsInViewport = [];\n\t\t}\n\n\t\taCards.forEach((oCard) => {\n\t\t\tconst manifest = oCard.descriptorContent;\n\t\t\t// Create Card Instance\n\t\t\tconst oUserCard = new Card({\n\t\t\t\twidth: this.cardWidth,\n\t\t\t\theight: this.cardHeight,\n\t\t\t\tmanifest,\n\t\t\t\thost: this.runtimeHost as Control\n\t\t\t});\n\n\t\t\tthis.aVisibleCardInstances.push(oUserCard);\n\n\t\t\tthis.addAggregation(\"cards\", oUserCard, true);\n\n\t\t\tconst items: Control[] = [oUserCard];\n\n\t\t\t// Add overlay in case of List and Table Card\n\t\t\tconst sType = manifest[\"sap.card\"].type;\n\t\t\tif (sType === \"Table\" || sType === \"List\") {\n\t\t\t\tconst overlay = new HBox({\n\t\t\t\t\twidth: this.cardWidth,\n\t\t\t\t\theight: \"2rem\"\n\t\t\t\t}).addStyleClass(\"insightsCardOverflowTop\");\n\t\t\t\tconst overlayHBoxWrapper = new HBox({\n\t\t\t\t\theight: \"0\"\n\t\t\t\t}).addStyleClass(\"sapMFlexBoxJustifyCenter\");\n\t\t\t\toverlayHBoxWrapper.addItem(overlay);\n\t\t\t\titems.push(overlayHBoxWrapper);\n\t\t\t}\n\n\t\t\t// Create Wrapper VBox for Card\n\t\t\tconst oPreviewVBox = new VBox({\n\t\t\t\tdirection: \"Column\",\n\t\t\t\tjustifyContent: \"Center\",\n\t\t\t\titems: items\n\t\t\t});\n\n\t\t\t// add VBox as item to GridList\n\t\t\tconst sDefaultAggreName = this.cardsContainer.getMetadata().getDefaultAggregationName();\n\t\t\tthis.cardsContainer.addAggregation(sDefaultAggreName, oPreviewVBox);\n\t\t});\n\t\tthis.cardsContainer.setBusy(false);\n\t}\n\n\tprivate _handleEditCards(event: Event) {\n\t\t/* If called from Panel Header event.source() will return TilesPanel, if called from Insights Container event.source() will return InsightsContainer.\n\t\t_getLayout is available at Container Level*/\n\t\tlet parent: ManagedObject = event.getSource<CardsPanel>().getParent() || this;\n\t\tif (parent?.isA(\"sap.cux.home.CardsPanel\")) {\n\t\t\tparent = parent.getParent() as ManagedObject;\n\t\t}\n\t\t(parent as InsightsContainer)?._getLayout().openSettingsDialog(SETTINGS_PANELS_KEYS.INSIGHTS_CARDS);\n\t}\n\n\tpublic handleRemoveActions() {\n\t\tthis.setProperty(\"title\", \"\");\n\t\tthis.setProperty(\"enableSettings\", false);\n\t\tthis.setProperty(\"enableFullScreen\", false);\n\t\tthis.removeAllAggregation(\"actionButtons\");\n\t\tthis.removeAllAggregation(\"menuItems\");\n\t}\n\n\tpublic handleAddActions() {\n\t\tthis.setProperty(\n\t\t\t\"title\",\n\t\t\t`${this._i18nBundle?.getText(\"insights\")} ${this._i18nBundle.getText(\"insightsCardsTitle\")} (${(this._controlModel.getProperty(\"/userVisibleCards\") as ICard[])?.length})`\n\t\t);\n\t\tthis.setProperty(\"enableSettings\", true);\n\t\tthis.setProperty(\"enableFullScreen\", true);\n\t\tthis._setupHeader();\n\t}\n\n\tprivate refreshCards() {\n\t\t// This should be done via Host once implemented\n\t\tthis.aVisibleCardInstances.forEach((card) => card.refreshData());\n\t}\n\n\tprivate async _handleCardsDnd(oEvent: Event<DropInfo$DropEventParameters>) {\n\t\tconst sInsertPosition = oEvent.getParameter(\"dropPosition\") as string,\n\t\t\toDragItem = oEvent.getParameter(\"draggedControl\") as Control,\n\t\t\tiDragItemIndex = (oDragItem.getParent() as GridContainer)?.indexOfItem(oDragItem),\n\t\t\toDropItem = oEvent.getParameter(\"droppedControl\") as Control,\n\t\t\tiDropItemIndex = (oDragItem.getParent() as GridContainer).indexOfItem(oDropItem);\n\n\t\tthis.cardsContainer?.setBusy(true);\n\t\t// take the moved item from dragIndex and add to dropindex\n\t\ttry {\n\t\t\tif (!(this._controlModel.getProperty(\"/userAllCards\") as ICard[]).length) {\n\t\t\t\tconst userAllCardsModel = await this.cardHelperInstance._getUserAllCardModel();\n\t\t\t\tthis._controlModel.setProperty(\"/userAllCards\", userAllCardsModel.getProperty(\"/cards\"));\n\t\t\t\tawait this.updateCardList(sInsertPosition, iDropItemIndex, iDragItemIndex);\n\t\t\t} else {\n\t\t\t\tawait this.updateCardList(sInsertPosition, iDropItemIndex, iDragItemIndex);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tLog.error(error.message);\n\t\t\t}\n\t\t\tthis.cardsContainer?.setBusy(false);\n\t\t}\n\t}\n\n\tprivate async updateCardList(sInsertPosition: string, iDropItemIndex: number, iDragItemIndex: number) {\n\t\tconst aUserVisibleCards = this._controlModel.getProperty(\"/userVisibleCards\") as ICard[],\n\t\t\taUserAllCards = this._controlModel.getProperty(\"/userAllCards\") as ICard[],\n\t\t\tsDragedPositionRank = aUserVisibleCards[iDragItemIndex]?.rank,\n\t\t\tsDropedPositionRank = aUserVisibleCards[iDropItemIndex]?.rank;\n\t\tlet iUpdatedDragItemIndex = aUserAllCards.findIndex((oCard: ICard) => oCard.rank === sDragedPositionRank),\n\t\t\tiUpdatedDropItemIndex = aUserAllCards.findIndex((oCard: ICard) => oCard.rank === sDropedPositionRank);\n\n\t\tif (\n\t\t\t(sInsertPosition === \"Before\" && iDragItemIndex === iDropItemIndex - 1) ||\n\t\t\t(sInsertPosition === \"After\" && iDragItemIndex === iDropItemIndex + 1) ||\n\t\t\tiDragItemIndex === iDropItemIndex\n\t\t) {\n\t\t\tthis.cardsContainer?.setBusy(false);\n\t\t\treturn;\n\t\t}\n\t\tif (sInsertPosition === \"Before\" && iUpdatedDragItemIndex < iUpdatedDropItemIndex) {\n\t\t\tiUpdatedDropItemIndex--;\n\t\t} else if (sInsertPosition === \"After\" && iUpdatedDragItemIndex > iUpdatedDropItemIndex) {\n\t\t\tiUpdatedDropItemIndex++;\n\t\t}\n\t\tif (iUpdatedDragItemIndex !== iUpdatedDropItemIndex) {\n\t\t\tconst aUpdatedCards = this.cardHelperInstance.handleDndCardsRanking(\n\t\t\t\tiUpdatedDragItemIndex,\n\t\t\t\tiUpdatedDropItemIndex,\n\t\t\t\taUserAllCards\n\t\t\t);\n\t\t\tawait this.cardHelperInstance._updateMultipleCards(aUpdatedCards, \"PUT\");\n\t\t\tthis._sortCardsOnRank(aUserAllCards);\n\t\t\tthis._controlModel.setProperty(\"/userAllCards\", aUserAllCards);\n\t\t\tthis._controlModel.setProperty(\n\t\t\t\t\"/userVisibleCards\",\n\t\t\t\taUserAllCards.filter((oCard: ICard) => oCard.visibility)\n\t\t\t);\n\t\t\tawait this.rerenderCards();\n\t\t} else {\n\t\t\tthis.cardsContainer?.setBusy(false);\n\t\t}\n\t}\n\n\tprivate _sortCardsOnRank(aCards: ICard[]) {\n\t\t// Sort Cards based on it rank property where rank is a alphanumeric string\n\t\taCards.sort((a, b) => {\n\t\t\tif (a.rank && b.rank) {\n\t\t\t\tif (a.rank < b.rank) {\n\t\t\t\t\treturn -1;\n\t\t\t\t} else if (a.rank > b.rank) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 0;\n\t\t});\n\t}\n\n\tprivate _getPersonalization() {\n\t\tconst persContainerId = PersonalisationUtils.getPersContainerId(this);\n\t\tconst ownerComponent = PersonalisationUtils.getOwnerComponent(this) as Component;\n\t\treturn UShellPersonalizer.getInstance(persContainerId, ownerComponent);\n\t}\n\n\t/**\n\t * Updates the recommendation status based on the feature toggle.\n\t * @returns {Promise} A promise that resolves when the recommendation status is updated.\n\t */\n\tprivate async _updateRecommendationStatus() {\n\t\tconst bRecommendationEnabled = await this.appManagerInstance.isFeatureEnabled(FEATURE_TOGGLES.RECOMMENDATION);\n\t\tif (bRecommendationEnabled) {\n\t\t\tif (!this.oPersonalizer) {\n\t\t\t\tthis.oPersonalizer = await this._getPersonalization();\n\t\t\t}\n\t\t\tlet oPersData = await this.oPersonalizer.read();\n\t\t\tif (!oPersData) {\n\t\t\t\toPersData = {};\n\t\t\t}\n\t\t\toPersData.showRecommendation = true;\n\t\t\treturn this.oPersonalizer.write(oPersData);\n\t\t}\n\t}\n\n\t/**\n\t * Calculates the number of visible cards that can fit within the available width of the parent container.\n\t *\n\t * @private\n\t * @returns {number} - The number of visible cards.\n\t */\n\tprivate _calculateVisibleCardCount() {\n\t\tconst pageDomRef = (this.getParent() as InsightsContainer)._getLayout().getDomRef();\n\t\tconst deviceType = this.getDeviceType();\n\t\tlet count = 1;\n\n\t\tif (pageDomRef) {\n\t\t\tconst sectionDomRef = pageDomRef.childNodes[0] as Element;\n\t\t\tconst domProperties = fetchElementProperties(sectionDomRef, [\"width\", \"padding-left\", \"padding-right\"]);\n\t\t\tconst iAvailableWidth = domProperties.width - domProperties[\"padding-left\"] - domProperties[\"padding-right\"];\n\t\t\tlet cardWidth = deviceType === DeviceType.Mobile ? 17 : this._calculateCardWidth(iAvailableWidth);\n\n\t\t\t// Calculate and log the number of cards that can fit\n\t\t\tcount =\n\t\t\t\tdeviceType === DeviceType.Mobile ? this.aVisibleCardInstances.length : Math.floor(iAvailableWidth / (cardWidth * 16 + 14));\n\t\t\tthis.cardWidth = `${cardWidth}rem`;\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Calculates the optimal card width based on the given container width.\n\t *\n\t * @param {number} containerWidth - The width of the container in which the cards will be placed.\n\t * @returns {number} - The calculated card width in rem units.\n\t */\n\tprivate _calculateCardWidth(containerWidth: number): number {\n\t\tconst minWidth = 304;\n\t\tconst maxWidth = 352;\n\t\tconst margin = 14;\n\t\tlet count = 1;\n\t\tlet cardWidth = minWidth;\n\n\t\t//calculate the maximum number of cards that can fit in the container within the range of min and max width\n\t\twhile (containerWidth / count >= minWidth + margin) {\n\t\t\tcardWidth = containerWidth / count;\n\t\t\tcount += 1;\n\t\t}\n\t\tcardWidth -= margin;\n\t\tcardWidth = cardWidth > maxWidth ? maxWidth : cardWidth;\n\t\treturn cardWidth / 16;\n\t}\n\n\t/**\n\t * Adjusts the layout of the cards panel based on the current layout and device type.\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic _adjustLayout() {\n\t\tconst layout = (this.getParent() as InsightsContainer)?._getLayout();\n\t\tconst isFullScreenEnabled = this.getProperty(\"enableFullScreen\") as boolean;\n\t\tlet cardWidth = this.cardWidth;\n\n\t\tif (layout && isFullScreenEnabled) {\n\t\t\tconst isElementExpanded = layout._getCurrentExpandedElementName() === this.getProperty(\"fullScreenName\");\n\t\t\tconst cardCount = isElementExpanded ? this.aVisibleCardInstances.length : this._calculateVisibleCardCount();\n\n\t\t\t// update cards in viewport\n\t\t\tif (cardCount !== this.cardsInViewport.length) {\n\t\t\t\tthis.cardsInViewport = this.aVisibleCardInstances.slice(0, cardCount);\n\n\t\t\t\tconst sDefaultAggreName = this.cardsContainer.getMetadata().getDefaultAggregationName();\n\t\t\t\tthis.cardsContainer.removeAllAggregation(sDefaultAggreName);\n\t\t\t\tthis.cardsInViewport.forEach((card) => {\n\t\t\t\t\tconst manifest = card.getManifest() as ICardManifest;\n\t\t\t\t\tconst sType = manifest[\"sap.card\"]?.type;\n\t\t\t\t\tlet overlayHBoxWrapper!: HBox;\n\t\t\t\t\tif (sType === \"Table\" || sType === \"List\") {\n\t\t\t\t\t\tconst overlay = new HBox({\n\t\t\t\t\t\t\twidth: this.cardWidth,\n\t\t\t\t\t\t\theight: \"2rem\"\n\t\t\t\t\t\t}).addStyleClass(\"insightsCardOverflowLayer insightsCardOverflowTop\");\n\t\t\t\t\t\toverlayHBoxWrapper = new HBox({\n\t\t\t\t\t\t\theight: \"0\"\n\t\t\t\t\t\t}).addStyleClass(\"sapMFlexBoxJustifyCenter\");\n\t\t\t\t\t\toverlayHBoxWrapper.addItem(overlay);\n\t\t\t\t\t}\n\t\t\t\t\tconst cardWrapper = new VBox({\n\t\t\t\t\t\tdirection: \"Column\",\n\t\t\t\t\t\tjustifyContent: \"Center\",\n\t\t\t\t\t\titems: [card]\n\t\t\t\t\t});\n\t\t\t\t\tif (overlayHBoxWrapper) {\n\t\t\t\t\t\tcardWrapper.addItem(overlayHBoxWrapper);\n\t\t\t\t\t}\n\t\t\t\t\tconst sDefaultAggreName = this.cardsContainer.getMetadata().getDefaultAggregationName();\n\t\t\t\t\tthis.cardsContainer.addAggregation(sDefaultAggreName, cardWrapper);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// show/hide Full Screen Button if available\n\t\t\t(this.getParent() as InsightsContainer)?.toggleFullScreenElements(\n\t\t\t\tthis,\n\t\t\t\tthis.aVisibleCardInstances.length > cardCount,\n\t\t\t\tisElementExpanded\n\t\t\t);\n\t\t} else {\n\t\t\tthis.cardWidth = this.getDeviceType() === DeviceType.Mobile ? \"17rem\" : \"22rem\";\n\t\t}\n\n\t\t// update width of cards on resize\n\t\tif (cardWidth !== this.cardWidth) {\n\t\t\tthis.aVisibleCardInstances.forEach((card) => card.setWidth(this.cardWidth));\n\t\t\tthis.cardsContainerSettings?.setColumnSize(this.cardWidth);\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]}