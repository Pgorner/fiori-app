{"version":3,"file":"ToDoPanel-dbg.js","names":["sap","ui","define","Log","Card","GridContainer","GridContainerSettings","Button","GenericTile","HeaderContainer","IllustratedMessage","Text","TileContent","VBox","sap_m_library","Device","UI5Element","DateFormat","JSONModel","__BasePanel","__MenuItem","__ToDosContainer","__BatchHelper","___utils_Device","___utils_FESRUtil","_interopRequireDefault","obj","__esModule","default","_catch","body","recover","result","e","then","Priority","_finallyRethrows","finalizer","bind","URLHelper","_iteratorSymbol","Symbol","iterator","_settle","pact","state","value","s","_Pact","v","o","observer","prototype","onFulfilled","onRejected","this","callback","_this","_isSettledPact","thenable","_forTo","array","check","i","reject","_cycle","length","BasePanel","_forOf","target","step","next","done","return","_fixup","TypeError","values","push","MenuItem","ToDosContainer","BatchHelper","DeviceType","fetchElementProperties","addFESRId","TaskPriority","Constants","SITUATION_ICON","PLACEHOLDER_ITEMS_COUNT","TODO_CARDS_LIMIT","TODO_SECTION_LIMIT","TODOS_REFRESH_INTERVAL","MOBILE_DEVICE_MAX_WIDTH","DEFAULT_TITLE_HEIGHT","DEFAULT_CARD_HEIGHT","DEFAULT_TAB_HEADER_HEIGHT","calculateCardWidth","availableWidth","minWidth","maxWidth","gap","count","cardWidth","Math","min","ToDoPanel","extend","metadata","library","properties","baseUrl","type","group","defaultValue","visibility","countUrl","dataUrl","targetAppUrl","constructor","_constructor","id","settings","BasePanel.prototype.constructor.call","init","_init","BasePanel.prototype.init.call","_oData","isLoaded","hasError","getSupported","isExpandedOnce","isCountCalledOnce","illustrationType","refreshInfo","_toRelativeDateTime","Date","horizontalCardCount","illustrationTitle","_i18nBundle","getText","illustrationDescription","isPhone","resize","width","system","phone","tiles","Array","fill","status","displayTiles","_controlModel","requests","_toDoWrapper","getId","renderType","items","_generateCardContainer","_generateMobileCardContainer","_generateErrorMessage","setModel","_addContent","menuItem","title","icon","press","_onPressRefresh","addAggregation","_refreshBtn","text","setProperty","attachEvent","Promise","resolve","_beforePanelExpand","_cardContainer","inlineBlockLayout","snapToRow","visible","layout","columns","columnSize","addStyleClass","_mobileCardContainer","scrollStep","gridLayout","scrollTime","showDividers","_errorCard","_errorMessage","illustrationSize","description","content","getParent","_getSelectedPanel","_loadCards","forceRefresh","_this2","_loadToDos","undefined","_bindInnerControls","selectedKey","getProperty","_isElementExpanded","_setCount","_getSupported","setTimeout","_generatePlaceHolderTiles","_generateRequestObject","onlyCount","concat","_submitBatch","_setSectionRefreshInterval","lastRefreshedTime","_updateRefreshInformation","_switchTabIfRequired","_updateHeaderIfExclusive","catch","error","Error","message","finally","refresh","_adjustLayout","_handleError","getTargetAppUrl","removeContent","_isExclusivePanel","_setTitle","String","_innerControlsBound","bindAggregation","path","factory","context","generateCardTemplate","bindProperty","_generateCardTemplate","mode","frameType","pressEnabled","header","tileContent","priority","priorityText","_toPriorityText","footer","_toPriority","VERY_HIGH","VeryHigh","None","HIGH","High","MEDIUM","Medium","LOW","Low","key","_cardCount","_getVisibleCardCount","isPlaceholder","calculationProperties","_getLayout","isElementExpanded","targetDomRef","getDomRef","containerDomRef","_getFullScreenContainer","childNodes","isMobileDevice","cardCount","getHorizontalCardCount","getVerticalCardCount","toDosContainer","_getCurrentExpandedElementName","_getHorizontalCardCount","domRef","domProperties","Object","slice","reduce","propertyValue","max","floor","_getVerticalCardCount","titleHeight","calculateTitleHeight","availableHeight","height","margin","cardHeight","verticalCardCount","_calculateTitleHeight","container","containerHeaderRef","getElementById","iconTabBarHeaderRef","_getInnerControl","defaultHeight","clientHeight","options","_this3","urls","generateRequestUrls","splice","baseURL","getBaseUrl","requestURLs","success","args","onDataReceived","Number","_handleEmptyCards","_generateRequestUrls","queryString","getDataUrl","includes","getCountUrl","_onDataReceived","results","arguments","_this4","getNoDataText","allPanels","getContent","supportedPanels","filter","panel","clearInterval","refreshFn","setInterval","_updateContainerHeader","displayCards","getDeviceType","Mobile","toggleFullScreenElements","date","inputDate","isNaN","relativeDateFormatter","format","_getNoDataText","_parseResponse","response","d","numericD","numericResponse","_this5","all","map","request","createMultipartRequest","responses","processedResponses","JSON","parse","_temp","_wasThrown","_result","_clearRequests","_isLoaded","_setLoaded","_setSupported","isSupported","_getAppIntent","pattern","match","semanticObject","action","params","paramsArray","split","param","_this6","_interrupt","_temp5","_temp3","nextAvailablePanel","panels","getAggregation","_temp4","_temp2","_getCardCount","_onPressViewAll","redirect","_this7","_temp6","getDateTimeInstance","style","relative","relativeStyle"],"sources":["ToDoPanel.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Log from \"sap/base/Log\";\nimport Card from \"sap/f/Card\";\nimport GridContainer from \"sap/f/GridContainer\";\nimport GridContainerSettings from \"sap/f/GridContainerSettings\";\nimport Button from \"sap/m/Button\";\nimport GenericTile from \"sap/m/GenericTile\";\nimport HeaderContainer from \"sap/m/HeaderContainer\";\nimport IllustratedMessage from \"sap/m/IllustratedMessage\";\nimport Text from \"sap/m/Text\";\nimport TileContent from \"sap/m/TileContent\";\nimport VBox from \"sap/m/VBox\";\nimport { LoadState, Priority, URLHelper } from \"sap/m/library\";\nimport Device from \"sap/ui/Device\";\nimport Control from \"sap/ui/core/Control\";\nimport type { MetadataOptions } from \"sap/ui/core/Element\";\nimport UI5Element from \"sap/ui/core/Element\";\nimport DateFormat from \"sap/ui/core/format/DateFormat\";\nimport Context from \"sap/ui/model/Context\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport BasePanel from \"./BasePanel\";\nimport MenuItem from \"./MenuItem\";\nimport { $ToDoPanelSettings } from \"./ToDoPanel\";\nimport ToDosContainer from \"./ToDosContainer\";\nimport BatchHelper from \"./utils/BatchHelper\";\nimport { DeviceType, fetchElementProperties } from \"./utils/Device\";\nimport { addFESRId } from \"./utils/FESRUtil\";\n\nexport interface IToDoPanel {\n\tgenerateCardTemplate(id: string, context: Context): Control;\n\tgenerateRequestUrls?(cardCount: number): string[];\n\tonDataReceived?(data: unknown[], options?: RequestOptions): Promise<void>;\n\tgetNoDataText?(): string;\n}\n\ninterface Request {\n\tbaseURL: string;\n\trequestURLs: string[];\n\tsuccess(args: unknown[]): Promise<void>;\n}\n\nexport interface CalculationProperties {\n\tisPlaceholder?: boolean;\n}\n\nexport interface Intent {\n\ttarget: {\n\t\tsemanticObject: string;\n\t\taction: string;\n\t};\n\tparams: {\n\t\t[key: string]: string;\n\t};\n}\n\nexport interface RequestOptions {\n\ttype: string;\n\tonlyCount?: boolean;\n}\n\nexport interface Response {\n\td?: {\n\t\tresults?: unknown[];\n\t};\n\tresults?: unknown[];\n\tvalue?: unknown[];\n}\n\nexport enum TaskPriority {\n\tVERY_HIGH = \"VERY_HIGH\",\n\tHIGH = \"HIGH\",\n\tMEDIUM = \"MEDIUM\",\n\tLOW = \"LOW\"\n}\n\nconst Constants = {\n\tSITUATION_ICON: \"sap-icon://message-warning\",\n\tPLACEHOLDER_ITEMS_COUNT: 5,\n\tTODO_CARDS_LIMIT: 100,\n\tTODO_SECTION_LIMIT: 6,\n\tTODOS_REFRESH_INTERVAL: 65000,\n\tMOBILE_DEVICE_MAX_WIDTH: 600,\n\tDEFAULT_TITLE_HEIGHT: 33,\n\tDEFAULT_CARD_HEIGHT: 168,\n\tDEFAULT_TAB_HEADER_HEIGHT: 44\n};\n\n/**\n * Calculates the card width based on the available width and certain constraints.\n *\n * @param {number} availableWidth - The available width for card rendering.\n * @returns {number} The calculated card width within specified constraints.\n */\nfunction calculateCardWidth(availableWidth: number): number {\n\tconst minWidth = 320;\n\tconst maxWidth = 400;\n\tconst gap = 14.5;\n\tlet count = 1;\n\tlet cardWidth = minWidth;\n\n\twhile (availableWidth / count >= minWidth + gap) {\n\t\tcardWidth = availableWidth / count;\n\t\tcount += 1;\n\t}\n\n\treturn Math.min(cardWidth - gap, maxWidth);\n}\n\n/**\n *\n * Abstract Panel class for managing and storing To-Do cards.\n *\n * @extends BasePanel\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @abstract\n * @internal\n * @experimental Since 1.121\n * @public\n *\n * @alias sap.cux.home.ToDoPanel\n */\nexport default abstract class ToDoPanel extends BasePanel implements IToDoPanel {\n\tprotected _oData!: Record<string, unknown>;\n\tprotected requests!: Request[];\n\tprivate _controlModel!: JSONModel;\n\tprivate _toDoWrapper!: VBox;\n\tprivate _cardContainer!: GridContainer;\n\tprivate _mobileCardContainer!: HeaderContainer;\n\tprivate _errorCard!: Card;\n\tprivate _errorMessage!: IllustratedMessage;\n\tprivate _refreshBtn!: Button;\n\tprivate _loadToDos!: Promise<void> | undefined;\n\tprivate _innerControlsBound!: boolean;\n\tprivate _cardCount!: number;\n\n\tconstructor(id?: string | $ToDoPanelSettings);\n\tconstructor(id?: string, settings?: $ToDoPanelSettings);\n\t/**\n\t * Constructor for a new To-Dos Panel.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $ToDoPanelSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tproperties: {\n\t\t\t/**\n\t\t\t * Specifies the base URL for batching requests sent from the panel.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\tbaseUrl: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"public\" },\n\t\t\t/**\n\t\t\t * Specifies the URL for fetching the count of requested to-do cards.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\tcountUrl: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"public\" },\n\t\t\t/**\n\t\t\t * Specifies the URL from where the to-do cards should be fetched.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\tdataUrl: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"public\" },\n\t\t\t/**\n\t\t\t * Specifies the URL of the target application associated with the to-do cards.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\ttargetAppUrl: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"public\" }\n\t\t}\n\t};\n\n\tstatic relativeDateFormatter = DateFormat.getDateTimeInstance({\n\t\tstyle: \"medium\",\n\t\trelative: true,\n\t\trelativeStyle: \"short\"\n\t});\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tsuper.init();\n\n\t\t//Initialise ToDos Model\n\t\tthis._oData = {\n\t\t\tlength: 0,\n\t\t\tisLoaded: false,\n\t\t\thasError: false,\n\t\t\tcardWidth: \"20rem\",\n\t\t\tgetSupported: false,\n\t\t\tisExpandedOnce: false,\n\t\t\tisCountCalledOnce: false,\n\t\t\tillustrationType: \"sapIllus-NoTasks\",\n\t\t\trefreshInfo: this._toRelativeDateTime(new Date()),\n\t\t\thorizontalCardCount: Constants.PLACEHOLDER_ITEMS_COUNT,\n\t\t\tillustrationTitle: this._i18nBundle.getText(\"noToDoTitle\"),\n\t\t\tillustrationDescription: this._i18nBundle.getText(\"noToDoDesc\"),\n\t\t\tisPhone: Device.resize.width < Constants.MOBILE_DEVICE_MAX_WIDTH || Device.system.phone,\n\t\t\ttiles: new Array(Constants.PLACEHOLDER_ITEMS_COUNT).fill({ status: \"Loading\" }),\n\t\t\tdisplayTiles: new Array(Constants.PLACEHOLDER_ITEMS_COUNT).fill({ status: \"Loading\" })\n\t\t};\n\t\tthis._controlModel = new JSONModel(this._oData);\n\n\t\t//Initialize Request Queue\n\t\tthis.requests = [];\n\n\t\t//Add Wrapper Container to Panel\n\t\tthis._toDoWrapper = new VBox(`${this.getId()}-toDosWrapper`, {\n\t\t\trenderType: \"Bare\",\n\t\t\titems: [this._generateCardContainer(), this._generateMobileCardContainer(), this._generateErrorMessage()]\n\t\t});\n\t\tthis._toDoWrapper.setModel(this._controlModel);\n\t\tthis._addContent(this._toDoWrapper);\n\n\t\t//Setup Common Menu Items\n\t\tconst menuItem = new MenuItem(`${this.getId()}-refresh`, {\n\t\t\ttitle: this._i18nBundle.getText(\"refresh\"),\n\t\t\ticon: \"sap-icon://refresh\",\n\t\t\tpress: () => this._onPressRefresh()\n\t\t});\n\t\tthis.addAggregation(\"menuItems\", menuItem);\n\t\taddFESRId(menuItem, \"todosRefresh\");\n\n\t\t//Setup Common Action Buttons\n\t\tthis._refreshBtn = new Button(`${this.getId()}-refreshBtn`, {\n\t\t\ticon: \"sap-icon://refresh\",\n\t\t\ttext: this._toRelativeDateTime(new Date()),\n\t\t\tpress: () => this._onPressRefresh()\n\t\t});\n\t\taddFESRId(this._refreshBtn, \"manualTodoRefresh\");\n\t\tthis.addAggregation(\"actionButtons\", this._refreshBtn);\n\n\t\t//Configure Full Screen and Expand Event handlers\n\t\tthis.setProperty(\"enableFullScreen\", true);\n\t\tthis.attachEvent(\"onExpand\", async () => {\n\t\t\tawait this._beforePanelExpand();\n\t\t});\n\t}\n\n\t/**\n\t * Generates the card container (GridContainer) for displaying cards.\n\t *\n\t * @private\n\t * @returns {GridContainer} The generated card container.\n\t */\n\tprivate _generateCardContainer(): GridContainer {\n\t\t//create container\n\t\tif (!this._cardContainer) {\n\t\t\tthis._cardContainer = new GridContainer(`${this.getId()}-flexContainer`, {\n\t\t\t\tinlineBlockLayout: true,\n\t\t\t\tsnapToRow: true,\n\t\t\t\tvisible: \"{= !${/isPhone} && !${/hasError} && (!${/isLoaded} || ${/length} > 0) }\",\n\t\t\t\tlayout: new GridContainerSettings(`${this.getId()}-layout`, {\n\t\t\t\t\tcolumns: \"{/horizontalCardCount}\",\n\t\t\t\t\tcolumnSize: \"{/cardWidth}\",\n\t\t\t\t\tgap: \"1rem\"\n\t\t\t\t})\n\t\t\t}).addStyleClass(\"sapCuxToDoCardsContainer\");\n\t\t}\n\n\t\treturn this._cardContainer;\n\t}\n\n\t/**\n\t * Generates the mobile card container (HeaderContainer) for displaying cards on mobile devices.\n\t *\n\t * @private\n\t * @returns {HeaderContainer} The generated mobile card container.\n\t */\n\tprivate _generateMobileCardContainer(): HeaderContainer {\n\t\t// Create a HeaderContainer for mobile devices\n\t\tif (!this._mobileCardContainer) {\n\t\t\tthis._mobileCardContainer = new HeaderContainer(`${this.getId()}-headerContainer`, {\n\t\t\t\tvisible: \"{/isPhone}\",\n\t\t\t\tscrollStep: 0,\n\t\t\t\tgridLayout: true,\n\t\t\t\tscrollTime: 1000,\n\t\t\t\tshowDividers: false\n\t\t\t});\n\n\t\t\tthis._mobileCardContainer.addStyleClass(\"sapMHeaderContainerAlign sapMHeaderContainerToDoAlign toDoCardHeight\");\n\t\t}\n\n\t\treturn this._mobileCardContainer;\n\t}\n\n\t/**\n\t * Generates the error message card for displaying error messages.\n\t *\n\t * @private\n\t * @returns {Card} The generated error message card.\n\t */\n\tprivate _generateErrorMessage(): Card {\n\t\tif (!this._errorCard) {\n\t\t\tthis._errorMessage = new IllustratedMessage(`${this.getId()}-errorMessage`, {\n\t\t\t\tillustrationSize: \"Base\",\n\t\t\t\ttitle: \"{/illustrationTitle}\",\n\t\t\t\tdescription: \"{/illustrationDescription}\",\n\t\t\t\tillustrationType: \"{/illustrationType}\"\n\t\t\t});\n\t\t\tthis._errorCard = new Card(`${this.getId()}-errorCard`, {\n\t\t\t\tcontent: this._errorMessage,\n\t\t\t\tvisible: \"{= ${/tiles/length} === 0 || ${/hasError} === true }\"\n\t\t\t});\n\t\t}\n\n\t\treturn this._errorCard;\n\t}\n\n\t/**\n\t * Handler for the Refresh button for each panel.\n\t * Reloads the selected panel\n\t *\n\t * @async\n\t * @private\n\t */\n\tprivate _onPressRefresh(): void {\n\t\tvoid ((this.getParent() as ToDosContainer)?._getSelectedPanel() as ToDoPanel)?._loadCards(true);\n\t}\n\n\t/**\n\t * Loads the To-Do cards for the panel.\n\t *\n\t * @private\n\t * @param {boolean} forceRefresh - force refresh cards\n\t * @returns {Promise<void>} A promise that resolves when the cards are loaded.\n\t */\n\tpublic async _loadCards(forceRefresh?: boolean): Promise<void> {\n\t\tif (this._loadToDos !== undefined && !forceRefresh) {\n\t\t\treturn this._loadToDos;\n\t\t} else {\n\t\t\tthis._bindInnerControls();\n\t\t\tthis._loadToDos = new Promise((resolve) => {\n\t\t\t\tconst selectedKey = this.getParent()?.getProperty(\"selectedKey\") as string;\n\t\t\t\tconst requests: Request[] = [];\n\n\t\t\t\tthis._oData.isLoaded = false;\n\t\t\t\tthis._oData.isCountCalledOnce = false;\n\t\t\t\tthis._oData.isExpandedOnce = this._isElementExpanded();\n\t\t\t\tthis._setCount();\n\n\t\t\t\tif (this._getSupported()) {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t// Load Placeholder Cards\n\t\t\t\t\t\tthis._generatePlaceHolderTiles();\n\n\t\t\t\t\t\t// Add Initial Batch Requests\n\t\t\t\t\t\trequests.push(\n\t\t\t\t\t\t\tthis._generateRequestObject({ type: selectedKey, onlyCount: selectedKey !== this.getProperty(\"key\") })\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.requests = this.requests.concat(requests);\n\n\t\t\t\t\t\t//Submit Batch Requests\n\t\t\t\t\t\tthis._submitBatch()\n\t\t\t\t\t\t\t.then(async () => {\n\t\t\t\t\t\t\t\tthis._oData.isLoaded = selectedKey === this.getProperty(\"key\");\n\t\t\t\t\t\t\t\tthis._oData.isCountCalledOnce = true;\n\t\t\t\t\t\t\t\tthis._setCount(this._oData.length as string);\n\t\t\t\t\t\t\t\tthis._setSectionRefreshInterval();\n\t\t\t\t\t\t\t\tthis._oData.refreshInfo = this._toRelativeDateTime(new Date());\n\t\t\t\t\t\t\t\tthis._oData.lastRefreshedTime = new Date();\n\t\t\t\t\t\t\t\tthis._updateRefreshInformation();\n\t\t\t\t\t\t\t\tawait this._switchTabIfRequired();\n\t\t\t\t\t\t\t\tthis._updateHeaderIfExclusive();\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch((error: unknown) => {\n\t\t\t\t\t\t\t\tLog.error(error instanceof Error ? error.message : \"\");\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.finally(() => {\n\t\t\t\t\t\t\t\tthis._controlModel.refresh();\n\t\t\t\t\t\t\t\tthis._adjustLayout();\n\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis._handleError(`User not authorized to access: + ${this.getTargetAppUrl()}`);\n\n\t\t\t\t\t// Remove Item from IconTabBar\n\t\t\t\t\t(this.getParent() as ToDosContainer)?.removeContent(this);\n\n\t\t\t\t\t//resolve the promise\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn this._loadToDos;\n\t}\n\n\t/**\n\t * Update Container Header if the panel is exclusive\n\t *\n\t * @private\n\t */\n\tprivate _updateHeaderIfExclusive() {\n\t\tif (this._isExclusivePanel()) {\n\t\t\t(this.getParent() as ToDosContainer)._setTitle(`${this._i18nBundle.getText(\"toDosTitle\")} (${String(this._oData.length)})`);\n\t\t}\n\t}\n\n\t/**\n\t * Creates a one-time binding of inner controls for the ToDoPanel.\n\t * @private\n\t */\n\tprivate _bindInnerControls(): void {\n\t\tif (!this._innerControlsBound) {\n\t\t\t//bind card container\n\t\t\tthis._cardContainer.bindAggregation(\"items\", {\n\t\t\t\tpath: \"/displayTiles\",\n\t\t\t\tlength: Constants.TODO_CARDS_LIMIT,\n\t\t\t\tfactory: (id, context) => this.generateCardTemplate(id, context)?.bindProperty?.(\"width\", { path: \"/cardWidth\" })\n\t\t\t});\n\n\t\t\t//bind mobile card container\n\t\t\tthis._mobileCardContainer.bindAggregation(\"content\", {\n\t\t\t\tpath: \"/displayTiles\",\n\t\t\t\tlength: Constants.TODO_CARDS_LIMIT,\n\t\t\t\tfactory: this.generateCardTemplate.bind(this)\n\t\t\t});\n\n\t\t\tthis._innerControlsBound = true;\n\t\t}\n\t}\n\n\t/**\n\t * Generate a default card template for the Current Panel.\n\t * An extended panel can have it's own template by overridding\n\t * this method and providing a custom card template.\n\t *\n\t * @public\n\t * @param {string} id The ID for the template.\n\t * @param {object} context The context for the template.\n\t * @returns {object} The generated card template.\n\t */\n\tpublic generateCardTemplate(id: string, context: Context): Control {\n\t\treturn new GenericTile(`${id}-tile`, {\n\t\t\tmode: \"ActionMode\",\n\t\t\tframeType: \"TwoByOne\",\n\t\t\tpressEnabled: true,\n\t\t\theader: context.getProperty(\"title\") as string,\n\t\t\twidth: context.getProperty(\"/cardWidth\") as string,\n\t\t\tstate: context.getProperty(\"status\") as LoadState,\n\t\t\ttileContent: [\n\t\t\t\tnew TileContent(`${id}-tileContent`, {\n\t\t\t\t\tpriority: context.getProperty(\"priority\") as Priority,\n\t\t\t\t\tpriorityText: this._toPriorityText(context.getProperty(\"priority\") as Priority),\n\t\t\t\t\tfooter: context.getProperty(\"footerText\") as string,\n\t\t\t\t\tcontent: new Text(`${id}-situationContent`, {\n\t\t\t\t\t\ttext: context.getProperty(\"message\") as string\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t]\n\t\t});\n\t}\n\n\t/**\n\t * Convert a priority string to a corresponding priority value.\n\t *\n\t * @private\n\t * @param {TaskPriority} priority - The task priority string.\n\t * @returns {string} The corresponding priority value.\n\t */\n\tpublic _toPriority(priority: TaskPriority): Priority {\n\t\tif (priority === TaskPriority.VERY_HIGH) {\n\t\t\treturn Priority.VeryHigh ? Priority.VeryHigh : Priority.None;\n\t\t} else if (priority === TaskPriority.HIGH) {\n\t\t\treturn Priority.High;\n\t\t} else if (priority === TaskPriority.MEDIUM) {\n\t\t\treturn Priority.Medium;\n\t\t} else if (priority === TaskPriority.LOW) {\n\t\t\treturn Priority.Low;\n\t\t} else {\n\t\t\treturn Priority.None;\n\t\t}\n\t}\n\n\t/**\n\t * Convert a priority string to a corresponding priority text.\n\t *\n\t * @private\n\t * @param {Priority} priority - The priority string.\n\t * @returns {string} The corresponding priority text.\n\t */\n\tpublic _toPriorityText(priority: Priority): string {\n\t\tlet key;\n\t\tif (priority === Priority.VeryHigh) {\n\t\t\tkey = \"veryHighPriority\";\n\t\t} else if (priority === Priority.High) {\n\t\t\tkey = \"highPriority\";\n\t\t} else if (priority === Priority.Medium) {\n\t\t\tkey = \"mediumPriority\";\n\t\t} else if (priority === Priority.Low) {\n\t\t\tkey = \"lowPriority\";\n\t\t} else {\n\t\t\tkey = \"nonePriority\";\n\t\t}\n\n\t\treturn this._i18nBundle.getText(key) as string;\n\t}\n\n\t/**\n\t * Generates placeholder tiles for the panel.\n\t *\n\t * @private\n\t */\n\tprivate _generatePlaceHolderTiles(): void {\n\t\tthis._cardCount = this._getVisibleCardCount({ isPlaceholder: true });\n\t\tthis._oData.displayTiles = this._oData.tiles = new Array(this._cardCount).fill({ status: \"Loading\" });\n\t\tthis._oData.isLoaded = this._oData.hasError = false;\n\t\tthis._controlModel.refresh();\n\t}\n\n\t/**\n\t * Calculates the number of visible cards that can fit within the available space of the To-Dos panel.\n\t *\n\t * @private\n\t * @param {CalculationProperties} [calculationProperties] - Optional properties to assist in the calculation.\n\t * @returns {number} - The number of visible cards.\n\t */\n\tprivate _getVisibleCardCount(calculationProperties?: CalculationProperties): number {\n\t\tconst layout = (this.getParent() as ToDosContainer)?._getLayout();\n\t\tlet isElementExpanded = false;\n\t\tlet targetDomRef = this._toDoWrapper?.getDomRef();\n\n\t\tif (layout) {\n\t\t\tisElementExpanded = this._isElementExpanded();\n\t\t\tconst containerDomRef = (isElementExpanded ? layout._getFullScreenContainer() : layout).getDomRef();\n\t\t\ttargetDomRef = containerDomRef?.childNodes[0] as Element;\n\t\t}\n\n\t\tconst isMobileDevice = this._controlModel.getProperty(\"/isPhone\") as boolean;\n\t\tlet cardCount = isMobileDevice ? Constants.TODO_SECTION_LIMIT : 1;\n\n\t\tif (targetDomRef && !isMobileDevice) {\n\t\t\t// @ts-expect-error Calculate Horizontal Card Count\n\t\t\tcardCount = this.getHorizontalCardCount(targetDomRef, calculationProperties);\n\n\t\t\tif (isElementExpanded) {\n\t\t\t\t// @ts-expect-error Calculate Vertical Card Count\n\t\t\t\tcardCount *= this.getVerticalCardCount(targetDomRef, calculationProperties);\n\t\t\t}\n\n\t\t\t//Restrict cards to the maximum limit\n\t\t\tcardCount = cardCount > Constants.TODO_CARDS_LIMIT ? Constants.TODO_CARDS_LIMIT : cardCount;\n\t\t}\n\n\t\treturn cardCount;\n\t}\n\n\t/**\n\t * Checks if the current element is expanded to full screen.\n\t *\n\t * @private\n\t * @returns {boolean} - True if the element is expanded, otherwise false.\n\t */\n\tprivate _isElementExpanded(): boolean {\n\t\tconst toDosContainer = this.getParent() as ToDosContainer;\n\t\tconst layout = toDosContainer._getLayout();\n\t\treturn layout?._getCurrentExpandedElementName() === toDosContainer.getProperty(\"fullScreenName\");\n\t}\n\n\t/**\n\t * Calculates the number of horizontal cards that can fit within the available width of the given DOM element.\n\t *\n\t * @private\n\t * @param {Element} domRef - The DOM element to calculate the horizontal card count for.\n\t * @returns {number} - The number of horizontal cards that can fit within the available width.\n\t */\n\tprotected getHorizontalCardCount(domRef: Element): number {\n\t\tconst domProperties = fetchElementProperties(domRef, [\"width\", \"padding-left\", \"padding-right\", \"margin-left\", \"margin-right\"]);\n\t\tconst availableWidth = Object.values(domProperties)\n\t\t\t.slice(1)\n\t\t\t.reduce((width, propertyValue) => width - propertyValue, domProperties[\"width\"]);\n\t\tconst cardWidth = calculateCardWidth(availableWidth);\n\n\t\t// Calculate Horizontal Card Count\n\t\tlet horizontalCardCount = Math.max(Math.floor(availableWidth / cardWidth), 1);\n\t\tthis._controlModel.setProperty(\"/cardWidth\", `${cardWidth / 16}rem`);\n\t\tthis._controlModel.setProperty(\"/horizontalCardCount\", horizontalCardCount);\n\n\t\treturn horizontalCardCount;\n\t}\n\n\t/**\n\t * Calculates the number of vertical cards that can fit within the available height of the given DOM element.\n\t *\n\t * @private\n\t * @param {Element} domRef - The DOM element to calculate the vertical card count for.\n\t * @returns {number} - The number of vertical cards that can fit within the available height.\n\t */\n\tprotected getVerticalCardCount(domRef: Element): number {\n\t\tconst domProperties = fetchElementProperties(domRef, [\"height\", \"padding-top\"]);\n\t\tconst titleHeight = this.calculateTitleHeight();\n\t\tconst availableHeight = domProperties.height - domProperties[\"padding-top\"] * 2 - titleHeight;\n\t\tconst margin = 14;\n\t\tconst cardHeight = Constants.DEFAULT_CARD_HEIGHT + margin;\n\t\tconst verticalCardCount = Math.max(Math.floor(availableHeight / cardHeight), 2); //minimum of 2 rows should be displayed\n\n\t\treturn verticalCardCount;\n\t}\n\n\t/**\n\t * Calculates the combined height of the title and tab header for the To-Dos panel.\n\t *\n\t * @private\n\t * @returns {number} - The combined height of the title and tab header.\n\t */\n\tprotected calculateTitleHeight(): number {\n\t\tconst container = this.getParent() as ToDosContainer;\n\t\tconst containerHeaderRef = UI5Element.getElementById(`${container.getId()}-header`)?.getDomRef();\n\t\tconst iconTabBarHeaderRef = UI5Element.getElementById(`${container._getInnerControl().getId()}--header`)?.getDomRef();\n\t\tconst defaultHeight = Constants.DEFAULT_TITLE_HEIGHT + Constants.DEFAULT_TAB_HEADER_HEIGHT;\n\t\tlet titleHeight = 0;\n\n\t\tif (containerHeaderRef && iconTabBarHeaderRef) {\n\t\t\ttitleHeight = containerHeaderRef.clientHeight + iconTabBarHeaderRef.clientHeight;\n\t\t}\n\n\t\treturn Math.max(titleHeight, defaultHeight);\n\t}\n\n\t/**\n\t * Generates a request object for batch requests.\n\t *\n\t * @private\n\t * @param {RequestOptions} options - Additional properties for generating the request object.\n\t * @param {boolean} [options.onlyCount] - Whether to include only the count in the request.\n\t * @returns {Object} The generated request object.\n\t */\n\tprivate _generateRequestObject(options: RequestOptions): Request {\n\t\tconst cardCount = this._getVisibleCardCount();\n\t\tconst urls = this.generateRequestUrls?.(cardCount);\n\n\t\tif (options?.onlyCount) {\n\t\t\turls.splice(1);\n\t\t}\n\n\t\treturn {\n\t\t\tbaseURL: this.getBaseUrl(),\n\t\t\trequestURLs: urls,\n\t\t\tsuccess: async (args: unknown[]): Promise<void> => {\n\t\t\t\t//data process extension for panels\n\t\t\t\tawait this.onDataReceived(args.splice(1), options);\n\n\t\t\t\t//set card count and handle empty cards\n\t\t\t\tthis._oData.length = Number(args[0]);\n\t\t\t\tthis._handleEmptyCards();\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Generates request URLs for fetching data based on the specified card count.\n\t *\n\t * @private\n\t * @param {number} cardCount - The number of cards to retrieve.\n\t * @returns {string[]} An array of request URLs.\n\t */\n\tpublic generateRequestUrls(cardCount: number): string[] {\n\t\tconst queryString = `$skip=0&$top=${cardCount}`;\n\t\tlet dataUrl = this.getDataUrl();\n\t\tdataUrl = dataUrl.includes(\"?\") ? `${dataUrl}&${queryString}` : `${dataUrl}?${queryString}`;\n\n\t\treturn [this.getCountUrl(), dataUrl];\n\t}\n\n\t/**\n\t * Hook for processing data fetched from a batch call.\n\t * This method can be overridden to perform additional data processing operations.\n\t *\n\t * @private\n\t * @async\n\t * @param {unknown[]} results - Data retrieved from the batch call.\n\t * @param {RequestOptions} options - Additional options for parsing the data.\n\t * Structure may vary based on the backend service.\n\t */\n\tpublic async onDataReceived(results: unknown[] = [], options?: RequestOptions): Promise<void> {\n\t\tif (!options || (options && !options.onlyCount)) {\n\t\t\tthis._oData.displayTiles = this._oData.tiles = results[0] || [];\n\t\t}\n\n\t\tawait Promise.resolve();\n\t}\n\n\t/**\n\t * Handles the scenario when there are no cards to display.\n\t * Updates the illustration and description based on the selected panel and card count.\n\t *\n\t * @private\n\t */\n\tprivate _handleEmptyCards() {\n\t\tif (Number(this._oData.length) === 0) {\n\t\t\tthis._oData.illustrationType = \"sapIllus-EmptyPlanningCalendar\";\n\t\t\tthis._oData.illustrationTitle = this._isExclusivePanel()\n\t\t\t\t? this._i18nBundle.getText(\"noToDoTitle\")\n\t\t\t\t: this._i18nBundle.getText(this.getNoDataText());\n\t\t\tthis._oData.illustrationDescription = this._isExclusivePanel()\n\t\t\t\t? this._i18nBundle.getText(\"noToDoDesc\")\n\t\t\t\t: this._i18nBundle.getText(\"emptyToDoDesc\");\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the panel is exclusive based on support and the number of panels.\n\t *\n\t * @private\n\t * @returns {boolean} True if the panel is exclusive, otherwise false.\n\t */\n\tprivate _isExclusivePanel(): boolean {\n\t\tconst allPanels = (this.getParent() as ToDosContainer).getContent() as ToDoPanel[];\n\t\tconst supportedPanels = allPanels.filter((panel) => panel._getSupported());\n\n\t\treturn supportedPanels.length === 1 || (allPanels.length === 1 && this._getSupported());\n\t}\n\n\t/**\n\t * Sets the interval for refreshing the section.\n\t *\n\t * @private\n\t */\n\tprivate _setSectionRefreshInterval(): void {\n\t\tclearInterval(this._oData.refreshFn as number);\n\t\tthis._oData.refreshFn = setInterval(() => {\n\t\t\tthis._oData.lastRefreshedTime = this._oData.lastRefreshedTime || new Date();\n\t\t\tthis._oData.refreshInfo = this._toRelativeDateTime(this._oData.lastRefreshedTime as Date);\n\t\t\tthis._updateRefreshInformation();\n\t\t}, Constants.TODOS_REFRESH_INTERVAL);\n\t}\n\n\t/**\n\t * Updates the refresh information and adjusts the layout.\n\t *\n\t * @private\n\t */\n\tpublic _updateRefreshInformation(): void {\n\t\tconst container = this.getParent() as ToDosContainer;\n\t\tif (container.getProperty(\"selectedKey\") === this.getProperty(\"key\")) {\n\t\t\tthis._refreshBtn.setProperty(\"text\", this._oData.refreshInfo, true);\n\t\t\tcontainer._updateContainerHeader(this);\n\t\t}\n\n\t\tthis._adjustLayout();\n\t}\n\n\t/**\n\t * Adjusts the layout based on card count and device type.\n\t *\n\t * @private\n\t */\n\tpublic _adjustLayout() {\n\t\t// Update visible cards\n\t\tconst cardCount = this._getVisibleCardCount();\n\t\tif ((this._oData.tiles as object[]).length && !this._oData.hasError) {\n\t\t\tconst displayCards = (this._oData.tiles as object[]).slice(0, cardCount);\n\t\t\tthis._controlModel.setProperty(\"/displayTiles\", displayCards);\n\t\t}\n\n\t\t// Update if device type is phone\n\t\tthis._controlModel.setProperty(\"/isPhone\", this.getDeviceType() === DeviceType.Mobile);\n\n\t\t// Show/Hide Full Screen Button if available\n\t\t(this.getParent() as ToDosContainer)?.toggleFullScreenElements(\n\t\t\tthis,\n\t\t\tNumber(this._oData.length) > cardCount,\n\t\t\tthis._isElementExpanded()\n\t\t);\n\t}\n\n\t/**\n\t * Formats the given date to a relative date.\n\t *\n\t * @private\n\t * @param {Date} date Date object or Date String\n\t * @returns {string} Formatted Date\n\t */\n\tpublic _toRelativeDateTime(date: Date): string {\n\t\tconst inputDate = new Date(date);\n\t\treturn isNaN(Number(inputDate)) ? \"\" : ToDoPanel.relativeDateFormatter.format(inputDate);\n\t}\n\n\t/**\n\t * Get the text for the \"No Data\" message.\n\t *\n\t * @private\n\t * @returns {string} The text for the \"No Data\" message.\n\t */\n\tpublic getNoDataText(): string {\n\t\treturn this._i18nBundle.getText(\"noData\") as string;\n\t}\n\n\t/**\n\t * Parses the response object and returns the appropriate value.\n\t *\n\t * @private\n\t * @param {Object} response - The response object.\n\t * @param {Object} [response.d] - The 'd' property of the response object.\n\t * @param {Array} [response.d.results] - The results array.\n\t * @param {string|number} [response.d] - The 'd' property of the response object which may contain a numeric value.\n\t * @param {string|number} [response] - The response object which may contain a numeric value.\n\t * @param {string|number} [response.value] - The 'value' property of the response object which may contain a numeric value.\n\t * @returns {Response} - The parsed value extracted from the response object.\n\t */\n\tprivate _parseResponse(response: Response): Response {\n\t\tconst { d = {}, value } = response || {};\n\t\tconst results = d?.results;\n\t\tconst numericD = !isNaN(+d) && +d;\n\t\tconst numericResponse = !isNaN(+response) && +response;\n\n\t\treturn (results || numericD || numericResponse || value || 0) as Response;\n\t}\n\n\t/**\n\t * Submits a batch request for multiple URLs and processes the responses.\n\t *\n\t * @private\n\t * @returns {Promise} A Promise that resolves when all batch requests are completed.\n\t */\n\tprotected _submitBatch(): Promise<unknown[]> {\n\t\treturn Promise.all(\n\t\t\tthis.requests.map(async (request: Request) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst responses = await BatchHelper.createMultipartRequest(request.baseURL, request.requestURLs);\n\n\t\t\t\t\tif (responses.length) {\n\t\t\t\t\t\tconst processedResponses = responses.map((response: string | Response) => {\n\t\t\t\t\t\t\tif (typeof response === \"string\") {\n\t\t\t\t\t\t\t\tresponse = JSON.parse(response) as Response;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn this._parseResponse(response);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// Call success callback, if any\n\t\t\t\t\t\tif (request.success && typeof request.success === \"function\") {\n\t\t\t\t\t\t\tawait request.success(processedResponses);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn processedResponses;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(\"Invalid response\");\n\t\t\t\t\t}\n\t\t\t\t} catch (error: unknown) {\n\t\t\t\t\tthis._handleError(error);\n\t\t\t\t} finally {\n\t\t\t\t\tthis._clearRequests();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Handles errors by updating the data and logging the error.\n\t *\n\t * @private\n\t * @param {Error} error - The error object to handle.\n\t */\n\tprivate _handleError(error: unknown) {\n\t\tthis._oData.displayTiles = this._oData.tiles = [];\n\t\tthis._oData.getSupported = this._oData.isLoaded = this._oData.hasError = true;\n\t\tthis._oData.illustrationType = \"sapIllus-UnableToLoad\";\n\t\tthis._oData.illustrationTitle = this._oData.illustrationDescription = \"\";\n\n\t\tLog.error(error as string);\n\t\tthis._controlModel.refresh();\n\t}\n\n\t/**\n\t * Clears the list of requests.\n\t *\n\t * @private\n\t */\n\tprotected _clearRequests() {\n\t\tthis.requests = [];\n\t}\n\n\t/**\n\t * Checks if the panel is loaded.\n\t *\n\t * @private\n\t * @returns {boolean} true if the panel is loaded, false otherwise.\n\t */\n\tpublic _isLoaded(): boolean {\n\t\treturn this._oData.isLoaded as boolean;\n\t}\n\n\t/**\n\t * Set the loaded status of the ToDoPanel.\n\t *\n\t * @private\n\t * @param {boolean} isLoaded - The new loaded status to set for the ToDoPanel.\n\t */\n\tpublic _setLoaded(isLoaded: boolean): void {\n\t\tthis._oData.isLoaded = isLoaded;\n\t}\n\n\t/**\n\t * Gets the supported status of the panel.\n\t *\n\t * @private\n\t * @returns {boolean} The supported status of the panel.\n\t */\n\tpublic _getSupported(): boolean {\n\t\treturn this._oData.getSupported as boolean;\n\t}\n\n\t/**\n\t * Sets the supported status of the panel.\n\t *\n\t * @private\n\t * @param {boolean} value - The value to set for supported status.\n\t */\n\tpublic _setSupported(isSupported: boolean): void {\n\t\tthis._oData.getSupported = isSupported;\n\t}\n\n\t/**\n\t * Extracts the app intent from the target app URL.\n\t *\n\t * @private\n\t * @returns {Intent | null} The app intent object with target and parameters, or null if not found.\n\t */\n\tpublic _getAppIntent(): Intent | null {\n\t\tconst pattern = /#([^?-]+)-([^?#]+)(?:\\?([^#]+))?(?:#.*)?/;\n\t\tconst match = this.getTargetAppUrl().match(pattern);\n\n\t\tif (match) {\n\t\t\tconst target = {\n\t\t\t\tsemanticObject: match[1],\n\t\t\t\taction: match[2]\n\t\t\t};\n\t\t\tconst params = {} as Record<string, string>;\n\n\t\t\tif (match[3]) {\n\t\t\t\tconst paramsArray = match[3].split(\"&\");\n\t\t\t\tfor (const param of paramsArray) {\n\t\t\t\t\tconst [key, value] = param.split(\"=\");\n\t\t\t\t\tparams[key] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttarget,\n\t\t\t\tparams\n\t\t\t};\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Switch to available tab if current panel has empty cards or has error\n\t *\n\t * @private\n\t * @async\n\t */\n\tprivate async _switchTabIfRequired() {\n\t\tconst container = this.getParent() as ToDosContainer;\n\t\tconst selectedKey = container?.getProperty(\"selectedKey\") as string;\n\n\t\tif (selectedKey === this.getProperty(\"key\") && (this._oData.length === 0 || this._oData.hasError)) {\n\t\t\tlet nextAvailablePanel;\n\t\t\tconst panels = container?.getAggregation(\"content\") as ToDoPanel[];\n\n\t\t\tfor (const panel of panels) {\n\t\t\t\tif (panel !== this) {\n\t\t\t\t\t//ensure that panel is loaded first\n\t\t\t\t\tawait panel._loadCards();\n\n\t\t\t\t\tif (panel._getSupported() && !panel._isLoaded() && panel._getCardCount() > 0) {\n\t\t\t\t\t\tnextAvailablePanel = panel;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (nextAvailablePanel) {\n\t\t\t\tcontainer?.setProperty(\"selectedKey\", nextAvailablePanel.getProperty(\"key\"));\n\t\t\t\tToDosContainer.cardCount = this._cardCount;\n\t\t\t\tawait nextAvailablePanel._loadCards(true);\n\t\t\t\tToDosContainer.cardCount = undefined;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handles the press event to view all items.\n\t *\n\t * @private\n\t */\n\tpublic _onPressViewAll() {\n\t\tURLHelper.redirect(this.getTargetAppUrl(), false);\n\t}\n\n\t/**\n\t * Retrieves the count of cards in the panel.\n\t *\n\t * @private\n\t * @returns {number} The number of cards.\n\t */\n\tpublic _getCardCount(): number {\n\t\treturn Number(this._oData.length);\n\t}\n\n\t/**\n\t * Handles actions to be performed before the To-Dos panel is expanded.\n\t * If the panel has not been expanded before in full screen, the cards will be loaded once.\n\t *\n\t * @private\n\t */\n\tprivate async _beforePanelExpand() {\n\t\tif (!this._oData.isExpandedOnce) {\n\t\t\tthis._oData.isExpandedOnce = true;\n\t\t\tawait this._loadCards(true);\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]}