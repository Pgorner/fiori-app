{"version":3,"file":"InsightsContainer.js","names":["sap","ui","define","__BaseContainer","___CardsPanel","__ErrorPanel","___TilesPanel","___utils_Device","_interopRequireDefault","obj","__esModule","default","BaseContainer","cardsMenuItems","ErrorPanel","tilesMenuItems","DeviceType","tilesPanelName","cardsPanelName","errorPanelName","InsightsContainer","extend","renderer","apiVersion","constructor","_constructor","id","settings","BaseContainer.prototype.constructor.call","this","_visiblePanels","_isInitialRender","init","_init","BaseContainer.prototype.init.call","setProperty","setTooltip","String","_i18nBundle","getText","onBeforeRendering","_onBeforeRendering","BaseContainer.prototype.onBeforeRendering.call","aContent","getContent","panels","forEach","oContent","tilesPanel","isA","push","cardsPanel","handleHidePanel","panel","handleRemoveActions","attachHandleHidePanel","attachHandleUnhidePanel","unhidePanelIfHidden","renderPanel","_handleHidePanel","removeContent","panelCount","length","_addContainerHeader","_errorPanel","getId","messageTitle","messageDescription","getData","addAggregation","menuItems","_handleNoPanelMenuItems","tilesCount","_handleTilesPanelMenuItems","cardsCount","_handleCardsPanelMenuItems","insightsSettingMenu","getAggregation","find","menu","removeAllAggregation","actionButtons","actionButton","menuItem","_removeContainerHeader","handleAddActions","REFRESH","valueOf","cardsPanelId","unshift","updatePanelsItemCount","_updatePanelsItemCount","itemCount","panelName","_unhidePanelIfHidden","includes","addContent","adjustLayout","_adjustLayout","toggleActionButtons","getDeviceType","Mobile"],"sources":["InsightsContainer.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport BaseContainer, { $BaseContainerSettings } from \"./BaseContainer\";\nimport BasePanel from \"./BasePanel\";\nimport CardsPanel, { cardsMenuItems } from \"./CardsPanel\";\nimport ErrorPanel from \"./ErrorPanel\";\nimport MenuItem from \"./MenuItem\";\nimport TilesPanel, { tilesMenuItems } from \"./TilesPanel\";\nimport { DeviceType } from \"./utils/Device\";\n\nconst tilesPanelName: string = \"sap.cux.home.TilesPanel\";\nconst cardsPanelName: string = \"sap.cux.home.CardsPanel\";\nconst errorPanelName: string = \"sap.cux.home.ErrorPanel\";\n\n/**\n *\n * Container class for managing and storing Insights Tiles and Insights Cards.\n *\n * @extends sap.cux.home.BaseContainer\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @internal\n * @experimental Since 1.121\n * @public\n *\n * @alias sap.cux.home.InsightsContainer\n */\n\nexport default class InsightsContainer extends BaseContainer {\n\tstatic renderer = {\n\t\t...BaseContainer.renderer,\n\t\tapiVersion: 2\n\t};\n\tprivate _visiblePanels: string[] = [];\n\tprivate tilesPanel!: TilesPanel;\n\tprivate cardsPanel!: CardsPanel;\n\tprivate tilesCount!: number;\n\tprivate cardsCount!: number;\n\tprivate _errorPanel!: ErrorPanel;\n\tprivate _isInitialRender: boolean = true;\n\n\t/**\n\t * Constructor for a new Insights container.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $BaseContainerSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tsuper.init();\n\t\tthis.setProperty(\"layout\", \"Vertical\");\n\t\tthis.setTooltip(String(this._i18nBundle.getText(\"insightLayoutSectionTitle\")));\n\t}\n\n\tpublic onBeforeRendering() {\n\t\tsuper.onBeforeRendering();\n\t\tif(this._isInitialRender) {\n\t\t\tconst aContent = this.getContent();\n\t\t\tconst panels: (TilesPanel | CardsPanel)[] = [];\n\t\t\t// Initially tiles & cards panels will be hidden till data is loaded in the individual panels are unhidden from panel level.\n\t\t\taContent.forEach((oContent) => {\n\t\t\t\tif (!this.tilesPanel && oContent.isA(tilesPanelName)) {\n\t\t\t\t\tthis.tilesPanel = oContent as TilesPanel;\n\t\t\t\t\tpanels.push(this.tilesPanel);\n\t\t\t\t}\n\t\t\t\tif (!this.cardsPanel && oContent.isA(cardsPanelName)) {\n\t\t\t\t\tthis.cardsPanel = oContent as CardsPanel;\n\t\t\t\t\tpanels.push(this.cardsPanel);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.handleHidePanel(this.tilesPanel);\n\t\t\tthis.handleHidePanel(this.cardsPanel);\n\t\n\t\t\t// Render individual panels\n\t\t\tpanels.forEach((panel) => {\n\t\t\t\tpanel.handleRemoveActions();\n\t\t\t\tpanel.attachHandleHidePanel(() => this.handleHidePanel(panel));\n\t\t\t\tpanel.attachHandleUnhidePanel(() => this.unhidePanelIfHidden(panel));\n\t\t\t\tvoid panel.renderPanel();\n\t\t\t});\n\t\t\tthis._isInitialRender = false;\n\t\t}\n\t}\n\n\t/**\n\t * handleHidePanel\n\t */\n\tpublic handleHidePanel(panel: BasePanel) {\n\t\tthis.removeContent(panel);\n\t\tconst panelCount = this.getContent()?.length;\n\t\tthis._addContainerHeader(this.getContent());\n\t\tif (panelCount === 0) {\n\t\t\tif (!this._errorPanel) {\n\t\t\t\tthis._errorPanel = new ErrorPanel(`${this.getId()}-errorPanel`, {\n\t\t\t\t\tmessageTitle: this._i18nBundle.getText(\"noAppsTitle\"),\n\t\t\t\t\tmessageDescription: this._i18nBundle.getText(\"noInsightsMsg\")\n\t\t\t\t});\n\t\t\t\tthis._errorPanel.getData();\n\t\t\t}\n\t\t\tthis.addAggregation(\"content\", this._errorPanel);\n\t\t} else if (panelCount === 1) {\n\t\t\tconst panel = this.getContent()[0];\n\t\t\tif(!panel.isA(errorPanelName)) {\n\t\t\t\t(panel as TilesPanel | CardsPanel)?.handleRemoveActions();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _addContainerHeader(panels: BasePanel[]) {\n\t\tthis.setProperty(\"title\", this._i18nBundle?.getText(\"insights\"));\n\t\tthis.setProperty(\"enableSettings\", true);\n\t\tconst menuItems: MenuItem[] = [];\n\t\tif (panels.length === 0 || panels[0]?.isA(errorPanelName)) {\n\t\t\tthis._visiblePanels = [];\n\t\t\tmenuItems.push(...this._handleNoPanelMenuItems());\n\t\t} else if (panels.length === 1) {\n\t\t\tif (panels[0].isA(tilesPanelName)) {\n\t\t\t\tthis._visiblePanels = [tilesPanelName];\n\t\t\t\tthis.setProperty(\"title\", `${this._i18nBundle?.getText(\"insights\")} (${this.tilesCount || 0})`);\n\t\t\t\tmenuItems.push(...this._handleTilesPanelMenuItems());\n\t\t\t}\n\t\t\tif (panels[0].isA(cardsPanelName)) {\n\t\t\t\tthis._visiblePanels = [cardsPanelName];\n\t\t\t\tthis.setProperty(\"title\", `${this._i18nBundle?.getText(\"insights\")} (${this.cardsCount || 0})`);\n\t\t\t\tmenuItems.push(...this._handleCardsPanelMenuItems());\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Add Insights Settings Menu Item\n\t\tconst insightsSettingMenu = (this.getAggregation(\"menuItems\") as MenuItem[] || [])?.find(menu => menu.getId() === `${this.getId()}-settings`);\n\t\tif(insightsSettingMenu) {\n\t\t\tmenuItems.push(insightsSettingMenu);\n\t\t}\n\n\t\t// Remove Existing Aggregations\n\t\tthis.removeAllAggregation(\"menuItems\");\n\t\tthis.removeAllAggregation(\"actionButtons\");\n\n\t\t// Add Tiles Action Buttons to Container Action Buttons\n\t\tthis.tilesPanel.actionButtons.forEach((actionButton) => this.addAggregation(\"actionButtons\", actionButton));\n\t\tmenuItems.forEach((menuItem) => this.addAggregation(\"menuItems\", menuItem));\n\t}\n\n\tprivate _removeContainerHeader() {\n\t\tthis.setProperty(\"title\", \"\");\n\t\tthis.setProperty(\"enableSettings\", false);\n\t\tthis.removeAllAggregation(\"menuItems\");\n\t\tthis.removeAllAggregation(\"actionButtons\");\n\t\tthis.getContent().forEach((panel) => (panel as TilesPanel | CardsPanel).handleAddActions());\n\t}\n\n\tprivate _handleNoPanelMenuItems() {\n\t\t// In case of No Panels, Except Refresh all menu itmes should be shown\n\t\tconst menuItems: MenuItem[] = [];\n\t\tthis.tilesPanel.menuItems.forEach((menuItem) => {\n\t\t\tif (menuItem.getId() !== tilesMenuItems.REFRESH.valueOf()) {\n\t\t\t\tmenuItems.push(menuItem);\n\t\t\t}\n\t\t});\n\t\tconst cardsPanelId = this.cardsPanel.getId();\n\t\tthis.cardsPanel.menuItems.forEach((menuItem) => {\n\t\t\tif (menuItem.getId() !== `${cardsPanelId}-${cardsMenuItems.REFRESH.valueOf()}`) {\n\t\t\t\tmenuItems.push(menuItem);\n\t\t\t}\n\t\t});\n\t\treturn menuItems;\n\t}\n\n\tprivate _handleTilesPanelMenuItems() {\n\t\t// In case of TilesPanel visible, Except CardsPanel Refresh all menu itmes should be shown\n\t\tconst menuItems: MenuItem[] = [];\n\t\tthis.tilesPanel.menuItems.forEach((menuItem) => menuItems.push(menuItem));\n\t\tconst cardsPanelId = this.cardsPanel.getId();\n\t\tthis.cardsPanel.menuItems.forEach((menuItem) => {\n\t\t\tif (menuItem.getId() !== `${cardsPanelId}-${cardsMenuItems.REFRESH.valueOf()}`) {\n\t\t\t\tmenuItems.push(menuItem);\n\t\t\t}\n\t\t});\n\t\treturn menuItems;\n\t}\n\n\tprivate _handleCardsPanelMenuItems() {\n\t\t// In case of CardsPanel visible, Except TilesPanel Refresh all menu itmes should be shown and CardsPanel refresh should be shown at the top.\n\t\tconst menuItems: MenuItem[] = [];\n\t\tthis.tilesPanel.menuItems.forEach((menuItem) => {\n\t\t\tif (menuItem.getId() !== tilesMenuItems.REFRESH.valueOf()) {\n\t\t\t\tmenuItems.push(menuItem);\n\t\t\t}\n\t\t});\n\t\tconst cardsPanelId = this.cardsPanel.getId();\n\t\tthis.cardsPanel.menuItems.forEach((menuItem) => {\n\t\t\tif (menuItem.getId() === `${cardsPanelId}-${cardsMenuItems.REFRESH.valueOf()}`) {\n\t\t\t\tmenuItems.unshift(menuItem);\n\t\t\t} else {\n\t\t\t\tmenuItems.push(menuItem);\n\t\t\t}\n\t\t});\n\t\treturn menuItems;\n\t}\n\n\tpublic updatePanelsItemCount(itemCount: number, panelName: string) {\n\t\tif (panelName === tilesPanelName) {\n\t\t\tthis.tilesCount = itemCount;\n\t\t} else if (panelName === cardsPanelName) {\n\t\t\tthis.cardsCount = itemCount;\n\t\t}\n\t\t// Container Title Will be displayed only in case of only one panel is present\n\t\tif (this.getContent().length === 1) {\n\t\t\tthis.setProperty(\"title\", `${this._i18nBundle?.getText(\"insights\")} (${itemCount || 0})`);\n\t\t}\n\t}\n\n\tpublic unhidePanelIfHidden(panel: TilesPanel | CardsPanel) {\n\t\tthis.removeContent(this._errorPanel);\n\t\tif (panel.isA(tilesPanelName) && !this._visiblePanels.includes(tilesPanelName)) {\n\t\t\tthis._visiblePanels.push(tilesPanelName);\n\t\t\tif (this._visiblePanels.includes(cardsPanelName)) {\n\t\t\t\tthis.removeContent(this.cardsPanel);\n\t\t\t\tthis.addContent(this.tilesPanel);\n\t\t\t\tthis.addContent(this.cardsPanel);\n\t\t\t} else {\n\t\t\t\tthis.addContent(this.tilesPanel);\n\t\t\t}\n\t\t\tconst panels = this.getContent();\n\t\t\tif (panels.length > 1) {\n\t\t\t\tthis._removeContainerHeader();\n\t\t\t} else {\n\t\t\t\tthis._addContainerHeader(panels);\n\t\t\t}\n\t\t}\n\n\t\tif (panel.isA(cardsPanelName) && !this._visiblePanels.includes(cardsPanelName)) {\n\t\t\tthis._visiblePanels.push(cardsPanelName);\n\t\t\tthis.addContent(this.cardsPanel);\n\t\t\tconst panels = this.getContent();\n\t\t\tif (panels.length === 2) {\n\t\t\t\tthis._removeContainerHeader();\n\t\t\t} else {\n\t\t\t\tthis._addContainerHeader(panels);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Adjusts the layout of the container.\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic adjustLayout() {\n\t\t//hide actions if the device is a phone\n\t\tthis.toggleActionButtons(this.getDeviceType() !== DeviceType.Mobile);\n\n\t\t//adjust layout of all panels\n\t\t(this.getContent() as (TilesPanel | CardsPanel)[]).forEach((panel) => panel._adjustLayout?.());\n\t}\n}\n"],"mappings":"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","ignoreList":[]}